
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022630  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b78  080226f0  080226f0  000236f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025268  08025268  00027420  2**0
                  CONTENTS
  4 .ARM          00000008  08025268  08025268  00026268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025270  08025270  00027420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025270  08025270  00026270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025274  08025274  00026274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08025278  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  20000420  08025698  00027420  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003900  08025698  00027900  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032b35  00000000  00000000  00027448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009155  00000000  00000000  00059f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a50  00000000  00000000  000630d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f5f  00000000  00000000  00065b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223be  00000000  00000000  00067a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040680  00000000  00000000  00089e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0372  00000000  00000000  000ca4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016a837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acb4  00000000  00000000  0016a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017559c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00175609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00177b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080226d8 	.word	0x080226d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	080226d8 	.word	0x080226d8

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08024484 	.word	0x08024484
 8000e0c:	080244c4 	.word	0x080244c4
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08024500 	.word	0x08024500
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fe78 	bl	800f358 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b fecf 	bl	800f428 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fe82 	bl	800f3b4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b fdfe 	bl	800f358 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fe2d 	bl	800f3d0 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fe11 	bl	800f3b4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a fdae 	bl	800e318 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000994 	.word	0x20000994

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fc84 	bl	80060e4 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fce1 	bl	80061a8 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a8 	.word	0x200009a8
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b4 	.word	0x200009b4
 8003864:	200009b8 	.word	0x200009b8

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009bc 	.word	0x200009bc
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009dc 	.word	0x200009dc
 80038d0:	200009e0 	.word	0x200009e0

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setHIDS>:
void setHIDS(float temp, float humid){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <setHIDS+0x20>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <setHIDS+0x24>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000564 	.word	0x20000564
 8003920:	20000568 	.word	0x20000568

08003924 <setVOC>:
void setVOC(uint16_t voc){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setVOC+0x1c>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	801a      	strh	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000574 	.word	0x20000574

08003944 <setMic>:
void setMic(float dB){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <setMic+0x18>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	20000578 	.word	0x20000578

08003960 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	1dbb      	adds	r3, r7, #6
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	1c0a      	adds	r2, r1, #0
 8003970:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003972:	1dbb      	adds	r3, r7, #6
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	0018      	movs	r0, r3
 8003978:	f7fd fe2a 	bl	80015d0 <__aeabi_i2f>
 800397c:	1c03      	adds	r3, r0, #0
 800397e:	490d      	ldr	r1, [pc, #52]	@ (80039b4 <setPMs+0x54>)
 8003980:	1c18      	adds	r0, r3, #0
 8003982:	f7fd f927 	bl	8000bd4 <__aeabi_fdiv>
 8003986:	1c03      	adds	r3, r0, #0
 8003988:	1c1a      	adds	r2, r3, #0
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <setPMs+0x58>)
 800398c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd fe1c 	bl	80015d0 <__aeabi_i2f>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <setPMs+0x54>)
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	f7fd f919 	bl	8000bd4 <__aeabi_fdiv>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c1a      	adds	r2, r3, #0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <setPMs+0x5c>)
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	41200000 	.word	0x41200000
 80039b8:	2000057c 	.word	0x2000057c
 80039bc:	20000580 	.word	0x20000580

080039c0 <SetConfigMode>:

void SetConfigMode(){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039c4:	4b02      	ldr	r3, [pc, #8]	@ (80039d0 <SetConfigMode+0x10>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000054b 	.word	0x2000054b

080039d4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039d8:	f00a fce8 	bl	800e3ac <HAL_GetUIDw0>
 80039dc:	0002      	movs	r2, r0
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <ESP_GetUID+0x28>)
 80039e0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039e2:	f00a fced 	bl	800e3c0 <HAL_GetUIDw1>
 80039e6:	0002      	movs	r2, r0
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <ESP_GetUID+0x28>)
 80039ea:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ec:	f00a fcf2 	bl	800e3d4 <HAL_GetUIDw2>
 80039f0:	0002      	movs	r2, r0
 80039f2:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <ESP_GetUID+0x28>)
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000550 	.word	0x20000550

08003a00 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <ESP_Init+0x2c>)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <ESP_Init+0x30>)
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a14:	f7ff ffde 	bl	80039d4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a18:	f7ff fef0 	bl	80037fc <checkEEprom>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	001a      	movs	r2, r3
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <ESP_Init+0x34>)
 8003a22:	701a      	strb	r2, [r3, #0]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000440 	.word	0x20000440
 8003a30:	20000028 	.word	0x20000028
 8003a34:	2000054e 	.word	0x2000054e

08003a38 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	000a      	movs	r2, r1
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <ESP_Send+0x54>)
 8003a4a:	4911      	ldr	r1, [pc, #68]	@ (8003a90 <ESP_Send+0x58>)
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	f00a f817 	bl	800da80 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <ESP_Send+0x5c>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	250f      	movs	r5, #15
 8003a58:	197c      	adds	r4, r7, r5
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0019      	movs	r1, r3
 8003a62:	f012 ff6d 	bl	8016940 <HAL_UART_Transmit_DMA>
 8003a66:	0003      	movs	r3, r0
 8003a68:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a6a:	197b      	adds	r3, r7, r5
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a72:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <ESP_Send+0x60>)
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <ESP_Send+0x64>)
 8003a76:	0019      	movs	r1, r3
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f00a f801 	bl	800da80 <CreateLine>
    return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <ESP_Send+0x4c>
  }
  return true;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	080226f0 	.word	0x080226f0
 8003a90:	08022700 	.word	0x08022700
 8003a94:	20000440 	.word	0x20000440
 8003a98:	08022704 	.word	0x08022704
 8003a9c:	08022724 	.word	0x08022724

08003aa0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003aae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba4 <ESP_Receive+0x104>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba8 <ESP_Receive+0x108>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	250f      	movs	r5, #15
 8003aba:	197c      	adds	r4, r7, r5
 8003abc:	1cbb      	adds	r3, r7, #2
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	f012 ffcc 	bl	8016a60 <HAL_UART_Receive_DMA>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003acc:	002c      	movs	r4, r5
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d060      	beq.n	8003b98 <ESP_Receive+0xf8>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ad6:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <ESP_Receive+0x108>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2284      	movs	r2, #132	@ 0x84
 8003adc:	589b      	ldr	r3, [r3, r2]
 8003ade:	4a33      	ldr	r2, [pc, #204]	@ (8003bac <ESP_Receive+0x10c>)
 8003ae0:	4933      	ldr	r1, [pc, #204]	@ (8003bb0 <ESP_Receive+0x110>)
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f009 ffcc 	bl	800da80 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d005      	beq.n	8003afe <ESP_Receive+0x5e>
      Error("Parity error in UART to ESP module");
 8003af2:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <ESP_Receive+0x114>)
 8003af4:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb0 <ESP_Receive+0x110>)
 8003af6:	0019      	movs	r1, r3
 8003af8:	2001      	movs	r0, #1
 8003afa:	f009 ffc1 	bl	800da80 <CreateLine>
    }
    if (status & HAL_UART_ERROR_NE) {
 8003afe:	230f      	movs	r3, #15
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d005      	beq.n	8003b16 <ESP_Receive+0x76>
      Error("Noise error in UART to ESP module");
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb8 <ESP_Receive+0x118>)
 8003b0c:	4b28      	ldr	r3, [pc, #160]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	2001      	movs	r0, #1
 8003b12:	f009 ffb5 	bl	800da80 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b16:	230f      	movs	r3, #15
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d005      	beq.n	8003b2e <ESP_Receive+0x8e>
      Error("Frame error in UART to ESP module");
 8003b22:	4a26      	ldr	r2, [pc, #152]	@ (8003bbc <ESP_Receive+0x11c>)
 8003b24:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b26:	0019      	movs	r1, r3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f009 ffa9 	bl	800da80 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b2e:	230f      	movs	r3, #15
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2208      	movs	r2, #8
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <ESP_Receive+0xa6>
      Error("Overrun error in UART to ESP module");
 8003b3a:	4a21      	ldr	r2, [pc, #132]	@ (8003bc0 <ESP_Receive+0x120>)
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b3e:	0019      	movs	r1, r3
 8003b40:	2001      	movs	r0, #1
 8003b42:	f009 ff9d 	bl	800da80 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b46:	230f      	movs	r3, #15
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d005      	beq.n	8003b5e <ESP_Receive+0xbe>
      Error("DMA transfer error in UART to ESP module");
 8003b52:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <ESP_Receive+0x124>)
 8003b54:	4b16      	ldr	r3, [pc, #88]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b56:	0019      	movs	r1, r3
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f009 ff91 	bl	800da80 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b5e:	230f      	movs	r3, #15
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	d005      	beq.n	8003b76 <ESP_Receive+0xd6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b6a:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <ESP_Receive+0x128>)
 8003b6c:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b6e:	0019      	movs	r1, r3
 8003b70:	2001      	movs	r0, #1
 8003b72:	f009 ff85 	bl	800da80 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b76:	230f      	movs	r3, #15
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2240      	movs	r2, #64	@ 0x40
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d005      	beq.n	8003b8e <ESP_Receive+0xee>
      Error("Invalid Callback error in UART to ESP module");
 8003b82:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <ESP_Receive+0x12c>)
 8003b84:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b86:	0019      	movs	r1, r3
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f009 ff79 	bl	800da80 <CreateLine>
    }
#endif
    RxComplete = true;
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <ESP_Receive+0x104>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
    return false;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <ESP_Receive+0xfa>
  }
  return true;
 8003b98:	2301      	movs	r3, #1
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	20000444 	.word	0x20000444
 8003ba8:	20000440 	.word	0x20000440
 8003bac:	08022728 	.word	0x08022728
 8003bb0:	08022724 	.word	0x08022724
 8003bb4:	08022758 	.word	0x08022758
 8003bb8:	0802277c 	.word	0x0802277c
 8003bbc:	080227a0 	.word	0x080227a0
 8003bc0:	080227c4 	.word	0x080227c4
 8003bc4:	080227e8 	.word	0x080227e8
 8003bc8:	08022814 	.word	0x08022814
 8003bcc:	08022844 	.word	0x08022844

08003bd0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <HAL_UART_ErrorCallback+0x34>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10c      	bne.n	8003bfc <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2284      	movs	r2, #132	@ 0x84
 8003be6:	589b      	ldr	r3, [r3, r2]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d007      	beq.n	8003bfc <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2284      	movs	r2, #132	@ 0x84
 8003bf0:	589b      	ldr	r3, [r3, r2]
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_UART_ErrorCallback+0x38>)
 8003bf4:	4905      	ldr	r1, [pc, #20]	@ (8003c0c <HAL_UART_ErrorCallback+0x3c>)
 8003bf6:	2003      	movs	r0, #3
 8003bf8:	f009 ff42 	bl	800da80 <CreateLine>
    }
  }
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000440 	.word	0x20000440
 8003c08:	08022874 	.word	0x08022874
 8003c0c:	08022700 	.word	0x08022700

08003c10 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e010      	b.n	8003c42 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	001a      	movs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1898      	adds	r0, r3, r2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	18d3      	adds	r3, r2, r3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	001a      	movs	r2, r3
 8003c34:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <uint8ArrayToString+0x44>)
 8003c36:	0019      	movs	r1, r3
 8003c38:	f01b fc6c 	bl	801f514 <siprintf>
  for (int i = 0; i < 12; i++)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b0b      	cmp	r3, #11
 8003c46:	ddeb      	ble.n	8003c20 <uint8ArrayToString+0x10>
  }
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	080228a0 	.word	0x080228a0

08003c58 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	0002      	movs	r2, r0
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003c64:	4be5      	ldr	r3, [pc, #916]	@ (8003ffc <CreateMessage+0x3a4>)
 8003c66:	48e6      	ldr	r0, [pc, #920]	@ (8004000 <CreateMessage+0x3a8>)
 8003c68:	220c      	movs	r2, #12
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	f7ff fd44 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003c70:	4be4      	ldr	r3, [pc, #912]	@ (8004004 <CreateMessage+0x3ac>)
 8003c72:	48e5      	ldr	r0, [pc, #916]	@ (8004008 <CreateMessage+0x3b0>)
 8003c74:	220c      	movs	r2, #12
 8003c76:	0019      	movs	r1, r3
 8003c78:	f7ff fd3e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003c7c:	4be3      	ldr	r3, [pc, #908]	@ (800400c <CreateMessage+0x3b4>)
 8003c7e:	48e4      	ldr	r0, [pc, #912]	@ (8004010 <CreateMessage+0x3b8>)
 8003c80:	220c      	movs	r2, #12
 8003c82:	0019      	movs	r1, r3
 8003c84:	f7ff fd38 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003c88:	4be2      	ldr	r3, [pc, #904]	@ (8004014 <CreateMessage+0x3bc>)
 8003c8a:	48e3      	ldr	r0, [pc, #908]	@ (8004018 <CreateMessage+0x3c0>)
 8003c8c:	220c      	movs	r2, #12
 8003c8e:	0019      	movs	r1, r3
 8003c90:	f7ff fd32 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003c94:	4be1      	ldr	r3, [pc, #900]	@ (800401c <CreateMessage+0x3c4>)
 8003c96:	48e2      	ldr	r0, [pc, #904]	@ (8004020 <CreateMessage+0x3c8>)
 8003c98:	220c      	movs	r2, #12
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	f7ff fd2c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003ca0:	4be0      	ldr	r3, [pc, #896]	@ (8004024 <CreateMessage+0x3cc>)
 8003ca2:	48e1      	ldr	r0, [pc, #900]	@ (8004028 <CreateMessage+0x3d0>)
 8003ca4:	220c      	movs	r2, #12
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	f7ff fd26 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003cac:	4bdf      	ldr	r3, [pc, #892]	@ (800402c <CreateMessage+0x3d4>)
 8003cae:	48e0      	ldr	r0, [pc, #896]	@ (8004030 <CreateMessage+0x3d8>)
 8003cb0:	220c      	movs	r2, #12
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	f7ff fd20 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003cb8:	4bde      	ldr	r3, [pc, #888]	@ (8004034 <CreateMessage+0x3dc>)
 8003cba:	48df      	ldr	r0, [pc, #892]	@ (8004038 <CreateMessage+0x3e0>)
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	f7ff fd1a 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003cc4:	f7ff fdd0 	bl	8003868 <checkName>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d006      	beq.n	8003cda <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003ccc:	4bdb      	ldr	r3, [pc, #876]	@ (800403c <CreateMessage+0x3e4>)
 8003cce:	48dc      	ldr	r0, [pc, #880]	@ (8004040 <CreateMessage+0x3e8>)
 8003cd0:	221e      	movs	r2, #30
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	f7ff fd10 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003cd8:	e005      	b.n	8003ce6 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003cda:	4bd8      	ldr	r3, [pc, #864]	@ (800403c <CreateMessage+0x3e4>)
 8003cdc:	4ad9      	ldr	r2, [pc, #868]	@ (8004044 <CreateMessage+0x3ec>)
 8003cde:	6811      	ldr	r1, [r2, #0]
 8003ce0:	6019      	str	r1, [r3, #0]
 8003ce2:	7912      	ldrb	r2, [r2, #4]
 8003ce4:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003ce6:	f7ff fd75 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	00da      	lsls	r2, r3, #3
 8003cee:	4bd6      	ldr	r3, [pc, #856]	@ (8004048 <CreateMessage+0x3f0>)
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f01b fd52 	bl	801f79c <memset>
  uint16_t index = 0;
 8003cf8:	260e      	movs	r6, #14
 8003cfa:	19bb      	adds	r3, r7, r6
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003d00:	19bb      	adds	r3, r7, r6
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	4bd0      	ldr	r3, [pc, #832]	@ (8004048 <CreateMessage+0x3f0>)
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	4ad0      	ldr	r2, [pc, #832]	@ (800404c <CreateMessage+0x3f4>)
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f01b fc01 	bl	801f514 <siprintf>
  index = strlen(message);
 8003d12:	4bcd      	ldr	r3, [pc, #820]	@ (8004048 <CreateMessage+0x3f0>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fc fa29 	bl	800016c <strlen>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	19bb      	adds	r3, r7, r6
 8003d1e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003d20:	4ab6      	ldr	r2, [pc, #728]	@ (8003ffc <CreateMessage+0x3a4>)
 8003d22:	4bcb      	ldr	r3, [pc, #812]	@ (8004050 <CreateMessage+0x3f8>)
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7ff ff72 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003d2c:	19bb      	adds	r3, r7, r6
 8003d2e:	881a      	ldrh	r2, [r3, #0]
 8003d30:	4bc5      	ldr	r3, [pc, #788]	@ (8004048 <CreateMessage+0x3f0>)
 8003d32:	18d4      	adds	r4, r2, r3
 8003d34:	4bc7      	ldr	r3, [pc, #796]	@ (8004054 <CreateMessage+0x3fc>)
 8003d36:	689d      	ldr	r5, [r3, #8]
 8003d38:	4bc7      	ldr	r3, [pc, #796]	@ (8004058 <CreateMessage+0x400>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1c18      	adds	r0, r3, #0
 8003d3e:	f7ff fb91 	bl	8003464 <__aeabi_f2d>
 8003d42:	0002      	movs	r2, r0
 8003d44:	000b      	movs	r3, r1
 8003d46:	48bd      	ldr	r0, [pc, #756]	@ (800403c <CreateMessage+0x3e4>)
 8003d48:	49c4      	ldr	r1, [pc, #784]	@ (800405c <CreateMessage+0x404>)
 8003d4a:	9202      	str	r2, [sp, #8]
 8003d4c:	9303      	str	r3, [sp, #12]
 8003d4e:	4bc0      	ldr	r3, [pc, #768]	@ (8004050 <CreateMessage+0x3f8>)
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	0003      	movs	r3, r0
 8003d54:	002a      	movs	r2, r5
 8003d56:	0020      	movs	r0, r4
 8003d58:	f01b fbdc 	bl	801f514 <siprintf>
  index = strlen(message);
 8003d5c:	4bba      	ldr	r3, [pc, #744]	@ (8004048 <CreateMessage+0x3f0>)
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc fa04 	bl	800016c <strlen>
 8003d64:	0002      	movs	r2, r0
 8003d66:	19bb      	adds	r3, r7, r6
 8003d68:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003d6a:	4aa6      	ldr	r2, [pc, #664]	@ (8004004 <CreateMessage+0x3ac>)
 8003d6c:	4bb8      	ldr	r3, [pc, #736]	@ (8004050 <CreateMessage+0x3f8>)
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff ff4d 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003d76:	19bb      	adds	r3, r7, r6
 8003d78:	881a      	ldrh	r2, [r3, #0]
 8003d7a:	4bb3      	ldr	r3, [pc, #716]	@ (8004048 <CreateMessage+0x3f0>)
 8003d7c:	18d4      	adds	r4, r2, r3
 8003d7e:	4bb5      	ldr	r3, [pc, #724]	@ (8004054 <CreateMessage+0x3fc>)
 8003d80:	689d      	ldr	r5, [r3, #8]
 8003d82:	4bb7      	ldr	r3, [pc, #732]	@ (8004060 <CreateMessage+0x408>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	1c18      	adds	r0, r3, #0
 8003d88:	f7ff fb6c 	bl	8003464 <__aeabi_f2d>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	48aa      	ldr	r0, [pc, #680]	@ (800403c <CreateMessage+0x3e4>)
 8003d92:	49b4      	ldr	r1, [pc, #720]	@ (8004064 <CreateMessage+0x40c>)
 8003d94:	9202      	str	r2, [sp, #8]
 8003d96:	9303      	str	r3, [sp, #12]
 8003d98:	4bad      	ldr	r3, [pc, #692]	@ (8004050 <CreateMessage+0x3f8>)
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	002a      	movs	r2, r5
 8003da0:	0020      	movs	r0, r4
 8003da2:	f01b fbb7 	bl	801f514 <siprintf>
  index = strlen(message);
 8003da6:	4ba8      	ldr	r3, [pc, #672]	@ (8004048 <CreateMessage+0x3f0>)
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc f9df 	bl	800016c <strlen>
 8003dae:	0002      	movs	r2, r0
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003db4:	4a95      	ldr	r2, [pc, #596]	@ (800400c <CreateMessage+0x3b4>)
 8003db6:	4ba6      	ldr	r3, [pc, #664]	@ (8004050 <CreateMessage+0x3f8>)
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff ff28 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003dc0:	19bb      	adds	r3, r7, r6
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	4ba0      	ldr	r3, [pc, #640]	@ (8004048 <CreateMessage+0x3f0>)
 8003dc6:	18d4      	adds	r4, r2, r3
 8003dc8:	4ba2      	ldr	r3, [pc, #648]	@ (8004054 <CreateMessage+0x3fc>)
 8003dca:	689d      	ldr	r5, [r3, #8]
 8003dcc:	4ba6      	ldr	r3, [pc, #664]	@ (8004068 <CreateMessage+0x410>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c18      	adds	r0, r3, #0
 8003dd2:	f7ff fb47 	bl	8003464 <__aeabi_f2d>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	000b      	movs	r3, r1
 8003dda:	4898      	ldr	r0, [pc, #608]	@ (800403c <CreateMessage+0x3e4>)
 8003ddc:	49a3      	ldr	r1, [pc, #652]	@ (800406c <CreateMessage+0x414>)
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	4b9b      	ldr	r3, [pc, #620]	@ (8004050 <CreateMessage+0x3f8>)
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	0003      	movs	r3, r0
 8003de8:	002a      	movs	r2, r5
 8003dea:	0020      	movs	r0, r4
 8003dec:	f01b fb92 	bl	801f514 <siprintf>
  index = strlen(message);
 8003df0:	4b95      	ldr	r3, [pc, #596]	@ (8004048 <CreateMessage+0x3f0>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fc f9ba 	bl	800016c <strlen>
 8003df8:	0002      	movs	r2, r0
 8003dfa:	19bb      	adds	r3, r7, r6
 8003dfc:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003dfe:	4a85      	ldr	r2, [pc, #532]	@ (8004014 <CreateMessage+0x3bc>)
 8003e00:	4b93      	ldr	r3, [pc, #588]	@ (8004050 <CreateMessage+0x3f8>)
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff ff03 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003e0a:	19bb      	adds	r3, r7, r6
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004048 <CreateMessage+0x3f0>)
 8003e10:	18d0      	adds	r0, r2, r3
 8003e12:	4b90      	ldr	r3, [pc, #576]	@ (8004054 <CreateMessage+0x3fc>)
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	4b96      	ldr	r3, [pc, #600]	@ (8004070 <CreateMessage+0x418>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	4c88      	ldr	r4, [pc, #544]	@ (800403c <CreateMessage+0x3e4>)
 8003e1c:	4995      	ldr	r1, [pc, #596]	@ (8004074 <CreateMessage+0x41c>)
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	4b8b      	ldr	r3, [pc, #556]	@ (8004050 <CreateMessage+0x3f8>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	0023      	movs	r3, r4
 8003e26:	f01b fb75 	bl	801f514 <siprintf>
  index = strlen(message);
 8003e2a:	4b87      	ldr	r3, [pc, #540]	@ (8004048 <CreateMessage+0x3f0>)
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc f99d 	bl	800016c <strlen>
 8003e32:	0002      	movs	r2, r0
 8003e34:	19bb      	adds	r3, r7, r6
 8003e36:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003e38:	1dfb      	adds	r3, r7, #7
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4053      	eors	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <CreateMessage+0x1f0>
 8003e46:	e094      	b.n	8003f72 <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003e48:	4a74      	ldr	r2, [pc, #464]	@ (800401c <CreateMessage+0x3c4>)
 8003e4a:	4b81      	ldr	r3, [pc, #516]	@ (8004050 <CreateMessage+0x3f8>)
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff fede 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003e54:	19bb      	adds	r3, r7, r6
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	4b7b      	ldr	r3, [pc, #492]	@ (8004048 <CreateMessage+0x3f0>)
 8003e5a:	18d4      	adds	r4, r2, r3
 8003e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8004054 <CreateMessage+0x3fc>)
 8003e5e:	689d      	ldr	r5, [r3, #8]
 8003e60:	4b85      	ldr	r3, [pc, #532]	@ (8004078 <CreateMessage+0x420>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1c18      	adds	r0, r3, #0
 8003e66:	f7ff fafd 	bl	8003464 <__aeabi_f2d>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	000b      	movs	r3, r1
 8003e6e:	4873      	ldr	r0, [pc, #460]	@ (800403c <CreateMessage+0x3e4>)
 8003e70:	4982      	ldr	r1, [pc, #520]	@ (800407c <CreateMessage+0x424>)
 8003e72:	9202      	str	r2, [sp, #8]
 8003e74:	9303      	str	r3, [sp, #12]
 8003e76:	4b76      	ldr	r3, [pc, #472]	@ (8004050 <CreateMessage+0x3f8>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	002a      	movs	r2, r5
 8003e7e:	0020      	movs	r0, r4
 8003e80:	f01b fb48 	bl	801f514 <siprintf>
    index = strlen(message);
 8003e84:	4b70      	ldr	r3, [pc, #448]	@ (8004048 <CreateMessage+0x3f0>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fc f970 	bl	800016c <strlen>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	19bb      	adds	r3, r7, r6
 8003e90:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003e92:	4a64      	ldr	r2, [pc, #400]	@ (8004024 <CreateMessage+0x3cc>)
 8003e94:	4b6e      	ldr	r3, [pc, #440]	@ (8004050 <CreateMessage+0x3f8>)
 8003e96:	0011      	movs	r1, r2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff feb9 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003e9e:	19bb      	adds	r3, r7, r6
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <CreateMessage+0x3f0>)
 8003ea4:	18d4      	adds	r4, r2, r3
 8003ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8004054 <CreateMessage+0x3fc>)
 8003ea8:	689d      	ldr	r5, [r3, #8]
 8003eaa:	4b75      	ldr	r3, [pc, #468]	@ (8004080 <CreateMessage+0x428>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c18      	adds	r0, r3, #0
 8003eb0:	f7ff fad8 	bl	8003464 <__aeabi_f2d>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	000b      	movs	r3, r1
 8003eb8:	4860      	ldr	r0, [pc, #384]	@ (800403c <CreateMessage+0x3e4>)
 8003eba:	4972      	ldr	r1, [pc, #456]	@ (8004084 <CreateMessage+0x42c>)
 8003ebc:	9202      	str	r2, [sp, #8]
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <CreateMessage+0x3f8>)
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	002a      	movs	r2, r5
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f01b fb23 	bl	801f514 <siprintf>
    index = strlen(message);
 8003ece:	4b5e      	ldr	r3, [pc, #376]	@ (8004048 <CreateMessage+0x3f0>)
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7fc f94b 	bl	800016c <strlen>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003edc:	4a53      	ldr	r2, [pc, #332]	@ (800402c <CreateMessage+0x3d4>)
 8003ede:	4b5c      	ldr	r3, [pc, #368]	@ (8004050 <CreateMessage+0x3f8>)
 8003ee0:	0011      	movs	r1, r2
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff fe94 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003ee8:	19bb      	adds	r3, r7, r6
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	4b56      	ldr	r3, [pc, #344]	@ (8004048 <CreateMessage+0x3f0>)
 8003eee:	18d4      	adds	r4, r2, r3
 8003ef0:	4b58      	ldr	r3, [pc, #352]	@ (8004054 <CreateMessage+0x3fc>)
 8003ef2:	689d      	ldr	r5, [r3, #8]
 8003ef4:	4b64      	ldr	r3, [pc, #400]	@ (8004088 <CreateMessage+0x430>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1c18      	adds	r0, r3, #0
 8003efa:	f7ff fab3 	bl	8003464 <__aeabi_f2d>
 8003efe:	0002      	movs	r2, r0
 8003f00:	000b      	movs	r3, r1
 8003f02:	484e      	ldr	r0, [pc, #312]	@ (800403c <CreateMessage+0x3e4>)
 8003f04:	4961      	ldr	r1, [pc, #388]	@ (800408c <CreateMessage+0x434>)
 8003f06:	9202      	str	r2, [sp, #8]
 8003f08:	9303      	str	r3, [sp, #12]
 8003f0a:	4b51      	ldr	r3, [pc, #324]	@ (8004050 <CreateMessage+0x3f8>)
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	0003      	movs	r3, r0
 8003f10:	002a      	movs	r2, r5
 8003f12:	0020      	movs	r0, r4
 8003f14:	f01b fafe 	bl	801f514 <siprintf>
    index = strlen(message);
 8003f18:	4b4b      	ldr	r3, [pc, #300]	@ (8004048 <CreateMessage+0x3f0>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fc f926 	bl	800016c <strlen>
 8003f20:	0002      	movs	r2, r0
 8003f22:	19bb      	adds	r3, r7, r6
 8003f24:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003f26:	4a43      	ldr	r2, [pc, #268]	@ (8004034 <CreateMessage+0x3dc>)
 8003f28:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <CreateMessage+0x3f8>)
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff fe6f 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003f32:	19bb      	adds	r3, r7, r6
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <CreateMessage+0x3f0>)
 8003f38:	18d4      	adds	r4, r2, r3
 8003f3a:	4b46      	ldr	r3, [pc, #280]	@ (8004054 <CreateMessage+0x3fc>)
 8003f3c:	689d      	ldr	r5, [r3, #8]
 8003f3e:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <CreateMessage+0x438>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	1c18      	adds	r0, r3, #0
 8003f44:	f7ff fa8e 	bl	8003464 <__aeabi_f2d>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	483b      	ldr	r0, [pc, #236]	@ (800403c <CreateMessage+0x3e4>)
 8003f4e:	4951      	ldr	r1, [pc, #324]	@ (8004094 <CreateMessage+0x43c>)
 8003f50:	9202      	str	r2, [sp, #8]
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	4b3e      	ldr	r3, [pc, #248]	@ (8004050 <CreateMessage+0x3f8>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	0003      	movs	r3, r0
 8003f5a:	002a      	movs	r2, r5
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f01b fad9 	bl	801f514 <siprintf>
    index = strlen(message);
 8003f62:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <CreateMessage+0x3f0>)
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc f901 	bl	800016c <strlen>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	19bb      	adds	r3, r7, r6
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e025      	b.n	8003fbe <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <CreateMessage+0x3c4>)
 8003f74:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <CreateMessage+0x3f8>)
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fe49 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f7e:	260e      	movs	r6, #14
 8003f80:	19bb      	adds	r3, r7, r6
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <CreateMessage+0x3f0>)
 8003f86:	18d4      	adds	r4, r2, r3
 8003f88:	4b32      	ldr	r3, [pc, #200]	@ (8004054 <CreateMessage+0x3fc>)
 8003f8a:	689d      	ldr	r5, [r3, #8]
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <CreateMessage+0x420>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	1c18      	adds	r0, r3, #0
 8003f92:	f7ff fa67 	bl	8003464 <__aeabi_f2d>
 8003f96:	0002      	movs	r2, r0
 8003f98:	000b      	movs	r3, r1
 8003f9a:	4828      	ldr	r0, [pc, #160]	@ (800403c <CreateMessage+0x3e4>)
 8003f9c:	493e      	ldr	r1, [pc, #248]	@ (8004098 <CreateMessage+0x440>)
 8003f9e:	9202      	str	r2, [sp, #8]
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <CreateMessage+0x3f8>)
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	002a      	movs	r2, r5
 8003faa:	0020      	movs	r0, r4
 8003fac:	f01b fab2 	bl	801f514 <siprintf>
    index = strlen(message);
 8003fb0:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <CreateMessage+0x3f0>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fc f8da 	bl	800016c <strlen>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	19bb      	adds	r3, r7, r6
 8003fbc:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003fbe:	240e      	movs	r4, #14
 8003fc0:	193b      	adds	r3, r7, r4
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	4a35      	ldr	r2, [pc, #212]	@ (800409c <CreateMessage+0x444>)
 8003fc6:	4936      	ldr	r1, [pc, #216]	@ (80040a0 <CreateMessage+0x448>)
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f009 fd59 	bl	800da80 <CreateLine>
  index = sprintf(&message[index], "]");
 8003fce:	193b      	adds	r3, r7, r4
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004048 <CreateMessage+0x3f0>)
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	4a33      	ldr	r2, [pc, #204]	@ (80040a4 <CreateMessage+0x44c>)
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f01b fa9a 	bl	801f514 <siprintf>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003fe6:	4b18      	ldr	r3, [pc, #96]	@ (8004048 <CreateMessage+0x3f0>)
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fc f8bf 	bl	800016c <strlen>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	b29b      	uxth	r3, r3
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b005      	add	sp, #20
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	200009e4 	.word	0x200009e4
 8004000:	0808000c 	.word	0x0808000c
 8004004:	200009f0 	.word	0x200009f0
 8004008:	08080018 	.word	0x08080018
 800400c:	200009fc 	.word	0x200009fc
 8004010:	08080048 	.word	0x08080048
 8004014:	20000a08 	.word	0x20000a08
 8004018:	08080030 	.word	0x08080030
 800401c:	20000a14 	.word	0x20000a14
 8004020:	0808006c 	.word	0x0808006c
 8004024:	20000a20 	.word	0x20000a20
 8004028:	08080078 	.word	0x08080078
 800402c:	20000a2c 	.word	0x20000a2c
 8004030:	08080054 	.word	0x08080054
 8004034:	20000a38 	.word	0x20000a38
 8004038:	08080060 	.word	0x08080060
 800403c:	20000a44 	.word	0x20000a44
 8004040:	08080090 	.word	0x08080090
 8004044:	08024560 	.word	0x08024560
 8004048:	20000584 	.word	0x20000584
 800404c:	080228a8 	.word	0x080228a8
 8004050:	20000a64 	.word	0x20000a64
 8004054:	20000550 	.word	0x20000550
 8004058:	20000564 	.word	0x20000564
 800405c:	080228ac 	.word	0x080228ac
 8004060:	20000568 	.word	0x20000568
 8004064:	08022900 	.word	0x08022900
 8004068:	20000578 	.word	0x20000578
 800406c:	08022958 	.word	0x08022958
 8004070:	20000574 	.word	0x20000574
 8004074:	080229b4 	.word	0x080229b4
 8004078:	2000056c 	.word	0x2000056c
 800407c:	08022a08 	.word	0x08022a08
 8004080:	20000570 	.word	0x20000570
 8004084:	08022a68 	.word	0x08022a68
 8004088:	2000057c 	.word	0x2000057c
 800408c:	08022ac8 	.word	0x08022ac8
 8004090:	20000580 	.word	0x20000580
 8004094:	08022b24 	.word	0x08022b24
 8004098:	08022b7c 	.word	0x08022b7c
 800409c:	08022bd4 	.word	0x08022bd4
 80040a0:	08022700 	.word	0x08022700
 80040a4:	08022bec 	.word	0x08022bec

080040a8 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 80040ac:	2064      	movs	r0, #100	@ 0x64
 80040ae:	f00a f93d 	bl	800e32c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <StartProg+0x60>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	2101      	movs	r1, #1
 80040b8:	0018      	movs	r0, r3
 80040ba:	f00b fba8 	bl	800f80e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80040be:	2064      	movs	r0, #100	@ 0x64
 80040c0:	f00a f934 	bl	800e32c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80040c4:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <StartProg+0x60>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	2102      	movs	r1, #2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f00b fb9f 	bl	800f80e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040d0:	23fa      	movs	r3, #250	@ 0xfa
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	0018      	movs	r0, r3
 80040d6:	f00a f929 	bl	800e32c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <StartProg+0x60>)
 80040dc:	2201      	movs	r2, #1
 80040de:	2101      	movs	r1, #1
 80040e0:	0018      	movs	r0, r3
 80040e2:	f00b fb94 	bl	800f80e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040e6:	23fa      	movs	r3, #250	@ 0xfa
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	0018      	movs	r0, r3
 80040ec:	f00a f91e 	bl	800e32c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80040f0:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <StartProg+0x60>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	2102      	movs	r1, #2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f00b fb89 	bl	800f80e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80040fc:	2028      	movs	r0, #40	@ 0x28
 80040fe:	f00a f915 	bl	800e32c <HAL_Delay>
}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	50001c00 	.word	0x50001c00

0800410c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	b0d9      	sub	sp, #356	@ 0x164
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	0008      	movs	r0, r1
 8004116:	0011      	movs	r1, r2
 8004118:	4ba1      	ldr	r3, [pc, #644]	@ (80043a0 <ParseBuffer+0x294>)
 800411a:	24b0      	movs	r4, #176	@ 0xb0
 800411c:	0064      	lsls	r4, r4, #1
 800411e:	191b      	adds	r3, r3, r4
 8004120:	19db      	adds	r3, r3, r7
 8004122:	1c02      	adds	r2, r0, #0
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	4b9f      	ldr	r3, [pc, #636]	@ (80043a4 <ParseBuffer+0x298>)
 8004128:	191b      	adds	r3, r3, r4
 800412a:	19db      	adds	r3, r3, r7
 800412c:	1c0a      	adds	r2, r1, #0
 800412e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	005a      	lsls	r2, r3, #1
 8004134:	2348      	movs	r3, #72	@ 0x48
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	2100      	movs	r1, #0
 800413a:	0018      	movs	r0, r3
 800413c:	f01b fb2e 	bl	801f79c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004140:	2360      	movs	r3, #96	@ 0x60
 8004142:	33ff      	adds	r3, #255	@ 0xff
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2203      	movs	r2, #3
 8004148:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800414a:	23ae      	movs	r3, #174	@ 0xae
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2200      	movs	r2, #0
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	e013      	b.n	800417e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004156:	20ae      	movs	r0, #174	@ 0xae
 8004158:	0040      	lsls	r0, r0, #1
 800415a:	183b      	adds	r3, r7, r0
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	18d2      	adds	r2, r2, r3
 8004162:	183b      	adds	r3, r7, r0
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	7811      	ldrb	r1, [r2, #0]
 8004168:	4a8f      	ldr	r2, [pc, #572]	@ (80043a8 <ParseBuffer+0x29c>)
 800416a:	24b0      	movs	r4, #176	@ 0xb0
 800416c:	0064      	lsls	r4, r4, #1
 800416e:	1912      	adds	r2, r2, r4
 8004170:	19d2      	adds	r2, r2, r7
 8004172:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004174:	183b      	adds	r3, r7, r0
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	183b      	adds	r3, r7, r0
 800417a:	3201      	adds	r2, #1
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	23ae      	movs	r3, #174	@ 0xae
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	18fa      	adds	r2, r7, r3
 8004184:	4b86      	ldr	r3, [pc, #536]	@ (80043a0 <ParseBuffer+0x294>)
 8004186:	24b0      	movs	r4, #176	@ 0xb0
 8004188:	0064      	lsls	r4, r4, #1
 800418a:	191b      	adds	r3, r3, r4
 800418c:	19db      	adds	r3, r3, r7
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d3df      	bcc.n	8004156 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8004196:	4b82      	ldr	r3, [pc, #520]	@ (80043a0 <ParseBuffer+0x294>)
 8004198:	191b      	adds	r3, r3, r4
 800419a:	19db      	adds	r3, r3, r7
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	4a82      	ldr	r2, [pc, #520]	@ (80043a8 <ParseBuffer+0x29c>)
 80041a0:	1912      	adds	r2, r2, r4
 80041a2:	19d2      	adds	r2, r2, r7
 80041a4:	2100      	movs	r1, #0
 80041a6:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80041a8:	2648      	movs	r6, #72	@ 0x48
 80041aa:	19bb      	adds	r3, r7, r6
 80041ac:	4a7f      	ldr	r2, [pc, #508]	@ (80043ac <ParseBuffer+0x2a0>)
 80041ae:	4980      	ldr	r1, [pc, #512]	@ (80043b0 <ParseBuffer+0x2a4>)
 80041b0:	2003      	movs	r0, #3
 80041b2:	f009 fc65 	bl	800da80 <CreateLine>
#endif
  char * ParsePoint = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	22ac      	movs	r2, #172	@ 0xac
 80041ba:	0052      	lsls	r2, r2, #1
 80041bc:	18b9      	adds	r1, r7, r2
 80041be:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80041c0:	4b7c      	ldr	r3, [pc, #496]	@ (80043b4 <ParseBuffer+0x2a8>)
 80041c2:	0025      	movs	r5, r4
 80041c4:	195b      	adds	r3, r3, r5
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	4a7b      	ldr	r2, [pc, #492]	@ (80043b8 <ParseBuffer+0x2ac>)
 80041ca:	8811      	ldrh	r1, [r2, #0]
 80041cc:	8019      	strh	r1, [r3, #0]
 80041ce:	7892      	ldrb	r2, [r2, #2]
 80041d0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80041d2:	4b7a      	ldr	r3, [pc, #488]	@ (80043bc <ParseBuffer+0x2b0>)
 80041d4:	195b      	adds	r3, r3, r5
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	4a79      	ldr	r2, [pc, #484]	@ (80043c0 <ParseBuffer+0x2b4>)
 80041da:	6811      	ldr	r1, [r2, #0]
 80041dc:	6019      	str	r1, [r3, #0]
 80041de:	8892      	ldrh	r2, [r2, #4]
 80041e0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80041e2:	4b78      	ldr	r3, [pc, #480]	@ (80043c4 <ParseBuffer+0x2b8>)
 80041e4:	195b      	adds	r3, r3, r5
 80041e6:	19db      	adds	r3, r3, r7
 80041e8:	4a77      	ldr	r2, [pc, #476]	@ (80043c8 <ParseBuffer+0x2bc>)
 80041ea:	6811      	ldr	r1, [r2, #0]
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	7912      	ldrb	r2, [r2, #4]
 80041f0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80041f2:	4b76      	ldr	r3, [pc, #472]	@ (80043cc <ParseBuffer+0x2c0>)
 80041f4:	195b      	adds	r3, r3, r5
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	4a75      	ldr	r2, [pc, #468]	@ (80043d0 <ParseBuffer+0x2c4>)
 80041fa:	6811      	ldr	r1, [r2, #0]
 80041fc:	6019      	str	r1, [r3, #0]
 80041fe:	8892      	ldrh	r2, [r2, #4]
 8004200:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004202:	4b74      	ldr	r3, [pc, #464]	@ (80043d4 <ParseBuffer+0x2c8>)
 8004204:	195b      	adds	r3, r3, r5
 8004206:	19db      	adds	r3, r3, r7
 8004208:	223e      	movs	r2, #62	@ 0x3e
 800420a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800420c:	4b72      	ldr	r3, [pc, #456]	@ (80043d8 <ParseBuffer+0x2cc>)
 800420e:	195b      	adds	r3, r3, r5
 8004210:	19db      	adds	r3, r3, r7
 8004212:	4a72      	ldr	r2, [pc, #456]	@ (80043dc <ParseBuffer+0x2d0>)
 8004214:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004216:	c313      	stmia	r3!, {r0, r1, r4}
 8004218:	8811      	ldrh	r1, [r2, #0]
 800421a:	8019      	strh	r1, [r3, #0]
 800421c:	7892      	ldrb	r2, [r2, #2]
 800421e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <ParseBuffer+0x2d4>)
 8004222:	195b      	adds	r3, r3, r5
 8004224:	19db      	adds	r3, r3, r7
 8004226:	4a6f      	ldr	r2, [pc, #444]	@ (80043e4 <ParseBuffer+0x2d8>)
 8004228:	ca13      	ldmia	r2!, {r0, r1, r4}
 800422a:	c313      	stmia	r3!, {r0, r1, r4}
 800422c:	8812      	ldrh	r2, [r2, #0]
 800422e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004230:	4b5c      	ldr	r3, [pc, #368]	@ (80043a4 <ParseBuffer+0x298>)
 8004232:	195b      	adds	r3, r3, r5
 8004234:	19db      	adds	r3, r3, r7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 800423c:	2344      	movs	r3, #68	@ 0x44
 800423e:	18fa      	adds	r2, r7, r3
 8004240:	19bb      	adds	r3, r7, r6
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f01b fae4 	bl	801f812 <strstr>
 800424a:	0003      	movs	r3, r0
 800424c:	22ac      	movs	r2, #172	@ 0xac
 800424e:	0052      	lsls	r2, r2, #1
 8004250:	18ba      	adds	r2, r7, r2
 8004252:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004254:	4b53      	ldr	r3, [pc, #332]	@ (80043a4 <ParseBuffer+0x298>)
 8004256:	22b0      	movs	r2, #176	@ 0xb0
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	189b      	adds	r3, r3, r2
 800425c:	19db      	adds	r3, r3, r7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10c      	bne.n	800427e <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004264:	232c      	movs	r3, #44	@ 0x2c
 8004266:	18fa      	adds	r2, r7, r3
 8004268:	2348      	movs	r3, #72	@ 0x48
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	0011      	movs	r1, r2
 800426e:	0018      	movs	r0, r3
 8004270:	f01b facf 	bl	801f812 <strstr>
 8004274:	0003      	movs	r3, r0
 8004276:	22ac      	movs	r2, #172	@ 0xac
 8004278:	0052      	lsls	r2, r2, #1
 800427a:	18ba      	adds	r2, r7, r2
 800427c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800427e:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <ParseBuffer+0x298>)
 8004280:	22b0      	movs	r2, #176	@ 0xb0
 8004282:	0052      	lsls	r2, r2, #1
 8004284:	189b      	adds	r3, r3, r2
 8004286:	19db      	adds	r3, r3, r7
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d10c      	bne.n	80042a8 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800428e:	2328      	movs	r3, #40	@ 0x28
 8004290:	18fa      	adds	r2, r7, r3
 8004292:	2348      	movs	r3, #72	@ 0x48
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f01b faba 	bl	801f812 <strstr>
 800429e:	0003      	movs	r3, r0
 80042a0:	22ac      	movs	r2, #172	@ 0xac
 80042a2:	0052      	lsls	r2, r2, #1
 80042a4:	18ba      	adds	r2, r7, r2
 80042a6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80042a8:	4b3e      	ldr	r3, [pc, #248]	@ (80043a4 <ParseBuffer+0x298>)
 80042aa:	22b0      	movs	r2, #176	@ 0xb0
 80042ac:	0052      	lsls	r2, r2, #1
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	19db      	adds	r3, r3, r7
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d10c      	bne.n	80042d2 <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80042b8:	2308      	movs	r3, #8
 80042ba:	18fa      	adds	r2, r7, r3
 80042bc:	2348      	movs	r3, #72	@ 0x48
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f01b faa5 	bl	801f812 <strstr>
 80042c8:	0003      	movs	r3, r0
 80042ca:	22ac      	movs	r2, #172	@ 0xac
 80042cc:	0052      	lsls	r2, r2, #1
 80042ce:	18ba      	adds	r2, r7, r2
 80042d0:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80042d2:	233c      	movs	r3, #60	@ 0x3c
 80042d4:	18fa      	adds	r2, r7, r3
 80042d6:	2448      	movs	r4, #72	@ 0x48
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	0011      	movs	r1, r2
 80042dc:	0018      	movs	r0, r3
 80042de:	f01b fa98 	bl	801f812 <strstr>
 80042e2:	0003      	movs	r3, r0
 80042e4:	22aa      	movs	r2, #170	@ 0xaa
 80042e6:	0052      	lsls	r2, r2, #1
 80042e8:	18ba      	adds	r2, r7, r2
 80042ea:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80042ec:	2318      	movs	r3, #24
 80042ee:	18fa      	adds	r2, r7, r3
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	0011      	movs	r1, r2
 80042f4:	0018      	movs	r0, r3
 80042f6:	f01b fa8c 	bl	801f812 <strstr>
 80042fa:	0003      	movs	r3, r0
 80042fc:	22a8      	movs	r2, #168	@ 0xa8
 80042fe:	0052      	lsls	r2, r2, #1
 8004300:	18ba      	adds	r2, r7, r2
 8004302:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004304:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <ParseBuffer+0x2dc>)
 8004306:	193b      	adds	r3, r7, r4
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f01b fa81 	bl	801f812 <strstr>
 8004310:	0003      	movs	r3, r0
 8004312:	22a6      	movs	r2, #166	@ 0xa6
 8004314:	0052      	lsls	r2, r2, #1
 8004316:	18ba      	adds	r2, r7, r2
 8004318:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800431a:	2334      	movs	r3, #52	@ 0x34
 800431c:	18fa      	adds	r2, r7, r3
 800431e:	193b      	adds	r3, r7, r4
 8004320:	0011      	movs	r1, r2
 8004322:	0018      	movs	r0, r3
 8004324:	f01b fa75 	bl	801f812 <strstr>
 8004328:	0003      	movs	r3, r0
 800432a:	22a4      	movs	r2, #164	@ 0xa4
 800432c:	0052      	lsls	r2, r2, #1
 800432e:	18ba      	adds	r2, r7, r2
 8004330:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004332:	4b1b      	ldr	r3, [pc, #108]	@ (80043a0 <ParseBuffer+0x294>)
 8004334:	21b0      	movs	r1, #176	@ 0xb0
 8004336:	0049      	lsls	r1, r1, #1
 8004338:	185b      	adds	r3, r3, r1
 800433a:	19db      	adds	r3, r3, r7
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d800      	bhi.n	8004344 <ParseBuffer+0x238>
 8004342:	e0c0      	b.n	80044c6 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004344:	22ac      	movs	r2, #172	@ 0xac
 8004346:	0052      	lsls	r2, r2, #1
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d053      	beq.n	80043f8 <ParseBuffer+0x2ec>
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b4f      	cmp	r3, #79	@ 0x4f
 8004358:	d14e      	bne.n	80043f8 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800435a:	2360      	movs	r3, #96	@ 0x60
 800435c:	33ff      	adds	r3, #255	@ 0xff
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <ParseBuffer+0x2e0>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b12      	cmp	r3, #18
 800436a:	d145      	bne.n	80043f8 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <ParseBuffer+0x294>)
 800436e:	185b      	adds	r3, r3, r1
 8004370:	19db      	adds	r3, r3, r7
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	2b2b      	cmp	r3, #43	@ 0x2b
 8004376:	d10b      	bne.n	8004390 <ParseBuffer+0x284>
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <ParseBuffer+0x29c>)
 800437a:	185b      	adds	r3, r3, r1
 800437c:	19db      	adds	r3, r3, r7
 800437e:	2221      	movs	r2, #33	@ 0x21
 8004380:	5c9b      	ldrb	r3, [r3, r2]
 8004382:	2b32      	cmp	r3, #50	@ 0x32
 8004384:	d104      	bne.n	8004390 <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004386:	193b      	adds	r3, r7, r4
 8004388:	0018      	movs	r0, r3
 800438a:	f002 f8dd 	bl	8006548 <ParseTime>
 800438e:	e033      	b.n	80043f8 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 8004390:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <ParseBuffer+0x2e4>)
 8004392:	4b18      	ldr	r3, [pc, #96]	@ (80043f4 <ParseBuffer+0x2e8>)
 8004394:	0019      	movs	r1, r3
 8004396:	2001      	movs	r0, #1
 8004398:	f009 fb72 	bl	800da80 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800439c:	2306      	movs	r3, #6
 800439e:	e096      	b.n	80044ce <ParseBuffer+0x3c2>
 80043a0:	fffffea2 	.word	0xfffffea2
 80043a4:	fffffea1 	.word	0xfffffea1
 80043a8:	fffffee8 	.word	0xfffffee8
 80043ac:	08022bf0 	.word	0x08022bf0
 80043b0:	08022700 	.word	0x08022700
 80043b4:	fffffee4 	.word	0xfffffee4
 80043b8:	08022c1c 	.word	0x08022c1c
 80043bc:	fffffedc 	.word	0xfffffedc
 80043c0:	08022c20 	.word	0x08022c20
 80043c4:	fffffed4 	.word	0xfffffed4
 80043c8:	08022c28 	.word	0x08022c28
 80043cc:	fffffecc 	.word	0xfffffecc
 80043d0:	08022c30 	.word	0x08022c30
 80043d4:	fffffec8 	.word	0xfffffec8
 80043d8:	fffffeb8 	.word	0xfffffeb8
 80043dc:	08022c38 	.word	0x08022c38
 80043e0:	fffffea8 	.word	0xfffffea8
 80043e4:	08022c48 	.word	0x08022c48
 80043e8:	08024540 	.word	0x08024540
 80043ec:	200009a2 	.word	0x200009a2
 80043f0:	08022c08 	.word	0x08022c08
 80043f4:	08022724 	.word	0x08022724
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80043f8:	22ac      	movs	r2, #172	@ 0xac
 80043fa:	0052      	lsls	r2, r2, #1
 80043fc:	18bb      	adds	r3, r7, r2
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <ParseBuffer+0x30c>
 8004404:	18bb      	adds	r3, r7, r2
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b72      	cmp	r3, #114	@ 0x72
 800440c:	d104      	bne.n	8004418 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800440e:	2360      	movs	r3, #96	@ 0x60
 8004410:	33ff      	adds	r3, #255	@ 0xff
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004418:	22ac      	movs	r2, #172	@ 0xac
 800441a:	0052      	lsls	r2, r2, #1
 800441c:	18bb      	adds	r3, r7, r2
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <ParseBuffer+0x32c>
 8004424:	18bb      	adds	r3, r7, r2
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b3e      	cmp	r3, #62	@ 0x3e
 800442c:	d104      	bne.n	8004438 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800442e:	2360      	movs	r3, #96	@ 0x60
 8004430:	33ff      	adds	r3, #255	@ 0xff
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	2205      	movs	r2, #5
 8004436:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004438:	22ac      	movs	r2, #172	@ 0xac
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	18bb      	adds	r3, r7, r2
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d009      	beq.n	8004458 <ParseBuffer+0x34c>
 8004444:	18bb      	adds	r3, r7, r2
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b2b      	cmp	r3, #43	@ 0x2b
 800444c:	d104      	bne.n	8004458 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800444e:	2360      	movs	r3, #96	@ 0x60
 8004450:	33ff      	adds	r3, #255	@ 0xff
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	220b      	movs	r2, #11
 8004456:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004458:	22aa      	movs	r2, #170	@ 0xaa
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	18bb      	adds	r3, r7, r2
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <ParseBuffer+0x362>
 8004464:	18bb      	adds	r3, r7, r2
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b45      	cmp	r3, #69	@ 0x45
 800446c:	d00a      	beq.n	8004484 <ParseBuffer+0x378>
 800446e:	22a4      	movs	r2, #164	@ 0xa4
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	18bb      	adds	r3, r7, r2
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <ParseBuffer+0x382>
 800447a:	18bb      	adds	r3, r7, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b46      	cmp	r3, #70	@ 0x46
 8004482:	d104      	bne.n	800448e <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 8004484:	2360      	movs	r3, #96	@ 0x60
 8004486:	33ff      	adds	r3, #255	@ 0xff
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800448e:	22a8      	movs	r2, #168	@ 0xa8
 8004490:	0052      	lsls	r2, r2, #1
 8004492:	18bb      	adds	r3, r7, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <ParseBuffer+0x39e>
 800449a:	18bb      	adds	r3, r7, r2
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b57      	cmp	r3, #87	@ 0x57
 80044a2:	d102      	bne.n	80044aa <ParseBuffer+0x39e>
      ConnectionMade = true;
 80044a4:	4b0c      	ldr	r3, [pc, #48]	@ (80044d8 <ParseBuffer+0x3cc>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80044aa:	22a6      	movs	r2, #166	@ 0xa6
 80044ac:	0052      	lsls	r2, r2, #1
 80044ae:	18bb      	adds	r3, r7, r2
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <ParseBuffer+0x3ba>
 80044b6:	18bb      	adds	r3, r7, r2
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b32      	cmp	r3, #50	@ 0x32
 80044be:	d102      	bne.n	80044c6 <ParseBuffer+0x3ba>
      beurs = true;
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <ParseBuffer+0x3d0>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80044c6:	2360      	movs	r3, #96	@ 0x60
 80044c8:	33ff      	adds	r3, #255	@ 0xff
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	781b      	ldrb	r3, [r3, #0]

}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b059      	add	sp, #356	@ 0x164
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	2000054c 	.word	0x2000054c
 80044dc:	2000054e 	.word	0x2000054e

080044e0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80044e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <PollAwake+0x34>)
 80044e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fb fe3d 	bl	800016c <strlen>
 80044f2:	0003      	movs	r3, r0
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0011      	movs	r1, r2
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7ff fa9c 	bl	8003a38 <ESP_Send>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d001      	beq.n	8004508 <PollAwake+0x28>
    return true;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <PollAwake+0x2a>
  }
  else{
    return false;
 8004508:	2300      	movs	r3, #0
  }
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	08022c58 	.word	0x08022c58

08004518 <RFPower>:
bool RFPower(){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800451e:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <RFPower+0x34>)
 8004520:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7fb fe21 	bl	800016c <strlen>
 800452a:	0003      	movs	r3, r0
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff fa80 	bl	8003a38 <ESP_Send>
 8004538:	1e03      	subs	r3, r0, #0
 800453a:	d001      	beq.n	8004540 <RFPower+0x28>
    return true;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <RFPower+0x2a>
  }
  else{
    return false;
 8004540:	2300      	movs	r3, #0
  }
}
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b002      	add	sp, #8
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	08022c60 	.word	0x08022c60

08004550 <CheckRFPower>:
bool CheckRFPower(){
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004556:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <CheckRFPower+0x34>)
 8004558:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f7fb fe05 	bl	800016c <strlen>
 8004562:	0003      	movs	r3, r0
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0011      	movs	r1, r2
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff fa64 	bl	8003a38 <ESP_Send>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d001      	beq.n	8004578 <CheckRFPower+0x28>
    return true;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004578:	2300      	movs	r3, #0
  }
}
 800457a:	0018      	movs	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	08022c70 	.word	0x08022c70

08004588 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800458e:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <ATRestore+0x34>)
 8004590:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f7fb fde9 	bl	800016c <strlen>
 800459a:	0003      	movs	r3, r0
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0011      	movs	r1, r2
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff fa48 	bl	8003a38 <ESP_Send>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d001      	beq.n	80045b0 <ATRestore+0x28>
    return true;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <ATRestore+0x2a>
  }
  else{
    return false;
 80045b0:	2300      	movs	r3, #0
  }
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b002      	add	sp, #8
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	08022c80 	.word	0x08022c80

080045c0 <CWINIT>:
bool CWINIT(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <CWINIT+0x34>)
 80045c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7fb fdcd 	bl	800016c <strlen>
 80045d2:	0003      	movs	r3, r0
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0011      	movs	r1, r2
 80045da:	0018      	movs	r0, r3
 80045dc:	f7ff fa2c 	bl	8003a38 <ESP_Send>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d001      	beq.n	80045e8 <CWINIT+0x28>
    return true;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <CWINIT+0x2a>
  }
  else{
    return false;
 80045e8:	2300      	movs	r3, #0
  }
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	08022c90 	.word	0x08022c90

080045f8 <CWMODE1>:
bool CWMODE1(){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80045fe:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <CWMODE1+0x34>)
 8004600:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7fb fdb1 	bl	800016c <strlen>
 800460a:	0003      	movs	r3, r0
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f7ff fa10 	bl	8003a38 <ESP_Send>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d001      	beq.n	8004620 <CWMODE1+0x28>
    return true;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004620:	2300      	movs	r3, #0
  }
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	08022ca0 	.word	0x08022ca0

08004630 <CWMODE2>:
bool CWMODE2(){
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <CWMODE2+0x34>)
 8004638:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f7fb fd95 	bl	800016c <strlen>
 8004642:	0003      	movs	r3, r0
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0011      	movs	r1, r2
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff f9f4 	bl	8003a38 <ESP_Send>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <CWMODE2+0x28>
    return true;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004658:	2300      	movs	r3, #0
  }
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	08022cb0 	.word	0x08022cb0

08004668 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <CWAUTOCONN+0x34>)
 8004670:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f7fb fd79 	bl	800016c <strlen>
 800467a:	0003      	movs	r3, r0
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0011      	movs	r1, r2
 8004682:	0018      	movs	r0, r3
 8004684:	f7ff f9d8 	bl	8003a38 <ESP_Send>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d001      	beq.n	8004690 <CWAUTOCONN+0x28>
    return true;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004690:	2300      	movs	r3, #0
  }
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b002      	add	sp, #8
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	08022cc0 	.word	0x08022cc0

080046a0 <CWJAP>:
bool CWJAP(){
 80046a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a2:	46c6      	mov	lr, r8
 80046a4:	b500      	push	{lr}
 80046a6:	b0a2      	sub	sp, #136	@ 0x88
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	466b      	mov	r3, sp
 80046ac:	4698      	mov	r8, r3
  beursTest = true;
 80046ae:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <CWJAP+0xf4>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80046b4:	2618      	movs	r6, #24
 80046b6:	19bb      	adds	r3, r7, r6
 80046b8:	2264      	movs	r2, #100	@ 0x64
 80046ba:	2100      	movs	r1, #0
 80046bc:	0018      	movs	r0, r3
 80046be:	f01b f86d 	bl	801f79c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80046c2:	4b35      	ldr	r3, [pc, #212]	@ (8004798 <CWJAP+0xf8>)
 80046c4:	4a35      	ldr	r2, [pc, #212]	@ (800479c <CWJAP+0xfc>)
 80046c6:	4936      	ldr	r1, [pc, #216]	@ (80047a0 <CWJAP+0x100>)
 80046c8:	19b8      	adds	r0, r7, r6
 80046ca:	f01a ff23 	bl	801f514 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80046ce:	19bb      	adds	r3, r7, r6
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fb fd4b 	bl	800016c <strlen>
 80046d6:	0002      	movs	r2, r0
 80046d8:	216f      	movs	r1, #111	@ 0x6f
 80046da:	0030      	movs	r0, r6
 80046dc:	180b      	adds	r3, r1, r0
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80046e2:	180b      	adds	r3, r1, r0
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	1e5a      	subs	r2, r3, #1
 80046ec:	2180      	movs	r1, #128	@ 0x80
 80046ee:	1879      	adds	r1, r7, r1
 80046f0:	600a      	str	r2, [r1, #0]
 80046f2:	001a      	movs	r2, r3
 80046f4:	60ba      	str	r2, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	60fa      	str	r2, [r7, #12]
 80046fa:	68b8      	ldr	r0, [r7, #8]
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	0002      	movs	r2, r0
 8004700:	0f52      	lsrs	r2, r2, #29
 8004702:	000e      	movs	r6, r1
 8004704:	00f6      	lsls	r6, r6, #3
 8004706:	617e      	str	r6, [r7, #20]
 8004708:	697e      	ldr	r6, [r7, #20]
 800470a:	4316      	orrs	r6, r2
 800470c:	617e      	str	r6, [r7, #20]
 800470e:	0002      	movs	r2, r0
 8004710:	00d2      	lsls	r2, r2, #3
 8004712:	613a      	str	r2, [r7, #16]
 8004714:	001a      	movs	r2, r3
 8004716:	603a      	str	r2, [r7, #0]
 8004718:	2200      	movs	r2, #0
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	0002      	movs	r2, r0
 8004722:	0f52      	lsrs	r2, r2, #29
 8004724:	000e      	movs	r6, r1
 8004726:	00f5      	lsls	r5, r6, #3
 8004728:	4315      	orrs	r5, r2
 800472a:	0002      	movs	r2, r0
 800472c:	00d4      	lsls	r4, r2, #3
 800472e:	3307      	adds	r3, #7
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	466a      	mov	r2, sp
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	469d      	mov	sp, r3
 800473a:	466b      	mov	r3, sp
 800473c:	3300      	adds	r3, #0
 800473e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004740:	246f      	movs	r4, #111	@ 0x6f
 8004742:	2518      	movs	r5, #24
 8004744:	1963      	adds	r3, r4, r5
 8004746:	19db      	adds	r3, r3, r7
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	001a      	movs	r2, r3
 800474e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004750:	2100      	movs	r1, #0
 8004752:	0018      	movs	r0, r3
 8004754:	f01b f822 	bl	801f79c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004758:	1963      	adds	r3, r4, r5
 800475a:	19db      	adds	r3, r3, r7
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	1979      	adds	r1, r7, r5
 8004760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004762:	0018      	movs	r0, r3
 8004764:	f01b f841 	bl	801f7ea <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004768:	1963      	adds	r3, r4, r5
 800476a:	19db      	adds	r3, r3, r7
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b29a      	uxth	r2, r3
 8004770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff f95f 	bl	8003a38 <ESP_Send>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d001      	beq.n	8004782 <CWJAP+0xe2>
    return true;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <CWJAP+0xe4>
  }
  else{
    return false;
 8004782:	2300      	movs	r3, #0
 8004784:	46c5      	mov	sp, r8
  }
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b022      	add	sp, #136	@ 0x88
 800478c:	bc80      	pop	{r7}
 800478e:	46b8      	mov	r8, r7
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	2000054d 	.word	0x2000054d
 8004798:	0802454c 	.word	0x0802454c
 800479c:	08024540 	.word	0x08024540
 80047a0:	08022cd4 	.word	0x08022cd4

080047a4 <CWMODE3>:
bool CWMODE3(){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <CWMODE3+0x34>)
 80047ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fb fcdb 	bl	800016c <strlen>
 80047b6:	0003      	movs	r3, r0
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f7ff f93a 	bl	8003a38 <ESP_Send>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d001      	beq.n	80047cc <CWMODE3+0x28>
    return true;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <CWMODE3+0x2a>
  }
  else{
    return false;
 80047cc:	2300      	movs	r3, #0
  }
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	08022cec 	.word	0x08022cec

080047dc <CWSTATE>:
bool CWSTATE(){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <CWSTATE+0x34>)
 80047e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7fb fcbf 	bl	800016c <strlen>
 80047ee:	0003      	movs	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0011      	movs	r1, r2
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff f91e 	bl	8003a38 <ESP_Send>
 80047fc:	1e03      	subs	r3, r0, #0
 80047fe:	d001      	beq.n	8004804 <CWSTATE+0x28>
    return true;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004804:	2300      	movs	r3, #0
  }
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	08022cfc 	.word	0x08022cfc

08004814 <CWSAP>:
bool CWSAP(){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <CWSAP+0x34>)
 800481c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7fb fca3 	bl	800016c <strlen>
 8004826:	0003      	movs	r3, r0
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff f902 	bl	8003a38 <ESP_Send>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <CWSAP+0x28>
    return true;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <CWSAP+0x2a>
  }
  else{
    return false;
 800483c:	2300      	movs	r3, #0
  }
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	08022d0c 	.word	0x08022d0c

0800484c <CIPMUX>:
bool CIPMUX(){
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <CIPMUX+0x34>)
 8004854:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0003      	movs	r3, r0
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f8e6 	bl	8003a38 <ESP_Send>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <CIPMUX+0x28>
    return true;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004874:	2300      	movs	r3, #0
  }
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	08022d30 	.word	0x08022d30

08004884 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <WEBSERVER+0x34>)
 800488c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fb fc6b 	bl	800016c <strlen>
 8004896:	0003      	movs	r3, r0
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff f8ca 	bl	8003a38 <ESP_Send>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <WEBSERVER+0x28>
    return true;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <WEBSERVER+0x2a>
  }
  else{
    return false;
 80048ac:	2300      	movs	r3, #0
  }
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	08022d40 	.word	0x08022d40

080048bc <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b0c5      	sub	sp, #276	@ 0x114
 80048c0:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	1d3b      	adds	r3, r7, #4
 80048c8:	2100      	movs	r1, #0
 80048ca:	0018      	movs	r0, r3
 80048cc:	f01a ff66 	bl	801f79c <memset>
  uint16_t length = CreateMessage(beurs);
 80048d0:	4b22      	ldr	r3, [pc, #136]	@ (800495c <HTTPCPOST+0xa0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	1dfc      	adds	r4, r7, #7
 80048d6:	34ff      	adds	r4, #255	@ 0xff
 80048d8:	0018      	movs	r0, r3
 80048da:	f7ff f9bd 	bl	8003c58 <CreateMessage>
 80048de:	0003      	movs	r3, r0
 80048e0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80048e2:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <HTTPCPOST+0xa0>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	33ff      	adds	r3, #255	@ 0xff
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <HTTPCPOST+0xa4>)
 80048f2:	491c      	ldr	r1, [pc, #112]	@ (8004964 <HTTPCPOST+0xa8>)
 80048f4:	1d38      	adds	r0, r7, #4
 80048f6:	f01a fe0d 	bl	801f514 <siprintf>
 80048fa:	e016      	b.n	800492a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80048fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <HTTPCPOST+0xac>)
 80048fe:	481b      	ldr	r0, [pc, #108]	@ (800496c <HTTPCPOST+0xb0>)
 8004900:	220c      	movs	r2, #12
 8004902:	0019      	movs	r1, r3
 8004904:	f7fe fef8 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004908:	4a17      	ldr	r2, [pc, #92]	@ (8004968 <HTTPCPOST+0xac>)
 800490a:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <HTTPCPOST+0xb4>)
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f7ff f97e 	bl	8003c10 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	33ff      	adds	r3, #255	@ 0xff
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	4c15      	ldr	r4, [pc, #84]	@ (8004970 <HTTPCPOST+0xb4>)
 800491c:	4a15      	ldr	r2, [pc, #84]	@ (8004974 <HTTPCPOST+0xb8>)
 800491e:	4916      	ldr	r1, [pc, #88]	@ (8004978 <HTTPCPOST+0xbc>)
 8004920:	1d38      	adds	r0, r7, #4
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	0023      	movs	r3, r4
 8004926:	f01a fdf5 	bl	801f514 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	0018      	movs	r0, r3
 800492e:	f7fb fc1d 	bl	800016c <strlen>
 8004932:	0002      	movs	r2, r0
 8004934:	1d7b      	adds	r3, r7, #5
 8004936:	33ff      	adds	r3, #255	@ 0xff
 8004938:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800493a:	1d7b      	adds	r3, r7, #5
 800493c:	33ff      	adds	r3, #255	@ 0xff
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	0011      	movs	r1, r2
 8004944:	0018      	movs	r0, r3
 8004946:	f7ff f877 	bl	8003a38 <ESP_Send>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d001      	beq.n	8004952 <HTTPCPOST+0x96>
    return true;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004952:	2300      	movs	r3, #0
  }
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b043      	add	sp, #268	@ 0x10c
 800495a:	bd90      	pop	{r4, r7, pc}
 800495c:	2000054e 	.word	0x2000054e
 8004960:	08024568 	.word	0x08024568
 8004964:	08022d58 	.word	0x08022d58
 8004968:	20000a80 	.word	0x20000a80
 800496c:	08080000 	.word	0x08080000
 8004970:	20000a8c 	.word	0x20000a8c
 8004974:	080245a4 	.word	0x080245a4
 8004978:	08022d90 	.word	0x08022d90

0800497c <SENDDATA>:
bool SENDDATA(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <SENDDATA+0x34>)
 8004984:	0018      	movs	r0, r3
 8004986:	f7fb fbf1 	bl	800016c <strlen>
 800498a:	0002      	movs	r2, r0
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	4b06      	ldr	r3, [pc, #24]	@ (80049b0 <SENDDATA+0x34>)
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff f84d 	bl	8003a38 <ESP_Send>
 800499e:	1e03      	subs	r3, r0, #0
 80049a0:	d001      	beq.n	80049a6 <SENDDATA+0x2a>
    return true;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <SENDDATA+0x2c>
  }
  else{
    return false;
 80049a6:	2300      	movs	r3, #0
  }
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000584 	.word	0x20000584

080049b4 <SLEEP>:
bool SLEEP(){
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80049ba:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <SLEEP+0x34>)
 80049bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fb fbd3 	bl	800016c <strlen>
 80049c6:	0003      	movs	r3, r0
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff f832 	bl	8003a38 <ESP_Send>
 80049d4:	1e03      	subs	r3, r0, #0
 80049d6:	d001      	beq.n	80049dc <SLEEP+0x28>
    return true;
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <SLEEP+0x2a>
  }
  else{
    return false;
 80049dc:	2300      	movs	r3, #0
  }
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	08022dd0 	.word	0x08022dd0

080049ec <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <CIPSNTPCFG+0x3c>)
 80049f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fb fbb7 	bl	800016c <strlen>
 80049fe:	0003      	movs	r3, r0
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0011      	movs	r1, r2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7ff f816 	bl	8003a38 <ESP_Send>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d006      	beq.n	8004a1e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004a10:	23fa      	movs	r3, #250	@ 0xfa
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f009 fc89 	bl	800e32c <HAL_Delay>
    return true;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004a1e:	2300      	movs	r3, #0
  }
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	08022de0 	.word	0x08022de0

08004a2c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <CIPSNTPTIME+0x34>)
 8004a34:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7fb fb97 	bl	800016c <strlen>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0011      	movs	r1, r2
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fe fff6 	bl	8003a38 <ESP_Send>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d001      	beq.n	8004a54 <CIPSNTPTIME+0x28>
    return true;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004a54:	2300      	movs	r3, #0
  }
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	08022e30 	.word	0x08022e30

08004a64 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <CIPSNTPINTV+0x34>)
 8004a6c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7fb fb7b 	bl	800016c <strlen>
 8004a76:	0003      	movs	r3, r0
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7fe ffda 	bl	8003a38 <ESP_Send>
 8004a84:	1e03      	subs	r3, r0, #0
 8004a86:	d001      	beq.n	8004a8c <CIPSNTPINTV+0x28>
    return true;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004a8c:	2300      	movs	r3, #0
  }
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	08022e44 	.word	0x08022e44

08004a9c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004a9c:	b5b0      	push	{r4, r5, r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	1dfb      	adds	r3, r7, #7
 8004aa6:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004aa8:	4b73      	ldr	r3, [pc, #460]	@ (8004c78 <DMA_ProcessBuffer+0x1dc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	200e      	movs	r0, #14
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	2180      	movs	r1, #128	@ 0x80
 8004ab6:	0049      	lsls	r1, r1, #1
 8004ab8:	1a8a      	subs	r2, r1, r2
 8004aba:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004abc:	230d      	movs	r3, #13
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004ac4:	183b      	adds	r3, r7, r0
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d903      	bls.n	8004ad8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004ad0:	183b      	adds	r3, r7, r0
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	0052      	lsls	r2, r2, #1
 8004ad6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004ad8:	4b68      	ldr	r3, [pc, #416]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	001a      	movs	r2, r3
 8004ae0:	230e      	movs	r3, #14
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d131      	bne.n	8004b4e <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004aea:	4b65      	ldr	r3, [pc, #404]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b14      	cmp	r3, #20
 8004af0:	d91b      	bls.n	8004b2a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004af2:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004af8:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <DMA_ProcessBuffer+0x1e8>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <DMA_ProcessBuffer+0x74>
 8004b00:	4b61      	ldr	r3, [pc, #388]	@ (8004c88 <DMA_ProcessBuffer+0x1ec>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004b08:	230d      	movs	r3, #13
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004b10:	4b5c      	ldr	r3, [pc, #368]	@ (8004c84 <DMA_ProcessBuffer+0x1e8>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d103      	bne.n	8004b20 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004b18:	4b5c      	ldr	r3, [pc, #368]	@ (8004c8c <DMA_ProcessBuffer+0x1f0>)
 8004b1a:	220b      	movs	r2, #11
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e016      	b.n	8004b4e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004b20:	230d      	movs	r3, #13
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2206      	movs	r2, #6
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	e011      	b.n	8004b4e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004b2a:	4b55      	ldr	r3, [pc, #340]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b34:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004b36:	f009 fbef 	bl	800e318 <HAL_GetTick>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	33f5      	adds	r3, #245	@ 0xf5
 8004b3e:	33ff      	adds	r3, #255	@ 0xff
 8004b40:	001a      	movs	r2, r3
 8004b42:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <DMA_ProcessBuffer+0x1f4>)
 8004b44:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004b46:	230d      	movs	r3, #13
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	001a      	movs	r2, r3
 8004b56:	210e      	movs	r1, #14
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d100      	bne.n	8004b62 <DMA_ProcessBuffer+0xc6>
 8004b60:	e082      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004b68:	4b4a      	ldr	r3, [pc, #296]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d109      	bne.n	8004b8c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4b45      	ldr	r3, [pc, #276]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b80:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004b82:	230d      	movs	r3, #13
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	220a      	movs	r2, #10
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e06d      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004b8c:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	001a      	movs	r2, r3
 8004b94:	210e      	movs	r1, #14
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004ba6:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004ba8:	230d      	movs	r3, #13
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	220a      	movs	r2, #10
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e05a      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004bb2:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	001a      	movs	r2, r3
 8004bba:	210e      	movs	r1, #14
 8004bbc:	187b      	adds	r3, r7, r1
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d917      	bls.n	8004bf4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	001a      	movs	r2, r3
 8004bcc:	4b32      	ldr	r3, [pc, #200]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004bce:	18d0      	adds	r0, r2, r3
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	b299      	uxth	r1, r3
 8004be0:	230d      	movs	r3, #13
 8004be2:	18fc      	adds	r4, r7, r3
 8004be4:	1dfb      	adds	r3, r7, #7
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	001a      	movs	r2, r3
 8004bea:	f7ff fa8f 	bl	800410c <ParseBuffer>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	7023      	strb	r3, [r4, #0]
 8004bf2:	e026      	b.n	8004c42 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004bf4:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004bfe:	18d0      	adds	r0, r2, r3
 8004c00:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	b299      	uxth	r1, r3
 8004c10:	250d      	movs	r5, #13
 8004c12:	197c      	adds	r4, r7, r5
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	001a      	movs	r2, r3
 8004c1a:	f7ff fa77 	bl	800410c <ParseBuffer>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004c22:	210e      	movs	r1, #14
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004c2c:	197c      	adds	r4, r7, r5
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	8819      	ldrh	r1, [r3, #0]
 8004c36:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fa67 	bl	800410c <ParseBuffer>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004c42:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	0018      	movs	r0, r3
 8004c4a:	240e      	movs	r4, #14
 8004c4c:	193b      	adds	r3, r7, r4
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <DMA_ProcessBuffer+0x200>)
 8004c52:	4913      	ldr	r1, [pc, #76]	@ (8004ca0 <DMA_ProcessBuffer+0x204>)
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	0003      	movs	r3, r0
 8004c58:	2003      	movs	r0, #3
 8004c5a:	f008 ff11 	bl	800da80 <CreateLine>
          OldPos = pos;
 8004c5e:	193b      	adds	r3, r7, r4
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c66:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004c68:	230d      	movs	r3, #13
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bdb0      	pop	{r4, r5, r7, pc}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	20002444 	.word	0x20002444
 8004c7c:	20000aa5 	.word	0x20000aa5
 8004c80:	200009a0 	.word	0x200009a0
 8004c84:	200009a2 	.word	0x200009a2
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	20000028 	.word	0x20000028
 8004c90:	20000994 	.word	0x20000994
 8004c94:	20000aa6 	.word	0x20000aa6
 8004c98:	20000448 	.word	0x20000448
 8004c9c:	08022e5c 	.word	0x08022e5c
 8004ca0:	08022700 	.word	0x08022700

08004ca4 <clearDMABuffer>:

void clearDMABuffer(){
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	005a      	lsls	r2, r3, #1
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <clearDMABuffer+0x18>)
 8004cae:	2100      	movs	r1, #0
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f01a fd73 	bl	801f79c <memset>
}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000448 	.word	0x20000448

08004cc0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	1c0a      	adds	r2, r1, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004cda:	1dbb      	adds	r3, r7, #6
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	1dfa      	adds	r2, r7, #7
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	4251      	negs	r1, r2
 8004cea:	414a      	adcs	r2, r1
 8004cec:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	1dfa      	adds	r2, r7, #7
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	3a02      	subs	r2, #2
 8004d00:	4251      	negs	r1, r2
 8004d02:	414a      	adcs	r2, r1
 8004d04:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004d06:	1dbb      	adds	r3, r7, #6
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d107      	bne.n	8004d1e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004d0e:	230f      	movs	r3, #15
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	1dfa      	adds	r2, r7, #7
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	3a05      	subs	r2, #5
 8004d18:	4251      	negs	r1, r2
 8004d1a:	414a      	adcs	r2, r1
 8004d1c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004d1e:	1dbb      	adds	r3, r7, #6
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d107      	bne.n	8004d36 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004d26:	230f      	movs	r3, #15
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	1dfa      	adds	r2, r7, #7
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	3a0b      	subs	r2, #11
 8004d30:	4251      	negs	r1, r2
 8004d32:	414a      	adcs	r2, r1
 8004d34:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004d36:	230f      	movs	r3, #15
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004d50:	230f      	movs	r3, #15
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b14      	cmp	r3, #20
 8004d5e:	d900      	bls.n	8004d62 <AT_Send+0x1e>
 8004d60:	e18c      	b.n	800507c <AT_Send+0x338>
 8004d62:	009a      	lsls	r2, r3, #2
 8004d64:	4bc9      	ldr	r3, [pc, #804]	@ (800508c <AT_Send+0x348>)
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004d6c:	4bc8      	ldr	r3, [pc, #800]	@ (8005090 <AT_Send+0x34c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f008 fe2f 	bl	800d9d4 <TimestampIsReached>
 8004d76:	1e03      	subs	r3, r0, #0
 8004d78:	d100      	bne.n	8004d7c <AT_Send+0x38>
 8004d7a:	e17e      	b.n	800507a <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004d7c:	230f      	movs	r3, #15
 8004d7e:	18fc      	adds	r4, r7, r3
 8004d80:	f7ff fbae 	bl	80044e0 <PollAwake>
 8004d84:	0003      	movs	r3, r0
 8004d86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d88:	f009 fac6 	bl	800e318 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	3332      	adds	r3, #50	@ 0x32
 8004d90:	001a      	movs	r2, r3
 8004d92:	4bbf      	ldr	r3, [pc, #764]	@ (8005090 <AT_Send+0x34c>)
 8004d94:	601a      	str	r2, [r3, #0]
  }
  break;
 8004d96:	e170      	b.n	800507a <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004d98:	4abe      	ldr	r2, [pc, #760]	@ (8005094 <AT_Send+0x350>)
 8004d9a:	4bbf      	ldr	r3, [pc, #764]	@ (8005098 <AT_Send+0x354>)
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	2003      	movs	r0, #3
 8004da0:	f008 fe6e 	bl	800da80 <CreateLine>
    ATCommandSend = RFPower();
 8004da4:	230f      	movs	r3, #15
 8004da6:	18fc      	adds	r4, r7, r3
 8004da8:	f7ff fbb6 	bl	8004518 <RFPower>
 8004dac:	0003      	movs	r3, r0
 8004dae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004db0:	f009 fab2 	bl	800e318 <HAL_GetTick>
 8004db4:	0003      	movs	r3, r0
 8004db6:	330a      	adds	r3, #10
 8004db8:	001a      	movs	r2, r3
 8004dba:	4bb5      	ldr	r3, [pc, #724]	@ (8005090 <AT_Send+0x34c>)
 8004dbc:	601a      	str	r2, [r3, #0]
    break;
 8004dbe:	e15d      	b.n	800507c <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004dc0:	4ab6      	ldr	r2, [pc, #728]	@ (800509c <AT_Send+0x358>)
 8004dc2:	4bb5      	ldr	r3, [pc, #724]	@ (8005098 <AT_Send+0x354>)
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	2003      	movs	r0, #3
 8004dc8:	f008 fe5a 	bl	800da80 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004dcc:	230f      	movs	r3, #15
 8004dce:	18fc      	adds	r4, r7, r3
 8004dd0:	f7ff fbbe 	bl	8004550 <CheckRFPower>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dd8:	f009 fa9e 	bl	800e318 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	330a      	adds	r3, #10
 8004de0:	001a      	movs	r2, r3
 8004de2:	4bab      	ldr	r3, [pc, #684]	@ (8005090 <AT_Send+0x34c>)
 8004de4:	601a      	str	r2, [r3, #0]
    break;
 8004de6:	e149      	b.n	800507c <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004de8:	4aad      	ldr	r2, [pc, #692]	@ (80050a0 <AT_Send+0x35c>)
 8004dea:	4bab      	ldr	r3, [pc, #684]	@ (8005098 <AT_Send+0x354>)
 8004dec:	0019      	movs	r1, r3
 8004dee:	2003      	movs	r0, #3
 8004df0:	f008 fe46 	bl	800da80 <CreateLine>
    ATCommandSend = ATRestore();
 8004df4:	230f      	movs	r3, #15
 8004df6:	18fc      	adds	r4, r7, r3
 8004df8:	f7ff fbc6 	bl	8004588 <ATRestore>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e00:	f009 fa8a 	bl	800e318 <HAL_GetTick>
 8004e04:	0003      	movs	r3, r0
 8004e06:	3332      	adds	r3, #50	@ 0x32
 8004e08:	001a      	movs	r2, r3
 8004e0a:	4ba1      	ldr	r3, [pc, #644]	@ (8005090 <AT_Send+0x34c>)
 8004e0c:	601a      	str	r2, [r3, #0]
    break;
 8004e0e:	e135      	b.n	800507c <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004e10:	4aa4      	ldr	r2, [pc, #656]	@ (80050a4 <AT_Send+0x360>)
 8004e12:	4ba1      	ldr	r3, [pc, #644]	@ (8005098 <AT_Send+0x354>)
 8004e14:	0019      	movs	r1, r3
 8004e16:	2003      	movs	r0, #3
 8004e18:	f008 fe32 	bl	800da80 <CreateLine>
    ATCommandSend = CWINIT();
 8004e1c:	230f      	movs	r3, #15
 8004e1e:	18fc      	adds	r4, r7, r3
 8004e20:	f7ff fbce 	bl	80045c0 <CWINIT>
 8004e24:	0003      	movs	r3, r0
 8004e26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e28:	f009 fa76 	bl	800e318 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	33f5      	adds	r3, #245	@ 0xf5
 8004e30:	33ff      	adds	r3, #255	@ 0xff
 8004e32:	001a      	movs	r2, r3
 8004e34:	4b96      	ldr	r3, [pc, #600]	@ (8005090 <AT_Send+0x34c>)
 8004e36:	601a      	str	r2, [r3, #0]
    break;
 8004e38:	e120      	b.n	800507c <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004e3a:	4a9b      	ldr	r2, [pc, #620]	@ (80050a8 <AT_Send+0x364>)
 8004e3c:	4b96      	ldr	r3, [pc, #600]	@ (8005098 <AT_Send+0x354>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	2003      	movs	r0, #3
 8004e42:	f008 fe1d 	bl	800da80 <CreateLine>
    ATCommandSend = CWSTATE();
 8004e46:	230f      	movs	r3, #15
 8004e48:	18fc      	adds	r4, r7, r3
 8004e4a:	f7ff fcc7 	bl	80047dc <CWSTATE>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e52:	f009 fa61 	bl	800e318 <HAL_GetTick>
 8004e56:	0003      	movs	r3, r0
 8004e58:	33f5      	adds	r3, #245	@ 0xf5
 8004e5a:	33ff      	adds	r3, #255	@ 0xff
 8004e5c:	001a      	movs	r2, r3
 8004e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8005090 <AT_Send+0x34c>)
 8004e60:	601a      	str	r2, [r3, #0]
    break;
 8004e62:	e10b      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004e64:	4a91      	ldr	r2, [pc, #580]	@ (80050ac <AT_Send+0x368>)
 8004e66:	4b8c      	ldr	r3, [pc, #560]	@ (8005098 <AT_Send+0x354>)
 8004e68:	0019      	movs	r1, r3
 8004e6a:	2003      	movs	r0, #3
 8004e6c:	f008 fe08 	bl	800da80 <CreateLine>
    ATCommandSend = CWMODE1();
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fc      	adds	r4, r7, r3
 8004e74:	f7ff fbc0 	bl	80045f8 <CWMODE1>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e7c:	f009 fa4c 	bl	800e318 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	330a      	adds	r3, #10
 8004e84:	001a      	movs	r2, r3
 8004e86:	4b82      	ldr	r3, [pc, #520]	@ (8005090 <AT_Send+0x34c>)
 8004e88:	601a      	str	r2, [r3, #0]
    break;
 8004e8a:	e0f7      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004e8c:	4a87      	ldr	r2, [pc, #540]	@ (80050ac <AT_Send+0x368>)
 8004e8e:	4b82      	ldr	r3, [pc, #520]	@ (8005098 <AT_Send+0x354>)
 8004e90:	0019      	movs	r1, r3
 8004e92:	2003      	movs	r0, #3
 8004e94:	f008 fdf4 	bl	800da80 <CreateLine>
    ATCommandSend = CWMODE2();
 8004e98:	230f      	movs	r3, #15
 8004e9a:	18fc      	adds	r4, r7, r3
 8004e9c:	f7ff fbc8 	bl	8004630 <CWMODE2>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ea4:	f009 fa38 	bl	800e318 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	330a      	adds	r3, #10
 8004eac:	001a      	movs	r2, r3
 8004eae:	4b78      	ldr	r3, [pc, #480]	@ (8005090 <AT_Send+0x34c>)
 8004eb0:	601a      	str	r2, [r3, #0]
    break;
 8004eb2:	e0e3      	b.n	800507c <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004eb4:	4a7e      	ldr	r2, [pc, #504]	@ (80050b0 <AT_Send+0x36c>)
 8004eb6:	4b78      	ldr	r3, [pc, #480]	@ (8005098 <AT_Send+0x354>)
 8004eb8:	0019      	movs	r1, r3
 8004eba:	2003      	movs	r0, #3
 8004ebc:	f008 fde0 	bl	800da80 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fc      	adds	r4, r7, r3
 8004ec4:	f7ff fbd0 	bl	8004668 <CWAUTOCONN>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ecc:	f009 fa24 	bl	800e318 <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	330a      	adds	r3, #10
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8005090 <AT_Send+0x34c>)
 8004ed8:	601a      	str	r2, [r3, #0]
    break;
 8004eda:	e0cf      	b.n	800507c <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004edc:	4a75      	ldr	r2, [pc, #468]	@ (80050b4 <AT_Send+0x370>)
 8004ede:	4b6e      	ldr	r3, [pc, #440]	@ (8005098 <AT_Send+0x354>)
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	f008 fdcc 	bl	800da80 <CreateLine>
    ATCommandSend = CWJAP();
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fc      	adds	r4, r7, r3
 8004eec:	f7ff fbd8 	bl	80046a0 <CWJAP>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ef4:	f009 fa10 	bl	800e318 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	001a      	movs	r2, r3
 8004efe:	4b64      	ldr	r3, [pc, #400]	@ (8005090 <AT_Send+0x34c>)
 8004f00:	601a      	str	r2, [r3, #0]
    break;
 8004f02:	e0bb      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004f04:	4a6c      	ldr	r2, [pc, #432]	@ (80050b8 <AT_Send+0x374>)
 8004f06:	4b64      	ldr	r3, [pc, #400]	@ (8005098 <AT_Send+0x354>)
 8004f08:	0019      	movs	r1, r3
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f008 fdb8 	bl	800da80 <CreateLine>
    ATCommandSend = CWMODE3();
 8004f10:	230f      	movs	r3, #15
 8004f12:	18fc      	adds	r4, r7, r3
 8004f14:	f7ff fc46 	bl	80047a4 <CWMODE3>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f1c:	f009 f9fc 	bl	800e318 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	330a      	adds	r3, #10
 8004f24:	001a      	movs	r2, r3
 8004f26:	4b5a      	ldr	r3, [pc, #360]	@ (8005090 <AT_Send+0x34c>)
 8004f28:	601a      	str	r2, [r3, #0]
    break;
 8004f2a:	e0a7      	b.n	800507c <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004f2c:	4a63      	ldr	r2, [pc, #396]	@ (80050bc <AT_Send+0x378>)
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005098 <AT_Send+0x354>)
 8004f30:	0019      	movs	r1, r3
 8004f32:	2003      	movs	r0, #3
 8004f34:	f008 fda4 	bl	800da80 <CreateLine>
    ATCommandSend = CWSAP();
 8004f38:	230f      	movs	r3, #15
 8004f3a:	18fc      	adds	r4, r7, r3
 8004f3c:	f7ff fc6a 	bl	8004814 <CWSAP>
 8004f40:	0003      	movs	r3, r0
 8004f42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f44:	f009 f9e8 	bl	800e318 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	330a      	adds	r3, #10
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <AT_Send+0x34c>)
 8004f50:	601a      	str	r2, [r3, #0]
    break;
 8004f52:	e093      	b.n	800507c <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004f54:	230f      	movs	r3, #15
 8004f56:	18fc      	adds	r4, r7, r3
 8004f58:	f7ff fc78 	bl	800484c <CIPMUX>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f60:	f009 f9da 	bl	800e318 <HAL_GetTick>
 8004f64:	0003      	movs	r3, r0
 8004f66:	330a      	adds	r3, #10
 8004f68:	001a      	movs	r2, r3
 8004f6a:	4b49      	ldr	r3, [pc, #292]	@ (8005090 <AT_Send+0x34c>)
 8004f6c:	601a      	str	r2, [r3, #0]
    break;
 8004f6e:	e085      	b.n	800507c <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fc      	adds	r4, r7, r3
 8004f74:	f7ff fc86 	bl	8004884 <WEBSERVER>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f7c:	f009 f9cc 	bl	800e318 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	330a      	adds	r3, #10
 8004f84:	001a      	movs	r2, r3
 8004f86:	4b42      	ldr	r3, [pc, #264]	@ (8005090 <AT_Send+0x34c>)
 8004f88:	601a      	str	r2, [r3, #0]
    break;
 8004f8a:	e077      	b.n	800507c <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004f8c:	230f      	movs	r3, #15
 8004f8e:	18fc      	adds	r4, r7, r3
 8004f90:	f7ff fc94 	bl	80048bc <HTTPCPOST>
 8004f94:	0003      	movs	r3, r0
 8004f96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f98:	f009 f9be 	bl	800e318 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	33f5      	adds	r3, #245	@ 0xf5
 8004fa0:	33ff      	adds	r3, #255	@ 0xff
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8005090 <AT_Send+0x34c>)
 8004fa6:	601a      	str	r2, [r3, #0]
    break;
 8004fa8:	e068      	b.n	800507c <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 8004faa:	4a45      	ldr	r2, [pc, #276]	@ (80050c0 <AT_Send+0x37c>)
 8004fac:	4b3a      	ldr	r3, [pc, #232]	@ (8005098 <AT_Send+0x354>)
 8004fae:	0019      	movs	r1, r3
 8004fb0:	2003      	movs	r0, #3
 8004fb2:	f008 fd65 	bl	800da80 <CreateLine>
    ATCommandSend = SENDDATA();
 8004fb6:	230f      	movs	r3, #15
 8004fb8:	18fc      	adds	r4, r7, r3
 8004fba:	f7ff fcdf 	bl	800497c <SENDDATA>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004fc2:	f009 f9a9 	bl	800e318 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	33f5      	adds	r3, #245	@ 0xf5
 8004fca:	33ff      	adds	r3, #255	@ 0xff
 8004fcc:	001a      	movs	r2, r3
 8004fce:	4b30      	ldr	r3, [pc, #192]	@ (8005090 <AT_Send+0x34c>)
 8004fd0:	601a      	str	r2, [r3, #0]
    break;
 8004fd2:	e053      	b.n	800507c <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	@ (80050c4 <AT_Send+0x380>)
 8004fd6:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <AT_Send+0x354>)
 8004fd8:	0019      	movs	r1, r3
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f008 fd50 	bl	800da80 <CreateLine>
    ATCommandSend = SLEEP();
 8004fe0:	230f      	movs	r3, #15
 8004fe2:	18fc      	adds	r4, r7, r3
 8004fe4:	f7ff fce6 	bl	80049b4 <SLEEP>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fec:	f009 f994 	bl	800e318 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	330a      	adds	r3, #10
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	4b26      	ldr	r3, [pc, #152]	@ (8005090 <AT_Send+0x34c>)
 8004ff8:	601a      	str	r2, [r3, #0]
    break;
 8004ffa:	e03f      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004ffc:	4a32      	ldr	r2, [pc, #200]	@ (80050c8 <AT_Send+0x384>)
 8004ffe:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <AT_Send+0x354>)
 8005000:	0019      	movs	r1, r3
 8005002:	2003      	movs	r0, #3
 8005004:	f008 fd3c 	bl	800da80 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005008:	230f      	movs	r3, #15
 800500a:	18fc      	adds	r4, r7, r3
 800500c:	f7ff fcee 	bl	80049ec <CIPSNTPCFG>
 8005010:	0003      	movs	r3, r0
 8005012:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005014:	f009 f980 	bl	800e318 <HAL_GetTick>
 8005018:	0003      	movs	r3, r0
 800501a:	330a      	adds	r3, #10
 800501c:	001a      	movs	r2, r3
 800501e:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <AT_Send+0x34c>)
 8005020:	601a      	str	r2, [r3, #0]
    break;
 8005022:	e02b      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005024:	4a29      	ldr	r2, [pc, #164]	@ (80050cc <AT_Send+0x388>)
 8005026:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <AT_Send+0x354>)
 8005028:	0019      	movs	r1, r3
 800502a:	2003      	movs	r0, #3
 800502c:	f008 fd28 	bl	800da80 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005030:	230f      	movs	r3, #15
 8005032:	18fc      	adds	r4, r7, r3
 8005034:	f7ff fcfa 	bl	8004a2c <CIPSNTPTIME>
 8005038:	0003      	movs	r3, r0
 800503a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800503c:	f009 f96c 	bl	800e318 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	33f5      	adds	r3, #245	@ 0xf5
 8005044:	33ff      	adds	r3, #255	@ 0xff
 8005046:	001a      	movs	r2, r3
 8005048:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <AT_Send+0x34c>)
 800504a:	601a      	str	r2, [r3, #0]
    break;
 800504c:	e016      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800504e:	4a20      	ldr	r2, [pc, #128]	@ (80050d0 <AT_Send+0x38c>)
 8005050:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <AT_Send+0x354>)
 8005052:	0019      	movs	r1, r3
 8005054:	2003      	movs	r0, #3
 8005056:	f008 fd13 	bl	800da80 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800505a:	230f      	movs	r3, #15
 800505c:	18fc      	adds	r4, r7, r3
 800505e:	f7ff fd01 	bl	8004a64 <CIPSNTPINTV>
 8005062:	0003      	movs	r3, r0
 8005064:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005066:	f009 f957 	bl	800e318 <HAL_GetTick>
 800506a:	0003      	movs	r3, r0
 800506c:	330a      	adds	r3, #10
 800506e:	001a      	movs	r2, r3
 8005070:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <AT_Send+0x34c>)
 8005072:	601a      	str	r2, [r3, #0]
    break;
 8005074:	e002      	b.n	800507c <AT_Send+0x338>
  case AT_END:
    break;
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	e000      	b.n	800507c <AT_Send+0x338>
  break;
 800507a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800507c:	230f      	movs	r3, #15
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	781b      	ldrb	r3, [r3, #0]
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b005      	add	sp, #20
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	080245cc 	.word	0x080245cc
 8005090:	20000994 	.word	0x20000994
 8005094:	08022e84 	.word	0x08022e84
 8005098:	08022700 	.word	0x08022700
 800509c:	08022e98 	.word	0x08022e98
 80050a0:	08022eac 	.word	0x08022eac
 80050a4:	08022ebc 	.word	0x08022ebc
 80050a8:	08022ed0 	.word	0x08022ed0
 80050ac:	08022ee8 	.word	0x08022ee8
 80050b0:	08022f00 	.word	0x08022f00
 80050b4:	08022f18 	.word	0x08022f18
 80050b8:	08022f2c 	.word	0x08022f2c
 80050bc:	08022f48 	.word	0x08022f48
 80050c0:	08022f64 	.word	0x08022f64
 80050c4:	08022f74 	.word	0x08022f74
 80050c8:	08022f98 	.word	0x08022f98
 80050cc:	08022fac 	.word	0x08022fac
 80050d0:	08022fc4 	.word	0x08022fc4

080050d4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80050da:	1dfb      	adds	r3, r7, #7
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80050e0:	4b7a      	ldr	r3, [pc, #488]	@ (80052cc <ESP_WakeTest+0x1f8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d900      	bls.n	80050ea <ESP_WakeTest+0x16>
 80050e8:	e0d6      	b.n	8005298 <ESP_WakeTest+0x1c4>
 80050ea:	009a      	lsls	r2, r3, #2
 80050ec:	4b78      	ldr	r3, [pc, #480]	@ (80052d0 <ESP_WakeTest+0x1fc>)
 80050ee:	18d3      	adds	r3, r2, r3
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 80050f4:	4b77      	ldr	r3, [pc, #476]	@ (80052d4 <ESP_WakeTest+0x200>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	4053      	eors	r3, r2
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d036      	beq.n	8005170 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	4874      	ldr	r0, [pc, #464]	@ (80052d8 <ESP_WakeTest+0x204>)
 8005108:	2200      	movs	r2, #0
 800510a:	0019      	movs	r1, r3
 800510c:	f00a fb7f 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005110:	2032      	movs	r0, #50	@ 0x32
 8005112:	f009 f90b 	bl	800e32c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	486f      	ldr	r0, [pc, #444]	@ (80052d8 <ESP_WakeTest+0x204>)
 800511c:	2201      	movs	r2, #1
 800511e:	0019      	movs	r1, r3
 8005120:	f00a fb75 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005124:	200a      	movs	r0, #10
 8005126:	f009 f901 	bl	800e32c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800512a:	4b6c      	ldr	r3, [pc, #432]	@ (80052dc <ESP_WakeTest+0x208>)
 800512c:	2200      	movs	r2, #0
 800512e:	2101      	movs	r1, #1
 8005130:	0018      	movs	r0, r3
 8005132:	f00a fb6c 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005136:	200a      	movs	r0, #10
 8005138:	f009 f8f8 	bl	800e32c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800513c:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <ESP_WakeTest+0x208>)
 800513e:	2201      	movs	r2, #1
 8005140:	2102      	movs	r1, #2
 8005142:	0018      	movs	r0, r3
 8005144:	f00a fb63 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005148:	200a      	movs	r0, #10
 800514a:	f009 f8ef 	bl	800e32c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800514e:	4b63      	ldr	r3, [pc, #396]	@ (80052dc <ESP_WakeTest+0x208>)
 8005150:	2201      	movs	r2, #1
 8005152:	2101      	movs	r1, #1
 8005154:	0018      	movs	r0, r3
 8005156:	f00a fb5a 	bl	800f80e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800515a:	f009 f8dd 	bl	800e318 <HAL_GetTick>
 800515e:	0003      	movs	r3, r0
 8005160:	22af      	movs	r2, #175	@ 0xaf
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	189a      	adds	r2, r3, r2
 8005166:	4b5e      	ldr	r3, [pc, #376]	@ (80052e0 <ESP_WakeTest+0x20c>)
 8005168:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800516a:	4b5a      	ldr	r3, [pc, #360]	@ (80052d4 <ESP_WakeTest+0x200>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	005a      	lsls	r2, r3, #1
 8005174:	4b5b      	ldr	r3, [pc, #364]	@ (80052e4 <ESP_WakeTest+0x210>)
 8005176:	0011      	movs	r1, r2
 8005178:	0018      	movs	r0, r3
 800517a:	f7fe fc91 	bl	8003aa0 <ESP_Receive>
 800517e:	1e03      	subs	r3, r0, #0
 8005180:	d100      	bne.n	8005184 <ESP_WakeTest+0xb0>
 8005182:	e099      	b.n	80052b8 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005184:	4b51      	ldr	r3, [pc, #324]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
      }
      break;
 800518a:	e095      	b.n	80052b8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 800518c:	4b54      	ldr	r3, [pc, #336]	@ (80052e0 <ESP_WakeTest+0x20c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0018      	movs	r0, r3
 8005192:	f008 fc1f 	bl	800d9d4 <TimestampIsReached>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d100      	bne.n	800519c <ESP_WakeTest+0xc8>
 800519a:	e08f      	b.n	80052bc <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 800519c:	4b52      	ldr	r3, [pc, #328]	@ (80052e8 <ESP_WakeTest+0x214>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	1dfc      	adds	r4, r7, #7
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7ff fdce 	bl	8004d44 <AT_Send>
 80051a8:	0003      	movs	r3, r0
 80051aa:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d100      	bne.n	80051b6 <ESP_WakeTest+0xe2>
 80051b4:	e082      	b.n	80052bc <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80051b6:	4b45      	ldr	r3, [pc, #276]	@ (80052cc <ESP_WakeTest+0x1f8>)
 80051b8:	2202      	movs	r2, #2
 80051ba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80051bc:	e07e      	b.n	80052bc <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 80051be:	4b48      	ldr	r3, [pc, #288]	@ (80052e0 <ESP_WakeTest+0x20c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f008 fc06 	bl	800d9d4 <TimestampIsReached>
 80051c8:	1e03      	subs	r3, r0, #0
 80051ca:	d100      	bne.n	80051ce <ESP_WakeTest+0xfa>
 80051cc:	e078      	b.n	80052c0 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80051ce:	4b47      	ldr	r3, [pc, #284]	@ (80052ec <ESP_WakeTest+0x218>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7ff fc62 	bl	8004a9c <DMA_ProcessBuffer>
 80051d8:	0003      	movs	r3, r0
 80051da:	001a      	movs	r2, r3
 80051dc:	4b44      	ldr	r3, [pc, #272]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051de:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80051e0:	4b43      	ldr	r3, [pc, #268]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	4b41      	ldr	r3, [pc, #260]	@ (80052ec <ESP_WakeTest+0x218>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	1dbc      	adds	r4, r7, #6
 80051ea:	0019      	movs	r1, r3
 80051ec:	0010      	movs	r0, r2
 80051ee:	f7ff fd67 	bl	8004cc0 <ATCompare>
 80051f2:	0003      	movs	r3, r0
 80051f4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80051f6:	4b3e      	ldr	r3, [pc, #248]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d102      	bne.n	8005204 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80051fe:	4b33      	ldr	r3, [pc, #204]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005204:	4b3a      	ldr	r3, [pc, #232]	@ (80052f0 <ESP_WakeTest+0x21c>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b07      	cmp	r3, #7
 800520a:	d104      	bne.n	8005216 <ESP_WakeTest+0x142>
          StartProg();
 800520c:	f7fe ff4c 	bl	80040a8 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005210:	4b2e      	ldr	r3, [pc, #184]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005212:	2205      	movs	r2, #5
 8005214:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005216:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <ESP_WakeTest+0x21c>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d109      	bne.n	8005232 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800521e:	f009 f87b 	bl	800e318 <HAL_GetTick>
 8005222:	0003      	movs	r3, r0
 8005224:	3332      	adds	r3, #50	@ 0x32
 8005226:	001a      	movs	r2, r3
 8005228:	4b2d      	ldr	r3, [pc, #180]	@ (80052e0 <ESP_WakeTest+0x20c>)
 800522a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800522c:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8005232:	1dbb      	adds	r3, r7, #6
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d042      	beq.n	80052c0 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800523c:	2203      	movs	r2, #3
 800523e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005240:	e03e      	b.n	80052c0 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005242:	4b2c      	ldr	r3, [pc, #176]	@ (80052f4 <ESP_WakeTest+0x220>)
 8005244:	22fa      	movs	r2, #250	@ 0xfa
 8005246:	0112      	lsls	r2, r2, #4
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800524a:	4b2a      	ldr	r3, [pc, #168]	@ (80052f4 <ESP_WakeTest+0x220>)
 800524c:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <ESP_WakeTest+0x224>)
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005250:	4b28      	ldr	r3, [pc, #160]	@ (80052f4 <ESP_WakeTest+0x220>)
 8005252:	22fa      	movs	r2, #250	@ 0xfa
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005258:	4b1c      	ldr	r3, [pc, #112]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800525a:	2204      	movs	r2, #4
 800525c:	701a      	strb	r2, [r3, #0]

      break;
 800525e:	e030      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 8005260:	4b26      	ldr	r3, [pc, #152]	@ (80052fc <ESP_WakeTest+0x228>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005266:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <ESP_WakeTest+0x200>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <ESP_WakeTest+0x208>)
 800526e:	2200      	movs	r2, #0
 8005270:	2101      	movs	r1, #1
 8005272:	0018      	movs	r0, r3
 8005274:	f00a facb 	bl	800f80e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005278:	2380      	movs	r3, #128	@ 0x80
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4816      	ldr	r0, [pc, #88]	@ (80052d8 <ESP_WakeTest+0x204>)
 800527e:	2200      	movs	r2, #0
 8005280:	0019      	movs	r1, r3
 8005282:	f00a fac4 	bl	800f80e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005286:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <ESP_WakeTest+0x208>)
 8005288:	2200      	movs	r2, #0
 800528a:	2102      	movs	r1, #2
 800528c:	0018      	movs	r0, r3
 800528e:	f00a fabe 	bl	800f80e <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005292:	f002 fbf1 	bl	8007a78 <SetESPMeasurementDone>
      break;
 8005296:	e014      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
      break;
 800529e:	e010      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 80052a0:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052a2:	22fa      	movs	r2, #250	@ 0xfa
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80052a8:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052aa:	22fa      	movs	r2, #250	@ 0xfa
 80052ac:	0112      	lsls	r2, r2, #4
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80052b6:	e004      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052b8:	46c0      	nop			@ (mov r8, r8)
 80052ba:	e002      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052bc:	46c0      	nop			@ (mov r8, r8)
 80052be:	e000      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052c0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b003      	add	sp, #12
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	46c0      	nop			@ (mov r8, r8)
 80052cc:	200009a4 	.word	0x200009a4
 80052d0:	08024620 	.word	0x08024620
 80052d4:	20000548 	.word	0x20000548
 80052d8:	50000800 	.word	0x50000800
 80052dc:	50001c00 	.word	0x50001c00
 80052e0:	20000994 	.word	0x20000994
 80052e4:	20000448 	.word	0x20000448
 80052e8:	200009a2 	.word	0x200009a2
 80052ec:	200009a1 	.word	0x200009a1
 80052f0:	20000029 	.word	0x20000029
 80052f4:	40000400 	.word	0x40000400
 80052f8:	00000bb8 	.word	0x00000bb8
 80052fc:	20000000 	.word	0x20000000

08005300 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 800530c:	4be0      	ldr	r3, [pc, #896]	@ (8005690 <ESP_Upkeep+0x390>)
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	4be0      	ldr	r3, [pc, #896]	@ (8005694 <ESP_Upkeep+0x394>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d01f      	beq.n	8005358 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005318:	4bdd      	ldr	r3, [pc, #884]	@ (8005690 <ESP_Upkeep+0x390>)
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	4bdd      	ldr	r3, [pc, #884]	@ (8005694 <ESP_Upkeep+0x394>)
 800531e:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005320:	4bdc      	ldr	r3, [pc, #880]	@ (8005694 <ESP_Upkeep+0x394>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d103      	bne.n	8005330 <ESP_Upkeep+0x30>
 8005328:	4bdb      	ldr	r3, [pc, #876]	@ (8005698 <ESP_Upkeep+0x398>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b0e      	cmp	r3, #14
 800532e:	d013      	beq.n	8005358 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005330:	4bd8      	ldr	r3, [pc, #864]	@ (8005694 <ESP_Upkeep+0x394>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	001d      	movs	r5, r3
 8005336:	4bd8      	ldr	r3, [pc, #864]	@ (8005698 <ESP_Upkeep+0x398>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	0018      	movs	r0, r3
 800533c:	4bd7      	ldr	r3, [pc, #860]	@ (800569c <ESP_Upkeep+0x39c>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	001c      	movs	r4, r3
 8005342:	4bd7      	ldr	r3, [pc, #860]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4ad7      	ldr	r2, [pc, #860]	@ (80056a4 <ESP_Upkeep+0x3a4>)
 8005348:	49d7      	ldr	r1, [pc, #860]	@ (80056a8 <ESP_Upkeep+0x3a8>)
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	9401      	str	r4, [sp, #4]
 800534e:	9000      	str	r0, [sp, #0]
 8005350:	002b      	movs	r3, r5
 8005352:	2003      	movs	r0, #3
 8005354:	f008 fb94 	bl	800da80 <CreateLine>
    }
  }

  switch (EspState) {
 8005358:	4bcd      	ldr	r3, [pc, #820]	@ (8005690 <ESP_Upkeep+0x390>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b0f      	cmp	r3, #15
 800535e:	d901      	bls.n	8005364 <ESP_Upkeep+0x64>
 8005360:	f000 fc09 	bl	8005b76 <ESP_Upkeep+0x876>
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	4bd1      	ldr	r3, [pc, #836]	@ (80056ac <ESP_Upkeep+0x3ac>)
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800536e:	4bc8      	ldr	r3, [pc, #800]	@ (8005690 <ESP_Upkeep+0x390>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
      break;
 8005374:	f000 fc18 	bl	8005ba8 <ESP_Upkeep+0x8a8>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005378:	4bcd      	ldr	r3, [pc, #820]	@ (80056b0 <ESP_Upkeep+0x3b0>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2201      	movs	r2, #1
 800537e:	4053      	eors	r3, r2
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d036      	beq.n	80053f4 <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	48ca      	ldr	r0, [pc, #808]	@ (80056b4 <ESP_Upkeep+0x3b4>)
 800538c:	2200      	movs	r2, #0
 800538e:	0019      	movs	r1, r3
 8005390:	f00a fa3d 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005394:	2001      	movs	r0, #1
 8005396:	f008 ffc9 	bl	800e32c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800539a:	2380      	movs	r3, #128	@ 0x80
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	48c5      	ldr	r0, [pc, #788]	@ (80056b4 <ESP_Upkeep+0x3b4>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	0019      	movs	r1, r3
 80053a4:	f00a fa33 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053a8:	2001      	movs	r0, #1
 80053aa:	f008 ffbf 	bl	800e32c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80053ae:	4bc2      	ldr	r3, [pc, #776]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	2101      	movs	r1, #1
 80053b4:	0018      	movs	r0, r3
 80053b6:	f00a fa2a 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f008 ffb6 	bl	800e32c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80053c0:	4bbd      	ldr	r3, [pc, #756]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	2102      	movs	r1, #2
 80053c6:	0018      	movs	r0, r3
 80053c8:	f00a fa21 	bl	800f80e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053cc:	2001      	movs	r0, #1
 80053ce:	f008 ffad 	bl	800e32c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80053d2:	4bb9      	ldr	r3, [pc, #740]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	2101      	movs	r1, #1
 80053d8:	0018      	movs	r0, r3
 80053da:	f00a fa18 	bl	800f80e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80053de:	f008 ff9b 	bl	800e318 <HAL_GetTick>
 80053e2:	0003      	movs	r3, r0
 80053e4:	22af      	movs	r2, #175	@ 0xaf
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	189a      	adds	r2, r3, r2
 80053ea:	4bb4      	ldr	r3, [pc, #720]	@ (80056bc <ESP_Upkeep+0x3bc>)
 80053ec:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80053ee:	4bb0      	ldr	r3, [pc, #704]	@ (80056b0 <ESP_Upkeep+0x3b0>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	005a      	lsls	r2, r3, #1
 80053f8:	4bb1      	ldr	r3, [pc, #708]	@ (80056c0 <ESP_Upkeep+0x3c0>)
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fe fb4f 	bl	8003aa0 <ESP_Receive>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d101      	bne.n	800540a <ESP_Upkeep+0x10a>
 8005406:	f000 fbc2 	bl	8005b8e <ESP_Upkeep+0x88e>
        EspState = ESP_STATE_WAIT_AWAKE;
 800540a:	4ba1      	ldr	r3, [pc, #644]	@ (8005690 <ESP_Upkeep+0x390>)
 800540c:	220f      	movs	r2, #15
 800540e:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005410:	f008 ff82 	bl	800e318 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	22fa      	movs	r2, #250	@ 0xfa
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	189a      	adds	r2, r3, r2
 800541c:	4ba9      	ldr	r3, [pc, #676]	@ (80056c4 <ESP_Upkeep+0x3c4>)
 800541e:	601a      	str	r2, [r3, #0]
      }
      break;
 8005420:	f000 fbb5 	bl	8005b8e <ESP_Upkeep+0x88e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8005424:	2001      	movs	r0, #1
 8005426:	f7ff fb39 	bl	8004a9c <DMA_ProcessBuffer>
 800542a:	0003      	movs	r3, r0
 800542c:	001a      	movs	r2, r3
 800542e:	4ba6      	ldr	r3, [pc, #664]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 8005430:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005432:	4ba5      	ldr	r3, [pc, #660]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	1dbc      	adds	r4, r7, #6
 8005438:	2101      	movs	r1, #1
 800543a:	0018      	movs	r0, r3
 800543c:	f7ff fc40 	bl	8004cc0 <ATCompare>
 8005440:	0003      	movs	r3, r0
 8005442:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005444:	1dbb      	adds	r3, r7, #6
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d108      	bne.n	800545e <ESP_Upkeep+0x15e>
 800544c:	4b9d      	ldr	r3, [pc, #628]	@ (80056c4 <ESP_Upkeep+0x3c4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0018      	movs	r0, r3
 8005452:	f008 fabf 	bl	800d9d4 <TimestampIsReached>
 8005456:	1e03      	subs	r3, r0, #0
 8005458:	d101      	bne.n	800545e <ESP_Upkeep+0x15e>
 800545a:	f000 fb9a 	bl	8005b92 <ESP_Upkeep+0x892>
          EspState = ESP_STATE_MODE_SELECT;
 800545e:	4b8c      	ldr	r3, [pc, #560]	@ (8005690 <ESP_Upkeep+0x390>)
 8005460:	220b      	movs	r2, #11
 8005462:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005464:	f000 fb95 	bl	8005b92 <ESP_Upkeep+0x892>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005468:	4b98      	ldr	r3, [pc, #608]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800546a:	2209      	movs	r2, #9
 800546c:	2114      	movs	r1, #20
 800546e:	0018      	movs	r0, r3
 8005470:	f01a f994 	bl	801f79c <memset>
      if(!InitIsDone || WifiReset){
 8005474:	4b96      	ldr	r3, [pc, #600]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2201      	movs	r2, #1
 800547a:	4053      	eors	r3, r2
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <ESP_Upkeep+0x18a>
 8005482:	4b94      	ldr	r3, [pc, #592]	@ (80056d4 <ESP_Upkeep+0x3d4>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01a      	beq.n	80054c0 <ESP_Upkeep+0x1c0>
        memcpy(ATCommandArray, AT_INIT, 7);
 800548a:	4b90      	ldr	r3, [pc, #576]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800548c:	4a92      	ldr	r2, [pc, #584]	@ (80056d8 <ESP_Upkeep+0x3d8>)
 800548e:	6811      	ldr	r1, [r2, #0]
 8005490:	6019      	str	r1, [r3, #0]
 8005492:	8891      	ldrh	r1, [r2, #4]
 8005494:	8099      	strh	r1, [r3, #4]
 8005496:	7992      	ldrb	r2, [r2, #6]
 8005498:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 800549a:	4b7d      	ldr	r3, [pc, #500]	@ (8005690 <ESP_Upkeep+0x390>)
 800549c:	2204      	movs	r2, #4
 800549e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054a0:	4b8e      	ldr	r3, [pc, #568]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80054a6:	4b7d      	ldr	r3, [pc, #500]	@ (800569c <ESP_Upkeep+0x39c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80054ac:	4b8b      	ldr	r3, [pc, #556]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	001a      	movs	r2, r3
 80054b2:	4b86      	ldr	r3, [pc, #536]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80054b4:	5c9a      	ldrb	r2, [r3, r2]
 80054b6:	4b78      	ldr	r3, [pc, #480]	@ (8005698 <ESP_Upkeep+0x398>)
 80054b8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054ba:	4b79      	ldr	r3, [pc, #484]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80054c0:	4b83      	ldr	r3, [pc, #524]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d01f      	beq.n	8005508 <ESP_Upkeep+0x208>
 80054c8:	4b85      	ldr	r3, [pc, #532]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2201      	movs	r2, #1
 80054ce:	4053      	eors	r3, r2
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <ESP_Upkeep+0x208>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80054d6:	4b7d      	ldr	r3, [pc, #500]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80054d8:	4a82      	ldr	r2, [pc, #520]	@ (80056e4 <ESP_Upkeep+0x3e4>)
 80054da:	6811      	ldr	r1, [r2, #0]
 80054dc:	6019      	str	r1, [r3, #0]
 80054de:	8892      	ldrh	r2, [r2, #4]
 80054e0:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054e2:	4b6b      	ldr	r3, [pc, #428]	@ (8005690 <ESP_Upkeep+0x390>)
 80054e4:	2204      	movs	r2, #4
 80054e6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054e8:	4b7c      	ldr	r3, [pc, #496]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80054ee:	4b6b      	ldr	r3, [pc, #428]	@ (800569c <ESP_Upkeep+0x39c>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80054f4:	4b79      	ldr	r3, [pc, #484]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	001a      	movs	r2, r3
 80054fa:	4b74      	ldr	r3, [pc, #464]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80054fc:	5c9a      	ldrb	r2, [r3, r2]
 80054fe:	4b66      	ldr	r3, [pc, #408]	@ (8005698 <ESP_Upkeep+0x398>)
 8005500:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005502:	4b67      	ldr	r3, [pc, #412]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005508:	4b71      	ldr	r3, [pc, #452]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d021      	beq.n	8005554 <ESP_Upkeep+0x254>
 8005510:	4b73      	ldr	r3, [pc, #460]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01d      	beq.n	8005554 <ESP_Upkeep+0x254>
 8005518:	4b73      	ldr	r3, [pc, #460]	@ (80056e8 <ESP_Upkeep+0x3e8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2201      	movs	r2, #1
 800551e:	4053      	eors	r3, r2
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d016      	beq.n	8005554 <ESP_Upkeep+0x254>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005526:	4b71      	ldr	r3, [pc, #452]	@ (80056ec <ESP_Upkeep+0x3ec>)
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	4b68      	ldr	r3, [pc, #416]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800552c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800552e:	4b58      	ldr	r3, [pc, #352]	@ (8005690 <ESP_Upkeep+0x390>)
 8005530:	2204      	movs	r2, #4
 8005532:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005534:	4b69      	ldr	r3, [pc, #420]	@ (80056dc <ESP_Upkeep+0x3dc>)
 8005536:	2200      	movs	r2, #0
 8005538:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800553a:	4b58      	ldr	r3, [pc, #352]	@ (800569c <ESP_Upkeep+0x39c>)
 800553c:	2204      	movs	r2, #4
 800553e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005540:	4b66      	ldr	r3, [pc, #408]	@ (80056dc <ESP_Upkeep+0x3dc>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	001a      	movs	r2, r3
 8005546:	4b61      	ldr	r3, [pc, #388]	@ (80056cc <ESP_Upkeep+0x3cc>)
 8005548:	5c9a      	ldrb	r2, [r3, r2]
 800554a:	4b53      	ldr	r3, [pc, #332]	@ (8005698 <ESP_Upkeep+0x398>)
 800554c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800554e:	4b54      	ldr	r3, [pc, #336]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005554:	4b5e      	ldr	r3, [pc, #376]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02e      	beq.n	80055ba <ESP_Upkeep+0x2ba>
 800555c:	4b60      	ldr	r3, [pc, #384]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02a      	beq.n	80055ba <ESP_Upkeep+0x2ba>
 8005564:	4b60      	ldr	r3, [pc, #384]	@ (80056e8 <ESP_Upkeep+0x3e8>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d026      	beq.n	80055ba <ESP_Upkeep+0x2ba>
 800556c:	4b60      	ldr	r3, [pc, #384]	@ (80056f0 <ESP_Upkeep+0x3f0>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	4053      	eors	r3, r2
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01f      	beq.n	80055ba <ESP_Upkeep+0x2ba>
        memcpy(ATCommandArray, AT_SEND, 3);
 800557a:	4b54      	ldr	r3, [pc, #336]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800557c:	4a5d      	ldr	r2, [pc, #372]	@ (80056f4 <ESP_Upkeep+0x3f4>)
 800557e:	8811      	ldrh	r1, [r2, #0]
 8005580:	8019      	strh	r1, [r3, #0]
 8005582:	7892      	ldrb	r2, [r2, #2]
 8005584:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005586:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <ESP_Upkeep+0x390>)
 8005588:	2204      	movs	r2, #4
 800558a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800558c:	4b53      	ldr	r3, [pc, #332]	@ (80056dc <ESP_Upkeep+0x3dc>)
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005592:	4b42      	ldr	r3, [pc, #264]	@ (800569c <ESP_Upkeep+0x39c>)
 8005594:	2202      	movs	r2, #2
 8005596:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005598:	f008 febe 	bl	800e318 <HAL_GetTick>
 800559c:	0002      	movs	r2, r0
 800559e:	4b56      	ldr	r3, [pc, #344]	@ (80056f8 <ESP_Upkeep+0x3f8>)
 80055a0:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80055a2:	f007 fbab 	bl	800ccfc <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80055a6:	4b4d      	ldr	r3, [pc, #308]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	001a      	movs	r2, r3
 80055ac:	4b47      	ldr	r3, [pc, #284]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80055ae:	5c9a      	ldrb	r2, [r3, r2]
 80055b0:	4b39      	ldr	r3, [pc, #228]	@ (8005698 <ESP_Upkeep+0x398>)
 80055b2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055b4:	4b3a      	ldr	r3, [pc, #232]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80055ba:	4b50      	ldr	r3, [pc, #320]	@ (80056fc <ESP_Upkeep+0x3fc>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d022      	beq.n	8005608 <ESP_Upkeep+0x308>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80055c2:	4b42      	ldr	r3, [pc, #264]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80055c4:	4a4e      	ldr	r2, [pc, #312]	@ (8005700 <ESP_Upkeep+0x400>)
 80055c6:	6811      	ldr	r1, [r2, #0]
 80055c8:	6019      	str	r1, [r3, #0]
 80055ca:	7912      	ldrb	r2, [r2, #4]
 80055cc:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80055ce:	4a4d      	ldr	r2, [pc, #308]	@ (8005704 <ESP_Upkeep+0x404>)
 80055d0:	4b35      	ldr	r3, [pc, #212]	@ (80056a8 <ESP_Upkeep+0x3a8>)
 80055d2:	0019      	movs	r1, r3
 80055d4:	2003      	movs	r0, #3
 80055d6:	f008 fa53 	bl	800da80 <CreateLine>
        DisableConnectedDevices();
 80055da:	f002 fc7f 	bl	8007edc <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 80055de:	4b2c      	ldr	r3, [pc, #176]	@ (8005690 <ESP_Upkeep+0x390>)
 80055e0:	2204      	movs	r2, #4
 80055e2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80055e4:	4b3d      	ldr	r3, [pc, #244]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80055ea:	4b2c      	ldr	r3, [pc, #176]	@ (800569c <ESP_Upkeep+0x39c>)
 80055ec:	2203      	movs	r2, #3
 80055ee:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80055f0:	f007 fb84 	bl	800ccfc <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80055f4:	4b39      	ldr	r3, [pc, #228]	@ (80056dc <ESP_Upkeep+0x3dc>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	001a      	movs	r2, r3
 80055fa:	4b34      	ldr	r3, [pc, #208]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80055fc:	5c9a      	ldrb	r2, [r3, r2]
 80055fe:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <ESP_Upkeep+0x398>)
 8005600:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005602:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005608:	4b31      	ldr	r3, [pc, #196]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d100      	bne.n	8005612 <ESP_Upkeep+0x312>
 8005610:	e2c1      	b.n	8005b96 <ESP_Upkeep+0x896>
 8005612:	4b33      	ldr	r3, [pc, #204]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d100      	bne.n	800561c <ESP_Upkeep+0x31c>
 800561a:	e2bc      	b.n	8005b96 <ESP_Upkeep+0x896>
 800561c:	4b32      	ldr	r3, [pc, #200]	@ (80056e8 <ESP_Upkeep+0x3e8>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d100      	bne.n	8005626 <ESP_Upkeep+0x326>
 8005624:	e2b7      	b.n	8005b96 <ESP_Upkeep+0x896>
 8005626:	4b32      	ldr	r3, [pc, #200]	@ (80056f0 <ESP_Upkeep+0x3f0>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d100      	bne.n	8005630 <ESP_Upkeep+0x330>
 800562e:	e2b2      	b.n	8005b96 <ESP_Upkeep+0x896>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <ESP_Upkeep+0x408>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b25      	ldr	r3, [pc, #148]	@ (80056cc <ESP_Upkeep+0x3cc>)
 8005636:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005638:	4b15      	ldr	r3, [pc, #84]	@ (8005690 <ESP_Upkeep+0x390>)
 800563a:	2204      	movs	r2, #4
 800563c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800563e:	4b27      	ldr	r3, [pc, #156]	@ (80056dc <ESP_Upkeep+0x3dc>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005644:	4b15      	ldr	r3, [pc, #84]	@ (800569c <ESP_Upkeep+0x39c>)
 8005646:	2205      	movs	r2, #5
 8005648:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800564a:	f008 fe65 	bl	800e318 <HAL_GetTick>
 800564e:	0002      	movs	r2, r0
 8005650:	4b29      	ldr	r3, [pc, #164]	@ (80056f8 <ESP_Upkeep+0x3f8>)
 8005652:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005654:	f007 fb52 	bl	800ccfc <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005658:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <ESP_Upkeep+0x3dc>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	001a      	movs	r2, r3
 800565e:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <ESP_Upkeep+0x3cc>)
 8005660:	5c9a      	ldrb	r2, [r3, r2]
 8005662:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <ESP_Upkeep+0x398>)
 8005664:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005666:	4b0e      	ldr	r3, [pc, #56]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
      }
    break;
 800566c:	e293      	b.n	8005b96 <ESP_Upkeep+0x896>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800566e:	4b0a      	ldr	r3, [pc, #40]	@ (8005698 <ESP_Upkeep+0x398>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	1dfc      	adds	r4, r7, #7
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff fb65 	bl	8004d44 <AT_Send>
 800567a:	0003      	movs	r3, r0
 800567c:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800567e:	1dfb      	adds	r3, r7, #7
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d100      	bne.n	8005688 <ESP_Upkeep+0x388>
 8005686:	e288      	b.n	8005b9a <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005688:	4b01      	ldr	r3, [pc, #4]	@ (8005690 <ESP_Upkeep+0x390>)
 800568a:	2203      	movs	r2, #3
 800568c:	701a      	strb	r2, [r3, #0]
        }
    break;
 800568e:	e284      	b.n	8005b9a <ESP_Upkeep+0x89a>
 8005690:	20000028 	.word	0x20000028
 8005694:	20000002 	.word	0x20000002
 8005698:	200009a2 	.word	0x200009a2
 800569c:	200009a3 	.word	0x200009a3
 80056a0:	200009a1 	.word	0x200009a1
 80056a4:	08022fe4 	.word	0x08022fe4
 80056a8:	08022700 	.word	0x08022700
 80056ac:	08024638 	.word	0x08024638
 80056b0:	20000548 	.word	0x20000548
 80056b4:	50000800 	.word	0x50000800
 80056b8:	50001c00 	.word	0x50001c00
 80056bc:	20000994 	.word	0x20000994
 80056c0:	20000448 	.word	0x20000448
 80056c4:	20000aa8 	.word	0x20000aa8
 80056c8:	2000002a 	.word	0x2000002a
 80056cc:	20000984 	.word	0x20000984
 80056d0:	20000549 	.word	0x20000549
 80056d4:	2000054a 	.word	0x2000054a
 80056d8:	20000004 	.word	0x20000004
 80056dc:	2000098e 	.word	0x2000098e
 80056e0:	2000054c 	.word	0x2000054c
 80056e4:	20000014 	.word	0x20000014
 80056e8:	2000054d 	.word	0x2000054d
 80056ec:	20000010 	.word	0x20000010
 80056f0:	20000001 	.word	0x20000001
 80056f4:	2000000c 	.word	0x2000000c
 80056f8:	2000055c 	.word	0x2000055c
 80056fc:	2000054b 	.word	0x2000054b
 8005700:	2000001c 	.word	0x2000001c
 8005704:	08023010 	.word	0x08023010
 8005708:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 800570c:	4be0      	ldr	r3, [pc, #896]	@ (8005a90 <ESP_Upkeep+0x790>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	0018      	movs	r0, r3
 8005712:	f008 f95f 	bl	800d9d4 <TimestampIsReached>
 8005716:	1e03      	subs	r3, r0, #0
 8005718:	d100      	bne.n	800571c <ESP_Upkeep+0x41c>
 800571a:	e240      	b.n	8005b9e <ESP_Upkeep+0x89e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800571c:	4bdd      	ldr	r3, [pc, #884]	@ (8005a94 <ESP_Upkeep+0x794>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	0018      	movs	r0, r3
 8005722:	f7ff f9bb 	bl	8004a9c <DMA_ProcessBuffer>
 8005726:	0003      	movs	r3, r0
 8005728:	001a      	movs	r2, r3
 800572a:	4bdb      	ldr	r3, [pc, #876]	@ (8005a98 <ESP_Upkeep+0x798>)
 800572c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800572e:	4bda      	ldr	r3, [pc, #872]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	4bd8      	ldr	r3, [pc, #864]	@ (8005a94 <ESP_Upkeep+0x794>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	1d7c      	adds	r4, r7, #5
 8005738:	0019      	movs	r1, r3
 800573a:	0010      	movs	r0, r2
 800573c:	f7ff fac0 	bl	8004cc0 <ATCompare>
 8005740:	0003      	movs	r3, r0
 8005742:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005744:	4bd4      	ldr	r3, [pc, #848]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d139      	bne.n	80057c0 <ESP_Upkeep+0x4c0>
          if(ATCommand == AT_SENDDATA){
 800574c:	4bd3      	ldr	r3, [pc, #844]	@ (8005a9c <ESP_Upkeep+0x79c>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d108      	bne.n	8005766 <ESP_Upkeep+0x466>
            ATCommand = AT_HTTPCPOST;
 8005754:	4bd1      	ldr	r3, [pc, #836]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005756:	220e      	movs	r2, #14
 8005758:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800575a:	4bce      	ldr	r3, [pc, #824]	@ (8005a94 <ESP_Upkeep+0x794>)
 800575c:	2202      	movs	r2, #2
 800575e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005760:	4bcf      	ldr	r3, [pc, #828]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005766:	4bcf      	ldr	r3, [pc, #828]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005768:	2204      	movs	r2, #4
 800576a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800576c:	4bce      	ldr	r3, [pc, #824]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4bcc      	ldr	r3, [pc, #816]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005776:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005778:	4bcb      	ldr	r3, [pc, #812]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d11f      	bne.n	80057c0 <ESP_Upkeep+0x4c0>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005780:	f008 fdca 	bl	800e318 <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	4ac9      	ldr	r2, [pc, #804]	@ (8005aac <ESP_Upkeep+0x7ac>)
 8005788:	189a      	adds	r2, r3, r2
 800578a:	4bc1      	ldr	r3, [pc, #772]	@ (8005a90 <ESP_Upkeep+0x790>)
 800578c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800578e:	4bc8      	ldr	r3, [pc, #800]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005794:	f007 faca 	bl	800cd2c <ResetESPIndicator>
            clearDMABuffer();
 8005798:	f7ff fa84 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 800579c:	f008 fdbc 	bl	800e318 <HAL_GetTick>
 80057a0:	0002      	movs	r2, r0
 80057a2:	4bc4      	ldr	r3, [pc, #784]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 80057a4:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80057a6:	4bc3      	ldr	r3, [pc, #780]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4bc3      	ldr	r3, [pc, #780]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	4ac2      	ldr	r2, [pc, #776]	@ (8005abc <ESP_Upkeep+0x7bc>)
 80057b2:	49c3      	ldr	r1, [pc, #780]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 80057b4:	2003      	movs	r0, #3
 80057b6:	f008 f963 	bl	800da80 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80057ba:	4bba      	ldr	r3, [pc, #744]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80057bc:	220d      	movs	r2, #13
 80057be:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80057c0:	4bb5      	ldr	r3, [pc, #724]	@ (8005a98 <ESP_Upkeep+0x798>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d106      	bne.n	80057d6 <ESP_Upkeep+0x4d6>
          ESPTimeStamp = HAL_GetTick() + 10;
 80057c8:	f008 fda6 	bl	800e318 <HAL_GetTick>
 80057cc:	0003      	movs	r3, r0
 80057ce:	330a      	adds	r3, #10
 80057d0:	001a      	movs	r2, r3
 80057d2:	4baf      	ldr	r3, [pc, #700]	@ (8005a90 <ESP_Upkeep+0x790>)
 80057d4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80057d6:	4bb0      	ldr	r3, [pc, #704]	@ (8005a98 <ESP_Upkeep+0x798>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b0a      	cmp	r3, #10
 80057dc:	d106      	bne.n	80057ec <ESP_Upkeep+0x4ec>
          ESPTimeStamp = HAL_GetTick() + 10;
 80057de:	f008 fd9b 	bl	800e318 <HAL_GetTick>
 80057e2:	0003      	movs	r3, r0
 80057e4:	330a      	adds	r3, #10
 80057e6:	001a      	movs	r2, r3
 80057e8:	4ba9      	ldr	r3, [pc, #676]	@ (8005a90 <ESP_Upkeep+0x790>)
 80057ea:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80057ec:	4baa      	ldr	r3, [pc, #680]	@ (8005a98 <ESP_Upkeep+0x798>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d146      	bne.n	8005882 <ESP_Upkeep+0x582>
//====
          timeoutcntr++;
 80057f4:	4bb3      	ldr	r3, [pc, #716]	@ (8005ac4 <ESP_Upkeep+0x7c4>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	4bb1      	ldr	r3, [pc, #708]	@ (8005ac4 <ESP_Upkeep+0x7c4>)
 80057fe:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 8005800:	4bb0      	ldr	r3, [pc, #704]	@ (8005ac4 <ESP_Upkeep+0x7c4>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d125      	bne.n	8005854 <ESP_Upkeep+0x554>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005808:	f008 fd86 	bl	800e318 <HAL_GetTick>
 800580c:	0003      	movs	r3, r0
 800580e:	4aa7      	ldr	r2, [pc, #668]	@ (8005aac <ESP_Upkeep+0x7ac>)
 8005810:	189a      	adds	r2, r3, r2
 8005812:	4b9f      	ldr	r3, [pc, #636]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005814:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005816:	4ba6      	ldr	r3, [pc, #664]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005818:	2201      	movs	r2, #1
 800581a:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 800581c:	f007 fa86 	bl	800cd2c <ResetESPIndicator>
            clearDMABuffer();
 8005820:	f7ff fa40 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005824:	f008 fd78 	bl	800e318 <HAL_GetTick>
 8005828:	0002      	movs	r2, r0
 800582a:	4ba2      	ldr	r3, [pc, #648]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 800582c:	601a      	str	r2, [r3, #0]
            Debug("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800582e:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	4aa3      	ldr	r2, [pc, #652]	@ (8005ac8 <ESP_Upkeep+0x7c8>)
 800583a:	49a1      	ldr	r1, [pc, #644]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 800583c:	2003      	movs	r0, #3
 800583e:	f008 f91f 	bl	800da80 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005842:	4b98      	ldr	r3, [pc, #608]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005844:	220d      	movs	r2, #13
 8005846:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005848:	4b94      	ldr	r3, [pc, #592]	@ (8005a9c <ESP_Upkeep+0x79c>)
 800584a:	2214      	movs	r2, #20
 800584c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 800584e:	4b91      	ldr	r3, [pc, #580]	@ (8005a94 <ESP_Upkeep+0x794>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
          }
//====
          if(ATCommand != AT_SENDDATA){
 8005854:	4b91      	ldr	r3, [pc, #580]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b0f      	cmp	r3, #15
 800585a:	d003      	beq.n	8005864 <ESP_Upkeep+0x564>
            EspState = ESP_STATE_SEND;
 800585c:	4b91      	ldr	r3, [pc, #580]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 800585e:	2204      	movs	r2, #4
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e00e      	b.n	8005882 <ESP_Upkeep+0x582>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005864:	4b8d      	ldr	r3, [pc, #564]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005866:	220e      	movs	r2, #14
 8005868:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800586a:	4b8d      	ldr	r3, [pc, #564]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4b8b      	ldr	r3, [pc, #556]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005874:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005876:	4b87      	ldr	r3, [pc, #540]	@ (8005a94 <ESP_Upkeep+0x794>)
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 800587c:	4b89      	ldr	r3, [pc, #548]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 800587e:	2204      	movs	r2, #4
 8005880:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005882:	1d7b      	adds	r3, r7, #5
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d100      	bne.n	800588c <ESP_Upkeep+0x58c>
 800588a:	e188      	b.n	8005b9e <ESP_Upkeep+0x89e>
          EspState = ESP_STATE_NEXT_AT;
 800588c:	4b85      	ldr	r3, [pc, #532]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 800588e:	2205      	movs	r2, #5
 8005890:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005892:	e184      	b.n	8005b9e <ESP_Upkeep+0x89e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005894:	4b82      	ldr	r3, [pc, #520]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	3301      	adds	r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	4b80      	ldr	r3, [pc, #512]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 800589e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80058a0:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	001a      	movs	r2, r3
 80058a6:	4b89      	ldr	r3, [pc, #548]	@ (8005acc <ESP_Upkeep+0x7cc>)
 80058a8:	5c9a      	ldrb	r2, [r3, r2]
 80058aa:	4b7c      	ldr	r3, [pc, #496]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058ac:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80058ae:	4b7b      	ldr	r3, [pc, #492]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d102      	bne.n	80058bc <ESP_Upkeep+0x5bc>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80058b6:	4b77      	ldr	r3, [pc, #476]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80058bc:	4b77      	ldr	r3, [pc, #476]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b0e      	cmp	r3, #14
 80058c2:	d102      	bne.n	80058ca <ESP_Upkeep+0x5ca>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80058c4:	4b73      	ldr	r3, [pc, #460]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058c6:	2202      	movs	r2, #2
 80058c8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80058ca:	4b74      	ldr	r3, [pc, #464]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b0e      	cmp	r3, #14
 80058d0:	d006      	beq.n	80058e0 <ESP_Upkeep+0x5e0>
 80058d2:	4b72      	ldr	r3, [pc, #456]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d002      	beq.n	80058e0 <ESP_Upkeep+0x5e0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058da:	4b6e      	ldr	r3, [pc, #440]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80058e0:	4b6e      	ldr	r3, [pc, #440]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b11      	cmp	r3, #17
 80058e6:	d102      	bne.n	80058ee <ESP_Upkeep+0x5ee>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80058e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058ea:	2205      	movs	r2, #5
 80058ec:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80058ee:	4b6d      	ldr	r3, [pc, #436]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80058f0:	2204      	movs	r2, #4
 80058f2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80058f4:	4b69      	ldr	r3, [pc, #420]	@ (8005a9c <ESP_Upkeep+0x79c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b14      	cmp	r3, #20
 80058fa:	d000      	beq.n	80058fe <ESP_Upkeep+0x5fe>
 80058fc:	e151      	b.n	8005ba2 <ESP_Upkeep+0x8a2>
        if(Mode == AT_MODE_SEND){
 80058fe:	4b74      	ldr	r3, [pc, #464]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d122      	bne.n	800594c <ESP_Upkeep+0x64c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005906:	f008 fd07 	bl	800e318 <HAL_GetTick>
 800590a:	0003      	movs	r3, r0
 800590c:	4a67      	ldr	r2, [pc, #412]	@ (8005aac <ESP_Upkeep+0x7ac>)
 800590e:	189a      	adds	r2, r3, r2
 8005910:	4b5f      	ldr	r3, [pc, #380]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005912:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005914:	f007 fa0a 	bl	800cd2c <ResetESPIndicator>
          clearDMABuffer();
 8005918:	f7ff f9c4 	bl	8004ca4 <clearDMABuffer>
          stop = HAL_GetTick();
 800591c:	f008 fcfc 	bl	800e318 <HAL_GetTick>
 8005920:	0002      	movs	r2, r0
 8005922:	4b64      	ldr	r3, [pc, #400]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005924:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 8005926:	4b63      	ldr	r3, [pc, #396]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b63      	ldr	r3, [pc, #396]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	4a68      	ldr	r2, [pc, #416]	@ (8005ad4 <ESP_Upkeep+0x7d4>)
 8005932:	4963      	ldr	r1, [pc, #396]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 8005934:	2003      	movs	r0, #3
 8005936:	f008 f8a3 	bl	800da80 <CreateLine>
          showTime();
 800593a:	f000 fcc9 	bl	80062d0 <showTime>
          ESPTransmitDone = true;
 800593e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005944:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005946:	220d      	movs	r2, #13
 8005948:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 800594a:	e12a      	b.n	8005ba2 <ESP_Upkeep+0x8a2>
        else if (Mode == AT_MODE_GETTIME) {
 800594c:	4b60      	ldr	r3, [pc, #384]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b05      	cmp	r3, #5
 8005952:	d12e      	bne.n	80059b2 <ESP_Upkeep+0x6b2>
            setTime = false;
 8005954:	4b60      	ldr	r3, [pc, #384]	@ (8005ad8 <ESP_Upkeep+0x7d8>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 800595a:	f008 fcdd 	bl	800e318 <HAL_GetTick>
 800595e:	0003      	movs	r3, r0
 8005960:	4a5e      	ldr	r2, [pc, #376]	@ (8005adc <ESP_Upkeep+0x7dc>)
 8005962:	189a      	adds	r2, r3, r2
 8005964:	4b5e      	ldr	r3, [pc, #376]	@ (8005ae0 <ESP_Upkeep+0x7e0>)
 8005966:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005968:	4b5d      	ldr	r3, [pc, #372]	@ (8005ae0 <ESP_Upkeep+0x7e0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ae4 <ESP_Upkeep+0x7e4>)
 800596e:	4954      	ldr	r1, [pc, #336]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 8005970:	2003      	movs	r0, #3
 8005972:	f008 f885 	bl	800da80 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005976:	4b5c      	ldr	r3, [pc, #368]	@ (8005ae8 <ESP_Upkeep+0x7e8>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b45      	ldr	r3, [pc, #276]	@ (8005a90 <ESP_Upkeep+0x790>)
 800597c:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 800597e:	f007 f9d5 	bl	800cd2c <ResetESPIndicator>
            clearDMABuffer();
 8005982:	f7ff f98f 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005986:	f008 fcc7 	bl	800e318 <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	4b49      	ldr	r3, [pc, #292]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 800598e:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 8005990:	4b48      	ldr	r3, [pc, #288]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b48      	ldr	r3, [pc, #288]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	4a54      	ldr	r2, [pc, #336]	@ (8005aec <ESP_Upkeep+0x7ec>)
 800599c:	4948      	ldr	r1, [pc, #288]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 800599e:	2003      	movs	r0, #3
 80059a0:	f008 f86e 	bl	800da80 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80059a4:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80059a6:	220d      	movs	r2, #13
 80059a8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 80059aa:	4b49      	ldr	r3, [pc, #292]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 80059ac:	2202      	movs	r2, #2
 80059ae:	701a      	strb	r2, [r3, #0]
    break;
 80059b0:	e0f7      	b.n	8005ba2 <ESP_Upkeep+0x8a2>
          EspState = ESP_STATE_RESET;
 80059b2:	4b3c      	ldr	r3, [pc, #240]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80059b4:	2209      	movs	r2, #9
 80059b6:	701a      	strb	r2, [r3, #0]
    break;
 80059b8:	e0f3      	b.n	8005ba2 <ESP_Upkeep+0x8a2>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80059ba:	4b4d      	ldr	r3, [pc, #308]	@ (8005af0 <ESP_Upkeep+0x7f0>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80059c0:	4b4c      	ldr	r3, [pc, #304]	@ (8005af4 <ESP_Upkeep+0x7f4>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	2101      	movs	r1, #1
 80059c6:	0018      	movs	r0, r3
 80059c8:	f009 ff21 	bl	800f80e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059cc:	2001      	movs	r0, #1
 80059ce:	f008 fcad 	bl	800e32c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4848      	ldr	r0, [pc, #288]	@ (8005af8 <ESP_Upkeep+0x7f8>)
 80059d8:	2200      	movs	r2, #0
 80059da:	0019      	movs	r1, r3
 80059dc:	f009 ff17 	bl	800f80e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f008 fca3 	bl	800e32c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80059e6:	4b43      	ldr	r3, [pc, #268]	@ (8005af4 <ESP_Upkeep+0x7f4>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	2102      	movs	r1, #2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f009 ff0e 	bl	800f80e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80059f2:	4b2c      	ldr	r3, [pc, #176]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 80059f4:	2209      	movs	r2, #9
 80059f6:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80059f8:	2001      	movs	r0, #1
 80059fa:	f008 fc97 	bl	800e32c <HAL_Delay>
      errorcntr = 0;
 80059fe:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
      break;
 8005a04:	e0d0      	b.n	8005ba8 <ESP_Upkeep+0x8a8>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005a06:	4b22      	ldr	r3, [pc, #136]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f007 ffe2 	bl	800d9d4 <TimestampIsReached>
 8005a10:	1e03      	subs	r3, r0, #0
 8005a12:	d104      	bne.n	8005a1e <ESP_Upkeep+0x71e>
 8005a14:	4b39      	ldr	r3, [pc, #228]	@ (8005afc <ESP_Upkeep+0x7fc>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d100      	bne.n	8005a1e <ESP_Upkeep+0x71e>
 8005a1c:	e07a      	b.n	8005b14 <ESP_Upkeep+0x814>
        ESPTransmitDone = false;
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005a24:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <ESP_Upkeep+0x738>
          InitIsDone = true;
 8005a2c:	4b34      	ldr	r3, [pc, #208]	@ (8005b00 <ESP_Upkeep+0x800>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a32:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a34:	220b      	movs	r2, #11
 8005a36:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005a38:	4b25      	ldr	r3, [pc, #148]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d108      	bne.n	8005a52 <ESP_Upkeep+0x752>
          ConnectionMade = true;
 8005a40:	4b30      	ldr	r3, [pc, #192]	@ (8005b04 <ESP_Upkeep+0x804>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005a46:	4b30      	ldr	r3, [pc, #192]	@ (8005b08 <ESP_Upkeep+0x808>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a4c:	4b15      	ldr	r3, [pc, #84]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a4e:	220b      	movs	r2, #11
 8005a50:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005a52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d102      	bne.n	8005a60 <ESP_Upkeep+0x760>
          EspState = ESP_STATE_INIT;
 8005a5a:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d108      	bne.n	8005a7a <ESP_Upkeep+0x77a>
          EspState = ESP_STATE_CONFIG;
 8005a68:	4b0e      	ldr	r3, [pc, #56]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a6a:	220e      	movs	r2, #14
 8005a6c:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005a6e:	4a27      	ldr	r2, [pc, #156]	@ (8005b0c <ESP_Upkeep+0x80c>)
 8005a70:	4b13      	ldr	r3, [pc, #76]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 8005a72:	0019      	movs	r1, r3
 8005a74:	2003      	movs	r0, #3
 8005a76:	f008 f803 	bl	800da80 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005a7a:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d167      	bne.n	8005b52 <ESP_Upkeep+0x852>
          EspState = ESP_STATE_MODE_SELECT;
 8005a82:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 8005a84:	220b      	movs	r2, #11
 8005a86:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005a88:	4b21      	ldr	r3, [pc, #132]	@ (8005b10 <ESP_Upkeep+0x810>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005a8e:	e060      	b.n	8005b52 <ESP_Upkeep+0x852>
 8005a90:	20000994 	.word	0x20000994
 8005a94:	200009a1 	.word	0x200009a1
 8005a98:	2000002a 	.word	0x2000002a
 8005a9c:	200009a2 	.word	0x200009a2
 8005aa0:	2000098e 	.word	0x2000098e
 8005aa4:	20000028 	.word	0x20000028
 8005aa8:	2000098f 	.word	0x2000098f
 8005aac:	000493e0 	.word	0x000493e0
 8005ab0:	2000054f 	.word	0x2000054f
 8005ab4:	20000560 	.word	0x20000560
 8005ab8:	2000055c 	.word	0x2000055c
 8005abc:	08023040 	.word	0x08023040
 8005ac0:	08022700 	.word	0x08022700
 8005ac4:	20000990 	.word	0x20000990
 8005ac8:	08023074 	.word	0x08023074
 8005acc:	20000984 	.word	0x20000984
 8005ad0:	200009a3 	.word	0x200009a3
 8005ad4:	080230a4 	.word	0x080230a4
 8005ad8:	20000001 	.word	0x20000001
 8005adc:	002c4020 	.word	0x002c4020
 8005ae0:	20000998 	.word	0x20000998
 8005ae4:	080230bc 	.word	0x080230bc
 8005ae8:	2000099c 	.word	0x2000099c
 8005aec:	08023100 	.word	0x08023100
 8005af0:	20000548 	.word	0x20000548
 8005af4:	50001c00 	.word	0x50001c00
 8005af8:	50000800 	.word	0x50000800
 8005afc:	2000054b 	.word	0x2000054b
 8005b00:	20000549 	.word	0x20000549
 8005b04:	2000054c 	.word	0x2000054c
 8005b08:	2000054e 	.word	0x2000054e
 8005b0c:	08023120 	.word	0x08023120
 8005b10:	2000054d 	.word	0x2000054d
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005b14:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <ESP_Upkeep+0x8b4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f007 ff5b 	bl	800d9d4 <TimestampIsReached>
 8005b1e:	1e03      	subs	r3, r0, #0
 8005b20:	d041      	beq.n	8005ba6 <ESP_Upkeep+0x8a6>
        if(Mode == AT_MODE_SEND ) {
 8005b22:	4b25      	ldr	r3, [pc, #148]	@ (8005bb8 <ESP_Upkeep+0x8b8>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d13d      	bne.n	8005ba6 <ESP_Upkeep+0x8a6>
            Mode = AT_MODE_GETTIME;
 8005b2a:	4b23      	ldr	r3, [pc, #140]	@ (8005bb8 <ESP_Upkeep+0x8b8>)
 8005b2c:	2205      	movs	r2, #5
 8005b2e:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005b30:	4b22      	ldr	r3, [pc, #136]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005b32:	2202      	movs	r2, #2
 8005b34:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005b36:	4b22      	ldr	r3, [pc, #136]	@ (8005bc0 <ESP_Upkeep+0x8c0>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b22      	ldr	r3, [pc, #136]	@ (8005bc4 <ESP_Upkeep+0x8c4>)
 8005b3c:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005b3e:	4b22      	ldr	r3, [pc, #136]	@ (8005bc8 <ESP_Upkeep+0x8c8>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005b44:	4a21      	ldr	r2, [pc, #132]	@ (8005bcc <ESP_Upkeep+0x8cc>)
 8005b46:	4b22      	ldr	r3, [pc, #136]	@ (8005bd0 <ESP_Upkeep+0x8d0>)
 8005b48:	0019      	movs	r1, r3
 8005b4a:	2003      	movs	r0, #3
 8005b4c:	f007 ff98 	bl	800da80 <CreateLine>
        }
      }
      break;
 8005b50:	e029      	b.n	8005ba6 <ESP_Upkeep+0x8a6>
 8005b52:	e028      	b.n	8005ba6 <ESP_Upkeep+0x8a6>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 8005b54:	f016 fc0a 	bl	801c36c <GetUsbRxPointer>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f8b0 	bl	8005cc0 <Process_PC_Config>
      break;
 8005b60:	e022      	b.n	8005ba8 <ESP_Upkeep+0x8a8>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005b62:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd4 <ESP_Upkeep+0x8d4>)
 8005b64:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <ESP_Upkeep+0x8d0>)
 8005b66:	0019      	movs	r1, r3
 8005b68:	2003      	movs	r0, #3
 8005b6a:	f007 ff89 	bl	800da80 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005b6e:	4b13      	ldr	r3, [pc, #76]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005b70:	2202      	movs	r2, #2
 8005b72:	701a      	strb	r2, [r3, #0]
      break;
 8005b74:	e018      	b.n	8005ba8 <ESP_Upkeep+0x8a8>

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 8005b76:	4a18      	ldr	r2, [pc, #96]	@ (8005bd8 <ESP_Upkeep+0x8d8>)
 8005b78:	4b15      	ldr	r3, [pc, #84]	@ (8005bd0 <ESP_Upkeep+0x8d0>)
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	f007 ff7f 	bl	800da80 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005b82:	4b0e      	ldr	r3, [pc, #56]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005b84:	2207      	movs	r2, #7
 8005b86:	701a      	strb	r2, [r3, #0]
      break;
 8005b88:	e00e      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	e00c      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005b8e:	46c0      	nop			@ (mov r8, r8)
 8005b90:	e00a      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
        break;
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	e008      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
    break;
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	e006      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
    break;
 8005b9a:	46c0      	nop			@ (mov r8, r8)
 8005b9c:	e004      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	e002      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
    break;
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	e000      	b.n	8005ba8 <ESP_Upkeep+0x8a8>
      break;
 8005ba6:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005ba8:	4b04      	ldr	r3, [pc, #16]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb4:	20000998 	.word	0x20000998
 8005bb8:	200009a3 	.word	0x200009a3
 8005bbc:	20000028 	.word	0x20000028
 8005bc0:	20000994 	.word	0x20000994
 8005bc4:	2000099c 	.word	0x2000099c
 8005bc8:	20000001 	.word	0x20000001
 8005bcc:	08023138 	.word	0x08023138
 8005bd0:	08022700 	.word	0x08022700
 8005bd4:	08023148 	.word	0x08023148
 8005bd8:	0802315c 	.word	0x0802315c

08005bdc <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <I2CSensors_Init+0x30>)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005bea:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <I2CSensors_Init+0x34>)
 8005bec:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <I2CSensors_Init+0x38>)
 8005bee:	0011      	movs	r1, r2
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f008 f89f 	bl	800dd34 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005bf6:	4a06      	ldr	r2, [pc, #24]	@ (8005c10 <I2CSensors_Init+0x34>)
 8005bf8:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <I2CSensors_Init+0x38>)
 8005bfa:	0011      	movs	r1, r2
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f005 fa1b 	bl	800b038 <SGP_Init>
}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b002      	add	sp, #8
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	46c0      	nop			@ (mov r8, r8)
 8005c0c:	20000aac 	.word	0x20000aac
 8005c10:	08005c6d 	.word	0x08005c6d
 8005c14:	08005c19 	.word	0x08005c19

08005c18 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c18:	b5b0      	push	{r4, r5, r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6039      	str	r1, [r7, #0]
 8005c20:	0011      	movs	r1, r2
 8005c22:	1dfb      	adds	r3, r7, #7
 8005c24:	1c02      	adds	r2, r0, #0
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	1dbb      	adds	r3, r7, #6
 8005c2a:	1c0a      	adds	r2, r1, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c68 <ReadI2C+0x50>)
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	1dfb      	adds	r3, r7, #7
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	18db      	adds	r3, r3, r3
 8005c3a:	b299      	uxth	r1, r3
 8005c3c:	1dbb      	adds	r3, r7, #6
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	250f      	movs	r5, #15
 8005c44:	197c      	adds	r4, r7, r5
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	f00a f9c6 	bl	800ffd8 <HAL_I2C_Master_Receive_DMA>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005c50:	197b      	adds	r3, r7, r5
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <ReadI2C+0x44>
        return false;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <ReadI2C+0x46>
    }
    return true;
 8005c5c:	2301      	movs	r3, #1
}
 8005c5e:	0018      	movs	r0, r3
 8005c60:	46bd      	mov	sp, r7
 8005c62:	b004      	add	sp, #16
 8005c64:	bdb0      	pop	{r4, r5, r7, pc}
 8005c66:	46c0      	nop			@ (mov r8, r8)
 8005c68:	20000aac 	.word	0x20000aac

08005c6c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c6c:	b5b0      	push	{r4, r5, r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6039      	str	r1, [r7, #0]
 8005c74:	0011      	movs	r1, r2
 8005c76:	1dfb      	adds	r3, r7, #7
 8005c78:	1c02      	adds	r2, r0, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	1c0a      	adds	r2, r1, #0
 8005c80:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c82:	4b0e      	ldr	r3, [pc, #56]	@ (8005cbc <WriteI2C+0x50>)
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	1dfb      	adds	r3, r7, #7
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	18db      	adds	r3, r3, r3
 8005c8e:	b299      	uxth	r1, r3
 8005c90:	1dbb      	adds	r3, r7, #6
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	250f      	movs	r5, #15
 8005c98:	197c      	adds	r4, r7, r5
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	f00a f896 	bl	800fdcc <HAL_I2C_Master_Transmit_DMA>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ca4:	197b      	adds	r3, r7, r5
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <WriteI2C+0x44>
        return false;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <WriteI2C+0x46>
    }
    return true;
 8005cb0:	2301      	movs	r3, #1
}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b004      	add	sp, #16
 8005cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	20000aac 	.word	0x20000aac

08005cc0 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b0c3      	sub	sp, #268	@ 0x10c
 8005cc4:	af3e      	add	r7, sp, #248	@ 0xf8
 8005cc6:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005cc8:	f016 fb70 	bl	801c3ac <GetUsbRxDataSize>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d971      	bls.n	8005dba <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2123      	movs	r1, #35	@ 0x23
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f019 fd66 	bl	801f7ac <strchr>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d065      	beq.n	8005db6 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	785a      	ldrb	r2, [r3, #1]
 8005cee:	4b34      	ldr	r3, [pc, #208]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005cf0:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	789a      	ldrb	r2, [r3, #2]
 8005cf6:	4b32      	ldr	r3, [pc, #200]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005cf8:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005cfa:	4b31      	ldr	r3, [pc, #196]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	3305      	adds	r3, #5
 8005d00:	001a      	movs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d351      	bcc.n	8005dac <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	1cd9      	adds	r1, r3, #3
 8005d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	001a      	movs	r2, r3
 8005d12:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <Process_PC_Config+0x104>)
 8005d14:	0018      	movs	r0, r3
 8005d16:	f019 fe1d 	bl	801f954 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005d1a:	4b29      	ldr	r3, [pc, #164]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	3303      	adds	r3, #3
 8005d20:	001a      	movs	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	189b      	adds	r3, r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	b21a      	sxth	r2, r3
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	3304      	adds	r3, #4
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	18cb      	adds	r3, r1, r3
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b21b      	sxth	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	b299      	uxth	r1, r3
 8005d40:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d42:	2381      	movs	r3, #129	@ 0x81
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005d48:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d4a:	2381      	movs	r3, #129	@ 0x81
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	5ad4      	ldrh	r4, [r2, r3]
 8005d50:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	3303      	adds	r3, #3
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 f975 	bl	800604c <CRC16_ARC>
 8005d62:	0003      	movs	r3, r0
 8005d64:	429c      	cmp	r4, r3
 8005d66:	d007      	beq.n	8005d78 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005d68:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d6a:	785a      	ldrb	r2, [r3, #1]
 8005d6c:	4b15      	ldr	r3, [pc, #84]	@ (8005dc4 <Process_PC_Config+0x104>)
 8005d6e:	0019      	movs	r1, r3
 8005d70:	2001      	movs	r0, #1
 8005d72:	f000 f919 	bl	8005fa8 <Create_Message>
 8005d76:	e016      	b.n	8005da6 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005d78:	4c11      	ldr	r4, [pc, #68]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d7a:	466b      	mov	r3, sp
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	0023      	movs	r3, r4
 8005d80:	3310      	adds	r3, #16
 8005d82:	22f4      	movs	r2, #244	@ 0xf4
 8005d84:	0019      	movs	r1, r3
 8005d86:	f019 fde5 	bl	801f954 <memcpy>
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	6861      	ldr	r1, [r4, #4]
 8005d8e:	68a2      	ldr	r2, [r4, #8]
 8005d90:	68e3      	ldr	r3, [r4, #12]
 8005d92:	f000 f819 	bl	8005dc8 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005d96:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d98:	7818      	ldrb	r0, [r3, #0]
 8005d9a:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <Process_PC_Config+0x100>)
 8005d9c:	785a      	ldrb	r2, [r3, #1]
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <Process_PC_Config+0x104>)
 8005da0:	0019      	movs	r1, r3
 8005da2:	f000 f901 	bl	8005fa8 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005da6:	f016 fae9 	bl	801c37c <ResetUsbRxDataSize>
                return;
 8005daa:	e006      	b.n	8005dba <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	0018      	movs	r0, r3
 8005db0:	f016 fb06 	bl	801c3c0 <GetUsbRxNextChunk>
 8005db4:	e001      	b.n	8005dba <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005db6:	f016 fae1 	bl	801c37c <ResetUsbRxDataSize>
        }
    }
}
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b005      	add	sp, #20
 8005dbe:	bd90      	pop	{r4, r7, pc}
 8005dc0:	20000ab0 	.word	0x20000ab0
 8005dc4:	20000ab2 	.word	0x20000ab2

08005dc8 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005dc8:	b084      	sub	sp, #16
 8005dca:	b5b0      	push	{r4, r5, r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	2518      	movs	r5, #24
 8005dd2:	197c      	adds	r4, r7, r5
 8005dd4:	6020      	str	r0, [r4, #0]
 8005dd6:	6061      	str	r1, [r4, #4]
 8005dd8:	60a2      	str	r2, [r4, #8]
 8005dda:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005ddc:	197b      	adds	r3, r7, r5
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2bfe      	cmp	r3, #254	@ 0xfe
 8005de2:	d100      	bne.n	8005de6 <ProcessCmd+0x1e>
 8005de4:	e09c      	b.n	8005f20 <ProcessCmd+0x158>
 8005de6:	dd00      	ble.n	8005dea <ProcessCmd+0x22>
 8005de8:	e0bc      	b.n	8005f64 <ProcessCmd+0x19c>
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	dc0a      	bgt.n	8005e04 <ProcessCmd+0x3c>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da00      	bge.n	8005df4 <ProcessCmd+0x2c>
 8005df2:	e0b7      	b.n	8005f64 <ProcessCmd+0x19c>
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	d900      	bls.n	8005dfa <ProcessCmd+0x32>
 8005df8:	e0b4      	b.n	8005f64 <ProcessCmd+0x19c>
 8005dfa:	009a      	lsls	r2, r3, #2
 8005dfc:	4b5d      	ldr	r3, [pc, #372]	@ (8005f74 <ProcessCmd+0x1ac>)
 8005dfe:	18d3      	adds	r3, r2, r3
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	469f      	mov	pc, r3
 8005e04:	2bfd      	cmp	r3, #253	@ 0xfd
 8005e06:	d100      	bne.n	8005e0a <ProcessCmd+0x42>
 8005e08:	e084      	b.n	8005f14 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005e0a:	e0ab      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e0c:	2118      	movs	r1, #24
 8005e0e:	187b      	adds	r3, r7, r1
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	001a      	movs	r2, r3
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	1c99      	adds	r1, r3, #2
 8005e18:	4857      	ldr	r0, [pc, #348]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	f7fd fc50 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e20:	e0a0      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e22:	2118      	movs	r1, #24
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	001a      	movs	r2, r3
 8005e2a:	187b      	adds	r3, r7, r1
 8005e2c:	1c99      	adds	r1, r3, #2
 8005e2e:	4853      	ldr	r0, [pc, #332]	@ (8005f7c <ProcessCmd+0x1b4>)
 8005e30:	230c      	movs	r3, #12
 8005e32:	f7fd fc45 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e36:	e095      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e38:	2118      	movs	r1, #24
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	001a      	movs	r2, r3
 8005e40:	187b      	adds	r3, r7, r1
 8005e42:	1c99      	adds	r1, r3, #2
 8005e44:	484e      	ldr	r0, [pc, #312]	@ (8005f80 <ProcessCmd+0x1b8>)
 8005e46:	230c      	movs	r3, #12
 8005e48:	f7fd fc3a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e4c:	e08a      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e4e:	2118      	movs	r1, #24
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	001a      	movs	r2, r3
 8005e56:	187b      	adds	r3, r7, r1
 8005e58:	1c99      	adds	r1, r3, #2
 8005e5a:	484a      	ldr	r0, [pc, #296]	@ (8005f84 <ProcessCmd+0x1bc>)
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	f7fd fc2f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e62:	e07f      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e64:	2118      	movs	r1, #24
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	001a      	movs	r2, r3
 8005e6c:	187b      	adds	r3, r7, r1
 8005e6e:	1c99      	adds	r1, r3, #2
 8005e70:	4845      	ldr	r0, [pc, #276]	@ (8005f88 <ProcessCmd+0x1c0>)
 8005e72:	230c      	movs	r3, #12
 8005e74:	f7fd fc24 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e78:	e074      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e7a:	2118      	movs	r1, #24
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	001a      	movs	r2, r3
 8005e82:	187b      	adds	r3, r7, r1
 8005e84:	1c99      	adds	r1, r3, #2
 8005e86:	4841      	ldr	r0, [pc, #260]	@ (8005f8c <ProcessCmd+0x1c4>)
 8005e88:	230c      	movs	r3, #12
 8005e8a:	f7fd fc19 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e8e:	e069      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e90:	2118      	movs	r1, #24
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	785b      	ldrb	r3, [r3, #1]
 8005e96:	001a      	movs	r2, r3
 8005e98:	187b      	adds	r3, r7, r1
 8005e9a:	1c99      	adds	r1, r3, #2
 8005e9c:	483c      	ldr	r0, [pc, #240]	@ (8005f90 <ProcessCmd+0x1c8>)
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	f7fd fc0e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ea4:	e05e      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005ea6:	2118      	movs	r1, #24
 8005ea8:	187b      	adds	r3, r7, r1
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	001a      	movs	r2, r3
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	1c99      	adds	r1, r3, #2
 8005eb2:	4838      	ldr	r0, [pc, #224]	@ (8005f94 <ProcessCmd+0x1cc>)
 8005eb4:	231e      	movs	r3, #30
 8005eb6:	f7fd fc03 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005eba:	e053      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ebc:	2118      	movs	r1, #24
 8005ebe:	187b      	adds	r3, r7, r1
 8005ec0:	785b      	ldrb	r3, [r3, #1]
 8005ec2:	001a      	movs	r2, r3
 8005ec4:	187b      	adds	r3, r7, r1
 8005ec6:	1c99      	adds	r1, r3, #2
 8005ec8:	4833      	ldr	r0, [pc, #204]	@ (8005f98 <ProcessCmd+0x1d0>)
 8005eca:	230c      	movs	r3, #12
 8005ecc:	f7fd fbf8 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ed0:	e048      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ed2:	2118      	movs	r1, #24
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	001a      	movs	r2, r3
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	1c99      	adds	r1, r3, #2
 8005ede:	482f      	ldr	r0, [pc, #188]	@ (8005f9c <ProcessCmd+0x1d4>)
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	f7fd fbed 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ee6:	e03d      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ee8:	2118      	movs	r1, #24
 8005eea:	187b      	adds	r3, r7, r1
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	001a      	movs	r2, r3
 8005ef0:	187b      	adds	r3, r7, r1
 8005ef2:	1c99      	adds	r1, r3, #2
 8005ef4:	482a      	ldr	r0, [pc, #168]	@ (8005fa0 <ProcessCmd+0x1d8>)
 8005ef6:	230c      	movs	r3, #12
 8005ef8:	f7fd fbe2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005efc:	e032      	b.n	8005f64 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005efe:	2118      	movs	r1, #24
 8005f00:	187b      	adds	r3, r7, r1
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	001a      	movs	r2, r3
 8005f06:	187b      	adds	r3, r7, r1
 8005f08:	1c99      	adds	r1, r3, #2
 8005f0a:	4826      	ldr	r0, [pc, #152]	@ (8005fa4 <ProcessCmd+0x1dc>)
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	f7fd fbd7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005f12:	e027      	b.n	8005f64 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005f14:	4b18      	ldr	r3, [pc, #96]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005f16:	21ba      	movs	r1, #186	@ 0xba
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fd fc16 	bl	800374a <ClearEEprom>
        break;
 8005f1e:	e021      	b.n	8005f64 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005f20:	2118      	movs	r1, #24
 8005f22:	187b      	adds	r3, r7, r1
 8005f24:	789b      	ldrb	r3, [r3, #2]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	b21a      	sxth	r2, r3
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	78db      	ldrb	r3, [r3, #3]
 8005f2e:	b21b      	sxth	r3, r3
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b21a      	sxth	r2, r3
 8005f34:	1dbb      	adds	r3, r7, #6
 8005f36:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005f38:	1dbb      	adds	r3, r7, #6
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	23c0      	movs	r3, #192	@ 0xc0
 8005f3e:	015b      	lsls	r3, r3, #5
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d207      	bcs.n	8005f54 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005f44:	1dbb      	adds	r3, r7, #6
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	4a0b      	ldr	r2, [pc, #44]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	0010      	movs	r0, r2
 8005f4e:	f7fd fbfc 	bl	800374a <ClearEEprom>
            break;
 8005f52:	e006      	b.n	8005f62 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005f54:	23c0      	movs	r3, #192	@ 0xc0
 8005f56:	015b      	lsls	r3, r3, #5
 8005f58:	4a07      	ldr	r2, [pc, #28]	@ (8005f78 <ProcessCmd+0x1b0>)
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	0010      	movs	r0, r2
 8005f5e:	f7fd fbf4 	bl	800374a <ClearEEprom>
            break;
 8005f62:	46c0      	nop			@ (mov r8, r8)
}
 8005f64:	46c0      	nop			@ (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bcb0      	pop	{r4, r5, r7}
 8005f6c:	bc08      	pop	{r3}
 8005f6e:	b004      	add	sp, #16
 8005f70:	4718      	bx	r3
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	08024678 	.word	0x08024678
 8005f78:	08080000 	.word	0x08080000
 8005f7c:	0808000c 	.word	0x0808000c
 8005f80:	08080018 	.word	0x08080018
 8005f84:	08080024 	.word	0x08080024
 8005f88:	08080030 	.word	0x08080030
 8005f8c:	0808003c 	.word	0x0808003c
 8005f90:	08080048 	.word	0x08080048
 8005f94:	08080090 	.word	0x08080090
 8005f98:	08080078 	.word	0x08080078
 8005f9c:	0808006c 	.word	0x0808006c
 8005fa0:	08080060 	.word	0x08080060
 8005fa4:	08080054 	.word	0x08080054

08005fa8 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6039      	str	r1, [r7, #0]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	1dfb      	adds	r3, r7, #7
 8005fb4:	1c02      	adds	r2, r0, #0
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	1dbb      	adds	r3, r7, #6
 8005fba:	1c0a      	adds	r2, r1, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005fbe:	2223      	movs	r2, #35	@ 0x23
 8005fc0:	4b20      	ldr	r3, [pc, #128]	@ (8006044 <Create_Message+0x9c>)
 8005fc2:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8006044 <Create_Message+0x9c>)
 8005fc6:	1dfa      	adds	r2, r7, #7
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006044 <Create_Message+0x9c>)
 8005fce:	1dba      	adds	r2, r7, #6
 8005fd0:	7812      	ldrb	r2, [r2, #0]
 8005fd2:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005fd4:	1dbb      	adds	r3, r7, #6
 8005fd6:	781a      	ldrb	r2, [r3, #0]
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	4b1b      	ldr	r3, [pc, #108]	@ (8006048 <Create_Message+0xa0>)
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f019 fcb9 	bl	801f954 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005fe2:	1dbb      	adds	r3, r7, #6
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	250e      	movs	r5, #14
 8005fea:	197b      	adds	r3, r7, r5
 8005fec:	3203      	adds	r2, #3
 8005fee:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005ff0:	260c      	movs	r6, #12
 8005ff2:	19bc      	adds	r4, r7, r6
 8005ff4:	197b      	adds	r3, r7, r5
 8005ff6:	881a      	ldrh	r2, [r3, #0]
 8005ff8:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <Create_Message+0x9c>)
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 f825 	bl	800604c <CRC16_ARC>
 8006002:	0003      	movs	r3, r0
 8006004:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006006:	0030      	movs	r0, r6
 8006008:	183b      	adds	r3, r7, r0
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	b29a      	uxth	r2, r3
 8006010:	197b      	adds	r3, r7, r5
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b2d1      	uxtb	r1, r2
 8006016:	4a0b      	ldr	r2, [pc, #44]	@ (8006044 <Create_Message+0x9c>)
 8006018:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800601a:	197b      	adds	r3, r7, r5
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	183a      	adds	r2, r7, r0
 8006022:	8812      	ldrh	r2, [r2, #0]
 8006024:	b2d1      	uxtb	r1, r2
 8006026:	4a07      	ldr	r2, [pc, #28]	@ (8006044 <Create_Message+0x9c>)
 8006028:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800602a:	197b      	adds	r3, r7, r5
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	3302      	adds	r3, #2
 8006030:	b29a      	uxth	r2, r3
 8006032:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <Create_Message+0x9c>)
 8006034:	0011      	movs	r1, r2
 8006036:	0018      	movs	r0, r3
 8006038:	f016 f95e 	bl	801c2f8 <CDC_Transmit_FS>
}
 800603c:	46c0      	nop			@ (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	b005      	add	sp, #20
 8006042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006044:	20000bb4 	.word	0x20000bb4
 8006048:	20000bb7 	.word	0x20000bb7

0800604c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	000a      	movs	r2, r1
 8006056:	1cbb      	adds	r3, r7, #2
 8006058:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800605a:	2316      	movs	r3, #22
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	2200      	movs	r2, #0
 8006060:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e02e      	b.n	80060c6 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	18d3      	adds	r3, r2, r3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	0019      	movs	r1, r3
 8006072:	2216      	movs	r2, #22
 8006074:	18bb      	adds	r3, r7, r2
 8006076:	18ba      	adds	r2, r7, r2
 8006078:	8812      	ldrh	r2, [r2, #0]
 800607a:	404a      	eors	r2, r1
 800607c:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800607e:	2300      	movs	r3, #0
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e01a      	b.n	80060ba <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006084:	2116      	movs	r1, #22
 8006086:	187b      	adds	r3, r7, r1
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	4013      	ands	r3, r2
 800608e:	d00b      	beq.n	80060a8 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006090:	187b      	adds	r3, r7, r1
 8006092:	187a      	adds	r2, r7, r1
 8006094:	8812      	ldrh	r2, [r2, #0]
 8006096:	0852      	lsrs	r2, r2, #1
 8006098:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800609a:	187b      	adds	r3, r7, r1
 800609c:	187a      	adds	r2, r7, r1
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	490f      	ldr	r1, [pc, #60]	@ (80060e0 <CRC16_ARC+0x94>)
 80060a2:	404a      	eors	r2, r1
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e005      	b.n	80060b4 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80060a8:	2216      	movs	r2, #22
 80060aa:	18bb      	adds	r3, r7, r2
 80060ac:	18ba      	adds	r2, r7, r2
 80060ae:	8812      	ldrh	r2, [r2, #0]
 80060b0:	0852      	lsrs	r2, r2, #1
 80060b2:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b07      	cmp	r3, #7
 80060be:	dde1      	ble.n	8006084 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	3301      	adds	r3, #1
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	1cbb      	adds	r3, r7, #2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	dbcb      	blt.n	8006068 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80060d0:	2316      	movs	r3, #22
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	881b      	ldrh	r3, [r3, #0]
}
 80060d6:	0018      	movs	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	b006      	add	sp, #24
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	46c0      	nop			@ (mov r8, r8)
 80060e0:	ffffa001 	.word	0xffffa001

080060e4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 80060e8:	4b26      	ldr	r3, [pc, #152]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 80060ea:	4a27      	ldr	r2, [pc, #156]	@ (8006188 <ReadBatteryVoltage+0xa4>)
 80060ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80060ee:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 80060f0:	2280      	movs	r2, #128	@ 0x80
 80060f2:	0152      	lsls	r2, r2, #5
 80060f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80060f6:	4a23      	ldr	r2, [pc, #140]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 80060f8:	4b24      	ldr	r3, [pc, #144]	@ (800618c <ReadBatteryVoltage+0xa8>)
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f008 fbe3 	bl	800e8c8 <HAL_ADC_ConfigChannel>
 8006102:	1e03      	subs	r3, r0, #0
 8006104:	d001      	beq.n	800610a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006106:	f002 f9c9 	bl	800849c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800610a:	4b20      	ldr	r3, [pc, #128]	@ (800618c <ReadBatteryVoltage+0xa8>)
 800610c:	0018      	movs	r0, r3
 800610e:	f008 fadf 	bl	800e6d0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006112:	4b1e      	ldr	r3, [pc, #120]	@ (800618c <ReadBatteryVoltage+0xa8>)
 8006114:	2101      	movs	r1, #1
 8006116:	0018      	movs	r0, r3
 8006118:	f008 fb2e 	bl	800e778 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 800611c:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <ReadBatteryVoltage+0xa8>)
 800611e:	0018      	movs	r0, r3
 8006120:	f008 fbc6 	bl	800e8b0 <HAL_ADC_GetValue>
 8006124:	0002      	movs	r2, r0
 8006126:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <ReadBatteryVoltage+0xac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4353      	muls	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4919      	ldr	r1, [pc, #100]	@ (8006194 <ReadBatteryVoltage+0xb0>)
 8006130:	0018      	movs	r0, r3
 8006132:	f7fa f837 	bl	80001a4 <__udivsi3>
 8006136:	0003      	movs	r3, r0
 8006138:	001a      	movs	r2, r3
 800613a:	4b17      	ldr	r3, [pc, #92]	@ (8006198 <ReadBatteryVoltage+0xb4>)
 800613c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800613e:	4b16      	ldr	r3, [pc, #88]	@ (8006198 <ReadBatteryVoltage+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	0018      	movs	r0, r3
 8006144:	f7fb fa90 	bl	8001668 <__aeabi_ui2f>
 8006148:	1c03      	adds	r3, r0, #0
 800614a:	4914      	ldr	r1, [pc, #80]	@ (800619c <ReadBatteryVoltage+0xb8>)
 800614c:	1c18      	adds	r0, r3, #0
 800614e:	f7fa fd41 	bl	8000bd4 <__aeabi_fdiv>
 8006152:	1c03      	adds	r3, r0, #0
 8006154:	1c1a      	adds	r2, r3, #0
 8006156:	4b12      	ldr	r3, [pc, #72]	@ (80061a0 <ReadBatteryVoltage+0xbc>)
 8006158:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800615a:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 800615c:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <ReadBatteryVoltage+0xa4>)
 800615e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006160:	4b08      	ldr	r3, [pc, #32]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 8006162:	4a10      	ldr	r2, [pc, #64]	@ (80061a4 <ReadBatteryVoltage+0xc0>)
 8006164:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006166:	4a07      	ldr	r2, [pc, #28]	@ (8006184 <ReadBatteryVoltage+0xa0>)
 8006168:	4b08      	ldr	r3, [pc, #32]	@ (800618c <ReadBatteryVoltage+0xa8>)
 800616a:	0011      	movs	r1, r2
 800616c:	0018      	movs	r0, r3
 800616e:	f008 fbab 	bl	800e8c8 <HAL_ADC_ConfigChannel>
 8006172:	1e03      	subs	r3, r0, #0
 8006174:	d001      	beq.n	800617a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006176:	f002 f991 	bl	800849c <Error_Handler>
  }
  return trueValue;
 800617a:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <ReadBatteryVoltage+0xbc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 }
 800617e:	1c18      	adds	r0, r3, #0
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000cbc 	.word	0x20000cbc
 8006188:	38004000 	.word	0x38004000
 800618c:	20000cfc 	.word	0x20000cfc
 8006190:	2000002c 	.word	0x2000002c
 8006194:	00000fff 	.word	0x00000fff
 8006198:	20000cc4 	.word	0x20000cc4
 800619c:	447a0000 	.word	0x447a0000
 80061a0:	20000cc8 	.word	0x20000cc8
 80061a4:	00001001 	.word	0x00001001

080061a8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80061ac:	4b27      	ldr	r3, [pc, #156]	@ (800624c <ReadSolarVoltage+0xa4>)
 80061ae:	4a28      	ldr	r2, [pc, #160]	@ (8006250 <ReadSolarVoltage+0xa8>)
 80061b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80061b2:	4b26      	ldr	r3, [pc, #152]	@ (800624c <ReadSolarVoltage+0xa4>)
 80061b4:	2280      	movs	r2, #128	@ 0x80
 80061b6:	0152      	lsls	r2, r2, #5
 80061b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80061ba:	4a24      	ldr	r2, [pc, #144]	@ (800624c <ReadSolarVoltage+0xa4>)
 80061bc:	4b25      	ldr	r3, [pc, #148]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061be:	0011      	movs	r1, r2
 80061c0:	0018      	movs	r0, r3
 80061c2:	f008 fb81 	bl	800e8c8 <HAL_ADC_ConfigChannel>
 80061c6:	1e03      	subs	r3, r0, #0
 80061c8:	d001      	beq.n	80061ce <ReadSolarVoltage+0x26>
    Error_Handler();
 80061ca:	f002 f967 	bl	800849c <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80061ce:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061d0:	0018      	movs	r0, r3
 80061d2:	f008 fa7d 	bl	800e6d0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80061d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061d8:	2101      	movs	r1, #1
 80061da:	0018      	movs	r0, r3
 80061dc:	f008 facc 	bl	800e778 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80061e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006254 <ReadSolarVoltage+0xac>)
 80061e2:	0018      	movs	r0, r3
 80061e4:	f008 fb64 	bl	800e8b0 <HAL_ADC_GetValue>
 80061e8:	0002      	movs	r2, r0
 80061ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <ReadSolarVoltage+0xb0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	435a      	muls	r2, r3
 80061f0:	0013      	movs	r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	189b      	adds	r3, r3, r2
 80061f6:	4919      	ldr	r1, [pc, #100]	@ (800625c <ReadSolarVoltage+0xb4>)
 80061f8:	0018      	movs	r0, r3
 80061fa:	f7f9 ffd3 	bl	80001a4 <__udivsi3>
 80061fe:	0003      	movs	r3, r0
 8006200:	001a      	movs	r2, r3
 8006202:	4b17      	ldr	r3, [pc, #92]	@ (8006260 <ReadSolarVoltage+0xb8>)
 8006204:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 8006206:	4b16      	ldr	r3, [pc, #88]	@ (8006260 <ReadSolarVoltage+0xb8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	0018      	movs	r0, r3
 800620c:	f7fb fa2c 	bl	8001668 <__aeabi_ui2f>
 8006210:	1c03      	adds	r3, r0, #0
 8006212:	4914      	ldr	r1, [pc, #80]	@ (8006264 <ReadSolarVoltage+0xbc>)
 8006214:	1c18      	adds	r0, r3, #0
 8006216:	f7fa fcdd 	bl	8000bd4 <__aeabi_fdiv>
 800621a:	1c03      	adds	r3, r0, #0
 800621c:	1c1a      	adds	r2, r3, #0
 800621e:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <ReadSolarVoltage+0xc0>)
 8006220:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006222:	4b0a      	ldr	r3, [pc, #40]	@ (800624c <ReadSolarVoltage+0xa4>)
 8006224:	4a0a      	ldr	r2, [pc, #40]	@ (8006250 <ReadSolarVoltage+0xa8>)
 8006226:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006228:	4b08      	ldr	r3, [pc, #32]	@ (800624c <ReadSolarVoltage+0xa4>)
 800622a:	4a10      	ldr	r2, [pc, #64]	@ (800626c <ReadSolarVoltage+0xc4>)
 800622c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800622e:	4a07      	ldr	r2, [pc, #28]	@ (800624c <ReadSolarVoltage+0xa4>)
 8006230:	4b08      	ldr	r3, [pc, #32]	@ (8006254 <ReadSolarVoltage+0xac>)
 8006232:	0011      	movs	r1, r2
 8006234:	0018      	movs	r0, r3
 8006236:	f008 fb47 	bl	800e8c8 <HAL_ADC_ConfigChannel>
 800623a:	1e03      	subs	r3, r0, #0
 800623c:	d001      	beq.n	8006242 <ReadSolarVoltage+0x9a>
    Error_Handler();
 800623e:	f002 f92d 	bl	800849c <Error_Handler>
  }
  return trueValue;
 8006242:	4b09      	ldr	r3, [pc, #36]	@ (8006268 <ReadSolarVoltage+0xc0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 }
 8006246:	1c18      	adds	r0, r3, #0
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000cbc 	.word	0x20000cbc
 8006250:	3c008000 	.word	0x3c008000
 8006254:	20000cfc 	.word	0x20000cfc
 8006258:	2000002c 	.word	0x2000002c
 800625c:	00000fff 	.word	0x00000fff
 8006260:	20000ccc 	.word	0x20000ccc
 8006264:	447a0000 	.word	0x447a0000
 8006268:	20000cd0 	.word	0x20000cd0
 800626c:	00001001 	.word	0x00001001

08006270 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006274:	23a0      	movs	r3, #160	@ 0xa0
 8006276:	05db      	lsls	r3, r3, #23
 8006278:	2180      	movs	r1, #128	@ 0x80
 800627a:	0018      	movs	r0, r3
 800627c:	f009 faaa 	bl	800f7d4 <HAL_GPIO_ReadPin>
 8006280:	0003      	movs	r3, r0
 8006282:	1e5a      	subs	r2, r3, #1
 8006284:	4193      	sbcs	r3, r2
 8006286:	b2db      	uxtb	r3, r3
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800628e:	b580      	push	{r7, lr}
 8006290:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006292:	2380      	movs	r3, #128	@ 0x80
 8006294:	021a      	lsls	r2, r3, #8
 8006296:	23a0      	movs	r3, #160	@ 0xa0
 8006298:	05db      	lsls	r3, r3, #23
 800629a:	0011      	movs	r1, r2
 800629c:	0018      	movs	r0, r3
 800629e:	f009 fa99 	bl	800f7d4 <HAL_GPIO_ReadPin>
 80062a2:	0003      	movs	r3, r0
 80062a4:	1e5a      	subs	r2, r3, #1
 80062a6:	4193      	sbcs	r3, r2
 80062a8:	b2db      	uxtb	r3, r3
}
 80062aa:	0018      	movs	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80062b4:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <UserButton_Pressed+0x1c>)
 80062b6:	2104      	movs	r1, #4
 80062b8:	0018      	movs	r0, r3
 80062ba:	f009 fa8b 	bl	800f7d4 <HAL_GPIO_ReadPin>
 80062be:	0003      	movs	r3, r0
 80062c0:	425a      	negs	r2, r3
 80062c2:	4153      	adcs	r3, r2
 80062c4:	b2db      	uxtb	r3, r3
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	50000c00 	.word	0x50000c00

080062d0 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	46d6      	mov	lr, sl
 80062d4:	464f      	mov	r7, r9
 80062d6:	4646      	mov	r6, r8
 80062d8:	b5c0      	push	{r6, r7, lr}
 80062da:	b08e      	sub	sp, #56	@ 0x38
 80062dc:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80062de:	4b21      	ldr	r3, [pc, #132]	@ (8006364 <showTime+0x94>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d036      	beq.n	8006354 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80062e6:	003a      	movs	r2, r7
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	0011      	movs	r1, r2
 80062ec:	0018      	movs	r0, r3
 80062ee:	f000 fa2b 	bl	8006748 <RTC_GetTime>
  UpdateSystemUptime();
 80062f2:	f000 f83f 	bl	8006374 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062f6:	003b      	movs	r3, r7
 80062f8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062fa:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062fc:	003b      	movs	r3, r7
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006302:	4b19      	ldr	r3, [pc, #100]	@ (8006368 <showTime+0x98>)
 8006304:	0092      	lsls	r2, r2, #2
 8006306:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006308:	003b      	movs	r3, r7
 800630a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800630c:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006312:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006318:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800631e:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006320:	4b12      	ldr	r3, [pc, #72]	@ (800636c <showTime+0x9c>)
 8006322:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006324:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006326:	4b11      	ldr	r3, [pc, #68]	@ (800636c <showTime+0x9c>)
 8006328:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800632a:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800632c:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <showTime+0x9c>)
 800632e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006330:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006332:	4b0e      	ldr	r3, [pc, #56]	@ (800636c <showTime+0x9c>)
 8006334:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006336:	480e      	ldr	r0, [pc, #56]	@ (8006370 <showTime+0xa0>)
 8006338:	9306      	str	r3, [sp, #24]
 800633a:	4643      	mov	r3, r8
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	4663      	mov	r3, ip
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	9603      	str	r6, [sp, #12]
 8006344:	9502      	str	r5, [sp, #8]
 8006346:	9401      	str	r4, [sp, #4]
 8006348:	9100      	str	r1, [sp, #0]
 800634a:	4653      	mov	r3, sl
 800634c:	4649      	mov	r1, r9
 800634e:	f019 f871 	bl	801f434 <iprintf>
 8006352:	e000      	b.n	8006356 <showTime+0x86>
    return;
 8006354:	46c0      	nop			@ (mov r8, r8)
}
 8006356:	46bd      	mov	sp, r7
 8006358:	b006      	add	sp, #24
 800635a:	bce0      	pop	{r5, r6, r7}
 800635c:	46ba      	mov	sl, r7
 800635e:	46b1      	mov	r9, r6
 8006360:	46a8      	mov	r8, r5
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006364:	20000ce0 	.word	0x20000ce0
 8006368:	2000004c 	.word	0x2000004c
 800636c:	20000cd4 	.word	0x20000cd4
 8006370:	080231d8 	.word	0x080231d8

08006374 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800637a:	003a      	movs	r2, r7
 800637c:	1d3b      	adds	r3, r7, #4
 800637e:	0011      	movs	r1, r2
 8006380:	0018      	movs	r0, r3
 8006382:	f000 f9e1 	bl	8006748 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006386:	1d3a      	adds	r2, r7, #4
 8006388:	003b      	movs	r3, r7
 800638a:	0011      	movs	r1, r2
 800638c:	0018      	movs	r0, r3
 800638e:	f000 fb8f 	bl	8006ab0 <makeTime>
 8006392:	0002      	movs	r2, r0
 8006394:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <UpdateSystemUptime+0x9c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	213c      	movs	r1, #60	@ 0x3c
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7f9 ff83 	bl	80002b0 <__aeabi_uidivmod>
 80063aa:	000b      	movs	r3, r1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <UpdateSystemUptime+0xa0>)
 80063b0:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	213c      	movs	r1, #60	@ 0x3c
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7f9 fef4 	bl	80001a4 <__udivsi3>
 80063bc:	0003      	movs	r3, r0
 80063be:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	213c      	movs	r1, #60	@ 0x3c
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7f9 ff73 	bl	80002b0 <__aeabi_uidivmod>
 80063ca:	000b      	movs	r3, r1
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <UpdateSystemUptime+0xa0>)
 80063d0:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	213c      	movs	r1, #60	@ 0x3c
 80063d6:	0018      	movs	r0, r3
 80063d8:	f7f9 fee4 	bl	80001a4 <__udivsi3>
 80063dc:	0003      	movs	r3, r0
 80063de:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2118      	movs	r1, #24
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7f9 ff63 	bl	80002b0 <__aeabi_uidivmod>
 80063ea:	000b      	movs	r3, r1
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	4b09      	ldr	r3, [pc, #36]	@ (8006414 <UpdateSystemUptime+0xa0>)
 80063f0:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2118      	movs	r1, #24
 80063f6:	0018      	movs	r0, r3
 80063f8:	f7f9 fed4 	bl	80001a4 <__udivsi3>
 80063fc:	0003      	movs	r3, r0
 80063fe:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	b29a      	uxth	r2, r3
 8006404:	4b03      	ldr	r3, [pc, #12]	@ (8006414 <UpdateSystemUptime+0xa0>)
 8006406:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006408:	46c0      	nop			@ (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b008      	add	sp, #32
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000ce0 	.word	0x20000ce0
 8006414:	20000cd4 	.word	0x20000cd4

08006418 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	0008      	movs	r0, r1
 8006422:	0011      	movs	r1, r2
 8006424:	1cfb      	adds	r3, r7, #3
 8006426:	1c02      	adds	r2, r0, #0
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	1cbb      	adds	r3, r7, #2
 800642c:	1c0a      	adds	r2, r1, #0
 800642e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006430:	230e      	movs	r3, #14
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006438:	230f      	movs	r3, #15
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	1cfa      	adds	r2, r7, #3
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	e015      	b.n	8006470 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006444:	200f      	movs	r0, #15
 8006446:	183b      	adds	r3, r7, r0
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	18d2      	adds	r2, r2, r3
 800644e:	240e      	movs	r4, #14
 8006450:	193b      	adds	r3, r7, r4
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	7811      	ldrb	r1, [r2, #0]
 8006456:	2208      	movs	r2, #8
 8006458:	18ba      	adds	r2, r7, r2
 800645a:	54d1      	strb	r1, [r2, r3]
    pos++;
 800645c:	193b      	adds	r3, r7, r4
 800645e:	781a      	ldrb	r2, [r3, #0]
 8006460:	193b      	adds	r3, r7, r4
 8006462:	3201      	adds	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006466:	183b      	adds	r3, r7, r0
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	183b      	adds	r3, r7, r0
 800646c:	3201      	adds	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	200f      	movs	r0, #15
 8006472:	183a      	adds	r2, r7, r0
 8006474:	1cbb      	adds	r3, r7, #2
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d9e2      	bls.n	8006444 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800647e:	230e      	movs	r3, #14
 8006480:	18fb      	adds	r3, r7, r3
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2208      	movs	r2, #8
 8006486:	18ba      	adds	r2, r7, r2
 8006488:	2100      	movs	r1, #0
 800648a:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800648c:	1cfb      	adds	r3, r7, #3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b13      	cmp	r3, #19
 8006492:	d849      	bhi.n	8006528 <aBuff2int+0x110>
    if (start == 17) { //month
 8006494:	1cfb      	adds	r3, r7, #3
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b11      	cmp	r3, #17
 800649a:	d122      	bne.n	80064e2 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800649c:	183b      	adds	r3, r7, r0
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e018      	b.n	80064d6 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80064a4:	240f      	movs	r4, #15
 80064a6:	193b      	adds	r3, r7, r4
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	4b25      	ldr	r3, [pc, #148]	@ (8006540 <aBuff2int+0x128>)
 80064ac:	0092      	lsls	r2, r2, #2
 80064ae:	58d2      	ldr	r2, [r2, r3]
 80064b0:	2308      	movs	r3, #8
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	0011      	movs	r1, r2
 80064b6:	0018      	movs	r0, r3
 80064b8:	f7f9 fe4e 	bl	8000158 <strcmp>
 80064bc:	1e03      	subs	r3, r0, #0
 80064be:	d104      	bne.n	80064ca <aBuff2int+0xb2>
          return i+1;
 80064c0:	193b      	adds	r3, r7, r4
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	e035      	b.n	8006536 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80064ca:	210f      	movs	r1, #15
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	3201      	adds	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	230f      	movs	r3, #15
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b0b      	cmp	r3, #11
 80064de:	d9e1      	bls.n	80064a4 <aBuff2int+0x8c>
 80064e0:	e022      	b.n	8006528 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80064e2:	230f      	movs	r3, #15
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e018      	b.n	800651e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80064ec:	240f      	movs	r4, #15
 80064ee:	193b      	adds	r3, r7, r4
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <aBuff2int+0x12c>)
 80064f4:	0092      	lsls	r2, r2, #2
 80064f6:	58d2      	ldr	r2, [r2, r3]
 80064f8:	2308      	movs	r3, #8
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	0011      	movs	r1, r2
 80064fe:	0018      	movs	r0, r3
 8006500:	f7f9 fe2a 	bl	8000158 <strcmp>
 8006504:	1e03      	subs	r3, r0, #0
 8006506:	d104      	bne.n	8006512 <aBuff2int+0xfa>
          return i+1;
 8006508:	193b      	adds	r3, r7, r4
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	b2db      	uxtb	r3, r3
 8006510:	e011      	b.n	8006536 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006512:	210f      	movs	r1, #15
 8006514:	187b      	adds	r3, r7, r1
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	187b      	adds	r3, r7, r1
 800651a:	3201      	adds	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	230f      	movs	r3, #15
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b06      	cmp	r3, #6
 8006526:	d9e1      	bls.n	80064ec <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006528:	2308      	movs	r3, #8
 800652a:	18fb      	adds	r3, r7, r3
 800652c:	0018      	movs	r0, r3
 800652e:	f017 fba6 	bl	801dc7e <atoi>
 8006532:	0003      	movs	r3, r0
 8006534:	b2db      	uxtb	r3, r3
}
 8006536:	0018      	movs	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	b005      	add	sp, #20
 800653c:	bd90      	pop	{r4, r7, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	2000004c 	.word	0x2000004c
 8006544:	20000030 	.word	0x20000030

08006548 <ParseTime>:

void ParseTime(char* buffer) {
 8006548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800654a:	b08b      	sub	sp, #44	@ 0x2c
 800654c:	af02      	add	r7, sp, #8
 800654e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006550:	2408      	movs	r4, #8
 8006552:	193a      	adds	r2, r7, r4
 8006554:	260c      	movs	r6, #12
 8006556:	19bb      	adds	r3, r7, r6
 8006558:	0011      	movs	r1, r2
 800655a:	0018      	movs	r0, r3
 800655c:	f000 f8f4 	bl	8006748 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2219      	movs	r2, #25
 8006564:	2118      	movs	r1, #24
 8006566:	0018      	movs	r0, r3
 8006568:	f7ff ff56 	bl	8006418 <aBuff2int>
 800656c:	0003      	movs	r3, r0
 800656e:	001a      	movs	r2, r3
 8006570:	19bb      	adds	r3, r7, r6
 8006572:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	221c      	movs	r2, #28
 8006578:	211b      	movs	r1, #27
 800657a:	0018      	movs	r0, r3
 800657c:	f7ff ff4c 	bl	8006418 <aBuff2int>
 8006580:	0003      	movs	r3, r0
 8006582:	001a      	movs	r2, r3
 8006584:	19bb      	adds	r3, r7, r6
 8006586:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	221f      	movs	r2, #31
 800658c:	211e      	movs	r1, #30
 800658e:	0018      	movs	r0, r3
 8006590:	f7ff ff42 	bl	8006418 <aBuff2int>
 8006594:	0003      	movs	r3, r0
 8006596:	001a      	movs	r2, r3
 8006598:	19bb      	adds	r3, r7, r6
 800659a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	@ 0x24
 80065a0:	2123      	movs	r1, #35	@ 0x23
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7ff ff38 	bl	8006418 <aBuff2int>
 80065a8:	0003      	movs	r3, r0
 80065aa:	001a      	movs	r2, r3
 80065ac:	0025      	movs	r5, r4
 80065ae:	197b      	adds	r3, r7, r5
 80065b0:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2213      	movs	r2, #19
 80065b6:	2111      	movs	r1, #17
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff ff2d 	bl	8006418 <aBuff2int>
 80065be:	0003      	movs	r3, r0
 80065c0:	001a      	movs	r2, r3
 80065c2:	197b      	adds	r3, r7, r5
 80065c4:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2216      	movs	r2, #22
 80065ca:	2115      	movs	r1, #21
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7ff ff23 	bl	8006418 <aBuff2int>
 80065d2:	0003      	movs	r3, r0
 80065d4:	001a      	movs	r2, r3
 80065d6:	197b      	adds	r3, r7, r5
 80065d8:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	220f      	movs	r2, #15
 80065de:	210d      	movs	r1, #13
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7ff ff19 	bl	8006418 <aBuff2int>
 80065e6:	0003      	movs	r3, r0
 80065e8:	001a      	movs	r2, r3
 80065ea:	197b      	adds	r3, r7, r5
 80065ec:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80065ee:	19bb      	adds	r3, r7, r6
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	001c      	movs	r4, r3
 80065f4:	19bb      	adds	r3, r7, r6
 80065f6:	785b      	ldrb	r3, [r3, #1]
 80065f8:	0018      	movs	r0, r3
 80065fa:	19bb      	adds	r3, r7, r6
 80065fc:	789b      	ldrb	r3, [r3, #2]
 80065fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <ParseTime+0x128>)
 8006600:	491c      	ldr	r1, [pc, #112]	@ (8006674 <ParseTime+0x12c>)
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	9000      	str	r0, [sp, #0]
 8006606:	0023      	movs	r3, r4
 8006608:	2003      	movs	r0, #3
 800660a:	f007 fa39 	bl	800da80 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800660e:	197b      	adds	r3, r7, r5
 8006610:	789b      	ldrb	r3, [r3, #2]
 8006612:	001c      	movs	r4, r3
 8006614:	197b      	adds	r3, r7, r5
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	0018      	movs	r0, r3
 800661a:	197b      	adds	r3, r7, r5
 800661c:	78db      	ldrb	r3, [r3, #3]
 800661e:	4a16      	ldr	r2, [pc, #88]	@ (8006678 <ParseTime+0x130>)
 8006620:	4914      	ldr	r1, [pc, #80]	@ (8006674 <ParseTime+0x12c>)
 8006622:	9301      	str	r3, [sp, #4]
 8006624:	9000      	str	r0, [sp, #0]
 8006626:	0023      	movs	r3, r4
 8006628:	2003      	movs	r0, #3
 800662a:	f007 fa29 	bl	800da80 <CreateLine>
  RTC_SetTime(&currentTime);
 800662e:	19bb      	adds	r3, r7, r6
 8006630:	0018      	movs	r0, r3
 8006632:	f000 f825 	bl	8006680 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006636:	197b      	adds	r3, r7, r5
 8006638:	0018      	movs	r0, r3
 800663a:	f000 f847 	bl	80066cc <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 800663e:	197b      	adds	r3, r7, r5
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d101      	bne.n	800664a <ParseTime+0x102>
    reset_fanCleaningDone();
 8006646:	f002 fb65 	bl	8008d14 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 800664a:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <ParseTime+0x134>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006652:	230c      	movs	r3, #12
 8006654:	18fa      	adds	r2, r7, r3
 8006656:	2308      	movs	r3, #8
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	0011      	movs	r1, r2
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fa27 	bl	8006ab0 <makeTime>
 8006662:	0002      	movs	r2, r0
 8006664:	4b05      	ldr	r3, [pc, #20]	@ (800667c <ParseTime+0x134>)
 8006666:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 8006668:	46c0      	nop			@ (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b009      	add	sp, #36	@ 0x24
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	08023230 	.word	0x08023230
 8006674:	08023268 	.word	0x08023268
 8006678:	0802326c 	.word	0x0802326c
 800667c:	20000ce0 	.word	0x20000ce0

08006680 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800669a:	4b09      	ldr	r3, [pc, #36]	@ (80066c0 <RTC_SetTime+0x40>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	0018      	movs	r0, r3
 80066a4:	f00e ff42 	bl	801552c <HAL_RTC_SetTime>
 80066a8:	1e03      	subs	r3, r0, #0
 80066aa:	d005      	beq.n	80066b8 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 80066ac:	4a05      	ldr	r2, [pc, #20]	@ (80066c4 <RTC_SetTime+0x44>)
 80066ae:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <RTC_SetTime+0x48>)
 80066b0:	0019      	movs	r1, r3
 80066b2:	2001      	movs	r0, #1
 80066b4:	f007 f9e4 	bl	800da80 <CreateLine>
    }
}
 80066b8:	46c0      	nop			@ (mov r8, r8)
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000cdc 	.word	0x20000cdc
 80066c4:	080232a0 	.word	0x080232a0
 80066c8:	080232bc 	.word	0x080232bc

080066cc <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80066d4:	4b16      	ldr	r3, [pc, #88]	@ (8006730 <RTC_SetDate+0x64>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	0018      	movs	r0, r3
 80066de:	f00f f82d 	bl	801573c <HAL_RTC_SetDate>
 80066e2:	1e03      	subs	r3, r0, #0
 80066e4:	d005      	beq.n	80066f2 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80066e6:	4a13      	ldr	r2, [pc, #76]	@ (8006734 <RTC_SetDate+0x68>)
 80066e8:	4b13      	ldr	r3, [pc, #76]	@ (8006738 <RTC_SetDate+0x6c>)
 80066ea:	0019      	movs	r1, r3
 80066ec:	2001      	movs	r0, #1
 80066ee:	f007 f9c7 	bl	800da80 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80066f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006730 <RTC_SetDate+0x64>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2101      	movs	r1, #1
 80066f8:	0018      	movs	r0, r3
 80066fa:	f00f fb65 	bl	8015dc8 <HAL_RTCEx_BKUPRead>
 80066fe:	0003      	movs	r3, r0
 8006700:	4a0e      	ldr	r2, [pc, #56]	@ (800673c <RTC_SetDate+0x70>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d010      	beq.n	8006728 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8006706:	4a0e      	ldr	r2, [pc, #56]	@ (8006740 <RTC_SetDate+0x74>)
 8006708:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <RTC_SetDate+0x78>)
 800670a:	0019      	movs	r1, r3
 800670c:	2003      	movs	r0, #3
 800670e:	f007 f9b7 	bl	800da80 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006712:	f00d fe8b 	bl	801442c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <RTC_SetDate+0x64>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a08      	ldr	r2, [pc, #32]	@ (800673c <RTC_SetDate+0x70>)
 800671c:	2101      	movs	r1, #1
 800671e:	0018      	movs	r0, r3
 8006720:	f00f fb3a 	bl	8015d98 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006724:	f00d fe90 	bl	8014448 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006728:	46c0      	nop			@ (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000cdc 	.word	0x20000cdc
 8006734:	080232c0 	.word	0x080232c0
 8006738:	080232bc 	.word	0x080232bc
 800673c:	0000bebe 	.word	0x0000bebe
 8006740:	080232dc 	.word	0x080232dc
 8006744:	08023268 	.word	0x08023268

08006748 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006752:	250f      	movs	r5, #15
 8006754:	197b      	adds	r3, r7, r5
 8006756:	2201      	movs	r2, #1
 8006758:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800675a:	230e      	movs	r3, #14
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006762:	260c      	movs	r6, #12
 8006764:	19bc      	adds	r4, r7, r6
 8006766:	f006 fb13 	bl	800cd90 <powerCheck>
 800676a:	0003      	movs	r3, r0
 800676c:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800676e:	19bb      	adds	r3, r7, r6
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006776:	197b      	adds	r3, r7, r5
 8006778:	781a      	ldrb	r2, [r3, #0]
 800677a:	197b      	adds	r3, r7, r5
 800677c:	3201      	adds	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006780:	230d      	movs	r3, #13
 8006782:	18fb      	adds	r3, r7, r3
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	e039      	b.n	80067fe <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800678a:	4b23      	ldr	r3, [pc, #140]	@ (8006818 <RTC_GetTime+0xd0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	0018      	movs	r0, r3
 8006794:	f00e ff74 	bl	8015680 <HAL_RTC_GetTime>
 8006798:	1e03      	subs	r3, r0, #0
 800679a:	d005      	beq.n	80067a8 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 800679c:	4a1f      	ldr	r2, [pc, #124]	@ (800681c <RTC_GetTime+0xd4>)
 800679e:	4b20      	ldr	r3, [pc, #128]	@ (8006820 <RTC_GetTime+0xd8>)
 80067a0:	0019      	movs	r1, r3
 80067a2:	2001      	movs	r0, #1
 80067a4:	f007 f96c 	bl	800da80 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80067a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006818 <RTC_GetTime+0xd0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	0018      	movs	r0, r3
 80067b2:	f00f f857 	bl	8015864 <HAL_RTC_GetDate>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d005      	beq.n	80067c6 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80067ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006824 <RTC_GetTime+0xdc>)
 80067bc:	4b18      	ldr	r3, [pc, #96]	@ (8006820 <RTC_GetTime+0xd8>)
 80067be:	0019      	movs	r1, r3
 80067c0:	2001      	movs	r0, #1
 80067c2:	f007 f95d 	bl	800da80 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80067c6:	230c      	movs	r3, #12
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d110      	bne.n	80067f2 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	210e      	movs	r1, #14
 80067d6:	187a      	adds	r2, r7, r1
 80067d8:	7812      	ldrb	r2, [r2, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d018      	beq.n	8006810 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80067de:	187b      	adds	r3, r7, r1
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	701a      	strb	r2, [r3, #0]
        t++;
 80067e6:	210f      	movs	r1, #15
 80067e8:	187b      	adds	r3, r7, r1
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	187b      	adds	r3, r7, r1
 80067ee:	3201      	adds	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80067f2:	210d      	movs	r1, #13
 80067f4:	187b      	adds	r3, r7, r1
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	187b      	adds	r3, r7, r1
 80067fa:	3201      	adds	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	230d      	movs	r3, #13
 8006800:	18fa      	adds	r2, r7, r3
 8006802:	230f      	movs	r3, #15
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	7812      	ldrb	r2, [r2, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d3bd      	bcc.n	800678a <RTC_GetTime+0x42>
 800680e:	e000      	b.n	8006812 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006810:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006812:	46bd      	mov	sp, r7
 8006814:	b005      	add	sp, #20
 8006816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006818:	20000cdc 	.word	0x20000cdc
 800681c:	080232f4 	.word	0x080232f4
 8006820:	080232bc 	.word	0x080232bc
 8006824:	08023310 	.word	0x08023310

08006828 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800682e:	003a      	movs	r2, r7
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	0011      	movs	r1, r2
 8006834:	0018      	movs	r0, r3
 8006836:	f7ff ff87 	bl	8006748 <RTC_GetTime>
  return currentDate.WeekDay;
 800683a:	003b      	movs	r3, r7
 800683c:	781b      	ldrb	r3, [r3, #0]
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b006      	add	sp, #24
 8006844:	bd80      	pop	{r7, pc}

08006846 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006846:	b580      	push	{r7, lr}
 8006848:	b086      	sub	sp, #24
 800684a:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800684c:	003a      	movs	r2, r7
 800684e:	1d3b      	adds	r3, r7, #4
 8006850:	0011      	movs	r1, r2
 8006852:	0018      	movs	r0, r3
 8006854:	f7ff ff78 	bl	8006748 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006858:	1d3a      	adds	r2, r7, #4
 800685a:	003b      	movs	r3, r7
 800685c:	0011      	movs	r1, r2
 800685e:	0018      	movs	r0, r3
 8006860:	f000 f926 	bl	8006ab0 <makeTime>
 8006864:	0003      	movs	r3, r0
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b006      	add	sp, #24
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	b08d      	sub	sp, #52	@ 0x34
 8006874:	af04      	add	r7, sp, #16
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800687a:	240c      	movs	r4, #12
 800687c:	193a      	adds	r2, r7, r4
 800687e:	2508      	movs	r5, #8
 8006880:	1979      	adds	r1, r7, r5
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f000 f9dd 	bl	8006c44 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800688a:	002a      	movs	r2, r5
 800688c:	18bb      	adds	r3, r7, r2
 800688e:	789b      	ldrb	r3, [r3, #2]
 8006890:	001e      	movs	r6, r3
 8006892:	18bb      	adds	r3, r7, r2
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	469c      	mov	ip, r3
 8006898:	18bb      	adds	r3, r7, r2
 800689a:	78db      	ldrb	r3, [r3, #3]
 800689c:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800689e:	0021      	movs	r1, r4
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80068a4:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80068a6:	187b      	adds	r3, r7, r1
 80068a8:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80068aa:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80068b0:	4906      	ldr	r1, [pc, #24]	@ (80068cc <getUTCfromPosixTime+0x5c>)
 80068b2:	6838      	ldr	r0, [r7, #0]
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	9502      	str	r5, [sp, #8]
 80068b8:	9401      	str	r4, [sp, #4]
 80068ba:	9200      	str	r2, [sp, #0]
 80068bc:	4663      	mov	r3, ip
 80068be:	0032      	movs	r2, r6
 80068c0:	f018 fe28 	bl	801f514 <siprintf>
}
 80068c4:	46c0      	nop			@ (mov r8, r8)
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b009      	add	sp, #36	@ 0x24
 80068ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068cc:	0802332c 	.word	0x0802332c

080068d0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80068d8:	4b10      	ldr	r3, [pc, #64]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	0018      	movs	r0, r3
 80068de:	f00f f9bf 	bl	8015c60 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	22ff      	movs	r2, #255	@ 0xff
 80068ec:	401a      	ands	r2, r3
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	490a      	ldr	r1, [pc, #40]	@ (8006920 <RTC_SetWakeUpTimer+0x50>)
 80068f6:	430a      	orrs	r2, r1
 80068f8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80068fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006924 <RTC_SetWakeUpTimer+0x54>)
 80068fc:	2280      	movs	r2, #128	@ 0x80
 80068fe:	0352      	lsls	r2, r2, #13
 8006900:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006902:	4b06      	ldr	r3, [pc, #24]	@ (800691c <RTC_SetWakeUpTimer+0x4c>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3b01      	subs	r3, #1
 800690a:	2204      	movs	r2, #4
 800690c:	0019      	movs	r1, r3
 800690e:	f00f f8cf 	bl	8015ab0 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006912:	46c0      	nop			@ (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	b002      	add	sp, #8
 8006918:	bd80      	pop	{r7, pc}
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	20000cdc 	.word	0x20000cdc
 8006920:	fffffb7f 	.word	0xfffffb7f
 8006924:	40010400 	.word	0x40010400

08006928 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 800692c:	4a0c      	ldr	r2, [pc, #48]	@ (8006960 <Enter_Standby_Mode+0x38>)
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <Enter_Standby_Mode+0x3c>)
 8006930:	0019      	movs	r1, r3
 8006932:	2003      	movs	r0, #3
 8006934:	f007 f8a4 	bl	800da80 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006938:	2064      	movs	r0, #100	@ 0x64
 800693a:	f007 fcf7 	bl	800e32c <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800693e:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <Enter_Standby_Mode+0x40>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	0018      	movs	r0, r3
 8006944:	f00f f98c 	bl	8015c60 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006948:	f007 fd14 	bl	800e374 <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 800694c:	f00d fde8 	bl	8014520 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006950:	f001 fc5a 	bl	8008208 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006954:	f007 fd1c 	bl	800e390 <HAL_ResumeTick>
}
 8006958:	46c0      	nop			@ (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	08023380 	.word	0x08023380
 8006964:	08023268 	.word	0x08023268
 8006968:	20000cdc 	.word	0x20000cdc

0800696c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af02      	add	r7, sp, #8
 8006972:	0002      	movs	r2, r0
 8006974:	1dbb      	adds	r3, r7, #6
 8006976:	801a      	strh	r2, [r3, #0]
  if (GetPMSensorPresence()) {
 8006978:	f001 f86a 	bl	8007a50 <GetPMSensorPresence>
 800697c:	1e03      	subs	r3, r0, #0
 800697e:	d001      	beq.n	8006984 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006980:	f002 f9aa 	bl	8008cd8 <sen5x_Power_Off>
  }
  // restart the SGP40 with a soft reset to enter idle mode
  SGP_SoftReset();
 8006984:	f004 ffd6 	bl	800b934 <SGP_SoftReset>
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006988:	f7ff fbac 	bl	80060e4 <ReadBatteryVoltage>
 800698c:	1c03      	adds	r3, r0, #0
 800698e:	1c18      	adds	r0, r3, #0
 8006990:	f7fc fd68 	bl	8003464 <__aeabi_f2d>
 8006994:	0002      	movs	r2, r0
 8006996:	000b      	movs	r3, r1
 8006998:	4836      	ldr	r0, [pc, #216]	@ (8006a74 <Enter_Stop_Mode+0x108>)
 800699a:	4937      	ldr	r1, [pc, #220]	@ (8006a78 <Enter_Stop_Mode+0x10c>)
 800699c:	9200      	str	r2, [sp, #0]
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	0002      	movs	r2, r0
 80069a2:	2002      	movs	r0, #2
 80069a4:	f007 f86c 	bl	800da80 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80069a8:	1dbb      	adds	r3, r7, #6
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	4a33      	ldr	r2, [pc, #204]	@ (8006a7c <Enter_Stop_Mode+0x110>)
 80069ae:	4934      	ldr	r1, [pc, #208]	@ (8006a80 <Enter_Stop_Mode+0x114>)
 80069b0:	2003      	movs	r0, #3
 80069b2:	f007 f865 	bl	800da80 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 80069b6:	f7ff ff46 	bl	8006846 <getPosixTime>
 80069ba:	0002      	movs	r2, r0
 80069bc:	1dbb      	adds	r3, r7, #6
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	18d3      	adds	r3, r2, r3
 80069c2:	4a30      	ldr	r2, [pc, #192]	@ (8006a84 <Enter_Stop_Mode+0x118>)
 80069c4:	0011      	movs	r1, r2
 80069c6:	0018      	movs	r0, r3
 80069c8:	f7ff ff52 	bl	8006870 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 80069cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006a84 <Enter_Stop_Mode+0x118>)
 80069ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006a88 <Enter_Stop_Mode+0x11c>)
 80069d0:	4929      	ldr	r1, [pc, #164]	@ (8006a78 <Enter_Stop_Mode+0x10c>)
 80069d2:	2002      	movs	r0, #2
 80069d4:	f007 f854 	bl	800da80 <CreateLine>
  HAL_Delay(100);
 80069d8:	2064      	movs	r0, #100	@ 0x64
 80069da:	f007 fca7 	bl	800e32c <HAL_Delay>
  HAL_SuspendTick();
 80069de:	f007 fcc9 	bl	800e374 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 80069e2:	1dbb      	adds	r3, r7, #6
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7ff ff72 	bl	80068d0 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80069ec:	2101      	movs	r1, #1
 80069ee:	2001      	movs	r0, #1
 80069f0:	f00d fd3a 	bl	8014468 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80069f4:	f001 fc08 	bl	8008208 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 80069f8:	1dbb      	adds	r3, r7, #6
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f002 f8ef 	bl	8008be0 <sen5x_enable>
 8006a02:	1e03      	subs	r3, r0, #0
 8006a04:	d01e      	beq.n	8006a44 <Enter_Stop_Mode+0xd8>
    showTime();
 8006a06:	f7ff fc63 	bl	80062d0 <showTime>
    set_light_on_state();
 8006a0a:	f002 fd37 	bl	800947c <set_light_on_state>
    if (!userToggle) {
 8006a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8006a8c <Enter_Stop_Mode+0x120>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	4053      	eors	r3, r2
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d013      	beq.n	8006a44 <Enter_Stop_Mode+0xd8>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006a1c:	201b      	movs	r0, #27
 8006a1e:	f7ff ff57 	bl	80068d0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006a22:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <Enter_Stop_Mode+0x110>)
 8006a24:	4916      	ldr	r1, [pc, #88]	@ (8006a80 <Enter_Stop_Mode+0x114>)
 8006a26:	231b      	movs	r3, #27
 8006a28:	2003      	movs	r0, #3
 8006a2a:	f007 f829 	bl	800da80 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006a2e:	2101      	movs	r1, #1
 8006a30:	2001      	movs	r0, #1
 8006a32:	f00d fd19 	bl	8014468 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006a36:	f001 fbe7 	bl	8008208 <SystemClock_Config>
      setsen5xReadTimer(2000);
 8006a3a:	23fa      	movs	r3, #250	@ 0xfa
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f002 f8bc 	bl	8008bbc <setsen5xReadTimer>

    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006a44:	f007 fca4 	bl	800e390 <HAL_ResumeTick>
  showTime();
 8006a48:	f7ff fc42 	bl	80062d0 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006a4c:	f001 fd48 	bl	80084e0 <ResetDBACalculator>
//  setMeasStamp(300);
//  ESPTransmitDone = false;
  setESPTimeStamp(3000);
 8006a50:	4b0f      	ldr	r3, [pc, #60]	@ (8006a90 <Enter_Stop_Mode+0x124>)
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7fc feac 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f004 fff3 	bl	800ba44 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f007 f9c8 	bl	800ddf4 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006a64:	2000      	movs	r0, #0
 8006a66:	f001 fd29 	bl	80084bc <setMICTimeStamp>
}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	b002      	add	sp, #8
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	080233a4 	.word	0x080233a4
 8006a78:	080233bc 	.word	0x080233bc
 8006a7c:	080233c0 	.word	0x080233c0
 8006a80:	08023268 	.word	0x08023268
 8006a84:	20000ce4 	.word	0x20000ce4
 8006a88:	080233e4 	.word	0x080233e4
 8006a8c:	2000214e 	.word	0x2000214e
 8006a90:	00000bb8 	.word	0x00000bb8

08006a94 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	@ (8006aac <InitClock+0x18>)
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b002      	add	sp, #8
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	20000cdc 	.word	0x20000cdc

08006ab0 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	78db      	ldrb	r3, [r3, #3]
 8006abe:	001a      	movs	r2, r3
 8006ac0:	0013      	movs	r3, r2
 8006ac2:	025b      	lsls	r3, r3, #9
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	189b      	adds	r3, r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	189b      	adds	r3, r3, r2
 8006ace:	011a      	lsls	r2, r3, #4
 8006ad0:	1ad2      	subs	r2, r2, r3
 8006ad2:	01d3      	lsls	r3, r2, #7
 8006ad4:	001a      	movs	r2, r3
 8006ad6:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e028      	b.n	8006b30 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a53      	ldr	r2, [pc, #332]	@ (8006c30 <makeTime+0x180>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	db21      	blt.n	8006b2a <makeTime+0x7a>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a52      	ldr	r2, [pc, #328]	@ (8006c34 <makeTime+0x184>)
 8006aea:	4694      	mov	ip, r2
 8006aec:	4463      	add	r3, ip
 8006aee:	001a      	movs	r2, r3
 8006af0:	2303      	movs	r3, #3
 8006af2:	4013      	ands	r3, r2
 8006af4:	d119      	bne.n	8006b2a <makeTime+0x7a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a4e      	ldr	r2, [pc, #312]	@ (8006c34 <makeTime+0x184>)
 8006afa:	4694      	mov	ip, r2
 8006afc:	4463      	add	r3, ip
 8006afe:	2164      	movs	r1, #100	@ 0x64
 8006b00:	0018      	movs	r0, r3
 8006b02:	f7f9 fcbf 	bl	8000484 <__aeabi_idivmod>
 8006b06:	1e0b      	subs	r3, r1, #0
 8006b08:	d10a      	bne.n	8006b20 <makeTime+0x70>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a49      	ldr	r2, [pc, #292]	@ (8006c34 <makeTime+0x184>)
 8006b0e:	4694      	mov	ip, r2
 8006b10:	4463      	add	r3, ip
 8006b12:	22c8      	movs	r2, #200	@ 0xc8
 8006b14:	0051      	lsls	r1, r2, #1
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7f9 fcb4 	bl	8000484 <__aeabi_idivmod>
 8006b1c:	1e0b      	subs	r3, r1, #0
 8006b1e:	d104      	bne.n	8006b2a <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a45      	ldr	r2, [pc, #276]	@ (8006c38 <makeTime+0x188>)
 8006b24:	4694      	mov	ip, r2
 8006b26:	4463      	add	r3, ip
 8006b28:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	78db      	ldrb	r3, [r3, #3]
 8006b34:	001a      	movs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	dbd0      	blt.n	8006ade <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	e03c      	b.n	8006bbc <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d125      	bne.n	8006b94 <makeTime+0xe4>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	78db      	ldrb	r3, [r3, #3]
 8006b4c:	4a39      	ldr	r2, [pc, #228]	@ (8006c34 <makeTime+0x184>)
 8006b4e:	4694      	mov	ip, r2
 8006b50:	4463      	add	r3, ip
 8006b52:	001a      	movs	r2, r3
 8006b54:	2303      	movs	r3, #3
 8006b56:	4013      	ands	r3, r2
 8006b58:	d11c      	bne.n	8006b94 <makeTime+0xe4>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	78db      	ldrb	r3, [r3, #3]
 8006b5e:	4a35      	ldr	r2, [pc, #212]	@ (8006c34 <makeTime+0x184>)
 8006b60:	4694      	mov	ip, r2
 8006b62:	4463      	add	r3, ip
 8006b64:	2164      	movs	r1, #100	@ 0x64
 8006b66:	0018      	movs	r0, r3
 8006b68:	f7f9 fc8c 	bl	8000484 <__aeabi_idivmod>
 8006b6c:	1e0b      	subs	r3, r1, #0
 8006b6e:	d10b      	bne.n	8006b88 <makeTime+0xd8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	78db      	ldrb	r3, [r3, #3]
 8006b74:	4a2f      	ldr	r2, [pc, #188]	@ (8006c34 <makeTime+0x184>)
 8006b76:	4694      	mov	ip, r2
 8006b78:	4463      	add	r3, ip
 8006b7a:	22c8      	movs	r2, #200	@ 0xc8
 8006b7c:	0051      	lsls	r1, r2, #1
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7f9 fc80 	bl	8000484 <__aeabi_idivmod>
 8006b84:	1e0b      	subs	r3, r1, #0
 8006b86:	d105      	bne.n	8006b94 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8006c3c <makeTime+0x18c>)
 8006b8c:	4694      	mov	ip, r2
 8006b8e:	4463      	add	r3, ip
 8006b90:	60bb      	str	r3, [r7, #8]
 8006b92:	e010      	b.n	8006bb6 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4a29      	ldr	r2, [pc, #164]	@ (8006c40 <makeTime+0x190>)
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	0013      	movs	r3, r2
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	189b      	adds	r3, r3, r2
 8006ba4:	011a      	lsls	r2, r3, #4
 8006ba6:	1ad2      	subs	r2, r2, r3
 8006ba8:	0113      	lsls	r3, r2, #4
 8006baa:	1a9b      	subs	r3, r3, r2
 8006bac:	01db      	lsls	r3, r3, #7
 8006bae:	001a      	movs	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	001a      	movs	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	dbbc      	blt.n	8006b42 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	789b      	ldrb	r3, [r3, #2]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	001a      	movs	r2, r3
 8006bd0:	0013      	movs	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	189b      	adds	r3, r3, r2
 8006bd6:	011a      	lsls	r2, r3, #4
 8006bd8:	1ad2      	subs	r2, r2, r3
 8006bda:	0113      	lsls	r3, r2, #4
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	01db      	lsls	r3, r3, #7
 8006be0:	001a      	movs	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	189b      	adds	r3, r3, r2
 8006be6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	001a      	movs	r2, r3
 8006bee:	0013      	movs	r3, r2
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	011a      	lsls	r2, r3, #4
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	0113      	lsls	r3, r2, #4
 8006bfa:	001a      	movs	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	189b      	adds	r3, r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	001a      	movs	r2, r3
 8006c08:	0013      	movs	r3, r2
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	001a      	movs	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	189b      	adds	r3, r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	789b      	ldrb	r3, [r3, #2]
 8006c1c:	001a      	movs	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	189b      	adds	r3, r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006c24:	68bb      	ldr	r3, [r7, #8]
}
 8006c26:	0018      	movs	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b004      	add	sp, #16
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	fffff84f 	.word	0xfffff84f
 8006c34:	000007b2 	.word	0x000007b2
 8006c38:	00015180 	.word	0x00015180
 8006c3c:	00263b80 	.word	0x00263b80
 8006c40:	080246ac 	.word	0x080246ac

08006c44 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b089      	sub	sp, #36	@ 0x24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	213c      	movs	r1, #60	@ 0x3c
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7f9 fb29 	bl	80002b0 <__aeabi_uidivmod>
 8006c5e:	000b      	movs	r3, r1
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	213c      	movs	r1, #60	@ 0x3c
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7f9 fa9a 	bl	80001a4 <__udivsi3>
 8006c70:	0003      	movs	r3, r0
 8006c72:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	213c      	movs	r1, #60	@ 0x3c
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f7f9 fb19 	bl	80002b0 <__aeabi_uidivmod>
 8006c7e:	000b      	movs	r3, r1
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	213c      	movs	r1, #60	@ 0x3c
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f7f9 fa8a 	bl	80001a4 <__udivsi3>
 8006c90:	0003      	movs	r3, r0
 8006c92:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2118      	movs	r1, #24
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7f9 fb09 	bl	80002b0 <__aeabi_uidivmod>
 8006c9e:	000b      	movs	r3, r1
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2118      	movs	r1, #24
 8006caa:	0018      	movs	r0, r3
 8006cac:	f7f9 fa7a 	bl	80001a4 <__udivsi3>
 8006cb0:	0003      	movs	r3, r0
 8006cb2:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	2107      	movs	r1, #7
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7f9 faf8 	bl	80002b0 <__aeabi_uidivmod>
 8006cc0:	000b      	movs	r3, r1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006ccc:	231f      	movs	r3, #31
 8006cce:	18fb      	adds	r3, r7, r3
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006cd8:	e005      	b.n	8006ce6 <breakPosixTime+0xa2>
    year++;
 8006cda:	211f      	movs	r1, #31
 8006cdc:	187b      	adds	r3, r7, r1
 8006cde:	781a      	ldrb	r2, [r3, #0]
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	3201      	adds	r2, #1
 8006ce4:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ce6:	241f      	movs	r4, #31
 8006ce8:	193b      	adds	r3, r7, r4
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	4a64      	ldr	r2, [pc, #400]	@ (8006e80 <breakPosixTime+0x23c>)
 8006cee:	4694      	mov	ip, r2
 8006cf0:	4463      	add	r3, ip
 8006cf2:	001a      	movs	r2, r3
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d119      	bne.n	8006d2e <breakPosixTime+0xea>
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	4a60      	ldr	r2, [pc, #384]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d00:	4694      	mov	ip, r2
 8006d02:	4463      	add	r3, ip
 8006d04:	2164      	movs	r1, #100	@ 0x64
 8006d06:	0018      	movs	r0, r3
 8006d08:	f7f9 fbbc 	bl	8000484 <__aeabi_idivmod>
 8006d0c:	1e0b      	subs	r3, r1, #0
 8006d0e:	d10b      	bne.n	8006d28 <breakPosixTime+0xe4>
 8006d10:	193b      	adds	r3, r7, r4
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	4a5a      	ldr	r2, [pc, #360]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d16:	4694      	mov	ip, r2
 8006d18:	4463      	add	r3, ip
 8006d1a:	22c8      	movs	r2, #200	@ 0xc8
 8006d1c:	0051      	lsls	r1, r2, #1
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7f9 fbb0 	bl	8000484 <__aeabi_idivmod>
 8006d24:	1e0b      	subs	r3, r1, #0
 8006d26:	d102      	bne.n	8006d2e <breakPosixTime+0xea>
 8006d28:	23b7      	movs	r3, #183	@ 0xb7
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	e001      	b.n	8006d32 <breakPosixTime+0xee>
 8006d2e:	236e      	movs	r3, #110	@ 0x6e
 8006d30:	33ff      	adds	r3, #255	@ 0xff
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	18d3      	adds	r3, r2, r3
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d9cc      	bls.n	8006cda <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	241f      	movs	r4, #31
 8006d44:	193a      	adds	r2, r7, r4
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006d4a:	193b      	adds	r3, r7, r4
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d50:	4694      	mov	ip, r2
 8006d52:	4463      	add	r3, ip
 8006d54:	001a      	movs	r2, r3
 8006d56:	2303      	movs	r3, #3
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d119      	bne.n	8006d90 <breakPosixTime+0x14c>
 8006d5c:	193b      	adds	r3, r7, r4
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	4a47      	ldr	r2, [pc, #284]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d62:	4694      	mov	ip, r2
 8006d64:	4463      	add	r3, ip
 8006d66:	2164      	movs	r1, #100	@ 0x64
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f7f9 fb8b 	bl	8000484 <__aeabi_idivmod>
 8006d6e:	1e0b      	subs	r3, r1, #0
 8006d70:	d10b      	bne.n	8006d8a <breakPosixTime+0x146>
 8006d72:	193b      	adds	r3, r7, r4
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4a42      	ldr	r2, [pc, #264]	@ (8006e80 <breakPosixTime+0x23c>)
 8006d78:	4694      	mov	ip, r2
 8006d7a:	4463      	add	r3, ip
 8006d7c:	22c8      	movs	r2, #200	@ 0xc8
 8006d7e:	0051      	lsls	r1, r2, #1
 8006d80:	0018      	movs	r0, r3
 8006d82:	f7f9 fb7f 	bl	8000484 <__aeabi_idivmod>
 8006d86:	1e0b      	subs	r3, r1, #0
 8006d88:	d102      	bne.n	8006d90 <breakPosixTime+0x14c>
 8006d8a:	23b7      	movs	r3, #183	@ 0xb7
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	e001      	b.n	8006d94 <breakPosixTime+0x150>
 8006d90:	236e      	movs	r3, #110	@ 0x6e
 8006d92:	33ff      	adds	r3, #255	@ 0xff
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	61bb      	str	r3, [r7, #24]

  days=0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
  month=0;
 8006da6:	211e      	movs	r1, #30
 8006da8:	187b      	adds	r3, r7, r1
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006dae:	231d      	movs	r3, #29
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006db6:	187b      	adds	r3, r7, r1
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	e048      	b.n	8006e50 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006dbe:	231e      	movs	r3, #30
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d12a      	bne.n	8006e1e <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006dc8:	241f      	movs	r4, #31
 8006dca:	193b      	adds	r3, r7, r4
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4a2c      	ldr	r2, [pc, #176]	@ (8006e80 <breakPosixTime+0x23c>)
 8006dd0:	4694      	mov	ip, r2
 8006dd2:	4463      	add	r3, ip
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d11b      	bne.n	8006e14 <breakPosixTime+0x1d0>
 8006ddc:	193b      	adds	r3, r7, r4
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	4a27      	ldr	r2, [pc, #156]	@ (8006e80 <breakPosixTime+0x23c>)
 8006de2:	4694      	mov	ip, r2
 8006de4:	4463      	add	r3, ip
 8006de6:	2164      	movs	r1, #100	@ 0x64
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7f9 fb4b 	bl	8000484 <__aeabi_idivmod>
 8006dee:	1e0b      	subs	r3, r1, #0
 8006df0:	d10b      	bne.n	8006e0a <breakPosixTime+0x1c6>
 8006df2:	193b      	adds	r3, r7, r4
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	4a22      	ldr	r2, [pc, #136]	@ (8006e80 <breakPosixTime+0x23c>)
 8006df8:	4694      	mov	ip, r2
 8006dfa:	4463      	add	r3, ip
 8006dfc:	22c8      	movs	r2, #200	@ 0xc8
 8006dfe:	0051      	lsls	r1, r2, #1
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7f9 fb3f 	bl	8000484 <__aeabi_idivmod>
 8006e06:	1e0b      	subs	r3, r1, #0
 8006e08:	d104      	bne.n	8006e14 <breakPosixTime+0x1d0>
        monthLength=29;
 8006e0a:	231d      	movs	r3, #29
 8006e0c:	18fb      	adds	r3, r7, r3
 8006e0e:	221d      	movs	r2, #29
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	e00c      	b.n	8006e2e <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006e14:	231d      	movs	r3, #29
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	221c      	movs	r2, #28
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e007      	b.n	8006e2e <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006e1e:	231e      	movs	r3, #30
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	231d      	movs	r3, #29
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	4916      	ldr	r1, [pc, #88]	@ (8006e84 <breakPosixTime+0x240>)
 8006e2a:	5c8a      	ldrb	r2, [r1, r2]
 8006e2c:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006e2e:	211d      	movs	r1, #29
 8006e30:	187b      	adds	r3, r7, r1
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d310      	bcc.n	8006e5c <breakPosixTime+0x218>
      time -= monthLength;
 8006e3a:	187b      	adds	r3, r7, r1
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006e44:	211e      	movs	r1, #30
 8006e46:	187b      	adds	r3, r7, r1
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	187b      	adds	r3, r7, r1
 8006e4c:	3201      	adds	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	231e      	movs	r3, #30
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b0b      	cmp	r3, #11
 8006e58:	d9b1      	bls.n	8006dbe <breakPosixTime+0x17a>
 8006e5a:	e000      	b.n	8006e5e <breakPosixTime+0x21a>
    } else {
        break;
 8006e5c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006e5e:	231e      	movs	r3, #30
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	3301      	adds	r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006e78:	46c0      	nop			@ (mov r8, r8)
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b009      	add	sp, #36	@ 0x24
 8006e7e:	bd90      	pop	{r4, r7, pc}
 8006e80:	000007b2 	.word	0x000007b2
 8006e84:	080246ac 	.word	0x080246ac

08006e88 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006e8e:	003b      	movs	r3, r7
 8006e90:	0018      	movs	r0, r3
 8006e92:	2308      	movs	r3, #8
 8006e94:	001a      	movs	r2, r3
 8006e96:	2100      	movs	r1, #0
 8006e98:	f018 fc80 	bl	801f79c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006e9c:	4b30      	ldr	r3, [pc, #192]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006e9e:	4a31      	ldr	r2, [pc, #196]	@ (8006f64 <MX_ADC_Init+0xdc>)
 8006ea0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eaa:	22c0      	movs	r2, #192	@ 0xc0
 8006eac:	0612      	lsls	r2, r2, #24
 8006eae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006ebc:	4b28      	ldr	r3, [pc, #160]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ec2:	4b27      	ldr	r3, [pc, #156]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006ec8:	4b25      	ldr	r3, [pc, #148]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eca:	2220      	movs	r2, #32
 8006ecc:	2100      	movs	r1, #0
 8006ece:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006ed0:	4b23      	ldr	r3, [pc, #140]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ed2:	2221      	movs	r2, #33	@ 0x21
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ed8:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ede:	4b20      	ldr	r3, [pc, #128]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ee0:	22c2      	movs	r2, #194	@ 0xc2
 8006ee2:	32ff      	adds	r2, #255	@ 0xff
 8006ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ee8:	222c      	movs	r2, #44	@ 0x2c
 8006eea:	2100      	movs	r1, #0
 8006eec:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006eee:	4b1c      	ldr	r3, [pc, #112]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ef0:	2204      	movs	r2, #4
 8006ef2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006efa:	4b19      	ldr	r3, [pc, #100]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006f00:	4b17      	ldr	r3, [pc, #92]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006f06:	4b16      	ldr	r3, [pc, #88]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006f0c:	4b14      	ldr	r3, [pc, #80]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f007 fa6a 	bl	800e3e8 <HAL_ADC_Init>
 8006f14:	1e03      	subs	r3, r0, #0
 8006f16:	d001      	beq.n	8006f1c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006f18:	f001 fac0 	bl	800849c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006f1c:	003b      	movs	r3, r7
 8006f1e:	4a12      	ldr	r2, [pc, #72]	@ (8006f68 <MX_ADC_Init+0xe0>)
 8006f20:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006f22:	003b      	movs	r3, r7
 8006f24:	2280      	movs	r2, #128	@ 0x80
 8006f26:	0152      	lsls	r2, r2, #5
 8006f28:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006f2a:	003a      	movs	r2, r7
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f007 fcc9 	bl	800e8c8 <HAL_ADC_ConfigChannel>
 8006f36:	1e03      	subs	r3, r0, #0
 8006f38:	d001      	beq.n	8006f3e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006f3a:	f001 faaf 	bl	800849c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006f3e:	003b      	movs	r3, r7
 8006f40:	4a0a      	ldr	r2, [pc, #40]	@ (8006f6c <MX_ADC_Init+0xe4>)
 8006f42:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006f44:	003a      	movs	r2, r7
 8006f46:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <MX_ADC_Init+0xd8>)
 8006f48:	0011      	movs	r1, r2
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f007 fcbc 	bl	800e8c8 <HAL_ADC_ConfigChannel>
 8006f50:	1e03      	subs	r3, r0, #0
 8006f52:	d001      	beq.n	8006f58 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8006f54:	f001 faa2 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006f58:	46c0      	nop			@ (mov r8, r8)
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	b002      	add	sp, #8
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	20000cfc 	.word	0x20000cfc
 8006f64:	40012400 	.word	0x40012400
 8006f68:	38004000 	.word	0x38004000
 8006f6c:	3c008000 	.word	0x3c008000

08006f70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006f70:	b590      	push	{r4, r7, lr}
 8006f72:	b089      	sub	sp, #36	@ 0x24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f78:	240c      	movs	r4, #12
 8006f7a:	193b      	adds	r3, r7, r4
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	2314      	movs	r3, #20
 8006f80:	001a      	movs	r2, r3
 8006f82:	2100      	movs	r1, #0
 8006f84:	f018 fc0a 	bl	801f79c <memset>
  if(adcHandle->Instance==ADC1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a14      	ldr	r2, [pc, #80]	@ (8006fe0 <HAL_ADC_MspInit+0x70>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d121      	bne.n	8006fd6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f92:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f96:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006f98:	2180      	movs	r1, #128	@ 0x80
 8006f9a:	0089      	lsls	r1, r1, #2
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fa0:	4b10      	ldr	r3, [pc, #64]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006fa6:	2104      	movs	r1, #4
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fac:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <HAL_ADC_MspInit+0x74>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006fb8:	193b      	adds	r3, r7, r4
 8006fba:	2230      	movs	r2, #48	@ 0x30
 8006fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fbe:	193b      	adds	r3, r7, r4
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc4:	193b      	adds	r3, r7, r4
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fca:	193b      	adds	r3, r7, r4
 8006fcc:	4a06      	ldr	r2, [pc, #24]	@ (8006fe8 <HAL_ADC_MspInit+0x78>)
 8006fce:	0019      	movs	r1, r3
 8006fd0:	0010      	movs	r0, r2
 8006fd2:	f008 fa81 	bl	800f4d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b009      	add	sp, #36	@ 0x24
 8006fdc:	bd90      	pop	{r4, r7, pc}
 8006fde:	46c0      	nop			@ (mov r8, r8)
 8006fe0:	40012400 	.word	0x40012400
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	50000800 	.word	0x50000800

08006fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006ff2:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <MX_DMA_Init+0x48>)
 8006ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <MX_DMA_Init+0x48>)
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <MX_DMA_Init+0x48>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	2201      	movs	r2, #1
 8007004:	4013      	ands	r3, r2
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800700a:	2200      	movs	r2, #0
 800700c:	2100      	movs	r1, #0
 800700e:	200a      	movs	r0, #10
 8007010:	f007 fe14 	bl	800ec3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007014:	200a      	movs	r0, #10
 8007016:	f007 fe26 	bl	800ec66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800701a:	2200      	movs	r2, #0
 800701c:	2103      	movs	r1, #3
 800701e:	200b      	movs	r0, #11
 8007020:	f007 fe0c 	bl	800ec3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007024:	200b      	movs	r0, #11
 8007026:	f007 fe1e 	bl	800ec66 <HAL_NVIC_EnableIRQ>

}
 800702a:	46c0      	nop			@ (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	b002      	add	sp, #8
 8007030:	bd80      	pop	{r7, pc}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	40021000 	.word	0x40021000

08007038 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b7f      	cmp	r3, #127	@ 0x7f
 8007048:	d901      	bls.n	800704e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800704a:	237f      	movs	r3, #127	@ 0x7f
 800704c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800704e:	2017      	movs	r0, #23
 8007050:	183b      	adds	r3, r7, r0
 8007052:	490d      	ldr	r1, [pc, #52]	@ (8007088 <accessLUT10log10+0x50>)
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	188a      	adds	r2, r1, r2
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800705c:	0001      	movs	r1, r0
 800705e:	187b      	adds	r3, r7, r1
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2206      	movs	r2, #6
 8007064:	4113      	asrs	r3, r2
 8007066:	001a      	movs	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800706c:	187b      	adds	r3, r7, r1
 800706e:	781a      	ldrb	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2106      	movs	r1, #6
 8007076:	408b      	lsls	r3, r1
 8007078:	1ad2      	subs	r2, r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	46bd      	mov	sp, r7
 8007082:	b006      	add	sp, #24
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	080246b8 	.word	0x080246b8

0800708c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800708c:	b5b0      	push	{r4, r5, r7, lr}
 800708e:	b090      	sub	sp, #64	@ 0x40
 8007090:	af00      	add	r7, sp, #0
 8007092:	6138      	str	r0, [r7, #16]
 8007094:	6179      	str	r1, [r7, #20]
 8007096:	60fa      	str	r2, [r7, #12]
 8007098:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800709a:	2308      	movs	r3, #8
 800709c:	001a      	movs	r2, r3
 800709e:	3a20      	subs	r2, #32
 80070a0:	2a00      	cmp	r2, #0
 80070a2:	db03      	blt.n	80070ac <efficient10log10+0x20>
 80070a4:	2101      	movs	r1, #1
 80070a6:	4091      	lsls	r1, r2
 80070a8:	000d      	movs	r5, r1
 80070aa:	e008      	b.n	80070be <efficient10log10+0x32>
 80070ac:	2220      	movs	r2, #32
 80070ae:	1ad2      	subs	r2, r2, r3
 80070b0:	2101      	movs	r1, #1
 80070b2:	40d1      	lsrs	r1, r2
 80070b4:	000a      	movs	r2, r1
 80070b6:	2100      	movs	r1, #0
 80070b8:	4099      	lsls	r1, r3
 80070ba:	000d      	movs	r5, r1
 80070bc:	4315      	orrs	r5, r2
 80070be:	2201      	movs	r2, #1
 80070c0:	409a      	lsls	r2, r3
 80070c2:	0014      	movs	r4, r2
 80070c4:	2201      	movs	r2, #1
 80070c6:	4252      	negs	r2, r2
 80070c8:	17d3      	asrs	r3, r2, #31
 80070ca:	1912      	adds	r2, r2, r4
 80070cc:	416b      	adcs	r3, r5
 80070ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80070d2:	2336      	movs	r3, #54	@ 0x36
 80070d4:	2208      	movs	r2, #8
 80070d6:	189b      	adds	r3, r3, r2
 80070d8:	19db      	adds	r3, r3, r7
 80070da:	2200      	movs	r2, #0
 80070dc:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80070de:	e017      	b.n	8007110 <efficient10log10+0x84>
    {
        P = P >> 1;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	07db      	lsls	r3, r3, #31
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	0852      	lsrs	r2, r2, #1
 80070e8:	603a      	str	r2, [r7, #0]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	603a      	str	r2, [r7, #0]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	687c      	ldr	r4, [r7, #4]
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	617c      	str	r4, [r7, #20]
        bShift++;
 80070fe:	2136      	movs	r1, #54	@ 0x36
 8007100:	2008      	movs	r0, #8
 8007102:	180b      	adds	r3, r1, r0
 8007104:	19db      	adds	r3, r3, r7
 8007106:	881a      	ldrh	r2, [r3, #0]
 8007108:	180b      	adds	r3, r1, r0
 800710a:	19db      	adds	r3, r3, r7
 800710c:	3201      	adds	r2, #1
 800710e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007114:	429a      	cmp	r2, r3
 8007116:	d8e3      	bhi.n	80070e0 <efficient10log10+0x54>
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711c:	429a      	cmp	r2, r3
 800711e:	d103      	bne.n	8007128 <efficient10log10+0x9c>
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	429a      	cmp	r2, r3
 8007126:	d8db      	bhi.n	80070e0 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	2308      	movs	r3, #8
 800712c:	3b01      	subs	r3, #1
 800712e:	2101      	movs	r1, #1
 8007130:	4099      	lsls	r1, r3
 8007132:	000b      	movs	r3, r1
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007140:	231c      	movs	r3, #28
 8007142:	2408      	movs	r4, #8
 8007144:	191b      	adds	r3, r3, r4
 8007146:	19da      	adds	r2, r3, r7
 8007148:	2320      	movs	r3, #32
 800714a:	191b      	adds	r3, r3, r4
 800714c:	19d9      	adds	r1, r3, r7
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	0018      	movs	r0, r3
 8007152:	f7ff ff71 	bl	8007038 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007156:	2215      	movs	r2, #21
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800715c:	2036      	movs	r0, #54	@ 0x36
 800715e:	1902      	adds	r2, r0, r4
 8007160:	19d2      	adds	r2, r2, r7
 8007162:	8812      	ldrh	r2, [r2, #0]
 8007164:	2103      	movs	r1, #3
 8007166:	434a      	muls	r2, r1
 8007168:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800716a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800716c:	0021      	movs	r1, r4
 800716e:	1843      	adds	r3, r0, r1
 8007170:	19db      	adds	r3, r3, r7
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	4353      	muls	r3, r2
 8007178:	2203      	movs	r2, #3
 800717a:	4113      	asrs	r3, r2
 800717c:	001a      	movs	r2, r3
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007182:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007184:	2314      	movs	r3, #20
 8007186:	185b      	adds	r3, r3, r1
 8007188:	19da      	adds	r2, r3, r7
 800718a:	2318      	movs	r3, #24
 800718c:	185b      	adds	r3, r3, r1
 800718e:	19db      	adds	r3, r3, r7
 8007190:	0011      	movs	r1, r2
 8007192:	0018      	movs	r0, r3
 8007194:	f000 f80a 	bl	80071ac <correctIntFracNumber>
    integerPart[0] = intPart;
 8007198:	6a3a      	ldr	r2, [r7, #32]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	601a      	str	r2, [r3, #0]
}
 80071a4:	46c0      	nop			@ (mov r8, r8)
 80071a6:	46bd      	mov	sp, r7
 80071a8:	b010      	add	sp, #64	@ 0x40
 80071aa:	bdb0      	pop	{r4, r5, r7, pc}

080071ac <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80071b6:	e00a      	b.n	80071ce <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3b0a      	subs	r3, #10
 80071c8:	001a      	movs	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	dcf0      	bgt.n	80071b8 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80071d6:	e00a      	b.n	80071ee <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	1e5a      	subs	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330a      	adds	r3, #10
 80071e8:	001a      	movs	r2, r3
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3309      	adds	r3, #9
 80071f4:	dbf0      	blt.n	80071d8 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da0f      	bge.n	800721e <correctIntFracNumber+0x72>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd0b      	ble.n	800721e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3b0a      	subs	r3, #10
 8007216:	001a      	movs	r2, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800721c:	e012      	b.n	8007244 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dd0e      	ble.n	8007244 <correctIntFracNumber+0x98>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	da0a      	bge.n	8007244 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330a      	adds	r3, #10
 800723e:	001a      	movs	r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	601a      	str	r2, [r3, #0]
}
 8007244:	46c0      	nop			@ (mov r8, r8)
 8007246:	46bd      	mov	sp, r7
 8007248:	b002      	add	sp, #8
 800724a:	bd80      	pop	{r7, pc}

0800724c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b08b      	sub	sp, #44	@ 0x2c
 8007250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007252:	2414      	movs	r4, #20
 8007254:	193b      	adds	r3, r7, r4
 8007256:	0018      	movs	r0, r3
 8007258:	2314      	movs	r3, #20
 800725a:	001a      	movs	r2, r3
 800725c:	2100      	movs	r1, #0
 800725e:	f018 fa9d 	bl	801f79c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007262:	4b8a      	ldr	r3, [pc, #552]	@ (800748c <MX_GPIO_Init+0x240>)
 8007264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007266:	4b89      	ldr	r3, [pc, #548]	@ (800748c <MX_GPIO_Init+0x240>)
 8007268:	2104      	movs	r1, #4
 800726a:	430a      	orrs	r2, r1
 800726c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800726e:	4b87      	ldr	r3, [pc, #540]	@ (800748c <MX_GPIO_Init+0x240>)
 8007270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007272:	2204      	movs	r2, #4
 8007274:	4013      	ands	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800727a:	4b84      	ldr	r3, [pc, #528]	@ (800748c <MX_GPIO_Init+0x240>)
 800727c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800727e:	4b83      	ldr	r3, [pc, #524]	@ (800748c <MX_GPIO_Init+0x240>)
 8007280:	2180      	movs	r1, #128	@ 0x80
 8007282:	430a      	orrs	r2, r1
 8007284:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007286:	4b81      	ldr	r3, [pc, #516]	@ (800748c <MX_GPIO_Init+0x240>)
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	2280      	movs	r2, #128	@ 0x80
 800728c:	4013      	ands	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007292:	4b7e      	ldr	r3, [pc, #504]	@ (800748c <MX_GPIO_Init+0x240>)
 8007294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007296:	4b7d      	ldr	r3, [pc, #500]	@ (800748c <MX_GPIO_Init+0x240>)
 8007298:	2101      	movs	r1, #1
 800729a:	430a      	orrs	r2, r1
 800729c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800729e:	4b7b      	ldr	r3, [pc, #492]	@ (800748c <MX_GPIO_Init+0x240>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	2201      	movs	r2, #1
 80072a4:	4013      	ands	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072aa:	4b78      	ldr	r3, [pc, #480]	@ (800748c <MX_GPIO_Init+0x240>)
 80072ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ae:	4b77      	ldr	r3, [pc, #476]	@ (800748c <MX_GPIO_Init+0x240>)
 80072b0:	2102      	movs	r1, #2
 80072b2:	430a      	orrs	r2, r1
 80072b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072b6:	4b75      	ldr	r3, [pc, #468]	@ (800748c <MX_GPIO_Init+0x240>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ba:	2202      	movs	r2, #2
 80072bc:	4013      	ands	r3, r2
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80072c2:	4b72      	ldr	r3, [pc, #456]	@ (800748c <MX_GPIO_Init+0x240>)
 80072c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c6:	4b71      	ldr	r3, [pc, #452]	@ (800748c <MX_GPIO_Init+0x240>)
 80072c8:	2108      	movs	r1, #8
 80072ca:	430a      	orrs	r2, r1
 80072cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072ce:	4b6f      	ldr	r3, [pc, #444]	@ (800748c <MX_GPIO_Init+0x240>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	2208      	movs	r2, #8
 80072d4:	4013      	ands	r3, r2
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80072da:	4b6d      	ldr	r3, [pc, #436]	@ (8007490 <MX_GPIO_Init+0x244>)
 80072dc:	2201      	movs	r2, #1
 80072de:	2101      	movs	r1, #1
 80072e0:	0018      	movs	r0, r3
 80072e2:	f008 fa94 	bl	800f80e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80072e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007490 <MX_GPIO_Init+0x244>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	2102      	movs	r1, #2
 80072ec:	0018      	movs	r0, r3
 80072ee:	f008 fa8e 	bl	800f80e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80072f2:	4968      	ldr	r1, [pc, #416]	@ (8007494 <MX_GPIO_Init+0x248>)
 80072f4:	4b68      	ldr	r3, [pc, #416]	@ (8007498 <MX_GPIO_Init+0x24c>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	0018      	movs	r0, r3
 80072fa:	f008 fa88 	bl	800f80e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80072fe:	2380      	movs	r3, #128	@ 0x80
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	4866      	ldr	r0, [pc, #408]	@ (800749c <MX_GPIO_Init+0x250>)
 8007304:	2201      	movs	r2, #1
 8007306:	0019      	movs	r1, r3
 8007308:	f008 fa81 	bl	800f80e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800730c:	2380      	movs	r3, #128	@ 0x80
 800730e:	015b      	lsls	r3, r3, #5
 8007310:	4862      	ldr	r0, [pc, #392]	@ (800749c <MX_GPIO_Init+0x250>)
 8007312:	2200      	movs	r2, #0
 8007314:	0019      	movs	r1, r3
 8007316:	f008 fa7a 	bl	800f80e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800731a:	193b      	adds	r3, r7, r4
 800731c:	4a60      	ldr	r2, [pc, #384]	@ (80074a0 <MX_GPIO_Init+0x254>)
 800731e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007320:	193b      	adds	r3, r7, r4
 8007322:	2203      	movs	r2, #3
 8007324:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007326:	193b      	adds	r3, r7, r4
 8007328:	2200      	movs	r2, #0
 800732a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800732c:	193b      	adds	r3, r7, r4
 800732e:	4a5b      	ldr	r2, [pc, #364]	@ (800749c <MX_GPIO_Init+0x250>)
 8007330:	0019      	movs	r1, r3
 8007332:	0010      	movs	r0, r2
 8007334:	f008 f8d0 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007338:	193b      	adds	r3, r7, r4
 800733a:	2203      	movs	r2, #3
 800733c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800733e:	193b      	adds	r3, r7, r4
 8007340:	2201      	movs	r2, #1
 8007342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007344:	193b      	adds	r3, r7, r4
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800734a:	193b      	adds	r3, r7, r4
 800734c:	2200      	movs	r2, #0
 800734e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007350:	193b      	adds	r3, r7, r4
 8007352:	4a4f      	ldr	r2, [pc, #316]	@ (8007490 <MX_GPIO_Init+0x244>)
 8007354:	0019      	movs	r1, r3
 8007356:	0010      	movs	r0, r2
 8007358:	f008 f8be 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800735c:	193b      	adds	r3, r7, r4
 800735e:	2270      	movs	r2, #112	@ 0x70
 8007360:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007362:	193b      	adds	r3, r7, r4
 8007364:	2203      	movs	r2, #3
 8007366:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007368:	193b      	adds	r3, r7, r4
 800736a:	2200      	movs	r2, #0
 800736c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800736e:	193a      	adds	r2, r7, r4
 8007370:	23a0      	movs	r3, #160	@ 0xa0
 8007372:	05db      	lsls	r3, r3, #23
 8007374:	0011      	movs	r1, r2
 8007376:	0018      	movs	r0, r3
 8007378:	f008 f8ae 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800737c:	193b      	adds	r3, r7, r4
 800737e:	22c0      	movs	r2, #192	@ 0xc0
 8007380:	0052      	lsls	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007384:	193b      	adds	r3, r7, r4
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738a:	193b      	adds	r3, r7, r4
 800738c:	2200      	movs	r2, #0
 800738e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007390:	193a      	adds	r2, r7, r4
 8007392:	23a0      	movs	r3, #160	@ 0xa0
 8007394:	05db      	lsls	r3, r3, #23
 8007396:	0011      	movs	r1, r2
 8007398:	0018      	movs	r0, r3
 800739a:	f008 f89d 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800739e:	193b      	adds	r3, r7, r4
 80073a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007494 <MX_GPIO_Init+0x248>)
 80073a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073a4:	193b      	adds	r3, r7, r4
 80073a6:	2201      	movs	r2, #1
 80073a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073aa:	193b      	adds	r3, r7, r4
 80073ac:	2200      	movs	r2, #0
 80073ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b0:	193b      	adds	r3, r7, r4
 80073b2:	2200      	movs	r2, #0
 80073b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073b6:	193b      	adds	r3, r7, r4
 80073b8:	4a37      	ldr	r2, [pc, #220]	@ (8007498 <MX_GPIO_Init+0x24c>)
 80073ba:	0019      	movs	r1, r3
 80073bc:	0010      	movs	r0, r2
 80073be:	f008 f88b 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80073c2:	193b      	adds	r3, r7, r4
 80073c4:	4a37      	ldr	r2, [pc, #220]	@ (80074a4 <MX_GPIO_Init+0x258>)
 80073c6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073c8:	193b      	adds	r3, r7, r4
 80073ca:	2203      	movs	r2, #3
 80073cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ce:	193b      	adds	r3, r7, r4
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d4:	193b      	adds	r3, r7, r4
 80073d6:	4a30      	ldr	r2, [pc, #192]	@ (8007498 <MX_GPIO_Init+0x24c>)
 80073d8:	0019      	movs	r1, r3
 80073da:	0010      	movs	r0, r2
 80073dc:	f008 f87c 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80073e0:	0021      	movs	r1, r4
 80073e2:	187b      	adds	r3, r7, r1
 80073e4:	2280      	movs	r2, #128	@ 0x80
 80073e6:	0092      	lsls	r2, r2, #2
 80073e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ea:	000c      	movs	r4, r1
 80073ec:	193b      	adds	r3, r7, r4
 80073ee:	2200      	movs	r2, #0
 80073f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f2:	193b      	adds	r3, r7, r4
 80073f4:	2200      	movs	r2, #0
 80073f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80073f8:	193b      	adds	r3, r7, r4
 80073fa:	4a28      	ldr	r2, [pc, #160]	@ (800749c <MX_GPIO_Init+0x250>)
 80073fc:	0019      	movs	r1, r3
 80073fe:	0010      	movs	r0, r2
 8007400:	f008 f86a 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007404:	193b      	adds	r3, r7, r4
 8007406:	2280      	movs	r2, #128	@ 0x80
 8007408:	0212      	lsls	r2, r2, #8
 800740a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800740c:	193b      	adds	r3, r7, r4
 800740e:	2288      	movs	r2, #136	@ 0x88
 8007410:	0352      	lsls	r2, r2, #13
 8007412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007414:	193b      	adds	r3, r7, r4
 8007416:	2200      	movs	r2, #0
 8007418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800741a:	193a      	adds	r2, r7, r4
 800741c:	23a0      	movs	r3, #160	@ 0xa0
 800741e:	05db      	lsls	r3, r3, #23
 8007420:	0011      	movs	r1, r2
 8007422:	0018      	movs	r0, r3
 8007424:	f008 f858 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007428:	0021      	movs	r1, r4
 800742a:	187b      	adds	r3, r7, r1
 800742c:	22c0      	movs	r2, #192	@ 0xc0
 800742e:	0152      	lsls	r2, r2, #5
 8007430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007432:	000c      	movs	r4, r1
 8007434:	193b      	adds	r3, r7, r4
 8007436:	2201      	movs	r2, #1
 8007438:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743a:	193b      	adds	r3, r7, r4
 800743c:	2200      	movs	r2, #0
 800743e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007440:	193b      	adds	r3, r7, r4
 8007442:	2200      	movs	r2, #0
 8007444:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007446:	193b      	adds	r3, r7, r4
 8007448:	4a14      	ldr	r2, [pc, #80]	@ (800749c <MX_GPIO_Init+0x250>)
 800744a:	0019      	movs	r1, r3
 800744c:	0010      	movs	r0, r2
 800744e:	f008 f843 	bl	800f4d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007452:	0021      	movs	r1, r4
 8007454:	187b      	adds	r3, r7, r1
 8007456:	2204      	movs	r2, #4
 8007458:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800745a:	187b      	adds	r3, r7, r1
 800745c:	2200      	movs	r2, #0
 800745e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007460:	187b      	adds	r3, r7, r1
 8007462:	2201      	movs	r2, #1
 8007464:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007466:	187b      	adds	r3, r7, r1
 8007468:	4a0f      	ldr	r2, [pc, #60]	@ (80074a8 <MX_GPIO_Init+0x25c>)
 800746a:	0019      	movs	r1, r3
 800746c:	0010      	movs	r0, r2
 800746e:	f008 f833 	bl	800f4d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	2007      	movs	r0, #7
 8007478:	f007 fbe0 	bl	800ec3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800747c:	2007      	movs	r0, #7
 800747e:	f007 fbf2 	bl	800ec66 <HAL_NVIC_EnableIRQ>

}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	46bd      	mov	sp, r7
 8007486:	b00b      	add	sp, #44	@ 0x2c
 8007488:	bd90      	pop	{r4, r7, pc}
 800748a:	46c0      	nop			@ (mov r8, r8)
 800748c:	40021000 	.word	0x40021000
 8007490:	50001c00 	.word	0x50001c00
 8007494:	00000301 	.word	0x00000301
 8007498:	50000400 	.word	0x50000400
 800749c:	50000800 	.word	0x50000800
 80074a0:	0000200c 	.word	0x0000200c
 80074a4:	0000403e 	.word	0x0000403e
 80074a8:	50000c00 	.word	0x50000c00

080074ac <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2100      	movs	r1, #0
 80074ba:	0018      	movs	r0, r3
 80074bc:	f00e fd82 	bl	8015fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2108      	movs	r1, #8
 80074c4:	0018      	movs	r0, r3
 80074c6:	f00e fd7d 	bl	8015fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	210c      	movs	r1, #12
 80074ce:	0018      	movs	r0, r3
 80074d0:	f00e fd78 	bl	8015fc4 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80074d4:	2380      	movs	r3, #128	@ 0x80
 80074d6:	05db      	lsls	r3, r3, #23
 80074d8:	22fa      	movs	r2, #250	@ 0xfa
 80074da:	0112      	lsls	r2, r2, #4
 80074dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80074de:	2380      	movs	r3, #128	@ 0x80
 80074e0:	05db      	lsls	r3, r3, #23
 80074e2:	22fa      	movs	r2, #250	@ 0xfa
 80074e4:	0112      	lsls	r2, r2, #4
 80074e6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80074e8:	2380      	movs	r3, #128	@ 0x80
 80074ea:	05db      	lsls	r3, r3, #23
 80074ec:	22fa      	movs	r2, #250	@ 0xfa
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80074f2:	2380      	movs	r3, #128	@ 0x80
 80074f4:	05db      	lsls	r3, r3, #23
 80074f6:	22fa      	movs	r2, #250	@ 0xfa
 80074f8:	0112      	lsls	r2, r2, #4
 80074fa:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2100      	movs	r1, #0
 8007500:	0018      	movs	r0, r3
 8007502:	f00e fd5f 	bl	8015fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2104      	movs	r1, #4
 800750a:	0018      	movs	r0, r3
 800750c:	f00e fd5a 	bl	8015fc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2108      	movs	r1, #8
 8007514:	0018      	movs	r0, r3
 8007516:	f00e fd55 	bl	8015fc4 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800751a:	4b0a      	ldr	r3, [pc, #40]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 800751c:	22fa      	movs	r2, #250	@ 0xfa
 800751e:	0112      	lsls	r2, r2, #4
 8007520:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007522:	4b08      	ldr	r3, [pc, #32]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 8007524:	22fa      	movs	r2, #250	@ 0xfa
 8007526:	0112      	lsls	r2, r2, #4
 8007528:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800752a:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 800752c:	22fa      	movs	r2, #250	@ 0xfa
 800752e:	0112      	lsls	r2, r2, #4
 8007530:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007532:	4b04      	ldr	r3, [pc, #16]	@ (8007544 <GPIO_InitPWMLEDs+0x98>)
 8007534:	22fa      	movs	r2, #250	@ 0xfa
 8007536:	0112      	lsls	r2, r2, #4
 8007538:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b002      	add	sp, #8
 8007540:	bd80      	pop	{r7, pc}
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	40000400 	.word	0x40000400

08007548 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800754c:	4b1b      	ldr	r3, [pc, #108]	@ (80075bc <MX_I2C1_Init+0x74>)
 800754e:	4a1c      	ldr	r2, [pc, #112]	@ (80075c0 <MX_I2C1_Init+0x78>)
 8007550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007552:	4b1a      	ldr	r3, [pc, #104]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007554:	4a1b      	ldr	r2, [pc, #108]	@ (80075c4 <MX_I2C1_Init+0x7c>)
 8007556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007558:	4b18      	ldr	r3, [pc, #96]	@ (80075bc <MX_I2C1_Init+0x74>)
 800755a:	2200      	movs	r2, #0
 800755c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800755e:	4b17      	ldr	r3, [pc, #92]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007560:	2201      	movs	r2, #1
 8007562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007564:	4b15      	ldr	r3, [pc, #84]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007566:	2200      	movs	r2, #0
 8007568:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800756a:	4b14      	ldr	r3, [pc, #80]	@ (80075bc <MX_I2C1_Init+0x74>)
 800756c:	2200      	movs	r2, #0
 800756e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007570:	4b12      	ldr	r3, [pc, #72]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007572:	2200      	movs	r2, #0
 8007574:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007576:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007578:	2200      	movs	r2, #0
 800757a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800757c:	4b0f      	ldr	r3, [pc, #60]	@ (80075bc <MX_I2C1_Init+0x74>)
 800757e:	2200      	movs	r2, #0
 8007580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007582:	4b0e      	ldr	r3, [pc, #56]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007584:	0018      	movs	r0, r3
 8007586:	f008 f97b 	bl	800f880 <HAL_I2C_Init>
 800758a:	1e03      	subs	r3, r0, #0
 800758c:	d001      	beq.n	8007592 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800758e:	f000 ff85 	bl	800849c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <MX_I2C1_Init+0x74>)
 8007594:	2100      	movs	r1, #0
 8007596:	0018      	movs	r0, r3
 8007598:	f00a fd4c 	bl	8012034 <HAL_I2CEx_ConfigAnalogFilter>
 800759c:	1e03      	subs	r3, r0, #0
 800759e:	d001      	beq.n	80075a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80075a0:	f000 ff7c 	bl	800849c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80075a4:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <MX_I2C1_Init+0x74>)
 80075a6:	2100      	movs	r1, #0
 80075a8:	0018      	movs	r0, r3
 80075aa:	f00a fd8f 	bl	80120cc <HAL_I2CEx_ConfigDigitalFilter>
 80075ae:	1e03      	subs	r3, r0, #0
 80075b0:	d001      	beq.n	80075b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80075b2:	f000 ff73 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80075b6:	46c0      	nop			@ (mov r8, r8)
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000d58 	.word	0x20000d58
 80075c0:	40005400 	.word	0x40005400
 80075c4:	00503d58 	.word	0x00503d58

080075c8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80075cc:	4b1b      	ldr	r3, [pc, #108]	@ (800763c <MX_I2C2_Init+0x74>)
 80075ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007640 <MX_I2C2_Init+0x78>)
 80075d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80075d2:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <MX_I2C2_Init+0x74>)
 80075d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007644 <MX_I2C2_Init+0x7c>)
 80075d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80075d8:	4b18      	ldr	r3, [pc, #96]	@ (800763c <MX_I2C2_Init+0x74>)
 80075da:	2200      	movs	r2, #0
 80075dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80075de:	4b17      	ldr	r3, [pc, #92]	@ (800763c <MX_I2C2_Init+0x74>)
 80075e0:	2201      	movs	r2, #1
 80075e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80075e4:	4b15      	ldr	r3, [pc, #84]	@ (800763c <MX_I2C2_Init+0x74>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80075ea:	4b14      	ldr	r3, [pc, #80]	@ (800763c <MX_I2C2_Init+0x74>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80075f0:	4b12      	ldr	r3, [pc, #72]	@ (800763c <MX_I2C2_Init+0x74>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075f6:	4b11      	ldr	r3, [pc, #68]	@ (800763c <MX_I2C2_Init+0x74>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075fc:	4b0f      	ldr	r3, [pc, #60]	@ (800763c <MX_I2C2_Init+0x74>)
 80075fe:	2200      	movs	r2, #0
 8007600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007602:	4b0e      	ldr	r3, [pc, #56]	@ (800763c <MX_I2C2_Init+0x74>)
 8007604:	0018      	movs	r0, r3
 8007606:	f008 f93b 	bl	800f880 <HAL_I2C_Init>
 800760a:	1e03      	subs	r3, r0, #0
 800760c:	d001      	beq.n	8007612 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800760e:	f000 ff45 	bl	800849c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007612:	4b0a      	ldr	r3, [pc, #40]	@ (800763c <MX_I2C2_Init+0x74>)
 8007614:	2100      	movs	r1, #0
 8007616:	0018      	movs	r0, r3
 8007618:	f00a fd0c 	bl	8012034 <HAL_I2CEx_ConfigAnalogFilter>
 800761c:	1e03      	subs	r3, r0, #0
 800761e:	d001      	beq.n	8007624 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007620:	f000 ff3c 	bl	800849c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007624:	4b05      	ldr	r3, [pc, #20]	@ (800763c <MX_I2C2_Init+0x74>)
 8007626:	2100      	movs	r1, #0
 8007628:	0018      	movs	r0, r3
 800762a:	f00a fd4f 	bl	80120cc <HAL_I2CEx_ConfigDigitalFilter>
 800762e:	1e03      	subs	r3, r0, #0
 8007630:	d001      	beq.n	8007636 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007632:	f000 ff33 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000dac 	.word	0x20000dac
 8007640:	40005800 	.word	0x40005800
 8007644:	00503d58 	.word	0x00503d58

08007648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b08b      	sub	sp, #44	@ 0x2c
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007650:	2414      	movs	r4, #20
 8007652:	193b      	adds	r3, r7, r4
 8007654:	0018      	movs	r0, r3
 8007656:	2314      	movs	r3, #20
 8007658:	001a      	movs	r2, r3
 800765a:	2100      	movs	r1, #0
 800765c:	f018 f89e 	bl	801f79c <memset>
  if(i2cHandle->Instance==I2C1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a5d      	ldr	r2, [pc, #372]	@ (80077dc <HAL_I2C_MspInit+0x194>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d000      	beq.n	800766c <HAL_I2C_MspInit+0x24>
 800766a:	e083      	b.n	8007774 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800766c:	4b5c      	ldr	r3, [pc, #368]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 800766e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007670:	4b5b      	ldr	r3, [pc, #364]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 8007672:	2102      	movs	r1, #2
 8007674:	430a      	orrs	r2, r1
 8007676:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007678:	4b59      	ldr	r3, [pc, #356]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	2202      	movs	r2, #2
 800767e:	4013      	ands	r3, r2
 8007680:	613b      	str	r3, [r7, #16]
 8007682:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007684:	0021      	movs	r1, r4
 8007686:	187b      	adds	r3, r7, r1
 8007688:	22c0      	movs	r2, #192	@ 0xc0
 800768a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800768c:	187b      	adds	r3, r7, r1
 800768e:	2212      	movs	r2, #18
 8007690:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007692:	187b      	adds	r3, r7, r1
 8007694:	2200      	movs	r2, #0
 8007696:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007698:	187b      	adds	r3, r7, r1
 800769a:	2203      	movs	r2, #3
 800769c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800769e:	187b      	adds	r3, r7, r1
 80076a0:	2201      	movs	r2, #1
 80076a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076a4:	187b      	adds	r3, r7, r1
 80076a6:	4a4f      	ldr	r2, [pc, #316]	@ (80077e4 <HAL_I2C_MspInit+0x19c>)
 80076a8:	0019      	movs	r1, r3
 80076aa:	0010      	movs	r0, r2
 80076ac:	f007 ff14 	bl	800f4d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80076b0:	4b4b      	ldr	r3, [pc, #300]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80076b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076b4:	4b4a      	ldr	r3, [pc, #296]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80076b6:	2180      	movs	r1, #128	@ 0x80
 80076b8:	0389      	lsls	r1, r1, #14
 80076ba:	430a      	orrs	r2, r1
 80076bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80076be:	4b4a      	ldr	r3, [pc, #296]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076c0:	4a4a      	ldr	r2, [pc, #296]	@ (80077ec <HAL_I2C_MspInit+0x1a4>)
 80076c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80076c4:	4b48      	ldr	r3, [pc, #288]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076c6:	2206      	movs	r2, #6
 80076c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076ca:	4b47      	ldr	r3, [pc, #284]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076d0:	4b45      	ldr	r3, [pc, #276]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80076d6:	4b44      	ldr	r3, [pc, #272]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076d8:	2280      	movs	r2, #128	@ 0x80
 80076da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076dc:	4b42      	ldr	r3, [pc, #264]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076de:	2200      	movs	r2, #0
 80076e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076e2:	4b41      	ldr	r3, [pc, #260]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80076e8:	4b3f      	ldr	r3, [pc, #252]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80076ee:	4b3e      	ldr	r3, [pc, #248]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80076f4:	4b3c      	ldr	r3, [pc, #240]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 80076f6:	0018      	movs	r0, r3
 80076f8:	f007 fad2 	bl	800eca0 <HAL_DMA_Init>
 80076fc:	1e03      	subs	r3, r0, #0
 80076fe:	d001      	beq.n	8007704 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007700:	f000 fecc 	bl	800849c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a38      	ldr	r2, [pc, #224]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 8007708:	63da      	str	r2, [r3, #60]	@ 0x3c
 800770a:	4b37      	ldr	r3, [pc, #220]	@ (80077e8 <HAL_I2C_MspInit+0x1a0>)
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007710:	4b37      	ldr	r3, [pc, #220]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007712:	4a38      	ldr	r2, [pc, #224]	@ (80077f4 <HAL_I2C_MspInit+0x1ac>)
 8007714:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007716:	4b36      	ldr	r3, [pc, #216]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007718:	2206      	movs	r2, #6
 800771a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800771c:	4b34      	ldr	r3, [pc, #208]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800771e:	2210      	movs	r2, #16
 8007720:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007722:	4b33      	ldr	r3, [pc, #204]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007724:	2200      	movs	r2, #0
 8007726:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007728:	4b31      	ldr	r3, [pc, #196]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800772a:	2280      	movs	r2, #128	@ 0x80
 800772c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800772e:	4b30      	ldr	r3, [pc, #192]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007730:	2200      	movs	r2, #0
 8007732:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007734:	4b2e      	ldr	r3, [pc, #184]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007736:	2200      	movs	r2, #0
 8007738:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800773a:	4b2d      	ldr	r3, [pc, #180]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800773c:	2200      	movs	r2, #0
 800773e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007740:	4b2b      	ldr	r3, [pc, #172]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007742:	2200      	movs	r2, #0
 8007744:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007746:	4b2a      	ldr	r3, [pc, #168]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 8007748:	0018      	movs	r0, r3
 800774a:	f007 faa9 	bl	800eca0 <HAL_DMA_Init>
 800774e:	1e03      	subs	r3, r0, #0
 8007750:	d001      	beq.n	8007756 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007752:	f000 fea3 	bl	800849c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a25      	ldr	r2, [pc, #148]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38
 800775c:	4b24      	ldr	r3, [pc, #144]	@ (80077f0 <HAL_I2C_MspInit+0x1a8>)
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	2017      	movs	r0, #23
 8007768:	f007 fa68 	bl	800ec3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800776c:	2017      	movs	r0, #23
 800776e:	f007 fa7a 	bl	800ec66 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007772:	e02e      	b.n	80077d2 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1f      	ldr	r2, [pc, #124]	@ (80077f8 <HAL_I2C_MspInit+0x1b0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d129      	bne.n	80077d2 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800777e:	4b18      	ldr	r3, [pc, #96]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 8007780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007782:	4b17      	ldr	r3, [pc, #92]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 8007784:	2102      	movs	r1, #2
 8007786:	430a      	orrs	r2, r1
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c
 800778a:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 800778c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778e:	2202      	movs	r2, #2
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007796:	2114      	movs	r1, #20
 8007798:	187b      	adds	r3, r7, r1
 800779a:	22c0      	movs	r2, #192	@ 0xc0
 800779c:	0112      	lsls	r2, r2, #4
 800779e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077a0:	187b      	adds	r3, r7, r1
 80077a2:	2212      	movs	r2, #18
 80077a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a6:	187b      	adds	r3, r7, r1
 80077a8:	2200      	movs	r2, #0
 80077aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ac:	187b      	adds	r3, r7, r1
 80077ae:	2203      	movs	r2, #3
 80077b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80077b2:	187b      	adds	r3, r7, r1
 80077b4:	2206      	movs	r2, #6
 80077b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077b8:	187b      	adds	r3, r7, r1
 80077ba:	4a0a      	ldr	r2, [pc, #40]	@ (80077e4 <HAL_I2C_MspInit+0x19c>)
 80077bc:	0019      	movs	r1, r3
 80077be:	0010      	movs	r0, r2
 80077c0:	f007 fe8a 	bl	800f4d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80077c4:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80077c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077c8:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <HAL_I2C_MspInit+0x198>)
 80077ca:	2180      	movs	r1, #128	@ 0x80
 80077cc:	03c9      	lsls	r1, r1, #15
 80077ce:	430a      	orrs	r2, r1
 80077d0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80077d2:	46c0      	nop			@ (mov r8, r8)
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b00b      	add	sp, #44	@ 0x2c
 80077d8:	bd90      	pop	{r4, r7, pc}
 80077da:	46c0      	nop			@ (mov r8, r8)
 80077dc:	40005400 	.word	0x40005400
 80077e0:	40021000 	.word	0x40021000
 80077e4:	50000400 	.word	0x50000400
 80077e8:	20000e00 	.word	0x20000e00
 80077ec:	40020030 	.word	0x40020030
 80077f0:	20000e48 	.word	0x20000e48
 80077f4:	4002001c 	.word	0x4002001c
 80077f8:	40005800 	.word	0x40005800

080077fc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007800:	4b10      	ldr	r3, [pc, #64]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007802:	4a11      	ldr	r2, [pc, #68]	@ (8007848 <MX_I2S2_Init+0x4c>)
 8007804:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007806:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007808:	22c0      	movs	r2, #192	@ 0xc0
 800780a:	0092      	lsls	r2, r2, #2
 800780c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800780e:	4b0d      	ldr	r3, [pc, #52]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007810:	2200      	movs	r2, #0
 8007812:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007814:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007816:	2203      	movs	r2, #3
 8007818:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800781a:	4b0a      	ldr	r3, [pc, #40]	@ (8007844 <MX_I2S2_Init+0x48>)
 800781c:	2200      	movs	r2, #0
 800781e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007820:	4b08      	ldr	r3, [pc, #32]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007822:	22fa      	movs	r2, #250	@ 0xfa
 8007824:	0192      	lsls	r2, r2, #6
 8007826:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007828:	4b06      	ldr	r3, [pc, #24]	@ (8007844 <MX_I2S2_Init+0x48>)
 800782a:	2200      	movs	r2, #0
 800782c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800782e:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <MX_I2S2_Init+0x48>)
 8007830:	0018      	movs	r0, r3
 8007832:	f00a fc97 	bl	8012164 <HAL_I2S_Init>
 8007836:	1e03      	subs	r3, r0, #0
 8007838:	d001      	beq.n	800783e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800783a:	f000 fe2f 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800783e:	46c0      	nop			@ (mov r8, r8)
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000e90 	.word	0x20000e90
 8007848:	40003800 	.word	0x40003800

0800784c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	b089      	sub	sp, #36	@ 0x24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007854:	240c      	movs	r4, #12
 8007856:	193b      	adds	r3, r7, r4
 8007858:	0018      	movs	r0, r3
 800785a:	2314      	movs	r3, #20
 800785c:	001a      	movs	r2, r3
 800785e:	2100      	movs	r1, #0
 8007860:	f017 ff9c 	bl	801f79c <memset>
  if(i2sHandle->Instance==SPI2)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2d      	ldr	r2, [pc, #180]	@ (8007920 <HAL_I2S_MspInit+0xd4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d154      	bne.n	8007918 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800786e:	4b2d      	ldr	r3, [pc, #180]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 8007870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007872:	4b2c      	ldr	r3, [pc, #176]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 8007874:	2180      	movs	r1, #128	@ 0x80
 8007876:	01c9      	lsls	r1, r1, #7
 8007878:	430a      	orrs	r2, r1
 800787a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800787c:	4b29      	ldr	r3, [pc, #164]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 800787e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 8007882:	2102      	movs	r1, #2
 8007884:	430a      	orrs	r2, r1
 8007886:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007888:	4b26      	ldr	r3, [pc, #152]	@ (8007924 <HAL_I2S_MspInit+0xd8>)
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	2202      	movs	r2, #2
 800788e:	4013      	ands	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007894:	193b      	adds	r3, r7, r4
 8007896:	22b0      	movs	r2, #176	@ 0xb0
 8007898:	0212      	lsls	r2, r2, #8
 800789a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800789c:	0021      	movs	r1, r4
 800789e:	187b      	adds	r3, r7, r1
 80078a0:	2202      	movs	r2, #2
 80078a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a4:	187b      	adds	r3, r7, r1
 80078a6:	2200      	movs	r2, #0
 80078a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078aa:	187b      	adds	r3, r7, r1
 80078ac:	2200      	movs	r2, #0
 80078ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80078b0:	187b      	adds	r3, r7, r1
 80078b2:	2200      	movs	r2, #0
 80078b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078b6:	187b      	adds	r3, r7, r1
 80078b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007928 <HAL_I2S_MspInit+0xdc>)
 80078ba:	0019      	movs	r1, r3
 80078bc:	0010      	movs	r0, r2
 80078be:	f007 fe0b 	bl	800f4d8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80078c2:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007930 <HAL_I2S_MspInit+0xe4>)
 80078c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80078c8:	4b18      	ldr	r3, [pc, #96]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078ca:	2202      	movs	r2, #2
 80078cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078ce:	4b17      	ldr	r3, [pc, #92]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078d4:	4b15      	ldr	r3, [pc, #84]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078da:	4b14      	ldr	r3, [pc, #80]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078dc:	2280      	movs	r2, #128	@ 0x80
 80078de:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80078e0:	4b12      	ldr	r3, [pc, #72]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078e2:	2280      	movs	r2, #128	@ 0x80
 80078e4:	0052      	lsls	r2, r2, #1
 80078e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80078e8:	4b10      	ldr	r3, [pc, #64]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078ea:	2280      	movs	r2, #128	@ 0x80
 80078ec:	00d2      	lsls	r2, r2, #3
 80078ee:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80078f0:	4b0e      	ldr	r3, [pc, #56]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078f2:	2220      	movs	r2, #32
 80078f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078f6:	4b0d      	ldr	r3, [pc, #52]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80078fc:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 80078fe:	0018      	movs	r0, r3
 8007900:	f007 f9ce 	bl	800eca0 <HAL_DMA_Init>
 8007904:	1e03      	subs	r3, r0, #0
 8007906:	d001      	beq.n	800790c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007908:	f000 fdc8 	bl	800849c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a07      	ldr	r2, [pc, #28]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 8007910:	631a      	str	r2, [r3, #48]	@ 0x30
 8007912:	4b06      	ldr	r3, [pc, #24]	@ (800792c <HAL_I2S_MspInit+0xe0>)
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007918:	46c0      	nop			@ (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b009      	add	sp, #36	@ 0x24
 800791e:	bd90      	pop	{r4, r7, pc}
 8007920:	40003800 	.word	0x40003800
 8007924:	40021000 	.word	0x40021000
 8007928:	50000400 	.word	0x50000400
 800792c:	20000ecc 	.word	0x20000ecc
 8007930:	40020044 	.word	0x40020044

08007934 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  testDone = true;
 8007938:	4b1e      	ldr	r3, [pc, #120]	@ (80079b4 <SetTestDone+0x80>)
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 800793e:	23fa      	movs	r3, #250	@ 0xfa
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	0018      	movs	r0, r3
 8007944:	f006 fcf2 	bl	800e32c <HAL_Delay>
  SetDBLED(false, false, true);
 8007948:	2201      	movs	r2, #1
 800794a:	2100      	movs	r1, #0
 800794c:	2000      	movs	r0, #0
 800794e:	f005 f8c3 	bl	800cad8 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007952:	4a19      	ldr	r2, [pc, #100]	@ (80079b8 <SetTestDone+0x84>)
 8007954:	23fa      	movs	r3, #250	@ 0xfa
 8007956:	0119      	lsls	r1, r3, #4
 8007958:	23fa      	movs	r3, #250	@ 0xfa
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	0018      	movs	r0, r3
 800795e:	f005 f887 	bl	800ca70 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007962:	4a15      	ldr	r2, [pc, #84]	@ (80079b8 <SetTestDone+0x84>)
 8007964:	23fa      	movs	r3, #250	@ 0xfa
 8007966:	0119      	lsls	r1, r3, #4
 8007968:	23fa      	movs	r3, #250	@ 0xfa
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	0018      	movs	r0, r3
 800796e:	f005 f8fd 	bl	800cb6c <SetVocLED>
  HAL_Delay(1000);
 8007972:	23fa      	movs	r3, #250	@ 0xfa
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	0018      	movs	r0, r3
 8007978:	f006 fcd8 	bl	800e32c <HAL_Delay>
  SetDBLED(false, false, false);
 800797c:	2200      	movs	r2, #0
 800797e:	2100      	movs	r1, #0
 8007980:	2000      	movs	r0, #0
 8007982:	f005 f8a9 	bl	800cad8 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007986:	23fa      	movs	r3, #250	@ 0xfa
 8007988:	011a      	lsls	r2, r3, #4
 800798a:	23fa      	movs	r3, #250	@ 0xfa
 800798c:	0119      	lsls	r1, r3, #4
 800798e:	23fa      	movs	r3, #250	@ 0xfa
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	0018      	movs	r0, r3
 8007994:	f005 f86c 	bl	800ca70 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007998:	23fa      	movs	r3, #250	@ 0xfa
 800799a:	011a      	lsls	r2, r3, #4
 800799c:	23fa      	movs	r3, #250	@ 0xfa
 800799e:	0119      	lsls	r1, r3, #4
 80079a0:	23fa      	movs	r3, #250	@ 0xfa
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	0018      	movs	r0, r3
 80079a6:	f005 f8e1 	bl	800cb6c <SetVocLED>
  InitDone();
 80079aa:	f004 fffd 	bl	800c9a8 <InitDone>
}
 80079ae:	46c0      	nop			@ (mov r8, r8)
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000f14 	.word	0x20000f14
 80079b8:	00000bb8 	.word	0x00000bb8

080079bc <FlashLEDs>:

void FlashLEDs(){
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 80079c2:	1dfb      	adds	r3, r7, #7
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	e021      	b.n	8007a0e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 80079ca:	2201      	movs	r2, #1
 80079cc:	2101      	movs	r1, #1
 80079ce:	2001      	movs	r0, #1
 80079d0:	f005 f882 	bl	800cad8 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 80079d4:	4a12      	ldr	r2, [pc, #72]	@ (8007a20 <FlashLEDs+0x64>)
 80079d6:	23fa      	movs	r3, #250	@ 0xfa
 80079d8:	0119      	lsls	r1, r3, #4
 80079da:	23fa      	movs	r3, #250	@ 0xfa
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	0018      	movs	r0, r3
 80079e0:	f005 f846 	bl	800ca70 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 80079e4:	4a0e      	ldr	r2, [pc, #56]	@ (8007a20 <FlashLEDs+0x64>)
 80079e6:	23fa      	movs	r3, #250	@ 0xfa
 80079e8:	0119      	lsls	r1, r3, #4
 80079ea:	23fa      	movs	r3, #250	@ 0xfa
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	0018      	movs	r0, r3
 80079f0:	f005 f8bc 	bl	800cb6c <SetVocLED>
    HAL_Delay(250);
 80079f4:	20fa      	movs	r0, #250	@ 0xfa
 80079f6:	f006 fc99 	bl	800e32c <HAL_Delay>
    SetLEDsOff();
 80079fa:	f005 f9ad 	bl	800cd58 <SetLEDsOff>
    HAL_Delay(250);
 80079fe:	20fa      	movs	r0, #250	@ 0xfa
 8007a00:	f006 fc94 	bl	800e32c <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007a04:	1dfb      	adds	r3, r7, #7
 8007a06:	781a      	ldrb	r2, [r3, #0]
 8007a08:	1dfb      	adds	r3, r7, #7
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	1dfb      	adds	r3, r7, #7
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b04      	cmp	r3, #4
 8007a14:	d9d9      	bls.n	80079ca <FlashLEDs+0xe>
  }
}
 8007a16:	46c0      	nop			@ (mov r8, r8)
 8007a18:	46c0      	nop			@ (mov r8, r8)
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	b002      	add	sp, #8
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	00000bb8 	.word	0x00000bb8

08007a24 <testInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void testInit(){
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8007a28:	4b08      	ldr	r3, [pc, #32]	@ (8007a4c <testInit+0x28>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8007a2e:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <testInit+0x28>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8007a34:	4b05      	ldr	r3, [pc, #20]	@ (8007a4c <testInit+0x28>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8007a3a:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <testInit+0x28>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8007a40:	4b02      	ldr	r3, [pc, #8]	@ (8007a4c <testInit+0x28>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	711a      	strb	r2, [r3, #4]
}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000f34 	.word	0x20000f34

08007a50 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8007a54:	4b02      	ldr	r3, [pc, #8]	@ (8007a60 <GetPMSensorPresence+0x10>)
 8007a56:	789b      	ldrb	r3, [r3, #2]
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	20000f34 	.word	0x20000f34

08007a64 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8007a68:	4b02      	ldr	r3, [pc, #8]	@ (8007a74 <IsPMSensorEnabled+0x10>)
 8007a6a:	789b      	ldrb	r3, [r3, #2]
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	46c0      	nop			@ (mov r8, r8)
 8007a74:	2000007c 	.word	0x2000007c

08007a78 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8007a7c:	4b02      	ldr	r3, [pc, #8]	@ (8007a88 <SetESPMeasurementDone+0x10>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	711a      	strb	r2, [r3, #4]
}
 8007a82:	46c0      	nop			@ (mov r8, r8)
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000f34 	.word	0x20000f34

08007a8c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
  testInit();
 8007a9a:	f7ff ffc3 	bl	8007a24 <testInit>
  I2CSensors_Init(sensorI2C);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7fe f89b 	bl	8005bdc <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 8007aa6:	f006 fa13 	bl	800ded0 <HIDS_DeviceConnected>
 8007aaa:	0003      	movs	r3, r0
 8007aac:	001a      	movs	r2, r3
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4053      	eors	r3, r2
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00c      	beq.n	8007ad2 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8007ab8:	4a72      	ldr	r2, [pc, #456]	@ (8007c84 <Device_Init+0x1f8>)
 8007aba:	4b73      	ldr	r3, [pc, #460]	@ (8007c88 <Device_Init+0x1fc>)
 8007abc:	0019      	movs	r1, r3
 8007abe:	2001      	movs	r0, #1
 8007ac0:	f005 ffde 	bl	800da80 <CreateLine>
     SensorProbe.HT_Present = false;
 8007ac4:	4b71      	ldr	r3, [pc, #452]	@ (8007c8c <Device_Init+0x200>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8007aca:	4b71      	ldr	r3, [pc, #452]	@ (8007c90 <Device_Init+0x204>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e008      	b.n	8007ae4 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8007ad2:	4b6e      	ldr	r3, [pc, #440]	@ (8007c8c <Device_Init+0x200>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8007ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8007c94 <Device_Init+0x208>)
 8007ada:	4b6f      	ldr	r3, [pc, #444]	@ (8007c98 <Device_Init+0x20c>)
 8007adc:	0019      	movs	r1, r3
 8007ade:	2003      	movs	r0, #3
 8007ae0:	f005 ffce 	bl	800da80 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8007ae4:	f003 fd42 	bl	800b56c <SGP_DeviceConnected>
 8007ae8:	0003      	movs	r3, r0
 8007aea:	001a      	movs	r2, r3
 8007aec:	2301      	movs	r3, #1
 8007aee:	4053      	eors	r3, r2
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8007af6:	4b65      	ldr	r3, [pc, #404]	@ (8007c8c <Device_Init+0x200>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8007afc:	4a67      	ldr	r2, [pc, #412]	@ (8007c9c <Device_Init+0x210>)
 8007afe:	4b62      	ldr	r3, [pc, #392]	@ (8007c88 <Device_Init+0x1fc>)
 8007b00:	0019      	movs	r1, r3
 8007b02:	2001      	movs	r0, #1
 8007b04:	f005 ffbc 	bl	800da80 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8007b08:	4b61      	ldr	r3, [pc, #388]	@ (8007c90 <Device_Init+0x204>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	705a      	strb	r2, [r3, #1]
 8007b0e:	e008      	b.n	8007b22 <Device_Init+0x96>
  }
  else{
    SensorProbe.VOC_Present = true;
 8007b10:	4b5e      	ldr	r3, [pc, #376]	@ (8007c8c <Device_Init+0x200>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8007b16:	4a62      	ldr	r2, [pc, #392]	@ (8007ca0 <Device_Init+0x214>)
 8007b18:	4b5f      	ldr	r3, [pc, #380]	@ (8007c98 <Device_Init+0x20c>)
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	2003      	movs	r0, #3
 8007b1e:	f005 ffaf 	bl	800da80 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8007b22:	4b5a      	ldr	r3, [pc, #360]	@ (8007c8c <Device_Init+0x200>)
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <Device_Init+0xb2>
 8007b2a:	4b58      	ldr	r3, [pc, #352]	@ (8007c8c <Device_Init+0x200>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <Device_Init+0xb2>
    SetDBLED(false, true, false);
 8007b32:	2200      	movs	r2, #0
 8007b34:	2101      	movs	r1, #1
 8007b36:	2000      	movs	r0, #0
 8007b38:	f004 ffce 	bl	800cad8 <SetDBLED>
 8007b3c:	e018      	b.n	8007b70 <Device_Init+0xe4>
  }
  else{
    SetDBLED(true, false, false);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	2001      	movs	r0, #1
 8007b44:	f004 ffc8 	bl	800cad8 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8007b48:	4b56      	ldr	r3, [pc, #344]	@ (8007ca4 <Device_Init+0x218>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f007 fe5d 	bl	800f80e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8007b54:	2380      	movs	r3, #128	@ 0x80
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4852      	ldr	r0, [pc, #328]	@ (8007ca4 <Device_Init+0x218>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	f007 fe56 	bl	800f80e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007b62:	2380      	movs	r3, #128	@ 0x80
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	484f      	ldr	r0, [pc, #316]	@ (8007ca4 <Device_Init+0x218>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	f007 fe4f 	bl	800f80e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 8007b70:	4b47      	ldr	r3, [pc, #284]	@ (8007c90 <Device_Init+0x204>)
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d028      	beq.n	8007bca <Device_Init+0x13e>
    Info("Device_Init calls enableMicrophone");
 8007b78:	4a4b      	ldr	r2, [pc, #300]	@ (8007ca8 <Device_Init+0x21c>)
 8007b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007cac <Device_Init+0x220>)
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	2002      	movs	r0, #2
 8007b80:	f005 ff7e 	bl	800da80 <CreateLine>
    if (!enableMicrophone(true)) {
 8007b84:	2001      	movs	r0, #1
 8007b86:	f004 f8ed 	bl	800bd64 <enableMicrophone>
 8007b8a:	0003      	movs	r3, r0
 8007b8c:	001a      	movs	r2, r3
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4053      	eors	r3, r2
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00c      	beq.n	8007bb2 <Device_Init+0x126>
      Error("Microphone device not connected! DMA Error.");
 8007b98:	4a45      	ldr	r2, [pc, #276]	@ (8007cb0 <Device_Init+0x224>)
 8007b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c88 <Device_Init+0x1fc>)
 8007b9c:	0019      	movs	r1, r3
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f005 ff6e 	bl	800da80 <CreateLine>
      SensorProbe.MIC_Present = false;
 8007ba4:	4b39      	ldr	r3, [pc, #228]	@ (8007c8c <Device_Init+0x200>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8007baa:	4b39      	ldr	r3, [pc, #228]	@ (8007c90 <Device_Init+0x204>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	70da      	strb	r2, [r3, #3]
 8007bb0:	e00b      	b.n	8007bca <Device_Init+0x13e>
    }
    else{
      SensorProbe.MIC_Present = true;
 8007bb2:	4b36      	ldr	r3, [pc, #216]	@ (8007c8c <Device_Init+0x200>)
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8007bb8:	4b35      	ldr	r3, [pc, #212]	@ (8007c90 <Device_Init+0x204>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8007bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8007cb4 <Device_Init+0x228>)
 8007bc0:	4b35      	ldr	r3, [pc, #212]	@ (8007c98 <Device_Init+0x20c>)
 8007bc2:	0019      	movs	r1, r3
 8007bc4:	2003      	movs	r0, #3
 8007bc6:	f005 ff5b 	bl	800da80 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8007bca:	f001 f8ad 	bl	8008d28 <probe_sen5x>
 8007bce:	1e03      	subs	r3, r0, #0
 8007bd0:	d10c      	bne.n	8007bec <Device_Init+0x160>
    Debug("PM sensor initialised.");
 8007bd2:	4a39      	ldr	r2, [pc, #228]	@ (8007cb8 <Device_Init+0x22c>)
 8007bd4:	4b30      	ldr	r3, [pc, #192]	@ (8007c98 <Device_Init+0x20c>)
 8007bd6:	0019      	movs	r1, r3
 8007bd8:	2003      	movs	r0, #3
 8007bda:	f005 ff51 	bl	800da80 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8007bde:	4b2b      	ldr	r3, [pc, #172]	@ (8007c8c <Device_Init+0x200>)
 8007be0:	2201      	movs	r2, #1
 8007be2:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8007be4:	4b2a      	ldr	r3, [pc, #168]	@ (8007c90 <Device_Init+0x204>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	709a      	strb	r2, [r3, #2]
 8007bea:	e00d      	b.n	8007c08 <Device_Init+0x17c>
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8007bec:	f001 f874 	bl	8008cd8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8007bf0:	4a32      	ldr	r2, [pc, #200]	@ (8007cbc <Device_Init+0x230>)
 8007bf2:	4b29      	ldr	r3, [pc, #164]	@ (8007c98 <Device_Init+0x20c>)
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	2003      	movs	r0, #3
 8007bf8:	f005 ff42 	bl	800da80 <CreateLine>
    SensorProbe.MIC_Present = false;
 8007bfc:	4b23      	ldr	r3, [pc, #140]	@ (8007c8c <Device_Init+0x200>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	70da      	strb	r2, [r3, #3]
    Sensor.PM_measurementEnabled = false;
 8007c02:	4b23      	ldr	r3, [pc, #140]	@ (8007c90 <Device_Init+0x204>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8007c08:	4b20      	ldr	r3, [pc, #128]	@ (8007c8c <Device_Init+0x200>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <Device_Init+0x188>
 8007c10:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc0 <Device_Init+0x234>)
 8007c12:	e000      	b.n	8007c16 <Device_Init+0x18a>
 8007c14:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc4 <Device_Init+0x238>)
 8007c16:	4a2c      	ldr	r2, [pc, #176]	@ (8007cc8 <Device_Init+0x23c>)
 8007c18:	4924      	ldr	r1, [pc, #144]	@ (8007cac <Device_Init+0x220>)
 8007c1a:	2002      	movs	r0, #2
 8007c1c:	f005 ff30 	bl	800da80 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8007c20:	4b1a      	ldr	r3, [pc, #104]	@ (8007c8c <Device_Init+0x200>)
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <Device_Init+0x1a0>
 8007c28:	4b25      	ldr	r3, [pc, #148]	@ (8007cc0 <Device_Init+0x234>)
 8007c2a:	e000      	b.n	8007c2e <Device_Init+0x1a2>
 8007c2c:	4b25      	ldr	r3, [pc, #148]	@ (8007cc4 <Device_Init+0x238>)
 8007c2e:	4a27      	ldr	r2, [pc, #156]	@ (8007ccc <Device_Init+0x240>)
 8007c30:	491e      	ldr	r1, [pc, #120]	@ (8007cac <Device_Init+0x220>)
 8007c32:	2002      	movs	r0, #2
 8007c34:	f005 ff24 	bl	800da80 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 8007c38:	4b14      	ldr	r3, [pc, #80]	@ (8007c8c <Device_Init+0x200>)
 8007c3a:	789b      	ldrb	r3, [r3, #2]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <Device_Init+0x1b8>
 8007c40:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc0 <Device_Init+0x234>)
 8007c42:	e000      	b.n	8007c46 <Device_Init+0x1ba>
 8007c44:	4b1f      	ldr	r3, [pc, #124]	@ (8007cc4 <Device_Init+0x238>)
 8007c46:	4a22      	ldr	r2, [pc, #136]	@ (8007cd0 <Device_Init+0x244>)
 8007c48:	4918      	ldr	r1, [pc, #96]	@ (8007cac <Device_Init+0x220>)
 8007c4a:	2002      	movs	r0, #2
 8007c4c:	f005 ff18 	bl	800da80 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8007c50:	4b0e      	ldr	r3, [pc, #56]	@ (8007c8c <Device_Init+0x200>)
 8007c52:	78db      	ldrb	r3, [r3, #3]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <Device_Init+0x1d0>
 8007c58:	4b19      	ldr	r3, [pc, #100]	@ (8007cc0 <Device_Init+0x234>)
 8007c5a:	e000      	b.n	8007c5e <Device_Init+0x1d2>
 8007c5c:	4b19      	ldr	r3, [pc, #100]	@ (8007cc4 <Device_Init+0x238>)
 8007c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd4 <Device_Init+0x248>)
 8007c60:	4912      	ldr	r1, [pc, #72]	@ (8007cac <Device_Init+0x220>)
 8007c62:	2002      	movs	r0, #2
 8007c64:	f005 ff0c 	bl	800da80 <CreateLine>
  ESP_Init(espUart);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	0018      	movs	r0, r3
 8007c6c:	f7fb fec8 	bl	8003a00 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8007c70:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <Device_Init+0x24c>)
 8007c72:	4b09      	ldr	r3, [pc, #36]	@ (8007c98 <Device_Init+0x20c>)
 8007c74:	0019      	movs	r1, r3
 8007c76:	2003      	movs	r0, #3
 8007c78:	f005 ff02 	bl	800da80 <CreateLine>
}
 8007c7c:	46c0      	nop			@ (mov r8, r8)
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b004      	add	sp, #16
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	08023404 	.word	0x08023404
 8007c88:	08023434 	.word	0x08023434
 8007c8c:	20000f34 	.word	0x20000f34
 8007c90:	2000007c 	.word	0x2000007c
 8007c94:	08023438 	.word	0x08023438
 8007c98:	08023464 	.word	0x08023464
 8007c9c:	08023468 	.word	0x08023468
 8007ca0:	08023484 	.word	0x08023484
 8007ca4:	50000400 	.word	0x50000400
 8007ca8:	0802349c 	.word	0x0802349c
 8007cac:	080234c0 	.word	0x080234c0
 8007cb0:	080234c4 	.word	0x080234c4
 8007cb4:	080234f0 	.word	0x080234f0
 8007cb8:	0802351c 	.word	0x0802351c
 8007cbc:	08023534 	.word	0x08023534
 8007cc0:	08023558 	.word	0x08023558
 8007cc4:	0802355c 	.word	0x0802355c
 8007cc8:	08023560 	.word	0x08023560
 8007ccc:	0802357c 	.word	0x0802357c
 8007cd0:	08023598 	.word	0x08023598
 8007cd4:	080235b4 	.word	0x080235b4
 8007cd8:	080235d0 	.word	0x080235d0

08007cdc <Device_Test>:

void Device_Test(){
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8007ce0:	4b31      	ldr	r3, [pc, #196]	@ (8007da8 <Device_Test+0xcc>)
 8007ce2:	78db      	ldrb	r3, [r3, #3]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4053      	eors	r3, r2
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d021      	beq.n	8007d32 <Device_Test+0x56>
    if(MIC_TestMeasurementDone()){
 8007cee:	f000 fd71 	bl	80087d4 <MIC_TestMeasurementDone>
 8007cf2:	1e03      	subs	r3, r0, #0
 8007cf4:	d00e      	beq.n	8007d14 <Device_Test+0x38>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007da8 <Device_Test+0xcc>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8007cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8007dac <Device_Test+0xd0>)
 8007cfe:	2201      	movs	r2, #1
 8007d00:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007d02:	23fa      	movs	r3, #250	@ 0xfa
 8007d04:	011a      	lsls	r2, r3, #4
 8007d06:	492a      	ldr	r1, [pc, #168]	@ (8007db0 <Device_Test+0xd4>)
 8007d08:	23fa      	movs	r3, #250	@ 0xfa
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f004 feaf 	bl	800ca70 <SetStatusLED>
 8007d12:	e00e      	b.n	8007d32 <Device_Test+0x56>
    }
    else{
      if (micSettlingComplete()) {
 8007d14:	f004 f802 	bl	800bd1c <micSettlingComplete>
 8007d18:	1e03      	subs	r3, r0, #0
 8007d1a:	d00a      	beq.n	8007d32 <Device_Test+0x56>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 8007d1c:	4b23      	ldr	r3, [pc, #140]	@ (8007dac <Device_Test+0xd0>)
 8007d1e:	2201      	movs	r2, #1
 8007d20:	70da      	strb	r2, [r3, #3]
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007d22:	23fa      	movs	r3, #250	@ 0xfa
 8007d24:	011a      	lsls	r2, r3, #4
 8007d26:	23fa      	movs	r3, #250	@ 0xfa
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	4821      	ldr	r0, [pc, #132]	@ (8007db0 <Device_Test+0xd4>)
 8007d2c:	0019      	movs	r1, r3
 8007d2e:	f004 fe9f 	bl	800ca70 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <Device_Test+0xcc>)
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	4053      	eors	r3, r2
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <Device_Test+0x68>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 8007d40:	f7fd f9c8 	bl	80050d4 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8007d44:	4b18      	ldr	r3, [pc, #96]	@ (8007da8 <Device_Test+0xcc>)
 8007d46:	791b      	ldrb	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <Device_Test+0x78>
 8007d4c:	4b16      	ldr	r3, [pc, #88]	@ (8007da8 <Device_Test+0xcc>)
 8007d4e:	78db      	ldrb	r3, [r3, #3]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <Device_Test+0x86>
 8007d54:	4b17      	ldr	r3, [pc, #92]	@ (8007db4 <Device_Test+0xd8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f005 fe3b 	bl	800d9d4 <TimestampIsReached>
 8007d5e:	1e03      	subs	r3, r0, #0
 8007d60:	d01f      	beq.n	8007da2 <Device_Test+0xc6>
    Info("Test completed");
 8007d62:	4a15      	ldr	r2, [pc, #84]	@ (8007db8 <Device_Test+0xdc>)
 8007d64:	4b15      	ldr	r3, [pc, #84]	@ (8007dbc <Device_Test+0xe0>)
 8007d66:	0019      	movs	r1, r3
 8007d68:	2002      	movs	r0, #2
 8007d6a:	f005 fe89 	bl	800da80 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007da8 <Device_Test+0xcc>)
 8007d70:	791b      	ldrb	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <Device_Test+0x9e>
 8007d76:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <Device_Test+0xe4>)
 8007d78:	e000      	b.n	8007d7c <Device_Test+0xa0>
 8007d7a:	4b12      	ldr	r3, [pc, #72]	@ (8007dc4 <Device_Test+0xe8>)
 8007d7c:	4a12      	ldr	r2, [pc, #72]	@ (8007dc8 <Device_Test+0xec>)
 8007d7e:	490f      	ldr	r1, [pc, #60]	@ (8007dbc <Device_Test+0xe0>)
 8007d80:	2002      	movs	r0, #2
 8007d82:	f005 fe7d 	bl	800da80 <CreateLine>
    Info("MIC function:%s", SensorProbe.MIC_Present?"passed": "failed");
 8007d86:	4b08      	ldr	r3, [pc, #32]	@ (8007da8 <Device_Test+0xcc>)
 8007d88:	78db      	ldrb	r3, [r3, #3]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <Device_Test+0xb6>
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <Device_Test+0xe4>)
 8007d90:	e000      	b.n	8007d94 <Device_Test+0xb8>
 8007d92:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc4 <Device_Test+0xe8>)
 8007d94:	4a0d      	ldr	r2, [pc, #52]	@ (8007dcc <Device_Test+0xf0>)
 8007d96:	4909      	ldr	r1, [pc, #36]	@ (8007dbc <Device_Test+0xe0>)
 8007d98:	2002      	movs	r0, #2
 8007d9a:	f005 fe71 	bl	800da80 <CreateLine>
    SetTestDone();
 8007d9e:	f7ff fdc9 	bl	8007934 <SetTestDone>
  }
}
 8007da2:	46c0      	nop			@ (mov r8, r8)
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20000f34 	.word	0x20000f34
 8007dac:	2000007c 	.word	0x2000007c
 8007db0:	00000bb8 	.word	0x00000bb8
 8007db4:	20000f2c 	.word	0x20000f2c
 8007db8:	080235f4 	.word	0x080235f4
 8007dbc:	080234c0 	.word	0x080234c0
 8007dc0:	08023604 	.word	0x08023604
 8007dc4:	0802360c 	.word	0x0802360c
 8007dc8:	08023614 	.word	0x08023614
 8007dcc:	08023628 	.word	0x08023628

08007dd0 <AllDevicesReady>:

bool AllDevicesReady() {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8007dd4:	4b27      	ldr	r3, [pc, #156]	@ (8007e74 <AllDevicesReady+0xa4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f005 fdfb 	bl	800d9d4 <TimestampIsReached>
 8007dde:	1e03      	subs	r3, r0, #0
 8007de0:	d043      	beq.n	8007e6a <AllDevicesReady+0x9a>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8007de2:	4b25      	ldr	r3, [pc, #148]	@ (8007e78 <AllDevicesReady+0xa8>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b06      	cmp	r3, #6
 8007de8:	d102      	bne.n	8007df0 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8007dea:	4b24      	ldr	r3, [pc, #144]	@ (8007e7c <AllDevicesReady+0xac>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
    }
    if (SGPstate == SGP_STATE_WAIT) {
 8007df0:	4b23      	ldr	r3, [pc, #140]	@ (8007e80 <AllDevicesReady+0xb0>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b06      	cmp	r3, #6
 8007df6:	d102      	bne.n	8007dfe <AllDevicesReady+0x2e>
      Sensor.VOC_measurementEnabled = false;
 8007df8:	4b20      	ldr	r3, [pc, #128]	@ (8007e7c <AllDevicesReady+0xac>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8007dfe:	4b21      	ldr	r3, [pc, #132]	@ (8007e84 <AllDevicesReady+0xb4>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d102      	bne.n	8007e0c <AllDevicesReady+0x3c>
      Sensor.PM_measurementEnabled = false;
 8007e06:	4b1d      	ldr	r3, [pc, #116]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	709a      	strb	r2, [r3, #2]
    }
    if (mic_Status == MIC_STATE_WAIT){
 8007e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8007e88 <AllDevicesReady+0xb8>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d102      	bne.n	8007e1a <AllDevicesReady+0x4a>
      Sensor.MIC_measurementEnabled = false;
 8007e14:	4b19      	ldr	r3, [pc, #100]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	70da      	strb	r2, [r3, #3]
    }
    if (ESP_Status == ESP_STATE_RESET) {
 8007e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007e8c <AllDevicesReady+0xbc>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d123      	bne.n	8007e6a <AllDevicesReady+0x9a>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007e22:	4b16      	ldr	r3, [pc, #88]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2201      	movs	r2, #1
 8007e28:	4053      	eors	r3, r2
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d016      	beq.n	8007e5e <AllDevicesReady+0x8e>
 8007e30:	4b12      	ldr	r3, [pc, #72]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2201      	movs	r2, #1
 8007e36:	4053      	eors	r3, r2
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00f      	beq.n	8007e5e <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e40:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007e42:	2201      	movs	r2, #1
 8007e44:	4053      	eors	r3, r2
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e7c <AllDevicesReady+0xac>)
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	2201      	movs	r2, #1
 8007e52:	4053      	eors	r3, r2
 8007e54:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <AllDevicesReady+0x8e>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <AllDevicesReady+0x90>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	1c1a      	adds	r2, r3, #0
 8007e62:	2301      	movs	r3, #1
 8007e64:	4013      	ands	r3, r2
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	e000      	b.n	8007e6c <AllDevicesReady+0x9c>
    }
  }
  return false;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	46c0      	nop			@ (mov r8, r8)
 8007e74:	20000f2c 	.word	0x20000f2c
 8007e78:	20000f18 	.word	0x20000f18
 8007e7c:	2000007c 	.word	0x2000007c
 8007e80:	20000f17 	.word	0x20000f17
 8007e84:	20000081 	.word	0x20000081
 8007e88:	20000f3b 	.word	0x20000f3b
 8007e8c:	20000f3a 	.word	0x20000f3a

08007e90 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8007e94:	4b0f      	ldr	r3, [pc, #60]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.VOC_Present) {
 8007ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <EnabledConnectedDevices+0x20>
    Sensor.VOC_measurementEnabled = true;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8007eb0:	4b08      	ldr	r3, [pc, #32]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007eb2:	789b      	ldrb	r3, [r3, #2]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d002      	beq.n	8007ebe <EnabledConnectedDevices+0x2e>
    Sensor.PM_measurementEnabled = true;
 8007eb8:	4b07      	ldr	r3, [pc, #28]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007eba:	2201      	movs	r2, #1
 8007ebc:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8007ebe:	4b05      	ldr	r3, [pc, #20]	@ (8007ed4 <EnabledConnectedDevices+0x44>)
 8007ec0:	78db      	ldrb	r3, [r3, #3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <EnabledConnectedDevices+0x3c>
    Sensor.MIC_measurementEnabled = true;
 8007ec6:	4b04      	ldr	r3, [pc, #16]	@ (8007ed8 <EnabledConnectedDevices+0x48>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	70da      	strb	r2, [r3, #3]
  }
}
 8007ecc:	46c0      	nop			@ (mov r8, r8)
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	46c0      	nop			@ (mov r8, r8)
 8007ed4:	20000f34 	.word	0x20000f34
 8007ed8:	2000007c 	.word	0x2000007c

08007edc <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
    Sensor.HT_measurementEnabled = false;
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
    Sensor.VOC_measurementEnabled = false;
 8007ee6:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	705a      	strb	r2, [r3, #1]
    Sensor.PM_measurementEnabled = false;
 8007eec:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	709a      	strb	r2, [r3, #2]
    Sensor.MIC_measurementEnabled = false;
 8007ef2:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <DisableConnectedDevices+0x24>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	70da      	strb	r2, [r3, #3]
}
 8007ef8:	46c0      	nop			@ (mov r8, r8)
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	46c0      	nop			@ (mov r8, r8)
 8007f00:	2000007c 	.word	0x2000007c

08007f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f08:	f006 f9a0 	bl	800e24c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f0c:	f000 f97c 	bl	8008208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f10:	f7ff f99c 	bl	800724c <MX_GPIO_Init>
  MX_DMA_Init();
 8007f14:	f7ff f86a 	bl	8006fec <MX_DMA_Init>
  MX_I2C1_Init();
 8007f18:	f7ff fb16 	bl	8007548 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007f1c:	f7ff fc6e 	bl	80077fc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007f20:	f005 fbbc 	bl	800d69c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007f24:	f7ff fb50 	bl	80075c8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007f28:	f005 f9b0 	bl	800d28c <MX_TIM2_Init>
  MX_TIM3_Init();
 8007f2c:	f005 fa22 	bl	800d374 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007f30:	f005 fbe8 	bl	800d704 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007f34:	f7fe ffa8 	bl	8006e88 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007f38:	f014 f93e 	bl	801c1b8 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007f3c:	f000 fdb0 	bl	8008aa0 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007f40:	f005 fb76 	bl	800d630 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007f44:	f005 fa94 	bl	800d470 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007f48:	4a8c      	ldr	r2, [pc, #560]	@ (800817c <main+0x278>)
 8007f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8008180 <main+0x27c>)
 8007f4c:	0011      	movs	r1, r2
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7ff faac 	bl	80074ac <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007f54:	f7fe f9ac 	bl	80062b0 <UserButton_Pressed>
 8007f58:	1e03      	subs	r3, r0, #0
 8007f5a:	d004      	beq.n	8007f66 <main+0x62>
    EnableESPProg();
 8007f5c:	f014 f9fc 	bl	801c358 <EnableESPProg>
    ESP_Programming = true;
 8007f60:	4b88      	ldr	r3, [pc, #544]	@ (8008184 <main+0x280>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007f66:	2003      	movs	r0, #3
 8007f68:	f005 fdf4 	bl	800db54 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007f6c:	f005 fe02 	bl	800db74 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007f70:	4985      	ldr	r1, [pc, #532]	@ (8008188 <main+0x284>)
 8007f72:	4b86      	ldr	r3, [pc, #536]	@ (800818c <main+0x288>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	0018      	movs	r0, r3
 8007f78:	f00e fc84 	bl	8016884 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007f7c:	4b84      	ldr	r3, [pc, #528]	@ (8008190 <main+0x28c>)
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f7fe fd88 	bl	8006a94 <InitClock>
  Debug("Clock init done");
 8007f84:	4a83      	ldr	r2, [pc, #524]	@ (8008194 <main+0x290>)
 8007f86:	4b84      	ldr	r3, [pc, #528]	@ (8008198 <main+0x294>)
 8007f88:	0019      	movs	r1, r3
 8007f8a:	2003      	movs	r0, #3
 8007f8c:	f005 fd78 	bl	800da80 <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007f90:	4a82      	ldr	r2, [pc, #520]	@ (800819c <main+0x298>)
 8007f92:	4983      	ldr	r1, [pc, #524]	@ (80081a0 <main+0x29c>)
 8007f94:	4883      	ldr	r0, [pc, #524]	@ (80081a4 <main+0x2a0>)
 8007f96:	230b      	movs	r3, #11
 8007f98:	f003 fe7c 	bl	800bc94 <soundInit>
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4053      	eors	r3, r2
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d006      	beq.n	8007fb8 <main+0xb4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007faa:	4a7f      	ldr	r2, [pc, #508]	@ (80081a8 <main+0x2a4>)
 8007fac:	23de      	movs	r3, #222	@ 0xde
 8007fae:	0059      	lsls	r1, r3, #1
 8007fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80081ac <main+0x2a8>)
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f005 fe12 	bl	800dbdc <errorHandler>
  }

//  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007fb8:	4b7d      	ldr	r3, [pc, #500]	@ (80081b0 <main+0x2ac>)
 8007fba:	4a7e      	ldr	r2, [pc, #504]	@ (80081b4 <main+0x2b0>)
 8007fbc:	4978      	ldr	r1, [pc, #480]	@ (80081a0 <main+0x29c>)
 8007fbe:	487e      	ldr	r0, [pc, #504]	@ (80081b8 <main+0x2b4>)
 8007fc0:	f7ff fd64 	bl	8007a8c <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007fc4:	f006 f9a8 	bl	800e318 <HAL_GetTick>
 8007fc8:	0003      	movs	r3, r0
 8007fca:	4a7c      	ldr	r2, [pc, #496]	@ (80081bc <main+0x2b8>)
 8007fcc:	189a      	adds	r2, r3, r2
 8007fce:	4b7c      	ldr	r3, [pc, #496]	@ (80081c0 <main+0x2bc>)
 8007fd0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80081c4 <main+0x2c0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f005 fcfc 	bl	800d9d4 <TimestampIsReached>
 8007fdc:	1e03      	subs	r3, r0, #0
 8007fde:	d00e      	beq.n	8007ffe <main+0xfa>
      charge = Battery_Upkeep();
 8007fe0:	f004 ffde 	bl	800cfa0 <Battery_Upkeep>
 8007fe4:	0003      	movs	r3, r0
 8007fe6:	001a      	movs	r2, r3
 8007fe8:	4b77      	ldr	r3, [pc, #476]	@ (80081c8 <main+0x2c4>)
 8007fea:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007fec:	f006 f994 	bl	800e318 <HAL_GetTick>
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	4a76      	ldr	r2, [pc, #472]	@ (80081cc <main+0x2c8>)
 8007ff4:	189a      	adds	r2, r3, r2
 8007ff6:	4b73      	ldr	r3, [pc, #460]	@ (80081c4 <main+0x2c0>)
 8007ff8:	601a      	str	r2, [r3, #0]
        showTime();
 8007ffa:	f7fe f969 	bl	80062d0 <showTime>
    }

    //==== disable for power measurements in test condition
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007ffe:	4b72      	ldr	r3, [pc, #456]	@ (80081c8 <main+0x2c4>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d003      	beq.n	800800e <main+0x10a>
 8008006:	4b70      	ldr	r3, [pc, #448]	@ (80081c8 <main+0x2c4>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <main+0x10e>
          FlashLEDs();
 800800e:	f7ff fcd5 	bl	80079bc <FlashLEDs>
        }
        if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8008012:	4b6d      	ldr	r3, [pc, #436]	@ (80081c8 <main+0x2c4>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d109      	bne.n	800802e <main+0x12a>
 800801a:	4b6d      	ldr	r3, [pc, #436]	@ (80081d0 <main+0x2cc>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b09      	cmp	r3, #9
 8008020:	d105      	bne.n	800802e <main+0x12a>
          batteryEmpty = true;
 8008022:	4b6c      	ldr	r3, [pc, #432]	@ (80081d4 <main+0x2d0>)
 8008024:	2201      	movs	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8008028:	f7fe fc7e 	bl	8006928 <Enter_Standby_Mode>
 800802c:	e002      	b.n	8008034 <main+0x130>
        }
        else{
          batteryEmpty = false;
 800802e:	4b69      	ldr	r3, [pc, #420]	@ (80081d4 <main+0x2d0>)
 8008030:	2200      	movs	r2, #0
 8008032:	701a      	strb	r2, [r3, #0]
        }
    //====

    if (!usbPluggedIn) {
 8008034:	4b68      	ldr	r3, [pc, #416]	@ (80081d8 <main+0x2d4>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2201      	movs	r2, #1
 800803a:	4053      	eors	r3, r2
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d023      	beq.n	800808a <main+0x186>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8008042:	4b66      	ldr	r3, [pc, #408]	@ (80081dc <main+0x2d8>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2201      	movs	r2, #1
 8008048:	4053      	eors	r3, r2
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01c      	beq.n	800808a <main+0x186>
 8008050:	f7ff febe 	bl	8007dd0 <AllDevicesReady>
 8008054:	1e03      	subs	r3, r0, #0
 8008056:	d018      	beq.n	800808a <main+0x186>
 8008058:	4b61      	ldr	r3, [pc, #388]	@ (80081e0 <main+0x2dc>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d014      	beq.n	800808a <main+0x186>
//        Debug("SensorProbe.ESP_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM => %d", SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
        EnabledConnectedDevices();
 8008060:	f7ff ff16 	bl	8007e90 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8008064:	4b5f      	ldr	r3, [pc, #380]	@ (80081e4 <main+0x2e0>)
 8008066:	789b      	ldrb	r3, [r3, #2]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <main+0x16e>
 800806c:	23d7      	movs	r3, #215	@ 0xd7
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	e001      	b.n	8008076 <main+0x172>
 8008072:	23dc      	movs	r3, #220	@ 0xdc
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	0018      	movs	r0, r3
 8008078:	f7fe fc78 	bl	800696c <Enter_Stop_Mode>
        deviceTimeOut = HAL_GetTick() + 3000;
 800807c:	f006 f94c 	bl	800e318 <HAL_GetTick>
 8008080:	0003      	movs	r3, r0
 8008082:	4a59      	ldr	r2, [pc, #356]	@ (80081e8 <main+0x2e4>)
 8008084:	189a      	adds	r2, r3, r2
 8008086:	4b4e      	ldr	r3, [pc, #312]	@ (80081c0 <main+0x2bc>)
 8008088:	601a      	str	r2, [r3, #0]
      }
    }
    if(testDone && !ESP_Programming && !batteryEmpty){
 800808a:	4b58      	ldr	r3, [pc, #352]	@ (80081ec <main+0x2e8>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d05a      	beq.n	8008148 <main+0x244>
 8008092:	4b3c      	ldr	r3, [pc, #240]	@ (8008184 <main+0x280>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2201      	movs	r2, #1
 8008098:	4053      	eors	r3, r2
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d053      	beq.n	8008148 <main+0x244>
 80080a0:	4b4c      	ldr	r3, [pc, #304]	@ (80081d4 <main+0x2d0>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2201      	movs	r2, #1
 80080a6:	4053      	eors	r3, r2
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d04c      	beq.n	8008148 <main+0x244>
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 80080ae:	4b50      	ldr	r3, [pc, #320]	@ (80081f0 <main+0x2ec>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d00d      	beq.n	80080d2 <main+0x1ce>
 80080b6:	4b4e      	ldr	r3, [pc, #312]	@ (80081f0 <main+0x2ec>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d009      	beq.n	80080d2 <main+0x1ce>
 80080be:	4b4d      	ldr	r3, [pc, #308]	@ (80081f4 <main+0x2f0>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <main+0x1ce>
        HIDSstate = HIDS_Upkeep();
 80080c6:	f006 f80b 	bl	800e0e0 <HIDS_Upkeep>
 80080ca:	0003      	movs	r3, r0
 80080cc:	001a      	movs	r2, r3
 80080ce:	4b4a      	ldr	r3, [pc, #296]	@ (80081f8 <main+0x2f4>)
 80080d0:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 80080d2:	4b49      	ldr	r3, [pc, #292]	@ (80081f8 <main+0x2f4>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d00d      	beq.n	80080f6 <main+0x1f2>
 80080da:	4b47      	ldr	r3, [pc, #284]	@ (80081f8 <main+0x2f4>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d009      	beq.n	80080f6 <main+0x1f2>
 80080e2:	4b44      	ldr	r3, [pc, #272]	@ (80081f4 <main+0x2f0>)
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <main+0x1f2>
        SGPstate = SGP_Upkeep();
 80080ea:	f003 fc49 	bl	800b980 <SGP_Upkeep>
 80080ee:	0003      	movs	r3, r0
 80080f0:	001a      	movs	r2, r3
 80080f2:	4b3f      	ldr	r3, [pc, #252]	@ (80081f0 <main+0x2ec>)
 80080f4:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 80080f6:	4b3f      	ldr	r3, [pc, #252]	@ (80081f4 <main+0x2f0>)
 80080f8:	78db      	ldrb	r3, [r3, #3]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <main+0x206>
        mic_Status = Mic_Upkeep();
 80080fe:	f000 fb99 	bl	8008834 <Mic_Upkeep>
 8008102:	0003      	movs	r3, r0
 8008104:	001a      	movs	r2, r3
 8008106:	4b3d      	ldr	r3, [pc, #244]	@ (80081fc <main+0x2f8>)
 8008108:	701a      	strb	r2, [r3, #0]
      }
      if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && Sensor.PM_measurementEnabled) {
 800810a:	4b2f      	ldr	r3, [pc, #188]	@ (80081c8 <main+0x2c4>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d803      	bhi.n	800811a <main+0x216>
 8008112:	4b2d      	ldr	r3, [pc, #180]	@ (80081c8 <main+0x2c4>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d106      	bne.n	8008128 <main+0x224>
 800811a:	4b36      	ldr	r3, [pc, #216]	@ (80081f4 <main+0x2f0>)
 800811c:	789b      	ldrb	r3, [r3, #2]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <main+0x224>
        sen5x_statemachine();
 8008122:	f001 f9e9 	bl	80094f8 <sen5x_statemachine>
 8008126:	e009      	b.n	800813c <main+0x238>
      }
      else {
        if (Sensor.PM_measurementEnabled) {
 8008128:	4b32      	ldr	r3, [pc, #200]	@ (80081f4 <main+0x2f0>)
 800812a:	789b      	ldrb	r3, [r3, #2]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <main+0x238>
          Info("Battery level insufficient for sen5x operation");
 8008130:	4a33      	ldr	r2, [pc, #204]	@ (8008200 <main+0x2fc>)
 8008132:	4b34      	ldr	r3, [pc, #208]	@ (8008204 <main+0x300>)
 8008134:	0019      	movs	r1, r3
 8008136:	2002      	movs	r0, #2
 8008138:	f005 fca2 	bl	800da80 <CreateLine>
        }
      }
      ESP_Status = ESP_Upkeep();
 800813c:	f7fd f8e0 	bl	8005300 <ESP_Upkeep>
 8008140:	0003      	movs	r3, r0
 8008142:	001a      	movs	r2, r3
 8008144:	4b22      	ldr	r3, [pc, #136]	@ (80081d0 <main+0x2cc>)
 8008146:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8008148:	4b28      	ldr	r3, [pc, #160]	@ (80081ec <main+0x2e8>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2201      	movs	r2, #1
 800814e:	4053      	eors	r3, r2
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00f      	beq.n	8008176 <main+0x272>
 8008156:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <main+0x280>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	2201      	movs	r2, #1
 800815c:	4053      	eors	r3, r2
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <main+0x272>
 8008164:	4b1b      	ldr	r3, [pc, #108]	@ (80081d4 <main+0x2d0>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	4053      	eors	r3, r2
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <main+0x272>
      Device_Test();  // for device with startup time
 8008172:	f7ff fdb3 	bl	8007cdc <Device_Test>
    }
    configCheck();
 8008176:	f004 fe6f 	bl	800ce58 <configCheck>
    if(TimestampIsReached(batteryReadTimer)){
 800817a:	e72a      	b.n	8007fd2 <main+0xce>
 800817c:	2000219c 	.word	0x2000219c
 8008180:	2000215c 	.word	0x2000215c
 8008184:	20000f15 	.word	0x20000f15
 8008188:	20000f1c 	.word	0x20000f1c
 800818c:	200022d4 	.word	0x200022d4
 8008190:	200011a0 	.word	0x200011a0
 8008194:	08023638 	.word	0x08023638
 8008198:	08023464 	.word	0x08023464
 800819c:	200021dc 	.word	0x200021dc
 80081a0:	20000e90 	.word	0x20000e90
 80081a4:	20000ecc 	.word	0x20000ecc
 80081a8:	08023648 	.word	0x08023648
 80081ac:	08024788 	.word	0x08024788
 80081b0:	2000238c 	.word	0x2000238c
 80081b4:	20000cfc 	.word	0x20000cfc
 80081b8:	20000d58 	.word	0x20000d58
 80081bc:	00001388 	.word	0x00001388
 80081c0:	20000f2c 	.word	0x20000f2c
 80081c4:	20000f30 	.word	0x20000f30
 80081c8:	20000f39 	.word	0x20000f39
 80081cc:	0000c350 	.word	0x0000c350
 80081d0:	20000f3a 	.word	0x20000f3a
 80081d4:	20000f16 	.word	0x20000f16
 80081d8:	2000214d 	.word	0x2000214d
 80081dc:	2000214e 	.word	0x2000214e
 80081e0:	2000054f 	.word	0x2000054f
 80081e4:	20000f34 	.word	0x20000f34
 80081e8:	00000bb8 	.word	0x00000bb8
 80081ec:	20000f14 	.word	0x20000f14
 80081f0:	20000f17 	.word	0x20000f17
 80081f4:	2000007c 	.word	0x2000007c
 80081f8:	20000f18 	.word	0x20000f18
 80081fc:	20000f3b 	.word	0x20000f3b
 8008200:	0802365c 	.word	0x0802365c
 8008204:	080234c0 	.word	0x080234c0

08008208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b09d      	sub	sp, #116	@ 0x74
 800820c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800820e:	2438      	movs	r4, #56	@ 0x38
 8008210:	193b      	adds	r3, r7, r4
 8008212:	0018      	movs	r0, r3
 8008214:	2338      	movs	r3, #56	@ 0x38
 8008216:	001a      	movs	r2, r3
 8008218:	2100      	movs	r1, #0
 800821a:	f017 fabf 	bl	801f79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800821e:	2324      	movs	r3, #36	@ 0x24
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	0018      	movs	r0, r3
 8008224:	2314      	movs	r3, #20
 8008226:	001a      	movs	r2, r3
 8008228:	2100      	movs	r1, #0
 800822a:	f017 fab7 	bl	801f79c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800822e:	003b      	movs	r3, r7
 8008230:	0018      	movs	r0, r3
 8008232:	2324      	movs	r3, #36	@ 0x24
 8008234:	001a      	movs	r2, r3
 8008236:	2100      	movs	r1, #0
 8008238:	f017 fab0 	bl	801f79c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800823c:	4b34      	ldr	r3, [pc, #208]	@ (8008310 <SystemClock_Config+0x108>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a34      	ldr	r2, [pc, #208]	@ (8008314 <SystemClock_Config+0x10c>)
 8008242:	401a      	ands	r2, r3
 8008244:	4b32      	ldr	r3, [pc, #200]	@ (8008310 <SystemClock_Config+0x108>)
 8008246:	2180      	movs	r1, #128	@ 0x80
 8008248:	0109      	lsls	r1, r1, #4
 800824a:	430a      	orrs	r2, r1
 800824c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800824e:	f00c f8ed 	bl	801442c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008252:	4b31      	ldr	r3, [pc, #196]	@ (8008318 <SystemClock_Config+0x110>)
 8008254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008256:	4a2f      	ldr	r2, [pc, #188]	@ (8008314 <SystemClock_Config+0x10c>)
 8008258:	401a      	ands	r2, r3
 800825a:	4b2f      	ldr	r3, [pc, #188]	@ (8008318 <SystemClock_Config+0x110>)
 800825c:	2180      	movs	r1, #128	@ 0x80
 800825e:	0149      	lsls	r1, r1, #5
 8008260:	430a      	orrs	r2, r1
 8008262:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008264:	193b      	adds	r3, r7, r4
 8008266:	2226      	movs	r2, #38	@ 0x26
 8008268:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800826a:	193b      	adds	r3, r7, r4
 800826c:	2280      	movs	r2, #128	@ 0x80
 800826e:	0052      	lsls	r2, r2, #1
 8008270:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008272:	0021      	movs	r1, r4
 8008274:	187b      	adds	r3, r7, r1
 8008276:	2201      	movs	r2, #1
 8008278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800827a:	187b      	adds	r3, r7, r1
 800827c:	2210      	movs	r2, #16
 800827e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008280:	187b      	adds	r3, r7, r1
 8008282:	2201      	movs	r2, #1
 8008284:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008286:	187b      	adds	r3, r7, r1
 8008288:	2200      	movs	r2, #0
 800828a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800828c:	187b      	adds	r3, r7, r1
 800828e:	0018      	movs	r0, r3
 8008290:	f00c f95c 	bl	801454c <HAL_RCC_OscConfig>
 8008294:	1e03      	subs	r3, r0, #0
 8008296:	d001      	beq.n	800829c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008298:	f000 f900 	bl	800849c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800829c:	2124      	movs	r1, #36	@ 0x24
 800829e:	187b      	adds	r3, r7, r1
 80082a0:	220f      	movs	r2, #15
 80082a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80082a4:	187b      	adds	r3, r7, r1
 80082a6:	2201      	movs	r2, #1
 80082a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082aa:	187b      	adds	r3, r7, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	2200      	movs	r2, #0
 80082b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082b6:	187b      	adds	r3, r7, r1
 80082b8:	2200      	movs	r2, #0
 80082ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80082bc:	187b      	adds	r3, r7, r1
 80082be:	2100      	movs	r1, #0
 80082c0:	0018      	movs	r0, r3
 80082c2:	f00c fd17 	bl	8014cf4 <HAL_RCC_ClockConfig>
 80082c6:	1e03      	subs	r3, r0, #0
 80082c8:	d001      	beq.n	80082ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80082ca:	f000 f8e7 	bl	800849c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80082ce:	003b      	movs	r3, r7
 80082d0:	226d      	movs	r2, #109	@ 0x6d
 80082d2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80082d4:	003b      	movs	r3, r7
 80082d6:	2200      	movs	r2, #0
 80082d8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80082da:	003b      	movs	r3, r7
 80082dc:	2200      	movs	r2, #0
 80082de:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80082e0:	003b      	movs	r3, r7
 80082e2:	2200      	movs	r2, #0
 80082e4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80082e6:	003b      	movs	r3, r7
 80082e8:	2280      	movs	r2, #128	@ 0x80
 80082ea:	0252      	lsls	r2, r2, #9
 80082ec:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80082ee:	003b      	movs	r3, r7
 80082f0:	2280      	movs	r2, #128	@ 0x80
 80082f2:	04d2      	lsls	r2, r2, #19
 80082f4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082f6:	003b      	movs	r3, r7
 80082f8:	0018      	movs	r0, r3
 80082fa:	f00c ff1f 	bl	801513c <HAL_RCCEx_PeriphCLKConfig>
 80082fe:	1e03      	subs	r3, r0, #0
 8008300:	d001      	beq.n	8008306 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8008302:	f000 f8cb 	bl	800849c <Error_Handler>
  }
}
 8008306:	46c0      	nop			@ (mov r8, r8)
 8008308:	46bd      	mov	sp, r7
 800830a:	b01d      	add	sp, #116	@ 0x74
 800830c:	bd90      	pop	{r4, r7, pc}
 800830e:	46c0      	nop			@ (mov r8, r8)
 8008310:	40007000 	.word	0x40007000
 8008314:	ffffe7ff 	.word	0xffffe7ff
 8008318:	40021000 	.word	0x40021000

0800831c <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	000a      	movs	r2, r1
 8008326:	1cbb      	adds	r3, r7, #2
 8008328:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 800832a:	4c06      	ldr	r4, [pc, #24]	@ (8008344 <printString+0x28>)
 800832c:	1cbb      	adds	r3, r7, #2
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4805      	ldr	r0, [pc, #20]	@ (8008348 <printString+0x2c>)
 8008334:	0023      	movs	r3, r4
 8008336:	f00e fa05 	bl	8016744 <HAL_UART_Transmit>
}
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	46bd      	mov	sp, r7
 800833e:	b003      	add	sp, #12
 8008340:	bd90      	pop	{r4, r7, pc}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	0000ffff 	.word	0x0000ffff
 8008348:	200022d4 	.word	0x200022d4

0800834c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008354:	4936      	ldr	r1, [pc, #216]	@ (8008430 <HAL_UART_RxCpltCallback+0xe4>)
 8008356:	4b37      	ldr	r3, [pc, #220]	@ (8008434 <HAL_UART_RxCpltCallback+0xe8>)
 8008358:	2201      	movs	r2, #1
 800835a:	0018      	movs	r0, r3
 800835c:	f00e fa92 	bl	8016884 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8008360:	4b33      	ldr	r3, [pc, #204]	@ (8008430 <HAL_UART_RxCpltCallback+0xe4>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	3b61      	subs	r3, #97	@ 0x61
 8008366:	2b13      	cmp	r3, #19
 8008368:	d830      	bhi.n	80083cc <HAL_UART_RxCpltCallback+0x80>
 800836a:	009a      	lsls	r2, r3, #2
 800836c:	4b32      	ldr	r3, [pc, #200]	@ (8008438 <HAL_UART_RxCpltCallback+0xec>)
 800836e:	18d3      	adds	r3, r2, r3
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008374:	4b31      	ldr	r3, [pc, #196]	@ (800843c <HAL_UART_RxCpltCallback+0xf0>)
 8008376:	0018      	movs	r0, r3
 8008378:	f017 f8c2 	bl	801f500 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800837c:	2003      	movs	r0, #3
 800837e:	f005 fbe9 	bl	800db54 <SetVerboseLevel>
      break;
 8008382:	e04a      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008384:	f7fb fa0a 	bl	800379c <forceNTPupdate>
    break;
 8008388:	e047      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800838a:	4b2d      	ldr	r3, [pc, #180]	@ (8008440 <HAL_UART_RxCpltCallback+0xf4>)
 800838c:	0018      	movs	r0, r3
 800838e:	f017 f8b7 	bl	801f500 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008392:	2002      	movs	r0, #2
 8008394:	f005 fbde 	bl	800db54 <SetVerboseLevel>
      break;
 8008398:	e03f      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800839a:	4b2a      	ldr	r3, [pc, #168]	@ (8008444 <HAL_UART_RxCpltCallback+0xf8>)
 800839c:	0018      	movs	r0, r3
 800839e:	f017 f8af 	bl	801f500 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 80083a2:	2001      	movs	r0, #1
 80083a4:	f005 fbd6 	bl	800db54 <SetVerboseLevel>
      break;
 80083a8:	e037      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 80083aa:	4b27      	ldr	r3, [pc, #156]	@ (8008448 <HAL_UART_RxCpltCallback+0xfc>)
 80083ac:	0018      	movs	r0, r3
 80083ae:	f017 f8a7 	bl	801f500 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80083b2:	2000      	movs	r0, #0
 80083b4:	f005 fbce 	bl	800db54 <SetVerboseLevel>
      break;
 80083b8:	e02f      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80083ba:	f005 ffad 	bl	800e318 <HAL_GetTick>
 80083be:	0002      	movs	r2, r0
 80083c0:	4b22      	ldr	r3, [pc, #136]	@ (800844c <HAL_UART_RxCpltCallback+0x100>)
 80083c2:	601a      	str	r2, [r3, #0]
      break;
 80083c4:	e029      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80083c6:	f7fd ff83 	bl	80062d0 <showTime>
      break;
 80083ca:	e026      	b.n	800841a <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80083cc:	4a20      	ldr	r2, [pc, #128]	@ (8008450 <HAL_UART_RxCpltCallback+0x104>)
 80083ce:	4b21      	ldr	r3, [pc, #132]	@ (8008454 <HAL_UART_RxCpltCallback+0x108>)
 80083d0:	0019      	movs	r1, r3
 80083d2:	2001      	movs	r0, #1
 80083d4:	f005 fb54 	bl	800da80 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 80083d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008458 <HAL_UART_RxCpltCallback+0x10c>)
 80083da:	0018      	movs	r0, r3
 80083dc:	f017 f890 	bl	801f500 <puts>
      printf("a - VerboseLevel set to all\r\n");
 80083e0:	4b1e      	ldr	r3, [pc, #120]	@ (800845c <HAL_UART_RxCpltCallback+0x110>)
 80083e2:	0018      	movs	r0, r3
 80083e4:	f017 f88c 	bl	801f500 <puts>
      printf("f - Force NTP time synchronization\r\n");
 80083e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008460 <HAL_UART_RxCpltCallback+0x114>)
 80083ea:	0018      	movs	r0, r3
 80083ec:	f017 f888 	bl	801f500 <puts>
      printf("i - VerboseLevel set to info\r\n");
 80083f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008464 <HAL_UART_RxCpltCallback+0x118>)
 80083f2:	0018      	movs	r0, r3
 80083f4:	f017 f884 	bl	801f500 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80083f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008468 <HAL_UART_RxCpltCallback+0x11c>)
 80083fa:	0018      	movs	r0, r3
 80083fc:	f017 f880 	bl	801f500 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008400:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <HAL_UART_RxCpltCallback+0x120>)
 8008402:	0018      	movs	r0, r3
 8008404:	f017 f87c 	bl	801f500 <puts>
      printf("s - Start particle measurement\r\n");
 8008408:	4b19      	ldr	r3, [pc, #100]	@ (8008470 <HAL_UART_RxCpltCallback+0x124>)
 800840a:	0018      	movs	r0, r3
 800840c:	f017 f878 	bl	801f500 <puts>
      printf("t - Show actual systemtime\r\n");
 8008410:	4b18      	ldr	r3, [pc, #96]	@ (8008474 <HAL_UART_RxCpltCallback+0x128>)
 8008412:	0018      	movs	r0, r3
 8008414:	f017 f874 	bl	801f500 <puts>
  break;
 8008418:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800841a:	4905      	ldr	r1, [pc, #20]	@ (8008430 <HAL_UART_RxCpltCallback+0xe4>)
 800841c:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <HAL_UART_RxCpltCallback+0xe8>)
 800841e:	2201      	movs	r2, #1
 8008420:	0018      	movs	r0, r3
 8008422:	f00e fa2f 	bl	8016884 <HAL_UART_Receive_IT>
}
 8008426:	46c0      	nop			@ (mov r8, r8)
 8008428:	46bd      	mov	sp, r7
 800842a:	b002      	add	sp, #8
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	20000f1c 	.word	0x20000f1c
 8008434:	200022d4 	.word	0x200022d4
 8008438:	08024738 	.word	0x08024738
 800843c:	0802368c 	.word	0x0802368c
 8008440:	080236a8 	.word	0x080236a8
 8008444:	080236c4 	.word	0x080236c4
 8008448:	080236e4 	.word	0x080236e4
 800844c:	200011c8 	.word	0x200011c8
 8008450:	08023700 	.word	0x08023700
 8008454:	08023434 	.word	0x08023434
 8008458:	08023730 	.word	0x08023730
 800845c:	08023748 	.word	0x08023748
 8008460:	08023768 	.word	0x08023768
 8008464:	0802378c 	.word	0x0802378c
 8008468:	080237ac 	.word	0x080237ac
 800846c:	080237d0 	.word	0x080237d0
 8008470:	080237f0 	.word	0x080237f0
 8008474:	08023810 	.word	0x08023810

08008478 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	0002      	movs	r2, r0
 8008480:	1dbb      	adds	r3, r7, #6
 8008482:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008484:	1dbb      	adds	r3, r7, #6
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	2380      	movs	r3, #128	@ 0x80
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	429a      	cmp	r2, r3
 800848e:	d101      	bne.n	8008494 <HAL_GPIO_EXTI_Callback+0x1c>
    setuserToggle();
 8008490:	f004 fd9a 	bl	800cfc8 <setuserToggle>
  }
}
 8008494:	46c0      	nop			@ (mov r8, r8)
 8008496:	46bd      	mov	sp, r7
 8008498:	b002      	add	sp, #8
 800849a:	bd80      	pop	{r7, pc}

0800849c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 80084a0:	4a04      	ldr	r2, [pc, #16]	@ (80084b4 <Error_Handler+0x18>)
 80084a2:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <Error_Handler+0x1c>)
 80084a4:	0019      	movs	r1, r3
 80084a6:	2001      	movs	r0, #1
 80084a8:	f005 faea 	bl	800da80 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80084ac:	b672      	cpsid	i
}
 80084ae:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 80084b0:	46c0      	nop			@ (mov r8, r8)
 80084b2:	e7fd      	b.n	80084b0 <Error_Handler+0x14>
 80084b4:	0802382c 	.word	0x0802382c
 80084b8:	08023434 	.word	0x08023434

080084bc <setMICTimeStamp>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void setMICTimeStamp(uint32_t ticks) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80084c4:	f005 ff28 	bl	800e318 <HAL_GetTick>
 80084c8:	0002      	movs	r2, r0
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	18d2      	adds	r2, r2, r3
 80084ce:	4b03      	ldr	r3, [pc, #12]	@ (80084dc <setMICTimeStamp+0x20>)
 80084d0:	601a      	str	r2, [r3, #0]
}
 80084d2:	46c0      	nop			@ (mov r8, r8)
 80084d4:	46bd      	mov	sp, r7
 80084d6:	b002      	add	sp, #8
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	46c0      	nop			@ (mov r8, r8)
 80084dc:	20000f88 	.word	0x20000f88

080084e0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  counter = 0;
 80084e4:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <ResetDBACalculator+0x1c>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80084ea:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <ResetDBACalculator+0x20>)
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80084f0:	4b04      	ldr	r3, [pc, #16]	@ (8008504 <ResetDBACalculator+0x24>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	701a      	strb	r2, [r3, #0]
}
 80084f6:	46c0      	nop			@ (mov r8, r8)
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000f84 	.word	0x20000f84
 8008500:	20000080 	.word	0x20000080
 8008504:	20000f85 	.word	0x20000f85

08008508 <MIC_Print>:

void MIC_Print(void) {
 8008508:	b5b0      	push	{r4, r5, r7, lr}
 800850a:	b08a      	sub	sp, #40	@ 0x28
 800850c:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800850e:	4b9f      	ldr	r3, [pc, #636]	@ (800878c <MIC_Print+0x284>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b9f      	ldr	r3, [pc, #636]	@ (8008790 <MIC_Print+0x288>)
 8008514:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008516:	4b9f      	ldr	r3, [pc, #636]	@ (8008794 <MIC_Print+0x28c>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	001a      	movs	r2, r3
 800851c:	4b9c      	ldr	r3, [pc, #624]	@ (8008790 <MIC_Print+0x288>)
 800851e:	6819      	ldr	r1, [r3, #0]
 8008520:	4b9d      	ldr	r3, [pc, #628]	@ (8008798 <MIC_Print+0x290>)
 8008522:	0092      	lsls	r2, r2, #2
 8008524:	50d1      	str	r1, [r2, r3]
  counter++;
 8008526:	4b9b      	ldr	r3, [pc, #620]	@ (8008794 <MIC_Print+0x28c>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	b2da      	uxtb	r2, r3
 800852e:	4b99      	ldr	r3, [pc, #612]	@ (8008794 <MIC_Print+0x28c>)
 8008530:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008532:	4b98      	ldr	r3, [pc, #608]	@ (8008794 <MIC_Print+0x28c>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b09      	cmp	r3, #9
 8008538:	d80b      	bhi.n	8008552 <MIC_Print+0x4a>
 800853a:	4b98      	ldr	r3, [pc, #608]	@ (800879c <MIC_Print+0x294>)
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2201      	movs	r2, #1
 8008540:	4053      	eors	r3, r2
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	d004      	beq.n	8008552 <MIC_Print+0x4a>
    denominator = counter;
 8008548:	4b92      	ldr	r3, [pc, #584]	@ (8008794 <MIC_Print+0x28c>)
 800854a:	781a      	ldrb	r2, [r3, #0]
 800854c:	4b94      	ldr	r3, [pc, #592]	@ (80087a0 <MIC_Print+0x298>)
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e005      	b.n	800855e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008552:	4b93      	ldr	r3, [pc, #588]	@ (80087a0 <MIC_Print+0x298>)
 8008554:	220a      	movs	r2, #10
 8008556:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008558:	4b90      	ldr	r3, [pc, #576]	@ (800879c <MIC_Print+0x294>)
 800855a:	2201      	movs	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
  }
  dBAmax = 0.0;
 800855e:	4b91      	ldr	r3, [pc, #580]	@ (80087a4 <MIC_Print+0x29c>)
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
  dBAsum = 0.0;
 8008564:	4b90      	ldr	r3, [pc, #576]	@ (80087a8 <MIC_Print+0x2a0>)
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800856a:	230f      	movs	r3, #15
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e03e      	b.n	80085f2 <MIC_Print+0xea>
    dBAsum += dBASamples[i];
 8008574:	240f      	movs	r4, #15
 8008576:	193b      	adds	r3, r7, r4
 8008578:	781a      	ldrb	r2, [r3, #0]
 800857a:	4b87      	ldr	r3, [pc, #540]	@ (8008798 <MIC_Print+0x290>)
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	58d2      	ldr	r2, [r2, r3]
 8008580:	4b89      	ldr	r3, [pc, #548]	@ (80087a8 <MIC_Print+0x2a0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	1c19      	adds	r1, r3, #0
 8008586:	1c10      	adds	r0, r2, #0
 8008588:	f7f8 f99a 	bl	80008c0 <__aeabi_fadd>
 800858c:	1c03      	adds	r3, r0, #0
 800858e:	1c1a      	adds	r2, r3, #0
 8008590:	4b85      	ldr	r3, [pc, #532]	@ (80087a8 <MIC_Print+0x2a0>)
 8008592:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008594:	193b      	adds	r3, r7, r4
 8008596:	781a      	ldrb	r2, [r3, #0]
 8008598:	4b7f      	ldr	r3, [pc, #508]	@ (8008798 <MIC_Print+0x290>)
 800859a:	0092      	lsls	r2, r2, #2
 800859c:	58d2      	ldr	r2, [r2, r3]
 800859e:	4b81      	ldr	r3, [pc, #516]	@ (80087a4 <MIC_Print+0x29c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	1c19      	adds	r1, r3, #0
 80085a4:	1c10      	adds	r0, r2, #0
 80085a6:	f7f7 ffd7 	bl	8000558 <__aeabi_fcmpgt>
 80085aa:	1e03      	subs	r3, r0, #0
 80085ac:	d006      	beq.n	80085bc <MIC_Print+0xb4>
      dBAmax = dBASamples[i];
 80085ae:	193b      	adds	r3, r7, r4
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	4b79      	ldr	r3, [pc, #484]	@ (8008798 <MIC_Print+0x290>)
 80085b4:	0092      	lsls	r2, r2, #2
 80085b6:	58d2      	ldr	r2, [r2, r3]
 80085b8:	4b7a      	ldr	r3, [pc, #488]	@ (80087a4 <MIC_Print+0x29c>)
 80085ba:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80085bc:	4b7a      	ldr	r3, [pc, #488]	@ (80087a8 <MIC_Print+0x2a0>)
 80085be:	681c      	ldr	r4, [r3, #0]
 80085c0:	4b77      	ldr	r3, [pc, #476]	@ (80087a0 <MIC_Print+0x298>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	0018      	movs	r0, r3
 80085c6:	f7f9 f84f 	bl	8001668 <__aeabi_ui2f>
 80085ca:	1c03      	adds	r3, r0, #0
 80085cc:	1c19      	adds	r1, r3, #0
 80085ce:	1c20      	adds	r0, r4, #0
 80085d0:	f7f8 fb00 	bl	8000bd4 <__aeabi_fdiv>
 80085d4:	1c03      	adds	r3, r0, #0
 80085d6:	1c1a      	adds	r2, r3, #0
 80085d8:	4b74      	ldr	r3, [pc, #464]	@ (80087ac <MIC_Print+0x2a4>)
 80085da:	601a      	str	r2, [r3, #0]
  setMic(dBAAverage);
 80085dc:	4b73      	ldr	r3, [pc, #460]	@ (80087ac <MIC_Print+0x2a4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	1c18      	adds	r0, r3, #0
 80085e2:	f7fb f9af 	bl	8003944 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80085e6:	210f      	movs	r1, #15
 80085e8:	187b      	adds	r3, r7, r1
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	187b      	adds	r3, r7, r1
 80085ee:	3201      	adds	r2, #1
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	4b6b      	ldr	r3, [pc, #428]	@ (80087a0 <MIC_Print+0x298>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	220f      	movs	r2, #15
 80085f8:	18ba      	adds	r2, r7, r2
 80085fa:	7812      	ldrb	r2, [r2, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d3b9      	bcc.n	8008574 <MIC_Print+0x6c>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008600:	4b63      	ldr	r3, [pc, #396]	@ (8008790 <MIC_Print+0x288>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1c18      	adds	r0, r3, #0
 8008606:	f7fa ff2d 	bl	8003464 <__aeabi_f2d>
 800860a:	6038      	str	r0, [r7, #0]
 800860c:	6079      	str	r1, [r7, #4]
 800860e:	4b65      	ldr	r3, [pc, #404]	@ (80087a4 <MIC_Print+0x29c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	1c18      	adds	r0, r3, #0
 8008614:	f7fa ff26 	bl	8003464 <__aeabi_f2d>
 8008618:	0004      	movs	r4, r0
 800861a:	000d      	movs	r5, r1
 800861c:	4b63      	ldr	r3, [pc, #396]	@ (80087ac <MIC_Print+0x2a4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	1c18      	adds	r0, r3, #0
 8008622:	f7fa ff1f 	bl	8003464 <__aeabi_f2d>
 8008626:	0002      	movs	r2, r0
 8008628:	000b      	movs	r3, r1
 800862a:	4961      	ldr	r1, [pc, #388]	@ (80087b0 <MIC_Print+0x2a8>)
 800862c:	9204      	str	r2, [sp, #16]
 800862e:	9305      	str	r3, [sp, #20]
 8008630:	9402      	str	r4, [sp, #8]
 8008632:	9503      	str	r5, [sp, #12]
 8008634:	4b5f      	ldr	r3, [pc, #380]	@ (80087b4 <MIC_Print+0x2ac>)
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	0008      	movs	r0, r1
 800863e:	f000 fa0d 	bl	8008a5c <print>

  if(counter > NUMBER_OF_SAMPLES){
 8008642:	4b54      	ldr	r3, [pc, #336]	@ (8008794 <MIC_Print+0x28c>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b0a      	cmp	r3, #10
 8008648:	d902      	bls.n	8008650 <MIC_Print+0x148>
    counter = 0;
 800864a:	4b52      	ldr	r3, [pc, #328]	@ (8008794 <MIC_Print+0x28c>)
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008650:	4b4f      	ldr	r3, [pc, #316]	@ (8008790 <MIC_Print+0x288>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4958      	ldr	r1, [pc, #352]	@ (80087b8 <MIC_Print+0x2b0>)
 8008656:	1c18      	adds	r0, r3, #0
 8008658:	f7f7 ff88 	bl	800056c <__aeabi_fcmpge>
 800865c:	1e03      	subs	r3, r0, #0
 800865e:	d004      	beq.n	800866a <MIC_Print+0x162>
    SetDBLED(true, true, true);
 8008660:	2201      	movs	r2, #1
 8008662:	2101      	movs	r1, #1
 8008664:	2001      	movs	r0, #1
 8008666:	f004 fa37 	bl	800cad8 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800866a:	4b49      	ldr	r3, [pc, #292]	@ (8008790 <MIC_Print+0x288>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4953      	ldr	r1, [pc, #332]	@ (80087bc <MIC_Print+0x2b4>)
 8008670:	1c18      	adds	r0, r3, #0
 8008672:	f7f7 ff7b 	bl	800056c <__aeabi_fcmpge>
 8008676:	1e03      	subs	r3, r0, #0
 8008678:	d00c      	beq.n	8008694 <MIC_Print+0x18c>
 800867a:	4b45      	ldr	r3, [pc, #276]	@ (8008790 <MIC_Print+0x288>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	494e      	ldr	r1, [pc, #312]	@ (80087b8 <MIC_Print+0x2b0>)
 8008680:	1c18      	adds	r0, r3, #0
 8008682:	f7f7 ff55 	bl	8000530 <__aeabi_fcmplt>
 8008686:	1e03      	subs	r3, r0, #0
 8008688:	d004      	beq.n	8008694 <MIC_Print+0x18c>
    SetDBLED(true, false, false);
 800868a:	2200      	movs	r2, #0
 800868c:	2100      	movs	r1, #0
 800868e:	2001      	movs	r0, #1
 8008690:	f004 fa22 	bl	800cad8 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008694:	4b3e      	ldr	r3, [pc, #248]	@ (8008790 <MIC_Print+0x288>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4949      	ldr	r1, [pc, #292]	@ (80087c0 <MIC_Print+0x2b8>)
 800869a:	1c18      	adds	r0, r3, #0
 800869c:	f7f7 ff66 	bl	800056c <__aeabi_fcmpge>
 80086a0:	1e03      	subs	r3, r0, #0
 80086a2:	d00c      	beq.n	80086be <MIC_Print+0x1b6>
 80086a4:	4b3a      	ldr	r3, [pc, #232]	@ (8008790 <MIC_Print+0x288>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4944      	ldr	r1, [pc, #272]	@ (80087bc <MIC_Print+0x2b4>)
 80086aa:	1c18      	adds	r0, r3, #0
 80086ac:	f7f7 ff40 	bl	8000530 <__aeabi_fcmplt>
 80086b0:	1e03      	subs	r3, r0, #0
 80086b2:	d004      	beq.n	80086be <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 80086b4:	2200      	movs	r2, #0
 80086b6:	2101      	movs	r1, #1
 80086b8:	2001      	movs	r0, #1
 80086ba:	f004 fa0d 	bl	800cad8 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 80086be:	4b34      	ldr	r3, [pc, #208]	@ (8008790 <MIC_Print+0x288>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4940      	ldr	r1, [pc, #256]	@ (80087c4 <MIC_Print+0x2bc>)
 80086c4:	1c18      	adds	r0, r3, #0
 80086c6:	f7f7 ff51 	bl	800056c <__aeabi_fcmpge>
 80086ca:	1e03      	subs	r3, r0, #0
 80086cc:	d00c      	beq.n	80086e8 <MIC_Print+0x1e0>
 80086ce:	4b30      	ldr	r3, [pc, #192]	@ (8008790 <MIC_Print+0x288>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	493b      	ldr	r1, [pc, #236]	@ (80087c0 <MIC_Print+0x2b8>)
 80086d4:	1c18      	adds	r0, r3, #0
 80086d6:	f7f7 ff2b 	bl	8000530 <__aeabi_fcmplt>
 80086da:	1e03      	subs	r3, r0, #0
 80086dc:	d004      	beq.n	80086e8 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 80086de:	2200      	movs	r2, #0
 80086e0:	2101      	movs	r1, #1
 80086e2:	2000      	movs	r0, #0
 80086e4:	f004 f9f8 	bl	800cad8 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 80086e8:	4b29      	ldr	r3, [pc, #164]	@ (8008790 <MIC_Print+0x288>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4936      	ldr	r1, [pc, #216]	@ (80087c8 <MIC_Print+0x2c0>)
 80086ee:	1c18      	adds	r0, r3, #0
 80086f0:	f7f7 ff3c 	bl	800056c <__aeabi_fcmpge>
 80086f4:	1e03      	subs	r3, r0, #0
 80086f6:	d00c      	beq.n	8008712 <MIC_Print+0x20a>
 80086f8:	4b25      	ldr	r3, [pc, #148]	@ (8008790 <MIC_Print+0x288>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4931      	ldr	r1, [pc, #196]	@ (80087c4 <MIC_Print+0x2bc>)
 80086fe:	1c18      	adds	r0, r3, #0
 8008700:	f7f7 ff16 	bl	8000530 <__aeabi_fcmplt>
 8008704:	1e03      	subs	r3, r0, #0
 8008706:	d004      	beq.n	8008712 <MIC_Print+0x20a>
    SetDBLED(false, true, true);
 8008708:	2201      	movs	r2, #1
 800870a:	2101      	movs	r1, #1
 800870c:	2000      	movs	r0, #0
 800870e:	f004 f9e3 	bl	800cad8 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008712:	4b1f      	ldr	r3, [pc, #124]	@ (8008790 <MIC_Print+0x288>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	492d      	ldr	r1, [pc, #180]	@ (80087cc <MIC_Print+0x2c4>)
 8008718:	1c18      	adds	r0, r3, #0
 800871a:	f7f7 ff27 	bl	800056c <__aeabi_fcmpge>
 800871e:	1e03      	subs	r3, r0, #0
 8008720:	d00c      	beq.n	800873c <MIC_Print+0x234>
 8008722:	4b1b      	ldr	r3, [pc, #108]	@ (8008790 <MIC_Print+0x288>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4928      	ldr	r1, [pc, #160]	@ (80087c8 <MIC_Print+0x2c0>)
 8008728:	1c18      	adds	r0, r3, #0
 800872a:	f7f7 ff01 	bl	8000530 <__aeabi_fcmplt>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d004      	beq.n	800873c <MIC_Print+0x234>
    SetDBLED(false, false, true);
 8008732:	2201      	movs	r2, #1
 8008734:	2100      	movs	r1, #0
 8008736:	2000      	movs	r0, #0
 8008738:	f004 f9ce 	bl	800cad8 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800873c:	4b14      	ldr	r3, [pc, #80]	@ (8008790 <MIC_Print+0x288>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4923      	ldr	r1, [pc, #140]	@ (80087d0 <MIC_Print+0x2c8>)
 8008742:	1c18      	adds	r0, r3, #0
 8008744:	f7f7 ff12 	bl	800056c <__aeabi_fcmpge>
 8008748:	1e03      	subs	r3, r0, #0
 800874a:	d00c      	beq.n	8008766 <MIC_Print+0x25e>
 800874c:	4b10      	ldr	r3, [pc, #64]	@ (8008790 <MIC_Print+0x288>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	491e      	ldr	r1, [pc, #120]	@ (80087cc <MIC_Print+0x2c4>)
 8008752:	1c18      	adds	r0, r3, #0
 8008754:	f7f7 feec 	bl	8000530 <__aeabi_fcmplt>
 8008758:	1e03      	subs	r3, r0, #0
 800875a:	d004      	beq.n	8008766 <MIC_Print+0x25e>
    SetDBLED(true, false, true);
 800875c:	2201      	movs	r2, #1
 800875e:	2100      	movs	r1, #0
 8008760:	2001      	movs	r0, #1
 8008762:	f004 f9b9 	bl	800cad8 <SetDBLED>
  }
  if(dBA < 35){//off
 8008766:	4b0a      	ldr	r3, [pc, #40]	@ (8008790 <MIC_Print+0x288>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4919      	ldr	r1, [pc, #100]	@ (80087d0 <MIC_Print+0x2c8>)
 800876c:	1c18      	adds	r0, r3, #0
 800876e:	f7f7 fedf 	bl	8000530 <__aeabi_fcmplt>
 8008772:	1e03      	subs	r3, r0, #0
 8008774:	d100      	bne.n	8008778 <MIC_Print+0x270>
    SetDBLED(false, false, false);
  }
}
 8008776:	e004      	b.n	8008782 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
 8008778:	2200      	movs	r2, #0
 800877a:	2100      	movs	r1, #0
 800877c:	2000      	movs	r0, #0
 800877e:	f004 f9ab 	bl	800cad8 <SetDBLED>
}
 8008782:	46c0      	nop			@ (mov r8, r8)
 8008784:	46bd      	mov	sp, r7
 8008786:	b004      	add	sp, #16
 8008788:	bdb0      	pop	{r4, r5, r7, pc}
 800878a:	46c0      	nop			@ (mov r8, r8)
 800878c:	20000f7c 	.word	0x20000f7c
 8008790:	20000f48 	.word	0x20000f48
 8008794:	20000f84 	.word	0x20000f84
 8008798:	20000f4c 	.word	0x20000f4c
 800879c:	20000f85 	.word	0x20000f85
 80087a0:	20000080 	.word	0x20000080
 80087a4:	20000f80 	.word	0x20000f80
 80087a8:	20000f78 	.word	0x20000f78
 80087ac:	20000f74 	.word	0x20000f74
 80087b0:	08023858 	.word	0x08023858
 80087b4:	20000f3c 	.word	0x20000f3c
 80087b8:	42b40000 	.word	0x42b40000
 80087bc:	42a00000 	.word	0x42a00000
 80087c0:	428c0000 	.word	0x428c0000
 80087c4:	42700000 	.word	0x42700000
 80087c8:	42480000 	.word	0x42480000
 80087cc:	42200000 	.word	0x42200000
 80087d0:	420c0000 	.word	0x420c0000

080087d4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80087da:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <MIC_TestMeasurementDone+0x4c>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	4a10      	ldr	r2, [pc, #64]	@ (8008824 <MIC_TestMeasurementDone+0x50>)
 80087e2:	4911      	ldr	r1, [pc, #68]	@ (8008828 <MIC_TestMeasurementDone+0x54>)
 80087e4:	2002      	movs	r0, #2
 80087e6:	f005 f94b 	bl	800da80 <CreateLine>
  if(DataReady) {
 80087ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008820 <MIC_TestMeasurementDone+0x4c>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d010      	beq.n	8008816 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 80087f4:	1dfb      	adds	r3, r7, #7
 80087f6:	4a0d      	ldr	r2, [pc, #52]	@ (800882c <MIC_TestMeasurementDone+0x58>)
 80087f8:	7812      	ldrb	r2, [r2, #0]
 80087fa:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80087fc:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <MIC_TestMeasurementDone+0x58>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	4a0b      	ldr	r2, [pc, #44]	@ (8008830 <MIC_TestMeasurementDone+0x5c>)
 8008804:	4908      	ldr	r1, [pc, #32]	@ (8008828 <MIC_TestMeasurementDone+0x54>)
 8008806:	2002      	movs	r0, #2
 8008808:	f005 f93a 	bl	800da80 <CreateLine>
    ResetMICIndicator();
 800880c:	f004 fa42 	bl	800cc94 <ResetMICIndicator>
    return Check;
 8008810:	1dfb      	adds	r3, r7, #7
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	e000      	b.n	8008818 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008816:	2300      	movs	r3, #0
}
 8008818:	0018      	movs	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	b002      	add	sp, #8
 800881e:	bd80      	pop	{r7, pc}
 8008820:	200012b3 	.word	0x200012b3
 8008824:	080238a0 	.word	0x080238a0
 8008828:	080238cc 	.word	0x080238cc
 800882c:	200012b4 	.word	0x200012b4
 8008830:	080238d0 	.word	0x080238d0

08008834 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800883a:	4b78      	ldr	r3, [pc, #480]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b03      	cmp	r3, #3
 8008840:	d100      	bne.n	8008844 <Mic_Upkeep+0x10>
 8008842:	e0b8      	b.n	80089b6 <Mic_Upkeep+0x182>
 8008844:	dd00      	ble.n	8008848 <Mic_Upkeep+0x14>
 8008846:	e0d3      	b.n	80089f0 <Mic_Upkeep+0x1bc>
 8008848:	2b02      	cmp	r3, #2
 800884a:	d037      	beq.n	80088bc <Mic_Upkeep+0x88>
 800884c:	dd00      	ble.n	8008850 <Mic_Upkeep+0x1c>
 800884e:	e0cf      	b.n	80089f0 <Mic_Upkeep+0x1bc>
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <Mic_Upkeep+0x26>
 8008854:	2b01      	cmp	r3, #1
 8008856:	d014      	beq.n	8008882 <Mic_Upkeep+0x4e>
 8008858:	e0ca      	b.n	80089f0 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800885a:	2001      	movs	r0, #1
 800885c:	f003 fa82 	bl	800bd64 <enableMicrophone>
 8008860:	0003      	movs	r3, r0
 8008862:	001a      	movs	r2, r3
 8008864:	2301      	movs	r3, #1
 8008866:	4053      	eors	r3, r2
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800886e:	4a6c      	ldr	r2, [pc, #432]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 8008870:	4b6c      	ldr	r3, [pc, #432]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 8008872:	217c      	movs	r1, #124	@ 0x7c
 8008874:	0018      	movs	r0, r3
 8008876:	f005 f9b1 	bl	800dbdc <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800887a:	4b68      	ldr	r3, [pc, #416]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 800887c:	2201      	movs	r2, #1
 800887e:	701a      	strb	r2, [r3, #0]
    break;
 8008880:	e0c5      	b.n	8008a0e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008882:	f003 fa4b 	bl	800bd1c <micSettlingComplete>
 8008886:	1e03      	subs	r3, r0, #0
 8008888:	d105      	bne.n	8008896 <Mic_Upkeep+0x62>
 800888a:	4b67      	ldr	r3, [pc, #412]	@ (8008a28 <Mic_Upkeep+0x1f4>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d100      	bne.n	8008896 <Mic_Upkeep+0x62>
 8008894:	e0b6      	b.n	8008a04 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008896:	f003 facf 	bl	800be38 <startSPLcalculation>
 800889a:	0003      	movs	r3, r0
 800889c:	001a      	movs	r2, r3
 800889e:	2301      	movs	r3, #1
 80088a0:	4053      	eors	r3, r2
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d005      	beq.n	80088b4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80088a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 80088aa:	4b5e      	ldr	r3, [pc, #376]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 80088ac:	2185      	movs	r1, #133	@ 0x85
 80088ae:	0018      	movs	r0, r3
 80088b0:	f005 f994 	bl	800dbdc <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80088b4:	4b59      	ldr	r3, [pc, #356]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80088b6:	2202      	movs	r2, #2
 80088b8:	701a      	strb	r2, [r3, #0]
    }
    break;
 80088ba:	e0a3      	b.n	8008a04 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80088bc:	4b5b      	ldr	r3, [pc, #364]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088be:	2201      	movs	r2, #1
 80088c0:	2101      	movs	r1, #1
 80088c2:	0018      	movs	r0, r3
 80088c4:	f003 f90c 	bl	800bae0 <getSoundData>
 80088c8:	1e03      	subs	r3, r0, #0
 80088ca:	d100      	bne.n	80088ce <Mic_Upkeep+0x9a>
 80088cc:	e09c      	b.n	8008a08 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80088ce:	f003 fa05 	bl	800bcdc <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80088d2:	4b56      	ldr	r3, [pc, #344]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	001a      	movs	r2, r3
 80088d8:	4b54      	ldr	r3, [pc, #336]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088da:	785b      	ldrb	r3, [r3, #1]
 80088dc:	4954      	ldr	r1, [pc, #336]	@ (8008a30 <Mic_Upkeep+0x1fc>)
 80088de:	0038      	movs	r0, r7
 80088e0:	f016 fe18 	bl	801f514 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80088e4:	4b51      	ldr	r3, [pc, #324]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088e6:	89db      	ldrh	r3, [r3, #14]
 80088e8:	001a      	movs	r2, r3
 80088ea:	4b50      	ldr	r3, [pc, #320]	@ (8008a2c <Mic_Upkeep+0x1f8>)
 80088ec:	7c1b      	ldrb	r3, [r3, #16]
 80088ee:	4951      	ldr	r1, [pc, #324]	@ (8008a34 <Mic_Upkeep+0x200>)
 80088f0:	4851      	ldr	r0, [pc, #324]	@ (8008a38 <Mic_Upkeep+0x204>)
 80088f2:	f016 fe0f 	bl	801f514 <siprintf>
      dBValue = atof(dBbuffer);
 80088f6:	003b      	movs	r3, r7
 80088f8:	0018      	movs	r0, r3
 80088fa:	f015 f9bb 	bl	801dc74 <atof>
 80088fe:	0002      	movs	r2, r0
 8008900:	000b      	movs	r3, r1
 8008902:	0010      	movs	r0, r2
 8008904:	0019      	movs	r1, r3
 8008906:	f7fa fdf5 	bl	80034f4 <__aeabi_d2f>
 800890a:	1c02      	adds	r2, r0, #0
 800890c:	4b4b      	ldr	r3, [pc, #300]	@ (8008a3c <Mic_Upkeep+0x208>)
 800890e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008910:	4b4a      	ldr	r3, [pc, #296]	@ (8008a3c <Mic_Upkeep+0x208>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	494a      	ldr	r1, [pc, #296]	@ (8008a40 <Mic_Upkeep+0x20c>)
 8008916:	1c18      	adds	r0, r3, #0
 8008918:	f7f8 fb42 	bl	8000fa0 <__aeabi_fmul>
 800891c:	1c03      	adds	r3, r0, #0
 800891e:	1c18      	adds	r0, r3, #0
 8008920:	f7fa fda0 	bl	8003464 <__aeabi_f2d>
 8008924:	2200      	movs	r2, #0
 8008926:	4b47      	ldr	r3, [pc, #284]	@ (8008a44 <Mic_Upkeep+0x210>)
 8008928:	f7f8 fee0 	bl	80016ec <__aeabi_dadd>
 800892c:	0002      	movs	r2, r0
 800892e:	000b      	movs	r3, r1
 8008930:	0010      	movs	r0, r2
 8008932:	0019      	movs	r1, r3
 8008934:	f7fa fd08 	bl	8003348 <__aeabi_d2iz>
 8008938:	0003      	movs	r3, r0
 800893a:	0018      	movs	r0, r3
 800893c:	f7fa fd40 	bl	80033c0 <__aeabi_i2d>
 8008940:	2200      	movs	r2, #0
 8008942:	4b41      	ldr	r3, [pc, #260]	@ (8008a48 <Mic_Upkeep+0x214>)
 8008944:	f7f9 fa36 	bl	8001db4 <__aeabi_ddiv>
 8008948:	0002      	movs	r2, r0
 800894a:	000b      	movs	r3, r1
 800894c:	0010      	movs	r0, r2
 800894e:	0019      	movs	r1, r3
 8008950:	f7fa fdd0 	bl	80034f4 <__aeabi_d2f>
 8008954:	1c02      	adds	r2, r0, #0
 8008956:	4b39      	ldr	r3, [pc, #228]	@ (8008a3c <Mic_Upkeep+0x208>)
 8008958:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800895a:	f7ff fdd5 	bl	8008508 <MIC_Print>
      if (!startSPLcalculation()) {
 800895e:	f003 fa6b 	bl	800be38 <startSPLcalculation>
 8008962:	0003      	movs	r3, r0
 8008964:	001a      	movs	r2, r3
 8008966:	2301      	movs	r3, #1
 8008968:	4053      	eors	r3, r2
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008970:	4a2b      	ldr	r2, [pc, #172]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 8008972:	4b2c      	ldr	r3, [pc, #176]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 8008974:	2195      	movs	r1, #149	@ 0x95
 8008976:	0018      	movs	r0, r3
 8008978:	f005 f930 	bl	800dbdc <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800897c:	2000      	movs	r0, #0
 800897e:	f003 f9f1 	bl	800bd64 <enableMicrophone>
 8008982:	0003      	movs	r3, r0
 8008984:	001a      	movs	r2, r3
 8008986:	2301      	movs	r3, #1
 8008988:	4053      	eors	r3, r2
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008990:	4a23      	ldr	r2, [pc, #140]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 8008992:	4b24      	ldr	r3, [pc, #144]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 8008994:	2198      	movs	r1, #152	@ 0x98
 8008996:	0018      	movs	r0, r3
 8008998:	f005 f920 	bl	800dbdc <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800899c:	f005 fcbc 	bl	800e318 <HAL_GetTick>
 80089a0:	0003      	movs	r3, r0
 80089a2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a4c <Mic_Upkeep+0x218>)
 80089a4:	189a      	adds	r2, r3, r2
 80089a6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a50 <Mic_Upkeep+0x21c>)
 80089a8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80089aa:	4b1c      	ldr	r3, [pc, #112]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80089ac:	2203      	movs	r2, #3
 80089ae:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80089b0:	f004 f970 	bl	800cc94 <ResetMICIndicator>
    }
    break;
 80089b4:	e028      	b.n	8008a08 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 80089b6:	4b26      	ldr	r3, [pc, #152]	@ (8008a50 <Mic_Upkeep+0x21c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	0018      	movs	r0, r3
 80089bc:	f005 f80a 	bl	800d9d4 <TimestampIsReached>
 80089c0:	1e03      	subs	r3, r0, #0
 80089c2:	d023      	beq.n	8008a0c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 80089c4:	2001      	movs	r0, #1
 80089c6:	f003 f9cd 	bl	800bd64 <enableMicrophone>
 80089ca:	0003      	movs	r3, r0
 80089cc:	001a      	movs	r2, r3
 80089ce:	2301      	movs	r3, #1
 80089d0:	4053      	eors	r3, r2
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 80089d8:	4a11      	ldr	r2, [pc, #68]	@ (8008a20 <Mic_Upkeep+0x1ec>)
 80089da:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <Mic_Upkeep+0x1f0>)
 80089dc:	21a3      	movs	r1, #163	@ 0xa3
 80089de:	0018      	movs	r0, r3
 80089e0:	f005 f8fc 	bl	800dbdc <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 80089e4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80089ea:	f004 f921 	bl	800cc30 <SetMICIndicator>
    }
    break;
 80089ee:	e00d      	b.n	8008a0c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 80089f0:	4a18      	ldr	r2, [pc, #96]	@ (8008a54 <Mic_Upkeep+0x220>)
 80089f2:	4b19      	ldr	r3, [pc, #100]	@ (8008a58 <Mic_Upkeep+0x224>)
 80089f4:	0019      	movs	r1, r3
 80089f6:	2003      	movs	r0, #3
 80089f8:	f005 f842 	bl	800da80 <CreateLine>
    MicState = MIC_STATE_INIT;
 80089fc:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
    break;
 8008a02:	e004      	b.n	8008a0e <Mic_Upkeep+0x1da>
    break;
 8008a04:	46c0      	nop			@ (mov r8, r8)
 8008a06:	e002      	b.n	8008a0e <Mic_Upkeep+0x1da>
    break;
 8008a08:	46c0      	nop			@ (mov r8, r8)
 8008a0a:	e000      	b.n	8008a0e <Mic_Upkeep+0x1da>
    break;
 8008a0c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008a0e:	4b03      	ldr	r3, [pc, #12]	@ (8008a1c <Mic_Upkeep+0x1e8>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b002      	add	sp, #8
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			@ (mov r8, r8)
 8008a1c:	20000f9e 	.word	0x20000f9e
 8008a20:	080238e8 	.word	0x080238e8
 8008a24:	08024790 	.word	0x08024790
 8008a28:	200012b3 	.word	0x200012b3
 8008a2c:	20000f8c 	.word	0x20000f8c
 8008a30:	08023904 	.word	0x08023904
 8008a34:	0802390c 	.word	0x0802390c
 8008a38:	20000f3c 	.word	0x20000f3c
 8008a3c:	20000f7c 	.word	0x20000f7c
 8008a40:	42c80000 	.word	0x42c80000
 8008a44:	3fe00000 	.word	0x3fe00000
 8008a48:	40590000 	.word	0x40590000
 8008a4c:	000002f3 	.word	0x000002f3
 8008a50:	20000f88 	.word	0x20000f88
 8008a54:	08023914 	.word	0x08023914
 8008a58:	08023934 	.word	0x08023934

08008a5c <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008a5c:	b40f      	push	{r0, r1, r2, r3}
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b082      	sub	sp, #8
 8008a62:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008a64:	2314      	movs	r3, #20
 8008a66:	18fb      	adds	r3, r7, r3
 8008a68:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	2180      	movs	r1, #128	@ 0x80
 8008a70:	0089      	lsls	r1, r1, #2
 8008a72:	480a      	ldr	r0, [pc, #40]	@ (8008a9c <print+0x40>)
 8008a74:	f016 fde6 	bl	801f644 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008a78:	4b08      	ldr	r3, [pc, #32]	@ (8008a9c <print+0x40>)
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f7f7 fb76 	bl	800016c <strlen>
 8008a80:	0003      	movs	r3, r0
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	4b05      	ldr	r3, [pc, #20]	@ (8008a9c <print+0x40>)
 8008a86:	0011      	movs	r1, r2
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f7ff fc47 	bl	800831c <printString>
}
 8008a8e:	46c0      	nop			@ (mov r8, r8)
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b002      	add	sp, #8
 8008a94:	bc80      	pop	{r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	b004      	add	sp, #16
 8008a9a:	4718      	bx	r3
 8008a9c:	20000fa0 	.word	0x20000fa0

08008aa0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008aa6:	1d3b      	adds	r3, r7, #4
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	2314      	movs	r3, #20
 8008aac:	001a      	movs	r2, r3
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f016 fe74 	bl	801f79c <memset>
  RTC_DateTypeDef sDate = {0};
 8008ab4:	003b      	movs	r3, r7
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008aba:	4b2e      	ldr	r3, [pc, #184]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008abc:	4a2e      	ldr	r2, [pc, #184]	@ (8008b78 <MX_RTC_Init+0xd8>)
 8008abe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ac8:	227f      	movs	r2, #127	@ 0x7f
 8008aca:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008acc:	4b29      	ldr	r3, [pc, #164]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ace:	22ff      	movs	r2, #255	@ 0xff
 8008ad0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008ad2:	4b28      	ldr	r3, [pc, #160]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008ad8:	4b26      	ldr	r3, [pc, #152]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008ade:	4b25      	ldr	r3, [pc, #148]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008ae4:	4b23      	ldr	r3, [pc, #140]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008aea:	4b22      	ldr	r3, [pc, #136]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008aec:	0018      	movs	r0, r3
 8008aee:	f00c fc81 	bl	80153f4 <HAL_RTC_Init>
 8008af2:	1e03      	subs	r3, r0, #0
 8008af4:	d001      	beq.n	8008afa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008af6:	f7ff fcd1 	bl	800849c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008afa:	1d3b      	adds	r3, r7, #4
 8008afc:	220d      	movs	r2, #13
 8008afe:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008b00:	1d3b      	adds	r3, r7, #4
 8008b02:	2200      	movs	r2, #0
 8008b04:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008b06:	1d3b      	adds	r3, r7, #4
 8008b08:	2200      	movs	r2, #0
 8008b0a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008b0c:	1d3b      	adds	r3, r7, #4
 8008b0e:	2200      	movs	r2, #0
 8008b10:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	2200      	movs	r2, #0
 8008b16:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008b18:	1d39      	adds	r1, r7, #4
 8008b1a:	4b16      	ldr	r3, [pc, #88]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	0018      	movs	r0, r3
 8008b20:	f00c fd04 	bl	801552c <HAL_RTC_SetTime>
 8008b24:	1e03      	subs	r3, r0, #0
 8008b26:	d001      	beq.n	8008b2c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008b28:	f7ff fcb8 	bl	800849c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008b2c:	003b      	movs	r3, r7
 8008b2e:	2206      	movs	r2, #6
 8008b30:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008b32:	003b      	movs	r3, r7
 8008b34:	2211      	movs	r2, #17
 8008b36:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008b38:	003b      	movs	r3, r7
 8008b3a:	2217      	movs	r2, #23
 8008b3c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008b3e:	003b      	movs	r3, r7
 8008b40:	2218      	movs	r2, #24
 8008b42:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008b44:	0039      	movs	r1, r7
 8008b46:	4b0b      	ldr	r3, [pc, #44]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f00c fdf6 	bl	801573c <HAL_RTC_SetDate>
 8008b50:	1e03      	subs	r3, r0, #0
 8008b52:	d001      	beq.n	8008b58 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008b54:	f7ff fca2 	bl	800849c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008b58:	4b06      	ldr	r3, [pc, #24]	@ (8008b74 <MX_RTC_Init+0xd4>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f00c ffa6 	bl	8015ab0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008b64:	1e03      	subs	r3, r0, #0
 8008b66:	d001      	beq.n	8008b6c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008b68:	f7ff fc98 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008b6c:	46c0      	nop			@ (mov r8, r8)
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b006      	add	sp, #24
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	200011a0 	.word	0x200011a0
 8008b78:	40002800 	.word	0x40002800

08008b7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a0a      	ldr	r2, [pc, #40]	@ (8008bb4 <HAL_RTC_MspInit+0x38>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d10e      	bne.n	8008bac <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <HAL_RTC_MspInit+0x3c>)
 8008b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b92:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <HAL_RTC_MspInit+0x3c>)
 8008b94:	2180      	movs	r1, #128	@ 0x80
 8008b96:	02c9      	lsls	r1, r1, #11
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	2002      	movs	r0, #2
 8008ba2:	f006 f84b 	bl	800ec3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008ba6:	2002      	movs	r0, #2
 8008ba8:	f006 f85d 	bl	800ec66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008bac:	46c0      	nop			@ (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b002      	add	sp, #8
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	40002800 	.word	0x40002800
 8008bb8:	40021000 	.word	0x40021000

08008bbc <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008bc4:	f005 fba8 	bl	800e318 <HAL_GetTick>
 8008bc8:	0002      	movs	r2, r0
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	18d2      	adds	r2, r2, r3
 8008bce:	4b03      	ldr	r3, [pc, #12]	@ (8008bdc <setsen5xReadTimer+0x20>)
 8008bd0:	601a      	str	r2, [r3, #0]
}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	b002      	add	sp, #8
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	46c0      	nop			@ (mov r8, r8)
 8008bdc:	200011c8 	.word	0x200011c8

08008be0 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8008be8:	f7fe ff3c 	bl	8007a64 <IsPMSensorEnabled>
 8008bec:	1e03      	subs	r3, r0, #0
 8008bee:	d033      	beq.n	8008c58 <sen5x_enable+0x78>
    Debug("sen5x measurement is enabled");
 8008bf0:	4a21      	ldr	r2, [pc, #132]	@ (8008c78 <sen5x_enable+0x98>)
 8008bf2:	4b22      	ldr	r3, [pc, #136]	@ (8008c7c <sen5x_enable+0x9c>)
 8008bf4:	0019      	movs	r1, r3
 8008bf6:	2003      	movs	r0, #3
 8008bf8:	f004 ff42 	bl	800da80 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8008bfc:	4b20      	ldr	r3, [pc, #128]	@ (8008c80 <sen5x_enable+0xa0>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	1e5a      	subs	r2, r3, #1
 8008c02:	4193      	sbcs	r3, r2
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2201      	movs	r2, #1
 8008c08:	4053      	eors	r3, r2
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	1c1a      	adds	r2, r3, #0
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4013      	ands	r3, r2
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	4b1a      	ldr	r3, [pc, #104]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c16:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008c18:	4b19      	ldr	r3, [pc, #100]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <sen5x_enable+0x56>
      setsen5xReadTimer(0);
 8008c20:	2000      	movs	r0, #0
 8008c22:	f7ff ffcb 	bl	8008bbc <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 8008c26:	4b16      	ldr	r3, [pc, #88]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4a16      	ldr	r2, [pc, #88]	@ (8008c84 <sen5x_enable+0xa4>)
 8008c2c:	4913      	ldr	r1, [pc, #76]	@ (8008c7c <sen5x_enable+0x9c>)
 8008c2e:	2003      	movs	r0, #3
 8008c30:	f004 ff26 	bl	800da80 <CreateLine>
 8008c34:	e016      	b.n	8008c64 <sen5x_enable+0x84>
    }
    else {
      Debug("This cycle the sen5x is disabled");
 8008c36:	4a14      	ldr	r2, [pc, #80]	@ (8008c88 <sen5x_enable+0xa8>)
 8008c38:	4b10      	ldr	r3, [pc, #64]	@ (8008c7c <sen5x_enable+0x9c>)
 8008c3a:	0019      	movs	r1, r3
 8008c3c:	2003      	movs	r0, #3
 8008c3e:	f004 ff1f 	bl	800da80 <CreateLine>
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008c42:	f005 fb69 	bl	800e318 <HAL_GetTick>
 8008c46:	0002      	movs	r2, r0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4910      	ldr	r1, [pc, #64]	@ (8008c8c <sen5x_enable+0xac>)
 8008c4c:	434b      	muls	r3, r1
 8008c4e:	18d3      	adds	r3, r2, r3
 8008c50:	0018      	movs	r0, r3
 8008c52:	f7ff ffb3 	bl	8008bbc <setsen5xReadTimer>
 8008c56:	e005      	b.n	8008c64 <sen5x_enable+0x84>
    }
  }
  else {
    Debug("sen5x measurement is disabled");
 8008c58:	4a0d      	ldr	r2, [pc, #52]	@ (8008c90 <sen5x_enable+0xb0>)
 8008c5a:	4b08      	ldr	r3, [pc, #32]	@ (8008c7c <sen5x_enable+0x9c>)
 8008c5c:	0019      	movs	r1, r3
 8008c5e:	2003      	movs	r0, #3
 8008c60:	f004 ff0e 	bl	800da80 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008c64:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <sen5x_enable+0xb4>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008c6a:	4b05      	ldr	r3, [pc, #20]	@ (8008c80 <sen5x_enable+0xa0>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
}
 8008c6e:	0018      	movs	r0, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b002      	add	sp, #8
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	08023938 	.word	0x08023938
 8008c7c:	08023958 	.word	0x08023958
 8008c80:	200011c6 	.word	0x200011c6
 8008c84:	0802395c 	.word	0x0802395c
 8008c88:	0802397c 	.word	0x0802397c
 8008c8c:	00000bb8 	.word	0x00000bb8
 8008c90:	080239a0 	.word	0x080239a0
 8008c94:	20000081 	.word	0x20000081

08008c98 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc8 <sen5x_Power_On+0x30>)
 8008c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008ccc <sen5x_Power_On+0x34>)
 8008ca0:	0019      	movs	r1, r3
 8008ca2:	2003      	movs	r0, #3
 8008ca4:	f004 feec 	bl	800da80 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008ca8:	2380      	movs	r3, #128	@ 0x80
 8008caa:	015b      	lsls	r3, r3, #5
 8008cac:	4808      	ldr	r0, [pc, #32]	@ (8008cd0 <sen5x_Power_On+0x38>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	0019      	movs	r1, r3
 8008cb2:	f006 fdac 	bl	800f80e <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008cb6:	4b07      	ldr	r3, [pc, #28]	@ (8008cd4 <sen5x_Power_On+0x3c>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 8008cbc:	2037      	movs	r0, #55	@ 0x37
 8008cbe:	f005 fb35 	bl	800e32c <HAL_Delay>
  return;
 8008cc2:	46c0      	nop			@ (mov r8, r8)
}
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	080239c0 	.word	0x080239c0
 8008ccc:	08023958 	.word	0x08023958
 8008cd0:	50000800 	.word	0x50000800
 8008cd4:	200011c5 	.word	0x200011c5

08008cd8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008cdc:	4a09      	ldr	r2, [pc, #36]	@ (8008d04 <sen5x_Power_Off+0x2c>)
 8008cde:	4b0a      	ldr	r3, [pc, #40]	@ (8008d08 <sen5x_Power_Off+0x30>)
 8008ce0:	0019      	movs	r1, r3
 8008ce2:	2003      	movs	r0, #3
 8008ce4:	f004 fecc 	bl	800da80 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008ce8:	2380      	movs	r3, #128	@ 0x80
 8008cea:	015b      	lsls	r3, r3, #5
 8008cec:	4807      	ldr	r0, [pc, #28]	@ (8008d0c <sen5x_Power_Off+0x34>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	f006 fd8c 	bl	800f80e <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008cf6:	4b06      	ldr	r3, [pc, #24]	@ (8008d10 <sen5x_Power_Off+0x38>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
  return;
 8008cfc:	46c0      	nop			@ (mov r8, r8)
}
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	46c0      	nop			@ (mov r8, r8)
 8008d04:	080239dc 	.word	0x080239dc
 8008d08:	08023958 	.word	0x08023958
 8008d0c:	50000800 	.word	0x50000800
 8008d10:	200011c5 	.word	0x200011c5

08008d14 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008d18:	4b02      	ldr	r3, [pc, #8]	@ (8008d24 <reset_fanCleaningDone+0x10>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
}
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	200011c4 	.word	0x200011c4

08008d28 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2a:	b09b      	sub	sp, #108	@ 0x6c
 8008d2c:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008d2e:	2456      	movs	r4, #86	@ 0x56
 8008d30:	193b      	adds	r3, r7, r4
 8008d32:	2200      	movs	r2, #0
 8008d34:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008d36:	2355      	movs	r3, #85	@ 0x55
 8008d38:	18fb      	adds	r3, r7, r3
 8008d3a:	2220      	movs	r2, #32
 8008d3c:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 8008d3e:	2354      	movs	r3, #84	@ 0x54
 8008d40:	18fb      	adds	r3, r7, r3
 8008d42:	2220      	movs	r2, #32
 8008d44:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008d46:	f7ff ffa7 	bl	8008c98 <sen5x_Power_On>
  error = sen5x_device_reset();
 8008d4a:	0025      	movs	r5, r4
 8008d4c:	193c      	adds	r4, r7, r4
 8008d4e:	f001 f819 	bl	8009d84 <sen5x_device_reset>
 8008d52:	0003      	movs	r3, r0
 8008d54:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008d56:	002c      	movs	r4, r5
 8008d58:	193b      	adds	r3, r7, r4
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008d62:	193b      	adds	r3, r7, r4
 8008d64:	2200      	movs	r2, #0
 8008d66:	5e9b      	ldrsh	r3, [r3, r2]
 8008d68:	4a6d      	ldr	r2, [pc, #436]	@ (8008f20 <probe_sen5x+0x1f8>)
 8008d6a:	496e      	ldr	r1, [pc, #440]	@ (8008f24 <probe_sen5x+0x1fc>)
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f004 fe87 	bl	800da80 <CreateLine>
      return error;
 8008d72:	193b      	adds	r3, r7, r4
 8008d74:	2200      	movs	r2, #0
 8008d76:	5e9b      	ldrsh	r3, [r3, r2]
 8008d78:	e0ce      	b.n	8008f18 <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008d7a:	2556      	movs	r5, #86	@ 0x56
 8008d7c:	197c      	adds	r4, r7, r5
 8008d7e:	2355      	movs	r3, #85	@ 0x55
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	232c      	movs	r3, #44	@ 0x2c
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	0011      	movs	r1, r2
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f000 fee6 	bl	8009b5c <sen5x_get_serial_number>
 8008d90:	0003      	movs	r3, r0
 8008d92:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008d94:	197b      	adds	r3, r7, r5
 8008d96:	2200      	movs	r2, #0
 8008d98:	5e9b      	ldrsh	r3, [r3, r2]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008d9e:	197b      	adds	r3, r7, r5
 8008da0:	2200      	movs	r2, #0
 8008da2:	5e9a      	ldrsh	r2, [r3, r2]
 8008da4:	4b60      	ldr	r3, [pc, #384]	@ (8008f28 <probe_sen5x+0x200>)
 8008da6:	0011      	movs	r1, r2
 8008da8:	0018      	movs	r0, r3
 8008daa:	f016 fb43 	bl	801f434 <iprintf>
      return error;
 8008dae:	197b      	adds	r3, r7, r5
 8008db0:	2200      	movs	r2, #0
 8008db2:	5e9b      	ldrsh	r3, [r3, r2]
 8008db4:	e0b0      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008db6:	232c      	movs	r3, #44	@ 0x2c
 8008db8:	18fa      	adds	r2, r7, r3
 8008dba:	4b5c      	ldr	r3, [pc, #368]	@ (8008f2c <probe_sen5x+0x204>)
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f016 fb38 	bl	801f434 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008dc4:	2556      	movs	r5, #86	@ 0x56
 8008dc6:	197c      	adds	r4, r7, r5
 8008dc8:	2354      	movs	r3, #84	@ 0x54
 8008dca:	18fb      	adds	r3, r7, r3
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	230c      	movs	r3, #12
 8008dd0:	18fb      	adds	r3, r7, r3
 8008dd2:	0011      	movs	r1, r2
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f000 fe6b 	bl	8009ab0 <sen5x_get_product_name>
 8008dda:	0003      	movs	r3, r0
 8008ddc:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008dde:	197b      	adds	r3, r7, r5
 8008de0:	2200      	movs	r2, #0
 8008de2:	5e9b      	ldrsh	r3, [r3, r2]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00b      	beq.n	8008e00 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008de8:	197b      	adds	r3, r7, r5
 8008dea:	2200      	movs	r2, #0
 8008dec:	5e9a      	ldrsh	r2, [r3, r2]
 8008dee:	4b50      	ldr	r3, [pc, #320]	@ (8008f30 <probe_sen5x+0x208>)
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f016 fb1e 	bl	801f434 <iprintf>
      return error;
 8008df8:	197b      	adds	r3, r7, r5
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	5e9b      	ldrsh	r3, [r3, r2]
 8008dfe:	e08b      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008e00:	230c      	movs	r3, #12
 8008e02:	18fa      	adds	r2, r7, r3
 8008e04:	4b4b      	ldr	r3, [pc, #300]	@ (8008f34 <probe_sen5x+0x20c>)
 8008e06:	0011      	movs	r1, r2
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f016 fb13 	bl	801f434 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008e0e:	2656      	movs	r6, #86	@ 0x56
 8008e10:	19bc      	adds	r4, r7, r6
 8008e12:	2308      	movs	r3, #8
 8008e14:	18fd      	adds	r5, r7, r3
 8008e16:	2309      	movs	r3, #9
 8008e18:	18fa      	adds	r2, r7, r3
 8008e1a:	230a      	movs	r3, #10
 8008e1c:	18f9      	adds	r1, r7, r3
 8008e1e:	230b      	movs	r3, #11
 8008e20:	18f8      	adds	r0, r7, r3
 8008e22:	1d7b      	adds	r3, r7, #5
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	1dbb      	adds	r3, r7, #6
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	1dfb      	adds	r3, r7, #7
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	002b      	movs	r3, r5
 8008e30:	f000 feea 	bl	8009c08 <sen5x_get_version>
 8008e34:	0003      	movs	r3, r0
 8008e36:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008e38:	19bb      	adds	r3, r7, r6
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	5e9b      	ldrsh	r3, [r3, r2]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008e42:	19bb      	adds	r3, r7, r6
 8008e44:	2200      	movs	r2, #0
 8008e46:	5e9a      	ldrsh	r2, [r3, r2]
 8008e48:	4b3b      	ldr	r3, [pc, #236]	@ (8008f38 <probe_sen5x+0x210>)
 8008e4a:	0011      	movs	r1, r2
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f016 faf1 	bl	801f434 <iprintf>
      return error;
 8008e52:	19bb      	adds	r3, r7, r6
 8008e54:	2200      	movs	r2, #0
 8008e56:	5e9b      	ldrsh	r3, [r3, r2]
 8008e58:	e05e      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008e5a:	230b      	movs	r3, #11
 8008e5c:	18fb      	adds	r3, r7, r3
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	0019      	movs	r1, r3
 8008e62:	230a      	movs	r3, #10
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	001a      	movs	r2, r3
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	18fb      	adds	r3, r7, r3
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	001c      	movs	r4, r3
 8008e72:	1dfb      	adds	r3, r7, #7
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4831      	ldr	r0, [pc, #196]	@ (8008f3c <probe_sen5x+0x214>)
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	0023      	movs	r3, r4
 8008e7c:	f016 fada 	bl	801f434 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008e80:	2300      	movs	r3, #0
 8008e82:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008e84:	264e      	movs	r6, #78	@ 0x4e
 8008e86:	19bb      	adds	r3, r7, r6
 8008e88:	2200      	movs	r2, #0
 8008e8a:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008e8c:	234c      	movs	r3, #76	@ 0x4c
 8008e8e:	18fb      	adds	r3, r7, r3
 8008e90:	2200      	movs	r2, #0
 8008e92:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008e94:	492a      	ldr	r1, [pc, #168]	@ (8008f40 <probe_sen5x+0x218>)
 8008e96:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008e98:	f7f8 f882 	bl	8000fa0 <__aeabi_fmul>
 8008e9c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008e9e:	1c18      	adds	r0, r3, #0
 8008ea0:	f7f8 fb76 	bl	8001590 <__aeabi_f2iz>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	b218      	sxth	r0, r3
 8008ea8:	2556      	movs	r5, #86	@ 0x56
 8008eaa:	197c      	adds	r4, r7, r5
 8008eac:	234c      	movs	r3, #76	@ 0x4c
 8008eae:	18fb      	adds	r3, r7, r3
 8008eb0:	881a      	ldrh	r2, [r3, #0]
 8008eb2:	19bb      	adds	r3, r7, r6
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	5e5b      	ldrsh	r3, [r3, r1]
 8008eb8:	0019      	movs	r1, r3
 8008eba:	f000 fd95 	bl	80099e8 <sen5x_set_temperature_offset_parameters>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008ec2:	197b      	adds	r3, r7, r5
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008ecc:	197b      	adds	r3, r7, r5
 8008ece:	2200      	movs	r2, #0
 8008ed0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f44 <probe_sen5x+0x21c>)
 8008ed4:	4913      	ldr	r1, [pc, #76]	@ (8008f24 <probe_sen5x+0x1fc>)
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	f004 fdd2 	bl	800da80 <CreateLine>
      return error;
 8008edc:	197b      	adds	r3, r7, r5
 8008ede:	2200      	movs	r2, #0
 8008ee0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ee2:	e019      	b.n	8008f18 <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008ee4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008ee6:	f7fa fabd 	bl	8003464 <__aeabi_f2d>
 8008eea:	0002      	movs	r2, r0
 8008eec:	000b      	movs	r3, r1
 8008eee:	4816      	ldr	r0, [pc, #88]	@ (8008f48 <probe_sen5x+0x220>)
 8008ef0:	4916      	ldr	r1, [pc, #88]	@ (8008f4c <probe_sen5x+0x224>)
 8008ef2:	9200      	str	r2, [sp, #0]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	0002      	movs	r2, r0
 8008ef8:	2002      	movs	r0, #2
 8008efa:	f004 fdc1 	bl	800da80 <CreateLine>
  }
  sen5x_Power_Off();
 8008efe:	f7ff feeb 	bl	8008cd8 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008f02:	f005 fa09 	bl	800e318 <HAL_GetTick>
 8008f06:	0003      	movs	r3, r0
 8008f08:	4a11      	ldr	r2, [pc, #68]	@ (8008f50 <probe_sen5x+0x228>)
 8008f0a:	189a      	adds	r2, r3, r2
 8008f0c:	4b11      	ldr	r3, [pc, #68]	@ (8008f54 <probe_sen5x+0x22c>)
 8008f0e:	601a      	str	r2, [r3, #0]
  return error;
 8008f10:	2356      	movs	r3, #86	@ 0x56
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	2200      	movs	r2, #0
 8008f16:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008f18:	0018      	movs	r0, r3
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	b017      	add	sp, #92	@ 0x5c
 8008f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f20:	080239f8 	.word	0x080239f8
 8008f24:	08023a24 	.word	0x08023a24
 8008f28:	08023a28 	.word	0x08023a28
 8008f2c:	08023a58 	.word	0x08023a58
 8008f30:	08023a6c 	.word	0x08023a6c
 8008f34:	08023a9c 	.word	0x08023a9c
 8008f38:	08023ab0 	.word	0x08023ab0
 8008f3c:	08023adc 	.word	0x08023adc
 8008f40:	43480000 	.word	0x43480000
 8008f44:	08023b00 	.word	0x08023b00
 8008f48:	08023b40 	.word	0x08023b40
 8008f4c:	08023b78 	.word	0x08023b78
 8008f50:	000061a8 	.word	0x000061a8
 8008f54:	200011c8 	.word	0x200011c8

08008f58 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008f58:	b590      	push	{r4, r7, lr}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8008f5e:	1dbb      	adds	r3, r7, #6
 8008f60:	2200      	movs	r2, #0
 8008f62:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement(); // start full measurement mode
 8008f64:	1dbc      	adds	r4, r7, #6
 8008f66:	f000 fbcb 	bl	8009700 <sen5x_start_measurement>
 8008f6a:	0003      	movs	r3, r0
 8008f6c:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008f6e:	1dbb      	adds	r3, r7, #6
 8008f70:	2200      	movs	r2, #0
 8008f72:	5e9b      	ldrsh	r3, [r3, r2]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008f78:	1dbb      	adds	r3, r7, #6
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8008f7e:	4a06      	ldr	r2, [pc, #24]	@ (8008f98 <sen5x_lightup_measurement+0x40>)
 8008f80:	4906      	ldr	r1, [pc, #24]	@ (8008f9c <sen5x_lightup_measurement+0x44>)
 8008f82:	2001      	movs	r0, #1
 8008f84:	f004 fd7c 	bl	800da80 <CreateLine>
  }
  return error;
 8008f88:	1dbb      	adds	r3, r7, #6
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b003      	add	sp, #12
 8008f94:	bd90      	pop	{r4, r7, pc}
 8008f96:	46c0      	nop			@ (mov r8, r8)
 8008f98:	08023b7c 	.word	0x08023b7c
 8008f9c:	08023a24 	.word	0x08023a24

08008fa0 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008fa6:	1dbb      	adds	r3, r7, #6
 8008fa8:	2200      	movs	r2, #0
 8008faa:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008fac:	1dbc      	adds	r4, r7, #6
 8008fae:	f000 fbd5 	bl	800975c <sen5x_stop_measurement>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008fb6:	1dbb      	adds	r3, r7, #6
 8008fb8:	2200      	movs	r2, #0
 8008fba:	5e9b      	ldrsh	r3, [r3, r2]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008fc0:	1dbb      	adds	r3, r7, #6
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	5e9b      	ldrsh	r3, [r3, r2]
 8008fc6:	4a06      	ldr	r2, [pc, #24]	@ (8008fe0 <sen5x_extinguish_measurement+0x40>)
 8008fc8:	4906      	ldr	r1, [pc, #24]	@ (8008fe4 <sen5x_extinguish_measurement+0x44>)
 8008fca:	2001      	movs	r0, #1
 8008fcc:	f004 fd58 	bl	800da80 <CreateLine>
  }
  return error;
 8008fd0:	1dbb      	adds	r3, r7, #6
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	b003      	add	sp, #12
 8008fdc:	bd90      	pop	{r4, r7, pc}
 8008fde:	46c0      	nop			@ (mov r8, r8)
 8008fe0:	08023bac 	.word	0x08023bac
 8008fe4:	08023a24 	.word	0x08023a24

08008fe8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8008fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fea:	b08d      	sub	sp, #52	@ 0x34
 8008fec:	af04      	add	r7, sp, #16
 8008fee:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8008ff0:	261e      	movs	r6, #30
 8008ff2:	19bb      	adds	r3, r7, r6
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8008ff8:	19bc      	adds	r4, r7, r6
 8008ffa:	2316      	movs	r3, #22
 8008ffc:	18fd      	adds	r5, r7, r3
 8008ffe:	2318      	movs	r3, #24
 8009000:	18fa      	adds	r2, r7, r3
 8009002:	231a      	movs	r3, #26
 8009004:	18f9      	adds	r1, r7, r3
 8009006:	231c      	movs	r3, #28
 8009008:	18f8      	adds	r0, r7, r3
 800900a:	230e      	movs	r3, #14
 800900c:	18fb      	adds	r3, r7, r3
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	2310      	movs	r3, #16
 8009012:	18fb      	adds	r3, r7, r3
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	2312      	movs	r3, #18
 8009018:	18fb      	adds	r3, r7, r3
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	2314      	movs	r3, #20
 800901e:	18fb      	adds	r3, r7, r3
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	002b      	movs	r3, r5
 8009024:	f000 fc1c 	bl	8009860 <sen5x_read_measured_values>
 8009028:	0003      	movs	r3, r0
 800902a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800902c:	19bb      	adds	r3, r7, r6
 800902e:	2200      	movs	r2, #0
 8009030:	5e9b      	ldrsh	r3, [r3, r2]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <sen5x_read_measurement+0x56>
    return error;
 8009036:	19bb      	adds	r3, r7, r6
 8009038:	2200      	movs	r2, #0
 800903a:	5e9b      	ldrsh	r3, [r3, r2]
 800903c:	e034      	b.n	80090a8 <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800903e:	231c      	movs	r3, #28
 8009040:	18fb      	adds	r3, r7, r3
 8009042:	881a      	ldrh	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009048:	211a      	movs	r1, #26
 800904a:	187b      	adds	r3, r7, r1
 800904c:	881a      	ldrh	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009052:	2318      	movs	r3, #24
 8009054:	18fb      	adds	r3, r7, r3
 8009056:	881a      	ldrh	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800905c:	2016      	movs	r0, #22
 800905e:	183b      	adds	r3, r7, r0
 8009060:	881a      	ldrh	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8009066:	2314      	movs	r3, #20
 8009068:	18fb      	adds	r3, r7, r3
 800906a:	2200      	movs	r2, #0
 800906c:	5e9a      	ldrsh	r2, [r3, r2]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009072:	2312      	movs	r3, #18
 8009074:	18fb      	adds	r3, r7, r3
 8009076:	2200      	movs	r2, #0
 8009078:	5e9a      	ldrsh	r2, [r3, r2]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800907e:	2310      	movs	r3, #16
 8009080:	18fb      	adds	r3, r7, r3
 8009082:	2200      	movs	r2, #0
 8009084:	5e9a      	ldrsh	r2, [r3, r2]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800908a:	230e      	movs	r3, #14
 800908c:	18fb      	adds	r3, r7, r3
 800908e:	2200      	movs	r2, #0
 8009090:	5e9a      	ldrsh	r2, [r3, r2]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 8009096:	187b      	adds	r3, r7, r1
 8009098:	881a      	ldrh	r2, [r3, #0]
 800909a:	183b      	adds	r3, r7, r0
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	0019      	movs	r1, r3
 80090a0:	0010      	movs	r0, r2
 80090a2:	f7fa fc5d 	bl	8003960 <setPMs>
  return 0;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b009      	add	sp, #36	@ 0x24
 80090ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090b0 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 80090b6:	1dbb      	adds	r3, r7, #6
 80090b8:	2200      	movs	r2, #0
 80090ba:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
  if (sen5x_read_measurement(&sen5x_data)) {
 80090bc:	4b77      	ldr	r3, [pc, #476]	@ (800929c <sen5x_measurement+0x1ec>)
 80090be:	0018      	movs	r0, r3
 80090c0:	f7ff ff92 	bl	8008fe8 <sen5x_read_measurement>
 80090c4:	1e03      	subs	r3, r0, #0
 80090c6:	d00b      	beq.n	80090e0 <sen5x_measurement+0x30>
    Error("Error executing sen5x_read_measured_values(): %i", error);
 80090c8:	1dbb      	adds	r3, r7, #6
 80090ca:	2200      	movs	r2, #0
 80090cc:	5e9b      	ldrsh	r3, [r3, r2]
 80090ce:	4a74      	ldr	r2, [pc, #464]	@ (80092a0 <sen5x_measurement+0x1f0>)
 80090d0:	4974      	ldr	r1, [pc, #464]	@ (80092a4 <sen5x_measurement+0x1f4>)
 80090d2:	2001      	movs	r0, #1
 80090d4:	f004 fcd4 	bl	800da80 <CreateLine>
    return error;
 80090d8:	1dbb      	adds	r3, r7, #6
 80090da:	2200      	movs	r2, #0
 80090dc:	5e9b      	ldrsh	r3, [r3, r2]
 80090de:	e0d8      	b.n	8009292 <sen5x_measurement+0x1e2>
  }
  if (sen5xSamples != 1) {
 80090e0:	4b71      	ldr	r3, [pc, #452]	@ (80092a8 <sen5x_measurement+0x1f8>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d001      	beq.n	80090ec <sen5x_measurement+0x3c>
    return 0; // first sample reads zero's
 80090e8:	2300      	movs	r3, #0
 80090ea:	e0d2      	b.n	8009292 <sen5x_measurement+0x1e2>
  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80090ec:	4b6b      	ldr	r3, [pc, #428]	@ (800929c <sen5x_measurement+0x1ec>)
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	4a6e      	ldr	r2, [pc, #440]	@ (80092ac <sen5x_measurement+0x1fc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d013      	beq.n	800911e <sen5x_measurement+0x6e>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80090f6:	4b69      	ldr	r3, [pc, #420]	@ (800929c <sen5x_measurement+0x1ec>)
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	0018      	movs	r0, r3
 80090fc:	f7f8 fa68 	bl	80015d0 <__aeabi_i2f>
 8009100:	1c03      	adds	r3, r0, #0
 8009102:	496b      	ldr	r1, [pc, #428]	@ (80092b0 <sen5x_measurement+0x200>)
 8009104:	1c18      	adds	r0, r3, #0
 8009106:	f7f7 fd65 	bl	8000bd4 <__aeabi_fdiv>
 800910a:	1c03      	adds	r3, r0, #0
 800910c:	1c18      	adds	r0, r3, #0
 800910e:	f7fa f9a9 	bl	8003464 <__aeabi_f2d>
 8009112:	0002      	movs	r2, r0
 8009114:	000b      	movs	r3, r1
 8009116:	4967      	ldr	r1, [pc, #412]	@ (80092b4 <sen5x_measurement+0x204>)
 8009118:	0008      	movs	r0, r1
 800911a:	f016 f98b 	bl	801f434 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800911e:	4b5f      	ldr	r3, [pc, #380]	@ (800929c <sen5x_measurement+0x1ec>)
 8009120:	885b      	ldrh	r3, [r3, #2]
 8009122:	4a62      	ldr	r2, [pc, #392]	@ (80092ac <sen5x_measurement+0x1fc>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d013      	beq.n	8009150 <sen5x_measurement+0xa0>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009128:	4b5c      	ldr	r3, [pc, #368]	@ (800929c <sen5x_measurement+0x1ec>)
 800912a:	885b      	ldrh	r3, [r3, #2]
 800912c:	0018      	movs	r0, r3
 800912e:	f7f8 fa4f 	bl	80015d0 <__aeabi_i2f>
 8009132:	1c03      	adds	r3, r0, #0
 8009134:	495e      	ldr	r1, [pc, #376]	@ (80092b0 <sen5x_measurement+0x200>)
 8009136:	1c18      	adds	r0, r3, #0
 8009138:	f7f7 fd4c 	bl	8000bd4 <__aeabi_fdiv>
 800913c:	1c03      	adds	r3, r0, #0
 800913e:	1c18      	adds	r0, r3, #0
 8009140:	f7fa f990 	bl	8003464 <__aeabi_f2d>
 8009144:	0002      	movs	r2, r0
 8009146:	000b      	movs	r3, r1
 8009148:	495b      	ldr	r1, [pc, #364]	@ (80092b8 <sen5x_measurement+0x208>)
 800914a:	0008      	movs	r0, r1
 800914c:	f016 f972 	bl	801f434 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009150:	4b52      	ldr	r3, [pc, #328]	@ (800929c <sen5x_measurement+0x1ec>)
 8009152:	889b      	ldrh	r3, [r3, #4]
 8009154:	4a55      	ldr	r2, [pc, #340]	@ (80092ac <sen5x_measurement+0x1fc>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <sen5x_measurement+0xd2>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800915a:	4b50      	ldr	r3, [pc, #320]	@ (800929c <sen5x_measurement+0x1ec>)
 800915c:	889b      	ldrh	r3, [r3, #4]
 800915e:	0018      	movs	r0, r3
 8009160:	f7f8 fa36 	bl	80015d0 <__aeabi_i2f>
 8009164:	1c03      	adds	r3, r0, #0
 8009166:	4952      	ldr	r1, [pc, #328]	@ (80092b0 <sen5x_measurement+0x200>)
 8009168:	1c18      	adds	r0, r3, #0
 800916a:	f7f7 fd33 	bl	8000bd4 <__aeabi_fdiv>
 800916e:	1c03      	adds	r3, r0, #0
 8009170:	1c18      	adds	r0, r3, #0
 8009172:	f7fa f977 	bl	8003464 <__aeabi_f2d>
 8009176:	0002      	movs	r2, r0
 8009178:	000b      	movs	r3, r1
 800917a:	4950      	ldr	r1, [pc, #320]	@ (80092bc <sen5x_measurement+0x20c>)
 800917c:	0008      	movs	r0, r1
 800917e:	f016 f959 	bl	801f434 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009182:	4b46      	ldr	r3, [pc, #280]	@ (800929c <sen5x_measurement+0x1ec>)
 8009184:	88db      	ldrh	r3, [r3, #6]
 8009186:	4a49      	ldr	r2, [pc, #292]	@ (80092ac <sen5x_measurement+0x1fc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d013      	beq.n	80091b4 <sen5x_measurement+0x104>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800918c:	4b43      	ldr	r3, [pc, #268]	@ (800929c <sen5x_measurement+0x1ec>)
 800918e:	88db      	ldrh	r3, [r3, #6]
 8009190:	0018      	movs	r0, r3
 8009192:	f7f8 fa1d 	bl	80015d0 <__aeabi_i2f>
 8009196:	1c03      	adds	r3, r0, #0
 8009198:	4945      	ldr	r1, [pc, #276]	@ (80092b0 <sen5x_measurement+0x200>)
 800919a:	1c18      	adds	r0, r3, #0
 800919c:	f7f7 fd1a 	bl	8000bd4 <__aeabi_fdiv>
 80091a0:	1c03      	adds	r3, r0, #0
 80091a2:	1c18      	adds	r0, r3, #0
 80091a4:	f7fa f95e 	bl	8003464 <__aeabi_f2d>
 80091a8:	0002      	movs	r2, r0
 80091aa:	000b      	movs	r3, r1
 80091ac:	4944      	ldr	r1, [pc, #272]	@ (80092c0 <sen5x_measurement+0x210>)
 80091ae:	0008      	movs	r0, r1
 80091b0:	f016 f940 	bl	801f434 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 80091b4:	4b39      	ldr	r3, [pc, #228]	@ (800929c <sen5x_measurement+0x1ec>)
 80091b6:	2208      	movs	r2, #8
 80091b8:	5e9b      	ldrsh	r3, [r3, r2]
 80091ba:	4a42      	ldr	r2, [pc, #264]	@ (80092c4 <sen5x_measurement+0x214>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d014      	beq.n	80091ea <sen5x_measurement+0x13a>
        printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80091c0:	4b36      	ldr	r3, [pc, #216]	@ (800929c <sen5x_measurement+0x1ec>)
 80091c2:	2208      	movs	r2, #8
 80091c4:	5e9b      	ldrsh	r3, [r3, r2]
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7f8 fa02 	bl	80015d0 <__aeabi_i2f>
 80091cc:	1c03      	adds	r3, r0, #0
 80091ce:	493e      	ldr	r1, [pc, #248]	@ (80092c8 <sen5x_measurement+0x218>)
 80091d0:	1c18      	adds	r0, r3, #0
 80091d2:	f7f7 fcff 	bl	8000bd4 <__aeabi_fdiv>
 80091d6:	1c03      	adds	r3, r0, #0
 80091d8:	1c18      	adds	r0, r3, #0
 80091da:	f7fa f943 	bl	8003464 <__aeabi_f2d>
 80091de:	0002      	movs	r2, r0
 80091e0:	000b      	movs	r3, r1
 80091e2:	493a      	ldr	r1, [pc, #232]	@ (80092cc <sen5x_measurement+0x21c>)
 80091e4:	0008      	movs	r0, r1
 80091e6:	f016 f925 	bl	801f434 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80091ea:	4b2c      	ldr	r3, [pc, #176]	@ (800929c <sen5x_measurement+0x1ec>)
 80091ec:	220a      	movs	r2, #10
 80091ee:	5e9b      	ldrsh	r3, [r3, r2]
 80091f0:	4a34      	ldr	r2, [pc, #208]	@ (80092c4 <sen5x_measurement+0x214>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d014      	beq.n	8009220 <sen5x_measurement+0x170>
        printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80091f6:	4b29      	ldr	r3, [pc, #164]	@ (800929c <sen5x_measurement+0x1ec>)
 80091f8:	220a      	movs	r2, #10
 80091fa:	5e9b      	ldrsh	r3, [r3, r2]
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7f8 f9e7 	bl	80015d0 <__aeabi_i2f>
 8009202:	1c03      	adds	r3, r0, #0
 8009204:	4932      	ldr	r1, [pc, #200]	@ (80092d0 <sen5x_measurement+0x220>)
 8009206:	1c18      	adds	r0, r3, #0
 8009208:	f7f7 fce4 	bl	8000bd4 <__aeabi_fdiv>
 800920c:	1c03      	adds	r3, r0, #0
 800920e:	1c18      	adds	r0, r3, #0
 8009210:	f7fa f928 	bl	8003464 <__aeabi_f2d>
 8009214:	0002      	movs	r2, r0
 8009216:	000b      	movs	r3, r1
 8009218:	492e      	ldr	r1, [pc, #184]	@ (80092d4 <sen5x_measurement+0x224>)
 800921a:	0008      	movs	r0, r1
 800921c:	f016 f90a 	bl	801f434 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009220:	4b1e      	ldr	r3, [pc, #120]	@ (800929c <sen5x_measurement+0x1ec>)
 8009222:	220c      	movs	r2, #12
 8009224:	5e9b      	ldrsh	r3, [r3, r2]
 8009226:	4a27      	ldr	r2, [pc, #156]	@ (80092c4 <sen5x_measurement+0x214>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d014      	beq.n	8009256 <sen5x_measurement+0x1a6>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 800922c:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <sen5x_measurement+0x1ec>)
 800922e:	220c      	movs	r2, #12
 8009230:	5e9b      	ldrsh	r3, [r3, r2]
 8009232:	0018      	movs	r0, r3
 8009234:	f7f8 f9cc 	bl	80015d0 <__aeabi_i2f>
 8009238:	1c03      	adds	r3, r0, #0
 800923a:	491d      	ldr	r1, [pc, #116]	@ (80092b0 <sen5x_measurement+0x200>)
 800923c:	1c18      	adds	r0, r3, #0
 800923e:	f7f7 fcc9 	bl	8000bd4 <__aeabi_fdiv>
 8009242:	1c03      	adds	r3, r0, #0
 8009244:	1c18      	adds	r0, r3, #0
 8009246:	f7fa f90d 	bl	8003464 <__aeabi_f2d>
 800924a:	0002      	movs	r2, r0
 800924c:	000b      	movs	r3, r1
 800924e:	4922      	ldr	r1, [pc, #136]	@ (80092d8 <sen5x_measurement+0x228>)
 8009250:	0008      	movs	r0, r1
 8009252:	f016 f8ef 	bl	801f434 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009256:	4b11      	ldr	r3, [pc, #68]	@ (800929c <sen5x_measurement+0x1ec>)
 8009258:	220e      	movs	r2, #14
 800925a:	5e9b      	ldrsh	r3, [r3, r2]
 800925c:	4a19      	ldr	r2, [pc, #100]	@ (80092c4 <sen5x_measurement+0x214>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d014      	beq.n	800928c <sen5x_measurement+0x1dc>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009262:	4b0e      	ldr	r3, [pc, #56]	@ (800929c <sen5x_measurement+0x1ec>)
 8009264:	220e      	movs	r2, #14
 8009266:	5e9b      	ldrsh	r3, [r3, r2]
 8009268:	0018      	movs	r0, r3
 800926a:	f7f8 f9b1 	bl	80015d0 <__aeabi_i2f>
 800926e:	1c03      	adds	r3, r0, #0
 8009270:	490f      	ldr	r1, [pc, #60]	@ (80092b0 <sen5x_measurement+0x200>)
 8009272:	1c18      	adds	r0, r3, #0
 8009274:	f7f7 fcae 	bl	8000bd4 <__aeabi_fdiv>
 8009278:	1c03      	adds	r3, r0, #0
 800927a:	1c18      	adds	r0, r3, #0
 800927c:	f7fa f8f2 	bl	8003464 <__aeabi_f2d>
 8009280:	0002      	movs	r2, r0
 8009282:	000b      	movs	r3, r1
 8009284:	4915      	ldr	r1, [pc, #84]	@ (80092dc <sen5x_measurement+0x22c>)
 8009286:	0008      	movs	r0, r1
 8009288:	f016 f8d4 	bl	801f434 <iprintf>
  }
  return error;
 800928c:	1dbb      	adds	r3, r7, #6
 800928e:	2200      	movs	r2, #0
 8009290:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	b002      	add	sp, #8
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	200011d0 	.word	0x200011d0
 80092a0:	08023bdc 	.word	0x08023bdc
 80092a4:	08023a24 	.word	0x08023a24
 80092a8:	200011cc 	.word	0x200011cc
 80092ac:	0000ffff 	.word	0x0000ffff
 80092b0:	41200000 	.word	0x41200000
 80092b4:	08023c10 	.word	0x08023c10
 80092b8:	08023c3c 	.word	0x08023c3c
 80092bc:	08023c68 	.word	0x08023c68
 80092c0:	08023c94 	.word	0x08023c94
 80092c4:	00007fff 	.word	0x00007fff
 80092c8:	42c80000 	.word	0x42c80000
 80092cc:	08023cc0 	.word	0x08023cc0
 80092d0:	43480000 	.word	0x43480000
 80092d4:	08023ce0 	.word	0x08023ce0
 80092d8:	08023d00 	.word	0x08023d00
 80092dc:	08023d18 	.word	0x08023d18

080092e0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80092e0:	b590      	push	{r4, r7, lr}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	6039      	str	r1, [r7, #0]
 80092e8:	0011      	movs	r1, r2
 80092ea:	1dfb      	adds	r3, r7, #7
 80092ec:	1c02      	adds	r2, r0, #0
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	1d3b      	adds	r3, r7, #4
 80092f2:	1c0a      	adds	r2, r1, #0
 80092f4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 80092f6:	1dfb      	adds	r3, r7, #7
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	18db      	adds	r3, r3, r3
 80092fe:	b299      	uxth	r1, r3
 8009300:	1d3b      	adds	r3, r7, #4
 8009302:	881b      	ldrh	r3, [r3, #0]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	4805      	ldr	r0, [pc, #20]	@ (800931c <sensirion_i2c_hal_read+0x3c>)
 8009308:	2464      	movs	r4, #100	@ 0x64
 800930a:	9400      	str	r4, [sp, #0]
 800930c:	f006 fc56 	bl	800fbbc <HAL_I2C_Master_Receive>
 8009310:	0003      	movs	r3, r0
 8009312:	b25b      	sxtb	r3, r3
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	b003      	add	sp, #12
 800931a:	bd90      	pop	{r4, r7, pc}
 800931c:	20000dac 	.word	0x20000dac

08009320 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b085      	sub	sp, #20
 8009324:	af02      	add	r7, sp, #8
 8009326:	6039      	str	r1, [r7, #0]
 8009328:	0011      	movs	r1, r2
 800932a:	1dfb      	adds	r3, r7, #7
 800932c:	1c02      	adds	r2, r0, #0
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	1d3b      	adds	r3, r7, #4
 8009332:	1c0a      	adds	r2, r1, #0
 8009334:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009336:	1dfb      	adds	r3, r7, #7
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	18db      	adds	r3, r3, r3
 800933e:	b299      	uxth	r1, r3
 8009340:	1d3b      	adds	r3, r7, #4
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	4805      	ldr	r0, [pc, #20]	@ (800935c <sensirion_i2c_hal_write+0x3c>)
 8009348:	2464      	movs	r4, #100	@ 0x64
 800934a:	9400      	str	r4, [sp, #0]
 800934c:	f006 fb2e 	bl	800f9ac <HAL_I2C_Master_Transmit>
 8009350:	0003      	movs	r3, r0
 8009352:	b25b      	sxtb	r3, r3
}
 8009354:	0018      	movs	r0, r3
 8009356:	46bd      	mov	sp, r7
 8009358:	b003      	add	sp, #12
 800935a:	bd90      	pop	{r4, r7, pc}
 800935c:	20000dac 	.word	0x20000dac

08009360 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	22fa      	movs	r2, #250	@ 0xfa
 800936c:	0091      	lsls	r1, r2, #2
 800936e:	0018      	movs	r0, r3
 8009370:	f7f6 ff18 	bl	80001a4 <__udivsi3>
 8009374:	0003      	movs	r3, r0
 8009376:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	22fa      	movs	r2, #250	@ 0xfa
 800937c:	0091      	lsls	r1, r2, #2
 800937e:	0018      	movs	r0, r3
 8009380:	f7f6 ff96 	bl	80002b0 <__aeabi_uidivmod>
 8009384:	1e0b      	subs	r3, r1, #0
 8009386:	d002      	beq.n	800938e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3301      	adds	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	0018      	movs	r0, r3
 8009392:	f004 ffcb 	bl	800e32c <HAL_Delay>
}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	46bd      	mov	sp, r7
 800939a:	b004      	add	sp, #16
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80093aa:	1d3b      	adds	r3, r7, #4
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 fc97 	bl	8009ce0 <sen5x_read_device_status>
 80093b2:	1e03      	subs	r3, r0, #0
 80093b4:	d007      	beq.n	80093c6 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 80093b6:	4a28      	ldr	r2, [pc, #160]	@ (8009458 <sen5x_check_for_errors+0xb8>)
 80093b8:	4b28      	ldr	r3, [pc, #160]	@ (800945c <sen5x_check_for_errors+0xbc>)
 80093ba:	0019      	movs	r1, r3
 80093bc:	2001      	movs	r0, #1
 80093be:	f004 fb5f 	bl	800da80 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e043      	b.n	800944e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 80093cc:	2300      	movs	r3, #0
 80093ce:	e03e      	b.n	800944e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	2380      	movs	r3, #128	@ 0x80
 80093d4:	039b      	lsls	r3, r3, #14
 80093d6:	4013      	ands	r3, r2
 80093d8:	d005      	beq.n	80093e6 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 80093da:	4a21      	ldr	r2, [pc, #132]	@ (8009460 <sen5x_check_for_errors+0xc0>)
 80093dc:	4b21      	ldr	r3, [pc, #132]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 80093de:	0019      	movs	r1, r3
 80093e0:	2003      	movs	r0, #3
 80093e2:	f004 fb4d 	bl	800da80 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	2380      	movs	r3, #128	@ 0x80
 80093ea:	031b      	lsls	r3, r3, #12
 80093ec:	4013      	ands	r3, r2
 80093ee:	d005      	beq.n	80093fc <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 80093f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009468 <sen5x_check_for_errors+0xc8>)
 80093f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 80093f4:	0019      	movs	r1, r3
 80093f6:	2003      	movs	r0, #3
 80093f8:	f004 fb42 	bl	800da80 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2280      	movs	r2, #128	@ 0x80
 8009400:	4013      	ands	r3, r2
 8009402:	d005      	beq.n	8009410 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009404:	4a19      	ldr	r2, [pc, #100]	@ (800946c <sen5x_check_for_errors+0xcc>)
 8009406:	4b17      	ldr	r3, [pc, #92]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 8009408:	0019      	movs	r1, r3
 800940a:	2003      	movs	r0, #3
 800940c:	f004 fb38 	bl	800da80 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2240      	movs	r2, #64	@ 0x40
 8009414:	4013      	ands	r3, r2
 8009416:	d005      	beq.n	8009424 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009418:	4a15      	ldr	r2, [pc, #84]	@ (8009470 <sen5x_check_for_errors+0xd0>)
 800941a:	4b12      	ldr	r3, [pc, #72]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 800941c:	0019      	movs	r1, r3
 800941e:	2003      	movs	r0, #3
 8009420:	f004 fb2e 	bl	800da80 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	4013      	ands	r3, r2
 800942a:	d005      	beq.n	8009438 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800942c:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <sen5x_check_for_errors+0xd4>)
 800942e:	4b0d      	ldr	r3, [pc, #52]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 8009430:	0019      	movs	r1, r3
 8009432:	2003      	movs	r0, #3
 8009434:	f004 fb24 	bl	800da80 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2210      	movs	r2, #16
 800943c:	4013      	ands	r3, r2
 800943e:	d005      	beq.n	800944c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009440:	4a0d      	ldr	r2, [pc, #52]	@ (8009478 <sen5x_check_for_errors+0xd8>)
 8009442:	4b08      	ldr	r3, [pc, #32]	@ (8009464 <sen5x_check_for_errors+0xc4>)
 8009444:	0019      	movs	r1, r3
 8009446:	2003      	movs	r0, #3
 8009448:	f004 fb1a 	bl	800da80 <CreateLine>
  }
  return 1;
 800944c:	2301      	movs	r3, #1
}
 800944e:	0018      	movs	r0, r3
 8009450:	46bd      	mov	sp, r7
 8009452:	b002      	add	sp, #8
 8009454:	bd80      	pop	{r7, pc}
 8009456:	46c0      	nop			@ (mov r8, r8)
 8009458:	08023d30 	.word	0x08023d30
 800945c:	08023a24 	.word	0x08023a24
 8009460:	08023d5c 	.word	0x08023d5c
 8009464:	08023958 	.word	0x08023958
 8009468:	08023d7c 	.word	0x08023d7c
 800946c:	08023d98 	.word	0x08023d98
 8009470:	08023dbc 	.word	0x08023dbc
 8009474:	08023ddc 	.word	0x08023ddc
 8009478:	08023df0 	.word	0x08023df0

0800947c <set_light_on_state>:

void set_light_on_state(void) {
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009480:	4b15      	ldr	r3, [pc, #84]	@ (80094d8 <set_light_on_state+0x5c>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2201      	movs	r2, #1
 8009486:	4053      	eors	r3, r2
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d008      	beq.n	80094a0 <set_light_on_state+0x24>
    sen5x_Power_On();
 800948e:	f7ff fc03 	bl	8008c98 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009492:	4a12      	ldr	r2, [pc, #72]	@ (80094dc <set_light_on_state+0x60>)
 8009494:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <set_light_on_state+0x64>)
 8009496:	0019      	movs	r1, r3
 8009498:	2003      	movs	r0, #3
 800949a:	f004 faf1 	bl	800da80 <CreateLine>
 800949e:	e00a      	b.n	80094b6 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 80094a0:	f004 ff3a 	bl	800e318 <HAL_GetTick>
 80094a4:	0002      	movs	r2, r0
 80094a6:	4b0f      	ldr	r3, [pc, #60]	@ (80094e4 <set_light_on_state+0x68>)
 80094a8:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 80094aa:	4a0f      	ldr	r2, [pc, #60]	@ (80094e8 <set_light_on_state+0x6c>)
 80094ac:	4b0c      	ldr	r3, [pc, #48]	@ (80094e0 <set_light_on_state+0x64>)
 80094ae:	0019      	movs	r1, r3
 80094b0:	2003      	movs	r0, #3
 80094b2:	f004 fae5 	bl	800da80 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start full measurement mode
 80094b6:	f7ff fd4f 	bl	8008f58 <sen5x_lightup_measurement>
 80094ba:	1e03      	subs	r3, r0, #0
 80094bc:	d005      	beq.n	80094ca <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 80094be:	4a0b      	ldr	r2, [pc, #44]	@ (80094ec <set_light_on_state+0x70>)
 80094c0:	4b0b      	ldr	r3, [pc, #44]	@ (80094f0 <set_light_on_state+0x74>)
 80094c2:	0019      	movs	r1, r3
 80094c4:	2001      	movs	r0, #1
 80094c6:	f004 fadb 	bl	800da80 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 80094ca:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <set_light_on_state+0x78>)
 80094cc:	2203      	movs	r2, #3
 80094ce:	701a      	strb	r2, [r3, #0]
}
 80094d0:	46c0      	nop			@ (mov r8, r8)
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	46c0      	nop			@ (mov r8, r8)
 80094d8:	200011c5 	.word	0x200011c5
 80094dc:	08023e2c 	.word	0x08023e2c
 80094e0:	08023958 	.word	0x08023958
 80094e4:	200011c8 	.word	0x200011c8
 80094e8:	08023e58 	.word	0x08023e58
 80094ec:	08023e70 	.word	0x08023e70
 80094f0:	08023a24 	.word	0x08023a24
 80094f4:	20000081 	.word	0x20000081

080094f8 <sen5x_statemachine>:

void sen5x_statemachine() {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
  bool data_ready = false;
 80094fe:	1dfb      	adds	r3, r7, #7
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009504:	4b6c      	ldr	r3, [pc, #432]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	0018      	movs	r0, r3
 800950a:	f004 fa63 	bl	800d9d4 <TimestampIsReached>
 800950e:	1e03      	subs	r3, r0, #0
 8009510:	d100      	bne.n	8009514 <sen5x_statemachine+0x1c>
 8009512:	e0cc      	b.n	80096ae <sen5x_statemachine+0x1b6>
    switch (PMsamplesState) {
 8009514:	4b69      	ldr	r3, [pc, #420]	@ (80096bc <sen5x_statemachine+0x1c4>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b05      	cmp	r3, #5
 800951a:	d900      	bls.n	800951e <sen5x_statemachine+0x26>
 800951c:	e0c7      	b.n	80096ae <sen5x_statemachine+0x1b6>
 800951e:	009a      	lsls	r2, r3, #2
 8009520:	4b67      	ldr	r3, [pc, #412]	@ (80096c0 <sen5x_statemachine+0x1c8>)
 8009522:	18d3      	adds	r3, r2, r3
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009528:	4a66      	ldr	r2, [pc, #408]	@ (80096c4 <sen5x_statemachine+0x1cc>)
 800952a:	4b67      	ldr	r3, [pc, #412]	@ (80096c8 <sen5x_statemachine+0x1d0>)
 800952c:	0019      	movs	r1, r3
 800952e:	2001      	movs	r0, #1
 8009530:	f004 faa6 	bl	800da80 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009534:	f004 fef0 	bl	800e318 <HAL_GetTick>
 8009538:	0003      	movs	r3, r0
 800953a:	4a64      	ldr	r2, [pc, #400]	@ (80096cc <sen5x_statemachine+0x1d4>)
 800953c:	189a      	adds	r2, r3, r2
 800953e:	4b5e      	ldr	r3, [pc, #376]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 8009540:	601a      	str	r2, [r3, #0]
      break;
 8009542:	e0b4      	b.n	80096ae <sen5x_statemachine+0x1b6>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009544:	f004 fee8 	bl	800e318 <HAL_GetTick>
 8009548:	0003      	movs	r3, r0
 800954a:	4a61      	ldr	r2, [pc, #388]	@ (80096d0 <sen5x_statemachine+0x1d8>)
 800954c:	189a      	adds	r2, r3, r2
 800954e:	4b5a      	ldr	r3, [pc, #360]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 8009550:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009552:	f7ff ff93 	bl	800947c <set_light_on_state>
      break;
 8009556:	e0aa      	b.n	80096ae <sen5x_statemachine+0x1b6>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 8009558:	4b58      	ldr	r3, [pc, #352]	@ (80096bc <sen5x_statemachine+0x1c4>)
 800955a:	2202      	movs	r2, #2
 800955c:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800955e:	4b5d      	ldr	r3, [pc, #372]	@ (80096d4 <sen5x_statemachine+0x1dc>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b05      	cmp	r3, #5
 8009564:	d905      	bls.n	8009572 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009566:	4b55      	ldr	r3, [pc, #340]	@ (80096bc <sen5x_statemachine+0x1c4>)
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800956c:	f7ff fbb4 	bl	8008cd8 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009570:	e09a      	b.n	80096a8 <sen5x_statemachine+0x1b0>
        if (sen5x_check_for_errors()) {
 8009572:	f7ff ff15 	bl	80093a0 <sen5x_check_for_errors>
 8009576:	1e03      	subs	r3, r0, #0
 8009578:	d100      	bne.n	800957c <sen5x_statemachine+0x84>
 800957a:	e095      	b.n	80096a8 <sen5x_statemachine+0x1b0>
          if (sen5x_device_reset()) {
 800957c:	f000 fc02 	bl	8009d84 <sen5x_device_reset>
 8009580:	1e03      	subs	r3, r0, #0
 8009582:	d006      	beq.n	8009592 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009584:	4a54      	ldr	r2, [pc, #336]	@ (80096d8 <sen5x_statemachine+0x1e0>)
 8009586:	4b50      	ldr	r3, [pc, #320]	@ (80096c8 <sen5x_statemachine+0x1d0>)
 8009588:	0019      	movs	r1, r3
 800958a:	2001      	movs	r0, #1
 800958c:	f004 fa78 	bl	800da80 <CreateLine>
 8009590:	e005      	b.n	800959e <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009592:	4a52      	ldr	r2, [pc, #328]	@ (80096dc <sen5x_statemachine+0x1e4>)
 8009594:	4b52      	ldr	r3, [pc, #328]	@ (80096e0 <sen5x_statemachine+0x1e8>)
 8009596:	0019      	movs	r1, r3
 8009598:	2002      	movs	r0, #2
 800959a:	f004 fa71 	bl	800da80 <CreateLine>
          sen5xErrors++;
 800959e:	4b4d      	ldr	r3, [pc, #308]	@ (80096d4 <sen5x_statemachine+0x1dc>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	3301      	adds	r3, #1
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	4b4b      	ldr	r3, [pc, #300]	@ (80096d4 <sen5x_statemachine+0x1dc>)
 80095a8:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 80095aa:	f004 feb5 	bl	800e318 <HAL_GetTick>
 80095ae:	0003      	movs	r3, r0
 80095b0:	3396      	adds	r3, #150	@ 0x96
 80095b2:	001a      	movs	r2, r3
 80095b4:	4b40      	ldr	r3, [pc, #256]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 80095b6:	601a      	str	r2, [r3, #0]
      break;
 80095b8:	e076      	b.n	80096a8 <sen5x_statemachine+0x1b0>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 80095ba:	1dfb      	adds	r3, r7, #7
 80095bc:	0018      	movs	r0, r3
 80095be:	f000 f8fd 	bl	80097bc <sen5x_read_data_ready>
      if (data_ready) {
 80095c2:	1dfb      	adds	r3, r7, #7
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d100      	bne.n	80095cc <sen5x_statemachine+0xd4>
 80095ca:	e06f      	b.n	80096ac <sen5x_statemachine+0x1b4>
        if (sen5x_measurement()) {
 80095cc:	f7ff fd70 	bl	80090b0 <sen5x_measurement>
 80095d0:	1e03      	subs	r3, r0, #0
 80095d2:	d005      	beq.n	80095e0 <sen5x_statemachine+0xe8>
          Error("Error executing sen5x_measurement()");
 80095d4:	4a43      	ldr	r2, [pc, #268]	@ (80096e4 <sen5x_statemachine+0x1ec>)
 80095d6:	4b3c      	ldr	r3, [pc, #240]	@ (80096c8 <sen5x_statemachine+0x1d0>)
 80095d8:	0019      	movs	r1, r3
 80095da:	2001      	movs	r0, #1
 80095dc:	f004 fa50 	bl	800da80 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 80095e0:	4b41      	ldr	r3, [pc, #260]	@ (80096e8 <sen5x_statemachine+0x1f0>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <sen5x_statemachine+0xf6>
            PMsamplesState = CLEAN_FAN;
 80095e8:	4b34      	ldr	r3, [pc, #208]	@ (80096bc <sen5x_statemachine+0x1c4>)
 80095ea:	2204      	movs	r2, #4
 80095ec:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 80095ee:	4b3e      	ldr	r3, [pc, #248]	@ (80096e8 <sen5x_statemachine+0x1f0>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	3301      	adds	r3, #1
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	4b3c      	ldr	r3, [pc, #240]	@ (80096e8 <sen5x_statemachine+0x1f0>)
 80095f8:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 32) { // about two times a minute
 80095fa:	4b3b      	ldr	r3, [pc, #236]	@ (80096e8 <sen5x_statemachine+0x1f0>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d154      	bne.n	80096ac <sen5x_statemachine+0x1b4>
          sen5xSamples = 1;  // enable display on serial
 8009602:	4b39      	ldr	r3, [pc, #228]	@ (80096e8 <sen5x_statemachine+0x1f0>)
 8009604:	2201      	movs	r2, #1
 8009606:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8009608:	e050      	b.n	80096ac <sen5x_statemachine+0x1b4>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 800960a:	f7fd f90d 	bl	8006828 <RTC_GetWeekday>
 800960e:	0003      	movs	r3, r0
 8009610:	2b01      	cmp	r3, #1
 8009612:	d118      	bne.n	8009646 <sen5x_statemachine+0x14e>
 8009614:	4b35      	ldr	r3, [pc, #212]	@ (80096ec <sen5x_statemachine+0x1f4>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	2201      	movs	r2, #1
 800961a:	4053      	eors	r3, r2
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d011      	beq.n	8009646 <sen5x_statemachine+0x14e>
        sen5x_start_fan_cleaning();
 8009622:	f000 f9b1 	bl	8009988 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009626:	4a32      	ldr	r2, [pc, #200]	@ (80096f0 <sen5x_statemachine+0x1f8>)
 8009628:	4b2d      	ldr	r3, [pc, #180]	@ (80096e0 <sen5x_statemachine+0x1e8>)
 800962a:	0019      	movs	r1, r3
 800962c:	2002      	movs	r0, #2
 800962e:	f004 fa27 	bl	800da80 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;
 8009632:	f004 fe71 	bl	800e318 <HAL_GetTick>
 8009636:	0003      	movs	r3, r0
 8009638:	4a2e      	ldr	r2, [pc, #184]	@ (80096f4 <sen5x_statemachine+0x1fc>)
 800963a:	189a      	adds	r2, r3, r2
 800963c:	4b1e      	ldr	r3, [pc, #120]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 800963e:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009640:	4b2a      	ldr	r3, [pc, #168]	@ (80096ec <sen5x_statemachine+0x1f4>)
 8009642:	2201      	movs	r2, #1
 8009644:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009646:	4b1d      	ldr	r3, [pc, #116]	@ (80096bc <sen5x_statemachine+0x1c4>)
 8009648:	2205      	movs	r2, #5
 800964a:	701a      	strb	r2, [r3, #0]
      break;
 800964c:	e02f      	b.n	80096ae <sen5x_statemachine+0x1b6>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 800964e:	4b2a      	ldr	r3, [pc, #168]	@ (80096f8 <sen5x_statemachine+0x200>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2201      	movs	r2, #1
 8009654:	4053      	eors	r3, r2
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d019      	beq.n	8009690 <sen5x_statemachine+0x198>
        if (sen5x_extinguish_measurement()) {
 800965c:	f7ff fca0 	bl	8008fa0 <sen5x_extinguish_measurement>
 8009660:	1e03      	subs	r3, r0, #0
 8009662:	d005      	beq.n	8009670 <sen5x_statemachine+0x178>
          Error("Error executing sen5x_extinguish_measurement()");
 8009664:	4a25      	ldr	r2, [pc, #148]	@ (80096fc <sen5x_statemachine+0x204>)
 8009666:	4b18      	ldr	r3, [pc, #96]	@ (80096c8 <sen5x_statemachine+0x1d0>)
 8009668:	0019      	movs	r1, r3
 800966a:	2001      	movs	r0, #1
 800966c:	f004 fa08 	bl	800da80 <CreateLine>
        }
        sen5xSamples = 0;
 8009670:	4b1d      	ldr	r3, [pc, #116]	@ (80096e8 <sen5x_statemachine+0x1f0>)
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009676:	f7ff fb2f 	bl	8008cd8 <sen5x_Power_Off>
        sen5xReadTimer = HAL_GetTick() + 100;
 800967a:	f004 fe4d 	bl	800e318 <HAL_GetTick>
 800967e:	0003      	movs	r3, r0
 8009680:	3364      	adds	r3, #100	@ 0x64
 8009682:	001a      	movs	r2, r3
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 8009686:	601a      	str	r2, [r3, #0]
        PMsamplesState = LIGHT_OUT;
 8009688:	4b0c      	ldr	r3, [pc, #48]	@ (80096bc <sen5x_statemachine+0x1c4>)
 800968a:	2201      	movs	r2, #1
 800968c:	701a      	strb	r2, [r3, #0]
 800968e:	e002      	b.n	8009696 <sen5x_statemachine+0x19e>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009690:	4b0a      	ldr	r3, [pc, #40]	@ (80096bc <sen5x_statemachine+0x1c4>)
 8009692:	2203      	movs	r2, #3
 8009694:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000; //some more less then an hour
 8009696:	f004 fe3f 	bl	800e318 <HAL_GetTick>
 800969a:	0003      	movs	r3, r0
 800969c:	22fa      	movs	r2, #250	@ 0xfa
 800969e:	0092      	lsls	r2, r2, #2
 80096a0:	189a      	adds	r2, r3, r2
 80096a2:	4b05      	ldr	r3, [pc, #20]	@ (80096b8 <sen5x_statemachine+0x1c0>)
 80096a4:	601a      	str	r2, [r3, #0]
    }
  }
}
 80096a6:	e002      	b.n	80096ae <sen5x_statemachine+0x1b6>
      break;
 80096a8:	46c0      	nop			@ (mov r8, r8)
 80096aa:	e000      	b.n	80096ae <sen5x_statemachine+0x1b6>
      break;
 80096ac:	46c0      	nop			@ (mov r8, r8)
}
 80096ae:	46c0      	nop			@ (mov r8, r8)
 80096b0:	46bd      	mov	sp, r7
 80096b2:	b002      	add	sp, #8
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	46c0      	nop			@ (mov r8, r8)
 80096b8:	200011c8 	.word	0x200011c8
 80096bc:	20000081 	.word	0x20000081
 80096c0:	0802479c 	.word	0x0802479c
 80096c4:	08023e9c 	.word	0x08023e9c
 80096c8:	08023a24 	.word	0x08023a24
 80096cc:	002fefd8 	.word	0x002fefd8
 80096d0:	00005910 	.word	0x00005910
 80096d4:	200011cd 	.word	0x200011cd
 80096d8:	08023ecc 	.word	0x08023ecc
 80096dc:	08023ee4 	.word	0x08023ee4
 80096e0:	08023b78 	.word	0x08023b78
 80096e4:	08023efc 	.word	0x08023efc
 80096e8:	200011cc 	.word	0x200011cc
 80096ec:	200011c4 	.word	0x200011c4
 80096f0:	08023f20 	.word	0x08023f20
 80096f4:	00002710 	.word	0x00002710
 80096f8:	2000214d 	.word	0x2000214d
 80096fc:	08023f38 	.word	0x08023f38

08009700 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009700:	b590      	push	{r4, r7, lr}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009706:	1dbb      	adds	r3, r7, #6
 8009708:	2200      	movs	r2, #0
 800970a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800970c:	1dbc      	adds	r4, r7, #6
 800970e:	1dbb      	adds	r3, r7, #6
 8009710:	8819      	ldrh	r1, [r3, #0]
 8009712:	003b      	movs	r3, r7
 8009714:	2221      	movs	r2, #33	@ 0x21
 8009716:	0018      	movs	r0, r3
 8009718:	f001 fb26 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 800971c:	0003      	movs	r3, r0
 800971e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009720:	1d3c      	adds	r4, r7, #4
 8009722:	1dbb      	adds	r3, r7, #6
 8009724:	881a      	ldrh	r2, [r3, #0]
 8009726:	003b      	movs	r3, r7
 8009728:	0019      	movs	r1, r3
 800972a:	2069      	movs	r0, #105	@ 0x69
 800972c:	f001 fba0 	bl	800ae70 <sensirion_i2c_write_data>
 8009730:	0003      	movs	r3, r0
 8009732:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009734:	1d3b      	adds	r3, r7, #4
 8009736:	2200      	movs	r2, #0
 8009738:	5e9b      	ldrsh	r3, [r3, r2]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <sen5x_start_measurement+0x46>
        return error;
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	2200      	movs	r2, #0
 8009742:	5e9b      	ldrsh	r3, [r3, r2]
 8009744:	e004      	b.n	8009750 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009746:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <sen5x_start_measurement+0x58>)
 8009748:	0018      	movs	r0, r3
 800974a:	f7ff fe09 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800974e:	2300      	movs	r3, #0
}
 8009750:	0018      	movs	r0, r3
 8009752:	46bd      	mov	sp, r7
 8009754:	b003      	add	sp, #12
 8009756:	bd90      	pop	{r4, r7, pc}
 8009758:	0000c350 	.word	0x0000c350

0800975c <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 800975c:	b590      	push	{r4, r7, lr}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009762:	1dbb      	adds	r3, r7, #6
 8009764:	2200      	movs	r2, #0
 8009766:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009768:	1dbc      	adds	r4, r7, #6
 800976a:	2382      	movs	r3, #130	@ 0x82
 800976c:	005a      	lsls	r2, r3, #1
 800976e:	1dbb      	adds	r3, r7, #6
 8009770:	8819      	ldrh	r1, [r3, #0]
 8009772:	003b      	movs	r3, r7
 8009774:	0018      	movs	r0, r3
 8009776:	f001 faf7 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 800977a:	0003      	movs	r3, r0
 800977c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800977e:	1d3c      	adds	r4, r7, #4
 8009780:	1dbb      	adds	r3, r7, #6
 8009782:	881a      	ldrh	r2, [r3, #0]
 8009784:	003b      	movs	r3, r7
 8009786:	0019      	movs	r1, r3
 8009788:	2069      	movs	r0, #105	@ 0x69
 800978a:	f001 fb71 	bl	800ae70 <sensirion_i2c_write_data>
 800978e:	0003      	movs	r3, r0
 8009790:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	2200      	movs	r2, #0
 8009796:	5e9b      	ldrsh	r3, [r3, r2]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <sen5x_stop_measurement+0x48>
        return error;
 800979c:	1d3b      	adds	r3, r7, #4
 800979e:	2200      	movs	r2, #0
 80097a0:	5e9b      	ldrsh	r3, [r3, r2]
 80097a2:	e004      	b.n	80097ae <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 80097a4:	4b04      	ldr	r3, [pc, #16]	@ (80097b8 <sen5x_stop_measurement+0x5c>)
 80097a6:	0018      	movs	r0, r3
 80097a8:	f7ff fdda 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	0018      	movs	r0, r3
 80097b0:	46bd      	mov	sp, r7
 80097b2:	b003      	add	sp, #12
 80097b4:	bd90      	pop	{r4, r7, pc}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	00030d40 	.word	0x00030d40

080097bc <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 80097bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 80097c4:	250e      	movs	r5, #14
 80097c6:	197b      	adds	r3, r7, r5
 80097c8:	2200      	movs	r2, #0
 80097ca:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 80097cc:	197c      	adds	r4, r7, r5
 80097ce:	4a22      	ldr	r2, [pc, #136]	@ (8009858 <sen5x_read_data_ready+0x9c>)
 80097d0:	197b      	adds	r3, r7, r5
 80097d2:	8819      	ldrh	r1, [r3, #0]
 80097d4:	2308      	movs	r3, #8
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	0018      	movs	r0, r3
 80097da:	f001 fac5 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 80097de:	0003      	movs	r3, r0
 80097e0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80097e2:	260c      	movs	r6, #12
 80097e4:	19bc      	adds	r4, r7, r6
 80097e6:	197b      	adds	r3, r7, r5
 80097e8:	881a      	ldrh	r2, [r3, #0]
 80097ea:	2308      	movs	r3, #8
 80097ec:	18fb      	adds	r3, r7, r3
 80097ee:	0019      	movs	r1, r3
 80097f0:	2069      	movs	r0, #105	@ 0x69
 80097f2:	f001 fb3d 	bl	800ae70 <sensirion_i2c_write_data>
 80097f6:	0003      	movs	r3, r0
 80097f8:	8023      	strh	r3, [r4, #0]
    if (error) {
 80097fa:	19bb      	adds	r3, r7, r6
 80097fc:	2200      	movs	r2, #0
 80097fe:	5e9b      	ldrsh	r3, [r3, r2]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <sen5x_read_data_ready+0x50>
        return error;
 8009804:	19bb      	adds	r3, r7, r6
 8009806:	2200      	movs	r2, #0
 8009808:	5e9b      	ldrsh	r3, [r3, r2]
 800980a:	e020      	b.n	800984e <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800980c:	4b13      	ldr	r3, [pc, #76]	@ (800985c <sen5x_read_data_ready+0xa0>)
 800980e:	0018      	movs	r0, r3
 8009810:	f7ff fda6 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009814:	250c      	movs	r5, #12
 8009816:	197c      	adds	r4, r7, r5
 8009818:	2308      	movs	r3, #8
 800981a:	18fb      	adds	r3, r7, r3
 800981c:	2202      	movs	r2, #2
 800981e:	0019      	movs	r1, r3
 8009820:	2069      	movs	r0, #105	@ 0x69
 8009822:	f001 fb3d 	bl	800aea0 <sensirion_i2c_read_data_inplace>
 8009826:	0003      	movs	r3, r0
 8009828:	8023      	strh	r3, [r4, #0]
    if (error) {
 800982a:	197b      	adds	r3, r7, r5
 800982c:	2200      	movs	r2, #0
 800982e:	5e9b      	ldrsh	r3, [r3, r2]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <sen5x_read_data_ready+0x80>
        return error;
 8009834:	197b      	adds	r3, r7, r5
 8009836:	2200      	movs	r2, #0
 8009838:	5e9b      	ldrsh	r3, [r3, r2]
 800983a:	e008      	b.n	800984e <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800983c:	2308      	movs	r3, #8
 800983e:	18fb      	adds	r3, r7, r3
 8009840:	785b      	ldrb	r3, [r3, #1]
 8009842:	1e5a      	subs	r2, r3, #1
 8009844:	4193      	sbcs	r3, r2
 8009846:	b2da      	uxtb	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800984c:	2300      	movs	r3, #0
}
 800984e:	0018      	movs	r0, r3
 8009850:	46bd      	mov	sp, r7
 8009852:	b005      	add	sp, #20
 8009854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009856:	46c0      	nop			@ (mov r8, r8)
 8009858:	00000202 	.word	0x00000202
 800985c:	00004e20 	.word	0x00004e20

08009860 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009862:	b08d      	sub	sp, #52	@ 0x34
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800986e:	252e      	movs	r5, #46	@ 0x2e
 8009870:	197b      	adds	r3, r7, r5
 8009872:	2200      	movs	r2, #0
 8009874:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009876:	197c      	adds	r4, r7, r5
 8009878:	23f1      	movs	r3, #241	@ 0xf1
 800987a:	009a      	lsls	r2, r3, #2
 800987c:	197b      	adds	r3, r7, r5
 800987e:	8819      	ldrh	r1, [r3, #0]
 8009880:	2314      	movs	r3, #20
 8009882:	18fb      	adds	r3, r7, r3
 8009884:	0018      	movs	r0, r3
 8009886:	f001 fa6f 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 800988a:	0003      	movs	r3, r0
 800988c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800988e:	262c      	movs	r6, #44	@ 0x2c
 8009890:	19bc      	adds	r4, r7, r6
 8009892:	197b      	adds	r3, r7, r5
 8009894:	881a      	ldrh	r2, [r3, #0]
 8009896:	2314      	movs	r3, #20
 8009898:	18fb      	adds	r3, r7, r3
 800989a:	0019      	movs	r1, r3
 800989c:	2069      	movs	r0, #105	@ 0x69
 800989e:	f001 fae7 	bl	800ae70 <sensirion_i2c_write_data>
 80098a2:	0003      	movs	r3, r0
 80098a4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098a6:	19bb      	adds	r3, r7, r6
 80098a8:	2200      	movs	r2, #0
 80098aa:	5e9b      	ldrsh	r3, [r3, r2]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <sen5x_read_measured_values+0x58>
        return error;
 80098b0:	19bb      	adds	r3, r7, r6
 80098b2:	2200      	movs	r2, #0
 80098b4:	5e9b      	ldrsh	r3, [r3, r2]
 80098b6:	e060      	b.n	800997a <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80098b8:	4b32      	ldr	r3, [pc, #200]	@ (8009984 <sen5x_read_measured_values+0x124>)
 80098ba:	0018      	movs	r0, r3
 80098bc:	f7ff fd50 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 80098c0:	252c      	movs	r5, #44	@ 0x2c
 80098c2:	197c      	adds	r4, r7, r5
 80098c4:	2314      	movs	r3, #20
 80098c6:	18fb      	adds	r3, r7, r3
 80098c8:	2210      	movs	r2, #16
 80098ca:	0019      	movs	r1, r3
 80098cc:	2069      	movs	r0, #105	@ 0x69
 80098ce:	f001 fae7 	bl	800aea0 <sensirion_i2c_read_data_inplace>
 80098d2:	0003      	movs	r3, r0
 80098d4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098d6:	197b      	adds	r3, r7, r5
 80098d8:	2200      	movs	r2, #0
 80098da:	5e9b      	ldrsh	r3, [r3, r2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <sen5x_read_measured_values+0x88>
        return error;
 80098e0:	197b      	adds	r3, r7, r5
 80098e2:	2200      	movs	r2, #0
 80098e4:	5e9b      	ldrsh	r3, [r3, r2]
 80098e6:	e048      	b.n	800997a <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80098e8:	2414      	movs	r4, #20
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	0018      	movs	r0, r3
 80098ee:	f000 fa79 	bl	8009de4 <sensirion_common_bytes_to_uint16_t>
 80098f2:	0003      	movs	r3, r0
 80098f4:	001a      	movs	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80098fa:	193b      	adds	r3, r7, r4
 80098fc:	3302      	adds	r3, #2
 80098fe:	0018      	movs	r0, r3
 8009900:	f000 fa70 	bl	8009de4 <sensirion_common_bytes_to_uint16_t>
 8009904:	0003      	movs	r3, r0
 8009906:	001a      	movs	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800990c:	193b      	adds	r3, r7, r4
 800990e:	3304      	adds	r3, #4
 8009910:	0018      	movs	r0, r3
 8009912:	f000 fa67 	bl	8009de4 <sensirion_common_bytes_to_uint16_t>
 8009916:	0003      	movs	r3, r0
 8009918:	001a      	movs	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800991e:	193b      	adds	r3, r7, r4
 8009920:	3306      	adds	r3, #6
 8009922:	0018      	movs	r0, r3
 8009924:	f000 fa5e 	bl	8009de4 <sensirion_common_bytes_to_uint16_t>
 8009928:	0003      	movs	r3, r0
 800992a:	001a      	movs	r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009930:	193b      	adds	r3, r7, r4
 8009932:	3308      	adds	r3, #8
 8009934:	0018      	movs	r0, r3
 8009936:	f000 fa81 	bl	8009e3c <sensirion_common_bytes_to_int16_t>
 800993a:	0003      	movs	r3, r0
 800993c:	001a      	movs	r2, r3
 800993e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009940:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009942:	193b      	adds	r3, r7, r4
 8009944:	330a      	adds	r3, #10
 8009946:	0018      	movs	r0, r3
 8009948:	f000 fa78 	bl	8009e3c <sensirion_common_bytes_to_int16_t>
 800994c:	0003      	movs	r3, r0
 800994e:	001a      	movs	r2, r3
 8009950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009952:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009954:	193b      	adds	r3, r7, r4
 8009956:	330c      	adds	r3, #12
 8009958:	0018      	movs	r0, r3
 800995a:	f000 fa6f 	bl	8009e3c <sensirion_common_bytes_to_int16_t>
 800995e:	0003      	movs	r3, r0
 8009960:	001a      	movs	r2, r3
 8009962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009964:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009966:	193b      	adds	r3, r7, r4
 8009968:	330e      	adds	r3, #14
 800996a:	0018      	movs	r0, r3
 800996c:	f000 fa66 	bl	8009e3c <sensirion_common_bytes_to_int16_t>
 8009970:	0003      	movs	r3, r0
 8009972:	001a      	movs	r2, r3
 8009974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009976:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009978:	2300      	movs	r3, #0
}
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	b00d      	add	sp, #52	@ 0x34
 8009980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009982:	46c0      	nop			@ (mov r8, r8)
 8009984:	00004e20 	.word	0x00004e20

08009988 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009988:	b590      	push	{r4, r7, lr}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800998e:	1dbb      	adds	r3, r7, #6
 8009990:	2200      	movs	r2, #0
 8009992:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009994:	1dbc      	adds	r4, r7, #6
 8009996:	4a12      	ldr	r2, [pc, #72]	@ (80099e0 <sen5x_start_fan_cleaning+0x58>)
 8009998:	1dbb      	adds	r3, r7, #6
 800999a:	8819      	ldrh	r1, [r3, #0]
 800999c:	003b      	movs	r3, r7
 800999e:	0018      	movs	r0, r3
 80099a0:	f001 f9e2 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 80099a4:	0003      	movs	r3, r0
 80099a6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80099a8:	1d3c      	adds	r4, r7, #4
 80099aa:	1dbb      	adds	r3, r7, #6
 80099ac:	881a      	ldrh	r2, [r3, #0]
 80099ae:	003b      	movs	r3, r7
 80099b0:	0019      	movs	r1, r3
 80099b2:	2069      	movs	r0, #105	@ 0x69
 80099b4:	f001 fa5c 	bl	800ae70 <sensirion_i2c_write_data>
 80099b8:	0003      	movs	r3, r0
 80099ba:	8023      	strh	r3, [r4, #0]
    if (error) {
 80099bc:	1d3b      	adds	r3, r7, #4
 80099be:	2200      	movs	r2, #0
 80099c0:	5e9b      	ldrsh	r3, [r3, r2]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <sen5x_start_fan_cleaning+0x46>
        return error;
 80099c6:	1d3b      	adds	r3, r7, #4
 80099c8:	2200      	movs	r2, #0
 80099ca:	5e9b      	ldrsh	r3, [r3, r2]
 80099cc:	e004      	b.n	80099d8 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80099ce:	4b05      	ldr	r3, [pc, #20]	@ (80099e4 <sen5x_start_fan_cleaning+0x5c>)
 80099d0:	0018      	movs	r0, r3
 80099d2:	f7ff fcc5 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	0018      	movs	r0, r3
 80099da:	46bd      	mov	sp, r7
 80099dc:	b003      	add	sp, #12
 80099de:	bd90      	pop	{r4, r7, pc}
 80099e0:	00005607 	.word	0x00005607
 80099e4:	00004e20 	.word	0x00004e20

080099e8 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	0004      	movs	r4, r0
 80099f0:	0008      	movs	r0, r1
 80099f2:	0011      	movs	r1, r2
 80099f4:	1dbb      	adds	r3, r7, #6
 80099f6:	1c22      	adds	r2, r4, #0
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	1d3b      	adds	r3, r7, #4
 80099fc:	1c02      	adds	r2, r0, #0
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	1cbb      	adds	r3, r7, #2
 8009a02:	1c0a      	adds	r2, r1, #0
 8009a04:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009a06:	2516      	movs	r5, #22
 8009a08:	197b      	adds	r3, r7, r5
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 8009a0e:	197c      	adds	r4, r7, r5
 8009a10:	4a25      	ldr	r2, [pc, #148]	@ (8009aa8 <sen5x_set_temperature_offset_parameters+0xc0>)
 8009a12:	197b      	adds	r3, r7, r5
 8009a14:	8819      	ldrh	r1, [r3, #0]
 8009a16:	2608      	movs	r6, #8
 8009a18:	19bb      	adds	r3, r7, r6
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	f001 f9a4 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 8009a20:	0003      	movs	r3, r0
 8009a22:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009a24:	197c      	adds	r4, r7, r5
 8009a26:	1dbb      	adds	r3, r7, #6
 8009a28:	2200      	movs	r2, #0
 8009a2a:	5e9a      	ldrsh	r2, [r3, r2]
 8009a2c:	197b      	adds	r3, r7, r5
 8009a2e:	8819      	ldrh	r1, [r3, #0]
 8009a30:	19bb      	adds	r3, r7, r6
 8009a32:	0018      	movs	r0, r3
 8009a34:	f001 fa03 	bl	800ae3e <sensirion_i2c_add_int16_t_to_buffer>
 8009a38:	0003      	movs	r3, r0
 8009a3a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009a3c:	197c      	adds	r4, r7, r5
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	2200      	movs	r2, #0
 8009a42:	5e9a      	ldrsh	r2, [r3, r2]
 8009a44:	197b      	adds	r3, r7, r5
 8009a46:	8819      	ldrh	r1, [r3, #0]
 8009a48:	19bb      	adds	r3, r7, r6
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f001 f9f7 	bl	800ae3e <sensirion_i2c_add_int16_t_to_buffer>
 8009a50:	0003      	movs	r3, r0
 8009a52:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009a54:	197c      	adds	r4, r7, r5
 8009a56:	1cbb      	adds	r3, r7, #2
 8009a58:	881a      	ldrh	r2, [r3, #0]
 8009a5a:	197b      	adds	r3, r7, r5
 8009a5c:	8819      	ldrh	r1, [r3, #0]
 8009a5e:	19bb      	adds	r3, r7, r6
 8009a60:	0018      	movs	r0, r3
 8009a62:	f001 f9ad 	bl	800adc0 <sensirion_i2c_add_uint16_t_to_buffer>
 8009a66:	0003      	movs	r3, r0
 8009a68:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009a6a:	2214      	movs	r2, #20
 8009a6c:	18bc      	adds	r4, r7, r2
 8009a6e:	197b      	adds	r3, r7, r5
 8009a70:	881a      	ldrh	r2, [r3, #0]
 8009a72:	19bb      	adds	r3, r7, r6
 8009a74:	0019      	movs	r1, r3
 8009a76:	2069      	movs	r0, #105	@ 0x69
 8009a78:	f001 f9fa 	bl	800ae70 <sensirion_i2c_write_data>
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a80:	2214      	movs	r2, #20
 8009a82:	18bb      	adds	r3, r7, r2
 8009a84:	2100      	movs	r1, #0
 8009a86:	5e5b      	ldrsh	r3, [r3, r1]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8009a8c:	18bb      	adds	r3, r7, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	5e9b      	ldrsh	r3, [r3, r2]
 8009a92:	e004      	b.n	8009a9e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009a94:	4b05      	ldr	r3, [pc, #20]	@ (8009aac <sen5x_set_temperature_offset_parameters+0xc4>)
 8009a96:	0018      	movs	r0, r3
 8009a98:	f7ff fc62 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	b007      	add	sp, #28
 8009aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aa6:	46c0      	nop			@ (mov r8, r8)
 8009aa8:	000060b2 	.word	0x000060b2
 8009aac:	00004e20 	.word	0x00004e20

08009ab0 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab2:	b091      	sub	sp, #68	@ 0x44
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	000a      	movs	r2, r1
 8009aba:	1cfb      	adds	r3, r7, #3
 8009abc:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009abe:	253e      	movs	r5, #62	@ 0x3e
 8009ac0:	197b      	adds	r3, r7, r5
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009ac6:	197c      	adds	r4, r7, r5
 8009ac8:	4a22      	ldr	r2, [pc, #136]	@ (8009b54 <sen5x_get_product_name+0xa4>)
 8009aca:	197b      	adds	r3, r7, r5
 8009acc:	8819      	ldrh	r1, [r3, #0]
 8009ace:	230c      	movs	r3, #12
 8009ad0:	18fb      	adds	r3, r7, r3
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f001 f948 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 8009ad8:	0003      	movs	r3, r0
 8009ada:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009adc:	263c      	movs	r6, #60	@ 0x3c
 8009ade:	19bc      	adds	r4, r7, r6
 8009ae0:	197b      	adds	r3, r7, r5
 8009ae2:	881a      	ldrh	r2, [r3, #0]
 8009ae4:	230c      	movs	r3, #12
 8009ae6:	18fb      	adds	r3, r7, r3
 8009ae8:	0019      	movs	r1, r3
 8009aea:	2069      	movs	r0, #105	@ 0x69
 8009aec:	f001 f9c0 	bl	800ae70 <sensirion_i2c_write_data>
 8009af0:	0003      	movs	r3, r0
 8009af2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009af4:	19bb      	adds	r3, r7, r6
 8009af6:	2200      	movs	r2, #0
 8009af8:	5e9b      	ldrsh	r3, [r3, r2]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <sen5x_get_product_name+0x56>
        return error;
 8009afe:	19bb      	adds	r3, r7, r6
 8009b00:	2200      	movs	r2, #0
 8009b02:	5e9b      	ldrsh	r3, [r3, r2]
 8009b04:	e021      	b.n	8009b4a <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009b06:	4b14      	ldr	r3, [pc, #80]	@ (8009b58 <sen5x_get_product_name+0xa8>)
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f7ff fc29 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009b0e:	253c      	movs	r5, #60	@ 0x3c
 8009b10:	197c      	adds	r4, r7, r5
 8009b12:	230c      	movs	r3, #12
 8009b14:	18fb      	adds	r3, r7, r3
 8009b16:	2220      	movs	r2, #32
 8009b18:	0019      	movs	r1, r3
 8009b1a:	2069      	movs	r0, #105	@ 0x69
 8009b1c:	f001 f9c0 	bl	800aea0 <sensirion_i2c_read_data_inplace>
 8009b20:	0003      	movs	r3, r0
 8009b22:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b24:	197b      	adds	r3, r7, r5
 8009b26:	2200      	movs	r2, #0
 8009b28:	5e9b      	ldrsh	r3, [r3, r2]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <sen5x_get_product_name+0x86>
        return error;
 8009b2e:	197b      	adds	r3, r7, r5
 8009b30:	2200      	movs	r2, #0
 8009b32:	5e9b      	ldrsh	r3, [r3, r2]
 8009b34:	e009      	b.n	8009b4a <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009b36:	1cfb      	adds	r3, r7, #3
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	6879      	ldr	r1, [r7, #4]
 8009b3e:	230c      	movs	r3, #12
 8009b40:	18fb      	adds	r3, r7, r3
 8009b42:	0018      	movs	r0, r3
 8009b44:	f000 f988 	bl	8009e58 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	b011      	add	sp, #68	@ 0x44
 8009b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b52:	46c0      	nop			@ (mov r8, r8)
 8009b54:	0000d014 	.word	0x0000d014
 8009b58:	0000c350 	.word	0x0000c350

08009b5c <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b5e:	b091      	sub	sp, #68	@ 0x44
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	000a      	movs	r2, r1
 8009b66:	1cfb      	adds	r3, r7, #3
 8009b68:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009b6a:	253e      	movs	r5, #62	@ 0x3e
 8009b6c:	197b      	adds	r3, r7, r5
 8009b6e:	2200      	movs	r2, #0
 8009b70:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009b72:	197c      	adds	r4, r7, r5
 8009b74:	4a22      	ldr	r2, [pc, #136]	@ (8009c00 <sen5x_get_serial_number+0xa4>)
 8009b76:	197b      	adds	r3, r7, r5
 8009b78:	8819      	ldrh	r1, [r3, #0]
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	18fb      	adds	r3, r7, r3
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f001 f8f2 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 8009b84:	0003      	movs	r3, r0
 8009b86:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b88:	263c      	movs	r6, #60	@ 0x3c
 8009b8a:	19bc      	adds	r4, r7, r6
 8009b8c:	197b      	adds	r3, r7, r5
 8009b8e:	881a      	ldrh	r2, [r3, #0]
 8009b90:	230c      	movs	r3, #12
 8009b92:	18fb      	adds	r3, r7, r3
 8009b94:	0019      	movs	r1, r3
 8009b96:	2069      	movs	r0, #105	@ 0x69
 8009b98:	f001 f96a 	bl	800ae70 <sensirion_i2c_write_data>
 8009b9c:	0003      	movs	r3, r0
 8009b9e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ba0:	19bb      	adds	r3, r7, r6
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	5e9b      	ldrsh	r3, [r3, r2]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <sen5x_get_serial_number+0x56>
        return error;
 8009baa:	19bb      	adds	r3, r7, r6
 8009bac:	2200      	movs	r2, #0
 8009bae:	5e9b      	ldrsh	r3, [r3, r2]
 8009bb0:	e021      	b.n	8009bf6 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009bb2:	4b14      	ldr	r3, [pc, #80]	@ (8009c04 <sen5x_get_serial_number+0xa8>)
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	f7ff fbd3 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009bba:	253c      	movs	r5, #60	@ 0x3c
 8009bbc:	197c      	adds	r4, r7, r5
 8009bbe:	230c      	movs	r3, #12
 8009bc0:	18fb      	adds	r3, r7, r3
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	0019      	movs	r1, r3
 8009bc6:	2069      	movs	r0, #105	@ 0x69
 8009bc8:	f001 f96a 	bl	800aea0 <sensirion_i2c_read_data_inplace>
 8009bcc:	0003      	movs	r3, r0
 8009bce:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009bd0:	197b      	adds	r3, r7, r5
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	5e9b      	ldrsh	r3, [r3, r2]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <sen5x_get_serial_number+0x86>
        return error;
 8009bda:	197b      	adds	r3, r7, r5
 8009bdc:	2200      	movs	r2, #0
 8009bde:	5e9b      	ldrsh	r3, [r3, r2]
 8009be0:	e009      	b.n	8009bf6 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009be2:	1cfb      	adds	r3, r7, #3
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	230c      	movs	r3, #12
 8009bec:	18fb      	adds	r3, r7, r3
 8009bee:	0018      	movs	r0, r3
 8009bf0:	f000 f932 	bl	8009e58 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b011      	add	sp, #68	@ 0x44
 8009bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bfe:	46c0      	nop			@ (mov r8, r8)
 8009c00:	0000d033 	.word	0x0000d033
 8009c04:	0000c350 	.word	0x0000c350

08009c08 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0a:	b089      	sub	sp, #36	@ 0x24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009c16:	251e      	movs	r5, #30
 8009c18:	197b      	adds	r3, r7, r5
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009c1e:	197c      	adds	r4, r7, r5
 8009c20:	23d1      	movs	r3, #209	@ 0xd1
 8009c22:	021a      	lsls	r2, r3, #8
 8009c24:	197b      	adds	r3, r7, r5
 8009c26:	8819      	ldrh	r1, [r3, #0]
 8009c28:	2310      	movs	r3, #16
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f001 f89b 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 8009c32:	0003      	movs	r3, r0
 8009c34:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c36:	261c      	movs	r6, #28
 8009c38:	19bc      	adds	r4, r7, r6
 8009c3a:	197b      	adds	r3, r7, r5
 8009c3c:	881a      	ldrh	r2, [r3, #0]
 8009c3e:	2310      	movs	r3, #16
 8009c40:	18fb      	adds	r3, r7, r3
 8009c42:	0019      	movs	r1, r3
 8009c44:	2069      	movs	r0, #105	@ 0x69
 8009c46:	f001 f913 	bl	800ae70 <sensirion_i2c_write_data>
 8009c4a:	0003      	movs	r3, r0
 8009c4c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c4e:	19bb      	adds	r3, r7, r6
 8009c50:	2200      	movs	r2, #0
 8009c52:	5e9b      	ldrsh	r3, [r3, r2]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <sen5x_get_version+0x58>
        return error;
 8009c58:	19bb      	adds	r3, r7, r6
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c5e:	e038      	b.n	8009cd2 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009c60:	4b1e      	ldr	r3, [pc, #120]	@ (8009cdc <sen5x_get_version+0xd4>)
 8009c62:	0018      	movs	r0, r3
 8009c64:	f7ff fb7c 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009c68:	251c      	movs	r5, #28
 8009c6a:	197c      	adds	r4, r7, r5
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	18fb      	adds	r3, r7, r3
 8009c70:	2208      	movs	r2, #8
 8009c72:	0019      	movs	r1, r3
 8009c74:	2069      	movs	r0, #105	@ 0x69
 8009c76:	f001 f913 	bl	800aea0 <sensirion_i2c_read_data_inplace>
 8009c7a:	0003      	movs	r3, r0
 8009c7c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c7e:	197b      	adds	r3, r7, r5
 8009c80:	2200      	movs	r2, #0
 8009c82:	5e9b      	ldrsh	r3, [r3, r2]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d003      	beq.n	8009c90 <sen5x_get_version+0x88>
        return error;
 8009c88:	197b      	adds	r3, r7, r5
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c8e:	e020      	b.n	8009cd2 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009c90:	2110      	movs	r1, #16
 8009c92:	187b      	adds	r3, r7, r1
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009c9a:	187b      	adds	r3, r7, r1
 8009c9c:	785a      	ldrb	r2, [r3, #1]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009ca2:	187b      	adds	r3, r7, r1
 8009ca4:	789b      	ldrb	r3, [r3, #2]
 8009ca6:	1e5a      	subs	r2, r3, #1
 8009ca8:	4193      	sbcs	r3, r2
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009cb0:	187b      	adds	r3, r7, r1
 8009cb2:	78da      	ldrb	r2, [r3, #3]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009cb8:	187b      	adds	r3, r7, r1
 8009cba:	791a      	ldrb	r2, [r3, #4]
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009cc0:	187b      	adds	r3, r7, r1
 8009cc2:	795a      	ldrb	r2, [r3, #5]
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc6:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009cc8:	187b      	adds	r3, r7, r1
 8009cca:	799a      	ldrb	r2, [r3, #6]
 8009ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cce:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	b009      	add	sp, #36	@ 0x24
 8009cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cda:	46c0      	nop			@ (mov r8, r8)
 8009cdc:	00004e20 	.word	0x00004e20

08009ce0 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009ce8:	2516      	movs	r5, #22
 8009cea:	197b      	adds	r3, r7, r5
 8009cec:	2200      	movs	r2, #0
 8009cee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009cf0:	197c      	adds	r4, r7, r5
 8009cf2:	4a22      	ldr	r2, [pc, #136]	@ (8009d7c <sen5x_read_device_status+0x9c>)
 8009cf4:	197b      	adds	r3, r7, r5
 8009cf6:	8819      	ldrh	r1, [r3, #0]
 8009cf8:	230c      	movs	r3, #12
 8009cfa:	18fb      	adds	r3, r7, r3
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	f001 f833 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 8009d02:	0003      	movs	r3, r0
 8009d04:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d06:	2614      	movs	r6, #20
 8009d08:	19bc      	adds	r4, r7, r6
 8009d0a:	197b      	adds	r3, r7, r5
 8009d0c:	881a      	ldrh	r2, [r3, #0]
 8009d0e:	230c      	movs	r3, #12
 8009d10:	18fb      	adds	r3, r7, r3
 8009d12:	0019      	movs	r1, r3
 8009d14:	2069      	movs	r0, #105	@ 0x69
 8009d16:	f001 f8ab 	bl	800ae70 <sensirion_i2c_write_data>
 8009d1a:	0003      	movs	r3, r0
 8009d1c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d1e:	19bb      	adds	r3, r7, r6
 8009d20:	2200      	movs	r2, #0
 8009d22:	5e9b      	ldrsh	r3, [r3, r2]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d003      	beq.n	8009d30 <sen5x_read_device_status+0x50>
        return error;
 8009d28:	19bb      	adds	r3, r7, r6
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d2e:	e020      	b.n	8009d72 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009d30:	4b13      	ldr	r3, [pc, #76]	@ (8009d80 <sen5x_read_device_status+0xa0>)
 8009d32:	0018      	movs	r0, r3
 8009d34:	f7ff fb14 	bl	8009360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009d38:	2514      	movs	r5, #20
 8009d3a:	197c      	adds	r4, r7, r5
 8009d3c:	230c      	movs	r3, #12
 8009d3e:	18fb      	adds	r3, r7, r3
 8009d40:	2204      	movs	r2, #4
 8009d42:	0019      	movs	r1, r3
 8009d44:	2069      	movs	r0, #105	@ 0x69
 8009d46:	f001 f8ab 	bl	800aea0 <sensirion_i2c_read_data_inplace>
 8009d4a:	0003      	movs	r3, r0
 8009d4c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d4e:	197b      	adds	r3, r7, r5
 8009d50:	2200      	movs	r2, #0
 8009d52:	5e9b      	ldrsh	r3, [r3, r2]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <sen5x_read_device_status+0x80>
        return error;
 8009d58:	197b      	adds	r3, r7, r5
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8009d5e:	e008      	b.n	8009d72 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009d60:	230c      	movs	r3, #12
 8009d62:	18fb      	adds	r3, r7, r3
 8009d64:	0018      	movs	r0, r3
 8009d66:	f000 f850 	bl	8009e0a <sensirion_common_bytes_to_uint32_t>
 8009d6a:	0002      	movs	r2, r0
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	0018      	movs	r0, r3
 8009d74:	46bd      	mov	sp, r7
 8009d76:	b007      	add	sp, #28
 8009d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d7a:	46c0      	nop			@ (mov r8, r8)
 8009d7c:	0000d206 	.word	0x0000d206
 8009d80:	00004e20 	.word	0x00004e20

08009d84 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009d84:	b590      	push	{r4, r7, lr}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d8a:	1dbb      	adds	r3, r7, #6
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009d90:	1dbc      	adds	r4, r7, #6
 8009d92:	4a12      	ldr	r2, [pc, #72]	@ (8009ddc <sen5x_device_reset+0x58>)
 8009d94:	1dbb      	adds	r3, r7, #6
 8009d96:	8819      	ldrh	r1, [r3, #0]
 8009d98:	003b      	movs	r3, r7
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	f000 ffe4 	bl	800ad68 <sensirion_i2c_add_command_to_buffer>
 8009da0:	0003      	movs	r3, r0
 8009da2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009da4:	1d3c      	adds	r4, r7, #4
 8009da6:	1dbb      	adds	r3, r7, #6
 8009da8:	881a      	ldrh	r2, [r3, #0]
 8009daa:	003b      	movs	r3, r7
 8009dac:	0019      	movs	r1, r3
 8009dae:	2069      	movs	r0, #105	@ 0x69
 8009db0:	f001 f85e 	bl	800ae70 <sensirion_i2c_write_data>
 8009db4:	0003      	movs	r3, r0
 8009db6:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009db8:	1d3b      	adds	r3, r7, #4
 8009dba:	2200      	movs	r2, #0
 8009dbc:	5e9b      	ldrsh	r3, [r3, r2]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <sen5x_device_reset+0x46>
        return error;
 8009dc2:	1d3b      	adds	r3, r7, #4
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	5e9b      	ldrsh	r3, [r3, r2]
 8009dc8:	e004      	b.n	8009dd4 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009dca:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <sen5x_device_reset+0x5c>)
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f7ff fac7 	bl	8009360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	b003      	add	sp, #12
 8009dda:	bd90      	pop	{r4, r7, pc}
 8009ddc:	0000d304 	.word	0x0000d304
 8009de0:	00030d40 	.word	0x00030d40

08009de4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	b21a      	sxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3301      	adds	r3, #1
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	b21b      	sxth	r3, r3
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	b21b      	sxth	r3, r3
 8009e00:	b29b      	uxth	r3, r3
}
 8009e02:	0018      	movs	r0, r3
 8009e04:	46bd      	mov	sp, r7
 8009e06:	b002      	add	sp, #8
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	061a      	lsls	r2, r3, #24
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	041b      	lsls	r3, r3, #16
 8009e20:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3302      	adds	r3, #2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009e2a:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	3203      	adds	r2, #3
 8009e30:	7812      	ldrb	r2, [r2, #0]
 8009e32:	4313      	orrs	r3, r2
}
 8009e34:	0018      	movs	r0, r3
 8009e36:	46bd      	mov	sp, r7
 8009e38:	b002      	add	sp, #8
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	0018      	movs	r0, r3
 8009e48:	f7ff ffcc 	bl	8009de4 <sensirion_common_bytes_to_uint16_t>
 8009e4c:	0003      	movs	r3, r0
 8009e4e:	b21b      	sxth	r3, r3
}
 8009e50:	0018      	movs	r0, r3
 8009e52:	46bd      	mov	sp, r7
 8009e54:	b002      	add	sp, #8
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	1dbb      	adds	r3, r7, #6
 8009e64:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009e66:	2316      	movs	r3, #22
 8009e68:	18fb      	adds	r3, r7, r3
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	e00f      	b.n	8009e90 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009e70:	2016      	movs	r0, #22
 8009e72:	183b      	adds	r3, r7, r0
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	18d2      	adds	r2, r2, r3
 8009e7a:	183b      	adds	r3, r7, r0
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	68b9      	ldr	r1, [r7, #8]
 8009e80:	18cb      	adds	r3, r1, r3
 8009e82:	7812      	ldrb	r2, [r2, #0]
 8009e84:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009e86:	183b      	adds	r3, r7, r0
 8009e88:	881a      	ldrh	r2, [r3, #0]
 8009e8a:	183b      	adds	r3, r7, r0
 8009e8c:	3201      	adds	r2, #1
 8009e8e:	801a      	strh	r2, [r3, #0]
 8009e90:	2316      	movs	r3, #22
 8009e92:	18fa      	adds	r2, r7, r3
 8009e94:	1dbb      	adds	r3, r7, #6
 8009e96:	8812      	ldrh	r2, [r2, #0]
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d3e8      	bcc.n	8009e70 <sensirion_common_copy_bytes+0x18>
    }
}
 8009e9e:	46c0      	nop			@ (mov r8, r8)
 8009ea0:	46c0      	nop			@ (mov r8, r8)
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	b006      	add	sp, #24
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d113      	bne.n	8009eee <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	22fe      	movs	r2, #254	@ 0xfe
 8009eca:	0592      	lsls	r2, r2, #22
 8009ecc:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8009f3c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009ed2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8009f40 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009ed8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	4a19      	ldr	r2, [pc, #100]	@ (8009f44 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009ede:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a19      	ldr	r2, [pc, #100]	@ (8009f48 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009ee4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4a18      	ldr	r2, [pc, #96]	@ (8009f4c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009eea:	61da      	str	r2, [r3, #28]
 8009eec:	e011      	b.n	8009f12 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a17      	ldr	r2, [pc, #92]	@ (8009f50 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009ef2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4a17      	ldr	r2, [pc, #92]	@ (8009f54 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009ef8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4a16      	ldr	r2, [pc, #88]	@ (8009f58 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009efe:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a16      	ldr	r2, [pc, #88]	@ (8009f5c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009f04:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4a15      	ldr	r2, [pc, #84]	@ (8009f60 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009f0a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4a15      	ldr	r2, [pc, #84]	@ (8009f64 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009f10:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	4a14      	ldr	r2, [pc, #80]	@ (8009f68 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009f16:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4a14      	ldr	r2, [pc, #80]	@ (8009f6c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4a12      	ldr	r2, [pc, #72]	@ (8009f6c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009f22:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4a12      	ldr	r2, [pc, #72]	@ (8009f70 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009f28:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f000 f831 	bl	8009f94 <GasIndexAlgorithm_reset>
}
 8009f32:	46c0      	nop			@ (mov r8, r8)
 8009f34:	46bd      	mov	sp, r7
 8009f36:	b004      	add	sp, #16
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	00002710 	.word	0x00002710
 8009f40:	44340000 	.word	0x44340000
 8009f44:	46859800 	.word	0x46859800
 8009f48:	46a05000 	.word	0x46a05000
 8009f4c:	41f00000 	.word	0x41f00000
 8009f50:	42c80000 	.word	0x42c80000
 8009f54:	00004e20 	.word	0x00004e20
 8009f58:	43340000 	.word	0x43340000
 8009f5c:	4528c000 	.word	0x4528c000
 8009f60:	45a32000 	.word	0x45a32000
 8009f64:	43aa0000 	.word	0x43aa0000
 8009f68:	43660000 	.word	0x43660000
 8009f6c:	41400000 	.word	0x41400000
 8009f70:	42480000 	.word	0x42480000

08009f74 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009f7e:	22fe      	movs	r2, #254	@ 0xfe
 8009f80:	0592      	lsls	r2, r2, #22
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	0018      	movs	r0, r3
 8009f88:	f7ff ff8e 	bl	8009ea8 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8009f8c:	46c0      	nop			@ (mov r8, r8)
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	b002      	add	sp, #8
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f000 f805 	bl	8009fc0 <GasIndexAlgorithm__init_instances>
}
 8009fb6:	46c0      	nop			@ (mov r8, r8)
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	b002      	add	sp, #8
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8009fc0:	b590      	push	{r4, r7, lr}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f000 f8e8 	bl	800a1a0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	0018      	movs	r0, r3
 8009fd4:	f000 f9a6 	bl	800a324 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009fd8:	1c04      	adds	r4, r0, #0
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	0018      	movs	r0, r3
 8009fde:	f000 f9ab 	bl	800a338 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009fe2:	1c02      	adds	r2, r0, #0
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	1c21      	adds	r1, r4, #0
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f000 fc3b 	bl	800a864 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d107      	bne.n	800a006 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009ff6:	23fe      	movs	r3, #254	@ 0xfe
 8009ff8:	059b      	lsls	r3, r3, #22
 8009ffa:	4a0a      	ldr	r2, [pc, #40]	@ (800a024 <GasIndexAlgorithm__init_instances+0x64>)
 8009ffc:	490a      	ldr	r1, [pc, #40]	@ (800a028 <GasIndexAlgorithm__init_instances+0x68>)
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fc86 	bl	800a910 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a004:	e005      	b.n	800a012 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a006:	4b09      	ldr	r3, [pc, #36]	@ (800a02c <GasIndexAlgorithm__init_instances+0x6c>)
 800a008:	4a09      	ldr	r2, [pc, #36]	@ (800a030 <GasIndexAlgorithm__init_instances+0x70>)
 800a00a:	490a      	ldr	r1, [pc, #40]	@ (800a034 <GasIndexAlgorithm__init_instances+0x74>)
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fc7f 	bl	800a910 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	0018      	movs	r0, r3
 800a016:	f000 fd35 	bl	800aa84 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a01a:	46c0      	nop			@ (mov r8, r8)
 800a01c:	46bd      	mov	sp, r7
 800a01e:	b003      	add	sp, #12
 800a020:	bd90      	pop	{r4, r7, pc}
 800a022:	46c0      	nop			@ (mov r8, r8)
 800a024:	bc257a78 	.word	0xbc257a78
 800a028:	44198000 	.word	0x44198000
 800a02c:	42c80000 	.word	0x42c80000
 800a030:	bbd4fdf4 	.word	0xbbd4fdf4
 800a034:	43550000 	.word	0x43550000

0800a038 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a038:	b590      	push	{r4, r7, lr}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a048:	4952      	ldr	r1, [pc, #328]	@ (800a194 <GasIndexAlgorithm_process+0x15c>)
 800a04a:	1c18      	adds	r0, r3, #0
 800a04c:	f7f6 fa7a 	bl	8000544 <__aeabi_fcmple>
 800a050:	1e03      	subs	r3, r0, #0
 800a052:	d00c      	beq.n	800a06e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	1c19      	adds	r1, r3, #0
 800a05e:	1c10      	adds	r0, r2, #0
 800a060:	f7f6 fc2e 	bl	80008c0 <__aeabi_fadd>
 800a064:	1c03      	adds	r3, r0, #0
 800a066:	1c1a      	adds	r2, r3, #0
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a06c:	e080      	b.n	800a170 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	dd25      	ble.n	800a0c0 <GasIndexAlgorithm_process+0x88>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4a48      	ldr	r2, [pc, #288]	@ (800a198 <GasIndexAlgorithm_process+0x160>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	dc21      	bgt.n	800a0c0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	429a      	cmp	r2, r3
 800a084:	dc04      	bgt.n	800a090 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	3301      	adds	r3, #1
 800a08c:	60bb      	str	r3, [r7, #8]
 800a08e:	e00d      	b.n	800a0ac <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	4a41      	ldr	r2, [pc, #260]	@ (800a19c <GasIndexAlgorithm_process+0x164>)
 800a096:	4694      	mov	ip, r2
 800a098:	4463      	add	r3, ip
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	dd05      	ble.n	800a0ac <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	4a3d      	ldr	r2, [pc, #244]	@ (800a19c <GasIndexAlgorithm_process+0x164>)
 800a0a6:	4694      	mov	ip, r2
 800a0a8:	4463      	add	r3, ip
 800a0aa:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f7f7 fa8b 	bl	80015d0 <__aeabi_i2f>
 800a0ba:	1c02      	adds	r2, r0, #0
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d005      	beq.n	800a0d4 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f000 f945 	bl	800a35a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a0d0:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a0d2:	d014      	beq.n	800a0fe <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	1c11      	adds	r1, r2, #0
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f000 fbd1 	bl	800a884 <GasIndexAlgorithm__mox_model__process>
 800a0e2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	1c11      	adds	r1, r2, #0
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f000 fc25 	bl	800a940 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a0f6:	1c02      	adds	r2, r0, #0
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0fc:	e003      	b.n	800a106 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	1c11      	adds	r1, r2, #0
 800a10e:	0018      	movs	r0, r3
 800a110:	f000 fcec 	bl	800aaec <GasIndexAlgorithm__adaptive_lowpass__process>
 800a114:	1c02      	adds	r2, r0, #0
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11e:	21fc      	movs	r1, #252	@ 0xfc
 800a120:	0589      	lsls	r1, r1, #22
 800a122:	1c18      	adds	r0, r3, #0
 800a124:	f7f6 fa04 	bl	8000530 <__aeabi_fcmplt>
 800a128:	1e03      	subs	r3, r0, #0
 800a12a:	d003      	beq.n	800a134 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	22fc      	movs	r2, #252	@ 0xfc
 800a130:	0592      	lsls	r2, r2, #22
 800a132:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a138:	2100      	movs	r1, #0
 800a13a:	1c18      	adds	r0, r3, #0
 800a13c:	f7f6 fa0c 	bl	8000558 <__aeabi_fcmpgt>
 800a140:	1e03      	subs	r3, r0, #0
 800a142:	d015      	beq.n	800a170 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	1c11      	adds	r1, r2, #0
 800a14c:	0018      	movs	r0, r3
 800a14e:	f000 fa4f 	bl	800a5f0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	0018      	movs	r0, r3
 800a156:	f000 f8e5 	bl	800a324 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a15a:	1c04      	adds	r4, r0, #0
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	0018      	movs	r0, r3
 800a160:	f000 f8ea 	bl	800a338 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a164:	1c02      	adds	r2, r0, #0
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	1c21      	adds	r1, r4, #0
 800a16a:	0018      	movs	r0, r3
 800a16c:	f000 fb7a 	bl	800a864 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a174:	21fc      	movs	r1, #252	@ 0xfc
 800a176:	0589      	lsls	r1, r1, #22
 800a178:	1c18      	adds	r0, r3, #0
 800a17a:	f7f6 fba1 	bl	80008c0 <__aeabi_fadd>
 800a17e:	1c03      	adds	r3, r0, #0
 800a180:	1c18      	adds	r0, r3, #0
 800a182:	f7f7 fa05 	bl	8001590 <__aeabi_f2iz>
 800a186:	0002      	movs	r2, r0
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	601a      	str	r2, [r3, #0]
    return;
 800a18c:	46c0      	nop			@ (mov r8, r8)
}
 800a18e:	46bd      	mov	sp, r7
 800a190:	b005      	add	sp, #20
 800a192:	bd90      	pop	{r4, r7, pc}
 800a194:	42340000 	.word	0x42340000
 800a198:	0000fde7 	.word	0x0000fde7
 800a19c:	00007fff 	.word	0x00007fff

0800a1a0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a1a0:	b5b0      	push	{r4, r5, r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	223c      	movs	r2, #60	@ 0x3c
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4952      	ldr	r1, [pc, #328]	@ (800a314 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a1ca:	1c18      	adds	r0, r3, #0
 800a1cc:	f7f6 fd02 	bl	8000bd4 <__aeabi_fdiv>
 800a1d0:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a1d2:	2188      	movs	r1, #136	@ 0x88
 800a1d4:	05c9      	lsls	r1, r1, #23
 800a1d6:	1c18      	adds	r0, r3, #0
 800a1d8:	f7f6 fee2 	bl	8000fa0 <__aeabi_fmul>
 800a1dc:	1c03      	adds	r3, r0, #0
 800a1de:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	494a      	ldr	r1, [pc, #296]	@ (800a314 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a1ea:	1c18      	adds	r0, r3, #0
 800a1ec:	f7f6 fcf2 	bl	8000bd4 <__aeabi_fdiv>
 800a1f0:	1c03      	adds	r3, r0, #0
 800a1f2:	1c19      	adds	r1, r3, #0
 800a1f4:	1c20      	adds	r0, r4, #0
 800a1f6:	f7f6 fb63 	bl	80008c0 <__aeabi_fadd>
 800a1fa:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a1fc:	1c19      	adds	r1, r3, #0
 800a1fe:	1c28      	adds	r0, r5, #0
 800a200:	f7f6 fce8 	bl	8000bd4 <__aeabi_fdiv>
 800a204:	1c03      	adds	r3, r0, #0
 800a206:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	4940      	ldr	r1, [pc, #256]	@ (800a314 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a212:	1c18      	adds	r0, r3, #0
 800a214:	f7f6 fcde 	bl	8000bd4 <__aeabi_fdiv>
 800a218:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a21a:	2185      	movs	r1, #133	@ 0x85
 800a21c:	05c9      	lsls	r1, r1, #23
 800a21e:	1c18      	adds	r0, r3, #0
 800a220:	f7f6 febe 	bl	8000fa0 <__aeabi_fmul>
 800a224:	1c03      	adds	r3, r0, #0
 800a226:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	4938      	ldr	r1, [pc, #224]	@ (800a314 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a232:	1c18      	adds	r0, r3, #0
 800a234:	f7f6 fcce 	bl	8000bd4 <__aeabi_fdiv>
 800a238:	1c03      	adds	r3, r0, #0
 800a23a:	1c19      	adds	r1, r3, #0
 800a23c:	1c20      	adds	r0, r4, #0
 800a23e:	f7f6 fb3f 	bl	80008c0 <__aeabi_fadd>
 800a242:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a244:	1c19      	adds	r1, r3, #0
 800a246:	1c28      	adds	r0, r5, #0
 800a248:	f7f6 fcc4 	bl	8000bd4 <__aeabi_fdiv>
 800a24c:	1c03      	adds	r3, r0, #0
 800a24e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d118      	bne.n	800a28e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a260:	2188      	movs	r1, #136	@ 0x88
 800a262:	05c9      	lsls	r1, r1, #23
 800a264:	1c18      	adds	r0, r3, #0
 800a266:	f7f6 fe9b 	bl	8000fa0 <__aeabi_fmul>
 800a26a:	1c03      	adds	r3, r0, #0
 800a26c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a272:	4929      	ldr	r1, [pc, #164]	@ (800a318 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a274:	1c18      	adds	r0, r3, #0
 800a276:	f7f6 fb23 	bl	80008c0 <__aeabi_fadd>
 800a27a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a27c:	1c19      	adds	r1, r3, #0
 800a27e:	1c20      	adds	r0, r4, #0
 800a280:	f7f6 fca8 	bl	8000bd4 <__aeabi_fdiv>
 800a284:	1c03      	adds	r3, r0, #0
 800a286:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a28c:	e017      	b.n	800a2be <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a292:	2188      	movs	r1, #136	@ 0x88
 800a294:	05c9      	lsls	r1, r1, #23
 800a296:	1c18      	adds	r0, r3, #0
 800a298:	f7f6 fe82 	bl	8000fa0 <__aeabi_fmul>
 800a29c:	1c03      	adds	r3, r0, #0
 800a29e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a2a4:	491d      	ldr	r1, [pc, #116]	@ (800a31c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a2a6:	1c18      	adds	r0, r3, #0
 800a2a8:	f7f6 fb0a 	bl	80008c0 <__aeabi_fadd>
 800a2ac:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a2ae:	1c19      	adds	r1, r3, #0
 800a2b0:	1c20      	adds	r0, r4, #0
 800a2b2:	f7f6 fc8f 	bl	8000bd4 <__aeabi_fdiv>
 800a2b6:	1c03      	adds	r3, r0, #0
 800a2b8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a2c2:	2185      	movs	r1, #133	@ 0x85
 800a2c4:	05c9      	lsls	r1, r1, #23
 800a2c6:	1c18      	adds	r0, r3, #0
 800a2c8:	f7f6 fe6a 	bl	8000fa0 <__aeabi_fmul>
 800a2cc:	1c03      	adds	r3, r0, #0
 800a2ce:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	4912      	ldr	r1, [pc, #72]	@ (800a320 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a2d6:	1c18      	adds	r0, r3, #0
 800a2d8:	f7f6 faf2 	bl	80008c0 <__aeabi_fadd>
 800a2dc:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a2de:	1c19      	adds	r1, r3, #0
 800a2e0:	1c20      	adds	r0, r4, #0
 800a2e2:	f7f6 fc77 	bl	8000bd4 <__aeabi_fdiv>
 800a2e6:	1c03      	adds	r3, r0, #0
 800a2e8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a30c:	46c0      	nop			@ (mov r8, r8)
 800a30e:	46bd      	mov	sp, r7
 800a310:	b002      	add	sp, #8
 800a312:	bdb0      	pop	{r4, r5, r7, pc}
 800a314:	45610000 	.word	0x45610000
 800a318:	44960000 	.word	0x44960000
 800a31c:	41a00000 	.word	0x41a00000
 800a320:	451c4000 	.word	0x451c4000

0800a324 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a330:	1c18      	adds	r0, r3, #0
 800a332:	46bd      	mov	sp, r7
 800a334:	b002      	add	sp, #8
 800a336:	bd80      	pop	{r7, pc}

0800a338 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a348:	1c19      	adds	r1, r3, #0
 800a34a:	1c10      	adds	r0, r2, #0
 800a34c:	f7f6 fab8 	bl	80008c0 <__aeabi_fadd>
 800a350:	1c03      	adds	r3, r0, #0
}
 800a352:	1c18      	adds	r0, r3, #0
 800a354:	46bd      	mov	sp, r7
 800a356:	b002      	add	sp, #8
 800a358:	bd80      	pop	{r7, pc}

0800a35a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	223c      	movs	r2, #60	@ 0x3c
 800a366:	5c9b      	ldrb	r3, [r3, r2]
}
 800a368:	0018      	movs	r0, r3
 800a36a:	46bd      	mov	sp, r7
 800a36c:	b002      	add	sp, #8
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a370:	b5b0      	push	{r4, r5, r7, lr}
 800a372:	b08c      	sub	sp, #48	@ 0x30
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a37c:	1c19      	adds	r1, r3, #0
 800a37e:	4895      	ldr	r0, [pc, #596]	@ (800a5d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a380:	f7f6 ff4c 	bl	800121c <__aeabi_fsub>
 800a384:	1c03      	adds	r3, r0, #0
 800a386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a38c:	1c19      	adds	r1, r3, #0
 800a38e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a390:	f7f6 f8e2 	bl	8000558 <__aeabi_fcmpgt>
 800a394:	1e03      	subs	r3, r0, #0
 800a396:	d00b      	beq.n	800a3b0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a3a0:	1c19      	adds	r1, r3, #0
 800a3a2:	1c10      	adds	r0, r2, #0
 800a3a4:	f7f6 fa8c 	bl	80008c0 <__aeabi_fadd>
 800a3a8:	1c03      	adds	r3, r0, #0
 800a3aa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3b4:	1c19      	adds	r1, r3, #0
 800a3b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3b8:	f7f6 f8ce 	bl	8000558 <__aeabi_fcmpgt>
 800a3bc:	1e03      	subs	r3, r0, #0
 800a3be:	d00b      	beq.n	800a3d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a3c8:	1c19      	adds	r1, r3, #0
 800a3ca:	1c10      	adds	r0, r2, #0
 800a3cc:	f7f6 fa78 	bl	80008c0 <__aeabi_fadd>
 800a3d0:	1c03      	adds	r3, r0, #0
 800a3d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6959      	ldr	r1, [r3, #20]
 800a3dc:	4a7e      	ldr	r2, [pc, #504]	@ (800a5d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f000 f9f1 	bl	800a7c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	1c11      	adds	r1, r2, #0
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	f000 f9fa 	bl	800a7e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a3f4:	1c03      	adds	r3, r0, #0
 800a3f6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a404:	1c19      	adds	r1, r3, #0
 800a406:	1c10      	adds	r0, r2, #0
 800a408:	f7f6 ff08 	bl	800121c <__aeabi_fsub>
 800a40c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a40e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a410:	1c18      	adds	r0, r3, #0
 800a412:	f7f6 fdc5 	bl	8000fa0 <__aeabi_fmul>
 800a416:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a418:	1c19      	adds	r1, r3, #0
 800a41a:	1c20      	adds	r0, r4, #0
 800a41c:	f7f6 fa50 	bl	80008c0 <__aeabi_fadd>
 800a420:	1c03      	adds	r3, r0, #0
 800a422:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a42c:	1c19      	adds	r1, r3, #0
 800a42e:	486b      	ldr	r0, [pc, #428]	@ (800a5dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a430:	f7f6 fef4 	bl	800121c <__aeabi_fsub>
 800a434:	1c03      	adds	r3, r0, #0
 800a436:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	1c11      	adds	r1, r2, #0
 800a440:	0018      	movs	r0, r3
 800a442:	f000 f9d1 	bl	800a7e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a446:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a448:	1c19      	adds	r1, r3, #0
 800a44a:	1c28      	adds	r0, r5, #0
 800a44c:	f7f6 fda8 	bl	8000fa0 <__aeabi_fmul>
 800a450:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a452:	1c19      	adds	r1, r3, #0
 800a454:	1c20      	adds	r0, r4, #0
 800a456:	f7f6 fa33 	bl	80008c0 <__aeabi_fadd>
 800a45a:	1c03      	adds	r3, r0, #0
 800a45c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a45e:	4a60      	ldr	r2, [pc, #384]	@ (800a5e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a460:	6a39      	ldr	r1, [r7, #32]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	0018      	movs	r0, r3
 800a466:	f000 f9af 	bl	800a7c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	1c11      	adds	r1, r2, #0
 800a472:	0018      	movs	r0, r3
 800a474:	f000 f9b8 	bl	800a7e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a478:	1c03      	adds	r3, r0, #0
 800a47a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a47c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a47e:	69f8      	ldr	r0, [r7, #28]
 800a480:	f7f6 fd8e 	bl	8000fa0 <__aeabi_fmul>
 800a484:	1c03      	adds	r3, r0, #0
 800a486:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6999      	ldr	r1, [r3, #24]
 800a490:	4a51      	ldr	r2, [pc, #324]	@ (800a5d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	0018      	movs	r0, r3
 800a496:	f000 f997 	bl	800a7c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	1c11      	adds	r1, r2, #0
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	f000 f9a0 	bl	800a7e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a4a8:	1c03      	adds	r3, r0, #0
 800a4aa:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a4b8:	1c19      	adds	r1, r3, #0
 800a4ba:	1c10      	adds	r0, r2, #0
 800a4bc:	f7f6 feae 	bl	800121c <__aeabi_fsub>
 800a4c0:	1c03      	adds	r3, r0, #0
 800a4c2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a4c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4c6:	69b8      	ldr	r0, [r7, #24]
 800a4c8:	f7f6 fea8 	bl	800121c <__aeabi_fsub>
 800a4cc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a4ce:	1c19      	adds	r1, r3, #0
 800a4d0:	1c28      	adds	r0, r5, #0
 800a4d2:	f7f6 fd65 	bl	8000fa0 <__aeabi_fmul>
 800a4d6:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a4d8:	1c19      	adds	r1, r3, #0
 800a4da:	1c20      	adds	r0, r4, #0
 800a4dc:	f7f6 f9f0 	bl	80008c0 <__aeabi_fadd>
 800a4e0:	1c03      	adds	r3, r0, #0
 800a4e2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a4ec:	1c19      	adds	r1, r3, #0
 800a4ee:	483b      	ldr	r0, [pc, #236]	@ (800a5dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a4f0:	f7f6 fe94 	bl	800121c <__aeabi_fsub>
 800a4f4:	1c03      	adds	r3, r0, #0
 800a4f6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	1c11      	adds	r1, r2, #0
 800a500:	0018      	movs	r0, r3
 800a502:	f000 f971 	bl	800a7e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a506:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a508:	1c19      	adds	r1, r3, #0
 800a50a:	1c28      	adds	r0, r5, #0
 800a50c:	f7f6 fd48 	bl	8000fa0 <__aeabi_fmul>
 800a510:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a512:	1c19      	adds	r1, r3, #0
 800a514:	1c20      	adds	r0, r4, #0
 800a516:	f7f6 f9d3 	bl	80008c0 <__aeabi_fadd>
 800a51a:	1c03      	adds	r3, r0, #0
 800a51c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a51e:	4a30      	ldr	r2, [pc, #192]	@ (800a5e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a520:	6939      	ldr	r1, [r7, #16]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	0018      	movs	r0, r3
 800a526:	f000 f94f 	bl	800a7c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	1c11      	adds	r1, r2, #0
 800a532:	0018      	movs	r0, r3
 800a534:	f000 f958 	bl	800a7e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a538:	1c03      	adds	r3, r0, #0
 800a53a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a53c:	6979      	ldr	r1, [r7, #20]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7f6 fd2e 	bl	8000fa0 <__aeabi_fmul>
 800a544:	1c03      	adds	r3, r0, #0
 800a546:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	4923      	ldr	r1, [pc, #140]	@ (800a5e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a556:	1c18      	adds	r0, r3, #0
 800a558:	f7f6 fb3c 	bl	8000bd4 <__aeabi_fdiv>
 800a55c:	1c03      	adds	r3, r0, #0
 800a55e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a560:	69f9      	ldr	r1, [r7, #28]
 800a562:	20fe      	movs	r0, #254	@ 0xfe
 800a564:	0580      	lsls	r0, r0, #22
 800a566:	f7f6 fe59 	bl	800121c <__aeabi_fsub>
 800a56a:	1c03      	adds	r3, r0, #0
 800a56c:	491e      	ldr	r1, [pc, #120]	@ (800a5e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a56e:	1c18      	adds	r0, r3, #0
 800a570:	f7f6 fd16 	bl	8000fa0 <__aeabi_fmul>
 800a574:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a576:	491d      	ldr	r1, [pc, #116]	@ (800a5ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a578:	1c18      	adds	r0, r3, #0
 800a57a:	f7f6 fe4f 	bl	800121c <__aeabi_fsub>
 800a57e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a580:	1c19      	adds	r1, r3, #0
 800a582:	1c28      	adds	r0, r5, #0
 800a584:	f7f6 fd0c 	bl	8000fa0 <__aeabi_fmul>
 800a588:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a58a:	1c19      	adds	r1, r3, #0
 800a58c:	1c20      	adds	r0, r4, #0
 800a58e:	f7f6 f997 	bl	80008c0 <__aeabi_fadd>
 800a592:	1c03      	adds	r3, r0, #0
 800a594:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a59e:	2100      	movs	r1, #0
 800a5a0:	1c18      	adds	r0, r3, #0
 800a5a2:	f7f5 ffc5 	bl	8000530 <__aeabi_fcmplt>
 800a5a6:	1e03      	subs	r3, r0, #0
 800a5a8:	d002      	beq.n	800a5b0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a5b8:	1c19      	adds	r1, r3, #0
 800a5ba:	1c10      	adds	r0, r2, #0
 800a5bc:	f7f5 ffcc 	bl	8000558 <__aeabi_fcmpgt>
 800a5c0:	1e03      	subs	r3, r0, #0
 800a5c2:	d100      	bne.n	800a5c6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a5c4:	e002      	b.n	800a5cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a5cc:	46c0      	nop			@ (mov r8, r8)
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b00c      	add	sp, #48	@ 0x30
 800a5d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5d4:	46fffe00 	.word	0x46fffe00
 800a5d8:	3c23d70a 	.word	0x3c23d70a
 800a5dc:	43ff0000 	.word	0x43ff0000
 800a5e0:	3db851ec 	.word	0x3db851ec
 800a5e4:	42700000 	.word	0x42700000
 800a5e8:	3fa66666 	.word	0x3fa66666
 800a5ec:	3e99999a 	.word	0x3e99999a

0800a5f0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	223c      	movs	r2, #60	@ 0x3c
 800a5fe:	5c9b      	ldrb	r3, [r3, r2]
 800a600:	2201      	movs	r2, #1
 800a602:	4053      	eors	r3, r2
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	223c      	movs	r2, #60	@ 0x3c
 800a60e:	2101      	movs	r1, #1
 800a610:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a61e:	e0c8      	b.n	800a7b2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a624:	4965      	ldr	r1, [pc, #404]	@ (800a7bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a626:	1c18      	adds	r0, r3, #0
 800a628:	f7f5 ffa0 	bl	800056c <__aeabi_fcmpge>
 800a62c:	1e03      	subs	r3, r0, #0
 800a62e:	d107      	bne.n	800a640 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a634:	4962      	ldr	r1, [pc, #392]	@ (800a7c0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a636:	1c18      	adds	r0, r3, #0
 800a638:	f7f5 ff84 	bl	8000544 <__aeabi_fcmple>
 800a63c:	1e03      	subs	r3, r0, #0
 800a63e:	d00e      	beq.n	800a65e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a648:	1c19      	adds	r1, r3, #0
 800a64a:	1c10      	adds	r0, r2, #0
 800a64c:	f7f6 f938 	bl	80008c0 <__aeabi_fadd>
 800a650:	1c03      	adds	r3, r0, #0
 800a652:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a662:	1c19      	adds	r1, r3, #0
 800a664:	6838      	ldr	r0, [r7, #0]
 800a666:	f7f6 fdd9 	bl	800121c <__aeabi_fsub>
 800a66a:	1c03      	adds	r3, r0, #0
 800a66c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	0018      	movs	r0, r3
 800a672:	f7ff fe7d 	bl	800a370 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67a:	1c19      	adds	r1, r3, #0
 800a67c:	6838      	ldr	r0, [r7, #0]
 800a67e:	f7f6 fdcd 	bl	800121c <__aeabi_fsub>
 800a682:	1c03      	adds	r3, r0, #0
 800a684:	2185      	movs	r1, #133	@ 0x85
 800a686:	05c9      	lsls	r1, r1, #23
 800a688:	1c18      	adds	r0, r3, #0
 800a68a:	f7f6 faa3 	bl	8000bd4 <__aeabi_fdiv>
 800a68e:	1c03      	adds	r3, r0, #0
 800a690:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a692:	2100      	movs	r1, #0
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f7f5 ff4b 	bl	8000530 <__aeabi_fcmplt>
 800a69a:	1e03      	subs	r3, r0, #0
 800a69c:	d008      	beq.n	800a6b0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6a2:	68f9      	ldr	r1, [r7, #12]
 800a6a4:	1c18      	adds	r0, r3, #0
 800a6a6:	f7f6 fdb9 	bl	800121c <__aeabi_fsub>
 800a6aa:	1c03      	adds	r3, r0, #0
 800a6ac:	617b      	str	r3, [r7, #20]
 800a6ae:	e007      	b.n	800a6c0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6b4:	1c19      	adds	r1, r3, #0
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7f6 f902 	bl	80008c0 <__aeabi_fadd>
 800a6bc:	1c03      	adds	r3, r0, #0
 800a6be:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a6c0:	23fe      	movs	r3, #254	@ 0xfe
 800a6c2:	059b      	lsls	r3, r3, #22
 800a6c4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a6c6:	493f      	ldr	r1, [pc, #252]	@ (800a7c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a6c8:	6978      	ldr	r0, [r7, #20]
 800a6ca:	f7f5 ff45 	bl	8000558 <__aeabi_fcmpgt>
 800a6ce:	1e03      	subs	r3, r0, #0
 800a6d0:	d010      	beq.n	800a6f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a6d2:	493c      	ldr	r1, [pc, #240]	@ (800a7c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a6d4:	6978      	ldr	r0, [r7, #20]
 800a6d6:	f7f6 fa7d 	bl	8000bd4 <__aeabi_fdiv>
 800a6da:	1c03      	adds	r3, r0, #0
 800a6dc:	1c1c      	adds	r4, r3, #0
 800a6de:	4939      	ldr	r1, [pc, #228]	@ (800a7c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a6e0:	6978      	ldr	r0, [r7, #20]
 800a6e2:	f7f6 fa77 	bl	8000bd4 <__aeabi_fdiv>
 800a6e6:	1c03      	adds	r3, r0, #0
 800a6e8:	1c19      	adds	r1, r3, #0
 800a6ea:	1c20      	adds	r0, r4, #0
 800a6ec:	f7f6 fc58 	bl	8000fa0 <__aeabi_fmul>
 800a6f0:	1c03      	adds	r3, r0, #0
 800a6f2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a6f8:	1c19      	adds	r1, r3, #0
 800a6fa:	2085      	movs	r0, #133	@ 0x85
 800a6fc:	05c0      	lsls	r0, r0, #23
 800a6fe:	f7f6 fd8d 	bl	800121c <__aeabi_fsub>
 800a702:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a704:	6939      	ldr	r1, [r7, #16]
 800a706:	1c18      	adds	r0, r3, #0
 800a708:	f7f6 fc4a 	bl	8000fa0 <__aeabi_fmul>
 800a70c:	1c03      	adds	r3, r0, #0
 800a70e:	1c18      	adds	r0, r3, #0
 800a710:	f017 fe0e 	bl	8022330 <sqrtf>
 800a714:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a71e:	2185      	movs	r1, #133	@ 0x85
 800a720:	05c9      	lsls	r1, r1, #23
 800a722:	6938      	ldr	r0, [r7, #16]
 800a724:	f7f6 fc3c 	bl	8000fa0 <__aeabi_fmul>
 800a728:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a72a:	1c19      	adds	r1, r3, #0
 800a72c:	1c28      	adds	r0, r5, #0
 800a72e:	f7f6 fa51 	bl	8000bd4 <__aeabi_fdiv>
 800a732:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a734:	1c19      	adds	r1, r3, #0
 800a736:	1c20      	adds	r0, r4, #0
 800a738:	f7f6 fc32 	bl	8000fa0 <__aeabi_fmul>
 800a73c:	1c03      	adds	r3, r0, #0
 800a73e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a744:	68f9      	ldr	r1, [r7, #12]
 800a746:	1c18      	adds	r0, r3, #0
 800a748:	f7f6 fc2a 	bl	8000fa0 <__aeabi_fmul>
 800a74c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a74e:	6939      	ldr	r1, [r7, #16]
 800a750:	1c18      	adds	r0, r3, #0
 800a752:	f7f6 fa3f 	bl	8000bd4 <__aeabi_fdiv>
 800a756:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a758:	68f9      	ldr	r1, [r7, #12]
 800a75a:	1c18      	adds	r0, r3, #0
 800a75c:	f7f6 fc20 	bl	8000fa0 <__aeabi_fmul>
 800a760:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a762:	1c19      	adds	r1, r3, #0
 800a764:	1c20      	adds	r0, r4, #0
 800a766:	f7f6 f8ab 	bl	80008c0 <__aeabi_fadd>
 800a76a:	1c03      	adds	r3, r0, #0
 800a76c:	1c18      	adds	r0, r3, #0
 800a76e:	f017 fddf 	bl	8022330 <sqrtf>
 800a772:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a774:	1c19      	adds	r1, r3, #0
 800a776:	1c30      	adds	r0, r6, #0
 800a778:	f7f6 fc12 	bl	8000fa0 <__aeabi_fmul>
 800a77c:	1c03      	adds	r3, r0, #0
 800a77e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a78c:	68f9      	ldr	r1, [r7, #12]
 800a78e:	1c18      	adds	r0, r3, #0
 800a790:	f7f6 fc06 	bl	8000fa0 <__aeabi_fmul>
 800a794:	1c03      	adds	r3, r0, #0
 800a796:	2182      	movs	r1, #130	@ 0x82
 800a798:	05c9      	lsls	r1, r1, #23
 800a79a:	1c18      	adds	r0, r3, #0
 800a79c:	f7f6 fa1a 	bl	8000bd4 <__aeabi_fdiv>
 800a7a0:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a7a2:	1c19      	adds	r1, r3, #0
 800a7a4:	1c20      	adds	r0, r4, #0
 800a7a6:	f7f6 f88b 	bl	80008c0 <__aeabi_fadd>
 800a7aa:	1c03      	adds	r3, r0, #0
 800a7ac:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a7b2:	46c0      	nop			@ (mov r8, r8)
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	b007      	add	sp, #28
 800a7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	42c80000 	.word	0x42c80000
 800a7c0:	c2c80000 	.word	0xc2c80000
 800a7c4:	44b40000 	.word	0x44b40000

0800a7c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a7e0:	46c0      	nop			@ (mov r8, r8)
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	b004      	add	sp, #16
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a7e8:	b590      	push	{r4, r7, lr}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7fa:	1c19      	adds	r1, r3, #0
 800a7fc:	6838      	ldr	r0, [r7, #0]
 800a7fe:	f7f6 fd0d 	bl	800121c <__aeabi_fsub>
 800a802:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a804:	1c19      	adds	r1, r3, #0
 800a806:	1c20      	adds	r0, r4, #0
 800a808:	f7f6 fbca 	bl	8000fa0 <__aeabi_fmul>
 800a80c:	1c03      	adds	r3, r0, #0
 800a80e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a810:	4912      	ldr	r1, [pc, #72]	@ (800a85c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f7f5 fe8c 	bl	8000530 <__aeabi_fcmplt>
 800a818:	1e03      	subs	r3, r0, #0
 800a81a:	d002      	beq.n	800a822 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a81c:	23fe      	movs	r3, #254	@ 0xfe
 800a81e:	059b      	lsls	r3, r3, #22
 800a820:	e018      	b.n	800a854 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a822:	490f      	ldr	r1, [pc, #60]	@ (800a860 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7f5 fe97 	bl	8000558 <__aeabi_fcmpgt>
 800a82a:	1e03      	subs	r3, r0, #0
 800a82c:	d001      	beq.n	800a832 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a82e:	2300      	movs	r3, #0
 800a830:	e010      	b.n	800a854 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	1c18      	adds	r0, r3, #0
 800a836:	f017 fd53 	bl	80222e0 <expf>
 800a83a:	1c03      	adds	r3, r0, #0
 800a83c:	21fe      	movs	r1, #254	@ 0xfe
 800a83e:	0589      	lsls	r1, r1, #22
 800a840:	1c18      	adds	r0, r3, #0
 800a842:	f7f6 f83d 	bl	80008c0 <__aeabi_fadd>
 800a846:	1c03      	adds	r3, r0, #0
 800a848:	1c19      	adds	r1, r3, #0
 800a84a:	20fe      	movs	r0, #254	@ 0xfe
 800a84c:	0580      	lsls	r0, r0, #22
 800a84e:	f7f6 f9c1 	bl	8000bd4 <__aeabi_fdiv>
 800a852:	1c03      	adds	r3, r0, #0
    }
}
 800a854:	1c18      	adds	r0, r3, #0
 800a856:	46bd      	mov	sp, r7
 800a858:	b005      	add	sp, #20
 800a85a:	bd90      	pop	{r4, r7, pc}
 800a85c:	c2480000 	.word	0xc2480000
 800a860:	42480000 	.word	0x42480000

0800a864 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a87c:	46c0      	nop			@ (mov r8, r8)
 800a87e:	46bd      	mov	sp, r7
 800a880:	b004      	add	sp, #16
 800a882:	bd80      	pop	{r7, pc}

0800a884 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a884:	b590      	push	{r4, r7, lr}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d114      	bne.n	800a8c0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a89a:	1c19      	adds	r1, r3, #0
 800a89c:	6838      	ldr	r0, [r7, #0]
 800a89e:	f7f6 fcbd 	bl	800121c <__aeabi_fsub>
 800a8a2:	1c03      	adds	r3, r0, #0
 800a8a4:	4918      	ldr	r1, [pc, #96]	@ (800a908 <GasIndexAlgorithm__mox_model__process+0x84>)
 800a8a6:	1c18      	adds	r0, r3, #0
 800a8a8:	f7f6 f994 	bl	8000bd4 <__aeabi_fdiv>
 800a8ac:	1c03      	adds	r3, r0, #0
 800a8ae:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a8b4:	1c19      	adds	r1, r3, #0
 800a8b6:	1c10      	adds	r0, r2, #0
 800a8b8:	f7f6 fb72 	bl	8000fa0 <__aeabi_fmul>
 800a8bc:	1c03      	adds	r3, r0, #0
 800a8be:	e01f      	b.n	800a900 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8c4:	1c19      	adds	r1, r3, #0
 800a8c6:	6838      	ldr	r0, [r7, #0]
 800a8c8:	f7f6 fca8 	bl	800121c <__aeabi_fsub>
 800a8cc:	1c03      	adds	r3, r0, #0
 800a8ce:	1c1a      	adds	r2, r3, #0
 800a8d0:	2380      	movs	r3, #128	@ 0x80
 800a8d2:	061b      	lsls	r3, r3, #24
 800a8d4:	4053      	eors	r3, r2
 800a8d6:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8dc:	490b      	ldr	r1, [pc, #44]	@ (800a90c <GasIndexAlgorithm__mox_model__process+0x88>)
 800a8de:	1c18      	adds	r0, r3, #0
 800a8e0:	f7f5 ffee 	bl	80008c0 <__aeabi_fadd>
 800a8e4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a8e6:	1c19      	adds	r1, r3, #0
 800a8e8:	1c20      	adds	r0, r4, #0
 800a8ea:	f7f6 f973 	bl	8000bd4 <__aeabi_fdiv>
 800a8ee:	1c03      	adds	r3, r0, #0
 800a8f0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a8f6:	1c19      	adds	r1, r3, #0
 800a8f8:	1c10      	adds	r0, r2, #0
 800a8fa:	f7f6 fb51 	bl	8000fa0 <__aeabi_fmul>
 800a8fe:	1c03      	adds	r3, r0, #0
    }
}
 800a900:	1c18      	adds	r0, r3, #0
 800a902:	46bd      	mov	sp, r7
 800a904:	b003      	add	sp, #12
 800a906:	bd90      	pop	{r4, r7, pc}
 800a908:	44fa0000 	.word	0x44fa0000
 800a90c:	435c0000 	.word	0x435c0000

0800a910 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2180      	movs	r1, #128	@ 0x80
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2184      	movs	r1, #132	@ 0x84
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2188      	movs	r1, #136	@ 0x88
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	505a      	str	r2, [r3, r1]
}
 800a936:	46c0      	nop			@ (mov r8, r8)
 800a938:	46bd      	mov	sp, r7
 800a93a:	b004      	add	sp, #16
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800a940:	b590      	push	{r4, r7, lr}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2280      	movs	r2, #128	@ 0x80
 800a94e:	589c      	ldr	r4, [r3, r2]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2284      	movs	r2, #132	@ 0x84
 800a954:	589b      	ldr	r3, [r3, r2]
 800a956:	1c19      	adds	r1, r3, #0
 800a958:	6838      	ldr	r0, [r7, #0]
 800a95a:	f7f6 fc5f 	bl	800121c <__aeabi_fsub>
 800a95e:	1c03      	adds	r3, r0, #0
 800a960:	1c19      	adds	r1, r3, #0
 800a962:	1c20      	adds	r0, r4, #0
 800a964:	f7f6 fb1c 	bl	8000fa0 <__aeabi_fmul>
 800a968:	1c03      	adds	r3, r0, #0
 800a96a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800a96c:	4940      	ldr	r1, [pc, #256]	@ (800aa70 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800a96e:	68b8      	ldr	r0, [r7, #8]
 800a970:	f7f5 fdde 	bl	8000530 <__aeabi_fcmplt>
 800a974:	1e03      	subs	r3, r0, #0
 800a976:	d001      	beq.n	800a97c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800a978:	4b3e      	ldr	r3, [pc, #248]	@ (800aa74 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a97a:	e075      	b.n	800aa68 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800a97c:	493e      	ldr	r1, [pc, #248]	@ (800aa78 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800a97e:	68b8      	ldr	r0, [r7, #8]
 800a980:	f7f5 fdea 	bl	8000558 <__aeabi_fcmpgt>
 800a984:	1e03      	subs	r3, r0, #0
 800a986:	d001      	beq.n	800a98c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800a988:	2300      	movs	r3, #0
 800a98a:	e06d      	b.n	800aa68 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800a98c:	2100      	movs	r1, #0
 800a98e:	6838      	ldr	r0, [r7, #0]
 800a990:	f7f5 fdec 	bl	800056c <__aeabi_fcmpge>
 800a994:	1e03      	subs	r3, r0, #0
 800a996:	d047      	beq.n	800aa28 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2288      	movs	r2, #136	@ 0x88
 800a99c:	589b      	ldr	r3, [r3, r2]
 800a99e:	21fe      	movs	r1, #254	@ 0xfe
 800a9a0:	0589      	lsls	r1, r1, #22
 800a9a2:	1c18      	adds	r0, r3, #0
 800a9a4:	f7f5 fdbe 	bl	8000524 <__aeabi_fcmpeq>
 800a9a8:	1e03      	subs	r3, r0, #0
 800a9aa:	d00e      	beq.n	800a9ca <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	1c19      	adds	r1, r3, #0
 800a9b2:	20fe      	movs	r0, #254	@ 0xfe
 800a9b4:	0580      	lsls	r0, r0, #22
 800a9b6:	f7f6 fc31 	bl	800121c <__aeabi_fsub>
 800a9ba:	1c03      	adds	r3, r0, #0
 800a9bc:	492f      	ldr	r1, [pc, #188]	@ (800aa7c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800a9be:	1c18      	adds	r0, r3, #0
 800a9c0:	f7f6 faee 	bl	8000fa0 <__aeabi_fmul>
 800a9c4:	1c03      	adds	r3, r0, #0
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	e012      	b.n	800a9f0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	492c      	ldr	r1, [pc, #176]	@ (800aa80 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800a9d0:	1c18      	adds	r0, r3, #0
 800a9d2:	f7f6 fae5 	bl	8000fa0 <__aeabi_fmul>
 800a9d6:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800a9d8:	1c19      	adds	r1, r3, #0
 800a9da:	4826      	ldr	r0, [pc, #152]	@ (800aa74 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a9dc:	f7f6 fc1e 	bl	800121c <__aeabi_fsub>
 800a9e0:	1c03      	adds	r3, r0, #0
 800a9e2:	2181      	movs	r1, #129	@ 0x81
 800a9e4:	05c9      	lsls	r1, r1, #23
 800a9e6:	1c18      	adds	r0, r3, #0
 800a9e8:	f7f6 f8f4 	bl	8000bd4 <__aeabi_fdiv>
 800a9ec:	1c03      	adds	r3, r0, #0
 800a9ee:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a9f0:	4920      	ldr	r1, [pc, #128]	@ (800aa74 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7f5 ff64 	bl	80008c0 <__aeabi_fadd>
 800a9f8:	1c03      	adds	r3, r0, #0
 800a9fa:	1c1c      	adds	r4, r3, #0
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	1c18      	adds	r0, r3, #0
 800aa00:	f017 fc6e 	bl	80222e0 <expf>
 800aa04:	1c03      	adds	r3, r0, #0
 800aa06:	21fe      	movs	r1, #254	@ 0xfe
 800aa08:	0589      	lsls	r1, r1, #22
 800aa0a:	1c18      	adds	r0, r3, #0
 800aa0c:	f7f5 ff58 	bl	80008c0 <__aeabi_fadd>
 800aa10:	1c03      	adds	r3, r0, #0
 800aa12:	1c19      	adds	r1, r3, #0
 800aa14:	1c20      	adds	r0, r4, #0
 800aa16:	f7f6 f8dd 	bl	8000bd4 <__aeabi_fdiv>
 800aa1a:	1c03      	adds	r3, r0, #0
 800aa1c:	68f9      	ldr	r1, [r7, #12]
 800aa1e:	1c18      	adds	r0, r3, #0
 800aa20:	f7f6 fbfc 	bl	800121c <__aeabi_fsub>
 800aa24:	1c03      	adds	r3, r0, #0
 800aa26:	e01f      	b.n	800aa68 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2188      	movs	r1, #136	@ 0x88
 800aa30:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800aa32:	1c19      	adds	r1, r3, #0
 800aa34:	1c10      	adds	r0, r2, #0
 800aa36:	f7f6 f8cd 	bl	8000bd4 <__aeabi_fdiv>
 800aa3a:	1c03      	adds	r3, r0, #0
 800aa3c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	1c18      	adds	r0, r3, #0
 800aa42:	f017 fc4d 	bl	80222e0 <expf>
 800aa46:	1c03      	adds	r3, r0, #0
 800aa48:	21fe      	movs	r1, #254	@ 0xfe
 800aa4a:	0589      	lsls	r1, r1, #22
 800aa4c:	1c18      	adds	r0, r3, #0
 800aa4e:	f7f5 ff37 	bl	80008c0 <__aeabi_fadd>
 800aa52:	1c03      	adds	r3, r0, #0
 800aa54:	1c19      	adds	r1, r3, #0
 800aa56:	4807      	ldr	r0, [pc, #28]	@ (800aa74 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aa58:	f7f6 f8bc 	bl	8000bd4 <__aeabi_fdiv>
 800aa5c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800aa5e:	1c19      	adds	r1, r3, #0
 800aa60:	1c20      	adds	r0, r4, #0
 800aa62:	f7f6 fa9d 	bl	8000fa0 <__aeabi_fmul>
 800aa66:	1c03      	adds	r3, r0, #0
        }
    }
}
 800aa68:	1c18      	adds	r0, r3, #0
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	b005      	add	sp, #20
 800aa6e:	bd90      	pop	{r4, r7, pc}
 800aa70:	c2480000 	.word	0xc2480000
 800aa74:	43fa0000 	.word	0x43fa0000
 800aa78:	42480000 	.word	0x42480000
 800aa7c:	3f8041ab 	.word	0x3f8041ab
 800aa80:	40a00000 	.word	0x40a00000

0800aa84 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800aa84:	b590      	push	{r4, r7, lr}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4913      	ldr	r1, [pc, #76]	@ (800aae4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800aa96:	1c18      	adds	r0, r3, #0
 800aa98:	f7f5 ff12 	bl	80008c0 <__aeabi_fadd>
 800aa9c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800aa9e:	1c19      	adds	r1, r3, #0
 800aaa0:	1c20      	adds	r0, r4, #0
 800aaa2:	f7f6 f897 	bl	8000bd4 <__aeabi_fdiv>
 800aaa6:	1c03      	adds	r3, r0, #0
 800aaa8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	228c      	movs	r2, #140	@ 0x8c
 800aaae:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	490b      	ldr	r1, [pc, #44]	@ (800aae8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800aaba:	1c18      	adds	r0, r3, #0
 800aabc:	f7f5 ff00 	bl	80008c0 <__aeabi_fadd>
 800aac0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800aac2:	1c19      	adds	r1, r3, #0
 800aac4:	1c20      	adds	r0, r4, #0
 800aac6:	f7f6 f885 	bl	8000bd4 <__aeabi_fdiv>
 800aaca:	1c03      	adds	r3, r0, #0
 800aacc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2290      	movs	r2, #144	@ 0x90
 800aad2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2294      	movs	r2, #148	@ 0x94
 800aad8:	2100      	movs	r1, #0
 800aada:	5499      	strb	r1, [r3, r2]
}
 800aadc:	46c0      	nop			@ (mov r8, r8)
 800aade:	46bd      	mov	sp, r7
 800aae0:	b003      	add	sp, #12
 800aae2:	bd90      	pop	{r4, r7, pc}
 800aae4:	41a00000 	.word	0x41a00000
 800aae8:	43fa0000 	.word	0x43fa0000

0800aaec <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800aaec:	b590      	push	{r4, r7, lr}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2294      	movs	r2, #148	@ 0x94
 800aafa:	5c9b      	ldrb	r3, [r3, r2]
 800aafc:	2201      	movs	r2, #1
 800aafe:	4053      	eors	r3, r2
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00f      	beq.n	800ab26 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2198      	movs	r1, #152	@ 0x98
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	219c      	movs	r1, #156	@ 0x9c
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	21a0      	movs	r1, #160	@ 0xa0
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2294      	movs	r2, #148	@ 0x94
 800ab22:	2101      	movs	r1, #1
 800ab24:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	228c      	movs	r2, #140	@ 0x8c
 800ab2a:	589b      	ldr	r3, [r3, r2]
 800ab2c:	1c19      	adds	r1, r3, #0
 800ab2e:	20fe      	movs	r0, #254	@ 0xfe
 800ab30:	0580      	lsls	r0, r0, #22
 800ab32:	f7f6 fb73 	bl	800121c <__aeabi_fsub>
 800ab36:	1c03      	adds	r3, r0, #0
 800ab38:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2298      	movs	r2, #152	@ 0x98
 800ab3e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ab40:	1c19      	adds	r1, r3, #0
 800ab42:	f7f6 fa2d 	bl	8000fa0 <__aeabi_fmul>
 800ab46:	1c03      	adds	r3, r0, #0
 800ab48:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	228c      	movs	r2, #140	@ 0x8c
 800ab4e:	589b      	ldr	r3, [r3, r2]
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	1c18      	adds	r0, r3, #0
 800ab54:	f7f6 fa24 	bl	8000fa0 <__aeabi_fmul>
 800ab58:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800ab5a:	1c19      	adds	r1, r3, #0
 800ab5c:	1c20      	adds	r0, r4, #0
 800ab5e:	f7f5 feaf 	bl	80008c0 <__aeabi_fadd>
 800ab62:	1c03      	adds	r3, r0, #0
 800ab64:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2298      	movs	r2, #152	@ 0x98
 800ab6a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2290      	movs	r2, #144	@ 0x90
 800ab70:	589b      	ldr	r3, [r3, r2]
 800ab72:	1c19      	adds	r1, r3, #0
 800ab74:	20fe      	movs	r0, #254	@ 0xfe
 800ab76:	0580      	lsls	r0, r0, #22
 800ab78:	f7f6 fb50 	bl	800121c <__aeabi_fsub>
 800ab7c:	1c03      	adds	r3, r0, #0
 800ab7e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	229c      	movs	r2, #156	@ 0x9c
 800ab84:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ab86:	1c19      	adds	r1, r3, #0
 800ab88:	f7f6 fa0a 	bl	8000fa0 <__aeabi_fmul>
 800ab8c:	1c03      	adds	r3, r0, #0
 800ab8e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2290      	movs	r2, #144	@ 0x90
 800ab94:	589b      	ldr	r3, [r3, r2]
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	1c18      	adds	r0, r3, #0
 800ab9a:	f7f6 fa01 	bl	8000fa0 <__aeabi_fmul>
 800ab9e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800aba0:	1c19      	adds	r1, r3, #0
 800aba2:	1c20      	adds	r0, r4, #0
 800aba4:	f7f5 fe8c 	bl	80008c0 <__aeabi_fadd>
 800aba8:	1c03      	adds	r3, r0, #0
 800abaa:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	229c      	movs	r2, #156	@ 0x9c
 800abb0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2298      	movs	r2, #152	@ 0x98
 800abb6:	589a      	ldr	r2, [r3, r2]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	219c      	movs	r1, #156	@ 0x9c
 800abbc:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800abbe:	1c19      	adds	r1, r3, #0
 800abc0:	1c10      	adds	r0, r2, #0
 800abc2:	f7f6 fb2b 	bl	800121c <__aeabi_fsub>
 800abc6:	1c03      	adds	r3, r0, #0
 800abc8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800abca:	2100      	movs	r1, #0
 800abcc:	6978      	ldr	r0, [r7, #20]
 800abce:	f7f5 fcaf 	bl	8000530 <__aeabi_fcmplt>
 800abd2:	1e03      	subs	r3, r0, #0
 800abd4:	d004      	beq.n	800abe0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2280      	movs	r2, #128	@ 0x80
 800abda:	0612      	lsls	r2, r2, #24
 800abdc:	4053      	eors	r3, r2
 800abde:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800abe0:	4923      	ldr	r1, [pc, #140]	@ (800ac70 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800abe2:	6978      	ldr	r0, [r7, #20]
 800abe4:	f7f6 f9dc 	bl	8000fa0 <__aeabi_fmul>
 800abe8:	1c03      	adds	r3, r0, #0
 800abea:	1c18      	adds	r0, r3, #0
 800abec:	f017 fb78 	bl	80222e0 <expf>
 800abf0:	1c03      	adds	r3, r0, #0
 800abf2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800abf4:	491f      	ldr	r1, [pc, #124]	@ (800ac74 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800abf6:	6938      	ldr	r0, [r7, #16]
 800abf8:	f7f6 f9d2 	bl	8000fa0 <__aeabi_fmul>
 800abfc:	1c03      	adds	r3, r0, #0
 800abfe:	491e      	ldr	r1, [pc, #120]	@ (800ac78 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800ac00:	1c18      	adds	r0, r3, #0
 800ac02:	f7f5 fe5d 	bl	80008c0 <__aeabi_fadd>
 800ac06:	1c03      	adds	r3, r0, #0
 800ac08:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685c      	ldr	r4, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	68f9      	ldr	r1, [r7, #12]
 800ac14:	1c18      	adds	r0, r3, #0
 800ac16:	f7f5 fe53 	bl	80008c0 <__aeabi_fadd>
 800ac1a:	1c03      	adds	r3, r0, #0
 800ac1c:	1c19      	adds	r1, r3, #0
 800ac1e:	1c20      	adds	r0, r4, #0
 800ac20:	f7f5 ffd8 	bl	8000bd4 <__aeabi_fdiv>
 800ac24:	1c03      	adds	r3, r0, #0
 800ac26:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ac28:	68b9      	ldr	r1, [r7, #8]
 800ac2a:	20fe      	movs	r0, #254	@ 0xfe
 800ac2c:	0580      	lsls	r0, r0, #22
 800ac2e:	f7f6 faf5 	bl	800121c <__aeabi_fsub>
 800ac32:	1c03      	adds	r3, r0, #0
 800ac34:	1c18      	adds	r0, r3, #0
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	22a0      	movs	r2, #160	@ 0xa0
 800ac3a:	589b      	ldr	r3, [r3, r2]
 800ac3c:	1c19      	adds	r1, r3, #0
 800ac3e:	f7f6 f9af 	bl	8000fa0 <__aeabi_fmul>
 800ac42:	1c03      	adds	r3, r0, #0
 800ac44:	1c1c      	adds	r4, r3, #0
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	68b8      	ldr	r0, [r7, #8]
 800ac4a:	f7f6 f9a9 	bl	8000fa0 <__aeabi_fmul>
 800ac4e:	1c03      	adds	r3, r0, #0
 800ac50:	1c19      	adds	r1, r3, #0
 800ac52:	1c20      	adds	r0, r4, #0
 800ac54:	f7f5 fe34 	bl	80008c0 <__aeabi_fadd>
 800ac58:	1c03      	adds	r3, r0, #0
 800ac5a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	22a0      	movs	r2, #160	@ 0xa0
 800ac60:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	22a0      	movs	r2, #160	@ 0xa0
 800ac66:	589b      	ldr	r3, [r3, r2]
}
 800ac68:	1c18      	adds	r0, r3, #0
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	b007      	add	sp, #28
 800ac6e:	bd90      	pop	{r4, r7, pc}
 800ac70:	be4ccccd 	.word	0xbe4ccccd
 800ac74:	43f00000 	.word	0x43f00000
 800ac78:	41a00000 	.word	0x41a00000

0800ac7c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	000a      	movs	r2, r1
 800ac86:	1cbb      	adds	r3, r7, #2
 800ac88:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800ac8a:	230d      	movs	r3, #13
 800ac8c:	18fb      	adds	r3, r7, r3
 800ac8e:	22ff      	movs	r2, #255	@ 0xff
 800ac90:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ac92:	230e      	movs	r3, #14
 800ac94:	18fb      	adds	r3, r7, r3
 800ac96:	2200      	movs	r2, #0
 800ac98:	801a      	strh	r2, [r3, #0]
 800ac9a:	e037      	b.n	800ad0c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800ac9c:	230e      	movs	r3, #14
 800ac9e:	18fb      	adds	r3, r7, r3
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	18d3      	adds	r3, r2, r3
 800aca6:	7819      	ldrb	r1, [r3, #0]
 800aca8:	220d      	movs	r2, #13
 800acaa:	18bb      	adds	r3, r7, r2
 800acac:	18ba      	adds	r2, r7, r2
 800acae:	7812      	ldrb	r2, [r2, #0]
 800acb0:	404a      	eors	r2, r1
 800acb2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800acb4:	230c      	movs	r3, #12
 800acb6:	18fb      	adds	r3, r7, r3
 800acb8:	2208      	movs	r2, #8
 800acba:	701a      	strb	r2, [r3, #0]
 800acbc:	e01b      	b.n	800acf6 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800acbe:	210d      	movs	r1, #13
 800acc0:	187b      	adds	r3, r7, r1
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	b25b      	sxtb	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	da09      	bge.n	800acde <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800acca:	187b      	adds	r3, r7, r1
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	b25b      	sxtb	r3, r3
 800acd2:	2231      	movs	r2, #49	@ 0x31
 800acd4:	4053      	eors	r3, r2
 800acd6:	b25a      	sxtb	r2, r3
 800acd8:	187b      	adds	r3, r7, r1
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e005      	b.n	800acea <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800acde:	230d      	movs	r3, #13
 800ace0:	18fa      	adds	r2, r7, r3
 800ace2:	18fb      	adds	r3, r7, r3
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	18db      	adds	r3, r3, r3
 800ace8:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800acea:	220c      	movs	r2, #12
 800acec:	18bb      	adds	r3, r7, r2
 800acee:	18ba      	adds	r2, r7, r2
 800acf0:	7812      	ldrb	r2, [r2, #0]
 800acf2:	3a01      	subs	r2, #1
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	230c      	movs	r3, #12
 800acf8:	18fb      	adds	r3, r7, r3
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1de      	bne.n	800acbe <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ad00:	220e      	movs	r2, #14
 800ad02:	18bb      	adds	r3, r7, r2
 800ad04:	18ba      	adds	r2, r7, r2
 800ad06:	8812      	ldrh	r2, [r2, #0]
 800ad08:	3201      	adds	r2, #1
 800ad0a:	801a      	strh	r2, [r3, #0]
 800ad0c:	230e      	movs	r3, #14
 800ad0e:	18fa      	adds	r2, r7, r3
 800ad10:	1cbb      	adds	r3, r7, #2
 800ad12:	8812      	ldrh	r2, [r2, #0]
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d3c0      	bcc.n	800ac9c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800ad1a:	230d      	movs	r3, #13
 800ad1c:	18fb      	adds	r3, r7, r3
 800ad1e:	781b      	ldrb	r3, [r3, #0]
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b004      	add	sp, #16
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	0008      	movs	r0, r1
 800ad32:	0011      	movs	r1, r2
 800ad34:	1cbb      	adds	r3, r7, #2
 800ad36:	1c02      	adds	r2, r0, #0
 800ad38:	801a      	strh	r2, [r3, #0]
 800ad3a:	1c7b      	adds	r3, r7, #1
 800ad3c:	1c0a      	adds	r2, r1, #0
 800ad3e:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800ad40:	1cbb      	adds	r3, r7, #2
 800ad42:	881a      	ldrh	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	0011      	movs	r1, r2
 800ad48:	0018      	movs	r0, r3
 800ad4a:	f7ff ff97 	bl	800ac7c <sensirion_i2c_generate_crc>
 800ad4e:	0003      	movs	r3, r0
 800ad50:	001a      	movs	r2, r3
 800ad52:	1c7b      	adds	r3, r7, #1
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d001      	beq.n	800ad5e <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	0018      	movs	r0, r3
 800ad62:	46bd      	mov	sp, r7
 800ad64:	b002      	add	sp, #8
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	0008      	movs	r0, r1
 800ad72:	0011      	movs	r1, r2
 800ad74:	1cbb      	adds	r3, r7, #2
 800ad76:	1c02      	adds	r2, r0, #0
 800ad78:	801a      	strh	r2, [r3, #0]
 800ad7a:	003b      	movs	r3, r7
 800ad7c:	1c0a      	adds	r2, r1, #0
 800ad7e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800ad80:	003b      	movs	r3, r7
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	0a1b      	lsrs	r3, r3, #8
 800ad86:	b299      	uxth	r1, r3
 800ad88:	1cbb      	adds	r3, r7, #2
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	1cba      	adds	r2, r7, #2
 800ad8e:	1c58      	adds	r0, r3, #1
 800ad90:	8010      	strh	r0, [r2, #0]
 800ad92:	001a      	movs	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	189b      	adds	r3, r3, r2
 800ad98:	b2ca      	uxtb	r2, r1
 800ad9a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800ad9c:	1cbb      	adds	r3, r7, #2
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	1cba      	adds	r2, r7, #2
 800ada2:	1c59      	adds	r1, r3, #1
 800ada4:	8011      	strh	r1, [r2, #0]
 800ada6:	001a      	movs	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	189b      	adds	r3, r3, r2
 800adac:	003a      	movs	r2, r7
 800adae:	8812      	ldrh	r2, [r2, #0]
 800adb0:	b2d2      	uxtb	r2, r2
 800adb2:	701a      	strb	r2, [r3, #0]
    return offset;
 800adb4:	1cbb      	adds	r3, r7, #2
 800adb6:	881b      	ldrh	r3, [r3, #0]
}
 800adb8:	0018      	movs	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	b002      	add	sp, #8
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800adc0:	b590      	push	{r4, r7, lr}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	0008      	movs	r0, r1
 800adca:	0011      	movs	r1, r2
 800adcc:	1cbb      	adds	r3, r7, #2
 800adce:	1c02      	adds	r2, r0, #0
 800add0:	801a      	strh	r2, [r3, #0]
 800add2:	003b      	movs	r3, r7
 800add4:	1c0a      	adds	r2, r1, #0
 800add6:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800add8:	003b      	movs	r3, r7
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	0a1b      	lsrs	r3, r3, #8
 800adde:	b299      	uxth	r1, r3
 800ade0:	1cbb      	adds	r3, r7, #2
 800ade2:	881b      	ldrh	r3, [r3, #0]
 800ade4:	1cba      	adds	r2, r7, #2
 800ade6:	1c58      	adds	r0, r3, #1
 800ade8:	8010      	strh	r0, [r2, #0]
 800adea:	001a      	movs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	189b      	adds	r3, r3, r2
 800adf0:	b2ca      	uxtb	r2, r1
 800adf2:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800adf4:	1cbb      	adds	r3, r7, #2
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	1cba      	adds	r2, r7, #2
 800adfa:	1c59      	adds	r1, r3, #1
 800adfc:	8011      	strh	r1, [r2, #0]
 800adfe:	001a      	movs	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	189b      	adds	r3, r3, r2
 800ae04:	003a      	movs	r2, r7
 800ae06:	8812      	ldrh	r2, [r2, #0]
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800ae0c:	1cbb      	adds	r3, r7, #2
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	3b02      	subs	r3, #2
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800ae16:	1cbb      	adds	r3, r7, #2
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	18d4      	adds	r4, r2, r3
 800ae1e:	2102      	movs	r1, #2
 800ae20:	f7ff ff2c 	bl	800ac7c <sensirion_i2c_generate_crc>
 800ae24:	0003      	movs	r3, r0
 800ae26:	7023      	strb	r3, [r4, #0]
    offset++;
 800ae28:	1cbb      	adds	r3, r7, #2
 800ae2a:	881a      	ldrh	r2, [r3, #0]
 800ae2c:	1cbb      	adds	r3, r7, #2
 800ae2e:	3201      	adds	r2, #1
 800ae30:	801a      	strh	r2, [r3, #0]

    return offset;
 800ae32:	1cbb      	adds	r3, r7, #2
 800ae34:	881b      	ldrh	r3, [r3, #0]
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b003      	add	sp, #12
 800ae3c:	bd90      	pop	{r4, r7, pc}

0800ae3e <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	0008      	movs	r0, r1
 800ae48:	0011      	movs	r1, r2
 800ae4a:	1cbb      	adds	r3, r7, #2
 800ae4c:	1c02      	adds	r2, r0, #0
 800ae4e:	801a      	strh	r2, [r3, #0]
 800ae50:	003b      	movs	r3, r7
 800ae52:	1c0a      	adds	r2, r1, #0
 800ae54:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800ae56:	003b      	movs	r3, r7
 800ae58:	881a      	ldrh	r2, [r3, #0]
 800ae5a:	1cbb      	adds	r3, r7, #2
 800ae5c:	8819      	ldrh	r1, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	0018      	movs	r0, r3
 800ae62:	f7ff ffad 	bl	800adc0 <sensirion_i2c_add_uint16_t_to_buffer>
 800ae66:	0003      	movs	r3, r0
}
 800ae68:	0018      	movs	r0, r3
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6039      	str	r1, [r7, #0]
 800ae78:	0011      	movs	r1, r2
 800ae7a:	1dfb      	adds	r3, r7, #7
 800ae7c:	1c02      	adds	r2, r0, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
 800ae80:	1d3b      	adds	r3, r7, #4
 800ae82:	1c0a      	adds	r2, r1, #0
 800ae84:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800ae86:	1d3b      	adds	r3, r7, #4
 800ae88:	881a      	ldrh	r2, [r3, #0]
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	1dfb      	adds	r3, r7, #7
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	0018      	movs	r0, r3
 800ae92:	f7fe fa45 	bl	8009320 <sensirion_i2c_hal_write>
 800ae96:	0003      	movs	r3, r0
}
 800ae98:	0018      	movs	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	b002      	add	sp, #8
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800aea0:	b5b0      	push	{r4, r5, r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6039      	str	r1, [r7, #0]
 800aea8:	0011      	movs	r1, r2
 800aeaa:	1dfb      	adds	r3, r7, #7
 800aeac:	1c02      	adds	r2, r0, #0
 800aeae:	701a      	strb	r2, [r3, #0]
 800aeb0:	1d3b      	adds	r3, r7, #4
 800aeb2:	1c0a      	adds	r2, r1, #0
 800aeb4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800aeb6:	1d3b      	adds	r3, r7, #4
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	085b      	lsrs	r3, r3, #1
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	220a      	movs	r2, #10
 800aec0:	18ba      	adds	r2, r7, r2
 800aec2:	1c19      	adds	r1, r3, #0
 800aec4:	1c0b      	adds	r3, r1, #0
 800aec6:	18db      	adds	r3, r3, r3
 800aec8:	185b      	adds	r3, r3, r1
 800aeca:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800aecc:	1d3b      	adds	r3, r7, #4
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	2201      	movs	r2, #1
 800aed2:	4013      	ands	r3, r2
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d001      	beq.n	800aede <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800aeda:	2304      	movs	r3, #4
 800aedc:	e06b      	b.n	800afb6 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800aede:	230a      	movs	r3, #10
 800aee0:	18fb      	adds	r3, r7, r3
 800aee2:	881a      	ldrh	r2, [r3, #0]
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	1dfb      	adds	r3, r7, #7
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	0018      	movs	r0, r3
 800aeec:	f7fe f9f8 	bl	80092e0 <sensirion_i2c_hal_read>
 800aef0:	0003      	movs	r3, r0
 800aef2:	001a      	movs	r2, r3
 800aef4:	2108      	movs	r1, #8
 800aef6:	187b      	adds	r3, r7, r1
 800aef8:	801a      	strh	r2, [r3, #0]
    if (error) {
 800aefa:	000a      	movs	r2, r1
 800aefc:	18bb      	adds	r3, r7, r2
 800aefe:	2100      	movs	r1, #0
 800af00:	5e5b      	ldrsh	r3, [r3, r1]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d003      	beq.n	800af0e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800af06:	18bb      	adds	r3, r7, r2
 800af08:	2200      	movs	r2, #0
 800af0a:	5e9b      	ldrsh	r3, [r3, r2]
 800af0c:	e053      	b.n	800afb6 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800af0e:	230e      	movs	r3, #14
 800af10:	18fb      	adds	r3, r7, r3
 800af12:	2200      	movs	r2, #0
 800af14:	801a      	strh	r2, [r3, #0]
 800af16:	230c      	movs	r3, #12
 800af18:	18fb      	adds	r3, r7, r3
 800af1a:	2200      	movs	r2, #0
 800af1c:	801a      	strh	r2, [r3, #0]
 800af1e:	e041      	b.n	800afa4 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800af20:	210e      	movs	r1, #14
 800af22:	187b      	adds	r3, r7, r1
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800af2a:	187b      	adds	r3, r7, r1
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	3302      	adds	r3, #2
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	001a      	movs	r2, r3
 800af38:	2102      	movs	r1, #2
 800af3a:	f7ff fef5 	bl	800ad28 <sensirion_i2c_check_crc>
 800af3e:	0003      	movs	r3, r0
 800af40:	001a      	movs	r2, r3
 800af42:	2108      	movs	r1, #8
 800af44:	187b      	adds	r3, r7, r1
 800af46:	801a      	strh	r2, [r3, #0]
        if (error) {
 800af48:	000a      	movs	r2, r1
 800af4a:	18bb      	adds	r3, r7, r2
 800af4c:	2100      	movs	r1, #0
 800af4e:	5e5b      	ldrsh	r3, [r3, r1]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d003      	beq.n	800af5c <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800af54:	18bb      	adds	r3, r7, r2
 800af56:	2200      	movs	r2, #0
 800af58:	5e9b      	ldrsh	r3, [r3, r2]
 800af5a:	e02c      	b.n	800afb6 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800af5c:	240e      	movs	r4, #14
 800af5e:	193b      	adds	r3, r7, r4
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	18d2      	adds	r2, r2, r3
 800af66:	250c      	movs	r5, #12
 800af68:	197b      	adds	r3, r7, r5
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	1979      	adds	r1, r7, r5
 800af6e:	1c58      	adds	r0, r3, #1
 800af70:	8008      	strh	r0, [r1, #0]
 800af72:	0019      	movs	r1, r3
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	185b      	adds	r3, r3, r1
 800af78:	7812      	ldrb	r2, [r2, #0]
 800af7a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800af7c:	193b      	adds	r3, r7, r4
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	3301      	adds	r3, #1
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	18d2      	adds	r2, r2, r3
 800af86:	197b      	adds	r3, r7, r5
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	1979      	adds	r1, r7, r5
 800af8c:	1c58      	adds	r0, r3, #1
 800af8e:	8008      	strh	r0, [r1, #0]
 800af90:	0019      	movs	r1, r3
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	185b      	adds	r3, r3, r1
 800af96:	7812      	ldrb	r2, [r2, #0]
 800af98:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800af9a:	193b      	adds	r3, r7, r4
 800af9c:	193a      	adds	r2, r7, r4
 800af9e:	8812      	ldrh	r2, [r2, #0]
 800afa0:	3203      	adds	r2, #3
 800afa2:	801a      	strh	r2, [r3, #0]
 800afa4:	230e      	movs	r3, #14
 800afa6:	18fa      	adds	r2, r7, r3
 800afa8:	230a      	movs	r3, #10
 800afaa:	18fb      	adds	r3, r7, r3
 800afac:	8812      	ldrh	r2, [r2, #0]
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d3b5      	bcc.n	800af20 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	0018      	movs	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	b004      	add	sp, #16
 800afbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800afc0 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800afc0:	b590      	push	{r4, r7, lr}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6039      	str	r1, [r7, #0]
 800afc8:	0011      	movs	r1, r2
 800afca:	1dfb      	adds	r3, r7, #7
 800afcc:	1c02      	adds	r2, r0, #0
 800afce:	701a      	strb	r2, [r3, #0]
 800afd0:	1dbb      	adds	r3, r7, #6
 800afd2:	1c0a      	adds	r2, r1, #0
 800afd4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800afd6:	4b08      	ldr	r3, [pc, #32]	@ (800aff8 <ReadRegister+0x38>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d008      	beq.n	800aff0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800afde:	4b06      	ldr	r3, [pc, #24]	@ (800aff8 <ReadRegister+0x38>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	1dba      	adds	r2, r7, #6
 800afe4:	7814      	ldrb	r4, [r2, #0]
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	1dfa      	adds	r2, r7, #7
 800afea:	7810      	ldrb	r0, [r2, #0]
 800afec:	0022      	movs	r2, r4
 800afee:	4798      	blx	r3
  }
}
 800aff0:	46c0      	nop			@ (mov r8, r8)
 800aff2:	46bd      	mov	sp, r7
 800aff4:	b003      	add	sp, #12
 800aff6:	bd90      	pop	{r4, r7, pc}
 800aff8:	200011e0 	.word	0x200011e0

0800affc <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800affc:	b590      	push	{r4, r7, lr}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6039      	str	r1, [r7, #0]
 800b004:	0011      	movs	r1, r2
 800b006:	1dfb      	adds	r3, r7, #7
 800b008:	1c02      	adds	r2, r0, #0
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	1dbb      	adds	r3, r7, #6
 800b00e:	1c0a      	adds	r2, r1, #0
 800b010:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b012:	4b08      	ldr	r3, [pc, #32]	@ (800b034 <WriteRegister+0x38>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d008      	beq.n	800b02c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b01a:	4b06      	ldr	r3, [pc, #24]	@ (800b034 <WriteRegister+0x38>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	1dba      	adds	r2, r7, #6
 800b020:	7814      	ldrb	r4, [r2, #0]
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	1dfa      	adds	r2, r7, #7
 800b026:	7810      	ldrb	r0, [r2, #0]
 800b028:	0022      	movs	r2, r4
 800b02a:	4798      	blx	r3
  }
}
 800b02c:	46c0      	nop			@ (mov r8, r8)
 800b02e:	46bd      	mov	sp, r7
 800b030:	b003      	add	sp, #12
 800b032:	bd90      	pop	{r4, r7, pc}
 800b034:	200011e4 	.word	0x200011e4

0800b038 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b042:	4b07      	ldr	r3, [pc, #28]	@ (800b060 <SGP_Init+0x28>)
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b048:	4b06      	ldr	r3, [pc, #24]	@ (800b064 <SGP_Init+0x2c>)
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b04e:	4b06      	ldr	r3, [pc, #24]	@ (800b068 <SGP_Init+0x30>)
 800b050:	2100      	movs	r1, #0
 800b052:	0018      	movs	r0, r3
 800b054:	f7fe ff8e 	bl	8009f74 <GasIndexAlgorithm_init>
}
 800b058:	46c0      	nop			@ (mov r8, r8)
 800b05a:	46bd      	mov	sp, r7
 800b05c:	b002      	add	sp, #8
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	200011e0 	.word	0x200011e0
 800b064:	200011e4 	.word	0x200011e4
 800b068:	200011fc 	.word	0x200011fc

0800b06c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b070:	4b13      	ldr	r3, [pc, #76]	@ (800b0c0 <SGP_StartMeasurement+0x54>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00d      	beq.n	800b094 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b078:	4b12      	ldr	r3, [pc, #72]	@ (800b0c4 <SGP_StartMeasurement+0x58>)
 800b07a:	2208      	movs	r2, #8
 800b07c:	0019      	movs	r1, r3
 800b07e:	2059      	movs	r0, #89	@ 0x59
 800b080:	f7ff ffbc 	bl	800affc <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b084:	f003 f948 	bl	800e318 <HAL_GetTick>
 800b088:	0003      	movs	r3, r0
 800b08a:	331e      	adds	r3, #30
 800b08c:	001a      	movs	r2, r3
 800b08e:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c8 <SGP_StartMeasurement+0x5c>)
 800b090:	601a      	str	r2, [r3, #0]
 800b092:	e00c      	b.n	800b0ae <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b094:	4b0d      	ldr	r3, [pc, #52]	@ (800b0cc <SGP_StartMeasurement+0x60>)
 800b096:	2208      	movs	r2, #8
 800b098:	0019      	movs	r1, r3
 800b09a:	2059      	movs	r0, #89	@ 0x59
 800b09c:	f7ff ffae 	bl	800affc <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b0a0:	f003 f93a 	bl	800e318 <HAL_GetTick>
 800b0a4:	0003      	movs	r3, r0
 800b0a6:	33aa      	adds	r3, #170	@ 0xaa
 800b0a8:	001a      	movs	r2, r3
 800b0aa:	4b09      	ldr	r3, [pc, #36]	@ (800b0d0 <SGP_StartMeasurement+0x64>)
 800b0ac:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b0ae:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <SGP_StartMeasurement+0x68>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b0b4:	4b08      	ldr	r3, [pc, #32]	@ (800b0d8 <SGP_StartMeasurement+0x6c>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
}
 800b0ba:	46c0      	nop			@ (mov r8, r8)
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	200012a4 	.word	0x200012a4
 800b0c4:	20000094 	.word	0x20000094
 800b0c8:	200000a8 	.word	0x200000a8
 800b0cc:	2000008c 	.word	0x2000008c
 800b0d0:	200000a0 	.word	0x200000a0
 800b0d4:	200011f8 	.word	0x200011f8
 800b0d8:	200011f9 	.word	0x200011f9

0800b0dc <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b0e0:	4b04      	ldr	r3, [pc, #16]	@ (800b0f4 <SGP_HeatedUp+0x18>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f002 fc75 	bl	800d9d4 <TimestampIsReached>
 800b0ea:	0003      	movs	r3, r0
}
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	46c0      	nop			@ (mov r8, r8)
 800b0f4:	200000a0 	.word	0x200000a0

0800b0f8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b0fc:	4b04      	ldr	r3, [pc, #16]	@ (800b110 <SGP_MeasurementReady+0x18>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	0018      	movs	r0, r3
 800b102:	f002 fc67 	bl	800d9d4 <TimestampIsReached>
 800b106:	0003      	movs	r3, r0
}
 800b108:	0018      	movs	r0, r3
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	46c0      	nop			@ (mov r8, r8)
 800b110:	200000a8 	.word	0x200000a8

0800b114 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b118:	4b04      	ldr	r3, [pc, #16]	@ (800b12c <SGP_MeasurementDone+0x18>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	0018      	movs	r0, r3
 800b11e:	f002 fc59 	bl	800d9d4 <TimestampIsReached>
 800b122:	0003      	movs	r3, r0
}
 800b124:	0018      	movs	r0, r3
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	46c0      	nop			@ (mov r8, r8)
 800b12c:	200000a4 	.word	0x200000a4

0800b130 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b134:	4b04      	ldr	r3, [pc, #16]	@ (800b148 <SGP_TurnHeaterOff+0x18>)
 800b136:	2202      	movs	r2, #2
 800b138:	0019      	movs	r1, r3
 800b13a:	2059      	movs	r0, #89	@ 0x59
 800b13c:	f7ff ff5e 	bl	800affc <WriteRegister>
}
 800b140:	46c0      	nop			@ (mov r8, r8)
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	46c0      	nop			@ (mov r8, r8)
 800b148:	20000084 	.word	0x20000084

0800b14c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b14c:	b5b0      	push	{r4, r5, r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af02      	add	r7, sp, #8
 800b152:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b154:	f7ff ffc2 	bl	800b0dc <SGP_HeatedUp>
 800b158:	1e03      	subs	r3, r0, #0
 800b15a:	d032      	beq.n	800b1c2 <SGP_GetMeasurementValues+0x76>
 800b15c:	4bd4      	ldr	r3, [pc, #848]	@ (800b4b0 <SGP_GetMeasurementValues+0x364>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2201      	movs	r2, #1
 800b162:	4053      	eors	r3, r2
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b00      	cmp	r3, #0
 800b168:	d02b      	beq.n	800b1c2 <SGP_GetMeasurementValues+0x76>
 800b16a:	4bd2      	ldr	r3, [pc, #840]	@ (800b4b4 <SGP_GetMeasurementValues+0x368>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2201      	movs	r2, #1
 800b170:	4053      	eors	r3, r2
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d024      	beq.n	800b1c2 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b178:	4bcd      	ldr	r3, [pc, #820]	@ (800b4b0 <SGP_GetMeasurementValues+0x364>)
 800b17a:	2201      	movs	r2, #1
 800b17c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b17e:	4bce      	ldr	r3, [pc, #824]	@ (800b4b8 <SGP_GetMeasurementValues+0x36c>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00d      	beq.n	800b1a2 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b186:	4bcd      	ldr	r3, [pc, #820]	@ (800b4bc <SGP_GetMeasurementValues+0x370>)
 800b188:	2208      	movs	r2, #8
 800b18a:	0019      	movs	r1, r3
 800b18c:	2059      	movs	r0, #89	@ 0x59
 800b18e:	f7ff ff35 	bl	800affc <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b192:	f003 f8c1 	bl	800e318 <HAL_GetTick>
 800b196:	0003      	movs	r3, r0
 800b198:	331e      	adds	r3, #30
 800b19a:	001a      	movs	r2, r3
 800b19c:	4bc8      	ldr	r3, [pc, #800]	@ (800b4c0 <SGP_GetMeasurementValues+0x374>)
 800b19e:	601a      	str	r2, [r3, #0]
 800b1a0:	e00c      	b.n	800b1bc <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b1a2:	4bc8      	ldr	r3, [pc, #800]	@ (800b4c4 <SGP_GetMeasurementValues+0x378>)
 800b1a4:	2208      	movs	r2, #8
 800b1a6:	0019      	movs	r1, r3
 800b1a8:	2059      	movs	r0, #89	@ 0x59
 800b1aa:	f7ff ff27 	bl	800affc <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b1ae:	f003 f8b3 	bl	800e318 <HAL_GetTick>
 800b1b2:	0003      	movs	r3, r0
 800b1b4:	331e      	adds	r3, #30
 800b1b6:	001a      	movs	r2, r3
 800b1b8:	4bc1      	ldr	r3, [pc, #772]	@ (800b4c0 <SGP_GetMeasurementValues+0x374>)
 800b1ba:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b1bc:	4bbd      	ldr	r3, [pc, #756]	@ (800b4b4 <SGP_GetMeasurementValues+0x368>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b1c2:	4bbb      	ldr	r3, [pc, #748]	@ (800b4b0 <SGP_GetMeasurementValues+0x364>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d100      	bne.n	800b1cc <SGP_GetMeasurementValues+0x80>
 800b1ca:	e1a9      	b.n	800b520 <SGP_GetMeasurementValues+0x3d4>
 800b1cc:	f7ff ff94 	bl	800b0f8 <SGP_MeasurementReady>
 800b1d0:	1e03      	subs	r3, r0, #0
 800b1d2:	d100      	bne.n	800b1d6 <SGP_GetMeasurementValues+0x8a>
 800b1d4:	e1a4      	b.n	800b520 <SGP_GetMeasurementValues+0x3d4>
 800b1d6:	4bbc      	ldr	r3, [pc, #752]	@ (800b4c8 <SGP_GetMeasurementValues+0x37c>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4053      	eors	r3, r2
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d100      	bne.n	800b1e6 <SGP_GetMeasurementValues+0x9a>
 800b1e4:	e19c      	b.n	800b520 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b1e6:	4bb8      	ldr	r3, [pc, #736]	@ (800b4c8 <SGP_GetMeasurementValues+0x37c>)
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b1ec:	4bb7      	ldr	r3, [pc, #732]	@ (800b4cc <SGP_GetMeasurementValues+0x380>)
 800b1ee:	2203      	movs	r2, #3
 800b1f0:	0019      	movs	r1, r3
 800b1f2:	2059      	movs	r0, #89	@ 0x59
 800b1f4:	f7ff fee4 	bl	800afc0 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b1f8:	4bb4      	ldr	r3, [pc, #720]	@ (800b4cc <SGP_GetMeasurementValues+0x380>)
 800b1fa:	2203      	movs	r2, #3
 800b1fc:	2103      	movs	r1, #3
 800b1fe:	0018      	movs	r0, r3
 800b200:	f000 f9f4 	bl	800b5ec <CheckCRC>
 800b204:	0003      	movs	r3, r0
 800b206:	001a      	movs	r2, r3
 800b208:	2301      	movs	r3, #1
 800b20a:	4053      	eors	r3, r2
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d02a      	beq.n	800b268 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b212:	4aaf      	ldr	r2, [pc, #700]	@ (800b4d0 <SGP_GetMeasurementValues+0x384>)
 800b214:	4baf      	ldr	r3, [pc, #700]	@ (800b4d4 <SGP_GetMeasurementValues+0x388>)
 800b216:	0019      	movs	r1, r3
 800b218:	2001      	movs	r0, #1
 800b21a:	f002 fc31 	bl	800da80 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b21e:	4aae      	ldr	r2, [pc, #696]	@ (800b4d8 <SGP_GetMeasurementValues+0x38c>)
 800b220:	4bae      	ldr	r3, [pc, #696]	@ (800b4dc <SGP_GetMeasurementValues+0x390>)
 800b222:	0019      	movs	r1, r3
 800b224:	2002      	movs	r0, #2
 800b226:	f002 fc2b 	bl	800da80 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b22a:	230f      	movs	r3, #15
 800b22c:	18fb      	adds	r3, r7, r3
 800b22e:	2200      	movs	r2, #0
 800b230:	701a      	strb	r2, [r3, #0]
 800b232:	e012      	b.n	800b25a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b234:	240f      	movs	r4, #15
 800b236:	193b      	adds	r3, r7, r4
 800b238:	7818      	ldrb	r0, [r3, #0]
 800b23a:	193b      	adds	r3, r7, r4
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	4aa3      	ldr	r2, [pc, #652]	@ (800b4cc <SGP_GetMeasurementValues+0x380>)
 800b240:	5cd3      	ldrb	r3, [r2, r3]
 800b242:	4aa7      	ldr	r2, [pc, #668]	@ (800b4e0 <SGP_GetMeasurementValues+0x394>)
 800b244:	49a7      	ldr	r1, [pc, #668]	@ (800b4e4 <SGP_GetMeasurementValues+0x398>)
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	0003      	movs	r3, r0
 800b24a:	2003      	movs	r0, #3
 800b24c:	f002 fc18 	bl	800da80 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b250:	193b      	adds	r3, r7, r4
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	193b      	adds	r3, r7, r4
 800b256:	3201      	adds	r2, #1
 800b258:	701a      	strb	r2, [r3, #0]
 800b25a:	230f      	movs	r3, #15
 800b25c:	18fb      	adds	r3, r7, r3
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d9e7      	bls.n	800b234 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b264:	2300      	movs	r3, #0
 800b266:	e173      	b.n	800b550 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b268:	f003 f856 	bl	800e318 <HAL_GetTick>
 800b26c:	0003      	movs	r3, r0
 800b26e:	22fa      	movs	r2, #250	@ 0xfa
 800b270:	0092      	lsls	r2, r2, #2
 800b272:	189a      	adds	r2, r3, r2
 800b274:	4b9c      	ldr	r3, [pc, #624]	@ (800b4e8 <SGP_GetMeasurementValues+0x39c>)
 800b276:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b278:	f7ff ff5a 	bl	800b130 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b27c:	4b9b      	ldr	r3, [pc, #620]	@ (800b4ec <SGP_GetMeasurementValues+0x3a0>)
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	b2da      	uxtb	r2, r3
 800b284:	4b99      	ldr	r3, [pc, #612]	@ (800b4ec <SGP_GetMeasurementValues+0x3a0>)
 800b286:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b288:	4b98      	ldr	r3, [pc, #608]	@ (800b4ec <SGP_GetMeasurementValues+0x3a0>)
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	4b98      	ldr	r3, [pc, #608]	@ (800b4f0 <SGP_GetMeasurementValues+0x3a4>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	429a      	cmp	r2, r3
 800b292:	d200      	bcs.n	800b296 <SGP_GetMeasurementValues+0x14a>
 800b294:	e144      	b.n	800b520 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b296:	4b8d      	ldr	r3, [pc, #564]	@ (800b4cc <SGP_GetMeasurementValues+0x380>)
 800b298:	785b      	ldrb	r3, [r3, #1]
 800b29a:	021b      	lsls	r3, r3, #8
 800b29c:	b21a      	sxth	r2, r3
 800b29e:	4b8b      	ldr	r3, [pc, #556]	@ (800b4cc <SGP_GetMeasurementValues+0x380>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b21b      	sxth	r3, r3
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	b21a      	sxth	r2, r3
 800b2a8:	240c      	movs	r4, #12
 800b2aa:	193b      	adds	r3, r7, r4
 800b2ac:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b2b2:	193b      	adds	r3, r7, r4
 800b2b4:	8819      	ldrh	r1, [r3, #0]
 800b2b6:	2308      	movs	r3, #8
 800b2b8:	18fa      	adds	r2, r7, r3
 800b2ba:	4b8e      	ldr	r3, [pc, #568]	@ (800b4f4 <SGP_GetMeasurementValues+0x3a8>)
 800b2bc:	0018      	movs	r0, r3
 800b2be:	f7fe febb 	bl	800a038 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b2c2:	4b8d      	ldr	r3, [pc, #564]	@ (800b4f8 <SGP_GetMeasurementValues+0x3ac>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	4b8b      	ldr	r3, [pc, #556]	@ (800b4f8 <SGP_GetMeasurementValues+0x3ac>)
 800b2cc:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b2ce:	4b8a      	ldr	r3, [pc, #552]	@ (800b4f8 <SGP_GetMeasurementValues+0x3ac>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d10d      	bne.n	800b2f2 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b2d6:	193b      	adds	r3, r7, r4
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	4a88      	ldr	r2, [pc, #544]	@ (800b4fc <SGP_GetMeasurementValues+0x3b0>)
 800b2dc:	4981      	ldr	r1, [pc, #516]	@ (800b4e4 <SGP_GetMeasurementValues+0x398>)
 800b2de:	2003      	movs	r0, #3
 800b2e0:	f002 fbce 	bl	800da80 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4a86      	ldr	r2, [pc, #536]	@ (800b500 <SGP_GetMeasurementValues+0x3b4>)
 800b2e8:	497e      	ldr	r1, [pc, #504]	@ (800b4e4 <SGP_GetMeasurementValues+0x398>)
 800b2ea:	2003      	movs	r0, #3
 800b2ec:	f002 fbc8 	bl	800da80 <CreateLine>
 800b2f0:	e006      	b.n	800b300 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b2f2:	4b81      	ldr	r3, [pc, #516]	@ (800b4f8 <SGP_GetMeasurementValues+0x3ac>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b0b      	cmp	r3, #11
 800b2f8:	d102      	bne.n	800b300 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b2fa:	4b7f      	ldr	r3, [pc, #508]	@ (800b4f8 <SGP_GetMeasurementValues+0x3ac>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	dd5a      	ble.n	800b3c4 <SGP_GetMeasurementValues+0x278>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2b64      	cmp	r3, #100	@ 0x64
 800b314:	dc56      	bgt.n	800b3c4 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	0018      	movs	r0, r3
 800b31c:	f7f8 f850 	bl	80033c0 <__aeabi_i2d>
 800b320:	2200      	movs	r2, #0
 800b322:	4b78      	ldr	r3, [pc, #480]	@ (800b504 <SGP_GetMeasurementValues+0x3b8>)
 800b324:	f7f6 fd46 	bl	8001db4 <__aeabi_ddiv>
 800b328:	0002      	movs	r2, r0
 800b32a:	000b      	movs	r3, r1
 800b32c:	2000      	movs	r0, #0
 800b32e:	4976      	ldr	r1, [pc, #472]	@ (800b508 <SGP_GetMeasurementValues+0x3bc>)
 800b330:	f7f7 fc4c 	bl	8002bcc <__aeabi_dsub>
 800b334:	0002      	movs	r2, r0
 800b336:	000b      	movs	r3, r1
 800b338:	0014      	movs	r4, r2
 800b33a:	001d      	movs	r5, r3
 800b33c:	4b73      	ldr	r3, [pc, #460]	@ (800b50c <SGP_GetMeasurementValues+0x3c0>)
 800b33e:	881b      	ldrh	r3, [r3, #0]
 800b340:	0018      	movs	r0, r3
 800b342:	f7f8 f83d 	bl	80033c0 <__aeabi_i2d>
 800b346:	0002      	movs	r2, r0
 800b348:	000b      	movs	r3, r1
 800b34a:	0020      	movs	r0, r4
 800b34c:	0029      	movs	r1, r5
 800b34e:	f7f7 f975 	bl	800263c <__aeabi_dmul>
 800b352:	0002      	movs	r2, r0
 800b354:	000b      	movs	r3, r1
 800b356:	0010      	movs	r0, r2
 800b358:	0019      	movs	r1, r3
 800b35a:	f7f5 f977 	bl	800064c <__aeabi_d2uiz>
 800b35e:	0003      	movs	r3, r0
 800b360:	b29a      	uxth	r2, r3
 800b362:	4b6b      	ldr	r3, [pc, #428]	@ (800b510 <SGP_GetMeasurementValues+0x3c4>)
 800b364:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	0018      	movs	r0, r3
 800b36c:	f7f8 f828 	bl	80033c0 <__aeabi_i2d>
 800b370:	2200      	movs	r2, #0
 800b372:	4b64      	ldr	r3, [pc, #400]	@ (800b504 <SGP_GetMeasurementValues+0x3b8>)
 800b374:	f7f6 fd1e 	bl	8001db4 <__aeabi_ddiv>
 800b378:	0002      	movs	r2, r0
 800b37a:	000b      	movs	r3, r1
 800b37c:	0014      	movs	r4, r2
 800b37e:	001d      	movs	r5, r3
 800b380:	4b62      	ldr	r3, [pc, #392]	@ (800b50c <SGP_GetMeasurementValues+0x3c0>)
 800b382:	881b      	ldrh	r3, [r3, #0]
 800b384:	0018      	movs	r0, r3
 800b386:	f7f8 f81b 	bl	80033c0 <__aeabi_i2d>
 800b38a:	0002      	movs	r2, r0
 800b38c:	000b      	movs	r3, r1
 800b38e:	0020      	movs	r0, r4
 800b390:	0029      	movs	r1, r5
 800b392:	f7f7 f953 	bl	800263c <__aeabi_dmul>
 800b396:	0002      	movs	r2, r0
 800b398:	000b      	movs	r3, r1
 800b39a:	0010      	movs	r0, r2
 800b39c:	0019      	movs	r1, r3
 800b39e:	f7f5 f955 	bl	800064c <__aeabi_d2uiz>
 800b3a2:	0003      	movs	r3, r0
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	4b5b      	ldr	r3, [pc, #364]	@ (800b514 <SGP_GetMeasurementValues+0x3c8>)
 800b3a8:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800b3aa:	4b58      	ldr	r3, [pc, #352]	@ (800b50c <SGP_GetMeasurementValues+0x3c0>)
 800b3ac:	881a      	ldrh	r2, [r3, #0]
 800b3ae:	4b5a      	ldr	r3, [pc, #360]	@ (800b518 <SGP_GetMeasurementValues+0x3cc>)
 800b3b0:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b3b2:	4b59      	ldr	r3, [pc, #356]	@ (800b518 <SGP_GetMeasurementValues+0x3cc>)
 800b3b4:	8818      	ldrh	r0, [r3, #0]
 800b3b6:	4b56      	ldr	r3, [pc, #344]	@ (800b510 <SGP_GetMeasurementValues+0x3c4>)
 800b3b8:	8819      	ldrh	r1, [r3, #0]
 800b3ba:	4b56      	ldr	r3, [pc, #344]	@ (800b514 <SGP_GetMeasurementValues+0x3c8>)
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	001a      	movs	r2, r3
 800b3c0:	f001 fbd4 	bl	800cb6c <SetVocLED>
      }
      if(*vocIndex > 100){
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b64      	cmp	r3, #100	@ 0x64
 800b3ca:	dd66      	ble.n	800b49a <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	f7f7 fff5 	bl	80033c0 <__aeabi_i2d>
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	4b4a      	ldr	r3, [pc, #296]	@ (800b504 <SGP_GetMeasurementValues+0x3b8>)
 800b3da:	f7f7 fbf7 	bl	8002bcc <__aeabi_dsub>
 800b3de:	0002      	movs	r2, r0
 800b3e0:	000b      	movs	r3, r1
 800b3e2:	0010      	movs	r0, r2
 800b3e4:	0019      	movs	r1, r3
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4b4c      	ldr	r3, [pc, #304]	@ (800b51c <SGP_GetMeasurementValues+0x3d0>)
 800b3ea:	f7f6 fce3 	bl	8001db4 <__aeabi_ddiv>
 800b3ee:	0002      	movs	r2, r0
 800b3f0:	000b      	movs	r3, r1
 800b3f2:	0014      	movs	r4, r2
 800b3f4:	001d      	movs	r5, r3
 800b3f6:	4b45      	ldr	r3, [pc, #276]	@ (800b50c <SGP_GetMeasurementValues+0x3c0>)
 800b3f8:	881b      	ldrh	r3, [r3, #0]
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f7f7 ffe0 	bl	80033c0 <__aeabi_i2d>
 800b400:	0002      	movs	r2, r0
 800b402:	000b      	movs	r3, r1
 800b404:	0020      	movs	r0, r4
 800b406:	0029      	movs	r1, r5
 800b408:	f7f7 f918 	bl	800263c <__aeabi_dmul>
 800b40c:	0002      	movs	r2, r0
 800b40e:	000b      	movs	r3, r1
 800b410:	0010      	movs	r0, r2
 800b412:	0019      	movs	r1, r3
 800b414:	f7f5 f91a 	bl	800064c <__aeabi_d2uiz>
 800b418:	0003      	movs	r3, r0
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	4b3c      	ldr	r3, [pc, #240]	@ (800b510 <SGP_GetMeasurementValues+0x3c4>)
 800b41e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	0018      	movs	r0, r3
 800b426:	f7f7 ffcb 	bl	80033c0 <__aeabi_i2d>
 800b42a:	2200      	movs	r2, #0
 800b42c:	4b35      	ldr	r3, [pc, #212]	@ (800b504 <SGP_GetMeasurementValues+0x3b8>)
 800b42e:	f7f7 fbcd 	bl	8002bcc <__aeabi_dsub>
 800b432:	0002      	movs	r2, r0
 800b434:	000b      	movs	r3, r1
 800b436:	0010      	movs	r0, r2
 800b438:	0019      	movs	r1, r3
 800b43a:	2200      	movs	r2, #0
 800b43c:	4b37      	ldr	r3, [pc, #220]	@ (800b51c <SGP_GetMeasurementValues+0x3d0>)
 800b43e:	f7f6 fcb9 	bl	8001db4 <__aeabi_ddiv>
 800b442:	0002      	movs	r2, r0
 800b444:	000b      	movs	r3, r1
 800b446:	2000      	movs	r0, #0
 800b448:	492f      	ldr	r1, [pc, #188]	@ (800b508 <SGP_GetMeasurementValues+0x3bc>)
 800b44a:	f7f7 fbbf 	bl	8002bcc <__aeabi_dsub>
 800b44e:	0002      	movs	r2, r0
 800b450:	000b      	movs	r3, r1
 800b452:	0014      	movs	r4, r2
 800b454:	001d      	movs	r5, r3
 800b456:	4b2d      	ldr	r3, [pc, #180]	@ (800b50c <SGP_GetMeasurementValues+0x3c0>)
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	0018      	movs	r0, r3
 800b45c:	f7f7 ffb0 	bl	80033c0 <__aeabi_i2d>
 800b460:	0002      	movs	r2, r0
 800b462:	000b      	movs	r3, r1
 800b464:	0020      	movs	r0, r4
 800b466:	0029      	movs	r1, r5
 800b468:	f7f7 f8e8 	bl	800263c <__aeabi_dmul>
 800b46c:	0002      	movs	r2, r0
 800b46e:	000b      	movs	r3, r1
 800b470:	0010      	movs	r0, r2
 800b472:	0019      	movs	r1, r3
 800b474:	f7f5 f8ea 	bl	800064c <__aeabi_d2uiz>
 800b478:	0003      	movs	r3, r0
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	4b26      	ldr	r3, [pc, #152]	@ (800b518 <SGP_GetMeasurementValues+0x3cc>)
 800b47e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b480:	4b22      	ldr	r3, [pc, #136]	@ (800b50c <SGP_GetMeasurementValues+0x3c0>)
 800b482:	881a      	ldrh	r2, [r3, #0]
 800b484:	4b23      	ldr	r3, [pc, #140]	@ (800b514 <SGP_GetMeasurementValues+0x3c8>)
 800b486:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b488:	4b23      	ldr	r3, [pc, #140]	@ (800b518 <SGP_GetMeasurementValues+0x3cc>)
 800b48a:	8818      	ldrh	r0, [r3, #0]
 800b48c:	4b20      	ldr	r3, [pc, #128]	@ (800b510 <SGP_GetMeasurementValues+0x3c4>)
 800b48e:	8819      	ldrh	r1, [r3, #0]
 800b490:	4b20      	ldr	r3, [pc, #128]	@ (800b514 <SGP_GetMeasurementValues+0x3c8>)
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	001a      	movs	r2, r3
 800b496:	f001 fb69 	bl	800cb6c <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b49a:	4b14      	ldr	r3, [pc, #80]	@ (800b4ec <SGP_GetMeasurementValues+0x3a0>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b4a0:	4b05      	ldr	r3, [pc, #20]	@ (800b4b8 <SGP_GetMeasurementValues+0x36c>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b4a6:	4b03      	ldr	r3, [pc, #12]	@ (800b4b4 <SGP_GetMeasurementValues+0x368>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e04f      	b.n	800b550 <SGP_GetMeasurementValues+0x404>
 800b4b0:	200011f8 	.word	0x200011f8
 800b4b4:	200012a5 	.word	0x200012a5
 800b4b8:	200012a4 	.word	0x200012a4
 800b4bc:	20000094 	.word	0x20000094
 800b4c0:	200000a8 	.word	0x200000a8
 800b4c4:	2000008c 	.word	0x2000008c
 800b4c8:	200011f9 	.word	0x200011f9
 800b4cc:	200011e8 	.word	0x200011e8
 800b4d0:	08023f68 	.word	0x08023f68
 800b4d4:	08023f90 	.word	0x08023f90
 800b4d8:	08023f94 	.word	0x08023f94
 800b4dc:	08023fb4 	.word	0x08023fb4
 800b4e0:	08023fb8 	.word	0x08023fb8
 800b4e4:	08023fd8 	.word	0x08023fd8
 800b4e8:	200000a4 	.word	0x200000a4
 800b4ec:	200011f1 	.word	0x200011f1
 800b4f0:	2000009e 	.word	0x2000009e
 800b4f4:	200011fc 	.word	0x200011fc
 800b4f8:	200011f2 	.word	0x200011f2
 800b4fc:	08023fdc 	.word	0x08023fdc
 800b500:	08023ff8 	.word	0x08023ff8
 800b504:	40590000 	.word	0x40590000
 800b508:	3ff00000 	.word	0x3ff00000
 800b50c:	200000ac 	.word	0x200000ac
 800b510:	200012b0 	.word	0x200012b0
 800b514:	200012ae 	.word	0x200012ae
 800b518:	200012ac 	.word	0x200012ac
 800b51c:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b520:	f7ff fdf8 	bl	800b114 <SGP_MeasurementDone>
 800b524:	1e03      	subs	r3, r0, #0
 800b526:	d012      	beq.n	800b54e <SGP_GetMeasurementValues+0x402>
 800b528:	4b0b      	ldr	r3, [pc, #44]	@ (800b558 <SGP_GetMeasurementValues+0x40c>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00e      	beq.n	800b54e <SGP_GetMeasurementValues+0x402>
 800b530:	4b0a      	ldr	r3, [pc, #40]	@ (800b55c <SGP_GetMeasurementValues+0x410>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00a      	beq.n	800b54e <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b538:	4a09      	ldr	r2, [pc, #36]	@ (800b560 <SGP_GetMeasurementValues+0x414>)
 800b53a:	4b0a      	ldr	r3, [pc, #40]	@ (800b564 <SGP_GetMeasurementValues+0x418>)
 800b53c:	0019      	movs	r1, r3
 800b53e:	2003      	movs	r0, #3
 800b540:	f002 fa9e 	bl	800da80 <CreateLine>
    SGP_StartMeasurement();
 800b544:	f7ff fd92 	bl	800b06c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b548:	4b07      	ldr	r3, [pc, #28]	@ (800b568 <SGP_GetMeasurementValues+0x41c>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	0018      	movs	r0, r3
 800b552:	46bd      	mov	sp, r7
 800b554:	b004      	add	sp, #16
 800b556:	bdb0      	pop	{r4, r5, r7, pc}
 800b558:	200011f8 	.word	0x200011f8
 800b55c:	200011f9 	.word	0x200011f9
 800b560:	08024014 	.word	0x08024014
 800b564:	08023fd8 	.word	0x08023fd8
 800b568:	200012a5 	.word	0x200012a5

0800b56c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b572:	4b1a      	ldr	r3, [pc, #104]	@ (800b5dc <SGP_DeviceConnected+0x70>)
 800b574:	2202      	movs	r2, #2
 800b576:	0019      	movs	r1, r3
 800b578:	2059      	movs	r0, #89	@ 0x59
 800b57a:	f7ff fd3f 	bl	800affc <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b57e:	2001      	movs	r0, #1
 800b580:	f002 fed4 	bl	800e32c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b584:	4b16      	ldr	r3, [pc, #88]	@ (800b5e0 <SGP_DeviceConnected+0x74>)
 800b586:	2209      	movs	r2, #9
 800b588:	0019      	movs	r1, r3
 800b58a:	2059      	movs	r0, #89	@ 0x59
 800b58c:	f7ff fd18 	bl	800afc0 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b590:	1dfb      	adds	r3, r7, #7
 800b592:	2200      	movs	r2, #0
 800b594:	701a      	strb	r2, [r3, #0]
 800b596:	e011      	b.n	800b5bc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b598:	1dfb      	adds	r3, r7, #7
 800b59a:	7818      	ldrb	r0, [r3, #0]
 800b59c:	1dfb      	adds	r3, r7, #7
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	4a0f      	ldr	r2, [pc, #60]	@ (800b5e0 <SGP_DeviceConnected+0x74>)
 800b5a2:	5cd3      	ldrb	r3, [r2, r3]
 800b5a4:	4a0f      	ldr	r2, [pc, #60]	@ (800b5e4 <SGP_DeviceConnected+0x78>)
 800b5a6:	4910      	ldr	r1, [pc, #64]	@ (800b5e8 <SGP_DeviceConnected+0x7c>)
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	0003      	movs	r3, r0
 800b5ac:	2002      	movs	r0, #2
 800b5ae:	f002 fa67 	bl	800da80 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b5b2:	1dfb      	adds	r3, r7, #7
 800b5b4:	781a      	ldrb	r2, [r3, #0]
 800b5b6:	1dfb      	adds	r3, r7, #7
 800b5b8:	3201      	adds	r2, #1
 800b5ba:	701a      	strb	r2, [r3, #0]
 800b5bc:	1dfb      	adds	r3, r7, #7
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b08      	cmp	r3, #8
 800b5c2:	d9e9      	bls.n	800b598 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b5c4:	4b06      	ldr	r3, [pc, #24]	@ (800b5e0 <SGP_DeviceConnected+0x74>)
 800b5c6:	2203      	movs	r2, #3
 800b5c8:	2109      	movs	r1, #9
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	f000 f80e 	bl	800b5ec <CheckCRC>
 800b5d0:	0003      	movs	r3, r0
}
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	b002      	add	sp, #8
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	46c0      	nop			@ (mov r8, r8)
 800b5dc:	20000088 	.word	0x20000088
 800b5e0:	200011e8 	.word	0x200011e8
 800b5e4:	08024034 	.word	0x08024034
 800b5e8:	08023fb4 	.word	0x08023fb4

0800b5ec <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ee:	b08f      	sub	sp, #60	@ 0x3c
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6278      	str	r0, [r7, #36]	@ 0x24
 800b5f4:	0008      	movs	r0, r1
 800b5f6:	0011      	movs	r1, r2
 800b5f8:	2323      	movs	r3, #35	@ 0x23
 800b5fa:	18fb      	adds	r3, r7, r3
 800b5fc:	1c02      	adds	r2, r0, #0
 800b5fe:	701a      	strb	r2, [r3, #0]
 800b600:	2322      	movs	r3, #34	@ 0x22
 800b602:	18fb      	adds	r3, r7, r3
 800b604:	1c0a      	adds	r2, r1, #0
 800b606:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b608:	2317      	movs	r3, #23
 800b60a:	2220      	movs	r2, #32
 800b60c:	189b      	adds	r3, r3, r2
 800b60e:	19db      	adds	r3, r3, r7
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
 800b614:	e09f      	b.n	800b756 <CheckCRC+0x16a>
 800b616:	466b      	mov	r3, sp
 800b618:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b61a:	2322      	movs	r3, #34	@ 0x22
 800b61c:	18fb      	adds	r3, r7, r3
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	001a      	movs	r2, r3
 800b622:	3a01      	subs	r2, #1
 800b624:	633a      	str	r2, [r7, #48]	@ 0x30
 800b626:	60bb      	str	r3, [r7, #8]
 800b628:	2200      	movs	r2, #0
 800b62a:	60fa      	str	r2, [r7, #12]
 800b62c:	68b8      	ldr	r0, [r7, #8]
 800b62e:	68f9      	ldr	r1, [r7, #12]
 800b630:	0002      	movs	r2, r0
 800b632:	0f52      	lsrs	r2, r2, #29
 800b634:	000c      	movs	r4, r1
 800b636:	00e4      	lsls	r4, r4, #3
 800b638:	61fc      	str	r4, [r7, #28]
 800b63a:	69fc      	ldr	r4, [r7, #28]
 800b63c:	4314      	orrs	r4, r2
 800b63e:	61fc      	str	r4, [r7, #28]
 800b640:	0002      	movs	r2, r0
 800b642:	00d2      	lsls	r2, r2, #3
 800b644:	61ba      	str	r2, [r7, #24]
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	2200      	movs	r2, #0
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	6838      	ldr	r0, [r7, #0]
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	0002      	movs	r2, r0
 800b652:	0f52      	lsrs	r2, r2, #29
 800b654:	000c      	movs	r4, r1
 800b656:	00e4      	lsls	r4, r4, #3
 800b658:	617c      	str	r4, [r7, #20]
 800b65a:	697c      	ldr	r4, [r7, #20]
 800b65c:	4314      	orrs	r4, r2
 800b65e:	617c      	str	r4, [r7, #20]
 800b660:	0002      	movs	r2, r0
 800b662:	00d2      	lsls	r2, r2, #3
 800b664:	613a      	str	r2, [r7, #16]
 800b666:	3307      	adds	r3, #7
 800b668:	08db      	lsrs	r3, r3, #3
 800b66a:	00db      	lsls	r3, r3, #3
 800b66c:	466a      	mov	r2, sp
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	469d      	mov	sp, r3
 800b672:	466b      	mov	r3, sp
 800b674:	3300      	adds	r3, #0
 800b676:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b678:	2316      	movs	r3, #22
 800b67a:	2220      	movs	r2, #32
 800b67c:	189b      	adds	r3, r3, r2
 800b67e:	19db      	adds	r3, r3, r7
 800b680:	2200      	movs	r2, #0
 800b682:	701a      	strb	r2, [r3, #0]
 800b684:	e01e      	b.n	800b6c4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b686:	2317      	movs	r3, #23
 800b688:	2220      	movs	r2, #32
 800b68a:	189b      	adds	r3, r3, r2
 800b68c:	19db      	adds	r3, r3, r7
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	2116      	movs	r1, #22
 800b692:	2320      	movs	r3, #32
 800b694:	18cb      	adds	r3, r1, r3
 800b696:	19db      	adds	r3, r3, r7
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	18d3      	adds	r3, r2, r3
 800b69c:	001a      	movs	r2, r3
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	189a      	adds	r2, r3, r2
 800b6a2:	0008      	movs	r0, r1
 800b6a4:	2320      	movs	r3, #32
 800b6a6:	18cb      	adds	r3, r1, r3
 800b6a8:	19db      	adds	r3, r3, r7
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	7811      	ldrb	r1, [r2, #0]
 800b6ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6b0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b6b2:	2320      	movs	r3, #32
 800b6b4:	18c3      	adds	r3, r0, r3
 800b6b6:	19db      	adds	r3, r3, r7
 800b6b8:	781a      	ldrb	r2, [r3, #0]
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	18c3      	adds	r3, r0, r3
 800b6be:	19db      	adds	r3, r3, r7
 800b6c0:	3201      	adds	r2, #1
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	2316      	movs	r3, #22
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	189b      	adds	r3, r3, r2
 800b6ca:	19da      	adds	r2, r3, r7
 800b6cc:	2322      	movs	r3, #34	@ 0x22
 800b6ce:	18fb      	adds	r3, r7, r3
 800b6d0:	7812      	ldrb	r2, [r2, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d3d6      	bcc.n	800b686 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b6d8:	2417      	movs	r4, #23
 800b6da:	2320      	movs	r3, #32
 800b6dc:	18e3      	adds	r3, r4, r3
 800b6de:	19db      	adds	r3, r3, r7
 800b6e0:	781a      	ldrb	r2, [r3, #0]
 800b6e2:	2322      	movs	r3, #34	@ 0x22
 800b6e4:	18fb      	adds	r3, r7, r3
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	18d3      	adds	r3, r2, r3
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ee:	18d2      	adds	r2, r2, r3
 800b6f0:	250b      	movs	r5, #11
 800b6f2:	2320      	movs	r3, #32
 800b6f4:	18eb      	adds	r3, r5, r3
 800b6f6:	19db      	adds	r3, r3, r7
 800b6f8:	7812      	ldrb	r2, [r2, #0]
 800b6fa:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b6fc:	2322      	movs	r3, #34	@ 0x22
 800b6fe:	18fb      	adds	r3, r7, r3
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	3b01      	subs	r3, #1
 800b704:	b2da      	uxtb	r2, r3
 800b706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b708:	0011      	movs	r1, r2
 800b70a:	0018      	movs	r0, r3
 800b70c:	f000 f838 	bl	800b780 <CalculateCRC>
 800b710:	0003      	movs	r3, r0
 800b712:	001a      	movs	r2, r3
 800b714:	2320      	movs	r3, #32
 800b716:	18eb      	adds	r3, r5, r3
 800b718:	19db      	adds	r3, r3, r7
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d00c      	beq.n	800b73a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b720:	2320      	movs	r3, #32
 800b722:	18e3      	adds	r3, r4, r3
 800b724:	19db      	adds	r3, r3, r7
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	3301      	adds	r3, #1
 800b72a:	4a13      	ldr	r2, [pc, #76]	@ (800b778 <CheckCRC+0x18c>)
 800b72c:	4913      	ldr	r1, [pc, #76]	@ (800b77c <CheckCRC+0x190>)
 800b72e:	2001      	movs	r0, #1
 800b730:	f002 f9a6 	bl	800da80 <CreateLine>
      return false;
 800b734:	2300      	movs	r3, #0
 800b736:	46b5      	mov	sp, r6
 800b738:	e019      	b.n	800b76e <CheckCRC+0x182>
 800b73a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b73c:	2217      	movs	r2, #23
 800b73e:	2320      	movs	r3, #32
 800b740:	18d3      	adds	r3, r2, r3
 800b742:	19db      	adds	r3, r3, r7
 800b744:	2120      	movs	r1, #32
 800b746:	1852      	adds	r2, r2, r1
 800b748:	19d1      	adds	r1, r2, r7
 800b74a:	2222      	movs	r2, #34	@ 0x22
 800b74c:	18ba      	adds	r2, r7, r2
 800b74e:	7809      	ldrb	r1, [r1, #0]
 800b750:	7812      	ldrb	r2, [r2, #0]
 800b752:	188a      	adds	r2, r1, r2
 800b754:	701a      	strb	r2, [r3, #0]
 800b756:	2317      	movs	r3, #23
 800b758:	2220      	movs	r2, #32
 800b75a:	189b      	adds	r3, r3, r2
 800b75c:	19da      	adds	r2, r3, r7
 800b75e:	2323      	movs	r3, #35	@ 0x23
 800b760:	18fb      	adds	r3, r7, r3
 800b762:	7812      	ldrb	r2, [r2, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d200      	bcs.n	800b76c <CheckCRC+0x180>
 800b76a:	e754      	b.n	800b616 <CheckCRC+0x2a>
    }
  }
  return true;
 800b76c:	2301      	movs	r3, #1
}
 800b76e:	0018      	movs	r0, r3
 800b770:	46bd      	mov	sp, r7
 800b772:	b00f      	add	sp, #60	@ 0x3c
 800b774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b776:	46c0      	nop			@ (mov r8, r8)
 800b778:	08024054 	.word	0x08024054
 800b77c:	08023f90 	.word	0x08023f90

0800b780 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	000a      	movs	r2, r1
 800b78a:	1cfb      	adds	r3, r7, #3
 800b78c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b78e:	230f      	movs	r3, #15
 800b790:	18fb      	adds	r3, r7, r3
 800b792:	22ff      	movs	r2, #255	@ 0xff
 800b794:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b796:	230e      	movs	r3, #14
 800b798:	18fb      	adds	r3, r7, r3
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
 800b79e:	e037      	b.n	800b810 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b7a0:	230e      	movs	r3, #14
 800b7a2:	18fb      	adds	r3, r7, r3
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	18d3      	adds	r3, r2, r3
 800b7aa:	7819      	ldrb	r1, [r3, #0]
 800b7ac:	220f      	movs	r2, #15
 800b7ae:	18bb      	adds	r3, r7, r2
 800b7b0:	18ba      	adds	r2, r7, r2
 800b7b2:	7812      	ldrb	r2, [r2, #0]
 800b7b4:	404a      	eors	r2, r1
 800b7b6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b7b8:	230d      	movs	r3, #13
 800b7ba:	18fb      	adds	r3, r7, r3
 800b7bc:	2200      	movs	r2, #0
 800b7be:	701a      	strb	r2, [r3, #0]
 800b7c0:	e01b      	b.n	800b7fa <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b7c2:	210f      	movs	r1, #15
 800b7c4:	187b      	adds	r3, r7, r1
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	b25b      	sxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	da09      	bge.n	800b7e2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b7ce:	187b      	adds	r3, r7, r1
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	b25b      	sxtb	r3, r3
 800b7d6:	2231      	movs	r2, #49	@ 0x31
 800b7d8:	4053      	eors	r3, r2
 800b7da:	b25a      	sxtb	r2, r3
 800b7dc:	187b      	adds	r3, r7, r1
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e005      	b.n	800b7ee <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b7e2:	230f      	movs	r3, #15
 800b7e4:	18fa      	adds	r2, r7, r3
 800b7e6:	18fb      	adds	r3, r7, r3
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	18db      	adds	r3, r3, r3
 800b7ec:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b7ee:	210d      	movs	r1, #13
 800b7f0:	187b      	adds	r3, r7, r1
 800b7f2:	781a      	ldrb	r2, [r3, #0]
 800b7f4:	187b      	adds	r3, r7, r1
 800b7f6:	3201      	adds	r2, #1
 800b7f8:	701a      	strb	r2, [r3, #0]
 800b7fa:	230d      	movs	r3, #13
 800b7fc:	18fb      	adds	r3, r7, r3
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b07      	cmp	r3, #7
 800b802:	d9de      	bls.n	800b7c2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b804:	210e      	movs	r1, #14
 800b806:	187b      	adds	r3, r7, r1
 800b808:	781a      	ldrb	r2, [r3, #0]
 800b80a:	187b      	adds	r3, r7, r1
 800b80c:	3201      	adds	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	230e      	movs	r3, #14
 800b812:	18fa      	adds	r2, r7, r3
 800b814:	1cfb      	adds	r3, r7, #3
 800b816:	7812      	ldrb	r2, [r2, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d3c0      	bcc.n	800b7a0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b81e:	230f      	movs	r3, #15
 800b820:	18fb      	adds	r3, r7, r3
 800b822:	781b      	ldrb	r3, [r3, #0]
}
 800b824:	0018      	movs	r0, r3
 800b826:	46bd      	mov	sp, r7
 800b828:	b004      	add	sp, #16
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4936      	ldr	r1, [pc, #216]	@ (800b914 <SGP_GetHT+0xe8>)
 800b83c:	1c18      	adds	r0, r3, #0
 800b83e:	f7f5 f83f 	bl	80008c0 <__aeabi_fadd>
 800b842:	1c03      	adds	r3, r0, #0
 800b844:	4934      	ldr	r1, [pc, #208]	@ (800b918 <SGP_GetHT+0xec>)
 800b846:	1c18      	adds	r0, r3, #0
 800b848:	f7f5 f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800b84c:	1c03      	adds	r3, r0, #0
 800b84e:	4933      	ldr	r1, [pc, #204]	@ (800b91c <SGP_GetHT+0xf0>)
 800b850:	1c18      	adds	r0, r3, #0
 800b852:	f7f5 fba5 	bl	8000fa0 <__aeabi_fmul>
 800b856:	1c03      	adds	r3, r0, #0
 800b858:	1c18      	adds	r0, r3, #0
 800b85a:	f7f4 fedf 	bl	800061c <__aeabi_f2uiz>
 800b85e:	0003      	movs	r3, r0
 800b860:	b29a      	uxth	r2, r3
 800b862:	4b2f      	ldr	r3, [pc, #188]	@ (800b920 <SGP_GetHT+0xf4>)
 800b864:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	492e      	ldr	r1, [pc, #184]	@ (800b924 <SGP_GetHT+0xf8>)
 800b86c:	1c18      	adds	r0, r3, #0
 800b86e:	f7f5 f9b1 	bl	8000bd4 <__aeabi_fdiv>
 800b872:	1c03      	adds	r3, r0, #0
 800b874:	4929      	ldr	r1, [pc, #164]	@ (800b91c <SGP_GetHT+0xf0>)
 800b876:	1c18      	adds	r0, r3, #0
 800b878:	f7f5 fb92 	bl	8000fa0 <__aeabi_fmul>
 800b87c:	1c03      	adds	r3, r0, #0
 800b87e:	1c18      	adds	r0, r3, #0
 800b880:	f7f4 fecc 	bl	800061c <__aeabi_f2uiz>
 800b884:	0003      	movs	r3, r0
 800b886:	b29a      	uxth	r2, r3
 800b888:	4b27      	ldr	r3, [pc, #156]	@ (800b928 <SGP_GetHT+0xfc>)
 800b88a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b88c:	4b26      	ldr	r3, [pc, #152]	@ (800b928 <SGP_GetHT+0xfc>)
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	0a1b      	lsrs	r3, r3, #8
 800b892:	b29b      	uxth	r3, r3
 800b894:	b2da      	uxtb	r2, r3
 800b896:	4b25      	ldr	r3, [pc, #148]	@ (800b92c <SGP_GetHT+0x100>)
 800b898:	709a      	strb	r2, [r3, #2]
 800b89a:	4b24      	ldr	r3, [pc, #144]	@ (800b92c <SGP_GetHT+0x100>)
 800b89c:	789a      	ldrb	r2, [r3, #2]
 800b89e:	210c      	movs	r1, #12
 800b8a0:	187b      	adds	r3, r7, r1
 800b8a2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b8a4:	4b20      	ldr	r3, [pc, #128]	@ (800b928 <SGP_GetHT+0xfc>)
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b20      	ldr	r3, [pc, #128]	@ (800b92c <SGP_GetHT+0x100>)
 800b8ac:	70da      	strb	r2, [r3, #3]
 800b8ae:	4b1f      	ldr	r3, [pc, #124]	@ (800b92c <SGP_GetHT+0x100>)
 800b8b0:	78da      	ldrb	r2, [r3, #3]
 800b8b2:	187b      	adds	r3, r7, r1
 800b8b4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b8b6:	187b      	adds	r3, r7, r1
 800b8b8:	2102      	movs	r1, #2
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f7ff ff60 	bl	800b780 <CalculateCRC>
 800b8c0:	0003      	movs	r3, r0
 800b8c2:	001a      	movs	r2, r3
 800b8c4:	4b19      	ldr	r3, [pc, #100]	@ (800b92c <SGP_GetHT+0x100>)
 800b8c6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b8c8:	4b15      	ldr	r3, [pc, #84]	@ (800b920 <SGP_GetHT+0xf4>)
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	0a1b      	lsrs	r3, r3, #8
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	b2da      	uxtb	r2, r3
 800b8d2:	4b16      	ldr	r3, [pc, #88]	@ (800b92c <SGP_GetHT+0x100>)
 800b8d4:	715a      	strb	r2, [r3, #5]
 800b8d6:	4b15      	ldr	r3, [pc, #84]	@ (800b92c <SGP_GetHT+0x100>)
 800b8d8:	795a      	ldrb	r2, [r3, #5]
 800b8da:	2108      	movs	r1, #8
 800b8dc:	187b      	adds	r3, r7, r1
 800b8de:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b920 <SGP_GetHT+0xf4>)
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	4b11      	ldr	r3, [pc, #68]	@ (800b92c <SGP_GetHT+0x100>)
 800b8e8:	719a      	strb	r2, [r3, #6]
 800b8ea:	4b10      	ldr	r3, [pc, #64]	@ (800b92c <SGP_GetHT+0x100>)
 800b8ec:	799a      	ldrb	r2, [r3, #6]
 800b8ee:	187b      	adds	r3, r7, r1
 800b8f0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b8f2:	187b      	adds	r3, r7, r1
 800b8f4:	2102      	movs	r1, #2
 800b8f6:	0018      	movs	r0, r3
 800b8f8:	f7ff ff42 	bl	800b780 <CalculateCRC>
 800b8fc:	0003      	movs	r3, r0
 800b8fe:	001a      	movs	r2, r3
 800b900:	4b0a      	ldr	r3, [pc, #40]	@ (800b92c <SGP_GetHT+0x100>)
 800b902:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b904:	4b0a      	ldr	r3, [pc, #40]	@ (800b930 <SGP_GetHT+0x104>)
 800b906:	2201      	movs	r2, #1
 800b908:	701a      	strb	r2, [r3, #0]
}
 800b90a:	46c0      	nop			@ (mov r8, r8)
 800b90c:	46bd      	mov	sp, r7
 800b90e:	b004      	add	sp, #16
 800b910:	bd80      	pop	{r7, pc}
 800b912:	46c0      	nop			@ (mov r8, r8)
 800b914:	42340000 	.word	0x42340000
 800b918:	432f0000 	.word	0x432f0000
 800b91c:	477fff00 	.word	0x477fff00
 800b920:	200012a2 	.word	0x200012a2
 800b924:	42c80000 	.word	0x42c80000
 800b928:	200012a0 	.word	0x200012a0
 800b92c:	20000094 	.word	0x20000094
 800b930:	200012a4 	.word	0x200012a4

0800b934 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800b934:	b580      	push	{r7, lr}
 800b936:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brougt to idle");
 800b938:	4a09      	ldr	r2, [pc, #36]	@ (800b960 <SGP_SoftReset+0x2c>)
 800b93a:	4b0a      	ldr	r3, [pc, #40]	@ (800b964 <SGP_SoftReset+0x30>)
 800b93c:	0019      	movs	r1, r3
 800b93e:	2003      	movs	r0, #3
 800b940:	f002 f89e 	bl	800da80 <CreateLine>
  SGP_TurnHeaterOff();
 800b944:	f7ff fbf4 	bl	800b130 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800b948:	200a      	movs	r0, #10
 800b94a:	f002 fcef 	bl	800e32c <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b94e:	4b06      	ldr	r3, [pc, #24]	@ (800b968 <SGP_SoftReset+0x34>)
 800b950:	2202      	movs	r2, #2
 800b952:	0019      	movs	r1, r3
 800b954:	2059      	movs	r0, #89	@ 0x59
 800b956:	f7ff fb51 	bl	800affc <WriteRegister>
}
 800b95a:	46c0      	nop			@ (mov r8, r8)
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	080240fc 	.word	0x080240fc
 800b964:	08023fd8 	.word	0x08023fd8
 800b968:	2000009c 	.word	0x2000009c

0800b96c <ResetVOCresult>:

void ResetVOCresult(void) {
 800b96c:	b580      	push	{r7, lr}
 800b96e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800b970:	4b02      	ldr	r3, [pc, #8]	@ (800b97c <ResetVOCresult+0x10>)
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]
}
 800b976:	46c0      	nop			@ (mov r8, r8)
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	200012a8 	.word	0x200012a8

0800b980 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800b984:	4b29      	ldr	r3, [pc, #164]	@ (800ba2c <SGP_Upkeep+0xac>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b06      	cmp	r3, #6
 800b98a:	d842      	bhi.n	800ba12 <SGP_Upkeep+0x92>
 800b98c:	009a      	lsls	r2, r3, #2
 800b98e:	4b28      	ldr	r3, [pc, #160]	@ (800ba30 <SGP_Upkeep+0xb0>)
 800b990:	18d3      	adds	r3, r2, r3
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800b996:	4a27      	ldr	r2, [pc, #156]	@ (800ba34 <SGP_Upkeep+0xb4>)
 800b998:	4b27      	ldr	r3, [pc, #156]	@ (800ba38 <SGP_Upkeep+0xb8>)
 800b99a:	0019      	movs	r1, r3
 800b99c:	2003      	movs	r0, #3
 800b99e:	f002 f86f 	bl	800da80 <CreateLine>
    break;
 800b9a2:	e03d      	b.n	800ba20 <SGP_Upkeep+0xa0>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800b9a4:	f7ff ffe2 	bl	800b96c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800b9a8:	4b20      	ldr	r3, [pc, #128]	@ (800ba2c <SGP_Upkeep+0xac>)
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	701a      	strb	r2, [r3, #0]
    break;
 800b9ae:	e037      	b.n	800ba20 <SGP_Upkeep+0xa0>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800b9b0:	f7ff fb5c 	bl	800b06c <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800b9b4:	f001 f90e 	bl	800cbd4 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800b9b8:	4b1c      	ldr	r3, [pc, #112]	@ (800ba2c <SGP_Upkeep+0xac>)
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	701a      	strb	r2, [r3, #0]
   break;
 800b9be:	e02f      	b.n	800ba20 <SGP_Upkeep+0xa0>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800b9c0:	4b1e      	ldr	r3, [pc, #120]	@ (800ba3c <SGP_Upkeep+0xbc>)
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	f7ff fbc2 	bl	800b14c <SGP_GetMeasurementValues>
 800b9c8:	1e03      	subs	r3, r0, #0
 800b9ca:	d026      	beq.n	800ba1a <SGP_Upkeep+0x9a>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800b9cc:	4b17      	ldr	r3, [pc, #92]	@ (800ba2c <SGP_Upkeep+0xac>)
 800b9ce:	2203      	movs	r2, #3
 800b9d0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b9d2:	e022      	b.n	800ba1a <SGP_Upkeep+0x9a>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results.");
    setVOC(vocIndex);
 800b9d4:	4b19      	ldr	r3, [pc, #100]	@ (800ba3c <SGP_Upkeep+0xbc>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	0018      	movs	r0, r3
 800b9dc:	f7f7 ffa2 	bl	8003924 <setVOC>
    SGP40TimeStamp = HAL_GetTick() + 1000;  // about every 1 seconds
 800b9e0:	f002 fc9a 	bl	800e318 <HAL_GetTick>
 800b9e4:	0003      	movs	r3, r0
 800b9e6:	22fa      	movs	r2, #250	@ 0xfa
 800b9e8:	0092      	lsls	r2, r2, #2
 800b9ea:	189a      	adds	r2, r3, r2
 800b9ec:	4b14      	ldr	r3, [pc, #80]	@ (800ba40 <SGP_Upkeep+0xc0>)
 800b9ee:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800b9f0:	f001 f908 	bl	800cc04 <ResetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT;
 800b9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800ba2c <SGP_Upkeep+0xac>)
 800b9f6:	2206      	movs	r2, #6
 800b9f8:	701a      	strb	r2, [r3, #0]
    break;
 800b9fa:	e011      	b.n	800ba20 <SGP_Upkeep+0xa0>

  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800b9fc:	4b10      	ldr	r3, [pc, #64]	@ (800ba40 <SGP_Upkeep+0xc0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	0018      	movs	r0, r3
 800ba02:	f001 ffe7 	bl	800d9d4 <TimestampIsReached>
 800ba06:	1e03      	subs	r3, r0, #0
 800ba08:	d009      	beq.n	800ba1e <SGP_Upkeep+0x9e>
      SGPState = SGP_STATE_INIT;
 800ba0a:	4b08      	ldr	r3, [pc, #32]	@ (800ba2c <SGP_Upkeep+0xac>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ba10:	e005      	b.n	800ba1e <SGP_Upkeep+0x9e>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800ba12:	4b06      	ldr	r3, [pc, #24]	@ (800ba2c <SGP_Upkeep+0xac>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	701a      	strb	r2, [r3, #0]
    break;
 800ba18:	e002      	b.n	800ba20 <SGP_Upkeep+0xa0>
    break;
 800ba1a:	46c0      	nop			@ (mov r8, r8)
 800ba1c:	e000      	b.n	800ba20 <SGP_Upkeep+0xa0>
    break;
 800ba1e:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800ba20:	4b02      	ldr	r3, [pc, #8]	@ (800ba2c <SGP_Upkeep+0xac>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
}
 800ba24:	0018      	movs	r0, r3
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	46c0      	nop			@ (mov r8, r8)
 800ba2c:	200012b2 	.word	0x200012b2
 800ba30:	080247b4 	.word	0x080247b4
 800ba34:	08024114 	.word	0x08024114
 800ba38:	08023fd8 	.word	0x08023fd8
 800ba3c:	200012a8 	.word	0x200012a8
 800ba40:	200011f4 	.word	0x200011f4

0800ba44 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800ba4c:	f002 fc64 	bl	800e318 <HAL_GetTick>
 800ba50:	0002      	movs	r2, r0
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	18d2      	adds	r2, r2, r3
 800ba56:	4b03      	ldr	r3, [pc, #12]	@ (800ba64 <setSGP40TimeStamp+0x20>)
 800ba58:	601a      	str	r2, [r3, #0]
}
 800ba5a:	46c0      	nop			@ (mov r8, r8)
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	b002      	add	sp, #8
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	46c0      	nop			@ (mov r8, r8)
 800ba64:	200011f4 	.word	0x200011f4

0800ba68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	0002      	movs	r2, r0
 800ba70:	1dfb      	adds	r3, r7, #7
 800ba72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ba74:	1dfb      	adds	r3, r7, #7
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba7a:	d809      	bhi.n	800ba90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ba7c:	1dfb      	adds	r3, r7, #7
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	001a      	movs	r2, r3
 800ba82:	231f      	movs	r3, #31
 800ba84:	401a      	ands	r2, r3
 800ba86:	4b04      	ldr	r3, [pc, #16]	@ (800ba98 <__NVIC_EnableIRQ+0x30>)
 800ba88:	2101      	movs	r1, #1
 800ba8a:	4091      	lsls	r1, r2
 800ba8c:	000a      	movs	r2, r1
 800ba8e:	601a      	str	r2, [r3, #0]
  }
}
 800ba90:	46c0      	nop			@ (mov r8, r8)
 800ba92:	46bd      	mov	sp, r7
 800ba94:	b002      	add	sp, #8
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	e000e100 	.word	0xe000e100

0800ba9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	0002      	movs	r2, r0
 800baa4:	1dfb      	adds	r3, r7, #7
 800baa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800baa8:	1dfb      	adds	r3, r7, #7
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b7f      	cmp	r3, #127	@ 0x7f
 800baae:	d810      	bhi.n	800bad2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bab0:	1dfb      	adds	r3, r7, #7
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	001a      	movs	r2, r3
 800bab6:	231f      	movs	r3, #31
 800bab8:	4013      	ands	r3, r2
 800baba:	4908      	ldr	r1, [pc, #32]	@ (800badc <__NVIC_DisableIRQ+0x40>)
 800babc:	2201      	movs	r2, #1
 800babe:	409a      	lsls	r2, r3
 800bac0:	0013      	movs	r3, r2
 800bac2:	2280      	movs	r2, #128	@ 0x80
 800bac4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800bac6:	f3bf 8f4f 	dsb	sy
}
 800baca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bacc:	f3bf 8f6f 	isb	sy
}
 800bad0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800bad2:	46c0      	nop			@ (mov r8, r8)
 800bad4:	46bd      	mov	sp, r7
 800bad6:	b002      	add	sp, #8
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	46c0      	nop			@ (mov r8, r8)
 800badc:	e000e100 	.word	0xe000e100

0800bae0 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800bae0:	b5b0      	push	{r4, r5, r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af02      	add	r7, sp, #8
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	0008      	movs	r0, r1
 800baea:	0011      	movs	r1, r2
 800baec:	1cfb      	adds	r3, r7, #3
 800baee:	1c02      	adds	r2, r0, #0
 800baf0:	701a      	strb	r2, [r3, #0]
 800baf2:	1cbb      	adds	r3, r7, #2
 800baf4:	1c0a      	adds	r2, r1, #0
 800baf6:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800baf8:	4b5b      	ldr	r3, [pc, #364]	@ (800bc68 <getSoundData+0x188>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2201      	movs	r2, #1
 800bb00:	4053      	eors	r3, r2
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d107      	bne.n	800bb18 <getSoundData+0x38>
 800bb08:	4b58      	ldr	r3, [pc, #352]	@ (800bc6c <getSoundData+0x18c>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4053      	eors	r3, r2
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <getSoundData+0x3c>
    {
        return false;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e0a0      	b.n	800bc5e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800bb1c:	4b54      	ldr	r3, [pc, #336]	@ (800bc70 <getSoundData+0x190>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bb26:	4b53      	ldr	r3, [pc, #332]	@ (800bc74 <getSoundData+0x194>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	b25b      	sxtb	r3, r3
 800bb2c:	0018      	movs	r0, r3
 800bb2e:	f7ff ffb5 	bl	800ba9c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800bb32:	f3bf 8f4f 	dsb	sy
}
 800bb36:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bb38:	f3bf 8f6f 	isb	sy
}
 800bb3c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800bb3e:	1cfb      	adds	r3, r7, #3
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d04c      	beq.n	800bbe0 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800bb46:	4b4c      	ldr	r3, [pc, #304]	@ (800bc78 <getSoundData+0x198>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d11b      	bne.n	800bb86 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	617b      	str	r3, [r7, #20]
 800bb5e:	e00e      	b.n	800bb7e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	18d3      	adds	r3, r2, r3
 800bb66:	3302      	adds	r3, #2
 800bb68:	2200      	movs	r2, #0
 800bb6a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	18d3      	adds	r3, r2, r3
 800bb72:	3308      	adds	r3, #8
 800bb74:	2200      	movs	r2, #0
 800bb76:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	617b      	str	r3, [r7, #20]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b05      	cmp	r3, #5
 800bb82:	d9ed      	bls.n	800bb60 <getSoundData+0x80>
 800bb84:	e02c      	b.n	800bbe0 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	1c59      	adds	r1, r3, #1
 800bb8c:	4b3b      	ldr	r3, [pc, #236]	@ (800bc7c <getSoundData+0x19c>)
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	4b3b      	ldr	r3, [pc, #236]	@ (800bc80 <getSoundData+0x1a0>)
 800bb92:	681c      	ldr	r4, [r3, #0]
 800bb94:	4b38      	ldr	r3, [pc, #224]	@ (800bc78 <getSoundData+0x198>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	0023      	movs	r3, r4
 800bb9c:	f000 fde8 	bl	800c770 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bba0:	2300      	movs	r3, #0
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	e019      	b.n	800bbda <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	18d3      	adds	r3, r2, r3
 800bbac:	1c98      	adds	r0, r3, #2
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800bbb6:	4b33      	ldr	r3, [pc, #204]	@ (800bc84 <getSoundData+0x1a4>)
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	0092      	lsls	r2, r2, #2
 800bbbc:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800bbbe:	4b32      	ldr	r3, [pc, #200]	@ (800bc88 <getSoundData+0x1a8>)
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	0092      	lsls	r2, r2, #2
 800bbc4:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bbc6:	4b2c      	ldr	r3, [pc, #176]	@ (800bc78 <getSoundData+0x198>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	0013      	movs	r3, r2
 800bbce:	0022      	movs	r2, r4
 800bbd0:	f000 fdce 	bl	800c770 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	613b      	str	r3, [r7, #16]
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2b05      	cmp	r3, #5
 800bbde:	d9e2      	bls.n	800bba6 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800bbe0:	1cbb      	adds	r3, r7, #2
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d028      	beq.n	800bc3a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800bbe8:	240e      	movs	r4, #14
 800bbea:	193b      	adds	r3, r7, r4
 800bbec:	2200      	movs	r2, #0
 800bbee:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800bbf0:	250d      	movs	r5, #13
 800bbf2:	197b      	adds	r3, r7, r5
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800bbf8:	4b24      	ldr	r3, [pc, #144]	@ (800bc8c <getSoundData+0x1ac>)
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	4924      	ldr	r1, [pc, #144]	@ (800bc90 <getSoundData+0x1b0>)
 800bbfe:	197b      	adds	r3, r7, r5
 800bc00:	193a      	adds	r2, r7, r4
 800bc02:	f000 fe59 	bl	800c8b8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800bc06:	193b      	adds	r3, r7, r4
 800bc08:	881a      	ldrh	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	21ff      	movs	r1, #255	@ 0xff
 800bc0e:	4011      	ands	r1, r2
 800bc10:	000c      	movs	r4, r1
 800bc12:	7b99      	ldrb	r1, [r3, #14]
 800bc14:	2000      	movs	r0, #0
 800bc16:	4001      	ands	r1, r0
 800bc18:	1c08      	adds	r0, r1, #0
 800bc1a:	1c21      	adds	r1, r4, #0
 800bc1c:	4301      	orrs	r1, r0
 800bc1e:	7399      	strb	r1, [r3, #14]
 800bc20:	0a12      	lsrs	r2, r2, #8
 800bc22:	b290      	uxth	r0, r2
 800bc24:	7bda      	ldrb	r2, [r3, #15]
 800bc26:	2100      	movs	r1, #0
 800bc28:	400a      	ands	r2, r1
 800bc2a:	1c11      	adds	r1, r2, #0
 800bc2c:	1c02      	adds	r2, r0, #0
 800bc2e:	430a      	orrs	r2, r1
 800bc30:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800bc32:	197b      	adds	r3, r7, r5
 800bc34:	781a      	ldrb	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800bc3a:	f000 f86f 	bl	800bd1c <micSettlingComplete>
 800bc3e:	0003      	movs	r3, r0
 800bc40:	001a      	movs	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800bc46:	4b0a      	ldr	r3, [pc, #40]	@ (800bc70 <getSoundData+0x190>)
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d005      	beq.n	800bc5c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bc50:	4b08      	ldr	r3, [pc, #32]	@ (800bc74 <getSoundData+0x194>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	b25b      	sxtb	r3, r3
 800bc56:	0018      	movs	r0, r3
 800bc58:	f7ff ff06 	bl	800ba68 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800bc5c:	2301      	movs	r3, #1
}
 800bc5e:	0018      	movs	r0, r3
 800bc60:	46bd      	mov	sp, r7
 800bc62:	b006      	add	sp, #24
 800bc64:	bdb0      	pop	{r4, r5, r7, pc}
 800bc66:	46c0      	nop			@ (mov r8, r8)
 800bc68:	200012b4 	.word	0x200012b4
 800bc6c:	200012b7 	.word	0x200012b7
 800bc70:	200012b6 	.word	0x200012b6
 800bc74:	20001d04 	.word	0x20001d04
 800bc78:	20001d40 	.word	0x20001d40
 800bc7c:	20001d08 	.word	0x20001d08
 800bc80:	20001d0c 	.word	0x20001d0c
 800bc84:	20001d10 	.word	0x20001d10
 800bc88:	20001d28 	.word	0x20001d28
 800bc8c:	200012bc 	.word	0x200012bc
 800bc90:	3b5c7333 	.word	0x3b5c7333

0800bc94 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	001a      	movs	r2, r3
 800bca2:	1cfb      	adds	r3, r7, #3
 800bca4:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800bca6:	4b09      	ldr	r3, [pc, #36]	@ (800bccc <soundInit+0x38>)
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800bcac:	4b08      	ldr	r3, [pc, #32]	@ (800bcd0 <soundInit+0x3c>)
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800bcb2:	4b08      	ldr	r3, [pc, #32]	@ (800bcd4 <soundInit+0x40>)
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bcb8:	4b07      	ldr	r3, [pc, #28]	@ (800bcd8 <soundInit+0x44>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	569a      	ldrsb	r2, [r3, r2]
 800bcbe:	4b06      	ldr	r3, [pc, #24]	@ (800bcd8 <soundInit+0x44>)
 800bcc0:	701a      	strb	r2, [r3, #0]

    return true;
 800bcc2:	2301      	movs	r3, #1
}
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b004      	add	sp, #16
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	20001cfc 	.word	0x20001cfc
 800bcd0:	20001cf8 	.word	0x20001cf8
 800bcd4:	20001d00 	.word	0x20001d00
 800bcd8:	20001d04 	.word	0x20001d04

0800bcdc <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800bce0:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <clearMaximumAmplitude+0x10>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
}
 800bce6:	46c0      	nop			@ (mov r8, r8)
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200012bc 	.word	0x200012bc

0800bcf0 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800bcf4:	4b08      	ldr	r3, [pc, #32]	@ (800bd18 <startMicSettlingPeriod+0x28>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800bcfe:	4b06      	ldr	r3, [pc, #24]	@ (800bd18 <startMicSettlingPeriod+0x28>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	0018      	movs	r0, r3
 800bd04:	f00a f8b6 	bl	8015e74 <HAL_TIM_Base_Start>
 800bd08:	1e03      	subs	r3, r0, #0
 800bd0a:	d001      	beq.n	800bd10 <startMicSettlingPeriod+0x20>
    {
        return false;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	e000      	b.n	800bd12 <startMicSettlingPeriod+0x22>
    }
    return true;
 800bd10:	2301      	movs	r3, #1
}
 800bd12:	0018      	movs	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	20001cf8 	.word	0x20001cf8

0800bd1c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800bd22:	4b0e      	ldr	r3, [pc, #56]	@ (800bd5c <micSettlingComplete+0x40>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	401a      	ands	r2, r3
 800bd2e:	1dfb      	adds	r3, r7, #7
 800bd30:	3a01      	subs	r2, #1
 800bd32:	4251      	negs	r1, r2
 800bd34:	414a      	adcs	r2, r1
 800bd36:	701a      	strb	r2, [r3, #0]
    if (complete)
 800bd38:	1dfb      	adds	r3, r7, #7
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d007      	beq.n	800bd50 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800bd40:	4b06      	ldr	r3, [pc, #24]	@ (800bd5c <micSettlingComplete+0x40>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	0018      	movs	r0, r3
 800bd46:	f00a f8df 	bl	8015f08 <HAL_TIM_Base_Stop>
      DataReady = true;
 800bd4a:	4b05      	ldr	r3, [pc, #20]	@ (800bd60 <micSettlingComplete+0x44>)
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800bd50:	1dfb      	adds	r3, r7, #7
 800bd52:	781b      	ldrb	r3, [r3, #0]
}
 800bd54:	0018      	movs	r0, r3
 800bd56:	46bd      	mov	sp, r7
 800bd58:	b002      	add	sp, #8
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	20001cf8 	.word	0x20001cf8
 800bd60:	200012b3 	.word	0x200012b3

0800bd64 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	0002      	movs	r2, r0
 800bd6c:	1dfb      	adds	r3, r7, #7
 800bd6e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800bd70:	4b29      	ldr	r3, [pc, #164]	@ (800be18 <enableMicrophone+0xb4>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	1dfa      	adds	r2, r7, #7
 800bd78:	7812      	ldrb	r2, [r2, #0]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d101      	bne.n	800bd82 <enableMicrophone+0x1e>
    {
        return true;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e045      	b.n	800be0e <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bd82:	1dfb      	adds	r3, r7, #7
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d025      	beq.n	800bdd6 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bd8a:	f7ff ffb1 	bl	800bcf0 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800bd8e:	4b23      	ldr	r3, [pc, #140]	@ (800be1c <enableMicrophone+0xb8>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2280      	movs	r2, #128	@ 0x80
 800bd94:	0092      	lsls	r2, r2, #2
 800bd96:	4922      	ldr	r1, [pc, #136]	@ (800be20 <enableMicrophone+0xbc>)
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f006 fad5 	bl	8012348 <HAL_I2S_Receive_DMA>
 800bd9e:	1e03      	subs	r3, r0, #0
 800bda0:	d001      	beq.n	800bda6 <enableMicrophone+0x42>
        {
            return false;
 800bda2:	2300      	movs	r3, #0
 800bda4:	e033      	b.n	800be0e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bda6:	f7ff ff99 	bl	800bcdc <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bdaa:	4b1e      	ldr	r3, [pc, #120]	@ (800be24 <enableMicrophone+0xc0>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bdb0:	4b1d      	ldr	r3, [pc, #116]	@ (800be28 <enableMicrophone+0xc4>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	b25b      	sxtb	r3, r3
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	f7ff fe56 	bl	800ba68 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800bdbc:	4b1b      	ldr	r3, [pc, #108]	@ (800be2c <enableMicrophone+0xc8>)
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800bdc2:	4b15      	ldr	r3, [pc, #84]	@ (800be18 <enableMicrophone+0xb4>)
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bdc8:	4b19      	ldr	r3, [pc, #100]	@ (800be30 <enableMicrophone+0xcc>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bdce:	4b19      	ldr	r3, [pc, #100]	@ (800be34 <enableMicrophone+0xd0>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	701a      	strb	r2, [r3, #0]
 800bdd4:	e01a      	b.n	800be0c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bdd6:	4b14      	ldr	r3, [pc, #80]	@ (800be28 <enableMicrophone+0xc4>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	b25b      	sxtb	r3, r3
 800bddc:	0018      	movs	r0, r3
 800bdde:	f7ff fe5d 	bl	800ba9c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800bde2:	4b12      	ldr	r3, [pc, #72]	@ (800be2c <enableMicrophone+0xc8>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bde8:	4b11      	ldr	r3, [pc, #68]	@ (800be30 <enableMicrophone+0xcc>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bdee:	4b11      	ldr	r3, [pc, #68]	@ (800be34 <enableMicrophone+0xd0>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800bdf4:	4b09      	ldr	r3, [pc, #36]	@ (800be1c <enableMicrophone+0xb8>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	f006 fb67 	bl	80124cc <HAL_I2S_DMAStop>
 800bdfe:	1e03      	subs	r3, r0, #0
 800be00:	d001      	beq.n	800be06 <enableMicrophone+0xa2>
        {
            return false;
 800be02:	2300      	movs	r3, #0
 800be04:	e003      	b.n	800be0e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800be06:	4b04      	ldr	r3, [pc, #16]	@ (800be18 <enableMicrophone+0xb4>)
 800be08:	2200      	movs	r2, #0
 800be0a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800be0c:	2301      	movs	r3, #1
}
 800be0e:	0018      	movs	r0, r3
 800be10:	46bd      	mov	sp, r7
 800be12:	b002      	add	sp, #8
 800be14:	bd80      	pop	{r7, pc}
 800be16:	46c0      	nop			@ (mov r8, r8)
 800be18:	200012b4 	.word	0x200012b4
 800be1c:	20001cfc 	.word	0x20001cfc
 800be20:	200012f8 	.word	0x200012f8
 800be24:	200012b8 	.word	0x200012b8
 800be28:	20001d04 	.word	0x20001d04
 800be2c:	200012b6 	.word	0x200012b6
 800be30:	200012b5 	.word	0x200012b5
 800be34:	200012b7 	.word	0x200012b7

0800be38 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800be3c:	4b0c      	ldr	r3, [pc, #48]	@ (800be70 <startSPLcalculation+0x38>)
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2201      	movs	r2, #1
 800be44:	4053      	eors	r3, r2
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <startSPLcalculation+0x18>
    {
        return false;
 800be4c:	2300      	movs	r3, #0
 800be4e:	e00c      	b.n	800be6a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800be50:	4b08      	ldr	r3, [pc, #32]	@ (800be74 <startSPLcalculation+0x3c>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d001      	beq.n	800be5e <startSPLcalculation+0x26>
    {
        return true;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e005      	b.n	800be6a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800be5e:	f000 fb63 	bl	800c528 <resetSPLstate>
    SPLcalcEnabled = true;
 800be62:	4b04      	ldr	r3, [pc, #16]	@ (800be74 <startSPLcalculation+0x3c>)
 800be64:	2201      	movs	r2, #1
 800be66:	701a      	strb	r2, [r3, #0]
    return true;
 800be68:	2301      	movs	r3, #1
}
 800be6a:	0018      	movs	r0, r3
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	200012b4 	.word	0x200012b4
 800be74:	200012b5 	.word	0x200012b5

0800be78 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800be80:	4b05      	ldr	r3, [pc, #20]	@ (800be98 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	429a      	cmp	r2, r3
 800be88:	d102      	bne.n	800be90 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800be8a:	2000      	movs	r0, #0
 800be8c:	f000 f81a 	bl	800bec4 <processHalfDMAbuffer>
  }
}
 800be90:	46c0      	nop			@ (mov r8, r8)
 800be92:	46bd      	mov	sp, r7
 800be94:	b002      	add	sp, #8
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20001cfc 	.word	0x20001cfc

0800be9c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bea4:	4b06      	ldr	r3, [pc, #24]	@ (800bec0 <HAL_I2S_RxCpltCallback+0x24>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d104      	bne.n	800beb8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800beae:	2380      	movs	r3, #128	@ 0x80
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	0018      	movs	r0, r3
 800beb4:	f000 f806 	bl	800bec4 <processHalfDMAbuffer>
  }
}
 800beb8:	46c0      	nop			@ (mov r8, r8)
 800beba:	46bd      	mov	sp, r7
 800bebc:	b002      	add	sp, #8
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	20001cfc 	.word	0x20001cfc

0800bec4 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	005a      	lsls	r2, r3, #1
 800bed0:	4b15      	ldr	r3, [pc, #84]	@ (800bf28 <processHalfDMAbuffer+0x64>)
 800bed2:	18d3      	adds	r3, r2, r3
 800bed4:	4a15      	ldr	r2, [pc, #84]	@ (800bf2c <processHalfDMAbuffer+0x68>)
 800bed6:	2180      	movs	r1, #128	@ 0x80
 800bed8:	0089      	lsls	r1, r1, #2
 800beda:	0018      	movs	r0, r3
 800bedc:	f000 fd35 	bl	800c94a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800bee0:	4b13      	ldr	r3, [pc, #76]	@ (800bf30 <processHalfDMAbuffer+0x6c>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	425a      	negs	r2, r3
 800bee6:	4153      	adcs	r3, r2
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	4b11      	ldr	r3, [pc, #68]	@ (800bf30 <processHalfDMAbuffer+0x6c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2109      	movs	r1, #9
 800bef0:	4299      	cmp	r1, r3
 800bef2:	419b      	sbcs	r3, r3
 800bef4:	425b      	negs	r3, r3
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	480c      	ldr	r0, [pc, #48]	@ (800bf2c <processHalfDMAbuffer+0x68>)
 800befa:	2180      	movs	r1, #128	@ 0x80
 800befc:	f000 fb46 	bl	800c58c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800bf00:	4b0b      	ldr	r3, [pc, #44]	@ (800bf30 <processHalfDMAbuffer+0x6c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b09      	cmp	r3, #9
 800bf06:	d804      	bhi.n	800bf12 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800bf08:	4b09      	ldr	r3, [pc, #36]	@ (800bf30 <processHalfDMAbuffer+0x6c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	4b08      	ldr	r3, [pc, #32]	@ (800bf30 <processHalfDMAbuffer+0x6c>)
 800bf10:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800bf12:	4b08      	ldr	r3, [pc, #32]	@ (800bf34 <processHalfDMAbuffer+0x70>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800bf1c:	f000 f826 	bl	800bf6c <calculateSPLQ31>
    }
}
 800bf20:	46c0      	nop			@ (mov r8, r8)
 800bf22:	46bd      	mov	sp, r7
 800bf24:	b002      	add	sp, #8
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	200012f8 	.word	0x200012f8
 800bf2c:	20001af8 	.word	0x20001af8
 800bf30:	200012b8 	.word	0x200012b8
 800bf34:	200012b5 	.word	0x200012b5

0800bf38 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bf40:	4b07      	ldr	r3, [pc, #28]	@ (800bf60 <HAL_I2S_ErrorCallback+0x28>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d106      	bne.n	800bf58 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800bf4a:	4a06      	ldr	r2, [pc, #24]	@ (800bf64 <HAL_I2S_ErrorCallback+0x2c>)
 800bf4c:	239f      	movs	r3, #159	@ 0x9f
 800bf4e:	0059      	lsls	r1, r3, #1
 800bf50:	4b05      	ldr	r3, [pc, #20]	@ (800bf68 <HAL_I2S_ErrorCallback+0x30>)
 800bf52:	0018      	movs	r0, r3
 800bf54:	f001 fe42 	bl	800dbdc <errorHandler>
  }
}
 800bf58:	46c0      	nop			@ (mov r8, r8)
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	b002      	add	sp, #8
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20001cfc 	.word	0x20001cfc
 800bf64:	0802413c 	.word	0x0802413c
 800bf68:	080248a0 	.word	0x080248a0

0800bf6c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800bf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf6e:	b0b3      	sub	sp, #204	@ 0xcc
 800bf70:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800bf72:	4ae2      	ldr	r2, [pc, #904]	@ (800c2fc <calculateSPLQ31+0x390>)
 800bf74:	2338      	movs	r3, #56	@ 0x38
 800bf76:	2030      	movs	r0, #48	@ 0x30
 800bf78:	181b      	adds	r3, r3, r0
 800bf7a:	19d9      	adds	r1, r3, r7
 800bf7c:	2334      	movs	r3, #52	@ 0x34
 800bf7e:	181b      	adds	r3, r3, r0
 800bf80:	19d8      	adds	r0, r3, r7
 800bf82:	2380      	movs	r3, #128	@ 0x80
 800bf84:	f000 fc36 	bl	800c7f4 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800bf88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	da00      	bge.n	800bf90 <calculateSPLQ31+0x24>
 800bf8e:	3301      	adds	r3, #1
 800bf90:	105b      	asrs	r3, r3, #1
 800bf92:	001a      	movs	r2, r3
 800bf94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	da00      	bge.n	800bf9c <calculateSPLQ31+0x30>
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	105b      	asrs	r3, r3, #1
 800bf9e:	18d3      	adds	r3, r2, r3
 800bfa0:	2188      	movs	r1, #136	@ 0x88
 800bfa2:	187a      	adds	r2, r7, r1
 800bfa4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800bfa6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bfa8:	187b      	adds	r3, r7, r1
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	3304      	adds	r3, #4
 800bfb0:	2284      	movs	r2, #132	@ 0x84
 800bfb2:	18b9      	adds	r1, r7, r2
 800bfb4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800bfb6:	18bb      	adds	r3, r7, r2
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4ad1      	ldr	r2, [pc, #836]	@ (800c300 <calculateSPLQ31+0x394>)
 800bfbc:	0019      	movs	r1, r3
 800bfbe:	0010      	movs	r0, r2
 800bfc0:	f000 fc58 	bl	800c874 <getPo2factor>
 800bfc4:	0003      	movs	r3, r0
 800bfc6:	2280      	movs	r2, #128	@ 0x80
 800bfc8:	18ba      	adds	r2, r7, r2
 800bfca:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	2284      	movs	r2, #132	@ 0x84
 800bfd0:	2130      	movs	r1, #48	@ 0x30
 800bfd2:	1852      	adds	r2, r2, r1
 800bfd4:	19d2      	adds	r2, r2, r7
 800bfd6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800bfd8:	2300      	movs	r3, #0
 800bfda:	2280      	movs	r2, #128	@ 0x80
 800bfdc:	1852      	adds	r2, r2, r1
 800bfde:	19d2      	adds	r2, r2, r7
 800bfe0:	6013      	str	r3, [r2, #0]
 800bfe2:	e032      	b.n	800c04a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800bfe4:	4ac5      	ldr	r2, [pc, #788]	@ (800c2fc <calculateSPLQ31+0x390>)
 800bfe6:	2680      	movs	r6, #128	@ 0x80
 800bfe8:	2330      	movs	r3, #48	@ 0x30
 800bfea:	18f1      	adds	r1, r6, r3
 800bfec:	19cb      	adds	r3, r1, r7
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	589a      	ldr	r2, [r3, r2]
 800bff4:	2188      	movs	r1, #136	@ 0x88
 800bff6:	1879      	adds	r1, r7, r1
 800bff8:	680b      	ldr	r3, [r1, #0]
 800bffa:	1ad2      	subs	r2, r2, r3
 800bffc:	2180      	movs	r1, #128	@ 0x80
 800bffe:	1879      	adds	r1, r7, r1
 800c000:	680b      	ldr	r3, [r1, #0]
 800c002:	409a      	lsls	r2, r3
 800c004:	0011      	movs	r1, r2
 800c006:	4abf      	ldr	r2, [pc, #764]	@ (800c304 <calculateSPLQ31+0x398>)
 800c008:	2084      	movs	r0, #132	@ 0x84
 800c00a:	2330      	movs	r3, #48	@ 0x30
 800c00c:	18c3      	adds	r3, r0, r3
 800c00e:	19db      	adds	r3, r3, r7
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c016:	2230      	movs	r2, #48	@ 0x30
 800c018:	1883      	adds	r3, r0, r2
 800c01a:	19db      	adds	r3, r3, r7
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3301      	adds	r3, #1
 800c020:	49b8      	ldr	r1, [pc, #736]	@ (800c304 <calculateSPLQ31+0x398>)
 800c022:	009a      	lsls	r2, r3, #2
 800c024:	2300      	movs	r3, #0
 800c026:	5053      	str	r3, [r2, r1]
        count += 2;
 800c028:	2230      	movs	r2, #48	@ 0x30
 800c02a:	1883      	adds	r3, r0, r2
 800c02c:	19db      	adds	r3, r3, r7
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	3302      	adds	r3, #2
 800c032:	0011      	movs	r1, r2
 800c034:	1882      	adds	r2, r0, r2
 800c036:	19d2      	adds	r2, r2, r7
 800c038:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c03a:	000a      	movs	r2, r1
 800c03c:	18b3      	adds	r3, r6, r2
 800c03e:	19db      	adds	r3, r3, r7
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	18b2      	adds	r2, r6, r2
 800c046:	19d2      	adds	r2, r2, r7
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	2380      	movs	r3, #128	@ 0x80
 800c04c:	2630      	movs	r6, #48	@ 0x30
 800c04e:	199b      	adds	r3, r3, r6
 800c050:	19db      	adds	r3, r3, r7
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b7f      	cmp	r3, #127	@ 0x7f
 800c056:	d9c5      	bls.n	800bfe4 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c058:	4bab      	ldr	r3, [pc, #684]	@ (800c308 <calculateSPLQ31+0x39c>)
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	49a9      	ldr	r1, [pc, #676]	@ (800c304 <calculateSPLQ31+0x398>)
 800c05e:	2301      	movs	r3, #1
 800c060:	2200      	movs	r2, #0
 800c062:	f010 ffcd 	bl	801d000 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c066:	4aa9      	ldr	r2, [pc, #676]	@ (800c30c <calculateSPLQ31+0x3a0>)
 800c068:	2338      	movs	r3, #56	@ 0x38
 800c06a:	199b      	adds	r3, r3, r6
 800c06c:	19d9      	adds	r1, r3, r7
 800c06e:	2334      	movs	r3, #52	@ 0x34
 800c070:	199b      	adds	r3, r3, r6
 800c072:	19d8      	adds	r0, r3, r7
 800c074:	237e      	movs	r3, #126	@ 0x7e
 800c076:	f000 fbbd 	bl	800c7f4 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c07a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c07c:	2380      	movs	r3, #128	@ 0x80
 800c07e:	061b      	lsls	r3, r3, #24
 800c080:	429a      	cmp	r2, r3
 800c082:	d101      	bne.n	800c088 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c084:	4b9e      	ldr	r3, [pc, #632]	@ (800c300 <calculateSPLQ31+0x394>)
 800c086:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c088:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c08a:	2380      	movs	r3, #128	@ 0x80
 800c08c:	061b      	lsls	r3, r3, #24
 800c08e:	429a      	cmp	r2, r3
 800c090:	d101      	bne.n	800c096 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c092:	4b9b      	ldr	r3, [pc, #620]	@ (800c300 <calculateSPLQ31+0x394>)
 800c094:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c098:	17da      	asrs	r2, r3, #31
 800c09a:	189b      	adds	r3, r3, r2
 800c09c:	4053      	eors	r3, r2
 800c09e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c0a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0a2:	17da      	asrs	r2, r3, #31
 800c0a4:	189b      	adds	r3, r3, r2
 800c0a6:	4053      	eors	r3, r2
 800c0a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c0aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c0ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	dd01      	ble.n	800c0b6 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c0b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c0b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c0bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c0be:	4a90      	ldr	r2, [pc, #576]	@ (800c300 <calculateSPLQ31+0x394>)
 800c0c0:	0019      	movs	r1, r3
 800c0c2:	0010      	movs	r0, r2
 800c0c4:	f000 fbd6 	bl	800c874 <getPo2factor>
 800c0c8:	0003      	movs	r3, r0
 800c0ca:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	22ac      	movs	r2, #172	@ 0xac
 800c0d0:	18ba      	adds	r2, r7, r2
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	e012      	b.n	800c0fc <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c0d6:	4a8b      	ldr	r2, [pc, #556]	@ (800c304 <calculateSPLQ31+0x398>)
 800c0d8:	20ac      	movs	r0, #172	@ 0xac
 800c0da:	183b      	adds	r3, r7, r0
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	589a      	ldr	r2, [r3, r2]
 800c0e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0e4:	409a      	lsls	r2, r3
 800c0e6:	0011      	movs	r1, r2
 800c0e8:	4a86      	ldr	r2, [pc, #536]	@ (800c304 <calculateSPLQ31+0x398>)
 800c0ea:	183b      	adds	r3, r7, r0
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c0f2:	183b      	adds	r3, r7, r0
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	183a      	adds	r2, r7, r0
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	23ac      	movs	r3, #172	@ 0xac
 800c0fe:	18fb      	adds	r3, r7, r3
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b7f      	cmp	r3, #127	@ 0x7f
 800c104:	d9e7      	bls.n	800c0d6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c106:	4b7d      	ldr	r3, [pc, #500]	@ (800c2fc <calculateSPLQ31+0x390>)
 800c108:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c10a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c10c:	4b7d      	ldr	r3, [pc, #500]	@ (800c304 <calculateSPLQ31+0x398>)
 800c10e:	2240      	movs	r2, #64	@ 0x40
 800c110:	0018      	movs	r0, r3
 800c112:	f011 fd1f 	bl	801db54 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c116:	2330      	movs	r3, #48	@ 0x30
 800c118:	18fb      	adds	r3, r7, r3
 800c11a:	0018      	movs	r0, r3
 800c11c:	2330      	movs	r3, #48	@ 0x30
 800c11e:	001a      	movs	r2, r3
 800c120:	2100      	movs	r1, #0
 800c122:	f013 fb3b 	bl	801f79c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c126:	2200      	movs	r2, #0
 800c128:	2300      	movs	r3, #0
 800c12a:	21a0      	movs	r1, #160	@ 0xa0
 800c12c:	1879      	adds	r1, r7, r1
 800c12e:	600a      	str	r2, [r1, #0]
 800c130:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c132:	2301      	movs	r3, #1
 800c134:	229c      	movs	r2, #156	@ 0x9c
 800c136:	18ba      	adds	r2, r7, r2
 800c138:	6013      	str	r3, [r2, #0]
 800c13a:	e05b      	b.n	800c1f4 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c13c:	269c      	movs	r6, #156	@ 0x9c
 800c13e:	19bb      	adds	r3, r7, r6
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	009a      	lsls	r2, r3, #2
 800c144:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c146:	189b      	adds	r3, r3, r2
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	613b      	str	r3, [r7, #16]
 800c14c:	17db      	asrs	r3, r3, #31
 800c14e:	617b      	str	r3, [r7, #20]
 800c150:	4b6f      	ldr	r3, [pc, #444]	@ (800c310 <calculateSPLQ31+0x3a4>)
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	19bb      	adds	r3, r7, r6
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	005b      	lsls	r3, r3, #1
 800c15a:	18d3      	adds	r3, r2, r3
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	60bb      	str	r3, [r7, #8]
 800c160:	2300      	movs	r3, #0
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6938      	ldr	r0, [r7, #16]
 800c16a:	6979      	ldr	r1, [r7, #20]
 800c16c:	f7f4 fa28 	bl	80005c0 <__aeabi_lmul>
 800c170:	0002      	movs	r2, r0
 800c172:	000b      	movs	r3, r1
 800c174:	0010      	movs	r0, r2
 800c176:	0019      	movs	r1, r3
 800c178:	23a0      	movs	r3, #160	@ 0xa0
 800c17a:	18fa      	adds	r2, r7, r3
 800c17c:	6853      	ldr	r3, [r2, #4]
 800c17e:	6812      	ldr	r2, [r2, #0]
 800c180:	1812      	adds	r2, r2, r0
 800c182:	414b      	adcs	r3, r1
 800c184:	21a0      	movs	r1, #160	@ 0xa0
 800c186:	1879      	adds	r1, r7, r1
 800c188:	600a      	str	r2, [r1, #0]
 800c18a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c18c:	4b61      	ldr	r3, [pc, #388]	@ (800c314 <calculateSPLQ31+0x3a8>)
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	19bb      	adds	r3, r7, r6
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	18d3      	adds	r3, r2, r3
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b06      	cmp	r3, #6
 800c19a:	d025      	beq.n	800c1e8 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c19c:	4b5d      	ldr	r3, [pc, #372]	@ (800c314 <calculateSPLQ31+0x3a8>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	19bb      	adds	r3, r7, r6
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	18d3      	adds	r3, r2, r3
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2230      	movs	r2, #48	@ 0x30
 800c1aa:	18ba      	adds	r2, r7, r2
 800c1ac:	00db      	lsls	r3, r3, #3
 800c1ae:	18d3      	adds	r3, r2, r3
 800c1b0:	6818      	ldr	r0, [r3, #0]
 800c1b2:	6859      	ldr	r1, [r3, #4]
 800c1b4:	19bb      	adds	r3, r7, r6
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	009a      	lsls	r2, r3, #2
 800c1ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1bc:	189b      	adds	r3, r3, r2
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	603b      	str	r3, [r7, #0]
 800c1c2:	17db      	asrs	r3, r3, #31
 800c1c4:	607b      	str	r3, [r7, #4]
 800c1c6:	4b53      	ldr	r3, [pc, #332]	@ (800c314 <calculateSPLQ31+0x3a8>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	19be      	adds	r6, r7, r6
 800c1cc:	6833      	ldr	r3, [r6, #0]
 800c1ce:	18d3      	adds	r3, r2, r3
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	001e      	movs	r6, r3
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	1880      	adds	r0, r0, r2
 800c1da:	4159      	adcs	r1, r3
 800c1dc:	2330      	movs	r3, #48	@ 0x30
 800c1de:	18fa      	adds	r2, r7, r3
 800c1e0:	00f3      	lsls	r3, r6, #3
 800c1e2:	18d3      	adds	r3, r2, r3
 800c1e4:	6018      	str	r0, [r3, #0]
 800c1e6:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c1e8:	229c      	movs	r2, #156	@ 0x9c
 800c1ea:	18bb      	adds	r3, r7, r2
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	18ba      	adds	r2, r7, r2
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	239c      	movs	r3, #156	@ 0x9c
 800c1f6:	18fb      	adds	r3, r7, r3
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b3f      	cmp	r3, #63	@ 0x3f
 800c1fc:	d99e      	bls.n	800c13c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c1fe:	2380      	movs	r3, #128	@ 0x80
 800c200:	18fb      	adds	r3, r7, r3
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	001a      	movs	r2, r3
 800c208:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	18d3      	adds	r3, r2, r3
 800c20e:	3b22      	subs	r3, #34	@ 0x22
 800c210:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c212:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c214:	17da      	asrs	r2, r3, #31
 800c216:	189b      	adds	r3, r3, r2
 800c218:	4053      	eors	r3, r2
 800c21a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c21c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da62      	bge.n	800c2e8 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c224:	3b20      	subs	r3, #32
 800c226:	2b00      	cmp	r3, #0
 800c228:	db05      	blt.n	800c236 <calculateSPLQ31+0x2ca>
 800c22a:	22a0      	movs	r2, #160	@ 0xa0
 800c22c:	18ba      	adds	r2, r7, r2
 800c22e:	6812      	ldr	r2, [r2, #0]
 800c230:	409a      	lsls	r2, r3
 800c232:	627a      	str	r2, [r7, #36]	@ 0x24
 800c234:	e010      	b.n	800c258 <calculateSPLQ31+0x2ec>
 800c236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c238:	2220      	movs	r2, #32
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	22a0      	movs	r2, #160	@ 0xa0
 800c23e:	18ba      	adds	r2, r7, r2
 800c240:	6812      	ldr	r2, [r2, #0]
 800c242:	40da      	lsrs	r2, r3
 800c244:	0013      	movs	r3, r2
 800c246:	22a4      	movs	r2, #164	@ 0xa4
 800c248:	18ba      	adds	r2, r7, r2
 800c24a:	6811      	ldr	r1, [r2, #0]
 800c24c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c24e:	4091      	lsls	r1, r2
 800c250:	6279      	str	r1, [r7, #36]	@ 0x24
 800c252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c254:	431a      	orrs	r2, r3
 800c256:	627a      	str	r2, [r7, #36]	@ 0x24
 800c258:	21a0      	movs	r1, #160	@ 0xa0
 800c25a:	187b      	adds	r3, r7, r1
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c260:	409a      	lsls	r2, r3
 800c262:	623a      	str	r2, [r7, #32]
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c268:	187a      	adds	r2, r7, r1
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c26e:	2300      	movs	r3, #0
 800c270:	2298      	movs	r2, #152	@ 0x98
 800c272:	18ba      	adds	r2, r7, r2
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	e031      	b.n	800c2dc <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c278:	2330      	movs	r3, #48	@ 0x30
 800c27a:	18fa      	adds	r2, r7, r3
 800c27c:	2398      	movs	r3, #152	@ 0x98
 800c27e:	18fb      	adds	r3, r7, r3
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	18d3      	adds	r3, r2, r3
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c28c:	3920      	subs	r1, #32
 800c28e:	2900      	cmp	r1, #0
 800c290:	db03      	blt.n	800c29a <calculateSPLQ31+0x32e>
 800c292:	0010      	movs	r0, r2
 800c294:	4088      	lsls	r0, r1
 800c296:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c298:	e00c      	b.n	800c2b4 <calculateSPLQ31+0x348>
 800c29a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c29c:	2020      	movs	r0, #32
 800c29e:	1a41      	subs	r1, r0, r1
 800c2a0:	0010      	movs	r0, r2
 800c2a2:	40c8      	lsrs	r0, r1
 800c2a4:	0001      	movs	r1, r0
 800c2a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c2a8:	001c      	movs	r4, r3
 800c2aa:	4084      	lsls	r4, r0
 800c2ac:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c2ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2b0:	4308      	orrs	r0, r1
 800c2b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c2b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c2b6:	0013      	movs	r3, r2
 800c2b8:	408b      	lsls	r3, r1
 800c2ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2bc:	2330      	movs	r3, #48	@ 0x30
 800c2be:	18fa      	adds	r2, r7, r3
 800c2c0:	2098      	movs	r0, #152	@ 0x98
 800c2c2:	183b      	adds	r3, r7, r0
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	18d3      	adds	r3, r2, r3
 800c2ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2ce:	6019      	str	r1, [r3, #0]
 800c2d0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2d2:	183b      	adds	r3, r7, r0
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	183a      	adds	r2, r7, r0
 800c2da:	6013      	str	r3, [r2, #0]
 800c2dc:	2398      	movs	r3, #152	@ 0x98
 800c2de:	18fb      	adds	r3, r7, r3
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b05      	cmp	r3, #5
 800c2e4:	d9c8      	bls.n	800c278 <calculateSPLQ31+0x30c>
 800c2e6:	e06b      	b.n	800c3c0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c2e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2ea:	3b20      	subs	r3, #32
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	db13      	blt.n	800c318 <calculateSPLQ31+0x3ac>
 800c2f0:	22a4      	movs	r2, #164	@ 0xa4
 800c2f2:	18ba      	adds	r2, r7, r2
 800c2f4:	6812      	ldr	r2, [r2, #0]
 800c2f6:	40da      	lsrs	r2, r3
 800c2f8:	61ba      	str	r2, [r7, #24]
 800c2fa:	e01e      	b.n	800c33a <calculateSPLQ31+0x3ce>
 800c2fc:	20001af8 	.word	0x20001af8
 800c300:	7fffffff 	.word	0x7fffffff
 800c304:	20001d44 	.word	0x20001d44
 800c308:	200000b0 	.word	0x200000b0
 800c30c:	20001d4c 	.word	0x20001d4c
 800c310:	200000b4 	.word	0x200000b4
 800c314:	200000c0 	.word	0x200000c0
 800c318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c31a:	2220      	movs	r2, #32
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	22a4      	movs	r2, #164	@ 0xa4
 800c320:	18ba      	adds	r2, r7, r2
 800c322:	6812      	ldr	r2, [r2, #0]
 800c324:	409a      	lsls	r2, r3
 800c326:	0013      	movs	r3, r2
 800c328:	22a0      	movs	r2, #160	@ 0xa0
 800c32a:	18ba      	adds	r2, r7, r2
 800c32c:	6811      	ldr	r1, [r2, #0]
 800c32e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c330:	40d1      	lsrs	r1, r2
 800c332:	61b9      	str	r1, [r7, #24]
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	431a      	orrs	r2, r3
 800c338:	61ba      	str	r2, [r7, #24]
 800c33a:	23a4      	movs	r3, #164	@ 0xa4
 800c33c:	18fb      	adds	r3, r7, r3
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c342:	40da      	lsrs	r2, r3
 800c344:	61fa      	str	r2, [r7, #28]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	21a0      	movs	r1, #160	@ 0xa0
 800c34c:	1879      	adds	r1, r7, r1
 800c34e:	600a      	str	r2, [r1, #0]
 800c350:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c352:	2300      	movs	r3, #0
 800c354:	2294      	movs	r2, #148	@ 0x94
 800c356:	18ba      	adds	r2, r7, r2
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	e02c      	b.n	800c3b6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c35c:	2330      	movs	r3, #48	@ 0x30
 800c35e:	18fa      	adds	r2, r7, r3
 800c360:	2394      	movs	r3, #148	@ 0x94
 800c362:	18fb      	adds	r3, r7, r3
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	00db      	lsls	r3, r3, #3
 800c368:	18d3      	adds	r3, r2, r3
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c370:	3920      	subs	r1, #32
 800c372:	2900      	cmp	r1, #0
 800c374:	db03      	blt.n	800c37e <calculateSPLQ31+0x412>
 800c376:	0018      	movs	r0, r3
 800c378:	40c8      	lsrs	r0, r1
 800c37a:	0004      	movs	r4, r0
 800c37c:	e00a      	b.n	800c394 <calculateSPLQ31+0x428>
 800c37e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c380:	2020      	movs	r0, #32
 800c382:	1a41      	subs	r1, r0, r1
 800c384:	0018      	movs	r0, r3
 800c386:	4088      	lsls	r0, r1
 800c388:	0001      	movs	r1, r0
 800c38a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c38c:	0016      	movs	r6, r2
 800c38e:	40c6      	lsrs	r6, r0
 800c390:	0034      	movs	r4, r6
 800c392:	430c      	orrs	r4, r1
 800c394:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c396:	40cb      	lsrs	r3, r1
 800c398:	001d      	movs	r5, r3
 800c39a:	2330      	movs	r3, #48	@ 0x30
 800c39c:	18fa      	adds	r2, r7, r3
 800c39e:	2194      	movs	r1, #148	@ 0x94
 800c3a0:	187b      	adds	r3, r7, r1
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	18d3      	adds	r3, r2, r3
 800c3a8:	601c      	str	r4, [r3, #0]
 800c3aa:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c3ac:	187b      	adds	r3, r7, r1
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	187a      	adds	r2, r7, r1
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	2394      	movs	r3, #148	@ 0x94
 800c3b8:	18fb      	adds	r3, r7, r3
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b05      	cmp	r3, #5
 800c3be:	d9cd      	bls.n	800c35c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c3c0:	230f      	movs	r3, #15
 800c3c2:	425d      	negs	r5, r3
 800c3c4:	2305      	movs	r3, #5
 800c3c6:	425e      	negs	r6, r3
 800c3c8:	4b4a      	ldr	r3, [pc, #296]	@ (800c4f4 <calculateSPLQ31+0x588>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b4a      	ldr	r3, [pc, #296]	@ (800c4f8 <calculateSPLQ31+0x58c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	21a0      	movs	r1, #160	@ 0xa0
 800c3d6:	1879      	adds	r1, r7, r1
 800c3d8:	6808      	ldr	r0, [r1, #0]
 800c3da:	6849      	ldr	r1, [r1, #4]
 800c3dc:	4c47      	ldr	r4, [pc, #284]	@ (800c4fc <calculateSPLQ31+0x590>)
 800c3de:	9403      	str	r4, [sp, #12]
 800c3e0:	4c47      	ldr	r4, [pc, #284]	@ (800c500 <calculateSPLQ31+0x594>)
 800c3e2:	9402      	str	r4, [sp, #8]
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	9200      	str	r2, [sp, #0]
 800c3e8:	0033      	movs	r3, r6
 800c3ea:	002a      	movs	r2, r5
 800c3ec:	f000 fa86 	bl	800c8fc <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	2290      	movs	r2, #144	@ 0x90
 800c3f4:	18ba      	adds	r2, r7, r2
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	e026      	b.n	800c448 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c3fa:	2330      	movs	r3, #48	@ 0x30
 800c3fc:	18fa      	adds	r2, r7, r3
 800c3fe:	2490      	movs	r4, #144	@ 0x90
 800c400:	193b      	adds	r3, r7, r4
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	18d3      	adds	r3, r2, r3
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	6859      	ldr	r1, [r3, #4]
 800c40c:	230f      	movs	r3, #15
 800c40e:	425d      	negs	r5, r3
 800c410:	2305      	movs	r3, #5
 800c412:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c414:	193b      	adds	r3, r7, r4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	009a      	lsls	r2, r3, #2
 800c41a:	4b3a      	ldr	r3, [pc, #232]	@ (800c504 <calculateSPLQ31+0x598>)
 800c41c:	18d3      	adds	r3, r2, r3
 800c41e:	193a      	adds	r2, r7, r4
 800c420:	6812      	ldr	r2, [r2, #0]
 800c422:	0094      	lsls	r4, r2, #2
 800c424:	4a38      	ldr	r2, [pc, #224]	@ (800c508 <calculateSPLQ31+0x59c>)
 800c426:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c428:	9203      	str	r2, [sp, #12]
 800c42a:	9302      	str	r3, [sp, #8]
 800c42c:	2300      	movs	r3, #0
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	2300      	movs	r3, #0
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	0033      	movs	r3, r6
 800c436:	002a      	movs	r2, r5
 800c438:	f000 fa60 	bl	800c8fc <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c43c:	2490      	movs	r4, #144	@ 0x90
 800c43e:	193b      	adds	r3, r7, r4
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3301      	adds	r3, #1
 800c444:	193a      	adds	r2, r7, r4
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	2390      	movs	r3, #144	@ 0x90
 800c44a:	18fb      	adds	r3, r7, r3
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b05      	cmp	r3, #5
 800c450:	d9d3      	bls.n	800c3fa <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c452:	4b2b      	ldr	r3, [pc, #172]	@ (800c500 <calculateSPLQ31+0x594>)
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	4b2d      	ldr	r3, [pc, #180]	@ (800c50c <calculateSPLQ31+0x5a0>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	18d2      	adds	r2, r2, r3
 800c45c:	4b2b      	ldr	r3, [pc, #172]	@ (800c50c <calculateSPLQ31+0x5a0>)
 800c45e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c460:	4b26      	ldr	r3, [pc, #152]	@ (800c4fc <calculateSPLQ31+0x590>)
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	4b2a      	ldr	r3, [pc, #168]	@ (800c510 <calculateSPLQ31+0x5a4>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	18d2      	adds	r2, r2, r3
 800c46a:	4b29      	ldr	r3, [pc, #164]	@ (800c510 <calculateSPLQ31+0x5a4>)
 800c46c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c46e:	2300      	movs	r3, #0
 800c470:	228c      	movs	r2, #140	@ 0x8c
 800c472:	18ba      	adds	r2, r7, r2
 800c474:	6013      	str	r3, [r2, #0]
 800c476:	e025      	b.n	800c4c4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c478:	4b22      	ldr	r3, [pc, #136]	@ (800c504 <calculateSPLQ31+0x598>)
 800c47a:	208c      	movs	r0, #140	@ 0x8c
 800c47c:	183a      	adds	r2, r7, r0
 800c47e:	6812      	ldr	r2, [r2, #0]
 800c480:	0092      	lsls	r2, r2, #2
 800c482:	58d2      	ldr	r2, [r2, r3]
 800c484:	4b23      	ldr	r3, [pc, #140]	@ (800c514 <calculateSPLQ31+0x5a8>)
 800c486:	1839      	adds	r1, r7, r0
 800c488:	6809      	ldr	r1, [r1, #0]
 800c48a:	0089      	lsls	r1, r1, #2
 800c48c:	58cb      	ldr	r3, [r1, r3]
 800c48e:	18d1      	adds	r1, r2, r3
 800c490:	4b20      	ldr	r3, [pc, #128]	@ (800c514 <calculateSPLQ31+0x5a8>)
 800c492:	183a      	adds	r2, r7, r0
 800c494:	6812      	ldr	r2, [r2, #0]
 800c496:	0092      	lsls	r2, r2, #2
 800c498:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c49a:	4b1b      	ldr	r3, [pc, #108]	@ (800c508 <calculateSPLQ31+0x59c>)
 800c49c:	183a      	adds	r2, r7, r0
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	0092      	lsls	r2, r2, #2
 800c4a2:	58d2      	ldr	r2, [r2, r3]
 800c4a4:	4b1c      	ldr	r3, [pc, #112]	@ (800c518 <calculateSPLQ31+0x5ac>)
 800c4a6:	1839      	adds	r1, r7, r0
 800c4a8:	6809      	ldr	r1, [r1, #0]
 800c4aa:	0089      	lsls	r1, r1, #2
 800c4ac:	58cb      	ldr	r3, [r1, r3]
 800c4ae:	18d1      	adds	r1, r2, r3
 800c4b0:	4b19      	ldr	r3, [pc, #100]	@ (800c518 <calculateSPLQ31+0x5ac>)
 800c4b2:	183a      	adds	r2, r7, r0
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	0092      	lsls	r2, r2, #2
 800c4b8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4ba:	183b      	adds	r3, r7, r0
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	183a      	adds	r2, r7, r0
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	238c      	movs	r3, #140	@ 0x8c
 800c4c6:	18fb      	adds	r3, r7, r3
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b05      	cmp	r3, #5
 800c4cc:	d9d4      	bls.n	800c478 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	@ (800c51c <calculateSPLQ31+0x5b0>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	4b11      	ldr	r3, [pc, #68]	@ (800c51c <calculateSPLQ31+0x5b0>)
 800c4d6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c4d8:	4b10      	ldr	r3, [pc, #64]	@ (800c51c <calculateSPLQ31+0x5b0>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b0f      	cmp	r3, #15
 800c4de:	d905      	bls.n	800c4ec <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c4e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c520 <calculateSPLQ31+0x5b4>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c524 <calculateSPLQ31+0x5b8>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]
    }
}
 800c4ec:	46c0      	nop			@ (mov r8, r8)
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	b02f      	add	sp, #188	@ 0xbc
 800c4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f4:	200000b8 	.word	0x200000b8
 800c4f8:	200000bc 	.word	0x200000bc
 800c4fc:	200012c4 	.word	0x200012c4
 800c500:	200012c0 	.word	0x200012c0
 800c504:	200012c8 	.word	0x200012c8
 800c508:	200012e0 	.word	0x200012e0
 800c50c:	20001d08 	.word	0x20001d08
 800c510:	20001d0c 	.word	0x20001d0c
 800c514:	20001d10 	.word	0x20001d10
 800c518:	20001d28 	.word	0x20001d28
 800c51c:	20001d40 	.word	0x20001d40
 800c520:	200012b7 	.word	0x200012b7
 800c524:	200012b5 	.word	0x200012b5

0800c528 <resetSPLstate>:

static void resetSPLstate(void)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c52e:	4b11      	ldr	r3, [pc, #68]	@ (800c574 <resetSPLstate+0x4c>)
 800c530:	2200      	movs	r2, #0
 800c532:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c534:	4b10      	ldr	r3, [pc, #64]	@ (800c578 <resetSPLstate+0x50>)
 800c536:	2200      	movs	r2, #0
 800c538:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c53a:	4b10      	ldr	r3, [pc, #64]	@ (800c57c <resetSPLstate+0x54>)
 800c53c:	2200      	movs	r2, #0
 800c53e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c540:	2300      	movs	r3, #0
 800c542:	607b      	str	r3, [r7, #4]
 800c544:	e00c      	b.n	800c560 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c546:	4b0e      	ldr	r3, [pc, #56]	@ (800c580 <resetSPLstate+0x58>)
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	0092      	lsls	r2, r2, #2
 800c54c:	2100      	movs	r1, #0
 800c54e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c550:	4b0c      	ldr	r3, [pc, #48]	@ (800c584 <resetSPLstate+0x5c>)
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	0092      	lsls	r2, r2, #2
 800c556:	2100      	movs	r1, #0
 800c558:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3301      	adds	r3, #1
 800c55e:	607b      	str	r3, [r7, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b05      	cmp	r3, #5
 800c564:	d9ef      	bls.n	800c546 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c566:	4b08      	ldr	r3, [pc, #32]	@ (800c588 <resetSPLstate+0x60>)
 800c568:	2200      	movs	r2, #0
 800c56a:	701a      	strb	r2, [r3, #0]
}
 800c56c:	46c0      	nop			@ (mov r8, r8)
 800c56e:	46bd      	mov	sp, r7
 800c570:	b002      	add	sp, #8
 800c572:	bd80      	pop	{r7, pc}
 800c574:	20001d08 	.word	0x20001d08
 800c578:	20001d0c 	.word	0x20001d0c
 800c57c:	20001d40 	.word	0x20001d40
 800c580:	20001d10 	.word	0x20001d10
 800c584:	20001d28 	.word	0x20001d28
 800c588:	200012b7 	.word	0x200012b7

0800c58c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c58c:	b5b0      	push	{r4, r5, r7, lr}
 800c58e:	b090      	sub	sp, #64	@ 0x40
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	0019      	movs	r1, r3
 800c598:	1dfb      	adds	r3, r7, #7
 800c59a:	701a      	strb	r2, [r3, #0]
 800c59c:	1dbb      	adds	r3, r7, #6
 800c59e:	1c0a      	adds	r2, r1, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c5a2:	1dfb      	adds	r3, r7, #7
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d005      	beq.n	800c5b6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c5aa:	4b3b      	ldr	r3, [pc, #236]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c5b0:	4b3a      	ldr	r3, [pc, #232]	@ (800c69c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c5be:	2305      	movs	r3, #5
 800c5c0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5c6:	e040      	b.n	800c64a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	18d3      	adds	r3, r2, r3
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d4:	409a      	lsls	r2, r3
 800c5d6:	0013      	movs	r3, r2
 800c5d8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c5da:	4b30      	ldr	r3, [pc, #192]	@ (800c69c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	425a      	negs	r2, r3
 800c5e0:	4b2e      	ldr	r3, [pc, #184]	@ (800c69c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5e2:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c5e4:	2418      	movs	r4, #24
 800c5e6:	193a      	adds	r2, r7, r4
 800c5e8:	492c      	ldr	r1, [pc, #176]	@ (800c69c <getFilteredMaxAmplitudeQ31+0x110>)
 800c5ea:	231c      	movs	r3, #28
 800c5ec:	18f8      	adds	r0, r7, r3
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f011 fb08 	bl	801dc04 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c5f4:	2514      	movs	r5, #20
 800c5f6:	197a      	adds	r2, r7, r5
 800c5f8:	1939      	adds	r1, r7, r4
 800c5fa:	4829      	ldr	r0, [pc, #164]	@ (800c6a0 <getFilteredMaxAmplitudeQ31+0x114>)
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	f011 facf 	bl	801dba0 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c602:	2410      	movs	r4, #16
 800c604:	193a      	adds	r2, r7, r4
 800c606:	4924      	ldr	r1, [pc, #144]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c608:	4826      	ldr	r0, [pc, #152]	@ (800c6a4 <getFilteredMaxAmplitudeQ31+0x118>)
 800c60a:	2301      	movs	r3, #1
 800c60c:	f011 fac8 	bl	801dba0 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c610:	4a21      	ldr	r2, [pc, #132]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c612:	1939      	adds	r1, r7, r4
 800c614:	1978      	adds	r0, r7, r5
 800c616:	2301      	movs	r3, #1
 800c618:	f011 faf4 	bl	801dc04 <arm_add_q31>

        lastData = fx;
 800c61c:	69fa      	ldr	r2, [r7, #28]
 800c61e:	4b1f      	ldr	r3, [pc, #124]	@ (800c69c <getFilteredMaxAmplitudeQ31+0x110>)
 800c620:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c622:	4b1d      	ldr	r3, [pc, #116]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c628:	429a      	cmp	r2, r3
 800c62a:	da03      	bge.n	800c634 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c62c:	4b1a      	ldr	r3, [pc, #104]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c632:	e007      	b.n	800c644 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c634:	4b18      	ldr	r3, [pc, #96]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c63a:	429a      	cmp	r2, r3
 800c63c:	dd02      	ble.n	800c644 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c63e:	4b16      	ldr	r3, [pc, #88]	@ (800c698 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c646:	3301      	adds	r3, #1
 800c648:	637b      	str	r3, [r7, #52]	@ 0x34
 800c64a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d3ba      	bcc.n	800c5c8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c654:	17da      	asrs	r2, r3, #31
 800c656:	189b      	adds	r3, r3, r2
 800c658:	4053      	eors	r3, r2
 800c65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c65e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c664:	4293      	cmp	r3, r2
 800c666:	d200      	bcs.n	800c66a <getFilteredMaxAmplitudeQ31+0xde>
 800c668:	0013      	movs	r3, r2
 800c66a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c66c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c670:	40da      	lsrs	r2, r3
 800c672:	0013      	movs	r3, r2
 800c674:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c676:	1dbb      	adds	r3, r7, #6
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d007      	beq.n	800c68e <getFilteredMaxAmplitudeQ31+0x102>
 800c67e:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6a3a      	ldr	r2, [r7, #32]
 800c684:	429a      	cmp	r2, r3
 800c686:	d902      	bls.n	800c68e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c688:	4b07      	ldr	r3, [pc, #28]	@ (800c6a8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c68a:	6a3a      	ldr	r2, [r7, #32]
 800c68c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c68e:	6a3b      	ldr	r3, [r7, #32]
}
 800c690:	0018      	movs	r0, r3
 800c692:	46bd      	mov	sp, r7
 800c694:	b010      	add	sp, #64	@ 0x40
 800c696:	bdb0      	pop	{r4, r5, r7, pc}
 800c698:	20002144 	.word	0x20002144
 800c69c:	20002148 	.word	0x20002148
 800c6a0:	08024898 	.word	0x08024898
 800c6a4:	0802489c 	.word	0x0802489c
 800c6a8:	200012bc 	.word	0x200012bc

0800c6ac <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c6b8:	4913      	ldr	r1, [pc, #76]	@ (800c708 <floatToIntAndFrac2dp+0x5c>)
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f7f4 fc70 	bl	8000fa0 <__aeabi_fmul>
 800c6c0:	1c03      	adds	r3, r0, #0
 800c6c2:	1c18      	adds	r0, r3, #0
 800c6c4:	f015 fed2 	bl	802246c <roundf>
 800c6c8:	1c03      	adds	r3, r0, #0
 800c6ca:	1c18      	adds	r0, r3, #0
 800c6cc:	f7f3 ffa6 	bl	800061c <__aeabi_f2uiz>
 800c6d0:	0003      	movs	r3, r0
 800c6d2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2164      	movs	r1, #100	@ 0x64
 800c6d8:	0018      	movs	r0, r3
 800c6da:	f7f3 fd63 	bl	80001a4 <__udivsi3>
 800c6de:	0003      	movs	r3, r0
 800c6e0:	001a      	movs	r2, r3
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2164      	movs	r1, #100	@ 0x64
 800c6f2:	434b      	muls	r3, r1
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	b2da      	uxtb	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	701a      	strb	r2, [r3, #0]
}
 800c6fe:	46c0      	nop			@ (mov r8, r8)
 800c700:	46bd      	mov	sp, r7
 800c702:	b006      	add	sp, #24
 800c704:	bd80      	pop	{r7, pc}
 800c706:	46c0      	nop			@ (mov r8, r8)
 800c708:	42c80000 	.word	0x42c80000

0800c70c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c718:	4914      	ldr	r1, [pc, #80]	@ (800c76c <floatToIntAndFrac1dp+0x60>)
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f7f4 fc40 	bl	8000fa0 <__aeabi_fmul>
 800c720:	1c03      	adds	r3, r0, #0
 800c722:	1c18      	adds	r0, r3, #0
 800c724:	f015 fea2 	bl	802246c <roundf>
 800c728:	1c03      	adds	r3, r0, #0
 800c72a:	1c18      	adds	r0, r3, #0
 800c72c:	f7f3 ff76 	bl	800061c <__aeabi_f2uiz>
 800c730:	0003      	movs	r3, r0
 800c732:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	210a      	movs	r1, #10
 800c738:	0018      	movs	r0, r3
 800c73a:	f7f3 fd33 	bl	80001a4 <__udivsi3>
 800c73e:	0003      	movs	r3, r0
 800c740:	001a      	movs	r2, r3
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	1c19      	adds	r1, r3, #0
 800c752:	0089      	lsls	r1, r1, #2
 800c754:	18cb      	adds	r3, r1, r3
 800c756:	18db      	adds	r3, r3, r3
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	701a      	strb	r2, [r3, #0]
}
 800c762:	46c0      	nop			@ (mov r8, r8)
 800c764:	46bd      	mov	sp, r7
 800c766:	b006      	add	sp, #24
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	46c0      	nop			@ (mov r8, r8)
 800c76c:	41200000 	.word	0x41200000

0800c770 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c770:	b590      	push	{r4, r7, lr}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
 800c77c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7f4 ff26 	bl	80015d0 <__aeabi_i2f>
 800c784:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c786:	6838      	ldr	r0, [r7, #0]
 800c788:	f7f4 ff22 	bl	80015d0 <__aeabi_i2f>
 800c78c:	1c03      	adds	r3, r0, #0
 800c78e:	4918      	ldr	r1, [pc, #96]	@ (800c7f0 <sumToIntAverage+0x80>)
 800c790:	1c18      	adds	r0, r3, #0
 800c792:	f7f4 fa1f 	bl	8000bd4 <__aeabi_fdiv>
 800c796:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c798:	1c19      	adds	r1, r3, #0
 800c79a:	1c20      	adds	r0, r4, #0
 800c79c:	f7f4 f890 	bl	80008c0 <__aeabi_fadd>
 800c7a0:	1c03      	adds	r3, r0, #0
 800c7a2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c7a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7a6:	f7f4 ff5f 	bl	8001668 <__aeabi_ui2f>
 800c7aa:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c7ac:	1c19      	adds	r1, r3, #0
 800c7ae:	1c20      	adds	r0, r4, #0
 800c7b0:	f7f4 fa10 	bl	8000bd4 <__aeabi_fdiv>
 800c7b4:	1c03      	adds	r3, r0, #0
 800c7b6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	2310      	movs	r3, #16
 800c7c0:	18f9      	adds	r1, r7, r3
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	1c18      	adds	r0, r3, #0
 800c7c6:	f7ff ffa1 	bl	800c70c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	2bff      	cmp	r3, #255	@ 0xff
 800c7ce:	d906      	bls.n	800c7de <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	22ff      	movs	r2, #255	@ 0xff
 800c7d4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2209      	movs	r2, #9
 800c7da:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c7dc:	e003      	b.n	800c7e6 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	701a      	strb	r2, [r3, #0]
}
 800c7e6:	46c0      	nop			@ (mov r8, r8)
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	b007      	add	sp, #28
 800c7ec:	bd90      	pop	{r4, r7, pc}
 800c7ee:	46c0      	nop			@ (mov r8, r8)
 800c7f0:	41200000 	.word	0x41200000

0800c7f4 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
 800c800:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	2280      	movs	r2, #128	@ 0x80
 800c806:	0612      	lsls	r2, r2, #24
 800c808:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	4a18      	ldr	r2, [pc, #96]	@ (800c870 <findMinMax+0x7c>)
 800c80e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
 800c814:	e022      	b.n	800c85c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	18d3      	adds	r3, r2, r3
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	429a      	cmp	r2, r3
 800c826:	da06      	bge.n	800c836 <findMinMax+0x42>
        {
            min[0] = array[i];
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	18d3      	adds	r3, r2, r3
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	18d3      	adds	r3, r2, r3
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	dd06      	ble.n	800c856 <findMinMax+0x62>
        {
            max[0] = array[i];
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	18d3      	adds	r3, r2, r3
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	3301      	adds	r3, #1
 800c85a:	617b      	str	r3, [r7, #20]
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d3d8      	bcc.n	800c816 <findMinMax+0x22>
        }
    }
}
 800c864:	46c0      	nop			@ (mov r8, r8)
 800c866:	46c0      	nop			@ (mov r8, r8)
 800c868:	46bd      	mov	sp, r7
 800c86a:	b006      	add	sp, #24
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	46c0      	nop			@ (mov r8, r8)
 800c870:	7fffffff 	.word	0x7fffffff

0800c874 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	429a      	cmp	r2, r3
 800c888:	d302      	bcc.n	800c890 <getPo2factor+0x1c>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d107      	bne.n	800c8a0 <getPo2factor+0x2c>
    {
        return 0;
 800c890:	2300      	movs	r3, #0
 800c892:	e00d      	b.n	800c8b0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	085b      	lsrs	r3, r3, #1
 800c898:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3301      	adds	r3, #1
 800c89e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d2f5      	bcs.n	800c894 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
}
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	b004      	add	sp, #16
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f7f4 fece 	bl	8001668 <__aeabi_ui2f>
 800c8cc:	1c03      	adds	r3, r0, #0
 800c8ce:	1c19      	adds	r1, r3, #0
 800c8d0:	68b8      	ldr	r0, [r7, #8]
 800c8d2:	f7f4 fb65 	bl	8000fa0 <__aeabi_fmul>
 800c8d6:	1c03      	adds	r3, r0, #0
 800c8d8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	2310      	movs	r3, #16
 800c8e2:	18f9      	adds	r1, r7, r3
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	1c18      	adds	r0, r3, #0
 800c8e8:	f7ff fee0 	bl	800c6ac <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	801a      	strh	r2, [r3, #0]
}
 800c8f4:	46c0      	nop			@ (mov r8, r8)
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	b006      	add	sp, #24
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	60b8      	str	r0, [r7, #8]
 800c904:	60f9      	str	r1, [r7, #12]
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90c:	6a3a      	ldr	r2, [r7, #32]
 800c90e:	68b8      	ldr	r0, [r7, #8]
 800c910:	68f9      	ldr	r1, [r7, #12]
 800c912:	f7fa fbbb 	bl	800708c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	18d2      	adds	r2, r2, r3
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	18d2      	adds	r2, r2, r3
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	18d2      	adds	r2, r2, r3
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	18d2      	adds	r2, r2, r3
 800c932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c934:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	0011      	movs	r1, r2
 800c93c:	0018      	movs	r0, r3
 800c93e:	f7fa fc35 	bl	80071ac <correctIntFracNumber>
}
 800c942:	46c0      	nop			@ (mov r8, r8)
 800c944:	46bd      	mov	sp, r7
 800c946:	b004      	add	sp, #16
 800c948:	bd80      	pop	{r7, pc}

0800c94a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b086      	sub	sp, #24
 800c94e:	af00      	add	r7, sp, #0
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c95a:	2300      	movs	r3, #0
 800c95c:	613b      	str	r3, [r7, #16]
 800c95e:	e019      	b.n	800c994 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	18d3      	adds	r3, r2, r3
 800c968:	881b      	ldrh	r3, [r3, #0]
 800c96a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	3201      	adds	r2, #1
 800c970:	0052      	lsls	r2, r2, #1
 800c972:	68f9      	ldr	r1, [r7, #12]
 800c974:	188a      	adds	r2, r1, r2
 800c976:	8812      	ldrh	r2, [r2, #0]
 800c978:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c97a:	0019      	movs	r1, r3
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c984:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c986:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	3301      	adds	r3, #1
 800c98c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3304      	adds	r3, #4
 800c992:	613b      	str	r3, [r7, #16]
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d3e1      	bcc.n	800c960 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c99c:	46c0      	nop			@ (mov r8, r8)
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	b006      	add	sp, #24
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <InitDone>:
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	af00      	add	r7, sp, #0
  init = false;
 800c9ac:	4b02      	ldr	r3, [pc, #8]	@ (800c9b8 <InitDone+0x10>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
}
 800c9b2:	46c0      	nop			@ (mov r8, r8)
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	200000c4 	.word	0x200000c4

0800c9bc <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800c9c2:	f7f9 fb8f 	bl	80060e4 <ReadBatteryVoltage>
 800c9c6:	1c02      	adds	r2, r0, #0
 800c9c8:	4b25      	ldr	r3, [pc, #148]	@ (800ca60 <batteryChargeCheck+0xa4>)
 800c9ca:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800c9cc:	4b24      	ldr	r3, [pc, #144]	@ (800ca60 <batteryChargeCheck+0xa4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4924      	ldr	r1, [pc, #144]	@ (800ca64 <batteryChargeCheck+0xa8>)
 800c9d2:	1c18      	adds	r0, r3, #0
 800c9d4:	f7f3 fdac 	bl	8000530 <__aeabi_fcmplt>
 800c9d8:	1e03      	subs	r3, r0, #0
 800c9da:	d002      	beq.n	800c9e2 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800c9dc:	1dfb      	adds	r3, r7, #7
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800c9e2:	4b1f      	ldr	r3, [pc, #124]	@ (800ca60 <batteryChargeCheck+0xa4>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	1c18      	adds	r0, r3, #0
 800c9e8:	f7f6 fd3c 	bl	8003464 <__aeabi_f2d>
 800c9ec:	4a1e      	ldr	r2, [pc, #120]	@ (800ca68 <batteryChargeCheck+0xac>)
 800c9ee:	4b1f      	ldr	r3, [pc, #124]	@ (800ca6c <batteryChargeCheck+0xb0>)
 800c9f0:	f7f3 fd64 	bl	80004bc <__aeabi_dcmplt>
 800c9f4:	1e03      	subs	r3, r0, #0
 800c9f6:	d00a      	beq.n	800ca0e <batteryChargeCheck+0x52>
 800c9f8:	4b19      	ldr	r3, [pc, #100]	@ (800ca60 <batteryChargeCheck+0xa4>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4919      	ldr	r1, [pc, #100]	@ (800ca64 <batteryChargeCheck+0xa8>)
 800c9fe:	1c18      	adds	r0, r3, #0
 800ca00:	f7f3 fdb4 	bl	800056c <__aeabi_fcmpge>
 800ca04:	1e03      	subs	r3, r0, #0
 800ca06:	d002      	beq.n	800ca0e <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800ca08:	1dfb      	adds	r3, r7, #7
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800ca0e:	4b14      	ldr	r3, [pc, #80]	@ (800ca60 <batteryChargeCheck+0xa4>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2181      	movs	r1, #129	@ 0x81
 800ca14:	05c9      	lsls	r1, r1, #23
 800ca16:	1c18      	adds	r0, r3, #0
 800ca18:	f7f3 fd8a 	bl	8000530 <__aeabi_fcmplt>
 800ca1c:	1e03      	subs	r3, r0, #0
 800ca1e:	d00d      	beq.n	800ca3c <batteryChargeCheck+0x80>
 800ca20:	4b0f      	ldr	r3, [pc, #60]	@ (800ca60 <batteryChargeCheck+0xa4>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	1c18      	adds	r0, r3, #0
 800ca26:	f7f6 fd1d 	bl	8003464 <__aeabi_f2d>
 800ca2a:	4a0f      	ldr	r2, [pc, #60]	@ (800ca68 <batteryChargeCheck+0xac>)
 800ca2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ca6c <batteryChargeCheck+0xb0>)
 800ca2e:	f7f3 fd63 	bl	80004f8 <__aeabi_dcmpge>
 800ca32:	1e03      	subs	r3, r0, #0
 800ca34:	d002      	beq.n	800ca3c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800ca36:	1dfb      	adds	r3, r7, #7
 800ca38:	2203      	movs	r2, #3
 800ca3a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800ca3c:	4b08      	ldr	r3, [pc, #32]	@ (800ca60 <batteryChargeCheck+0xa4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2181      	movs	r1, #129	@ 0x81
 800ca42:	05c9      	lsls	r1, r1, #23
 800ca44:	1c18      	adds	r0, r3, #0
 800ca46:	f7f3 fd91 	bl	800056c <__aeabi_fcmpge>
 800ca4a:	1e03      	subs	r3, r0, #0
 800ca4c:	d002      	beq.n	800ca54 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800ca4e:	1dfb      	adds	r3, r7, #7
 800ca50:	2204      	movs	r2, #4
 800ca52:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800ca54:	1dfb      	adds	r3, r7, #7
 800ca56:	781b      	ldrb	r3, [r3, #0]
}
 800ca58:	0018      	movs	r0, r3
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	b002      	add	sp, #8
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20002154 	.word	0x20002154
 800ca64:	40600000 	.word	0x40600000
 800ca68:	9999999a 	.word	0x9999999a
 800ca6c:	400d9999 	.word	0x400d9999

0800ca70 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800ca70:	b590      	push	{r4, r7, lr}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	0004      	movs	r4, r0
 800ca78:	0008      	movs	r0, r1
 800ca7a:	0011      	movs	r1, r2
 800ca7c:	1dbb      	adds	r3, r7, #6
 800ca7e:	1c22      	adds	r2, r4, #0
 800ca80:	801a      	strh	r2, [r3, #0]
 800ca82:	1d3b      	adds	r3, r7, #4
 800ca84:	1c02      	adds	r2, r0, #0
 800ca86:	801a      	strh	r2, [r3, #0]
 800ca88:	1cbb      	adds	r3, r7, #2
 800ca8a:	1c0a      	adds	r2, r1, #0
 800ca8c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cacc <SetStatusLED+0x5c>)
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d107      	bne.n	800caa6 <SetStatusLED+0x36>
 800ca96:	4b0e      	ldr	r3, [pc, #56]	@ (800cad0 <SetStatusLED+0x60>)
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d103      	bne.n	800caa6 <SetStatusLED+0x36>
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	@ (800cad4 <SetStatusLED+0x64>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00e      	beq.n	800cac4 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800caa6:	2380      	movs	r3, #128	@ 0x80
 800caa8:	05db      	lsls	r3, r3, #23
 800caaa:	1dba      	adds	r2, r7, #6
 800caac:	8812      	ldrh	r2, [r2, #0]
 800caae:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800cab0:	2380      	movs	r3, #128	@ 0x80
 800cab2:	05db      	lsls	r3, r3, #23
 800cab4:	1d3a      	adds	r2, r7, #4
 800cab6:	8812      	ldrh	r2, [r2, #0]
 800cab8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800caba:	2380      	movs	r3, #128	@ 0x80
 800cabc:	05db      	lsls	r3, r3, #23
 800cabe:	1cba      	adds	r2, r7, #2
 800cac0:	8812      	ldrh	r2, [r2, #0]
 800cac2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cac4:	46c0      	nop			@ (mov r8, r8)
 800cac6:	46bd      	mov	sp, r7
 800cac8:	b003      	add	sp, #12
 800caca:	bd90      	pop	{r4, r7, pc}
 800cacc:	2000214d 	.word	0x2000214d
 800cad0:	200000c4 	.word	0x200000c4
 800cad4:	2000214e 	.word	0x2000214e

0800cad8 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800cad8:	b590      	push	{r4, r7, lr}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	0004      	movs	r4, r0
 800cae0:	0008      	movs	r0, r1
 800cae2:	0011      	movs	r1, r2
 800cae4:	1dfb      	adds	r3, r7, #7
 800cae6:	1c22      	adds	r2, r4, #0
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	1dbb      	adds	r3, r7, #6
 800caec:	1c02      	adds	r2, r0, #0
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	1d7b      	adds	r3, r7, #5
 800caf2:	1c0a      	adds	r2, r1, #0
 800caf4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800caf6:	4b19      	ldr	r3, [pc, #100]	@ (800cb5c <SetDBLED+0x84>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d107      	bne.n	800cb0e <SetDBLED+0x36>
 800cafe:	4b18      	ldr	r3, [pc, #96]	@ (800cb60 <SetDBLED+0x88>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d103      	bne.n	800cb0e <SetDBLED+0x36>
 800cb06:	4b17      	ldr	r3, [pc, #92]	@ (800cb64 <SetDBLED+0x8c>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d022      	beq.n	800cb54 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800cb0e:	1dfb      	adds	r3, r7, #7
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2201      	movs	r2, #1
 800cb14:	4053      	eors	r3, r2
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	001a      	movs	r2, r3
 800cb1a:	4b13      	ldr	r3, [pc, #76]	@ (800cb68 <SetDBLED+0x90>)
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	0018      	movs	r0, r3
 800cb20:	f002 fe75 	bl	800f80e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800cb24:	1dbb      	adds	r3, r7, #6
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	4053      	eors	r3, r2
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	001a      	movs	r2, r3
 800cb30:	2380      	movs	r3, #128	@ 0x80
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	480c      	ldr	r0, [pc, #48]	@ (800cb68 <SetDBLED+0x90>)
 800cb36:	0019      	movs	r1, r3
 800cb38:	f002 fe69 	bl	800f80e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800cb3c:	1d7b      	adds	r3, r7, #5
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2201      	movs	r2, #1
 800cb42:	4053      	eors	r3, r2
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	001a      	movs	r2, r3
 800cb48:	2380      	movs	r3, #128	@ 0x80
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4806      	ldr	r0, [pc, #24]	@ (800cb68 <SetDBLED+0x90>)
 800cb4e:	0019      	movs	r1, r3
 800cb50:	f002 fe5d 	bl	800f80e <HAL_GPIO_WritePin>
  }
}
 800cb54:	46c0      	nop			@ (mov r8, r8)
 800cb56:	46bd      	mov	sp, r7
 800cb58:	b003      	add	sp, #12
 800cb5a:	bd90      	pop	{r4, r7, pc}
 800cb5c:	2000214d 	.word	0x2000214d
 800cb60:	200000c4 	.word	0x200000c4
 800cb64:	2000214e 	.word	0x2000214e
 800cb68:	50000400 	.word	0x50000400

0800cb6c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800cb6c:	b590      	push	{r4, r7, lr}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	0004      	movs	r4, r0
 800cb74:	0008      	movs	r0, r1
 800cb76:	0011      	movs	r1, r2
 800cb78:	1dbb      	adds	r3, r7, #6
 800cb7a:	1c22      	adds	r2, r4, #0
 800cb7c:	801a      	strh	r2, [r3, #0]
 800cb7e:	1d3b      	adds	r3, r7, #4
 800cb80:	1c02      	adds	r2, r0, #0
 800cb82:	801a      	strh	r2, [r3, #0]
 800cb84:	1cbb      	adds	r3, r7, #2
 800cb86:	1c0a      	adds	r2, r1, #0
 800cb88:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800cb8a:	4b0e      	ldr	r3, [pc, #56]	@ (800cbc4 <SetVocLED+0x58>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d107      	bne.n	800cba2 <SetVocLED+0x36>
 800cb92:	4b0d      	ldr	r3, [pc, #52]	@ (800cbc8 <SetVocLED+0x5c>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d103      	bne.n	800cba2 <SetVocLED+0x36>
 800cb9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbcc <SetVocLED+0x60>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00b      	beq.n	800cbba <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800cba2:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd0 <SetVocLED+0x64>)
 800cba4:	1dba      	adds	r2, r7, #6
 800cba6:	8812      	ldrh	r2, [r2, #0]
 800cba8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800cbaa:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <SetVocLED+0x64>)
 800cbac:	1d3a      	adds	r2, r7, #4
 800cbae:	8812      	ldrh	r2, [r2, #0]
 800cbb0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800cbb2:	4b07      	ldr	r3, [pc, #28]	@ (800cbd0 <SetVocLED+0x64>)
 800cbb4:	1cba      	adds	r2, r7, #2
 800cbb6:	8812      	ldrh	r2, [r2, #0]
 800cbb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cbba:	46c0      	nop			@ (mov r8, r8)
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	b003      	add	sp, #12
 800cbc0:	bd90      	pop	{r4, r7, pc}
 800cbc2:	46c0      	nop			@ (mov r8, r8)
 800cbc4:	2000214d 	.word	0x2000214d
 800cbc8:	200000c4 	.word	0x200000c4
 800cbcc:	2000214e 	.word	0x2000214e
 800cbd0:	40000400 	.word	0x40000400

0800cbd4 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cbd8:	4b07      	ldr	r3, [pc, #28]	@ (800cbf8 <SetMeasurementIndicator+0x24>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d103      	bne.n	800cbe8 <SetMeasurementIndicator+0x14>
 800cbe0:	4b06      	ldr	r3, [pc, #24]	@ (800cbfc <SetMeasurementIndicator+0x28>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d003      	beq.n	800cbf0 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800cbe8:	2380      	movs	r3, #128	@ 0x80
 800cbea:	05db      	lsls	r3, r3, #23
 800cbec:	4a04      	ldr	r2, [pc, #16]	@ (800cc00 <SetMeasurementIndicator+0x2c>)
 800cbee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cbf0:	46c0      	nop			@ (mov r8, r8)
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	46c0      	nop			@ (mov r8, r8)
 800cbf8:	2000214d 	.word	0x2000214d
 800cbfc:	2000214e 	.word	0x2000214e
 800cc00:	00000bb8 	.word	0x00000bb8

0800cc04 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc08:	4b07      	ldr	r3, [pc, #28]	@ (800cc28 <ResetMeasurementIndicator+0x24>)
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d103      	bne.n	800cc18 <ResetMeasurementIndicator+0x14>
 800cc10:	4b06      	ldr	r3, [pc, #24]	@ (800cc2c <ResetMeasurementIndicator+0x28>)
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d004      	beq.n	800cc22 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800cc18:	2380      	movs	r3, #128	@ 0x80
 800cc1a:	05db      	lsls	r3, r3, #23
 800cc1c:	22fa      	movs	r2, #250	@ 0xfa
 800cc1e:	0112      	lsls	r2, r2, #4
 800cc20:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cc22:	46c0      	nop			@ (mov r8, r8)
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	2000214d 	.word	0x2000214d
 800cc2c:	2000214e 	.word	0x2000214e

0800cc30 <SetMICIndicator>:
void SetMICIndicator(){
 800cc30:	b580      	push	{r7, lr}
 800cc32:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc34:	4b11      	ldr	r3, [pc, #68]	@ (800cc7c <SetMICIndicator+0x4c>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d103      	bne.n	800cc44 <SetMICIndicator+0x14>
 800cc3c:	4b10      	ldr	r3, [pc, #64]	@ (800cc80 <SetMICIndicator+0x50>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d004      	beq.n	800cc4e <SetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_ON;
 800cc44:	2380      	movs	r3, #128	@ 0x80
 800cc46:	05db      	lsls	r3, r3, #23
 800cc48:	4a0e      	ldr	r2, [pc, #56]	@ (800cc84 <SetMICIndicator+0x54>)
 800cc4a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_ON;
    }
  }
}
 800cc4c:	e013      	b.n	800cc76 <SetMICIndicator+0x46>
    if (batteryCharge > 3.7) {
 800cc4e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc88 <SetMICIndicator+0x58>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	1c18      	adds	r0, r3, #0
 800cc54:	f7f6 fc06 	bl	8003464 <__aeabi_f2d>
 800cc58:	4a0c      	ldr	r2, [pc, #48]	@ (800cc8c <SetMICIndicator+0x5c>)
 800cc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cc90 <SetMICIndicator+0x60>)
 800cc5c:	f7f3 fc42 	bl	80004e4 <__aeabi_dcmpgt>
 800cc60:	1e03      	subs	r3, r0, #0
 800cc62:	d004      	beq.n	800cc6e <SetMICIndicator+0x3e>
      TIM2 -> CCR3 = LED_ON;
 800cc64:	2380      	movs	r3, #128	@ 0x80
 800cc66:	05db      	lsls	r3, r3, #23
 800cc68:	4a06      	ldr	r2, [pc, #24]	@ (800cc84 <SetMICIndicator+0x54>)
 800cc6a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800cc6c:	e003      	b.n	800cc76 <SetMICIndicator+0x46>
      TIM2 -> CCR1 = LED_ON;
 800cc6e:	2380      	movs	r3, #128	@ 0x80
 800cc70:	05db      	lsls	r3, r3, #23
 800cc72:	4a04      	ldr	r2, [pc, #16]	@ (800cc84 <SetMICIndicator+0x54>)
 800cc74:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800cc76:	46c0      	nop			@ (mov r8, r8)
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	2000214d 	.word	0x2000214d
 800cc80:	2000214e 	.word	0x2000214e
 800cc84:	00000bb8 	.word	0x00000bb8
 800cc88:	20002154 	.word	0x20002154
 800cc8c:	9999999a 	.word	0x9999999a
 800cc90:	400d9999 	.word	0x400d9999

0800cc94 <ResetMICIndicator>:
void ResetMICIndicator(){
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc98:	4b13      	ldr	r3, [pc, #76]	@ (800cce8 <ResetMICIndicator+0x54>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d103      	bne.n	800cca8 <ResetMICIndicator+0x14>
 800cca0:	4b12      	ldr	r3, [pc, #72]	@ (800ccec <ResetMICIndicator+0x58>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d005      	beq.n	800ccb4 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800cca8:	2380      	movs	r3, #128	@ 0x80
 800ccaa:	05db      	lsls	r3, r3, #23
 800ccac:	22fa      	movs	r2, #250	@ 0xfa
 800ccae:	0112      	lsls	r2, r2, #4
 800ccb0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800ccb2:	e015      	b.n	800cce0 <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800ccb4:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf0 <ResetMICIndicator+0x5c>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	1c18      	adds	r0, r3, #0
 800ccba:	f7f6 fbd3 	bl	8003464 <__aeabi_f2d>
 800ccbe:	4a0d      	ldr	r2, [pc, #52]	@ (800ccf4 <ResetMICIndicator+0x60>)
 800ccc0:	4b0d      	ldr	r3, [pc, #52]	@ (800ccf8 <ResetMICIndicator+0x64>)
 800ccc2:	f7f3 fc0f 	bl	80004e4 <__aeabi_dcmpgt>
 800ccc6:	1e03      	subs	r3, r0, #0
 800ccc8:	d005      	beq.n	800ccd6 <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800ccca:	2380      	movs	r3, #128	@ 0x80
 800cccc:	05db      	lsls	r3, r3, #23
 800ccce:	22fa      	movs	r2, #250	@ 0xfa
 800ccd0:	0112      	lsls	r2, r2, #4
 800ccd2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ccd4:	e004      	b.n	800cce0 <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800ccd6:	2380      	movs	r3, #128	@ 0x80
 800ccd8:	05db      	lsls	r3, r3, #23
 800ccda:	22fa      	movs	r2, #250	@ 0xfa
 800ccdc:	0112      	lsls	r2, r2, #4
 800ccde:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800cce0:	46c0      	nop			@ (mov r8, r8)
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	46c0      	nop			@ (mov r8, r8)
 800cce8:	2000214d 	.word	0x2000214d
 800ccec:	2000214e 	.word	0x2000214e
 800ccf0:	20002154 	.word	0x20002154
 800ccf4:	1eb851ec 	.word	0x1eb851ec
 800ccf8:	400deb85 	.word	0x400deb85

0800ccfc <SetESPIndicator>:
void SetESPIndicator(){
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd00:	4b07      	ldr	r3, [pc, #28]	@ (800cd20 <SetESPIndicator+0x24>)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d103      	bne.n	800cd10 <SetESPIndicator+0x14>
 800cd08:	4b06      	ldr	r3, [pc, #24]	@ (800cd24 <SetESPIndicator+0x28>)
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800cd10:	2380      	movs	r3, #128	@ 0x80
 800cd12:	05db      	lsls	r3, r3, #23
 800cd14:	4a04      	ldr	r2, [pc, #16]	@ (800cd28 <SetESPIndicator+0x2c>)
 800cd16:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cd18:	46c0      	nop			@ (mov r8, r8)
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	46c0      	nop			@ (mov r8, r8)
 800cd20:	2000214d 	.word	0x2000214d
 800cd24:	2000214e 	.word	0x2000214e
 800cd28:	00000bb8 	.word	0x00000bb8

0800cd2c <ResetESPIndicator>:
void ResetESPIndicator(){
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cd30:	4b07      	ldr	r3, [pc, #28]	@ (800cd50 <ResetESPIndicator+0x24>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d103      	bne.n	800cd40 <ResetESPIndicator+0x14>
 800cd38:	4b06      	ldr	r3, [pc, #24]	@ (800cd54 <ResetESPIndicator+0x28>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d004      	beq.n	800cd4a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800cd40:	2380      	movs	r3, #128	@ 0x80
 800cd42:	05db      	lsls	r3, r3, #23
 800cd44:	22fa      	movs	r2, #250	@ 0xfa
 800cd46:	0112      	lsls	r2, r2, #4
 800cd48:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cd4a:	46c0      	nop			@ (mov r8, r8)
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	2000214d 	.word	0x2000214d
 800cd54:	2000214e 	.word	0x2000214e

0800cd58 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800cd5c:	23fa      	movs	r3, #250	@ 0xfa
 800cd5e:	011a      	lsls	r2, r3, #4
 800cd60:	23fa      	movs	r3, #250	@ 0xfa
 800cd62:	0119      	lsls	r1, r3, #4
 800cd64:	23fa      	movs	r3, #250	@ 0xfa
 800cd66:	011b      	lsls	r3, r3, #4
 800cd68:	0018      	movs	r0, r3
 800cd6a:	f7ff fe81 	bl	800ca70 <SetStatusLED>
  SetDBLED(false,false,false);
 800cd6e:	2200      	movs	r2, #0
 800cd70:	2100      	movs	r1, #0
 800cd72:	2000      	movs	r0, #0
 800cd74:	f7ff feb0 	bl	800cad8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800cd78:	23fa      	movs	r3, #250	@ 0xfa
 800cd7a:	011a      	lsls	r2, r3, #4
 800cd7c:	23fa      	movs	r3, #250	@ 0xfa
 800cd7e:	0119      	lsls	r1, r3, #4
 800cd80:	23fa      	movs	r3, #250	@ 0xfa
 800cd82:	011b      	lsls	r3, r3, #4
 800cd84:	0018      	movs	r0, r3
 800cd86:	f7ff fef1 	bl	800cb6c <SetVocLED>
return;
 800cd8a:	46c0      	nop			@ (mov r8, r8)
}
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <powerCheck>:

Battery_Status powerCheck(){
 800cd90:	b590      	push	{r4, r7, lr}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800cd96:	f7f9 fa6b 	bl	8006270 <Check_USB_PowerOn>
 800cd9a:	0003      	movs	r3, r0
 800cd9c:	001a      	movs	r2, r3
 800cd9e:	2301      	movs	r3, #1
 800cda0:	4053      	eors	r3, r2
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d005      	beq.n	800cdb4 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cda8:	1dfc      	adds	r4, r7, #7
 800cdaa:	f7ff fe07 	bl	800c9bc <batteryChargeCheck>
 800cdae:	0003      	movs	r3, r0
 800cdb0:	7023      	strb	r3, [r4, #0]
 800cdb2:	e002      	b.n	800cdba <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800cdb4:	1dfb      	adds	r3, r7, #7
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cdba:	1dfb      	adds	r3, r7, #7
 800cdbc:	781b      	ldrb	r3, [r3, #0]
}
 800cdbe:	0018      	movs	r0, r3
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	b003      	add	sp, #12
 800cdc4:	bd90      	pop	{r4, r7, pc}
	...

0800cdc8 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	0002      	movs	r2, r0
 800cdd0:	1dfb      	adds	r3, r7, #7
 800cdd2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800cdd4:	1dfb      	adds	r3, r7, #7
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d105      	bne.n	800cde8 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800cddc:	4a18      	ldr	r2, [pc, #96]	@ (800ce40 <powerDisplay+0x78>)
 800cdde:	4b19      	ldr	r3, [pc, #100]	@ (800ce44 <powerDisplay+0x7c>)
 800cde0:	0019      	movs	r1, r3
 800cde2:	2003      	movs	r0, #3
 800cde4:	f000 fe4c 	bl	800da80 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800cde8:	1dfb      	adds	r3, r7, #7
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b04      	cmp	r3, #4
 800cdee:	d105      	bne.n	800cdfc <powerDisplay+0x34>
    Debug("Battery fully charged");
 800cdf0:	4a15      	ldr	r2, [pc, #84]	@ (800ce48 <powerDisplay+0x80>)
 800cdf2:	4b14      	ldr	r3, [pc, #80]	@ (800ce44 <powerDisplay+0x7c>)
 800cdf4:	0019      	movs	r1, r3
 800cdf6:	2003      	movs	r0, #3
 800cdf8:	f000 fe42 	bl	800da80 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800cdfc:	1dfb      	adds	r3, r7, #7
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	2b03      	cmp	r3, #3
 800ce02:	d105      	bne.n	800ce10 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800ce04:	4a11      	ldr	r2, [pc, #68]	@ (800ce4c <powerDisplay+0x84>)
 800ce06:	4b0f      	ldr	r3, [pc, #60]	@ (800ce44 <powerDisplay+0x7c>)
 800ce08:	0019      	movs	r1, r3
 800ce0a:	2003      	movs	r0, #3
 800ce0c:	f000 fe38 	bl	800da80 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800ce10:	1dfb      	adds	r3, r7, #7
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d105      	bne.n	800ce24 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800ce18:	4a0d      	ldr	r2, [pc, #52]	@ (800ce50 <powerDisplay+0x88>)
 800ce1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce44 <powerDisplay+0x7c>)
 800ce1c:	0019      	movs	r1, r3
 800ce1e:	2003      	movs	r0, #3
 800ce20:	f000 fe2e 	bl	800da80 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800ce24:	1dfb      	adds	r3, r7, #7
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d105      	bne.n	800ce38 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800ce2c:	4a09      	ldr	r2, [pc, #36]	@ (800ce54 <powerDisplay+0x8c>)
 800ce2e:	4b05      	ldr	r3, [pc, #20]	@ (800ce44 <powerDisplay+0x7c>)
 800ce30:	0019      	movs	r1, r3
 800ce32:	2003      	movs	r0, #3
 800ce34:	f000 fe24 	bl	800da80 <CreateLine>
  }
}
 800ce38:	46c0      	nop			@ (mov r8, r8)
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	b002      	add	sp, #8
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	0802415c 	.word	0x0802415c
 800ce44:	0802416c 	.word	0x0802416c
 800ce48:	08024170 	.word	0x08024170
 800ce4c:	08024188 	.word	0x08024188
 800ce50:	080241a8 	.word	0x080241a8
 800ce54:	080241c0 	.word	0x080241c0

0800ce58 <configCheck>:

void configCheck(){
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800ce5c:	f7f9 fa17 	bl	800628e <BootButton_Pressed>
 800ce60:	1e03      	subs	r3, r0, #0
 800ce62:	d007      	beq.n	800ce74 <configCheck+0x1c>
 800ce64:	f7f9 fa24 	bl	80062b0 <UserButton_Pressed>
 800ce68:	1e03      	subs	r3, r0, #0
 800ce6a:	d003      	beq.n	800ce74 <configCheck+0x1c>
    configSet = true;
 800ce6c:	4b44      	ldr	r3, [pc, #272]	@ (800cf80 <configCheck+0x128>)
 800ce6e:	2201      	movs	r2, #1
 800ce70:	701a      	strb	r2, [r3, #0]
 800ce72:	e00a      	b.n	800ce8a <configCheck+0x32>
  }
  else{
    configSet = false;
 800ce74:	4b42      	ldr	r3, [pc, #264]	@ (800cf80 <configCheck+0x128>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800ce7a:	f001 fa4d 	bl	800e318 <HAL_GetTick>
 800ce7e:	0003      	movs	r3, r0
 800ce80:	22fa      	movs	r2, #250	@ 0xfa
 800ce82:	00d2      	lsls	r2, r2, #3
 800ce84:	189a      	adds	r2, r3, r2
 800ce86:	4b3f      	ldr	r3, [pc, #252]	@ (800cf84 <configCheck+0x12c>)
 800ce88:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800ce8a:	4b3d      	ldr	r3, [pc, #244]	@ (800cf80 <configCheck+0x128>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00d      	beq.n	800ceae <configCheck+0x56>
 800ce92:	4b3c      	ldr	r3, [pc, #240]	@ (800cf84 <configCheck+0x12c>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	0018      	movs	r0, r3
 800ce98:	f000 fd9c 	bl	800d9d4 <TimestampIsReached>
 800ce9c:	1e03      	subs	r3, r0, #0
 800ce9e:	d006      	beq.n	800ceae <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800cea0:	f7f6 fd8e 	bl	80039c0 <SetConfigMode>
    SetDBLED(true, true, true);
 800cea4:	2201      	movs	r2, #1
 800cea6:	2101      	movs	r1, #1
 800cea8:	2001      	movs	r0, #1
 800ceaa:	f7ff fe15 	bl	800cad8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800ceae:	f7f9 f9ee 	bl	800628e <BootButton_Pressed>
 800ceb2:	0003      	movs	r3, r0
 800ceb4:	001a      	movs	r2, r3
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	4053      	eors	r3, r2
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d029      	beq.n	800cf14 <configCheck+0xbc>
 800cec0:	f7f9 f9f6 	bl	80062b0 <UserButton_Pressed>
 800cec4:	1e03      	subs	r3, r0, #0
 800cec6:	d025      	beq.n	800cf14 <configCheck+0xbc>
 800cec8:	4b2f      	ldr	r3, [pc, #188]	@ (800cf88 <configCheck+0x130>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2201      	movs	r2, #1
 800cece:	4053      	eors	r3, r2
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d01e      	beq.n	800cf14 <configCheck+0xbc>
    SetLEDsOff();
 800ced6:	f7ff ff3f 	bl	800cd58 <SetLEDsOff>
    Debug("userToggle flipped");
 800ceda:	4a2c      	ldr	r2, [pc, #176]	@ (800cf8c <configCheck+0x134>)
 800cedc:	4b2c      	ldr	r3, [pc, #176]	@ (800cf90 <configCheck+0x138>)
 800cede:	0019      	movs	r1, r3
 800cee0:	2003      	movs	r0, #3
 800cee2:	f000 fdcd 	bl	800da80 <CreateLine>
    userToggle = !userToggle;
 800cee6:	4b2b      	ldr	r3, [pc, #172]	@ (800cf94 <configCheck+0x13c>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	1e5a      	subs	r2, r3, #1
 800ceec:	4193      	sbcs	r3, r2
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2201      	movs	r2, #1
 800cef2:	4053      	eors	r3, r2
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	1c1a      	adds	r2, r3, #0
 800cef8:	2301      	movs	r3, #1
 800cefa:	4013      	ands	r3, r2
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	4b25      	ldr	r3, [pc, #148]	@ (800cf94 <configCheck+0x13c>)
 800cf00:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800cf02:	4b24      	ldr	r3, [pc, #144]	@ (800cf94 <configCheck+0x13c>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <configCheck+0xb6>
      EnabledConnectedDevices();
 800cf0a:	f7fa ffc1 	bl	8007e90 <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800cf0e:	4b1e      	ldr	r3, [pc, #120]	@ (800cf88 <configCheck+0x130>)
 800cf10:	2201      	movs	r2, #1
 800cf12:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800cf14:	f7f9 f9bb 	bl	800628e <BootButton_Pressed>
 800cf18:	0003      	movs	r3, r0
 800cf1a:	001a      	movs	r2, r3
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	4053      	eors	r3, r2
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00b      	beq.n	800cf3e <configCheck+0xe6>
 800cf26:	f7f9 f9c3 	bl	80062b0 <UserButton_Pressed>
 800cf2a:	0003      	movs	r3, r0
 800cf2c:	001a      	movs	r2, r3
 800cf2e:	2301      	movs	r3, #1
 800cf30:	4053      	eors	r3, r2
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <configCheck+0xe6>
    buttonHeld = false;
 800cf38:	4b13      	ldr	r3, [pc, #76]	@ (800cf88 <configCheck+0x130>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800cf3e:	f7f9 f997 	bl	8006270 <Check_USB_PowerOn>
 800cf42:	1e03      	subs	r3, r0, #0
 800cf44:	d005      	beq.n	800cf52 <configCheck+0xfa>
    usbPluggedIn = true;
 800cf46:	4b14      	ldr	r3, [pc, #80]	@ (800cf98 <configCheck+0x140>)
 800cf48:	2201      	movs	r2, #1
 800cf4a:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800cf4c:	f7fa ffa0 	bl	8007e90 <EnabledConnectedDevices>
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800cf50:	e012      	b.n	800cf78 <configCheck+0x120>
    if(!userToggle && !init){
 800cf52:	4b10      	ldr	r3, [pc, #64]	@ (800cf94 <configCheck+0x13c>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2201      	movs	r2, #1
 800cf58:	4053      	eors	r3, r2
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d008      	beq.n	800cf72 <configCheck+0x11a>
 800cf60:	4b0e      	ldr	r3, [pc, #56]	@ (800cf9c <configCheck+0x144>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2201      	movs	r2, #1
 800cf66:	4053      	eors	r3, r2
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <configCheck+0x11a>
      SetLEDsOff();
 800cf6e:	f7ff fef3 	bl	800cd58 <SetLEDsOff>
    usbPluggedIn = false;
 800cf72:	4b09      	ldr	r3, [pc, #36]	@ (800cf98 <configCheck+0x140>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	701a      	strb	r2, [r3, #0]
}
 800cf78:	46c0      	nop			@ (mov r8, r8)
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	46c0      	nop			@ (mov r8, r8)
 800cf80:	2000214c 	.word	0x2000214c
 800cf84:	20002150 	.word	0x20002150
 800cf88:	2000214f 	.word	0x2000214f
 800cf8c:	080241e4 	.word	0x080241e4
 800cf90:	0802416c 	.word	0x0802416c
 800cf94:	2000214e 	.word	0x2000214e
 800cf98:	2000214d 	.word	0x2000214d
 800cf9c:	200000c4 	.word	0x200000c4

0800cfa0 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800cfa0:	b590      	push	{r4, r7, lr}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800cfa6:	1dfc      	adds	r4, r7, #7
 800cfa8:	f7ff fef2 	bl	800cd90 <powerCheck>
 800cfac:	0003      	movs	r3, r0
 800cfae:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800cfb0:	1dfb      	adds	r3, r7, #7
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	0018      	movs	r0, r3
 800cfb6:	f7ff ff07 	bl	800cdc8 <powerDisplay>
  return status;
 800cfba:	1dfb      	adds	r3, r7, #7
 800cfbc:	781b      	ldrb	r3, [r3, #0]

}
 800cfbe:	0018      	movs	r0, r3
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	b003      	add	sp, #12
 800cfc4:	bd90      	pop	{r4, r7, pc}
	...

0800cfc8 <setuserToggle>:

void setuserToggle(void) {
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800cfcc:	f7ff fee0 	bl	800cd90 <powerCheck>
 800cfd0:	0003      	movs	r3, r0
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d002      	beq.n	800cfdc <setuserToggle+0x14>
    userToggle = true;
 800cfd6:	4b03      	ldr	r3, [pc, #12]	@ (800cfe4 <setuserToggle+0x1c>)
 800cfd8:	2201      	movs	r2, #1
 800cfda:	701a      	strb	r2, [r3, #0]
  }
}
 800cfdc:	46c0      	nop			@ (mov r8, r8)
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	46c0      	nop			@ (mov r8, r8)
 800cfe4:	2000214e 	.word	0x2000214e

0800cfe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cfec:	4b07      	ldr	r3, [pc, #28]	@ (800d00c <HAL_MspInit+0x24>)
 800cfee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cff0:	4b06      	ldr	r3, [pc, #24]	@ (800d00c <HAL_MspInit+0x24>)
 800cff2:	2101      	movs	r1, #1
 800cff4:	430a      	orrs	r2, r1
 800cff6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800cff8:	4b04      	ldr	r3, [pc, #16]	@ (800d00c <HAL_MspInit+0x24>)
 800cffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cffc:	4b03      	ldr	r3, [pc, #12]	@ (800d00c <HAL_MspInit+0x24>)
 800cffe:	2180      	movs	r1, #128	@ 0x80
 800d000:	0549      	lsls	r1, r1, #21
 800d002:	430a      	orrs	r2, r1
 800d004:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d006:	46c0      	nop			@ (mov r8, r8)
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	40021000 	.word	0x40021000

0800d010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d014:	46c0      	nop			@ (mov r8, r8)
 800d016:	e7fd      	b.n	800d014 <NMI_Handler+0x4>

0800d018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d01c:	46c0      	nop			@ (mov r8, r8)
 800d01e:	e7fd      	b.n	800d01c <HardFault_Handler+0x4>

0800d020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d024:	46c0      	nop			@ (mov r8, r8)
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d02e:	46c0      	nop			@ (mov r8, r8)
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d038:	f001 f95c 	bl	800e2f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d03c:	46c0      	nop			@ (mov r8, r8)
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d048:	4b03      	ldr	r3, [pc, #12]	@ (800d058 <RTC_IRQHandler+0x14>)
 800d04a:	0018      	movs	r0, r3
 800d04c:	f008 fe6c 	bl	8015d28 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d050:	46c0      	nop			@ (mov r8, r8)
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	46c0      	nop			@ (mov r8, r8)
 800d058:	200011a0 	.word	0x200011a0

0800d05c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d060:	2380      	movs	r3, #128	@ 0x80
 800d062:	021b      	lsls	r3, r3, #8
 800d064:	0018      	movs	r0, r3
 800d066:	f002 fbef 	bl	800f848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d06a:	46c0      	nop			@ (mov r8, r8)
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d074:	4b05      	ldr	r3, [pc, #20]	@ (800d08c <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d076:	0018      	movs	r0, r3
 800d078:	f001 ff77 	bl	800ef6a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d07c:	4b04      	ldr	r3, [pc, #16]	@ (800d090 <DMA1_Channel2_3_IRQHandler+0x20>)
 800d07e:	0018      	movs	r0, r3
 800d080:	f001 ff73 	bl	800ef6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d084:	46c0      	nop			@ (mov r8, r8)
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	46c0      	nop			@ (mov r8, r8)
 800d08c:	20000e48 	.word	0x20000e48
 800d090:	20000e00 	.word	0x20000e00

0800d094 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800d098:	4b07      	ldr	r3, [pc, #28]	@ (800d0b8 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800d09a:	0018      	movs	r0, r3
 800d09c:	f001 ff65 	bl	800ef6a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800d0a0:	4b06      	ldr	r3, [pc, #24]	@ (800d0bc <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	f001 ff61 	bl	800ef6a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800d0a8:	4b05      	ldr	r3, [pc, #20]	@ (800d0c0 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800d0aa:	0018      	movs	r0, r3
 800d0ac:	f001 ff5d 	bl	800ef6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800d0b0:	46c0      	nop			@ (mov r8, r8)
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	46c0      	nop			@ (mov r8, r8)
 800d0b8:	20000ecc 	.word	0x20000ecc
 800d0bc:	20002444 	.word	0x20002444
 800d0c0:	2000248c 	.word	0x2000248c

0800d0c4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800d0c8:	4b03      	ldr	r3, [pc, #12]	@ (800d0d8 <USART4_5_IRQHandler+0x14>)
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	f009 fd26 	bl	8016b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800d0d0:	46c0      	nop			@ (mov r8, r8)
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	46c0      	nop			@ (mov r8, r8)
 800d0d8:	2000238c 	.word	0x2000238c

0800d0dc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800d0e0:	4b09      	ldr	r3, [pc, #36]	@ (800d108 <I2C1_IRQHandler+0x2c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	699a      	ldr	r2, [r3, #24]
 800d0e6:	23e0      	movs	r3, #224	@ 0xe0
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	d004      	beq.n	800d0f8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800d0ee:	4b06      	ldr	r3, [pc, #24]	@ (800d108 <I2C1_IRQHandler+0x2c>)
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	f003 f891 	bl	8010218 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800d0f6:	e003      	b.n	800d100 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800d0f8:	4b03      	ldr	r3, [pc, #12]	@ (800d108 <I2C1_IRQHandler+0x2c>)
 800d0fa:	0018      	movs	r0, r3
 800d0fc:	f003 f872 	bl	80101e4 <HAL_I2C_EV_IRQHandler>
}
 800d100:	46c0      	nop			@ (mov r8, r8)
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	46c0      	nop			@ (mov r8, r8)
 800d108:	20000d58 	.word	0x20000d58

0800d10c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d110:	4b03      	ldr	r3, [pc, #12]	@ (800d120 <USART1_IRQHandler+0x14>)
 800d112:	0018      	movs	r0, r3
 800d114:	f009 fd02 	bl	8016b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d118:	46c0      	nop			@ (mov r8, r8)
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	46c0      	nop			@ (mov r8, r8)
 800d120:	200022d4 	.word	0x200022d4

0800d124 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d128:	4b03      	ldr	r3, [pc, #12]	@ (800d138 <USB_IRQHandler+0x14>)
 800d12a:	0018      	movs	r0, r3
 800d12c:	f005 fc52 	bl	80129d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d130:	46c0      	nop			@ (mov r8, r8)
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	46c0      	nop			@ (mov r8, r8)
 800d138:	200032a0 	.word	0x200032a0

0800d13c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	af00      	add	r7, sp, #0
  return 1;
 800d140:	2301      	movs	r3, #1
}
 800d142:	0018      	movs	r0, r3
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <_kill>:

int _kill(int pid, int sig)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d152:	f012 fbc7 	bl	801f8e4 <__errno>
 800d156:	0003      	movs	r3, r0
 800d158:	2216      	movs	r2, #22
 800d15a:	601a      	str	r2, [r3, #0]
  return -1;
 800d15c:	2301      	movs	r3, #1
 800d15e:	425b      	negs	r3, r3
}
 800d160:	0018      	movs	r0, r3
 800d162:	46bd      	mov	sp, r7
 800d164:	b002      	add	sp, #8
 800d166:	bd80      	pop	{r7, pc}

0800d168 <_exit>:

void _exit (int status)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d170:	2301      	movs	r3, #1
 800d172:	425a      	negs	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	0011      	movs	r1, r2
 800d178:	0018      	movs	r0, r3
 800d17a:	f7ff ffe5 	bl	800d148 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d17e:	46c0      	nop			@ (mov r8, r8)
 800d180:	e7fd      	b.n	800d17e <_exit+0x16>

0800d182 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b086      	sub	sp, #24
 800d186:	af00      	add	r7, sp, #0
 800d188:	60f8      	str	r0, [r7, #12]
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d18e:	2300      	movs	r3, #0
 800d190:	617b      	str	r3, [r7, #20]
 800d192:	e00a      	b.n	800d1aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d194:	e000      	b.n	800d198 <_read+0x16>
 800d196:	bf00      	nop
 800d198:	0001      	movs	r1, r0
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	1c5a      	adds	r2, r3, #1
 800d19e:	60ba      	str	r2, [r7, #8]
 800d1a0:	b2ca      	uxtb	r2, r1
 800d1a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	697a      	ldr	r2, [r7, #20]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	dbf0      	blt.n	800d194 <_read+0x12>
  }

  return len;
 800d1b2:	687b      	ldr	r3, [r7, #4]
}
 800d1b4:	0018      	movs	r0, r3
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	b006      	add	sp, #24
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <_close>:
  }
  return len;
}

int _close(int file)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	425b      	negs	r3, r3
}
 800d1c8:	0018      	movs	r0, r3
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	b002      	add	sp, #8
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2280      	movs	r2, #128	@ 0x80
 800d1de:	0192      	lsls	r2, r2, #6
 800d1e0:	605a      	str	r2, [r3, #4]
  return 0;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	0018      	movs	r0, r3
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	b002      	add	sp, #8
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <_isatty>:

int _isatty(int file)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d1f4:	2301      	movs	r3, #1
}
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	b002      	add	sp, #8
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	60f8      	str	r0, [r7, #12]
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	0018      	movs	r0, r3
 800d20e:	46bd      	mov	sp, r7
 800d210:	b004      	add	sp, #16
 800d212:	bd80      	pop	{r7, pc}

0800d214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d21c:	4a14      	ldr	r2, [pc, #80]	@ (800d270 <_sbrk+0x5c>)
 800d21e:	4b15      	ldr	r3, [pc, #84]	@ (800d274 <_sbrk+0x60>)
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d228:	4b13      	ldr	r3, [pc, #76]	@ (800d278 <_sbrk+0x64>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d230:	4b11      	ldr	r3, [pc, #68]	@ (800d278 <_sbrk+0x64>)
 800d232:	4a12      	ldr	r2, [pc, #72]	@ (800d27c <_sbrk+0x68>)
 800d234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d236:	4b10      	ldr	r3, [pc, #64]	@ (800d278 <_sbrk+0x64>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	18d3      	adds	r3, r2, r3
 800d23e:	693a      	ldr	r2, [r7, #16]
 800d240:	429a      	cmp	r2, r3
 800d242:	d207      	bcs.n	800d254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d244:	f012 fb4e 	bl	801f8e4 <__errno>
 800d248:	0003      	movs	r3, r0
 800d24a:	220c      	movs	r2, #12
 800d24c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d24e:	2301      	movs	r3, #1
 800d250:	425b      	negs	r3, r3
 800d252:	e009      	b.n	800d268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d254:	4b08      	ldr	r3, [pc, #32]	@ (800d278 <_sbrk+0x64>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d25a:	4b07      	ldr	r3, [pc, #28]	@ (800d278 <_sbrk+0x64>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	18d2      	adds	r2, r2, r3
 800d262:	4b05      	ldr	r3, [pc, #20]	@ (800d278 <_sbrk+0x64>)
 800d264:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d266:	68fb      	ldr	r3, [r7, #12]
}
 800d268:	0018      	movs	r0, r3
 800d26a:	46bd      	mov	sp, r7
 800d26c:	b006      	add	sp, #24
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	20005000 	.word	0x20005000
 800d274:	00000400 	.word	0x00000400
 800d278:	20002158 	.word	0x20002158
 800d27c:	20003900 	.word	0x20003900

0800d280 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d284:	46c0      	nop			@ (mov r8, r8)
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
	...

0800d28c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b086      	sub	sp, #24
 800d290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d292:	2310      	movs	r3, #16
 800d294:	18fb      	adds	r3, r7, r3
 800d296:	0018      	movs	r0, r3
 800d298:	2308      	movs	r3, #8
 800d29a:	001a      	movs	r2, r3
 800d29c:	2100      	movs	r1, #0
 800d29e:	f012 fa7d 	bl	801f79c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d2a2:	003b      	movs	r3, r7
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	2310      	movs	r3, #16
 800d2a8:	001a      	movs	r2, r3
 800d2aa:	2100      	movs	r1, #0
 800d2ac:	f012 fa76 	bl	801f79c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d2b0:	4b2e      	ldr	r3, [pc, #184]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2b2:	2280      	movs	r2, #128	@ 0x80
 800d2b4:	05d2      	lsls	r2, r2, #23
 800d2b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d2b8:	4b2c      	ldr	r3, [pc, #176]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2be:	4b2b      	ldr	r3, [pc, #172]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d2c4:	4b29      	ldr	r3, [pc, #164]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2c6:	4a2a      	ldr	r2, [pc, #168]	@ (800d370 <MX_TIM2_Init+0xe4>)
 800d2c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d2ca:	4b28      	ldr	r3, [pc, #160]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d2d0:	4b26      	ldr	r3, [pc, #152]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d2d6:	4b25      	ldr	r3, [pc, #148]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2d8:	0018      	movs	r0, r3
 800d2da:	f008 fe33 	bl	8015f44 <HAL_TIM_PWM_Init>
 800d2de:	1e03      	subs	r3, r0, #0
 800d2e0:	d001      	beq.n	800d2e6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d2e2:	f7fb f8db 	bl	800849c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2e6:	2110      	movs	r1, #16
 800d2e8:	187b      	adds	r3, r7, r1
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2ee:	187b      	adds	r3, r7, r1
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d2f4:	187a      	adds	r2, r7, r1
 800d2f6:	4b1d      	ldr	r3, [pc, #116]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d2f8:	0011      	movs	r1, r2
 800d2fa:	0018      	movs	r0, r3
 800d2fc:	f009 f940 	bl	8016580 <HAL_TIMEx_MasterConfigSynchronization>
 800d300:	1e03      	subs	r3, r0, #0
 800d302:	d001      	beq.n	800d308 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d304:	f7fb f8ca 	bl	800849c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d308:	003b      	movs	r3, r7
 800d30a:	2260      	movs	r2, #96	@ 0x60
 800d30c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d30e:	003b      	movs	r3, r7
 800d310:	2200      	movs	r2, #0
 800d312:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d314:	003b      	movs	r3, r7
 800d316:	2200      	movs	r2, #0
 800d318:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d31a:	003b      	movs	r3, r7
 800d31c:	2200      	movs	r2, #0
 800d31e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d320:	0039      	movs	r1, r7
 800d322:	4b12      	ldr	r3, [pc, #72]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d324:	2200      	movs	r2, #0
 800d326:	0018      	movs	r0, r3
 800d328:	f008 fede 	bl	80160e8 <HAL_TIM_PWM_ConfigChannel>
 800d32c:	1e03      	subs	r3, r0, #0
 800d32e:	d001      	beq.n	800d334 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d330:	f7fb f8b4 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d334:	0039      	movs	r1, r7
 800d336:	4b0d      	ldr	r3, [pc, #52]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d338:	2208      	movs	r2, #8
 800d33a:	0018      	movs	r0, r3
 800d33c:	f008 fed4 	bl	80160e8 <HAL_TIM_PWM_ConfigChannel>
 800d340:	1e03      	subs	r3, r0, #0
 800d342:	d001      	beq.n	800d348 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d344:	f7fb f8aa 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d348:	0039      	movs	r1, r7
 800d34a:	4b08      	ldr	r3, [pc, #32]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d34c:	220c      	movs	r2, #12
 800d34e:	0018      	movs	r0, r3
 800d350:	f008 feca 	bl	80160e8 <HAL_TIM_PWM_ConfigChannel>
 800d354:	1e03      	subs	r3, r0, #0
 800d356:	d001      	beq.n	800d35c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d358:	f7fb f8a0 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d35c:	4b03      	ldr	r3, [pc, #12]	@ (800d36c <MX_TIM2_Init+0xe0>)
 800d35e:	0018      	movs	r0, r3
 800d360:	f000 f8fe 	bl	800d560 <HAL_TIM_MspPostInit>

}
 800d364:	46c0      	nop			@ (mov r8, r8)
 800d366:	46bd      	mov	sp, r7
 800d368:	b006      	add	sp, #24
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	2000215c 	.word	0x2000215c
 800d370:	0000ffff 	.word	0x0000ffff

0800d374 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d37a:	2310      	movs	r3, #16
 800d37c:	18fb      	adds	r3, r7, r3
 800d37e:	0018      	movs	r0, r3
 800d380:	2308      	movs	r3, #8
 800d382:	001a      	movs	r2, r3
 800d384:	2100      	movs	r1, #0
 800d386:	f012 fa09 	bl	801f79c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d38a:	003b      	movs	r3, r7
 800d38c:	0018      	movs	r0, r3
 800d38e:	2310      	movs	r3, #16
 800d390:	001a      	movs	r2, r3
 800d392:	2100      	movs	r1, #0
 800d394:	f012 fa02 	bl	801f79c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d398:	4b32      	ldr	r3, [pc, #200]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d39a:	4a33      	ldr	r2, [pc, #204]	@ (800d468 <MX_TIM3_Init+0xf4>)
 800d39c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d39e:	4b31      	ldr	r3, [pc, #196]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d3a4:	4b2f      	ldr	r3, [pc, #188]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d3aa:	4b2e      	ldr	r3, [pc, #184]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d3ac:	4a2f      	ldr	r2, [pc, #188]	@ (800d46c <MX_TIM3_Init+0xf8>)
 800d3ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d3b0:	4b2c      	ldr	r3, [pc, #176]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d3b6:	4b2b      	ldr	r3, [pc, #172]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d3bc:	4b29      	ldr	r3, [pc, #164]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d3be:	0018      	movs	r0, r3
 800d3c0:	f008 fdc0 	bl	8015f44 <HAL_TIM_PWM_Init>
 800d3c4:	1e03      	subs	r3, r0, #0
 800d3c6:	d001      	beq.n	800d3cc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d3c8:	f7fb f868 	bl	800849c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3cc:	2110      	movs	r1, #16
 800d3ce:	187b      	adds	r3, r7, r1
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3d4:	187b      	adds	r3, r7, r1
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d3da:	187a      	adds	r2, r7, r1
 800d3dc:	4b21      	ldr	r3, [pc, #132]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d3de:	0011      	movs	r1, r2
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	f009 f8cd 	bl	8016580 <HAL_TIMEx_MasterConfigSynchronization>
 800d3e6:	1e03      	subs	r3, r0, #0
 800d3e8:	d001      	beq.n	800d3ee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d3ea:	f7fb f857 	bl	800849c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d3ee:	003b      	movs	r3, r7
 800d3f0:	2260      	movs	r2, #96	@ 0x60
 800d3f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d3f4:	003b      	movs	r3, r7
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d3fa:	003b      	movs	r3, r7
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d400:	003b      	movs	r3, r7
 800d402:	2200      	movs	r2, #0
 800d404:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d406:	0039      	movs	r1, r7
 800d408:	4b16      	ldr	r3, [pc, #88]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	0018      	movs	r0, r3
 800d40e:	f008 fe6b 	bl	80160e8 <HAL_TIM_PWM_ConfigChannel>
 800d412:	1e03      	subs	r3, r0, #0
 800d414:	d001      	beq.n	800d41a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d416:	f7fb f841 	bl	800849c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d41a:	4b12      	ldr	r3, [pc, #72]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d41c:	2104      	movs	r1, #4
 800d41e:	0018      	movs	r0, r3
 800d420:	f009 f90c 	bl	801663c <HAL_TIMEx_RemapConfig>
 800d424:	1e03      	subs	r3, r0, #0
 800d426:	d001      	beq.n	800d42c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d428:	f7fb f838 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d42c:	0039      	movs	r1, r7
 800d42e:	4b0d      	ldr	r3, [pc, #52]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d430:	2204      	movs	r2, #4
 800d432:	0018      	movs	r0, r3
 800d434:	f008 fe58 	bl	80160e8 <HAL_TIM_PWM_ConfigChannel>
 800d438:	1e03      	subs	r3, r0, #0
 800d43a:	d001      	beq.n	800d440 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d43c:	f7fb f82e 	bl	800849c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d440:	0039      	movs	r1, r7
 800d442:	4b08      	ldr	r3, [pc, #32]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d444:	2208      	movs	r2, #8
 800d446:	0018      	movs	r0, r3
 800d448:	f008 fe4e 	bl	80160e8 <HAL_TIM_PWM_ConfigChannel>
 800d44c:	1e03      	subs	r3, r0, #0
 800d44e:	d001      	beq.n	800d454 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d450:	f7fb f824 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d454:	4b03      	ldr	r3, [pc, #12]	@ (800d464 <MX_TIM3_Init+0xf0>)
 800d456:	0018      	movs	r0, r3
 800d458:	f000 f882 	bl	800d560 <HAL_TIM_MspPostInit>

}
 800d45c:	46c0      	nop			@ (mov r8, r8)
 800d45e:	46bd      	mov	sp, r7
 800d460:	b006      	add	sp, #24
 800d462:	bd80      	pop	{r7, pc}
 800d464:	2000219c 	.word	0x2000219c
 800d468:	40000400 	.word	0x40000400
 800d46c:	0000ffff 	.word	0x0000ffff

0800d470 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d476:	003b      	movs	r3, r7
 800d478:	0018      	movs	r0, r3
 800d47a:	2308      	movs	r3, #8
 800d47c:	001a      	movs	r2, r3
 800d47e:	2100      	movs	r1, #0
 800d480:	f012 f98c 	bl	801f79c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d484:	4b15      	ldr	r3, [pc, #84]	@ (800d4dc <MX_TIM6_Init+0x6c>)
 800d486:	4a16      	ldr	r2, [pc, #88]	@ (800d4e0 <MX_TIM6_Init+0x70>)
 800d488:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d48a:	4b14      	ldr	r3, [pc, #80]	@ (800d4dc <MX_TIM6_Init+0x6c>)
 800d48c:	220a      	movs	r2, #10
 800d48e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d490:	4b12      	ldr	r3, [pc, #72]	@ (800d4dc <MX_TIM6_Init+0x6c>)
 800d492:	2200      	movs	r2, #0
 800d494:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d496:	4b11      	ldr	r3, [pc, #68]	@ (800d4dc <MX_TIM6_Init+0x6c>)
 800d498:	4a12      	ldr	r2, [pc, #72]	@ (800d4e4 <MX_TIM6_Init+0x74>)
 800d49a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d49c:	4b0f      	ldr	r3, [pc, #60]	@ (800d4dc <MX_TIM6_Init+0x6c>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d4dc <MX_TIM6_Init+0x6c>)
 800d4a4:	0018      	movs	r0, r3
 800d4a6:	f008 fca5 	bl	8015df4 <HAL_TIM_Base_Init>
 800d4aa:	1e03      	subs	r3, r0, #0
 800d4ac:	d001      	beq.n	800d4b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d4ae:	f7fa fff5 	bl	800849c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4b2:	003b      	movs	r3, r7
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4b8:	003b      	movs	r3, r7
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d4be:	003a      	movs	r2, r7
 800d4c0:	4b06      	ldr	r3, [pc, #24]	@ (800d4dc <MX_TIM6_Init+0x6c>)
 800d4c2:	0011      	movs	r1, r2
 800d4c4:	0018      	movs	r0, r3
 800d4c6:	f009 f85b 	bl	8016580 <HAL_TIMEx_MasterConfigSynchronization>
 800d4ca:	1e03      	subs	r3, r0, #0
 800d4cc:	d001      	beq.n	800d4d2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d4ce:	f7fa ffe5 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d4d2:	46c0      	nop			@ (mov r8, r8)
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	b002      	add	sp, #8
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	46c0      	nop			@ (mov r8, r8)
 800d4dc:	200021dc 	.word	0x200021dc
 800d4e0:	40001000 	.word	0x40001000
 800d4e4:	0000ffff 	.word	0x0000ffff

0800d4e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	2380      	movs	r3, #128	@ 0x80
 800d4f6:	05db      	lsls	r3, r3, #23
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d106      	bne.n	800d50a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d528 <HAL_TIM_PWM_MspInit+0x40>)
 800d4fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d500:	4b09      	ldr	r3, [pc, #36]	@ (800d528 <HAL_TIM_PWM_MspInit+0x40>)
 800d502:	2101      	movs	r1, #1
 800d504:	430a      	orrs	r2, r1
 800d506:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d508:	e00a      	b.n	800d520 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a07      	ldr	r2, [pc, #28]	@ (800d52c <HAL_TIM_PWM_MspInit+0x44>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d105      	bne.n	800d520 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d514:	4b04      	ldr	r3, [pc, #16]	@ (800d528 <HAL_TIM_PWM_MspInit+0x40>)
 800d516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d518:	4b03      	ldr	r3, [pc, #12]	@ (800d528 <HAL_TIM_PWM_MspInit+0x40>)
 800d51a:	2102      	movs	r1, #2
 800d51c:	430a      	orrs	r2, r1
 800d51e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d520:	46c0      	nop			@ (mov r8, r8)
 800d522:	46bd      	mov	sp, r7
 800d524:	b002      	add	sp, #8
 800d526:	bd80      	pop	{r7, pc}
 800d528:	40021000 	.word	0x40021000
 800d52c:	40000400 	.word	0x40000400

0800d530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a06      	ldr	r2, [pc, #24]	@ (800d558 <HAL_TIM_Base_MspInit+0x28>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d105      	bne.n	800d54e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d542:	4b06      	ldr	r3, [pc, #24]	@ (800d55c <HAL_TIM_Base_MspInit+0x2c>)
 800d544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d546:	4b05      	ldr	r3, [pc, #20]	@ (800d55c <HAL_TIM_Base_MspInit+0x2c>)
 800d548:	2110      	movs	r1, #16
 800d54a:	430a      	orrs	r2, r1
 800d54c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d54e:	46c0      	nop			@ (mov r8, r8)
 800d550:	46bd      	mov	sp, r7
 800d552:	b002      	add	sp, #8
 800d554:	bd80      	pop	{r7, pc}
 800d556:	46c0      	nop			@ (mov r8, r8)
 800d558:	40001000 	.word	0x40001000
 800d55c:	40021000 	.word	0x40021000

0800d560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b08b      	sub	sp, #44	@ 0x2c
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d568:	2414      	movs	r4, #20
 800d56a:	193b      	adds	r3, r7, r4
 800d56c:	0018      	movs	r0, r3
 800d56e:	2314      	movs	r3, #20
 800d570:	001a      	movs	r2, r3
 800d572:	2100      	movs	r1, #0
 800d574:	f012 f912 	bl	801f79c <memset>
  if(timHandle->Instance==TIM2)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	2380      	movs	r3, #128	@ 0x80
 800d57e:	05db      	lsls	r3, r3, #23
 800d580:	429a      	cmp	r2, r3
 800d582:	d123      	bne.n	800d5cc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d584:	4b27      	ldr	r3, [pc, #156]	@ (800d624 <HAL_TIM_MspPostInit+0xc4>)
 800d586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d588:	4b26      	ldr	r3, [pc, #152]	@ (800d624 <HAL_TIM_MspPostInit+0xc4>)
 800d58a:	2101      	movs	r1, #1
 800d58c:	430a      	orrs	r2, r1
 800d58e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d590:	4b24      	ldr	r3, [pc, #144]	@ (800d624 <HAL_TIM_MspPostInit+0xc4>)
 800d592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d594:	2201      	movs	r2, #1
 800d596:	4013      	ands	r3, r2
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d59c:	0021      	movs	r1, r4
 800d59e:	187b      	adds	r3, r7, r1
 800d5a0:	220d      	movs	r2, #13
 800d5a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5a4:	187b      	adds	r3, r7, r1
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5aa:	187b      	adds	r3, r7, r1
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5b0:	187b      	adds	r3, r7, r1
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d5b6:	187b      	adds	r3, r7, r1
 800d5b8:	2202      	movs	r2, #2
 800d5ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5bc:	187a      	adds	r2, r7, r1
 800d5be:	23a0      	movs	r3, #160	@ 0xa0
 800d5c0:	05db      	lsls	r3, r3, #23
 800d5c2:	0011      	movs	r1, r2
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	f001 ff87 	bl	800f4d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d5ca:	e027      	b.n	800d61c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a15      	ldr	r2, [pc, #84]	@ (800d628 <HAL_TIM_MspPostInit+0xc8>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d122      	bne.n	800d61c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d5d6:	4b13      	ldr	r3, [pc, #76]	@ (800d624 <HAL_TIM_MspPostInit+0xc4>)
 800d5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5da:	4b12      	ldr	r3, [pc, #72]	@ (800d624 <HAL_TIM_MspPostInit+0xc4>)
 800d5dc:	2104      	movs	r1, #4
 800d5de:	430a      	orrs	r2, r1
 800d5e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d5e2:	4b10      	ldr	r3, [pc, #64]	@ (800d624 <HAL_TIM_MspPostInit+0xc4>)
 800d5e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5e6:	2204      	movs	r2, #4
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d5ee:	2114      	movs	r1, #20
 800d5f0:	187b      	adds	r3, r7, r1
 800d5f2:	22e0      	movs	r2, #224	@ 0xe0
 800d5f4:	0052      	lsls	r2, r2, #1
 800d5f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5f8:	187b      	adds	r3, r7, r1
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5fe:	187b      	adds	r3, r7, r1
 800d600:	2200      	movs	r2, #0
 800d602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d604:	187b      	adds	r3, r7, r1
 800d606:	2200      	movs	r2, #0
 800d608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d60a:	187b      	adds	r3, r7, r1
 800d60c:	2202      	movs	r2, #2
 800d60e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d610:	187b      	adds	r3, r7, r1
 800d612:	4a06      	ldr	r2, [pc, #24]	@ (800d62c <HAL_TIM_MspPostInit+0xcc>)
 800d614:	0019      	movs	r1, r3
 800d616:	0010      	movs	r0, r2
 800d618:	f001 ff5e 	bl	800f4d8 <HAL_GPIO_Init>
}
 800d61c:	46c0      	nop			@ (mov r8, r8)
 800d61e:	46bd      	mov	sp, r7
 800d620:	b00b      	add	sp, #44	@ 0x2c
 800d622:	bd90      	pop	{r4, r7, pc}
 800d624:	40021000 	.word	0x40021000
 800d628:	40000400 	.word	0x40000400
 800d62c:	50000800 	.word	0x50000800

0800d630 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d634:	4b17      	ldr	r3, [pc, #92]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d636:	4a18      	ldr	r2, [pc, #96]	@ (800d698 <MX_LPUART1_UART_Init+0x68>)
 800d638:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d63a:	4b16      	ldr	r3, [pc, #88]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d63c:	22e1      	movs	r2, #225	@ 0xe1
 800d63e:	0252      	lsls	r2, r2, #9
 800d640:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d642:	4b14      	ldr	r3, [pc, #80]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d644:	2200      	movs	r2, #0
 800d646:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d648:	4b12      	ldr	r3, [pc, #72]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d64a:	2200      	movs	r2, #0
 800d64c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d64e:	4b11      	ldr	r3, [pc, #68]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d650:	2200      	movs	r2, #0
 800d652:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d654:	4b0f      	ldr	r3, [pc, #60]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d656:	220c      	movs	r2, #12
 800d658:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d65a:	4b0e      	ldr	r3, [pc, #56]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d660:	4b0c      	ldr	r3, [pc, #48]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d662:	2200      	movs	r2, #0
 800d664:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d666:	4b0b      	ldr	r3, [pc, #44]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d668:	2218      	movs	r2, #24
 800d66a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d66c:	4b09      	ldr	r3, [pc, #36]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d66e:	2280      	movs	r2, #128	@ 0x80
 800d670:	0212      	lsls	r2, r2, #8
 800d672:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d674:	4b07      	ldr	r3, [pc, #28]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d676:	2280      	movs	r2, #128	@ 0x80
 800d678:	0152      	lsls	r2, r2, #5
 800d67a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d67c:	4b05      	ldr	r3, [pc, #20]	@ (800d694 <MX_LPUART1_UART_Init+0x64>)
 800d67e:	0018      	movs	r0, r3
 800d680:	f008 fffa 	bl	8016678 <HAL_UART_Init>
 800d684:	1e03      	subs	r3, r0, #0
 800d686:	d001      	beq.n	800d68c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d688:	f7fa ff08 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d68c:	46c0      	nop			@ (mov r8, r8)
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	46c0      	nop			@ (mov r8, r8)
 800d694:	2000221c 	.word	0x2000221c
 800d698:	40004800 	.word	0x40004800

0800d69c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d6a0:	4b16      	ldr	r3, [pc, #88]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6a2:	4a17      	ldr	r2, [pc, #92]	@ (800d700 <MX_USART1_UART_Init+0x64>)
 800d6a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d6a6:	4b15      	ldr	r3, [pc, #84]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6a8:	22e1      	movs	r2, #225	@ 0xe1
 800d6aa:	0252      	lsls	r2, r2, #9
 800d6ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d6ae:	4b13      	ldr	r3, [pc, #76]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d6b4:	4b11      	ldr	r3, [pc, #68]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d6ba:	4b10      	ldr	r3, [pc, #64]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d6c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6c2:	220c      	movs	r2, #12
 800d6c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d6d8:	4b08      	ldr	r3, [pc, #32]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6da:	2208      	movs	r2, #8
 800d6dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d6de:	4b07      	ldr	r3, [pc, #28]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6e0:	2280      	movs	r2, #128	@ 0x80
 800d6e2:	0212      	lsls	r2, r2, #8
 800d6e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d6e6:	4b05      	ldr	r3, [pc, #20]	@ (800d6fc <MX_USART1_UART_Init+0x60>)
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	f008 ffc5 	bl	8016678 <HAL_UART_Init>
 800d6ee:	1e03      	subs	r3, r0, #0
 800d6f0:	d001      	beq.n	800d6f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d6f2:	f7fa fed3 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d6f6:	46c0      	nop			@ (mov r8, r8)
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	200022d4 	.word	0x200022d4
 800d700:	40013800 	.word	0x40013800

0800d704 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d708:	4b14      	ldr	r3, [pc, #80]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d70a:	4a15      	ldr	r2, [pc, #84]	@ (800d760 <MX_USART4_UART_Init+0x5c>)
 800d70c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d70e:	4b13      	ldr	r3, [pc, #76]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d710:	22e1      	movs	r2, #225	@ 0xe1
 800d712:	0252      	lsls	r2, r2, #9
 800d714:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d716:	4b11      	ldr	r3, [pc, #68]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d718:	2200      	movs	r2, #0
 800d71a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d71c:	4b0f      	ldr	r3, [pc, #60]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d71e:	2200      	movs	r2, #0
 800d720:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d722:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d724:	2200      	movs	r2, #0
 800d726:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d728:	4b0c      	ldr	r3, [pc, #48]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d72a:	220c      	movs	r2, #12
 800d72c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d72e:	4b0b      	ldr	r3, [pc, #44]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d730:	2200      	movs	r2, #0
 800d732:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d734:	4b09      	ldr	r3, [pc, #36]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d736:	2200      	movs	r2, #0
 800d738:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d73a:	4b08      	ldr	r3, [pc, #32]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d740:	4b06      	ldr	r3, [pc, #24]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d742:	2200      	movs	r2, #0
 800d744:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d746:	4b05      	ldr	r3, [pc, #20]	@ (800d75c <MX_USART4_UART_Init+0x58>)
 800d748:	0018      	movs	r0, r3
 800d74a:	f008 ff95 	bl	8016678 <HAL_UART_Init>
 800d74e:	1e03      	subs	r3, r0, #0
 800d750:	d001      	beq.n	800d756 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d752:	f7fa fea3 	bl	800849c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d756:	46c0      	nop			@ (mov r8, r8)
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	2000238c 	.word	0x2000238c
 800d760:	40004c00 	.word	0x40004c00

0800d764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d764:	b590      	push	{r4, r7, lr}
 800d766:	b08d      	sub	sp, #52	@ 0x34
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d76c:	241c      	movs	r4, #28
 800d76e:	193b      	adds	r3, r7, r4
 800d770:	0018      	movs	r0, r3
 800d772:	2314      	movs	r3, #20
 800d774:	001a      	movs	r2, r3
 800d776:	2100      	movs	r1, #0
 800d778:	f012 f810 	bl	801f79c <memset>
  if(uartHandle->Instance==LPUART1)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a8b      	ldr	r2, [pc, #556]	@ (800d9b0 <HAL_UART_MspInit+0x24c>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d129      	bne.n	800d7da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d786:	4b8b      	ldr	r3, [pc, #556]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d78a:	4b8a      	ldr	r3, [pc, #552]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d78c:	2180      	movs	r1, #128	@ 0x80
 800d78e:	02c9      	lsls	r1, r1, #11
 800d790:	430a      	orrs	r2, r1
 800d792:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d794:	4b87      	ldr	r3, [pc, #540]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d798:	4b86      	ldr	r3, [pc, #536]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d79a:	2104      	movs	r1, #4
 800d79c:	430a      	orrs	r2, r1
 800d79e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d7a0:	4b84      	ldr	r3, [pc, #528]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7a4:	2204      	movs	r2, #4
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	61bb      	str	r3, [r7, #24]
 800d7aa:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d7ac:	0021      	movs	r1, r4
 800d7ae:	187b      	adds	r3, r7, r1
 800d7b0:	2203      	movs	r2, #3
 800d7b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7b4:	187b      	adds	r3, r7, r1
 800d7b6:	2202      	movs	r2, #2
 800d7b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7ba:	187b      	adds	r3, r7, r1
 800d7bc:	2200      	movs	r2, #0
 800d7be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7c0:	187b      	adds	r3, r7, r1
 800d7c2:	2203      	movs	r2, #3
 800d7c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d7c6:	187b      	adds	r3, r7, r1
 800d7c8:	2206      	movs	r2, #6
 800d7ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7cc:	187b      	adds	r3, r7, r1
 800d7ce:	4a7a      	ldr	r2, [pc, #488]	@ (800d9b8 <HAL_UART_MspInit+0x254>)
 800d7d0:	0019      	movs	r1, r3
 800d7d2:	0010      	movs	r0, r2
 800d7d4:	f001 fe80 	bl	800f4d8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d7d8:	e0e5      	b.n	800d9a6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a77      	ldr	r2, [pc, #476]	@ (800d9bc <HAL_UART_MspInit+0x258>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d133      	bne.n	800d84c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d7e4:	4b73      	ldr	r3, [pc, #460]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d7e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7e8:	4b72      	ldr	r3, [pc, #456]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d7ea:	2180      	movs	r1, #128	@ 0x80
 800d7ec:	01c9      	lsls	r1, r1, #7
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7f2:	4b70      	ldr	r3, [pc, #448]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d7f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7f6:	4b6f      	ldr	r3, [pc, #444]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	430a      	orrs	r2, r1
 800d7fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d7fe:	4b6d      	ldr	r3, [pc, #436]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d802:	2201      	movs	r2, #1
 800d804:	4013      	ands	r3, r2
 800d806:	617b      	str	r3, [r7, #20]
 800d808:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d80a:	211c      	movs	r1, #28
 800d80c:	187b      	adds	r3, r7, r1
 800d80e:	22c0      	movs	r2, #192	@ 0xc0
 800d810:	00d2      	lsls	r2, r2, #3
 800d812:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d814:	187b      	adds	r3, r7, r1
 800d816:	2202      	movs	r2, #2
 800d818:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d81a:	187b      	adds	r3, r7, r1
 800d81c:	2200      	movs	r2, #0
 800d81e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d820:	187b      	adds	r3, r7, r1
 800d822:	2203      	movs	r2, #3
 800d824:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d826:	187b      	adds	r3, r7, r1
 800d828:	2204      	movs	r2, #4
 800d82a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d82c:	187a      	adds	r2, r7, r1
 800d82e:	23a0      	movs	r3, #160	@ 0xa0
 800d830:	05db      	lsls	r3, r3, #23
 800d832:	0011      	movs	r1, r2
 800d834:	0018      	movs	r0, r3
 800d836:	f001 fe4f 	bl	800f4d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d83a:	2200      	movs	r2, #0
 800d83c:	2100      	movs	r1, #0
 800d83e:	201b      	movs	r0, #27
 800d840:	f001 f9fc 	bl	800ec3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d844:	201b      	movs	r0, #27
 800d846:	f001 fa0e 	bl	800ec66 <HAL_NVIC_EnableIRQ>
}
 800d84a:	e0ac      	b.n	800d9a6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a5b      	ldr	r2, [pc, #364]	@ (800d9c0 <HAL_UART_MspInit+0x25c>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d000      	beq.n	800d858 <HAL_UART_MspInit+0xf4>
 800d856:	e0a6      	b.n	800d9a6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d858:	4b56      	ldr	r3, [pc, #344]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d85a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d85c:	4b55      	ldr	r3, [pc, #340]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d85e:	2180      	movs	r1, #128	@ 0x80
 800d860:	0309      	lsls	r1, r1, #12
 800d862:	430a      	orrs	r2, r1
 800d864:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d866:	4b53      	ldr	r3, [pc, #332]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d86a:	4b52      	ldr	r3, [pc, #328]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d86c:	2101      	movs	r1, #1
 800d86e:	430a      	orrs	r2, r1
 800d870:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d872:	4b50      	ldr	r3, [pc, #320]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d876:	2201      	movs	r2, #1
 800d878:	4013      	ands	r3, r2
 800d87a:	613b      	str	r3, [r7, #16]
 800d87c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d87e:	4b4d      	ldr	r3, [pc, #308]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d882:	4b4c      	ldr	r3, [pc, #304]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d884:	2104      	movs	r1, #4
 800d886:	430a      	orrs	r2, r1
 800d888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d88a:	4b4a      	ldr	r3, [pc, #296]	@ (800d9b4 <HAL_UART_MspInit+0x250>)
 800d88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d88e:	2204      	movs	r2, #4
 800d890:	4013      	ands	r3, r2
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d896:	241c      	movs	r4, #28
 800d898:	193b      	adds	r3, r7, r4
 800d89a:	2202      	movs	r2, #2
 800d89c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d89e:	193b      	adds	r3, r7, r4
 800d8a0:	2202      	movs	r2, #2
 800d8a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8a4:	193b      	adds	r3, r7, r4
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8aa:	193b      	adds	r3, r7, r4
 800d8ac:	2203      	movs	r2, #3
 800d8ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d8b0:	193b      	adds	r3, r7, r4
 800d8b2:	2206      	movs	r2, #6
 800d8b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8b6:	193a      	adds	r2, r7, r4
 800d8b8:	23a0      	movs	r3, #160	@ 0xa0
 800d8ba:	05db      	lsls	r3, r3, #23
 800d8bc:	0011      	movs	r1, r2
 800d8be:	0018      	movs	r0, r3
 800d8c0:	f001 fe0a 	bl	800f4d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d8c4:	0021      	movs	r1, r4
 800d8c6:	187b      	adds	r3, r7, r1
 800d8c8:	2280      	movs	r2, #128	@ 0x80
 800d8ca:	00d2      	lsls	r2, r2, #3
 800d8cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8ce:	187b      	adds	r3, r7, r1
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8d4:	187b      	adds	r3, r7, r1
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d8da:	187b      	adds	r3, r7, r1
 800d8dc:	2203      	movs	r2, #3
 800d8de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d8e0:	187b      	adds	r3, r7, r1
 800d8e2:	2206      	movs	r2, #6
 800d8e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d8e6:	187b      	adds	r3, r7, r1
 800d8e8:	4a33      	ldr	r2, [pc, #204]	@ (800d9b8 <HAL_UART_MspInit+0x254>)
 800d8ea:	0019      	movs	r1, r3
 800d8ec:	0010      	movs	r0, r2
 800d8ee:	f001 fdf3 	bl	800f4d8 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d8f2:	4b34      	ldr	r3, [pc, #208]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d8f4:	4a34      	ldr	r2, [pc, #208]	@ (800d9c8 <HAL_UART_MspInit+0x264>)
 800d8f6:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d8f8:	4b32      	ldr	r3, [pc, #200]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d8fa:	220c      	movs	r2, #12
 800d8fc:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d8fe:	4b31      	ldr	r3, [pc, #196]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d900:	2200      	movs	r2, #0
 800d902:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d904:	4b2f      	ldr	r3, [pc, #188]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d906:	2200      	movs	r2, #0
 800d908:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d90a:	4b2e      	ldr	r3, [pc, #184]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d90c:	2280      	movs	r2, #128	@ 0x80
 800d90e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d910:	4b2c      	ldr	r3, [pc, #176]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d912:	2200      	movs	r2, #0
 800d914:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d916:	4b2b      	ldr	r3, [pc, #172]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d918:	2200      	movs	r2, #0
 800d91a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d91c:	4b29      	ldr	r3, [pc, #164]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d91e:	2220      	movs	r2, #32
 800d920:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d922:	4b28      	ldr	r3, [pc, #160]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d924:	2200      	movs	r2, #0
 800d926:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d928:	4b26      	ldr	r3, [pc, #152]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d92a:	0018      	movs	r0, r3
 800d92c:	f001 f9b8 	bl	800eca0 <HAL_DMA_Init>
 800d930:	1e03      	subs	r3, r0, #0
 800d932:	d001      	beq.n	800d938 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d934:	f7fa fdb2 	bl	800849c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a22      	ldr	r2, [pc, #136]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d93c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d93e:	4b21      	ldr	r3, [pc, #132]	@ (800d9c4 <HAL_UART_MspInit+0x260>)
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d944:	4b21      	ldr	r3, [pc, #132]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d946:	4a22      	ldr	r2, [pc, #136]	@ (800d9d0 <HAL_UART_MspInit+0x26c>)
 800d948:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d94a:	4b20      	ldr	r3, [pc, #128]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d94c:	220c      	movs	r2, #12
 800d94e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d950:	4b1e      	ldr	r3, [pc, #120]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d952:	2210      	movs	r2, #16
 800d954:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d956:	4b1d      	ldr	r3, [pc, #116]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d958:	2200      	movs	r2, #0
 800d95a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d95c:	4b1b      	ldr	r3, [pc, #108]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d95e:	2280      	movs	r2, #128	@ 0x80
 800d960:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d962:	4b1a      	ldr	r3, [pc, #104]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d964:	2200      	movs	r2, #0
 800d966:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d968:	4b18      	ldr	r3, [pc, #96]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d96a:	2200      	movs	r2, #0
 800d96c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d96e:	4b17      	ldr	r3, [pc, #92]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d970:	2200      	movs	r2, #0
 800d972:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d974:	4b15      	ldr	r3, [pc, #84]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d976:	2200      	movs	r2, #0
 800d978:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d97a:	4b14      	ldr	r3, [pc, #80]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d97c:	0018      	movs	r0, r3
 800d97e:	f001 f98f 	bl	800eca0 <HAL_DMA_Init>
 800d982:	1e03      	subs	r3, r0, #0
 800d984:	d001      	beq.n	800d98a <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d986:	f7fa fd89 	bl	800849c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4a0f      	ldr	r2, [pc, #60]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d98e:	671a      	str	r2, [r3, #112]	@ 0x70
 800d990:	4b0e      	ldr	r3, [pc, #56]	@ (800d9cc <HAL_UART_MspInit+0x268>)
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d996:	2200      	movs	r2, #0
 800d998:	2100      	movs	r1, #0
 800d99a:	200e      	movs	r0, #14
 800d99c:	f001 f94e 	bl	800ec3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d9a0:	200e      	movs	r0, #14
 800d9a2:	f001 f960 	bl	800ec66 <HAL_NVIC_EnableIRQ>
}
 800d9a6:	46c0      	nop			@ (mov r8, r8)
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	b00d      	add	sp, #52	@ 0x34
 800d9ac:	bd90      	pop	{r4, r7, pc}
 800d9ae:	46c0      	nop			@ (mov r8, r8)
 800d9b0:	40004800 	.word	0x40004800
 800d9b4:	40021000 	.word	0x40021000
 800d9b8:	50000800 	.word	0x50000800
 800d9bc:	40013800 	.word	0x40013800
 800d9c0:	40004c00 	.word	0x40004c00
 800d9c4:	20002444 	.word	0x20002444
 800d9c8:	4002006c 	.word	0x4002006c
 800d9cc:	2000248c 	.word	0x2000248c
 800d9d0:	40020080 	.word	0x40020080

0800d9d4 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800d9dc:	f000 fc9c 	bl	800e318 <HAL_GetTick>
 800d9e0:	0003      	movs	r3, r0
 800d9e2:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800d9e4:	4b1c      	ldr	r3, [pc, #112]	@ (800da58 <TimestampIsReached+0x84>)
 800d9e6:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d307      	bcc.n	800da00 <TimestampIsReached+0x2c>
 800d9f0:	697a      	ldr	r2, [r7, #20]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	1ad3      	subs	r3, r2, r3
 800d9f6:	693a      	ldr	r2, [r7, #16]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d901      	bls.n	800da00 <TimestampIsReached+0x2c>
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	e000      	b.n	800da02 <TimestampIsReached+0x2e>
 800da00:	2200      	movs	r2, #0
 800da02:	230f      	movs	r3, #15
 800da04:	18fb      	adds	r3, r7, r3
 800da06:	701a      	strb	r2, [r3, #0]
 800da08:	781a      	ldrb	r2, [r3, #0]
 800da0a:	2101      	movs	r1, #1
 800da0c:	400a      	ands	r2, r1
 800da0e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	429a      	cmp	r2, r3
 800da16:	d207      	bcs.n	800da28 <TimestampIsReached+0x54>
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	693a      	ldr	r2, [r7, #16]
 800da20:	429a      	cmp	r2, r3
 800da22:	d201      	bcs.n	800da28 <TimestampIsReached+0x54>
 800da24:	2201      	movs	r2, #1
 800da26:	e000      	b.n	800da2a <TimestampIsReached+0x56>
 800da28:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800da2a:	200e      	movs	r0, #14
 800da2c:	183b      	adds	r3, r7, r0
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	781a      	ldrb	r2, [r3, #0]
 800da32:	2101      	movs	r1, #1
 800da34:	400a      	ands	r2, r1
 800da36:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800da38:	230f      	movs	r3, #15
 800da3a:	18fb      	adds	r3, r7, r3
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d103      	bne.n	800da4a <TimestampIsReached+0x76>
 800da42:	183b      	adds	r3, r7, r0
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e000      	b.n	800da50 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	0018      	movs	r0, r3
 800da52:	46bd      	mov	sp, r7
 800da54:	b006      	add	sp, #24
 800da56:	bd80      	pop	{r7, pc}
 800da58:	7fffffff 	.word	0x7fffffff

0800da5c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800da64:	f000 fc58 	bl	800e318 <HAL_GetTick>
 800da68:	0002      	movs	r2, r0
 800da6a:	4904      	ldr	r1, [pc, #16]	@ (800da7c <AddTimestamp+0x20>)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	0018      	movs	r0, r3
 800da70:	f011 fd50 	bl	801f514 <siprintf>
}
 800da74:	46c0      	nop			@ (mov r8, r8)
 800da76:	46bd      	mov	sp, r7
 800da78:	b002      	add	sp, #8
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	0802421c 	.word	0x0802421c

0800da80 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800da80:	b40c      	push	{r2, r3}
 800da82:	b5b0      	push	{r4, r5, r7, lr}
 800da84:	b0a4      	sub	sp, #144	@ 0x90
 800da86:	af00      	add	r7, sp, #0
 800da88:	0002      	movs	r2, r0
 800da8a:	6039      	str	r1, [r7, #0]
 800da8c:	1dfb      	adds	r3, r7, #7
 800da8e:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800da90:	4b23      	ldr	r3, [pc, #140]	@ (800db20 <CreateLine+0xa0>)
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	1dfa      	adds	r2, r7, #7
 800da96:	7812      	ldrb	r2, [r2, #0]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d839      	bhi.n	800db10 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	4921      	ldr	r1, [pc, #132]	@ (800db24 <CreateLine+0xa4>)
 800daa0:	240c      	movs	r4, #12
 800daa2:	193b      	adds	r3, r7, r4
 800daa4:	0018      	movs	r0, r3
 800daa6:	f011 fd35 	bl	801f514 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800daaa:	4b1d      	ldr	r3, [pc, #116]	@ (800db20 <CreateLine+0xa0>)
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d909      	bls.n	800dac6 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800dab2:	193b      	adds	r3, r7, r4
 800dab4:	0018      	movs	r0, r3
 800dab6:	f7f2 fb59 	bl	800016c <strlen>
 800daba:	0002      	movs	r2, r0
 800dabc:	193b      	adds	r3, r7, r4
 800dabe:	189b      	adds	r3, r3, r2
 800dac0:	0018      	movs	r0, r3
 800dac2:	f7ff ffcb 	bl	800da5c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800dac6:	240c      	movs	r4, #12
 800dac8:	193b      	adds	r3, r7, r4
 800daca:	0018      	movs	r0, r3
 800dacc:	f7f2 fb4e 	bl	800016c <strlen>
 800dad0:	0003      	movs	r3, r0
 800dad2:	218c      	movs	r1, #140	@ 0x8c
 800dad4:	187a      	adds	r2, r7, r1
 800dad6:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800dad8:	239c      	movs	r3, #156	@ 0x9c
 800dada:	2508      	movs	r5, #8
 800dadc:	195b      	adds	r3, r3, r5
 800dade:	19db      	adds	r3, r3, r7
 800dae0:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800dae2:	193a      	adds	r2, r7, r4
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	18d0      	adds	r0, r2, r3
 800daea:	187b      	adds	r3, r7, r1
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2280      	movs	r2, #128	@ 0x80
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	0019      	movs	r1, r3
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2298      	movs	r2, #152	@ 0x98
 800daf8:	1952      	adds	r2, r2, r5
 800dafa:	19d2      	adds	r2, r2, r7
 800dafc:	6812      	ldr	r2, [r2, #0]
 800dafe:	f011 fda1 	bl	801f644 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800db02:	193a      	adds	r2, r7, r4
 800db04:	4b08      	ldr	r3, [pc, #32]	@ (800db28 <CreateLine+0xa8>)
 800db06:	0011      	movs	r1, r2
 800db08:	0018      	movs	r0, r3
 800db0a:	f011 fc93 	bl	801f434 <iprintf>
 800db0e:	e000      	b.n	800db12 <CreateLine+0x92>
    return;
 800db10:	46c0      	nop			@ (mov r8, r8)
}
 800db12:	46bd      	mov	sp, r7
 800db14:	b024      	add	sp, #144	@ 0x90
 800db16:	bcb0      	pop	{r4, r5, r7}
 800db18:	bc08      	pop	{r3}
 800db1a:	b002      	add	sp, #8
 800db1c:	4718      	bx	r3
 800db1e:	46c0      	nop			@ (mov r8, r8)
 800db20:	200000cc 	.word	0x200000cc
 800db24:	08024228 	.word	0x08024228
 800db28:	0802422c 	.word	0x0802422c

0800db2c <_write>:

int _write(int fd, const void *buf, size_t count) {
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	68b9      	ldr	r1, [r7, #8]
 800db3e:	4804      	ldr	r0, [pc, #16]	@ (800db50 <_write+0x24>)
 800db40:	2364      	movs	r3, #100	@ 0x64
 800db42:	f008 fdff 	bl	8016744 <HAL_UART_Transmit>
  return count;
 800db46:	687b      	ldr	r3, [r7, #4]
}
 800db48:	0018      	movs	r0, r3
 800db4a:	46bd      	mov	sp, r7
 800db4c:	b004      	add	sp, #16
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	200022d4 	.word	0x200022d4

0800db54 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	0002      	movs	r2, r0
 800db5c:	1dfb      	adds	r3, r7, #7
 800db5e:	701a      	strb	r2, [r3, #0]
 800db60:	4b03      	ldr	r3, [pc, #12]	@ (800db70 <SetVerboseLevel+0x1c>)
 800db62:	1dfa      	adds	r2, r7, #7
 800db64:	7812      	ldrb	r2, [r2, #0]
 800db66:	701a      	strb	r2, [r3, #0]
 800db68:	46c0      	nop			@ (mov r8, r8)
 800db6a:	46bd      	mov	sp, r7
 800db6c:	b002      	add	sp, #8
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	200000cc 	.word	0x200000cc

0800db74 <BinaryReleaseInfo>:

//uint32_t GetCurrentHalTicks(void) {
//  return HAL_GetTick();
//}

void BinaryReleaseInfo() {
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800db7a:	4a0f      	ldr	r2, [pc, #60]	@ (800dbb8 <BinaryReleaseInfo+0x44>)
 800db7c:	4b0f      	ldr	r3, [pc, #60]	@ (800dbbc <BinaryReleaseInfo+0x48>)
 800db7e:	0019      	movs	r1, r3
 800db80:	2002      	movs	r0, #2
 800db82:	f7ff ff7d 	bl	800da80 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800db86:	480e      	ldr	r0, [pc, #56]	@ (800dbc0 <BinaryReleaseInfo+0x4c>)
 800db88:	4a0e      	ldr	r2, [pc, #56]	@ (800dbc4 <BinaryReleaseInfo+0x50>)
 800db8a:	490c      	ldr	r1, [pc, #48]	@ (800dbbc <BinaryReleaseInfo+0x48>)
 800db8c:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc8 <BinaryReleaseInfo+0x54>)
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	0003      	movs	r3, r0
 800db92:	2002      	movs	r0, #2
 800db94:	f7ff ff74 	bl	800da80 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800db98:	4b0c      	ldr	r3, [pc, #48]	@ (800dbcc <BinaryReleaseInfo+0x58>)
 800db9a:	4a0d      	ldr	r2, [pc, #52]	@ (800dbd0 <BinaryReleaseInfo+0x5c>)
 800db9c:	4907      	ldr	r1, [pc, #28]	@ (800dbbc <BinaryReleaseInfo+0x48>)
 800db9e:	2002      	movs	r0, #2
 800dba0:	f7ff ff6e 	bl	800da80 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800dba4:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd4 <BinaryReleaseInfo+0x60>)
 800dba6:	4a0c      	ldr	r2, [pc, #48]	@ (800dbd8 <BinaryReleaseInfo+0x64>)
 800dba8:	4904      	ldr	r1, [pc, #16]	@ (800dbbc <BinaryReleaseInfo+0x48>)
 800dbaa:	2002      	movs	r0, #2
 800dbac:	f7ff ff68 	bl	800da80 <CreateLine>
}
 800dbb0:	46c0      	nop			@ (mov r8, r8)
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	46c0      	nop			@ (mov r8, r8)
 800dbb8:	08024234 	.word	0x08024234
 800dbbc:	08024260 	.word	0x08024260
 800dbc0:	08024264 	.word	0x08024264
 800dbc4:	08024270 	.word	0x08024270
 800dbc8:	08024284 	.word	0x08024284
 800dbcc:	08024290 	.word	0x08024290
 800dbd0:	08024298 	.word	0x08024298
 800dbd4:	080242a0 	.word	0x080242a0
 800dbd8:	080242a8 	.word	0x080242a8

0800dbdc <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	68f9      	ldr	r1, [r7, #12]
 800dbee:	4803      	ldr	r0, [pc, #12]	@ (800dbfc <errorHandler+0x20>)
 800dbf0:	f011 fc20 	bl	801f434 <iprintf>
//    while (true)
//    {
//    }
}
 800dbf4:	46c0      	nop			@ (mov r8, r8)
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	b004      	add	sp, #16
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	080242c0 	.word	0x080242c0

0800dc00 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6039      	str	r1, [r7, #0]
 800dc08:	0011      	movs	r1, r2
 800dc0a:	1dfb      	adds	r3, r7, #7
 800dc0c:	1c02      	adds	r2, r0, #0
 800dc0e:	701a      	strb	r2, [r3, #0]
 800dc10:	1dbb      	adds	r3, r7, #6
 800dc12:	1c0a      	adds	r2, r1, #0
 800dc14:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800dc16:	4b0a      	ldr	r3, [pc, #40]	@ (800dc40 <ReadRegister+0x40>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00a      	beq.n	800dc34 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800dc1e:	4b08      	ldr	r3, [pc, #32]	@ (800dc40 <ReadRegister+0x40>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	1dba      	adds	r2, r7, #6
 800dc24:	7814      	ldrb	r4, [r2, #0]
 800dc26:	6839      	ldr	r1, [r7, #0]
 800dc28:	1dfa      	adds	r2, r7, #7
 800dc2a:	7810      	ldrb	r0, [r2, #0]
 800dc2c:	0022      	movs	r2, r4
 800dc2e:	4798      	blx	r3
 800dc30:	0003      	movs	r3, r0
 800dc32:	e000      	b.n	800dc36 <ReadRegister+0x36>
	}
	return false;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	0018      	movs	r0, r3
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	b003      	add	sp, #12
 800dc3c:	bd90      	pop	{r4, r7, pc}
 800dc3e:	46c0      	nop			@ (mov r8, r8)
 800dc40:	200024dc 	.word	0x200024dc

0800dc44 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dc44:	b590      	push	{r4, r7, lr}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6039      	str	r1, [r7, #0]
 800dc4c:	0011      	movs	r1, r2
 800dc4e:	1dfb      	adds	r3, r7, #7
 800dc50:	1c02      	adds	r2, r0, #0
 800dc52:	701a      	strb	r2, [r3, #0]
 800dc54:	1dbb      	adds	r3, r7, #6
 800dc56:	1c0a      	adds	r2, r1, #0
 800dc58:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800dc5a:	4b0a      	ldr	r3, [pc, #40]	@ (800dc84 <WriteRegister+0x40>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00a      	beq.n	800dc78 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800dc62:	4b08      	ldr	r3, [pc, #32]	@ (800dc84 <WriteRegister+0x40>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	1dba      	adds	r2, r7, #6
 800dc68:	7814      	ldrb	r4, [r2, #0]
 800dc6a:	6839      	ldr	r1, [r7, #0]
 800dc6c:	1dfa      	adds	r2, r7, #7
 800dc6e:	7810      	ldrb	r0, [r2, #0]
 800dc70:	0022      	movs	r2, r4
 800dc72:	4798      	blx	r3
 800dc74:	0003      	movs	r3, r0
 800dc76:	e000      	b.n	800dc7a <WriteRegister+0x36>
  }
  return false;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	b003      	add	sp, #12
 800dc80:	bd90      	pop	{r4, r7, pc}
 800dc82:	46c0      	nop			@ (mov r8, r8)
 800dc84:	200024e0 	.word	0x200024e0

0800dc88 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	000a      	movs	r2, r1
 800dc92:	1cfb      	adds	r3, r7, #3
 800dc94:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800dc96:	230f      	movs	r3, #15
 800dc98:	18fb      	adds	r3, r7, r3
 800dc9a:	22ff      	movs	r2, #255	@ 0xff
 800dc9c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800dc9e:	230e      	movs	r3, #14
 800dca0:	18fb      	adds	r3, r7, r3
 800dca2:	2200      	movs	r2, #0
 800dca4:	701a      	strb	r2, [r3, #0]
 800dca6:	e037      	b.n	800dd18 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800dca8:	230e      	movs	r3, #14
 800dcaa:	18fb      	adds	r3, r7, r3
 800dcac:	781b      	ldrb	r3, [r3, #0]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	18d3      	adds	r3, r2, r3
 800dcb2:	7819      	ldrb	r1, [r3, #0]
 800dcb4:	220f      	movs	r2, #15
 800dcb6:	18bb      	adds	r3, r7, r2
 800dcb8:	18ba      	adds	r2, r7, r2
 800dcba:	7812      	ldrb	r2, [r2, #0]
 800dcbc:	404a      	eors	r2, r1
 800dcbe:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800dcc0:	230d      	movs	r3, #13
 800dcc2:	18fb      	adds	r3, r7, r3
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	701a      	strb	r2, [r3, #0]
 800dcc8:	e01b      	b.n	800dd02 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800dcca:	210f      	movs	r1, #15
 800dccc:	187b      	adds	r3, r7, r1
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	b25b      	sxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	da09      	bge.n	800dcea <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800dcd6:	187b      	adds	r3, r7, r1
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	005b      	lsls	r3, r3, #1
 800dcdc:	b25b      	sxtb	r3, r3
 800dcde:	2231      	movs	r2, #49	@ 0x31
 800dce0:	4053      	eors	r3, r2
 800dce2:	b25a      	sxtb	r2, r3
 800dce4:	187b      	adds	r3, r7, r1
 800dce6:	701a      	strb	r2, [r3, #0]
 800dce8:	e005      	b.n	800dcf6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800dcea:	230f      	movs	r3, #15
 800dcec:	18fa      	adds	r2, r7, r3
 800dcee:	18fb      	adds	r3, r7, r3
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	18db      	adds	r3, r3, r3
 800dcf4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800dcf6:	210d      	movs	r1, #13
 800dcf8:	187b      	adds	r3, r7, r1
 800dcfa:	781a      	ldrb	r2, [r3, #0]
 800dcfc:	187b      	adds	r3, r7, r1
 800dcfe:	3201      	adds	r2, #1
 800dd00:	701a      	strb	r2, [r3, #0]
 800dd02:	230d      	movs	r3, #13
 800dd04:	18fb      	adds	r3, r7, r3
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b07      	cmp	r3, #7
 800dd0a:	d9de      	bls.n	800dcca <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800dd0c:	210e      	movs	r1, #14
 800dd0e:	187b      	adds	r3, r7, r1
 800dd10:	781a      	ldrb	r2, [r3, #0]
 800dd12:	187b      	adds	r3, r7, r1
 800dd14:	3201      	adds	r2, #1
 800dd16:	701a      	strb	r2, [r3, #0]
 800dd18:	230e      	movs	r3, #14
 800dd1a:	18fa      	adds	r2, r7, r3
 800dd1c:	1cfb      	adds	r3, r7, #3
 800dd1e:	7812      	ldrb	r2, [r2, #0]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d3c0      	bcc.n	800dca8 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800dd26:	230f      	movs	r3, #15
 800dd28:	18fb      	adds	r3, r7, r3
 800dd2a:	781b      	ldrb	r3, [r3, #0]
}
 800dd2c:	0018      	movs	r0, r3
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	b004      	add	sp, #16
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800dd3e:	4b0a      	ldr	r3, [pc, #40]	@ (800dd68 <HIDS_Init+0x34>)
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800dd44:	4b09      	ldr	r3, [pc, #36]	@ (800dd6c <HIDS_Init+0x38>)
 800dd46:	683a      	ldr	r2, [r7, #0]
 800dd48:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800dd4a:	4b09      	ldr	r3, [pc, #36]	@ (800dd70 <HIDS_Init+0x3c>)
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	0018      	movs	r0, r3
 800dd50:	f000 f840 	bl	800ddd4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800dd54:	4b07      	ldr	r3, [pc, #28]	@ (800dd74 <HIDS_Init+0x40>)
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	0018      	movs	r0, r3
 800dd5a:	f000 f82b 	bl	800ddb4 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800dd5e:	46c0      	nop			@ (mov r8, r8)
 800dd60:	46bd      	mov	sp, r7
 800dd62:	b002      	add	sp, #8
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	46c0      	nop			@ (mov r8, r8)
 800dd68:	200024dc 	.word	0x200024dc
 800dd6c:	200024e0 	.word	0x200024e0
 800dd70:	200000ce 	.word	0x200000ce
 800dd74:	200000cd 	.word	0x200000cd

0800dd78 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800dd7c:	f000 facc 	bl	800e318 <HAL_GetTick>
 800dd80:	0002      	movs	r2, r0
 800dd82:	4b08      	ldr	r3, [pc, #32]	@ (800dda4 <HIDS_StartMeasurement+0x2c>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	18d2      	adds	r2, r2, r3
 800dd88:	4b07      	ldr	r3, [pc, #28]	@ (800dda8 <HIDS_StartMeasurement+0x30>)
 800dd8a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800dd8c:	4b07      	ldr	r3, [pc, #28]	@ (800ddac <HIDS_StartMeasurement+0x34>)
 800dd8e:	2201      	movs	r2, #1
 800dd90:	0019      	movs	r1, r3
 800dd92:	2044      	movs	r0, #68	@ 0x44
 800dd94:	f7ff ff56 	bl	800dc44 <WriteRegister>
  MeasurementDone = false;
 800dd98:	4b05      	ldr	r3, [pc, #20]	@ (800ddb0 <HIDS_StartMeasurement+0x38>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	701a      	strb	r2, [r3, #0]
}
 800dd9e:	46c0      	nop			@ (mov r8, r8)
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	200000d4 	.word	0x200000d4
 800dda8:	200000d0 	.word	0x200000d0
 800ddac:	200000ce 	.word	0x200000ce
 800ddb0:	200024f2 	.word	0x200024f2

0800ddb4 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	0002      	movs	r2, r0
 800ddbc:	1dfb      	adds	r3, r7, #7
 800ddbe:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800ddc0:	4b03      	ldr	r3, [pc, #12]	@ (800ddd0 <HIDS_SetHeaterMode+0x1c>)
 800ddc2:	1dfa      	adds	r2, r7, #7
 800ddc4:	7812      	ldrb	r2, [r2, #0]
 800ddc6:	701a      	strb	r2, [r3, #0]
}
 800ddc8:	46c0      	nop			@ (mov r8, r8)
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	b002      	add	sp, #8
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	200000cd 	.word	0x200000cd

0800ddd4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	0002      	movs	r2, r0
 800dddc:	1dfb      	adds	r3, r7, #7
 800ddde:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800dde0:	4b03      	ldr	r3, [pc, #12]	@ (800ddf0 <HIDS_SetMeasurementMode+0x1c>)
 800dde2:	1dfa      	adds	r2, r7, #7
 800dde4:	7812      	ldrb	r2, [r2, #0]
 800dde6:	701a      	strb	r2, [r3, #0]
}
 800dde8:	46c0      	nop			@ (mov r8, r8)
 800ddea:	46bd      	mov	sp, r7
 800ddec:	b002      	add	sp, #8
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	200000ce 	.word	0x200000ce

0800ddf4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800ddfc:	f000 fa8c 	bl	800e318 <HAL_GetTick>
 800de00:	0002      	movs	r2, r0
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	18d2      	adds	r2, r2, r3
 800de06:	4b03      	ldr	r3, [pc, #12]	@ (800de14 <setHIDSTimeStamp+0x20>)
 800de08:	601a      	str	r2, [r3, #0]
}
 800de0a:	46c0      	nop			@ (mov r8, r8)
 800de0c:	46bd      	mov	sp, r7
 800de0e:	b002      	add	sp, #8
 800de10:	bd80      	pop	{r7, pc}
 800de12:	46c0      	nop			@ (mov r8, r8)
 800de14:	200024f4 	.word	0x200024f4

0800de18 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800de18:	b590      	push	{r4, r7, lr}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	781a      	ldrb	r2, [r3, #0]
 800de24:	210c      	movs	r1, #12
 800de26:	187b      	adds	r3, r7, r1
 800de28:	701a      	strb	r2, [r3, #0]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	785a      	ldrb	r2, [r3, #1]
 800de2e:	187b      	adds	r3, r7, r1
 800de30:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800de32:	240f      	movs	r4, #15
 800de34:	193b      	adds	r3, r7, r4
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	7892      	ldrb	r2, [r2, #2]
 800de3a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800de3c:	187b      	adds	r3, r7, r1
 800de3e:	2102      	movs	r1, #2
 800de40:	0018      	movs	r0, r3
 800de42:	f7ff ff21 	bl	800dc88 <CalculateCRC>
 800de46:	0003      	movs	r3, r0
 800de48:	001a      	movs	r2, r3
 800de4a:	193b      	adds	r3, r7, r4
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	4293      	cmp	r3, r2
 800de50:	d007      	beq.n	800de62 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800de52:	4a1a      	ldr	r2, [pc, #104]	@ (800debc <CheckCRC+0xa4>)
 800de54:	4b1a      	ldr	r3, [pc, #104]	@ (800dec0 <CheckCRC+0xa8>)
 800de56:	0019      	movs	r1, r3
 800de58:	2001      	movs	r0, #1
 800de5a:	f7ff fe11 	bl	800da80 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800de5e:	2300      	movs	r3, #0
 800de60:	e027      	b.n	800deb2 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	78da      	ldrb	r2, [r3, #3]
 800de66:	2108      	movs	r1, #8
 800de68:	187b      	adds	r3, r7, r1
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	791a      	ldrb	r2, [r3, #4]
 800de70:	187b      	adds	r3, r7, r1
 800de72:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800de74:	240e      	movs	r4, #14
 800de76:	193b      	adds	r3, r7, r4
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	7952      	ldrb	r2, [r2, #5]
 800de7c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800de7e:	187b      	adds	r3, r7, r1
 800de80:	2102      	movs	r1, #2
 800de82:	0018      	movs	r0, r3
 800de84:	f7ff ff00 	bl	800dc88 <CalculateCRC>
 800de88:	0003      	movs	r3, r0
 800de8a:	001a      	movs	r2, r3
 800de8c:	193b      	adds	r3, r7, r4
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	4293      	cmp	r3, r2
 800de92:	d00d      	beq.n	800deb0 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800de94:	4a0b      	ldr	r2, [pc, #44]	@ (800dec4 <CheckCRC+0xac>)
 800de96:	4b0a      	ldr	r3, [pc, #40]	@ (800dec0 <CheckCRC+0xa8>)
 800de98:	0019      	movs	r1, r3
 800de9a:	2001      	movs	r0, #1
 800de9c:	f7ff fdf0 	bl	800da80 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800dea0:	4a09      	ldr	r2, [pc, #36]	@ (800dec8 <CheckCRC+0xb0>)
 800dea2:	4b0a      	ldr	r3, [pc, #40]	@ (800decc <CheckCRC+0xb4>)
 800dea4:	217c      	movs	r1, #124	@ 0x7c
 800dea6:	0018      	movs	r0, r3
 800dea8:	f7ff fe98 	bl	800dbdc <errorHandler>
		return false;
 800deac:	2300      	movs	r3, #0
 800deae:	e000      	b.n	800deb2 <CheckCRC+0x9a>
	}
	return true;
 800deb0:	2301      	movs	r3, #1
}
 800deb2:	0018      	movs	r0, r3
 800deb4:	46bd      	mov	sp, r7
 800deb6:	b005      	add	sp, #20
 800deb8:	bd90      	pop	{r4, r7, pc}
 800deba:	46c0      	nop			@ (mov r8, r8)
 800debc:	0802430c 	.word	0x0802430c
 800dec0:	08024334 	.word	0x08024334
 800dec4:	08024338 	.word	0x08024338
 800dec8:	08024364 	.word	0x08024364
 800decc:	080248f8 	.word	0x080248f8

0800ded0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800ded6:	1dbb      	adds	r3, r7, #6
 800ded8:	2289      	movs	r2, #137	@ 0x89
 800deda:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800dedc:	1dbb      	adds	r3, r7, #6
 800dede:	2201      	movs	r2, #1
 800dee0:	0019      	movs	r1, r3
 800dee2:	2044      	movs	r0, #68	@ 0x44
 800dee4:	f7ff feae 	bl	800dc44 <WriteRegister>
	HAL_Delay(30);
 800dee8:	201e      	movs	r0, #30
 800deea:	f000 fa1f 	bl	800e32c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800deee:	4b14      	ldr	r3, [pc, #80]	@ (800df40 <HIDS_DeviceConnected+0x70>)
 800def0:	2206      	movs	r2, #6
 800def2:	0019      	movs	r1, r3
 800def4:	2044      	movs	r0, #68	@ 0x44
 800def6:	f7ff fe83 	bl	800dc00 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800defa:	1dfb      	adds	r3, r7, #7
 800defc:	2200      	movs	r2, #0
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	e011      	b.n	800df26 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800df02:	1dfb      	adds	r3, r7, #7
 800df04:	7818      	ldrb	r0, [r3, #0]
 800df06:	1dfb      	adds	r3, r7, #7
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	4a0d      	ldr	r2, [pc, #52]	@ (800df40 <HIDS_DeviceConnected+0x70>)
 800df0c:	5cd3      	ldrb	r3, [r2, r3]
 800df0e:	4a0d      	ldr	r2, [pc, #52]	@ (800df44 <HIDS_DeviceConnected+0x74>)
 800df10:	490d      	ldr	r1, [pc, #52]	@ (800df48 <HIDS_DeviceConnected+0x78>)
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	0003      	movs	r3, r0
 800df16:	2002      	movs	r0, #2
 800df18:	f7ff fdb2 	bl	800da80 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800df1c:	1dfb      	adds	r3, r7, #7
 800df1e:	781a      	ldrb	r2, [r3, #0]
 800df20:	1dfb      	adds	r3, r7, #7
 800df22:	3201      	adds	r2, #1
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	1dfb      	adds	r3, r7, #7
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	2b05      	cmp	r3, #5
 800df2c:	d9e9      	bls.n	800df02 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800df2e:	4b04      	ldr	r3, [pc, #16]	@ (800df40 <HIDS_DeviceConnected+0x70>)
 800df30:	0018      	movs	r0, r3
 800df32:	f7ff ff71 	bl	800de18 <CheckCRC>
 800df36:	0003      	movs	r3, r0
}
 800df38:	0018      	movs	r0, r3
 800df3a:	46bd      	mov	sp, r7
 800df3c:	b002      	add	sp, #8
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	200024e4 	.word	0x200024e4
 800df44:	0802437c 	.word	0x0802437c
 800df48:	08024308 	.word	0x08024308

0800df4c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800df4c:	b580      	push	{r7, lr}
 800df4e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800df50:	4b04      	ldr	r3, [pc, #16]	@ (800df64 <HIDS_MeasurementReady+0x18>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	0018      	movs	r0, r3
 800df56:	f7ff fd3d 	bl	800d9d4 <TimestampIsReached>
 800df5a:	0003      	movs	r3, r0
}
 800df5c:	0018      	movs	r0, r3
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	46c0      	nop			@ (mov r8, r8)
 800df64:	200000d0 	.word	0x200000d0

0800df68 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800df72:	4b4c      	ldr	r3, [pc, #304]	@ (800e0a4 <HIDS_GetMeasurementValues+0x13c>)
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <HIDS_GetMeasurementValues+0x16>
 800df7a:	2301      	movs	r3, #1
 800df7c:	e08d      	b.n	800e09a <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800df7e:	f7ff ffe5 	bl	800df4c <HIDS_MeasurementReady>
 800df82:	0003      	movs	r3, r0
 800df84:	001a      	movs	r2, r3
 800df86:	2301      	movs	r3, #1
 800df88:	4053      	eors	r3, r2
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <HIDS_GetMeasurementValues+0x2c>
 800df90:	2300      	movs	r3, #0
 800df92:	e082      	b.n	800e09a <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800df94:	4b44      	ldr	r3, [pc, #272]	@ (800e0a8 <HIDS_GetMeasurementValues+0x140>)
 800df96:	2206      	movs	r2, #6
 800df98:	0019      	movs	r1, r3
 800df9a:	2044      	movs	r0, #68	@ 0x44
 800df9c:	f7ff fe30 	bl	800dc00 <ReadRegister>
 800dfa0:	0003      	movs	r3, r0
 800dfa2:	001a      	movs	r2, r3
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	4053      	eors	r3, r2
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d005      	beq.n	800dfba <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800dfae:	4a3f      	ldr	r2, [pc, #252]	@ (800e0ac <HIDS_GetMeasurementValues+0x144>)
 800dfb0:	4b3f      	ldr	r3, [pc, #252]	@ (800e0b0 <HIDS_GetMeasurementValues+0x148>)
 800dfb2:	0019      	movs	r1, r3
 800dfb4:	2001      	movs	r0, #1
 800dfb6:	f7ff fd63 	bl	800da80 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800dfba:	4b3b      	ldr	r3, [pc, #236]	@ (800e0a8 <HIDS_GetMeasurementValues+0x140>)
 800dfbc:	0018      	movs	r0, r3
 800dfbe:	f7ff ff2b 	bl	800de18 <CheckCRC>
 800dfc2:	0003      	movs	r3, r0
 800dfc4:	001a      	movs	r2, r3
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	4053      	eors	r3, r2
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d011      	beq.n	800dff4 <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800dfd0:	2317      	movs	r3, #23
 800dfd2:	18fb      	adds	r3, r7, r3
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	701a      	strb	r2, [r3, #0]
 800dfd8:	e005      	b.n	800dfe6 <HIDS_GetMeasurementValues+0x7e>
 800dfda:	2117      	movs	r1, #23
 800dfdc:	187b      	adds	r3, r7, r1
 800dfde:	781a      	ldrb	r2, [r3, #0]
 800dfe0:	187b      	adds	r3, r7, r1
 800dfe2:	3201      	adds	r2, #1
 800dfe4:	701a      	strb	r2, [r3, #0]
 800dfe6:	2317      	movs	r3, #23
 800dfe8:	18fb      	adds	r3, r7, r3
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	2b05      	cmp	r3, #5
 800dfee:	d9f4      	bls.n	800dfda <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800dff0:	2300      	movs	r3, #0
 800dff2:	e052      	b.n	800e09a <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800dff4:	4b2c      	ldr	r3, [pc, #176]	@ (800e0a8 <HIDS_GetMeasurementValues+0x140>)
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	021b      	lsls	r3, r3, #8
 800dffa:	4a2b      	ldr	r2, [pc, #172]	@ (800e0a8 <HIDS_GetMeasurementValues+0x140>)
 800dffc:	7852      	ldrb	r2, [r2, #1]
 800dffe:	4313      	orrs	r3, r2
 800e000:	22af      	movs	r2, #175	@ 0xaf
 800e002:	4353      	muls	r3, r2
 800e004:	0018      	movs	r0, r3
 800e006:	f7f5 f9db 	bl	80033c0 <__aeabi_i2d>
 800e00a:	2200      	movs	r2, #0
 800e00c:	4b29      	ldr	r3, [pc, #164]	@ (800e0b4 <HIDS_GetMeasurementValues+0x14c>)
 800e00e:	f7f3 fed1 	bl	8001db4 <__aeabi_ddiv>
 800e012:	0002      	movs	r2, r0
 800e014:	000b      	movs	r3, r1
 800e016:	0010      	movs	r0, r2
 800e018:	0019      	movs	r1, r3
 800e01a:	f7f5 fa6b 	bl	80034f4 <__aeabi_d2f>
 800e01e:	1c03      	adds	r3, r0, #0
 800e020:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800e022:	4925      	ldr	r1, [pc, #148]	@ (800e0b8 <HIDS_GetMeasurementValues+0x150>)
 800e024:	6938      	ldr	r0, [r7, #16]
 800e026:	f7f3 f8f9 	bl	800121c <__aeabi_fsub>
 800e02a:	1c03      	adds	r3, r0, #0
 800e02c:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e02e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0a8 <HIDS_GetMeasurementValues+0x140>)
 800e030:	78db      	ldrb	r3, [r3, #3]
 800e032:	021b      	lsls	r3, r3, #8
 800e034:	4a1c      	ldr	r2, [pc, #112]	@ (800e0a8 <HIDS_GetMeasurementValues+0x140>)
 800e036:	7912      	ldrb	r2, [r2, #4]
 800e038:	431a      	orrs	r2, r3
 800e03a:	0013      	movs	r3, r2
 800e03c:	015b      	lsls	r3, r3, #5
 800e03e:	1a9b      	subs	r3, r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	189b      	adds	r3, r3, r2
 800e044:	0018      	movs	r0, r3
 800e046:	f7f5 f9bb 	bl	80033c0 <__aeabi_i2d>
 800e04a:	2200      	movs	r2, #0
 800e04c:	4b19      	ldr	r3, [pc, #100]	@ (800e0b4 <HIDS_GetMeasurementValues+0x14c>)
 800e04e:	f7f3 feb1 	bl	8001db4 <__aeabi_ddiv>
 800e052:	0002      	movs	r2, r0
 800e054:	000b      	movs	r3, r1
 800e056:	0010      	movs	r0, r2
 800e058:	0019      	movs	r1, r3
 800e05a:	f7f5 fa4b 	bl	80034f4 <__aeabi_d2f>
 800e05e:	1c03      	adds	r3, r0, #0
 800e060:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800e062:	4916      	ldr	r1, [pc, #88]	@ (800e0bc <HIDS_GetMeasurementValues+0x154>)
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f7f3 f8d9 	bl	800121c <__aeabi_fsub>
 800e06a:	1c03      	adds	r3, r0, #0
 800e06c:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	693a      	ldr	r2, [r7, #16]
 800e072:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	0011      	movs	r1, r2
 800e080:	0018      	movs	r0, r3
 800e082:	f7fd fbd3 	bl	800b82c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	1c11      	adds	r1, r2, #0
 800e08c:	1c18      	adds	r0, r3, #0
 800e08e:	f7f5 fc21 	bl	80038d4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800e092:	4b04      	ldr	r3, [pc, #16]	@ (800e0a4 <HIDS_GetMeasurementValues+0x13c>)
 800e094:	2201      	movs	r2, #1
 800e096:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800e098:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800e09a:	0018      	movs	r0, r3
 800e09c:	46bd      	mov	sp, r7
 800e09e:	b006      	add	sp, #24
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	46c0      	nop			@ (mov r8, r8)
 800e0a4:	200024f2 	.word	0x200024f2
 800e0a8:	200024ec 	.word	0x200024ec
 800e0ac:	0802439c 	.word	0x0802439c
 800e0b0:	08024334 	.word	0x08024334
 800e0b4:	40efffe0 	.word	0x40efffe0
 800e0b8:	42340000 	.word	0x42340000
 800e0bc:	40c00000 	.word	0x40c00000

0800e0c0 <ResetHIDSresults>:
void ResetHIDSresults() {
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	af00      	add	r7, sp, #0
  humid = 0.0;
 800e0c4:	4b04      	ldr	r3, [pc, #16]	@ (800e0d8 <ResetHIDSresults+0x18>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800e0ca:	4b04      	ldr	r3, [pc, #16]	@ (800e0dc <ResetHIDSresults+0x1c>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	601a      	str	r2, [r3, #0]
}
 800e0d0:	46c0      	nop			@ (mov r8, r8)
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	46c0      	nop			@ (mov r8, r8)
 800e0d8:	200024d4 	.word	0x200024d4
 800e0dc:	200024d8 	.word	0x200024d8

0800e0e0 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800e0e0:	b5b0      	push	{r4, r5, r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800e0e6:	4b3b      	ldr	r3, [pc, #236]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	2b06      	cmp	r3, #6
 800e0ec:	d865      	bhi.n	800e1ba <HIDS_Upkeep+0xda>
 800e0ee:	009a      	lsls	r2, r3, #2
 800e0f0:	4b39      	ldr	r3, [pc, #228]	@ (800e1d8 <HIDS_Upkeep+0xf8>)
 800e0f2:	18d3      	adds	r3, r2, r3
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800e0f8:	4a38      	ldr	r2, [pc, #224]	@ (800e1dc <HIDS_Upkeep+0xfc>)
 800e0fa:	4b39      	ldr	r3, [pc, #228]	@ (800e1e0 <HIDS_Upkeep+0x100>)
 800e0fc:	0019      	movs	r1, r3
 800e0fe:	2003      	movs	r0, #3
 800e100:	f7ff fcbe 	bl	800da80 <CreateLine>
      break;
 800e104:	e060      	b.n	800e1c8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800e106:	f7ff ffdb 	bl	800e0c0 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800e10a:	4b32      	ldr	r3, [pc, #200]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e10c:	2201      	movs	r2, #1
 800e10e:	701a      	strb	r2, [r3, #0]
      break;
 800e110:	e05a      	b.n	800e1c8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800e112:	f7fe fd5f 	bl	800cbd4 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800e116:	f7ff fe2f 	bl	800dd78 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800e11a:	4b2e      	ldr	r3, [pc, #184]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e11c:	2202      	movs	r2, #2
 800e11e:	701a      	strb	r2, [r3, #0]
      break;
 800e120:	e052      	b.n	800e1c8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800e122:	4a30      	ldr	r2, [pc, #192]	@ (800e1e4 <HIDS_Upkeep+0x104>)
 800e124:	4b30      	ldr	r3, [pc, #192]	@ (800e1e8 <HIDS_Upkeep+0x108>)
 800e126:	0011      	movs	r1, r2
 800e128:	0018      	movs	r0, r3
 800e12a:	f7ff ff1d 	bl	800df68 <HIDS_GetMeasurementValues>
 800e12e:	1e03      	subs	r3, r0, #0
 800e130:	d047      	beq.n	800e1c2 <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800e132:	4b28      	ldr	r3, [pc, #160]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e134:	2203      	movs	r2, #3
 800e136:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e138:	e043      	b.n	800e1c2 <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800e13a:	4b2b      	ldr	r3, [pc, #172]	@ (800e1e8 <HIDS_Upkeep+0x108>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	1c18      	adds	r0, r3, #0
 800e140:	f7f5 f990 	bl	8003464 <__aeabi_f2d>
 800e144:	0004      	movs	r4, r0
 800e146:	000d      	movs	r5, r1
 800e148:	4b26      	ldr	r3, [pc, #152]	@ (800e1e4 <HIDS_Upkeep+0x104>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	1c18      	adds	r0, r3, #0
 800e14e:	f7f5 f989 	bl	8003464 <__aeabi_f2d>
 800e152:	0002      	movs	r2, r0
 800e154:	000b      	movs	r3, r1
 800e156:	4825      	ldr	r0, [pc, #148]	@ (800e1ec <HIDS_Upkeep+0x10c>)
 800e158:	4921      	ldr	r1, [pc, #132]	@ (800e1e0 <HIDS_Upkeep+0x100>)
 800e15a:	9202      	str	r2, [sp, #8]
 800e15c:	9303      	str	r3, [sp, #12]
 800e15e:	9400      	str	r4, [sp, #0]
 800e160:	9501      	str	r5, [sp, #4]
 800e162:	0002      	movs	r2, r0
 800e164:	2003      	movs	r0, #3
 800e166:	f7ff fc8b 	bl	800da80 <CreateLine>
      setHIDS(temp, humid);
 800e16a:	4b1e      	ldr	r3, [pc, #120]	@ (800e1e4 <HIDS_Upkeep+0x104>)
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1e8 <HIDS_Upkeep+0x108>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	1c19      	adds	r1, r3, #0
 800e174:	1c10      	adds	r0, r2, #0
 800e176:	f7f5 fbc1 	bl	80038fc <setHIDS>
      ResetMeasurementIndicator();
 800e17a:	f7fe fd43 	bl	800cc04 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800e17e:	f000 f8cb 	bl	800e318 <HAL_GetTick>
 800e182:	0004      	movs	r4, r0
 800e184:	f7fe fe04 	bl	800cd90 <powerCheck>
 800e188:	0003      	movs	r3, r0
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d101      	bne.n	800e192 <HIDS_Upkeep+0xb2>
 800e18e:	4b18      	ldr	r3, [pc, #96]	@ (800e1f0 <HIDS_Upkeep+0x110>)
 800e190:	e001      	b.n	800e196 <HIDS_Upkeep+0xb6>
 800e192:	23fa      	movs	r3, #250	@ 0xfa
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	191a      	adds	r2, r3, r4
 800e198:	4b16      	ldr	r3, [pc, #88]	@ (800e1f4 <HIDS_Upkeep+0x114>)
 800e19a:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800e19c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e19e:	2206      	movs	r2, #6
 800e1a0:	701a      	strb	r2, [r3, #0]
      break;
 800e1a2:	e011      	b.n	800e1c8 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800e1a4:	4b13      	ldr	r3, [pc, #76]	@ (800e1f4 <HIDS_Upkeep+0x114>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	0018      	movs	r0, r3
 800e1aa:	f7ff fc13 	bl	800d9d4 <TimestampIsReached>
 800e1ae:	1e03      	subs	r3, r0, #0
 800e1b0:	d009      	beq.n	800e1c6 <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800e1b2:	4b08      	ldr	r3, [pc, #32]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e1b8:	e005      	b.n	800e1c6 <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800e1ba:	4b06      	ldr	r3, [pc, #24]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	701a      	strb	r2, [r3, #0]
      break;
 800e1c0:	e002      	b.n	800e1c8 <HIDS_Upkeep+0xe8>
      break;
 800e1c2:	46c0      	nop			@ (mov r8, r8)
 800e1c4:	e000      	b.n	800e1c8 <HIDS_Upkeep+0xe8>
      break;
 800e1c6:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800e1c8:	4b02      	ldr	r3, [pc, #8]	@ (800e1d4 <HIDS_Upkeep+0xf4>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
}
 800e1cc:	0018      	movs	r0, r3
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1d2:	46c0      	nop			@ (mov r8, r8)
 800e1d4:	200024f8 	.word	0x200024f8
 800e1d8:	080248dc 	.word	0x080248dc
 800e1dc:	080243d0 	.word	0x080243d0
 800e1e0:	08024404 	.word	0x08024404
 800e1e4:	200024d8 	.word	0x200024d8
 800e1e8:	200024d4 	.word	0x200024d4
 800e1ec:	08024408 	.word	0x08024408
 800e1f0:	00002710 	.word	0x00002710
 800e1f4:	200024f4 	.word	0x200024f4

0800e1f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800e1f8:	480d      	ldr	r0, [pc, #52]	@ (800e230 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800e1fa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800e1fc:	f7ff f840 	bl	800d280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e200:	480c      	ldr	r0, [pc, #48]	@ (800e234 <LoopForever+0x6>)
  ldr r1, =_edata
 800e202:	490d      	ldr	r1, [pc, #52]	@ (800e238 <LoopForever+0xa>)
  ldr r2, =_sidata
 800e204:	4a0d      	ldr	r2, [pc, #52]	@ (800e23c <LoopForever+0xe>)
  movs r3, #0
 800e206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e208:	e002      	b.n	800e210 <LoopCopyDataInit>

0800e20a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e20a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e20c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e20e:	3304      	adds	r3, #4

0800e210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e214:	d3f9      	bcc.n	800e20a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e216:	4a0a      	ldr	r2, [pc, #40]	@ (800e240 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e218:	4c0a      	ldr	r4, [pc, #40]	@ (800e244 <LoopForever+0x16>)
  movs r3, #0
 800e21a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e21c:	e001      	b.n	800e222 <LoopFillZerobss>

0800e21e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e21e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e220:	3204      	adds	r2, #4

0800e222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e224:	d3fb      	bcc.n	800e21e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e226:	f011 fb63 	bl	801f8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e22a:	f7f9 fe6b 	bl	8007f04 <main>

0800e22e <LoopForever>:

LoopForever:
    b LoopForever
 800e22e:	e7fe      	b.n	800e22e <LoopForever>
   ldr   r0, =_estack
 800e230:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800e234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e238:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800e23c:	08025278 	.word	0x08025278
  ldr r2, =_sbss
 800e240:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800e244:	20003900 	.word	0x20003900

0800e248 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e248:	e7fe      	b.n	800e248 <ADC1_COMP_IRQHandler>
	...

0800e24c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e252:	1dfb      	adds	r3, r7, #7
 800e254:	2200      	movs	r2, #0
 800e256:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800e258:	4b0b      	ldr	r3, [pc, #44]	@ (800e288 <HAL_Init+0x3c>)
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	4b0a      	ldr	r3, [pc, #40]	@ (800e288 <HAL_Init+0x3c>)
 800e25e:	2140      	movs	r1, #64	@ 0x40
 800e260:	430a      	orrs	r2, r1
 800e262:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e264:	2003      	movs	r0, #3
 800e266:	f000 f811 	bl	800e28c <HAL_InitTick>
 800e26a:	1e03      	subs	r3, r0, #0
 800e26c:	d003      	beq.n	800e276 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800e26e:	1dfb      	adds	r3, r7, #7
 800e270:	2201      	movs	r2, #1
 800e272:	701a      	strb	r2, [r3, #0]
 800e274:	e001      	b.n	800e27a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e276:	f7fe feb7 	bl	800cfe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e27a:	1dfb      	adds	r3, r7, #7
 800e27c:	781b      	ldrb	r3, [r3, #0]
}
 800e27e:	0018      	movs	r0, r3
 800e280:	46bd      	mov	sp, r7
 800e282:	b002      	add	sp, #8
 800e284:	bd80      	pop	{r7, pc}
 800e286:	46c0      	nop			@ (mov r8, r8)
 800e288:	40022000 	.word	0x40022000

0800e28c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e28c:	b590      	push	{r4, r7, lr}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e294:	4b14      	ldr	r3, [pc, #80]	@ (800e2e8 <HAL_InitTick+0x5c>)
 800e296:	681c      	ldr	r4, [r3, #0]
 800e298:	4b14      	ldr	r3, [pc, #80]	@ (800e2ec <HAL_InitTick+0x60>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	0019      	movs	r1, r3
 800e29e:	23fa      	movs	r3, #250	@ 0xfa
 800e2a0:	0098      	lsls	r0, r3, #2
 800e2a2:	f7f1 ff7f 	bl	80001a4 <__udivsi3>
 800e2a6:	0003      	movs	r3, r0
 800e2a8:	0019      	movs	r1, r3
 800e2aa:	0020      	movs	r0, r4
 800e2ac:	f7f1 ff7a 	bl	80001a4 <__udivsi3>
 800e2b0:	0003      	movs	r3, r0
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f000 fce7 	bl	800ec86 <HAL_SYSTICK_Config>
 800e2b8:	1e03      	subs	r3, r0, #0
 800e2ba:	d001      	beq.n	800e2c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e00f      	b.n	800e2e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2b03      	cmp	r3, #3
 800e2c4:	d80b      	bhi.n	800e2de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e2c6:	6879      	ldr	r1, [r7, #4]
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	425b      	negs	r3, r3
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	0018      	movs	r0, r3
 800e2d0:	f000 fcb4 	bl	800ec3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e2d4:	4b06      	ldr	r3, [pc, #24]	@ (800e2f0 <HAL_InitTick+0x64>)
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e000      	b.n	800e2e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800e2de:	2301      	movs	r3, #1
}
 800e2e0:	0018      	movs	r0, r3
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	b003      	add	sp, #12
 800e2e6:	bd90      	pop	{r4, r7, pc}
 800e2e8:	200000c8 	.word	0x200000c8
 800e2ec:	200000dc 	.word	0x200000dc
 800e2f0:	200000d8 	.word	0x200000d8

0800e2f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e2f8:	4b05      	ldr	r3, [pc, #20]	@ (800e310 <HAL_IncTick+0x1c>)
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	001a      	movs	r2, r3
 800e2fe:	4b05      	ldr	r3, [pc, #20]	@ (800e314 <HAL_IncTick+0x20>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	18d2      	adds	r2, r2, r3
 800e304:	4b03      	ldr	r3, [pc, #12]	@ (800e314 <HAL_IncTick+0x20>)
 800e306:	601a      	str	r2, [r3, #0]
}
 800e308:	46c0      	nop			@ (mov r8, r8)
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	46c0      	nop			@ (mov r8, r8)
 800e310:	200000dc 	.word	0x200000dc
 800e314:	200024fc 	.word	0x200024fc

0800e318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	af00      	add	r7, sp, #0
  return uwTick;
 800e31c:	4b02      	ldr	r3, [pc, #8]	@ (800e328 <HAL_GetTick+0x10>)
 800e31e:	681b      	ldr	r3, [r3, #0]
}
 800e320:	0018      	movs	r0, r3
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	46c0      	nop			@ (mov r8, r8)
 800e328:	200024fc 	.word	0x200024fc

0800e32c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e334:	f7ff fff0 	bl	800e318 <HAL_GetTick>
 800e338:	0003      	movs	r3, r0
 800e33a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	3301      	adds	r3, #1
 800e344:	d005      	beq.n	800e352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e346:	4b0a      	ldr	r3, [pc, #40]	@ (800e370 <HAL_Delay+0x44>)
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	001a      	movs	r2, r3
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	189b      	adds	r3, r3, r2
 800e350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e352:	46c0      	nop			@ (mov r8, r8)
 800e354:	f7ff ffe0 	bl	800e318 <HAL_GetTick>
 800e358:	0002      	movs	r2, r0
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	429a      	cmp	r2, r3
 800e362:	d8f7      	bhi.n	800e354 <HAL_Delay+0x28>
  {
  }
}
 800e364:	46c0      	nop			@ (mov r8, r8)
 800e366:	46c0      	nop			@ (mov r8, r8)
 800e368:	46bd      	mov	sp, r7
 800e36a:	b004      	add	sp, #16
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	46c0      	nop			@ (mov r8, r8)
 800e370:	200000dc 	.word	0x200000dc

0800e374 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800e378:	4b04      	ldr	r3, [pc, #16]	@ (800e38c <HAL_SuspendTick+0x18>)
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	4b03      	ldr	r3, [pc, #12]	@ (800e38c <HAL_SuspendTick+0x18>)
 800e37e:	2102      	movs	r1, #2
 800e380:	438a      	bics	r2, r1
 800e382:	601a      	str	r2, [r3, #0]
}
 800e384:	46c0      	nop			@ (mov r8, r8)
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	46c0      	nop			@ (mov r8, r8)
 800e38c:	e000e010 	.word	0xe000e010

0800e390 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800e394:	4b04      	ldr	r3, [pc, #16]	@ (800e3a8 <HAL_ResumeTick+0x18>)
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	4b03      	ldr	r3, [pc, #12]	@ (800e3a8 <HAL_ResumeTick+0x18>)
 800e39a:	2102      	movs	r1, #2
 800e39c:	430a      	orrs	r2, r1
 800e39e:	601a      	str	r2, [r3, #0]
}
 800e3a0:	46c0      	nop			@ (mov r8, r8)
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	46c0      	nop			@ (mov r8, r8)
 800e3a8:	e000e010 	.word	0xe000e010

0800e3ac <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800e3b0:	4b02      	ldr	r3, [pc, #8]	@ (800e3bc <HAL_GetUIDw0+0x10>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
}
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	46c0      	nop			@ (mov r8, r8)
 800e3bc:	1ff80050 	.word	0x1ff80050

0800e3c0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800e3c4:	4b02      	ldr	r3, [pc, #8]	@ (800e3d0 <HAL_GetUIDw1+0x10>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
}
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	46c0      	nop			@ (mov r8, r8)
 800e3d0:	1ff80054 	.word	0x1ff80054

0800e3d4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800e3d8:	4b02      	ldr	r3, [pc, #8]	@ (800e3e4 <HAL_GetUIDw2+0x10>)
 800e3da:	681b      	ldr	r3, [r3, #0]
}
 800e3dc:	0018      	movs	r0, r3
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	46c0      	nop			@ (mov r8, r8)
 800e3e4:	1ff80064 	.word	0x1ff80064

0800e3e8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e159      	b.n	800e6ae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d10a      	bne.n	800e418 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2250      	movs	r2, #80	@ 0x50
 800e40c:	2100      	movs	r1, #0
 800e40e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	0018      	movs	r0, r3
 800e414:	f7f8 fdac 	bl	8006f70 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e41c:	2210      	movs	r2, #16
 800e41e:	4013      	ands	r3, r2
 800e420:	2b10      	cmp	r3, #16
 800e422:	d005      	beq.n	800e430 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	2204      	movs	r2, #4
 800e42c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e42e:	d00b      	beq.n	800e448 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e434:	2210      	movs	r2, #16
 800e436:	431a      	orrs	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2250      	movs	r2, #80	@ 0x50
 800e440:	2100      	movs	r1, #0
 800e442:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	e132      	b.n	800e6ae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e44c:	4a9a      	ldr	r2, [pc, #616]	@ (800e6b8 <HAL_ADC_Init+0x2d0>)
 800e44e:	4013      	ands	r3, r2
 800e450:	2202      	movs	r2, #2
 800e452:	431a      	orrs	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	2203      	movs	r2, #3
 800e460:	4013      	ands	r3, r2
 800e462:	2b01      	cmp	r3, #1
 800e464:	d108      	bne.n	800e478 <HAL_ADC_Init+0x90>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2201      	movs	r2, #1
 800e46e:	4013      	ands	r3, r2
 800e470:	2b01      	cmp	r3, #1
 800e472:	d101      	bne.n	800e478 <HAL_ADC_Init+0x90>
 800e474:	2301      	movs	r3, #1
 800e476:	e000      	b.n	800e47a <HAL_ADC_Init+0x92>
 800e478:	2300      	movs	r3, #0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d149      	bne.n	800e512 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	23c0      	movs	r3, #192	@ 0xc0
 800e484:	061b      	lsls	r3, r3, #24
 800e486:	429a      	cmp	r2, r3
 800e488:	d00b      	beq.n	800e4a2 <HAL_ADC_Init+0xba>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	2380      	movs	r3, #128	@ 0x80
 800e490:	05db      	lsls	r3, r3, #23
 800e492:	429a      	cmp	r2, r3
 800e494:	d005      	beq.n	800e4a2 <HAL_ADC_Init+0xba>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	685a      	ldr	r2, [r3, #4]
 800e49a:	2380      	movs	r3, #128	@ 0x80
 800e49c:	061b      	lsls	r3, r3, #24
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d111      	bne.n	800e4c6 <HAL_ADC_Init+0xde>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	691a      	ldr	r2, [r3, #16]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	0092      	lsls	r2, r2, #2
 800e4ae:	0892      	lsrs	r2, r2, #2
 800e4b0:	611a      	str	r2, [r3, #16]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	6919      	ldr	r1, [r3, #16]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	430a      	orrs	r2, r1
 800e4c2:	611a      	str	r2, [r3, #16]
 800e4c4:	e014      	b.n	800e4f0 <HAL_ADC_Init+0x108>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	691a      	ldr	r2, [r3, #16]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	0092      	lsls	r2, r2, #2
 800e4d2:	0892      	lsrs	r2, r2, #2
 800e4d4:	611a      	str	r2, [r3, #16]
 800e4d6:	4b79      	ldr	r3, [pc, #484]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	4b78      	ldr	r3, [pc, #480]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e4dc:	4978      	ldr	r1, [pc, #480]	@ (800e6c0 <HAL_ADC_Init+0x2d8>)
 800e4de:	400a      	ands	r2, r1
 800e4e0:	601a      	str	r2, [r3, #0]
 800e4e2:	4b76      	ldr	r3, [pc, #472]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e4e4:	6819      	ldr	r1, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685a      	ldr	r2, [r3, #4]
 800e4ea:	4b74      	ldr	r3, [pc, #464]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68da      	ldr	r2, [r3, #12]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2118      	movs	r1, #24
 800e4fc:	438a      	bics	r2, r1
 800e4fe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	68d9      	ldr	r1, [r3, #12]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689a      	ldr	r2, [r3, #8]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	430a      	orrs	r2, r1
 800e510:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e512:	4b6a      	ldr	r3, [pc, #424]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	4b69      	ldr	r3, [pc, #420]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e518:	496a      	ldr	r1, [pc, #424]	@ (800e6c4 <HAL_ADC_Init+0x2dc>)
 800e51a:	400a      	ands	r2, r1
 800e51c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e51e:	4b67      	ldr	r3, [pc, #412]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e520:	6819      	ldr	r1, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e526:	065a      	lsls	r2, r3, #25
 800e528:	4b64      	ldr	r3, [pc, #400]	@ (800e6bc <HAL_ADC_Init+0x2d4>)
 800e52a:	430a      	orrs	r2, r1
 800e52c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	689a      	ldr	r2, [r3, #8]
 800e534:	2380      	movs	r3, #128	@ 0x80
 800e536:	055b      	lsls	r3, r3, #21
 800e538:	4013      	ands	r3, r2
 800e53a:	d108      	bne.n	800e54e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	689a      	ldr	r2, [r3, #8]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2180      	movs	r1, #128	@ 0x80
 800e548:	0549      	lsls	r1, r1, #21
 800e54a:	430a      	orrs	r2, r1
 800e54c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68da      	ldr	r2, [r3, #12]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	495b      	ldr	r1, [pc, #364]	@ (800e6c8 <HAL_ADC_Init+0x2e0>)
 800e55a:	400a      	ands	r2, r1
 800e55c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	68d9      	ldr	r1, [r3, #12]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	691b      	ldr	r3, [r3, #16]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d101      	bne.n	800e574 <HAL_ADC_Init+0x18c>
 800e570:	2304      	movs	r3, #4
 800e572:	e000      	b.n	800e576 <HAL_ADC_Init+0x18e>
 800e574:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e576:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2020      	movs	r0, #32
 800e57c:	5c1b      	ldrb	r3, [r3, r0]
 800e57e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e580:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	202c      	movs	r0, #44	@ 0x2c
 800e586:	5c1b      	ldrb	r3, [r3, r0]
 800e588:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e58a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e590:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	699b      	ldr	r3, [r3, #24]
 800e596:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e598:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	69db      	ldr	r3, [r3, #28]
 800e59e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e5a0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	430a      	orrs	r2, r1
 800e5a8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5ae:	23c2      	movs	r3, #194	@ 0xc2
 800e5b0:	33ff      	adds	r3, #255	@ 0xff
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d00b      	beq.n	800e5ce <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	68d9      	ldr	r1, [r3, #12]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e5c4:	431a      	orrs	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	430a      	orrs	r2, r1
 800e5cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2221      	movs	r2, #33	@ 0x21
 800e5d2:	5c9b      	ldrb	r3, [r3, r2]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d11a      	bne.n	800e60e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	5c9b      	ldrb	r3, [r3, r2]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d109      	bne.n	800e5f6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68da      	ldr	r2, [r3, #12]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2180      	movs	r1, #128	@ 0x80
 800e5ee:	0249      	lsls	r1, r1, #9
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	60da      	str	r2, [r3, #12]
 800e5f4:	e00b      	b.n	800e60e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5fa:	2220      	movs	r2, #32
 800e5fc:	431a      	orrs	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e606:	2201      	movs	r2, #1
 800e608:	431a      	orrs	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e612:	2b01      	cmp	r3, #1
 800e614:	d11f      	bne.n	800e656 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	691a      	ldr	r2, [r3, #16]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	492a      	ldr	r1, [pc, #168]	@ (800e6cc <HAL_ADC_Init+0x2e4>)
 800e622:	400a      	ands	r2, r1
 800e624:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6919      	ldr	r1, [r3, #16]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e634:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e63a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	430a      	orrs	r2, r1
 800e642:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	691a      	ldr	r2, [r3, #16]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2101      	movs	r1, #1
 800e650:	430a      	orrs	r2, r1
 800e652:	611a      	str	r2, [r3, #16]
 800e654:	e00e      	b.n	800e674 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	2201      	movs	r2, #1
 800e65e:	4013      	ands	r3, r2
 800e660:	2b01      	cmp	r3, #1
 800e662:	d107      	bne.n	800e674 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	691a      	ldr	r2, [r3, #16]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2101      	movs	r1, #1
 800e670:	438a      	bics	r2, r1
 800e672:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	695a      	ldr	r2, [r3, #20]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2107      	movs	r1, #7
 800e680:	438a      	bics	r2, r1
 800e682:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	6959      	ldr	r1, [r3, #20]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	430a      	orrs	r2, r1
 800e694:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2200      	movs	r2, #0
 800e69a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6a0:	2203      	movs	r2, #3
 800e6a2:	4393      	bics	r3, r2
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	431a      	orrs	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	0018      	movs	r0, r3
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	b002      	add	sp, #8
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	46c0      	nop			@ (mov r8, r8)
 800e6b8:	fffffefd 	.word	0xfffffefd
 800e6bc:	40012708 	.word	0x40012708
 800e6c0:	ffc3ffff 	.word	0xffc3ffff
 800e6c4:	fdffffff 	.word	0xfdffffff
 800e6c8:	fffe0219 	.word	0xfffe0219
 800e6cc:	fffffc03 	.word	0xfffffc03

0800e6d0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800e6d0:	b590      	push	{r4, r7, lr}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e6d8:	230f      	movs	r3, #15
 800e6da:	18fb      	adds	r3, r7, r3
 800e6dc:	2200      	movs	r2, #0
 800e6de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	2204      	movs	r2, #4
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	d138      	bne.n	800e75e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2250      	movs	r2, #80	@ 0x50
 800e6f0:	5c9b      	ldrb	r3, [r3, r2]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d101      	bne.n	800e6fa <HAL_ADC_Start+0x2a>
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	e038      	b.n	800e76c <HAL_ADC_Start+0x9c>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2250      	movs	r2, #80	@ 0x50
 800e6fe:	2101      	movs	r1, #1
 800e700:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	69db      	ldr	r3, [r3, #28]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d007      	beq.n	800e71a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800e70a:	230f      	movs	r3, #15
 800e70c:	18fc      	adds	r4, r7, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	0018      	movs	r0, r3
 800e712:	f000 f95f 	bl	800e9d4 <ADC_Enable>
 800e716:	0003      	movs	r3, r0
 800e718:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800e71a:	230f      	movs	r3, #15
 800e71c:	18fb      	adds	r3, r7, r3
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d120      	bne.n	800e766 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e728:	4a12      	ldr	r2, [pc, #72]	@ (800e774 <HAL_ADC_Start+0xa4>)
 800e72a:	4013      	ands	r3, r2
 800e72c:	2280      	movs	r2, #128	@ 0x80
 800e72e:	0052      	lsls	r2, r2, #1
 800e730:	431a      	orrs	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2250      	movs	r2, #80	@ 0x50
 800e740:	2100      	movs	r1, #0
 800e742:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	221c      	movs	r2, #28
 800e74a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	689a      	ldr	r2, [r3, #8]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2104      	movs	r1, #4
 800e758:	430a      	orrs	r2, r1
 800e75a:	609a      	str	r2, [r3, #8]
 800e75c:	e003      	b.n	800e766 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e75e:	230f      	movs	r3, #15
 800e760:	18fb      	adds	r3, r7, r3
 800e762:	2202      	movs	r2, #2
 800e764:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800e766:	230f      	movs	r3, #15
 800e768:	18fb      	adds	r3, r7, r3
 800e76a:	781b      	ldrb	r3, [r3, #0]
}
 800e76c:	0018      	movs	r0, r3
 800e76e:	46bd      	mov	sp, r7
 800e770:	b005      	add	sp, #20
 800e772:	bd90      	pop	{r4, r7, pc}
 800e774:	fffff0fe 	.word	0xfffff0fe

0800e778 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e786:	2300      	movs	r3, #0
 800e788:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	2b08      	cmp	r3, #8
 800e790:	d102      	bne.n	800e798 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e792:	2308      	movs	r3, #8
 800e794:	60fb      	str	r3, [r7, #12]
 800e796:	e014      	b.n	800e7c2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d10b      	bne.n	800e7be <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7aa:	2220      	movs	r2, #32
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2250      	movs	r2, #80	@ 0x50
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e072      	b.n	800e8a4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e7be:	230c      	movs	r3, #12
 800e7c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e7c2:	f7ff fda9 	bl	800e318 <HAL_GetTick>
 800e7c6:	0003      	movs	r3, r0
 800e7c8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e7ca:	e01f      	b.n	800e80c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	d01c      	beq.n	800e80c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d007      	beq.n	800e7e8 <HAL_ADC_PollForConversion+0x70>
 800e7d8:	f7ff fd9e 	bl	800e318 <HAL_GetTick>
 800e7dc:	0002      	movs	r2, r0
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d211      	bcs.n	800e80c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	4013      	ands	r3, r2
 800e7f2:	d10b      	bne.n	800e80c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7f8:	2204      	movs	r2, #4
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2250      	movs	r2, #80	@ 0x50
 800e804:	2100      	movs	r1, #0
 800e806:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e808:	2303      	movs	r3, #3
 800e80a:	e04b      	b.n	800e8a4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4013      	ands	r3, r2
 800e816:	d0d9      	beq.n	800e7cc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e81c:	2280      	movs	r2, #128	@ 0x80
 800e81e:	0092      	lsls	r2, r2, #2
 800e820:	431a      	orrs	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68da      	ldr	r2, [r3, #12]
 800e82c:	23c0      	movs	r3, #192	@ 0xc0
 800e82e:	011b      	lsls	r3, r3, #4
 800e830:	4013      	ands	r3, r2
 800e832:	d12e      	bne.n	800e892 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2220      	movs	r2, #32
 800e838:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d129      	bne.n	800e892 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2208      	movs	r2, #8
 800e846:	4013      	ands	r3, r2
 800e848:	2b08      	cmp	r3, #8
 800e84a:	d122      	bne.n	800e892 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	2204      	movs	r2, #4
 800e854:	4013      	ands	r3, r2
 800e856:	d110      	bne.n	800e87a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	685a      	ldr	r2, [r3, #4]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	210c      	movs	r1, #12
 800e864:	438a      	bics	r2, r1
 800e866:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e86c:	4a0f      	ldr	r2, [pc, #60]	@ (800e8ac <HAL_ADC_PollForConversion+0x134>)
 800e86e:	4013      	ands	r3, r2
 800e870:	2201      	movs	r2, #1
 800e872:	431a      	orrs	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	655a      	str	r2, [r3, #84]	@ 0x54
 800e878:	e00b      	b.n	800e892 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e87e:	2220      	movs	r2, #32
 800e880:	431a      	orrs	r2, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e88a:	2201      	movs	r2, #1
 800e88c:	431a      	orrs	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d103      	bne.n	800e8a2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	220c      	movs	r2, #12
 800e8a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e8a2:	2300      	movs	r3, #0
}
 800e8a4:	0018      	movs	r0, r3
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	b004      	add	sp, #16
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	fffffefe 	.word	0xfffffefe

0800e8b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e8be:	0018      	movs	r0, r3
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	b002      	add	sp, #8
 800e8c4:	bd80      	pop	{r7, pc}
	...

0800e8c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2250      	movs	r2, #80	@ 0x50
 800e8d6:	5c9b      	ldrb	r3, [r3, r2]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d101      	bne.n	800e8e0 <HAL_ADC_ConfigChannel+0x18>
 800e8dc:	2302      	movs	r3, #2
 800e8de:	e06c      	b.n	800e9ba <HAL_ADC_ConfigChannel+0xf2>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2250      	movs	r2, #80	@ 0x50
 800e8e4:	2101      	movs	r1, #1
 800e8e6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	2204      	movs	r2, #4
 800e8f0:	4013      	ands	r3, r2
 800e8f2:	d00b      	beq.n	800e90c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f8:	2220      	movs	r2, #32
 800e8fa:	431a      	orrs	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2250      	movs	r2, #80	@ 0x50
 800e904:	2100      	movs	r1, #0
 800e906:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	e056      	b.n	800e9ba <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	4a2c      	ldr	r2, [pc, #176]	@ (800e9c4 <HAL_ADC_ConfigChannel+0xfc>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d028      	beq.n	800e968 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	035b      	lsls	r3, r3, #13
 800e922:	0b5a      	lsrs	r2, r3, #13
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	430a      	orrs	r2, r1
 800e92a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	2380      	movs	r3, #128	@ 0x80
 800e932:	02db      	lsls	r3, r3, #11
 800e934:	4013      	ands	r3, r2
 800e936:	d009      	beq.n	800e94c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e938:	4b23      	ldr	r3, [pc, #140]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	4b22      	ldr	r3, [pc, #136]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e93e:	2180      	movs	r1, #128	@ 0x80
 800e940:	0409      	lsls	r1, r1, #16
 800e942:	430a      	orrs	r2, r1
 800e944:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e946:	200a      	movs	r0, #10
 800e948:	f000 f8ac 	bl	800eaa4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	2380      	movs	r3, #128	@ 0x80
 800e952:	029b      	lsls	r3, r3, #10
 800e954:	4013      	ands	r3, r2
 800e956:	d02b      	beq.n	800e9b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e958:	4b1b      	ldr	r3, [pc, #108]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	4b1a      	ldr	r3, [pc, #104]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e95e:	2180      	movs	r1, #128	@ 0x80
 800e960:	03c9      	lsls	r1, r1, #15
 800e962:	430a      	orrs	r2, r1
 800e964:	601a      	str	r2, [r3, #0]
 800e966:	e023      	b.n	800e9b0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	035b      	lsls	r3, r3, #13
 800e974:	0b5b      	lsrs	r3, r3, #13
 800e976:	43d9      	mvns	r1, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	400a      	ands	r2, r1
 800e97e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	2380      	movs	r3, #128	@ 0x80
 800e986:	02db      	lsls	r3, r3, #11
 800e988:	4013      	ands	r3, r2
 800e98a:	d005      	beq.n	800e998 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e98c:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e992:	490e      	ldr	r1, [pc, #56]	@ (800e9cc <HAL_ADC_ConfigChannel+0x104>)
 800e994:	400a      	ands	r2, r1
 800e996:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	2380      	movs	r3, #128	@ 0x80
 800e99e:	029b      	lsls	r3, r3, #10
 800e9a0:	4013      	ands	r3, r2
 800e9a2:	d005      	beq.n	800e9b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800e9a4:	4b08      	ldr	r3, [pc, #32]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	4b07      	ldr	r3, [pc, #28]	@ (800e9c8 <HAL_ADC_ConfigChannel+0x100>)
 800e9aa:	4909      	ldr	r1, [pc, #36]	@ (800e9d0 <HAL_ADC_ConfigChannel+0x108>)
 800e9ac:	400a      	ands	r2, r1
 800e9ae:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2250      	movs	r2, #80	@ 0x50
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	0018      	movs	r0, r3
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	b002      	add	sp, #8
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	46c0      	nop			@ (mov r8, r8)
 800e9c4:	00001001 	.word	0x00001001
 800e9c8:	40012708 	.word	0x40012708
 800e9cc:	ff7fffff 	.word	0xff7fffff
 800e9d0:	ffbfffff 	.word	0xffbfffff

0800e9d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	2203      	movs	r2, #3
 800e9e8:	4013      	ands	r3, r2
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d108      	bne.n	800ea00 <ADC_Enable+0x2c>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	d101      	bne.n	800ea00 <ADC_Enable+0x2c>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e000      	b.n	800ea02 <ADC_Enable+0x2e>
 800ea00:	2300      	movs	r3, #0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d146      	bne.n	800ea94 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	4a24      	ldr	r2, [pc, #144]	@ (800eaa0 <ADC_Enable+0xcc>)
 800ea0e:	4013      	ands	r3, r2
 800ea10:	d00d      	beq.n	800ea2e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea16:	2210      	movs	r2, #16
 800ea18:	431a      	orrs	r2, r3
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea22:	2201      	movs	r2, #1
 800ea24:	431a      	orrs	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e033      	b.n	800ea96 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	689a      	ldr	r2, [r3, #8]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2101      	movs	r1, #1
 800ea3a:	430a      	orrs	r2, r1
 800ea3c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800ea3e:	2001      	movs	r0, #1
 800ea40:	f000 f830 	bl	800eaa4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800ea44:	f7ff fc68 	bl	800e318 <HAL_GetTick>
 800ea48:	0003      	movs	r3, r0
 800ea4a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ea4c:	e01b      	b.n	800ea86 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ea4e:	f7ff fc63 	bl	800e318 <HAL_GetTick>
 800ea52:	0002      	movs	r2, r0
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	2b0a      	cmp	r3, #10
 800ea5a:	d914      	bls.n	800ea86 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2201      	movs	r2, #1
 800ea64:	4013      	ands	r3, r2
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d00d      	beq.n	800ea86 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea6e:	2210      	movs	r2, #16
 800ea70:	431a      	orrs	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	431a      	orrs	r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ea82:	2301      	movs	r3, #1
 800ea84:	e007      	b.n	800ea96 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	4013      	ands	r3, r2
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d1dc      	bne.n	800ea4e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	0018      	movs	r0, r3
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	b004      	add	sp, #16
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	46c0      	nop			@ (mov r8, r8)
 800eaa0:	80000017 	.word	0x80000017

0800eaa4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800eaac:	4b0b      	ldr	r3, [pc, #44]	@ (800eadc <ADC_DelayMicroSecond+0x38>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	490b      	ldr	r1, [pc, #44]	@ (800eae0 <ADC_DelayMicroSecond+0x3c>)
 800eab2:	0018      	movs	r0, r3
 800eab4:	f7f1 fb76 	bl	80001a4 <__udivsi3>
 800eab8:	0003      	movs	r3, r0
 800eaba:	001a      	movs	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4353      	muls	r3, r2
 800eac0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800eac2:	e002      	b.n	800eaca <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	3b01      	subs	r3, #1
 800eac8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1f9      	bne.n	800eac4 <ADC_DelayMicroSecond+0x20>
  }
}
 800ead0:	46c0      	nop			@ (mov r8, r8)
 800ead2:	46c0      	nop			@ (mov r8, r8)
 800ead4:	46bd      	mov	sp, r7
 800ead6:	b004      	add	sp, #16
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	46c0      	nop			@ (mov r8, r8)
 800eadc:	200000c8 	.word	0x200000c8
 800eae0:	000f4240 	.word	0x000f4240

0800eae4 <__NVIC_EnableIRQ>:
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	0002      	movs	r2, r0
 800eaec:	1dfb      	adds	r3, r7, #7
 800eaee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800eaf0:	1dfb      	adds	r3, r7, #7
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b7f      	cmp	r3, #127	@ 0x7f
 800eaf6:	d809      	bhi.n	800eb0c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eaf8:	1dfb      	adds	r3, r7, #7
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	001a      	movs	r2, r3
 800eafe:	231f      	movs	r3, #31
 800eb00:	401a      	ands	r2, r3
 800eb02:	4b04      	ldr	r3, [pc, #16]	@ (800eb14 <__NVIC_EnableIRQ+0x30>)
 800eb04:	2101      	movs	r1, #1
 800eb06:	4091      	lsls	r1, r2
 800eb08:	000a      	movs	r2, r1
 800eb0a:	601a      	str	r2, [r3, #0]
}
 800eb0c:	46c0      	nop			@ (mov r8, r8)
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	b002      	add	sp, #8
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	e000e100 	.word	0xe000e100

0800eb18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800eb18:	b590      	push	{r4, r7, lr}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	0002      	movs	r2, r0
 800eb20:	6039      	str	r1, [r7, #0]
 800eb22:	1dfb      	adds	r3, r7, #7
 800eb24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800eb26:	1dfb      	adds	r3, r7, #7
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb2c:	d828      	bhi.n	800eb80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb2e:	4a2f      	ldr	r2, [pc, #188]	@ (800ebec <__NVIC_SetPriority+0xd4>)
 800eb30:	1dfb      	adds	r3, r7, #7
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	b25b      	sxtb	r3, r3
 800eb36:	089b      	lsrs	r3, r3, #2
 800eb38:	33c0      	adds	r3, #192	@ 0xc0
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	589b      	ldr	r3, [r3, r2]
 800eb3e:	1dfa      	adds	r2, r7, #7
 800eb40:	7812      	ldrb	r2, [r2, #0]
 800eb42:	0011      	movs	r1, r2
 800eb44:	2203      	movs	r2, #3
 800eb46:	400a      	ands	r2, r1
 800eb48:	00d2      	lsls	r2, r2, #3
 800eb4a:	21ff      	movs	r1, #255	@ 0xff
 800eb4c:	4091      	lsls	r1, r2
 800eb4e:	000a      	movs	r2, r1
 800eb50:	43d2      	mvns	r2, r2
 800eb52:	401a      	ands	r2, r3
 800eb54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	019b      	lsls	r3, r3, #6
 800eb5a:	22ff      	movs	r2, #255	@ 0xff
 800eb5c:	401a      	ands	r2, r3
 800eb5e:	1dfb      	adds	r3, r7, #7
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	0018      	movs	r0, r3
 800eb64:	2303      	movs	r3, #3
 800eb66:	4003      	ands	r3, r0
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb6c:	481f      	ldr	r0, [pc, #124]	@ (800ebec <__NVIC_SetPriority+0xd4>)
 800eb6e:	1dfb      	adds	r3, r7, #7
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	b25b      	sxtb	r3, r3
 800eb74:	089b      	lsrs	r3, r3, #2
 800eb76:	430a      	orrs	r2, r1
 800eb78:	33c0      	adds	r3, #192	@ 0xc0
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800eb7e:	e031      	b.n	800ebe4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800eb80:	4a1b      	ldr	r2, [pc, #108]	@ (800ebf0 <__NVIC_SetPriority+0xd8>)
 800eb82:	1dfb      	adds	r3, r7, #7
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	0019      	movs	r1, r3
 800eb88:	230f      	movs	r3, #15
 800eb8a:	400b      	ands	r3, r1
 800eb8c:	3b08      	subs	r3, #8
 800eb8e:	089b      	lsrs	r3, r3, #2
 800eb90:	3306      	adds	r3, #6
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	18d3      	adds	r3, r2, r3
 800eb96:	3304      	adds	r3, #4
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	1dfa      	adds	r2, r7, #7
 800eb9c:	7812      	ldrb	r2, [r2, #0]
 800eb9e:	0011      	movs	r1, r2
 800eba0:	2203      	movs	r2, #3
 800eba2:	400a      	ands	r2, r1
 800eba4:	00d2      	lsls	r2, r2, #3
 800eba6:	21ff      	movs	r1, #255	@ 0xff
 800eba8:	4091      	lsls	r1, r2
 800ebaa:	000a      	movs	r2, r1
 800ebac:	43d2      	mvns	r2, r2
 800ebae:	401a      	ands	r2, r3
 800ebb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	019b      	lsls	r3, r3, #6
 800ebb6:	22ff      	movs	r2, #255	@ 0xff
 800ebb8:	401a      	ands	r2, r3
 800ebba:	1dfb      	adds	r3, r7, #7
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	0018      	movs	r0, r3
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	4003      	ands	r3, r0
 800ebc4:	00db      	lsls	r3, r3, #3
 800ebc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ebc8:	4809      	ldr	r0, [pc, #36]	@ (800ebf0 <__NVIC_SetPriority+0xd8>)
 800ebca:	1dfb      	adds	r3, r7, #7
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	001c      	movs	r4, r3
 800ebd0:	230f      	movs	r3, #15
 800ebd2:	4023      	ands	r3, r4
 800ebd4:	3b08      	subs	r3, #8
 800ebd6:	089b      	lsrs	r3, r3, #2
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	3306      	adds	r3, #6
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	18c3      	adds	r3, r0, r3
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	601a      	str	r2, [r3, #0]
}
 800ebe4:	46c0      	nop			@ (mov r8, r8)
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	b003      	add	sp, #12
 800ebea:	bd90      	pop	{r4, r7, pc}
 800ebec:	e000e100 	.word	0xe000e100
 800ebf0:	e000ed00 	.word	0xe000ed00

0800ebf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	1e5a      	subs	r2, r3, #1
 800ec00:	2380      	movs	r3, #128	@ 0x80
 800ec02:	045b      	lsls	r3, r3, #17
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d301      	bcc.n	800ec0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e010      	b.n	800ec2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ec0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec38 <SysTick_Config+0x44>)
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	3a01      	subs	r2, #1
 800ec12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ec14:	2301      	movs	r3, #1
 800ec16:	425b      	negs	r3, r3
 800ec18:	2103      	movs	r1, #3
 800ec1a:	0018      	movs	r0, r3
 800ec1c:	f7ff ff7c 	bl	800eb18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ec20:	4b05      	ldr	r3, [pc, #20]	@ (800ec38 <SysTick_Config+0x44>)
 800ec22:	2200      	movs	r2, #0
 800ec24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ec26:	4b04      	ldr	r3, [pc, #16]	@ (800ec38 <SysTick_Config+0x44>)
 800ec28:	2207      	movs	r2, #7
 800ec2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	0018      	movs	r0, r3
 800ec30:	46bd      	mov	sp, r7
 800ec32:	b002      	add	sp, #8
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	46c0      	nop			@ (mov r8, r8)
 800ec38:	e000e010 	.word	0xe000e010

0800ec3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60b9      	str	r1, [r7, #8]
 800ec44:	607a      	str	r2, [r7, #4]
 800ec46:	210f      	movs	r1, #15
 800ec48:	187b      	adds	r3, r7, r1
 800ec4a:	1c02      	adds	r2, r0, #0
 800ec4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ec4e:	68ba      	ldr	r2, [r7, #8]
 800ec50:	187b      	adds	r3, r7, r1
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	b25b      	sxtb	r3, r3
 800ec56:	0011      	movs	r1, r2
 800ec58:	0018      	movs	r0, r3
 800ec5a:	f7ff ff5d 	bl	800eb18 <__NVIC_SetPriority>
}
 800ec5e:	46c0      	nop			@ (mov r8, r8)
 800ec60:	46bd      	mov	sp, r7
 800ec62:	b004      	add	sp, #16
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b082      	sub	sp, #8
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	0002      	movs	r2, r0
 800ec6e:	1dfb      	adds	r3, r7, #7
 800ec70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ec72:	1dfb      	adds	r3, r7, #7
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	b25b      	sxtb	r3, r3
 800ec78:	0018      	movs	r0, r3
 800ec7a:	f7ff ff33 	bl	800eae4 <__NVIC_EnableIRQ>
}
 800ec7e:	46c0      	nop			@ (mov r8, r8)
 800ec80:	46bd      	mov	sp, r7
 800ec82:	b002      	add	sp, #8
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	0018      	movs	r0, r3
 800ec92:	f7ff ffaf 	bl	800ebf4 <SysTick_Config>
 800ec96:	0003      	movs	r3, r0
}
 800ec98:	0018      	movs	r0, r3
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	b002      	add	sp, #8
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e061      	b.n	800ed76 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a32      	ldr	r2, [pc, #200]	@ (800ed80 <HAL_DMA_Init+0xe0>)
 800ecb8:	4694      	mov	ip, r2
 800ecba:	4463      	add	r3, ip
 800ecbc:	2114      	movs	r1, #20
 800ecbe:	0018      	movs	r0, r3
 800ecc0:	f7f1 fa70 	bl	80001a4 <__udivsi3>
 800ecc4:	0003      	movs	r3, r0
 800ecc6:	009a      	lsls	r2, r3, #2
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a2d      	ldr	r2, [pc, #180]	@ (800ed84 <HAL_DMA_Init+0xe4>)
 800ecd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2225      	movs	r2, #37	@ 0x25
 800ecd6:	2102      	movs	r1, #2
 800ecd8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	4a28      	ldr	r2, [pc, #160]	@ (800ed88 <HAL_DMA_Init+0xe8>)
 800ece6:	4013      	ands	r3, r2
 800ece8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ecf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ecfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	699b      	ldr	r3, [r3, #24]
 800ed04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ed0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a1b      	ldr	r3, [r3, #32]
 800ed10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ed12:	68fa      	ldr	r2, [r7, #12]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68fa      	ldr	r2, [r7, #12]
 800ed1e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	689a      	ldr	r2, [r3, #8]
 800ed24:	2380      	movs	r3, #128	@ 0x80
 800ed26:	01db      	lsls	r3, r3, #7
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d018      	beq.n	800ed5e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ed2c:	4b17      	ldr	r3, [pc, #92]	@ (800ed8c <HAL_DMA_Init+0xec>)
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed34:	211c      	movs	r1, #28
 800ed36:	400b      	ands	r3, r1
 800ed38:	210f      	movs	r1, #15
 800ed3a:	4099      	lsls	r1, r3
 800ed3c:	000b      	movs	r3, r1
 800ed3e:	43d9      	mvns	r1, r3
 800ed40:	4b12      	ldr	r3, [pc, #72]	@ (800ed8c <HAL_DMA_Init+0xec>)
 800ed42:	400a      	ands	r2, r1
 800ed44:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ed46:	4b11      	ldr	r3, [pc, #68]	@ (800ed8c <HAL_DMA_Init+0xec>)
 800ed48:	6819      	ldr	r1, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	685a      	ldr	r2, [r3, #4]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed52:	201c      	movs	r0, #28
 800ed54:	4003      	ands	r3, r0
 800ed56:	409a      	lsls	r2, r3
 800ed58:	4b0c      	ldr	r3, [pc, #48]	@ (800ed8c <HAL_DMA_Init+0xec>)
 800ed5a:	430a      	orrs	r2, r1
 800ed5c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2225      	movs	r2, #37	@ 0x25
 800ed68:	2101      	movs	r1, #1
 800ed6a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2224      	movs	r2, #36	@ 0x24
 800ed70:	2100      	movs	r1, #0
 800ed72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ed74:	2300      	movs	r3, #0
}
 800ed76:	0018      	movs	r0, r3
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	b004      	add	sp, #16
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	46c0      	nop			@ (mov r8, r8)
 800ed80:	bffdfff8 	.word	0xbffdfff8
 800ed84:	40020000 	.word	0x40020000
 800ed88:	ffff800f 	.word	0xffff800f
 800ed8c:	400200a8 	.word	0x400200a8

0800ed90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed9e:	2317      	movs	r3, #23
 800eda0:	18fb      	adds	r3, r7, r3
 800eda2:	2200      	movs	r2, #0
 800eda4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2224      	movs	r2, #36	@ 0x24
 800edaa:	5c9b      	ldrb	r3, [r3, r2]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d101      	bne.n	800edb4 <HAL_DMA_Start_IT+0x24>
 800edb0:	2302      	movs	r3, #2
 800edb2:	e04f      	b.n	800ee54 <HAL_DMA_Start_IT+0xc4>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2224      	movs	r2, #36	@ 0x24
 800edb8:	2101      	movs	r1, #1
 800edba:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2225      	movs	r2, #37	@ 0x25
 800edc0:	5c9b      	ldrb	r3, [r3, r2]
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d13a      	bne.n	800ee3e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2225      	movs	r2, #37	@ 0x25
 800edcc:	2102      	movs	r1, #2
 800edce:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2101      	movs	r1, #1
 800ede2:	438a      	bics	r2, r1
 800ede4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	68b9      	ldr	r1, [r7, #8]
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f000 f976 	bl	800f0de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d008      	beq.n	800ee0c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	210e      	movs	r1, #14
 800ee06:	430a      	orrs	r2, r1
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	e00f      	b.n	800ee2c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2104      	movs	r1, #4
 800ee18:	438a      	bics	r2, r1
 800ee1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	210a      	movs	r1, #10
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	681a      	ldr	r2, [r3, #0]
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	2101      	movs	r1, #1
 800ee38:	430a      	orrs	r2, r1
 800ee3a:	601a      	str	r2, [r3, #0]
 800ee3c:	e007      	b.n	800ee4e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2224      	movs	r2, #36	@ 0x24
 800ee42:	2100      	movs	r1, #0
 800ee44:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800ee46:	2317      	movs	r3, #23
 800ee48:	18fb      	adds	r3, r7, r3
 800ee4a:	2202      	movs	r2, #2
 800ee4c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ee4e:	2317      	movs	r3, #23
 800ee50:	18fb      	adds	r3, r7, r3
 800ee52:	781b      	ldrb	r3, [r3, #0]
}
 800ee54:	0018      	movs	r0, r3
 800ee56:	46bd      	mov	sp, r7
 800ee58:	b006      	add	sp, #24
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee64:	230f      	movs	r3, #15
 800ee66:	18fb      	adds	r3, r7, r3
 800ee68:	2200      	movs	r2, #0
 800ee6a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2225      	movs	r2, #37	@ 0x25
 800ee70:	5c9b      	ldrb	r3, [r3, r2]
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d008      	beq.n	800ee8a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2204      	movs	r2, #4
 800ee7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2224      	movs	r2, #36	@ 0x24
 800ee82:	2100      	movs	r1, #0
 800ee84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ee86:	2301      	movs	r3, #1
 800ee88:	e024      	b.n	800eed4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	210e      	movs	r1, #14
 800ee96:	438a      	bics	r2, r1
 800ee98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2101      	movs	r1, #1
 800eea6:	438a      	bics	r2, r1
 800eea8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eeae:	221c      	movs	r2, #28
 800eeb0:	401a      	ands	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeb6:	2101      	movs	r1, #1
 800eeb8:	4091      	lsls	r1, r2
 800eeba:	000a      	movs	r2, r1
 800eebc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2225      	movs	r2, #37	@ 0x25
 800eec2:	2101      	movs	r1, #1
 800eec4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2224      	movs	r2, #36	@ 0x24
 800eeca:	2100      	movs	r1, #0
 800eecc:	5499      	strb	r1, [r3, r2]

    return status;
 800eece:	230f      	movs	r3, #15
 800eed0:	18fb      	adds	r3, r7, r3
 800eed2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eed4:	0018      	movs	r0, r3
 800eed6:	46bd      	mov	sp, r7
 800eed8:	b004      	add	sp, #16
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eee4:	210f      	movs	r1, #15
 800eee6:	187b      	adds	r3, r7, r1
 800eee8:	2200      	movs	r2, #0
 800eeea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2225      	movs	r2, #37	@ 0x25
 800eef0:	5c9b      	ldrb	r3, [r3, r2]
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	2b02      	cmp	r3, #2
 800eef6:	d006      	beq.n	800ef06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2204      	movs	r2, #4
 800eefc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800eefe:	187b      	adds	r3, r7, r1
 800ef00:	2201      	movs	r2, #1
 800ef02:	701a      	strb	r2, [r3, #0]
 800ef04:	e02a      	b.n	800ef5c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	210e      	movs	r1, #14
 800ef12:	438a      	bics	r2, r1
 800ef14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	2101      	movs	r1, #1
 800ef22:	438a      	bics	r2, r1
 800ef24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef2a:	221c      	movs	r2, #28
 800ef2c:	401a      	ands	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef32:	2101      	movs	r1, #1
 800ef34:	4091      	lsls	r1, r2
 800ef36:	000a      	movs	r2, r1
 800ef38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2225      	movs	r2, #37	@ 0x25
 800ef3e:	2101      	movs	r1, #1
 800ef40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2224      	movs	r2, #36	@ 0x24
 800ef46:	2100      	movs	r1, #0
 800ef48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d004      	beq.n	800ef5c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	0010      	movs	r0, r2
 800ef5a:	4798      	blx	r3
    }
  }
  return status;
 800ef5c:	230f      	movs	r3, #15
 800ef5e:	18fb      	adds	r3, r7, r3
 800ef60:	781b      	ldrb	r3, [r3, #0]
}
 800ef62:	0018      	movs	r0, r3
 800ef64:	46bd      	mov	sp, r7
 800ef66:	b004      	add	sp, #16
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b084      	sub	sp, #16
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef86:	221c      	movs	r2, #28
 800ef88:	4013      	ands	r3, r2
 800ef8a:	2204      	movs	r2, #4
 800ef8c:	409a      	lsls	r2, r3
 800ef8e:	0013      	movs	r3, r2
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	4013      	ands	r3, r2
 800ef94:	d026      	beq.n	800efe4 <HAL_DMA_IRQHandler+0x7a>
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2204      	movs	r2, #4
 800ef9a:	4013      	ands	r3, r2
 800ef9c:	d022      	beq.n	800efe4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2220      	movs	r2, #32
 800efa6:	4013      	ands	r3, r2
 800efa8:	d107      	bne.n	800efba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2104      	movs	r1, #4
 800efb6:	438a      	bics	r2, r1
 800efb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efbe:	221c      	movs	r2, #28
 800efc0:	401a      	ands	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efc6:	2104      	movs	r1, #4
 800efc8:	4091      	lsls	r1, r2
 800efca:	000a      	movs	r2, r1
 800efcc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d100      	bne.n	800efd8 <HAL_DMA_IRQHandler+0x6e>
 800efd6:	e071      	b.n	800f0bc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	0010      	movs	r0, r2
 800efe0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800efe2:	e06b      	b.n	800f0bc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efe8:	221c      	movs	r2, #28
 800efea:	4013      	ands	r3, r2
 800efec:	2202      	movs	r2, #2
 800efee:	409a      	lsls	r2, r3
 800eff0:	0013      	movs	r3, r2
 800eff2:	68fa      	ldr	r2, [r7, #12]
 800eff4:	4013      	ands	r3, r2
 800eff6:	d02d      	beq.n	800f054 <HAL_DMA_IRQHandler+0xea>
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2202      	movs	r2, #2
 800effc:	4013      	ands	r3, r2
 800effe:	d029      	beq.n	800f054 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2220      	movs	r2, #32
 800f008:	4013      	ands	r3, r2
 800f00a:	d10b      	bne.n	800f024 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	210a      	movs	r1, #10
 800f018:	438a      	bics	r2, r1
 800f01a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2225      	movs	r2, #37	@ 0x25
 800f020:	2101      	movs	r1, #1
 800f022:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f028:	221c      	movs	r2, #28
 800f02a:	401a      	ands	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f030:	2102      	movs	r1, #2
 800f032:	4091      	lsls	r1, r2
 800f034:	000a      	movs	r2, r1
 800f036:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2224      	movs	r2, #36	@ 0x24
 800f03c:	2100      	movs	r1, #0
 800f03e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f044:	2b00      	cmp	r3, #0
 800f046:	d039      	beq.n	800f0bc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	0010      	movs	r0, r2
 800f050:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f052:	e033      	b.n	800f0bc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f058:	221c      	movs	r2, #28
 800f05a:	4013      	ands	r3, r2
 800f05c:	2208      	movs	r2, #8
 800f05e:	409a      	lsls	r2, r3
 800f060:	0013      	movs	r3, r2
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	4013      	ands	r3, r2
 800f066:	d02a      	beq.n	800f0be <HAL_DMA_IRQHandler+0x154>
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	2208      	movs	r2, #8
 800f06c:	4013      	ands	r3, r2
 800f06e:	d026      	beq.n	800f0be <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	210e      	movs	r1, #14
 800f07c:	438a      	bics	r2, r1
 800f07e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f084:	221c      	movs	r2, #28
 800f086:	401a      	ands	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f08c:	2101      	movs	r1, #1
 800f08e:	4091      	lsls	r1, r2
 800f090:	000a      	movs	r2, r1
 800f092:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2225      	movs	r2, #37	@ 0x25
 800f09e:	2101      	movs	r1, #1
 800f0a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2224      	movs	r2, #36	@ 0x24
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d005      	beq.n	800f0be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	0010      	movs	r0, r2
 800f0ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f0bc:	46c0      	nop			@ (mov r8, r8)
 800f0be:	46c0      	nop			@ (mov r8, r8)
}
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	b004      	add	sp, #16
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b082      	sub	sp, #8
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2225      	movs	r2, #37	@ 0x25
 800f0d2:	5c9b      	ldrb	r3, [r3, r2]
 800f0d4:	b2db      	uxtb	r3, r3
}
 800f0d6:	0018      	movs	r0, r3
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	b002      	add	sp, #8
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b084      	sub	sp, #16
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	60f8      	str	r0, [r7, #12]
 800f0e6:	60b9      	str	r1, [r7, #8]
 800f0e8:	607a      	str	r2, [r7, #4]
 800f0ea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0f0:	221c      	movs	r2, #28
 800f0f2:	401a      	ands	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0f8:	2101      	movs	r1, #1
 800f0fa:	4091      	lsls	r1, r2
 800f0fc:	000a      	movs	r2, r1
 800f0fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	683a      	ldr	r2, [r7, #0]
 800f106:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	689b      	ldr	r3, [r3, #8]
 800f10c:	2b10      	cmp	r3, #16
 800f10e:	d108      	bne.n	800f122 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f120:	e007      	b.n	800f132 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	60da      	str	r2, [r3, #12]
}
 800f132:	46c0      	nop			@ (mov r8, r8)
 800f134:	46bd      	mov	sp, r7
 800f136:	b004      	add	sp, #16
 800f138:	bd80      	pop	{r7, pc}
	...

0800f13c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800f144:	f7ff f8e8 	bl	800e318 <HAL_GetTick>
 800f148:	0003      	movs	r3, r0
 800f14a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f14c:	e00f      	b.n	800f16e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	3301      	adds	r3, #1
 800f152:	d00c      	beq.n	800f16e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d007      	beq.n	800f16a <FLASH_WaitForLastOperation+0x2e>
 800f15a:	f7ff f8dd 	bl	800e318 <HAL_GetTick>
 800f15e:	0002      	movs	r2, r0
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	429a      	cmp	r2, r3
 800f168:	d201      	bcs.n	800f16e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800f16a:	2303      	movs	r3, #3
 800f16c:	e052      	b.n	800f214 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800f16e:	4b2b      	ldr	r3, [pc, #172]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f170:	699b      	ldr	r3, [r3, #24]
 800f172:	2201      	movs	r2, #1
 800f174:	4013      	ands	r3, r2
 800f176:	2b01      	cmp	r3, #1
 800f178:	d0e9      	beq.n	800f14e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800f17a:	4b28      	ldr	r3, [pc, #160]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f17c:	699b      	ldr	r3, [r3, #24]
 800f17e:	2202      	movs	r2, #2
 800f180:	4013      	ands	r3, r2
 800f182:	2b02      	cmp	r3, #2
 800f184:	d102      	bne.n	800f18c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f186:	4b25      	ldr	r3, [pc, #148]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f188:	2202      	movs	r2, #2
 800f18a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f18c:	4b23      	ldr	r3, [pc, #140]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f18e:	699a      	ldr	r2, [r3, #24]
 800f190:	2380      	movs	r3, #128	@ 0x80
 800f192:	005b      	lsls	r3, r3, #1
 800f194:	401a      	ands	r2, r3
 800f196:	2380      	movs	r3, #128	@ 0x80
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d035      	beq.n	800f20a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f19e:	4b1f      	ldr	r3, [pc, #124]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f1a0:	699a      	ldr	r2, [r3, #24]
 800f1a2:	2380      	movs	r3, #128	@ 0x80
 800f1a4:	009b      	lsls	r3, r3, #2
 800f1a6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800f1a8:	2380      	movs	r3, #128	@ 0x80
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d02c      	beq.n	800f20a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f1b0:	4b1a      	ldr	r3, [pc, #104]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f1b2:	699a      	ldr	r2, [r3, #24]
 800f1b4:	2380      	movs	r3, #128	@ 0x80
 800f1b6:	00db      	lsls	r3, r3, #3
 800f1b8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800f1ba:	2380      	movs	r3, #128	@ 0x80
 800f1bc:	00db      	lsls	r3, r3, #3
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d023      	beq.n	800f20a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f1c2:	4b16      	ldr	r3, [pc, #88]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f1c4:	699a      	ldr	r2, [r3, #24]
 800f1c6:	2380      	movs	r3, #128	@ 0x80
 800f1c8:	011b      	lsls	r3, r3, #4
 800f1ca:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800f1cc:	2380      	movs	r3, #128	@ 0x80
 800f1ce:	011b      	lsls	r3, r3, #4
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d01a      	beq.n	800f20a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f1d4:	4b11      	ldr	r3, [pc, #68]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f1d6:	699a      	ldr	r2, [r3, #24]
 800f1d8:	2380      	movs	r3, #128	@ 0x80
 800f1da:	019b      	lsls	r3, r3, #6
 800f1dc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800f1de:	2380      	movs	r3, #128	@ 0x80
 800f1e0:	019b      	lsls	r3, r3, #6
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d011      	beq.n	800f20a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f1e8:	699a      	ldr	r2, [r3, #24]
 800f1ea:	2380      	movs	r3, #128	@ 0x80
 800f1ec:	029b      	lsls	r3, r3, #10
 800f1ee:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800f1f0:	2380      	movs	r3, #128	@ 0x80
 800f1f2:	029b      	lsls	r3, r3, #10
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d008      	beq.n	800f20a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800f1f8:	4b08      	ldr	r3, [pc, #32]	@ (800f21c <FLASH_WaitForLastOperation+0xe0>)
 800f1fa:	699a      	ldr	r2, [r3, #24]
 800f1fc:	2380      	movs	r3, #128	@ 0x80
 800f1fe:	025b      	lsls	r3, r3, #9
 800f200:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800f202:	2380      	movs	r3, #128	@ 0x80
 800f204:	025b      	lsls	r3, r3, #9
 800f206:	429a      	cmp	r2, r3
 800f208:	d103      	bne.n	800f212 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800f20a:	f000 f809 	bl	800f220 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	e000      	b.n	800f214 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800f212:	2300      	movs	r3, #0
}
 800f214:	0018      	movs	r0, r3
 800f216:	46bd      	mov	sp, r7
 800f218:	b004      	add	sp, #16
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	40022000 	.word	0x40022000

0800f220 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800f226:	2300      	movs	r3, #0
 800f228:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f22a:	4b49      	ldr	r3, [pc, #292]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f22c:	699a      	ldr	r2, [r3, #24]
 800f22e:	2380      	movs	r3, #128	@ 0x80
 800f230:	005b      	lsls	r3, r3, #1
 800f232:	401a      	ands	r2, r3
 800f234:	2380      	movs	r3, #128	@ 0x80
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	429a      	cmp	r2, r3
 800f23a:	d10a      	bne.n	800f252 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f23c:	4b45      	ldr	r3, [pc, #276]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f23e:	695b      	ldr	r3, [r3, #20]
 800f240:	2202      	movs	r2, #2
 800f242:	431a      	orrs	r2, r3
 800f244:	4b43      	ldr	r3, [pc, #268]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f246:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2280      	movs	r2, #128	@ 0x80
 800f24c:	0052      	lsls	r2, r2, #1
 800f24e:	4313      	orrs	r3, r2
 800f250:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800f252:	4b3f      	ldr	r3, [pc, #252]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f254:	699a      	ldr	r2, [r3, #24]
 800f256:	2380      	movs	r3, #128	@ 0x80
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	401a      	ands	r2, r3
 800f25c:	2380      	movs	r3, #128	@ 0x80
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	429a      	cmp	r2, r3
 800f262:	d10a      	bne.n	800f27a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f264:	4b3b      	ldr	r3, [pc, #236]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	2201      	movs	r2, #1
 800f26a:	431a      	orrs	r2, r3
 800f26c:	4b39      	ldr	r3, [pc, #228]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f26e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2280      	movs	r2, #128	@ 0x80
 800f274:	0092      	lsls	r2, r2, #2
 800f276:	4313      	orrs	r3, r2
 800f278:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800f27a:	4b35      	ldr	r3, [pc, #212]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f27c:	699a      	ldr	r2, [r3, #24]
 800f27e:	2380      	movs	r3, #128	@ 0x80
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	401a      	ands	r2, r3
 800f284:	2380      	movs	r3, #128	@ 0x80
 800f286:	00db      	lsls	r3, r3, #3
 800f288:	429a      	cmp	r2, r3
 800f28a:	d10a      	bne.n	800f2a2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800f28c:	4b31      	ldr	r3, [pc, #196]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f28e:	695b      	ldr	r3, [r3, #20]
 800f290:	2208      	movs	r2, #8
 800f292:	431a      	orrs	r2, r3
 800f294:	4b2f      	ldr	r3, [pc, #188]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f296:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2280      	movs	r2, #128	@ 0x80
 800f29c:	00d2      	lsls	r2, r2, #3
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800f2a2:	4b2b      	ldr	r3, [pc, #172]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f2a4:	699a      	ldr	r2, [r3, #24]
 800f2a6:	2380      	movs	r3, #128	@ 0x80
 800f2a8:	011b      	lsls	r3, r3, #4
 800f2aa:	401a      	ands	r2, r3
 800f2ac:	2380      	movs	r3, #128	@ 0x80
 800f2ae:	011b      	lsls	r3, r3, #4
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d10a      	bne.n	800f2ca <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800f2b4:	4b27      	ldr	r3, [pc, #156]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f2b6:	695b      	ldr	r3, [r3, #20]
 800f2b8:	2204      	movs	r2, #4
 800f2ba:	431a      	orrs	r2, r3
 800f2bc:	4b25      	ldr	r3, [pc, #148]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f2be:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2280      	movs	r2, #128	@ 0x80
 800f2c4:	0112      	lsls	r2, r2, #4
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800f2ca:	4b21      	ldr	r3, [pc, #132]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f2cc:	699a      	ldr	r2, [r3, #24]
 800f2ce:	2380      	movs	r3, #128	@ 0x80
 800f2d0:	019b      	lsls	r3, r3, #6
 800f2d2:	401a      	ands	r2, r3
 800f2d4:	2380      	movs	r3, #128	@ 0x80
 800f2d6:	019b      	lsls	r3, r3, #6
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d10a      	bne.n	800f2f2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f2de:	695b      	ldr	r3, [r3, #20]
 800f2e0:	2210      	movs	r2, #16
 800f2e2:	431a      	orrs	r2, r3
 800f2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f2e6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2280      	movs	r2, #128	@ 0x80
 800f2ec:	0192      	lsls	r2, r2, #6
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800f2f2:	4b17      	ldr	r3, [pc, #92]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f2f4:	699a      	ldr	r2, [r3, #24]
 800f2f6:	2380      	movs	r3, #128	@ 0x80
 800f2f8:	029b      	lsls	r3, r3, #10
 800f2fa:	401a      	ands	r2, r3
 800f2fc:	2380      	movs	r3, #128	@ 0x80
 800f2fe:	029b      	lsls	r3, r3, #10
 800f300:	429a      	cmp	r2, r3
 800f302:	d109      	bne.n	800f318 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800f304:	4b13      	ldr	r3, [pc, #76]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	2220      	movs	r2, #32
 800f30a:	431a      	orrs	r2, r3
 800f30c:	4b11      	ldr	r3, [pc, #68]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f30e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2220      	movs	r2, #32
 800f314:	4313      	orrs	r3, r2
 800f316:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800f318:	4b0d      	ldr	r3, [pc, #52]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f31a:	699a      	ldr	r2, [r3, #24]
 800f31c:	2380      	movs	r3, #128	@ 0x80
 800f31e:	025b      	lsls	r3, r3, #9
 800f320:	401a      	ands	r2, r3
 800f322:	2380      	movs	r3, #128	@ 0x80
 800f324:	025b      	lsls	r3, r3, #9
 800f326:	429a      	cmp	r2, r3
 800f328:	d10a      	bne.n	800f340 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800f32a:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f32c:	695b      	ldr	r3, [r3, #20]
 800f32e:	2240      	movs	r2, #64	@ 0x40
 800f330:	431a      	orrs	r2, r3
 800f332:	4b08      	ldr	r3, [pc, #32]	@ (800f354 <FLASH_SetErrorCode+0x134>)
 800f334:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2280      	movs	r2, #128	@ 0x80
 800f33a:	0252      	lsls	r2, r2, #9
 800f33c:	4313      	orrs	r3, r2
 800f33e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800f340:	4b03      	ldr	r3, [pc, #12]	@ (800f350 <FLASH_SetErrorCode+0x130>)
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	619a      	str	r2, [r3, #24]
}  
 800f346:	46c0      	nop			@ (mov r8, r8)
 800f348:	46bd      	mov	sp, r7
 800f34a:	b002      	add	sp, #8
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	46c0      	nop			@ (mov r8, r8)
 800f350:	40022000 	.word	0x40022000
 800f354:	20002500 	.word	0x20002500

0800f358 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f35e:	4b12      	ldr	r3, [pc, #72]	@ (800f3a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	4013      	ands	r3, r2
 800f366:	d019      	beq.n	800f39c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f368:	f3ef 8310 	mrs	r3, PRIMASK
 800f36c:	607b      	str	r3, [r7, #4]
  return(result);
 800f36e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800f370:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f372:	b672      	cpsid	i
}
 800f374:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800f376:	4b0c      	ldr	r3, [pc, #48]	@ (800f3a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f378:	4a0c      	ldr	r2, [pc, #48]	@ (800f3ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800f37a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800f37c:	4b0a      	ldr	r3, [pc, #40]	@ (800f3a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f37e:	4a0c      	ldr	r2, [pc, #48]	@ (800f3b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800f380:	60da      	str	r2, [r3, #12]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	f383 8810 	msr	PRIMASK, r3
}
 800f38c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f38e:	4b06      	ldr	r3, [pc, #24]	@ (800f3a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	4013      	ands	r3, r2
 800f396:	d001      	beq.n	800f39c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800f398:	2301      	movs	r3, #1
 800f39a:	e000      	b.n	800f39e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800f39c:	2300      	movs	r3, #0
}
 800f39e:	0018      	movs	r0, r3
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	b004      	add	sp, #16
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	46c0      	nop			@ (mov r8, r8)
 800f3a8:	40022000 	.word	0x40022000
 800f3ac:	89abcdef 	.word	0x89abcdef
 800f3b0:	02030405 	.word	0x02030405

0800f3b4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800f3b8:	4b04      	ldr	r3, [pc, #16]	@ (800f3cc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f3ba:	685a      	ldr	r2, [r3, #4]
 800f3bc:	4b03      	ldr	r3, [pc, #12]	@ (800f3cc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f3be:	2101      	movs	r1, #1
 800f3c0:	430a      	orrs	r2, r1
 800f3c2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f3c4:	2300      	movs	r3, #0
}
 800f3c6:	0018      	movs	r0, r3
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	40022000 	.word	0x40022000

0800f3d0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800f3d0:	b5b0      	push	{r4, r5, r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f3d8:	250f      	movs	r5, #15
 800f3da:	197b      	adds	r3, r7, r5
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f3e0:	197c      	adds	r4, r7, r5
 800f3e2:	4b0f      	ldr	r3, [pc, #60]	@ (800f420 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f3e4:	0018      	movs	r0, r3
 800f3e6:	f7ff fea9 	bl	800f13c <FLASH_WaitForLastOperation>
 800f3ea:	0003      	movs	r3, r0
 800f3ec:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f3ee:	0029      	movs	r1, r5
 800f3f0:	187b      	adds	r3, r7, r1
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d10c      	bne.n	800f412 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f424 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f404:	187c      	adds	r4, r7, r1
 800f406:	4b06      	ldr	r3, [pc, #24]	@ (800f420 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f408:	0018      	movs	r0, r3
 800f40a:	f7ff fe97 	bl	800f13c <FLASH_WaitForLastOperation>
 800f40e:	0003      	movs	r3, r0
 800f410:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f412:	230f      	movs	r3, #15
 800f414:	18fb      	adds	r3, r7, r3
 800f416:	781b      	ldrb	r3, [r3, #0]
}  
 800f418:	0018      	movs	r0, r3
 800f41a:	46bd      	mov	sp, r7
 800f41c:	b004      	add	sp, #16
 800f41e:	bdb0      	pop	{r4, r5, r7, pc}
 800f420:	0000c350 	.word	0x0000c350
 800f424:	20002500 	.word	0x20002500

0800f428 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f428:	b5b0      	push	{r4, r5, r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f434:	2317      	movs	r3, #23
 800f436:	18fb      	adds	r3, r7, r3
 800f438:	2201      	movs	r2, #1
 800f43a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f43c:	4b24      	ldr	r3, [pc, #144]	@ (800f4d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f43e:	7c1b      	ldrb	r3, [r3, #16]
 800f440:	2b01      	cmp	r3, #1
 800f442:	d101      	bne.n	800f448 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f444:	2302      	movs	r3, #2
 800f446:	e03e      	b.n	800f4c6 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f448:	4b21      	ldr	r3, [pc, #132]	@ (800f4d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f44a:	2201      	movs	r2, #1
 800f44c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f44e:	2517      	movs	r5, #23
 800f450:	197c      	adds	r4, r7, r5
 800f452:	4b20      	ldr	r3, [pc, #128]	@ (800f4d4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f454:	0018      	movs	r0, r3
 800f456:	f7ff fe71 	bl	800f13c <FLASH_WaitForLastOperation>
 800f45a:	0003      	movs	r3, r0
 800f45c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f45e:	197b      	adds	r3, r7, r5
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d129      	bne.n	800f4ba <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f466:	4b1a      	ldr	r3, [pc, #104]	@ (800f4d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f468:	2200      	movs	r2, #0
 800f46a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d103      	bne.n	800f47a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	601a      	str	r2, [r3, #0]
 800f478:	e013      	b.n	800f4a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d104      	bne.n	800f48a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	b292      	uxth	r2, r2
 800f486:	801a      	strh	r2, [r3, #0]
 800f488:	e00b      	b.n	800f4a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d104      	bne.n	800f49a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	b2d2      	uxtb	r2, r2
 800f496:	701a      	strb	r2, [r3, #0]
 800f498:	e003      	b.n	800f4a2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f49a:	2317      	movs	r3, #23
 800f49c:	18fb      	adds	r3, r7, r3
 800f49e:	2201      	movs	r2, #1
 800f4a0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f4a2:	2217      	movs	r2, #23
 800f4a4:	18bb      	adds	r3, r7, r2
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d106      	bne.n	800f4ba <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f4ac:	18bc      	adds	r4, r7, r2
 800f4ae:	4b09      	ldr	r3, [pc, #36]	@ (800f4d4 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f4b0:	0018      	movs	r0, r3
 800f4b2:	f7ff fe43 	bl	800f13c <FLASH_WaitForLastOperation>
 800f4b6:	0003      	movs	r3, r0
 800f4b8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f4ba:	4b05      	ldr	r3, [pc, #20]	@ (800f4d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f4bc:	2200      	movs	r2, #0
 800f4be:	741a      	strb	r2, [r3, #16]

  return status;
 800f4c0:	2317      	movs	r3, #23
 800f4c2:	18fb      	adds	r3, r7, r3
 800f4c4:	781b      	ldrb	r3, [r3, #0]
}
 800f4c6:	0018      	movs	r0, r3
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	b006      	add	sp, #24
 800f4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800f4ce:	46c0      	nop			@ (mov r8, r8)
 800f4d0:	20002500 	.word	0x20002500
 800f4d4:	0000c350 	.word	0x0000c350

0800f4d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b086      	sub	sp, #24
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f4ee:	e155      	b.n	800f79c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	4091      	lsls	r1, r2
 800f4fa:	000a      	movs	r2, r1
 800f4fc:	4013      	ands	r3, r2
 800f4fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d100      	bne.n	800f508 <HAL_GPIO_Init+0x30>
 800f506:	e146      	b.n	800f796 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	2203      	movs	r2, #3
 800f50e:	4013      	ands	r3, r2
 800f510:	2b01      	cmp	r3, #1
 800f512:	d005      	beq.n	800f520 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	2203      	movs	r2, #3
 800f51a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d130      	bne.n	800f582 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	2203      	movs	r2, #3
 800f52c:	409a      	lsls	r2, r3
 800f52e:	0013      	movs	r3, r2
 800f530:	43da      	mvns	r2, r3
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	4013      	ands	r3, r2
 800f536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	68da      	ldr	r2, [r3, #12]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	005b      	lsls	r3, r3, #1
 800f540:	409a      	lsls	r2, r3
 800f542:	0013      	movs	r3, r2
 800f544:	693a      	ldr	r2, [r7, #16]
 800f546:	4313      	orrs	r3, r2
 800f548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	693a      	ldr	r2, [r7, #16]
 800f54e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f556:	2201      	movs	r2, #1
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	409a      	lsls	r2, r3
 800f55c:	0013      	movs	r3, r2
 800f55e:	43da      	mvns	r2, r3
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	4013      	ands	r3, r2
 800f564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	091b      	lsrs	r3, r3, #4
 800f56c:	2201      	movs	r2, #1
 800f56e:	401a      	ands	r2, r3
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	409a      	lsls	r2, r3
 800f574:	0013      	movs	r3, r2
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	4313      	orrs	r3, r2
 800f57a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	693a      	ldr	r2, [r7, #16]
 800f580:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	685b      	ldr	r3, [r3, #4]
 800f586:	2203      	movs	r2, #3
 800f588:	4013      	ands	r3, r2
 800f58a:	2b03      	cmp	r3, #3
 800f58c:	d017      	beq.n	800f5be <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	005b      	lsls	r3, r3, #1
 800f598:	2203      	movs	r2, #3
 800f59a:	409a      	lsls	r2, r3
 800f59c:	0013      	movs	r3, r2
 800f59e:	43da      	mvns	r2, r3
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	689a      	ldr	r2, [r3, #8]
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	409a      	lsls	r2, r3
 800f5b0:	0013      	movs	r3, r2
 800f5b2:	693a      	ldr	r2, [r7, #16]
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	693a      	ldr	r2, [r7, #16]
 800f5bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	2203      	movs	r2, #3
 800f5c4:	4013      	ands	r3, r2
 800f5c6:	2b02      	cmp	r3, #2
 800f5c8:	d123      	bne.n	800f612 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	08da      	lsrs	r2, r3, #3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	3208      	adds	r2, #8
 800f5d2:	0092      	lsls	r2, r2, #2
 800f5d4:	58d3      	ldr	r3, [r2, r3]
 800f5d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	2207      	movs	r2, #7
 800f5dc:	4013      	ands	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	220f      	movs	r2, #15
 800f5e2:	409a      	lsls	r2, r3
 800f5e4:	0013      	movs	r3, r2
 800f5e6:	43da      	mvns	r2, r3
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	4013      	ands	r3, r2
 800f5ec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	691a      	ldr	r2, [r3, #16]
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2107      	movs	r1, #7
 800f5f6:	400b      	ands	r3, r1
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	409a      	lsls	r2, r3
 800f5fc:	0013      	movs	r3, r2
 800f5fe:	693a      	ldr	r2, [r7, #16]
 800f600:	4313      	orrs	r3, r2
 800f602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	08da      	lsrs	r2, r3, #3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3208      	adds	r2, #8
 800f60c:	0092      	lsls	r2, r2, #2
 800f60e:	6939      	ldr	r1, [r7, #16]
 800f610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	2203      	movs	r2, #3
 800f61e:	409a      	lsls	r2, r3
 800f620:	0013      	movs	r3, r2
 800f622:	43da      	mvns	r2, r3
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	4013      	ands	r3, r2
 800f628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	2203      	movs	r2, #3
 800f630:	401a      	ands	r2, r3
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	409a      	lsls	r2, r3
 800f638:	0013      	movs	r3, r2
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	693a      	ldr	r2, [r7, #16]
 800f644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	685a      	ldr	r2, [r3, #4]
 800f64a:	23c0      	movs	r3, #192	@ 0xc0
 800f64c:	029b      	lsls	r3, r3, #10
 800f64e:	4013      	ands	r3, r2
 800f650:	d100      	bne.n	800f654 <HAL_GPIO_Init+0x17c>
 800f652:	e0a0      	b.n	800f796 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f654:	4b57      	ldr	r3, [pc, #348]	@ (800f7b4 <HAL_GPIO_Init+0x2dc>)
 800f656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f658:	4b56      	ldr	r3, [pc, #344]	@ (800f7b4 <HAL_GPIO_Init+0x2dc>)
 800f65a:	2101      	movs	r1, #1
 800f65c:	430a      	orrs	r2, r1
 800f65e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800f660:	4a55      	ldr	r2, [pc, #340]	@ (800f7b8 <HAL_GPIO_Init+0x2e0>)
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	089b      	lsrs	r3, r3, #2
 800f666:	3302      	adds	r3, #2
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	589b      	ldr	r3, [r3, r2]
 800f66c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2203      	movs	r2, #3
 800f672:	4013      	ands	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	220f      	movs	r2, #15
 800f678:	409a      	lsls	r2, r3
 800f67a:	0013      	movs	r3, r2
 800f67c:	43da      	mvns	r2, r3
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	4013      	ands	r3, r2
 800f682:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	23a0      	movs	r3, #160	@ 0xa0
 800f688:	05db      	lsls	r3, r3, #23
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d01f      	beq.n	800f6ce <HAL_GPIO_Init+0x1f6>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a4a      	ldr	r2, [pc, #296]	@ (800f7bc <HAL_GPIO_Init+0x2e4>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d019      	beq.n	800f6ca <HAL_GPIO_Init+0x1f2>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a49      	ldr	r2, [pc, #292]	@ (800f7c0 <HAL_GPIO_Init+0x2e8>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d013      	beq.n	800f6c6 <HAL_GPIO_Init+0x1ee>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a48      	ldr	r2, [pc, #288]	@ (800f7c4 <HAL_GPIO_Init+0x2ec>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d00d      	beq.n	800f6c2 <HAL_GPIO_Init+0x1ea>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4a47      	ldr	r2, [pc, #284]	@ (800f7c8 <HAL_GPIO_Init+0x2f0>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d007      	beq.n	800f6be <HAL_GPIO_Init+0x1e6>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4a46      	ldr	r2, [pc, #280]	@ (800f7cc <HAL_GPIO_Init+0x2f4>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d101      	bne.n	800f6ba <HAL_GPIO_Init+0x1e2>
 800f6b6:	2305      	movs	r3, #5
 800f6b8:	e00a      	b.n	800f6d0 <HAL_GPIO_Init+0x1f8>
 800f6ba:	2306      	movs	r3, #6
 800f6bc:	e008      	b.n	800f6d0 <HAL_GPIO_Init+0x1f8>
 800f6be:	2304      	movs	r3, #4
 800f6c0:	e006      	b.n	800f6d0 <HAL_GPIO_Init+0x1f8>
 800f6c2:	2303      	movs	r3, #3
 800f6c4:	e004      	b.n	800f6d0 <HAL_GPIO_Init+0x1f8>
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e002      	b.n	800f6d0 <HAL_GPIO_Init+0x1f8>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e000      	b.n	800f6d0 <HAL_GPIO_Init+0x1f8>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	2103      	movs	r1, #3
 800f6d4:	400a      	ands	r2, r1
 800f6d6:	0092      	lsls	r2, r2, #2
 800f6d8:	4093      	lsls	r3, r2
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f6e0:	4935      	ldr	r1, [pc, #212]	@ (800f7b8 <HAL_GPIO_Init+0x2e0>)
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	089b      	lsrs	r3, r3, #2
 800f6e6:	3302      	adds	r3, #2
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	693a      	ldr	r2, [r7, #16]
 800f6ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f6ee:	4b38      	ldr	r3, [pc, #224]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	43da      	mvns	r2, r3
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	4013      	ands	r3, r2
 800f6fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	685a      	ldr	r2, [r3, #4]
 800f702:	2380      	movs	r3, #128	@ 0x80
 800f704:	035b      	lsls	r3, r3, #13
 800f706:	4013      	ands	r3, r2
 800f708:	d003      	beq.n	800f712 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800f70a:	693a      	ldr	r2, [r7, #16]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	4313      	orrs	r3, r2
 800f710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800f712:	4b2f      	ldr	r3, [pc, #188]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800f718:	4b2d      	ldr	r3, [pc, #180]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	43da      	mvns	r2, r3
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	4013      	ands	r3, r2
 800f726:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	2380      	movs	r3, #128	@ 0x80
 800f72e:	039b      	lsls	r3, r3, #14
 800f730:	4013      	ands	r3, r2
 800f732:	d003      	beq.n	800f73c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f734:	693a      	ldr	r2, [r7, #16]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	4313      	orrs	r3, r2
 800f73a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800f73c:	4b24      	ldr	r3, [pc, #144]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f73e:	693a      	ldr	r2, [r7, #16]
 800f740:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800f742:	4b23      	ldr	r3, [pc, #140]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	43da      	mvns	r2, r3
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	4013      	ands	r3, r2
 800f750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	2380      	movs	r3, #128	@ 0x80
 800f758:	029b      	lsls	r3, r3, #10
 800f75a:	4013      	ands	r3, r2
 800f75c:	d003      	beq.n	800f766 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	4313      	orrs	r3, r2
 800f764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800f766:	4b1a      	ldr	r3, [pc, #104]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f768:	693a      	ldr	r2, [r7, #16]
 800f76a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f76c:	4b18      	ldr	r3, [pc, #96]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	43da      	mvns	r2, r3
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	4013      	ands	r3, r2
 800f77a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	685a      	ldr	r2, [r3, #4]
 800f780:	2380      	movs	r3, #128	@ 0x80
 800f782:	025b      	lsls	r3, r3, #9
 800f784:	4013      	ands	r3, r2
 800f786:	d003      	beq.n	800f790 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f790:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d0 <HAL_GPIO_Init+0x2f8>)
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	3301      	adds	r3, #1
 800f79a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	40da      	lsrs	r2, r3
 800f7a4:	1e13      	subs	r3, r2, #0
 800f7a6:	d000      	beq.n	800f7aa <HAL_GPIO_Init+0x2d2>
 800f7a8:	e6a2      	b.n	800f4f0 <HAL_GPIO_Init+0x18>
  }
}
 800f7aa:	46c0      	nop			@ (mov r8, r8)
 800f7ac:	46c0      	nop			@ (mov r8, r8)
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	b006      	add	sp, #24
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	40021000 	.word	0x40021000
 800f7b8:	40010000 	.word	0x40010000
 800f7bc:	50000400 	.word	0x50000400
 800f7c0:	50000800 	.word	0x50000800
 800f7c4:	50000c00 	.word	0x50000c00
 800f7c8:	50001000 	.word	0x50001000
 800f7cc:	50001c00 	.word	0x50001c00
 800f7d0:	40010400 	.word	0x40010400

0800f7d4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	000a      	movs	r2, r1
 800f7de:	1cbb      	adds	r3, r7, #2
 800f7e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	691b      	ldr	r3, [r3, #16]
 800f7e6:	1cba      	adds	r2, r7, #2
 800f7e8:	8812      	ldrh	r2, [r2, #0]
 800f7ea:	4013      	ands	r3, r2
 800f7ec:	d004      	beq.n	800f7f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f7ee:	230f      	movs	r3, #15
 800f7f0:	18fb      	adds	r3, r7, r3
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	701a      	strb	r2, [r3, #0]
 800f7f6:	e003      	b.n	800f800 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f7f8:	230f      	movs	r3, #15
 800f7fa:	18fb      	adds	r3, r7, r3
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f800:	230f      	movs	r3, #15
 800f802:	18fb      	adds	r3, r7, r3
 800f804:	781b      	ldrb	r3, [r3, #0]
}
 800f806:	0018      	movs	r0, r3
 800f808:	46bd      	mov	sp, r7
 800f80a:	b004      	add	sp, #16
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
 800f816:	0008      	movs	r0, r1
 800f818:	0011      	movs	r1, r2
 800f81a:	1cbb      	adds	r3, r7, #2
 800f81c:	1c02      	adds	r2, r0, #0
 800f81e:	801a      	strh	r2, [r3, #0]
 800f820:	1c7b      	adds	r3, r7, #1
 800f822:	1c0a      	adds	r2, r1, #0
 800f824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f826:	1c7b      	adds	r3, r7, #1
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d004      	beq.n	800f838 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f82e:	1cbb      	adds	r3, r7, #2
 800f830:	881a      	ldrh	r2, [r3, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f836:	e003      	b.n	800f840 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f838:	1cbb      	adds	r3, r7, #2
 800f83a:	881a      	ldrh	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f840:	46c0      	nop			@ (mov r8, r8)
 800f842:	46bd      	mov	sp, r7
 800f844:	b002      	add	sp, #8
 800f846:	bd80      	pop	{r7, pc}

0800f848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	0002      	movs	r2, r0
 800f850:	1dbb      	adds	r3, r7, #6
 800f852:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f854:	4b09      	ldr	r3, [pc, #36]	@ (800f87c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f856:	695b      	ldr	r3, [r3, #20]
 800f858:	1dba      	adds	r2, r7, #6
 800f85a:	8812      	ldrh	r2, [r2, #0]
 800f85c:	4013      	ands	r3, r2
 800f85e:	d008      	beq.n	800f872 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f860:	4b06      	ldr	r3, [pc, #24]	@ (800f87c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f862:	1dba      	adds	r2, r7, #6
 800f864:	8812      	ldrh	r2, [r2, #0]
 800f866:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f868:	1dbb      	adds	r3, r7, #6
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	0018      	movs	r0, r3
 800f86e:	f7f8 fe03 	bl	8008478 <HAL_GPIO_EXTI_Callback>
  }
}
 800f872:	46c0      	nop			@ (mov r8, r8)
 800f874:	46bd      	mov	sp, r7
 800f876:	b002      	add	sp, #8
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	46c0      	nop			@ (mov r8, r8)
 800f87c:	40010400 	.word	0x40010400

0800f880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d101      	bne.n	800f892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	e082      	b.n	800f998 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2241      	movs	r2, #65	@ 0x41
 800f896:	5c9b      	ldrb	r3, [r3, r2]
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d107      	bne.n	800f8ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2240      	movs	r2, #64	@ 0x40
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	f7f7 fecd 	bl	8007648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2241      	movs	r2, #65	@ 0x41
 800f8b2:	2124      	movs	r1, #36	@ 0x24
 800f8b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	438a      	bics	r2, r1
 800f8c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	685a      	ldr	r2, [r3, #4]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4934      	ldr	r1, [pc, #208]	@ (800f9a0 <HAL_I2C_Init+0x120>)
 800f8d0:	400a      	ands	r2, r1
 800f8d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	689a      	ldr	r2, [r3, #8]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4931      	ldr	r1, [pc, #196]	@ (800f9a4 <HAL_I2C_Init+0x124>)
 800f8e0:	400a      	ands	r2, r1
 800f8e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d108      	bne.n	800f8fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	689a      	ldr	r2, [r3, #8]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2180      	movs	r1, #128	@ 0x80
 800f8f6:	0209      	lsls	r1, r1, #8
 800f8f8:	430a      	orrs	r2, r1
 800f8fa:	609a      	str	r2, [r3, #8]
 800f8fc:	e007      	b.n	800f90e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	689a      	ldr	r2, [r3, #8]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2184      	movs	r1, #132	@ 0x84
 800f908:	0209      	lsls	r1, r1, #8
 800f90a:	430a      	orrs	r2, r1
 800f90c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	2b02      	cmp	r3, #2
 800f914:	d104      	bne.n	800f920 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2280      	movs	r2, #128	@ 0x80
 800f91c:	0112      	lsls	r2, r2, #4
 800f91e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	685a      	ldr	r2, [r3, #4]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	491f      	ldr	r1, [pc, #124]	@ (800f9a8 <HAL_I2C_Init+0x128>)
 800f92c:	430a      	orrs	r2, r1
 800f92e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68da      	ldr	r2, [r3, #12]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	491a      	ldr	r1, [pc, #104]	@ (800f9a4 <HAL_I2C_Init+0x124>)
 800f93c:	400a      	ands	r2, r1
 800f93e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	691a      	ldr	r2, [r3, #16]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	695b      	ldr	r3, [r3, #20]
 800f948:	431a      	orrs	r2, r3
 800f94a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	699b      	ldr	r3, [r3, #24]
 800f950:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	430a      	orrs	r2, r1
 800f958:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	69d9      	ldr	r1, [r3, #28]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6a1a      	ldr	r2, [r3, #32]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	430a      	orrs	r2, r1
 800f968:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2101      	movs	r1, #1
 800f976:	430a      	orrs	r2, r1
 800f978:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2241      	movs	r2, #65	@ 0x41
 800f984:	2120      	movs	r1, #32
 800f986:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2242      	movs	r2, #66	@ 0x42
 800f992:	2100      	movs	r1, #0
 800f994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	0018      	movs	r0, r3
 800f99a:	46bd      	mov	sp, r7
 800f99c:	b002      	add	sp, #8
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	f0ffffff 	.word	0xf0ffffff
 800f9a4:	ffff7fff 	.word	0xffff7fff
 800f9a8:	02008000 	.word	0x02008000

0800f9ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f9ac:	b590      	push	{r4, r7, lr}
 800f9ae:	b089      	sub	sp, #36	@ 0x24
 800f9b0:	af02      	add	r7, sp, #8
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	0008      	movs	r0, r1
 800f9b6:	607a      	str	r2, [r7, #4]
 800f9b8:	0019      	movs	r1, r3
 800f9ba:	230a      	movs	r3, #10
 800f9bc:	18fb      	adds	r3, r7, r3
 800f9be:	1c02      	adds	r2, r0, #0
 800f9c0:	801a      	strh	r2, [r3, #0]
 800f9c2:	2308      	movs	r3, #8
 800f9c4:	18fb      	adds	r3, r7, r3
 800f9c6:	1c0a      	adds	r2, r1, #0
 800f9c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2241      	movs	r2, #65	@ 0x41
 800f9ce:	5c9b      	ldrb	r3, [r3, r2]
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	2b20      	cmp	r3, #32
 800f9d4:	d000      	beq.n	800f9d8 <HAL_I2C_Master_Transmit+0x2c>
 800f9d6:	e0e7      	b.n	800fba8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2240      	movs	r2, #64	@ 0x40
 800f9dc:	5c9b      	ldrb	r3, [r3, r2]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d101      	bne.n	800f9e6 <HAL_I2C_Master_Transmit+0x3a>
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	e0e1      	b.n	800fbaa <HAL_I2C_Master_Transmit+0x1fe>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2240      	movs	r2, #64	@ 0x40
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f9ee:	f7fe fc93 	bl	800e318 <HAL_GetTick>
 800f9f2:	0003      	movs	r3, r0
 800f9f4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f9f6:	2380      	movs	r3, #128	@ 0x80
 800f9f8:	0219      	lsls	r1, r3, #8
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	2319      	movs	r3, #25
 800fa02:	2201      	movs	r2, #1
 800fa04:	f001 ff98 	bl	8011938 <I2C_WaitOnFlagUntilTimeout>
 800fa08:	1e03      	subs	r3, r0, #0
 800fa0a:	d001      	beq.n	800fa10 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e0cc      	b.n	800fbaa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2241      	movs	r2, #65	@ 0x41
 800fa14:	2121      	movs	r1, #33	@ 0x21
 800fa16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2242      	movs	r2, #66	@ 0x42
 800fa1c:	2110      	movs	r1, #16
 800fa1e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2200      	movs	r2, #0
 800fa24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2208      	movs	r2, #8
 800fa30:	18ba      	adds	r2, r7, r2
 800fa32:	8812      	ldrh	r2, [r2, #0]
 800fa34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	2bff      	cmp	r3, #255	@ 0xff
 800fa44:	d911      	bls.n	800fa6a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	22ff      	movs	r2, #255	@ 0xff
 800fa4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa50:	b2da      	uxtb	r2, r3
 800fa52:	2380      	movs	r3, #128	@ 0x80
 800fa54:	045c      	lsls	r4, r3, #17
 800fa56:	230a      	movs	r3, #10
 800fa58:	18fb      	adds	r3, r7, r3
 800fa5a:	8819      	ldrh	r1, [r3, #0]
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	4b55      	ldr	r3, [pc, #340]	@ (800fbb4 <HAL_I2C_Master_Transmit+0x208>)
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	0023      	movs	r3, r4
 800fa64:	f002 f9ba 	bl	8011ddc <I2C_TransferConfig>
 800fa68:	e075      	b.n	800fb56 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	2380      	movs	r3, #128	@ 0x80
 800fa7c:	049c      	lsls	r4, r3, #18
 800fa7e:	230a      	movs	r3, #10
 800fa80:	18fb      	adds	r3, r7, r3
 800fa82:	8819      	ldrh	r1, [r3, #0]
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	4b4b      	ldr	r3, [pc, #300]	@ (800fbb4 <HAL_I2C_Master_Transmit+0x208>)
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	0023      	movs	r3, r4
 800fa8c:	f002 f9a6 	bl	8011ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fa90:	e061      	b.n	800fb56 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa92:	697a      	ldr	r2, [r7, #20]
 800fa94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	0018      	movs	r0, r3
 800fa9a:	f001 ff9b 	bl	80119d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa9e:	1e03      	subs	r3, r0, #0
 800faa0:	d001      	beq.n	800faa6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800faa2:	2301      	movs	r3, #1
 800faa4:	e081      	b.n	800fbaa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faaa:	781a      	ldrb	r2, [r3, #0]
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fab6:	1c5a      	adds	r2, r3, #1
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	3b01      	subs	r3, #1
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800face:	3b01      	subs	r3, #1
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fada:	b29b      	uxth	r3, r3
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d03a      	beq.n	800fb56 <HAL_I2C_Master_Transmit+0x1aa>
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d136      	bne.n	800fb56 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	0013      	movs	r3, r2
 800faf2:	2200      	movs	r2, #0
 800faf4:	2180      	movs	r1, #128	@ 0x80
 800faf6:	f001 ff1f 	bl	8011938 <I2C_WaitOnFlagUntilTimeout>
 800fafa:	1e03      	subs	r3, r0, #0
 800fafc:	d001      	beq.n	800fb02 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800fafe:	2301      	movs	r3, #1
 800fb00:	e053      	b.n	800fbaa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	2bff      	cmp	r3, #255	@ 0xff
 800fb0a:	d911      	bls.n	800fb30 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	22ff      	movs	r2, #255	@ 0xff
 800fb10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb16:	b2da      	uxtb	r2, r3
 800fb18:	2380      	movs	r3, #128	@ 0x80
 800fb1a:	045c      	lsls	r4, r3, #17
 800fb1c:	230a      	movs	r3, #10
 800fb1e:	18fb      	adds	r3, r7, r3
 800fb20:	8819      	ldrh	r1, [r3, #0]
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	2300      	movs	r3, #0
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	0023      	movs	r3, r4
 800fb2a:	f002 f957 	bl	8011ddc <I2C_TransferConfig>
 800fb2e:	e012      	b.n	800fb56 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	2380      	movs	r3, #128	@ 0x80
 800fb42:	049c      	lsls	r4, r3, #18
 800fb44:	230a      	movs	r3, #10
 800fb46:	18fb      	adds	r3, r7, r3
 800fb48:	8819      	ldrh	r1, [r3, #0]
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	0023      	movs	r3, r4
 800fb52:	f002 f943 	bl	8011ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d198      	bne.n	800fa92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	0018      	movs	r0, r3
 800fb68:	f001 ff7a 	bl	8011a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fb6c:	1e03      	subs	r3, r0, #0
 800fb6e:	d001      	beq.n	800fb74 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800fb70:	2301      	movs	r3, #1
 800fb72:	e01a      	b.n	800fbaa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2220      	movs	r2, #32
 800fb7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	685a      	ldr	r2, [r3, #4]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	490c      	ldr	r1, [pc, #48]	@ (800fbb8 <HAL_I2C_Master_Transmit+0x20c>)
 800fb88:	400a      	ands	r2, r1
 800fb8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	2241      	movs	r2, #65	@ 0x41
 800fb90:	2120      	movs	r1, #32
 800fb92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2242      	movs	r2, #66	@ 0x42
 800fb98:	2100      	movs	r1, #0
 800fb9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2240      	movs	r2, #64	@ 0x40
 800fba0:	2100      	movs	r1, #0
 800fba2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	e000      	b.n	800fbaa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800fba8:	2302      	movs	r3, #2
  }
}
 800fbaa:	0018      	movs	r0, r3
 800fbac:	46bd      	mov	sp, r7
 800fbae:	b007      	add	sp, #28
 800fbb0:	bd90      	pop	{r4, r7, pc}
 800fbb2:	46c0      	nop			@ (mov r8, r8)
 800fbb4:	80002000 	.word	0x80002000
 800fbb8:	fe00e800 	.word	0xfe00e800

0800fbbc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800fbbc:	b590      	push	{r4, r7, lr}
 800fbbe:	b089      	sub	sp, #36	@ 0x24
 800fbc0:	af02      	add	r7, sp, #8
 800fbc2:	60f8      	str	r0, [r7, #12]
 800fbc4:	0008      	movs	r0, r1
 800fbc6:	607a      	str	r2, [r7, #4]
 800fbc8:	0019      	movs	r1, r3
 800fbca:	230a      	movs	r3, #10
 800fbcc:	18fb      	adds	r3, r7, r3
 800fbce:	1c02      	adds	r2, r0, #0
 800fbd0:	801a      	strh	r2, [r3, #0]
 800fbd2:	2308      	movs	r3, #8
 800fbd4:	18fb      	adds	r3, r7, r3
 800fbd6:	1c0a      	adds	r2, r1, #0
 800fbd8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2241      	movs	r2, #65	@ 0x41
 800fbde:	5c9b      	ldrb	r3, [r3, r2]
 800fbe0:	b2db      	uxtb	r3, r3
 800fbe2:	2b20      	cmp	r3, #32
 800fbe4:	d000      	beq.n	800fbe8 <HAL_I2C_Master_Receive+0x2c>
 800fbe6:	e0e8      	b.n	800fdba <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	2240      	movs	r2, #64	@ 0x40
 800fbec:	5c9b      	ldrb	r3, [r3, r2]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d101      	bne.n	800fbf6 <HAL_I2C_Master_Receive+0x3a>
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	e0e2      	b.n	800fdbc <HAL_I2C_Master_Receive+0x200>
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2240      	movs	r2, #64	@ 0x40
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fbfe:	f7fe fb8b 	bl	800e318 <HAL_GetTick>
 800fc02:	0003      	movs	r3, r0
 800fc04:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fc06:	2380      	movs	r3, #128	@ 0x80
 800fc08:	0219      	lsls	r1, r3, #8
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	2319      	movs	r3, #25
 800fc12:	2201      	movs	r2, #1
 800fc14:	f001 fe90 	bl	8011938 <I2C_WaitOnFlagUntilTimeout>
 800fc18:	1e03      	subs	r3, r0, #0
 800fc1a:	d001      	beq.n	800fc20 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	e0cd      	b.n	800fdbc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	2241      	movs	r2, #65	@ 0x41
 800fc24:	2122      	movs	r1, #34	@ 0x22
 800fc26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2242      	movs	r2, #66	@ 0x42
 800fc2c:	2110      	movs	r1, #16
 800fc2e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2208      	movs	r2, #8
 800fc40:	18ba      	adds	r2, r7, r2
 800fc42:	8812      	ldrh	r2, [r2, #0]
 800fc44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	2bff      	cmp	r3, #255	@ 0xff
 800fc54:	d911      	bls.n	800fc7a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	22ff      	movs	r2, #255	@ 0xff
 800fc5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc60:	b2da      	uxtb	r2, r3
 800fc62:	2380      	movs	r3, #128	@ 0x80
 800fc64:	045c      	lsls	r4, r3, #17
 800fc66:	230a      	movs	r3, #10
 800fc68:	18fb      	adds	r3, r7, r3
 800fc6a:	8819      	ldrh	r1, [r3, #0]
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	4b55      	ldr	r3, [pc, #340]	@ (800fdc4 <HAL_I2C_Master_Receive+0x208>)
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	0023      	movs	r3, r4
 800fc74:	f002 f8b2 	bl	8011ddc <I2C_TransferConfig>
 800fc78:	e076      	b.n	800fd68 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	2380      	movs	r3, #128	@ 0x80
 800fc8c:	049c      	lsls	r4, r3, #18
 800fc8e:	230a      	movs	r3, #10
 800fc90:	18fb      	adds	r3, r7, r3
 800fc92:	8819      	ldrh	r1, [r3, #0]
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	4b4b      	ldr	r3, [pc, #300]	@ (800fdc4 <HAL_I2C_Master_Receive+0x208>)
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	0023      	movs	r3, r4
 800fc9c:	f002 f89e 	bl	8011ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fca0:	e062      	b.n	800fd68 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	0018      	movs	r0, r3
 800fcaa:	f001 ff1d 	bl	8011ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fcae:	1e03      	subs	r3, r0, #0
 800fcb0:	d001      	beq.n	800fcb6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e082      	b.n	800fdbc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcc0:	b2d2      	uxtb	r2, r2
 800fcc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcc8:	1c5a      	adds	r2, r3, #1
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	3b01      	subs	r3, #1
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d03a      	beq.n	800fd68 <HAL_I2C_Master_Receive+0x1ac>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d136      	bne.n	800fd68 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fcfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	9300      	str	r3, [sp, #0]
 800fd02:	0013      	movs	r3, r2
 800fd04:	2200      	movs	r2, #0
 800fd06:	2180      	movs	r1, #128	@ 0x80
 800fd08:	f001 fe16 	bl	8011938 <I2C_WaitOnFlagUntilTimeout>
 800fd0c:	1e03      	subs	r3, r0, #0
 800fd0e:	d001      	beq.n	800fd14 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800fd10:	2301      	movs	r3, #1
 800fd12:	e053      	b.n	800fdbc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	2bff      	cmp	r3, #255	@ 0xff
 800fd1c:	d911      	bls.n	800fd42 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	22ff      	movs	r2, #255	@ 0xff
 800fd22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd28:	b2da      	uxtb	r2, r3
 800fd2a:	2380      	movs	r3, #128	@ 0x80
 800fd2c:	045c      	lsls	r4, r3, #17
 800fd2e:	230a      	movs	r3, #10
 800fd30:	18fb      	adds	r3, r7, r3
 800fd32:	8819      	ldrh	r1, [r3, #0]
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	2300      	movs	r3, #0
 800fd38:	9300      	str	r3, [sp, #0]
 800fd3a:	0023      	movs	r3, r4
 800fd3c:	f002 f84e 	bl	8011ddc <I2C_TransferConfig>
 800fd40:	e012      	b.n	800fd68 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd50:	b2da      	uxtb	r2, r3
 800fd52:	2380      	movs	r3, #128	@ 0x80
 800fd54:	049c      	lsls	r4, r3, #18
 800fd56:	230a      	movs	r3, #10
 800fd58:	18fb      	adds	r3, r7, r3
 800fd5a:	8819      	ldrh	r1, [r3, #0]
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	9300      	str	r3, [sp, #0]
 800fd62:	0023      	movs	r3, r4
 800fd64:	f002 f83a 	bl	8011ddc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d197      	bne.n	800fca2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	0018      	movs	r0, r3
 800fd7a:	f001 fe71 	bl	8011a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fd7e:	1e03      	subs	r3, r0, #0
 800fd80:	d001      	beq.n	800fd86 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800fd82:	2301      	movs	r3, #1
 800fd84:	e01a      	b.n	800fdbc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2220      	movs	r2, #32
 800fd8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	490b      	ldr	r1, [pc, #44]	@ (800fdc8 <HAL_I2C_Master_Receive+0x20c>)
 800fd9a:	400a      	ands	r2, r1
 800fd9c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2241      	movs	r2, #65	@ 0x41
 800fda2:	2120      	movs	r1, #32
 800fda4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2242      	movs	r2, #66	@ 0x42
 800fdaa:	2100      	movs	r1, #0
 800fdac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2240      	movs	r2, #64	@ 0x40
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	e000      	b.n	800fdbc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800fdba:	2302      	movs	r3, #2
  }
}
 800fdbc:	0018      	movs	r0, r3
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	b007      	add	sp, #28
 800fdc2:	bd90      	pop	{r4, r7, pc}
 800fdc4:	80002400 	.word	0x80002400
 800fdc8:	fe00e800 	.word	0xfe00e800

0800fdcc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800fdcc:	b5b0      	push	{r4, r5, r7, lr}
 800fdce:	b088      	sub	sp, #32
 800fdd0:	af02      	add	r7, sp, #8
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	0008      	movs	r0, r1
 800fdd6:	607a      	str	r2, [r7, #4]
 800fdd8:	0019      	movs	r1, r3
 800fdda:	230a      	movs	r3, #10
 800fddc:	18fb      	adds	r3, r7, r3
 800fdde:	1c02      	adds	r2, r0, #0
 800fde0:	801a      	strh	r2, [r3, #0]
 800fde2:	2308      	movs	r3, #8
 800fde4:	18fb      	adds	r3, r7, r3
 800fde6:	1c0a      	adds	r2, r1, #0
 800fde8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2241      	movs	r2, #65	@ 0x41
 800fdee:	5c9b      	ldrb	r3, [r3, r2]
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	2b20      	cmp	r3, #32
 800fdf4:	d000      	beq.n	800fdf8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800fdf6:	e0dd      	b.n	800ffb4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	699a      	ldr	r2, [r3, #24]
 800fdfe:	2380      	movs	r3, #128	@ 0x80
 800fe00:	021b      	lsls	r3, r3, #8
 800fe02:	401a      	ands	r2, r3
 800fe04:	2380      	movs	r3, #128	@ 0x80
 800fe06:	021b      	lsls	r3, r3, #8
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d101      	bne.n	800fe10 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800fe0c:	2302      	movs	r3, #2
 800fe0e:	e0d2      	b.n	800ffb6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2240      	movs	r2, #64	@ 0x40
 800fe14:	5c9b      	ldrb	r3, [r3, r2]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d101      	bne.n	800fe1e <HAL_I2C_Master_Transmit_DMA+0x52>
 800fe1a:	2302      	movs	r3, #2
 800fe1c:	e0cb      	b.n	800ffb6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2240      	movs	r2, #64	@ 0x40
 800fe22:	2101      	movs	r1, #1
 800fe24:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2241      	movs	r2, #65	@ 0x41
 800fe2a:	2121      	movs	r1, #33	@ 0x21
 800fe2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2242      	movs	r2, #66	@ 0x42
 800fe32:	2110      	movs	r1, #16
 800fe34:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2208      	movs	r2, #8
 800fe46:	18ba      	adds	r2, r7, r2
 800fe48:	8812      	ldrh	r2, [r2, #0]
 800fe4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	4a5c      	ldr	r2, [pc, #368]	@ (800ffc0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800fe50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	4a5b      	ldr	r2, [pc, #364]	@ (800ffc4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800fe56:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe5c:	b29b      	uxth	r3, r3
 800fe5e:	2bff      	cmp	r3, #255	@ 0xff
 800fe60:	d906      	bls.n	800fe70 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	22ff      	movs	r2, #255	@ 0xff
 800fe66:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fe68:	2380      	movs	r3, #128	@ 0x80
 800fe6a:	045b      	lsls	r3, r3, #17
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	e007      	b.n	800fe80 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fe7a:	2380      	movs	r3, #128	@ 0x80
 800fe7c:	049b      	lsls	r3, r3, #18
 800fe7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d100      	bne.n	800fe8a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800fe88:	e078      	b.n	800ff7c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d023      	beq.n	800feda <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe96:	4a4c      	ldr	r2, [pc, #304]	@ (800ffc8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800fe98:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe9e:	4a4b      	ldr	r2, [pc, #300]	@ (800ffcc <HAL_I2C_Master_Transmit_DMA+0x200>)
 800fea0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea6:	2200      	movs	r2, #0
 800fea8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feae:	2200      	movs	r2, #0
 800feb0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800feb6:	6879      	ldr	r1, [r7, #4]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	3328      	adds	r3, #40	@ 0x28
 800febe:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800fec4:	2513      	movs	r5, #19
 800fec6:	197c      	adds	r4, r7, r5
 800fec8:	f7fe ff62 	bl	800ed90 <HAL_DMA_Start_IT>
 800fecc:	0003      	movs	r3, r0
 800fece:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fed0:	197b      	adds	r3, r7, r5
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d13d      	bne.n	800ff54 <HAL_I2C_Master_Transmit_DMA+0x188>
 800fed8:	e013      	b.n	800ff02 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2241      	movs	r2, #65	@ 0x41
 800fede:	2120      	movs	r1, #32
 800fee0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2242      	movs	r2, #66	@ 0x42
 800fee6:	2100      	movs	r1, #0
 800fee8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feee:	2280      	movs	r2, #128	@ 0x80
 800fef0:	431a      	orrs	r2, r3
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2240      	movs	r2, #64	@ 0x40
 800fefa:	2100      	movs	r1, #0
 800fefc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	e059      	b.n	800ffb6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff06:	b2da      	uxtb	r2, r3
 800ff08:	697c      	ldr	r4, [r7, #20]
 800ff0a:	230a      	movs	r3, #10
 800ff0c:	18fb      	adds	r3, r7, r3
 800ff0e:	8819      	ldrh	r1, [r3, #0]
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	4b2f      	ldr	r3, [pc, #188]	@ (800ffd0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800ff14:	9300      	str	r3, [sp, #0]
 800ff16:	0023      	movs	r3, r4
 800ff18:	f001 ff60 	bl	8011ddc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	2240      	movs	r2, #64	@ 0x40
 800ff32:	2100      	movs	r1, #0
 800ff34:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2110      	movs	r1, #16
 800ff3a:	0018      	movs	r0, r3
 800ff3c:	f001 ff88 	bl	8011e50 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2180      	movs	r1, #128	@ 0x80
 800ff4c:	01c9      	lsls	r1, r1, #7
 800ff4e:	430a      	orrs	r2, r1
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	e02d      	b.n	800ffb0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2241      	movs	r2, #65	@ 0x41
 800ff58:	2120      	movs	r1, #32
 800ff5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2242      	movs	r2, #66	@ 0x42
 800ff60:	2100      	movs	r1, #0
 800ff62:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff68:	2210      	movs	r2, #16
 800ff6a:	431a      	orrs	r2, r3
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2240      	movs	r2, #64	@ 0x40
 800ff74:	2100      	movs	r1, #0
 800ff76:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e01c      	b.n	800ffb6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	4a15      	ldr	r2, [pc, #84]	@ (800ffd4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800ff80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff86:	b2da      	uxtb	r2, r3
 800ff88:	2380      	movs	r3, #128	@ 0x80
 800ff8a:	049c      	lsls	r4, r3, #18
 800ff8c:	230a      	movs	r3, #10
 800ff8e:	18fb      	adds	r3, r7, r3
 800ff90:	8819      	ldrh	r1, [r3, #0]
 800ff92:	68f8      	ldr	r0, [r7, #12]
 800ff94:	4b0e      	ldr	r3, [pc, #56]	@ (800ffd0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	0023      	movs	r3, r4
 800ff9a:	f001 ff1f 	bl	8011ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2240      	movs	r2, #64	@ 0x40
 800ffa2:	2100      	movs	r1, #0
 800ffa4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2101      	movs	r1, #1
 800ffaa:	0018      	movs	r0, r3
 800ffac:	f001 ff50 	bl	8011e50 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	e000      	b.n	800ffb6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ffb4:	2302      	movs	r3, #2
  }
}
 800ffb6:	0018      	movs	r0, r3
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	b006      	add	sp, #24
 800ffbc:	bdb0      	pop	{r4, r5, r7, pc}
 800ffbe:	46c0      	nop			@ (mov r8, r8)
 800ffc0:	ffff0000 	.word	0xffff0000
 800ffc4:	080107d1 	.word	0x080107d1
 800ffc8:	08011789 	.word	0x08011789
 800ffcc:	080118c9 	.word	0x080118c9
 800ffd0:	80002000 	.word	0x80002000
 800ffd4:	0801037d 	.word	0x0801037d

0800ffd8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800ffd8:	b5b0      	push	{r4, r5, r7, lr}
 800ffda:	b088      	sub	sp, #32
 800ffdc:	af02      	add	r7, sp, #8
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	0008      	movs	r0, r1
 800ffe2:	607a      	str	r2, [r7, #4]
 800ffe4:	0019      	movs	r1, r3
 800ffe6:	230a      	movs	r3, #10
 800ffe8:	18fb      	adds	r3, r7, r3
 800ffea:	1c02      	adds	r2, r0, #0
 800ffec:	801a      	strh	r2, [r3, #0]
 800ffee:	2308      	movs	r3, #8
 800fff0:	18fb      	adds	r3, r7, r3
 800fff2:	1c0a      	adds	r2, r1, #0
 800fff4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2241      	movs	r2, #65	@ 0x41
 800fffa:	5c9b      	ldrb	r3, [r3, r2]
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	2b20      	cmp	r3, #32
 8010000:	d000      	beq.n	8010004 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010002:	e0dd      	b.n	80101c0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	699a      	ldr	r2, [r3, #24]
 801000a:	2380      	movs	r3, #128	@ 0x80
 801000c:	021b      	lsls	r3, r3, #8
 801000e:	401a      	ands	r2, r3
 8010010:	2380      	movs	r3, #128	@ 0x80
 8010012:	021b      	lsls	r3, r3, #8
 8010014:	429a      	cmp	r2, r3
 8010016:	d101      	bne.n	801001c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010018:	2302      	movs	r3, #2
 801001a:	e0d2      	b.n	80101c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2240      	movs	r2, #64	@ 0x40
 8010020:	5c9b      	ldrb	r3, [r3, r2]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d101      	bne.n	801002a <HAL_I2C_Master_Receive_DMA+0x52>
 8010026:	2302      	movs	r3, #2
 8010028:	e0cb      	b.n	80101c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2240      	movs	r2, #64	@ 0x40
 801002e:	2101      	movs	r1, #1
 8010030:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2241      	movs	r2, #65	@ 0x41
 8010036:	2122      	movs	r1, #34	@ 0x22
 8010038:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2242      	movs	r2, #66	@ 0x42
 801003e:	2110      	movs	r1, #16
 8010040:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2200      	movs	r2, #0
 8010046:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2208      	movs	r2, #8
 8010052:	18ba      	adds	r2, r7, r2
 8010054:	8812      	ldrh	r2, [r2, #0]
 8010056:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	4a5c      	ldr	r2, [pc, #368]	@ (80101cc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 801005c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	4a5b      	ldr	r2, [pc, #364]	@ (80101d0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010062:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010068:	b29b      	uxth	r3, r3
 801006a:	2bff      	cmp	r3, #255	@ 0xff
 801006c:	d906      	bls.n	801007c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	22ff      	movs	r2, #255	@ 0xff
 8010072:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010074:	2380      	movs	r3, #128	@ 0x80
 8010076:	045b      	lsls	r3, r3, #17
 8010078:	617b      	str	r3, [r7, #20]
 801007a:	e007      	b.n	801008c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010080:	b29a      	uxth	r2, r3
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010086:	2380      	movs	r3, #128	@ 0x80
 8010088:	049b      	lsls	r3, r3, #18
 801008a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010090:	2b00      	cmp	r3, #0
 8010092:	d100      	bne.n	8010096 <HAL_I2C_Master_Receive_DMA+0xbe>
 8010094:	e078      	b.n	8010188 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801009a:	2b00      	cmp	r3, #0
 801009c:	d023      	beq.n	80100e6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100a2:	4a4c      	ldr	r2, [pc, #304]	@ (80101d4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80100a4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100aa:	4a4b      	ldr	r2, [pc, #300]	@ (80101d8 <HAL_I2C_Master_Receive_DMA+0x200>)
 80100ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100b2:	2200      	movs	r2, #0
 80100b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100ba:	2200      	movs	r2, #0
 80100bc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	3324      	adds	r3, #36	@ 0x24
 80100c8:	0019      	movs	r1, r3
 80100ca:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80100d0:	2513      	movs	r5, #19
 80100d2:	197c      	adds	r4, r7, r5
 80100d4:	f7fe fe5c 	bl	800ed90 <HAL_DMA_Start_IT>
 80100d8:	0003      	movs	r3, r0
 80100da:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80100dc:	197b      	adds	r3, r7, r5
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d13d      	bne.n	8010160 <HAL_I2C_Master_Receive_DMA+0x188>
 80100e4:	e013      	b.n	801010e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2241      	movs	r2, #65	@ 0x41
 80100ea:	2120      	movs	r1, #32
 80100ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2242      	movs	r2, #66	@ 0x42
 80100f2:	2100      	movs	r1, #0
 80100f4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100fa:	2280      	movs	r2, #128	@ 0x80
 80100fc:	431a      	orrs	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	2240      	movs	r2, #64	@ 0x40
 8010106:	2100      	movs	r1, #0
 8010108:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e059      	b.n	80101c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010112:	b2da      	uxtb	r2, r3
 8010114:	697c      	ldr	r4, [r7, #20]
 8010116:	230a      	movs	r3, #10
 8010118:	18fb      	adds	r3, r7, r3
 801011a:	8819      	ldrh	r1, [r3, #0]
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	4b2f      	ldr	r3, [pc, #188]	@ (80101dc <HAL_I2C_Master_Receive_DMA+0x204>)
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	0023      	movs	r3, r4
 8010124:	f001 fe5a 	bl	8011ddc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801012c:	b29a      	uxth	r2, r3
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	b29a      	uxth	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2240      	movs	r2, #64	@ 0x40
 801013e:	2100      	movs	r1, #0
 8010140:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2110      	movs	r1, #16
 8010146:	0018      	movs	r0, r3
 8010148:	f001 fe82 	bl	8011e50 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	2180      	movs	r1, #128	@ 0x80
 8010158:	0209      	lsls	r1, r1, #8
 801015a:	430a      	orrs	r2, r1
 801015c:	601a      	str	r2, [r3, #0]
 801015e:	e02d      	b.n	80101bc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2241      	movs	r2, #65	@ 0x41
 8010164:	2120      	movs	r1, #32
 8010166:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2242      	movs	r2, #66	@ 0x42
 801016c:	2100      	movs	r1, #0
 801016e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010174:	2210      	movs	r2, #16
 8010176:	431a      	orrs	r2, r3
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2240      	movs	r2, #64	@ 0x40
 8010180:	2100      	movs	r1, #0
 8010182:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010184:	2301      	movs	r3, #1
 8010186:	e01c      	b.n	80101c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	4a15      	ldr	r2, [pc, #84]	@ (80101e0 <HAL_I2C_Master_Receive_DMA+0x208>)
 801018c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010192:	b2da      	uxtb	r2, r3
 8010194:	2380      	movs	r3, #128	@ 0x80
 8010196:	049c      	lsls	r4, r3, #18
 8010198:	230a      	movs	r3, #10
 801019a:	18fb      	adds	r3, r7, r3
 801019c:	8819      	ldrh	r1, [r3, #0]
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	4b0e      	ldr	r3, [pc, #56]	@ (80101dc <HAL_I2C_Master_Receive_DMA+0x204>)
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	0023      	movs	r3, r4
 80101a6:	f001 fe19 	bl	8011ddc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2240      	movs	r2, #64	@ 0x40
 80101ae:	2100      	movs	r1, #0
 80101b0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2101      	movs	r1, #1
 80101b6:	0018      	movs	r0, r3
 80101b8:	f001 fe4a 	bl	8011e50 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80101bc:	2300      	movs	r3, #0
 80101be:	e000      	b.n	80101c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80101c0:	2302      	movs	r3, #2
  }
}
 80101c2:	0018      	movs	r0, r3
 80101c4:	46bd      	mov	sp, r7
 80101c6:	b006      	add	sp, #24
 80101c8:	bdb0      	pop	{r4, r5, r7, pc}
 80101ca:	46c0      	nop			@ (mov r8, r8)
 80101cc:	ffff0000 	.word	0xffff0000
 80101d0:	080107d1 	.word	0x080107d1
 80101d4:	08011829 	.word	0x08011829
 80101d8:	080118c9 	.word	0x080118c9
 80101dc:	80002400 	.word	0x80002400
 80101e0:	0801037d 	.word	0x0801037d

080101e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	699b      	ldr	r3, [r3, #24]
 80101f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010200:	2b00      	cmp	r3, #0
 8010202:	d005      	beq.n	8010210 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010208:	68ba      	ldr	r2, [r7, #8]
 801020a:	68f9      	ldr	r1, [r7, #12]
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	4798      	blx	r3
  }
}
 8010210:	46c0      	nop			@ (mov r8, r8)
 8010212:	46bd      	mov	sp, r7
 8010214:	b004      	add	sp, #16
 8010216:	bd80      	pop	{r7, pc}

08010218 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b086      	sub	sp, #24
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010230:	697a      	ldr	r2, [r7, #20]
 8010232:	2380      	movs	r3, #128	@ 0x80
 8010234:	005b      	lsls	r3, r3, #1
 8010236:	4013      	ands	r3, r2
 8010238:	d00e      	beq.n	8010258 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	2280      	movs	r2, #128	@ 0x80
 801023e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010240:	d00a      	beq.n	8010258 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010246:	2201      	movs	r2, #1
 8010248:	431a      	orrs	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2280      	movs	r2, #128	@ 0x80
 8010254:	0052      	lsls	r2, r2, #1
 8010256:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	2380      	movs	r3, #128	@ 0x80
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	4013      	ands	r3, r2
 8010260:	d00e      	beq.n	8010280 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	2280      	movs	r2, #128	@ 0x80
 8010266:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010268:	d00a      	beq.n	8010280 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801026e:	2208      	movs	r2, #8
 8010270:	431a      	orrs	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2280      	movs	r2, #128	@ 0x80
 801027c:	00d2      	lsls	r2, r2, #3
 801027e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010280:	697a      	ldr	r2, [r7, #20]
 8010282:	2380      	movs	r3, #128	@ 0x80
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	4013      	ands	r3, r2
 8010288:	d00e      	beq.n	80102a8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	2280      	movs	r2, #128	@ 0x80
 801028e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010290:	d00a      	beq.n	80102a8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010296:	2202      	movs	r2, #2
 8010298:	431a      	orrs	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	2280      	movs	r2, #128	@ 0x80
 80102a4:	0092      	lsls	r2, r2, #2
 80102a6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102ac:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	220b      	movs	r2, #11
 80102b2:	4013      	ands	r3, r2
 80102b4:	d005      	beq.n	80102c2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	0011      	movs	r1, r2
 80102bc:	0018      	movs	r0, r3
 80102be:	f001 f915 	bl	80114ec <I2C_ITError>
  }
}
 80102c2:	46c0      	nop			@ (mov r8, r8)
 80102c4:	46bd      	mov	sp, r7
 80102c6:	b006      	add	sp, #24
 80102c8:	bd80      	pop	{r7, pc}

080102ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b082      	sub	sp, #8
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80102d2:	46c0      	nop			@ (mov r8, r8)
 80102d4:	46bd      	mov	sp, r7
 80102d6:	b002      	add	sp, #8
 80102d8:	bd80      	pop	{r7, pc}

080102da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102da:	b580      	push	{r7, lr}
 80102dc:	b082      	sub	sp, #8
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80102e2:	46c0      	nop			@ (mov r8, r8)
 80102e4:	46bd      	mov	sp, r7
 80102e6:	b002      	add	sp, #8
 80102e8:	bd80      	pop	{r7, pc}

080102ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80102f2:	46c0      	nop			@ (mov r8, r8)
 80102f4:	46bd      	mov	sp, r7
 80102f6:	b002      	add	sp, #8
 80102f8:	bd80      	pop	{r7, pc}

080102fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80102fa:	b580      	push	{r7, lr}
 80102fc:	b082      	sub	sp, #8
 80102fe:	af00      	add	r7, sp, #0
 8010300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010302:	46c0      	nop			@ (mov r8, r8)
 8010304:	46bd      	mov	sp, r7
 8010306:	b002      	add	sp, #8
 8010308:	bd80      	pop	{r7, pc}

0801030a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b082      	sub	sp, #8
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
 8010312:	0008      	movs	r0, r1
 8010314:	0011      	movs	r1, r2
 8010316:	1cfb      	adds	r3, r7, #3
 8010318:	1c02      	adds	r2, r0, #0
 801031a:	701a      	strb	r2, [r3, #0]
 801031c:	003b      	movs	r3, r7
 801031e:	1c0a      	adds	r2, r1, #0
 8010320:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010322:	46c0      	nop			@ (mov r8, r8)
 8010324:	46bd      	mov	sp, r7
 8010326:	b002      	add	sp, #8
 8010328:	bd80      	pop	{r7, pc}

0801032a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b082      	sub	sp, #8
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010332:	46c0      	nop			@ (mov r8, r8)
 8010334:	46bd      	mov	sp, r7
 8010336:	b002      	add	sp, #8
 8010338:	bd80      	pop	{r7, pc}

0801033a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801033a:	b580      	push	{r7, lr}
 801033c:	b082      	sub	sp, #8
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010342:	46c0      	nop			@ (mov r8, r8)
 8010344:	46bd      	mov	sp, r7
 8010346:	b002      	add	sp, #8
 8010348:	bd80      	pop	{r7, pc}

0801034a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010352:	46c0      	nop			@ (mov r8, r8)
 8010354:	46bd      	mov	sp, r7
 8010356:	b002      	add	sp, #8
 8010358:	bd80      	pop	{r7, pc}

0801035a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010362:	46c0      	nop			@ (mov r8, r8)
 8010364:	46bd      	mov	sp, r7
 8010366:	b002      	add	sp, #8
 8010368:	bd80      	pop	{r7, pc}

0801036a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b082      	sub	sp, #8
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010372:	46c0      	nop			@ (mov r8, r8)
 8010374:	46bd      	mov	sp, r7
 8010376:	b002      	add	sp, #8
 8010378:	bd80      	pop	{r7, pc}
	...

0801037c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801037c:	b590      	push	{r4, r7, lr}
 801037e:	b089      	sub	sp, #36	@ 0x24
 8010380:	af02      	add	r7, sp, #8
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2240      	movs	r2, #64	@ 0x40
 8010390:	5c9b      	ldrb	r3, [r3, r2]
 8010392:	2b01      	cmp	r3, #1
 8010394:	d101      	bne.n	801039a <I2C_Master_ISR_IT+0x1e>
 8010396:	2302      	movs	r3, #2
 8010398:	e113      	b.n	80105c2 <I2C_Master_ISR_IT+0x246>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2240      	movs	r2, #64	@ 0x40
 801039e:	2101      	movs	r1, #1
 80103a0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	2210      	movs	r2, #16
 80103a6:	4013      	ands	r3, r2
 80103a8:	d012      	beq.n	80103d0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2210      	movs	r2, #16
 80103ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80103b0:	d00e      	beq.n	80103d0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2210      	movs	r2, #16
 80103b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103be:	2204      	movs	r2, #4
 80103c0:	431a      	orrs	r2, r3
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	0018      	movs	r0, r3
 80103ca:	f001 f9ba 	bl	8011742 <I2C_Flush_TXDR>
 80103ce:	e0e5      	b.n	801059c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	2204      	movs	r2, #4
 80103d4:	4013      	ands	r3, r2
 80103d6:	d021      	beq.n	801041c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2204      	movs	r2, #4
 80103dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80103de:	d01d      	beq.n	801041c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	2204      	movs	r2, #4
 80103e4:	4393      	bics	r3, r2
 80103e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103f2:	b2d2      	uxtb	r2, r2
 80103f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103fa:	1c5a      	adds	r2, r3, #1
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010404:	3b01      	subs	r3, #1
 8010406:	b29a      	uxth	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010410:	b29b      	uxth	r3, r3
 8010412:	3b01      	subs	r3, #1
 8010414:	b29a      	uxth	r2, r3
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801041a:	e0bf      	b.n	801059c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	2202      	movs	r2, #2
 8010420:	4013      	ands	r3, r2
 8010422:	d01c      	beq.n	801045e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2202      	movs	r2, #2
 8010428:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801042a:	d018      	beq.n	801045e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010430:	781a      	ldrb	r2, [r3, #0]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801043c:	1c5a      	adds	r2, r3, #1
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010446:	3b01      	subs	r3, #1
 8010448:	b29a      	uxth	r2, r3
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010452:	b29b      	uxth	r3, r3
 8010454:	3b01      	subs	r3, #1
 8010456:	b29a      	uxth	r2, r3
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801045c:	e09e      	b.n	801059c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	2280      	movs	r2, #128	@ 0x80
 8010462:	4013      	ands	r3, r2
 8010464:	d100      	bne.n	8010468 <I2C_Master_ISR_IT+0xec>
 8010466:	e069      	b.n	801053c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2240      	movs	r2, #64	@ 0x40
 801046c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801046e:	d065      	beq.n	801053c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010474:	b29b      	uxth	r3, r3
 8010476:	2b00      	cmp	r3, #0
 8010478:	d04a      	beq.n	8010510 <I2C_Master_ISR_IT+0x194>
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801047e:	2b00      	cmp	r3, #0
 8010480:	d146      	bne.n	8010510 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	b29a      	uxth	r2, r3
 801048a:	2112      	movs	r1, #18
 801048c:	187b      	adds	r3, r7, r1
 801048e:	0592      	lsls	r2, r2, #22
 8010490:	0d92      	lsrs	r2, r2, #22
 8010492:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010498:	b29b      	uxth	r3, r3
 801049a:	2bff      	cmp	r3, #255	@ 0xff
 801049c:	d910      	bls.n	80104c0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	22ff      	movs	r2, #255	@ 0xff
 80104a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	2380      	movs	r3, #128	@ 0x80
 80104ac:	045c      	lsls	r4, r3, #17
 80104ae:	187b      	adds	r3, r7, r1
 80104b0:	8819      	ldrh	r1, [r3, #0]
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	2300      	movs	r3, #0
 80104b6:	9300      	str	r3, [sp, #0]
 80104b8:	0023      	movs	r3, r4
 80104ba:	f001 fc8f 	bl	8011ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104be:	e03c      	b.n	801053a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ce:	4a3f      	ldr	r2, [pc, #252]	@ (80105cc <I2C_Master_ISR_IT+0x250>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d00e      	beq.n	80104f2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104d8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80104de:	2312      	movs	r3, #18
 80104e0:	18fb      	adds	r3, r7, r3
 80104e2:	8819      	ldrh	r1, [r3, #0]
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	2300      	movs	r3, #0
 80104e8:	9300      	str	r3, [sp, #0]
 80104ea:	0023      	movs	r3, r4
 80104ec:	f001 fc76 	bl	8011ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104f0:	e023      	b.n	801053a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	2380      	movs	r3, #128	@ 0x80
 80104fa:	049c      	lsls	r4, r3, #18
 80104fc:	2312      	movs	r3, #18
 80104fe:	18fb      	adds	r3, r7, r3
 8010500:	8819      	ldrh	r1, [r3, #0]
 8010502:	68f8      	ldr	r0, [r7, #12]
 8010504:	2300      	movs	r3, #0
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	0023      	movs	r3, r4
 801050a:	f001 fc67 	bl	8011ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801050e:	e014      	b.n	801053a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	685a      	ldr	r2, [r3, #4]
 8010516:	2380      	movs	r3, #128	@ 0x80
 8010518:	049b      	lsls	r3, r3, #18
 801051a:	401a      	ands	r2, r3
 801051c:	2380      	movs	r3, #128	@ 0x80
 801051e:	049b      	lsls	r3, r3, #18
 8010520:	429a      	cmp	r2, r3
 8010522:	d004      	beq.n	801052e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	0018      	movs	r0, r3
 8010528:	f000 fcf4 	bl	8010f14 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801052c:	e036      	b.n	801059c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2140      	movs	r1, #64	@ 0x40
 8010532:	0018      	movs	r0, r3
 8010534:	f000 ffda 	bl	80114ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010538:	e030      	b.n	801059c <I2C_Master_ISR_IT+0x220>
 801053a:	e02f      	b.n	801059c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	2240      	movs	r2, #64	@ 0x40
 8010540:	4013      	ands	r3, r2
 8010542:	d02b      	beq.n	801059c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2240      	movs	r2, #64	@ 0x40
 8010548:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801054a:	d027      	beq.n	801059c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010550:	b29b      	uxth	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	d11d      	bne.n	8010592 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	685a      	ldr	r2, [r3, #4]
 801055c:	2380      	movs	r3, #128	@ 0x80
 801055e:	049b      	lsls	r3, r3, #18
 8010560:	401a      	ands	r2, r3
 8010562:	2380      	movs	r3, #128	@ 0x80
 8010564:	049b      	lsls	r3, r3, #18
 8010566:	429a      	cmp	r2, r3
 8010568:	d018      	beq.n	801059c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801056e:	4a17      	ldr	r2, [pc, #92]	@ (80105cc <I2C_Master_ISR_IT+0x250>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d109      	bne.n	8010588 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2180      	movs	r1, #128	@ 0x80
 8010580:	01c9      	lsls	r1, r1, #7
 8010582:	430a      	orrs	r2, r1
 8010584:	605a      	str	r2, [r3, #4]
 8010586:	e009      	b.n	801059c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	0018      	movs	r0, r3
 801058c:	f000 fcc2 	bl	8010f14 <I2C_ITMasterSeqCplt>
 8010590:	e004      	b.n	801059c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2140      	movs	r1, #64	@ 0x40
 8010596:	0018      	movs	r0, r3
 8010598:	f000 ffa8 	bl	80114ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	2220      	movs	r2, #32
 80105a0:	4013      	ands	r3, r2
 80105a2:	d009      	beq.n	80105b8 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2220      	movs	r2, #32
 80105a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80105aa:	d005      	beq.n	80105b8 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80105ac:	697a      	ldr	r2, [r7, #20]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	0011      	movs	r1, r2
 80105b2:	0018      	movs	r0, r3
 80105b4:	f000 fd54 	bl	8011060 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	2240      	movs	r2, #64	@ 0x40
 80105bc:	2100      	movs	r1, #0
 80105be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80105c0:	2300      	movs	r3, #0
}
 80105c2:	0018      	movs	r0, r3
 80105c4:	46bd      	mov	sp, r7
 80105c6:	b007      	add	sp, #28
 80105c8:	bd90      	pop	{r4, r7, pc}
 80105ca:	46c0      	nop			@ (mov r8, r8)
 80105cc:	ffff0000 	.word	0xffff0000

080105d0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b086      	sub	sp, #24
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2240      	movs	r2, #64	@ 0x40
 80105ea:	5c9b      	ldrb	r3, [r3, r2]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d101      	bne.n	80105f4 <I2C_Slave_ISR_IT+0x24>
 80105f0:	2302      	movs	r3, #2
 80105f2:	e0e6      	b.n	80107c2 <I2C_Slave_ISR_IT+0x1f2>
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2240      	movs	r2, #64	@ 0x40
 80105f8:	2101      	movs	r1, #1
 80105fa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	2220      	movs	r2, #32
 8010600:	4013      	ands	r3, r2
 8010602:	d009      	beq.n	8010618 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2220      	movs	r2, #32
 8010608:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801060a:	d005      	beq.n	8010618 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 801060c:	693a      	ldr	r2, [r7, #16]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	0011      	movs	r1, r2
 8010612:	0018      	movs	r0, r3
 8010614:	f000 fdf2 	bl	80111fc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	2210      	movs	r2, #16
 801061c:	4013      	ands	r3, r2
 801061e:	d052      	beq.n	80106c6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2210      	movs	r2, #16
 8010624:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010626:	d04e      	beq.n	80106c6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801062c:	b29b      	uxth	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d12d      	bne.n	801068e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2241      	movs	r2, #65	@ 0x41
 8010636:	5c9b      	ldrb	r3, [r3, r2]
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b28      	cmp	r3, #40	@ 0x28
 801063c:	d10b      	bne.n	8010656 <I2C_Slave_ISR_IT+0x86>
 801063e:	697a      	ldr	r2, [r7, #20]
 8010640:	2380      	movs	r3, #128	@ 0x80
 8010642:	049b      	lsls	r3, r3, #18
 8010644:	429a      	cmp	r2, r3
 8010646:	d106      	bne.n	8010656 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	0011      	movs	r1, r2
 801064e:	0018      	movs	r0, r3
 8010650:	f000 fef4 	bl	801143c <I2C_ITListenCplt>
 8010654:	e036      	b.n	80106c4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2241      	movs	r2, #65	@ 0x41
 801065a:	5c9b      	ldrb	r3, [r3, r2]
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b29      	cmp	r3, #41	@ 0x29
 8010660:	d110      	bne.n	8010684 <I2C_Slave_ISR_IT+0xb4>
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	4a59      	ldr	r2, [pc, #356]	@ (80107cc <I2C_Slave_ISR_IT+0x1fc>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d00c      	beq.n	8010684 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2210      	movs	r2, #16
 8010670:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	0018      	movs	r0, r3
 8010676:	f001 f864 	bl	8011742 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	0018      	movs	r0, r3
 801067e:	f000 fc8b 	bl	8010f98 <I2C_ITSlaveSeqCplt>
 8010682:	e01f      	b.n	80106c4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2210      	movs	r2, #16
 801068a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 801068c:	e091      	b.n	80107b2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2210      	movs	r2, #16
 8010694:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801069a:	2204      	movs	r2, #4
 801069c:	431a      	orrs	r2, r3
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d005      	beq.n	80106b4 <I2C_Slave_ISR_IT+0xe4>
 80106a8:	697a      	ldr	r2, [r7, #20]
 80106aa:	2380      	movs	r3, #128	@ 0x80
 80106ac:	045b      	lsls	r3, r3, #17
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d000      	beq.n	80106b4 <I2C_Slave_ISR_IT+0xe4>
 80106b2:	e07e      	b.n	80107b2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	0011      	movs	r1, r2
 80106bc:	0018      	movs	r0, r3
 80106be:	f000 ff15 	bl	80114ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80106c2:	e076      	b.n	80107b2 <I2C_Slave_ISR_IT+0x1e2>
 80106c4:	e075      	b.n	80107b2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	2204      	movs	r2, #4
 80106ca:	4013      	ands	r3, r2
 80106cc:	d02f      	beq.n	801072e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2204      	movs	r2, #4
 80106d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80106d4:	d02b      	beq.n	801072e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106da:	b29b      	uxth	r3, r3
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d018      	beq.n	8010712 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ea:	b2d2      	uxtb	r2, r2
 80106ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106f2:	1c5a      	adds	r2, r3, #1
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106fc:	3b01      	subs	r3, #1
 80106fe:	b29a      	uxth	r2, r3
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010708:	b29b      	uxth	r3, r3
 801070a:	3b01      	subs	r3, #1
 801070c:	b29a      	uxth	r2, r3
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010716:	b29b      	uxth	r3, r3
 8010718:	2b00      	cmp	r3, #0
 801071a:	d14c      	bne.n	80107b6 <I2C_Slave_ISR_IT+0x1e6>
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	4a2b      	ldr	r2, [pc, #172]	@ (80107cc <I2C_Slave_ISR_IT+0x1fc>)
 8010720:	4293      	cmp	r3, r2
 8010722:	d048      	beq.n	80107b6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	0018      	movs	r0, r3
 8010728:	f000 fc36 	bl	8010f98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801072c:	e043      	b.n	80107b6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	2208      	movs	r2, #8
 8010732:	4013      	ands	r3, r2
 8010734:	d00a      	beq.n	801074c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2208      	movs	r2, #8
 801073a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801073c:	d006      	beq.n	801074c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 801073e:	693a      	ldr	r2, [r7, #16]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	0011      	movs	r1, r2
 8010744:	0018      	movs	r0, r3
 8010746:	f000 fb41 	bl	8010dcc <I2C_ITAddrCplt>
 801074a:	e035      	b.n	80107b8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	2202      	movs	r2, #2
 8010750:	4013      	ands	r3, r2
 8010752:	d031      	beq.n	80107b8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2202      	movs	r2, #2
 8010758:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801075a:	d02d      	beq.n	80107b8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010760:	b29b      	uxth	r3, r3
 8010762:	2b00      	cmp	r3, #0
 8010764:	d018      	beq.n	8010798 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801076a:	781a      	ldrb	r2, [r3, #0]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010780:	b29b      	uxth	r3, r3
 8010782:	3b01      	subs	r3, #1
 8010784:	b29a      	uxth	r2, r3
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801078e:	3b01      	subs	r3, #1
 8010790:	b29a      	uxth	r2, r3
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010796:	e00f      	b.n	80107b8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010798:	697a      	ldr	r2, [r7, #20]
 801079a:	2380      	movs	r3, #128	@ 0x80
 801079c:	045b      	lsls	r3, r3, #17
 801079e:	429a      	cmp	r2, r3
 80107a0:	d002      	beq.n	80107a8 <I2C_Slave_ISR_IT+0x1d8>
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d107      	bne.n	80107b8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	0018      	movs	r0, r3
 80107ac:	f000 fbf4 	bl	8010f98 <I2C_ITSlaveSeqCplt>
 80107b0:	e002      	b.n	80107b8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80107b2:	46c0      	nop			@ (mov r8, r8)
 80107b4:	e000      	b.n	80107b8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80107b6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2240      	movs	r2, #64	@ 0x40
 80107bc:	2100      	movs	r1, #0
 80107be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80107c0:	2300      	movs	r3, #0
}
 80107c2:	0018      	movs	r0, r3
 80107c4:	46bd      	mov	sp, r7
 80107c6:	b006      	add	sp, #24
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	46c0      	nop			@ (mov r8, r8)
 80107cc:	ffff0000 	.word	0xffff0000

080107d0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80107d0:	b590      	push	{r4, r7, lr}
 80107d2:	b089      	sub	sp, #36	@ 0x24
 80107d4:	af02      	add	r7, sp, #8
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2240      	movs	r2, #64	@ 0x40
 80107e0:	5c9b      	ldrb	r3, [r3, r2]
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d101      	bne.n	80107ea <I2C_Master_ISR_DMA+0x1a>
 80107e6:	2302      	movs	r3, #2
 80107e8:	e0e7      	b.n	80109ba <I2C_Master_ISR_DMA+0x1ea>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2240      	movs	r2, #64	@ 0x40
 80107ee:	2101      	movs	r1, #1
 80107f0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2210      	movs	r2, #16
 80107f6:	4013      	ands	r3, r2
 80107f8:	d017      	beq.n	801082a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2210      	movs	r2, #16
 80107fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010800:	d013      	beq.n	801082a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	2210      	movs	r2, #16
 8010808:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801080e:	2204      	movs	r2, #4
 8010810:	431a      	orrs	r2, r3
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2120      	movs	r1, #32
 801081a:	0018      	movs	r0, r3
 801081c:	f001 fb18 	bl	8011e50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	0018      	movs	r0, r3
 8010824:	f000 ff8d 	bl	8011742 <I2C_Flush_TXDR>
 8010828:	e0c2      	b.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2280      	movs	r2, #128	@ 0x80
 801082e:	4013      	ands	r3, r2
 8010830:	d100      	bne.n	8010834 <I2C_Master_ISR_DMA+0x64>
 8010832:	e07c      	b.n	801092e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2240      	movs	r2, #64	@ 0x40
 8010838:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801083a:	d100      	bne.n	801083e <I2C_Master_ISR_DMA+0x6e>
 801083c:	e077      	b.n	801092e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2140      	movs	r1, #64	@ 0x40
 801084a:	438a      	bics	r2, r1
 801084c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010852:	b29b      	uxth	r3, r3
 8010854:	2b00      	cmp	r3, #0
 8010856:	d055      	beq.n	8010904 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	b29a      	uxth	r2, r3
 8010860:	2312      	movs	r3, #18
 8010862:	18fb      	adds	r3, r7, r3
 8010864:	0592      	lsls	r2, r2, #22
 8010866:	0d92      	lsrs	r2, r2, #22
 8010868:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801086e:	b29b      	uxth	r3, r3
 8010870:	2bff      	cmp	r3, #255	@ 0xff
 8010872:	d906      	bls.n	8010882 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	22ff      	movs	r2, #255	@ 0xff
 8010878:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801087a:	2380      	movs	r3, #128	@ 0x80
 801087c:	045b      	lsls	r3, r3, #17
 801087e:	617b      	str	r3, [r7, #20]
 8010880:	e010      	b.n	80108a4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010886:	b29a      	uxth	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010890:	4a4c      	ldr	r2, [pc, #304]	@ (80109c4 <I2C_Master_ISR_DMA+0x1f4>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d003      	beq.n	801089e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801089a:	617b      	str	r3, [r7, #20]
 801089c:	e002      	b.n	80108a4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801089e:	2380      	movs	r3, #128	@ 0x80
 80108a0:	049b      	lsls	r3, r3, #18
 80108a2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108a8:	b2da      	uxtb	r2, r3
 80108aa:	697c      	ldr	r4, [r7, #20]
 80108ac:	2312      	movs	r3, #18
 80108ae:	18fb      	adds	r3, r7, r3
 80108b0:	8819      	ldrh	r1, [r3, #0]
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	2300      	movs	r3, #0
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	0023      	movs	r3, r4
 80108ba:	f001 fa8f 	bl	8011ddc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108c8:	1ad3      	subs	r3, r2, r3
 80108ca:	b29a      	uxth	r2, r3
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2241      	movs	r2, #65	@ 0x41
 80108d4:	5c9b      	ldrb	r3, [r3, r2]
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	2b22      	cmp	r3, #34	@ 0x22
 80108da:	d109      	bne.n	80108f0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2180      	movs	r1, #128	@ 0x80
 80108e8:	0209      	lsls	r1, r1, #8
 80108ea:	430a      	orrs	r2, r1
 80108ec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80108ee:	e05f      	b.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	681a      	ldr	r2, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	2180      	movs	r1, #128	@ 0x80
 80108fc:	01c9      	lsls	r1, r1, #7
 80108fe:	430a      	orrs	r2, r1
 8010900:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010902:	e055      	b.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	685a      	ldr	r2, [r3, #4]
 801090a:	2380      	movs	r3, #128	@ 0x80
 801090c:	049b      	lsls	r3, r3, #18
 801090e:	401a      	ands	r2, r3
 8010910:	2380      	movs	r3, #128	@ 0x80
 8010912:	049b      	lsls	r3, r3, #18
 8010914:	429a      	cmp	r2, r3
 8010916:	d004      	beq.n	8010922 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	0018      	movs	r0, r3
 801091c:	f000 fafa 	bl	8010f14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8010920:	e046      	b.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2140      	movs	r1, #64	@ 0x40
 8010926:	0018      	movs	r0, r3
 8010928:	f000 fde0 	bl	80114ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801092c:	e040      	b.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	2240      	movs	r2, #64	@ 0x40
 8010932:	4013      	ands	r3, r2
 8010934:	d02c      	beq.n	8010990 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2240      	movs	r2, #64	@ 0x40
 801093a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801093c:	d028      	beq.n	8010990 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010942:	b29b      	uxth	r3, r3
 8010944:	2b00      	cmp	r3, #0
 8010946:	d11d      	bne.n	8010984 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	685a      	ldr	r2, [r3, #4]
 801094e:	2380      	movs	r3, #128	@ 0x80
 8010950:	049b      	lsls	r3, r3, #18
 8010952:	401a      	ands	r2, r3
 8010954:	2380      	movs	r3, #128	@ 0x80
 8010956:	049b      	lsls	r3, r3, #18
 8010958:	429a      	cmp	r2, r3
 801095a:	d028      	beq.n	80109ae <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010960:	4a18      	ldr	r2, [pc, #96]	@ (80109c4 <I2C_Master_ISR_DMA+0x1f4>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d109      	bne.n	801097a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	685a      	ldr	r2, [r3, #4]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2180      	movs	r1, #128	@ 0x80
 8010972:	01c9      	lsls	r1, r1, #7
 8010974:	430a      	orrs	r2, r1
 8010976:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010978:	e019      	b.n	80109ae <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	0018      	movs	r0, r3
 801097e:	f000 fac9 	bl	8010f14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8010982:	e014      	b.n	80109ae <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2140      	movs	r1, #64	@ 0x40
 8010988:	0018      	movs	r0, r3
 801098a:	f000 fdaf 	bl	80114ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801098e:	e00e      	b.n	80109ae <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	2220      	movs	r2, #32
 8010994:	4013      	ands	r3, r2
 8010996:	d00b      	beq.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2220      	movs	r2, #32
 801099c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801099e:	d007      	beq.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	0011      	movs	r1, r2
 80109a6:	0018      	movs	r0, r3
 80109a8:	f000 fb5a 	bl	8011060 <I2C_ITMasterCplt>
 80109ac:	e000      	b.n	80109b0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80109ae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2240      	movs	r2, #64	@ 0x40
 80109b4:	2100      	movs	r1, #0
 80109b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80109b8:	2300      	movs	r3, #0
}
 80109ba:	0018      	movs	r0, r3
 80109bc:	46bd      	mov	sp, r7
 80109be:	b007      	add	sp, #28
 80109c0:	bd90      	pop	{r4, r7, pc}
 80109c2:	46c0      	nop			@ (mov r8, r8)
 80109c4:	ffff0000 	.word	0xffff0000

080109c8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80109c8:	b590      	push	{r4, r7, lr}
 80109ca:	b089      	sub	sp, #36	@ 0x24
 80109cc:	af02      	add	r7, sp, #8
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80109d4:	4b88      	ldr	r3, [pc, #544]	@ (8010bf8 <I2C_Mem_ISR_DMA+0x230>)
 80109d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2240      	movs	r2, #64	@ 0x40
 80109dc:	5c9b      	ldrb	r3, [r3, r2]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d101      	bne.n	80109e6 <I2C_Mem_ISR_DMA+0x1e>
 80109e2:	2302      	movs	r3, #2
 80109e4:	e104      	b.n	8010bf0 <I2C_Mem_ISR_DMA+0x228>
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2240      	movs	r2, #64	@ 0x40
 80109ea:	2101      	movs	r1, #1
 80109ec:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	2210      	movs	r2, #16
 80109f2:	4013      	ands	r3, r2
 80109f4:	d017      	beq.n	8010a26 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2210      	movs	r2, #16
 80109fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80109fc:	d013      	beq.n	8010a26 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2210      	movs	r2, #16
 8010a04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a0a:	2204      	movs	r2, #4
 8010a0c:	431a      	orrs	r2, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2120      	movs	r1, #32
 8010a16:	0018      	movs	r0, r3
 8010a18:	f001 fa1a 	bl	8011e50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	0018      	movs	r0, r3
 8010a20:	f000 fe8f 	bl	8011742 <I2C_Flush_TXDR>
 8010a24:	e0df      	b.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	2202      	movs	r2, #2
 8010a2a:	4013      	ands	r3, r2
 8010a2c:	d00d      	beq.n	8010a4a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2202      	movs	r2, #2
 8010a32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010a34:	d009      	beq.n	8010a4a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68fa      	ldr	r2, [r7, #12]
 8010a3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010a3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2201      	movs	r2, #1
 8010a44:	4252      	negs	r2, r2
 8010a46:	651a      	str	r2, [r3, #80]	@ 0x50
 8010a48:	e0cd      	b.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2280      	movs	r2, #128	@ 0x80
 8010a4e:	4013      	ands	r3, r2
 8010a50:	d05e      	beq.n	8010b10 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2240      	movs	r2, #64	@ 0x40
 8010a56:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010a58:	d05a      	beq.n	8010b10 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2110      	movs	r1, #16
 8010a5e:	0018      	movs	r0, r3
 8010a60:	f001 f9f6 	bl	8011e50 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a68:	b29b      	uxth	r3, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d04a      	beq.n	8010b04 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	2bff      	cmp	r3, #255	@ 0xff
 8010a76:	d910      	bls.n	8010a9a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	22ff      	movs	r2, #255	@ 0xff
 8010a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a82:	b299      	uxth	r1, r3
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	2380      	movs	r3, #128	@ 0x80
 8010a8c:	045b      	lsls	r3, r3, #17
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	2400      	movs	r4, #0
 8010a92:	9400      	str	r4, [sp, #0]
 8010a94:	f001 f9a2 	bl	8011ddc <I2C_TransferConfig>
 8010a98:	e011      	b.n	8010abe <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a9e:	b29a      	uxth	r2, r3
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010aa8:	b299      	uxth	r1, r3
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	2380      	movs	r3, #128	@ 0x80
 8010ab2:	049b      	lsls	r3, r3, #18
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	2400      	movs	r4, #0
 8010ab8:	9400      	str	r4, [sp, #0]
 8010aba:	f001 f98f 	bl	8011ddc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2241      	movs	r2, #65	@ 0x41
 8010ad4:	5c9b      	ldrb	r3, [r3, r2]
 8010ad6:	b2db      	uxtb	r3, r3
 8010ad8:	2b22      	cmp	r3, #34	@ 0x22
 8010ada:	d109      	bne.n	8010af0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	2180      	movs	r1, #128	@ 0x80
 8010ae8:	0209      	lsls	r1, r1, #8
 8010aea:	430a      	orrs	r2, r1
 8010aec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010aee:	e07a      	b.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2180      	movs	r1, #128	@ 0x80
 8010afc:	01c9      	lsls	r1, r1, #7
 8010afe:	430a      	orrs	r2, r1
 8010b00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010b02:	e070      	b.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2140      	movs	r1, #64	@ 0x40
 8010b08:	0018      	movs	r0, r3
 8010b0a:	f000 fcef 	bl	80114ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010b0e:	e06a      	b.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	2240      	movs	r2, #64	@ 0x40
 8010b14:	4013      	ands	r3, r2
 8010b16:	d058      	beq.n	8010bca <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2240      	movs	r2, #64	@ 0x40
 8010b1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010b1e:	d054      	beq.n	8010bca <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2241      	movs	r2, #65	@ 0x41
 8010b24:	5c9b      	ldrb	r3, [r3, r2]
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	2b22      	cmp	r3, #34	@ 0x22
 8010b2a:	d101      	bne.n	8010b30 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8010b2c:	4b33      	ldr	r3, [pc, #204]	@ (8010bfc <I2C_Mem_ISR_DMA+0x234>)
 8010b2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b34:	b29b      	uxth	r3, r3
 8010b36:	2bff      	cmp	r3, #255	@ 0xff
 8010b38:	d911      	bls.n	8010b5e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	22ff      	movs	r2, #255	@ 0xff
 8010b3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b44:	b299      	uxth	r1, r3
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b4a:	b2da      	uxtb	r2, r3
 8010b4c:	2380      	movs	r3, #128	@ 0x80
 8010b4e:	045c      	lsls	r4, r3, #17
 8010b50:	68f8      	ldr	r0, [r7, #12]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	9300      	str	r3, [sp, #0]
 8010b56:	0023      	movs	r3, r4
 8010b58:	f001 f940 	bl	8011ddc <I2C_TransferConfig>
 8010b5c:	e012      	b.n	8010b84 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b6c:	b299      	uxth	r1, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	2380      	movs	r3, #128	@ 0x80
 8010b76:	049c      	lsls	r4, r3, #18
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	0023      	movs	r3, r4
 8010b80:	f001 f92c 	bl	8011ddc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b8e:	1ad3      	subs	r3, r2, r3
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2241      	movs	r2, #65	@ 0x41
 8010b9a:	5c9b      	ldrb	r3, [r3, r2]
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	2b22      	cmp	r3, #34	@ 0x22
 8010ba0:	d109      	bne.n	8010bb6 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2180      	movs	r1, #128	@ 0x80
 8010bae:	0209      	lsls	r1, r1, #8
 8010bb0:	430a      	orrs	r2, r1
 8010bb2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010bb4:	e017      	b.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2180      	movs	r1, #128	@ 0x80
 8010bc2:	01c9      	lsls	r1, r1, #7
 8010bc4:	430a      	orrs	r2, r1
 8010bc6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010bc8:	e00d      	b.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	2220      	movs	r2, #32
 8010bce:	4013      	ands	r3, r2
 8010bd0:	d009      	beq.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2220      	movs	r2, #32
 8010bd6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010bd8:	d005      	beq.n	8010be6 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	0011      	movs	r1, r2
 8010be0:	0018      	movs	r0, r3
 8010be2:	f000 fa3d 	bl	8011060 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2240      	movs	r2, #64	@ 0x40
 8010bea:	2100      	movs	r1, #0
 8010bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010bee:	2300      	movs	r3, #0
}
 8010bf0:	0018      	movs	r0, r3
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	b007      	add	sp, #28
 8010bf6:	bd90      	pop	{r4, r7, pc}
 8010bf8:	80002000 	.word	0x80002000
 8010bfc:	80002400 	.word	0x80002400

08010c00 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b088      	sub	sp, #32
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c10:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8010c12:	2300      	movs	r3, #0
 8010c14:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2240      	movs	r2, #64	@ 0x40
 8010c1a:	5c9b      	ldrb	r3, [r3, r2]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d101      	bne.n	8010c24 <I2C_Slave_ISR_DMA+0x24>
 8010c20:	2302      	movs	r3, #2
 8010c22:	e0cd      	b.n	8010dc0 <I2C_Slave_ISR_DMA+0x1c0>
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2240      	movs	r2, #64	@ 0x40
 8010c28:	2101      	movs	r1, #1
 8010c2a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	4013      	ands	r3, r2
 8010c32:	d009      	beq.n	8010c48 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2220      	movs	r2, #32
 8010c38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010c3a:	d005      	beq.n	8010c48 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8010c3c:	68ba      	ldr	r2, [r7, #8]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	0011      	movs	r1, r2
 8010c42:	0018      	movs	r0, r3
 8010c44:	f000 fada 	bl	80111fc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2210      	movs	r2, #16
 8010c4c:	4013      	ands	r3, r2
 8010c4e:	d100      	bne.n	8010c52 <I2C_Slave_ISR_DMA+0x52>
 8010c50:	e0a3      	b.n	8010d9a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2210      	movs	r2, #16
 8010c56:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010c58:	d100      	bne.n	8010c5c <I2C_Slave_ISR_DMA+0x5c>
 8010c5a:	e09e      	b.n	8010d9a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010c5c:	687a      	ldr	r2, [r7, #4]
 8010c5e:	2380      	movs	r3, #128	@ 0x80
 8010c60:	01db      	lsls	r3, r3, #7
 8010c62:	4013      	ands	r3, r2
 8010c64:	d105      	bne.n	8010c72 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	2380      	movs	r3, #128	@ 0x80
 8010c6a:	021b      	lsls	r3, r3, #8
 8010c6c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010c6e:	d100      	bne.n	8010c72 <I2C_Slave_ISR_DMA+0x72>
 8010c70:	e08c      	b.n	8010d8c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00c      	beq.n	8010c94 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8010c7a:	687a      	ldr	r2, [r7, #4]
 8010c7c:	2380      	movs	r3, #128	@ 0x80
 8010c7e:	021b      	lsls	r3, r3, #8
 8010c80:	4013      	ands	r3, r2
 8010c82:	d007      	beq.n	8010c94 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d101      	bne.n	8010c94 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010c90:	2301      	movs	r3, #1
 8010c92:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00c      	beq.n	8010cb6 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	2380      	movs	r3, #128	@ 0x80
 8010ca0:	01db      	lsls	r3, r3, #7
 8010ca2:	4013      	ands	r3, r2
 8010ca4:	d007      	beq.n	8010cb6 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d101      	bne.n	8010cb6 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d12d      	bne.n	8010d18 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2241      	movs	r2, #65	@ 0x41
 8010cc0:	5c9b      	ldrb	r3, [r3, r2]
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	2b28      	cmp	r3, #40	@ 0x28
 8010cc6:	d10b      	bne.n	8010ce0 <I2C_Slave_ISR_DMA+0xe0>
 8010cc8:	69ba      	ldr	r2, [r7, #24]
 8010cca:	2380      	movs	r3, #128	@ 0x80
 8010ccc:	049b      	lsls	r3, r3, #18
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d106      	bne.n	8010ce0 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	0011      	movs	r1, r2
 8010cd8:	0018      	movs	r0, r3
 8010cda:	f000 fbaf 	bl	801143c <I2C_ITListenCplt>
 8010cde:	e054      	b.n	8010d8a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2241      	movs	r2, #65	@ 0x41
 8010ce4:	5c9b      	ldrb	r3, [r3, r2]
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	2b29      	cmp	r3, #41	@ 0x29
 8010cea:	d110      	bne.n	8010d0e <I2C_Slave_ISR_DMA+0x10e>
 8010cec:	69bb      	ldr	r3, [r7, #24]
 8010cee:	4a36      	ldr	r2, [pc, #216]	@ (8010dc8 <I2C_Slave_ISR_DMA+0x1c8>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d00c      	beq.n	8010d0e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2210      	movs	r2, #16
 8010cfa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	0018      	movs	r0, r3
 8010d00:	f000 fd1f 	bl	8011742 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	0018      	movs	r0, r3
 8010d08:	f000 f946 	bl	8010f98 <I2C_ITSlaveSeqCplt>
 8010d0c:	e03d      	b.n	8010d8a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2210      	movs	r2, #16
 8010d14:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8010d16:	e03e      	b.n	8010d96 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2210      	movs	r2, #16
 8010d1e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d24:	2204      	movs	r2, #4
 8010d26:	431a      	orrs	r2, r3
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8010d2c:	2317      	movs	r3, #23
 8010d2e:	18fb      	adds	r3, r7, r3
 8010d30:	68fa      	ldr	r2, [r7, #12]
 8010d32:	2141      	movs	r1, #65	@ 0x41
 8010d34:	5c52      	ldrb	r2, [r2, r1]
 8010d36:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d004      	beq.n	8010d48 <I2C_Slave_ISR_DMA+0x148>
 8010d3e:	69ba      	ldr	r2, [r7, #24]
 8010d40:	2380      	movs	r3, #128	@ 0x80
 8010d42:	045b      	lsls	r3, r3, #17
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d126      	bne.n	8010d96 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010d48:	2217      	movs	r2, #23
 8010d4a:	18bb      	adds	r3, r7, r2
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	2b21      	cmp	r3, #33	@ 0x21
 8010d50:	d003      	beq.n	8010d5a <I2C_Slave_ISR_DMA+0x15a>
 8010d52:	18bb      	adds	r3, r7, r2
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	2b29      	cmp	r3, #41	@ 0x29
 8010d58:	d103      	bne.n	8010d62 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2221      	movs	r2, #33	@ 0x21
 8010d5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010d60:	e00b      	b.n	8010d7a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010d62:	2217      	movs	r2, #23
 8010d64:	18bb      	adds	r3, r7, r2
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	2b22      	cmp	r3, #34	@ 0x22
 8010d6a:	d003      	beq.n	8010d74 <I2C_Slave_ISR_DMA+0x174>
 8010d6c:	18bb      	adds	r3, r7, r2
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d72:	d102      	bne.n	8010d7a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2222      	movs	r2, #34	@ 0x22
 8010d78:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	0011      	movs	r1, r2
 8010d82:	0018      	movs	r0, r3
 8010d84:	f000 fbb2 	bl	80114ec <I2C_ITError>
      if (treatdmanack == 1U)
 8010d88:	e005      	b.n	8010d96 <I2C_Slave_ISR_DMA+0x196>
 8010d8a:	e004      	b.n	8010d96 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2210      	movs	r2, #16
 8010d92:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010d94:	e00f      	b.n	8010db6 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010d96:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010d98:	e00d      	b.n	8010db6 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010d9a:	68bb      	ldr	r3, [r7, #8]
 8010d9c:	2208      	movs	r2, #8
 8010d9e:	4013      	ands	r3, r2
 8010da0:	d009      	beq.n	8010db6 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2208      	movs	r2, #8
 8010da6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010da8:	d005      	beq.n	8010db6 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8010daa:	68ba      	ldr	r2, [r7, #8]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	0011      	movs	r1, r2
 8010db0:	0018      	movs	r0, r3
 8010db2:	f000 f80b 	bl	8010dcc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2240      	movs	r2, #64	@ 0x40
 8010dba:	2100      	movs	r1, #0
 8010dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010dbe:	2300      	movs	r3, #0
}
 8010dc0:	0018      	movs	r0, r3
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	b008      	add	sp, #32
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	ffff0000 	.word	0xffff0000

08010dcc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010dcc:	b5b0      	push	{r4, r5, r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2241      	movs	r2, #65	@ 0x41
 8010dda:	5c9b      	ldrb	r3, [r3, r2]
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	001a      	movs	r2, r3
 8010de0:	2328      	movs	r3, #40	@ 0x28
 8010de2:	4013      	ands	r3, r2
 8010de4:	2b28      	cmp	r3, #40	@ 0x28
 8010de6:	d000      	beq.n	8010dea <I2C_ITAddrCplt+0x1e>
 8010de8:	e088      	b.n	8010efc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	699b      	ldr	r3, [r3, #24]
 8010df0:	0c1b      	lsrs	r3, r3, #16
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	250f      	movs	r5, #15
 8010df6:	197b      	adds	r3, r7, r5
 8010df8:	2101      	movs	r1, #1
 8010dfa:	400a      	ands	r2, r1
 8010dfc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	699b      	ldr	r3, [r3, #24]
 8010e04:	0c1b      	lsrs	r3, r3, #16
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	200c      	movs	r0, #12
 8010e0a:	183b      	adds	r3, r7, r0
 8010e0c:	21fe      	movs	r1, #254	@ 0xfe
 8010e0e:	400a      	ands	r2, r1
 8010e10:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	689b      	ldr	r3, [r3, #8]
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	240a      	movs	r4, #10
 8010e1c:	193b      	adds	r3, r7, r4
 8010e1e:	0592      	lsls	r2, r2, #22
 8010e20:	0d92      	lsrs	r2, r2, #22
 8010e22:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	b29a      	uxth	r2, r3
 8010e2c:	2308      	movs	r3, #8
 8010e2e:	18fb      	adds	r3, r7, r3
 8010e30:	21fe      	movs	r1, #254	@ 0xfe
 8010e32:	400a      	ands	r2, r1
 8010e34:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	d148      	bne.n	8010ed0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8010e3e:	0021      	movs	r1, r4
 8010e40:	187b      	adds	r3, r7, r1
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	09db      	lsrs	r3, r3, #7
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	183b      	adds	r3, r7, r0
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	4053      	eors	r3, r2
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	001a      	movs	r2, r3
 8010e52:	2306      	movs	r3, #6
 8010e54:	4013      	ands	r3, r2
 8010e56:	d120      	bne.n	8010e9a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010e58:	183b      	adds	r3, r7, r0
 8010e5a:	187a      	adds	r2, r7, r1
 8010e5c:	8812      	ldrh	r2, [r2, #0]
 8010e5e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e64:	1c5a      	adds	r2, r3, #1
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e6e:	2b02      	cmp	r3, #2
 8010e70:	d14c      	bne.n	8010f0c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2208      	movs	r2, #8
 8010e7e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2240      	movs	r2, #64	@ 0x40
 8010e84:	2100      	movs	r1, #0
 8010e86:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010e88:	183b      	adds	r3, r7, r0
 8010e8a:	881a      	ldrh	r2, [r3, #0]
 8010e8c:	197b      	adds	r3, r7, r5
 8010e8e:	7819      	ldrb	r1, [r3, #0]
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	0018      	movs	r0, r3
 8010e94:	f7ff fa39 	bl	801030a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010e98:	e038      	b.n	8010f0c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8010e9a:	240c      	movs	r4, #12
 8010e9c:	193b      	adds	r3, r7, r4
 8010e9e:	2208      	movs	r2, #8
 8010ea0:	18ba      	adds	r2, r7, r2
 8010ea2:	8812      	ldrh	r2, [r2, #0]
 8010ea4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010ea6:	2380      	movs	r3, #128	@ 0x80
 8010ea8:	021a      	lsls	r2, r3, #8
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	0011      	movs	r1, r2
 8010eae:	0018      	movs	r0, r3
 8010eb0:	f001 f85c 	bl	8011f6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2240      	movs	r2, #64	@ 0x40
 8010eb8:	2100      	movs	r1, #0
 8010eba:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010ebc:	193b      	adds	r3, r7, r4
 8010ebe:	881a      	ldrh	r2, [r3, #0]
 8010ec0:	230f      	movs	r3, #15
 8010ec2:	18fb      	adds	r3, r7, r3
 8010ec4:	7819      	ldrb	r1, [r3, #0]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	0018      	movs	r0, r3
 8010eca:	f7ff fa1e 	bl	801030a <HAL_I2C_AddrCallback>
}
 8010ece:	e01d      	b.n	8010f0c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010ed0:	2380      	movs	r3, #128	@ 0x80
 8010ed2:	021a      	lsls	r2, r3, #8
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	0011      	movs	r1, r2
 8010ed8:	0018      	movs	r0, r3
 8010eda:	f001 f847 	bl	8011f6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2240      	movs	r2, #64	@ 0x40
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010ee6:	230c      	movs	r3, #12
 8010ee8:	18fb      	adds	r3, r7, r3
 8010eea:	881a      	ldrh	r2, [r3, #0]
 8010eec:	230f      	movs	r3, #15
 8010eee:	18fb      	adds	r3, r7, r3
 8010ef0:	7819      	ldrb	r1, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	0018      	movs	r0, r3
 8010ef6:	f7ff fa08 	bl	801030a <HAL_I2C_AddrCallback>
}
 8010efa:	e007      	b.n	8010f0c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2208      	movs	r2, #8
 8010f02:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2240      	movs	r2, #64	@ 0x40
 8010f08:	2100      	movs	r1, #0
 8010f0a:	5499      	strb	r1, [r3, r2]
}
 8010f0c:	46c0      	nop			@ (mov r8, r8)
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	b004      	add	sp, #16
 8010f12:	bdb0      	pop	{r4, r5, r7, pc}

08010f14 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2242      	movs	r2, #66	@ 0x42
 8010f20:	2100      	movs	r1, #0
 8010f22:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2241      	movs	r2, #65	@ 0x41
 8010f28:	5c9b      	ldrb	r3, [r3, r2]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	2b21      	cmp	r3, #33	@ 0x21
 8010f2e:	d117      	bne.n	8010f60 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2241      	movs	r2, #65	@ 0x41
 8010f34:	2120      	movs	r1, #32
 8010f36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2211      	movs	r2, #17
 8010f3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2101      	movs	r1, #1
 8010f48:	0018      	movs	r0, r3
 8010f4a:	f001 f80f 	bl	8011f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2240      	movs	r2, #64	@ 0x40
 8010f52:	2100      	movs	r1, #0
 8010f54:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	0018      	movs	r0, r3
 8010f5a:	f7ff f9b6 	bl	80102ca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f5e:	e016      	b.n	8010f8e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2241      	movs	r2, #65	@ 0x41
 8010f64:	2120      	movs	r1, #32
 8010f66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2212      	movs	r2, #18
 8010f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2102      	movs	r1, #2
 8010f78:	0018      	movs	r0, r3
 8010f7a:	f000 fff7 	bl	8011f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2240      	movs	r2, #64	@ 0x40
 8010f82:	2100      	movs	r1, #0
 8010f84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	0018      	movs	r0, r3
 8010f8a:	f7ff f9a6 	bl	80102da <HAL_I2C_MasterRxCpltCallback>
}
 8010f8e:	46c0      	nop			@ (mov r8, r8)
 8010f90:	46bd      	mov	sp, r7
 8010f92:	b002      	add	sp, #8
 8010f94:	bd80      	pop	{r7, pc}
	...

08010f98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2242      	movs	r2, #66	@ 0x42
 8010fac:	2100      	movs	r1, #0
 8010fae:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	2380      	movs	r3, #128	@ 0x80
 8010fb4:	01db      	lsls	r3, r3, #7
 8010fb6:	4013      	ands	r3, r2
 8010fb8:	d008      	beq.n	8010fcc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4924      	ldr	r1, [pc, #144]	@ (8011058 <I2C_ITSlaveSeqCplt+0xc0>)
 8010fc6:	400a      	ands	r2, r1
 8010fc8:	601a      	str	r2, [r3, #0]
 8010fca:	e00c      	b.n	8010fe6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010fcc:	68fa      	ldr	r2, [r7, #12]
 8010fce:	2380      	movs	r3, #128	@ 0x80
 8010fd0:	021b      	lsls	r3, r3, #8
 8010fd2:	4013      	ands	r3, r2
 8010fd4:	d007      	beq.n	8010fe6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	491e      	ldr	r1, [pc, #120]	@ (801105c <I2C_ITSlaveSeqCplt+0xc4>)
 8010fe2:	400a      	ands	r2, r1
 8010fe4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2241      	movs	r2, #65	@ 0x41
 8010fea:	5c9b      	ldrb	r3, [r3, r2]
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	2b29      	cmp	r3, #41	@ 0x29
 8010ff0:	d114      	bne.n	801101c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2241      	movs	r2, #65	@ 0x41
 8010ff6:	2128      	movs	r1, #40	@ 0x28
 8010ff8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2221      	movs	r2, #33	@ 0x21
 8010ffe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2101      	movs	r1, #1
 8011004:	0018      	movs	r0, r3
 8011006:	f000 ffb1 	bl	8011f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2240      	movs	r2, #64	@ 0x40
 801100e:	2100      	movs	r1, #0
 8011010:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	0018      	movs	r0, r3
 8011016:	f7ff f968 	bl	80102ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801101a:	e019      	b.n	8011050 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2241      	movs	r2, #65	@ 0x41
 8011020:	5c9b      	ldrb	r3, [r3, r2]
 8011022:	b2db      	uxtb	r3, r3
 8011024:	2b2a      	cmp	r3, #42	@ 0x2a
 8011026:	d113      	bne.n	8011050 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2241      	movs	r2, #65	@ 0x41
 801102c:	2128      	movs	r1, #40	@ 0x28
 801102e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2222      	movs	r2, #34	@ 0x22
 8011034:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2102      	movs	r1, #2
 801103a:	0018      	movs	r0, r3
 801103c:	f000 ff96 	bl	8011f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2240      	movs	r2, #64	@ 0x40
 8011044:	2100      	movs	r1, #0
 8011046:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	0018      	movs	r0, r3
 801104c:	f7ff f955 	bl	80102fa <HAL_I2C_SlaveRxCpltCallback>
}
 8011050:	46c0      	nop			@ (mov r8, r8)
 8011052:	46bd      	mov	sp, r7
 8011054:	b004      	add	sp, #16
 8011056:	bd80      	pop	{r7, pc}
 8011058:	ffffbfff 	.word	0xffffbfff
 801105c:	ffff7fff 	.word	0xffff7fff

08011060 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b086      	sub	sp, #24
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2220      	movs	r2, #32
 8011074:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2241      	movs	r2, #65	@ 0x41
 801107a:	5c9b      	ldrb	r3, [r3, r2]
 801107c:	b2db      	uxtb	r3, r3
 801107e:	2b21      	cmp	r3, #33	@ 0x21
 8011080:	d108      	bne.n	8011094 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2101      	movs	r1, #1
 8011086:	0018      	movs	r0, r3
 8011088:	f000 ff70 	bl	8011f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2211      	movs	r2, #17
 8011090:	631a      	str	r2, [r3, #48]	@ 0x30
 8011092:	e00d      	b.n	80110b0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2241      	movs	r2, #65	@ 0x41
 8011098:	5c9b      	ldrb	r3, [r3, r2]
 801109a:	b2db      	uxtb	r3, r3
 801109c:	2b22      	cmp	r3, #34	@ 0x22
 801109e:	d107      	bne.n	80110b0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2102      	movs	r1, #2
 80110a4:	0018      	movs	r0, r3
 80110a6:	f000 ff61 	bl	8011f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2212      	movs	r2, #18
 80110ae:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	685a      	ldr	r2, [r3, #4]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	494e      	ldr	r1, [pc, #312]	@ (80111f4 <I2C_ITMasterCplt+0x194>)
 80110bc:	400a      	ands	r2, r1
 80110be:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4a4b      	ldr	r2, [pc, #300]	@ (80111f8 <I2C_ITMasterCplt+0x198>)
 80110ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	2210      	movs	r2, #16
 80110d0:	4013      	ands	r3, r2
 80110d2:	d009      	beq.n	80110e8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2210      	movs	r2, #16
 80110da:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110e0:	2204      	movs	r2, #4
 80110e2:	431a      	orrs	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2241      	movs	r2, #65	@ 0x41
 80110ec:	5c9b      	ldrb	r3, [r3, r2]
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b60      	cmp	r3, #96	@ 0x60
 80110f2:	d109      	bne.n	8011108 <I2C_ITMasterCplt+0xa8>
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	2204      	movs	r2, #4
 80110f8:	4013      	ands	r3, r2
 80110fa:	d005      	beq.n	8011108 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011102:	b2db      	uxtb	r3, r3
 8011104:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011106:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	0018      	movs	r0, r3
 801110c:	f000 fb19 	bl	8011742 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011114:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2241      	movs	r2, #65	@ 0x41
 801111a:	5c9b      	ldrb	r3, [r3, r2]
 801111c:	b2db      	uxtb	r3, r3
 801111e:	2b60      	cmp	r3, #96	@ 0x60
 8011120:	d002      	beq.n	8011128 <I2C_ITMasterCplt+0xc8>
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d007      	beq.n	8011138 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	0011      	movs	r1, r2
 8011130:	0018      	movs	r0, r3
 8011132:	f000 f9db 	bl	80114ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011136:	e058      	b.n	80111ea <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2241      	movs	r2, #65	@ 0x41
 801113c:	5c9b      	ldrb	r3, [r3, r2]
 801113e:	b2db      	uxtb	r3, r3
 8011140:	2b21      	cmp	r3, #33	@ 0x21
 8011142:	d126      	bne.n	8011192 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2241      	movs	r2, #65	@ 0x41
 8011148:	2120      	movs	r1, #32
 801114a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2200      	movs	r2, #0
 8011150:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2242      	movs	r2, #66	@ 0x42
 8011156:	5c9b      	ldrb	r3, [r3, r2]
 8011158:	b2db      	uxtb	r3, r3
 801115a:	2b40      	cmp	r3, #64	@ 0x40
 801115c:	d10c      	bne.n	8011178 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2242      	movs	r2, #66	@ 0x42
 8011162:	2100      	movs	r1, #0
 8011164:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2240      	movs	r2, #64	@ 0x40
 801116a:	2100      	movs	r1, #0
 801116c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	0018      	movs	r0, r3
 8011172:	f7ff f8e2 	bl	801033a <HAL_I2C_MemTxCpltCallback>
}
 8011176:	e038      	b.n	80111ea <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2242      	movs	r2, #66	@ 0x42
 801117c:	2100      	movs	r1, #0
 801117e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2240      	movs	r2, #64	@ 0x40
 8011184:	2100      	movs	r1, #0
 8011186:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	0018      	movs	r0, r3
 801118c:	f7ff f89d 	bl	80102ca <HAL_I2C_MasterTxCpltCallback>
}
 8011190:	e02b      	b.n	80111ea <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2241      	movs	r2, #65	@ 0x41
 8011196:	5c9b      	ldrb	r3, [r3, r2]
 8011198:	b2db      	uxtb	r3, r3
 801119a:	2b22      	cmp	r3, #34	@ 0x22
 801119c:	d125      	bne.n	80111ea <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2241      	movs	r2, #65	@ 0x41
 80111a2:	2120      	movs	r1, #32
 80111a4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2242      	movs	r2, #66	@ 0x42
 80111b0:	5c9b      	ldrb	r3, [r3, r2]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	2b40      	cmp	r3, #64	@ 0x40
 80111b6:	d10c      	bne.n	80111d2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2242      	movs	r2, #66	@ 0x42
 80111bc:	2100      	movs	r1, #0
 80111be:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2240      	movs	r2, #64	@ 0x40
 80111c4:	2100      	movs	r1, #0
 80111c6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	0018      	movs	r0, r3
 80111cc:	f7ff f8bd 	bl	801034a <HAL_I2C_MemRxCpltCallback>
}
 80111d0:	e00b      	b.n	80111ea <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2242      	movs	r2, #66	@ 0x42
 80111d6:	2100      	movs	r1, #0
 80111d8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2240      	movs	r2, #64	@ 0x40
 80111de:	2100      	movs	r1, #0
 80111e0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	0018      	movs	r0, r3
 80111e6:	f7ff f878 	bl	80102da <HAL_I2C_MasterRxCpltCallback>
}
 80111ea:	46c0      	nop			@ (mov r8, r8)
 80111ec:	46bd      	mov	sp, r7
 80111ee:	b006      	add	sp, #24
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	46c0      	nop			@ (mov r8, r8)
 80111f4:	fe00e800 	.word	0xfe00e800
 80111f8:	ffff0000 	.word	0xffff0000

080111fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011212:	200f      	movs	r0, #15
 8011214:	183b      	adds	r3, r7, r0
 8011216:	687a      	ldr	r2, [r7, #4]
 8011218:	2141      	movs	r1, #65	@ 0x41
 801121a:	5c52      	ldrb	r2, [r2, r1]
 801121c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2220      	movs	r2, #32
 8011224:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011226:	183b      	adds	r3, r7, r0
 8011228:	781b      	ldrb	r3, [r3, #0]
 801122a:	2b21      	cmp	r3, #33	@ 0x21
 801122c:	d003      	beq.n	8011236 <I2C_ITSlaveCplt+0x3a>
 801122e:	183b      	adds	r3, r7, r0
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	2b29      	cmp	r3, #41	@ 0x29
 8011234:	d109      	bne.n	801124a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011236:	4a7b      	ldr	r2, [pc, #492]	@ (8011424 <I2C_ITSlaveCplt+0x228>)
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	0011      	movs	r1, r2
 801123c:	0018      	movs	r0, r3
 801123e:	f000 fe95 	bl	8011f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2221      	movs	r2, #33	@ 0x21
 8011246:	631a      	str	r2, [r3, #48]	@ 0x30
 8011248:	e011      	b.n	801126e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801124a:	220f      	movs	r2, #15
 801124c:	18bb      	adds	r3, r7, r2
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	2b22      	cmp	r3, #34	@ 0x22
 8011252:	d003      	beq.n	801125c <I2C_ITSlaveCplt+0x60>
 8011254:	18bb      	adds	r3, r7, r2
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	2b2a      	cmp	r3, #42	@ 0x2a
 801125a:	d108      	bne.n	801126e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 801125c:	4a72      	ldr	r2, [pc, #456]	@ (8011428 <I2C_ITSlaveCplt+0x22c>)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	0011      	movs	r1, r2
 8011262:	0018      	movs	r0, r3
 8011264:	f000 fe82 	bl	8011f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2222      	movs	r2, #34	@ 0x22
 801126c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	685a      	ldr	r2, [r3, #4]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2180      	movs	r1, #128	@ 0x80
 801127a:	0209      	lsls	r1, r1, #8
 801127c:	430a      	orrs	r2, r1
 801127e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	685a      	ldr	r2, [r3, #4]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4968      	ldr	r1, [pc, #416]	@ (801142c <I2C_ITSlaveCplt+0x230>)
 801128c:	400a      	ands	r2, r1
 801128e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	0018      	movs	r0, r3
 8011294:	f000 fa55 	bl	8011742 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011298:	693a      	ldr	r2, [r7, #16]
 801129a:	2380      	movs	r3, #128	@ 0x80
 801129c:	01db      	lsls	r3, r3, #7
 801129e:	4013      	ands	r3, r2
 80112a0:	d013      	beq.n	80112ca <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4960      	ldr	r1, [pc, #384]	@ (8011430 <I2C_ITSlaveCplt+0x234>)
 80112ae:	400a      	ands	r2, r1
 80112b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d01f      	beq.n	80112fa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112c8:	e017      	b.n	80112fa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80112ca:	693a      	ldr	r2, [r7, #16]
 80112cc:	2380      	movs	r3, #128	@ 0x80
 80112ce:	021b      	lsls	r3, r3, #8
 80112d0:	4013      	ands	r3, r2
 80112d2:	d012      	beq.n	80112fa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	4955      	ldr	r1, [pc, #340]	@ (8011434 <I2C_ITSlaveCplt+0x238>)
 80112e0:	400a      	ands	r2, r1
 80112e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d006      	beq.n	80112fa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	2204      	movs	r2, #4
 80112fe:	4013      	ands	r3, r2
 8011300:	d020      	beq.n	8011344 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	2204      	movs	r2, #4
 8011306:	4393      	bics	r3, r2
 8011308:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011314:	b2d2      	uxtb	r2, r2
 8011316:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801131c:	1c5a      	adds	r2, r3, #1
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00c      	beq.n	8011344 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801132e:	3b01      	subs	r3, #1
 8011330:	b29a      	uxth	r2, r3
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801133a:	b29b      	uxth	r3, r3
 801133c:	3b01      	subs	r3, #1
 801133e:	b29a      	uxth	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011348:	b29b      	uxth	r3, r3
 801134a:	2b00      	cmp	r3, #0
 801134c:	d005      	beq.n	801135a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011352:	2204      	movs	r2, #4
 8011354:	431a      	orrs	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2242      	movs	r2, #66	@ 0x42
 801135e:	2100      	movs	r1, #0
 8011360:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801136c:	2b00      	cmp	r3, #0
 801136e:	d013      	beq.n	8011398 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	0011      	movs	r1, r2
 8011378:	0018      	movs	r0, r3
 801137a:	f000 f8b7 	bl	80114ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2241      	movs	r2, #65	@ 0x41
 8011382:	5c9b      	ldrb	r3, [r3, r2]
 8011384:	b2db      	uxtb	r3, r3
 8011386:	2b28      	cmp	r3, #40	@ 0x28
 8011388:	d147      	bne.n	801141a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801138a:	697a      	ldr	r2, [r7, #20]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	0011      	movs	r1, r2
 8011390:	0018      	movs	r0, r3
 8011392:	f000 f853 	bl	801143c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011396:	e040      	b.n	801141a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801139c:	4a26      	ldr	r2, [pc, #152]	@ (8011438 <I2C_ITSlaveCplt+0x23c>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d016      	beq.n	80113d0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	0018      	movs	r0, r3
 80113a6:	f7ff fdf7 	bl	8010f98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	4a22      	ldr	r2, [pc, #136]	@ (8011438 <I2C_ITSlaveCplt+0x23c>)
 80113ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2241      	movs	r2, #65	@ 0x41
 80113b4:	2120      	movs	r1, #32
 80113b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2240      	movs	r2, #64	@ 0x40
 80113c2:	2100      	movs	r1, #0
 80113c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	0018      	movs	r0, r3
 80113ca:	f7fe ffae 	bl	801032a <HAL_I2C_ListenCpltCallback>
}
 80113ce:	e024      	b.n	801141a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2241      	movs	r2, #65	@ 0x41
 80113d4:	5c9b      	ldrb	r3, [r3, r2]
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	2b22      	cmp	r3, #34	@ 0x22
 80113da:	d10f      	bne.n	80113fc <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2241      	movs	r2, #65	@ 0x41
 80113e0:	2120      	movs	r1, #32
 80113e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2200      	movs	r2, #0
 80113e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2240      	movs	r2, #64	@ 0x40
 80113ee:	2100      	movs	r1, #0
 80113f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	0018      	movs	r0, r3
 80113f6:	f7fe ff80 	bl	80102fa <HAL_I2C_SlaveRxCpltCallback>
}
 80113fa:	e00e      	b.n	801141a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2241      	movs	r2, #65	@ 0x41
 8011400:	2120      	movs	r1, #32
 8011402:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2240      	movs	r2, #64	@ 0x40
 801140e:	2100      	movs	r1, #0
 8011410:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	0018      	movs	r0, r3
 8011416:	f7fe ff68 	bl	80102ea <HAL_I2C_SlaveTxCpltCallback>
}
 801141a:	46c0      	nop			@ (mov r8, r8)
 801141c:	46bd      	mov	sp, r7
 801141e:	b006      	add	sp, #24
 8011420:	bd80      	pop	{r7, pc}
 8011422:	46c0      	nop			@ (mov r8, r8)
 8011424:	00008001 	.word	0x00008001
 8011428:	00008002 	.word	0x00008002
 801142c:	fe00e800 	.word	0xfe00e800
 8011430:	ffffbfff 	.word	0xffffbfff
 8011434:	ffff7fff 	.word	0xffff7fff
 8011438:	ffff0000 	.word	0xffff0000

0801143c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4a26      	ldr	r2, [pc, #152]	@ (80114e4 <I2C_ITListenCplt+0xa8>)
 801144a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2200      	movs	r2, #0
 8011450:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2241      	movs	r2, #65	@ 0x41
 8011456:	2120      	movs	r1, #32
 8011458:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2242      	movs	r2, #66	@ 0x42
 801145e:	2100      	movs	r1, #0
 8011460:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2200      	movs	r2, #0
 8011466:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	2204      	movs	r2, #4
 801146c:	4013      	ands	r3, r2
 801146e:	d022      	beq.n	80114b6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801147a:	b2d2      	uxtb	r2, r2
 801147c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011482:	1c5a      	adds	r2, r3, #1
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801148c:	2b00      	cmp	r3, #0
 801148e:	d012      	beq.n	80114b6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011494:	3b01      	subs	r3, #1
 8011496:	b29a      	uxth	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	3b01      	subs	r3, #1
 80114a4:	b29a      	uxth	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114ae:	2204      	movs	r2, #4
 80114b0:	431a      	orrs	r2, r3
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80114b6:	4a0c      	ldr	r2, [pc, #48]	@ (80114e8 <I2C_ITListenCplt+0xac>)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	0011      	movs	r1, r2
 80114bc:	0018      	movs	r0, r3
 80114be:	f000 fd55 	bl	8011f6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2210      	movs	r2, #16
 80114c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2240      	movs	r2, #64	@ 0x40
 80114ce:	2100      	movs	r1, #0
 80114d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	0018      	movs	r0, r3
 80114d6:	f7fe ff28 	bl	801032a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80114da:	46c0      	nop			@ (mov r8, r8)
 80114dc:	46bd      	mov	sp, r7
 80114de:	b002      	add	sp, #8
 80114e0:	bd80      	pop	{r7, pc}
 80114e2:	46c0      	nop			@ (mov r8, r8)
 80114e4:	ffff0000 	.word	0xffff0000
 80114e8:	00008003 	.word	0x00008003

080114ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80114f6:	200f      	movs	r0, #15
 80114f8:	183b      	adds	r3, r7, r0
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	2141      	movs	r1, #65	@ 0x41
 80114fe:	5c52      	ldrb	r2, [r2, r1]
 8011500:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2242      	movs	r2, #66	@ 0x42
 8011506:	2100      	movs	r1, #0
 8011508:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4a72      	ldr	r2, [pc, #456]	@ (80116d8 <I2C_ITError+0x1ec>)
 801150e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2200      	movs	r2, #0
 8011514:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	431a      	orrs	r2, r3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011522:	183b      	adds	r3, r7, r0
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	2b28      	cmp	r3, #40	@ 0x28
 8011528:	d007      	beq.n	801153a <I2C_ITError+0x4e>
 801152a:	183b      	adds	r3, r7, r0
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	2b29      	cmp	r3, #41	@ 0x29
 8011530:	d003      	beq.n	801153a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011532:	183b      	adds	r3, r7, r0
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	2b2a      	cmp	r3, #42	@ 0x2a
 8011538:	d10c      	bne.n	8011554 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2103      	movs	r1, #3
 801153e:	0018      	movs	r0, r3
 8011540:	f000 fd14 	bl	8011f6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2241      	movs	r2, #65	@ 0x41
 8011548:	2128      	movs	r1, #40	@ 0x28
 801154a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4a63      	ldr	r2, [pc, #396]	@ (80116dc <I2C_ITError+0x1f0>)
 8011550:	635a      	str	r2, [r3, #52]	@ 0x34
 8011552:	e032      	b.n	80115ba <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011554:	4a62      	ldr	r2, [pc, #392]	@ (80116e0 <I2C_ITError+0x1f4>)
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	0011      	movs	r1, r2
 801155a:	0018      	movs	r0, r3
 801155c:	f000 fd06 	bl	8011f6c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	0018      	movs	r0, r3
 8011564:	f000 f8ed 	bl	8011742 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2241      	movs	r2, #65	@ 0x41
 801156c:	5c9b      	ldrb	r3, [r3, r2]
 801156e:	b2db      	uxtb	r3, r3
 8011570:	2b60      	cmp	r3, #96	@ 0x60
 8011572:	d01f      	beq.n	80115b4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2241      	movs	r2, #65	@ 0x41
 8011578:	2120      	movs	r1, #32
 801157a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	699b      	ldr	r3, [r3, #24]
 8011582:	2220      	movs	r2, #32
 8011584:	4013      	ands	r3, r2
 8011586:	2b20      	cmp	r3, #32
 8011588:	d114      	bne.n	80115b4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	699b      	ldr	r3, [r3, #24]
 8011590:	2210      	movs	r2, #16
 8011592:	4013      	ands	r3, r2
 8011594:	2b10      	cmp	r3, #16
 8011596:	d109      	bne.n	80115ac <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	2210      	movs	r2, #16
 801159e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115a4:	2204      	movs	r2, #4
 80115a6:	431a      	orrs	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2220      	movs	r2, #32
 80115b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d03b      	beq.n	8011640 <I2C_ITError+0x154>
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	2b11      	cmp	r3, #17
 80115cc:	d002      	beq.n	80115d4 <I2C_ITError+0xe8>
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	2b21      	cmp	r3, #33	@ 0x21
 80115d2:	d135      	bne.n	8011640 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	2380      	movs	r3, #128	@ 0x80
 80115dc:	01db      	lsls	r3, r3, #7
 80115de:	401a      	ands	r2, r3
 80115e0:	2380      	movs	r3, #128	@ 0x80
 80115e2:	01db      	lsls	r3, r3, #7
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d107      	bne.n	80115f8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	493c      	ldr	r1, [pc, #240]	@ (80116e4 <I2C_ITError+0x1f8>)
 80115f4:	400a      	ands	r2, r1
 80115f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115fc:	0018      	movs	r0, r3
 80115fe:	f7fd fd62 	bl	800f0c6 <HAL_DMA_GetState>
 8011602:	0003      	movs	r3, r0
 8011604:	2b01      	cmp	r3, #1
 8011606:	d016      	beq.n	8011636 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801160c:	4a36      	ldr	r2, [pc, #216]	@ (80116e8 <I2C_ITError+0x1fc>)
 801160e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2240      	movs	r2, #64	@ 0x40
 8011614:	2100      	movs	r1, #0
 8011616:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801161c:	0018      	movs	r0, r3
 801161e:	f7fd fc5d 	bl	800eedc <HAL_DMA_Abort_IT>
 8011622:	1e03      	subs	r3, r0, #0
 8011624:	d051      	beq.n	80116ca <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801162a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011630:	0018      	movs	r0, r3
 8011632:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011634:	e049      	b.n	80116ca <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	0018      	movs	r0, r3
 801163a:	f000 f859 	bl	80116f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801163e:	e044      	b.n	80116ca <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011644:	2b00      	cmp	r3, #0
 8011646:	d03b      	beq.n	80116c0 <I2C_ITError+0x1d4>
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	2b12      	cmp	r3, #18
 801164c:	d002      	beq.n	8011654 <I2C_ITError+0x168>
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	2b22      	cmp	r3, #34	@ 0x22
 8011652:	d135      	bne.n	80116c0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	2380      	movs	r3, #128	@ 0x80
 801165c:	021b      	lsls	r3, r3, #8
 801165e:	401a      	ands	r2, r3
 8011660:	2380      	movs	r3, #128	@ 0x80
 8011662:	021b      	lsls	r3, r3, #8
 8011664:	429a      	cmp	r2, r3
 8011666:	d107      	bne.n	8011678 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	491e      	ldr	r1, [pc, #120]	@ (80116ec <I2C_ITError+0x200>)
 8011674:	400a      	ands	r2, r1
 8011676:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801167c:	0018      	movs	r0, r3
 801167e:	f7fd fd22 	bl	800f0c6 <HAL_DMA_GetState>
 8011682:	0003      	movs	r3, r0
 8011684:	2b01      	cmp	r3, #1
 8011686:	d016      	beq.n	80116b6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801168c:	4a16      	ldr	r2, [pc, #88]	@ (80116e8 <I2C_ITError+0x1fc>)
 801168e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2240      	movs	r2, #64	@ 0x40
 8011694:	2100      	movs	r1, #0
 8011696:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801169c:	0018      	movs	r0, r3
 801169e:	f7fd fc1d 	bl	800eedc <HAL_DMA_Abort_IT>
 80116a2:	1e03      	subs	r3, r0, #0
 80116a4:	d013      	beq.n	80116ce <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116b0:	0018      	movs	r0, r3
 80116b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80116b4:	e00b      	b.n	80116ce <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	0018      	movs	r0, r3
 80116ba:	f000 f819 	bl	80116f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80116be:	e006      	b.n	80116ce <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	0018      	movs	r0, r3
 80116c4:	f000 f814 	bl	80116f0 <I2C_TreatErrorCallback>
  }
}
 80116c8:	e002      	b.n	80116d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80116ca:	46c0      	nop			@ (mov r8, r8)
 80116cc:	e000      	b.n	80116d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80116ce:	46c0      	nop			@ (mov r8, r8)
}
 80116d0:	46c0      	nop			@ (mov r8, r8)
 80116d2:	46bd      	mov	sp, r7
 80116d4:	b004      	add	sp, #16
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	ffff0000 	.word	0xffff0000
 80116dc:	080105d1 	.word	0x080105d1
 80116e0:	00008003 	.word	0x00008003
 80116e4:	ffffbfff 	.word	0xffffbfff
 80116e8:	080118fb 	.word	0x080118fb
 80116ec:	ffff7fff 	.word	0xffff7fff

080116f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2241      	movs	r2, #65	@ 0x41
 80116fc:	5c9b      	ldrb	r3, [r3, r2]
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	2b60      	cmp	r3, #96	@ 0x60
 8011702:	d10f      	bne.n	8011724 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2241      	movs	r2, #65	@ 0x41
 8011708:	2120      	movs	r1, #32
 801170a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2200      	movs	r2, #0
 8011710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2240      	movs	r2, #64	@ 0x40
 8011716:	2100      	movs	r1, #0
 8011718:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	0018      	movs	r0, r3
 801171e:	f7fe fe24 	bl	801036a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011722:	e00a      	b.n	801173a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2200      	movs	r2, #0
 8011728:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2240      	movs	r2, #64	@ 0x40
 801172e:	2100      	movs	r1, #0
 8011730:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	0018      	movs	r0, r3
 8011736:	f7fe fe10 	bl	801035a <HAL_I2C_ErrorCallback>
}
 801173a:	46c0      	nop			@ (mov r8, r8)
 801173c:	46bd      	mov	sp, r7
 801173e:	b002      	add	sp, #8
 8011740:	bd80      	pop	{r7, pc}

08011742 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b082      	sub	sp, #8
 8011746:	af00      	add	r7, sp, #0
 8011748:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	699b      	ldr	r3, [r3, #24]
 8011750:	2202      	movs	r2, #2
 8011752:	4013      	ands	r3, r2
 8011754:	2b02      	cmp	r3, #2
 8011756:	d103      	bne.n	8011760 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2200      	movs	r2, #0
 801175e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	699b      	ldr	r3, [r3, #24]
 8011766:	2201      	movs	r2, #1
 8011768:	4013      	ands	r3, r2
 801176a:	2b01      	cmp	r3, #1
 801176c:	d007      	beq.n	801177e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	699a      	ldr	r2, [r3, #24]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	2101      	movs	r1, #1
 801177a:	430a      	orrs	r2, r1
 801177c:	619a      	str	r2, [r3, #24]
  }
}
 801177e:	46c0      	nop			@ (mov r8, r8)
 8011780:	46bd      	mov	sp, r7
 8011782:	b002      	add	sp, #8
 8011784:	bd80      	pop	{r7, pc}
	...

08011788 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011794:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	681a      	ldr	r2, [r3, #0]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4920      	ldr	r1, [pc, #128]	@ (8011824 <I2C_DMAMasterTransmitCplt+0x9c>)
 80117a2:	400a      	ands	r2, r1
 80117a4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d105      	bne.n	80117bc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2120      	movs	r1, #32
 80117b4:	0018      	movs	r0, r3
 80117b6:	f000 fb4b 	bl	8011e50 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80117ba:	e02e      	b.n	801181a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80117c4:	189a      	adds	r2, r3, r2
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	2bff      	cmp	r3, #255	@ 0xff
 80117d2:	d903      	bls.n	80117dc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	22ff      	movs	r2, #255	@ 0xff
 80117d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80117da:	e004      	b.n	80117e6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ee:	0019      	movs	r1, r3
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	3328      	adds	r3, #40	@ 0x28
 80117f6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80117fc:	f7fd fac8 	bl	800ed90 <HAL_DMA_Start_IT>
 8011800:	1e03      	subs	r3, r0, #0
 8011802:	d005      	beq.n	8011810 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2110      	movs	r1, #16
 8011808:	0018      	movs	r0, r3
 801180a:	f7ff fe6f 	bl	80114ec <I2C_ITError>
}
 801180e:	e004      	b.n	801181a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2140      	movs	r1, #64	@ 0x40
 8011814:	0018      	movs	r0, r3
 8011816:	f000 fb1b 	bl	8011e50 <I2C_Enable_IRQ>
}
 801181a:	46c0      	nop			@ (mov r8, r8)
 801181c:	46bd      	mov	sp, r7
 801181e:	b004      	add	sp, #16
 8011820:	bd80      	pop	{r7, pc}
 8011822:	46c0      	nop			@ (mov r8, r8)
 8011824:	ffffbfff 	.word	0xffffbfff

08011828 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011834:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4920      	ldr	r1, [pc, #128]	@ (80118c4 <I2C_DMAMasterReceiveCplt+0x9c>)
 8011842:	400a      	ands	r2, r1
 8011844:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801184a:	b29b      	uxth	r3, r3
 801184c:	2b00      	cmp	r3, #0
 801184e:	d105      	bne.n	801185c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2120      	movs	r1, #32
 8011854:	0018      	movs	r0, r3
 8011856:	f000 fafb 	bl	8011e50 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801185a:	e02e      	b.n	80118ba <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011864:	189a      	adds	r2, r3, r2
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801186e:	b29b      	uxth	r3, r3
 8011870:	2bff      	cmp	r3, #255	@ 0xff
 8011872:	d903      	bls.n	801187c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	22ff      	movs	r2, #255	@ 0xff
 8011878:	851a      	strh	r2, [r3, #40]	@ 0x28
 801187a:	e004      	b.n	8011886 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011880:	b29a      	uxth	r2, r3
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	3324      	adds	r3, #36	@ 0x24
 8011890:	0019      	movs	r1, r3
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011896:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801189c:	f7fd fa78 	bl	800ed90 <HAL_DMA_Start_IT>
 80118a0:	1e03      	subs	r3, r0, #0
 80118a2:	d005      	beq.n	80118b0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2110      	movs	r1, #16
 80118a8:	0018      	movs	r0, r3
 80118aa:	f7ff fe1f 	bl	80114ec <I2C_ITError>
}
 80118ae:	e004      	b.n	80118ba <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2140      	movs	r1, #64	@ 0x40
 80118b4:	0018      	movs	r0, r3
 80118b6:	f000 facb 	bl	8011e50 <I2C_Enable_IRQ>
}
 80118ba:	46c0      	nop			@ (mov r8, r8)
 80118bc:	46bd      	mov	sp, r7
 80118be:	b004      	add	sp, #16
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	46c0      	nop			@ (mov r8, r8)
 80118c4:	ffff7fff 	.word	0xffff7fff

080118c8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118d4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	685a      	ldr	r2, [r3, #4]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	2180      	movs	r1, #128	@ 0x80
 80118e2:	0209      	lsls	r1, r1, #8
 80118e4:	430a      	orrs	r2, r1
 80118e6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	2110      	movs	r1, #16
 80118ec:	0018      	movs	r0, r3
 80118ee:	f7ff fdfd 	bl	80114ec <I2C_ITError>
}
 80118f2:	46c0      	nop			@ (mov r8, r8)
 80118f4:	46bd      	mov	sp, r7
 80118f6:	b004      	add	sp, #16
 80118f8:	bd80      	pop	{r7, pc}

080118fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b084      	sub	sp, #16
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011906:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801190c:	2b00      	cmp	r3, #0
 801190e:	d003      	beq.n	8011918 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011914:	2200      	movs	r2, #0
 8011916:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801191c:	2b00      	cmp	r3, #0
 801191e:	d003      	beq.n	8011928 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011924:	2200      	movs	r2, #0
 8011926:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	0018      	movs	r0, r3
 801192c:	f7ff fee0 	bl	80116f0 <I2C_TreatErrorCallback>
}
 8011930:	46c0      	nop			@ (mov r8, r8)
 8011932:	46bd      	mov	sp, r7
 8011934:	b004      	add	sp, #16
 8011936:	bd80      	pop	{r7, pc}

08011938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	60b9      	str	r1, [r7, #8]
 8011942:	603b      	str	r3, [r7, #0]
 8011944:	1dfb      	adds	r3, r7, #7
 8011946:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011948:	e030      	b.n	80119ac <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	3301      	adds	r3, #1
 801194e:	d02d      	beq.n	80119ac <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011950:	f7fc fce2 	bl	800e318 <HAL_GetTick>
 8011954:	0002      	movs	r2, r0
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	1ad3      	subs	r3, r2, r3
 801195a:	683a      	ldr	r2, [r7, #0]
 801195c:	429a      	cmp	r2, r3
 801195e:	d302      	bcc.n	8011966 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d122      	bne.n	80119ac <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	699b      	ldr	r3, [r3, #24]
 801196c:	68ba      	ldr	r2, [r7, #8]
 801196e:	4013      	ands	r3, r2
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	425a      	negs	r2, r3
 8011976:	4153      	adcs	r3, r2
 8011978:	b2db      	uxtb	r3, r3
 801197a:	001a      	movs	r2, r3
 801197c:	1dfb      	adds	r3, r7, #7
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	429a      	cmp	r2, r3
 8011982:	d113      	bne.n	80119ac <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011988:	2220      	movs	r2, #32
 801198a:	431a      	orrs	r2, r3
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2241      	movs	r2, #65	@ 0x41
 8011994:	2120      	movs	r1, #32
 8011996:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	2242      	movs	r2, #66	@ 0x42
 801199c:	2100      	movs	r1, #0
 801199e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2240      	movs	r2, #64	@ 0x40
 80119a4:	2100      	movs	r1, #0
 80119a6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80119a8:	2301      	movs	r3, #1
 80119aa:	e00f      	b.n	80119cc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	699b      	ldr	r3, [r3, #24]
 80119b2:	68ba      	ldr	r2, [r7, #8]
 80119b4:	4013      	ands	r3, r2
 80119b6:	68ba      	ldr	r2, [r7, #8]
 80119b8:	1ad3      	subs	r3, r2, r3
 80119ba:	425a      	negs	r2, r3
 80119bc:	4153      	adcs	r3, r2
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	001a      	movs	r2, r3
 80119c2:	1dfb      	adds	r3, r7, #7
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d0bf      	beq.n	801194a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	0018      	movs	r0, r3
 80119ce:	46bd      	mov	sp, r7
 80119d0:	b004      	add	sp, #16
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80119e0:	e032      	b.n	8011a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	68b9      	ldr	r1, [r7, #8]
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	0018      	movs	r0, r3
 80119ea:	f000 f8ff 	bl	8011bec <I2C_IsErrorOccurred>
 80119ee:	1e03      	subs	r3, r0, #0
 80119f0:	d001      	beq.n	80119f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	e030      	b.n	8011a58 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	3301      	adds	r3, #1
 80119fa:	d025      	beq.n	8011a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119fc:	f7fc fc8c 	bl	800e318 <HAL_GetTick>
 8011a00:	0002      	movs	r2, r0
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	1ad3      	subs	r3, r2, r3
 8011a06:	68ba      	ldr	r2, [r7, #8]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d302      	bcc.n	8011a12 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d11a      	bne.n	8011a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	699b      	ldr	r3, [r3, #24]
 8011a18:	2202      	movs	r2, #2
 8011a1a:	4013      	ands	r3, r2
 8011a1c:	2b02      	cmp	r3, #2
 8011a1e:	d013      	beq.n	8011a48 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a24:	2220      	movs	r2, #32
 8011a26:	431a      	orrs	r2, r3
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2241      	movs	r2, #65	@ 0x41
 8011a30:	2120      	movs	r1, #32
 8011a32:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	2242      	movs	r2, #66	@ 0x42
 8011a38:	2100      	movs	r1, #0
 8011a3a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2240      	movs	r2, #64	@ 0x40
 8011a40:	2100      	movs	r1, #0
 8011a42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8011a44:	2301      	movs	r3, #1
 8011a46:	e007      	b.n	8011a58 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	699b      	ldr	r3, [r3, #24]
 8011a4e:	2202      	movs	r2, #2
 8011a50:	4013      	ands	r3, r2
 8011a52:	2b02      	cmp	r3, #2
 8011a54:	d1c5      	bne.n	80119e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8011a56:	2300      	movs	r3, #0
}
 8011a58:	0018      	movs	r0, r3
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	b004      	add	sp, #16
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a6c:	e02f      	b.n	8011ace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	68b9      	ldr	r1, [r7, #8]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	0018      	movs	r0, r3
 8011a76:	f000 f8b9 	bl	8011bec <I2C_IsErrorOccurred>
 8011a7a:	1e03      	subs	r3, r0, #0
 8011a7c:	d001      	beq.n	8011a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011a7e:	2301      	movs	r3, #1
 8011a80:	e02d      	b.n	8011ade <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a82:	f7fc fc49 	bl	800e318 <HAL_GetTick>
 8011a86:	0002      	movs	r2, r0
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	68ba      	ldr	r2, [r7, #8]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d302      	bcc.n	8011a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d11a      	bne.n	8011ace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	699b      	ldr	r3, [r3, #24]
 8011a9e:	2220      	movs	r2, #32
 8011aa0:	4013      	ands	r3, r2
 8011aa2:	2b20      	cmp	r3, #32
 8011aa4:	d013      	beq.n	8011ace <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011aaa:	2220      	movs	r2, #32
 8011aac:	431a      	orrs	r2, r3
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2241      	movs	r2, #65	@ 0x41
 8011ab6:	2120      	movs	r1, #32
 8011ab8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2242      	movs	r2, #66	@ 0x42
 8011abe:	2100      	movs	r1, #0
 8011ac0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2240      	movs	r2, #64	@ 0x40
 8011ac6:	2100      	movs	r1, #0
 8011ac8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011aca:	2301      	movs	r3, #1
 8011acc:	e007      	b.n	8011ade <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	699b      	ldr	r3, [r3, #24]
 8011ad4:	2220      	movs	r2, #32
 8011ad6:	4013      	ands	r3, r2
 8011ad8:	2b20      	cmp	r3, #32
 8011ada:	d1c8      	bne.n	8011a6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	0018      	movs	r0, r3
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	b004      	add	sp, #16
 8011ae4:	bd80      	pop	{r7, pc}
	...

08011ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011af4:	e06b      	b.n	8011bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	68b9      	ldr	r1, [r7, #8]
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	0018      	movs	r0, r3
 8011afe:	f000 f875 	bl	8011bec <I2C_IsErrorOccurred>
 8011b02:	1e03      	subs	r3, r0, #0
 8011b04:	d001      	beq.n	8011b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011b06:	2301      	movs	r3, #1
 8011b08:	e069      	b.n	8011bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	699b      	ldr	r3, [r3, #24]
 8011b10:	2220      	movs	r2, #32
 8011b12:	4013      	ands	r3, r2
 8011b14:	2b20      	cmp	r3, #32
 8011b16:	d138      	bne.n	8011b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	699b      	ldr	r3, [r3, #24]
 8011b1e:	2204      	movs	r2, #4
 8011b20:	4013      	ands	r3, r2
 8011b22:	2b04      	cmp	r3, #4
 8011b24:	d105      	bne.n	8011b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d001      	beq.n	8011b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	e055      	b.n	8011bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	699b      	ldr	r3, [r3, #24]
 8011b38:	2210      	movs	r2, #16
 8011b3a:	4013      	ands	r3, r2
 8011b3c:	2b10      	cmp	r3, #16
 8011b3e:	d107      	bne.n	8011b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2210      	movs	r2, #16
 8011b46:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2204      	movs	r2, #4
 8011b4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8011b4e:	e002      	b.n	8011b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2200      	movs	r2, #0
 8011b54:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2220      	movs	r2, #32
 8011b5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	685a      	ldr	r2, [r3, #4]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	491f      	ldr	r1, [pc, #124]	@ (8011be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8011b6a:	400a      	ands	r2, r1
 8011b6c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2241      	movs	r2, #65	@ 0x41
 8011b72:	2120      	movs	r1, #32
 8011b74:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2242      	movs	r2, #66	@ 0x42
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2240      	movs	r2, #64	@ 0x40
 8011b82:	2100      	movs	r1, #0
 8011b84:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011b86:	2301      	movs	r3, #1
 8011b88:	e029      	b.n	8011bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b8a:	f7fc fbc5 	bl	800e318 <HAL_GetTick>
 8011b8e:	0002      	movs	r2, r0
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	68ba      	ldr	r2, [r7, #8]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d302      	bcc.n	8011ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d116      	bne.n	8011bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	699b      	ldr	r3, [r3, #24]
 8011ba6:	2204      	movs	r2, #4
 8011ba8:	4013      	ands	r3, r2
 8011baa:	2b04      	cmp	r3, #4
 8011bac:	d00f      	beq.n	8011bce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011bb2:	2220      	movs	r2, #32
 8011bb4:	431a      	orrs	r2, r3
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	2241      	movs	r2, #65	@ 0x41
 8011bbe:	2120      	movs	r1, #32
 8011bc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2240      	movs	r2, #64	@ 0x40
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e007      	b.n	8011bde <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	699b      	ldr	r3, [r3, #24]
 8011bd4:	2204      	movs	r2, #4
 8011bd6:	4013      	ands	r3, r2
 8011bd8:	2b04      	cmp	r3, #4
 8011bda:	d18c      	bne.n	8011af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	0018      	movs	r0, r3
 8011be0:	46bd      	mov	sp, r7
 8011be2:	b004      	add	sp, #16
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	46c0      	nop			@ (mov r8, r8)
 8011be8:	fe00e800 	.word	0xfe00e800

08011bec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b08a      	sub	sp, #40	@ 0x28
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011bf8:	2327      	movs	r3, #39	@ 0x27
 8011bfa:	18fb      	adds	r3, r7, r3
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	699b      	ldr	r3, [r3, #24]
 8011c06:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	2210      	movs	r2, #16
 8011c14:	4013      	ands	r3, r2
 8011c16:	d100      	bne.n	8011c1a <I2C_IsErrorOccurred+0x2e>
 8011c18:	e079      	b.n	8011d0e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2210      	movs	r2, #16
 8011c20:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011c22:	e057      	b.n	8011cd4 <I2C_IsErrorOccurred+0xe8>
 8011c24:	2227      	movs	r2, #39	@ 0x27
 8011c26:	18bb      	adds	r3, r7, r2
 8011c28:	18ba      	adds	r2, r7, r2
 8011c2a:	7812      	ldrb	r2, [r2, #0]
 8011c2c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	3301      	adds	r3, #1
 8011c32:	d04f      	beq.n	8011cd4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011c34:	f7fc fb70 	bl	800e318 <HAL_GetTick>
 8011c38:	0002      	movs	r2, r0
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	1ad3      	subs	r3, r2, r3
 8011c3e:	68ba      	ldr	r2, [r7, #8]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d302      	bcc.n	8011c4a <I2C_IsErrorOccurred+0x5e>
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d144      	bne.n	8011cd4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	685a      	ldr	r2, [r3, #4]
 8011c50:	2380      	movs	r3, #128	@ 0x80
 8011c52:	01db      	lsls	r3, r3, #7
 8011c54:	4013      	ands	r3, r2
 8011c56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011c58:	2013      	movs	r0, #19
 8011c5a:	183b      	adds	r3, r7, r0
 8011c5c:	68fa      	ldr	r2, [r7, #12]
 8011c5e:	2142      	movs	r1, #66	@ 0x42
 8011c60:	5c52      	ldrb	r2, [r2, r1]
 8011c62:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	699a      	ldr	r2, [r3, #24]
 8011c6a:	2380      	movs	r3, #128	@ 0x80
 8011c6c:	021b      	lsls	r3, r3, #8
 8011c6e:	401a      	ands	r2, r3
 8011c70:	2380      	movs	r3, #128	@ 0x80
 8011c72:	021b      	lsls	r3, r3, #8
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d126      	bne.n	8011cc6 <I2C_IsErrorOccurred+0xda>
 8011c78:	697a      	ldr	r2, [r7, #20]
 8011c7a:	2380      	movs	r3, #128	@ 0x80
 8011c7c:	01db      	lsls	r3, r3, #7
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d021      	beq.n	8011cc6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8011c82:	183b      	adds	r3, r7, r0
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	2b20      	cmp	r3, #32
 8011c88:	d01d      	beq.n	8011cc6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	685a      	ldr	r2, [r3, #4]
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2180      	movs	r1, #128	@ 0x80
 8011c96:	01c9      	lsls	r1, r1, #7
 8011c98:	430a      	orrs	r2, r1
 8011c9a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011c9c:	f7fc fb3c 	bl	800e318 <HAL_GetTick>
 8011ca0:	0003      	movs	r3, r0
 8011ca2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011ca4:	e00f      	b.n	8011cc6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011ca6:	f7fc fb37 	bl	800e318 <HAL_GetTick>
 8011caa:	0002      	movs	r2, r0
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	2b19      	cmp	r3, #25
 8011cb2:	d908      	bls.n	8011cc6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011cb4:	6a3b      	ldr	r3, [r7, #32]
 8011cb6:	2220      	movs	r2, #32
 8011cb8:	4313      	orrs	r3, r2
 8011cba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011cbc:	2327      	movs	r3, #39	@ 0x27
 8011cbe:	18fb      	adds	r3, r7, r3
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	701a      	strb	r2, [r3, #0]

              break;
 8011cc4:	e006      	b.n	8011cd4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	699b      	ldr	r3, [r3, #24]
 8011ccc:	2220      	movs	r2, #32
 8011cce:	4013      	ands	r3, r2
 8011cd0:	2b20      	cmp	r3, #32
 8011cd2:	d1e8      	bne.n	8011ca6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	699b      	ldr	r3, [r3, #24]
 8011cda:	2220      	movs	r2, #32
 8011cdc:	4013      	ands	r3, r2
 8011cde:	2b20      	cmp	r3, #32
 8011ce0:	d004      	beq.n	8011cec <I2C_IsErrorOccurred+0x100>
 8011ce2:	2327      	movs	r3, #39	@ 0x27
 8011ce4:	18fb      	adds	r3, r7, r3
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d09b      	beq.n	8011c24 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011cec:	2327      	movs	r3, #39	@ 0x27
 8011cee:	18fb      	adds	r3, r7, r3
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d103      	bne.n	8011cfe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2220      	movs	r2, #32
 8011cfc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	2204      	movs	r2, #4
 8011d02:	4313      	orrs	r3, r2
 8011d04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011d06:	2327      	movs	r3, #39	@ 0x27
 8011d08:	18fb      	adds	r3, r7, r3
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	699b      	ldr	r3, [r3, #24]
 8011d14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	2380      	movs	r3, #128	@ 0x80
 8011d1a:	005b      	lsls	r3, r3, #1
 8011d1c:	4013      	ands	r3, r2
 8011d1e:	d00c      	beq.n	8011d3a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011d20:	6a3b      	ldr	r3, [r7, #32]
 8011d22:	2201      	movs	r2, #1
 8011d24:	4313      	orrs	r3, r2
 8011d26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	2280      	movs	r2, #128	@ 0x80
 8011d2e:	0052      	lsls	r2, r2, #1
 8011d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011d32:	2327      	movs	r3, #39	@ 0x27
 8011d34:	18fb      	adds	r3, r7, r3
 8011d36:	2201      	movs	r2, #1
 8011d38:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011d3a:	69ba      	ldr	r2, [r7, #24]
 8011d3c:	2380      	movs	r3, #128	@ 0x80
 8011d3e:	00db      	lsls	r3, r3, #3
 8011d40:	4013      	ands	r3, r2
 8011d42:	d00c      	beq.n	8011d5e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011d44:	6a3b      	ldr	r3, [r7, #32]
 8011d46:	2208      	movs	r2, #8
 8011d48:	4313      	orrs	r3, r2
 8011d4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2280      	movs	r2, #128	@ 0x80
 8011d52:	00d2      	lsls	r2, r2, #3
 8011d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011d56:	2327      	movs	r3, #39	@ 0x27
 8011d58:	18fb      	adds	r3, r7, r3
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011d5e:	69ba      	ldr	r2, [r7, #24]
 8011d60:	2380      	movs	r3, #128	@ 0x80
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4013      	ands	r3, r2
 8011d66:	d00c      	beq.n	8011d82 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011d68:	6a3b      	ldr	r3, [r7, #32]
 8011d6a:	2202      	movs	r2, #2
 8011d6c:	4313      	orrs	r3, r2
 8011d6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2280      	movs	r2, #128	@ 0x80
 8011d76:	0092      	lsls	r2, r2, #2
 8011d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011d7a:	2327      	movs	r3, #39	@ 0x27
 8011d7c:	18fb      	adds	r3, r7, r3
 8011d7e:	2201      	movs	r2, #1
 8011d80:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011d82:	2327      	movs	r3, #39	@ 0x27
 8011d84:	18fb      	adds	r3, r7, r3
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d01d      	beq.n	8011dc8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	0018      	movs	r0, r3
 8011d90:	f7ff fcd7 	bl	8011742 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	685a      	ldr	r2, [r3, #4]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	490e      	ldr	r1, [pc, #56]	@ (8011dd8 <I2C_IsErrorOccurred+0x1ec>)
 8011da0:	400a      	ands	r2, r1
 8011da2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	431a      	orrs	r2, r3
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2241      	movs	r2, #65	@ 0x41
 8011db4:	2120      	movs	r1, #32
 8011db6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	2242      	movs	r2, #66	@ 0x42
 8011dbc:	2100      	movs	r1, #0
 8011dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2240      	movs	r2, #64	@ 0x40
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011dc8:	2327      	movs	r3, #39	@ 0x27
 8011dca:	18fb      	adds	r3, r7, r3
 8011dcc:	781b      	ldrb	r3, [r3, #0]
}
 8011dce:	0018      	movs	r0, r3
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	b00a      	add	sp, #40	@ 0x28
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	46c0      	nop			@ (mov r8, r8)
 8011dd8:	fe00e800 	.word	0xfe00e800

08011ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011ddc:	b590      	push	{r4, r7, lr}
 8011dde:	b087      	sub	sp, #28
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	60f8      	str	r0, [r7, #12]
 8011de4:	0008      	movs	r0, r1
 8011de6:	0011      	movs	r1, r2
 8011de8:	607b      	str	r3, [r7, #4]
 8011dea:	240a      	movs	r4, #10
 8011dec:	193b      	adds	r3, r7, r4
 8011dee:	1c02      	adds	r2, r0, #0
 8011df0:	801a      	strh	r2, [r3, #0]
 8011df2:	2009      	movs	r0, #9
 8011df4:	183b      	adds	r3, r7, r0
 8011df6:	1c0a      	adds	r2, r1, #0
 8011df8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011dfa:	193b      	adds	r3, r7, r4
 8011dfc:	881b      	ldrh	r3, [r3, #0]
 8011dfe:	059b      	lsls	r3, r3, #22
 8011e00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011e02:	183b      	adds	r3, r7, r0
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	0419      	lsls	r1, r3, #16
 8011e08:	23ff      	movs	r3, #255	@ 0xff
 8011e0a:	041b      	lsls	r3, r3, #16
 8011e0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011e0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e16:	4313      	orrs	r3, r2
 8011e18:	005b      	lsls	r3, r3, #1
 8011e1a:	085b      	lsrs	r3, r3, #1
 8011e1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e26:	0d51      	lsrs	r1, r2, #21
 8011e28:	2280      	movs	r2, #128	@ 0x80
 8011e2a:	00d2      	lsls	r2, r2, #3
 8011e2c:	400a      	ands	r2, r1
 8011e2e:	4907      	ldr	r1, [pc, #28]	@ (8011e4c <I2C_TransferConfig+0x70>)
 8011e30:	430a      	orrs	r2, r1
 8011e32:	43d2      	mvns	r2, r2
 8011e34:	401a      	ands	r2, r3
 8011e36:	0011      	movs	r1, r2
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	697a      	ldr	r2, [r7, #20]
 8011e3e:	430a      	orrs	r2, r1
 8011e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011e42:	46c0      	nop			@ (mov r8, r8)
 8011e44:	46bd      	mov	sp, r7
 8011e46:	b007      	add	sp, #28
 8011e48:	bd90      	pop	{r4, r7, pc}
 8011e4a:	46c0      	nop			@ (mov r8, r8)
 8011e4c:	03ff63ff 	.word	0x03ff63ff

08011e50 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	000a      	movs	r2, r1
 8011e5a:	1cbb      	adds	r3, r7, #2
 8011e5c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e66:	4b3e      	ldr	r3, [pc, #248]	@ (8011f60 <I2C_Enable_IRQ+0x110>)
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d035      	beq.n	8011ed8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011e70:	4b3c      	ldr	r3, [pc, #240]	@ (8011f64 <I2C_Enable_IRQ+0x114>)
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d030      	beq.n	8011ed8 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8011f68 <I2C_Enable_IRQ+0x118>)
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d02b      	beq.n	8011ed8 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011e80:	1cbb      	adds	r3, r7, #2
 8011e82:	2200      	movs	r2, #0
 8011e84:	5e9b      	ldrsh	r3, [r3, r2]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	da03      	bge.n	8011e92 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	22b8      	movs	r2, #184	@ 0xb8
 8011e8e:	4313      	orrs	r3, r2
 8011e90:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011e92:	1cbb      	adds	r3, r7, #2
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	2201      	movs	r2, #1
 8011e98:	4013      	ands	r3, r2
 8011e9a:	d003      	beq.n	8011ea4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	22f2      	movs	r2, #242	@ 0xf2
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011ea4:	1cbb      	adds	r3, r7, #2
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	4013      	ands	r3, r2
 8011eac:	d003      	beq.n	8011eb6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	22f4      	movs	r2, #244	@ 0xf4
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011eb6:	1cbb      	adds	r3, r7, #2
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	2b10      	cmp	r3, #16
 8011ebc:	d103      	bne.n	8011ec6 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	2290      	movs	r2, #144	@ 0x90
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011ec6:	1cbb      	adds	r3, r7, #2
 8011ec8:	881b      	ldrh	r3, [r3, #0]
 8011eca:	2b20      	cmp	r3, #32
 8011ecc:	d13c      	bne.n	8011f48 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2220      	movs	r2, #32
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011ed6:	e037      	b.n	8011f48 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011ed8:	1cbb      	adds	r3, r7, #2
 8011eda:	2200      	movs	r2, #0
 8011edc:	5e9b      	ldrsh	r3, [r3, r2]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	da03      	bge.n	8011eea <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	22b8      	movs	r2, #184	@ 0xb8
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011eea:	1cbb      	adds	r3, r7, #2
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	2201      	movs	r2, #1
 8011ef0:	4013      	ands	r3, r2
 8011ef2:	d003      	beq.n	8011efc <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	22f2      	movs	r2, #242	@ 0xf2
 8011ef8:	4313      	orrs	r3, r2
 8011efa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011efc:	1cbb      	adds	r3, r7, #2
 8011efe:	881b      	ldrh	r3, [r3, #0]
 8011f00:	2202      	movs	r2, #2
 8011f02:	4013      	ands	r3, r2
 8011f04:	d003      	beq.n	8011f0e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	22f4      	movs	r2, #244	@ 0xf4
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011f0e:	1cbb      	adds	r3, r7, #2
 8011f10:	881b      	ldrh	r3, [r3, #0]
 8011f12:	2b10      	cmp	r3, #16
 8011f14:	d103      	bne.n	8011f1e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2290      	movs	r2, #144	@ 0x90
 8011f1a:	4313      	orrs	r3, r2
 8011f1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011f1e:	1cbb      	adds	r3, r7, #2
 8011f20:	881b      	ldrh	r3, [r3, #0]
 8011f22:	2b20      	cmp	r3, #32
 8011f24:	d103      	bne.n	8011f2e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2260      	movs	r2, #96	@ 0x60
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011f32:	4b0d      	ldr	r3, [pc, #52]	@ (8011f68 <I2C_Enable_IRQ+0x118>)
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d007      	beq.n	8011f48 <I2C_Enable_IRQ+0xf8>
 8011f38:	1cbb      	adds	r3, r7, #2
 8011f3a:	881b      	ldrh	r3, [r3, #0]
 8011f3c:	2b40      	cmp	r3, #64	@ 0x40
 8011f3e:	d103      	bne.n	8011f48 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2240      	movs	r2, #64	@ 0x40
 8011f44:	4313      	orrs	r3, r2
 8011f46:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	6819      	ldr	r1, [r3, #0]
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	430a      	orrs	r2, r1
 8011f56:	601a      	str	r2, [r3, #0]
}
 8011f58:	46c0      	nop			@ (mov r8, r8)
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	b004      	add	sp, #16
 8011f5e:	bd80      	pop	{r7, pc}
 8011f60:	080107d1 	.word	0x080107d1
 8011f64:	08010c01 	.word	0x08010c01
 8011f68:	080109c9 	.word	0x080109c9

08011f6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b084      	sub	sp, #16
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	000a      	movs	r2, r1
 8011f76:	1cbb      	adds	r3, r7, #2
 8011f78:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011f7e:	1cbb      	adds	r3, r7, #2
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	2201      	movs	r2, #1
 8011f84:	4013      	ands	r3, r2
 8011f86:	d010      	beq.n	8011faa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2242      	movs	r2, #66	@ 0x42
 8011f8c:	4313      	orrs	r3, r2
 8011f8e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2241      	movs	r2, #65	@ 0x41
 8011f94:	5c9b      	ldrb	r3, [r3, r2]
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	001a      	movs	r2, r3
 8011f9a:	2328      	movs	r3, #40	@ 0x28
 8011f9c:	4013      	ands	r3, r2
 8011f9e:	2b28      	cmp	r3, #40	@ 0x28
 8011fa0:	d003      	beq.n	8011faa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	22b0      	movs	r2, #176	@ 0xb0
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011faa:	1cbb      	adds	r3, r7, #2
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	2202      	movs	r2, #2
 8011fb0:	4013      	ands	r3, r2
 8011fb2:	d010      	beq.n	8011fd6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	2244      	movs	r2, #68	@ 0x44
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2241      	movs	r2, #65	@ 0x41
 8011fc0:	5c9b      	ldrb	r3, [r3, r2]
 8011fc2:	b2db      	uxtb	r3, r3
 8011fc4:	001a      	movs	r2, r3
 8011fc6:	2328      	movs	r3, #40	@ 0x28
 8011fc8:	4013      	ands	r3, r2
 8011fca:	2b28      	cmp	r3, #40	@ 0x28
 8011fcc:	d003      	beq.n	8011fd6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	22b0      	movs	r2, #176	@ 0xb0
 8011fd2:	4313      	orrs	r3, r2
 8011fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011fd6:	1cbb      	adds	r3, r7, #2
 8011fd8:	2200      	movs	r2, #0
 8011fda:	5e9b      	ldrsh	r3, [r3, r2]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da03      	bge.n	8011fe8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	22b8      	movs	r2, #184	@ 0xb8
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011fe8:	1cbb      	adds	r3, r7, #2
 8011fea:	881b      	ldrh	r3, [r3, #0]
 8011fec:	2b10      	cmp	r3, #16
 8011fee:	d103      	bne.n	8011ff8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2290      	movs	r2, #144	@ 0x90
 8011ff4:	4313      	orrs	r3, r2
 8011ff6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011ff8:	1cbb      	adds	r3, r7, #2
 8011ffa:	881b      	ldrh	r3, [r3, #0]
 8011ffc:	2b20      	cmp	r3, #32
 8011ffe:	d103      	bne.n	8012008 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	2220      	movs	r2, #32
 8012004:	4313      	orrs	r3, r2
 8012006:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012008:	1cbb      	adds	r3, r7, #2
 801200a:	881b      	ldrh	r3, [r3, #0]
 801200c:	2b40      	cmp	r3, #64	@ 0x40
 801200e:	d103      	bne.n	8012018 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2240      	movs	r2, #64	@ 0x40
 8012014:	4313      	orrs	r3, r2
 8012016:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	43d9      	mvns	r1, r3
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	400a      	ands	r2, r1
 8012028:	601a      	str	r2, [r3, #0]
}
 801202a:	46c0      	nop			@ (mov r8, r8)
 801202c:	46bd      	mov	sp, r7
 801202e:	b004      	add	sp, #16
 8012030:	bd80      	pop	{r7, pc}
	...

08012034 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2241      	movs	r2, #65	@ 0x41
 8012042:	5c9b      	ldrb	r3, [r3, r2]
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b20      	cmp	r3, #32
 8012048:	d138      	bne.n	80120bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2240      	movs	r2, #64	@ 0x40
 801204e:	5c9b      	ldrb	r3, [r3, r2]
 8012050:	2b01      	cmp	r3, #1
 8012052:	d101      	bne.n	8012058 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012054:	2302      	movs	r3, #2
 8012056:	e032      	b.n	80120be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2240      	movs	r2, #64	@ 0x40
 801205c:	2101      	movs	r1, #1
 801205e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2241      	movs	r2, #65	@ 0x41
 8012064:	2124      	movs	r1, #36	@ 0x24
 8012066:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2101      	movs	r1, #1
 8012074:	438a      	bics	r2, r1
 8012076:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	4911      	ldr	r1, [pc, #68]	@ (80120c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012084:	400a      	ands	r2, r1
 8012086:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	6819      	ldr	r1, [r3, #0]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	430a      	orrs	r2, r1
 8012096:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2101      	movs	r1, #1
 80120a4:	430a      	orrs	r2, r1
 80120a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2241      	movs	r2, #65	@ 0x41
 80120ac:	2120      	movs	r1, #32
 80120ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2240      	movs	r2, #64	@ 0x40
 80120b4:	2100      	movs	r1, #0
 80120b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80120b8:	2300      	movs	r3, #0
 80120ba:	e000      	b.n	80120be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80120bc:	2302      	movs	r3, #2
  }
}
 80120be:	0018      	movs	r0, r3
 80120c0:	46bd      	mov	sp, r7
 80120c2:	b002      	add	sp, #8
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	46c0      	nop			@ (mov r8, r8)
 80120c8:	ffffefff 	.word	0xffffefff

080120cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	2241      	movs	r2, #65	@ 0x41
 80120da:	5c9b      	ldrb	r3, [r3, r2]
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b20      	cmp	r3, #32
 80120e0:	d139      	bne.n	8012156 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2240      	movs	r2, #64	@ 0x40
 80120e6:	5c9b      	ldrb	r3, [r3, r2]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d101      	bne.n	80120f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80120ec:	2302      	movs	r3, #2
 80120ee:	e033      	b.n	8012158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2240      	movs	r2, #64	@ 0x40
 80120f4:	2101      	movs	r1, #1
 80120f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2241      	movs	r2, #65	@ 0x41
 80120fc:	2124      	movs	r1, #36	@ 0x24
 80120fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	2101      	movs	r1, #1
 801210c:	438a      	bics	r2, r1
 801210e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	4a11      	ldr	r2, [pc, #68]	@ (8012160 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801211c:	4013      	ands	r3, r2
 801211e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	021b      	lsls	r3, r3, #8
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	4313      	orrs	r3, r2
 8012128:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	68fa      	ldr	r2, [r7, #12]
 8012130:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2101      	movs	r1, #1
 801213e:	430a      	orrs	r2, r1
 8012140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2241      	movs	r2, #65	@ 0x41
 8012146:	2120      	movs	r1, #32
 8012148:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2240      	movs	r2, #64	@ 0x40
 801214e:	2100      	movs	r1, #0
 8012150:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012152:	2300      	movs	r3, #0
 8012154:	e000      	b.n	8012158 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012156:	2302      	movs	r3, #2
  }
}
 8012158:	0018      	movs	r0, r3
 801215a:	46bd      	mov	sp, r7
 801215c:	b004      	add	sp, #16
 801215e:	bd80      	pop	{r7, pc}
 8012160:	fffff0ff 	.word	0xfffff0ff

08012164 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b088      	sub	sp, #32
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d101      	bne.n	8012176 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012172:	2301      	movs	r3, #1
 8012174:	e0e1      	b.n	801233a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2235      	movs	r2, #53	@ 0x35
 801217a:	5c9b      	ldrb	r3, [r3, r2]
 801217c:	b2db      	uxtb	r3, r3
 801217e:	2b00      	cmp	r3, #0
 8012180:	d107      	bne.n	8012192 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2234      	movs	r2, #52	@ 0x34
 8012186:	2100      	movs	r1, #0
 8012188:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	0018      	movs	r0, r3
 801218e:	f7f5 fb5d 	bl	800784c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2235      	movs	r2, #53	@ 0x35
 8012196:	2102      	movs	r1, #2
 8012198:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	69da      	ldr	r2, [r3, #28]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	4967      	ldr	r1, [pc, #412]	@ (8012344 <HAL_I2S_Init+0x1e0>)
 80121a6:	400a      	ands	r2, r1
 80121a8:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2202      	movs	r2, #2
 80121b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	695b      	ldr	r3, [r3, #20]
 80121b6:	2b02      	cmp	r3, #2
 80121b8:	d073      	beq.n	80122a2 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d102      	bne.n	80121c8 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80121c2:	2310      	movs	r3, #16
 80121c4:	617b      	str	r3, [r7, #20]
 80121c6:	e001      	b.n	80121cc <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80121c8:	2320      	movs	r3, #32
 80121ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	2b20      	cmp	r3, #32
 80121d2:	d802      	bhi.n	80121da <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	005b      	lsls	r3, r3, #1
 80121d8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80121da:	f002 fed3 	bl	8014f84 <HAL_RCC_GetSysClockFreq>
 80121de:	0003      	movs	r3, r0
 80121e0:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	691a      	ldr	r2, [r3, #16]
 80121e6:	2380      	movs	r3, #128	@ 0x80
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d131      	bne.n	8012252 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d016      	beq.n	8012224 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	009b      	lsls	r3, r3, #2
 80121fa:	0019      	movs	r1, r3
 80121fc:	68f8      	ldr	r0, [r7, #12]
 80121fe:	f7ed ffd1 	bl	80001a4 <__udivsi3>
 8012202:	0003      	movs	r3, r0
 8012204:	001a      	movs	r2, r3
 8012206:	0013      	movs	r3, r2
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	189b      	adds	r3, r3, r2
 801220c:	005b      	lsls	r3, r3, #1
 801220e:	001a      	movs	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	695b      	ldr	r3, [r3, #20]
 8012214:	0019      	movs	r1, r3
 8012216:	0010      	movs	r0, r2
 8012218:	f7ed ffc4 	bl	80001a4 <__udivsi3>
 801221c:	0003      	movs	r3, r0
 801221e:	3305      	adds	r3, #5
 8012220:	613b      	str	r3, [r7, #16]
 8012222:	e02a      	b.n	801227a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	00db      	lsls	r3, r3, #3
 8012228:	0019      	movs	r1, r3
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f7ed ffba 	bl	80001a4 <__udivsi3>
 8012230:	0003      	movs	r3, r0
 8012232:	001a      	movs	r2, r3
 8012234:	0013      	movs	r3, r2
 8012236:	009b      	lsls	r3, r3, #2
 8012238:	189b      	adds	r3, r3, r2
 801223a:	005b      	lsls	r3, r3, #1
 801223c:	001a      	movs	r2, r3
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	695b      	ldr	r3, [r3, #20]
 8012242:	0019      	movs	r1, r3
 8012244:	0010      	movs	r0, r2
 8012246:	f7ed ffad 	bl	80001a4 <__udivsi3>
 801224a:	0003      	movs	r3, r0
 801224c:	3305      	adds	r3, #5
 801224e:	613b      	str	r3, [r7, #16]
 8012250:	e013      	b.n	801227a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012252:	6979      	ldr	r1, [r7, #20]
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f7ed ffa5 	bl	80001a4 <__udivsi3>
 801225a:	0003      	movs	r3, r0
 801225c:	001a      	movs	r2, r3
 801225e:	0013      	movs	r3, r2
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	189b      	adds	r3, r3, r2
 8012264:	005b      	lsls	r3, r3, #1
 8012266:	001a      	movs	r2, r3
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	695b      	ldr	r3, [r3, #20]
 801226c:	0019      	movs	r1, r3
 801226e:	0010      	movs	r0, r2
 8012270:	f7ed ff98 	bl	80001a4 <__udivsi3>
 8012274:	0003      	movs	r3, r0
 8012276:	3305      	adds	r3, #5
 8012278:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	210a      	movs	r1, #10
 801227e:	0018      	movs	r0, r3
 8012280:	f7ed ff90 	bl	80001a4 <__udivsi3>
 8012284:	0003      	movs	r3, r0
 8012286:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	2201      	movs	r2, #1
 801228c:	4013      	ands	r3, r2
 801228e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012290:	693a      	ldr	r2, [r7, #16]
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	085b      	lsrs	r3, r3, #1
 8012298:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	021b      	lsls	r3, r3, #8
 801229e:	61bb      	str	r3, [r7, #24]
 80122a0:	e003      	b.n	80122aa <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80122a2:	2302      	movs	r3, #2
 80122a4:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80122a6:	2300      	movs	r3, #0
 80122a8:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d902      	bls.n	80122b6 <HAL_I2S_Init+0x152>
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	2bff      	cmp	r3, #255	@ 0xff
 80122b4:	d907      	bls.n	80122c6 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122ba:	2210      	movs	r2, #16
 80122bc:	431a      	orrs	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80122c2:	2301      	movs	r3, #1
 80122c4:	e039      	b.n	801233a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	691a      	ldr	r2, [r3, #16]
 80122ca:	69bb      	ldr	r3, [r7, #24]
 80122cc:	431a      	orrs	r2, r3
 80122ce:	0011      	movs	r1, r2
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	69fa      	ldr	r2, [r7, #28]
 80122d6:	430a      	orrs	r2, r1
 80122d8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	69db      	ldr	r3, [r3, #28]
 80122e0:	4a18      	ldr	r2, [pc, #96]	@ (8012344 <HAL_I2S_Init+0x1e0>)
 80122e2:	401a      	ands	r2, r3
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6859      	ldr	r1, [r3, #4]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	4319      	orrs	r1, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	68db      	ldr	r3, [r3, #12]
 80122f2:	4319      	orrs	r1, r3
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	699b      	ldr	r3, [r3, #24]
 80122f8:	430b      	orrs	r3, r1
 80122fa:	431a      	orrs	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2180      	movs	r1, #128	@ 0x80
 8012302:	0109      	lsls	r1, r1, #4
 8012304:	430a      	orrs	r2, r1
 8012306:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	2b30      	cmp	r3, #48	@ 0x30
 801230e:	d003      	beq.n	8012318 <HAL_I2S_Init+0x1b4>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	2bb0      	cmp	r3, #176	@ 0xb0
 8012316:	d108      	bne.n	801232a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	69da      	ldr	r2, [r3, #28]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2180      	movs	r1, #128	@ 0x80
 8012324:	0149      	lsls	r1, r1, #5
 8012326:	430a      	orrs	r2, r1
 8012328:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2235      	movs	r2, #53	@ 0x35
 8012334:	2101      	movs	r1, #1
 8012336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012338:	2300      	movs	r3, #0
}
 801233a:	0018      	movs	r0, r3
 801233c:	46bd      	mov	sp, r7
 801233e:	b008      	add	sp, #32
 8012340:	bd80      	pop	{r7, pc}
 8012342:	46c0      	nop			@ (mov r8, r8)
 8012344:	fffff040 	.word	0xfffff040

08012348 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b086      	sub	sp, #24
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	1dbb      	adds	r3, r7, #6
 8012354:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d003      	beq.n	8012364 <HAL_I2S_Receive_DMA+0x1c>
 801235c:	1dbb      	adds	r3, r7, #6
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d101      	bne.n	8012368 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012364:	2301      	movs	r3, #1
 8012366:	e0a6      	b.n	80124b6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2234      	movs	r2, #52	@ 0x34
 801236c:	5c9b      	ldrb	r3, [r3, r2]
 801236e:	b2db      	uxtb	r3, r3
 8012370:	2b01      	cmp	r3, #1
 8012372:	d101      	bne.n	8012378 <HAL_I2S_Receive_DMA+0x30>
 8012374:	2302      	movs	r3, #2
 8012376:	e09e      	b.n	80124b6 <HAL_I2S_Receive_DMA+0x16e>
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2234      	movs	r2, #52	@ 0x34
 801237c:	2101      	movs	r1, #1
 801237e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	2235      	movs	r2, #53	@ 0x35
 8012384:	5c9b      	ldrb	r3, [r3, r2]
 8012386:	b2db      	uxtb	r3, r3
 8012388:	2b01      	cmp	r3, #1
 801238a:	d005      	beq.n	8012398 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2234      	movs	r2, #52	@ 0x34
 8012390:	2100      	movs	r1, #0
 8012392:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012394:	2302      	movs	r3, #2
 8012396:	e08e      	b.n	80124b6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2235      	movs	r2, #53	@ 0x35
 801239c:	2104      	movs	r1, #4
 801239e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2200      	movs	r2, #0
 80123a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	68ba      	ldr	r2, [r7, #8]
 80123aa:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	69db      	ldr	r3, [r3, #28]
 80123b2:	2207      	movs	r2, #7
 80123b4:	4013      	ands	r3, r2
 80123b6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	2b03      	cmp	r3, #3
 80123bc:	d002      	beq.n	80123c4 <HAL_I2S_Receive_DMA+0x7c>
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	2b05      	cmp	r3, #5
 80123c2:	d10c      	bne.n	80123de <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80123c4:	1dbb      	adds	r3, r7, #6
 80123c6:	881b      	ldrh	r3, [r3, #0]
 80123c8:	18db      	adds	r3, r3, r3
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80123d0:	1dbb      	adds	r3, r7, #6
 80123d2:	881b      	ldrh	r3, [r3, #0]
 80123d4:	18db      	adds	r3, r3, r3
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80123dc:	e007      	b.n	80123ee <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	1dba      	adds	r2, r7, #6
 80123e2:	8812      	ldrh	r2, [r2, #0]
 80123e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	1dba      	adds	r2, r7, #6
 80123ea:	8812      	ldrh	r2, [r2, #0]
 80123ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123f2:	4a33      	ldr	r2, [pc, #204]	@ (80124c0 <HAL_I2S_Receive_DMA+0x178>)
 80123f4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123fa:	4a32      	ldr	r2, [pc, #200]	@ (80124c4 <HAL_I2S_Receive_DMA+0x17c>)
 80123fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012402:	4a31      	ldr	r2, [pc, #196]	@ (80124c8 <HAL_I2S_Receive_DMA+0x180>)
 8012404:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	69da      	ldr	r2, [r3, #28]
 801240c:	23c0      	movs	r3, #192	@ 0xc0
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	401a      	ands	r2, r3
 8012412:	23c0      	movs	r3, #192	@ 0xc0
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	429a      	cmp	r2, r3
 8012418:	d10a      	bne.n	8012430 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801241a:	2300      	movs	r3, #0
 801241c:	613b      	str	r3, [r7, #16]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	613b      	str	r3, [r7, #16]
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	689b      	ldr	r3, [r3, #8]
 801242c:	613b      	str	r3, [r7, #16]
 801242e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	330c      	adds	r3, #12
 801243a:	0019      	movs	r1, r3
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012440:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012446:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012448:	f7fc fca2 	bl	800ed90 <HAL_DMA_Start_IT>
 801244c:	1e03      	subs	r3, r0, #0
 801244e:	d00f      	beq.n	8012470 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012454:	2208      	movs	r2, #8
 8012456:	431a      	orrs	r2, r3
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2235      	movs	r2, #53	@ 0x35
 8012460:	2101      	movs	r1, #1
 8012462:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2234      	movs	r2, #52	@ 0x34
 8012468:	2100      	movs	r1, #0
 801246a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801246c:	2301      	movs	r3, #1
 801246e:	e022      	b.n	80124b6 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	69da      	ldr	r2, [r3, #28]
 8012476:	2380      	movs	r3, #128	@ 0x80
 8012478:	00db      	lsls	r3, r3, #3
 801247a:	4013      	ands	r3, r2
 801247c:	d108      	bne.n	8012490 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	69da      	ldr	r2, [r3, #28]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2180      	movs	r1, #128	@ 0x80
 801248a:	00c9      	lsls	r1, r1, #3
 801248c:	430a      	orrs	r2, r1
 801248e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	2201      	movs	r2, #1
 8012498:	4013      	ands	r3, r2
 801249a:	d107      	bne.n	80124ac <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	685a      	ldr	r2, [r3, #4]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2101      	movs	r1, #1
 80124a8:	430a      	orrs	r2, r1
 80124aa:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2234      	movs	r2, #52	@ 0x34
 80124b0:	2100      	movs	r1, #0
 80124b2:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80124b4:	2300      	movs	r3, #0
}
 80124b6:	0018      	movs	r0, r3
 80124b8:	46bd      	mov	sp, r7
 80124ba:	b006      	add	sp, #24
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	46c0      	nop			@ (mov r8, r8)
 80124c0:	080126a9 	.word	0x080126a9
 80124c4:	08012665 	.word	0x08012665
 80124c8:	080126c7 	.word	0x080126c7

080124cc <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80124d4:	2317      	movs	r3, #23
 80124d6:	18fb      	adds	r3, r7, r3
 80124d8:	2200      	movs	r2, #0
 80124da:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	685a      	ldr	r2, [r3, #4]
 80124e0:	2380      	movs	r3, #128	@ 0x80
 80124e2:	009b      	lsls	r3, r3, #2
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d003      	beq.n	80124f0 <HAL_I2S_DMAStop+0x24>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d158      	bne.n	80125a2 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d010      	beq.n	801251a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124fc:	0018      	movs	r0, r3
 80124fe:	f7fc fcad 	bl	800ee5c <HAL_DMA_Abort>
 8012502:	1e03      	subs	r3, r0, #0
 8012504:	d009      	beq.n	801251a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801250a:	2208      	movs	r2, #8
 801250c:	431a      	orrs	r2, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012512:	2317      	movs	r3, #23
 8012514:	18fb      	adds	r3, r7, r3
 8012516:	2201      	movs	r2, #1
 8012518:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	2364      	movs	r3, #100	@ 0x64
 801251e:	2201      	movs	r2, #1
 8012520:	2102      	movs	r1, #2
 8012522:	f000 f8f7 	bl	8012714 <I2S_WaitFlagStateUntilTimeout>
 8012526:	1e03      	subs	r3, r0, #0
 8012528:	d00d      	beq.n	8012546 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801252e:	2201      	movs	r2, #1
 8012530:	431a      	orrs	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2235      	movs	r2, #53	@ 0x35
 801253a:	2101      	movs	r1, #1
 801253c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801253e:	2317      	movs	r3, #23
 8012540:	18fb      	adds	r3, r7, r3
 8012542:	2201      	movs	r2, #1
 8012544:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	2364      	movs	r3, #100	@ 0x64
 801254a:	2200      	movs	r2, #0
 801254c:	2180      	movs	r1, #128	@ 0x80
 801254e:	f000 f8e1 	bl	8012714 <I2S_WaitFlagStateUntilTimeout>
 8012552:	1e03      	subs	r3, r0, #0
 8012554:	d00d      	beq.n	8012572 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801255a:	2201      	movs	r2, #1
 801255c:	431a      	orrs	r2, r3
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	2235      	movs	r2, #53	@ 0x35
 8012566:	2101      	movs	r1, #1
 8012568:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801256a:	2317      	movs	r3, #23
 801256c:	18fb      	adds	r3, r7, r3
 801256e:	2201      	movs	r2, #1
 8012570:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	69da      	ldr	r2, [r3, #28]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4938      	ldr	r1, [pc, #224]	@ (8012660 <HAL_I2S_DMAStop+0x194>)
 801257e:	400a      	ands	r2, r1
 8012580:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012582:	2300      	movs	r3, #0
 8012584:	613b      	str	r3, [r7, #16]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	613b      	str	r3, [r7, #16]
 801258e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2102      	movs	r1, #2
 801259c:	438a      	bics	r2, r1
 801259e:	605a      	str	r2, [r3, #4]
 80125a0:	e053      	b.n	801264a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	685a      	ldr	r2, [r3, #4]
 80125a6:	23c0      	movs	r3, #192	@ 0xc0
 80125a8:	009b      	lsls	r3, r3, #2
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d005      	beq.n	80125ba <HAL_I2S_DMAStop+0xee>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	2380      	movs	r3, #128	@ 0x80
 80125b4:	005b      	lsls	r3, r3, #1
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d147      	bne.n	801264a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d010      	beq.n	80125e4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125c6:	0018      	movs	r0, r3
 80125c8:	f7fc fc48 	bl	800ee5c <HAL_DMA_Abort>
 80125cc:	1e03      	subs	r3, r0, #0
 80125ce:	d009      	beq.n	80125e4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125d4:	2208      	movs	r2, #8
 80125d6:	431a      	orrs	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80125dc:	2317      	movs	r3, #23
 80125de:	18fb      	adds	r3, r7, r3
 80125e0:	2201      	movs	r2, #1
 80125e2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	69da      	ldr	r2, [r3, #28]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	491c      	ldr	r1, [pc, #112]	@ (8012660 <HAL_I2S_DMAStop+0x194>)
 80125f0:	400a      	ands	r2, r1
 80125f2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80125f4:	2300      	movs	r3, #0
 80125f6:	60fb      	str	r3, [r7, #12]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	68db      	ldr	r3, [r3, #12]
 80125fe:	60fb      	str	r3, [r7, #12]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	689b      	ldr	r3, [r3, #8]
 8012606:	60fb      	str	r3, [r7, #12]
 8012608:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	685a      	ldr	r2, [r3, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2101      	movs	r1, #1
 8012616:	438a      	bics	r2, r1
 8012618:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685a      	ldr	r2, [r3, #4]
 801261e:	2380      	movs	r3, #128	@ 0x80
 8012620:	005b      	lsls	r3, r3, #1
 8012622:	429a      	cmp	r2, r3
 8012624:	d10e      	bne.n	8012644 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801262a:	2240      	movs	r2, #64	@ 0x40
 801262c:	431a      	orrs	r2, r3
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2235      	movs	r2, #53	@ 0x35
 8012636:	2101      	movs	r1, #1
 8012638:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801263a:	2317      	movs	r3, #23
 801263c:	18fb      	adds	r3, r7, r3
 801263e:	2201      	movs	r2, #1
 8012640:	701a      	strb	r2, [r3, #0]
 8012642:	e002      	b.n	801264a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2235      	movs	r2, #53	@ 0x35
 801264e:	2101      	movs	r1, #1
 8012650:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8012652:	2317      	movs	r3, #23
 8012654:	18fb      	adds	r3, r7, r3
 8012656:	781b      	ldrb	r3, [r3, #0]
}
 8012658:	0018      	movs	r0, r3
 801265a:	46bd      	mov	sp, r7
 801265c:	b006      	add	sp, #24
 801265e:	bd80      	pop	{r7, pc}
 8012660:	fffffbff 	.word	0xfffffbff

08012664 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b084      	sub	sp, #16
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012670:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	69db      	ldr	r3, [r3, #28]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d10e      	bne.n	8012698 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	685a      	ldr	r2, [r3, #4]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	2101      	movs	r1, #1
 8012686:	438a      	bics	r2, r1
 8012688:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2200      	movs	r2, #0
 801268e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2235      	movs	r2, #53	@ 0x35
 8012694:	2101      	movs	r1, #1
 8012696:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	0018      	movs	r0, r3
 801269c:	f7f9 fbfe 	bl	800be9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80126a0:	46c0      	nop			@ (mov r8, r8)
 80126a2:	46bd      	mov	sp, r7
 80126a4:	b004      	add	sp, #16
 80126a6:	bd80      	pop	{r7, pc}

080126a8 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	0018      	movs	r0, r3
 80126ba:	f7f9 fbdd 	bl	800be78 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80126be:	46c0      	nop			@ (mov r8, r8)
 80126c0:	46bd      	mov	sp, r7
 80126c2:	b004      	add	sp, #16
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126d2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	685a      	ldr	r2, [r3, #4]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2103      	movs	r1, #3
 80126e0:	438a      	bics	r2, r1
 80126e2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2200      	movs	r2, #0
 80126e8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2200      	movs	r2, #0
 80126ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	2235      	movs	r2, #53	@ 0x35
 80126f4:	2101      	movs	r1, #1
 80126f6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80126fc:	2208      	movs	r2, #8
 80126fe:	431a      	orrs	r2, r3
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	0018      	movs	r0, r3
 8012708:	f7f9 fc16 	bl	800bf38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801270c:	46c0      	nop			@ (mov r8, r8)
 801270e:	46bd      	mov	sp, r7
 8012710:	b004      	add	sp, #16
 8012712:	bd80      	pop	{r7, pc}

08012714 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b086      	sub	sp, #24
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	603b      	str	r3, [r7, #0]
 8012720:	1dfb      	adds	r3, r7, #7
 8012722:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8012724:	f7fb fdf8 	bl	800e318 <HAL_GetTick>
 8012728:	0003      	movs	r3, r0
 801272a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801272c:	e017      	b.n	801275e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	3301      	adds	r3, #1
 8012732:	d014      	beq.n	801275e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8012734:	f7fb fdf0 	bl	800e318 <HAL_GetTick>
 8012738:	0002      	movs	r2, r0
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	683a      	ldr	r2, [r7, #0]
 8012740:	429a      	cmp	r2, r3
 8012742:	d902      	bls.n	801274a <I2S_WaitFlagStateUntilTimeout+0x36>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d109      	bne.n	801275e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2235      	movs	r2, #53	@ 0x35
 801274e:	2101      	movs	r1, #1
 8012750:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2234      	movs	r2, #52	@ 0x34
 8012756:	2100      	movs	r1, #0
 8012758:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801275a:	2303      	movs	r3, #3
 801275c:	e00f      	b.n	801277e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	689b      	ldr	r3, [r3, #8]
 8012764:	68ba      	ldr	r2, [r7, #8]
 8012766:	4013      	ands	r3, r2
 8012768:	68ba      	ldr	r2, [r7, #8]
 801276a:	1ad3      	subs	r3, r2, r3
 801276c:	425a      	negs	r2, r3
 801276e:	4153      	adcs	r3, r2
 8012770:	b2db      	uxtb	r3, r3
 8012772:	001a      	movs	r2, r3
 8012774:	1dfb      	adds	r3, r7, #7
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	429a      	cmp	r2, r3
 801277a:	d1d8      	bne.n	801272e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801277c:	2300      	movs	r3, #0
}
 801277e:	0018      	movs	r0, r3
 8012780:	46bd      	mov	sp, r7
 8012782:	b006      	add	sp, #24
 8012784:	bd80      	pop	{r7, pc}
	...

08012788 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801278a:	b08b      	sub	sp, #44	@ 0x2c
 801278c:	af06      	add	r7, sp, #24
 801278e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d101      	bne.n	801279a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8012796:	2301      	movs	r3, #1
 8012798:	e0f0      	b.n	801297c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4a79      	ldr	r2, [pc, #484]	@ (8012984 <HAL_PCD_Init+0x1fc>)
 801279e:	5c9b      	ldrb	r3, [r3, r2]
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d108      	bne.n	80127b8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	23aa      	movs	r3, #170	@ 0xaa
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	2100      	movs	r1, #0
 80127ae:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	0018      	movs	r0, r3
 80127b4:	f009 ff4a 	bl	801c64c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4a72      	ldr	r2, [pc, #456]	@ (8012984 <HAL_PCD_Init+0x1fc>)
 80127bc:	2103      	movs	r1, #3
 80127be:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	0018      	movs	r0, r3
 80127c6:	f005 fefd 	bl	80185c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80127ca:	230f      	movs	r3, #15
 80127cc:	18fb      	adds	r3, r7, r3
 80127ce:	2200      	movs	r2, #0
 80127d0:	701a      	strb	r2, [r3, #0]
 80127d2:	e049      	b.n	8012868 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80127d4:	200f      	movs	r0, #15
 80127d6:	183b      	adds	r3, r7, r0
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	6879      	ldr	r1, [r7, #4]
 80127dc:	1c5a      	adds	r2, r3, #1
 80127de:	0013      	movs	r3, r2
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	189b      	adds	r3, r3, r2
 80127e4:	00db      	lsls	r3, r3, #3
 80127e6:	18cb      	adds	r3, r1, r3
 80127e8:	3301      	adds	r3, #1
 80127ea:	2201      	movs	r2, #1
 80127ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80127ee:	183b      	adds	r3, r7, r0
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	6879      	ldr	r1, [r7, #4]
 80127f4:	1c5a      	adds	r2, r3, #1
 80127f6:	0013      	movs	r3, r2
 80127f8:	009b      	lsls	r3, r3, #2
 80127fa:	189b      	adds	r3, r3, r2
 80127fc:	00db      	lsls	r3, r3, #3
 80127fe:	183a      	adds	r2, r7, r0
 8012800:	7812      	ldrb	r2, [r2, #0]
 8012802:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8012804:	183b      	adds	r3, r7, r0
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	6879      	ldr	r1, [r7, #4]
 801280a:	1c5a      	adds	r2, r3, #1
 801280c:	0013      	movs	r3, r2
 801280e:	009b      	lsls	r3, r3, #2
 8012810:	189b      	adds	r3, r3, r2
 8012812:	00db      	lsls	r3, r3, #3
 8012814:	18cb      	adds	r3, r1, r3
 8012816:	3303      	adds	r3, #3
 8012818:	2200      	movs	r2, #0
 801281a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801281c:	183b      	adds	r3, r7, r0
 801281e:	781a      	ldrb	r2, [r3, #0]
 8012820:	6879      	ldr	r1, [r7, #4]
 8012822:	0013      	movs	r3, r2
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	189b      	adds	r3, r3, r2
 8012828:	00db      	lsls	r3, r3, #3
 801282a:	18cb      	adds	r3, r1, r3
 801282c:	3338      	adds	r3, #56	@ 0x38
 801282e:	2200      	movs	r2, #0
 8012830:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8012832:	183b      	adds	r3, r7, r0
 8012834:	781a      	ldrb	r2, [r3, #0]
 8012836:	6879      	ldr	r1, [r7, #4]
 8012838:	0013      	movs	r3, r2
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	189b      	adds	r3, r3, r2
 801283e:	00db      	lsls	r3, r3, #3
 8012840:	18cb      	adds	r3, r1, r3
 8012842:	333c      	adds	r3, #60	@ 0x3c
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012848:	183b      	adds	r3, r7, r0
 801284a:	781a      	ldrb	r2, [r3, #0]
 801284c:	6879      	ldr	r1, [r7, #4]
 801284e:	0013      	movs	r3, r2
 8012850:	009b      	lsls	r3, r3, #2
 8012852:	189b      	adds	r3, r3, r2
 8012854:	00db      	lsls	r3, r3, #3
 8012856:	18cb      	adds	r3, r1, r3
 8012858:	3340      	adds	r3, #64	@ 0x40
 801285a:	2200      	movs	r2, #0
 801285c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801285e:	183b      	adds	r3, r7, r0
 8012860:	781a      	ldrb	r2, [r3, #0]
 8012862:	183b      	adds	r3, r7, r0
 8012864:	3201      	adds	r2, #1
 8012866:	701a      	strb	r2, [r3, #0]
 8012868:	210f      	movs	r1, #15
 801286a:	187b      	adds	r3, r7, r1
 801286c:	781a      	ldrb	r2, [r3, #0]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	429a      	cmp	r2, r3
 8012874:	d3ae      	bcc.n	80127d4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012876:	187b      	adds	r3, r7, r1
 8012878:	2200      	movs	r2, #0
 801287a:	701a      	strb	r2, [r3, #0]
 801287c:	e056      	b.n	801292c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801287e:	240f      	movs	r4, #15
 8012880:	193b      	adds	r3, r7, r4
 8012882:	781a      	ldrb	r2, [r3, #0]
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	236a      	movs	r3, #106	@ 0x6a
 8012888:	33ff      	adds	r3, #255	@ 0xff
 801288a:	0019      	movs	r1, r3
 801288c:	0013      	movs	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	189b      	adds	r3, r3, r2
 8012892:	00db      	lsls	r3, r3, #3
 8012894:	18c3      	adds	r3, r0, r3
 8012896:	185b      	adds	r3, r3, r1
 8012898:	2200      	movs	r2, #0
 801289a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801289c:	193b      	adds	r3, r7, r4
 801289e:	781a      	ldrb	r2, [r3, #0]
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	23b4      	movs	r3, #180	@ 0xb4
 80128a4:	0059      	lsls	r1, r3, #1
 80128a6:	0013      	movs	r3, r2
 80128a8:	009b      	lsls	r3, r3, #2
 80128aa:	189b      	adds	r3, r3, r2
 80128ac:	00db      	lsls	r3, r3, #3
 80128ae:	18c3      	adds	r3, r0, r3
 80128b0:	185b      	adds	r3, r3, r1
 80128b2:	193a      	adds	r2, r7, r4
 80128b4:	7812      	ldrb	r2, [r2, #0]
 80128b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80128b8:	193b      	adds	r3, r7, r4
 80128ba:	781a      	ldrb	r2, [r3, #0]
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	236c      	movs	r3, #108	@ 0x6c
 80128c0:	33ff      	adds	r3, #255	@ 0xff
 80128c2:	0019      	movs	r1, r3
 80128c4:	0013      	movs	r3, r2
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	189b      	adds	r3, r3, r2
 80128ca:	00db      	lsls	r3, r3, #3
 80128cc:	18c3      	adds	r3, r0, r3
 80128ce:	185b      	adds	r3, r3, r1
 80128d0:	2200      	movs	r2, #0
 80128d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80128d4:	193b      	adds	r3, r7, r4
 80128d6:	781a      	ldrb	r2, [r3, #0]
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	23bc      	movs	r3, #188	@ 0xbc
 80128dc:	0059      	lsls	r1, r3, #1
 80128de:	0013      	movs	r3, r2
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	189b      	adds	r3, r3, r2
 80128e4:	00db      	lsls	r3, r3, #3
 80128e6:	18c3      	adds	r3, r0, r3
 80128e8:	185b      	adds	r3, r3, r1
 80128ea:	2200      	movs	r2, #0
 80128ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80128ee:	193b      	adds	r3, r7, r4
 80128f0:	781a      	ldrb	r2, [r3, #0]
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	23be      	movs	r3, #190	@ 0xbe
 80128f6:	0059      	lsls	r1, r3, #1
 80128f8:	0013      	movs	r3, r2
 80128fa:	009b      	lsls	r3, r3, #2
 80128fc:	189b      	adds	r3, r3, r2
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	18c3      	adds	r3, r0, r3
 8012902:	185b      	adds	r3, r3, r1
 8012904:	2200      	movs	r2, #0
 8012906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8012908:	193b      	adds	r3, r7, r4
 801290a:	781a      	ldrb	r2, [r3, #0]
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	23c0      	movs	r3, #192	@ 0xc0
 8012910:	0059      	lsls	r1, r3, #1
 8012912:	0013      	movs	r3, r2
 8012914:	009b      	lsls	r3, r3, #2
 8012916:	189b      	adds	r3, r3, r2
 8012918:	00db      	lsls	r3, r3, #3
 801291a:	18c3      	adds	r3, r0, r3
 801291c:	185b      	adds	r3, r3, r1
 801291e:	2200      	movs	r2, #0
 8012920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012922:	193b      	adds	r3, r7, r4
 8012924:	781a      	ldrb	r2, [r3, #0]
 8012926:	193b      	adds	r3, r7, r4
 8012928:	3201      	adds	r2, #1
 801292a:	701a      	strb	r2, [r3, #0]
 801292c:	230f      	movs	r3, #15
 801292e:	18fb      	adds	r3, r7, r3
 8012930:	781a      	ldrb	r2, [r3, #0]
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	429a      	cmp	r2, r3
 8012938:	d3a1      	bcc.n	801287e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6818      	ldr	r0, [r3, #0]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	466a      	mov	r2, sp
 8012942:	0011      	movs	r1, r2
 8012944:	001a      	movs	r2, r3
 8012946:	3210      	adds	r2, #16
 8012948:	ca70      	ldmia	r2!, {r4, r5, r6}
 801294a:	c170      	stmia	r1!, {r4, r5, r6}
 801294c:	ca30      	ldmia	r2!, {r4, r5}
 801294e:	c130      	stmia	r1!, {r4, r5}
 8012950:	6859      	ldr	r1, [r3, #4]
 8012952:	689a      	ldr	r2, [r3, #8]
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	f005 fe4f 	bl	80185f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2224      	movs	r2, #36	@ 0x24
 801295e:	2100      	movs	r1, #0
 8012960:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4a07      	ldr	r2, [pc, #28]	@ (8012984 <HAL_PCD_Init+0x1fc>)
 8012966:	2101      	movs	r1, #1
 8012968:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	69db      	ldr	r3, [r3, #28]
 801296e:	2b01      	cmp	r3, #1
 8012970:	d103      	bne.n	801297a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	0018      	movs	r0, r3
 8012976:	f001 fd23 	bl	80143c0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801297a:	2300      	movs	r3, #0
}
 801297c:	0018      	movs	r0, r3
 801297e:	46bd      	mov	sp, r7
 8012980:	b005      	add	sp, #20
 8012982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012984:	000002a9 	.word	0x000002a9

08012988 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	23aa      	movs	r3, #170	@ 0xaa
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	5cd3      	ldrb	r3, [r2, r3]
 8012998:	2b01      	cmp	r3, #1
 801299a:	d101      	bne.n	80129a0 <HAL_PCD_Start+0x18>
 801299c:	2302      	movs	r3, #2
 801299e:	e014      	b.n	80129ca <HAL_PCD_Start+0x42>
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	23aa      	movs	r3, #170	@ 0xaa
 80129a4:	009b      	lsls	r3, r3, #2
 80129a6:	2101      	movs	r1, #1
 80129a8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	0018      	movs	r0, r3
 80129b0:	f005 fdf2 	bl	8018598 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	0018      	movs	r0, r3
 80129ba:	f007 fdf5 	bl	801a5a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80129be:	687a      	ldr	r2, [r7, #4]
 80129c0:	23aa      	movs	r3, #170	@ 0xaa
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	2100      	movs	r1, #0
 80129c6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80129c8:	2300      	movs	r3, #0
}
 80129ca:	0018      	movs	r0, r3
 80129cc:	46bd      	mov	sp, r7
 80129ce:	b002      	add	sp, #8
 80129d0:	bd80      	pop	{r7, pc}
	...

080129d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	0018      	movs	r0, r3
 80129e2:	f007 fdf7 	bl	801a5d4 <USB_ReadInterrupts>
 80129e6:	0003      	movs	r3, r0
 80129e8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	2380      	movs	r3, #128	@ 0x80
 80129ee:	021b      	lsls	r3, r3, #8
 80129f0:	4013      	ands	r3, r2
 80129f2:	d004      	beq.n	80129fe <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	0018      	movs	r0, r3
 80129f8:	f000 fb62 	bl	80130c0 <PCD_EP_ISR_Handler>

    return;
 80129fc:	e11d      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	2380      	movs	r3, #128	@ 0x80
 8012a02:	00db      	lsls	r3, r3, #3
 8012a04:	4013      	ands	r3, r2
 8012a06:	d015      	beq.n	8012a34 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2244      	movs	r2, #68	@ 0x44
 8012a0e:	5a9b      	ldrh	r3, [r3, r2]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	498a      	ldr	r1, [pc, #552]	@ (8012c40 <HAL_PCD_IRQHandler+0x26c>)
 8012a18:	400a      	ands	r2, r1
 8012a1a:	b291      	uxth	r1, r2
 8012a1c:	2244      	movs	r2, #68	@ 0x44
 8012a1e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	0018      	movs	r0, r3
 8012a24:	f009 fe95 	bl	801c752 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2100      	movs	r1, #0
 8012a2c:	0018      	movs	r0, r3
 8012a2e:	f000 f915 	bl	8012c5c <HAL_PCD_SetAddress>

    return;
 8012a32:	e102      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8012a34:	68fa      	ldr	r2, [r7, #12]
 8012a36:	2380      	movs	r3, #128	@ 0x80
 8012a38:	01db      	lsls	r3, r3, #7
 8012a3a:	4013      	ands	r3, r2
 8012a3c:	d00c      	beq.n	8012a58 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2244      	movs	r2, #68	@ 0x44
 8012a44:	5a9b      	ldrh	r3, [r3, r2]
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	497d      	ldr	r1, [pc, #500]	@ (8012c44 <HAL_PCD_IRQHandler+0x270>)
 8012a4e:	400a      	ands	r2, r1
 8012a50:	b291      	uxth	r1, r2
 8012a52:	2244      	movs	r2, #68	@ 0x44
 8012a54:	5299      	strh	r1, [r3, r2]

    return;
 8012a56:	e0f0      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8012a58:	68fa      	ldr	r2, [r7, #12]
 8012a5a:	2380      	movs	r3, #128	@ 0x80
 8012a5c:	019b      	lsls	r3, r3, #6
 8012a5e:	4013      	ands	r3, r2
 8012a60:	d00c      	beq.n	8012a7c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	2244      	movs	r2, #68	@ 0x44
 8012a68:	5a9b      	ldrh	r3, [r3, r2]
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4975      	ldr	r1, [pc, #468]	@ (8012c48 <HAL_PCD_IRQHandler+0x274>)
 8012a72:	400a      	ands	r2, r1
 8012a74:	b291      	uxth	r1, r2
 8012a76:	2244      	movs	r2, #68	@ 0x44
 8012a78:	5299      	strh	r1, [r3, r2]

    return;
 8012a7a:	e0de      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8012a7c:	68fa      	ldr	r2, [r7, #12]
 8012a7e:	2380      	movs	r3, #128	@ 0x80
 8012a80:	015b      	lsls	r3, r3, #5
 8012a82:	4013      	ands	r3, r2
 8012a84:	d038      	beq.n	8012af8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	2240      	movs	r2, #64	@ 0x40
 8012a8c:	5a9b      	ldrh	r3, [r3, r2]
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2104      	movs	r1, #4
 8012a96:	438a      	bics	r2, r1
 8012a98:	b291      	uxth	r1, r2
 8012a9a:	2240      	movs	r2, #64	@ 0x40
 8012a9c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2240      	movs	r2, #64	@ 0x40
 8012aa4:	5a9b      	ldrh	r3, [r3, r2]
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	2108      	movs	r1, #8
 8012aae:	438a      	bics	r2, r1
 8012ab0:	b291      	uxth	r1, r2
 8012ab2:	2240      	movs	r2, #64	@ 0x40
 8012ab4:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	23b8      	movs	r3, #184	@ 0xb8
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	5cd3      	ldrb	r3, [r2, r3]
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d109      	bne.n	8012ad6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8012ac2:	687a      	ldr	r2, [r7, #4]
 8012ac4:	23b8      	movs	r3, #184	@ 0xb8
 8012ac6:	009b      	lsls	r3, r3, #2
 8012ac8:	2100      	movs	r1, #0
 8012aca:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2100      	movs	r1, #0
 8012ad0:	0018      	movs	r0, r3
 8012ad2:	f001 fc9f 	bl	8014414 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	0018      	movs	r0, r3
 8012ada:	f009 fe7b 	bl	801c7d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2244      	movs	r2, #68	@ 0x44
 8012ae4:	5a9b      	ldrh	r3, [r3, r2]
 8012ae6:	b29a      	uxth	r2, r3
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4957      	ldr	r1, [pc, #348]	@ (8012c4c <HAL_PCD_IRQHandler+0x278>)
 8012aee:	400a      	ands	r2, r1
 8012af0:	b291      	uxth	r1, r2
 8012af2:	2244      	movs	r2, #68	@ 0x44
 8012af4:	5299      	strh	r1, [r3, r2]

    return;
 8012af6:	e0a0      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	2380      	movs	r3, #128	@ 0x80
 8012afc:	011b      	lsls	r3, r3, #4
 8012afe:	4013      	ands	r3, r2
 8012b00:	d028      	beq.n	8012b54 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2240      	movs	r2, #64	@ 0x40
 8012b08:	5a9b      	ldrh	r3, [r3, r2]
 8012b0a:	b29a      	uxth	r2, r3
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2108      	movs	r1, #8
 8012b12:	430a      	orrs	r2, r1
 8012b14:	b291      	uxth	r1, r2
 8012b16:	2240      	movs	r2, #64	@ 0x40
 8012b18:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2244      	movs	r2, #68	@ 0x44
 8012b20:	5a9b      	ldrh	r3, [r3, r2]
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4949      	ldr	r1, [pc, #292]	@ (8012c50 <HAL_PCD_IRQHandler+0x27c>)
 8012b2a:	400a      	ands	r2, r1
 8012b2c:	b291      	uxth	r1, r2
 8012b2e:	2244      	movs	r2, #68	@ 0x44
 8012b30:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2240      	movs	r2, #64	@ 0x40
 8012b38:	5a9b      	ldrh	r3, [r3, r2]
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2104      	movs	r1, #4
 8012b42:	430a      	orrs	r2, r1
 8012b44:	b291      	uxth	r1, r2
 8012b46:	2240      	movs	r2, #64	@ 0x40
 8012b48:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	0018      	movs	r0, r3
 8012b4e:	f009 fe25 	bl	801c79c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012b52:	e072      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2280      	movs	r2, #128	@ 0x80
 8012b58:	4013      	ands	r3, r2
 8012b5a:	d046      	beq.n	8012bea <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2244      	movs	r2, #68	@ 0x44
 8012b62:	5a9b      	ldrh	r3, [r3, r2]
 8012b64:	b29a      	uxth	r2, r3
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2180      	movs	r1, #128	@ 0x80
 8012b6c:	438a      	bics	r2, r1
 8012b6e:	b291      	uxth	r1, r2
 8012b70:	2244      	movs	r2, #68	@ 0x44
 8012b72:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	23b8      	movs	r3, #184	@ 0xb8
 8012b78:	009b      	lsls	r3, r3, #2
 8012b7a:	5cd3      	ldrb	r3, [r2, r3]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d12f      	bne.n	8012be0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	2240      	movs	r2, #64	@ 0x40
 8012b86:	5a9b      	ldrh	r3, [r3, r2]
 8012b88:	b29a      	uxth	r2, r3
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2104      	movs	r1, #4
 8012b90:	430a      	orrs	r2, r1
 8012b92:	b291      	uxth	r1, r2
 8012b94:	2240      	movs	r2, #64	@ 0x40
 8012b96:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2240      	movs	r2, #64	@ 0x40
 8012b9e:	5a9b      	ldrh	r3, [r3, r2]
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2108      	movs	r1, #8
 8012ba8:	430a      	orrs	r2, r1
 8012baa:	b291      	uxth	r1, r2
 8012bac:	2240      	movs	r2, #64	@ 0x40
 8012bae:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012bb0:	687a      	ldr	r2, [r7, #4]
 8012bb2:	23b8      	movs	r3, #184	@ 0xb8
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	2101      	movs	r1, #1
 8012bb8:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	2254      	movs	r2, #84	@ 0x54
 8012bc0:	5a9b      	ldrh	r3, [r3, r2]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	089b      	lsrs	r3, r3, #2
 8012bc6:	223c      	movs	r2, #60	@ 0x3c
 8012bc8:	4013      	ands	r3, r2
 8012bca:	0019      	movs	r1, r3
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	23b9      	movs	r3, #185	@ 0xb9
 8012bd0:	009b      	lsls	r3, r3, #2
 8012bd2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2101      	movs	r1, #1
 8012bd8:	0018      	movs	r0, r3
 8012bda:	f001 fc1b 	bl	8014414 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8012bde:	e02c      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	0018      	movs	r0, r3
 8012be4:	f009 fdda 	bl	801c79c <HAL_PCD_SuspendCallback>
    return;
 8012be8:	e027      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8012bea:	68fa      	ldr	r2, [r7, #12]
 8012bec:	2380      	movs	r3, #128	@ 0x80
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	4013      	ands	r3, r2
 8012bf2:	d010      	beq.n	8012c16 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2244      	movs	r2, #68	@ 0x44
 8012bfa:	5a9b      	ldrh	r3, [r3, r2]
 8012bfc:	b29a      	uxth	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	4914      	ldr	r1, [pc, #80]	@ (8012c54 <HAL_PCD_IRQHandler+0x280>)
 8012c04:	400a      	ands	r2, r1
 8012c06:	b291      	uxth	r1, r2
 8012c08:	2244      	movs	r2, #68	@ 0x44
 8012c0a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	0018      	movs	r0, r3
 8012c10:	f009 fd90 	bl	801c734 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012c14:	e011      	b.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	2380      	movs	r3, #128	@ 0x80
 8012c1a:	005b      	lsls	r3, r3, #1
 8012c1c:	4013      	ands	r3, r2
 8012c1e:	d00c      	beq.n	8012c3a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2244      	movs	r2, #68	@ 0x44
 8012c26:	5a9b      	ldrh	r3, [r3, r2]
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	490a      	ldr	r1, [pc, #40]	@ (8012c58 <HAL_PCD_IRQHandler+0x284>)
 8012c30:	400a      	ands	r2, r1
 8012c32:	b291      	uxth	r1, r2
 8012c34:	2244      	movs	r2, #68	@ 0x44
 8012c36:	5299      	strh	r1, [r3, r2]

    return;
 8012c38:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	b004      	add	sp, #16
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	fffffbff 	.word	0xfffffbff
 8012c44:	ffffbfff 	.word	0xffffbfff
 8012c48:	ffffdfff 	.word	0xffffdfff
 8012c4c:	ffffefff 	.word	0xffffefff
 8012c50:	fffff7ff 	.word	0xfffff7ff
 8012c54:	fffffdff 	.word	0xfffffdff
 8012c58:	fffffeff 	.word	0xfffffeff

08012c5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	000a      	movs	r2, r1
 8012c66:	1cfb      	adds	r3, r7, #3
 8012c68:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	23aa      	movs	r3, #170	@ 0xaa
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	5cd3      	ldrb	r3, [r2, r3]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	d101      	bne.n	8012c7a <HAL_PCD_SetAddress+0x1e>
 8012c76:	2302      	movs	r3, #2
 8012c78:	e017      	b.n	8012caa <HAL_PCD_SetAddress+0x4e>
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	23aa      	movs	r3, #170	@ 0xaa
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	2101      	movs	r1, #1
 8012c82:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	1cfa      	adds	r2, r7, #3
 8012c88:	2124      	movs	r1, #36	@ 0x24
 8012c8a:	7812      	ldrb	r2, [r2, #0]
 8012c8c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	1cfb      	adds	r3, r7, #3
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	0019      	movs	r1, r3
 8012c98:	0010      	movs	r0, r2
 8012c9a:	f007 fc71 	bl	801a580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	23aa      	movs	r3, #170	@ 0xaa
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	0018      	movs	r0, r3
 8012cac:	46bd      	mov	sp, r7
 8012cae:	b002      	add	sp, #8
 8012cb0:	bd80      	pop	{r7, pc}

08012cb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012cb2:	b590      	push	{r4, r7, lr}
 8012cb4:	b085      	sub	sp, #20
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
 8012cba:	000c      	movs	r4, r1
 8012cbc:	0010      	movs	r0, r2
 8012cbe:	0019      	movs	r1, r3
 8012cc0:	1cfb      	adds	r3, r7, #3
 8012cc2:	1c22      	adds	r2, r4, #0
 8012cc4:	701a      	strb	r2, [r3, #0]
 8012cc6:	003b      	movs	r3, r7
 8012cc8:	1c02      	adds	r2, r0, #0
 8012cca:	801a      	strh	r2, [r3, #0]
 8012ccc:	1cbb      	adds	r3, r7, #2
 8012cce:	1c0a      	adds	r2, r1, #0
 8012cd0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012cd2:	230b      	movs	r3, #11
 8012cd4:	18fb      	adds	r3, r7, r3
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012cda:	1cfb      	adds	r3, r7, #3
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	b25b      	sxtb	r3, r3
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	da0f      	bge.n	8012d04 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012ce4:	1cfb      	adds	r3, r7, #3
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	2207      	movs	r2, #7
 8012cea:	4013      	ands	r3, r2
 8012cec:	1c5a      	adds	r2, r3, #1
 8012cee:	0013      	movs	r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	189b      	adds	r3, r3, r2
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	18d3      	adds	r3, r2, r3
 8012cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	705a      	strb	r2, [r3, #1]
 8012d02:	e00f      	b.n	8012d24 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012d04:	1cfb      	adds	r3, r7, #3
 8012d06:	781b      	ldrb	r3, [r3, #0]
 8012d08:	2207      	movs	r2, #7
 8012d0a:	401a      	ands	r2, r3
 8012d0c:	0013      	movs	r3, r2
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	189b      	adds	r3, r3, r2
 8012d12:	00db      	lsls	r3, r3, #3
 8012d14:	3369      	adds	r3, #105	@ 0x69
 8012d16:	33ff      	adds	r3, #255	@ 0xff
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	18d3      	adds	r3, r2, r3
 8012d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	2200      	movs	r2, #0
 8012d22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012d24:	1cfb      	adds	r3, r7, #3
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	2207      	movs	r2, #7
 8012d2a:	4013      	ands	r3, r2
 8012d2c:	b2da      	uxtb	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012d32:	003b      	movs	r3, r7
 8012d34:	881a      	ldrh	r2, [r3, #0]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	1cba      	adds	r2, r7, #2
 8012d3e:	7812      	ldrb	r2, [r2, #0]
 8012d40:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012d42:	1cbb      	adds	r3, r7, #2
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	2b02      	cmp	r3, #2
 8012d48:	d102      	bne.n	8012d50 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	23aa      	movs	r3, #170	@ 0xaa
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	5cd3      	ldrb	r3, [r2, r3]
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	d101      	bne.n	8012d60 <HAL_PCD_EP_Open+0xae>
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	e013      	b.n	8012d88 <HAL_PCD_EP_Open+0xd6>
 8012d60:	687a      	ldr	r2, [r7, #4]
 8012d62:	23aa      	movs	r3, #170	@ 0xaa
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	2101      	movs	r1, #1
 8012d68:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	0011      	movs	r1, r2
 8012d72:	0018      	movs	r0, r3
 8012d74:	f005 fc68 	bl	8018648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	23aa      	movs	r3, #170	@ 0xaa
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	2100      	movs	r1, #0
 8012d80:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012d82:	230b      	movs	r3, #11
 8012d84:	18fb      	adds	r3, r7, r3
 8012d86:	781b      	ldrb	r3, [r3, #0]
}
 8012d88:	0018      	movs	r0, r3
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	b005      	add	sp, #20
 8012d8e:	bd90      	pop	{r4, r7, pc}

08012d90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b084      	sub	sp, #16
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	000a      	movs	r2, r1
 8012d9a:	1cfb      	adds	r3, r7, #3
 8012d9c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012d9e:	1cfb      	adds	r3, r7, #3
 8012da0:	781b      	ldrb	r3, [r3, #0]
 8012da2:	b25b      	sxtb	r3, r3
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	da0f      	bge.n	8012dc8 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012da8:	1cfb      	adds	r3, r7, #3
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	2207      	movs	r2, #7
 8012dae:	4013      	ands	r3, r2
 8012db0:	1c5a      	adds	r2, r3, #1
 8012db2:	0013      	movs	r3, r2
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	189b      	adds	r3, r3, r2
 8012db8:	00db      	lsls	r3, r3, #3
 8012dba:	687a      	ldr	r2, [r7, #4]
 8012dbc:	18d3      	adds	r3, r2, r3
 8012dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	705a      	strb	r2, [r3, #1]
 8012dc6:	e00f      	b.n	8012de8 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012dc8:	1cfb      	adds	r3, r7, #3
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	2207      	movs	r2, #7
 8012dce:	401a      	ands	r2, r3
 8012dd0:	0013      	movs	r3, r2
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	189b      	adds	r3, r3, r2
 8012dd6:	00db      	lsls	r3, r3, #3
 8012dd8:	3369      	adds	r3, #105	@ 0x69
 8012dda:	33ff      	adds	r3, #255	@ 0xff
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	18d3      	adds	r3, r2, r3
 8012de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2200      	movs	r2, #0
 8012de6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012de8:	1cfb      	adds	r3, r7, #3
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	2207      	movs	r2, #7
 8012dee:	4013      	ands	r3, r2
 8012df0:	b2da      	uxtb	r2, r3
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	23aa      	movs	r3, #170	@ 0xaa
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	5cd3      	ldrb	r3, [r2, r3]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d101      	bne.n	8012e06 <HAL_PCD_EP_Close+0x76>
 8012e02:	2302      	movs	r3, #2
 8012e04:	e011      	b.n	8012e2a <HAL_PCD_EP_Close+0x9a>
 8012e06:	687a      	ldr	r2, [r7, #4]
 8012e08:	23aa      	movs	r3, #170	@ 0xaa
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	2101      	movs	r1, #1
 8012e0e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	68fa      	ldr	r2, [r7, #12]
 8012e16:	0011      	movs	r1, r2
 8012e18:	0018      	movs	r0, r3
 8012e1a:	f005 ffb7 	bl	8018d8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	23aa      	movs	r3, #170	@ 0xaa
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	2100      	movs	r1, #0
 8012e26:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012e28:	2300      	movs	r3, #0
}
 8012e2a:	0018      	movs	r0, r3
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	b004      	add	sp, #16
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b086      	sub	sp, #24
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	60f8      	str	r0, [r7, #12]
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	603b      	str	r3, [r7, #0]
 8012e3e:	200b      	movs	r0, #11
 8012e40:	183b      	adds	r3, r7, r0
 8012e42:	1c0a      	adds	r2, r1, #0
 8012e44:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012e46:	0001      	movs	r1, r0
 8012e48:	187b      	adds	r3, r7, r1
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	2207      	movs	r2, #7
 8012e4e:	401a      	ands	r2, r3
 8012e50:	0013      	movs	r3, r2
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	189b      	adds	r3, r3, r2
 8012e56:	00db      	lsls	r3, r3, #3
 8012e58:	3369      	adds	r3, #105	@ 0x69
 8012e5a:	33ff      	adds	r3, #255	@ 0xff
 8012e5c:	68fa      	ldr	r2, [r7, #12]
 8012e5e:	18d3      	adds	r3, r2, r3
 8012e60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	683a      	ldr	r2, [r7, #0]
 8012e6c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	2200      	movs	r2, #0
 8012e72:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	2200      	movs	r2, #0
 8012e78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012e7a:	187b      	adds	r3, r7, r1
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	2207      	movs	r2, #7
 8012e80:	4013      	ands	r3, r2
 8012e82:	b2da      	uxtb	r2, r3
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	697a      	ldr	r2, [r7, #20]
 8012e8e:	0011      	movs	r1, r2
 8012e90:	0018      	movs	r0, r3
 8012e92:	f006 f93b 	bl	801910c <USB_EPStartXfer>

  return HAL_OK;
 8012e96:	2300      	movs	r3, #0
}
 8012e98:	0018      	movs	r0, r3
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	b006      	add	sp, #24
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	000a      	movs	r2, r1
 8012eaa:	1cfb      	adds	r3, r7, #3
 8012eac:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012eae:	1cfb      	adds	r3, r7, #3
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2207      	movs	r2, #7
 8012eb4:	401a      	ands	r2, r3
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	23c2      	movs	r3, #194	@ 0xc2
 8012eba:	0059      	lsls	r1, r3, #1
 8012ebc:	0013      	movs	r3, r2
 8012ebe:	009b      	lsls	r3, r3, #2
 8012ec0:	189b      	adds	r3, r3, r2
 8012ec2:	00db      	lsls	r3, r3, #3
 8012ec4:	18c3      	adds	r3, r0, r3
 8012ec6:	185b      	adds	r3, r3, r1
 8012ec8:	681b      	ldr	r3, [r3, #0]
}
 8012eca:	0018      	movs	r0, r3
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	b002      	add	sp, #8
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b086      	sub	sp, #24
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	60f8      	str	r0, [r7, #12]
 8012eda:	607a      	str	r2, [r7, #4]
 8012edc:	603b      	str	r3, [r7, #0]
 8012ede:	200b      	movs	r0, #11
 8012ee0:	183b      	adds	r3, r7, r0
 8012ee2:	1c0a      	adds	r2, r1, #0
 8012ee4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012ee6:	183b      	adds	r3, r7, r0
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	2207      	movs	r2, #7
 8012eec:	4013      	ands	r3, r2
 8012eee:	1c5a      	adds	r2, r3, #1
 8012ef0:	0013      	movs	r3, r2
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	189b      	adds	r3, r3, r2
 8012ef6:	00db      	lsls	r3, r3, #3
 8012ef8:	68fa      	ldr	r2, [r7, #12]
 8012efa:	18d3      	adds	r3, r2, r3
 8012efc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012efe:	697b      	ldr	r3, [r7, #20]
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	683a      	ldr	r2, [r7, #0]
 8012f08:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	2224      	movs	r2, #36	@ 0x24
 8012f0e:	2101      	movs	r1, #1
 8012f10:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	683a      	ldr	r2, [r7, #0]
 8012f16:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	2201      	movs	r2, #1
 8012f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012f24:	183b      	adds	r3, r7, r0
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	2207      	movs	r2, #7
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	b2da      	uxtb	r2, r3
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	0011      	movs	r1, r2
 8012f3a:	0018      	movs	r0, r3
 8012f3c:	f006 f8e6 	bl	801910c <USB_EPStartXfer>

  return HAL_OK;
 8012f40:	2300      	movs	r3, #0
}
 8012f42:	0018      	movs	r0, r3
 8012f44:	46bd      	mov	sp, r7
 8012f46:	b006      	add	sp, #24
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012f4a:	b580      	push	{r7, lr}
 8012f4c:	b084      	sub	sp, #16
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
 8012f52:	000a      	movs	r2, r1
 8012f54:	1cfb      	adds	r3, r7, #3
 8012f56:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012f58:	1cfb      	adds	r3, r7, #3
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	2207      	movs	r2, #7
 8012f5e:	401a      	ands	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d901      	bls.n	8012f6c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	e046      	b.n	8012ffa <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012f6c:	1cfb      	adds	r3, r7, #3
 8012f6e:	781b      	ldrb	r3, [r3, #0]
 8012f70:	b25b      	sxtb	r3, r3
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	da0f      	bge.n	8012f96 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012f76:	1cfb      	adds	r3, r7, #3
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2207      	movs	r2, #7
 8012f7c:	4013      	ands	r3, r2
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	0013      	movs	r3, r2
 8012f82:	009b      	lsls	r3, r3, #2
 8012f84:	189b      	adds	r3, r3, r2
 8012f86:	00db      	lsls	r3, r3, #3
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	18d3      	adds	r3, r2, r3
 8012f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2201      	movs	r2, #1
 8012f92:	705a      	strb	r2, [r3, #1]
 8012f94:	e00d      	b.n	8012fb2 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012f96:	1cfb      	adds	r3, r7, #3
 8012f98:	781a      	ldrb	r2, [r3, #0]
 8012f9a:	0013      	movs	r3, r2
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	189b      	adds	r3, r3, r2
 8012fa0:	00db      	lsls	r3, r3, #3
 8012fa2:	3369      	adds	r3, #105	@ 0x69
 8012fa4:	33ff      	adds	r3, #255	@ 0xff
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	18d3      	adds	r3, r2, r3
 8012faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012fb8:	1cfb      	adds	r3, r7, #3
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	2207      	movs	r2, #7
 8012fbe:	4013      	ands	r3, r2
 8012fc0:	b2da      	uxtb	r2, r3
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	23aa      	movs	r3, #170	@ 0xaa
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	5cd3      	ldrb	r3, [r2, r3]
 8012fce:	2b01      	cmp	r3, #1
 8012fd0:	d101      	bne.n	8012fd6 <HAL_PCD_EP_SetStall+0x8c>
 8012fd2:	2302      	movs	r3, #2
 8012fd4:	e011      	b.n	8012ffa <HAL_PCD_EP_SetStall+0xb0>
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	23aa      	movs	r3, #170	@ 0xaa
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	2101      	movs	r1, #1
 8012fde:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	0011      	movs	r1, r2
 8012fe8:	0018      	movs	r0, r3
 8012fea:	f007 f9c7 	bl	801a37c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	23aa      	movs	r3, #170	@ 0xaa
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012ff8:	2300      	movs	r3, #0
}
 8012ffa:	0018      	movs	r0, r3
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	b004      	add	sp, #16
 8013000:	bd80      	pop	{r7, pc}

08013002 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013002:	b580      	push	{r7, lr}
 8013004:	b084      	sub	sp, #16
 8013006:	af00      	add	r7, sp, #0
 8013008:	6078      	str	r0, [r7, #4]
 801300a:	000a      	movs	r2, r1
 801300c:	1cfb      	adds	r3, r7, #3
 801300e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013010:	1cfb      	adds	r3, r7, #3
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	220f      	movs	r2, #15
 8013016:	401a      	ands	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	429a      	cmp	r2, r3
 801301e:	d901      	bls.n	8013024 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013020:	2301      	movs	r3, #1
 8013022:	e048      	b.n	80130b6 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013024:	1cfb      	adds	r3, r7, #3
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	b25b      	sxtb	r3, r3
 801302a:	2b00      	cmp	r3, #0
 801302c:	da0f      	bge.n	801304e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801302e:	1cfb      	adds	r3, r7, #3
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	2207      	movs	r2, #7
 8013034:	4013      	ands	r3, r2
 8013036:	1c5a      	adds	r2, r3, #1
 8013038:	0013      	movs	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	189b      	adds	r3, r3, r2
 801303e:	00db      	lsls	r3, r3, #3
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	18d3      	adds	r3, r2, r3
 8013044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2201      	movs	r2, #1
 801304a:	705a      	strb	r2, [r3, #1]
 801304c:	e00f      	b.n	801306e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801304e:	1cfb      	adds	r3, r7, #3
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	2207      	movs	r2, #7
 8013054:	401a      	ands	r2, r3
 8013056:	0013      	movs	r3, r2
 8013058:	009b      	lsls	r3, r3, #2
 801305a:	189b      	adds	r3, r3, r2
 801305c:	00db      	lsls	r3, r3, #3
 801305e:	3369      	adds	r3, #105	@ 0x69
 8013060:	33ff      	adds	r3, #255	@ 0xff
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	18d3      	adds	r3, r2, r3
 8013066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2200      	movs	r2, #0
 801306c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2200      	movs	r2, #0
 8013072:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013074:	1cfb      	adds	r3, r7, #3
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	2207      	movs	r2, #7
 801307a:	4013      	ands	r3, r2
 801307c:	b2da      	uxtb	r2, r3
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	23aa      	movs	r3, #170	@ 0xaa
 8013086:	009b      	lsls	r3, r3, #2
 8013088:	5cd3      	ldrb	r3, [r2, r3]
 801308a:	2b01      	cmp	r3, #1
 801308c:	d101      	bne.n	8013092 <HAL_PCD_EP_ClrStall+0x90>
 801308e:	2302      	movs	r3, #2
 8013090:	e011      	b.n	80130b6 <HAL_PCD_EP_ClrStall+0xb4>
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	23aa      	movs	r3, #170	@ 0xaa
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	2101      	movs	r1, #1
 801309a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	68fa      	ldr	r2, [r7, #12]
 80130a2:	0011      	movs	r1, r2
 80130a4:	0018      	movs	r0, r3
 80130a6:	f007 f9b9 	bl	801a41c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	23aa      	movs	r3, #170	@ 0xaa
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	2100      	movs	r1, #0
 80130b2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80130b4:	2300      	movs	r3, #0
}
 80130b6:	0018      	movs	r0, r3
 80130b8:	46bd      	mov	sp, r7
 80130ba:	b004      	add	sp, #16
 80130bc:	bd80      	pop	{r7, pc}
	...

080130c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80130c0:	b5b0      	push	{r4, r5, r7, lr}
 80130c2:	b096      	sub	sp, #88	@ 0x58
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80130c8:	f000 fbec 	bl	80138a4 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681a      	ldr	r2, [r3, #0]
 80130d0:	204e      	movs	r0, #78	@ 0x4e
 80130d2:	183b      	adds	r3, r7, r0
 80130d4:	2144      	movs	r1, #68	@ 0x44
 80130d6:	5a52      	ldrh	r2, [r2, r1]
 80130d8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80130da:	183b      	adds	r3, r7, r0
 80130dc:	881b      	ldrh	r3, [r3, #0]
 80130de:	b2da      	uxtb	r2, r3
 80130e0:	244d      	movs	r4, #77	@ 0x4d
 80130e2:	193b      	adds	r3, r7, r4
 80130e4:	210f      	movs	r1, #15
 80130e6:	400a      	ands	r2, r1
 80130e8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80130ea:	193b      	adds	r3, r7, r4
 80130ec:	781b      	ldrb	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d000      	beq.n	80130f4 <PCD_EP_ISR_Handler+0x34>
 80130f2:	e18f      	b.n	8013414 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80130f4:	183b      	adds	r3, r7, r0
 80130f6:	881b      	ldrh	r3, [r3, #0]
 80130f8:	2210      	movs	r2, #16
 80130fa:	4013      	ands	r3, r2
 80130fc:	d155      	bne.n	80131aa <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	881b      	ldrh	r3, [r3, #0]
 8013104:	b29a      	uxth	r2, r3
 8013106:	200e      	movs	r0, #14
 8013108:	183b      	adds	r3, r7, r0
 801310a:	49bb      	ldr	r1, [pc, #748]	@ (80133f8 <PCD_EP_ISR_Handler+0x338>)
 801310c:	400a      	ands	r2, r1
 801310e:	801a      	strh	r2, [r3, #0]
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	183a      	adds	r2, r7, r0
 8013116:	8812      	ldrh	r2, [r2, #0]
 8013118:	49b8      	ldr	r1, [pc, #736]	@ (80133fc <PCD_EP_ISR_Handler+0x33c>)
 801311a:	430a      	orrs	r2, r1
 801311c:	b292      	uxth	r2, r2
 801311e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	3328      	adds	r3, #40	@ 0x28
 8013124:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	2250      	movs	r2, #80	@ 0x50
 801312c:	5a9b      	ldrh	r3, [r3, r2]
 801312e:	b29b      	uxth	r3, r3
 8013130:	001a      	movs	r2, r3
 8013132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	00db      	lsls	r3, r3, #3
 8013138:	18d2      	adds	r2, r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	18d3      	adds	r3, r2, r3
 8013140:	4aaf      	ldr	r2, [pc, #700]	@ (8013400 <PCD_EP_ISR_Handler+0x340>)
 8013142:	4694      	mov	ip, r2
 8013144:	4463      	add	r3, ip
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	059b      	lsls	r3, r3, #22
 801314a:	0d9a      	lsrs	r2, r3, #22
 801314c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801314e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013152:	695a      	ldr	r2, [r3, #20]
 8013154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013156:	69db      	ldr	r3, [r3, #28]
 8013158:	18d2      	adds	r2, r2, r3
 801315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801315c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2100      	movs	r1, #0
 8013162:	0018      	movs	r0, r3
 8013164:	f009 fac8 	bl	801c6f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2224      	movs	r2, #36	@ 0x24
 801316c:	5c9b      	ldrb	r3, [r3, r2]
 801316e:	b2db      	uxtb	r3, r3
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <PCD_EP_ISR_Handler+0xb8>
 8013174:	f000 fb96 	bl	80138a4 <PCD_EP_ISR_Handler+0x7e4>
 8013178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801317a:	699b      	ldr	r3, [r3, #24]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d001      	beq.n	8013184 <PCD_EP_ISR_Handler+0xc4>
 8013180:	f000 fb90 	bl	80138a4 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2224      	movs	r2, #36	@ 0x24
 8013188:	5c9b      	ldrb	r3, [r3, r2]
 801318a:	b2db      	uxtb	r3, r3
 801318c:	2280      	movs	r2, #128	@ 0x80
 801318e:	4252      	negs	r2, r2
 8013190:	4313      	orrs	r3, r2
 8013192:	b2da      	uxtb	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	0011      	movs	r1, r2
 801319a:	224c      	movs	r2, #76	@ 0x4c
 801319c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2224      	movs	r2, #36	@ 0x24
 80131a2:	2100      	movs	r1, #0
 80131a4:	5499      	strb	r1, [r3, r2]
 80131a6:	f000 fb7d 	bl	80138a4 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	3369      	adds	r3, #105	@ 0x69
 80131ae:	33ff      	adds	r3, #255	@ 0xff
 80131b0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	214a      	movs	r1, #74	@ 0x4a
 80131b8:	187b      	adds	r3, r7, r1
 80131ba:	8812      	ldrh	r2, [r2, #0]
 80131bc:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80131be:	187b      	adds	r3, r7, r1
 80131c0:	881a      	ldrh	r2, [r3, #0]
 80131c2:	2380      	movs	r3, #128	@ 0x80
 80131c4:	011b      	lsls	r3, r3, #4
 80131c6:	4013      	ands	r3, r2
 80131c8:	d037      	beq.n	801323a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	2250      	movs	r2, #80	@ 0x50
 80131d0:	5a9b      	ldrh	r3, [r3, r2]
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	001a      	movs	r2, r3
 80131d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	00db      	lsls	r3, r3, #3
 80131dc:	18d2      	adds	r2, r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	18d3      	adds	r3, r2, r3
 80131e4:	4a87      	ldr	r2, [pc, #540]	@ (8013404 <PCD_EP_ISR_Handler+0x344>)
 80131e6:	4694      	mov	ip, r2
 80131e8:	4463      	add	r3, ip
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	059b      	lsls	r3, r3, #22
 80131ee:	0d9a      	lsrs	r2, r3, #22
 80131f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6818      	ldr	r0, [r3, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	22ac      	movs	r2, #172	@ 0xac
 80131fc:	0092      	lsls	r2, r2, #2
 80131fe:	1899      	adds	r1, r3, r2
 8013200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013202:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013206:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013208:	b29b      	uxth	r3, r3
 801320a:	f007 fa3a 	bl	801a682 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	881b      	ldrh	r3, [r3, #0]
 8013214:	b29a      	uxth	r2, r3
 8013216:	2010      	movs	r0, #16
 8013218:	183b      	adds	r3, r7, r0
 801321a:	497b      	ldr	r1, [pc, #492]	@ (8013408 <PCD_EP_ISR_Handler+0x348>)
 801321c:	400a      	ands	r2, r1
 801321e:	801a      	strh	r2, [r3, #0]
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	183a      	adds	r2, r7, r0
 8013226:	8812      	ldrh	r2, [r2, #0]
 8013228:	2180      	movs	r1, #128	@ 0x80
 801322a:	430a      	orrs	r2, r1
 801322c:	b292      	uxth	r2, r2
 801322e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	0018      	movs	r0, r3
 8013234:	f009 fa2a 	bl	801c68c <HAL_PCD_SetupStageCallback>
 8013238:	e334      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801323a:	234a      	movs	r3, #74	@ 0x4a
 801323c:	18fb      	adds	r3, r7, r3
 801323e:	2200      	movs	r2, #0
 8013240:	5e9b      	ldrsh	r3, [r3, r2]
 8013242:	2b00      	cmp	r3, #0
 8013244:	db00      	blt.n	8013248 <PCD_EP_ISR_Handler+0x188>
 8013246:	e32d      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	881b      	ldrh	r3, [r3, #0]
 801324e:	b29a      	uxth	r2, r3
 8013250:	201e      	movs	r0, #30
 8013252:	183b      	adds	r3, r7, r0
 8013254:	496c      	ldr	r1, [pc, #432]	@ (8013408 <PCD_EP_ISR_Handler+0x348>)
 8013256:	400a      	ands	r2, r1
 8013258:	801a      	strh	r2, [r3, #0]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	183a      	adds	r2, r7, r0
 8013260:	8812      	ldrh	r2, [r2, #0]
 8013262:	2180      	movs	r1, #128	@ 0x80
 8013264:	430a      	orrs	r2, r1
 8013266:	b292      	uxth	r2, r2
 8013268:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2250      	movs	r2, #80	@ 0x50
 8013270:	5a9b      	ldrh	r3, [r3, r2]
 8013272:	b29b      	uxth	r3, r3
 8013274:	001a      	movs	r2, r3
 8013276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	00db      	lsls	r3, r3, #3
 801327c:	18d2      	adds	r2, r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	18d3      	adds	r3, r2, r3
 8013284:	4a5f      	ldr	r2, [pc, #380]	@ (8013404 <PCD_EP_ISR_Handler+0x344>)
 8013286:	4694      	mov	ip, r2
 8013288:	4463      	add	r3, ip
 801328a:	881b      	ldrh	r3, [r3, #0]
 801328c:	059b      	lsls	r3, r3, #22
 801328e:	0d9a      	lsrs	r2, r3, #22
 8013290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013292:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013296:	69db      	ldr	r3, [r3, #28]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d01a      	beq.n	80132d2 <PCD_EP_ISR_Handler+0x212>
 801329c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801329e:	695b      	ldr	r3, [r3, #20]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d016      	beq.n	80132d2 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6818      	ldr	r0, [r3, #0]
 80132a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132aa:	6959      	ldr	r1, [r3, #20]
 80132ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132ae:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80132b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	f007 f9e4 	bl	801a682 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80132ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132bc:	695a      	ldr	r2, [r3, #20]
 80132be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132c0:	69db      	ldr	r3, [r3, #28]
 80132c2:	18d2      	adds	r2, r2, r3
 80132c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132c6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2100      	movs	r1, #0
 80132cc:	0018      	movs	r0, r3
 80132ce:	f009 f9f2 	bl	801c6b6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	214a      	movs	r1, #74	@ 0x4a
 80132d8:	187b      	adds	r3, r7, r1
 80132da:	8812      	ldrh	r2, [r2, #0]
 80132dc:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80132de:	187b      	adds	r3, r7, r1
 80132e0:	881a      	ldrh	r2, [r3, #0]
 80132e2:	2380      	movs	r3, #128	@ 0x80
 80132e4:	011b      	lsls	r3, r3, #4
 80132e6:	4013      	ands	r3, r2
 80132e8:	d000      	beq.n	80132ec <PCD_EP_ISR_Handler+0x22c>
 80132ea:	e2db      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
 80132ec:	187b      	adds	r3, r7, r1
 80132ee:	881a      	ldrh	r2, [r3, #0]
 80132f0:	23c0      	movs	r3, #192	@ 0xc0
 80132f2:	019b      	lsls	r3, r3, #6
 80132f4:	401a      	ands	r2, r3
 80132f6:	23c0      	movs	r3, #192	@ 0xc0
 80132f8:	019b      	lsls	r3, r3, #6
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d100      	bne.n	8013300 <PCD_EP_ISR_Handler+0x240>
 80132fe:	e2d1      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	61bb      	str	r3, [r7, #24]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	2250      	movs	r2, #80	@ 0x50
 801330c:	5a9b      	ldrh	r3, [r3, r2]
 801330e:	b29b      	uxth	r3, r3
 8013310:	001a      	movs	r2, r3
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	189b      	adds	r3, r3, r2
 8013316:	61bb      	str	r3, [r7, #24]
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	4a3a      	ldr	r2, [pc, #232]	@ (8013404 <PCD_EP_ISR_Handler+0x344>)
 801331c:	4694      	mov	ip, r2
 801331e:	4463      	add	r3, ip
 8013320:	617b      	str	r3, [r7, #20]
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	b29b      	uxth	r3, r3
 8013328:	059b      	lsls	r3, r3, #22
 801332a:	0d9b      	lsrs	r3, r3, #22
 801332c:	b29a      	uxth	r2, r3
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	801a      	strh	r2, [r3, #0]
 8013332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013334:	691b      	ldr	r3, [r3, #16]
 8013336:	2b3e      	cmp	r3, #62	@ 0x3e
 8013338:	d91a      	bls.n	8013370 <PCD_EP_ISR_Handler+0x2b0>
 801333a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801333c:	691b      	ldr	r3, [r3, #16]
 801333e:	095b      	lsrs	r3, r3, #5
 8013340:	647b      	str	r3, [r7, #68]	@ 0x44
 8013342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013344:	691b      	ldr	r3, [r3, #16]
 8013346:	221f      	movs	r2, #31
 8013348:	4013      	ands	r3, r2
 801334a:	d102      	bne.n	8013352 <PCD_EP_ISR_Handler+0x292>
 801334c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801334e:	3b01      	subs	r3, #1
 8013350:	647b      	str	r3, [r7, #68]	@ 0x44
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	881b      	ldrh	r3, [r3, #0]
 8013356:	b29a      	uxth	r2, r3
 8013358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801335a:	b29b      	uxth	r3, r3
 801335c:	029b      	lsls	r3, r3, #10
 801335e:	b29b      	uxth	r3, r3
 8013360:	4313      	orrs	r3, r2
 8013362:	b29b      	uxth	r3, r3
 8013364:	4a25      	ldr	r2, [pc, #148]	@ (80133fc <PCD_EP_ISR_Handler+0x33c>)
 8013366:	4313      	orrs	r3, r2
 8013368:	b29a      	uxth	r2, r3
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	801a      	strh	r2, [r3, #0]
 801336e:	e023      	b.n	80133b8 <PCD_EP_ISR_Handler+0x2f8>
 8013370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013372:	691b      	ldr	r3, [r3, #16]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d108      	bne.n	801338a <PCD_EP_ISR_Handler+0x2ca>
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	881b      	ldrh	r3, [r3, #0]
 801337c:	b29b      	uxth	r3, r3
 801337e:	4a1f      	ldr	r2, [pc, #124]	@ (80133fc <PCD_EP_ISR_Handler+0x33c>)
 8013380:	4313      	orrs	r3, r2
 8013382:	b29a      	uxth	r2, r3
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	801a      	strh	r2, [r3, #0]
 8013388:	e016      	b.n	80133b8 <PCD_EP_ISR_Handler+0x2f8>
 801338a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338c:	691b      	ldr	r3, [r3, #16]
 801338e:	085b      	lsrs	r3, r3, #1
 8013390:	647b      	str	r3, [r7, #68]	@ 0x44
 8013392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013394:	691b      	ldr	r3, [r3, #16]
 8013396:	2201      	movs	r2, #1
 8013398:	4013      	ands	r3, r2
 801339a:	d002      	beq.n	80133a2 <PCD_EP_ISR_Handler+0x2e2>
 801339c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801339e:	3301      	adds	r3, #1
 80133a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	881b      	ldrh	r3, [r3, #0]
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	029b      	lsls	r3, r3, #10
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	4313      	orrs	r3, r2
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	881b      	ldrh	r3, [r3, #0]
 80133be:	b29a      	uxth	r2, r3
 80133c0:	2012      	movs	r0, #18
 80133c2:	183b      	adds	r3, r7, r0
 80133c4:	4911      	ldr	r1, [pc, #68]	@ (801340c <PCD_EP_ISR_Handler+0x34c>)
 80133c6:	400a      	ands	r2, r1
 80133c8:	801a      	strh	r2, [r3, #0]
 80133ca:	183b      	adds	r3, r7, r0
 80133cc:	183a      	adds	r2, r7, r0
 80133ce:	8812      	ldrh	r2, [r2, #0]
 80133d0:	2180      	movs	r1, #128	@ 0x80
 80133d2:	0149      	lsls	r1, r1, #5
 80133d4:	404a      	eors	r2, r1
 80133d6:	801a      	strh	r2, [r3, #0]
 80133d8:	183b      	adds	r3, r7, r0
 80133da:	183a      	adds	r2, r7, r0
 80133dc:	8812      	ldrh	r2, [r2, #0]
 80133de:	2180      	movs	r1, #128	@ 0x80
 80133e0:	0189      	lsls	r1, r1, #6
 80133e2:	404a      	eors	r2, r1
 80133e4:	801a      	strh	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	183a      	adds	r2, r7, r0
 80133ec:	8812      	ldrh	r2, [r2, #0]
 80133ee:	4908      	ldr	r1, [pc, #32]	@ (8013410 <PCD_EP_ISR_Handler+0x350>)
 80133f0:	430a      	orrs	r2, r1
 80133f2:	b292      	uxth	r2, r2
 80133f4:	801a      	strh	r2, [r3, #0]
 80133f6:	e255      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
 80133f8:	ffff8f0f 	.word	0xffff8f0f
 80133fc:	ffff8000 	.word	0xffff8000
 8013400:	00000402 	.word	0x00000402
 8013404:	00000406 	.word	0x00000406
 8013408:	00000f8f 	.word	0x00000f8f
 801340c:	ffffbf8f 	.word	0xffffbf8f
 8013410:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	001a      	movs	r2, r3
 801341a:	204d      	movs	r0, #77	@ 0x4d
 801341c:	183b      	adds	r3, r7, r0
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	009b      	lsls	r3, r3, #2
 8013422:	18d2      	adds	r2, r2, r3
 8013424:	214a      	movs	r1, #74	@ 0x4a
 8013426:	187b      	adds	r3, r7, r1
 8013428:	8812      	ldrh	r2, [r2, #0]
 801342a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801342c:	187b      	adds	r3, r7, r1
 801342e:	2200      	movs	r2, #0
 8013430:	5e9b      	ldrsh	r3, [r3, r2]
 8013432:	2b00      	cmp	r3, #0
 8013434:	db00      	blt.n	8013438 <PCD_EP_ISR_Handler+0x378>
 8013436:	e0fa      	b.n	801362e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	001a      	movs	r2, r3
 801343e:	183b      	adds	r3, r7, r0
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	18d3      	adds	r3, r2, r3
 8013446:	881b      	ldrh	r3, [r3, #0]
 8013448:	b29a      	uxth	r2, r3
 801344a:	2448      	movs	r4, #72	@ 0x48
 801344c:	193b      	adds	r3, r7, r4
 801344e:	49d1      	ldr	r1, [pc, #836]	@ (8013794 <PCD_EP_ISR_Handler+0x6d4>)
 8013450:	400a      	ands	r2, r1
 8013452:	801a      	strh	r2, [r3, #0]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	001a      	movs	r2, r3
 801345a:	183b      	adds	r3, r7, r0
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	18d3      	adds	r3, r2, r3
 8013462:	193a      	adds	r2, r7, r4
 8013464:	8812      	ldrh	r2, [r2, #0]
 8013466:	2180      	movs	r1, #128	@ 0x80
 8013468:	430a      	orrs	r2, r1
 801346a:	b292      	uxth	r2, r2
 801346c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801346e:	183b      	adds	r3, r7, r0
 8013470:	781a      	ldrb	r2, [r3, #0]
 8013472:	0013      	movs	r3, r2
 8013474:	009b      	lsls	r3, r3, #2
 8013476:	189b      	adds	r3, r3, r2
 8013478:	00db      	lsls	r3, r3, #3
 801347a:	3369      	adds	r3, #105	@ 0x69
 801347c:	33ff      	adds	r3, #255	@ 0xff
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	18d3      	adds	r3, r2, r3
 8013482:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013486:	7b1b      	ldrb	r3, [r3, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d125      	bne.n	80134d8 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2250      	movs	r2, #80	@ 0x50
 8013492:	5a9b      	ldrh	r3, [r3, r2]
 8013494:	b29b      	uxth	r3, r3
 8013496:	001a      	movs	r2, r3
 8013498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	00db      	lsls	r3, r3, #3
 801349e:	18d2      	adds	r2, r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	18d3      	adds	r3, r2, r3
 80134a6:	4abc      	ldr	r2, [pc, #752]	@ (8013798 <PCD_EP_ISR_Handler+0x6d8>)
 80134a8:	4694      	mov	ip, r2
 80134aa:	4463      	add	r3, ip
 80134ac:	881a      	ldrh	r2, [r3, #0]
 80134ae:	2450      	movs	r4, #80	@ 0x50
 80134b0:	193b      	adds	r3, r7, r4
 80134b2:	0592      	lsls	r2, r2, #22
 80134b4:	0d92      	lsrs	r2, r2, #22
 80134b6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80134b8:	193b      	adds	r3, r7, r4
 80134ba:	881b      	ldrh	r3, [r3, #0]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d100      	bne.n	80134c2 <PCD_EP_ISR_Handler+0x402>
 80134c0:	e08d      	b.n	80135de <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6818      	ldr	r0, [r3, #0]
 80134c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134c8:	6959      	ldr	r1, [r3, #20]
 80134ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134cc:	88da      	ldrh	r2, [r3, #6]
 80134ce:	193b      	adds	r3, r7, r4
 80134d0:	881b      	ldrh	r3, [r3, #0]
 80134d2:	f007 f8d6 	bl	801a682 <USB_ReadPMA>
 80134d6:	e082      	b.n	80135de <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80134d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134da:	78db      	ldrb	r3, [r3, #3]
 80134dc:	2b02      	cmp	r3, #2
 80134de:	d10c      	bne.n	80134fa <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80134e0:	2350      	movs	r3, #80	@ 0x50
 80134e2:	18fc      	adds	r4, r7, r3
 80134e4:	234a      	movs	r3, #74	@ 0x4a
 80134e6:	18fb      	adds	r3, r7, r3
 80134e8:	881a      	ldrh	r2, [r3, #0]
 80134ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	0018      	movs	r0, r3
 80134f0:	f000 f9ec 	bl	80138cc <HAL_PCD_EP_DB_Receive>
 80134f4:	0003      	movs	r3, r0
 80134f6:	8023      	strh	r3, [r4, #0]
 80134f8:	e071      	b.n	80135de <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	001a      	movs	r2, r3
 8013500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	18d3      	adds	r3, r2, r3
 8013508:	881b      	ldrh	r3, [r3, #0]
 801350a:	b29a      	uxth	r2, r3
 801350c:	2052      	movs	r0, #82	@ 0x52
 801350e:	183b      	adds	r3, r7, r0
 8013510:	49a2      	ldr	r1, [pc, #648]	@ (801379c <PCD_EP_ISR_Handler+0x6dc>)
 8013512:	400a      	ands	r2, r1
 8013514:	801a      	strh	r2, [r3, #0]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	001a      	movs	r2, r3
 801351c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	009b      	lsls	r3, r3, #2
 8013522:	18d3      	adds	r3, r2, r3
 8013524:	183a      	adds	r2, r7, r0
 8013526:	8812      	ldrh	r2, [r2, #0]
 8013528:	499d      	ldr	r1, [pc, #628]	@ (80137a0 <PCD_EP_ISR_Handler+0x6e0>)
 801352a:	430a      	orrs	r2, r1
 801352c:	b292      	uxth	r2, r2
 801352e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	001a      	movs	r2, r3
 8013536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	009b      	lsls	r3, r3, #2
 801353c:	18d3      	adds	r3, r2, r3
 801353e:	881b      	ldrh	r3, [r3, #0]
 8013540:	b29b      	uxth	r3, r3
 8013542:	001a      	movs	r2, r3
 8013544:	2380      	movs	r3, #128	@ 0x80
 8013546:	01db      	lsls	r3, r3, #7
 8013548:	4013      	ands	r3, r2
 801354a:	d024      	beq.n	8013596 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	2250      	movs	r2, #80	@ 0x50
 8013552:	5a9b      	ldrh	r3, [r3, r2]
 8013554:	b29b      	uxth	r3, r3
 8013556:	001a      	movs	r2, r3
 8013558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	00db      	lsls	r3, r3, #3
 801355e:	18d2      	adds	r2, r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	18d3      	adds	r3, r2, r3
 8013566:	4a8f      	ldr	r2, [pc, #572]	@ (80137a4 <PCD_EP_ISR_Handler+0x6e4>)
 8013568:	4694      	mov	ip, r2
 801356a:	4463      	add	r3, ip
 801356c:	881a      	ldrh	r2, [r3, #0]
 801356e:	2450      	movs	r4, #80	@ 0x50
 8013570:	193b      	adds	r3, r7, r4
 8013572:	0592      	lsls	r2, r2, #22
 8013574:	0d92      	lsrs	r2, r2, #22
 8013576:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013578:	193b      	adds	r3, r7, r4
 801357a:	881b      	ldrh	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d02e      	beq.n	80135de <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6818      	ldr	r0, [r3, #0]
 8013584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013586:	6959      	ldr	r1, [r3, #20]
 8013588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801358a:	891a      	ldrh	r2, [r3, #8]
 801358c:	193b      	adds	r3, r7, r4
 801358e:	881b      	ldrh	r3, [r3, #0]
 8013590:	f007 f877 	bl	801a682 <USB_ReadPMA>
 8013594:	e023      	b.n	80135de <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2250      	movs	r2, #80	@ 0x50
 801359c:	5a9b      	ldrh	r3, [r3, r2]
 801359e:	b29b      	uxth	r3, r3
 80135a0:	001a      	movs	r2, r3
 80135a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135a4:	781b      	ldrb	r3, [r3, #0]
 80135a6:	00db      	lsls	r3, r3, #3
 80135a8:	18d2      	adds	r2, r2, r3
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	18d3      	adds	r3, r2, r3
 80135b0:	4a79      	ldr	r2, [pc, #484]	@ (8013798 <PCD_EP_ISR_Handler+0x6d8>)
 80135b2:	4694      	mov	ip, r2
 80135b4:	4463      	add	r3, ip
 80135b6:	881a      	ldrh	r2, [r3, #0]
 80135b8:	2450      	movs	r4, #80	@ 0x50
 80135ba:	193b      	adds	r3, r7, r4
 80135bc:	0592      	lsls	r2, r2, #22
 80135be:	0d92      	lsrs	r2, r2, #22
 80135c0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80135c2:	193b      	adds	r3, r7, r4
 80135c4:	881b      	ldrh	r3, [r3, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d009      	beq.n	80135de <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6818      	ldr	r0, [r3, #0]
 80135ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135d0:	6959      	ldr	r1, [r3, #20]
 80135d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135d4:	895a      	ldrh	r2, [r3, #10]
 80135d6:	193b      	adds	r3, r7, r4
 80135d8:	881b      	ldrh	r3, [r3, #0]
 80135da:	f007 f852 	bl	801a682 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80135de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135e0:	69da      	ldr	r2, [r3, #28]
 80135e2:	2150      	movs	r1, #80	@ 0x50
 80135e4:	187b      	adds	r3, r7, r1
 80135e6:	881b      	ldrh	r3, [r3, #0]
 80135e8:	18d2      	adds	r2, r2, r3
 80135ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80135ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135f0:	695a      	ldr	r2, [r3, #20]
 80135f2:	187b      	adds	r3, r7, r1
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	18d2      	adds	r2, r2, r3
 80135f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80135fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135fe:	699b      	ldr	r3, [r3, #24]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d005      	beq.n	8013610 <PCD_EP_ISR_Handler+0x550>
 8013604:	187b      	adds	r3, r7, r1
 8013606:	881a      	ldrh	r2, [r3, #0]
 8013608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801360a:	691b      	ldr	r3, [r3, #16]
 801360c:	429a      	cmp	r2, r3
 801360e:	d207      	bcs.n	8013620 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8013610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013612:	781a      	ldrb	r2, [r3, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	0011      	movs	r1, r2
 8013618:	0018      	movs	r0, r3
 801361a:	f009 f84c 	bl	801c6b6 <HAL_PCD_DataOutStageCallback>
 801361e:	e006      	b.n	801362e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013626:	0011      	movs	r1, r2
 8013628:	0018      	movs	r0, r3
 801362a:	f005 fd6f 	bl	801910c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801362e:	244a      	movs	r4, #74	@ 0x4a
 8013630:	193b      	adds	r3, r7, r4
 8013632:	881b      	ldrh	r3, [r3, #0]
 8013634:	2280      	movs	r2, #128	@ 0x80
 8013636:	4013      	ands	r3, r2
 8013638:	d100      	bne.n	801363c <PCD_EP_ISR_Handler+0x57c>
 801363a:	e133      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801363c:	204d      	movs	r0, #77	@ 0x4d
 801363e:	183b      	adds	r3, r7, r0
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	1c5a      	adds	r2, r3, #1
 8013644:	0013      	movs	r3, r2
 8013646:	009b      	lsls	r3, r3, #2
 8013648:	189b      	adds	r3, r3, r2
 801364a:	00db      	lsls	r3, r3, #3
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	18d3      	adds	r3, r2, r3
 8013650:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	001a      	movs	r2, r3
 8013658:	183b      	adds	r3, r7, r0
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	18d3      	adds	r3, r2, r3
 8013660:	881b      	ldrh	r3, [r3, #0]
 8013662:	b29a      	uxth	r2, r3
 8013664:	2542      	movs	r5, #66	@ 0x42
 8013666:	197b      	adds	r3, r7, r5
 8013668:	494f      	ldr	r1, [pc, #316]	@ (80137a8 <PCD_EP_ISR_Handler+0x6e8>)
 801366a:	400a      	ands	r2, r1
 801366c:	801a      	strh	r2, [r3, #0]
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	001a      	movs	r2, r3
 8013674:	183b      	adds	r3, r7, r0
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	009b      	lsls	r3, r3, #2
 801367a:	18d3      	adds	r3, r2, r3
 801367c:	197a      	adds	r2, r7, r5
 801367e:	8812      	ldrh	r2, [r2, #0]
 8013680:	494a      	ldr	r1, [pc, #296]	@ (80137ac <PCD_EP_ISR_Handler+0x6ec>)
 8013682:	430a      	orrs	r2, r1
 8013684:	b292      	uxth	r2, r2
 8013686:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801368a:	78db      	ldrb	r3, [r3, #3]
 801368c:	2b01      	cmp	r3, #1
 801368e:	d000      	beq.n	8013692 <PCD_EP_ISR_Handler+0x5d2>
 8013690:	e0af      	b.n	80137f2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8013692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013694:	2200      	movs	r2, #0
 8013696:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801369a:	7b1b      	ldrb	r3, [r3, #12]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d100      	bne.n	80136a2 <PCD_EP_ISR_Handler+0x5e2>
 80136a0:	e09f      	b.n	80137e2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80136a2:	193b      	adds	r3, r7, r4
 80136a4:	881b      	ldrh	r3, [r3, #0]
 80136a6:	2240      	movs	r2, #64	@ 0x40
 80136a8:	4013      	ands	r3, r2
 80136aa:	d046      	beq.n	801373a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80136ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136ae:	785b      	ldrb	r3, [r3, #1]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d125      	bne.n	8013700 <PCD_EP_ISR_Handler+0x640>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	2250      	movs	r2, #80	@ 0x50
 80136c0:	5a9b      	ldrh	r3, [r3, r2]
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	001a      	movs	r2, r3
 80136c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c8:	189b      	adds	r3, r3, r2
 80136ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80136cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	00da      	lsls	r2, r3, #3
 80136d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d4:	18d3      	adds	r3, r2, r3
 80136d6:	4a33      	ldr	r2, [pc, #204]	@ (80137a4 <PCD_EP_ISR_Handler+0x6e4>)
 80136d8:	4694      	mov	ip, r2
 80136da:	4463      	add	r3, ip
 80136dc:	623b      	str	r3, [r7, #32]
 80136de:	6a3b      	ldr	r3, [r7, #32]
 80136e0:	881b      	ldrh	r3, [r3, #0]
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	059b      	lsls	r3, r3, #22
 80136e6:	0d9b      	lsrs	r3, r3, #22
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	801a      	strh	r2, [r3, #0]
 80136ee:	6a3b      	ldr	r3, [r7, #32]
 80136f0:	881b      	ldrh	r3, [r3, #0]
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	4a2d      	ldr	r2, [pc, #180]	@ (80137ac <PCD_EP_ISR_Handler+0x6ec>)
 80136f6:	4313      	orrs	r3, r2
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	6a3b      	ldr	r3, [r7, #32]
 80136fc:	801a      	strh	r2, [r3, #0]
 80136fe:	e070      	b.n	80137e2 <PCD_EP_ISR_Handler+0x722>
 8013700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013702:	785b      	ldrb	r3, [r3, #1]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d16c      	bne.n	80137e2 <PCD_EP_ISR_Handler+0x722>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	2250      	movs	r2, #80	@ 0x50
 8013714:	5a9b      	ldrh	r3, [r3, r2]
 8013716:	b29b      	uxth	r3, r3
 8013718:	001a      	movs	r2, r3
 801371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801371c:	189b      	adds	r3, r3, r2
 801371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	00da      	lsls	r2, r3, #3
 8013726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013728:	18d3      	adds	r3, r2, r3
 801372a:	4a1e      	ldr	r2, [pc, #120]	@ (80137a4 <PCD_EP_ISR_Handler+0x6e4>)
 801372c:	4694      	mov	ip, r2
 801372e:	4463      	add	r3, ip
 8013730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013734:	2200      	movs	r2, #0
 8013736:	801a      	strh	r2, [r3, #0]
 8013738:	e053      	b.n	80137e2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013742:	785b      	ldrb	r3, [r3, #1]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d133      	bne.n	80137b0 <PCD_EP_ISR_Handler+0x6f0>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	637b      	str	r3, [r7, #52]	@ 0x34
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	2250      	movs	r2, #80	@ 0x50
 8013754:	5a9b      	ldrh	r3, [r3, r2]
 8013756:	b29b      	uxth	r3, r3
 8013758:	001a      	movs	r2, r3
 801375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801375c:	189b      	adds	r3, r3, r2
 801375e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	00da      	lsls	r2, r3, #3
 8013766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013768:	18d3      	adds	r3, r2, r3
 801376a:	4a0b      	ldr	r2, [pc, #44]	@ (8013798 <PCD_EP_ISR_Handler+0x6d8>)
 801376c:	4694      	mov	ip, r2
 801376e:	4463      	add	r3, ip
 8013770:	633b      	str	r3, [r7, #48]	@ 0x30
 8013772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	b29b      	uxth	r3, r3
 8013778:	059b      	lsls	r3, r3, #22
 801377a:	0d9b      	lsrs	r3, r3, #22
 801377c:	b29a      	uxth	r2, r3
 801377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013780:	801a      	strh	r2, [r3, #0]
 8013782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013784:	881b      	ldrh	r3, [r3, #0]
 8013786:	b29b      	uxth	r3, r3
 8013788:	4a08      	ldr	r2, [pc, #32]	@ (80137ac <PCD_EP_ISR_Handler+0x6ec>)
 801378a:	4313      	orrs	r3, r2
 801378c:	b29a      	uxth	r2, r3
 801378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013790:	801a      	strh	r2, [r3, #0]
 8013792:	e026      	b.n	80137e2 <PCD_EP_ISR_Handler+0x722>
 8013794:	00000f8f 	.word	0x00000f8f
 8013798:	00000406 	.word	0x00000406
 801379c:	ffff8f8f 	.word	0xffff8f8f
 80137a0:	ffff80c0 	.word	0xffff80c0
 80137a4:	00000402 	.word	0x00000402
 80137a8:	ffff8f0f 	.word	0xffff8f0f
 80137ac:	ffff8000 	.word	0xffff8000
 80137b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137b2:	785b      	ldrb	r3, [r3, #1]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d114      	bne.n	80137e2 <PCD_EP_ISR_Handler+0x722>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	2250      	movs	r2, #80	@ 0x50
 80137be:	5a9b      	ldrh	r3, [r3, r2]
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	001a      	movs	r2, r3
 80137c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137c6:	189b      	adds	r3, r3, r2
 80137c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	00da      	lsls	r2, r3, #3
 80137d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137d2:	18d3      	adds	r3, r2, r3
 80137d4:	4a3b      	ldr	r2, [pc, #236]	@ (80138c4 <PCD_EP_ISR_Handler+0x804>)
 80137d6:	4694      	mov	ip, r2
 80137d8:	4463      	add	r3, ip
 80137da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80137dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137de:	2200      	movs	r2, #0
 80137e0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80137e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137e4:	781a      	ldrb	r2, [r3, #0]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	0011      	movs	r1, r2
 80137ea:	0018      	movs	r0, r3
 80137ec:	f008 ff84 	bl	801c6f8 <HAL_PCD_DataInStageCallback>
 80137f0:	e058      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80137f2:	234a      	movs	r3, #74	@ 0x4a
 80137f4:	18fb      	adds	r3, r7, r3
 80137f6:	881a      	ldrh	r2, [r3, #0]
 80137f8:	2380      	movs	r3, #128	@ 0x80
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	4013      	ands	r3, r2
 80137fe:	d149      	bne.n	8013894 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	2250      	movs	r2, #80	@ 0x50
 8013806:	5a9b      	ldrh	r3, [r3, r2]
 8013808:	b29b      	uxth	r3, r3
 801380a:	001a      	movs	r2, r3
 801380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	00db      	lsls	r3, r3, #3
 8013812:	18d2      	adds	r2, r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	18d3      	adds	r3, r2, r3
 801381a:	4a2b      	ldr	r2, [pc, #172]	@ (80138c8 <PCD_EP_ISR_Handler+0x808>)
 801381c:	4694      	mov	ip, r2
 801381e:	4463      	add	r3, ip
 8013820:	881a      	ldrh	r2, [r3, #0]
 8013822:	2140      	movs	r1, #64	@ 0x40
 8013824:	187b      	adds	r3, r7, r1
 8013826:	0592      	lsls	r2, r2, #22
 8013828:	0d92      	lsrs	r2, r2, #22
 801382a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801382c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801382e:	699a      	ldr	r2, [r3, #24]
 8013830:	187b      	adds	r3, r7, r1
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	429a      	cmp	r2, r3
 8013836:	d907      	bls.n	8013848 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8013838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801383a:	699a      	ldr	r2, [r3, #24]
 801383c:	187b      	adds	r3, r7, r1
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	1ad2      	subs	r2, r2, r3
 8013842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013844:	619a      	str	r2, [r3, #24]
 8013846:	e002      	b.n	801384e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8013848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801384a:	2200      	movs	r2, #0
 801384c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801384e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013850:	699b      	ldr	r3, [r3, #24]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d107      	bne.n	8013866 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013858:	781a      	ldrb	r2, [r3, #0]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	0011      	movs	r1, r2
 801385e:	0018      	movs	r0, r3
 8013860:	f008 ff4a 	bl	801c6f8 <HAL_PCD_DataInStageCallback>
 8013864:	e01e      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8013866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013868:	695a      	ldr	r2, [r3, #20]
 801386a:	2140      	movs	r1, #64	@ 0x40
 801386c:	187b      	adds	r3, r7, r1
 801386e:	881b      	ldrh	r3, [r3, #0]
 8013870:	18d2      	adds	r2, r2, r3
 8013872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013874:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8013876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013878:	69da      	ldr	r2, [r3, #28]
 801387a:	187b      	adds	r3, r7, r1
 801387c:	881b      	ldrh	r3, [r3, #0]
 801387e:	18d2      	adds	r2, r2, r3
 8013880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013882:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801388a:	0011      	movs	r1, r2
 801388c:	0018      	movs	r0, r3
 801388e:	f005 fc3d 	bl	801910c <USB_EPStartXfer>
 8013892:	e007      	b.n	80138a4 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8013894:	234a      	movs	r3, #74	@ 0x4a
 8013896:	18fb      	adds	r3, r7, r3
 8013898:	881a      	ldrh	r2, [r3, #0]
 801389a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	0018      	movs	r0, r3
 80138a0:	f000 f930 	bl	8013b04 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2244      	movs	r2, #68	@ 0x44
 80138aa:	5a9b      	ldrh	r3, [r3, r2]
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	b21b      	sxth	r3, r3
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	da01      	bge.n	80138b8 <PCD_EP_ISR_Handler+0x7f8>
 80138b4:	f7ff fc0a 	bl	80130cc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80138b8:	2300      	movs	r3, #0
}
 80138ba:	0018      	movs	r0, r3
 80138bc:	46bd      	mov	sp, r7
 80138be:	b016      	add	sp, #88	@ 0x58
 80138c0:	bdb0      	pop	{r4, r5, r7, pc}
 80138c2:	46c0      	nop			@ (mov r8, r8)
 80138c4:	00000406 	.word	0x00000406
 80138c8:	00000402 	.word	0x00000402

080138cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80138cc:	b590      	push	{r4, r7, lr}
 80138ce:	b089      	sub	sp, #36	@ 0x24
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	1dbb      	adds	r3, r7, #6
 80138d8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80138da:	1dbb      	adds	r3, r7, #6
 80138dc:	881a      	ldrh	r2, [r3, #0]
 80138de:	2380      	movs	r3, #128	@ 0x80
 80138e0:	01db      	lsls	r3, r3, #7
 80138e2:	4013      	ands	r3, r2
 80138e4:	d100      	bne.n	80138e8 <HAL_PCD_EP_DB_Receive+0x1c>
 80138e6:	e07d      	b.n	80139e4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2250      	movs	r2, #80	@ 0x50
 80138ee:	5a9b      	ldrh	r3, [r3, r2]
 80138f0:	b29b      	uxth	r3, r3
 80138f2:	001a      	movs	r2, r3
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	00db      	lsls	r3, r3, #3
 80138fa:	18d2      	adds	r2, r2, r3
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	18d3      	adds	r3, r2, r3
 8013902:	4a7a      	ldr	r2, [pc, #488]	@ (8013aec <HAL_PCD_EP_DB_Receive+0x220>)
 8013904:	4694      	mov	ip, r2
 8013906:	4463      	add	r3, ip
 8013908:	881a      	ldrh	r2, [r3, #0]
 801390a:	211a      	movs	r1, #26
 801390c:	187b      	adds	r3, r7, r1
 801390e:	0592      	lsls	r2, r2, #22
 8013910:	0d92      	lsrs	r2, r2, #22
 8013912:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	699a      	ldr	r2, [r3, #24]
 8013918:	187b      	adds	r3, r7, r1
 801391a:	881b      	ldrh	r3, [r3, #0]
 801391c:	429a      	cmp	r2, r3
 801391e:	d307      	bcc.n	8013930 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	699a      	ldr	r2, [r3, #24]
 8013924:	187b      	adds	r3, r7, r1
 8013926:	881b      	ldrh	r3, [r3, #0]
 8013928:	1ad2      	subs	r2, r2, r3
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	619a      	str	r2, [r3, #24]
 801392e:	e002      	b.n	8013936 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	2200      	movs	r2, #0
 8013934:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	699b      	ldr	r3, [r3, #24]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d121      	bne.n	8013982 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	001a      	movs	r2, r3
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	18d3      	adds	r3, r2, r3
 801394c:	881b      	ldrh	r3, [r3, #0]
 801394e:	b29a      	uxth	r2, r3
 8013950:	2018      	movs	r0, #24
 8013952:	183b      	adds	r3, r7, r0
 8013954:	4966      	ldr	r1, [pc, #408]	@ (8013af0 <HAL_PCD_EP_DB_Receive+0x224>)
 8013956:	400a      	ands	r2, r1
 8013958:	801a      	strh	r2, [r3, #0]
 801395a:	183b      	adds	r3, r7, r0
 801395c:	183a      	adds	r2, r7, r0
 801395e:	8812      	ldrh	r2, [r2, #0]
 8013960:	2180      	movs	r1, #128	@ 0x80
 8013962:	0189      	lsls	r1, r1, #6
 8013964:	404a      	eors	r2, r1
 8013966:	801a      	strh	r2, [r3, #0]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	001a      	movs	r2, r3
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	009b      	lsls	r3, r3, #2
 8013974:	18d3      	adds	r3, r2, r3
 8013976:	183a      	adds	r2, r7, r0
 8013978:	8812      	ldrh	r2, [r2, #0]
 801397a:	495e      	ldr	r1, [pc, #376]	@ (8013af4 <HAL_PCD_EP_DB_Receive+0x228>)
 801397c:	430a      	orrs	r2, r1
 801397e:	b292      	uxth	r2, r2
 8013980:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013982:	1dbb      	adds	r3, r7, #6
 8013984:	881b      	ldrh	r3, [r3, #0]
 8013986:	2240      	movs	r2, #64	@ 0x40
 8013988:	4013      	ands	r3, r2
 801398a:	d01a      	beq.n	80139c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	001a      	movs	r2, r3
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	18d3      	adds	r3, r2, r3
 801399a:	881b      	ldrh	r3, [r3, #0]
 801399c:	b29a      	uxth	r2, r3
 801399e:	2016      	movs	r0, #22
 80139a0:	183b      	adds	r3, r7, r0
 80139a2:	4955      	ldr	r1, [pc, #340]	@ (8013af8 <HAL_PCD_EP_DB_Receive+0x22c>)
 80139a4:	400a      	ands	r2, r1
 80139a6:	801a      	strh	r2, [r3, #0]
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	001a      	movs	r2, r3
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	009b      	lsls	r3, r3, #2
 80139b4:	18d3      	adds	r3, r2, r3
 80139b6:	183a      	adds	r2, r7, r0
 80139b8:	8812      	ldrh	r2, [r2, #0]
 80139ba:	4950      	ldr	r1, [pc, #320]	@ (8013afc <HAL_PCD_EP_DB_Receive+0x230>)
 80139bc:	430a      	orrs	r2, r1
 80139be:	b292      	uxth	r2, r2
 80139c0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80139c2:	241a      	movs	r4, #26
 80139c4:	193b      	adds	r3, r7, r4
 80139c6:	881b      	ldrh	r3, [r3, #0]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d100      	bne.n	80139ce <HAL_PCD_EP_DB_Receive+0x102>
 80139cc:	e086      	b.n	8013adc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6818      	ldr	r0, [r3, #0]
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	6959      	ldr	r1, [r3, #20]
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	891a      	ldrh	r2, [r3, #8]
 80139da:	193b      	adds	r3, r7, r4
 80139dc:	881b      	ldrh	r3, [r3, #0]
 80139de:	f006 fe50 	bl	801a682 <USB_ReadPMA>
 80139e2:	e07b      	b.n	8013adc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2250      	movs	r2, #80	@ 0x50
 80139ea:	5a9b      	ldrh	r3, [r3, r2]
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	001a      	movs	r2, r3
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	00db      	lsls	r3, r3, #3
 80139f6:	18d2      	adds	r2, r2, r3
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	18d3      	adds	r3, r2, r3
 80139fe:	4a40      	ldr	r2, [pc, #256]	@ (8013b00 <HAL_PCD_EP_DB_Receive+0x234>)
 8013a00:	4694      	mov	ip, r2
 8013a02:	4463      	add	r3, ip
 8013a04:	881a      	ldrh	r2, [r3, #0]
 8013a06:	211a      	movs	r1, #26
 8013a08:	187b      	adds	r3, r7, r1
 8013a0a:	0592      	lsls	r2, r2, #22
 8013a0c:	0d92      	lsrs	r2, r2, #22
 8013a0e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	699a      	ldr	r2, [r3, #24]
 8013a14:	187b      	adds	r3, r7, r1
 8013a16:	881b      	ldrh	r3, [r3, #0]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d307      	bcc.n	8013a2c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	699a      	ldr	r2, [r3, #24]
 8013a20:	187b      	adds	r3, r7, r1
 8013a22:	881b      	ldrh	r3, [r3, #0]
 8013a24:	1ad2      	subs	r2, r2, r3
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	619a      	str	r2, [r3, #24]
 8013a2a:	e002      	b.n	8013a32 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	699b      	ldr	r3, [r3, #24]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d121      	bne.n	8013a7e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	001a      	movs	r2, r3
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	18d3      	adds	r3, r2, r3
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	b29a      	uxth	r2, r3
 8013a4c:	201e      	movs	r0, #30
 8013a4e:	183b      	adds	r3, r7, r0
 8013a50:	4927      	ldr	r1, [pc, #156]	@ (8013af0 <HAL_PCD_EP_DB_Receive+0x224>)
 8013a52:	400a      	ands	r2, r1
 8013a54:	801a      	strh	r2, [r3, #0]
 8013a56:	183b      	adds	r3, r7, r0
 8013a58:	183a      	adds	r2, r7, r0
 8013a5a:	8812      	ldrh	r2, [r2, #0]
 8013a5c:	2180      	movs	r1, #128	@ 0x80
 8013a5e:	0189      	lsls	r1, r1, #6
 8013a60:	404a      	eors	r2, r1
 8013a62:	801a      	strh	r2, [r3, #0]
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	001a      	movs	r2, r3
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	009b      	lsls	r3, r3, #2
 8013a70:	18d3      	adds	r3, r2, r3
 8013a72:	183a      	adds	r2, r7, r0
 8013a74:	8812      	ldrh	r2, [r2, #0]
 8013a76:	491f      	ldr	r1, [pc, #124]	@ (8013af4 <HAL_PCD_EP_DB_Receive+0x228>)
 8013a78:	430a      	orrs	r2, r1
 8013a7a:	b292      	uxth	r2, r2
 8013a7c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8013a7e:	1dbb      	adds	r3, r7, #6
 8013a80:	881b      	ldrh	r3, [r3, #0]
 8013a82:	2240      	movs	r2, #64	@ 0x40
 8013a84:	4013      	ands	r3, r2
 8013a86:	d11a      	bne.n	8013abe <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	001a      	movs	r2, r3
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	18d3      	adds	r3, r2, r3
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	b29a      	uxth	r2, r3
 8013a9a:	201c      	movs	r0, #28
 8013a9c:	183b      	adds	r3, r7, r0
 8013a9e:	4916      	ldr	r1, [pc, #88]	@ (8013af8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013aa0:	400a      	ands	r2, r1
 8013aa2:	801a      	strh	r2, [r3, #0]
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	001a      	movs	r2, r3
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	009b      	lsls	r3, r3, #2
 8013ab0:	18d3      	adds	r3, r2, r3
 8013ab2:	183a      	adds	r2, r7, r0
 8013ab4:	8812      	ldrh	r2, [r2, #0]
 8013ab6:	4911      	ldr	r1, [pc, #68]	@ (8013afc <HAL_PCD_EP_DB_Receive+0x230>)
 8013ab8:	430a      	orrs	r2, r1
 8013aba:	b292      	uxth	r2, r2
 8013abc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013abe:	241a      	movs	r4, #26
 8013ac0:	193b      	adds	r3, r7, r4
 8013ac2:	881b      	ldrh	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d009      	beq.n	8013adc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6818      	ldr	r0, [r3, #0]
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	6959      	ldr	r1, [r3, #20]
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	895a      	ldrh	r2, [r3, #10]
 8013ad4:	193b      	adds	r3, r7, r4
 8013ad6:	881b      	ldrh	r3, [r3, #0]
 8013ad8:	f006 fdd3 	bl	801a682 <USB_ReadPMA>
    }
  }

  return count;
 8013adc:	231a      	movs	r3, #26
 8013ade:	18fb      	adds	r3, r7, r3
 8013ae0:	881b      	ldrh	r3, [r3, #0]
}
 8013ae2:	0018      	movs	r0, r3
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	b009      	add	sp, #36	@ 0x24
 8013ae8:	bd90      	pop	{r4, r7, pc}
 8013aea:	46c0      	nop			@ (mov r8, r8)
 8013aec:	00000402 	.word	0x00000402
 8013af0:	ffffbf8f 	.word	0xffffbf8f
 8013af4:	ffff8080 	.word	0xffff8080
 8013af8:	ffff8f8f 	.word	0xffff8f8f
 8013afc:	ffff80c0 	.word	0xffff80c0
 8013b00:	00000406 	.word	0x00000406

08013b04 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b0a4      	sub	sp, #144	@ 0x90
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	1dbb      	adds	r3, r7, #6
 8013b10:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013b12:	1dbb      	adds	r3, r7, #6
 8013b14:	881b      	ldrh	r3, [r3, #0]
 8013b16:	2240      	movs	r2, #64	@ 0x40
 8013b18:	4013      	ands	r3, r2
 8013b1a:	d100      	bne.n	8013b1e <HAL_PCD_EP_DB_Transmit+0x1a>
 8013b1c:	e1e4      	b.n	8013ee8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2250      	movs	r2, #80	@ 0x50
 8013b24:	5a9b      	ldrh	r3, [r3, r2]
 8013b26:	b29b      	uxth	r3, r3
 8013b28:	001a      	movs	r2, r3
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	00db      	lsls	r3, r3, #3
 8013b30:	18d2      	adds	r2, r2, r3
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	18d3      	adds	r3, r2, r3
 8013b38:	4ad0      	ldr	r2, [pc, #832]	@ (8013e7c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013b3a:	4694      	mov	ip, r2
 8013b3c:	4463      	add	r3, ip
 8013b3e:	881a      	ldrh	r2, [r3, #0]
 8013b40:	2186      	movs	r1, #134	@ 0x86
 8013b42:	187b      	adds	r3, r7, r1
 8013b44:	0592      	lsls	r2, r2, #22
 8013b46:	0d92      	lsrs	r2, r2, #22
 8013b48:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	699a      	ldr	r2, [r3, #24]
 8013b4e:	187b      	adds	r3, r7, r1
 8013b50:	881b      	ldrh	r3, [r3, #0]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d907      	bls.n	8013b66 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	699a      	ldr	r2, [r3, #24]
 8013b5a:	187b      	adds	r3, r7, r1
 8013b5c:	881b      	ldrh	r3, [r3, #0]
 8013b5e:	1ad2      	subs	r2, r2, r3
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	619a      	str	r2, [r3, #24]
 8013b64:	e002      	b.n	8013b6c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	699b      	ldr	r3, [r3, #24]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d000      	beq.n	8013b76 <HAL_PCD_EP_DB_Transmit+0x72>
 8013b74:	e0b5      	b.n	8013ce2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	785b      	ldrb	r3, [r3, #1]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d125      	bne.n	8013bca <HAL_PCD_EP_DB_Transmit+0xc6>
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2250      	movs	r2, #80	@ 0x50
 8013b8a:	5a9b      	ldrh	r3, [r3, r2]
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	001a      	movs	r2, r3
 8013b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b92:	189b      	adds	r3, r3, r2
 8013b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	00da      	lsls	r2, r3, #3
 8013b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b9e:	18d3      	adds	r3, r2, r3
 8013ba0:	4ab6      	ldr	r2, [pc, #728]	@ (8013e7c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013ba2:	4694      	mov	ip, r2
 8013ba4:	4463      	add	r3, ip
 8013ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013baa:	881b      	ldrh	r3, [r3, #0]
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	059b      	lsls	r3, r3, #22
 8013bb0:	0d9b      	lsrs	r3, r3, #22
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb6:	801a      	strh	r2, [r3, #0]
 8013bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bba:	881b      	ldrh	r3, [r3, #0]
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	4ab0      	ldr	r2, [pc, #704]	@ (8013e80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013bc0:	4313      	orrs	r3, r2
 8013bc2:	b29a      	uxth	r2, r3
 8013bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bc6:	801a      	strh	r2, [r3, #0]
 8013bc8:	e01b      	b.n	8013c02 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	785b      	ldrb	r3, [r3, #1]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d117      	bne.n	8013c02 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2250      	movs	r2, #80	@ 0x50
 8013bde:	5a9b      	ldrh	r3, [r3, r2]
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	001a      	movs	r2, r3
 8013be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013be6:	189b      	adds	r3, r3, r2
 8013be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	00da      	lsls	r2, r3, #3
 8013bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013bf2:	18d3      	adds	r3, r2, r3
 8013bf4:	4aa1      	ldr	r2, [pc, #644]	@ (8013e7c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013bf6:	4694      	mov	ip, r2
 8013bf8:	4463      	add	r3, ip
 8013bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8013bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bfe:	2200      	movs	r2, #0
 8013c00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	785b      	ldrb	r3, [r3, #1]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d125      	bne.n	8013c5c <HAL_PCD_EP_DB_Transmit+0x158>
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	61fb      	str	r3, [r7, #28]
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2250      	movs	r2, #80	@ 0x50
 8013c1c:	5a9b      	ldrh	r3, [r3, r2]
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	001a      	movs	r2, r3
 8013c22:	69fb      	ldr	r3, [r7, #28]
 8013c24:	189b      	adds	r3, r3, r2
 8013c26:	61fb      	str	r3, [r7, #28]
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	00da      	lsls	r2, r3, #3
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	18d3      	adds	r3, r2, r3
 8013c32:	4a94      	ldr	r2, [pc, #592]	@ (8013e84 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013c34:	4694      	mov	ip, r2
 8013c36:	4463      	add	r3, ip
 8013c38:	61bb      	str	r3, [r7, #24]
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	059b      	lsls	r3, r3, #22
 8013c42:	0d9b      	lsrs	r3, r3, #22
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	69bb      	ldr	r3, [r7, #24]
 8013c48:	801a      	strh	r2, [r3, #0]
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	881b      	ldrh	r3, [r3, #0]
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	4a8b      	ldr	r2, [pc, #556]	@ (8013e80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013c52:	4313      	orrs	r3, r2
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	69bb      	ldr	r3, [r7, #24]
 8013c58:	801a      	strh	r2, [r3, #0]
 8013c5a:	e018      	b.n	8013c8e <HAL_PCD_EP_DB_Transmit+0x18a>
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	785b      	ldrb	r3, [r3, #1]
 8013c60:	2b01      	cmp	r3, #1
 8013c62:	d114      	bne.n	8013c8e <HAL_PCD_EP_DB_Transmit+0x18a>
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2250      	movs	r2, #80	@ 0x50
 8013c6a:	5a9b      	ldrh	r3, [r3, r2]
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	001a      	movs	r2, r3
 8013c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c72:	189b      	adds	r3, r3, r2
 8013c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	00da      	lsls	r2, r3, #3
 8013c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c7e:	18d3      	adds	r3, r2, r3
 8013c80:	4a80      	ldr	r2, [pc, #512]	@ (8013e84 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013c82:	4694      	mov	ip, r2
 8013c84:	4463      	add	r3, ip
 8013c86:	623b      	str	r3, [r7, #32]
 8013c88:	6a3b      	ldr	r3, [r7, #32]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013c8e:	68bb      	ldr	r3, [r7, #8]
 8013c90:	781a      	ldrb	r2, [r3, #0]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	0011      	movs	r1, r2
 8013c96:	0018      	movs	r0, r3
 8013c98:	f008 fd2e 	bl	801c6f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013c9c:	1dbb      	adds	r3, r7, #6
 8013c9e:	881a      	ldrh	r2, [r3, #0]
 8013ca0:	2380      	movs	r3, #128	@ 0x80
 8013ca2:	01db      	lsls	r3, r3, #7
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	d100      	bne.n	8013caa <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013ca8:	e309      	b.n	80142be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	001a      	movs	r2, r3
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	009b      	lsls	r3, r3, #2
 8013cb6:	18d3      	adds	r3, r2, r3
 8013cb8:	881b      	ldrh	r3, [r3, #0]
 8013cba:	b29a      	uxth	r2, r3
 8013cbc:	2016      	movs	r0, #22
 8013cbe:	183b      	adds	r3, r7, r0
 8013cc0:	4971      	ldr	r1, [pc, #452]	@ (8013e88 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013cc2:	400a      	ands	r2, r1
 8013cc4:	801a      	strh	r2, [r3, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	001a      	movs	r2, r3
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	009b      	lsls	r3, r3, #2
 8013cd2:	18d3      	adds	r3, r2, r3
 8013cd4:	183a      	adds	r2, r7, r0
 8013cd6:	8812      	ldrh	r2, [r2, #0]
 8013cd8:	496c      	ldr	r1, [pc, #432]	@ (8013e8c <HAL_PCD_EP_DB_Transmit+0x388>)
 8013cda:	430a      	orrs	r2, r1
 8013cdc:	b292      	uxth	r2, r2
 8013cde:	801a      	strh	r2, [r3, #0]
 8013ce0:	e2ed      	b.n	80142be <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013ce2:	1dbb      	adds	r3, r7, #6
 8013ce4:	881a      	ldrh	r2, [r3, #0]
 8013ce6:	2380      	movs	r3, #128	@ 0x80
 8013ce8:	01db      	lsls	r3, r3, #7
 8013cea:	4013      	ands	r3, r2
 8013cec:	d01a      	beq.n	8013d24 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	001a      	movs	r2, r3
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	009b      	lsls	r3, r3, #2
 8013cfa:	18d3      	adds	r3, r2, r3
 8013cfc:	881b      	ldrh	r3, [r3, #0]
 8013cfe:	b29a      	uxth	r2, r3
 8013d00:	208a      	movs	r0, #138	@ 0x8a
 8013d02:	183b      	adds	r3, r7, r0
 8013d04:	4960      	ldr	r1, [pc, #384]	@ (8013e88 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013d06:	400a      	ands	r2, r1
 8013d08:	801a      	strh	r2, [r3, #0]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	001a      	movs	r2, r3
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	18d3      	adds	r3, r2, r3
 8013d18:	183a      	adds	r2, r7, r0
 8013d1a:	8812      	ldrh	r2, [r2, #0]
 8013d1c:	495b      	ldr	r1, [pc, #364]	@ (8013e8c <HAL_PCD_EP_DB_Transmit+0x388>)
 8013d1e:	430a      	orrs	r2, r1
 8013d20:	b292      	uxth	r2, r2
 8013d22:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	2224      	movs	r2, #36	@ 0x24
 8013d28:	5c9b      	ldrb	r3, [r3, r2]
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d000      	beq.n	8013d30 <HAL_PCD_EP_DB_Transmit+0x22c>
 8013d2e:	e2c6      	b.n	80142be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	695a      	ldr	r2, [r3, #20]
 8013d34:	2186      	movs	r1, #134	@ 0x86
 8013d36:	187b      	adds	r3, r7, r1
 8013d38:	881b      	ldrh	r3, [r3, #0]
 8013d3a:	18d2      	adds	r2, r2, r3
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	69da      	ldr	r2, [r3, #28]
 8013d44:	187b      	adds	r3, r7, r1
 8013d46:	881b      	ldrh	r3, [r3, #0]
 8013d48:	18d2      	adds	r2, r2, r3
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	6a1a      	ldr	r2, [r3, #32]
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	691b      	ldr	r3, [r3, #16]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d30c      	bcc.n	8013d74 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	691b      	ldr	r3, [r3, #16]
 8013d5e:	218c      	movs	r1, #140	@ 0x8c
 8013d60:	187a      	adds	r2, r7, r1
 8013d62:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	6a1a      	ldr	r2, [r3, #32]
 8013d68:	187b      	adds	r3, r7, r1
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	1ad2      	subs	r2, r2, r3
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	621a      	str	r2, [r3, #32]
 8013d72:	e01a      	b.n	8013daa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	6a1b      	ldr	r3, [r3, #32]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10a      	bne.n	8013d92 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8013d7c:	2386      	movs	r3, #134	@ 0x86
 8013d7e:	18fb      	adds	r3, r7, r3
 8013d80:	881b      	ldrh	r3, [r3, #0]
 8013d82:	228c      	movs	r2, #140	@ 0x8c
 8013d84:	18ba      	adds	r2, r7, r2
 8013d86:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	2224      	movs	r2, #36	@ 0x24
 8013d8c:	2100      	movs	r1, #0
 8013d8e:	5499      	strb	r1, [r3, r2]
 8013d90:	e00b      	b.n	8013daa <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013d92:	68bb      	ldr	r3, [r7, #8]
 8013d94:	2224      	movs	r2, #36	@ 0x24
 8013d96:	2100      	movs	r1, #0
 8013d98:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	6a1b      	ldr	r3, [r3, #32]
 8013d9e:	228c      	movs	r2, #140	@ 0x8c
 8013da0:	18ba      	adds	r2, r7, r2
 8013da2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	2200      	movs	r2, #0
 8013da8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	785b      	ldrb	r3, [r3, #1]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d000      	beq.n	8013db4 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013db2:	e06d      	b.n	8013e90 <HAL_PCD_EP_DB_Transmit+0x38c>
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2250      	movs	r2, #80	@ 0x50
 8013dc0:	5a9b      	ldrh	r3, [r3, r2]
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	001a      	movs	r2, r3
 8013dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dc8:	189b      	adds	r3, r3, r2
 8013dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	00da      	lsls	r2, r3, #3
 8013dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dd4:	18d3      	adds	r3, r2, r3
 8013dd6:	4a29      	ldr	r2, [pc, #164]	@ (8013e7c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013dd8:	4694      	mov	ip, r2
 8013dda:	4463      	add	r3, ip
 8013ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de0:	881b      	ldrh	r3, [r3, #0]
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	059b      	lsls	r3, r3, #22
 8013de6:	0d9b      	lsrs	r3, r3, #22
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dec:	801a      	strh	r2, [r3, #0]
 8013dee:	228c      	movs	r2, #140	@ 0x8c
 8013df0:	18bb      	adds	r3, r7, r2
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	2b3e      	cmp	r3, #62	@ 0x3e
 8013df6:	d91a      	bls.n	8013e2e <HAL_PCD_EP_DB_Transmit+0x32a>
 8013df8:	18bb      	adds	r3, r7, r2
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	095b      	lsrs	r3, r3, #5
 8013dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e00:	18bb      	adds	r3, r7, r2
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	221f      	movs	r2, #31
 8013e06:	4013      	ands	r3, r2
 8013e08:	d102      	bne.n	8013e10 <HAL_PCD_EP_DB_Transmit+0x30c>
 8013e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e0c:	3b01      	subs	r3, #1
 8013e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e12:	881b      	ldrh	r3, [r3, #0]
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	029b      	lsls	r3, r3, #10
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	4313      	orrs	r3, r2
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	4a17      	ldr	r2, [pc, #92]	@ (8013e80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013e24:	4313      	orrs	r3, r2
 8013e26:	b29a      	uxth	r2, r3
 8013e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e2a:	801a      	strh	r2, [r3, #0]
 8013e2c:	e04f      	b.n	8013ece <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e2e:	238c      	movs	r3, #140	@ 0x8c
 8013e30:	18fb      	adds	r3, r7, r3
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d108      	bne.n	8013e4a <HAL_PCD_EP_DB_Transmit+0x346>
 8013e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	4a10      	ldr	r2, [pc, #64]	@ (8013e80 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013e40:	4313      	orrs	r3, r2
 8013e42:	b29a      	uxth	r2, r3
 8013e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e46:	801a      	strh	r2, [r3, #0]
 8013e48:	e041      	b.n	8013ece <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e4a:	228c      	movs	r2, #140	@ 0x8c
 8013e4c:	18bb      	adds	r3, r7, r2
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	085b      	lsrs	r3, r3, #1
 8013e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e54:	18bb      	adds	r3, r7, r2
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2201      	movs	r2, #1
 8013e5a:	4013      	ands	r3, r2
 8013e5c:	d002      	beq.n	8013e64 <HAL_PCD_EP_DB_Transmit+0x360>
 8013e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e60:	3301      	adds	r3, #1
 8013e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	b29a      	uxth	r2, r3
 8013e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	029b      	lsls	r3, r3, #10
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	4313      	orrs	r3, r2
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e78:	801a      	strh	r2, [r3, #0]
 8013e7a:	e028      	b.n	8013ece <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e7c:	00000402 	.word	0x00000402
 8013e80:	ffff8000 	.word	0xffff8000
 8013e84:	00000406 	.word	0x00000406
 8013e88:	ffff8f8f 	.word	0xffff8f8f
 8013e8c:	ffffc080 	.word	0xffffc080
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	785b      	ldrb	r3, [r3, #1]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d11a      	bne.n	8013ece <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2250      	movs	r2, #80	@ 0x50
 8013ea4:	5a9b      	ldrh	r3, [r3, r2]
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	001a      	movs	r2, r3
 8013eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eac:	189b      	adds	r3, r3, r2
 8013eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	00da      	lsls	r2, r3, #3
 8013eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013eb8:	18d3      	adds	r3, r2, r3
 8013eba:	4adb      	ldr	r2, [pc, #876]	@ (8014228 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013ebc:	4694      	mov	ip, r2
 8013ebe:	4463      	add	r3, ip
 8013ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8013ec2:	238c      	movs	r3, #140	@ 0x8c
 8013ec4:	18fb      	adds	r3, r7, r3
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ecc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	6818      	ldr	r0, [r3, #0]
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	6959      	ldr	r1, [r3, #20]
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	891a      	ldrh	r2, [r3, #8]
 8013eda:	238c      	movs	r3, #140	@ 0x8c
 8013edc:	18fb      	adds	r3, r7, r3
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	f006 fb85 	bl	801a5f0 <USB_WritePMA>
 8013ee6:	e1ea      	b.n	80142be <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2250      	movs	r2, #80	@ 0x50
 8013eee:	5a9b      	ldrh	r3, [r3, r2]
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	001a      	movs	r2, r3
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	00db      	lsls	r3, r3, #3
 8013efa:	18d2      	adds	r2, r2, r3
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	18d3      	adds	r3, r2, r3
 8013f02:	4aca      	ldr	r2, [pc, #808]	@ (801422c <HAL_PCD_EP_DB_Transmit+0x728>)
 8013f04:	4694      	mov	ip, r2
 8013f06:	4463      	add	r3, ip
 8013f08:	881a      	ldrh	r2, [r3, #0]
 8013f0a:	2186      	movs	r1, #134	@ 0x86
 8013f0c:	187b      	adds	r3, r7, r1
 8013f0e:	0592      	lsls	r2, r2, #22
 8013f10:	0d92      	lsrs	r2, r2, #22
 8013f12:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	699a      	ldr	r2, [r3, #24]
 8013f18:	187b      	adds	r3, r7, r1
 8013f1a:	881b      	ldrh	r3, [r3, #0]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d307      	bcc.n	8013f30 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	699a      	ldr	r2, [r3, #24]
 8013f24:	187b      	adds	r3, r7, r1
 8013f26:	881b      	ldrh	r3, [r3, #0]
 8013f28:	1ad2      	subs	r2, r2, r3
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	619a      	str	r2, [r3, #24]
 8013f2e:	e002      	b.n	8013f36 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	2200      	movs	r2, #0
 8013f34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	699b      	ldr	r3, [r3, #24]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d000      	beq.n	8013f40 <HAL_PCD_EP_DB_Transmit+0x43c>
 8013f3e:	e0bb      	b.n	80140b8 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	785b      	ldrb	r3, [r3, #1]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d125      	bne.n	8013f94 <HAL_PCD_EP_DB_Transmit+0x490>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2250      	movs	r2, #80	@ 0x50
 8013f54:	5a9b      	ldrh	r3, [r3, r2]
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	001a      	movs	r2, r3
 8013f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f5c:	189b      	adds	r3, r3, r2
 8013f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	00da      	lsls	r2, r3, #3
 8013f66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013f68:	18d3      	adds	r3, r2, r3
 8013f6a:	4aaf      	ldr	r2, [pc, #700]	@ (8014228 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013f6c:	4694      	mov	ip, r2
 8013f6e:	4463      	add	r3, ip
 8013f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013f72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f74:	881b      	ldrh	r3, [r3, #0]
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	059b      	lsls	r3, r3, #22
 8013f7a:	0d9b      	lsrs	r3, r3, #22
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f80:	801a      	strh	r2, [r3, #0]
 8013f82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f84:	881b      	ldrh	r3, [r3, #0]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	4aa9      	ldr	r2, [pc, #676]	@ (8014230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013f8a:	4313      	orrs	r3, r2
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f90:	801a      	strh	r2, [r3, #0]
 8013f92:	e01b      	b.n	8013fcc <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	785b      	ldrb	r3, [r3, #1]
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d117      	bne.n	8013fcc <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2250      	movs	r2, #80	@ 0x50
 8013fa8:	5a9b      	ldrh	r3, [r3, r2]
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	001a      	movs	r2, r3
 8013fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013fb0:	189b      	adds	r3, r3, r2
 8013fb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	781b      	ldrb	r3, [r3, #0]
 8013fb8:	00da      	lsls	r2, r3, #3
 8013fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013fbc:	18d3      	adds	r3, r2, r3
 8013fbe:	4a9a      	ldr	r2, [pc, #616]	@ (8014228 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013fc0:	4694      	mov	ip, r2
 8013fc2:	4463      	add	r3, ip
 8013fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8013fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013fc8:	2200      	movs	r2, #0
 8013fca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	785b      	ldrb	r3, [r3, #1]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d12b      	bne.n	8014032 <HAL_PCD_EP_DB_Transmit+0x52e>
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2250      	movs	r2, #80	@ 0x50
 8013fe6:	5a9b      	ldrh	r3, [r3, r2]
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	001a      	movs	r2, r3
 8013fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013fee:	189b      	adds	r3, r3, r2
 8013ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	00da      	lsls	r2, r3, #3
 8013ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ffa:	18d3      	adds	r3, r2, r3
 8013ffc:	4a8b      	ldr	r2, [pc, #556]	@ (801422c <HAL_PCD_EP_DB_Transmit+0x728>)
 8013ffe:	4694      	mov	ip, r2
 8014000:	4463      	add	r3, ip
 8014002:	2180      	movs	r1, #128	@ 0x80
 8014004:	187a      	adds	r2, r7, r1
 8014006:	6013      	str	r3, [r2, #0]
 8014008:	187b      	adds	r3, r7, r1
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	881b      	ldrh	r3, [r3, #0]
 801400e:	b29b      	uxth	r3, r3
 8014010:	059b      	lsls	r3, r3, #22
 8014012:	0d9b      	lsrs	r3, r3, #22
 8014014:	b29a      	uxth	r2, r3
 8014016:	187b      	adds	r3, r7, r1
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	801a      	strh	r2, [r3, #0]
 801401c:	187b      	adds	r3, r7, r1
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	881b      	ldrh	r3, [r3, #0]
 8014022:	b29b      	uxth	r3, r3
 8014024:	4a82      	ldr	r2, [pc, #520]	@ (8014230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014026:	4313      	orrs	r3, r2
 8014028:	b29a      	uxth	r2, r3
 801402a:	187b      	adds	r3, r7, r1
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	801a      	strh	r2, [r3, #0]
 8014030:	e018      	b.n	8014064 <HAL_PCD_EP_DB_Transmit+0x560>
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	785b      	ldrb	r3, [r3, #1]
 8014036:	2b01      	cmp	r3, #1
 8014038:	d114      	bne.n	8014064 <HAL_PCD_EP_DB_Transmit+0x560>
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2250      	movs	r2, #80	@ 0x50
 8014040:	5a9b      	ldrh	r3, [r3, r2]
 8014042:	b29b      	uxth	r3, r3
 8014044:	001a      	movs	r2, r3
 8014046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014048:	189b      	adds	r3, r3, r2
 801404a:	677b      	str	r3, [r7, #116]	@ 0x74
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	00da      	lsls	r2, r3, #3
 8014052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014054:	18d3      	adds	r3, r2, r3
 8014056:	4a75      	ldr	r2, [pc, #468]	@ (801422c <HAL_PCD_EP_DB_Transmit+0x728>)
 8014058:	4694      	mov	ip, r2
 801405a:	4463      	add	r3, ip
 801405c:	673b      	str	r3, [r7, #112]	@ 0x70
 801405e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014060:	2200      	movs	r2, #0
 8014062:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	781a      	ldrb	r2, [r3, #0]
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	0011      	movs	r1, r2
 801406c:	0018      	movs	r0, r3
 801406e:	f008 fb43 	bl	801c6f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014072:	1dbb      	adds	r3, r7, #6
 8014074:	881a      	ldrh	r2, [r3, #0]
 8014076:	2380      	movs	r3, #128	@ 0x80
 8014078:	01db      	lsls	r3, r3, #7
 801407a:	4013      	ands	r3, r2
 801407c:	d000      	beq.n	8014080 <HAL_PCD_EP_DB_Transmit+0x57c>
 801407e:	e11e      	b.n	80142be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	001a      	movs	r2, r3
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	781b      	ldrb	r3, [r3, #0]
 801408a:	009b      	lsls	r3, r3, #2
 801408c:	18d3      	adds	r3, r2, r3
 801408e:	881b      	ldrh	r3, [r3, #0]
 8014090:	b29a      	uxth	r2, r3
 8014092:	2088      	movs	r0, #136	@ 0x88
 8014094:	183b      	adds	r3, r7, r0
 8014096:	4967      	ldr	r1, [pc, #412]	@ (8014234 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014098:	400a      	ands	r2, r1
 801409a:	801a      	strh	r2, [r3, #0]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	001a      	movs	r2, r3
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	781b      	ldrb	r3, [r3, #0]
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	18d3      	adds	r3, r2, r3
 80140aa:	183a      	adds	r2, r7, r0
 80140ac:	8812      	ldrh	r2, [r2, #0]
 80140ae:	4962      	ldr	r1, [pc, #392]	@ (8014238 <HAL_PCD_EP_DB_Transmit+0x734>)
 80140b0:	430a      	orrs	r2, r1
 80140b2:	b292      	uxth	r2, r2
 80140b4:	801a      	strh	r2, [r3, #0]
 80140b6:	e102      	b.n	80142be <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80140b8:	1dbb      	adds	r3, r7, #6
 80140ba:	881a      	ldrh	r2, [r3, #0]
 80140bc:	2380      	movs	r3, #128	@ 0x80
 80140be:	01db      	lsls	r3, r3, #7
 80140c0:	4013      	ands	r3, r2
 80140c2:	d11a      	bne.n	80140fa <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	001a      	movs	r2, r3
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	781b      	ldrb	r3, [r3, #0]
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	18d3      	adds	r3, r2, r3
 80140d2:	881b      	ldrh	r3, [r3, #0]
 80140d4:	b29a      	uxth	r2, r3
 80140d6:	204e      	movs	r0, #78	@ 0x4e
 80140d8:	183b      	adds	r3, r7, r0
 80140da:	4956      	ldr	r1, [pc, #344]	@ (8014234 <HAL_PCD_EP_DB_Transmit+0x730>)
 80140dc:	400a      	ands	r2, r1
 80140de:	801a      	strh	r2, [r3, #0]
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	001a      	movs	r2, r3
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	18d3      	adds	r3, r2, r3
 80140ee:	183a      	adds	r2, r7, r0
 80140f0:	8812      	ldrh	r2, [r2, #0]
 80140f2:	4951      	ldr	r1, [pc, #324]	@ (8014238 <HAL_PCD_EP_DB_Transmit+0x734>)
 80140f4:	430a      	orrs	r2, r1
 80140f6:	b292      	uxth	r2, r2
 80140f8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	2224      	movs	r2, #36	@ 0x24
 80140fe:	5c9b      	ldrb	r3, [r3, r2]
 8014100:	2b01      	cmp	r3, #1
 8014102:	d000      	beq.n	8014106 <HAL_PCD_EP_DB_Transmit+0x602>
 8014104:	e0db      	b.n	80142be <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	695a      	ldr	r2, [r3, #20]
 801410a:	2186      	movs	r1, #134	@ 0x86
 801410c:	187b      	adds	r3, r7, r1
 801410e:	881b      	ldrh	r3, [r3, #0]
 8014110:	18d2      	adds	r2, r2, r3
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	69da      	ldr	r2, [r3, #28]
 801411a:	187b      	adds	r3, r7, r1
 801411c:	881b      	ldrh	r3, [r3, #0]
 801411e:	18d2      	adds	r2, r2, r3
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	6a1a      	ldr	r2, [r3, #32]
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	691b      	ldr	r3, [r3, #16]
 801412c:	429a      	cmp	r2, r3
 801412e:	d30c      	bcc.n	801414a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	691b      	ldr	r3, [r3, #16]
 8014134:	218c      	movs	r1, #140	@ 0x8c
 8014136:	187a      	adds	r2, r7, r1
 8014138:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	6a1a      	ldr	r2, [r3, #32]
 801413e:	187b      	adds	r3, r7, r1
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	1ad2      	subs	r2, r2, r3
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	621a      	str	r2, [r3, #32]
 8014148:	e01a      	b.n	8014180 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	6a1b      	ldr	r3, [r3, #32]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d10a      	bne.n	8014168 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014152:	2386      	movs	r3, #134	@ 0x86
 8014154:	18fb      	adds	r3, r7, r3
 8014156:	881b      	ldrh	r3, [r3, #0]
 8014158:	228c      	movs	r2, #140	@ 0x8c
 801415a:	18ba      	adds	r2, r7, r2
 801415c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	2224      	movs	r2, #36	@ 0x24
 8014162:	2100      	movs	r1, #0
 8014164:	5499      	strb	r1, [r3, r2]
 8014166:	e00b      	b.n	8014180 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	6a1b      	ldr	r3, [r3, #32]
 801416c:	228c      	movs	r2, #140	@ 0x8c
 801416e:	18ba      	adds	r2, r7, r2
 8014170:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	2200      	movs	r2, #0
 8014176:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	2224      	movs	r2, #36	@ 0x24
 801417c:	2100      	movs	r1, #0
 801417e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	657b      	str	r3, [r7, #84]	@ 0x54
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	785b      	ldrb	r3, [r3, #1]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d000      	beq.n	8014190 <HAL_PCD_EP_DB_Transmit+0x68c>
 801418e:	e06e      	b.n	801426e <HAL_PCD_EP_DB_Transmit+0x76a>
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2250      	movs	r2, #80	@ 0x50
 801419c:	5a9b      	ldrh	r3, [r3, r2]
 801419e:	b29b      	uxth	r3, r3
 80141a0:	001a      	movs	r2, r3
 80141a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80141a4:	189b      	adds	r3, r3, r2
 80141a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	00da      	lsls	r2, r3, #3
 80141ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80141b0:	18d3      	adds	r3, r2, r3
 80141b2:	4a1e      	ldr	r2, [pc, #120]	@ (801422c <HAL_PCD_EP_DB_Transmit+0x728>)
 80141b4:	4694      	mov	ip, r2
 80141b6:	4463      	add	r3, ip
 80141b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80141ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	059b      	lsls	r3, r3, #22
 80141c2:	0d9b      	lsrs	r3, r3, #22
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141c8:	801a      	strh	r2, [r3, #0]
 80141ca:	228c      	movs	r2, #140	@ 0x8c
 80141cc:	18bb      	adds	r3, r7, r2
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80141d2:	d91a      	bls.n	801420a <HAL_PCD_EP_DB_Transmit+0x706>
 80141d4:	18bb      	adds	r3, r7, r2
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	095b      	lsrs	r3, r3, #5
 80141da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80141dc:	18bb      	adds	r3, r7, r2
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	221f      	movs	r2, #31
 80141e2:	4013      	ands	r3, r2
 80141e4:	d102      	bne.n	80141ec <HAL_PCD_EP_DB_Transmit+0x6e8>
 80141e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80141e8:	3b01      	subs	r3, #1
 80141ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80141ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80141ee:	881b      	ldrh	r3, [r3, #0]
 80141f0:	b29a      	uxth	r2, r3
 80141f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80141f4:	b29b      	uxth	r3, r3
 80141f6:	029b      	lsls	r3, r3, #10
 80141f8:	b29b      	uxth	r3, r3
 80141fa:	4313      	orrs	r3, r2
 80141fc:	b29b      	uxth	r3, r3
 80141fe:	4a0c      	ldr	r2, [pc, #48]	@ (8014230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014200:	4313      	orrs	r3, r2
 8014202:	b29a      	uxth	r2, r3
 8014204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014206:	801a      	strh	r2, [r3, #0]
 8014208:	e04d      	b.n	80142a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801420a:	238c      	movs	r3, #140	@ 0x8c
 801420c:	18fb      	adds	r3, r7, r3
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d113      	bne.n	801423c <HAL_PCD_EP_DB_Transmit+0x738>
 8014214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014216:	881b      	ldrh	r3, [r3, #0]
 8014218:	b29b      	uxth	r3, r3
 801421a:	4a05      	ldr	r2, [pc, #20]	@ (8014230 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801421c:	4313      	orrs	r3, r2
 801421e:	b29a      	uxth	r2, r3
 8014220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014222:	801a      	strh	r2, [r3, #0]
 8014224:	e03f      	b.n	80142a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014226:	46c0      	nop			@ (mov r8, r8)
 8014228:	00000402 	.word	0x00000402
 801422c:	00000406 	.word	0x00000406
 8014230:	ffff8000 	.word	0xffff8000
 8014234:	ffff8f8f 	.word	0xffff8f8f
 8014238:	ffffc080 	.word	0xffffc080
 801423c:	228c      	movs	r2, #140	@ 0x8c
 801423e:	18bb      	adds	r3, r7, r2
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	085b      	lsrs	r3, r3, #1
 8014244:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014246:	18bb      	adds	r3, r7, r2
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	2201      	movs	r2, #1
 801424c:	4013      	ands	r3, r2
 801424e:	d002      	beq.n	8014256 <HAL_PCD_EP_DB_Transmit+0x752>
 8014250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014252:	3301      	adds	r3, #1
 8014254:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014256:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014258:	881b      	ldrh	r3, [r3, #0]
 801425a:	b29a      	uxth	r2, r3
 801425c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801425e:	b29b      	uxth	r3, r3
 8014260:	029b      	lsls	r3, r3, #10
 8014262:	b29b      	uxth	r3, r3
 8014264:	4313      	orrs	r3, r2
 8014266:	b29a      	uxth	r2, r3
 8014268:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801426a:	801a      	strh	r2, [r3, #0]
 801426c:	e01b      	b.n	80142a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	785b      	ldrb	r3, [r3, #1]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d117      	bne.n	80142a6 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	2250      	movs	r2, #80	@ 0x50
 801427c:	5a9b      	ldrh	r3, [r3, r2]
 801427e:	b29b      	uxth	r3, r3
 8014280:	001a      	movs	r2, r3
 8014282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014284:	189b      	adds	r3, r3, r2
 8014286:	657b      	str	r3, [r7, #84]	@ 0x54
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	00da      	lsls	r2, r3, #3
 801428e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014290:	18d3      	adds	r3, r2, r3
 8014292:	4a21      	ldr	r2, [pc, #132]	@ (8014318 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014294:	4694      	mov	ip, r2
 8014296:	4463      	add	r3, ip
 8014298:	653b      	str	r3, [r7, #80]	@ 0x50
 801429a:	238c      	movs	r3, #140	@ 0x8c
 801429c:	18fb      	adds	r3, r7, r3
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	b29a      	uxth	r2, r3
 80142a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	6818      	ldr	r0, [r3, #0]
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	6959      	ldr	r1, [r3, #20]
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	895a      	ldrh	r2, [r3, #10]
 80142b2:	238c      	movs	r3, #140	@ 0x8c
 80142b4:	18fb      	adds	r3, r7, r3
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	f006 f999 	bl	801a5f0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	001a      	movs	r2, r3
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	781b      	ldrb	r3, [r3, #0]
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	18d3      	adds	r3, r2, r3
 80142cc:	881b      	ldrh	r3, [r3, #0]
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	2014      	movs	r0, #20
 80142d2:	183b      	adds	r3, r7, r0
 80142d4:	4911      	ldr	r1, [pc, #68]	@ (801431c <HAL_PCD_EP_DB_Transmit+0x818>)
 80142d6:	400a      	ands	r2, r1
 80142d8:	801a      	strh	r2, [r3, #0]
 80142da:	183b      	adds	r3, r7, r0
 80142dc:	183a      	adds	r2, r7, r0
 80142de:	8812      	ldrh	r2, [r2, #0]
 80142e0:	2110      	movs	r1, #16
 80142e2:	404a      	eors	r2, r1
 80142e4:	801a      	strh	r2, [r3, #0]
 80142e6:	183b      	adds	r3, r7, r0
 80142e8:	183a      	adds	r2, r7, r0
 80142ea:	8812      	ldrh	r2, [r2, #0]
 80142ec:	2120      	movs	r1, #32
 80142ee:	404a      	eors	r2, r1
 80142f0:	801a      	strh	r2, [r3, #0]
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	001a      	movs	r2, r3
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	781b      	ldrb	r3, [r3, #0]
 80142fc:	009b      	lsls	r3, r3, #2
 80142fe:	18d3      	adds	r3, r2, r3
 8014300:	183a      	adds	r2, r7, r0
 8014302:	8812      	ldrh	r2, [r2, #0]
 8014304:	4906      	ldr	r1, [pc, #24]	@ (8014320 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014306:	430a      	orrs	r2, r1
 8014308:	b292      	uxth	r2, r2
 801430a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801430c:	2300      	movs	r3, #0
}
 801430e:	0018      	movs	r0, r3
 8014310:	46bd      	mov	sp, r7
 8014312:	b024      	add	sp, #144	@ 0x90
 8014314:	bd80      	pop	{r7, pc}
 8014316:	46c0      	nop			@ (mov r8, r8)
 8014318:	00000406 	.word	0x00000406
 801431c:	ffff8fbf 	.word	0xffff8fbf
 8014320:	ffff8080 	.word	0xffff8080

08014324 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014324:	b590      	push	{r4, r7, lr}
 8014326:	b087      	sub	sp, #28
 8014328:	af00      	add	r7, sp, #0
 801432a:	60f8      	str	r0, [r7, #12]
 801432c:	0008      	movs	r0, r1
 801432e:	0011      	movs	r1, r2
 8014330:	607b      	str	r3, [r7, #4]
 8014332:	240a      	movs	r4, #10
 8014334:	193b      	adds	r3, r7, r4
 8014336:	1c02      	adds	r2, r0, #0
 8014338:	801a      	strh	r2, [r3, #0]
 801433a:	2308      	movs	r3, #8
 801433c:	18fb      	adds	r3, r7, r3
 801433e:	1c0a      	adds	r2, r1, #0
 8014340:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014342:	0021      	movs	r1, r4
 8014344:	187b      	adds	r3, r7, r1
 8014346:	881b      	ldrh	r3, [r3, #0]
 8014348:	2280      	movs	r2, #128	@ 0x80
 801434a:	4013      	ands	r3, r2
 801434c:	b29b      	uxth	r3, r3
 801434e:	2b00      	cmp	r3, #0
 8014350:	d00c      	beq.n	801436c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014352:	187b      	adds	r3, r7, r1
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	2207      	movs	r2, #7
 8014358:	4013      	ands	r3, r2
 801435a:	1c5a      	adds	r2, r3, #1
 801435c:	0013      	movs	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	189b      	adds	r3, r3, r2
 8014362:	00db      	lsls	r3, r3, #3
 8014364:	68fa      	ldr	r2, [r7, #12]
 8014366:	18d3      	adds	r3, r2, r3
 8014368:	617b      	str	r3, [r7, #20]
 801436a:	e00b      	b.n	8014384 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801436c:	230a      	movs	r3, #10
 801436e:	18fb      	adds	r3, r7, r3
 8014370:	881a      	ldrh	r2, [r3, #0]
 8014372:	0013      	movs	r3, r2
 8014374:	009b      	lsls	r3, r3, #2
 8014376:	189b      	adds	r3, r3, r2
 8014378:	00db      	lsls	r3, r3, #3
 801437a:	3369      	adds	r3, #105	@ 0x69
 801437c:	33ff      	adds	r3, #255	@ 0xff
 801437e:	68fa      	ldr	r2, [r7, #12]
 8014380:	18d3      	adds	r3, r2, r3
 8014382:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014384:	2308      	movs	r3, #8
 8014386:	18fb      	adds	r3, r7, r3
 8014388:	881b      	ldrh	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d107      	bne.n	801439e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	2200      	movs	r2, #0
 8014392:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	b29a      	uxth	r2, r3
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	80da      	strh	r2, [r3, #6]
 801439c:	e00b      	b.n	80143b6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	2201      	movs	r2, #1
 80143a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	b29a      	uxth	r2, r3
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	0c1b      	lsrs	r3, r3, #16
 80143b0:	b29a      	uxth	r2, r3
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80143b6:	2300      	movs	r3, #0
}
 80143b8:	0018      	movs	r0, r3
 80143ba:	46bd      	mov	sp, r7
 80143bc:	b007      	add	sp, #28
 80143be:	bd90      	pop	{r4, r7, pc}

080143c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b084      	sub	sp, #16
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	23ba      	movs	r3, #186	@ 0xba
 80143d2:	009b      	lsls	r3, r3, #2
 80143d4:	2101      	movs	r1, #1
 80143d6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80143d8:	687a      	ldr	r2, [r7, #4]
 80143da:	23b8      	movs	r3, #184	@ 0xb8
 80143dc:	009b      	lsls	r3, r3, #2
 80143de:	2100      	movs	r1, #0
 80143e0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2254      	movs	r2, #84	@ 0x54
 80143e6:	5a9b      	ldrh	r3, [r3, r2]
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	2201      	movs	r2, #1
 80143ec:	4313      	orrs	r3, r2
 80143ee:	b299      	uxth	r1, r3
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2254      	movs	r2, #84	@ 0x54
 80143f4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2254      	movs	r2, #84	@ 0x54
 80143fa:	5a9b      	ldrh	r3, [r3, r2]
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	2202      	movs	r2, #2
 8014400:	4313      	orrs	r3, r2
 8014402:	b299      	uxth	r1, r3
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2254      	movs	r2, #84	@ 0x54
 8014408:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801440a:	2300      	movs	r3, #0
}
 801440c:	0018      	movs	r0, r3
 801440e:	46bd      	mov	sp, r7
 8014410:	b004      	add	sp, #16
 8014412:	bd80      	pop	{r7, pc}

08014414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	000a      	movs	r2, r1
 801441e:	1cfb      	adds	r3, r7, #3
 8014420:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014422:	46c0      	nop			@ (mov r8, r8)
 8014424:	46bd      	mov	sp, r7
 8014426:	b002      	add	sp, #8
 8014428:	bd80      	pop	{r7, pc}
	...

0801442c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014430:	4b04      	ldr	r3, [pc, #16]	@ (8014444 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014432:	681a      	ldr	r2, [r3, #0]
 8014434:	4b03      	ldr	r3, [pc, #12]	@ (8014444 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014436:	2180      	movs	r1, #128	@ 0x80
 8014438:	0049      	lsls	r1, r1, #1
 801443a:	430a      	orrs	r2, r1
 801443c:	601a      	str	r2, [r3, #0]
}
 801443e:	46c0      	nop			@ (mov r8, r8)
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	40007000 	.word	0x40007000

08014448 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801444c:	4b04      	ldr	r3, [pc, #16]	@ (8014460 <HAL_PWR_DisableBkUpAccess+0x18>)
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	4b03      	ldr	r3, [pc, #12]	@ (8014460 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014452:	4904      	ldr	r1, [pc, #16]	@ (8014464 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014454:	400a      	ands	r2, r1
 8014456:	601a      	str	r2, [r3, #0]
}
 8014458:	46c0      	nop			@ (mov r8, r8)
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	46c0      	nop			@ (mov r8, r8)
 8014460:	40007000 	.word	0x40007000
 8014464:	fffffeff 	.word	0xfffffeff

08014468 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b086      	sub	sp, #24
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	000a      	movs	r2, r1
 8014472:	1cfb      	adds	r3, r7, #3
 8014474:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014476:	2300      	movs	r3, #0
 8014478:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801447a:	4b25      	ldr	r3, [pc, #148]	@ (8014510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	2380      	movs	r3, #128	@ 0x80
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	4013      	ands	r3, r2
 8014484:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014486:	4b23      	ldr	r3, [pc, #140]	@ (8014514 <HAL_PWR_EnterSTOPMode+0xac>)
 8014488:	6a1b      	ldr	r3, [r3, #32]
 801448a:	2201      	movs	r2, #1
 801448c:	4013      	ands	r3, r2
 801448e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d008      	beq.n	80144a8 <HAL_PWR_EnterSTOPMode+0x40>
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d005      	beq.n	80144a8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801449c:	4b1c      	ldr	r3, [pc, #112]	@ (8014510 <HAL_PWR_EnterSTOPMode+0xa8>)
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	4b1b      	ldr	r3, [pc, #108]	@ (8014510 <HAL_PWR_EnterSTOPMode+0xa8>)
 80144a2:	491d      	ldr	r1, [pc, #116]	@ (8014518 <HAL_PWR_EnterSTOPMode+0xb0>)
 80144a4:	400a      	ands	r2, r1
 80144a6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80144a8:	4b19      	ldr	r3, [pc, #100]	@ (8014510 <HAL_PWR_EnterSTOPMode+0xa8>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	2203      	movs	r2, #3
 80144b2:	4393      	bics	r3, r2
 80144b4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80144b6:	697a      	ldr	r2, [r7, #20]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	4313      	orrs	r3, r2
 80144bc:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80144be:	4b14      	ldr	r3, [pc, #80]	@ (8014510 <HAL_PWR_EnterSTOPMode+0xa8>)
 80144c0:	697a      	ldr	r2, [r7, #20]
 80144c2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80144c4:	4b15      	ldr	r3, [pc, #84]	@ (801451c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144c6:	691a      	ldr	r2, [r3, #16]
 80144c8:	4b14      	ldr	r3, [pc, #80]	@ (801451c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144ca:	2104      	movs	r1, #4
 80144cc:	430a      	orrs	r2, r1
 80144ce:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80144d0:	1cfb      	adds	r3, r7, #3
 80144d2:	781b      	ldrb	r3, [r3, #0]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d101      	bne.n	80144dc <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80144d8:	bf30      	wfi
 80144da:	e002      	b.n	80144e2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80144dc:	bf40      	sev
    __WFE();
 80144de:	bf20      	wfe
    __WFE();
 80144e0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80144e2:	4b0e      	ldr	r3, [pc, #56]	@ (801451c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144e4:	691a      	ldr	r2, [r3, #16]
 80144e6:	4b0d      	ldr	r3, [pc, #52]	@ (801451c <HAL_PWR_EnterSTOPMode+0xb4>)
 80144e8:	2104      	movs	r1, #4
 80144ea:	438a      	bics	r2, r1
 80144ec:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d009      	beq.n	8014508 <HAL_PWR_EnterSTOPMode+0xa0>
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d006      	beq.n	8014508 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80144fa:	4b05      	ldr	r3, [pc, #20]	@ (8014510 <HAL_PWR_EnterSTOPMode+0xa8>)
 80144fc:	681a      	ldr	r2, [r3, #0]
 80144fe:	4b04      	ldr	r3, [pc, #16]	@ (8014510 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014500:	2180      	movs	r1, #128	@ 0x80
 8014502:	0089      	lsls	r1, r1, #2
 8014504:	430a      	orrs	r2, r1
 8014506:	601a      	str	r2, [r3, #0]
  }
}
 8014508:	46c0      	nop			@ (mov r8, r8)
 801450a:	46bd      	mov	sp, r7
 801450c:	b006      	add	sp, #24
 801450e:	bd80      	pop	{r7, pc}
 8014510:	40007000 	.word	0x40007000
 8014514:	40010000 	.word	0x40010000
 8014518:	fffffdff 	.word	0xfffffdff
 801451c:	e000ed00 	.word	0xe000ed00

08014520 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014524:	4b07      	ldr	r3, [pc, #28]	@ (8014544 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014526:	681a      	ldr	r2, [r3, #0]
 8014528:	4b06      	ldr	r3, [pc, #24]	@ (8014544 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801452a:	2102      	movs	r1, #2
 801452c:	430a      	orrs	r2, r1
 801452e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014530:	4b05      	ldr	r3, [pc, #20]	@ (8014548 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014532:	691a      	ldr	r2, [r3, #16]
 8014534:	4b04      	ldr	r3, [pc, #16]	@ (8014548 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014536:	2104      	movs	r1, #4
 8014538:	430a      	orrs	r2, r1
 801453a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801453c:	bf30      	wfi
}
 801453e:	46c0      	nop			@ (mov r8, r8)
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	40007000 	.word	0x40007000
 8014548:	e000ed00 	.word	0xe000ed00

0801454c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801454c:	b5b0      	push	{r4, r5, r7, lr}
 801454e:	b08a      	sub	sp, #40	@ 0x28
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d102      	bne.n	8014560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801455a:	2301      	movs	r3, #1
 801455c:	f000 fbbf 	bl	8014cde <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014560:	4bc9      	ldr	r3, [pc, #804]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014562:	68db      	ldr	r3, [r3, #12]
 8014564:	220c      	movs	r2, #12
 8014566:	4013      	ands	r3, r2
 8014568:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801456a:	4bc7      	ldr	r3, [pc, #796]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801456c:	68da      	ldr	r2, [r3, #12]
 801456e:	2380      	movs	r3, #128	@ 0x80
 8014570:	025b      	lsls	r3, r3, #9
 8014572:	4013      	ands	r3, r2
 8014574:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2201      	movs	r2, #1
 801457c:	4013      	ands	r3, r2
 801457e:	d100      	bne.n	8014582 <HAL_RCC_OscConfig+0x36>
 8014580:	e07e      	b.n	8014680 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014582:	69fb      	ldr	r3, [r7, #28]
 8014584:	2b08      	cmp	r3, #8
 8014586:	d007      	beq.n	8014598 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	2b0c      	cmp	r3, #12
 801458c:	d112      	bne.n	80145b4 <HAL_RCC_OscConfig+0x68>
 801458e:	69ba      	ldr	r2, [r7, #24]
 8014590:	2380      	movs	r3, #128	@ 0x80
 8014592:	025b      	lsls	r3, r3, #9
 8014594:	429a      	cmp	r2, r3
 8014596:	d10d      	bne.n	80145b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014598:	4bbb      	ldr	r3, [pc, #748]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	2380      	movs	r3, #128	@ 0x80
 801459e:	029b      	lsls	r3, r3, #10
 80145a0:	4013      	ands	r3, r2
 80145a2:	d100      	bne.n	80145a6 <HAL_RCC_OscConfig+0x5a>
 80145a4:	e06b      	b.n	801467e <HAL_RCC_OscConfig+0x132>
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d167      	bne.n	801467e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80145ae:	2301      	movs	r3, #1
 80145b0:	f000 fb95 	bl	8014cde <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	685a      	ldr	r2, [r3, #4]
 80145b8:	2380      	movs	r3, #128	@ 0x80
 80145ba:	025b      	lsls	r3, r3, #9
 80145bc:	429a      	cmp	r2, r3
 80145be:	d107      	bne.n	80145d0 <HAL_RCC_OscConfig+0x84>
 80145c0:	4bb1      	ldr	r3, [pc, #708]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80145c2:	681a      	ldr	r2, [r3, #0]
 80145c4:	4bb0      	ldr	r3, [pc, #704]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80145c6:	2180      	movs	r1, #128	@ 0x80
 80145c8:	0249      	lsls	r1, r1, #9
 80145ca:	430a      	orrs	r2, r1
 80145cc:	601a      	str	r2, [r3, #0]
 80145ce:	e027      	b.n	8014620 <HAL_RCC_OscConfig+0xd4>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	685a      	ldr	r2, [r3, #4]
 80145d4:	23a0      	movs	r3, #160	@ 0xa0
 80145d6:	02db      	lsls	r3, r3, #11
 80145d8:	429a      	cmp	r2, r3
 80145da:	d10e      	bne.n	80145fa <HAL_RCC_OscConfig+0xae>
 80145dc:	4baa      	ldr	r3, [pc, #680]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	4ba9      	ldr	r3, [pc, #676]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80145e2:	2180      	movs	r1, #128	@ 0x80
 80145e4:	02c9      	lsls	r1, r1, #11
 80145e6:	430a      	orrs	r2, r1
 80145e8:	601a      	str	r2, [r3, #0]
 80145ea:	4ba7      	ldr	r3, [pc, #668]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	4ba6      	ldr	r3, [pc, #664]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80145f0:	2180      	movs	r1, #128	@ 0x80
 80145f2:	0249      	lsls	r1, r1, #9
 80145f4:	430a      	orrs	r2, r1
 80145f6:	601a      	str	r2, [r3, #0]
 80145f8:	e012      	b.n	8014620 <HAL_RCC_OscConfig+0xd4>
 80145fa:	4ba3      	ldr	r3, [pc, #652]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	4ba2      	ldr	r3, [pc, #648]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014600:	49a2      	ldr	r1, [pc, #648]	@ (801488c <HAL_RCC_OscConfig+0x340>)
 8014602:	400a      	ands	r2, r1
 8014604:	601a      	str	r2, [r3, #0]
 8014606:	4ba0      	ldr	r3, [pc, #640]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014608:	681a      	ldr	r2, [r3, #0]
 801460a:	2380      	movs	r3, #128	@ 0x80
 801460c:	025b      	lsls	r3, r3, #9
 801460e:	4013      	ands	r3, r2
 8014610:	60fb      	str	r3, [r7, #12]
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	4b9c      	ldr	r3, [pc, #624]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014616:	681a      	ldr	r2, [r3, #0]
 8014618:	4b9b      	ldr	r3, [pc, #620]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801461a:	499d      	ldr	r1, [pc, #628]	@ (8014890 <HAL_RCC_OscConfig+0x344>)
 801461c:	400a      	ands	r2, r1
 801461e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	685b      	ldr	r3, [r3, #4]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d015      	beq.n	8014654 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014628:	f7f9 fe76 	bl	800e318 <HAL_GetTick>
 801462c:	0003      	movs	r3, r0
 801462e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014630:	e009      	b.n	8014646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014632:	f7f9 fe71 	bl	800e318 <HAL_GetTick>
 8014636:	0002      	movs	r2, r0
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	1ad3      	subs	r3, r2, r3
 801463c:	2b64      	cmp	r3, #100	@ 0x64
 801463e:	d902      	bls.n	8014646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014640:	2303      	movs	r3, #3
 8014642:	f000 fb4c 	bl	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014646:	4b90      	ldr	r3, [pc, #576]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	2380      	movs	r3, #128	@ 0x80
 801464c:	029b      	lsls	r3, r3, #10
 801464e:	4013      	ands	r3, r2
 8014650:	d0ef      	beq.n	8014632 <HAL_RCC_OscConfig+0xe6>
 8014652:	e015      	b.n	8014680 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014654:	f7f9 fe60 	bl	800e318 <HAL_GetTick>
 8014658:	0003      	movs	r3, r0
 801465a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801465c:	e008      	b.n	8014670 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801465e:	f7f9 fe5b 	bl	800e318 <HAL_GetTick>
 8014662:	0002      	movs	r2, r0
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	1ad3      	subs	r3, r2, r3
 8014668:	2b64      	cmp	r3, #100	@ 0x64
 801466a:	d901      	bls.n	8014670 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801466c:	2303      	movs	r3, #3
 801466e:	e336      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014670:	4b85      	ldr	r3, [pc, #532]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014672:	681a      	ldr	r2, [r3, #0]
 8014674:	2380      	movs	r3, #128	@ 0x80
 8014676:	029b      	lsls	r3, r3, #10
 8014678:	4013      	ands	r3, r2
 801467a:	d1f0      	bne.n	801465e <HAL_RCC_OscConfig+0x112>
 801467c:	e000      	b.n	8014680 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801467e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2202      	movs	r2, #2
 8014686:	4013      	ands	r3, r2
 8014688:	d100      	bne.n	801468c <HAL_RCC_OscConfig+0x140>
 801468a:	e099      	b.n	80147c0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8014692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014694:	2220      	movs	r2, #32
 8014696:	4013      	ands	r3, r2
 8014698:	d009      	beq.n	80146ae <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801469a:	4b7b      	ldr	r3, [pc, #492]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	4b7a      	ldr	r3, [pc, #488]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80146a0:	2120      	movs	r1, #32
 80146a2:	430a      	orrs	r2, r1
 80146a4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80146a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146a8:	2220      	movs	r2, #32
 80146aa:	4393      	bics	r3, r2
 80146ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80146ae:	69fb      	ldr	r3, [r7, #28]
 80146b0:	2b04      	cmp	r3, #4
 80146b2:	d005      	beq.n	80146c0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	2b0c      	cmp	r3, #12
 80146b8:	d13e      	bne.n	8014738 <HAL_RCC_OscConfig+0x1ec>
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d13b      	bne.n	8014738 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80146c0:	4b71      	ldr	r3, [pc, #452]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	2204      	movs	r2, #4
 80146c6:	4013      	ands	r3, r2
 80146c8:	d004      	beq.n	80146d4 <HAL_RCC_OscConfig+0x188>
 80146ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d101      	bne.n	80146d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80146d0:	2301      	movs	r3, #1
 80146d2:	e304      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80146d4:	4b6c      	ldr	r3, [pc, #432]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	4a6e      	ldr	r2, [pc, #440]	@ (8014894 <HAL_RCC_OscConfig+0x348>)
 80146da:	4013      	ands	r3, r2
 80146dc:	0019      	movs	r1, r3
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	691b      	ldr	r3, [r3, #16]
 80146e2:	021a      	lsls	r2, r3, #8
 80146e4:	4b68      	ldr	r3, [pc, #416]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80146e6:	430a      	orrs	r2, r1
 80146e8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80146ea:	4b67      	ldr	r3, [pc, #412]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2209      	movs	r2, #9
 80146f0:	4393      	bics	r3, r2
 80146f2:	0019      	movs	r1, r3
 80146f4:	4b64      	ldr	r3, [pc, #400]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80146f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80146f8:	430a      	orrs	r2, r1
 80146fa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80146fc:	f000 fc42 	bl	8014f84 <HAL_RCC_GetSysClockFreq>
 8014700:	0001      	movs	r1, r0
 8014702:	4b61      	ldr	r3, [pc, #388]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014704:	68db      	ldr	r3, [r3, #12]
 8014706:	091b      	lsrs	r3, r3, #4
 8014708:	220f      	movs	r2, #15
 801470a:	4013      	ands	r3, r2
 801470c:	4a62      	ldr	r2, [pc, #392]	@ (8014898 <HAL_RCC_OscConfig+0x34c>)
 801470e:	5cd3      	ldrb	r3, [r2, r3]
 8014710:	000a      	movs	r2, r1
 8014712:	40da      	lsrs	r2, r3
 8014714:	4b61      	ldr	r3, [pc, #388]	@ (801489c <HAL_RCC_OscConfig+0x350>)
 8014716:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8014718:	4b61      	ldr	r3, [pc, #388]	@ (80148a0 <HAL_RCC_OscConfig+0x354>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2513      	movs	r5, #19
 801471e:	197c      	adds	r4, r7, r5
 8014720:	0018      	movs	r0, r3
 8014722:	f7f9 fdb3 	bl	800e28c <HAL_InitTick>
 8014726:	0003      	movs	r3, r0
 8014728:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801472a:	197b      	adds	r3, r7, r5
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d046      	beq.n	80147c0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8014732:	197b      	adds	r3, r7, r5
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	e2d2      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8014738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801473a:	2b00      	cmp	r3, #0
 801473c:	d027      	beq.n	801478e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801473e:	4b52      	ldr	r3, [pc, #328]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	2209      	movs	r2, #9
 8014744:	4393      	bics	r3, r2
 8014746:	0019      	movs	r1, r3
 8014748:	4b4f      	ldr	r3, [pc, #316]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801474a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801474c:	430a      	orrs	r2, r1
 801474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014750:	f7f9 fde2 	bl	800e318 <HAL_GetTick>
 8014754:	0003      	movs	r3, r0
 8014756:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014758:	e008      	b.n	801476c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801475a:	f7f9 fddd 	bl	800e318 <HAL_GetTick>
 801475e:	0002      	movs	r2, r0
 8014760:	697b      	ldr	r3, [r7, #20]
 8014762:	1ad3      	subs	r3, r2, r3
 8014764:	2b02      	cmp	r3, #2
 8014766:	d901      	bls.n	801476c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8014768:	2303      	movs	r3, #3
 801476a:	e2b8      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801476c:	4b46      	ldr	r3, [pc, #280]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2204      	movs	r2, #4
 8014772:	4013      	ands	r3, r2
 8014774:	d0f1      	beq.n	801475a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014776:	4b44      	ldr	r3, [pc, #272]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	4a46      	ldr	r2, [pc, #280]	@ (8014894 <HAL_RCC_OscConfig+0x348>)
 801477c:	4013      	ands	r3, r2
 801477e:	0019      	movs	r1, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	691b      	ldr	r3, [r3, #16]
 8014784:	021a      	lsls	r2, r3, #8
 8014786:	4b40      	ldr	r3, [pc, #256]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014788:	430a      	orrs	r2, r1
 801478a:	605a      	str	r2, [r3, #4]
 801478c:	e018      	b.n	80147c0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801478e:	4b3e      	ldr	r3, [pc, #248]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	4b3d      	ldr	r3, [pc, #244]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014794:	2101      	movs	r1, #1
 8014796:	438a      	bics	r2, r1
 8014798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801479a:	f7f9 fdbd 	bl	800e318 <HAL_GetTick>
 801479e:	0003      	movs	r3, r0
 80147a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80147a2:	e008      	b.n	80147b6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80147a4:	f7f9 fdb8 	bl	800e318 <HAL_GetTick>
 80147a8:	0002      	movs	r2, r0
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d901      	bls.n	80147b6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80147b2:	2303      	movs	r3, #3
 80147b4:	e293      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80147b6:	4b34      	ldr	r3, [pc, #208]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	2204      	movs	r2, #4
 80147bc:	4013      	ands	r3, r2
 80147be:	d1f1      	bne.n	80147a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2210      	movs	r2, #16
 80147c6:	4013      	ands	r3, r2
 80147c8:	d100      	bne.n	80147cc <HAL_RCC_OscConfig+0x280>
 80147ca:	e0a2      	b.n	8014912 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80147cc:	69fb      	ldr	r3, [r7, #28]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d140      	bne.n	8014854 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80147d2:	4b2d      	ldr	r3, [pc, #180]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	2380      	movs	r3, #128	@ 0x80
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	4013      	ands	r3, r2
 80147dc:	d005      	beq.n	80147ea <HAL_RCC_OscConfig+0x29e>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	69db      	ldr	r3, [r3, #28]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d101      	bne.n	80147ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80147e6:	2301      	movs	r3, #1
 80147e8:	e279      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80147ea:	4b27      	ldr	r3, [pc, #156]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	4a2d      	ldr	r2, [pc, #180]	@ (80148a4 <HAL_RCC_OscConfig+0x358>)
 80147f0:	4013      	ands	r3, r2
 80147f2:	0019      	movs	r1, r3
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80147f8:	4b23      	ldr	r3, [pc, #140]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 80147fa:	430a      	orrs	r2, r1
 80147fc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80147fe:	4b22      	ldr	r3, [pc, #136]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014800:	685b      	ldr	r3, [r3, #4]
 8014802:	021b      	lsls	r3, r3, #8
 8014804:	0a19      	lsrs	r1, r3, #8
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6a1b      	ldr	r3, [r3, #32]
 801480a:	061a      	lsls	r2, r3, #24
 801480c:	4b1e      	ldr	r3, [pc, #120]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801480e:	430a      	orrs	r2, r1
 8014810:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014816:	0b5b      	lsrs	r3, r3, #13
 8014818:	3301      	adds	r3, #1
 801481a:	2280      	movs	r2, #128	@ 0x80
 801481c:	0212      	lsls	r2, r2, #8
 801481e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8014820:	4b19      	ldr	r3, [pc, #100]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	091b      	lsrs	r3, r3, #4
 8014826:	210f      	movs	r1, #15
 8014828:	400b      	ands	r3, r1
 801482a:	491b      	ldr	r1, [pc, #108]	@ (8014898 <HAL_RCC_OscConfig+0x34c>)
 801482c:	5ccb      	ldrb	r3, [r1, r3]
 801482e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014830:	4b1a      	ldr	r3, [pc, #104]	@ (801489c <HAL_RCC_OscConfig+0x350>)
 8014832:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8014834:	4b1a      	ldr	r3, [pc, #104]	@ (80148a0 <HAL_RCC_OscConfig+0x354>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2513      	movs	r5, #19
 801483a:	197c      	adds	r4, r7, r5
 801483c:	0018      	movs	r0, r3
 801483e:	f7f9 fd25 	bl	800e28c <HAL_InitTick>
 8014842:	0003      	movs	r3, r0
 8014844:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8014846:	197b      	adds	r3, r7, r5
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d061      	beq.n	8014912 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801484e:	197b      	adds	r3, r7, r5
 8014850:	781b      	ldrb	r3, [r3, #0]
 8014852:	e244      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	69db      	ldr	r3, [r3, #28]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d040      	beq.n	80148de <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801485c:	4b0a      	ldr	r3, [pc, #40]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	4b09      	ldr	r3, [pc, #36]	@ (8014888 <HAL_RCC_OscConfig+0x33c>)
 8014862:	2180      	movs	r1, #128	@ 0x80
 8014864:	0049      	lsls	r1, r1, #1
 8014866:	430a      	orrs	r2, r1
 8014868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801486a:	f7f9 fd55 	bl	800e318 <HAL_GetTick>
 801486e:	0003      	movs	r3, r0
 8014870:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014872:	e019      	b.n	80148a8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014874:	f7f9 fd50 	bl	800e318 <HAL_GetTick>
 8014878:	0002      	movs	r2, r0
 801487a:	697b      	ldr	r3, [r7, #20]
 801487c:	1ad3      	subs	r3, r2, r3
 801487e:	2b02      	cmp	r3, #2
 8014880:	d912      	bls.n	80148a8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8014882:	2303      	movs	r3, #3
 8014884:	e22b      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
 8014886:	46c0      	nop			@ (mov r8, r8)
 8014888:	40021000 	.word	0x40021000
 801488c:	fffeffff 	.word	0xfffeffff
 8014890:	fffbffff 	.word	0xfffbffff
 8014894:	ffffe0ff 	.word	0xffffe0ff
 8014898:	080248b8 	.word	0x080248b8
 801489c:	200000c8 	.word	0x200000c8
 80148a0:	200000d8 	.word	0x200000d8
 80148a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80148a8:	4bca      	ldr	r3, [pc, #808]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80148aa:	681a      	ldr	r2, [r3, #0]
 80148ac:	2380      	movs	r3, #128	@ 0x80
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	4013      	ands	r3, r2
 80148b2:	d0df      	beq.n	8014874 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80148b4:	4bc7      	ldr	r3, [pc, #796]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80148b6:	685b      	ldr	r3, [r3, #4]
 80148b8:	4ac7      	ldr	r2, [pc, #796]	@ (8014bd8 <HAL_RCC_OscConfig+0x68c>)
 80148ba:	4013      	ands	r3, r2
 80148bc:	0019      	movs	r1, r3
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148c2:	4bc4      	ldr	r3, [pc, #784]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80148c4:	430a      	orrs	r2, r1
 80148c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80148c8:	4bc2      	ldr	r3, [pc, #776]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	021b      	lsls	r3, r3, #8
 80148ce:	0a19      	lsrs	r1, r3, #8
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6a1b      	ldr	r3, [r3, #32]
 80148d4:	061a      	lsls	r2, r3, #24
 80148d6:	4bbf      	ldr	r3, [pc, #764]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80148d8:	430a      	orrs	r2, r1
 80148da:	605a      	str	r2, [r3, #4]
 80148dc:	e019      	b.n	8014912 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80148de:	4bbd      	ldr	r3, [pc, #756]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	4bbc      	ldr	r3, [pc, #752]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80148e4:	49bd      	ldr	r1, [pc, #756]	@ (8014bdc <HAL_RCC_OscConfig+0x690>)
 80148e6:	400a      	ands	r2, r1
 80148e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148ea:	f7f9 fd15 	bl	800e318 <HAL_GetTick>
 80148ee:	0003      	movs	r3, r0
 80148f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80148f2:	e008      	b.n	8014906 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80148f4:	f7f9 fd10 	bl	800e318 <HAL_GetTick>
 80148f8:	0002      	movs	r2, r0
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	1ad3      	subs	r3, r2, r3
 80148fe:	2b02      	cmp	r3, #2
 8014900:	d901      	bls.n	8014906 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8014902:	2303      	movs	r3, #3
 8014904:	e1eb      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014906:	4bb3      	ldr	r3, [pc, #716]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014908:	681a      	ldr	r2, [r3, #0]
 801490a:	2380      	movs	r3, #128	@ 0x80
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	4013      	ands	r3, r2
 8014910:	d1f0      	bne.n	80148f4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	2208      	movs	r2, #8
 8014918:	4013      	ands	r3, r2
 801491a:	d036      	beq.n	801498a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	695b      	ldr	r3, [r3, #20]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d019      	beq.n	8014958 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014924:	4bab      	ldr	r3, [pc, #684]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014926:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014928:	4baa      	ldr	r3, [pc, #680]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 801492a:	2101      	movs	r1, #1
 801492c:	430a      	orrs	r2, r1
 801492e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014930:	f7f9 fcf2 	bl	800e318 <HAL_GetTick>
 8014934:	0003      	movs	r3, r0
 8014936:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014938:	e008      	b.n	801494c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801493a:	f7f9 fced 	bl	800e318 <HAL_GetTick>
 801493e:	0002      	movs	r2, r0
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	1ad3      	subs	r3, r2, r3
 8014944:	2b02      	cmp	r3, #2
 8014946:	d901      	bls.n	801494c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8014948:	2303      	movs	r3, #3
 801494a:	e1c8      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801494c:	4ba1      	ldr	r3, [pc, #644]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 801494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014950:	2202      	movs	r2, #2
 8014952:	4013      	ands	r3, r2
 8014954:	d0f1      	beq.n	801493a <HAL_RCC_OscConfig+0x3ee>
 8014956:	e018      	b.n	801498a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014958:	4b9e      	ldr	r3, [pc, #632]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 801495a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801495c:	4b9d      	ldr	r3, [pc, #628]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 801495e:	2101      	movs	r1, #1
 8014960:	438a      	bics	r2, r1
 8014962:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014964:	f7f9 fcd8 	bl	800e318 <HAL_GetTick>
 8014968:	0003      	movs	r3, r0
 801496a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801496c:	e008      	b.n	8014980 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801496e:	f7f9 fcd3 	bl	800e318 <HAL_GetTick>
 8014972:	0002      	movs	r2, r0
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	2b02      	cmp	r3, #2
 801497a:	d901      	bls.n	8014980 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801497c:	2303      	movs	r3, #3
 801497e:	e1ae      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014980:	4b94      	ldr	r3, [pc, #592]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014984:	2202      	movs	r2, #2
 8014986:	4013      	ands	r3, r2
 8014988:	d1f1      	bne.n	801496e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	2204      	movs	r2, #4
 8014990:	4013      	ands	r3, r2
 8014992:	d100      	bne.n	8014996 <HAL_RCC_OscConfig+0x44a>
 8014994:	e0ae      	b.n	8014af4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014996:	2023      	movs	r0, #35	@ 0x23
 8014998:	183b      	adds	r3, r7, r0
 801499a:	2200      	movs	r2, #0
 801499c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801499e:	4b8d      	ldr	r3, [pc, #564]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80149a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80149a2:	2380      	movs	r3, #128	@ 0x80
 80149a4:	055b      	lsls	r3, r3, #21
 80149a6:	4013      	ands	r3, r2
 80149a8:	d109      	bne.n	80149be <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80149aa:	4b8a      	ldr	r3, [pc, #552]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80149ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80149ae:	4b89      	ldr	r3, [pc, #548]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 80149b0:	2180      	movs	r1, #128	@ 0x80
 80149b2:	0549      	lsls	r1, r1, #21
 80149b4:	430a      	orrs	r2, r1
 80149b6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80149b8:	183b      	adds	r3, r7, r0
 80149ba:	2201      	movs	r2, #1
 80149bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149be:	4b88      	ldr	r3, [pc, #544]	@ (8014be0 <HAL_RCC_OscConfig+0x694>)
 80149c0:	681a      	ldr	r2, [r3, #0]
 80149c2:	2380      	movs	r3, #128	@ 0x80
 80149c4:	005b      	lsls	r3, r3, #1
 80149c6:	4013      	ands	r3, r2
 80149c8:	d11a      	bne.n	8014a00 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80149ca:	4b85      	ldr	r3, [pc, #532]	@ (8014be0 <HAL_RCC_OscConfig+0x694>)
 80149cc:	681a      	ldr	r2, [r3, #0]
 80149ce:	4b84      	ldr	r3, [pc, #528]	@ (8014be0 <HAL_RCC_OscConfig+0x694>)
 80149d0:	2180      	movs	r1, #128	@ 0x80
 80149d2:	0049      	lsls	r1, r1, #1
 80149d4:	430a      	orrs	r2, r1
 80149d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80149d8:	f7f9 fc9e 	bl	800e318 <HAL_GetTick>
 80149dc:	0003      	movs	r3, r0
 80149de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149e0:	e008      	b.n	80149f4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80149e2:	f7f9 fc99 	bl	800e318 <HAL_GetTick>
 80149e6:	0002      	movs	r2, r0
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	1ad3      	subs	r3, r2, r3
 80149ec:	2b64      	cmp	r3, #100	@ 0x64
 80149ee:	d901      	bls.n	80149f4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80149f0:	2303      	movs	r3, #3
 80149f2:	e174      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149f4:	4b7a      	ldr	r3, [pc, #488]	@ (8014be0 <HAL_RCC_OscConfig+0x694>)
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	2380      	movs	r3, #128	@ 0x80
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	4013      	ands	r3, r2
 80149fe:	d0f0      	beq.n	80149e2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	689a      	ldr	r2, [r3, #8]
 8014a04:	2380      	movs	r3, #128	@ 0x80
 8014a06:	005b      	lsls	r3, r3, #1
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d107      	bne.n	8014a1c <HAL_RCC_OscConfig+0x4d0>
 8014a0c:	4b71      	ldr	r3, [pc, #452]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a10:	4b70      	ldr	r3, [pc, #448]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a12:	2180      	movs	r1, #128	@ 0x80
 8014a14:	0049      	lsls	r1, r1, #1
 8014a16:	430a      	orrs	r2, r1
 8014a18:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a1a:	e031      	b.n	8014a80 <HAL_RCC_OscConfig+0x534>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	689b      	ldr	r3, [r3, #8]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d10c      	bne.n	8014a3e <HAL_RCC_OscConfig+0x4f2>
 8014a24:	4b6b      	ldr	r3, [pc, #428]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a28:	4b6a      	ldr	r3, [pc, #424]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a2a:	496c      	ldr	r1, [pc, #432]	@ (8014bdc <HAL_RCC_OscConfig+0x690>)
 8014a2c:	400a      	ands	r2, r1
 8014a2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a30:	4b68      	ldr	r3, [pc, #416]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a34:	4b67      	ldr	r3, [pc, #412]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a36:	496b      	ldr	r1, [pc, #428]	@ (8014be4 <HAL_RCC_OscConfig+0x698>)
 8014a38:	400a      	ands	r2, r1
 8014a3a:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a3c:	e020      	b.n	8014a80 <HAL_RCC_OscConfig+0x534>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	689a      	ldr	r2, [r3, #8]
 8014a42:	23a0      	movs	r3, #160	@ 0xa0
 8014a44:	00db      	lsls	r3, r3, #3
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d10e      	bne.n	8014a68 <HAL_RCC_OscConfig+0x51c>
 8014a4a:	4b62      	ldr	r3, [pc, #392]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a4e:	4b61      	ldr	r3, [pc, #388]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a50:	2180      	movs	r1, #128	@ 0x80
 8014a52:	00c9      	lsls	r1, r1, #3
 8014a54:	430a      	orrs	r2, r1
 8014a56:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a58:	4b5e      	ldr	r3, [pc, #376]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a5e:	2180      	movs	r1, #128	@ 0x80
 8014a60:	0049      	lsls	r1, r1, #1
 8014a62:	430a      	orrs	r2, r1
 8014a64:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a66:	e00b      	b.n	8014a80 <HAL_RCC_OscConfig+0x534>
 8014a68:	4b5a      	ldr	r3, [pc, #360]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a6c:	4b59      	ldr	r3, [pc, #356]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a6e:	495b      	ldr	r1, [pc, #364]	@ (8014bdc <HAL_RCC_OscConfig+0x690>)
 8014a70:	400a      	ands	r2, r1
 8014a72:	651a      	str	r2, [r3, #80]	@ 0x50
 8014a74:	4b57      	ldr	r3, [pc, #348]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a78:	4b56      	ldr	r3, [pc, #344]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014a7a:	495a      	ldr	r1, [pc, #360]	@ (8014be4 <HAL_RCC_OscConfig+0x698>)
 8014a7c:	400a      	ands	r2, r1
 8014a7e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	689b      	ldr	r3, [r3, #8]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d015      	beq.n	8014ab4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014a88:	f7f9 fc46 	bl	800e318 <HAL_GetTick>
 8014a8c:	0003      	movs	r3, r0
 8014a8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014a90:	e009      	b.n	8014aa6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014a92:	f7f9 fc41 	bl	800e318 <HAL_GetTick>
 8014a96:	0002      	movs	r2, r0
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	1ad3      	subs	r3, r2, r3
 8014a9c:	4a52      	ldr	r2, [pc, #328]	@ (8014be8 <HAL_RCC_OscConfig+0x69c>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d901      	bls.n	8014aa6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8014aa2:	2303      	movs	r3, #3
 8014aa4:	e11b      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014aa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014aaa:	2380      	movs	r3, #128	@ 0x80
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	4013      	ands	r3, r2
 8014ab0:	d0ef      	beq.n	8014a92 <HAL_RCC_OscConfig+0x546>
 8014ab2:	e014      	b.n	8014ade <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014ab4:	f7f9 fc30 	bl	800e318 <HAL_GetTick>
 8014ab8:	0003      	movs	r3, r0
 8014aba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014abc:	e009      	b.n	8014ad2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014abe:	f7f9 fc2b 	bl	800e318 <HAL_GetTick>
 8014ac2:	0002      	movs	r2, r0
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	1ad3      	subs	r3, r2, r3
 8014ac8:	4a47      	ldr	r2, [pc, #284]	@ (8014be8 <HAL_RCC_OscConfig+0x69c>)
 8014aca:	4293      	cmp	r3, r2
 8014acc:	d901      	bls.n	8014ad2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8014ace:	2303      	movs	r3, #3
 8014ad0:	e105      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014ad2:	4b40      	ldr	r3, [pc, #256]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014ad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ad6:	2380      	movs	r3, #128	@ 0x80
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4013      	ands	r3, r2
 8014adc:	d1ef      	bne.n	8014abe <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014ade:	2323      	movs	r3, #35	@ 0x23
 8014ae0:	18fb      	adds	r3, r7, r3
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d105      	bne.n	8014af4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014aec:	4b39      	ldr	r3, [pc, #228]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014aee:	493f      	ldr	r1, [pc, #252]	@ (8014bec <HAL_RCC_OscConfig+0x6a0>)
 8014af0:	400a      	ands	r2, r1
 8014af2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	2220      	movs	r2, #32
 8014afa:	4013      	ands	r3, r2
 8014afc:	d049      	beq.n	8014b92 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	699b      	ldr	r3, [r3, #24]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d026      	beq.n	8014b54 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8014b06:	4b33      	ldr	r3, [pc, #204]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b08:	689a      	ldr	r2, [r3, #8]
 8014b0a:	4b32      	ldr	r3, [pc, #200]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b0c:	2101      	movs	r1, #1
 8014b0e:	430a      	orrs	r2, r1
 8014b10:	609a      	str	r2, [r3, #8]
 8014b12:	4b30      	ldr	r3, [pc, #192]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014b16:	4b2f      	ldr	r3, [pc, #188]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b18:	2101      	movs	r1, #1
 8014b1a:	430a      	orrs	r2, r1
 8014b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8014b1e:	4b34      	ldr	r3, [pc, #208]	@ (8014bf0 <HAL_RCC_OscConfig+0x6a4>)
 8014b20:	6a1a      	ldr	r2, [r3, #32]
 8014b22:	4b33      	ldr	r3, [pc, #204]	@ (8014bf0 <HAL_RCC_OscConfig+0x6a4>)
 8014b24:	2180      	movs	r1, #128	@ 0x80
 8014b26:	0189      	lsls	r1, r1, #6
 8014b28:	430a      	orrs	r2, r1
 8014b2a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014b2c:	f7f9 fbf4 	bl	800e318 <HAL_GetTick>
 8014b30:	0003      	movs	r3, r0
 8014b32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014b34:	e008      	b.n	8014b48 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014b36:	f7f9 fbef 	bl	800e318 <HAL_GetTick>
 8014b3a:	0002      	movs	r2, r0
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	1ad3      	subs	r3, r2, r3
 8014b40:	2b02      	cmp	r3, #2
 8014b42:	d901      	bls.n	8014b48 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8014b44:	2303      	movs	r3, #3
 8014b46:	e0ca      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014b48:	4b22      	ldr	r3, [pc, #136]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b4a:	689b      	ldr	r3, [r3, #8]
 8014b4c:	2202      	movs	r2, #2
 8014b4e:	4013      	ands	r3, r2
 8014b50:	d0f1      	beq.n	8014b36 <HAL_RCC_OscConfig+0x5ea>
 8014b52:	e01e      	b.n	8014b92 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8014b54:	4b1f      	ldr	r3, [pc, #124]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b56:	689a      	ldr	r2, [r3, #8]
 8014b58:	4b1e      	ldr	r3, [pc, #120]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	438a      	bics	r2, r1
 8014b5e:	609a      	str	r2, [r3, #8]
 8014b60:	4b23      	ldr	r3, [pc, #140]	@ (8014bf0 <HAL_RCC_OscConfig+0x6a4>)
 8014b62:	6a1a      	ldr	r2, [r3, #32]
 8014b64:	4b22      	ldr	r3, [pc, #136]	@ (8014bf0 <HAL_RCC_OscConfig+0x6a4>)
 8014b66:	4923      	ldr	r1, [pc, #140]	@ (8014bf4 <HAL_RCC_OscConfig+0x6a8>)
 8014b68:	400a      	ands	r2, r1
 8014b6a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014b6c:	f7f9 fbd4 	bl	800e318 <HAL_GetTick>
 8014b70:	0003      	movs	r3, r0
 8014b72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014b74:	e008      	b.n	8014b88 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014b76:	f7f9 fbcf 	bl	800e318 <HAL_GetTick>
 8014b7a:	0002      	movs	r2, r0
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	1ad3      	subs	r3, r2, r3
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	d901      	bls.n	8014b88 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8014b84:	2303      	movs	r3, #3
 8014b86:	e0aa      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014b88:	4b12      	ldr	r3, [pc, #72]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014b8a:	689b      	ldr	r3, [r3, #8]
 8014b8c:	2202      	movs	r2, #2
 8014b8e:	4013      	ands	r3, r2
 8014b90:	d1f1      	bne.n	8014b76 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d100      	bne.n	8014b9c <HAL_RCC_OscConfig+0x650>
 8014b9a:	e09f      	b.n	8014cdc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	2b0c      	cmp	r3, #12
 8014ba0:	d100      	bne.n	8014ba4 <HAL_RCC_OscConfig+0x658>
 8014ba2:	e078      	b.n	8014c96 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ba8:	2b02      	cmp	r3, #2
 8014baa:	d159      	bne.n	8014c60 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014bac:	4b09      	ldr	r3, [pc, #36]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	4b08      	ldr	r3, [pc, #32]	@ (8014bd4 <HAL_RCC_OscConfig+0x688>)
 8014bb2:	4911      	ldr	r1, [pc, #68]	@ (8014bf8 <HAL_RCC_OscConfig+0x6ac>)
 8014bb4:	400a      	ands	r2, r1
 8014bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014bb8:	f7f9 fbae 	bl	800e318 <HAL_GetTick>
 8014bbc:	0003      	movs	r3, r0
 8014bbe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014bc0:	e01c      	b.n	8014bfc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014bc2:	f7f9 fba9 	bl	800e318 <HAL_GetTick>
 8014bc6:	0002      	movs	r2, r0
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	1ad3      	subs	r3, r2, r3
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d915      	bls.n	8014bfc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014bd0:	2303      	movs	r3, #3
 8014bd2:	e084      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
 8014bd4:	40021000 	.word	0x40021000
 8014bd8:	ffff1fff 	.word	0xffff1fff
 8014bdc:	fffffeff 	.word	0xfffffeff
 8014be0:	40007000 	.word	0x40007000
 8014be4:	fffffbff 	.word	0xfffffbff
 8014be8:	00001388 	.word	0x00001388
 8014bec:	efffffff 	.word	0xefffffff
 8014bf0:	40010000 	.word	0x40010000
 8014bf4:	ffffdfff 	.word	0xffffdfff
 8014bf8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014bfe:	681a      	ldr	r2, [r3, #0]
 8014c00:	2380      	movs	r3, #128	@ 0x80
 8014c02:	049b      	lsls	r3, r3, #18
 8014c04:	4013      	ands	r3, r2
 8014c06:	d1dc      	bne.n	8014bc2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014c08:	4b37      	ldr	r3, [pc, #220]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	4a37      	ldr	r2, [pc, #220]	@ (8014cec <HAL_RCC_OscConfig+0x7a0>)
 8014c0e:	4013      	ands	r3, r2
 8014c10:	0019      	movs	r1, r3
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c1a:	431a      	orrs	r2, r3
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c20:	431a      	orrs	r2, r3
 8014c22:	4b31      	ldr	r3, [pc, #196]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c24:	430a      	orrs	r2, r1
 8014c26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014c28:	4b2f      	ldr	r3, [pc, #188]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c2a:	681a      	ldr	r2, [r3, #0]
 8014c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c2e:	2180      	movs	r1, #128	@ 0x80
 8014c30:	0449      	lsls	r1, r1, #17
 8014c32:	430a      	orrs	r2, r1
 8014c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c36:	f7f9 fb6f 	bl	800e318 <HAL_GetTick>
 8014c3a:	0003      	movs	r3, r0
 8014c3c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014c3e:	e008      	b.n	8014c52 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014c40:	f7f9 fb6a 	bl	800e318 <HAL_GetTick>
 8014c44:	0002      	movs	r2, r0
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	2b02      	cmp	r3, #2
 8014c4c:	d901      	bls.n	8014c52 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8014c4e:	2303      	movs	r3, #3
 8014c50:	e045      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014c52:	4b25      	ldr	r3, [pc, #148]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c54:	681a      	ldr	r2, [r3, #0]
 8014c56:	2380      	movs	r3, #128	@ 0x80
 8014c58:	049b      	lsls	r3, r3, #18
 8014c5a:	4013      	ands	r3, r2
 8014c5c:	d0f0      	beq.n	8014c40 <HAL_RCC_OscConfig+0x6f4>
 8014c5e:	e03d      	b.n	8014cdc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014c60:	4b21      	ldr	r3, [pc, #132]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	4b20      	ldr	r3, [pc, #128]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c66:	4922      	ldr	r1, [pc, #136]	@ (8014cf0 <HAL_RCC_OscConfig+0x7a4>)
 8014c68:	400a      	ands	r2, r1
 8014c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014c6c:	f7f9 fb54 	bl	800e318 <HAL_GetTick>
 8014c70:	0003      	movs	r3, r0
 8014c72:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014c74:	e008      	b.n	8014c88 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014c76:	f7f9 fb4f 	bl	800e318 <HAL_GetTick>
 8014c7a:	0002      	movs	r2, r0
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	1ad3      	subs	r3, r2, r3
 8014c80:	2b02      	cmp	r3, #2
 8014c82:	d901      	bls.n	8014c88 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8014c84:	2303      	movs	r3, #3
 8014c86:	e02a      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014c88:	4b17      	ldr	r3, [pc, #92]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014c8a:	681a      	ldr	r2, [r3, #0]
 8014c8c:	2380      	movs	r3, #128	@ 0x80
 8014c8e:	049b      	lsls	r3, r3, #18
 8014c90:	4013      	ands	r3, r2
 8014c92:	d1f0      	bne.n	8014c76 <HAL_RCC_OscConfig+0x72a>
 8014c94:	e022      	b.n	8014cdc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d101      	bne.n	8014ca2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	e01d      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8014ca2:	4b11      	ldr	r3, [pc, #68]	@ (8014ce8 <HAL_RCC_OscConfig+0x79c>)
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014ca8:	69ba      	ldr	r2, [r7, #24]
 8014caa:	2380      	movs	r3, #128	@ 0x80
 8014cac:	025b      	lsls	r3, r3, #9
 8014cae:	401a      	ands	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d10f      	bne.n	8014cd8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014cb8:	69ba      	ldr	r2, [r7, #24]
 8014cba:	23f0      	movs	r3, #240	@ 0xf0
 8014cbc:	039b      	lsls	r3, r3, #14
 8014cbe:	401a      	ands	r2, r3
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d107      	bne.n	8014cd8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014cc8:	69ba      	ldr	r2, [r7, #24]
 8014cca:	23c0      	movs	r3, #192	@ 0xc0
 8014ccc:	041b      	lsls	r3, r3, #16
 8014cce:	401a      	ands	r2, r3
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	d001      	beq.n	8014cdc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	e000      	b.n	8014cde <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8014cdc:	2300      	movs	r3, #0
}
 8014cde:	0018      	movs	r0, r3
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	b00a      	add	sp, #40	@ 0x28
 8014ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8014ce6:	46c0      	nop			@ (mov r8, r8)
 8014ce8:	40021000 	.word	0x40021000
 8014cec:	ff02ffff 	.word	0xff02ffff
 8014cf0:	feffffff 	.word	0xfeffffff

08014cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014cf4:	b5b0      	push	{r4, r5, r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d101      	bne.n	8014d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014d04:	2301      	movs	r3, #1
 8014d06:	e128      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014d08:	4b96      	ldr	r3, [pc, #600]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	2201      	movs	r2, #1
 8014d0e:	4013      	ands	r3, r2
 8014d10:	683a      	ldr	r2, [r7, #0]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d91e      	bls.n	8014d54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014d16:	4b93      	ldr	r3, [pc, #588]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	4393      	bics	r3, r2
 8014d1e:	0019      	movs	r1, r3
 8014d20:	4b90      	ldr	r3, [pc, #576]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014d22:	683a      	ldr	r2, [r7, #0]
 8014d24:	430a      	orrs	r2, r1
 8014d26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014d28:	f7f9 faf6 	bl	800e318 <HAL_GetTick>
 8014d2c:	0003      	movs	r3, r0
 8014d2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d30:	e009      	b.n	8014d46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014d32:	f7f9 faf1 	bl	800e318 <HAL_GetTick>
 8014d36:	0002      	movs	r2, r0
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	1ad3      	subs	r3, r2, r3
 8014d3c:	4a8a      	ldr	r2, [pc, #552]	@ (8014f68 <HAL_RCC_ClockConfig+0x274>)
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d901      	bls.n	8014d46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8014d42:	2303      	movs	r3, #3
 8014d44:	e109      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d46:	4b87      	ldr	r3, [pc, #540]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	4013      	ands	r3, r2
 8014d4e:	683a      	ldr	r2, [r7, #0]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d1ee      	bne.n	8014d32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	2202      	movs	r2, #2
 8014d5a:	4013      	ands	r3, r2
 8014d5c:	d009      	beq.n	8014d72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014d5e:	4b83      	ldr	r3, [pc, #524]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	22f0      	movs	r2, #240	@ 0xf0
 8014d64:	4393      	bics	r3, r2
 8014d66:	0019      	movs	r1, r3
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	689a      	ldr	r2, [r3, #8]
 8014d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014d6e:	430a      	orrs	r2, r1
 8014d70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	2201      	movs	r2, #1
 8014d78:	4013      	ands	r3, r2
 8014d7a:	d100      	bne.n	8014d7e <HAL_RCC_ClockConfig+0x8a>
 8014d7c:	e089      	b.n	8014e92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	685b      	ldr	r3, [r3, #4]
 8014d82:	2b02      	cmp	r3, #2
 8014d84:	d107      	bne.n	8014d96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014d86:	4b79      	ldr	r3, [pc, #484]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	2380      	movs	r3, #128	@ 0x80
 8014d8c:	029b      	lsls	r3, r3, #10
 8014d8e:	4013      	ands	r3, r2
 8014d90:	d120      	bne.n	8014dd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014d92:	2301      	movs	r3, #1
 8014d94:	e0e1      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	2b03      	cmp	r3, #3
 8014d9c:	d107      	bne.n	8014dae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014d9e:	4b73      	ldr	r3, [pc, #460]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	2380      	movs	r3, #128	@ 0x80
 8014da4:	049b      	lsls	r3, r3, #18
 8014da6:	4013      	ands	r3, r2
 8014da8:	d114      	bne.n	8014dd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014daa:	2301      	movs	r3, #1
 8014dac:	e0d5      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	2b01      	cmp	r3, #1
 8014db4:	d106      	bne.n	8014dc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014db6:	4b6d      	ldr	r3, [pc, #436]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	2204      	movs	r2, #4
 8014dbc:	4013      	ands	r3, r2
 8014dbe:	d109      	bne.n	8014dd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e0ca      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014dc4:	4b69      	ldr	r3, [pc, #420]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	2380      	movs	r3, #128	@ 0x80
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	4013      	ands	r3, r2
 8014dce:	d101      	bne.n	8014dd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	e0c2      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014dd4:	4b65      	ldr	r3, [pc, #404]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	2203      	movs	r2, #3
 8014dda:	4393      	bics	r3, r2
 8014ddc:	0019      	movs	r1, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	685a      	ldr	r2, [r3, #4]
 8014de2:	4b62      	ldr	r3, [pc, #392]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014de4:	430a      	orrs	r2, r1
 8014de6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014de8:	f7f9 fa96 	bl	800e318 <HAL_GetTick>
 8014dec:	0003      	movs	r3, r0
 8014dee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	2b02      	cmp	r3, #2
 8014df6:	d111      	bne.n	8014e1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014df8:	e009      	b.n	8014e0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014dfa:	f7f9 fa8d 	bl	800e318 <HAL_GetTick>
 8014dfe:	0002      	movs	r2, r0
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	4a58      	ldr	r2, [pc, #352]	@ (8014f68 <HAL_RCC_ClockConfig+0x274>)
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d901      	bls.n	8014e0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	e0a5      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014e0e:	4b57      	ldr	r3, [pc, #348]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	220c      	movs	r2, #12
 8014e14:	4013      	ands	r3, r2
 8014e16:	2b08      	cmp	r3, #8
 8014e18:	d1ef      	bne.n	8014dfa <HAL_RCC_ClockConfig+0x106>
 8014e1a:	e03a      	b.n	8014e92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	2b03      	cmp	r3, #3
 8014e22:	d111      	bne.n	8014e48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014e24:	e009      	b.n	8014e3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e26:	f7f9 fa77 	bl	800e318 <HAL_GetTick>
 8014e2a:	0002      	movs	r2, r0
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	1ad3      	subs	r3, r2, r3
 8014e30:	4a4d      	ldr	r2, [pc, #308]	@ (8014f68 <HAL_RCC_ClockConfig+0x274>)
 8014e32:	4293      	cmp	r3, r2
 8014e34:	d901      	bls.n	8014e3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014e36:	2303      	movs	r3, #3
 8014e38:	e08f      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014e3c:	68db      	ldr	r3, [r3, #12]
 8014e3e:	220c      	movs	r2, #12
 8014e40:	4013      	ands	r3, r2
 8014e42:	2b0c      	cmp	r3, #12
 8014e44:	d1ef      	bne.n	8014e26 <HAL_RCC_ClockConfig+0x132>
 8014e46:	e024      	b.n	8014e92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	d11b      	bne.n	8014e88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014e50:	e009      	b.n	8014e66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e52:	f7f9 fa61 	bl	800e318 <HAL_GetTick>
 8014e56:	0002      	movs	r2, r0
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	1ad3      	subs	r3, r2, r3
 8014e5c:	4a42      	ldr	r2, [pc, #264]	@ (8014f68 <HAL_RCC_ClockConfig+0x274>)
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d901      	bls.n	8014e66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8014e62:	2303      	movs	r3, #3
 8014e64:	e079      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014e66:	4b41      	ldr	r3, [pc, #260]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014e68:	68db      	ldr	r3, [r3, #12]
 8014e6a:	220c      	movs	r2, #12
 8014e6c:	4013      	ands	r3, r2
 8014e6e:	2b04      	cmp	r3, #4
 8014e70:	d1ef      	bne.n	8014e52 <HAL_RCC_ClockConfig+0x15e>
 8014e72:	e00e      	b.n	8014e92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014e74:	f7f9 fa50 	bl	800e318 <HAL_GetTick>
 8014e78:	0002      	movs	r2, r0
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	1ad3      	subs	r3, r2, r3
 8014e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8014f68 <HAL_RCC_ClockConfig+0x274>)
 8014e80:	4293      	cmp	r3, r2
 8014e82:	d901      	bls.n	8014e88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014e84:	2303      	movs	r3, #3
 8014e86:	e068      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014e88:	4b38      	ldr	r3, [pc, #224]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014e8a:	68db      	ldr	r3, [r3, #12]
 8014e8c:	220c      	movs	r2, #12
 8014e8e:	4013      	ands	r3, r2
 8014e90:	d1f0      	bne.n	8014e74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014e92:	4b34      	ldr	r3, [pc, #208]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2201      	movs	r2, #1
 8014e98:	4013      	ands	r3, r2
 8014e9a:	683a      	ldr	r2, [r7, #0]
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d21e      	bcs.n	8014ede <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014ea0:	4b30      	ldr	r3, [pc, #192]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	4393      	bics	r3, r2
 8014ea8:	0019      	movs	r1, r3
 8014eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014eac:	683a      	ldr	r2, [r7, #0]
 8014eae:	430a      	orrs	r2, r1
 8014eb0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014eb2:	f7f9 fa31 	bl	800e318 <HAL_GetTick>
 8014eb6:	0003      	movs	r3, r0
 8014eb8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014eba:	e009      	b.n	8014ed0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014ebc:	f7f9 fa2c 	bl	800e318 <HAL_GetTick>
 8014ec0:	0002      	movs	r2, r0
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	1ad3      	subs	r3, r2, r3
 8014ec6:	4a28      	ldr	r2, [pc, #160]	@ (8014f68 <HAL_RCC_ClockConfig+0x274>)
 8014ec8:	4293      	cmp	r3, r2
 8014eca:	d901      	bls.n	8014ed0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8014ecc:	2303      	movs	r3, #3
 8014ece:	e044      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014ed0:	4b24      	ldr	r3, [pc, #144]	@ (8014f64 <HAL_RCC_ClockConfig+0x270>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	2201      	movs	r2, #1
 8014ed6:	4013      	ands	r3, r2
 8014ed8:	683a      	ldr	r2, [r7, #0]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d1ee      	bne.n	8014ebc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	2204      	movs	r2, #4
 8014ee4:	4013      	ands	r3, r2
 8014ee6:	d009      	beq.n	8014efc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014ee8:	4b20      	ldr	r3, [pc, #128]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014eea:	68db      	ldr	r3, [r3, #12]
 8014eec:	4a20      	ldr	r2, [pc, #128]	@ (8014f70 <HAL_RCC_ClockConfig+0x27c>)
 8014eee:	4013      	ands	r3, r2
 8014ef0:	0019      	movs	r1, r3
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	68da      	ldr	r2, [r3, #12]
 8014ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014ef8:	430a      	orrs	r2, r1
 8014efa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2208      	movs	r2, #8
 8014f02:	4013      	ands	r3, r2
 8014f04:	d00a      	beq.n	8014f1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014f06:	4b19      	ldr	r3, [pc, #100]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014f08:	68db      	ldr	r3, [r3, #12]
 8014f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8014f74 <HAL_RCC_ClockConfig+0x280>)
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	0019      	movs	r1, r3
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	691b      	ldr	r3, [r3, #16]
 8014f14:	00da      	lsls	r2, r3, #3
 8014f16:	4b15      	ldr	r3, [pc, #84]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014f18:	430a      	orrs	r2, r1
 8014f1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014f1c:	f000 f832 	bl	8014f84 <HAL_RCC_GetSysClockFreq>
 8014f20:	0001      	movs	r1, r0
 8014f22:	4b12      	ldr	r3, [pc, #72]	@ (8014f6c <HAL_RCC_ClockConfig+0x278>)
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	091b      	lsrs	r3, r3, #4
 8014f28:	220f      	movs	r2, #15
 8014f2a:	4013      	ands	r3, r2
 8014f2c:	4a12      	ldr	r2, [pc, #72]	@ (8014f78 <HAL_RCC_ClockConfig+0x284>)
 8014f2e:	5cd3      	ldrb	r3, [r2, r3]
 8014f30:	000a      	movs	r2, r1
 8014f32:	40da      	lsrs	r2, r3
 8014f34:	4b11      	ldr	r3, [pc, #68]	@ (8014f7c <HAL_RCC_ClockConfig+0x288>)
 8014f36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014f38:	4b11      	ldr	r3, [pc, #68]	@ (8014f80 <HAL_RCC_ClockConfig+0x28c>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	250b      	movs	r5, #11
 8014f3e:	197c      	adds	r4, r7, r5
 8014f40:	0018      	movs	r0, r3
 8014f42:	f7f9 f9a3 	bl	800e28c <HAL_InitTick>
 8014f46:	0003      	movs	r3, r0
 8014f48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8014f4a:	197b      	adds	r3, r7, r5
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d002      	beq.n	8014f58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8014f52:	197b      	adds	r3, r7, r5
 8014f54:	781b      	ldrb	r3, [r3, #0]
 8014f56:	e000      	b.n	8014f5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8014f58:	2300      	movs	r3, #0
}
 8014f5a:	0018      	movs	r0, r3
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	b004      	add	sp, #16
 8014f60:	bdb0      	pop	{r4, r5, r7, pc}
 8014f62:	46c0      	nop			@ (mov r8, r8)
 8014f64:	40022000 	.word	0x40022000
 8014f68:	00001388 	.word	0x00001388
 8014f6c:	40021000 	.word	0x40021000
 8014f70:	fffff8ff 	.word	0xfffff8ff
 8014f74:	ffffc7ff 	.word	0xffffc7ff
 8014f78:	080248b8 	.word	0x080248b8
 8014f7c:	200000c8 	.word	0x200000c8
 8014f80:	200000d8 	.word	0x200000d8

08014f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014f84:	b5b0      	push	{r4, r5, r7, lr}
 8014f86:	b08e      	sub	sp, #56	@ 0x38
 8014f88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8014f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80150bc <HAL_RCC_GetSysClockFreq+0x138>)
 8014f8c:	68db      	ldr	r3, [r3, #12]
 8014f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8014f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f92:	230c      	movs	r3, #12
 8014f94:	4013      	ands	r3, r2
 8014f96:	2b0c      	cmp	r3, #12
 8014f98:	d014      	beq.n	8014fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8014f9a:	d900      	bls.n	8014f9e <HAL_RCC_GetSysClockFreq+0x1a>
 8014f9c:	e07b      	b.n	8015096 <HAL_RCC_GetSysClockFreq+0x112>
 8014f9e:	2b04      	cmp	r3, #4
 8014fa0:	d002      	beq.n	8014fa8 <HAL_RCC_GetSysClockFreq+0x24>
 8014fa2:	2b08      	cmp	r3, #8
 8014fa4:	d00b      	beq.n	8014fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8014fa6:	e076      	b.n	8015096 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014fa8:	4b44      	ldr	r3, [pc, #272]	@ (80150bc <HAL_RCC_GetSysClockFreq+0x138>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	2210      	movs	r2, #16
 8014fae:	4013      	ands	r3, r2
 8014fb0:	d002      	beq.n	8014fb8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8014fb2:	4b43      	ldr	r3, [pc, #268]	@ (80150c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014fb4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8014fb6:	e07c      	b.n	80150b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014fb8:	4b42      	ldr	r3, [pc, #264]	@ (80150c4 <HAL_RCC_GetSysClockFreq+0x140>)
 8014fba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014fbc:	e079      	b.n	80150b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8014fbe:	4b42      	ldr	r3, [pc, #264]	@ (80150c8 <HAL_RCC_GetSysClockFreq+0x144>)
 8014fc0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014fc2:	e076      	b.n	80150b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8014fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc6:	0c9a      	lsrs	r2, r3, #18
 8014fc8:	230f      	movs	r3, #15
 8014fca:	401a      	ands	r2, r3
 8014fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80150cc <HAL_RCC_GetSysClockFreq+0x148>)
 8014fce:	5c9b      	ldrb	r3, [r3, r2]
 8014fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8014fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fd4:	0d9a      	lsrs	r2, r3, #22
 8014fd6:	2303      	movs	r3, #3
 8014fd8:	4013      	ands	r3, r2
 8014fda:	3301      	adds	r3, #1
 8014fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014fde:	4b37      	ldr	r3, [pc, #220]	@ (80150bc <HAL_RCC_GetSysClockFreq+0x138>)
 8014fe0:	68da      	ldr	r2, [r3, #12]
 8014fe2:	2380      	movs	r3, #128	@ 0x80
 8014fe4:	025b      	lsls	r3, r3, #9
 8014fe6:	4013      	ands	r3, r2
 8014fe8:	d01a      	beq.n	8015020 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fec:	61bb      	str	r3, [r7, #24]
 8014fee:	2300      	movs	r3, #0
 8014ff0:	61fb      	str	r3, [r7, #28]
 8014ff2:	4a35      	ldr	r2, [pc, #212]	@ (80150c8 <HAL_RCC_GetSysClockFreq+0x144>)
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	69b8      	ldr	r0, [r7, #24]
 8014ff8:	69f9      	ldr	r1, [r7, #28]
 8014ffa:	f7eb fae1 	bl	80005c0 <__aeabi_lmul>
 8014ffe:	0002      	movs	r2, r0
 8015000:	000b      	movs	r3, r1
 8015002:	0010      	movs	r0, r2
 8015004:	0019      	movs	r1, r3
 8015006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015008:	613b      	str	r3, [r7, #16]
 801500a:	2300      	movs	r3, #0
 801500c:	617b      	str	r3, [r7, #20]
 801500e:	693a      	ldr	r2, [r7, #16]
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	f7eb fab5 	bl	8000580 <__aeabi_uldivmod>
 8015016:	0002      	movs	r2, r0
 8015018:	000b      	movs	r3, r1
 801501a:	0013      	movs	r3, r2
 801501c:	637b      	str	r3, [r7, #52]	@ 0x34
 801501e:	e037      	b.n	8015090 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015020:	4b26      	ldr	r3, [pc, #152]	@ (80150bc <HAL_RCC_GetSysClockFreq+0x138>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2210      	movs	r2, #16
 8015026:	4013      	ands	r3, r2
 8015028:	d01a      	beq.n	8015060 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801502c:	60bb      	str	r3, [r7, #8]
 801502e:	2300      	movs	r3, #0
 8015030:	60fb      	str	r3, [r7, #12]
 8015032:	4a23      	ldr	r2, [pc, #140]	@ (80150c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015034:	2300      	movs	r3, #0
 8015036:	68b8      	ldr	r0, [r7, #8]
 8015038:	68f9      	ldr	r1, [r7, #12]
 801503a:	f7eb fac1 	bl	80005c0 <__aeabi_lmul>
 801503e:	0002      	movs	r2, r0
 8015040:	000b      	movs	r3, r1
 8015042:	0010      	movs	r0, r2
 8015044:	0019      	movs	r1, r3
 8015046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015048:	603b      	str	r3, [r7, #0]
 801504a:	2300      	movs	r3, #0
 801504c:	607b      	str	r3, [r7, #4]
 801504e:	683a      	ldr	r2, [r7, #0]
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f7eb fa95 	bl	8000580 <__aeabi_uldivmod>
 8015056:	0002      	movs	r2, r0
 8015058:	000b      	movs	r3, r1
 801505a:	0013      	movs	r3, r2
 801505c:	637b      	str	r3, [r7, #52]	@ 0x34
 801505e:	e017      	b.n	8015090 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015062:	0018      	movs	r0, r3
 8015064:	2300      	movs	r3, #0
 8015066:	0019      	movs	r1, r3
 8015068:	4a16      	ldr	r2, [pc, #88]	@ (80150c4 <HAL_RCC_GetSysClockFreq+0x140>)
 801506a:	2300      	movs	r3, #0
 801506c:	f7eb faa8 	bl	80005c0 <__aeabi_lmul>
 8015070:	0002      	movs	r2, r0
 8015072:	000b      	movs	r3, r1
 8015074:	0010      	movs	r0, r2
 8015076:	0019      	movs	r1, r3
 8015078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801507a:	001c      	movs	r4, r3
 801507c:	2300      	movs	r3, #0
 801507e:	001d      	movs	r5, r3
 8015080:	0022      	movs	r2, r4
 8015082:	002b      	movs	r3, r5
 8015084:	f7eb fa7c 	bl	8000580 <__aeabi_uldivmod>
 8015088:	0002      	movs	r2, r0
 801508a:	000b      	movs	r3, r1
 801508c:	0013      	movs	r3, r2
 801508e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015092:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015094:	e00d      	b.n	80150b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015096:	4b09      	ldr	r3, [pc, #36]	@ (80150bc <HAL_RCC_GetSysClockFreq+0x138>)
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	0b5b      	lsrs	r3, r3, #13
 801509c:	2207      	movs	r2, #7
 801509e:	4013      	ands	r3, r2
 80150a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80150a2:	6a3b      	ldr	r3, [r7, #32]
 80150a4:	3301      	adds	r3, #1
 80150a6:	2280      	movs	r2, #128	@ 0x80
 80150a8:	0212      	lsls	r2, r2, #8
 80150aa:	409a      	lsls	r2, r3
 80150ac:	0013      	movs	r3, r2
 80150ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80150b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80150b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80150b4:	0018      	movs	r0, r3
 80150b6:	46bd      	mov	sp, r7
 80150b8:	b00e      	add	sp, #56	@ 0x38
 80150ba:	bdb0      	pop	{r4, r5, r7, pc}
 80150bc:	40021000 	.word	0x40021000
 80150c0:	003d0900 	.word	0x003d0900
 80150c4:	00f42400 	.word	0x00f42400
 80150c8:	007a1200 	.word	0x007a1200
 80150cc:	080248d0 	.word	0x080248d0

080150d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80150d4:	4b02      	ldr	r3, [pc, #8]	@ (80150e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80150d6:	681b      	ldr	r3, [r3, #0]
}
 80150d8:	0018      	movs	r0, r3
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	46c0      	nop			@ (mov r8, r8)
 80150e0:	200000c8 	.word	0x200000c8

080150e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80150e8:	f7ff fff2 	bl	80150d0 <HAL_RCC_GetHCLKFreq>
 80150ec:	0001      	movs	r1, r0
 80150ee:	4b06      	ldr	r3, [pc, #24]	@ (8015108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	0a1b      	lsrs	r3, r3, #8
 80150f4:	2207      	movs	r2, #7
 80150f6:	4013      	ands	r3, r2
 80150f8:	4a04      	ldr	r2, [pc, #16]	@ (801510c <HAL_RCC_GetPCLK1Freq+0x28>)
 80150fa:	5cd3      	ldrb	r3, [r2, r3]
 80150fc:	40d9      	lsrs	r1, r3
 80150fe:	000b      	movs	r3, r1
}
 8015100:	0018      	movs	r0, r3
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	46c0      	nop			@ (mov r8, r8)
 8015108:	40021000 	.word	0x40021000
 801510c:	080248c8 	.word	0x080248c8

08015110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015114:	f7ff ffdc 	bl	80150d0 <HAL_RCC_GetHCLKFreq>
 8015118:	0001      	movs	r1, r0
 801511a:	4b06      	ldr	r3, [pc, #24]	@ (8015134 <HAL_RCC_GetPCLK2Freq+0x24>)
 801511c:	68db      	ldr	r3, [r3, #12]
 801511e:	0adb      	lsrs	r3, r3, #11
 8015120:	2207      	movs	r2, #7
 8015122:	4013      	ands	r3, r2
 8015124:	4a04      	ldr	r2, [pc, #16]	@ (8015138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015126:	5cd3      	ldrb	r3, [r2, r3]
 8015128:	40d9      	lsrs	r1, r3
 801512a:	000b      	movs	r3, r1
}
 801512c:	0018      	movs	r0, r3
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}
 8015132:	46c0      	nop			@ (mov r8, r8)
 8015134:	40021000 	.word	0x40021000
 8015138:	080248c8 	.word	0x080248c8

0801513c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b086      	sub	sp, #24
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015144:	2017      	movs	r0, #23
 8015146:	183b      	adds	r3, r7, r0
 8015148:	2200      	movs	r2, #0
 801514a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	2220      	movs	r2, #32
 8015152:	4013      	ands	r3, r2
 8015154:	d100      	bne.n	8015158 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015156:	e0c7      	b.n	80152e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015158:	4b9b      	ldr	r3, [pc, #620]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801515a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801515c:	2380      	movs	r3, #128	@ 0x80
 801515e:	055b      	lsls	r3, r3, #21
 8015160:	4013      	ands	r3, r2
 8015162:	d109      	bne.n	8015178 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015164:	4b98      	ldr	r3, [pc, #608]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015168:	4b97      	ldr	r3, [pc, #604]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801516a:	2180      	movs	r1, #128	@ 0x80
 801516c:	0549      	lsls	r1, r1, #21
 801516e:	430a      	orrs	r2, r1
 8015170:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015172:	183b      	adds	r3, r7, r0
 8015174:	2201      	movs	r2, #1
 8015176:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015178:	4b94      	ldr	r3, [pc, #592]	@ (80153cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	2380      	movs	r3, #128	@ 0x80
 801517e:	005b      	lsls	r3, r3, #1
 8015180:	4013      	ands	r3, r2
 8015182:	d11a      	bne.n	80151ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015184:	4b91      	ldr	r3, [pc, #580]	@ (80153cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	4b90      	ldr	r3, [pc, #576]	@ (80153cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801518a:	2180      	movs	r1, #128	@ 0x80
 801518c:	0049      	lsls	r1, r1, #1
 801518e:	430a      	orrs	r2, r1
 8015190:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015192:	f7f9 f8c1 	bl	800e318 <HAL_GetTick>
 8015196:	0003      	movs	r3, r0
 8015198:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801519a:	e008      	b.n	80151ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801519c:	f7f9 f8bc 	bl	800e318 <HAL_GetTick>
 80151a0:	0002      	movs	r2, r0
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	2b64      	cmp	r3, #100	@ 0x64
 80151a8:	d901      	bls.n	80151ae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80151aa:	2303      	movs	r3, #3
 80151ac:	e107      	b.n	80153be <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80151ae:	4b87      	ldr	r3, [pc, #540]	@ (80153cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	2380      	movs	r3, #128	@ 0x80
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	4013      	ands	r3, r2
 80151b8:	d0f0      	beq.n	801519c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80151ba:	4b83      	ldr	r3, [pc, #524]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	23c0      	movs	r3, #192	@ 0xc0
 80151c0:	039b      	lsls	r3, r3, #14
 80151c2:	4013      	ands	r3, r2
 80151c4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	685a      	ldr	r2, [r3, #4]
 80151ca:	23c0      	movs	r3, #192	@ 0xc0
 80151cc:	039b      	lsls	r3, r3, #14
 80151ce:	4013      	ands	r3, r2
 80151d0:	68fa      	ldr	r2, [r7, #12]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d013      	beq.n	80151fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	685a      	ldr	r2, [r3, #4]
 80151da:	23c0      	movs	r3, #192	@ 0xc0
 80151dc:	029b      	lsls	r3, r3, #10
 80151de:	401a      	ands	r2, r3
 80151e0:	23c0      	movs	r3, #192	@ 0xc0
 80151e2:	029b      	lsls	r3, r3, #10
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d10a      	bne.n	80151fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80151e8:	4b77      	ldr	r3, [pc, #476]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	2380      	movs	r3, #128	@ 0x80
 80151ee:	029b      	lsls	r3, r3, #10
 80151f0:	401a      	ands	r2, r3
 80151f2:	2380      	movs	r3, #128	@ 0x80
 80151f4:	029b      	lsls	r3, r3, #10
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d101      	bne.n	80151fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80151fa:	2301      	movs	r3, #1
 80151fc:	e0df      	b.n	80153be <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80151fe:	4b72      	ldr	r3, [pc, #456]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015202:	23c0      	movs	r3, #192	@ 0xc0
 8015204:	029b      	lsls	r3, r3, #10
 8015206:	4013      	ands	r3, r2
 8015208:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d03b      	beq.n	8015288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	685a      	ldr	r2, [r3, #4]
 8015214:	23c0      	movs	r3, #192	@ 0xc0
 8015216:	029b      	lsls	r3, r3, #10
 8015218:	4013      	ands	r3, r2
 801521a:	68fa      	ldr	r2, [r7, #12]
 801521c:	429a      	cmp	r2, r3
 801521e:	d033      	beq.n	8015288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	2220      	movs	r2, #32
 8015226:	4013      	ands	r3, r2
 8015228:	d02e      	beq.n	8015288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801522a:	4b67      	ldr	r3, [pc, #412]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801522c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801522e:	4a68      	ldr	r2, [pc, #416]	@ (80153d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015230:	4013      	ands	r3, r2
 8015232:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015234:	4b64      	ldr	r3, [pc, #400]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015238:	4b63      	ldr	r3, [pc, #396]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801523a:	2180      	movs	r1, #128	@ 0x80
 801523c:	0309      	lsls	r1, r1, #12
 801523e:	430a      	orrs	r2, r1
 8015240:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015242:	4b61      	ldr	r3, [pc, #388]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015246:	4b60      	ldr	r3, [pc, #384]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015248:	4962      	ldr	r1, [pc, #392]	@ (80153d4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801524a:	400a      	ands	r2, r1
 801524c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801524e:	4b5e      	ldr	r3, [pc, #376]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015254:	68fa      	ldr	r2, [r7, #12]
 8015256:	2380      	movs	r3, #128	@ 0x80
 8015258:	005b      	lsls	r3, r3, #1
 801525a:	4013      	ands	r3, r2
 801525c:	d014      	beq.n	8015288 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801525e:	f7f9 f85b 	bl	800e318 <HAL_GetTick>
 8015262:	0003      	movs	r3, r0
 8015264:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015266:	e009      	b.n	801527c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015268:	f7f9 f856 	bl	800e318 <HAL_GetTick>
 801526c:	0002      	movs	r2, r0
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	4a59      	ldr	r2, [pc, #356]	@ (80153d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015274:	4293      	cmp	r3, r2
 8015276:	d901      	bls.n	801527c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015278:	2303      	movs	r3, #3
 801527a:	e0a0      	b.n	80153be <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801527c:	4b52      	ldr	r3, [pc, #328]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801527e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015280:	2380      	movs	r3, #128	@ 0x80
 8015282:	009b      	lsls	r3, r3, #2
 8015284:	4013      	ands	r3, r2
 8015286:	d0ef      	beq.n	8015268 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	2220      	movs	r2, #32
 801528e:	4013      	ands	r3, r2
 8015290:	d01f      	beq.n	80152d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	685a      	ldr	r2, [r3, #4]
 8015296:	23c0      	movs	r3, #192	@ 0xc0
 8015298:	029b      	lsls	r3, r3, #10
 801529a:	401a      	ands	r2, r3
 801529c:	23c0      	movs	r3, #192	@ 0xc0
 801529e:	029b      	lsls	r3, r3, #10
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d10c      	bne.n	80152be <HAL_RCCEx_PeriphCLKConfig+0x182>
 80152a4:	4b48      	ldr	r3, [pc, #288]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	4a4c      	ldr	r2, [pc, #304]	@ (80153dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80152aa:	4013      	ands	r3, r2
 80152ac:	0019      	movs	r1, r3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	685a      	ldr	r2, [r3, #4]
 80152b2:	23c0      	movs	r3, #192	@ 0xc0
 80152b4:	039b      	lsls	r3, r3, #14
 80152b6:	401a      	ands	r2, r3
 80152b8:	4b43      	ldr	r3, [pc, #268]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152ba:	430a      	orrs	r2, r1
 80152bc:	601a      	str	r2, [r3, #0]
 80152be:	4b42      	ldr	r3, [pc, #264]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	685a      	ldr	r2, [r3, #4]
 80152c6:	23c0      	movs	r3, #192	@ 0xc0
 80152c8:	029b      	lsls	r3, r3, #10
 80152ca:	401a      	ands	r2, r3
 80152cc:	4b3e      	ldr	r3, [pc, #248]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152ce:	430a      	orrs	r2, r1
 80152d0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80152d2:	2317      	movs	r3, #23
 80152d4:	18fb      	adds	r3, r7, r3
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d105      	bne.n	80152e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80152dc:	4b3a      	ldr	r3, [pc, #232]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80152e0:	4b39      	ldr	r3, [pc, #228]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152e2:	493f      	ldr	r1, [pc, #252]	@ (80153e0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80152e4:	400a      	ands	r2, r1
 80152e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	2201      	movs	r2, #1
 80152ee:	4013      	ands	r3, r2
 80152f0:	d009      	beq.n	8015306 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80152f2:	4b35      	ldr	r3, [pc, #212]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80152f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80152f6:	2203      	movs	r2, #3
 80152f8:	4393      	bics	r3, r2
 80152fa:	0019      	movs	r1, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	689a      	ldr	r2, [r3, #8]
 8015300:	4b31      	ldr	r3, [pc, #196]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015302:	430a      	orrs	r2, r1
 8015304:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	2202      	movs	r2, #2
 801530c:	4013      	ands	r3, r2
 801530e:	d009      	beq.n	8015324 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015310:	4b2d      	ldr	r3, [pc, #180]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015314:	220c      	movs	r2, #12
 8015316:	4393      	bics	r3, r2
 8015318:	0019      	movs	r1, r3
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	68da      	ldr	r2, [r3, #12]
 801531e:	4b2a      	ldr	r3, [pc, #168]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015320:	430a      	orrs	r2, r1
 8015322:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	2204      	movs	r2, #4
 801532a:	4013      	ands	r3, r2
 801532c:	d009      	beq.n	8015342 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801532e:	4b26      	ldr	r3, [pc, #152]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015332:	4a2c      	ldr	r2, [pc, #176]	@ (80153e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015334:	4013      	ands	r3, r2
 8015336:	0019      	movs	r1, r3
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	691a      	ldr	r2, [r3, #16]
 801533c:	4b22      	ldr	r3, [pc, #136]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801533e:	430a      	orrs	r2, r1
 8015340:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2208      	movs	r2, #8
 8015348:	4013      	ands	r3, r2
 801534a:	d009      	beq.n	8015360 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801534c:	4b1e      	ldr	r3, [pc, #120]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801534e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015350:	4a25      	ldr	r2, [pc, #148]	@ (80153e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015352:	4013      	ands	r3, r2
 8015354:	0019      	movs	r1, r3
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	695a      	ldr	r2, [r3, #20]
 801535a:	4b1b      	ldr	r3, [pc, #108]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801535c:	430a      	orrs	r2, r1
 801535e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	2380      	movs	r3, #128	@ 0x80
 8015366:	005b      	lsls	r3, r3, #1
 8015368:	4013      	ands	r3, r2
 801536a:	d009      	beq.n	8015380 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801536c:	4b16      	ldr	r3, [pc, #88]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801536e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015370:	4a17      	ldr	r2, [pc, #92]	@ (80153d0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015372:	4013      	ands	r3, r2
 8015374:	0019      	movs	r1, r3
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	699a      	ldr	r2, [r3, #24]
 801537a:	4b13      	ldr	r3, [pc, #76]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801537c:	430a      	orrs	r2, r1
 801537e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	2240      	movs	r2, #64	@ 0x40
 8015386:	4013      	ands	r3, r2
 8015388:	d009      	beq.n	801539e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801538a:	4b0f      	ldr	r3, [pc, #60]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801538c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801538e:	4a17      	ldr	r2, [pc, #92]	@ (80153ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015390:	4013      	ands	r3, r2
 8015392:	0019      	movs	r1, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6a1a      	ldr	r2, [r3, #32]
 8015398:	4b0b      	ldr	r3, [pc, #44]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801539a:	430a      	orrs	r2, r1
 801539c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	2280      	movs	r2, #128	@ 0x80
 80153a4:	4013      	ands	r3, r2
 80153a6:	d009      	beq.n	80153bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80153a8:	4b07      	ldr	r3, [pc, #28]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80153ac:	4a10      	ldr	r2, [pc, #64]	@ (80153f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80153ae:	4013      	ands	r3, r2
 80153b0:	0019      	movs	r1, r3
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	69da      	ldr	r2, [r3, #28]
 80153b6:	4b04      	ldr	r3, [pc, #16]	@ (80153c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80153b8:	430a      	orrs	r2, r1
 80153ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80153bc:	2300      	movs	r3, #0
}
 80153be:	0018      	movs	r0, r3
 80153c0:	46bd      	mov	sp, r7
 80153c2:	b006      	add	sp, #24
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	46c0      	nop			@ (mov r8, r8)
 80153c8:	40021000 	.word	0x40021000
 80153cc:	40007000 	.word	0x40007000
 80153d0:	fffcffff 	.word	0xfffcffff
 80153d4:	fff7ffff 	.word	0xfff7ffff
 80153d8:	00001388 	.word	0x00001388
 80153dc:	ffcfffff 	.word	0xffcfffff
 80153e0:	efffffff 	.word	0xefffffff
 80153e4:	fffff3ff 	.word	0xfffff3ff
 80153e8:	ffffcfff 	.word	0xffffcfff
 80153ec:	fbffffff 	.word	0xfbffffff
 80153f0:	fff3ffff 	.word	0xfff3ffff

080153f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80153f4:	b5b0      	push	{r4, r5, r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80153fc:	230f      	movs	r3, #15
 80153fe:	18fb      	adds	r3, r7, r3
 8015400:	2201      	movs	r2, #1
 8015402:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d101      	bne.n	801540e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801540a:	2301      	movs	r3, #1
 801540c:	e088      	b.n	8015520 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2221      	movs	r2, #33	@ 0x21
 8015412:	5c9b      	ldrb	r3, [r3, r2]
 8015414:	b2db      	uxtb	r3, r3
 8015416:	2b00      	cmp	r3, #0
 8015418:	d107      	bne.n	801542a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2220      	movs	r2, #32
 801541e:	2100      	movs	r1, #0
 8015420:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	0018      	movs	r0, r3
 8015426:	f7f3 fba9 	bl	8008b7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2221      	movs	r2, #33	@ 0x21
 801542e:	2102      	movs	r1, #2
 8015430:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	68db      	ldr	r3, [r3, #12]
 8015438:	2210      	movs	r2, #16
 801543a:	4013      	ands	r3, r2
 801543c:	2b10      	cmp	r3, #16
 801543e:	d05f      	beq.n	8015500 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	22ca      	movs	r2, #202	@ 0xca
 8015446:	625a      	str	r2, [r3, #36]	@ 0x24
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	2253      	movs	r2, #83	@ 0x53
 801544e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015450:	250f      	movs	r5, #15
 8015452:	197c      	adds	r4, r7, r5
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	0018      	movs	r0, r3
 8015458:	f000 fa7c 	bl	8015954 <RTC_EnterInitMode>
 801545c:	0003      	movs	r3, r0
 801545e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015460:	0028      	movs	r0, r5
 8015462:	183b      	adds	r3, r7, r0
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d12c      	bne.n	80154c4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	689a      	ldr	r2, [r3, #8]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	492c      	ldr	r1, [pc, #176]	@ (8015528 <HAL_RTC_Init+0x134>)
 8015476:	400a      	ands	r2, r1
 8015478:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	6899      	ldr	r1, [r3, #8]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	685a      	ldr	r2, [r3, #4]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	691b      	ldr	r3, [r3, #16]
 8015488:	431a      	orrs	r2, r3
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	699b      	ldr	r3, [r3, #24]
 801548e:	431a      	orrs	r2, r3
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	430a      	orrs	r2, r1
 8015496:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	687a      	ldr	r2, [r7, #4]
 801549e:	68d2      	ldr	r2, [r2, #12]
 80154a0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	6919      	ldr	r1, [r3, #16]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	689b      	ldr	r3, [r3, #8]
 80154ac:	041a      	lsls	r2, r3, #16
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	430a      	orrs	r2, r1
 80154b4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80154b6:	183c      	adds	r4, r7, r0
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	0018      	movs	r0, r3
 80154bc:	f000 fa8e 	bl	80159dc <RTC_ExitInitMode>
 80154c0:	0003      	movs	r3, r0
 80154c2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80154c4:	230f      	movs	r3, #15
 80154c6:	18fb      	adds	r3, r7, r3
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d113      	bne.n	80154f6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	2103      	movs	r1, #3
 80154da:	438a      	bics	r2, r1
 80154dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	69da      	ldr	r2, [r3, #28]
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	695b      	ldr	r3, [r3, #20]
 80154ec:	431a      	orrs	r2, r3
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	430a      	orrs	r2, r1
 80154f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	22ff      	movs	r2, #255	@ 0xff
 80154fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80154fe:	e003      	b.n	8015508 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015500:	230f      	movs	r3, #15
 8015502:	18fb      	adds	r3, r7, r3
 8015504:	2200      	movs	r2, #0
 8015506:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015508:	230f      	movs	r3, #15
 801550a:	18fb      	adds	r3, r7, r3
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d103      	bne.n	801551a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2221      	movs	r2, #33	@ 0x21
 8015516:	2101      	movs	r1, #1
 8015518:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801551a:	230f      	movs	r3, #15
 801551c:	18fb      	adds	r3, r7, r3
 801551e:	781b      	ldrb	r3, [r3, #0]
}
 8015520:	0018      	movs	r0, r3
 8015522:	46bd      	mov	sp, r7
 8015524:	b004      	add	sp, #16
 8015526:	bdb0      	pop	{r4, r5, r7, pc}
 8015528:	ff8fffbf 	.word	0xff8fffbf

0801552c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801552c:	b5b0      	push	{r4, r5, r7, lr}
 801552e:	b086      	sub	sp, #24
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015538:	2300      	movs	r3, #0
 801553a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2220      	movs	r2, #32
 8015540:	5c9b      	ldrb	r3, [r3, r2]
 8015542:	2b01      	cmp	r3, #1
 8015544:	d101      	bne.n	801554a <HAL_RTC_SetTime+0x1e>
 8015546:	2302      	movs	r3, #2
 8015548:	e092      	b.n	8015670 <HAL_RTC_SetTime+0x144>
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2220      	movs	r2, #32
 801554e:	2101      	movs	r1, #1
 8015550:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	2221      	movs	r2, #33	@ 0x21
 8015556:	2102      	movs	r1, #2
 8015558:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d125      	bne.n	80155ac <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	689b      	ldr	r3, [r3, #8]
 8015566:	2240      	movs	r2, #64	@ 0x40
 8015568:	4013      	ands	r3, r2
 801556a:	d102      	bne.n	8015572 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	2200      	movs	r2, #0
 8015570:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	781b      	ldrb	r3, [r3, #0]
 8015576:	0018      	movs	r0, r3
 8015578:	f000 fa5a 	bl	8015a30 <RTC_ByteToBcd2>
 801557c:	0003      	movs	r3, r0
 801557e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	785b      	ldrb	r3, [r3, #1]
 8015584:	0018      	movs	r0, r3
 8015586:	f000 fa53 	bl	8015a30 <RTC_ByteToBcd2>
 801558a:	0003      	movs	r3, r0
 801558c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801558e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	789b      	ldrb	r3, [r3, #2]
 8015594:	0018      	movs	r0, r3
 8015596:	f000 fa4b 	bl	8015a30 <RTC_ByteToBcd2>
 801559a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801559c:	0022      	movs	r2, r4
 801559e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80155a0:	68bb      	ldr	r3, [r7, #8]
 80155a2:	78db      	ldrb	r3, [r3, #3]
 80155a4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80155a6:	4313      	orrs	r3, r2
 80155a8:	617b      	str	r3, [r7, #20]
 80155aa:	e017      	b.n	80155dc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	689b      	ldr	r3, [r3, #8]
 80155b2:	2240      	movs	r2, #64	@ 0x40
 80155b4:	4013      	ands	r3, r2
 80155b6:	d102      	bne.n	80155be <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	2200      	movs	r2, #0
 80155bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	781b      	ldrb	r3, [r3, #0]
 80155c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	785b      	ldrb	r3, [r3, #1]
 80155c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80155ca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80155cc:	68ba      	ldr	r2, [r7, #8]
 80155ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80155d0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	78db      	ldrb	r3, [r3, #3]
 80155d6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80155d8:	4313      	orrs	r3, r2
 80155da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	22ca      	movs	r2, #202	@ 0xca
 80155e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	2253      	movs	r2, #83	@ 0x53
 80155ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80155ec:	2513      	movs	r5, #19
 80155ee:	197c      	adds	r4, r7, r5
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	0018      	movs	r0, r3
 80155f4:	f000 f9ae 	bl	8015954 <RTC_EnterInitMode>
 80155f8:	0003      	movs	r3, r0
 80155fa:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80155fc:	0028      	movs	r0, r5
 80155fe:	183b      	adds	r3, r7, r0
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d120      	bne.n	8015648 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	697a      	ldr	r2, [r7, #20]
 801560c:	491a      	ldr	r1, [pc, #104]	@ (8015678 <HAL_RTC_SetTime+0x14c>)
 801560e:	400a      	ands	r2, r1
 8015610:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	689a      	ldr	r2, [r3, #8]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	4917      	ldr	r1, [pc, #92]	@ (801567c <HAL_RTC_SetTime+0x150>)
 801561e:	400a      	ands	r2, r1
 8015620:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	6899      	ldr	r1, [r3, #8]
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	68da      	ldr	r2, [r3, #12]
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	691b      	ldr	r3, [r3, #16]
 8015630:	431a      	orrs	r2, r3
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	430a      	orrs	r2, r1
 8015638:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801563a:	183c      	adds	r4, r7, r0
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	0018      	movs	r0, r3
 8015640:	f000 f9cc 	bl	80159dc <RTC_ExitInitMode>
 8015644:	0003      	movs	r3, r0
 8015646:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015648:	2313      	movs	r3, #19
 801564a:	18fb      	adds	r3, r7, r3
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d103      	bne.n	801565a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2221      	movs	r2, #33	@ 0x21
 8015656:	2101      	movs	r1, #1
 8015658:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	22ff      	movs	r2, #255	@ 0xff
 8015660:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	2220      	movs	r2, #32
 8015666:	2100      	movs	r1, #0
 8015668:	5499      	strb	r1, [r3, r2]

  return status;
 801566a:	2313      	movs	r3, #19
 801566c:	18fb      	adds	r3, r7, r3
 801566e:	781b      	ldrb	r3, [r3, #0]
}
 8015670:	0018      	movs	r0, r3
 8015672:	46bd      	mov	sp, r7
 8015674:	b006      	add	sp, #24
 8015676:	bdb0      	pop	{r4, r5, r7, pc}
 8015678:	007f7f7f 	.word	0x007f7f7f
 801567c:	fffbffff 	.word	0xfffbffff

08015680 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b086      	sub	sp, #24
 8015684:	af00      	add	r7, sp, #0
 8015686:	60f8      	str	r0, [r7, #12]
 8015688:	60b9      	str	r1, [r7, #8]
 801568a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801568c:	2300      	movs	r3, #0
 801568e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	691b      	ldr	r3, [r3, #16]
 80156a0:	045b      	lsls	r3, r3, #17
 80156a2:	0c5a      	lsrs	r2, r3, #17
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	4a22      	ldr	r2, [pc, #136]	@ (8015738 <HAL_RTC_GetTime+0xb8>)
 80156b0:	4013      	ands	r3, r2
 80156b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80156b4:	697b      	ldr	r3, [r7, #20]
 80156b6:	0c1b      	lsrs	r3, r3, #16
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	223f      	movs	r2, #63	@ 0x3f
 80156bc:	4013      	ands	r3, r2
 80156be:	b2da      	uxtb	r2, r3
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	0a1b      	lsrs	r3, r3, #8
 80156c8:	b2db      	uxtb	r3, r3
 80156ca:	227f      	movs	r2, #127	@ 0x7f
 80156cc:	4013      	ands	r3, r2
 80156ce:	b2da      	uxtb	r2, r3
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	227f      	movs	r2, #127	@ 0x7f
 80156da:	4013      	ands	r3, r2
 80156dc:	b2da      	uxtb	r2, r3
 80156de:	68bb      	ldr	r3, [r7, #8]
 80156e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	0d9b      	lsrs	r3, r3, #22
 80156e6:	b2db      	uxtb	r3, r3
 80156e8:	2201      	movs	r2, #1
 80156ea:	4013      	ands	r3, r2
 80156ec:	b2da      	uxtb	r2, r3
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d11a      	bne.n	801572e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80156f8:	68bb      	ldr	r3, [r7, #8]
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	0018      	movs	r0, r3
 80156fe:	f000 f9b8 	bl	8015a72 <RTC_Bcd2ToByte>
 8015702:	0003      	movs	r3, r0
 8015704:	001a      	movs	r2, r3
 8015706:	68bb      	ldr	r3, [r7, #8]
 8015708:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	785b      	ldrb	r3, [r3, #1]
 801570e:	0018      	movs	r0, r3
 8015710:	f000 f9af 	bl	8015a72 <RTC_Bcd2ToByte>
 8015714:	0003      	movs	r3, r0
 8015716:	001a      	movs	r2, r3
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	789b      	ldrb	r3, [r3, #2]
 8015720:	0018      	movs	r0, r3
 8015722:	f000 f9a6 	bl	8015a72 <RTC_Bcd2ToByte>
 8015726:	0003      	movs	r3, r0
 8015728:	001a      	movs	r2, r3
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801572e:	2300      	movs	r3, #0
}
 8015730:	0018      	movs	r0, r3
 8015732:	46bd      	mov	sp, r7
 8015734:	b006      	add	sp, #24
 8015736:	bd80      	pop	{r7, pc}
 8015738:	007f7f7f 	.word	0x007f7f7f

0801573c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801573c:	b5b0      	push	{r4, r5, r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af00      	add	r7, sp, #0
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015748:	2300      	movs	r3, #0
 801574a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	2220      	movs	r2, #32
 8015750:	5c9b      	ldrb	r3, [r3, r2]
 8015752:	2b01      	cmp	r3, #1
 8015754:	d101      	bne.n	801575a <HAL_RTC_SetDate+0x1e>
 8015756:	2302      	movs	r3, #2
 8015758:	e07e      	b.n	8015858 <HAL_RTC_SetDate+0x11c>
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	2220      	movs	r2, #32
 801575e:	2101      	movs	r1, #1
 8015760:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	2221      	movs	r2, #33	@ 0x21
 8015766:	2102      	movs	r1, #2
 8015768:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d10e      	bne.n	801578e <HAL_RTC_SetDate+0x52>
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	785b      	ldrb	r3, [r3, #1]
 8015774:	001a      	movs	r2, r3
 8015776:	2310      	movs	r3, #16
 8015778:	4013      	ands	r3, r2
 801577a:	d008      	beq.n	801578e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	785b      	ldrb	r3, [r3, #1]
 8015780:	2210      	movs	r2, #16
 8015782:	4393      	bics	r3, r2
 8015784:	b2db      	uxtb	r3, r3
 8015786:	330a      	adds	r3, #10
 8015788:	b2da      	uxtb	r2, r3
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d11c      	bne.n	80157ce <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	78db      	ldrb	r3, [r3, #3]
 8015798:	0018      	movs	r0, r3
 801579a:	f000 f949 	bl	8015a30 <RTC_ByteToBcd2>
 801579e:	0003      	movs	r3, r0
 80157a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	785b      	ldrb	r3, [r3, #1]
 80157a6:	0018      	movs	r0, r3
 80157a8:	f000 f942 	bl	8015a30 <RTC_ByteToBcd2>
 80157ac:	0003      	movs	r3, r0
 80157ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80157b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80157b2:	68bb      	ldr	r3, [r7, #8]
 80157b4:	789b      	ldrb	r3, [r3, #2]
 80157b6:	0018      	movs	r0, r3
 80157b8:	f000 f93a 	bl	8015a30 <RTC_ByteToBcd2>
 80157bc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80157be:	0022      	movs	r2, r4
 80157c0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80157c2:	68bb      	ldr	r3, [r7, #8]
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80157c8:	4313      	orrs	r3, r2
 80157ca:	617b      	str	r3, [r7, #20]
 80157cc:	e00e      	b.n	80157ec <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	78db      	ldrb	r3, [r3, #3]
 80157d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	785b      	ldrb	r3, [r3, #1]
 80157d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80157da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80157dc:	68ba      	ldr	r2, [r7, #8]
 80157de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80157e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80157e8:	4313      	orrs	r3, r2
 80157ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	22ca      	movs	r2, #202	@ 0xca
 80157f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	2253      	movs	r2, #83	@ 0x53
 80157fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80157fc:	2513      	movs	r5, #19
 80157fe:	197c      	adds	r4, r7, r5
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	0018      	movs	r0, r3
 8015804:	f000 f8a6 	bl	8015954 <RTC_EnterInitMode>
 8015808:	0003      	movs	r3, r0
 801580a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801580c:	0028      	movs	r0, r5
 801580e:	183b      	adds	r3, r7, r0
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d10c      	bne.n	8015830 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	697a      	ldr	r2, [r7, #20]
 801581c:	4910      	ldr	r1, [pc, #64]	@ (8015860 <HAL_RTC_SetDate+0x124>)
 801581e:	400a      	ands	r2, r1
 8015820:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015822:	183c      	adds	r4, r7, r0
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	0018      	movs	r0, r3
 8015828:	f000 f8d8 	bl	80159dc <RTC_ExitInitMode>
 801582c:	0003      	movs	r3, r0
 801582e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015830:	2313      	movs	r3, #19
 8015832:	18fb      	adds	r3, r7, r3
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d103      	bne.n	8015842 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	2221      	movs	r2, #33	@ 0x21
 801583e:	2101      	movs	r1, #1
 8015840:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	22ff      	movs	r2, #255	@ 0xff
 8015848:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2220      	movs	r2, #32
 801584e:	2100      	movs	r1, #0
 8015850:	5499      	strb	r1, [r3, r2]

  return status;
 8015852:	2313      	movs	r3, #19
 8015854:	18fb      	adds	r3, r7, r3
 8015856:	781b      	ldrb	r3, [r3, #0]
}
 8015858:	0018      	movs	r0, r3
 801585a:	46bd      	mov	sp, r7
 801585c:	b006      	add	sp, #24
 801585e:	bdb0      	pop	{r4, r5, r7, pc}
 8015860:	00ffff3f 	.word	0x00ffff3f

08015864 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	60b9      	str	r1, [r7, #8]
 801586e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015870:	2300      	movs	r3, #0
 8015872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	4a21      	ldr	r2, [pc, #132]	@ (8015900 <HAL_RTC_GetDate+0x9c>)
 801587c:	4013      	ands	r3, r2
 801587e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	0c1b      	lsrs	r3, r3, #16
 8015884:	b2da      	uxtb	r2, r3
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	0a1b      	lsrs	r3, r3, #8
 801588e:	b2db      	uxtb	r3, r3
 8015890:	221f      	movs	r2, #31
 8015892:	4013      	ands	r3, r2
 8015894:	b2da      	uxtb	r2, r3
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801589a:	697b      	ldr	r3, [r7, #20]
 801589c:	b2db      	uxtb	r3, r3
 801589e:	223f      	movs	r2, #63	@ 0x3f
 80158a0:	4013      	ands	r3, r2
 80158a2:	b2da      	uxtb	r2, r3
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	0b5b      	lsrs	r3, r3, #13
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	2207      	movs	r2, #7
 80158b0:	4013      	ands	r3, r2
 80158b2:	b2da      	uxtb	r2, r3
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d11a      	bne.n	80158f4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	78db      	ldrb	r3, [r3, #3]
 80158c2:	0018      	movs	r0, r3
 80158c4:	f000 f8d5 	bl	8015a72 <RTC_Bcd2ToByte>
 80158c8:	0003      	movs	r3, r0
 80158ca:	001a      	movs	r2, r3
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	785b      	ldrb	r3, [r3, #1]
 80158d4:	0018      	movs	r0, r3
 80158d6:	f000 f8cc 	bl	8015a72 <RTC_Bcd2ToByte>
 80158da:	0003      	movs	r3, r0
 80158dc:	001a      	movs	r2, r3
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	789b      	ldrb	r3, [r3, #2]
 80158e6:	0018      	movs	r0, r3
 80158e8:	f000 f8c3 	bl	8015a72 <RTC_Bcd2ToByte>
 80158ec:	0003      	movs	r3, r0
 80158ee:	001a      	movs	r2, r3
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80158f4:	2300      	movs	r3, #0
}
 80158f6:	0018      	movs	r0, r3
 80158f8:	46bd      	mov	sp, r7
 80158fa:	b006      	add	sp, #24
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	46c0      	nop			@ (mov r8, r8)
 8015900:	00ffff3f 	.word	0x00ffff3f

08015904 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8015904:	b580      	push	{r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801590c:	2300      	movs	r3, #0
 801590e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	4a0e      	ldr	r2, [pc, #56]	@ (8015950 <HAL_RTC_WaitForSynchro+0x4c>)
 8015916:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015918:	f7f8 fcfe 	bl	800e318 <HAL_GetTick>
 801591c:	0003      	movs	r3, r0
 801591e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015920:	e00a      	b.n	8015938 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015922:	f7f8 fcf9 	bl	800e318 <HAL_GetTick>
 8015926:	0002      	movs	r2, r0
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	1ad2      	subs	r2, r2, r3
 801592c:	23fa      	movs	r3, #250	@ 0xfa
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	429a      	cmp	r2, r3
 8015932:	d901      	bls.n	8015938 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8015934:	2303      	movs	r3, #3
 8015936:	e006      	b.n	8015946 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	2220      	movs	r2, #32
 8015940:	4013      	ands	r3, r2
 8015942:	d0ee      	beq.n	8015922 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8015944:	2300      	movs	r3, #0
}
 8015946:	0018      	movs	r0, r3
 8015948:	46bd      	mov	sp, r7
 801594a:	b004      	add	sp, #16
 801594c:	bd80      	pop	{r7, pc}
 801594e:	46c0      	nop			@ (mov r8, r8)
 8015950:	0001ff5f 	.word	0x0001ff5f

08015954 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b084      	sub	sp, #16
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801595c:	2300      	movs	r3, #0
 801595e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8015960:	230f      	movs	r3, #15
 8015962:	18fb      	adds	r3, r7, r3
 8015964:	2200      	movs	r2, #0
 8015966:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	2240      	movs	r2, #64	@ 0x40
 8015970:	4013      	ands	r3, r2
 8015972:	d12c      	bne.n	80159ce <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	68da      	ldr	r2, [r3, #12]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2180      	movs	r1, #128	@ 0x80
 8015980:	430a      	orrs	r2, r1
 8015982:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015984:	f7f8 fcc8 	bl	800e318 <HAL_GetTick>
 8015988:	0003      	movs	r3, r0
 801598a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801598c:	e014      	b.n	80159b8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801598e:	f7f8 fcc3 	bl	800e318 <HAL_GetTick>
 8015992:	0002      	movs	r2, r0
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	1ad2      	subs	r2, r2, r3
 8015998:	200f      	movs	r0, #15
 801599a:	183b      	adds	r3, r7, r0
 801599c:	1839      	adds	r1, r7, r0
 801599e:	7809      	ldrb	r1, [r1, #0]
 80159a0:	7019      	strb	r1, [r3, #0]
 80159a2:	23fa      	movs	r3, #250	@ 0xfa
 80159a4:	009b      	lsls	r3, r3, #2
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d906      	bls.n	80159b8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	2221      	movs	r2, #33	@ 0x21
 80159ae:	2104      	movs	r1, #4
 80159b0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80159b2:	183b      	adds	r3, r7, r0
 80159b4:	2201      	movs	r2, #1
 80159b6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	2240      	movs	r2, #64	@ 0x40
 80159c0:	4013      	ands	r3, r2
 80159c2:	d104      	bne.n	80159ce <RTC_EnterInitMode+0x7a>
 80159c4:	230f      	movs	r3, #15
 80159c6:	18fb      	adds	r3, r7, r3
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	2b01      	cmp	r3, #1
 80159cc:	d1df      	bne.n	801598e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80159ce:	230f      	movs	r3, #15
 80159d0:	18fb      	adds	r3, r7, r3
 80159d2:	781b      	ldrb	r3, [r3, #0]
}
 80159d4:	0018      	movs	r0, r3
 80159d6:	46bd      	mov	sp, r7
 80159d8:	b004      	add	sp, #16
 80159da:	bd80      	pop	{r7, pc}

080159dc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80159dc:	b590      	push	{r4, r7, lr}
 80159de:	b085      	sub	sp, #20
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80159e4:	240f      	movs	r4, #15
 80159e6:	193b      	adds	r3, r7, r4
 80159e8:	2200      	movs	r2, #0
 80159ea:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	68da      	ldr	r2, [r3, #12]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	2180      	movs	r1, #128	@ 0x80
 80159f8:	438a      	bics	r2, r1
 80159fa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	689b      	ldr	r3, [r3, #8]
 8015a02:	2220      	movs	r2, #32
 8015a04:	4013      	ands	r3, r2
 8015a06:	d10c      	bne.n	8015a22 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	0018      	movs	r0, r3
 8015a0c:	f7ff ff7a 	bl	8015904 <HAL_RTC_WaitForSynchro>
 8015a10:	1e03      	subs	r3, r0, #0
 8015a12:	d006      	beq.n	8015a22 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2221      	movs	r2, #33	@ 0x21
 8015a18:	2104      	movs	r1, #4
 8015a1a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8015a1c:	193b      	adds	r3, r7, r4
 8015a1e:	2201      	movs	r2, #1
 8015a20:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8015a22:	230f      	movs	r3, #15
 8015a24:	18fb      	adds	r3, r7, r3
 8015a26:	781b      	ldrb	r3, [r3, #0]
}
 8015a28:	0018      	movs	r0, r3
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	b005      	add	sp, #20
 8015a2e:	bd90      	pop	{r4, r7, pc}

08015a30 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b084      	sub	sp, #16
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	0002      	movs	r2, r0
 8015a38:	1dfb      	adds	r3, r7, #7
 8015a3a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8015a40:	e007      	b.n	8015a52 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	3301      	adds	r3, #1
 8015a46:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8015a48:	1dfb      	adds	r3, r7, #7
 8015a4a:	1dfa      	adds	r2, r7, #7
 8015a4c:	7812      	ldrb	r2, [r2, #0]
 8015a4e:	3a0a      	subs	r2, #10
 8015a50:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8015a52:	1dfb      	adds	r3, r7, #7
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	2b09      	cmp	r3, #9
 8015a58:	d8f3      	bhi.n	8015a42 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	b2db      	uxtb	r3, r3
 8015a5e:	011b      	lsls	r3, r3, #4
 8015a60:	b2da      	uxtb	r2, r3
 8015a62:	1dfb      	adds	r3, r7, #7
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	4313      	orrs	r3, r2
 8015a68:	b2db      	uxtb	r3, r3
}
 8015a6a:	0018      	movs	r0, r3
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	b004      	add	sp, #16
 8015a70:	bd80      	pop	{r7, pc}

08015a72 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8015a72:	b580      	push	{r7, lr}
 8015a74:	b084      	sub	sp, #16
 8015a76:	af00      	add	r7, sp, #0
 8015a78:	0002      	movs	r2, r0
 8015a7a:	1dfb      	adds	r3, r7, #7
 8015a7c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8015a82:	1dfb      	adds	r3, r7, #7
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	091b      	lsrs	r3, r3, #4
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	001a      	movs	r2, r3
 8015a8c:	0013      	movs	r3, r2
 8015a8e:	009b      	lsls	r3, r3, #2
 8015a90:	189b      	adds	r3, r3, r2
 8015a92:	005b      	lsls	r3, r3, #1
 8015a94:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	b2da      	uxtb	r2, r3
 8015a9a:	1dfb      	adds	r3, r7, #7
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	210f      	movs	r1, #15
 8015aa0:	400b      	ands	r3, r1
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	18d3      	adds	r3, r2, r3
 8015aa6:	b2db      	uxtb	r3, r3
}
 8015aa8:	0018      	movs	r0, r3
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	b004      	add	sp, #16
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b086      	sub	sp, #24
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015abc:	4b64      	ldr	r3, [pc, #400]	@ (8015c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	22fa      	movs	r2, #250	@ 0xfa
 8015ac2:	01d1      	lsls	r1, r2, #7
 8015ac4:	0018      	movs	r0, r3
 8015ac6:	f7ea fb6d 	bl	80001a4 <__udivsi3>
 8015aca:	0003      	movs	r3, r0
 8015acc:	001a      	movs	r2, r3
 8015ace:	0013      	movs	r3, r2
 8015ad0:	015b      	lsls	r3, r3, #5
 8015ad2:	1a9b      	subs	r3, r3, r2
 8015ad4:	009b      	lsls	r3, r3, #2
 8015ad6:	189b      	adds	r3, r3, r2
 8015ad8:	00db      	lsls	r3, r3, #3
 8015ada:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	2220      	movs	r2, #32
 8015ae0:	5c9b      	ldrb	r3, [r3, r2]
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d101      	bne.n	8015aea <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8015ae6:	2302      	movs	r3, #2
 8015ae8:	e0ad      	b.n	8015c46 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2220      	movs	r2, #32
 8015aee:	2101      	movs	r1, #1
 8015af0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	2221      	movs	r2, #33	@ 0x21
 8015af6:	2102      	movs	r1, #2
 8015af8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	22ca      	movs	r2, #202	@ 0xca
 8015b00:	625a      	str	r2, [r3, #36]	@ 0x24
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	2253      	movs	r2, #83	@ 0x53
 8015b08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	689a      	ldr	r2, [r3, #8]
 8015b10:	2380      	movs	r3, #128	@ 0x80
 8015b12:	00db      	lsls	r3, r3, #3
 8015b14:	4013      	ands	r3, r2
 8015b16:	d019      	beq.n	8015b4c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d10d      	bne.n	8015b40 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	22ff      	movs	r2, #255	@ 0xff
 8015b2a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	2221      	movs	r2, #33	@ 0x21
 8015b30:	2103      	movs	r1, #3
 8015b32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	2220      	movs	r2, #32
 8015b38:	2100      	movs	r1, #0
 8015b3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015b3c:	2303      	movs	r3, #3
 8015b3e:	e082      	b.n	8015c46 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	68db      	ldr	r3, [r3, #12]
 8015b46:	2204      	movs	r2, #4
 8015b48:	4013      	ands	r3, r2
 8015b4a:	d1e5      	bne.n	8015b18 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	689a      	ldr	r2, [r3, #8]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	493f      	ldr	r1, [pc, #252]	@ (8015c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8015b58:	400a      	ands	r2, r1
 8015b5a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	22ff      	movs	r2, #255	@ 0xff
 8015b64:	401a      	ands	r2, r3
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	493b      	ldr	r1, [pc, #236]	@ (8015c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8015b6c:	430a      	orrs	r2, r1
 8015b6e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015b70:	4b37      	ldr	r3, [pc, #220]	@ (8015c50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	22fa      	movs	r2, #250	@ 0xfa
 8015b76:	01d1      	lsls	r1, r2, #7
 8015b78:	0018      	movs	r0, r3
 8015b7a:	f7ea fb13 	bl	80001a4 <__udivsi3>
 8015b7e:	0003      	movs	r3, r0
 8015b80:	001a      	movs	r2, r3
 8015b82:	0013      	movs	r3, r2
 8015b84:	015b      	lsls	r3, r3, #5
 8015b86:	1a9b      	subs	r3, r3, r2
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	189b      	adds	r3, r3, r2
 8015b8c:	00db      	lsls	r3, r3, #3
 8015b8e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	3b01      	subs	r3, #1
 8015b94:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d10d      	bne.n	8015bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	22ff      	movs	r2, #255	@ 0xff
 8015ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2221      	movs	r2, #33	@ 0x21
 8015ba8:	2103      	movs	r1, #3
 8015baa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	2220      	movs	r2, #32
 8015bb0:	2100      	movs	r1, #0
 8015bb2:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015bb4:	2303      	movs	r3, #3
 8015bb6:	e046      	b.n	8015c46 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	68db      	ldr	r3, [r3, #12]
 8015bbe:	2204      	movs	r2, #4
 8015bc0:	4013      	ands	r3, r2
 8015bc2:	d0e5      	beq.n	8015b90 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	689a      	ldr	r2, [r3, #8]
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2107      	movs	r1, #7
 8015bd0:	438a      	bics	r2, r1
 8015bd2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	6899      	ldr	r1, [r3, #8]
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	687a      	ldr	r2, [r7, #4]
 8015be0:	430a      	orrs	r2, r1
 8015be2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	68ba      	ldr	r2, [r7, #8]
 8015bea:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8015bec:	4b1b      	ldr	r3, [pc, #108]	@ (8015c5c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015bee:	681a      	ldr	r2, [r3, #0]
 8015bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8015c5c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015bf2:	2180      	movs	r1, #128	@ 0x80
 8015bf4:	0349      	lsls	r1, r1, #13
 8015bf6:	430a      	orrs	r2, r1
 8015bf8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8015bfa:	4b18      	ldr	r3, [pc, #96]	@ (8015c5c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015bfc:	689a      	ldr	r2, [r3, #8]
 8015bfe:	4b17      	ldr	r3, [pc, #92]	@ (8015c5c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015c00:	2180      	movs	r1, #128	@ 0x80
 8015c02:	0349      	lsls	r1, r1, #13
 8015c04:	430a      	orrs	r2, r1
 8015c06:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	689a      	ldr	r2, [r3, #8]
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2180      	movs	r1, #128	@ 0x80
 8015c14:	01c9      	lsls	r1, r1, #7
 8015c16:	430a      	orrs	r2, r1
 8015c18:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	689a      	ldr	r2, [r3, #8]
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	2180      	movs	r1, #128	@ 0x80
 8015c26:	00c9      	lsls	r1, r1, #3
 8015c28:	430a      	orrs	r2, r1
 8015c2a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	22ff      	movs	r2, #255	@ 0xff
 8015c32:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	2221      	movs	r2, #33	@ 0x21
 8015c38:	2101      	movs	r1, #1
 8015c3a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	2220      	movs	r2, #32
 8015c40:	2100      	movs	r1, #0
 8015c42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015c44:	2300      	movs	r3, #0
}
 8015c46:	0018      	movs	r0, r3
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	b006      	add	sp, #24
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	46c0      	nop			@ (mov r8, r8)
 8015c50:	200000c8 	.word	0x200000c8
 8015c54:	fffffbff 	.word	0xfffffbff
 8015c58:	fffffb7f 	.word	0xfffffb7f
 8015c5c:	40010400 	.word	0x40010400

08015c60 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b084      	sub	sp, #16
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2220      	movs	r2, #32
 8015c70:	5c9b      	ldrb	r3, [r3, r2]
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d101      	bne.n	8015c7a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8015c76:	2302      	movs	r3, #2
 8015c78:	e04e      	b.n	8015d18 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	2220      	movs	r2, #32
 8015c7e:	2101      	movs	r1, #1
 8015c80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2221      	movs	r2, #33	@ 0x21
 8015c86:	2102      	movs	r1, #2
 8015c88:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	22ca      	movs	r2, #202	@ 0xca
 8015c90:	625a      	str	r2, [r3, #36]	@ 0x24
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	2253      	movs	r2, #83	@ 0x53
 8015c98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	689a      	ldr	r2, [r3, #8]
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	491e      	ldr	r1, [pc, #120]	@ (8015d20 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8015ca6:	400a      	ands	r2, r1
 8015ca8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	689a      	ldr	r2, [r3, #8]
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	491b      	ldr	r1, [pc, #108]	@ (8015d24 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015cb6:	400a      	ands	r2, r1
 8015cb8:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015cba:	f7f8 fb2d 	bl	800e318 <HAL_GetTick>
 8015cbe:	0003      	movs	r3, r0
 8015cc0:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015cc2:	e016      	b.n	8015cf2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015cc4:	f7f8 fb28 	bl	800e318 <HAL_GetTick>
 8015cc8:	0002      	movs	r2, r0
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	1ad2      	subs	r2, r2, r3
 8015cce:	23fa      	movs	r3, #250	@ 0xfa
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d90d      	bls.n	8015cf2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	22ff      	movs	r2, #255	@ 0xff
 8015cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	2221      	movs	r2, #33	@ 0x21
 8015ce2:	2103      	movs	r1, #3
 8015ce4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2220      	movs	r2, #32
 8015cea:	2100      	movs	r1, #0
 8015cec:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015cee:	2303      	movs	r3, #3
 8015cf0:	e012      	b.n	8015d18 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	68db      	ldr	r3, [r3, #12]
 8015cf8:	2204      	movs	r2, #4
 8015cfa:	4013      	ands	r3, r2
 8015cfc:	d0e2      	beq.n	8015cc4 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	22ff      	movs	r2, #255	@ 0xff
 8015d04:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2221      	movs	r2, #33	@ 0x21
 8015d0a:	2101      	movs	r1, #1
 8015d0c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	2220      	movs	r2, #32
 8015d12:	2100      	movs	r1, #0
 8015d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015d16:	2300      	movs	r3, #0
}
 8015d18:	0018      	movs	r0, r3
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	b004      	add	sp, #16
 8015d1e:	bd80      	pop	{r7, pc}
 8015d20:	fffffbff 	.word	0xfffffbff
 8015d24:	ffffbfff 	.word	0xffffbfff

08015d28 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015d30:	4b13      	ldr	r3, [pc, #76]	@ (8015d80 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8015d32:	2280      	movs	r2, #128	@ 0x80
 8015d34:	0352      	lsls	r2, r2, #13
 8015d36:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	689a      	ldr	r2, [r3, #8]
 8015d3e:	2380      	movs	r3, #128	@ 0x80
 8015d40:	01db      	lsls	r3, r3, #7
 8015d42:	4013      	ands	r3, r2
 8015d44:	d014      	beq.n	8015d70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	68da      	ldr	r2, [r3, #12]
 8015d4c:	2380      	movs	r3, #128	@ 0x80
 8015d4e:	00db      	lsls	r3, r3, #3
 8015d50:	4013      	ands	r3, r2
 8015d52:	d00d      	beq.n	8015d70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	22ff      	movs	r2, #255	@ 0xff
 8015d5c:	401a      	ands	r2, r3
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	4908      	ldr	r1, [pc, #32]	@ (8015d84 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8015d64:	430a      	orrs	r2, r1
 8015d66:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	0018      	movs	r0, r3
 8015d6c:	f000 f80c 	bl	8015d88 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2221      	movs	r2, #33	@ 0x21
 8015d74:	2101      	movs	r1, #1
 8015d76:	5499      	strb	r1, [r3, r2]
}
 8015d78:	46c0      	nop			@ (mov r8, r8)
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	b002      	add	sp, #8
 8015d7e:	bd80      	pop	{r7, pc}
 8015d80:	40010400 	.word	0x40010400
 8015d84:	fffffb7f 	.word	0xfffffb7f

08015d88 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015d90:	46c0      	nop			@ (mov r8, r8)
 8015d92:	46bd      	mov	sp, r7
 8015d94:	b002      	add	sp, #8
 8015d96:	bd80      	pop	{r7, pc}

08015d98 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	60f8      	str	r0, [r7, #12]
 8015da0:	60b9      	str	r1, [r7, #8]
 8015da2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8015da4:	2300      	movs	r3, #0
 8015da6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	3350      	adds	r3, #80	@ 0x50
 8015dae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	009b      	lsls	r3, r3, #2
 8015db4:	697a      	ldr	r2, [r7, #20]
 8015db6:	18d3      	adds	r3, r2, r3
 8015db8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	687a      	ldr	r2, [r7, #4]
 8015dbe:	601a      	str	r2, [r3, #0]
}
 8015dc0:	46c0      	nop			@ (mov r8, r8)
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	b006      	add	sp, #24
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b084      	sub	sp, #16
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	3350      	adds	r3, #80	@ 0x50
 8015ddc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	009b      	lsls	r3, r3, #2
 8015de2:	68fa      	ldr	r2, [r7, #12]
 8015de4:	18d3      	adds	r3, r2, r3
 8015de6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	681b      	ldr	r3, [r3, #0]
}
 8015dec:	0018      	movs	r0, r3
 8015dee:	46bd      	mov	sp, r7
 8015df0:	b004      	add	sp, #16
 8015df2:	bd80      	pop	{r7, pc}

08015df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d101      	bne.n	8015e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015e02:	2301      	movs	r3, #1
 8015e04:	e032      	b.n	8015e6c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2239      	movs	r2, #57	@ 0x39
 8015e0a:	5c9b      	ldrb	r3, [r3, r2]
 8015e0c:	b2db      	uxtb	r3, r3
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d107      	bne.n	8015e22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	2238      	movs	r2, #56	@ 0x38
 8015e16:	2100      	movs	r1, #0
 8015e18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	0018      	movs	r0, r3
 8015e1e:	f7f7 fb87 	bl	800d530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	2239      	movs	r2, #57	@ 0x39
 8015e26:	2102      	movs	r1, #2
 8015e28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681a      	ldr	r2, [r3, #0]
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	3304      	adds	r3, #4
 8015e32:	0019      	movs	r1, r3
 8015e34:	0010      	movs	r0, r2
 8015e36:	f000 fa1d 	bl	8016274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	223e      	movs	r2, #62	@ 0x3e
 8015e3e:	2101      	movs	r1, #1
 8015e40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	223a      	movs	r2, #58	@ 0x3a
 8015e46:	2101      	movs	r1, #1
 8015e48:	5499      	strb	r1, [r3, r2]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	223b      	movs	r2, #59	@ 0x3b
 8015e4e:	2101      	movs	r1, #1
 8015e50:	5499      	strb	r1, [r3, r2]
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	223c      	movs	r2, #60	@ 0x3c
 8015e56:	2101      	movs	r1, #1
 8015e58:	5499      	strb	r1, [r3, r2]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	223d      	movs	r2, #61	@ 0x3d
 8015e5e:	2101      	movs	r1, #1
 8015e60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2239      	movs	r2, #57	@ 0x39
 8015e66:	2101      	movs	r1, #1
 8015e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e6a:	2300      	movs	r3, #0
}
 8015e6c:	0018      	movs	r0, r3
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	b002      	add	sp, #8
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b084      	sub	sp, #16
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2239      	movs	r2, #57	@ 0x39
 8015e80:	5c9b      	ldrb	r3, [r3, r2]
 8015e82:	b2db      	uxtb	r3, r3
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	d001      	beq.n	8015e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015e88:	2301      	movs	r3, #1
 8015e8a:	e033      	b.n	8015ef4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2239      	movs	r2, #57	@ 0x39
 8015e90:	2102      	movs	r1, #2
 8015e92:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681a      	ldr	r2, [r3, #0]
 8015e98:	2380      	movs	r3, #128	@ 0x80
 8015e9a:	05db      	lsls	r3, r3, #23
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d00e      	beq.n	8015ebe <HAL_TIM_Base_Start+0x4a>
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	4a15      	ldr	r2, [pc, #84]	@ (8015efc <HAL_TIM_Base_Start+0x88>)
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	d009      	beq.n	8015ebe <HAL_TIM_Base_Start+0x4a>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	4a14      	ldr	r2, [pc, #80]	@ (8015f00 <HAL_TIM_Base_Start+0x8c>)
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d004      	beq.n	8015ebe <HAL_TIM_Base_Start+0x4a>
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	4a12      	ldr	r2, [pc, #72]	@ (8015f04 <HAL_TIM_Base_Start+0x90>)
 8015eba:	4293      	cmp	r3, r2
 8015ebc:	d111      	bne.n	8015ee2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	689b      	ldr	r3, [r3, #8]
 8015ec4:	2207      	movs	r2, #7
 8015ec6:	4013      	ands	r3, r2
 8015ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	2b06      	cmp	r3, #6
 8015ece:	d010      	beq.n	8015ef2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	681a      	ldr	r2, [r3, #0]
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2101      	movs	r1, #1
 8015edc:	430a      	orrs	r2, r1
 8015ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015ee0:	e007      	b.n	8015ef2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	681a      	ldr	r2, [r3, #0]
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	2101      	movs	r1, #1
 8015eee:	430a      	orrs	r2, r1
 8015ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015ef2:	2300      	movs	r3, #0
}
 8015ef4:	0018      	movs	r0, r3
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	b004      	add	sp, #16
 8015efa:	bd80      	pop	{r7, pc}
 8015efc:	40000400 	.word	0x40000400
 8015f00:	40010800 	.word	0x40010800
 8015f04:	40011400 	.word	0x40011400

08015f08 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	6a1b      	ldr	r3, [r3, #32]
 8015f16:	4a0a      	ldr	r2, [pc, #40]	@ (8015f40 <HAL_TIM_Base_Stop+0x38>)
 8015f18:	4013      	ands	r3, r2
 8015f1a:	d107      	bne.n	8015f2c <HAL_TIM_Base_Stop+0x24>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	681a      	ldr	r2, [r3, #0]
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	2101      	movs	r1, #1
 8015f28:	438a      	bics	r2, r1
 8015f2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2239      	movs	r2, #57	@ 0x39
 8015f30:	2101      	movs	r1, #1
 8015f32:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015f34:	2300      	movs	r3, #0
}
 8015f36:	0018      	movs	r0, r3
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	b002      	add	sp, #8
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	46c0      	nop			@ (mov r8, r8)
 8015f40:	00001111 	.word	0x00001111

08015f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d101      	bne.n	8015f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015f52:	2301      	movs	r3, #1
 8015f54:	e032      	b.n	8015fbc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	2239      	movs	r2, #57	@ 0x39
 8015f5a:	5c9b      	ldrb	r3, [r3, r2]
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d107      	bne.n	8015f72 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2238      	movs	r2, #56	@ 0x38
 8015f66:	2100      	movs	r1, #0
 8015f68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	0018      	movs	r0, r3
 8015f6e:	f7f7 fabb 	bl	800d4e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2239      	movs	r2, #57	@ 0x39
 8015f76:	2102      	movs	r1, #2
 8015f78:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	3304      	adds	r3, #4
 8015f82:	0019      	movs	r1, r3
 8015f84:	0010      	movs	r0, r2
 8015f86:	f000 f975 	bl	8016274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	223e      	movs	r2, #62	@ 0x3e
 8015f8e:	2101      	movs	r1, #1
 8015f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	223a      	movs	r2, #58	@ 0x3a
 8015f96:	2101      	movs	r1, #1
 8015f98:	5499      	strb	r1, [r3, r2]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	223b      	movs	r2, #59	@ 0x3b
 8015f9e:	2101      	movs	r1, #1
 8015fa0:	5499      	strb	r1, [r3, r2]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	223c      	movs	r2, #60	@ 0x3c
 8015fa6:	2101      	movs	r1, #1
 8015fa8:	5499      	strb	r1, [r3, r2]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	223d      	movs	r2, #61	@ 0x3d
 8015fae:	2101      	movs	r1, #1
 8015fb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	2239      	movs	r2, #57	@ 0x39
 8015fb6:	2101      	movs	r1, #1
 8015fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015fba:	2300      	movs	r3, #0
}
 8015fbc:	0018      	movs	r0, r3
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	b002      	add	sp, #8
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
 8015fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d108      	bne.n	8015fe6 <HAL_TIM_PWM_Start+0x22>
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	223a      	movs	r2, #58	@ 0x3a
 8015fd8:	5c9b      	ldrb	r3, [r3, r2]
 8015fda:	b2db      	uxtb	r3, r3
 8015fdc:	3b01      	subs	r3, #1
 8015fde:	1e5a      	subs	r2, r3, #1
 8015fe0:	4193      	sbcs	r3, r2
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	e01f      	b.n	8016026 <HAL_TIM_PWM_Start+0x62>
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	2b04      	cmp	r3, #4
 8015fea:	d108      	bne.n	8015ffe <HAL_TIM_PWM_Start+0x3a>
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	223b      	movs	r2, #59	@ 0x3b
 8015ff0:	5c9b      	ldrb	r3, [r3, r2]
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	3b01      	subs	r3, #1
 8015ff6:	1e5a      	subs	r2, r3, #1
 8015ff8:	4193      	sbcs	r3, r2
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	e013      	b.n	8016026 <HAL_TIM_PWM_Start+0x62>
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	2b08      	cmp	r3, #8
 8016002:	d108      	bne.n	8016016 <HAL_TIM_PWM_Start+0x52>
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	223c      	movs	r2, #60	@ 0x3c
 8016008:	5c9b      	ldrb	r3, [r3, r2]
 801600a:	b2db      	uxtb	r3, r3
 801600c:	3b01      	subs	r3, #1
 801600e:	1e5a      	subs	r2, r3, #1
 8016010:	4193      	sbcs	r3, r2
 8016012:	b2db      	uxtb	r3, r3
 8016014:	e007      	b.n	8016026 <HAL_TIM_PWM_Start+0x62>
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	223d      	movs	r2, #61	@ 0x3d
 801601a:	5c9b      	ldrb	r3, [r3, r2]
 801601c:	b2db      	uxtb	r3, r3
 801601e:	3b01      	subs	r3, #1
 8016020:	1e5a      	subs	r2, r3, #1
 8016022:	4193      	sbcs	r3, r2
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b00      	cmp	r3, #0
 8016028:	d001      	beq.n	801602e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801602a:	2301      	movs	r3, #1
 801602c:	e052      	b.n	80160d4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d104      	bne.n	801603e <HAL_TIM_PWM_Start+0x7a>
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	223a      	movs	r2, #58	@ 0x3a
 8016038:	2102      	movs	r1, #2
 801603a:	5499      	strb	r1, [r3, r2]
 801603c:	e013      	b.n	8016066 <HAL_TIM_PWM_Start+0xa2>
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	2b04      	cmp	r3, #4
 8016042:	d104      	bne.n	801604e <HAL_TIM_PWM_Start+0x8a>
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	223b      	movs	r2, #59	@ 0x3b
 8016048:	2102      	movs	r1, #2
 801604a:	5499      	strb	r1, [r3, r2]
 801604c:	e00b      	b.n	8016066 <HAL_TIM_PWM_Start+0xa2>
 801604e:	683b      	ldr	r3, [r7, #0]
 8016050:	2b08      	cmp	r3, #8
 8016052:	d104      	bne.n	801605e <HAL_TIM_PWM_Start+0x9a>
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	223c      	movs	r2, #60	@ 0x3c
 8016058:	2102      	movs	r1, #2
 801605a:	5499      	strb	r1, [r3, r2]
 801605c:	e003      	b.n	8016066 <HAL_TIM_PWM_Start+0xa2>
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	223d      	movs	r2, #61	@ 0x3d
 8016062:	2102      	movs	r1, #2
 8016064:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	6839      	ldr	r1, [r7, #0]
 801606c:	2201      	movs	r2, #1
 801606e:	0018      	movs	r0, r3
 8016070:	f000 fa62 	bl	8016538 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	2380      	movs	r3, #128	@ 0x80
 801607a:	05db      	lsls	r3, r3, #23
 801607c:	429a      	cmp	r2, r3
 801607e:	d00e      	beq.n	801609e <HAL_TIM_PWM_Start+0xda>
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	4a15      	ldr	r2, [pc, #84]	@ (80160dc <HAL_TIM_PWM_Start+0x118>)
 8016086:	4293      	cmp	r3, r2
 8016088:	d009      	beq.n	801609e <HAL_TIM_PWM_Start+0xda>
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	4a14      	ldr	r2, [pc, #80]	@ (80160e0 <HAL_TIM_PWM_Start+0x11c>)
 8016090:	4293      	cmp	r3, r2
 8016092:	d004      	beq.n	801609e <HAL_TIM_PWM_Start+0xda>
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4a12      	ldr	r2, [pc, #72]	@ (80160e4 <HAL_TIM_PWM_Start+0x120>)
 801609a:	4293      	cmp	r3, r2
 801609c:	d111      	bne.n	80160c2 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	689b      	ldr	r3, [r3, #8]
 80160a4:	2207      	movs	r2, #7
 80160a6:	4013      	ands	r3, r2
 80160a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2b06      	cmp	r3, #6
 80160ae:	d010      	beq.n	80160d2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	681a      	ldr	r2, [r3, #0]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2101      	movs	r1, #1
 80160bc:	430a      	orrs	r2, r1
 80160be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80160c0:	e007      	b.n	80160d2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	681a      	ldr	r2, [r3, #0]
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2101      	movs	r1, #1
 80160ce:	430a      	orrs	r2, r1
 80160d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80160d2:	2300      	movs	r3, #0
}
 80160d4:	0018      	movs	r0, r3
 80160d6:	46bd      	mov	sp, r7
 80160d8:	b004      	add	sp, #16
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	40000400 	.word	0x40000400
 80160e0:	40010800 	.word	0x40010800
 80160e4:	40011400 	.word	0x40011400

080160e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b086      	sub	sp, #24
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	60f8      	str	r0, [r7, #12]
 80160f0:	60b9      	str	r1, [r7, #8]
 80160f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80160f4:	2317      	movs	r3, #23
 80160f6:	18fb      	adds	r3, r7, r3
 80160f8:	2200      	movs	r2, #0
 80160fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	2238      	movs	r2, #56	@ 0x38
 8016100:	5c9b      	ldrb	r3, [r3, r2]
 8016102:	2b01      	cmp	r3, #1
 8016104:	d101      	bne.n	801610a <HAL_TIM_PWM_ConfigChannel+0x22>
 8016106:	2302      	movs	r3, #2
 8016108:	e0ad      	b.n	8016266 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	2238      	movs	r2, #56	@ 0x38
 801610e:	2101      	movs	r1, #1
 8016110:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2b0c      	cmp	r3, #12
 8016116:	d100      	bne.n	801611a <HAL_TIM_PWM_ConfigChannel+0x32>
 8016118:	e076      	b.n	8016208 <HAL_TIM_PWM_ConfigChannel+0x120>
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	2b0c      	cmp	r3, #12
 801611e:	d900      	bls.n	8016122 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016120:	e095      	b.n	801624e <HAL_TIM_PWM_ConfigChannel+0x166>
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2b08      	cmp	r3, #8
 8016126:	d04e      	beq.n	80161c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2b08      	cmp	r3, #8
 801612c:	d900      	bls.n	8016130 <HAL_TIM_PWM_ConfigChannel+0x48>
 801612e:	e08e      	b.n	801624e <HAL_TIM_PWM_ConfigChannel+0x166>
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d003      	beq.n	801613e <HAL_TIM_PWM_ConfigChannel+0x56>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2b04      	cmp	r3, #4
 801613a:	d021      	beq.n	8016180 <HAL_TIM_PWM_ConfigChannel+0x98>
 801613c:	e087      	b.n	801624e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	68ba      	ldr	r2, [r7, #8]
 8016144:	0011      	movs	r1, r2
 8016146:	0018      	movs	r0, r3
 8016148:	f000 f8f2 	bl	8016330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	699a      	ldr	r2, [r3, #24]
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2108      	movs	r1, #8
 8016158:	430a      	orrs	r2, r1
 801615a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	699a      	ldr	r2, [r3, #24]
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	2104      	movs	r1, #4
 8016168:	438a      	bics	r2, r1
 801616a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	6999      	ldr	r1, [r3, #24]
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	68da      	ldr	r2, [r3, #12]
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	430a      	orrs	r2, r1
 801617c:	619a      	str	r2, [r3, #24]
      break;
 801617e:	e06b      	b.n	8016258 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	68ba      	ldr	r2, [r7, #8]
 8016186:	0011      	movs	r1, r2
 8016188:	0018      	movs	r0, r3
 801618a:	f000 f90d 	bl	80163a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	699a      	ldr	r2, [r3, #24]
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	2180      	movs	r1, #128	@ 0x80
 801619a:	0109      	lsls	r1, r1, #4
 801619c:	430a      	orrs	r2, r1
 801619e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	699a      	ldr	r2, [r3, #24]
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	4931      	ldr	r1, [pc, #196]	@ (8016270 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80161ac:	400a      	ands	r2, r1
 80161ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	6999      	ldr	r1, [r3, #24]
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	68db      	ldr	r3, [r3, #12]
 80161ba:	021a      	lsls	r2, r3, #8
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	430a      	orrs	r2, r1
 80161c2:	619a      	str	r2, [r3, #24]
      break;
 80161c4:	e048      	b.n	8016258 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	68ba      	ldr	r2, [r7, #8]
 80161cc:	0011      	movs	r1, r2
 80161ce:	0018      	movs	r0, r3
 80161d0:	f000 f92c 	bl	801642c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	69da      	ldr	r2, [r3, #28]
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	2108      	movs	r1, #8
 80161e0:	430a      	orrs	r2, r1
 80161e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	69da      	ldr	r2, [r3, #28]
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	2104      	movs	r1, #4
 80161f0:	438a      	bics	r2, r1
 80161f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	69d9      	ldr	r1, [r3, #28]
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	68da      	ldr	r2, [r3, #12]
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	430a      	orrs	r2, r1
 8016204:	61da      	str	r2, [r3, #28]
      break;
 8016206:	e027      	b.n	8016258 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	68ba      	ldr	r2, [r7, #8]
 801620e:	0011      	movs	r1, r2
 8016210:	0018      	movs	r0, r3
 8016212:	f000 f94b 	bl	80164ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	69da      	ldr	r2, [r3, #28]
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	2180      	movs	r1, #128	@ 0x80
 8016222:	0109      	lsls	r1, r1, #4
 8016224:	430a      	orrs	r2, r1
 8016226:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	69da      	ldr	r2, [r3, #28]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	490f      	ldr	r1, [pc, #60]	@ (8016270 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016234:	400a      	ands	r2, r1
 8016236:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	69d9      	ldr	r1, [r3, #28]
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	68db      	ldr	r3, [r3, #12]
 8016242:	021a      	lsls	r2, r3, #8
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	430a      	orrs	r2, r1
 801624a:	61da      	str	r2, [r3, #28]
      break;
 801624c:	e004      	b.n	8016258 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801624e:	2317      	movs	r3, #23
 8016250:	18fb      	adds	r3, r7, r3
 8016252:	2201      	movs	r2, #1
 8016254:	701a      	strb	r2, [r3, #0]
      break;
 8016256:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	2238      	movs	r2, #56	@ 0x38
 801625c:	2100      	movs	r1, #0
 801625e:	5499      	strb	r1, [r3, r2]

  return status;
 8016260:	2317      	movs	r3, #23
 8016262:	18fb      	adds	r3, r7, r3
 8016264:	781b      	ldrb	r3, [r3, #0]
}
 8016266:	0018      	movs	r0, r3
 8016268:	46bd      	mov	sp, r7
 801626a:	b006      	add	sp, #24
 801626c:	bd80      	pop	{r7, pc}
 801626e:	46c0      	nop			@ (mov r8, r8)
 8016270:	fffffbff 	.word	0xfffffbff

08016274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b084      	sub	sp, #16
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	2380      	movs	r3, #128	@ 0x80
 8016288:	05db      	lsls	r3, r3, #23
 801628a:	429a      	cmp	r2, r3
 801628c:	d00b      	beq.n	80162a6 <TIM_Base_SetConfig+0x32>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	4a23      	ldr	r2, [pc, #140]	@ (8016320 <TIM_Base_SetConfig+0xac>)
 8016292:	4293      	cmp	r3, r2
 8016294:	d007      	beq.n	80162a6 <TIM_Base_SetConfig+0x32>
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	4a22      	ldr	r2, [pc, #136]	@ (8016324 <TIM_Base_SetConfig+0xb0>)
 801629a:	4293      	cmp	r3, r2
 801629c:	d003      	beq.n	80162a6 <TIM_Base_SetConfig+0x32>
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	4a21      	ldr	r2, [pc, #132]	@ (8016328 <TIM_Base_SetConfig+0xb4>)
 80162a2:	4293      	cmp	r3, r2
 80162a4:	d108      	bne.n	80162b8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	2270      	movs	r2, #112	@ 0x70
 80162aa:	4393      	bics	r3, r2
 80162ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	68fa      	ldr	r2, [r7, #12]
 80162b4:	4313      	orrs	r3, r2
 80162b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80162b8:	687a      	ldr	r2, [r7, #4]
 80162ba:	2380      	movs	r3, #128	@ 0x80
 80162bc:	05db      	lsls	r3, r3, #23
 80162be:	429a      	cmp	r2, r3
 80162c0:	d00b      	beq.n	80162da <TIM_Base_SetConfig+0x66>
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	4a16      	ldr	r2, [pc, #88]	@ (8016320 <TIM_Base_SetConfig+0xac>)
 80162c6:	4293      	cmp	r3, r2
 80162c8:	d007      	beq.n	80162da <TIM_Base_SetConfig+0x66>
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4a15      	ldr	r2, [pc, #84]	@ (8016324 <TIM_Base_SetConfig+0xb0>)
 80162ce:	4293      	cmp	r3, r2
 80162d0:	d003      	beq.n	80162da <TIM_Base_SetConfig+0x66>
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	4a14      	ldr	r2, [pc, #80]	@ (8016328 <TIM_Base_SetConfig+0xb4>)
 80162d6:	4293      	cmp	r3, r2
 80162d8:	d108      	bne.n	80162ec <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	4a13      	ldr	r2, [pc, #76]	@ (801632c <TIM_Base_SetConfig+0xb8>)
 80162de:	4013      	ands	r3, r2
 80162e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80162e2:	683b      	ldr	r3, [r7, #0]
 80162e4:	68db      	ldr	r3, [r3, #12]
 80162e6:	68fa      	ldr	r2, [r7, #12]
 80162e8:	4313      	orrs	r3, r2
 80162ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2280      	movs	r2, #128	@ 0x80
 80162f0:	4393      	bics	r3, r2
 80162f2:	001a      	movs	r2, r3
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	691b      	ldr	r3, [r3, #16]
 80162f8:	4313      	orrs	r3, r2
 80162fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	68fa      	ldr	r2, [r7, #12]
 8016300:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	689a      	ldr	r2, [r3, #8]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801630a:	683b      	ldr	r3, [r7, #0]
 801630c:	681a      	ldr	r2, [r3, #0]
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2201      	movs	r2, #1
 8016316:	615a      	str	r2, [r3, #20]
}
 8016318:	46c0      	nop			@ (mov r8, r8)
 801631a:	46bd      	mov	sp, r7
 801631c:	b004      	add	sp, #16
 801631e:	bd80      	pop	{r7, pc}
 8016320:	40000400 	.word	0x40000400
 8016324:	40010800 	.word	0x40010800
 8016328:	40011400 	.word	0x40011400
 801632c:	fffffcff 	.word	0xfffffcff

08016330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b086      	sub	sp, #24
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6a1b      	ldr	r3, [r3, #32]
 801633e:	2201      	movs	r2, #1
 8016340:	4393      	bics	r3, r2
 8016342:	001a      	movs	r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6a1b      	ldr	r3, [r3, #32]
 801634c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	699b      	ldr	r3, [r3, #24]
 8016358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	2270      	movs	r2, #112	@ 0x70
 801635e:	4393      	bics	r3, r2
 8016360:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	2203      	movs	r2, #3
 8016366:	4393      	bics	r3, r2
 8016368:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	68fa      	ldr	r2, [r7, #12]
 8016370:	4313      	orrs	r3, r2
 8016372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	2202      	movs	r2, #2
 8016378:	4393      	bics	r3, r2
 801637a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	689b      	ldr	r3, [r3, #8]
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	4313      	orrs	r3, r2
 8016384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	693a      	ldr	r2, [r7, #16]
 801638a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	68fa      	ldr	r2, [r7, #12]
 8016390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	685a      	ldr	r2, [r3, #4]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	697a      	ldr	r2, [r7, #20]
 801639e:	621a      	str	r2, [r3, #32]
}
 80163a0:	46c0      	nop			@ (mov r8, r8)
 80163a2:	46bd      	mov	sp, r7
 80163a4:	b006      	add	sp, #24
 80163a6:	bd80      	pop	{r7, pc}

080163a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b086      	sub	sp, #24
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
 80163b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6a1b      	ldr	r3, [r3, #32]
 80163b6:	2210      	movs	r2, #16
 80163b8:	4393      	bics	r3, r2
 80163ba:	001a      	movs	r2, r3
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	6a1b      	ldr	r3, [r3, #32]
 80163c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	699b      	ldr	r3, [r3, #24]
 80163d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	4a13      	ldr	r2, [pc, #76]	@ (8016424 <TIM_OC2_SetConfig+0x7c>)
 80163d6:	4013      	ands	r3, r2
 80163d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	4a12      	ldr	r2, [pc, #72]	@ (8016428 <TIM_OC2_SetConfig+0x80>)
 80163de:	4013      	ands	r3, r2
 80163e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	021b      	lsls	r3, r3, #8
 80163e8:	68fa      	ldr	r2, [r7, #12]
 80163ea:	4313      	orrs	r3, r2
 80163ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	2220      	movs	r2, #32
 80163f2:	4393      	bics	r3, r2
 80163f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	689b      	ldr	r3, [r3, #8]
 80163fa:	011b      	lsls	r3, r3, #4
 80163fc:	697a      	ldr	r2, [r7, #20]
 80163fe:	4313      	orrs	r3, r2
 8016400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	693a      	ldr	r2, [r7, #16]
 8016406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	68fa      	ldr	r2, [r7, #12]
 801640c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	685a      	ldr	r2, [r3, #4]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	697a      	ldr	r2, [r7, #20]
 801641a:	621a      	str	r2, [r3, #32]
}
 801641c:	46c0      	nop			@ (mov r8, r8)
 801641e:	46bd      	mov	sp, r7
 8016420:	b006      	add	sp, #24
 8016422:	bd80      	pop	{r7, pc}
 8016424:	ffff8fff 	.word	0xffff8fff
 8016428:	fffffcff 	.word	0xfffffcff

0801642c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b086      	sub	sp, #24
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6a1b      	ldr	r3, [r3, #32]
 801643a:	4a1a      	ldr	r2, [pc, #104]	@ (80164a4 <TIM_OC3_SetConfig+0x78>)
 801643c:	401a      	ands	r2, r3
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	6a1b      	ldr	r3, [r3, #32]
 8016446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	685b      	ldr	r3, [r3, #4]
 801644c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	69db      	ldr	r3, [r3, #28]
 8016452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	2270      	movs	r2, #112	@ 0x70
 8016458:	4393      	bics	r3, r2
 801645a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2203      	movs	r2, #3
 8016460:	4393      	bics	r3, r2
 8016462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016464:	683b      	ldr	r3, [r7, #0]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	68fa      	ldr	r2, [r7, #12]
 801646a:	4313      	orrs	r3, r2
 801646c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801646e:	697b      	ldr	r3, [r7, #20]
 8016470:	4a0d      	ldr	r2, [pc, #52]	@ (80164a8 <TIM_OC3_SetConfig+0x7c>)
 8016472:	4013      	ands	r3, r2
 8016474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	689b      	ldr	r3, [r3, #8]
 801647a:	021b      	lsls	r3, r3, #8
 801647c:	697a      	ldr	r2, [r7, #20]
 801647e:	4313      	orrs	r3, r2
 8016480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	693a      	ldr	r2, [r7, #16]
 8016486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	68fa      	ldr	r2, [r7, #12]
 801648c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	685a      	ldr	r2, [r3, #4]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	697a      	ldr	r2, [r7, #20]
 801649a:	621a      	str	r2, [r3, #32]
}
 801649c:	46c0      	nop			@ (mov r8, r8)
 801649e:	46bd      	mov	sp, r7
 80164a0:	b006      	add	sp, #24
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	fffffeff 	.word	0xfffffeff
 80164a8:	fffffdff 	.word	0xfffffdff

080164ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b086      	sub	sp, #24
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
 80164b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	6a1b      	ldr	r3, [r3, #32]
 80164ba:	4a1b      	ldr	r2, [pc, #108]	@ (8016528 <TIM_OC4_SetConfig+0x7c>)
 80164bc:	401a      	ands	r2, r3
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	6a1b      	ldr	r3, [r3, #32]
 80164c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	685b      	ldr	r3, [r3, #4]
 80164cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	69db      	ldr	r3, [r3, #28]
 80164d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	4a15      	ldr	r2, [pc, #84]	@ (801652c <TIM_OC4_SetConfig+0x80>)
 80164d8:	4013      	ands	r3, r2
 80164da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	4a14      	ldr	r2, [pc, #80]	@ (8016530 <TIM_OC4_SetConfig+0x84>)
 80164e0:	4013      	ands	r3, r2
 80164e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	021b      	lsls	r3, r3, #8
 80164ea:	68fa      	ldr	r2, [r7, #12]
 80164ec:	4313      	orrs	r3, r2
 80164ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	4a10      	ldr	r2, [pc, #64]	@ (8016534 <TIM_OC4_SetConfig+0x88>)
 80164f4:	4013      	ands	r3, r2
 80164f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	689b      	ldr	r3, [r3, #8]
 80164fc:	031b      	lsls	r3, r3, #12
 80164fe:	697a      	ldr	r2, [r7, #20]
 8016500:	4313      	orrs	r3, r2
 8016502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	693a      	ldr	r2, [r7, #16]
 8016508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	68fa      	ldr	r2, [r7, #12]
 801650e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016510:	683b      	ldr	r3, [r7, #0]
 8016512:	685a      	ldr	r2, [r3, #4]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	697a      	ldr	r2, [r7, #20]
 801651c:	621a      	str	r2, [r3, #32]
}
 801651e:	46c0      	nop			@ (mov r8, r8)
 8016520:	46bd      	mov	sp, r7
 8016522:	b006      	add	sp, #24
 8016524:	bd80      	pop	{r7, pc}
 8016526:	46c0      	nop			@ (mov r8, r8)
 8016528:	ffffefff 	.word	0xffffefff
 801652c:	ffff8fff 	.word	0xffff8fff
 8016530:	fffffcff 	.word	0xfffffcff
 8016534:	ffffdfff 	.word	0xffffdfff

08016538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b086      	sub	sp, #24
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	60b9      	str	r1, [r7, #8]
 8016542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	221f      	movs	r2, #31
 8016548:	4013      	ands	r3, r2
 801654a:	2201      	movs	r2, #1
 801654c:	409a      	lsls	r2, r3
 801654e:	0013      	movs	r3, r2
 8016550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	6a1b      	ldr	r3, [r3, #32]
 8016556:	697a      	ldr	r2, [r7, #20]
 8016558:	43d2      	mvns	r2, r2
 801655a:	401a      	ands	r2, r3
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	6a1a      	ldr	r2, [r3, #32]
 8016564:	68bb      	ldr	r3, [r7, #8]
 8016566:	211f      	movs	r1, #31
 8016568:	400b      	ands	r3, r1
 801656a:	6879      	ldr	r1, [r7, #4]
 801656c:	4099      	lsls	r1, r3
 801656e:	000b      	movs	r3, r1
 8016570:	431a      	orrs	r2, r3
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	621a      	str	r2, [r3, #32]
}
 8016576:	46c0      	nop			@ (mov r8, r8)
 8016578:	46bd      	mov	sp, r7
 801657a:	b006      	add	sp, #24
 801657c:	bd80      	pop	{r7, pc}
	...

08016580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2238      	movs	r2, #56	@ 0x38
 801658e:	5c9b      	ldrb	r3, [r3, r2]
 8016590:	2b01      	cmp	r3, #1
 8016592:	d101      	bne.n	8016598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016594:	2302      	movs	r3, #2
 8016596:	e047      	b.n	8016628 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2238      	movs	r2, #56	@ 0x38
 801659c:	2101      	movs	r1, #1
 801659e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2239      	movs	r2, #57	@ 0x39
 80165a4:	2102      	movs	r1, #2
 80165a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	689b      	ldr	r3, [r3, #8]
 80165b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2270      	movs	r2, #112	@ 0x70
 80165bc:	4393      	bics	r3, r2
 80165be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80165c0:	683b      	ldr	r3, [r7, #0]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	68fa      	ldr	r2, [r7, #12]
 80165c6:	4313      	orrs	r3, r2
 80165c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	68fa      	ldr	r2, [r7, #12]
 80165d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681a      	ldr	r2, [r3, #0]
 80165d6:	2380      	movs	r3, #128	@ 0x80
 80165d8:	05db      	lsls	r3, r3, #23
 80165da:	429a      	cmp	r2, r3
 80165dc:	d00e      	beq.n	80165fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	4a13      	ldr	r2, [pc, #76]	@ (8016630 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80165e4:	4293      	cmp	r3, r2
 80165e6:	d009      	beq.n	80165fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	4a11      	ldr	r2, [pc, #68]	@ (8016634 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80165ee:	4293      	cmp	r3, r2
 80165f0:	d004      	beq.n	80165fc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	4a10      	ldr	r2, [pc, #64]	@ (8016638 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80165f8:	4293      	cmp	r3, r2
 80165fa:	d10c      	bne.n	8016616 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	2280      	movs	r2, #128	@ 0x80
 8016600:	4393      	bics	r3, r2
 8016602:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016604:	683b      	ldr	r3, [r7, #0]
 8016606:	685b      	ldr	r3, [r3, #4]
 8016608:	68ba      	ldr	r2, [r7, #8]
 801660a:	4313      	orrs	r3, r2
 801660c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	68ba      	ldr	r2, [r7, #8]
 8016614:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2239      	movs	r2, #57	@ 0x39
 801661a:	2101      	movs	r1, #1
 801661c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2238      	movs	r2, #56	@ 0x38
 8016622:	2100      	movs	r1, #0
 8016624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016626:	2300      	movs	r3, #0
}
 8016628:	0018      	movs	r0, r3
 801662a:	46bd      	mov	sp, r7
 801662c:	b004      	add	sp, #16
 801662e:	bd80      	pop	{r7, pc}
 8016630:	40000400 	.word	0x40000400
 8016634:	40010800 	.word	0x40010800
 8016638:	40011400 	.word	0x40011400

0801663c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
 8016644:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	2238      	movs	r2, #56	@ 0x38
 801664a:	5c9b      	ldrb	r3, [r3, r2]
 801664c:	2b01      	cmp	r3, #1
 801664e:	d101      	bne.n	8016654 <HAL_TIMEx_RemapConfig+0x18>
 8016650:	2302      	movs	r3, #2
 8016652:	e00c      	b.n	801666e <HAL_TIMEx_RemapConfig+0x32>
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2238      	movs	r2, #56	@ 0x38
 8016658:	2101      	movs	r1, #1
 801665a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	683a      	ldr	r2, [r7, #0]
 8016662:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2238      	movs	r2, #56	@ 0x38
 8016668:	2100      	movs	r1, #0
 801666a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801666c:	2300      	movs	r3, #0
}
 801666e:	0018      	movs	r0, r3
 8016670:	46bd      	mov	sp, r7
 8016672:	b002      	add	sp, #8
 8016674:	bd80      	pop	{r7, pc}
	...

08016678 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b082      	sub	sp, #8
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d101      	bne.n	801668a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016686:	2301      	movs	r3, #1
 8016688:	e053      	b.n	8016732 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801668e:	2b00      	cmp	r3, #0
 8016690:	d116      	bne.n	80166c0 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2278      	movs	r2, #120	@ 0x78
 8016696:	2100      	movs	r1, #0
 8016698:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	0018      	movs	r0, r3
 801669e:	f000 fd65 	bl	801716c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	22b0      	movs	r2, #176	@ 0xb0
 80166a6:	589b      	ldr	r3, [r3, r2]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d103      	bne.n	80166b4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	21b0      	movs	r1, #176	@ 0xb0
 80166b0:	4a22      	ldr	r2, [pc, #136]	@ (801673c <HAL_UART_Init+0xc4>)
 80166b2:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	22b0      	movs	r2, #176	@ 0xb0
 80166b8:	589b      	ldr	r3, [r3, r2]
 80166ba:	687a      	ldr	r2, [r7, #4]
 80166bc:	0010      	movs	r0, r2
 80166be:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	2224      	movs	r2, #36	@ 0x24
 80166c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	681a      	ldr	r2, [r3, #0]
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	2101      	movs	r1, #1
 80166d2:	438a      	bics	r2, r1
 80166d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	0018      	movs	r0, r3
 80166da:	f000 fd8b 	bl	80171f4 <UART_SetConfig>
 80166de:	0003      	movs	r3, r0
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d101      	bne.n	80166e8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80166e4:	2301      	movs	r3, #1
 80166e6:	e024      	b.n	8016732 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d003      	beq.n	80166f8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	0018      	movs	r0, r3
 80166f4:	f001 f81c 	bl	8017730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	685a      	ldr	r2, [r3, #4]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	490f      	ldr	r1, [pc, #60]	@ (8016740 <HAL_UART_Init+0xc8>)
 8016704:	400a      	ands	r2, r1
 8016706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	689a      	ldr	r2, [r3, #8]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	212a      	movs	r1, #42	@ 0x2a
 8016714:	438a      	bics	r2, r1
 8016716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	681a      	ldr	r2, [r3, #0]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	2101      	movs	r1, #1
 8016724:	430a      	orrs	r2, r1
 8016726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	0018      	movs	r0, r3
 801672c:	f001 f8b4 	bl	8017898 <UART_CheckIdleState>
 8016730:	0003      	movs	r3, r0
}
 8016732:	0018      	movs	r0, r3
 8016734:	46bd      	mov	sp, r7
 8016736:	b002      	add	sp, #8
 8016738:	bd80      	pop	{r7, pc}
 801673a:	46c0      	nop			@ (mov r8, r8)
 801673c:	0800d765 	.word	0x0800d765
 8016740:	ffffb7ff 	.word	0xffffb7ff

08016744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b08a      	sub	sp, #40	@ 0x28
 8016748:	af02      	add	r7, sp, #8
 801674a:	60f8      	str	r0, [r7, #12]
 801674c:	60b9      	str	r1, [r7, #8]
 801674e:	603b      	str	r3, [r7, #0]
 8016750:	1dbb      	adds	r3, r7, #6
 8016752:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016758:	2b20      	cmp	r3, #32
 801675a:	d000      	beq.n	801675e <HAL_UART_Transmit+0x1a>
 801675c:	e08c      	b.n	8016878 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d003      	beq.n	801676c <HAL_UART_Transmit+0x28>
 8016764:	1dbb      	adds	r3, r7, #6
 8016766:	881b      	ldrh	r3, [r3, #0]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d101      	bne.n	8016770 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801676c:	2301      	movs	r3, #1
 801676e:	e084      	b.n	801687a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	689a      	ldr	r2, [r3, #8]
 8016774:	2380      	movs	r3, #128	@ 0x80
 8016776:	015b      	lsls	r3, r3, #5
 8016778:	429a      	cmp	r2, r3
 801677a:	d109      	bne.n	8016790 <HAL_UART_Transmit+0x4c>
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	691b      	ldr	r3, [r3, #16]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d105      	bne.n	8016790 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	2201      	movs	r2, #1
 8016788:	4013      	ands	r3, r2
 801678a:	d001      	beq.n	8016790 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801678c:	2301      	movs	r3, #1
 801678e:	e074      	b.n	801687a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2284      	movs	r2, #132	@ 0x84
 8016794:	2100      	movs	r1, #0
 8016796:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2221      	movs	r2, #33	@ 0x21
 801679c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801679e:	f7f7 fdbb 	bl	800e318 <HAL_GetTick>
 80167a2:	0003      	movs	r3, r0
 80167a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	1dba      	adds	r2, r7, #6
 80167aa:	2150      	movs	r1, #80	@ 0x50
 80167ac:	8812      	ldrh	r2, [r2, #0]
 80167ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	1dba      	adds	r2, r7, #6
 80167b4:	2152      	movs	r1, #82	@ 0x52
 80167b6:	8812      	ldrh	r2, [r2, #0]
 80167b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	689a      	ldr	r2, [r3, #8]
 80167be:	2380      	movs	r3, #128	@ 0x80
 80167c0:	015b      	lsls	r3, r3, #5
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d108      	bne.n	80167d8 <HAL_UART_Transmit+0x94>
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	691b      	ldr	r3, [r3, #16]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d104      	bne.n	80167d8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80167ce:	2300      	movs	r3, #0
 80167d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	61bb      	str	r3, [r7, #24]
 80167d6:	e003      	b.n	80167e0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80167dc:	2300      	movs	r3, #0
 80167de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80167e0:	e02f      	b.n	8016842 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80167e2:	697a      	ldr	r2, [r7, #20]
 80167e4:	68f8      	ldr	r0, [r7, #12]
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	9300      	str	r3, [sp, #0]
 80167ea:	0013      	movs	r3, r2
 80167ec:	2200      	movs	r2, #0
 80167ee:	2180      	movs	r1, #128	@ 0x80
 80167f0:	f001 f8fa 	bl	80179e8 <UART_WaitOnFlagUntilTimeout>
 80167f4:	1e03      	subs	r3, r0, #0
 80167f6:	d004      	beq.n	8016802 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2220      	movs	r2, #32
 80167fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80167fe:	2303      	movs	r3, #3
 8016800:	e03b      	b.n	801687a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8016802:	69fb      	ldr	r3, [r7, #28]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d10b      	bne.n	8016820 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016808:	69bb      	ldr	r3, [r7, #24]
 801680a:	881b      	ldrh	r3, [r3, #0]
 801680c:	001a      	movs	r2, r3
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	05d2      	lsls	r2, r2, #23
 8016814:	0dd2      	lsrs	r2, r2, #23
 8016816:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016818:	69bb      	ldr	r3, [r7, #24]
 801681a:	3302      	adds	r3, #2
 801681c:	61bb      	str	r3, [r7, #24]
 801681e:	e007      	b.n	8016830 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	781a      	ldrb	r2, [r3, #0]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801682a:	69fb      	ldr	r3, [r7, #28]
 801682c:	3301      	adds	r3, #1
 801682e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	2252      	movs	r2, #82	@ 0x52
 8016834:	5a9b      	ldrh	r3, [r3, r2]
 8016836:	b29b      	uxth	r3, r3
 8016838:	3b01      	subs	r3, #1
 801683a:	b299      	uxth	r1, r3
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	2252      	movs	r2, #82	@ 0x52
 8016840:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2252      	movs	r2, #82	@ 0x52
 8016846:	5a9b      	ldrh	r3, [r3, r2]
 8016848:	b29b      	uxth	r3, r3
 801684a:	2b00      	cmp	r3, #0
 801684c:	d1c9      	bne.n	80167e2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801684e:	697a      	ldr	r2, [r7, #20]
 8016850:	68f8      	ldr	r0, [r7, #12]
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	9300      	str	r3, [sp, #0]
 8016856:	0013      	movs	r3, r2
 8016858:	2200      	movs	r2, #0
 801685a:	2140      	movs	r1, #64	@ 0x40
 801685c:	f001 f8c4 	bl	80179e8 <UART_WaitOnFlagUntilTimeout>
 8016860:	1e03      	subs	r3, r0, #0
 8016862:	d004      	beq.n	801686e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	2220      	movs	r2, #32
 8016868:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801686a:	2303      	movs	r3, #3
 801686c:	e005      	b.n	801687a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	2220      	movs	r2, #32
 8016872:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016874:	2300      	movs	r3, #0
 8016876:	e000      	b.n	801687a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8016878:	2302      	movs	r3, #2
  }
}
 801687a:	0018      	movs	r0, r3
 801687c:	46bd      	mov	sp, r7
 801687e:	b008      	add	sp, #32
 8016880:	bd80      	pop	{r7, pc}
	...

08016884 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b088      	sub	sp, #32
 8016888:	af00      	add	r7, sp, #0
 801688a:	60f8      	str	r0, [r7, #12]
 801688c:	60b9      	str	r1, [r7, #8]
 801688e:	1dbb      	adds	r3, r7, #6
 8016890:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	2280      	movs	r2, #128	@ 0x80
 8016896:	589b      	ldr	r3, [r3, r2]
 8016898:	2b20      	cmp	r3, #32
 801689a:	d14a      	bne.n	8016932 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d003      	beq.n	80168aa <HAL_UART_Receive_IT+0x26>
 80168a2:	1dbb      	adds	r3, r7, #6
 80168a4:	881b      	ldrh	r3, [r3, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d101      	bne.n	80168ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80168aa:	2301      	movs	r3, #1
 80168ac:	e042      	b.n	8016934 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	689a      	ldr	r2, [r3, #8]
 80168b2:	2380      	movs	r3, #128	@ 0x80
 80168b4:	015b      	lsls	r3, r3, #5
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d109      	bne.n	80168ce <HAL_UART_Receive_IT+0x4a>
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	691b      	ldr	r3, [r3, #16]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d105      	bne.n	80168ce <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	2201      	movs	r2, #1
 80168c6:	4013      	ands	r3, r2
 80168c8:	d001      	beq.n	80168ce <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80168ca:	2301      	movs	r3, #1
 80168cc:	e032      	b.n	8016934 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2200      	movs	r2, #0
 80168d2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	4a18      	ldr	r2, [pc, #96]	@ (801693c <HAL_UART_Receive_IT+0xb8>)
 80168da:	4293      	cmp	r3, r2
 80168dc:	d020      	beq.n	8016920 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	685a      	ldr	r2, [r3, #4]
 80168e4:	2380      	movs	r3, #128	@ 0x80
 80168e6:	041b      	lsls	r3, r3, #16
 80168e8:	4013      	ands	r3, r2
 80168ea:	d019      	beq.n	8016920 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168ec:	f3ef 8310 	mrs	r3, PRIMASK
 80168f0:	613b      	str	r3, [r7, #16]
  return(result);
 80168f2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80168f4:	61fb      	str	r3, [r7, #28]
 80168f6:	2301      	movs	r3, #1
 80168f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	f383 8810 	msr	PRIMASK, r3
}
 8016900:	46c0      	nop			@ (mov r8, r8)
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	681a      	ldr	r2, [r3, #0]
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	2180      	movs	r1, #128	@ 0x80
 801690e:	04c9      	lsls	r1, r1, #19
 8016910:	430a      	orrs	r2, r1
 8016912:	601a      	str	r2, [r3, #0]
 8016914:	69fb      	ldr	r3, [r7, #28]
 8016916:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016918:	69bb      	ldr	r3, [r7, #24]
 801691a:	f383 8810 	msr	PRIMASK, r3
}
 801691e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016920:	1dbb      	adds	r3, r7, #6
 8016922:	881a      	ldrh	r2, [r3, #0]
 8016924:	68b9      	ldr	r1, [r7, #8]
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	0018      	movs	r0, r3
 801692a:	f001 f8c7 	bl	8017abc <UART_Start_Receive_IT>
 801692e:	0003      	movs	r3, r0
 8016930:	e000      	b.n	8016934 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016932:	2302      	movs	r3, #2
  }
}
 8016934:	0018      	movs	r0, r3
 8016936:	46bd      	mov	sp, r7
 8016938:	b008      	add	sp, #32
 801693a:	bd80      	pop	{r7, pc}
 801693c:	40004800 	.word	0x40004800

08016940 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b088      	sub	sp, #32
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	1dbb      	adds	r3, r7, #6
 801694c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016952:	2b20      	cmp	r3, #32
 8016954:	d000      	beq.n	8016958 <HAL_UART_Transmit_DMA+0x18>
 8016956:	e077      	b.n	8016a48 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d003      	beq.n	8016966 <HAL_UART_Transmit_DMA+0x26>
 801695e:	1dbb      	adds	r3, r7, #6
 8016960:	881b      	ldrh	r3, [r3, #0]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d101      	bne.n	801696a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016966:	2301      	movs	r3, #1
 8016968:	e06f      	b.n	8016a4a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	689a      	ldr	r2, [r3, #8]
 801696e:	2380      	movs	r3, #128	@ 0x80
 8016970:	015b      	lsls	r3, r3, #5
 8016972:	429a      	cmp	r2, r3
 8016974:	d109      	bne.n	801698a <HAL_UART_Transmit_DMA+0x4a>
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	691b      	ldr	r3, [r3, #16]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d105      	bne.n	801698a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	2201      	movs	r2, #1
 8016982:	4013      	ands	r3, r2
 8016984:	d001      	beq.n	801698a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016986:	2301      	movs	r3, #1
 8016988:	e05f      	b.n	8016a4a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	68ba      	ldr	r2, [r7, #8]
 801698e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	1dba      	adds	r2, r7, #6
 8016994:	2150      	movs	r1, #80	@ 0x50
 8016996:	8812      	ldrh	r2, [r2, #0]
 8016998:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	1dba      	adds	r2, r7, #6
 801699e:	2152      	movs	r1, #82	@ 0x52
 80169a0:	8812      	ldrh	r2, [r2, #0]
 80169a2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2284      	movs	r2, #132	@ 0x84
 80169a8:	2100      	movs	r1, #0
 80169aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2221      	movs	r2, #33	@ 0x21
 80169b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d027      	beq.n	8016a0a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169be:	4a25      	ldr	r2, [pc, #148]	@ (8016a54 <HAL_UART_Transmit_DMA+0x114>)
 80169c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169c6:	4a24      	ldr	r2, [pc, #144]	@ (8016a58 <HAL_UART_Transmit_DMA+0x118>)
 80169c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169ce:	4a23      	ldr	r2, [pc, #140]	@ (8016a5c <HAL_UART_Transmit_DMA+0x11c>)
 80169d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80169d6:	2200      	movs	r2, #0
 80169d8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169e2:	0019      	movs	r1, r3
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	3328      	adds	r3, #40	@ 0x28
 80169ea:	001a      	movs	r2, r3
 80169ec:	1dbb      	adds	r3, r7, #6
 80169ee:	881b      	ldrh	r3, [r3, #0]
 80169f0:	f7f8 f9ce 	bl	800ed90 <HAL_DMA_Start_IT>
 80169f4:	1e03      	subs	r3, r0, #0
 80169f6:	d008      	beq.n	8016a0a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	2284      	movs	r2, #132	@ 0x84
 80169fc:	2110      	movs	r1, #16
 80169fe:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	2220      	movs	r2, #32
 8016a04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8016a06:	2301      	movs	r3, #1
 8016a08:	e01f      	b.n	8016a4a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2240      	movs	r2, #64	@ 0x40
 8016a10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a12:	f3ef 8310 	mrs	r3, PRIMASK
 8016a16:	613b      	str	r3, [r7, #16]
  return(result);
 8016a18:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016a1a:	61fb      	str	r3, [r7, #28]
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	f383 8810 	msr	PRIMASK, r3
}
 8016a26:	46c0      	nop			@ (mov r8, r8)
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	689a      	ldr	r2, [r3, #8]
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	2180      	movs	r1, #128	@ 0x80
 8016a34:	430a      	orrs	r2, r1
 8016a36:	609a      	str	r2, [r3, #8]
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a3c:	69bb      	ldr	r3, [r7, #24]
 8016a3e:	f383 8810 	msr	PRIMASK, r3
}
 8016a42:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016a44:	2300      	movs	r3, #0
 8016a46:	e000      	b.n	8016a4a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016a48:	2302      	movs	r3, #2
  }
}
 8016a4a:	0018      	movs	r0, r3
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	b008      	add	sp, #32
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	46c0      	nop			@ (mov r8, r8)
 8016a54:	08017ea1 	.word	0x08017ea1
 8016a58:	08017f3d 	.word	0x08017f3d
 8016a5c:	080180dd 	.word	0x080180dd

08016a60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b088      	sub	sp, #32
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	60f8      	str	r0, [r7, #12]
 8016a68:	60b9      	str	r1, [r7, #8]
 8016a6a:	1dbb      	adds	r3, r7, #6
 8016a6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	2280      	movs	r2, #128	@ 0x80
 8016a72:	589b      	ldr	r3, [r3, r2]
 8016a74:	2b20      	cmp	r3, #32
 8016a76:	d14a      	bne.n	8016b0e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d003      	beq.n	8016a86 <HAL_UART_Receive_DMA+0x26>
 8016a7e:	1dbb      	adds	r3, r7, #6
 8016a80:	881b      	ldrh	r3, [r3, #0]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d101      	bne.n	8016a8a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016a86:	2301      	movs	r3, #1
 8016a88:	e042      	b.n	8016b10 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	689a      	ldr	r2, [r3, #8]
 8016a8e:	2380      	movs	r3, #128	@ 0x80
 8016a90:	015b      	lsls	r3, r3, #5
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d109      	bne.n	8016aaa <HAL_UART_Receive_DMA+0x4a>
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	691b      	ldr	r3, [r3, #16]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d105      	bne.n	8016aaa <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	2201      	movs	r2, #1
 8016aa2:	4013      	ands	r3, r2
 8016aa4:	d001      	beq.n	8016aaa <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016aa6:	2301      	movs	r3, #1
 8016aa8:	e032      	b.n	8016b10 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	2200      	movs	r2, #0
 8016aae:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4a18      	ldr	r2, [pc, #96]	@ (8016b18 <HAL_UART_Receive_DMA+0xb8>)
 8016ab6:	4293      	cmp	r3, r2
 8016ab8:	d020      	beq.n	8016afc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	685a      	ldr	r2, [r3, #4]
 8016ac0:	2380      	movs	r3, #128	@ 0x80
 8016ac2:	041b      	lsls	r3, r3, #16
 8016ac4:	4013      	ands	r3, r2
 8016ac6:	d019      	beq.n	8016afc <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8016acc:	613b      	str	r3, [r7, #16]
  return(result);
 8016ace:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016ad0:	61fb      	str	r3, [r7, #28]
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	f383 8810 	msr	PRIMASK, r3
}
 8016adc:	46c0      	nop			@ (mov r8, r8)
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	681a      	ldr	r2, [r3, #0]
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	2180      	movs	r1, #128	@ 0x80
 8016aea:	04c9      	lsls	r1, r1, #19
 8016aec:	430a      	orrs	r2, r1
 8016aee:	601a      	str	r2, [r3, #0]
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016af4:	69bb      	ldr	r3, [r7, #24]
 8016af6:	f383 8810 	msr	PRIMASK, r3
}
 8016afa:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016afc:	1dbb      	adds	r3, r7, #6
 8016afe:	881a      	ldrh	r2, [r3, #0]
 8016b00:	68b9      	ldr	r1, [r7, #8]
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	0018      	movs	r0, r3
 8016b06:	f001 f8a3 	bl	8017c50 <UART_Start_Receive_DMA>
 8016b0a:	0003      	movs	r3, r0
 8016b0c:	e000      	b.n	8016b10 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016b0e:	2302      	movs	r3, #2
  }
}
 8016b10:	0018      	movs	r0, r3
 8016b12:	46bd      	mov	sp, r7
 8016b14:	b008      	add	sp, #32
 8016b16:	bd80      	pop	{r7, pc}
 8016b18:	40004800 	.word	0x40004800

08016b1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016b1c:	b590      	push	{r4, r7, lr}
 8016b1e:	b0ab      	sub	sp, #172	@ 0xac
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	69db      	ldr	r3, [r3, #28]
 8016b2a:	22a4      	movs	r2, #164	@ 0xa4
 8016b2c:	18b9      	adds	r1, r7, r2
 8016b2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	20a0      	movs	r0, #160	@ 0xa0
 8016b38:	1839      	adds	r1, r7, r0
 8016b3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	689b      	ldr	r3, [r3, #8]
 8016b42:	219c      	movs	r1, #156	@ 0x9c
 8016b44:	1879      	adds	r1, r7, r1
 8016b46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016b48:	0011      	movs	r1, r2
 8016b4a:	18bb      	adds	r3, r7, r2
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	4a9c      	ldr	r2, [pc, #624]	@ (8016dc0 <HAL_UART_IRQHandler+0x2a4>)
 8016b50:	4013      	ands	r3, r2
 8016b52:	2298      	movs	r2, #152	@ 0x98
 8016b54:	18bc      	adds	r4, r7, r2
 8016b56:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8016b58:	18bb      	adds	r3, r7, r2
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d114      	bne.n	8016b8a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016b60:	187b      	adds	r3, r7, r1
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2220      	movs	r2, #32
 8016b66:	4013      	ands	r3, r2
 8016b68:	d00f      	beq.n	8016b8a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016b6a:	183b      	adds	r3, r7, r0
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2220      	movs	r2, #32
 8016b70:	4013      	ands	r3, r2
 8016b72:	d00a      	beq.n	8016b8a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d100      	bne.n	8016b7e <HAL_UART_IRQHandler+0x62>
 8016b7c:	e2aa      	b.n	80170d4 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016b82:	687a      	ldr	r2, [r7, #4]
 8016b84:	0010      	movs	r0, r2
 8016b86:	4798      	blx	r3
      }
      return;
 8016b88:	e2a4      	b.n	80170d4 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016b8a:	2398      	movs	r3, #152	@ 0x98
 8016b8c:	18fb      	adds	r3, r7, r3
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d100      	bne.n	8016b96 <HAL_UART_IRQHandler+0x7a>
 8016b94:	e11a      	b.n	8016dcc <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016b96:	239c      	movs	r3, #156	@ 0x9c
 8016b98:	18fb      	adds	r3, r7, r3
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	2201      	movs	r2, #1
 8016b9e:	4013      	ands	r3, r2
 8016ba0:	d106      	bne.n	8016bb0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8016ba2:	23a0      	movs	r3, #160	@ 0xa0
 8016ba4:	18fb      	adds	r3, r7, r3
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	4a86      	ldr	r2, [pc, #536]	@ (8016dc4 <HAL_UART_IRQHandler+0x2a8>)
 8016baa:	4013      	ands	r3, r2
 8016bac:	d100      	bne.n	8016bb0 <HAL_UART_IRQHandler+0x94>
 8016bae:	e10d      	b.n	8016dcc <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016bb0:	23a4      	movs	r3, #164	@ 0xa4
 8016bb2:	18fb      	adds	r3, r7, r3
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2201      	movs	r2, #1
 8016bb8:	4013      	ands	r3, r2
 8016bba:	d012      	beq.n	8016be2 <HAL_UART_IRQHandler+0xc6>
 8016bbc:	23a0      	movs	r3, #160	@ 0xa0
 8016bbe:	18fb      	adds	r3, r7, r3
 8016bc0:	681a      	ldr	r2, [r3, #0]
 8016bc2:	2380      	movs	r3, #128	@ 0x80
 8016bc4:	005b      	lsls	r3, r3, #1
 8016bc6:	4013      	ands	r3, r2
 8016bc8:	d00b      	beq.n	8016be2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	2201      	movs	r2, #1
 8016bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	2284      	movs	r2, #132	@ 0x84
 8016bd6:	589b      	ldr	r3, [r3, r2]
 8016bd8:	2201      	movs	r2, #1
 8016bda:	431a      	orrs	r2, r3
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2184      	movs	r1, #132	@ 0x84
 8016be0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016be2:	23a4      	movs	r3, #164	@ 0xa4
 8016be4:	18fb      	adds	r3, r7, r3
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	2202      	movs	r2, #2
 8016bea:	4013      	ands	r3, r2
 8016bec:	d011      	beq.n	8016c12 <HAL_UART_IRQHandler+0xf6>
 8016bee:	239c      	movs	r3, #156	@ 0x9c
 8016bf0:	18fb      	adds	r3, r7, r3
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	2201      	movs	r2, #1
 8016bf6:	4013      	ands	r3, r2
 8016bf8:	d00b      	beq.n	8016c12 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2202      	movs	r2, #2
 8016c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	2284      	movs	r2, #132	@ 0x84
 8016c06:	589b      	ldr	r3, [r3, r2]
 8016c08:	2204      	movs	r2, #4
 8016c0a:	431a      	orrs	r2, r3
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2184      	movs	r1, #132	@ 0x84
 8016c10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016c12:	23a4      	movs	r3, #164	@ 0xa4
 8016c14:	18fb      	adds	r3, r7, r3
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	2204      	movs	r2, #4
 8016c1a:	4013      	ands	r3, r2
 8016c1c:	d011      	beq.n	8016c42 <HAL_UART_IRQHandler+0x126>
 8016c1e:	239c      	movs	r3, #156	@ 0x9c
 8016c20:	18fb      	adds	r3, r7, r3
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	2201      	movs	r2, #1
 8016c26:	4013      	ands	r3, r2
 8016c28:	d00b      	beq.n	8016c42 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	2204      	movs	r2, #4
 8016c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2284      	movs	r2, #132	@ 0x84
 8016c36:	589b      	ldr	r3, [r3, r2]
 8016c38:	2202      	movs	r2, #2
 8016c3a:	431a      	orrs	r2, r3
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2184      	movs	r1, #132	@ 0x84
 8016c40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016c42:	23a4      	movs	r3, #164	@ 0xa4
 8016c44:	18fb      	adds	r3, r7, r3
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	2208      	movs	r2, #8
 8016c4a:	4013      	ands	r3, r2
 8016c4c:	d017      	beq.n	8016c7e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016c4e:	23a0      	movs	r3, #160	@ 0xa0
 8016c50:	18fb      	adds	r3, r7, r3
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	2220      	movs	r2, #32
 8016c56:	4013      	ands	r3, r2
 8016c58:	d105      	bne.n	8016c66 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016c5a:	239c      	movs	r3, #156	@ 0x9c
 8016c5c:	18fb      	adds	r3, r7, r3
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	2201      	movs	r2, #1
 8016c62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016c64:	d00b      	beq.n	8016c7e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	2208      	movs	r2, #8
 8016c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	2284      	movs	r2, #132	@ 0x84
 8016c72:	589b      	ldr	r3, [r3, r2]
 8016c74:	2208      	movs	r2, #8
 8016c76:	431a      	orrs	r2, r3
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2184      	movs	r1, #132	@ 0x84
 8016c7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016c7e:	23a4      	movs	r3, #164	@ 0xa4
 8016c80:	18fb      	adds	r3, r7, r3
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	2380      	movs	r3, #128	@ 0x80
 8016c86:	011b      	lsls	r3, r3, #4
 8016c88:	4013      	ands	r3, r2
 8016c8a:	d013      	beq.n	8016cb4 <HAL_UART_IRQHandler+0x198>
 8016c8c:	23a0      	movs	r3, #160	@ 0xa0
 8016c8e:	18fb      	adds	r3, r7, r3
 8016c90:	681a      	ldr	r2, [r3, #0]
 8016c92:	2380      	movs	r3, #128	@ 0x80
 8016c94:	04db      	lsls	r3, r3, #19
 8016c96:	4013      	ands	r3, r2
 8016c98:	d00c      	beq.n	8016cb4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	2280      	movs	r2, #128	@ 0x80
 8016ca0:	0112      	lsls	r2, r2, #4
 8016ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2284      	movs	r2, #132	@ 0x84
 8016ca8:	589b      	ldr	r3, [r3, r2]
 8016caa:	2220      	movs	r2, #32
 8016cac:	431a      	orrs	r2, r3
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2184      	movs	r1, #132	@ 0x84
 8016cb2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2284      	movs	r2, #132	@ 0x84
 8016cb8:	589b      	ldr	r3, [r3, r2]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d100      	bne.n	8016cc0 <HAL_UART_IRQHandler+0x1a4>
 8016cbe:	e20b      	b.n	80170d8 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8016cc0:	23a4      	movs	r3, #164	@ 0xa4
 8016cc2:	18fb      	adds	r3, r7, r3
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	2220      	movs	r2, #32
 8016cc8:	4013      	ands	r3, r2
 8016cca:	d00e      	beq.n	8016cea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016ccc:	23a0      	movs	r3, #160	@ 0xa0
 8016cce:	18fb      	adds	r3, r7, r3
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	2220      	movs	r2, #32
 8016cd4:	4013      	ands	r3, r2
 8016cd6:	d008      	beq.n	8016cea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d004      	beq.n	8016cea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016ce4:	687a      	ldr	r2, [r7, #4]
 8016ce6:	0010      	movs	r0, r2
 8016ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2284      	movs	r2, #132	@ 0x84
 8016cee:	589b      	ldr	r3, [r3, r2]
 8016cf0:	2194      	movs	r1, #148	@ 0x94
 8016cf2:	187a      	adds	r2, r7, r1
 8016cf4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	689b      	ldr	r3, [r3, #8]
 8016cfc:	2240      	movs	r2, #64	@ 0x40
 8016cfe:	4013      	ands	r3, r2
 8016d00:	2b40      	cmp	r3, #64	@ 0x40
 8016d02:	d004      	beq.n	8016d0e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016d04:	187b      	adds	r3, r7, r1
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	2228      	movs	r2, #40	@ 0x28
 8016d0a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016d0c:	d04b      	beq.n	8016da6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	0018      	movs	r0, r3
 8016d12:	f001 f861 	bl	8017dd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	689b      	ldr	r3, [r3, #8]
 8016d1c:	2240      	movs	r2, #64	@ 0x40
 8016d1e:	4013      	ands	r3, r2
 8016d20:	2b40      	cmp	r3, #64	@ 0x40
 8016d22:	d139      	bne.n	8016d98 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d24:	f3ef 8310 	mrs	r3, PRIMASK
 8016d28:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016d2c:	2090      	movs	r0, #144	@ 0x90
 8016d2e:	183a      	adds	r2, r7, r0
 8016d30:	6013      	str	r3, [r2, #0]
 8016d32:	2301      	movs	r3, #1
 8016d34:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016d38:	f383 8810 	msr	PRIMASK, r3
}
 8016d3c:	46c0      	nop			@ (mov r8, r8)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	689a      	ldr	r2, [r3, #8]
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	2140      	movs	r1, #64	@ 0x40
 8016d4a:	438a      	bics	r2, r1
 8016d4c:	609a      	str	r2, [r3, #8]
 8016d4e:	183b      	adds	r3, r7, r0
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016d56:	f383 8810 	msr	PRIMASK, r3
}
 8016d5a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d012      	beq.n	8016d8a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d68:	4a17      	ldr	r2, [pc, #92]	@ (8016dc8 <HAL_UART_IRQHandler+0x2ac>)
 8016d6a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d70:	0018      	movs	r0, r3
 8016d72:	f7f8 f8b3 	bl	800eedc <HAL_DMA_Abort_IT>
 8016d76:	1e03      	subs	r3, r0, #0
 8016d78:	d020      	beq.n	8016dbc <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d84:	0018      	movs	r0, r3
 8016d86:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d88:	e018      	b.n	8016dbc <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2298      	movs	r2, #152	@ 0x98
 8016d8e:	589b      	ldr	r3, [r3, r2]
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	0010      	movs	r0, r2
 8016d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016d96:	e011      	b.n	8016dbc <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	2298      	movs	r2, #152	@ 0x98
 8016d9c:	589b      	ldr	r3, [r3, r2]
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	0010      	movs	r0, r2
 8016da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016da4:	e00a      	b.n	8016dbc <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2298      	movs	r2, #152	@ 0x98
 8016daa:	589b      	ldr	r3, [r3, r2]
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	0010      	movs	r0, r2
 8016db0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2284      	movs	r2, #132	@ 0x84
 8016db6:	2100      	movs	r1, #0
 8016db8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8016dba:	e18d      	b.n	80170d8 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016dbc:	46c0      	nop			@ (mov r8, r8)
    return;
 8016dbe:	e18b      	b.n	80170d8 <HAL_UART_IRQHandler+0x5bc>
 8016dc0:	0000080f 	.word	0x0000080f
 8016dc4:	04000120 	.word	0x04000120
 8016dc8:	08018165 	.word	0x08018165

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016dd0:	2b01      	cmp	r3, #1
 8016dd2:	d000      	beq.n	8016dd6 <HAL_UART_IRQHandler+0x2ba>
 8016dd4:	e13d      	b.n	8017052 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016dd6:	23a4      	movs	r3, #164	@ 0xa4
 8016dd8:	18fb      	adds	r3, r7, r3
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	2210      	movs	r2, #16
 8016dde:	4013      	ands	r3, r2
 8016de0:	d100      	bne.n	8016de4 <HAL_UART_IRQHandler+0x2c8>
 8016de2:	e136      	b.n	8017052 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016de4:	23a0      	movs	r3, #160	@ 0xa0
 8016de6:	18fb      	adds	r3, r7, r3
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	2210      	movs	r2, #16
 8016dec:	4013      	ands	r3, r2
 8016dee:	d100      	bne.n	8016df2 <HAL_UART_IRQHandler+0x2d6>
 8016df0:	e12f      	b.n	8017052 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	2210      	movs	r2, #16
 8016df8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	689b      	ldr	r3, [r3, #8]
 8016e00:	2240      	movs	r2, #64	@ 0x40
 8016e02:	4013      	ands	r3, r2
 8016e04:	2b40      	cmp	r3, #64	@ 0x40
 8016e06:	d000      	beq.n	8016e0a <HAL_UART_IRQHandler+0x2ee>
 8016e08:	e0a2      	b.n	8016f50 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	685a      	ldr	r2, [r3, #4]
 8016e12:	217e      	movs	r1, #126	@ 0x7e
 8016e14:	187b      	adds	r3, r7, r1
 8016e16:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8016e18:	187b      	adds	r3, r7, r1
 8016e1a:	881b      	ldrh	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d100      	bne.n	8016e22 <HAL_UART_IRQHandler+0x306>
 8016e20:	e15c      	b.n	80170dc <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	2258      	movs	r2, #88	@ 0x58
 8016e26:	5a9b      	ldrh	r3, [r3, r2]
 8016e28:	187a      	adds	r2, r7, r1
 8016e2a:	8812      	ldrh	r2, [r2, #0]
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d300      	bcc.n	8016e32 <HAL_UART_IRQHandler+0x316>
 8016e30:	e154      	b.n	80170dc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	187a      	adds	r2, r7, r1
 8016e36:	215a      	movs	r1, #90	@ 0x5a
 8016e38:	8812      	ldrh	r2, [r2, #0]
 8016e3a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	2220      	movs	r2, #32
 8016e46:	4013      	ands	r3, r2
 8016e48:	d16f      	bne.n	8016f2a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8016e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016e52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016e54:	2301      	movs	r3, #1
 8016e56:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e5a:	f383 8810 	msr	PRIMASK, r3
}
 8016e5e:	46c0      	nop			@ (mov r8, r8)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	681a      	ldr	r2, [r3, #0]
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	49a0      	ldr	r1, [pc, #640]	@ (80170ec <HAL_UART_IRQHandler+0x5d0>)
 8016e6c:	400a      	ands	r2, r1
 8016e6e:	601a      	str	r2, [r3, #0]
 8016e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016e76:	f383 8810 	msr	PRIMASK, r3
}
 8016e7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8016e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8016e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016e84:	677b      	str	r3, [r7, #116]	@ 0x74
 8016e86:	2301      	movs	r3, #1
 8016e88:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e8c:	f383 8810 	msr	PRIMASK, r3
}
 8016e90:	46c0      	nop			@ (mov r8, r8)
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	689a      	ldr	r2, [r3, #8]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	2101      	movs	r1, #1
 8016e9e:	438a      	bics	r2, r1
 8016ea0:	609a      	str	r2, [r3, #8]
 8016ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ea8:	f383 8810 	msr	PRIMASK, r3
}
 8016eac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016eae:	f3ef 8310 	mrs	r3, PRIMASK
 8016eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8016eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016eb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8016eb8:	2301      	movs	r3, #1
 8016eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ebe:	f383 8810 	msr	PRIMASK, r3
}
 8016ec2:	46c0      	nop			@ (mov r8, r8)
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	689a      	ldr	r2, [r3, #8]
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	2140      	movs	r1, #64	@ 0x40
 8016ed0:	438a      	bics	r2, r1
 8016ed2:	609a      	str	r2, [r3, #8]
 8016ed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016ed6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016eda:	f383 8810 	msr	PRIMASK, r3
}
 8016ede:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	2280      	movs	r2, #128	@ 0x80
 8016ee4:	2120      	movs	r1, #32
 8016ee6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	2200      	movs	r2, #0
 8016eec:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016eee:	f3ef 8310 	mrs	r3, PRIMASK
 8016ef2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016ef8:	2301      	movs	r3, #1
 8016efa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016efe:	f383 8810 	msr	PRIMASK, r3
}
 8016f02:	46c0      	nop			@ (mov r8, r8)
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	2110      	movs	r1, #16
 8016f10:	438a      	bics	r2, r1
 8016f12:	601a      	str	r2, [r3, #0]
 8016f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016f1a:	f383 8810 	msr	PRIMASK, r3
}
 8016f1e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f24:	0018      	movs	r0, r3
 8016f26:	f7f7 ff99 	bl	800ee5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2202      	movs	r2, #2
 8016f2e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	22ac      	movs	r2, #172	@ 0xac
 8016f34:	589b      	ldr	r3, [r3, r2]
 8016f36:	687a      	ldr	r2, [r7, #4]
 8016f38:	2158      	movs	r1, #88	@ 0x58
 8016f3a:	5a51      	ldrh	r1, [r2, r1]
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	205a      	movs	r0, #90	@ 0x5a
 8016f40:	5a12      	ldrh	r2, [r2, r0]
 8016f42:	b292      	uxth	r2, r2
 8016f44:	1a8a      	subs	r2, r1, r2
 8016f46:	b291      	uxth	r1, r2
 8016f48:	687a      	ldr	r2, [r7, #4]
 8016f4a:	0010      	movs	r0, r2
 8016f4c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016f4e:	e0c5      	b.n	80170dc <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2258      	movs	r2, #88	@ 0x58
 8016f54:	5a99      	ldrh	r1, [r3, r2]
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	225a      	movs	r2, #90	@ 0x5a
 8016f5a:	5a9b      	ldrh	r3, [r3, r2]
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	208e      	movs	r0, #142	@ 0x8e
 8016f60:	183b      	adds	r3, r7, r0
 8016f62:	1a8a      	subs	r2, r1, r2
 8016f64:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	225a      	movs	r2, #90	@ 0x5a
 8016f6a:	5a9b      	ldrh	r3, [r3, r2]
 8016f6c:	b29b      	uxth	r3, r3
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d100      	bne.n	8016f74 <HAL_UART_IRQHandler+0x458>
 8016f72:	e0b5      	b.n	80170e0 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8016f74:	183b      	adds	r3, r7, r0
 8016f76:	881b      	ldrh	r3, [r3, #0]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d100      	bne.n	8016f7e <HAL_UART_IRQHandler+0x462>
 8016f7c:	e0b0      	b.n	80170e0 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8016f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f84:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016f86:	2488      	movs	r4, #136	@ 0x88
 8016f88:	193a      	adds	r2, r7, r4
 8016f8a:	6013      	str	r3, [r2, #0]
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f90:	693b      	ldr	r3, [r7, #16]
 8016f92:	f383 8810 	msr	PRIMASK, r3
}
 8016f96:	46c0      	nop			@ (mov r8, r8)
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	4953      	ldr	r1, [pc, #332]	@ (80170f0 <HAL_UART_IRQHandler+0x5d4>)
 8016fa4:	400a      	ands	r2, r1
 8016fa6:	601a      	str	r2, [r3, #0]
 8016fa8:	193b      	adds	r3, r7, r4
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	f383 8810 	msr	PRIMASK, r3
}
 8016fb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8016fba:	61bb      	str	r3, [r7, #24]
  return(result);
 8016fbc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016fbe:	2484      	movs	r4, #132	@ 0x84
 8016fc0:	193a      	adds	r2, r7, r4
 8016fc2:	6013      	str	r3, [r2, #0]
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	f383 8810 	msr	PRIMASK, r3
}
 8016fce:	46c0      	nop			@ (mov r8, r8)
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	689a      	ldr	r2, [r3, #8]
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	2101      	movs	r1, #1
 8016fdc:	438a      	bics	r2, r1
 8016fde:	609a      	str	r2, [r3, #8]
 8016fe0:	193b      	adds	r3, r7, r4
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fe6:	6a3b      	ldr	r3, [r7, #32]
 8016fe8:	f383 8810 	msr	PRIMASK, r3
}
 8016fec:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2280      	movs	r2, #128	@ 0x80
 8016ff2:	2120      	movs	r1, #32
 8016ff4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	2200      	movs	r2, #0
 8017000:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017002:	f3ef 8310 	mrs	r3, PRIMASK
 8017006:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801700a:	2480      	movs	r4, #128	@ 0x80
 801700c:	193a      	adds	r2, r7, r4
 801700e:	6013      	str	r3, [r2, #0]
 8017010:	2301      	movs	r3, #1
 8017012:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017016:	f383 8810 	msr	PRIMASK, r3
}
 801701a:	46c0      	nop			@ (mov r8, r8)
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	681a      	ldr	r2, [r3, #0]
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	2110      	movs	r1, #16
 8017028:	438a      	bics	r2, r1
 801702a:	601a      	str	r2, [r3, #0]
 801702c:	193b      	adds	r3, r7, r4
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017034:	f383 8810 	msr	PRIMASK, r3
}
 8017038:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2202      	movs	r2, #2
 801703e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	22ac      	movs	r2, #172	@ 0xac
 8017044:	589b      	ldr	r3, [r3, r2]
 8017046:	183a      	adds	r2, r7, r0
 8017048:	8811      	ldrh	r1, [r2, #0]
 801704a:	687a      	ldr	r2, [r7, #4]
 801704c:	0010      	movs	r0, r2
 801704e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017050:	e046      	b.n	80170e0 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017052:	23a4      	movs	r3, #164	@ 0xa4
 8017054:	18fb      	adds	r3, r7, r3
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	2380      	movs	r3, #128	@ 0x80
 801705a:	035b      	lsls	r3, r3, #13
 801705c:	4013      	ands	r3, r2
 801705e:	d012      	beq.n	8017086 <HAL_UART_IRQHandler+0x56a>
 8017060:	239c      	movs	r3, #156	@ 0x9c
 8017062:	18fb      	adds	r3, r7, r3
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	2380      	movs	r3, #128	@ 0x80
 8017068:	03db      	lsls	r3, r3, #15
 801706a:	4013      	ands	r3, r2
 801706c:	d00b      	beq.n	8017086 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	2280      	movs	r2, #128	@ 0x80
 8017074:	0352      	lsls	r2, r2, #13
 8017076:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	22a8      	movs	r2, #168	@ 0xa8
 801707c:	589b      	ldr	r3, [r3, r2]
 801707e:	687a      	ldr	r2, [r7, #4]
 8017080:	0010      	movs	r0, r2
 8017082:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017084:	e02f      	b.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017086:	23a4      	movs	r3, #164	@ 0xa4
 8017088:	18fb      	adds	r3, r7, r3
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	2280      	movs	r2, #128	@ 0x80
 801708e:	4013      	ands	r3, r2
 8017090:	d00f      	beq.n	80170b2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017092:	23a0      	movs	r3, #160	@ 0xa0
 8017094:	18fb      	adds	r3, r7, r3
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	2280      	movs	r2, #128	@ 0x80
 801709a:	4013      	ands	r3, r2
 801709c:	d009      	beq.n	80170b2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d01e      	beq.n	80170e4 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80170aa:	687a      	ldr	r2, [r7, #4]
 80170ac:	0010      	movs	r0, r2
 80170ae:	4798      	blx	r3
    }
    return;
 80170b0:	e018      	b.n	80170e4 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80170b2:	23a4      	movs	r3, #164	@ 0xa4
 80170b4:	18fb      	adds	r3, r7, r3
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	2240      	movs	r2, #64	@ 0x40
 80170ba:	4013      	ands	r3, r2
 80170bc:	d013      	beq.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
 80170be:	23a0      	movs	r3, #160	@ 0xa0
 80170c0:	18fb      	adds	r3, r7, r3
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2240      	movs	r2, #64	@ 0x40
 80170c6:	4013      	ands	r3, r2
 80170c8:	d00d      	beq.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	0018      	movs	r0, r3
 80170ce:	f001 f862 	bl	8018196 <UART_EndTransmit_IT>
    return;
 80170d2:	e008      	b.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80170d4:	46c0      	nop			@ (mov r8, r8)
 80170d6:	e006      	b.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80170d8:	46c0      	nop			@ (mov r8, r8)
 80170da:	e004      	b.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80170dc:	46c0      	nop			@ (mov r8, r8)
 80170de:	e002      	b.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80170e0:	46c0      	nop			@ (mov r8, r8)
 80170e2:	e000      	b.n	80170e6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80170e4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80170e6:	46bd      	mov	sp, r7
 80170e8:	b02b      	add	sp, #172	@ 0xac
 80170ea:	bd90      	pop	{r4, r7, pc}
 80170ec:	fffffeff 	.word	0xfffffeff
 80170f0:	fffffedf 	.word	0xfffffedf

080170f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b082      	sub	sp, #8
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80170fc:	46c0      	nop			@ (mov r8, r8)
 80170fe:	46bd      	mov	sp, r7
 8017100:	b002      	add	sp, #8
 8017102:	bd80      	pop	{r7, pc}

08017104 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801710c:	46c0      	nop			@ (mov r8, r8)
 801710e:	46bd      	mov	sp, r7
 8017110:	b002      	add	sp, #8
 8017112:	bd80      	pop	{r7, pc}

08017114 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801711c:	46c0      	nop			@ (mov r8, r8)
 801711e:	46bd      	mov	sp, r7
 8017120:	b002      	add	sp, #8
 8017122:	bd80      	pop	{r7, pc}

08017124 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b082      	sub	sp, #8
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801712c:	46c0      	nop			@ (mov r8, r8)
 801712e:	46bd      	mov	sp, r7
 8017130:	b002      	add	sp, #8
 8017132:	bd80      	pop	{r7, pc}

08017134 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b082      	sub	sp, #8
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801713c:	46c0      	nop			@ (mov r8, r8)
 801713e:	46bd      	mov	sp, r7
 8017140:	b002      	add	sp, #8
 8017142:	bd80      	pop	{r7, pc}

08017144 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b082      	sub	sp, #8
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801714c:	46c0      	nop			@ (mov r8, r8)
 801714e:	46bd      	mov	sp, r7
 8017150:	b002      	add	sp, #8
 8017152:	bd80      	pop	{r7, pc}

08017154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b082      	sub	sp, #8
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	000a      	movs	r2, r1
 801715e:	1cbb      	adds	r3, r7, #2
 8017160:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017162:	46c0      	nop			@ (mov r8, r8)
 8017164:	46bd      	mov	sp, r7
 8017166:	b002      	add	sp, #8
 8017168:	bd80      	pop	{r7, pc}
	...

0801716c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b082      	sub	sp, #8
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2188      	movs	r1, #136	@ 0x88
 8017178:	4a14      	ldr	r2, [pc, #80]	@ (80171cc <UART_InitCallbacksToDefault+0x60>)
 801717a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	218c      	movs	r1, #140	@ 0x8c
 8017180:	4a13      	ldr	r2, [pc, #76]	@ (80171d0 <UART_InitCallbacksToDefault+0x64>)
 8017182:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2190      	movs	r1, #144	@ 0x90
 8017188:	4a12      	ldr	r2, [pc, #72]	@ (80171d4 <UART_InitCallbacksToDefault+0x68>)
 801718a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2194      	movs	r1, #148	@ 0x94
 8017190:	4a11      	ldr	r2, [pc, #68]	@ (80171d8 <UART_InitCallbacksToDefault+0x6c>)
 8017192:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	2198      	movs	r1, #152	@ 0x98
 8017198:	4a10      	ldr	r2, [pc, #64]	@ (80171dc <UART_InitCallbacksToDefault+0x70>)
 801719a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	219c      	movs	r1, #156	@ 0x9c
 80171a0:	4a0f      	ldr	r2, [pc, #60]	@ (80171e0 <UART_InitCallbacksToDefault+0x74>)
 80171a2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	21a0      	movs	r1, #160	@ 0xa0
 80171a8:	4a0e      	ldr	r2, [pc, #56]	@ (80171e4 <UART_InitCallbacksToDefault+0x78>)
 80171aa:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	21a4      	movs	r1, #164	@ 0xa4
 80171b0:	4a0d      	ldr	r2, [pc, #52]	@ (80171e8 <UART_InitCallbacksToDefault+0x7c>)
 80171b2:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	21a8      	movs	r1, #168	@ 0xa8
 80171b8:	4a0c      	ldr	r2, [pc, #48]	@ (80171ec <UART_InitCallbacksToDefault+0x80>)
 80171ba:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	21ac      	movs	r1, #172	@ 0xac
 80171c0:	4a0b      	ldr	r2, [pc, #44]	@ (80171f0 <UART_InitCallbacksToDefault+0x84>)
 80171c2:	505a      	str	r2, [r3, r1]

}
 80171c4:	46c0      	nop			@ (mov r8, r8)
 80171c6:	46bd      	mov	sp, r7
 80171c8:	b002      	add	sp, #8
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	08017105 	.word	0x08017105
 80171d0:	080170f5 	.word	0x080170f5
 80171d4:	08017115 	.word	0x08017115
 80171d8:	0800834d 	.word	0x0800834d
 80171dc:	08003bd1 	.word	0x08003bd1
 80171e0:	08017125 	.word	0x08017125
 80171e4:	08017135 	.word	0x08017135
 80171e8:	08017145 	.word	0x08017145
 80171ec:	08018589 	.word	0x08018589
 80171f0:	08017155 	.word	0x08017155

080171f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80171f4:	b5b0      	push	{r4, r5, r7, lr}
 80171f6:	b08e      	sub	sp, #56	@ 0x38
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80171fc:	231a      	movs	r3, #26
 80171fe:	2218      	movs	r2, #24
 8017200:	189b      	adds	r3, r3, r2
 8017202:	19db      	adds	r3, r3, r7
 8017204:	2200      	movs	r2, #0
 8017206:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	689a      	ldr	r2, [r3, #8]
 801720c:	69fb      	ldr	r3, [r7, #28]
 801720e:	691b      	ldr	r3, [r3, #16]
 8017210:	431a      	orrs	r2, r3
 8017212:	69fb      	ldr	r3, [r7, #28]
 8017214:	695b      	ldr	r3, [r3, #20]
 8017216:	431a      	orrs	r2, r3
 8017218:	69fb      	ldr	r3, [r7, #28]
 801721a:	69db      	ldr	r3, [r3, #28]
 801721c:	4313      	orrs	r3, r2
 801721e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017220:	69fb      	ldr	r3, [r7, #28]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	4ac3      	ldr	r2, [pc, #780]	@ (8017534 <UART_SetConfig+0x340>)
 8017228:	4013      	ands	r3, r2
 801722a:	0019      	movs	r1, r3
 801722c:	69fb      	ldr	r3, [r7, #28]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017232:	430a      	orrs	r2, r1
 8017234:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017236:	69fb      	ldr	r3, [r7, #28]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	4abe      	ldr	r2, [pc, #760]	@ (8017538 <UART_SetConfig+0x344>)
 801723e:	4013      	ands	r3, r2
 8017240:	0019      	movs	r1, r3
 8017242:	69fb      	ldr	r3, [r7, #28]
 8017244:	68da      	ldr	r2, [r3, #12]
 8017246:	69fb      	ldr	r3, [r7, #28]
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	430a      	orrs	r2, r1
 801724c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801724e:	69fb      	ldr	r3, [r7, #28]
 8017250:	699b      	ldr	r3, [r3, #24]
 8017252:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017254:	69fb      	ldr	r3, [r7, #28]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	4ab8      	ldr	r2, [pc, #736]	@ (801753c <UART_SetConfig+0x348>)
 801725a:	4293      	cmp	r3, r2
 801725c:	d004      	beq.n	8017268 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801725e:	69fb      	ldr	r3, [r7, #28]
 8017260:	6a1b      	ldr	r3, [r3, #32]
 8017262:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017264:	4313      	orrs	r3, r2
 8017266:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017268:	69fb      	ldr	r3, [r7, #28]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	689b      	ldr	r3, [r3, #8]
 801726e:	4ab4      	ldr	r2, [pc, #720]	@ (8017540 <UART_SetConfig+0x34c>)
 8017270:	4013      	ands	r3, r2
 8017272:	0019      	movs	r1, r3
 8017274:	69fb      	ldr	r3, [r7, #28]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801727a:	430a      	orrs	r2, r1
 801727c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801727e:	69fb      	ldr	r3, [r7, #28]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	4ab0      	ldr	r2, [pc, #704]	@ (8017544 <UART_SetConfig+0x350>)
 8017284:	4293      	cmp	r3, r2
 8017286:	d131      	bne.n	80172ec <UART_SetConfig+0xf8>
 8017288:	4baf      	ldr	r3, [pc, #700]	@ (8017548 <UART_SetConfig+0x354>)
 801728a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801728c:	2203      	movs	r2, #3
 801728e:	4013      	ands	r3, r2
 8017290:	2b03      	cmp	r3, #3
 8017292:	d01d      	beq.n	80172d0 <UART_SetConfig+0xdc>
 8017294:	d823      	bhi.n	80172de <UART_SetConfig+0xea>
 8017296:	2b02      	cmp	r3, #2
 8017298:	d00c      	beq.n	80172b4 <UART_SetConfig+0xc0>
 801729a:	d820      	bhi.n	80172de <UART_SetConfig+0xea>
 801729c:	2b00      	cmp	r3, #0
 801729e:	d002      	beq.n	80172a6 <UART_SetConfig+0xb2>
 80172a0:	2b01      	cmp	r3, #1
 80172a2:	d00e      	beq.n	80172c2 <UART_SetConfig+0xce>
 80172a4:	e01b      	b.n	80172de <UART_SetConfig+0xea>
 80172a6:	231b      	movs	r3, #27
 80172a8:	2218      	movs	r2, #24
 80172aa:	189b      	adds	r3, r3, r2
 80172ac:	19db      	adds	r3, r3, r7
 80172ae:	2201      	movs	r2, #1
 80172b0:	701a      	strb	r2, [r3, #0]
 80172b2:	e0b4      	b.n	801741e <UART_SetConfig+0x22a>
 80172b4:	231b      	movs	r3, #27
 80172b6:	2218      	movs	r2, #24
 80172b8:	189b      	adds	r3, r3, r2
 80172ba:	19db      	adds	r3, r3, r7
 80172bc:	2202      	movs	r2, #2
 80172be:	701a      	strb	r2, [r3, #0]
 80172c0:	e0ad      	b.n	801741e <UART_SetConfig+0x22a>
 80172c2:	231b      	movs	r3, #27
 80172c4:	2218      	movs	r2, #24
 80172c6:	189b      	adds	r3, r3, r2
 80172c8:	19db      	adds	r3, r3, r7
 80172ca:	2204      	movs	r2, #4
 80172cc:	701a      	strb	r2, [r3, #0]
 80172ce:	e0a6      	b.n	801741e <UART_SetConfig+0x22a>
 80172d0:	231b      	movs	r3, #27
 80172d2:	2218      	movs	r2, #24
 80172d4:	189b      	adds	r3, r3, r2
 80172d6:	19db      	adds	r3, r3, r7
 80172d8:	2208      	movs	r2, #8
 80172da:	701a      	strb	r2, [r3, #0]
 80172dc:	e09f      	b.n	801741e <UART_SetConfig+0x22a>
 80172de:	231b      	movs	r3, #27
 80172e0:	2218      	movs	r2, #24
 80172e2:	189b      	adds	r3, r3, r2
 80172e4:	19db      	adds	r3, r3, r7
 80172e6:	2210      	movs	r2, #16
 80172e8:	701a      	strb	r2, [r3, #0]
 80172ea:	e098      	b.n	801741e <UART_SetConfig+0x22a>
 80172ec:	69fb      	ldr	r3, [r7, #28]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	4a96      	ldr	r2, [pc, #600]	@ (801754c <UART_SetConfig+0x358>)
 80172f2:	4293      	cmp	r3, r2
 80172f4:	d131      	bne.n	801735a <UART_SetConfig+0x166>
 80172f6:	4b94      	ldr	r3, [pc, #592]	@ (8017548 <UART_SetConfig+0x354>)
 80172f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80172fa:	220c      	movs	r2, #12
 80172fc:	4013      	ands	r3, r2
 80172fe:	2b0c      	cmp	r3, #12
 8017300:	d01d      	beq.n	801733e <UART_SetConfig+0x14a>
 8017302:	d823      	bhi.n	801734c <UART_SetConfig+0x158>
 8017304:	2b08      	cmp	r3, #8
 8017306:	d00c      	beq.n	8017322 <UART_SetConfig+0x12e>
 8017308:	d820      	bhi.n	801734c <UART_SetConfig+0x158>
 801730a:	2b00      	cmp	r3, #0
 801730c:	d002      	beq.n	8017314 <UART_SetConfig+0x120>
 801730e:	2b04      	cmp	r3, #4
 8017310:	d00e      	beq.n	8017330 <UART_SetConfig+0x13c>
 8017312:	e01b      	b.n	801734c <UART_SetConfig+0x158>
 8017314:	231b      	movs	r3, #27
 8017316:	2218      	movs	r2, #24
 8017318:	189b      	adds	r3, r3, r2
 801731a:	19db      	adds	r3, r3, r7
 801731c:	2200      	movs	r2, #0
 801731e:	701a      	strb	r2, [r3, #0]
 8017320:	e07d      	b.n	801741e <UART_SetConfig+0x22a>
 8017322:	231b      	movs	r3, #27
 8017324:	2218      	movs	r2, #24
 8017326:	189b      	adds	r3, r3, r2
 8017328:	19db      	adds	r3, r3, r7
 801732a:	2202      	movs	r2, #2
 801732c:	701a      	strb	r2, [r3, #0]
 801732e:	e076      	b.n	801741e <UART_SetConfig+0x22a>
 8017330:	231b      	movs	r3, #27
 8017332:	2218      	movs	r2, #24
 8017334:	189b      	adds	r3, r3, r2
 8017336:	19db      	adds	r3, r3, r7
 8017338:	2204      	movs	r2, #4
 801733a:	701a      	strb	r2, [r3, #0]
 801733c:	e06f      	b.n	801741e <UART_SetConfig+0x22a>
 801733e:	231b      	movs	r3, #27
 8017340:	2218      	movs	r2, #24
 8017342:	189b      	adds	r3, r3, r2
 8017344:	19db      	adds	r3, r3, r7
 8017346:	2208      	movs	r2, #8
 8017348:	701a      	strb	r2, [r3, #0]
 801734a:	e068      	b.n	801741e <UART_SetConfig+0x22a>
 801734c:	231b      	movs	r3, #27
 801734e:	2218      	movs	r2, #24
 8017350:	189b      	adds	r3, r3, r2
 8017352:	19db      	adds	r3, r3, r7
 8017354:	2210      	movs	r2, #16
 8017356:	701a      	strb	r2, [r3, #0]
 8017358:	e061      	b.n	801741e <UART_SetConfig+0x22a>
 801735a:	69fb      	ldr	r3, [r7, #28]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	4a7c      	ldr	r2, [pc, #496]	@ (8017550 <UART_SetConfig+0x35c>)
 8017360:	4293      	cmp	r3, r2
 8017362:	d106      	bne.n	8017372 <UART_SetConfig+0x17e>
 8017364:	231b      	movs	r3, #27
 8017366:	2218      	movs	r2, #24
 8017368:	189b      	adds	r3, r3, r2
 801736a:	19db      	adds	r3, r3, r7
 801736c:	2200      	movs	r2, #0
 801736e:	701a      	strb	r2, [r3, #0]
 8017370:	e055      	b.n	801741e <UART_SetConfig+0x22a>
 8017372:	69fb      	ldr	r3, [r7, #28]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	4a77      	ldr	r2, [pc, #476]	@ (8017554 <UART_SetConfig+0x360>)
 8017378:	4293      	cmp	r3, r2
 801737a:	d106      	bne.n	801738a <UART_SetConfig+0x196>
 801737c:	231b      	movs	r3, #27
 801737e:	2218      	movs	r2, #24
 8017380:	189b      	adds	r3, r3, r2
 8017382:	19db      	adds	r3, r3, r7
 8017384:	2200      	movs	r2, #0
 8017386:	701a      	strb	r2, [r3, #0]
 8017388:	e049      	b.n	801741e <UART_SetConfig+0x22a>
 801738a:	69fb      	ldr	r3, [r7, #28]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	4a6b      	ldr	r2, [pc, #428]	@ (801753c <UART_SetConfig+0x348>)
 8017390:	4293      	cmp	r3, r2
 8017392:	d13e      	bne.n	8017412 <UART_SetConfig+0x21e>
 8017394:	4b6c      	ldr	r3, [pc, #432]	@ (8017548 <UART_SetConfig+0x354>)
 8017396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017398:	23c0      	movs	r3, #192	@ 0xc0
 801739a:	011b      	lsls	r3, r3, #4
 801739c:	4013      	ands	r3, r2
 801739e:	22c0      	movs	r2, #192	@ 0xc0
 80173a0:	0112      	lsls	r2, r2, #4
 80173a2:	4293      	cmp	r3, r2
 80173a4:	d027      	beq.n	80173f6 <UART_SetConfig+0x202>
 80173a6:	22c0      	movs	r2, #192	@ 0xc0
 80173a8:	0112      	lsls	r2, r2, #4
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d82a      	bhi.n	8017404 <UART_SetConfig+0x210>
 80173ae:	2280      	movs	r2, #128	@ 0x80
 80173b0:	0112      	lsls	r2, r2, #4
 80173b2:	4293      	cmp	r3, r2
 80173b4:	d011      	beq.n	80173da <UART_SetConfig+0x1e6>
 80173b6:	2280      	movs	r2, #128	@ 0x80
 80173b8:	0112      	lsls	r2, r2, #4
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d822      	bhi.n	8017404 <UART_SetConfig+0x210>
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d004      	beq.n	80173cc <UART_SetConfig+0x1d8>
 80173c2:	2280      	movs	r2, #128	@ 0x80
 80173c4:	00d2      	lsls	r2, r2, #3
 80173c6:	4293      	cmp	r3, r2
 80173c8:	d00e      	beq.n	80173e8 <UART_SetConfig+0x1f4>
 80173ca:	e01b      	b.n	8017404 <UART_SetConfig+0x210>
 80173cc:	231b      	movs	r3, #27
 80173ce:	2218      	movs	r2, #24
 80173d0:	189b      	adds	r3, r3, r2
 80173d2:	19db      	adds	r3, r3, r7
 80173d4:	2200      	movs	r2, #0
 80173d6:	701a      	strb	r2, [r3, #0]
 80173d8:	e021      	b.n	801741e <UART_SetConfig+0x22a>
 80173da:	231b      	movs	r3, #27
 80173dc:	2218      	movs	r2, #24
 80173de:	189b      	adds	r3, r3, r2
 80173e0:	19db      	adds	r3, r3, r7
 80173e2:	2202      	movs	r2, #2
 80173e4:	701a      	strb	r2, [r3, #0]
 80173e6:	e01a      	b.n	801741e <UART_SetConfig+0x22a>
 80173e8:	231b      	movs	r3, #27
 80173ea:	2218      	movs	r2, #24
 80173ec:	189b      	adds	r3, r3, r2
 80173ee:	19db      	adds	r3, r3, r7
 80173f0:	2204      	movs	r2, #4
 80173f2:	701a      	strb	r2, [r3, #0]
 80173f4:	e013      	b.n	801741e <UART_SetConfig+0x22a>
 80173f6:	231b      	movs	r3, #27
 80173f8:	2218      	movs	r2, #24
 80173fa:	189b      	adds	r3, r3, r2
 80173fc:	19db      	adds	r3, r3, r7
 80173fe:	2208      	movs	r2, #8
 8017400:	701a      	strb	r2, [r3, #0]
 8017402:	e00c      	b.n	801741e <UART_SetConfig+0x22a>
 8017404:	231b      	movs	r3, #27
 8017406:	2218      	movs	r2, #24
 8017408:	189b      	adds	r3, r3, r2
 801740a:	19db      	adds	r3, r3, r7
 801740c:	2210      	movs	r2, #16
 801740e:	701a      	strb	r2, [r3, #0]
 8017410:	e005      	b.n	801741e <UART_SetConfig+0x22a>
 8017412:	231b      	movs	r3, #27
 8017414:	2218      	movs	r2, #24
 8017416:	189b      	adds	r3, r3, r2
 8017418:	19db      	adds	r3, r3, r7
 801741a:	2210      	movs	r2, #16
 801741c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801741e:	69fb      	ldr	r3, [r7, #28]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	4a46      	ldr	r2, [pc, #280]	@ (801753c <UART_SetConfig+0x348>)
 8017424:	4293      	cmp	r3, r2
 8017426:	d000      	beq.n	801742a <UART_SetConfig+0x236>
 8017428:	e09a      	b.n	8017560 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801742a:	231b      	movs	r3, #27
 801742c:	2218      	movs	r2, #24
 801742e:	189b      	adds	r3, r3, r2
 8017430:	19db      	adds	r3, r3, r7
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	2b08      	cmp	r3, #8
 8017436:	d01d      	beq.n	8017474 <UART_SetConfig+0x280>
 8017438:	dc20      	bgt.n	801747c <UART_SetConfig+0x288>
 801743a:	2b04      	cmp	r3, #4
 801743c:	d015      	beq.n	801746a <UART_SetConfig+0x276>
 801743e:	dc1d      	bgt.n	801747c <UART_SetConfig+0x288>
 8017440:	2b00      	cmp	r3, #0
 8017442:	d002      	beq.n	801744a <UART_SetConfig+0x256>
 8017444:	2b02      	cmp	r3, #2
 8017446:	d005      	beq.n	8017454 <UART_SetConfig+0x260>
 8017448:	e018      	b.n	801747c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801744a:	f7fd fe4b 	bl	80150e4 <HAL_RCC_GetPCLK1Freq>
 801744e:	0003      	movs	r3, r0
 8017450:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017452:	e01c      	b.n	801748e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017454:	4b3c      	ldr	r3, [pc, #240]	@ (8017548 <UART_SetConfig+0x354>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2210      	movs	r2, #16
 801745a:	4013      	ands	r3, r2
 801745c:	d002      	beq.n	8017464 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801745e:	4b3e      	ldr	r3, [pc, #248]	@ (8017558 <UART_SetConfig+0x364>)
 8017460:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017462:	e014      	b.n	801748e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017464:	4b3d      	ldr	r3, [pc, #244]	@ (801755c <UART_SetConfig+0x368>)
 8017466:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017468:	e011      	b.n	801748e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801746a:	f7fd fd8b 	bl	8014f84 <HAL_RCC_GetSysClockFreq>
 801746e:	0003      	movs	r3, r0
 8017470:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017472:	e00c      	b.n	801748e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017474:	2380      	movs	r3, #128	@ 0x80
 8017476:	021b      	lsls	r3, r3, #8
 8017478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801747a:	e008      	b.n	801748e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801747c:	2300      	movs	r3, #0
 801747e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017480:	231a      	movs	r3, #26
 8017482:	2218      	movs	r2, #24
 8017484:	189b      	adds	r3, r3, r2
 8017486:	19db      	adds	r3, r3, r7
 8017488:	2201      	movs	r2, #1
 801748a:	701a      	strb	r2, [r3, #0]
        break;
 801748c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017490:	2b00      	cmp	r3, #0
 8017492:	d100      	bne.n	8017496 <UART_SetConfig+0x2a2>
 8017494:	e133      	b.n	80176fe <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017496:	69fb      	ldr	r3, [r7, #28]
 8017498:	685a      	ldr	r2, [r3, #4]
 801749a:	0013      	movs	r3, r2
 801749c:	005b      	lsls	r3, r3, #1
 801749e:	189b      	adds	r3, r3, r2
 80174a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d305      	bcc.n	80174b2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80174ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80174ae:	429a      	cmp	r2, r3
 80174b0:	d906      	bls.n	80174c0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80174b2:	231a      	movs	r3, #26
 80174b4:	2218      	movs	r2, #24
 80174b6:	189b      	adds	r3, r3, r2
 80174b8:	19db      	adds	r3, r3, r7
 80174ba:	2201      	movs	r2, #1
 80174bc:	701a      	strb	r2, [r3, #0]
 80174be:	e11e      	b.n	80176fe <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80174c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174c2:	613b      	str	r3, [r7, #16]
 80174c4:	2300      	movs	r3, #0
 80174c6:	617b      	str	r3, [r7, #20]
 80174c8:	6939      	ldr	r1, [r7, #16]
 80174ca:	697a      	ldr	r2, [r7, #20]
 80174cc:	000b      	movs	r3, r1
 80174ce:	0e1b      	lsrs	r3, r3, #24
 80174d0:	0010      	movs	r0, r2
 80174d2:	0205      	lsls	r5, r0, #8
 80174d4:	431d      	orrs	r5, r3
 80174d6:	000b      	movs	r3, r1
 80174d8:	021c      	lsls	r4, r3, #8
 80174da:	69fb      	ldr	r3, [r7, #28]
 80174dc:	685b      	ldr	r3, [r3, #4]
 80174de:	085b      	lsrs	r3, r3, #1
 80174e0:	60bb      	str	r3, [r7, #8]
 80174e2:	2300      	movs	r3, #0
 80174e4:	60fb      	str	r3, [r7, #12]
 80174e6:	68b8      	ldr	r0, [r7, #8]
 80174e8:	68f9      	ldr	r1, [r7, #12]
 80174ea:	1900      	adds	r0, r0, r4
 80174ec:	4169      	adcs	r1, r5
 80174ee:	69fb      	ldr	r3, [r7, #28]
 80174f0:	685b      	ldr	r3, [r3, #4]
 80174f2:	603b      	str	r3, [r7, #0]
 80174f4:	2300      	movs	r3, #0
 80174f6:	607b      	str	r3, [r7, #4]
 80174f8:	683a      	ldr	r2, [r7, #0]
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	f7e9 f840 	bl	8000580 <__aeabi_uldivmod>
 8017500:	0002      	movs	r2, r0
 8017502:	000b      	movs	r3, r1
 8017504:	0013      	movs	r3, r2
 8017506:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801750a:	23c0      	movs	r3, #192	@ 0xc0
 801750c:	009b      	lsls	r3, r3, #2
 801750e:	429a      	cmp	r2, r3
 8017510:	d309      	bcc.n	8017526 <UART_SetConfig+0x332>
 8017512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017514:	2380      	movs	r3, #128	@ 0x80
 8017516:	035b      	lsls	r3, r3, #13
 8017518:	429a      	cmp	r2, r3
 801751a:	d204      	bcs.n	8017526 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017522:	60da      	str	r2, [r3, #12]
 8017524:	e0eb      	b.n	80176fe <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017526:	231a      	movs	r3, #26
 8017528:	2218      	movs	r2, #24
 801752a:	189b      	adds	r3, r3, r2
 801752c:	19db      	adds	r3, r3, r7
 801752e:	2201      	movs	r2, #1
 8017530:	701a      	strb	r2, [r3, #0]
 8017532:	e0e4      	b.n	80176fe <UART_SetConfig+0x50a>
 8017534:	efff69f3 	.word	0xefff69f3
 8017538:	ffffcfff 	.word	0xffffcfff
 801753c:	40004800 	.word	0x40004800
 8017540:	fffff4ff 	.word	0xfffff4ff
 8017544:	40013800 	.word	0x40013800
 8017548:	40021000 	.word	0x40021000
 801754c:	40004400 	.word	0x40004400
 8017550:	40004c00 	.word	0x40004c00
 8017554:	40005000 	.word	0x40005000
 8017558:	003d0900 	.word	0x003d0900
 801755c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	69da      	ldr	r2, [r3, #28]
 8017564:	2380      	movs	r3, #128	@ 0x80
 8017566:	021b      	lsls	r3, r3, #8
 8017568:	429a      	cmp	r2, r3
 801756a:	d000      	beq.n	801756e <UART_SetConfig+0x37a>
 801756c:	e070      	b.n	8017650 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801756e:	231b      	movs	r3, #27
 8017570:	2218      	movs	r2, #24
 8017572:	189b      	adds	r3, r3, r2
 8017574:	19db      	adds	r3, r3, r7
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	2b08      	cmp	r3, #8
 801757a:	d822      	bhi.n	80175c2 <UART_SetConfig+0x3ce>
 801757c:	009a      	lsls	r2, r3, #2
 801757e:	4b67      	ldr	r3, [pc, #412]	@ (801771c <UART_SetConfig+0x528>)
 8017580:	18d3      	adds	r3, r2, r3
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017586:	f7fd fdad 	bl	80150e4 <HAL_RCC_GetPCLK1Freq>
 801758a:	0003      	movs	r3, r0
 801758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801758e:	e021      	b.n	80175d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017590:	f7fd fdbe 	bl	8015110 <HAL_RCC_GetPCLK2Freq>
 8017594:	0003      	movs	r3, r0
 8017596:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017598:	e01c      	b.n	80175d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801759a:	4b61      	ldr	r3, [pc, #388]	@ (8017720 <UART_SetConfig+0x52c>)
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	2210      	movs	r2, #16
 80175a0:	4013      	ands	r3, r2
 80175a2:	d002      	beq.n	80175aa <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80175a4:	4b5f      	ldr	r3, [pc, #380]	@ (8017724 <UART_SetConfig+0x530>)
 80175a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80175a8:	e014      	b.n	80175d4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80175aa:	4b5f      	ldr	r3, [pc, #380]	@ (8017728 <UART_SetConfig+0x534>)
 80175ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175ae:	e011      	b.n	80175d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80175b0:	f7fd fce8 	bl	8014f84 <HAL_RCC_GetSysClockFreq>
 80175b4:	0003      	movs	r3, r0
 80175b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175b8:	e00c      	b.n	80175d4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80175ba:	2380      	movs	r3, #128	@ 0x80
 80175bc:	021b      	lsls	r3, r3, #8
 80175be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80175c0:	e008      	b.n	80175d4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80175c2:	2300      	movs	r3, #0
 80175c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80175c6:	231a      	movs	r3, #26
 80175c8:	2218      	movs	r2, #24
 80175ca:	189b      	adds	r3, r3, r2
 80175cc:	19db      	adds	r3, r3, r7
 80175ce:	2201      	movs	r2, #1
 80175d0:	701a      	strb	r2, [r3, #0]
        break;
 80175d2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80175d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d100      	bne.n	80175dc <UART_SetConfig+0x3e8>
 80175da:	e090      	b.n	80176fe <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80175dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175de:	005a      	lsls	r2, r3, #1
 80175e0:	69fb      	ldr	r3, [r7, #28]
 80175e2:	685b      	ldr	r3, [r3, #4]
 80175e4:	085b      	lsrs	r3, r3, #1
 80175e6:	18d2      	adds	r2, r2, r3
 80175e8:	69fb      	ldr	r3, [r7, #28]
 80175ea:	685b      	ldr	r3, [r3, #4]
 80175ec:	0019      	movs	r1, r3
 80175ee:	0010      	movs	r0, r2
 80175f0:	f7e8 fdd8 	bl	80001a4 <__udivsi3>
 80175f4:	0003      	movs	r3, r0
 80175f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80175f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175fa:	2b0f      	cmp	r3, #15
 80175fc:	d921      	bls.n	8017642 <UART_SetConfig+0x44e>
 80175fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017600:	2380      	movs	r3, #128	@ 0x80
 8017602:	025b      	lsls	r3, r3, #9
 8017604:	429a      	cmp	r2, r3
 8017606:	d21c      	bcs.n	8017642 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801760a:	b29a      	uxth	r2, r3
 801760c:	200e      	movs	r0, #14
 801760e:	2418      	movs	r4, #24
 8017610:	1903      	adds	r3, r0, r4
 8017612:	19db      	adds	r3, r3, r7
 8017614:	210f      	movs	r1, #15
 8017616:	438a      	bics	r2, r1
 8017618:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801761a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801761c:	085b      	lsrs	r3, r3, #1
 801761e:	b29b      	uxth	r3, r3
 8017620:	2207      	movs	r2, #7
 8017622:	4013      	ands	r3, r2
 8017624:	b299      	uxth	r1, r3
 8017626:	1903      	adds	r3, r0, r4
 8017628:	19db      	adds	r3, r3, r7
 801762a:	1902      	adds	r2, r0, r4
 801762c:	19d2      	adds	r2, r2, r7
 801762e:	8812      	ldrh	r2, [r2, #0]
 8017630:	430a      	orrs	r2, r1
 8017632:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8017634:	69fb      	ldr	r3, [r7, #28]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	1902      	adds	r2, r0, r4
 801763a:	19d2      	adds	r2, r2, r7
 801763c:	8812      	ldrh	r2, [r2, #0]
 801763e:	60da      	str	r2, [r3, #12]
 8017640:	e05d      	b.n	80176fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017642:	231a      	movs	r3, #26
 8017644:	2218      	movs	r2, #24
 8017646:	189b      	adds	r3, r3, r2
 8017648:	19db      	adds	r3, r3, r7
 801764a:	2201      	movs	r2, #1
 801764c:	701a      	strb	r2, [r3, #0]
 801764e:	e056      	b.n	80176fe <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8017650:	231b      	movs	r3, #27
 8017652:	2218      	movs	r2, #24
 8017654:	189b      	adds	r3, r3, r2
 8017656:	19db      	adds	r3, r3, r7
 8017658:	781b      	ldrb	r3, [r3, #0]
 801765a:	2b08      	cmp	r3, #8
 801765c:	d822      	bhi.n	80176a4 <UART_SetConfig+0x4b0>
 801765e:	009a      	lsls	r2, r3, #2
 8017660:	4b32      	ldr	r3, [pc, #200]	@ (801772c <UART_SetConfig+0x538>)
 8017662:	18d3      	adds	r3, r2, r3
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017668:	f7fd fd3c 	bl	80150e4 <HAL_RCC_GetPCLK1Freq>
 801766c:	0003      	movs	r3, r0
 801766e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017670:	e021      	b.n	80176b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017672:	f7fd fd4d 	bl	8015110 <HAL_RCC_GetPCLK2Freq>
 8017676:	0003      	movs	r3, r0
 8017678:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801767a:	e01c      	b.n	80176b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801767c:	4b28      	ldr	r3, [pc, #160]	@ (8017720 <UART_SetConfig+0x52c>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	2210      	movs	r2, #16
 8017682:	4013      	ands	r3, r2
 8017684:	d002      	beq.n	801768c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017686:	4b27      	ldr	r3, [pc, #156]	@ (8017724 <UART_SetConfig+0x530>)
 8017688:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801768a:	e014      	b.n	80176b6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801768c:	4b26      	ldr	r3, [pc, #152]	@ (8017728 <UART_SetConfig+0x534>)
 801768e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017690:	e011      	b.n	80176b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017692:	f7fd fc77 	bl	8014f84 <HAL_RCC_GetSysClockFreq>
 8017696:	0003      	movs	r3, r0
 8017698:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801769a:	e00c      	b.n	80176b6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801769c:	2380      	movs	r3, #128	@ 0x80
 801769e:	021b      	lsls	r3, r3, #8
 80176a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80176a2:	e008      	b.n	80176b6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80176a4:	2300      	movs	r3, #0
 80176a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80176a8:	231a      	movs	r3, #26
 80176aa:	2218      	movs	r2, #24
 80176ac:	189b      	adds	r3, r3, r2
 80176ae:	19db      	adds	r3, r3, r7
 80176b0:	2201      	movs	r2, #1
 80176b2:	701a      	strb	r2, [r3, #0]
        break;
 80176b4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80176b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d020      	beq.n	80176fe <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80176bc:	69fb      	ldr	r3, [r7, #28]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	085a      	lsrs	r2, r3, #1
 80176c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176c4:	18d2      	adds	r2, r2, r3
 80176c6:	69fb      	ldr	r3, [r7, #28]
 80176c8:	685b      	ldr	r3, [r3, #4]
 80176ca:	0019      	movs	r1, r3
 80176cc:	0010      	movs	r0, r2
 80176ce:	f7e8 fd69 	bl	80001a4 <__udivsi3>
 80176d2:	0003      	movs	r3, r0
 80176d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80176d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176d8:	2b0f      	cmp	r3, #15
 80176da:	d90a      	bls.n	80176f2 <UART_SetConfig+0x4fe>
 80176dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80176de:	2380      	movs	r3, #128	@ 0x80
 80176e0:	025b      	lsls	r3, r3, #9
 80176e2:	429a      	cmp	r2, r3
 80176e4:	d205      	bcs.n	80176f2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80176e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	69fb      	ldr	r3, [r7, #28]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	60da      	str	r2, [r3, #12]
 80176f0:	e005      	b.n	80176fe <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80176f2:	231a      	movs	r3, #26
 80176f4:	2218      	movs	r2, #24
 80176f6:	189b      	adds	r3, r3, r2
 80176f8:	19db      	adds	r3, r3, r7
 80176fa:	2201      	movs	r2, #1
 80176fc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80176fe:	69fb      	ldr	r3, [r7, #28]
 8017700:	2200      	movs	r2, #0
 8017702:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8017704:	69fb      	ldr	r3, [r7, #28]
 8017706:	2200      	movs	r2, #0
 8017708:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801770a:	231a      	movs	r3, #26
 801770c:	2218      	movs	r2, #24
 801770e:	189b      	adds	r3, r3, r2
 8017710:	19db      	adds	r3, r3, r7
 8017712:	781b      	ldrb	r3, [r3, #0]
}
 8017714:	0018      	movs	r0, r3
 8017716:	46bd      	mov	sp, r7
 8017718:	b00e      	add	sp, #56	@ 0x38
 801771a:	bdb0      	pop	{r4, r5, r7, pc}
 801771c:	08024904 	.word	0x08024904
 8017720:	40021000 	.word	0x40021000
 8017724:	003d0900 	.word	0x003d0900
 8017728:	00f42400 	.word	0x00f42400
 801772c:	08024928 	.word	0x08024928

08017730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801773c:	2201      	movs	r2, #1
 801773e:	4013      	ands	r3, r2
 8017740:	d00b      	beq.n	801775a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	685b      	ldr	r3, [r3, #4]
 8017748:	4a4a      	ldr	r2, [pc, #296]	@ (8017874 <UART_AdvFeatureConfig+0x144>)
 801774a:	4013      	ands	r3, r2
 801774c:	0019      	movs	r1, r3
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	430a      	orrs	r2, r1
 8017758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801775e:	2202      	movs	r2, #2
 8017760:	4013      	ands	r3, r2
 8017762:	d00b      	beq.n	801777c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	685b      	ldr	r3, [r3, #4]
 801776a:	4a43      	ldr	r2, [pc, #268]	@ (8017878 <UART_AdvFeatureConfig+0x148>)
 801776c:	4013      	ands	r3, r2
 801776e:	0019      	movs	r1, r3
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	430a      	orrs	r2, r1
 801777a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017780:	2204      	movs	r2, #4
 8017782:	4013      	ands	r3, r2
 8017784:	d00b      	beq.n	801779e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	4a3b      	ldr	r2, [pc, #236]	@ (801787c <UART_AdvFeatureConfig+0x14c>)
 801778e:	4013      	ands	r3, r2
 8017790:	0019      	movs	r1, r3
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	430a      	orrs	r2, r1
 801779c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177a2:	2208      	movs	r2, #8
 80177a4:	4013      	ands	r3, r2
 80177a6:	d00b      	beq.n	80177c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	685b      	ldr	r3, [r3, #4]
 80177ae:	4a34      	ldr	r2, [pc, #208]	@ (8017880 <UART_AdvFeatureConfig+0x150>)
 80177b0:	4013      	ands	r3, r2
 80177b2:	0019      	movs	r1, r3
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	430a      	orrs	r2, r1
 80177be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177c4:	2210      	movs	r2, #16
 80177c6:	4013      	ands	r3, r2
 80177c8:	d00b      	beq.n	80177e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	689b      	ldr	r3, [r3, #8]
 80177d0:	4a2c      	ldr	r2, [pc, #176]	@ (8017884 <UART_AdvFeatureConfig+0x154>)
 80177d2:	4013      	ands	r3, r2
 80177d4:	0019      	movs	r1, r3
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	430a      	orrs	r2, r1
 80177e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177e6:	2220      	movs	r2, #32
 80177e8:	4013      	ands	r3, r2
 80177ea:	d00b      	beq.n	8017804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	689b      	ldr	r3, [r3, #8]
 80177f2:	4a25      	ldr	r2, [pc, #148]	@ (8017888 <UART_AdvFeatureConfig+0x158>)
 80177f4:	4013      	ands	r3, r2
 80177f6:	0019      	movs	r1, r3
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	430a      	orrs	r2, r1
 8017802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017808:	2240      	movs	r2, #64	@ 0x40
 801780a:	4013      	ands	r3, r2
 801780c:	d01d      	beq.n	801784a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	685b      	ldr	r3, [r3, #4]
 8017814:	4a1d      	ldr	r2, [pc, #116]	@ (801788c <UART_AdvFeatureConfig+0x15c>)
 8017816:	4013      	ands	r3, r2
 8017818:	0019      	movs	r1, r3
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	430a      	orrs	r2, r1
 8017824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801782a:	2380      	movs	r3, #128	@ 0x80
 801782c:	035b      	lsls	r3, r3, #13
 801782e:	429a      	cmp	r2, r3
 8017830:	d10b      	bne.n	801784a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	685b      	ldr	r3, [r3, #4]
 8017838:	4a15      	ldr	r2, [pc, #84]	@ (8017890 <UART_AdvFeatureConfig+0x160>)
 801783a:	4013      	ands	r3, r2
 801783c:	0019      	movs	r1, r3
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	430a      	orrs	r2, r1
 8017848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801784e:	2280      	movs	r2, #128	@ 0x80
 8017850:	4013      	ands	r3, r2
 8017852:	d00b      	beq.n	801786c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	685b      	ldr	r3, [r3, #4]
 801785a:	4a0e      	ldr	r2, [pc, #56]	@ (8017894 <UART_AdvFeatureConfig+0x164>)
 801785c:	4013      	ands	r3, r2
 801785e:	0019      	movs	r1, r3
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	430a      	orrs	r2, r1
 801786a:	605a      	str	r2, [r3, #4]
  }
}
 801786c:	46c0      	nop			@ (mov r8, r8)
 801786e:	46bd      	mov	sp, r7
 8017870:	b002      	add	sp, #8
 8017872:	bd80      	pop	{r7, pc}
 8017874:	fffdffff 	.word	0xfffdffff
 8017878:	fffeffff 	.word	0xfffeffff
 801787c:	fffbffff 	.word	0xfffbffff
 8017880:	ffff7fff 	.word	0xffff7fff
 8017884:	ffffefff 	.word	0xffffefff
 8017888:	ffffdfff 	.word	0xffffdfff
 801788c:	ffefffff 	.word	0xffefffff
 8017890:	ff9fffff 	.word	0xff9fffff
 8017894:	fff7ffff 	.word	0xfff7ffff

08017898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b092      	sub	sp, #72	@ 0x48
 801789c:	af02      	add	r7, sp, #8
 801789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	2284      	movs	r2, #132	@ 0x84
 80178a4:	2100      	movs	r1, #0
 80178a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80178a8:	f7f6 fd36 	bl	800e318 <HAL_GetTick>
 80178ac:	0003      	movs	r3, r0
 80178ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	2208      	movs	r2, #8
 80178b8:	4013      	ands	r3, r2
 80178ba:	2b08      	cmp	r3, #8
 80178bc:	d12c      	bne.n	8017918 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80178be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80178c0:	2280      	movs	r2, #128	@ 0x80
 80178c2:	0391      	lsls	r1, r2, #14
 80178c4:	6878      	ldr	r0, [r7, #4]
 80178c6:	4a46      	ldr	r2, [pc, #280]	@ (80179e0 <UART_CheckIdleState+0x148>)
 80178c8:	9200      	str	r2, [sp, #0]
 80178ca:	2200      	movs	r2, #0
 80178cc:	f000 f88c 	bl	80179e8 <UART_WaitOnFlagUntilTimeout>
 80178d0:	1e03      	subs	r3, r0, #0
 80178d2:	d021      	beq.n	8017918 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178d4:	f3ef 8310 	mrs	r3, PRIMASK
 80178d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80178da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80178dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80178de:	2301      	movs	r3, #1
 80178e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178e4:	f383 8810 	msr	PRIMASK, r3
}
 80178e8:	46c0      	nop			@ (mov r8, r8)
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	681a      	ldr	r2, [r3, #0]
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	2180      	movs	r1, #128	@ 0x80
 80178f6:	438a      	bics	r2, r1
 80178f8:	601a      	str	r2, [r3, #0]
 80178fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017900:	f383 8810 	msr	PRIMASK, r3
}
 8017904:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	2220      	movs	r2, #32
 801790a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	2278      	movs	r2, #120	@ 0x78
 8017910:	2100      	movs	r1, #0
 8017912:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017914:	2303      	movs	r3, #3
 8017916:	e05f      	b.n	80179d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2204      	movs	r2, #4
 8017920:	4013      	ands	r3, r2
 8017922:	2b04      	cmp	r3, #4
 8017924:	d146      	bne.n	80179b4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017928:	2280      	movs	r2, #128	@ 0x80
 801792a:	03d1      	lsls	r1, r2, #15
 801792c:	6878      	ldr	r0, [r7, #4]
 801792e:	4a2c      	ldr	r2, [pc, #176]	@ (80179e0 <UART_CheckIdleState+0x148>)
 8017930:	9200      	str	r2, [sp, #0]
 8017932:	2200      	movs	r2, #0
 8017934:	f000 f858 	bl	80179e8 <UART_WaitOnFlagUntilTimeout>
 8017938:	1e03      	subs	r3, r0, #0
 801793a:	d03b      	beq.n	80179b4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801793c:	f3ef 8310 	mrs	r3, PRIMASK
 8017940:	60fb      	str	r3, [r7, #12]
  return(result);
 8017942:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017944:	637b      	str	r3, [r7, #52]	@ 0x34
 8017946:	2301      	movs	r3, #1
 8017948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801794a:	693b      	ldr	r3, [r7, #16]
 801794c:	f383 8810 	msr	PRIMASK, r3
}
 8017950:	46c0      	nop			@ (mov r8, r8)
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	681a      	ldr	r2, [r3, #0]
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	4921      	ldr	r1, [pc, #132]	@ (80179e4 <UART_CheckIdleState+0x14c>)
 801795e:	400a      	ands	r2, r1
 8017960:	601a      	str	r2, [r3, #0]
 8017962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	f383 8810 	msr	PRIMASK, r3
}
 801796c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801796e:	f3ef 8310 	mrs	r3, PRIMASK
 8017972:	61bb      	str	r3, [r7, #24]
  return(result);
 8017974:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017976:	633b      	str	r3, [r7, #48]	@ 0x30
 8017978:	2301      	movs	r3, #1
 801797a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801797c:	69fb      	ldr	r3, [r7, #28]
 801797e:	f383 8810 	msr	PRIMASK, r3
}
 8017982:	46c0      	nop			@ (mov r8, r8)
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	689a      	ldr	r2, [r3, #8]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	2101      	movs	r1, #1
 8017990:	438a      	bics	r2, r1
 8017992:	609a      	str	r2, [r3, #8]
 8017994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017996:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017998:	6a3b      	ldr	r3, [r7, #32]
 801799a:	f383 8810 	msr	PRIMASK, r3
}
 801799e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2280      	movs	r2, #128	@ 0x80
 80179a4:	2120      	movs	r1, #32
 80179a6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2278      	movs	r2, #120	@ 0x78
 80179ac:	2100      	movs	r1, #0
 80179ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80179b0:	2303      	movs	r3, #3
 80179b2:	e011      	b.n	80179d8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2220      	movs	r2, #32
 80179b8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	2280      	movs	r2, #128	@ 0x80
 80179be:	2120      	movs	r1, #32
 80179c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	2200      	movs	r2, #0
 80179c6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2200      	movs	r2, #0
 80179cc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	2278      	movs	r2, #120	@ 0x78
 80179d2:	2100      	movs	r1, #0
 80179d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80179d6:	2300      	movs	r3, #0
}
 80179d8:	0018      	movs	r0, r3
 80179da:	46bd      	mov	sp, r7
 80179dc:	b010      	add	sp, #64	@ 0x40
 80179de:	bd80      	pop	{r7, pc}
 80179e0:	01ffffff 	.word	0x01ffffff
 80179e4:	fffffedf 	.word	0xfffffedf

080179e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b084      	sub	sp, #16
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	60f8      	str	r0, [r7, #12]
 80179f0:	60b9      	str	r1, [r7, #8]
 80179f2:	603b      	str	r3, [r7, #0]
 80179f4:	1dfb      	adds	r3, r7, #7
 80179f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80179f8:	e04b      	b.n	8017a92 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80179fa:	69bb      	ldr	r3, [r7, #24]
 80179fc:	3301      	adds	r3, #1
 80179fe:	d048      	beq.n	8017a92 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a00:	f7f6 fc8a 	bl	800e318 <HAL_GetTick>
 8017a04:	0002      	movs	r2, r0
 8017a06:	683b      	ldr	r3, [r7, #0]
 8017a08:	1ad3      	subs	r3, r2, r3
 8017a0a:	69ba      	ldr	r2, [r7, #24]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d302      	bcc.n	8017a16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8017a10:	69bb      	ldr	r3, [r7, #24]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d101      	bne.n	8017a1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017a16:	2303      	movs	r3, #3
 8017a18:	e04b      	b.n	8017ab2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2204      	movs	r2, #4
 8017a22:	4013      	ands	r3, r2
 8017a24:	d035      	beq.n	8017a92 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	69db      	ldr	r3, [r3, #28]
 8017a2c:	2208      	movs	r2, #8
 8017a2e:	4013      	ands	r3, r2
 8017a30:	2b08      	cmp	r3, #8
 8017a32:	d111      	bne.n	8017a58 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	2208      	movs	r2, #8
 8017a3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	0018      	movs	r0, r3
 8017a40:	f000 f9ca 	bl	8017dd8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	2284      	movs	r2, #132	@ 0x84
 8017a48:	2108      	movs	r1, #8
 8017a4a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	2278      	movs	r2, #120	@ 0x78
 8017a50:	2100      	movs	r1, #0
 8017a52:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017a54:	2301      	movs	r3, #1
 8017a56:	e02c      	b.n	8017ab2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	69da      	ldr	r2, [r3, #28]
 8017a5e:	2380      	movs	r3, #128	@ 0x80
 8017a60:	011b      	lsls	r3, r3, #4
 8017a62:	401a      	ands	r2, r3
 8017a64:	2380      	movs	r3, #128	@ 0x80
 8017a66:	011b      	lsls	r3, r3, #4
 8017a68:	429a      	cmp	r2, r3
 8017a6a:	d112      	bne.n	8017a92 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2280      	movs	r2, #128	@ 0x80
 8017a72:	0112      	lsls	r2, r2, #4
 8017a74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	0018      	movs	r0, r3
 8017a7a:	f000 f9ad 	bl	8017dd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	2284      	movs	r2, #132	@ 0x84
 8017a82:	2120      	movs	r1, #32
 8017a84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	2278      	movs	r2, #120	@ 0x78
 8017a8a:	2100      	movs	r1, #0
 8017a8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017a8e:	2303      	movs	r3, #3
 8017a90:	e00f      	b.n	8017ab2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	69db      	ldr	r3, [r3, #28]
 8017a98:	68ba      	ldr	r2, [r7, #8]
 8017a9a:	4013      	ands	r3, r2
 8017a9c:	68ba      	ldr	r2, [r7, #8]
 8017a9e:	1ad3      	subs	r3, r2, r3
 8017aa0:	425a      	negs	r2, r3
 8017aa2:	4153      	adcs	r3, r2
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	001a      	movs	r2, r3
 8017aa8:	1dfb      	adds	r3, r7, #7
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d0a4      	beq.n	80179fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017ab0:	2300      	movs	r3, #0
}
 8017ab2:	0018      	movs	r0, r3
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	b004      	add	sp, #16
 8017ab8:	bd80      	pop	{r7, pc}
	...

08017abc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b090      	sub	sp, #64	@ 0x40
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	60f8      	str	r0, [r7, #12]
 8017ac4:	60b9      	str	r1, [r7, #8]
 8017ac6:	1dbb      	adds	r3, r7, #6
 8017ac8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	68ba      	ldr	r2, [r7, #8]
 8017ace:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	1dba      	adds	r2, r7, #6
 8017ad4:	2158      	movs	r1, #88	@ 0x58
 8017ad6:	8812      	ldrh	r2, [r2, #0]
 8017ad8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	1dba      	adds	r2, r7, #6
 8017ade:	215a      	movs	r1, #90	@ 0x5a
 8017ae0:	8812      	ldrh	r2, [r2, #0]
 8017ae2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	689a      	ldr	r2, [r3, #8]
 8017aee:	2380      	movs	r3, #128	@ 0x80
 8017af0:	015b      	lsls	r3, r3, #5
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d10d      	bne.n	8017b12 <UART_Start_Receive_IT+0x56>
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	691b      	ldr	r3, [r3, #16]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d104      	bne.n	8017b08 <UART_Start_Receive_IT+0x4c>
 8017afe:	68fb      	ldr	r3, [r7, #12]
 8017b00:	225c      	movs	r2, #92	@ 0x5c
 8017b02:	4950      	ldr	r1, [pc, #320]	@ (8017c44 <UART_Start_Receive_IT+0x188>)
 8017b04:	5299      	strh	r1, [r3, r2]
 8017b06:	e02e      	b.n	8017b66 <UART_Start_Receive_IT+0xaa>
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	225c      	movs	r2, #92	@ 0x5c
 8017b0c:	21ff      	movs	r1, #255	@ 0xff
 8017b0e:	5299      	strh	r1, [r3, r2]
 8017b10:	e029      	b.n	8017b66 <UART_Start_Receive_IT+0xaa>
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	689b      	ldr	r3, [r3, #8]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d10d      	bne.n	8017b36 <UART_Start_Receive_IT+0x7a>
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	691b      	ldr	r3, [r3, #16]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d104      	bne.n	8017b2c <UART_Start_Receive_IT+0x70>
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	225c      	movs	r2, #92	@ 0x5c
 8017b26:	21ff      	movs	r1, #255	@ 0xff
 8017b28:	5299      	strh	r1, [r3, r2]
 8017b2a:	e01c      	b.n	8017b66 <UART_Start_Receive_IT+0xaa>
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	225c      	movs	r2, #92	@ 0x5c
 8017b30:	217f      	movs	r1, #127	@ 0x7f
 8017b32:	5299      	strh	r1, [r3, r2]
 8017b34:	e017      	b.n	8017b66 <UART_Start_Receive_IT+0xaa>
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	689a      	ldr	r2, [r3, #8]
 8017b3a:	2380      	movs	r3, #128	@ 0x80
 8017b3c:	055b      	lsls	r3, r3, #21
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d10d      	bne.n	8017b5e <UART_Start_Receive_IT+0xa2>
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	691b      	ldr	r3, [r3, #16]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d104      	bne.n	8017b54 <UART_Start_Receive_IT+0x98>
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	225c      	movs	r2, #92	@ 0x5c
 8017b4e:	217f      	movs	r1, #127	@ 0x7f
 8017b50:	5299      	strh	r1, [r3, r2]
 8017b52:	e008      	b.n	8017b66 <UART_Start_Receive_IT+0xaa>
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	225c      	movs	r2, #92	@ 0x5c
 8017b58:	213f      	movs	r1, #63	@ 0x3f
 8017b5a:	5299      	strh	r1, [r3, r2]
 8017b5c:	e003      	b.n	8017b66 <UART_Start_Receive_IT+0xaa>
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	225c      	movs	r2, #92	@ 0x5c
 8017b62:	2100      	movs	r1, #0
 8017b64:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	2284      	movs	r2, #132	@ 0x84
 8017b6a:	2100      	movs	r1, #0
 8017b6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	2280      	movs	r2, #128	@ 0x80
 8017b72:	2122      	movs	r1, #34	@ 0x22
 8017b74:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b76:	f3ef 8310 	mrs	r3, PRIMASK
 8017b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017b80:	2301      	movs	r3, #1
 8017b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b86:	f383 8810 	msr	PRIMASK, r3
}
 8017b8a:	46c0      	nop			@ (mov r8, r8)
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	689a      	ldr	r2, [r3, #8]
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	2101      	movs	r1, #1
 8017b98:	430a      	orrs	r2, r1
 8017b9a:	609a      	str	r2, [r3, #8]
 8017b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ba2:	f383 8810 	msr	PRIMASK, r3
}
 8017ba6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	689a      	ldr	r2, [r3, #8]
 8017bac:	2380      	movs	r3, #128	@ 0x80
 8017bae:	015b      	lsls	r3, r3, #5
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d107      	bne.n	8017bc4 <UART_Start_Receive_IT+0x108>
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	691b      	ldr	r3, [r3, #16]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d103      	bne.n	8017bc4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	4a22      	ldr	r2, [pc, #136]	@ (8017c48 <UART_Start_Receive_IT+0x18c>)
 8017bc0:	669a      	str	r2, [r3, #104]	@ 0x68
 8017bc2:	e002      	b.n	8017bca <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	4a21      	ldr	r2, [pc, #132]	@ (8017c4c <UART_Start_Receive_IT+0x190>)
 8017bc8:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	691b      	ldr	r3, [r3, #16]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d019      	beq.n	8017c06 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8017bd6:	61fb      	str	r3, [r7, #28]
  return(result);
 8017bd8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8017bdc:	2301      	movs	r3, #1
 8017bde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017be0:	6a3b      	ldr	r3, [r7, #32]
 8017be2:	f383 8810 	msr	PRIMASK, r3
}
 8017be6:	46c0      	nop			@ (mov r8, r8)
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	681a      	ldr	r2, [r3, #0]
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	2190      	movs	r1, #144	@ 0x90
 8017bf4:	0049      	lsls	r1, r1, #1
 8017bf6:	430a      	orrs	r2, r1
 8017bf8:	601a      	str	r2, [r3, #0]
 8017bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c00:	f383 8810 	msr	PRIMASK, r3
}
 8017c04:	e018      	b.n	8017c38 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c06:	f3ef 8310 	mrs	r3, PRIMASK
 8017c0a:	613b      	str	r3, [r7, #16]
  return(result);
 8017c0c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8017c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017c10:	2301      	movs	r3, #1
 8017c12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	f383 8810 	msr	PRIMASK, r3
}
 8017c1a:	46c0      	nop			@ (mov r8, r8)
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	681a      	ldr	r2, [r3, #0]
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	2120      	movs	r1, #32
 8017c28:	430a      	orrs	r2, r1
 8017c2a:	601a      	str	r2, [r3, #0]
 8017c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c30:	69bb      	ldr	r3, [r7, #24]
 8017c32:	f383 8810 	msr	PRIMASK, r3
}
 8017c36:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8017c38:	2300      	movs	r3, #0
}
 8017c3a:	0018      	movs	r0, r3
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	b010      	add	sp, #64	@ 0x40
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	46c0      	nop			@ (mov r8, r8)
 8017c44:	000001ff 	.word	0x000001ff
 8017c48:	080183bd 	.word	0x080183bd
 8017c4c:	080181f1 	.word	0x080181f1

08017c50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b090      	sub	sp, #64	@ 0x40
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	60f8      	str	r0, [r7, #12]
 8017c58:	60b9      	str	r1, [r7, #8]
 8017c5a:	1dbb      	adds	r3, r7, #6
 8017c5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	68ba      	ldr	r2, [r7, #8]
 8017c62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	1dba      	adds	r2, r7, #6
 8017c68:	2158      	movs	r1, #88	@ 0x58
 8017c6a:	8812      	ldrh	r2, [r2, #0]
 8017c6c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	2284      	movs	r2, #132	@ 0x84
 8017c72:	2100      	movs	r1, #0
 8017c74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	2280      	movs	r2, #128	@ 0x80
 8017c7a:	2122      	movs	r1, #34	@ 0x22
 8017c7c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d028      	beq.n	8017cd8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8017d84 <UART_Start_Receive_DMA+0x134>)
 8017c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c92:	4a3d      	ldr	r2, [pc, #244]	@ (8017d88 <UART_Start_Receive_DMA+0x138>)
 8017c94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8017d8c <UART_Start_Receive_DMA+0x13c>)
 8017c9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	3324      	adds	r3, #36	@ 0x24
 8017cb0:	0019      	movs	r1, r3
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017cb6:	001a      	movs	r2, r3
 8017cb8:	1dbb      	adds	r3, r7, #6
 8017cba:	881b      	ldrh	r3, [r3, #0]
 8017cbc:	f7f7 f868 	bl	800ed90 <HAL_DMA_Start_IT>
 8017cc0:	1e03      	subs	r3, r0, #0
 8017cc2:	d009      	beq.n	8017cd8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	2284      	movs	r2, #132	@ 0x84
 8017cc8:	2110      	movs	r1, #16
 8017cca:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	2280      	movs	r2, #128	@ 0x80
 8017cd0:	2120      	movs	r1, #32
 8017cd2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8017cd4:	2301      	movs	r3, #1
 8017cd6:	e050      	b.n	8017d7a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	691b      	ldr	r3, [r3, #16]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d019      	beq.n	8017d14 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8017ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017cea:	2301      	movs	r3, #1
 8017cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cf0:	f383 8810 	msr	PRIMASK, r3
}
 8017cf4:	46c0      	nop			@ (mov r8, r8)
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	681a      	ldr	r2, [r3, #0]
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2180      	movs	r1, #128	@ 0x80
 8017d02:	0049      	lsls	r1, r1, #1
 8017d04:	430a      	orrs	r2, r1
 8017d06:	601a      	str	r2, [r3, #0]
 8017d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d0e:	f383 8810 	msr	PRIMASK, r3
}
 8017d12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d14:	f3ef 8310 	mrs	r3, PRIMASK
 8017d18:	613b      	str	r3, [r7, #16]
  return(result);
 8017d1a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d1e:	2301      	movs	r3, #1
 8017d20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d22:	697b      	ldr	r3, [r7, #20]
 8017d24:	f383 8810 	msr	PRIMASK, r3
}
 8017d28:	46c0      	nop			@ (mov r8, r8)
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	689a      	ldr	r2, [r3, #8]
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	2101      	movs	r1, #1
 8017d36:	430a      	orrs	r2, r1
 8017d38:	609a      	str	r2, [r3, #8]
 8017d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d3e:	69bb      	ldr	r3, [r7, #24]
 8017d40:	f383 8810 	msr	PRIMASK, r3
}
 8017d44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d46:	f3ef 8310 	mrs	r3, PRIMASK
 8017d4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8017d4c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017d50:	2301      	movs	r3, #1
 8017d52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d54:	6a3b      	ldr	r3, [r7, #32]
 8017d56:	f383 8810 	msr	PRIMASK, r3
}
 8017d5a:	46c0      	nop			@ (mov r8, r8)
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	689a      	ldr	r2, [r3, #8]
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	2140      	movs	r1, #64	@ 0x40
 8017d68:	430a      	orrs	r2, r1
 8017d6a:	609a      	str	r2, [r3, #8]
 8017d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d72:	f383 8810 	msr	PRIMASK, r3
}
 8017d76:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017d78:	2300      	movs	r3, #0
}
 8017d7a:	0018      	movs	r0, r3
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	b010      	add	sp, #64	@ 0x40
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	46c0      	nop			@ (mov r8, r8)
 8017d84:	08017f61 	.word	0x08017f61
 8017d88:	08018095 	.word	0x08018095
 8017d8c:	080180dd 	.word	0x080180dd

08017d90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b086      	sub	sp, #24
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d98:	f3ef 8310 	mrs	r3, PRIMASK
 8017d9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8017d9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017da0:	617b      	str	r3, [r7, #20]
 8017da2:	2301      	movs	r3, #1
 8017da4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	f383 8810 	msr	PRIMASK, r3
}
 8017dac:	46c0      	nop			@ (mov r8, r8)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	681a      	ldr	r2, [r3, #0]
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	21c0      	movs	r1, #192	@ 0xc0
 8017dba:	438a      	bics	r2, r1
 8017dbc:	601a      	str	r2, [r3, #0]
 8017dbe:	697b      	ldr	r3, [r7, #20]
 8017dc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dc2:	693b      	ldr	r3, [r7, #16]
 8017dc4:	f383 8810 	msr	PRIMASK, r3
}
 8017dc8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	2220      	movs	r2, #32
 8017dce:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8017dd0:	46c0      	nop			@ (mov r8, r8)
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	b006      	add	sp, #24
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b08e      	sub	sp, #56	@ 0x38
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017de0:	f3ef 8310 	mrs	r3, PRIMASK
 8017de4:	617b      	str	r3, [r7, #20]
  return(result);
 8017de6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8017dea:	2301      	movs	r3, #1
 8017dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dee:	69bb      	ldr	r3, [r7, #24]
 8017df0:	f383 8810 	msr	PRIMASK, r3
}
 8017df4:	46c0      	nop			@ (mov r8, r8)
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	681a      	ldr	r2, [r3, #0]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	4926      	ldr	r1, [pc, #152]	@ (8017e9c <UART_EndRxTransfer+0xc4>)
 8017e02:	400a      	ands	r2, r1
 8017e04:	601a      	str	r2, [r3, #0]
 8017e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	f383 8810 	msr	PRIMASK, r3
}
 8017e10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e12:	f3ef 8310 	mrs	r3, PRIMASK
 8017e16:	623b      	str	r3, [r7, #32]
  return(result);
 8017e18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e22:	f383 8810 	msr	PRIMASK, r3
}
 8017e26:	46c0      	nop			@ (mov r8, r8)
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	689a      	ldr	r2, [r3, #8]
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	2101      	movs	r1, #1
 8017e34:	438a      	bics	r2, r1
 8017e36:	609a      	str	r2, [r3, #8]
 8017e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e3e:	f383 8810 	msr	PRIMASK, r3
}
 8017e42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017e48:	2b01      	cmp	r3, #1
 8017e4a:	d118      	bne.n	8017e7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8017e50:	60bb      	str	r3, [r7, #8]
  return(result);
 8017e52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017e56:	2301      	movs	r3, #1
 8017e58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	f383 8810 	msr	PRIMASK, r3
}
 8017e60:	46c0      	nop			@ (mov r8, r8)
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	681a      	ldr	r2, [r3, #0]
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	2110      	movs	r1, #16
 8017e6e:	438a      	bics	r2, r1
 8017e70:	601a      	str	r2, [r3, #0]
 8017e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e76:	693b      	ldr	r3, [r7, #16]
 8017e78:	f383 8810 	msr	PRIMASK, r3
}
 8017e7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2280      	movs	r2, #128	@ 0x80
 8017e82:	2120      	movs	r1, #32
 8017e84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	2200      	movs	r2, #0
 8017e8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017e92:	46c0      	nop			@ (mov r8, r8)
 8017e94:	46bd      	mov	sp, r7
 8017e96:	b00e      	add	sp, #56	@ 0x38
 8017e98:	bd80      	pop	{r7, pc}
 8017e9a:	46c0      	nop			@ (mov r8, r8)
 8017e9c:	fffffedf 	.word	0xfffffedf

08017ea0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b08c      	sub	sp, #48	@ 0x30
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017eac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	2220      	movs	r2, #32
 8017eb6:	4013      	ands	r3, r2
 8017eb8:	d135      	bne.n	8017f26 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8017eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ebc:	2252      	movs	r2, #82	@ 0x52
 8017ebe:	2100      	movs	r1, #0
 8017ec0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8017ec6:	60fb      	str	r3, [r7, #12]
  return(result);
 8017ec8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ecc:	2301      	movs	r3, #1
 8017ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ed0:	693b      	ldr	r3, [r7, #16]
 8017ed2:	f383 8810 	msr	PRIMASK, r3
}
 8017ed6:	46c0      	nop			@ (mov r8, r8)
 8017ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	689a      	ldr	r2, [r3, #8]
 8017ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	2180      	movs	r1, #128	@ 0x80
 8017ee4:	438a      	bics	r2, r1
 8017ee6:	609a      	str	r2, [r3, #8]
 8017ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	f383 8810 	msr	PRIMASK, r3
}
 8017ef2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8017ef8:	61bb      	str	r3, [r7, #24]
  return(result);
 8017efa:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8017efe:	2301      	movs	r3, #1
 8017f00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	f383 8810 	msr	PRIMASK, r3
}
 8017f08:	46c0      	nop			@ (mov r8, r8)
 8017f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	681a      	ldr	r2, [r3, #0]
 8017f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	2140      	movs	r1, #64	@ 0x40
 8017f16:	430a      	orrs	r2, r1
 8017f18:	601a      	str	r2, [r3, #0]
 8017f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f1e:	6a3b      	ldr	r3, [r7, #32]
 8017f20:	f383 8810 	msr	PRIMASK, r3
}
 8017f24:	e006      	b.n	8017f34 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8017f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f28:	228c      	movs	r2, #140	@ 0x8c
 8017f2a:	589b      	ldr	r3, [r3, r2]
 8017f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f2e:	0010      	movs	r0, r2
 8017f30:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017f32:	46c0      	nop			@ (mov r8, r8)
 8017f34:	46c0      	nop			@ (mov r8, r8)
 8017f36:	46bd      	mov	sp, r7
 8017f38:	b00c      	add	sp, #48	@ 0x30
 8017f3a:	bd80      	pop	{r7, pc}

08017f3c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b084      	sub	sp, #16
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	2288      	movs	r2, #136	@ 0x88
 8017f4e:	589b      	ldr	r3, [r3, r2]
 8017f50:	68fa      	ldr	r2, [r7, #12]
 8017f52:	0010      	movs	r0, r2
 8017f54:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f56:	46c0      	nop			@ (mov r8, r8)
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	b004      	add	sp, #16
 8017f5c:	bd80      	pop	{r7, pc}
	...

08017f60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b094      	sub	sp, #80	@ 0x50
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	2220      	movs	r2, #32
 8017f76:	4013      	ands	r3, r2
 8017f78:	d16f      	bne.n	801805a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8017f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f7c:	225a      	movs	r2, #90	@ 0x5a
 8017f7e:	2100      	movs	r1, #0
 8017f80:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f82:	f3ef 8310 	mrs	r3, PRIMASK
 8017f86:	61bb      	str	r3, [r7, #24]
  return(result);
 8017f88:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f90:	69fb      	ldr	r3, [r7, #28]
 8017f92:	f383 8810 	msr	PRIMASK, r3
}
 8017f96:	46c0      	nop			@ (mov r8, r8)
 8017f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	681a      	ldr	r2, [r3, #0]
 8017f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	493b      	ldr	r1, [pc, #236]	@ (8018090 <UART_DMAReceiveCplt+0x130>)
 8017fa4:	400a      	ands	r2, r1
 8017fa6:	601a      	str	r2, [r3, #0]
 8017fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017faa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fac:	6a3b      	ldr	r3, [r7, #32]
 8017fae:	f383 8810 	msr	PRIMASK, r3
}
 8017fb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8017fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fc4:	f383 8810 	msr	PRIMASK, r3
}
 8017fc8:	46c0      	nop			@ (mov r8, r8)
 8017fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	689a      	ldr	r2, [r3, #8]
 8017fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	2101      	movs	r1, #1
 8017fd6:	438a      	bics	r2, r1
 8017fd8:	609a      	str	r2, [r3, #8]
 8017fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fe0:	f383 8810 	msr	PRIMASK, r3
}
 8017fe4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8017fea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017fee:	643b      	str	r3, [r7, #64]	@ 0x40
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ff6:	f383 8810 	msr	PRIMASK, r3
}
 8017ffa:	46c0      	nop			@ (mov r8, r8)
 8017ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	689a      	ldr	r2, [r3, #8]
 8018002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	2140      	movs	r1, #64	@ 0x40
 8018008:	438a      	bics	r2, r1
 801800a:	609a      	str	r2, [r3, #8]
 801800c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801800e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018012:	f383 8810 	msr	PRIMASK, r3
}
 8018016:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801801a:	2280      	movs	r2, #128	@ 0x80
 801801c:	2120      	movs	r1, #32
 801801e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018024:	2b01      	cmp	r3, #1
 8018026:	d118      	bne.n	801805a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018028:	f3ef 8310 	mrs	r3, PRIMASK
 801802c:	60fb      	str	r3, [r7, #12]
  return(result);
 801802e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018032:	2301      	movs	r3, #1
 8018034:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018036:	693b      	ldr	r3, [r7, #16]
 8018038:	f383 8810 	msr	PRIMASK, r3
}
 801803c:	46c0      	nop			@ (mov r8, r8)
 801803e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	681a      	ldr	r2, [r3, #0]
 8018044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	2110      	movs	r1, #16
 801804a:	438a      	bics	r2, r1
 801804c:	601a      	str	r2, [r3, #0]
 801804e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	f383 8810 	msr	PRIMASK, r3
}
 8018058:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801805a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801805c:	2200      	movs	r2, #0
 801805e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018064:	2b01      	cmp	r3, #1
 8018066:	d109      	bne.n	801807c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801806a:	22ac      	movs	r2, #172	@ 0xac
 801806c:	589b      	ldr	r3, [r3, r2]
 801806e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018070:	2158      	movs	r1, #88	@ 0x58
 8018072:	5a51      	ldrh	r1, [r2, r1]
 8018074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018076:	0010      	movs	r0, r2
 8018078:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801807a:	e005      	b.n	8018088 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801807c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801807e:	2294      	movs	r2, #148	@ 0x94
 8018080:	589b      	ldr	r3, [r3, r2]
 8018082:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018084:	0010      	movs	r0, r2
 8018086:	4798      	blx	r3
}
 8018088:	46c0      	nop			@ (mov r8, r8)
 801808a:	46bd      	mov	sp, r7
 801808c:	b014      	add	sp, #80	@ 0x50
 801808e:	bd80      	pop	{r7, pc}
 8018090:	fffffeff 	.word	0xfffffeff

08018094 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b084      	sub	sp, #16
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	2201      	movs	r2, #1
 80180a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80180ac:	2b01      	cmp	r3, #1
 80180ae:	d10b      	bne.n	80180c8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	22ac      	movs	r2, #172	@ 0xac
 80180b4:	589b      	ldr	r3, [r3, r2]
 80180b6:	68fa      	ldr	r2, [r7, #12]
 80180b8:	2158      	movs	r1, #88	@ 0x58
 80180ba:	5a52      	ldrh	r2, [r2, r1]
 80180bc:	0852      	lsrs	r2, r2, #1
 80180be:	b291      	uxth	r1, r2
 80180c0:	68fa      	ldr	r2, [r7, #12]
 80180c2:	0010      	movs	r0, r2
 80180c4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80180c6:	e005      	b.n	80180d4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	2290      	movs	r2, #144	@ 0x90
 80180cc:	589b      	ldr	r3, [r3, r2]
 80180ce:	68fa      	ldr	r2, [r7, #12]
 80180d0:	0010      	movs	r0, r2
 80180d2:	4798      	blx	r3
}
 80180d4:	46c0      	nop			@ (mov r8, r8)
 80180d6:	46bd      	mov	sp, r7
 80180d8:	b004      	add	sp, #16
 80180da:	bd80      	pop	{r7, pc}

080180dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b086      	sub	sp, #24
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80180ea:	697b      	ldr	r3, [r7, #20]
 80180ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80180ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	2280      	movs	r2, #128	@ 0x80
 80180f4:	589b      	ldr	r3, [r3, r2]
 80180f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80180f8:	697b      	ldr	r3, [r7, #20]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	689b      	ldr	r3, [r3, #8]
 80180fe:	2280      	movs	r2, #128	@ 0x80
 8018100:	4013      	ands	r3, r2
 8018102:	2b80      	cmp	r3, #128	@ 0x80
 8018104:	d10a      	bne.n	801811c <UART_DMAError+0x40>
 8018106:	693b      	ldr	r3, [r7, #16]
 8018108:	2b21      	cmp	r3, #33	@ 0x21
 801810a:	d107      	bne.n	801811c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	2252      	movs	r2, #82	@ 0x52
 8018110:	2100      	movs	r1, #0
 8018112:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	0018      	movs	r0, r3
 8018118:	f7ff fe3a 	bl	8017d90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	689b      	ldr	r3, [r3, #8]
 8018122:	2240      	movs	r2, #64	@ 0x40
 8018124:	4013      	ands	r3, r2
 8018126:	2b40      	cmp	r3, #64	@ 0x40
 8018128:	d10a      	bne.n	8018140 <UART_DMAError+0x64>
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	2b22      	cmp	r3, #34	@ 0x22
 801812e:	d107      	bne.n	8018140 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	225a      	movs	r2, #90	@ 0x5a
 8018134:	2100      	movs	r1, #0
 8018136:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018138:	697b      	ldr	r3, [r7, #20]
 801813a:	0018      	movs	r0, r3
 801813c:	f7ff fe4c 	bl	8017dd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	2284      	movs	r2, #132	@ 0x84
 8018144:	589b      	ldr	r3, [r3, r2]
 8018146:	2210      	movs	r2, #16
 8018148:	431a      	orrs	r2, r3
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	2184      	movs	r1, #132	@ 0x84
 801814e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018150:	697b      	ldr	r3, [r7, #20]
 8018152:	2298      	movs	r2, #152	@ 0x98
 8018154:	589b      	ldr	r3, [r3, r2]
 8018156:	697a      	ldr	r2, [r7, #20]
 8018158:	0010      	movs	r0, r2
 801815a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801815c:	46c0      	nop			@ (mov r8, r8)
 801815e:	46bd      	mov	sp, r7
 8018160:	b006      	add	sp, #24
 8018162:	bd80      	pop	{r7, pc}

08018164 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b084      	sub	sp, #16
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018170:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	225a      	movs	r2, #90	@ 0x5a
 8018176:	2100      	movs	r1, #0
 8018178:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	2252      	movs	r2, #82	@ 0x52
 801817e:	2100      	movs	r1, #0
 8018180:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	2298      	movs	r2, #152	@ 0x98
 8018186:	589b      	ldr	r3, [r3, r2]
 8018188:	68fa      	ldr	r2, [r7, #12]
 801818a:	0010      	movs	r0, r2
 801818c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801818e:	46c0      	nop			@ (mov r8, r8)
 8018190:	46bd      	mov	sp, r7
 8018192:	b004      	add	sp, #16
 8018194:	bd80      	pop	{r7, pc}

08018196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018196:	b580      	push	{r7, lr}
 8018198:	b086      	sub	sp, #24
 801819a:	af00      	add	r7, sp, #0
 801819c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801819e:	f3ef 8310 	mrs	r3, PRIMASK
 80181a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80181a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80181a6:	617b      	str	r3, [r7, #20]
 80181a8:	2301      	movs	r3, #1
 80181aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	f383 8810 	msr	PRIMASK, r3
}
 80181b2:	46c0      	nop			@ (mov r8, r8)
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	681a      	ldr	r2, [r3, #0]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	2140      	movs	r1, #64	@ 0x40
 80181c0:	438a      	bics	r2, r1
 80181c2:	601a      	str	r2, [r3, #0]
 80181c4:	697b      	ldr	r3, [r7, #20]
 80181c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181c8:	693b      	ldr	r3, [r7, #16]
 80181ca:	f383 8810 	msr	PRIMASK, r3
}
 80181ce:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	2220      	movs	r2, #32
 80181d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2200      	movs	r2, #0
 80181da:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	228c      	movs	r2, #140	@ 0x8c
 80181e0:	589b      	ldr	r3, [r3, r2]
 80181e2:	687a      	ldr	r2, [r7, #4]
 80181e4:	0010      	movs	r0, r2
 80181e6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80181e8:	46c0      	nop			@ (mov r8, r8)
 80181ea:	46bd      	mov	sp, r7
 80181ec:	b006      	add	sp, #24
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b094      	sub	sp, #80	@ 0x50
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80181f8:	204e      	movs	r0, #78	@ 0x4e
 80181fa:	183b      	adds	r3, r7, r0
 80181fc:	687a      	ldr	r2, [r7, #4]
 80181fe:	215c      	movs	r1, #92	@ 0x5c
 8018200:	5a52      	ldrh	r2, [r2, r1]
 8018202:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2280      	movs	r2, #128	@ 0x80
 8018208:	589b      	ldr	r3, [r3, r2]
 801820a:	2b22      	cmp	r3, #34	@ 0x22
 801820c:	d000      	beq.n	8018210 <UART_RxISR_8BIT+0x20>
 801820e:	e0c2      	b.n	8018396 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018216:	214c      	movs	r1, #76	@ 0x4c
 8018218:	187b      	adds	r3, r7, r1
 801821a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801821c:	187b      	adds	r3, r7, r1
 801821e:	881b      	ldrh	r3, [r3, #0]
 8018220:	b2da      	uxtb	r2, r3
 8018222:	183b      	adds	r3, r7, r0
 8018224:	881b      	ldrh	r3, [r3, #0]
 8018226:	b2d9      	uxtb	r1, r3
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801822c:	400a      	ands	r2, r1
 801822e:	b2d2      	uxtb	r2, r2
 8018230:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018236:	1c5a      	adds	r2, r3, #1
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	225a      	movs	r2, #90	@ 0x5a
 8018240:	5a9b      	ldrh	r3, [r3, r2]
 8018242:	b29b      	uxth	r3, r3
 8018244:	3b01      	subs	r3, #1
 8018246:	b299      	uxth	r1, r3
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	225a      	movs	r2, #90	@ 0x5a
 801824c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	225a      	movs	r2, #90	@ 0x5a
 8018252:	5a9b      	ldrh	r3, [r3, r2]
 8018254:	b29b      	uxth	r3, r3
 8018256:	2b00      	cmp	r3, #0
 8018258:	d000      	beq.n	801825c <UART_RxISR_8BIT+0x6c>
 801825a:	e0a4      	b.n	80183a6 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801825c:	f3ef 8310 	mrs	r3, PRIMASK
 8018260:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018264:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018266:	2301      	movs	r3, #1
 8018268:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801826c:	f383 8810 	msr	PRIMASK, r3
}
 8018270:	46c0      	nop			@ (mov r8, r8)
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	681a      	ldr	r2, [r3, #0]
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	494c      	ldr	r1, [pc, #304]	@ (80183b0 <UART_RxISR_8BIT+0x1c0>)
 801827e:	400a      	ands	r2, r1
 8018280:	601a      	str	r2, [r3, #0]
 8018282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018288:	f383 8810 	msr	PRIMASK, r3
}
 801828c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801828e:	f3ef 8310 	mrs	r3, PRIMASK
 8018292:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018296:	647b      	str	r3, [r7, #68]	@ 0x44
 8018298:	2301      	movs	r3, #1
 801829a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801829e:	f383 8810 	msr	PRIMASK, r3
}
 80182a2:	46c0      	nop			@ (mov r8, r8)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	689a      	ldr	r2, [r3, #8]
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	2101      	movs	r1, #1
 80182b0:	438a      	bics	r2, r1
 80182b2:	609a      	str	r2, [r3, #8]
 80182b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80182b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182ba:	f383 8810 	msr	PRIMASK, r3
}
 80182be:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2280      	movs	r2, #128	@ 0x80
 80182c4:	2120      	movs	r1, #32
 80182c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	2200      	movs	r2, #0
 80182cc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2200      	movs	r2, #0
 80182d2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4a36      	ldr	r2, [pc, #216]	@ (80183b4 <UART_RxISR_8BIT+0x1c4>)
 80182da:	4293      	cmp	r3, r2
 80182dc:	d01f      	beq.n	801831e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	685a      	ldr	r2, [r3, #4]
 80182e4:	2380      	movs	r3, #128	@ 0x80
 80182e6:	041b      	lsls	r3, r3, #16
 80182e8:	4013      	ands	r3, r2
 80182ea:	d018      	beq.n	801831e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182ec:	f3ef 8310 	mrs	r3, PRIMASK
 80182f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80182f2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80182f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80182f6:	2301      	movs	r3, #1
 80182f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182fa:	69fb      	ldr	r3, [r7, #28]
 80182fc:	f383 8810 	msr	PRIMASK, r3
}
 8018300:	46c0      	nop			@ (mov r8, r8)
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	681a      	ldr	r2, [r3, #0]
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	492a      	ldr	r1, [pc, #168]	@ (80183b8 <UART_RxISR_8BIT+0x1c8>)
 801830e:	400a      	ands	r2, r1
 8018310:	601a      	str	r2, [r3, #0]
 8018312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018314:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018316:	6a3b      	ldr	r3, [r7, #32]
 8018318:	f383 8810 	msr	PRIMASK, r3
}
 801831c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018322:	2b01      	cmp	r3, #1
 8018324:	d130      	bne.n	8018388 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	2200      	movs	r2, #0
 801832a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801832c:	f3ef 8310 	mrs	r3, PRIMASK
 8018330:	60fb      	str	r3, [r7, #12]
  return(result);
 8018332:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018336:	2301      	movs	r3, #1
 8018338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801833a:	693b      	ldr	r3, [r7, #16]
 801833c:	f383 8810 	msr	PRIMASK, r3
}
 8018340:	46c0      	nop			@ (mov r8, r8)
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	681a      	ldr	r2, [r3, #0]
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2110      	movs	r1, #16
 801834e:	438a      	bics	r2, r1
 8018350:	601a      	str	r2, [r3, #0]
 8018352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018354:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018356:	697b      	ldr	r3, [r7, #20]
 8018358:	f383 8810 	msr	PRIMASK, r3
}
 801835c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	69db      	ldr	r3, [r3, #28]
 8018364:	2210      	movs	r2, #16
 8018366:	4013      	ands	r3, r2
 8018368:	2b10      	cmp	r3, #16
 801836a:	d103      	bne.n	8018374 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	2210      	movs	r2, #16
 8018372:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	22ac      	movs	r2, #172	@ 0xac
 8018378:	589b      	ldr	r3, [r3, r2]
 801837a:	687a      	ldr	r2, [r7, #4]
 801837c:	2158      	movs	r1, #88	@ 0x58
 801837e:	5a51      	ldrh	r1, [r2, r1]
 8018380:	687a      	ldr	r2, [r7, #4]
 8018382:	0010      	movs	r0, r2
 8018384:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018386:	e00e      	b.n	80183a6 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	2294      	movs	r2, #148	@ 0x94
 801838c:	589b      	ldr	r3, [r3, r2]
 801838e:	687a      	ldr	r2, [r7, #4]
 8018390:	0010      	movs	r0, r2
 8018392:	4798      	blx	r3
}
 8018394:	e007      	b.n	80183a6 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	699a      	ldr	r2, [r3, #24]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	2108      	movs	r1, #8
 80183a2:	430a      	orrs	r2, r1
 80183a4:	619a      	str	r2, [r3, #24]
}
 80183a6:	46c0      	nop			@ (mov r8, r8)
 80183a8:	46bd      	mov	sp, r7
 80183aa:	b014      	add	sp, #80	@ 0x50
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	46c0      	nop			@ (mov r8, r8)
 80183b0:	fffffedf 	.word	0xfffffedf
 80183b4:	40004800 	.word	0x40004800
 80183b8:	fbffffff 	.word	0xfbffffff

080183bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b094      	sub	sp, #80	@ 0x50
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80183c4:	204e      	movs	r0, #78	@ 0x4e
 80183c6:	183b      	adds	r3, r7, r0
 80183c8:	687a      	ldr	r2, [r7, #4]
 80183ca:	215c      	movs	r1, #92	@ 0x5c
 80183cc:	5a52      	ldrh	r2, [r2, r1]
 80183ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2280      	movs	r2, #128	@ 0x80
 80183d4:	589b      	ldr	r3, [r3, r2]
 80183d6:	2b22      	cmp	r3, #34	@ 0x22
 80183d8:	d000      	beq.n	80183dc <UART_RxISR_16BIT+0x20>
 80183da:	e0c2      	b.n	8018562 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80183e2:	214c      	movs	r1, #76	@ 0x4c
 80183e4:	187b      	adds	r3, r7, r1
 80183e6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80183ee:	187b      	adds	r3, r7, r1
 80183f0:	183a      	adds	r2, r7, r0
 80183f2:	881b      	ldrh	r3, [r3, #0]
 80183f4:	8812      	ldrh	r2, [r2, #0]
 80183f6:	4013      	ands	r3, r2
 80183f8:	b29a      	uxth	r2, r3
 80183fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80183fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018402:	1c9a      	adds	r2, r3, #2
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	225a      	movs	r2, #90	@ 0x5a
 801840c:	5a9b      	ldrh	r3, [r3, r2]
 801840e:	b29b      	uxth	r3, r3
 8018410:	3b01      	subs	r3, #1
 8018412:	b299      	uxth	r1, r3
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	225a      	movs	r2, #90	@ 0x5a
 8018418:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	225a      	movs	r2, #90	@ 0x5a
 801841e:	5a9b      	ldrh	r3, [r3, r2]
 8018420:	b29b      	uxth	r3, r3
 8018422:	2b00      	cmp	r3, #0
 8018424:	d000      	beq.n	8018428 <UART_RxISR_16BIT+0x6c>
 8018426:	e0a4      	b.n	8018572 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018428:	f3ef 8310 	mrs	r3, PRIMASK
 801842c:	623b      	str	r3, [r7, #32]
  return(result);
 801842e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018430:	647b      	str	r3, [r7, #68]	@ 0x44
 8018432:	2301      	movs	r3, #1
 8018434:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018438:	f383 8810 	msr	PRIMASK, r3
}
 801843c:	46c0      	nop			@ (mov r8, r8)
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	681a      	ldr	r2, [r3, #0]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	494c      	ldr	r1, [pc, #304]	@ (801857c <UART_RxISR_16BIT+0x1c0>)
 801844a:	400a      	ands	r2, r1
 801844c:	601a      	str	r2, [r3, #0]
 801844e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018450:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018454:	f383 8810 	msr	PRIMASK, r3
}
 8018458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801845a:	f3ef 8310 	mrs	r3, PRIMASK
 801845e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018462:	643b      	str	r3, [r7, #64]	@ 0x40
 8018464:	2301      	movs	r3, #1
 8018466:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801846a:	f383 8810 	msr	PRIMASK, r3
}
 801846e:	46c0      	nop			@ (mov r8, r8)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	689a      	ldr	r2, [r3, #8]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	2101      	movs	r1, #1
 801847c:	438a      	bics	r2, r1
 801847e:	609a      	str	r2, [r3, #8]
 8018480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018482:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018486:	f383 8810 	msr	PRIMASK, r3
}
 801848a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2280      	movs	r2, #128	@ 0x80
 8018490:	2120      	movs	r1, #32
 8018492:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2200      	movs	r2, #0
 8018498:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	2200      	movs	r2, #0
 801849e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a36      	ldr	r2, [pc, #216]	@ (8018580 <UART_RxISR_16BIT+0x1c4>)
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d01f      	beq.n	80184ea <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	685a      	ldr	r2, [r3, #4]
 80184b0:	2380      	movs	r3, #128	@ 0x80
 80184b2:	041b      	lsls	r3, r3, #16
 80184b4:	4013      	ands	r3, r2
 80184b6:	d018      	beq.n	80184ea <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184b8:	f3ef 8310 	mrs	r3, PRIMASK
 80184bc:	617b      	str	r3, [r7, #20]
  return(result);
 80184be:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80184c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80184c2:	2301      	movs	r3, #1
 80184c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184c6:	69bb      	ldr	r3, [r7, #24]
 80184c8:	f383 8810 	msr	PRIMASK, r3
}
 80184cc:	46c0      	nop			@ (mov r8, r8)
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	681a      	ldr	r2, [r3, #0]
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	492a      	ldr	r1, [pc, #168]	@ (8018584 <UART_RxISR_16BIT+0x1c8>)
 80184da:	400a      	ands	r2, r1
 80184dc:	601a      	str	r2, [r3, #0]
 80184de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	f383 8810 	msr	PRIMASK, r3
}
 80184e8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80184ee:	2b01      	cmp	r3, #1
 80184f0:	d130      	bne.n	8018554 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	2200      	movs	r2, #0
 80184f6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184f8:	f3ef 8310 	mrs	r3, PRIMASK
 80184fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80184fe:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018500:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018502:	2301      	movs	r3, #1
 8018504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	f383 8810 	msr	PRIMASK, r3
}
 801850c:	46c0      	nop			@ (mov r8, r8)
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	681a      	ldr	r2, [r3, #0]
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	2110      	movs	r1, #16
 801851a:	438a      	bics	r2, r1
 801851c:	601a      	str	r2, [r3, #0]
 801851e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018522:	693b      	ldr	r3, [r7, #16]
 8018524:	f383 8810 	msr	PRIMASK, r3
}
 8018528:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	69db      	ldr	r3, [r3, #28]
 8018530:	2210      	movs	r2, #16
 8018532:	4013      	ands	r3, r2
 8018534:	2b10      	cmp	r3, #16
 8018536:	d103      	bne.n	8018540 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	2210      	movs	r2, #16
 801853e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	22ac      	movs	r2, #172	@ 0xac
 8018544:	589b      	ldr	r3, [r3, r2]
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	2158      	movs	r1, #88	@ 0x58
 801854a:	5a51      	ldrh	r1, [r2, r1]
 801854c:	687a      	ldr	r2, [r7, #4]
 801854e:	0010      	movs	r0, r2
 8018550:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018552:	e00e      	b.n	8018572 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2294      	movs	r2, #148	@ 0x94
 8018558:	589b      	ldr	r3, [r3, r2]
 801855a:	687a      	ldr	r2, [r7, #4]
 801855c:	0010      	movs	r0, r2
 801855e:	4798      	blx	r3
}
 8018560:	e007      	b.n	8018572 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	699a      	ldr	r2, [r3, #24]
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	2108      	movs	r1, #8
 801856e:	430a      	orrs	r2, r1
 8018570:	619a      	str	r2, [r3, #24]
}
 8018572:	46c0      	nop			@ (mov r8, r8)
 8018574:	46bd      	mov	sp, r7
 8018576:	b014      	add	sp, #80	@ 0x50
 8018578:	bd80      	pop	{r7, pc}
 801857a:	46c0      	nop			@ (mov r8, r8)
 801857c:	fffffedf 	.word	0xfffffedf
 8018580:	40004800 	.word	0x40004800
 8018584:	fbffffff 	.word	0xfbffffff

08018588 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b082      	sub	sp, #8
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018590:	46c0      	nop			@ (mov r8, r8)
 8018592:	46bd      	mov	sp, r7
 8018594:	b002      	add	sp, #8
 8018596:	bd80      	pop	{r7, pc}

08018598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b084      	sub	sp, #16
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2244      	movs	r2, #68	@ 0x44
 80185a4:	2100      	movs	r1, #0
 80185a6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80185a8:	4b05      	ldr	r3, [pc, #20]	@ (80185c0 <USB_EnableGlobalInt+0x28>)
 80185aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	b299      	uxth	r1, r3
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	2240      	movs	r2, #64	@ 0x40
 80185b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80185b6:	2300      	movs	r3, #0
}
 80185b8:	0018      	movs	r0, r3
 80185ba:	46bd      	mov	sp, r7
 80185bc:	b004      	add	sp, #16
 80185be:	bd80      	pop	{r7, pc}
 80185c0:	0000bf80 	.word	0x0000bf80

080185c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b084      	sub	sp, #16
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80185cc:	4b09      	ldr	r3, [pc, #36]	@ (80185f4 <USB_DisableGlobalInt+0x30>)
 80185ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	2240      	movs	r2, #64	@ 0x40
 80185d4:	5a9b      	ldrh	r3, [r3, r2]
 80185d6:	b29b      	uxth	r3, r3
 80185d8:	68fa      	ldr	r2, [r7, #12]
 80185da:	b292      	uxth	r2, r2
 80185dc:	43d2      	mvns	r2, r2
 80185de:	b292      	uxth	r2, r2
 80185e0:	4013      	ands	r3, r2
 80185e2:	b299      	uxth	r1, r3
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2240      	movs	r2, #64	@ 0x40
 80185e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80185ea:	2300      	movs	r3, #0
}
 80185ec:	0018      	movs	r0, r3
 80185ee:	46bd      	mov	sp, r7
 80185f0:	b004      	add	sp, #16
 80185f2:	bd80      	pop	{r7, pc}
 80185f4:	0000bf80 	.word	0x0000bf80

080185f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80185f8:	b084      	sub	sp, #16
 80185fa:	b590      	push	{r4, r7, lr}
 80185fc:	b083      	sub	sp, #12
 80185fe:	af00      	add	r7, sp, #0
 8018600:	6078      	str	r0, [r7, #4]
 8018602:	2004      	movs	r0, #4
 8018604:	2410      	movs	r4, #16
 8018606:	1900      	adds	r0, r0, r4
 8018608:	2408      	movs	r4, #8
 801860a:	46a4      	mov	ip, r4
 801860c:	44bc      	add	ip, r7
 801860e:	4460      	add	r0, ip
 8018610:	6001      	str	r1, [r0, #0]
 8018612:	6042      	str	r2, [r0, #4]
 8018614:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	2240      	movs	r2, #64	@ 0x40
 801861a:	2101      	movs	r1, #1
 801861c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	2240      	movs	r2, #64	@ 0x40
 8018622:	2100      	movs	r1, #0
 8018624:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2244      	movs	r2, #68	@ 0x44
 801862a:	2100      	movs	r1, #0
 801862c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2250      	movs	r2, #80	@ 0x50
 8018632:	2100      	movs	r1, #0
 8018634:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018636:	2300      	movs	r3, #0
}
 8018638:	0018      	movs	r0, r3
 801863a:	46bd      	mov	sp, r7
 801863c:	b003      	add	sp, #12
 801863e:	bc90      	pop	{r4, r7}
 8018640:	bc08      	pop	{r3}
 8018642:	b004      	add	sp, #16
 8018644:	4718      	bx	r3
	...

08018648 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b09c      	sub	sp, #112	@ 0x70
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
 8018650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8018652:	236f      	movs	r3, #111	@ 0x6f
 8018654:	18fb      	adds	r3, r7, r3
 8018656:	2200      	movs	r2, #0
 8018658:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801865a:	687a      	ldr	r2, [r7, #4]
 801865c:	683b      	ldr	r3, [r7, #0]
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	009b      	lsls	r3, r3, #2
 8018662:	18d3      	adds	r3, r2, r3
 8018664:	881b      	ldrh	r3, [r3, #0]
 8018666:	b29a      	uxth	r2, r3
 8018668:	236c      	movs	r3, #108	@ 0x6c
 801866a:	18fb      	adds	r3, r7, r3
 801866c:	49a3      	ldr	r1, [pc, #652]	@ (80188fc <USB_ActivateEndpoint+0x2b4>)
 801866e:	400a      	ands	r2, r1
 8018670:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8018672:	683b      	ldr	r3, [r7, #0]
 8018674:	78db      	ldrb	r3, [r3, #3]
 8018676:	2b03      	cmp	r3, #3
 8018678:	d017      	beq.n	80186aa <USB_ActivateEndpoint+0x62>
 801867a:	dc28      	bgt.n	80186ce <USB_ActivateEndpoint+0x86>
 801867c:	2b02      	cmp	r3, #2
 801867e:	d00e      	beq.n	801869e <USB_ActivateEndpoint+0x56>
 8018680:	dc25      	bgt.n	80186ce <USB_ActivateEndpoint+0x86>
 8018682:	2b00      	cmp	r3, #0
 8018684:	d002      	beq.n	801868c <USB_ActivateEndpoint+0x44>
 8018686:	2b01      	cmp	r3, #1
 8018688:	d018      	beq.n	80186bc <USB_ActivateEndpoint+0x74>
 801868a:	e020      	b.n	80186ce <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801868c:	226c      	movs	r2, #108	@ 0x6c
 801868e:	18bb      	adds	r3, r7, r2
 8018690:	18ba      	adds	r2, r7, r2
 8018692:	8812      	ldrh	r2, [r2, #0]
 8018694:	2180      	movs	r1, #128	@ 0x80
 8018696:	0089      	lsls	r1, r1, #2
 8018698:	430a      	orrs	r2, r1
 801869a:	801a      	strh	r2, [r3, #0]
      break;
 801869c:	e01c      	b.n	80186d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801869e:	226c      	movs	r2, #108	@ 0x6c
 80186a0:	18bb      	adds	r3, r7, r2
 80186a2:	18ba      	adds	r2, r7, r2
 80186a4:	8812      	ldrh	r2, [r2, #0]
 80186a6:	801a      	strh	r2, [r3, #0]
      break;
 80186a8:	e016      	b.n	80186d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80186aa:	226c      	movs	r2, #108	@ 0x6c
 80186ac:	18bb      	adds	r3, r7, r2
 80186ae:	18ba      	adds	r2, r7, r2
 80186b0:	8812      	ldrh	r2, [r2, #0]
 80186b2:	21c0      	movs	r1, #192	@ 0xc0
 80186b4:	00c9      	lsls	r1, r1, #3
 80186b6:	430a      	orrs	r2, r1
 80186b8:	801a      	strh	r2, [r3, #0]
      break;
 80186ba:	e00d      	b.n	80186d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80186bc:	226c      	movs	r2, #108	@ 0x6c
 80186be:	18bb      	adds	r3, r7, r2
 80186c0:	18ba      	adds	r2, r7, r2
 80186c2:	8812      	ldrh	r2, [r2, #0]
 80186c4:	2180      	movs	r1, #128	@ 0x80
 80186c6:	00c9      	lsls	r1, r1, #3
 80186c8:	430a      	orrs	r2, r1
 80186ca:	801a      	strh	r2, [r3, #0]
      break;
 80186cc:	e004      	b.n	80186d8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80186ce:	236f      	movs	r3, #111	@ 0x6f
 80186d0:	18fb      	adds	r3, r7, r3
 80186d2:	2201      	movs	r2, #1
 80186d4:	701a      	strb	r2, [r3, #0]
      break;
 80186d6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80186d8:	687a      	ldr	r2, [r7, #4]
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	009b      	lsls	r3, r3, #2
 80186e0:	18d3      	adds	r3, r2, r3
 80186e2:	226c      	movs	r2, #108	@ 0x6c
 80186e4:	18ba      	adds	r2, r7, r2
 80186e6:	8812      	ldrh	r2, [r2, #0]
 80186e8:	4985      	ldr	r1, [pc, #532]	@ (8018900 <USB_ActivateEndpoint+0x2b8>)
 80186ea:	430a      	orrs	r2, r1
 80186ec:	b292      	uxth	r2, r2
 80186ee:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80186f0:	687a      	ldr	r2, [r7, #4]
 80186f2:	683b      	ldr	r3, [r7, #0]
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	009b      	lsls	r3, r3, #2
 80186f8:	18d3      	adds	r3, r2, r3
 80186fa:	881b      	ldrh	r3, [r3, #0]
 80186fc:	b29b      	uxth	r3, r3
 80186fe:	b21b      	sxth	r3, r3
 8018700:	4a80      	ldr	r2, [pc, #512]	@ (8018904 <USB_ActivateEndpoint+0x2bc>)
 8018702:	4013      	ands	r3, r2
 8018704:	b21a      	sxth	r2, r3
 8018706:	683b      	ldr	r3, [r7, #0]
 8018708:	781b      	ldrb	r3, [r3, #0]
 801870a:	b21b      	sxth	r3, r3
 801870c:	4313      	orrs	r3, r2
 801870e:	b21a      	sxth	r2, r3
 8018710:	2166      	movs	r1, #102	@ 0x66
 8018712:	187b      	adds	r3, r7, r1
 8018714:	801a      	strh	r2, [r3, #0]
 8018716:	687a      	ldr	r2, [r7, #4]
 8018718:	683b      	ldr	r3, [r7, #0]
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	009b      	lsls	r3, r3, #2
 801871e:	18d3      	adds	r3, r2, r3
 8018720:	187a      	adds	r2, r7, r1
 8018722:	8812      	ldrh	r2, [r2, #0]
 8018724:	4976      	ldr	r1, [pc, #472]	@ (8018900 <USB_ActivateEndpoint+0x2b8>)
 8018726:	430a      	orrs	r2, r1
 8018728:	b292      	uxth	r2, r2
 801872a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801872c:	683b      	ldr	r3, [r7, #0]
 801872e:	7b1b      	ldrb	r3, [r3, #12]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d000      	beq.n	8018736 <USB_ActivateEndpoint+0xee>
 8018734:	e178      	b.n	8018a28 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8018736:	683b      	ldr	r3, [r7, #0]
 8018738:	785b      	ldrb	r3, [r3, #1]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d100      	bne.n	8018740 <USB_ActivateEndpoint+0xf8>
 801873e:	e07a      	b.n	8018836 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	61bb      	str	r3, [r7, #24]
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	2250      	movs	r2, #80	@ 0x50
 8018748:	5a9b      	ldrh	r3, [r3, r2]
 801874a:	b29b      	uxth	r3, r3
 801874c:	001a      	movs	r2, r3
 801874e:	69bb      	ldr	r3, [r7, #24]
 8018750:	189b      	adds	r3, r3, r2
 8018752:	61bb      	str	r3, [r7, #24]
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	781b      	ldrb	r3, [r3, #0]
 8018758:	00da      	lsls	r2, r3, #3
 801875a:	69bb      	ldr	r3, [r7, #24]
 801875c:	18d3      	adds	r3, r2, r3
 801875e:	2280      	movs	r2, #128	@ 0x80
 8018760:	00d2      	lsls	r2, r2, #3
 8018762:	4694      	mov	ip, r2
 8018764:	4463      	add	r3, ip
 8018766:	617b      	str	r3, [r7, #20]
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	88db      	ldrh	r3, [r3, #6]
 801876c:	085b      	lsrs	r3, r3, #1
 801876e:	b29b      	uxth	r3, r3
 8018770:	18db      	adds	r3, r3, r3
 8018772:	b29a      	uxth	r2, r3
 8018774:	697b      	ldr	r3, [r7, #20]
 8018776:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018778:	687a      	ldr	r2, [r7, #4]
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	781b      	ldrb	r3, [r3, #0]
 801877e:	009b      	lsls	r3, r3, #2
 8018780:	18d2      	adds	r2, r2, r3
 8018782:	2112      	movs	r1, #18
 8018784:	187b      	adds	r3, r7, r1
 8018786:	8812      	ldrh	r2, [r2, #0]
 8018788:	801a      	strh	r2, [r3, #0]
 801878a:	187b      	adds	r3, r7, r1
 801878c:	881b      	ldrh	r3, [r3, #0]
 801878e:	2240      	movs	r2, #64	@ 0x40
 8018790:	4013      	ands	r3, r2
 8018792:	d016      	beq.n	80187c2 <USB_ActivateEndpoint+0x17a>
 8018794:	687a      	ldr	r2, [r7, #4]
 8018796:	683b      	ldr	r3, [r7, #0]
 8018798:	781b      	ldrb	r3, [r3, #0]
 801879a:	009b      	lsls	r3, r3, #2
 801879c:	18d3      	adds	r3, r2, r3
 801879e:	881b      	ldrh	r3, [r3, #0]
 80187a0:	b29a      	uxth	r2, r3
 80187a2:	2010      	movs	r0, #16
 80187a4:	183b      	adds	r3, r7, r0
 80187a6:	4957      	ldr	r1, [pc, #348]	@ (8018904 <USB_ActivateEndpoint+0x2bc>)
 80187a8:	400a      	ands	r2, r1
 80187aa:	801a      	strh	r2, [r3, #0]
 80187ac:	687a      	ldr	r2, [r7, #4]
 80187ae:	683b      	ldr	r3, [r7, #0]
 80187b0:	781b      	ldrb	r3, [r3, #0]
 80187b2:	009b      	lsls	r3, r3, #2
 80187b4:	18d3      	adds	r3, r2, r3
 80187b6:	183a      	adds	r2, r7, r0
 80187b8:	8812      	ldrh	r2, [r2, #0]
 80187ba:	4953      	ldr	r1, [pc, #332]	@ (8018908 <USB_ActivateEndpoint+0x2c0>)
 80187bc:	430a      	orrs	r2, r1
 80187be:	b292      	uxth	r2, r2
 80187c0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80187c2:	683b      	ldr	r3, [r7, #0]
 80187c4:	78db      	ldrb	r3, [r3, #3]
 80187c6:	2b01      	cmp	r3, #1
 80187c8:	d01d      	beq.n	8018806 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80187ca:	687a      	ldr	r2, [r7, #4]
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	781b      	ldrb	r3, [r3, #0]
 80187d0:	009b      	lsls	r3, r3, #2
 80187d2:	18d3      	adds	r3, r2, r3
 80187d4:	881b      	ldrh	r3, [r3, #0]
 80187d6:	b29a      	uxth	r2, r3
 80187d8:	200c      	movs	r0, #12
 80187da:	183b      	adds	r3, r7, r0
 80187dc:	494b      	ldr	r1, [pc, #300]	@ (801890c <USB_ActivateEndpoint+0x2c4>)
 80187de:	400a      	ands	r2, r1
 80187e0:	801a      	strh	r2, [r3, #0]
 80187e2:	183b      	adds	r3, r7, r0
 80187e4:	183a      	adds	r2, r7, r0
 80187e6:	8812      	ldrh	r2, [r2, #0]
 80187e8:	2120      	movs	r1, #32
 80187ea:	404a      	eors	r2, r1
 80187ec:	801a      	strh	r2, [r3, #0]
 80187ee:	687a      	ldr	r2, [r7, #4]
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	781b      	ldrb	r3, [r3, #0]
 80187f4:	009b      	lsls	r3, r3, #2
 80187f6:	18d3      	adds	r3, r2, r3
 80187f8:	183a      	adds	r2, r7, r0
 80187fa:	8812      	ldrh	r2, [r2, #0]
 80187fc:	4940      	ldr	r1, [pc, #256]	@ (8018900 <USB_ActivateEndpoint+0x2b8>)
 80187fe:	430a      	orrs	r2, r1
 8018800:	b292      	uxth	r2, r2
 8018802:	801a      	strh	r2, [r3, #0]
 8018804:	e2b4      	b.n	8018d70 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018806:	687a      	ldr	r2, [r7, #4]
 8018808:	683b      	ldr	r3, [r7, #0]
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	009b      	lsls	r3, r3, #2
 801880e:	18d3      	adds	r3, r2, r3
 8018810:	881b      	ldrh	r3, [r3, #0]
 8018812:	b29a      	uxth	r2, r3
 8018814:	200e      	movs	r0, #14
 8018816:	183b      	adds	r3, r7, r0
 8018818:	493c      	ldr	r1, [pc, #240]	@ (801890c <USB_ActivateEndpoint+0x2c4>)
 801881a:	400a      	ands	r2, r1
 801881c:	801a      	strh	r2, [r3, #0]
 801881e:	687a      	ldr	r2, [r7, #4]
 8018820:	683b      	ldr	r3, [r7, #0]
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	009b      	lsls	r3, r3, #2
 8018826:	18d3      	adds	r3, r2, r3
 8018828:	183a      	adds	r2, r7, r0
 801882a:	8812      	ldrh	r2, [r2, #0]
 801882c:	4934      	ldr	r1, [pc, #208]	@ (8018900 <USB_ActivateEndpoint+0x2b8>)
 801882e:	430a      	orrs	r2, r1
 8018830:	b292      	uxth	r2, r2
 8018832:	801a      	strh	r2, [r3, #0]
 8018834:	e29c      	b.n	8018d70 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	633b      	str	r3, [r7, #48]	@ 0x30
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	2250      	movs	r2, #80	@ 0x50
 801883e:	5a9b      	ldrh	r3, [r3, r2]
 8018840:	b29b      	uxth	r3, r3
 8018842:	001a      	movs	r2, r3
 8018844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018846:	189b      	adds	r3, r3, r2
 8018848:	633b      	str	r3, [r7, #48]	@ 0x30
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	781b      	ldrb	r3, [r3, #0]
 801884e:	00da      	lsls	r2, r3, #3
 8018850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018852:	18d3      	adds	r3, r2, r3
 8018854:	4a2e      	ldr	r2, [pc, #184]	@ (8018910 <USB_ActivateEndpoint+0x2c8>)
 8018856:	4694      	mov	ip, r2
 8018858:	4463      	add	r3, ip
 801885a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	88db      	ldrh	r3, [r3, #6]
 8018860:	085b      	lsrs	r3, r3, #1
 8018862:	b29b      	uxth	r3, r3
 8018864:	18db      	adds	r3, r3, r3
 8018866:	b29a      	uxth	r2, r3
 8018868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801886a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2250      	movs	r2, #80	@ 0x50
 8018874:	5a9b      	ldrh	r3, [r3, r2]
 8018876:	b29b      	uxth	r3, r3
 8018878:	001a      	movs	r2, r3
 801887a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801887c:	189b      	adds	r3, r3, r2
 801887e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	781b      	ldrb	r3, [r3, #0]
 8018884:	00da      	lsls	r2, r3, #3
 8018886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018888:	18d3      	adds	r3, r2, r3
 801888a:	4a22      	ldr	r2, [pc, #136]	@ (8018914 <USB_ActivateEndpoint+0x2cc>)
 801888c:	4694      	mov	ip, r2
 801888e:	4463      	add	r3, ip
 8018890:	627b      	str	r3, [r7, #36]	@ 0x24
 8018892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018894:	881b      	ldrh	r3, [r3, #0]
 8018896:	b29b      	uxth	r3, r3
 8018898:	059b      	lsls	r3, r3, #22
 801889a:	0d9b      	lsrs	r3, r3, #22
 801889c:	b29a      	uxth	r2, r3
 801889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188a0:	801a      	strh	r2, [r3, #0]
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	691b      	ldr	r3, [r3, #16]
 80188a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80188a8:	d91a      	bls.n	80188e0 <USB_ActivateEndpoint+0x298>
 80188aa:	683b      	ldr	r3, [r7, #0]
 80188ac:	691b      	ldr	r3, [r3, #16]
 80188ae:	095b      	lsrs	r3, r3, #5
 80188b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	691b      	ldr	r3, [r3, #16]
 80188b6:	221f      	movs	r2, #31
 80188b8:	4013      	ands	r3, r2
 80188ba:	d102      	bne.n	80188c2 <USB_ActivateEndpoint+0x27a>
 80188bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80188be:	3b01      	subs	r3, #1
 80188c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80188c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188c4:	881b      	ldrh	r3, [r3, #0]
 80188c6:	b29a      	uxth	r2, r3
 80188c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80188ca:	b29b      	uxth	r3, r3
 80188cc:	029b      	lsls	r3, r3, #10
 80188ce:	b29b      	uxth	r3, r3
 80188d0:	4313      	orrs	r3, r2
 80188d2:	b29b      	uxth	r3, r3
 80188d4:	4a10      	ldr	r2, [pc, #64]	@ (8018918 <USB_ActivateEndpoint+0x2d0>)
 80188d6:	4313      	orrs	r3, r2
 80188d8:	b29a      	uxth	r2, r3
 80188da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188dc:	801a      	strh	r2, [r3, #0]
 80188de:	e034      	b.n	801894a <USB_ActivateEndpoint+0x302>
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	691b      	ldr	r3, [r3, #16]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d119      	bne.n	801891c <USB_ActivateEndpoint+0x2d4>
 80188e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188ea:	881b      	ldrh	r3, [r3, #0]
 80188ec:	b29b      	uxth	r3, r3
 80188ee:	4a0a      	ldr	r2, [pc, #40]	@ (8018918 <USB_ActivateEndpoint+0x2d0>)
 80188f0:	4313      	orrs	r3, r2
 80188f2:	b29a      	uxth	r2, r3
 80188f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188f6:	801a      	strh	r2, [r3, #0]
 80188f8:	e027      	b.n	801894a <USB_ActivateEndpoint+0x302>
 80188fa:	46c0      	nop			@ (mov r8, r8)
 80188fc:	ffff898f 	.word	0xffff898f
 8018900:	ffff8080 	.word	0xffff8080
 8018904:	ffff8f8f 	.word	0xffff8f8f
 8018908:	ffff80c0 	.word	0xffff80c0
 801890c:	ffff8fbf 	.word	0xffff8fbf
 8018910:	00000404 	.word	0x00000404
 8018914:	00000406 	.word	0x00000406
 8018918:	ffff8000 	.word	0xffff8000
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	691b      	ldr	r3, [r3, #16]
 8018920:	085b      	lsrs	r3, r3, #1
 8018922:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	691b      	ldr	r3, [r3, #16]
 8018928:	2201      	movs	r2, #1
 801892a:	4013      	ands	r3, r2
 801892c:	d002      	beq.n	8018934 <USB_ActivateEndpoint+0x2ec>
 801892e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018930:	3301      	adds	r3, #1
 8018932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018936:	881b      	ldrh	r3, [r3, #0]
 8018938:	b29a      	uxth	r2, r3
 801893a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801893c:	b29b      	uxth	r3, r3
 801893e:	029b      	lsls	r3, r3, #10
 8018940:	b29b      	uxth	r3, r3
 8018942:	4313      	orrs	r3, r2
 8018944:	b29a      	uxth	r2, r3
 8018946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018948:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801894a:	687a      	ldr	r2, [r7, #4]
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	781b      	ldrb	r3, [r3, #0]
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	18d2      	adds	r2, r2, r3
 8018954:	2122      	movs	r1, #34	@ 0x22
 8018956:	187b      	adds	r3, r7, r1
 8018958:	8812      	ldrh	r2, [r2, #0]
 801895a:	801a      	strh	r2, [r3, #0]
 801895c:	187b      	adds	r3, r7, r1
 801895e:	881a      	ldrh	r2, [r3, #0]
 8018960:	2380      	movs	r3, #128	@ 0x80
 8018962:	01db      	lsls	r3, r3, #7
 8018964:	4013      	ands	r3, r2
 8018966:	d016      	beq.n	8018996 <USB_ActivateEndpoint+0x34e>
 8018968:	687a      	ldr	r2, [r7, #4]
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	781b      	ldrb	r3, [r3, #0]
 801896e:	009b      	lsls	r3, r3, #2
 8018970:	18d3      	adds	r3, r2, r3
 8018972:	881b      	ldrh	r3, [r3, #0]
 8018974:	b29a      	uxth	r2, r3
 8018976:	2020      	movs	r0, #32
 8018978:	183b      	adds	r3, r7, r0
 801897a:	49dd      	ldr	r1, [pc, #884]	@ (8018cf0 <USB_ActivateEndpoint+0x6a8>)
 801897c:	400a      	ands	r2, r1
 801897e:	801a      	strh	r2, [r3, #0]
 8018980:	687a      	ldr	r2, [r7, #4]
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	781b      	ldrb	r3, [r3, #0]
 8018986:	009b      	lsls	r3, r3, #2
 8018988:	18d3      	adds	r3, r2, r3
 801898a:	183a      	adds	r2, r7, r0
 801898c:	8812      	ldrh	r2, [r2, #0]
 801898e:	49d9      	ldr	r1, [pc, #868]	@ (8018cf4 <USB_ActivateEndpoint+0x6ac>)
 8018990:	430a      	orrs	r2, r1
 8018992:	b292      	uxth	r2, r2
 8018994:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	781b      	ldrb	r3, [r3, #0]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d125      	bne.n	80189ea <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	009b      	lsls	r3, r3, #2
 80189a6:	18d3      	adds	r3, r2, r3
 80189a8:	881b      	ldrh	r3, [r3, #0]
 80189aa:	b29a      	uxth	r2, r3
 80189ac:	201c      	movs	r0, #28
 80189ae:	183b      	adds	r3, r7, r0
 80189b0:	49d1      	ldr	r1, [pc, #836]	@ (8018cf8 <USB_ActivateEndpoint+0x6b0>)
 80189b2:	400a      	ands	r2, r1
 80189b4:	801a      	strh	r2, [r3, #0]
 80189b6:	183b      	adds	r3, r7, r0
 80189b8:	183a      	adds	r2, r7, r0
 80189ba:	8812      	ldrh	r2, [r2, #0]
 80189bc:	2180      	movs	r1, #128	@ 0x80
 80189be:	0149      	lsls	r1, r1, #5
 80189c0:	404a      	eors	r2, r1
 80189c2:	801a      	strh	r2, [r3, #0]
 80189c4:	183b      	adds	r3, r7, r0
 80189c6:	183a      	adds	r2, r7, r0
 80189c8:	8812      	ldrh	r2, [r2, #0]
 80189ca:	2180      	movs	r1, #128	@ 0x80
 80189cc:	0189      	lsls	r1, r1, #6
 80189ce:	404a      	eors	r2, r1
 80189d0:	801a      	strh	r2, [r3, #0]
 80189d2:	687a      	ldr	r2, [r7, #4]
 80189d4:	683b      	ldr	r3, [r7, #0]
 80189d6:	781b      	ldrb	r3, [r3, #0]
 80189d8:	009b      	lsls	r3, r3, #2
 80189da:	18d3      	adds	r3, r2, r3
 80189dc:	183a      	adds	r2, r7, r0
 80189de:	8812      	ldrh	r2, [r2, #0]
 80189e0:	49c6      	ldr	r1, [pc, #792]	@ (8018cfc <USB_ActivateEndpoint+0x6b4>)
 80189e2:	430a      	orrs	r2, r1
 80189e4:	b292      	uxth	r2, r2
 80189e6:	801a      	strh	r2, [r3, #0]
 80189e8:	e1c2      	b.n	8018d70 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80189ea:	687a      	ldr	r2, [r7, #4]
 80189ec:	683b      	ldr	r3, [r7, #0]
 80189ee:	781b      	ldrb	r3, [r3, #0]
 80189f0:	009b      	lsls	r3, r3, #2
 80189f2:	18d3      	adds	r3, r2, r3
 80189f4:	881b      	ldrh	r3, [r3, #0]
 80189f6:	b29a      	uxth	r2, r3
 80189f8:	201e      	movs	r0, #30
 80189fa:	183b      	adds	r3, r7, r0
 80189fc:	49be      	ldr	r1, [pc, #760]	@ (8018cf8 <USB_ActivateEndpoint+0x6b0>)
 80189fe:	400a      	ands	r2, r1
 8018a00:	801a      	strh	r2, [r3, #0]
 8018a02:	183b      	adds	r3, r7, r0
 8018a04:	183a      	adds	r2, r7, r0
 8018a06:	8812      	ldrh	r2, [r2, #0]
 8018a08:	2180      	movs	r1, #128	@ 0x80
 8018a0a:	0189      	lsls	r1, r1, #6
 8018a0c:	404a      	eors	r2, r1
 8018a0e:	801a      	strh	r2, [r3, #0]
 8018a10:	687a      	ldr	r2, [r7, #4]
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	781b      	ldrb	r3, [r3, #0]
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	18d3      	adds	r3, r2, r3
 8018a1a:	183a      	adds	r2, r7, r0
 8018a1c:	8812      	ldrh	r2, [r2, #0]
 8018a1e:	49b7      	ldr	r1, [pc, #732]	@ (8018cfc <USB_ActivateEndpoint+0x6b4>)
 8018a20:	430a      	orrs	r2, r1
 8018a22:	b292      	uxth	r2, r2
 8018a24:	801a      	strh	r2, [r3, #0]
 8018a26:	e1a3      	b.n	8018d70 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8018a28:	683b      	ldr	r3, [r7, #0]
 8018a2a:	78db      	ldrb	r3, [r3, #3]
 8018a2c:	2b02      	cmp	r3, #2
 8018a2e:	d117      	bne.n	8018a60 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018a30:	687a      	ldr	r2, [r7, #4]
 8018a32:	683b      	ldr	r3, [r7, #0]
 8018a34:	781b      	ldrb	r3, [r3, #0]
 8018a36:	009b      	lsls	r3, r3, #2
 8018a38:	18d3      	adds	r3, r2, r3
 8018a3a:	881b      	ldrh	r3, [r3, #0]
 8018a3c:	b29a      	uxth	r2, r3
 8018a3e:	2062      	movs	r0, #98	@ 0x62
 8018a40:	183b      	adds	r3, r7, r0
 8018a42:	49ab      	ldr	r1, [pc, #684]	@ (8018cf0 <USB_ActivateEndpoint+0x6a8>)
 8018a44:	400a      	ands	r2, r1
 8018a46:	801a      	strh	r2, [r3, #0]
 8018a48:	687a      	ldr	r2, [r7, #4]
 8018a4a:	683b      	ldr	r3, [r7, #0]
 8018a4c:	781b      	ldrb	r3, [r3, #0]
 8018a4e:	009b      	lsls	r3, r3, #2
 8018a50:	18d3      	adds	r3, r2, r3
 8018a52:	183a      	adds	r2, r7, r0
 8018a54:	8812      	ldrh	r2, [r2, #0]
 8018a56:	49aa      	ldr	r1, [pc, #680]	@ (8018d00 <USB_ActivateEndpoint+0x6b8>)
 8018a58:	430a      	orrs	r2, r1
 8018a5a:	b292      	uxth	r2, r2
 8018a5c:	801a      	strh	r2, [r3, #0]
 8018a5e:	e016      	b.n	8018a8e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	683b      	ldr	r3, [r7, #0]
 8018a64:	781b      	ldrb	r3, [r3, #0]
 8018a66:	009b      	lsls	r3, r3, #2
 8018a68:	18d3      	adds	r3, r2, r3
 8018a6a:	881b      	ldrh	r3, [r3, #0]
 8018a6c:	b29a      	uxth	r2, r3
 8018a6e:	2064      	movs	r0, #100	@ 0x64
 8018a70:	183b      	adds	r3, r7, r0
 8018a72:	49a4      	ldr	r1, [pc, #656]	@ (8018d04 <USB_ActivateEndpoint+0x6bc>)
 8018a74:	400a      	ands	r2, r1
 8018a76:	801a      	strh	r2, [r3, #0]
 8018a78:	687a      	ldr	r2, [r7, #4]
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	009b      	lsls	r3, r3, #2
 8018a80:	18d3      	adds	r3, r2, r3
 8018a82:	183a      	adds	r2, r7, r0
 8018a84:	8812      	ldrh	r2, [r2, #0]
 8018a86:	499d      	ldr	r1, [pc, #628]	@ (8018cfc <USB_ActivateEndpoint+0x6b4>)
 8018a88:	430a      	orrs	r2, r1
 8018a8a:	b292      	uxth	r2, r2
 8018a8c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	2250      	movs	r2, #80	@ 0x50
 8018a96:	5a9b      	ldrh	r3, [r3, r2]
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	001a      	movs	r2, r3
 8018a9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a9e:	189b      	adds	r3, r3, r2
 8018aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	00da      	lsls	r2, r3, #3
 8018aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018aaa:	18d3      	adds	r3, r2, r3
 8018aac:	2280      	movs	r2, #128	@ 0x80
 8018aae:	00d2      	lsls	r2, r2, #3
 8018ab0:	4694      	mov	ip, r2
 8018ab2:	4463      	add	r3, ip
 8018ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018ab6:	683b      	ldr	r3, [r7, #0]
 8018ab8:	891b      	ldrh	r3, [r3, #8]
 8018aba:	085b      	lsrs	r3, r3, #1
 8018abc:	b29b      	uxth	r3, r3
 8018abe:	18db      	adds	r3, r3, r3
 8018ac0:	b29a      	uxth	r2, r3
 8018ac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018ac4:	801a      	strh	r2, [r3, #0]
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	2250      	movs	r2, #80	@ 0x50
 8018ace:	5a9b      	ldrh	r3, [r3, r2]
 8018ad0:	b29b      	uxth	r3, r3
 8018ad2:	001a      	movs	r2, r3
 8018ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ad6:	189b      	adds	r3, r3, r2
 8018ad8:	657b      	str	r3, [r7, #84]	@ 0x54
 8018ada:	683b      	ldr	r3, [r7, #0]
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	00da      	lsls	r2, r3, #3
 8018ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ae2:	18d3      	adds	r3, r2, r3
 8018ae4:	4a88      	ldr	r2, [pc, #544]	@ (8018d08 <USB_ActivateEndpoint+0x6c0>)
 8018ae6:	4694      	mov	ip, r2
 8018ae8:	4463      	add	r3, ip
 8018aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	895b      	ldrh	r3, [r3, #10]
 8018af0:	085b      	lsrs	r3, r3, #1
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	18db      	adds	r3, r3, r3
 8018af6:	b29a      	uxth	r2, r3
 8018af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018afa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	785b      	ldrb	r3, [r3, #1]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d000      	beq.n	8018b06 <USB_ActivateEndpoint+0x4be>
 8018b04:	e087      	b.n	8018c16 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018b06:	687a      	ldr	r2, [r7, #4]
 8018b08:	683b      	ldr	r3, [r7, #0]
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	009b      	lsls	r3, r3, #2
 8018b0e:	18d2      	adds	r2, r2, r3
 8018b10:	2140      	movs	r1, #64	@ 0x40
 8018b12:	187b      	adds	r3, r7, r1
 8018b14:	8812      	ldrh	r2, [r2, #0]
 8018b16:	801a      	strh	r2, [r3, #0]
 8018b18:	187b      	adds	r3, r7, r1
 8018b1a:	881a      	ldrh	r2, [r3, #0]
 8018b1c:	2380      	movs	r3, #128	@ 0x80
 8018b1e:	01db      	lsls	r3, r3, #7
 8018b20:	4013      	ands	r3, r2
 8018b22:	d016      	beq.n	8018b52 <USB_ActivateEndpoint+0x50a>
 8018b24:	687a      	ldr	r2, [r7, #4]
 8018b26:	683b      	ldr	r3, [r7, #0]
 8018b28:	781b      	ldrb	r3, [r3, #0]
 8018b2a:	009b      	lsls	r3, r3, #2
 8018b2c:	18d3      	adds	r3, r2, r3
 8018b2e:	881b      	ldrh	r3, [r3, #0]
 8018b30:	b29a      	uxth	r2, r3
 8018b32:	203e      	movs	r0, #62	@ 0x3e
 8018b34:	183b      	adds	r3, r7, r0
 8018b36:	496e      	ldr	r1, [pc, #440]	@ (8018cf0 <USB_ActivateEndpoint+0x6a8>)
 8018b38:	400a      	ands	r2, r1
 8018b3a:	801a      	strh	r2, [r3, #0]
 8018b3c:	687a      	ldr	r2, [r7, #4]
 8018b3e:	683b      	ldr	r3, [r7, #0]
 8018b40:	781b      	ldrb	r3, [r3, #0]
 8018b42:	009b      	lsls	r3, r3, #2
 8018b44:	18d3      	adds	r3, r2, r3
 8018b46:	183a      	adds	r2, r7, r0
 8018b48:	8812      	ldrh	r2, [r2, #0]
 8018b4a:	496a      	ldr	r1, [pc, #424]	@ (8018cf4 <USB_ActivateEndpoint+0x6ac>)
 8018b4c:	430a      	orrs	r2, r1
 8018b4e:	b292      	uxth	r2, r2
 8018b50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018b52:	687a      	ldr	r2, [r7, #4]
 8018b54:	683b      	ldr	r3, [r7, #0]
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	009b      	lsls	r3, r3, #2
 8018b5a:	18d2      	adds	r2, r2, r3
 8018b5c:	213c      	movs	r1, #60	@ 0x3c
 8018b5e:	187b      	adds	r3, r7, r1
 8018b60:	8812      	ldrh	r2, [r2, #0]
 8018b62:	801a      	strh	r2, [r3, #0]
 8018b64:	187b      	adds	r3, r7, r1
 8018b66:	881b      	ldrh	r3, [r3, #0]
 8018b68:	2240      	movs	r2, #64	@ 0x40
 8018b6a:	4013      	ands	r3, r2
 8018b6c:	d016      	beq.n	8018b9c <USB_ActivateEndpoint+0x554>
 8018b6e:	687a      	ldr	r2, [r7, #4]
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	781b      	ldrb	r3, [r3, #0]
 8018b74:	009b      	lsls	r3, r3, #2
 8018b76:	18d3      	adds	r3, r2, r3
 8018b78:	881b      	ldrh	r3, [r3, #0]
 8018b7a:	b29a      	uxth	r2, r3
 8018b7c:	203a      	movs	r0, #58	@ 0x3a
 8018b7e:	183b      	adds	r3, r7, r0
 8018b80:	495b      	ldr	r1, [pc, #364]	@ (8018cf0 <USB_ActivateEndpoint+0x6a8>)
 8018b82:	400a      	ands	r2, r1
 8018b84:	801a      	strh	r2, [r3, #0]
 8018b86:	687a      	ldr	r2, [r7, #4]
 8018b88:	683b      	ldr	r3, [r7, #0]
 8018b8a:	781b      	ldrb	r3, [r3, #0]
 8018b8c:	009b      	lsls	r3, r3, #2
 8018b8e:	18d3      	adds	r3, r2, r3
 8018b90:	183a      	adds	r2, r7, r0
 8018b92:	8812      	ldrh	r2, [r2, #0]
 8018b94:	495d      	ldr	r1, [pc, #372]	@ (8018d0c <USB_ActivateEndpoint+0x6c4>)
 8018b96:	430a      	orrs	r2, r1
 8018b98:	b292      	uxth	r2, r2
 8018b9a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018b9c:	687a      	ldr	r2, [r7, #4]
 8018b9e:	683b      	ldr	r3, [r7, #0]
 8018ba0:	781b      	ldrb	r3, [r3, #0]
 8018ba2:	009b      	lsls	r3, r3, #2
 8018ba4:	18d3      	adds	r3, r2, r3
 8018ba6:	881b      	ldrh	r3, [r3, #0]
 8018ba8:	b29a      	uxth	r2, r3
 8018baa:	2038      	movs	r0, #56	@ 0x38
 8018bac:	183b      	adds	r3, r7, r0
 8018bae:	4952      	ldr	r1, [pc, #328]	@ (8018cf8 <USB_ActivateEndpoint+0x6b0>)
 8018bb0:	400a      	ands	r2, r1
 8018bb2:	801a      	strh	r2, [r3, #0]
 8018bb4:	183b      	adds	r3, r7, r0
 8018bb6:	183a      	adds	r2, r7, r0
 8018bb8:	8812      	ldrh	r2, [r2, #0]
 8018bba:	2180      	movs	r1, #128	@ 0x80
 8018bbc:	0149      	lsls	r1, r1, #5
 8018bbe:	404a      	eors	r2, r1
 8018bc0:	801a      	strh	r2, [r3, #0]
 8018bc2:	183b      	adds	r3, r7, r0
 8018bc4:	183a      	adds	r2, r7, r0
 8018bc6:	8812      	ldrh	r2, [r2, #0]
 8018bc8:	2180      	movs	r1, #128	@ 0x80
 8018bca:	0189      	lsls	r1, r1, #6
 8018bcc:	404a      	eors	r2, r1
 8018bce:	801a      	strh	r2, [r3, #0]
 8018bd0:	687a      	ldr	r2, [r7, #4]
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	781b      	ldrb	r3, [r3, #0]
 8018bd6:	009b      	lsls	r3, r3, #2
 8018bd8:	18d3      	adds	r3, r2, r3
 8018bda:	183a      	adds	r2, r7, r0
 8018bdc:	8812      	ldrh	r2, [r2, #0]
 8018bde:	4947      	ldr	r1, [pc, #284]	@ (8018cfc <USB_ActivateEndpoint+0x6b4>)
 8018be0:	430a      	orrs	r2, r1
 8018be2:	b292      	uxth	r2, r2
 8018be4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018be6:	687a      	ldr	r2, [r7, #4]
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	781b      	ldrb	r3, [r3, #0]
 8018bec:	009b      	lsls	r3, r3, #2
 8018bee:	18d3      	adds	r3, r2, r3
 8018bf0:	881b      	ldrh	r3, [r3, #0]
 8018bf2:	b29a      	uxth	r2, r3
 8018bf4:	2036      	movs	r0, #54	@ 0x36
 8018bf6:	183b      	adds	r3, r7, r0
 8018bf8:	4945      	ldr	r1, [pc, #276]	@ (8018d10 <USB_ActivateEndpoint+0x6c8>)
 8018bfa:	400a      	ands	r2, r1
 8018bfc:	801a      	strh	r2, [r3, #0]
 8018bfe:	687a      	ldr	r2, [r7, #4]
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	781b      	ldrb	r3, [r3, #0]
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	18d3      	adds	r3, r2, r3
 8018c08:	183a      	adds	r2, r7, r0
 8018c0a:	8812      	ldrh	r2, [r2, #0]
 8018c0c:	493b      	ldr	r1, [pc, #236]	@ (8018cfc <USB_ActivateEndpoint+0x6b4>)
 8018c0e:	430a      	orrs	r2, r1
 8018c10:	b292      	uxth	r2, r2
 8018c12:	801a      	strh	r2, [r3, #0]
 8018c14:	e0ac      	b.n	8018d70 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018c16:	687a      	ldr	r2, [r7, #4]
 8018c18:	683b      	ldr	r3, [r7, #0]
 8018c1a:	781b      	ldrb	r3, [r3, #0]
 8018c1c:	009b      	lsls	r3, r3, #2
 8018c1e:	18d2      	adds	r2, r2, r3
 8018c20:	214e      	movs	r1, #78	@ 0x4e
 8018c22:	187b      	adds	r3, r7, r1
 8018c24:	8812      	ldrh	r2, [r2, #0]
 8018c26:	801a      	strh	r2, [r3, #0]
 8018c28:	187b      	adds	r3, r7, r1
 8018c2a:	881a      	ldrh	r2, [r3, #0]
 8018c2c:	2380      	movs	r3, #128	@ 0x80
 8018c2e:	01db      	lsls	r3, r3, #7
 8018c30:	4013      	ands	r3, r2
 8018c32:	d016      	beq.n	8018c62 <USB_ActivateEndpoint+0x61a>
 8018c34:	687a      	ldr	r2, [r7, #4]
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	781b      	ldrb	r3, [r3, #0]
 8018c3a:	009b      	lsls	r3, r3, #2
 8018c3c:	18d3      	adds	r3, r2, r3
 8018c3e:	881b      	ldrh	r3, [r3, #0]
 8018c40:	b29a      	uxth	r2, r3
 8018c42:	204c      	movs	r0, #76	@ 0x4c
 8018c44:	183b      	adds	r3, r7, r0
 8018c46:	492a      	ldr	r1, [pc, #168]	@ (8018cf0 <USB_ActivateEndpoint+0x6a8>)
 8018c48:	400a      	ands	r2, r1
 8018c4a:	801a      	strh	r2, [r3, #0]
 8018c4c:	687a      	ldr	r2, [r7, #4]
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	781b      	ldrb	r3, [r3, #0]
 8018c52:	009b      	lsls	r3, r3, #2
 8018c54:	18d3      	adds	r3, r2, r3
 8018c56:	183a      	adds	r2, r7, r0
 8018c58:	8812      	ldrh	r2, [r2, #0]
 8018c5a:	4926      	ldr	r1, [pc, #152]	@ (8018cf4 <USB_ActivateEndpoint+0x6ac>)
 8018c5c:	430a      	orrs	r2, r1
 8018c5e:	b292      	uxth	r2, r2
 8018c60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018c62:	687a      	ldr	r2, [r7, #4]
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	009b      	lsls	r3, r3, #2
 8018c6a:	18d2      	adds	r2, r2, r3
 8018c6c:	214a      	movs	r1, #74	@ 0x4a
 8018c6e:	187b      	adds	r3, r7, r1
 8018c70:	8812      	ldrh	r2, [r2, #0]
 8018c72:	801a      	strh	r2, [r3, #0]
 8018c74:	187b      	adds	r3, r7, r1
 8018c76:	881b      	ldrh	r3, [r3, #0]
 8018c78:	2240      	movs	r2, #64	@ 0x40
 8018c7a:	4013      	ands	r3, r2
 8018c7c:	d016      	beq.n	8018cac <USB_ActivateEndpoint+0x664>
 8018c7e:	687a      	ldr	r2, [r7, #4]
 8018c80:	683b      	ldr	r3, [r7, #0]
 8018c82:	781b      	ldrb	r3, [r3, #0]
 8018c84:	009b      	lsls	r3, r3, #2
 8018c86:	18d3      	adds	r3, r2, r3
 8018c88:	881b      	ldrh	r3, [r3, #0]
 8018c8a:	b29a      	uxth	r2, r3
 8018c8c:	2048      	movs	r0, #72	@ 0x48
 8018c8e:	183b      	adds	r3, r7, r0
 8018c90:	4917      	ldr	r1, [pc, #92]	@ (8018cf0 <USB_ActivateEndpoint+0x6a8>)
 8018c92:	400a      	ands	r2, r1
 8018c94:	801a      	strh	r2, [r3, #0]
 8018c96:	687a      	ldr	r2, [r7, #4]
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	009b      	lsls	r3, r3, #2
 8018c9e:	18d3      	adds	r3, r2, r3
 8018ca0:	183a      	adds	r2, r7, r0
 8018ca2:	8812      	ldrh	r2, [r2, #0]
 8018ca4:	4919      	ldr	r1, [pc, #100]	@ (8018d0c <USB_ActivateEndpoint+0x6c4>)
 8018ca6:	430a      	orrs	r2, r1
 8018ca8:	b292      	uxth	r2, r2
 8018caa:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	78db      	ldrb	r3, [r3, #3]
 8018cb0:	2b01      	cmp	r3, #1
 8018cb2:	d02f      	beq.n	8018d14 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018cb4:	687a      	ldr	r2, [r7, #4]
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	781b      	ldrb	r3, [r3, #0]
 8018cba:	009b      	lsls	r3, r3, #2
 8018cbc:	18d3      	adds	r3, r2, r3
 8018cbe:	881b      	ldrh	r3, [r3, #0]
 8018cc0:	b29a      	uxth	r2, r3
 8018cc2:	2044      	movs	r0, #68	@ 0x44
 8018cc4:	183b      	adds	r3, r7, r0
 8018cc6:	4912      	ldr	r1, [pc, #72]	@ (8018d10 <USB_ActivateEndpoint+0x6c8>)
 8018cc8:	400a      	ands	r2, r1
 8018cca:	801a      	strh	r2, [r3, #0]
 8018ccc:	183b      	adds	r3, r7, r0
 8018cce:	183a      	adds	r2, r7, r0
 8018cd0:	8812      	ldrh	r2, [r2, #0]
 8018cd2:	2120      	movs	r1, #32
 8018cd4:	404a      	eors	r2, r1
 8018cd6:	801a      	strh	r2, [r3, #0]
 8018cd8:	687a      	ldr	r2, [r7, #4]
 8018cda:	683b      	ldr	r3, [r7, #0]
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	009b      	lsls	r3, r3, #2
 8018ce0:	18d3      	adds	r3, r2, r3
 8018ce2:	183a      	adds	r2, r7, r0
 8018ce4:	8812      	ldrh	r2, [r2, #0]
 8018ce6:	4905      	ldr	r1, [pc, #20]	@ (8018cfc <USB_ActivateEndpoint+0x6b4>)
 8018ce8:	430a      	orrs	r2, r1
 8018cea:	b292      	uxth	r2, r2
 8018cec:	801a      	strh	r2, [r3, #0]
 8018cee:	e028      	b.n	8018d42 <USB_ActivateEndpoint+0x6fa>
 8018cf0:	ffff8f8f 	.word	0xffff8f8f
 8018cf4:	ffffc080 	.word	0xffffc080
 8018cf8:	ffffbf8f 	.word	0xffffbf8f
 8018cfc:	ffff8080 	.word	0xffff8080
 8018d00:	ffff8180 	.word	0xffff8180
 8018d04:	ffff8e8f 	.word	0xffff8e8f
 8018d08:	00000404 	.word	0x00000404
 8018d0c:	ffff80c0 	.word	0xffff80c0
 8018d10:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018d14:	687a      	ldr	r2, [r7, #4]
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	009b      	lsls	r3, r3, #2
 8018d1c:	18d3      	adds	r3, r2, r3
 8018d1e:	881b      	ldrh	r3, [r3, #0]
 8018d20:	b29a      	uxth	r2, r3
 8018d22:	2046      	movs	r0, #70	@ 0x46
 8018d24:	183b      	adds	r3, r7, r0
 8018d26:	4916      	ldr	r1, [pc, #88]	@ (8018d80 <USB_ActivateEndpoint+0x738>)
 8018d28:	400a      	ands	r2, r1
 8018d2a:	801a      	strh	r2, [r3, #0]
 8018d2c:	687a      	ldr	r2, [r7, #4]
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	18d3      	adds	r3, r2, r3
 8018d36:	183a      	adds	r2, r7, r0
 8018d38:	8812      	ldrh	r2, [r2, #0]
 8018d3a:	4912      	ldr	r1, [pc, #72]	@ (8018d84 <USB_ActivateEndpoint+0x73c>)
 8018d3c:	430a      	orrs	r2, r1
 8018d3e:	b292      	uxth	r2, r2
 8018d40:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	781b      	ldrb	r3, [r3, #0]
 8018d48:	009b      	lsls	r3, r3, #2
 8018d4a:	18d3      	adds	r3, r2, r3
 8018d4c:	881b      	ldrh	r3, [r3, #0]
 8018d4e:	b29a      	uxth	r2, r3
 8018d50:	2042      	movs	r0, #66	@ 0x42
 8018d52:	183b      	adds	r3, r7, r0
 8018d54:	490c      	ldr	r1, [pc, #48]	@ (8018d88 <USB_ActivateEndpoint+0x740>)
 8018d56:	400a      	ands	r2, r1
 8018d58:	801a      	strh	r2, [r3, #0]
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	683b      	ldr	r3, [r7, #0]
 8018d5e:	781b      	ldrb	r3, [r3, #0]
 8018d60:	009b      	lsls	r3, r3, #2
 8018d62:	18d3      	adds	r3, r2, r3
 8018d64:	183a      	adds	r2, r7, r0
 8018d66:	8812      	ldrh	r2, [r2, #0]
 8018d68:	4906      	ldr	r1, [pc, #24]	@ (8018d84 <USB_ActivateEndpoint+0x73c>)
 8018d6a:	430a      	orrs	r2, r1
 8018d6c:	b292      	uxth	r2, r2
 8018d6e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018d70:	236f      	movs	r3, #111	@ 0x6f
 8018d72:	18fb      	adds	r3, r7, r3
 8018d74:	781b      	ldrb	r3, [r3, #0]
}
 8018d76:	0018      	movs	r0, r3
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	b01c      	add	sp, #112	@ 0x70
 8018d7c:	bd80      	pop	{r7, pc}
 8018d7e:	46c0      	nop			@ (mov r8, r8)
 8018d80:	ffff8fbf 	.word	0xffff8fbf
 8018d84:	ffff8080 	.word	0xffff8080
 8018d88:	ffffbf8f 	.word	0xffffbf8f

08018d8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b08c      	sub	sp, #48	@ 0x30
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	7b1b      	ldrb	r3, [r3, #12]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d000      	beq.n	8018da0 <USB_DeactivateEndpoint+0x14>
 8018d9e:	e07e      	b.n	8018e9e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	785b      	ldrb	r3, [r3, #1]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d03c      	beq.n	8018e22 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018da8:	687a      	ldr	r2, [r7, #4]
 8018daa:	683b      	ldr	r3, [r7, #0]
 8018dac:	781b      	ldrb	r3, [r3, #0]
 8018dae:	009b      	lsls	r3, r3, #2
 8018db0:	18d2      	adds	r2, r2, r3
 8018db2:	210c      	movs	r1, #12
 8018db4:	187b      	adds	r3, r7, r1
 8018db6:	8812      	ldrh	r2, [r2, #0]
 8018db8:	801a      	strh	r2, [r3, #0]
 8018dba:	187b      	adds	r3, r7, r1
 8018dbc:	881b      	ldrh	r3, [r3, #0]
 8018dbe:	2240      	movs	r2, #64	@ 0x40
 8018dc0:	4013      	ands	r3, r2
 8018dc2:	d016      	beq.n	8018df2 <USB_DeactivateEndpoint+0x66>
 8018dc4:	687a      	ldr	r2, [r7, #4]
 8018dc6:	683b      	ldr	r3, [r7, #0]
 8018dc8:	781b      	ldrb	r3, [r3, #0]
 8018dca:	009b      	lsls	r3, r3, #2
 8018dcc:	18d3      	adds	r3, r2, r3
 8018dce:	881b      	ldrh	r3, [r3, #0]
 8018dd0:	b29a      	uxth	r2, r3
 8018dd2:	200a      	movs	r0, #10
 8018dd4:	183b      	adds	r3, r7, r0
 8018dd6:	49c7      	ldr	r1, [pc, #796]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8018dd8:	400a      	ands	r2, r1
 8018dda:	801a      	strh	r2, [r3, #0]
 8018ddc:	687a      	ldr	r2, [r7, #4]
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	781b      	ldrb	r3, [r3, #0]
 8018de2:	009b      	lsls	r3, r3, #2
 8018de4:	18d3      	adds	r3, r2, r3
 8018de6:	183a      	adds	r2, r7, r0
 8018de8:	8812      	ldrh	r2, [r2, #0]
 8018dea:	49c3      	ldr	r1, [pc, #780]	@ (80190f8 <USB_DeactivateEndpoint+0x36c>)
 8018dec:	430a      	orrs	r2, r1
 8018dee:	b292      	uxth	r2, r2
 8018df0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018df2:	687a      	ldr	r2, [r7, #4]
 8018df4:	683b      	ldr	r3, [r7, #0]
 8018df6:	781b      	ldrb	r3, [r3, #0]
 8018df8:	009b      	lsls	r3, r3, #2
 8018dfa:	18d3      	adds	r3, r2, r3
 8018dfc:	881b      	ldrh	r3, [r3, #0]
 8018dfe:	b29a      	uxth	r2, r3
 8018e00:	2008      	movs	r0, #8
 8018e02:	183b      	adds	r3, r7, r0
 8018e04:	49bd      	ldr	r1, [pc, #756]	@ (80190fc <USB_DeactivateEndpoint+0x370>)
 8018e06:	400a      	ands	r2, r1
 8018e08:	801a      	strh	r2, [r3, #0]
 8018e0a:	687a      	ldr	r2, [r7, #4]
 8018e0c:	683b      	ldr	r3, [r7, #0]
 8018e0e:	781b      	ldrb	r3, [r3, #0]
 8018e10:	009b      	lsls	r3, r3, #2
 8018e12:	18d3      	adds	r3, r2, r3
 8018e14:	183a      	adds	r2, r7, r0
 8018e16:	8812      	ldrh	r2, [r2, #0]
 8018e18:	49b9      	ldr	r1, [pc, #740]	@ (8019100 <USB_DeactivateEndpoint+0x374>)
 8018e1a:	430a      	orrs	r2, r1
 8018e1c:	b292      	uxth	r2, r2
 8018e1e:	801a      	strh	r2, [r3, #0]
 8018e20:	e163      	b.n	80190ea <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018e22:	687a      	ldr	r2, [r7, #4]
 8018e24:	683b      	ldr	r3, [r7, #0]
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	009b      	lsls	r3, r3, #2
 8018e2a:	18d2      	adds	r2, r2, r3
 8018e2c:	2112      	movs	r1, #18
 8018e2e:	187b      	adds	r3, r7, r1
 8018e30:	8812      	ldrh	r2, [r2, #0]
 8018e32:	801a      	strh	r2, [r3, #0]
 8018e34:	187b      	adds	r3, r7, r1
 8018e36:	881a      	ldrh	r2, [r3, #0]
 8018e38:	2380      	movs	r3, #128	@ 0x80
 8018e3a:	01db      	lsls	r3, r3, #7
 8018e3c:	4013      	ands	r3, r2
 8018e3e:	d016      	beq.n	8018e6e <USB_DeactivateEndpoint+0xe2>
 8018e40:	687a      	ldr	r2, [r7, #4]
 8018e42:	683b      	ldr	r3, [r7, #0]
 8018e44:	781b      	ldrb	r3, [r3, #0]
 8018e46:	009b      	lsls	r3, r3, #2
 8018e48:	18d3      	adds	r3, r2, r3
 8018e4a:	881b      	ldrh	r3, [r3, #0]
 8018e4c:	b29a      	uxth	r2, r3
 8018e4e:	2010      	movs	r0, #16
 8018e50:	183b      	adds	r3, r7, r0
 8018e52:	49a8      	ldr	r1, [pc, #672]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8018e54:	400a      	ands	r2, r1
 8018e56:	801a      	strh	r2, [r3, #0]
 8018e58:	687a      	ldr	r2, [r7, #4]
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	781b      	ldrb	r3, [r3, #0]
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	18d3      	adds	r3, r2, r3
 8018e62:	183a      	adds	r2, r7, r0
 8018e64:	8812      	ldrh	r2, [r2, #0]
 8018e66:	49a7      	ldr	r1, [pc, #668]	@ (8019104 <USB_DeactivateEndpoint+0x378>)
 8018e68:	430a      	orrs	r2, r1
 8018e6a:	b292      	uxth	r2, r2
 8018e6c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018e6e:	687a      	ldr	r2, [r7, #4]
 8018e70:	683b      	ldr	r3, [r7, #0]
 8018e72:	781b      	ldrb	r3, [r3, #0]
 8018e74:	009b      	lsls	r3, r3, #2
 8018e76:	18d3      	adds	r3, r2, r3
 8018e78:	881b      	ldrh	r3, [r3, #0]
 8018e7a:	b29a      	uxth	r2, r3
 8018e7c:	200e      	movs	r0, #14
 8018e7e:	183b      	adds	r3, r7, r0
 8018e80:	49a1      	ldr	r1, [pc, #644]	@ (8019108 <USB_DeactivateEndpoint+0x37c>)
 8018e82:	400a      	ands	r2, r1
 8018e84:	801a      	strh	r2, [r3, #0]
 8018e86:	687a      	ldr	r2, [r7, #4]
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	781b      	ldrb	r3, [r3, #0]
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	18d3      	adds	r3, r2, r3
 8018e90:	183a      	adds	r2, r7, r0
 8018e92:	8812      	ldrh	r2, [r2, #0]
 8018e94:	499a      	ldr	r1, [pc, #616]	@ (8019100 <USB_DeactivateEndpoint+0x374>)
 8018e96:	430a      	orrs	r2, r1
 8018e98:	b292      	uxth	r2, r2
 8018e9a:	801a      	strh	r2, [r3, #0]
 8018e9c:	e125      	b.n	80190ea <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8018e9e:	683b      	ldr	r3, [r7, #0]
 8018ea0:	785b      	ldrb	r3, [r3, #1]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d000      	beq.n	8018ea8 <USB_DeactivateEndpoint+0x11c>
 8018ea6:	e090      	b.n	8018fca <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018ea8:	687a      	ldr	r2, [r7, #4]
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	781b      	ldrb	r3, [r3, #0]
 8018eae:	009b      	lsls	r3, r3, #2
 8018eb0:	18d2      	adds	r2, r2, r3
 8018eb2:	2120      	movs	r1, #32
 8018eb4:	187b      	adds	r3, r7, r1
 8018eb6:	8812      	ldrh	r2, [r2, #0]
 8018eb8:	801a      	strh	r2, [r3, #0]
 8018eba:	187b      	adds	r3, r7, r1
 8018ebc:	881a      	ldrh	r2, [r3, #0]
 8018ebe:	2380      	movs	r3, #128	@ 0x80
 8018ec0:	01db      	lsls	r3, r3, #7
 8018ec2:	4013      	ands	r3, r2
 8018ec4:	d016      	beq.n	8018ef4 <USB_DeactivateEndpoint+0x168>
 8018ec6:	687a      	ldr	r2, [r7, #4]
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	781b      	ldrb	r3, [r3, #0]
 8018ecc:	009b      	lsls	r3, r3, #2
 8018ece:	18d3      	adds	r3, r2, r3
 8018ed0:	881b      	ldrh	r3, [r3, #0]
 8018ed2:	b29a      	uxth	r2, r3
 8018ed4:	201e      	movs	r0, #30
 8018ed6:	183b      	adds	r3, r7, r0
 8018ed8:	4986      	ldr	r1, [pc, #536]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8018eda:	400a      	ands	r2, r1
 8018edc:	801a      	strh	r2, [r3, #0]
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	683b      	ldr	r3, [r7, #0]
 8018ee2:	781b      	ldrb	r3, [r3, #0]
 8018ee4:	009b      	lsls	r3, r3, #2
 8018ee6:	18d3      	adds	r3, r2, r3
 8018ee8:	183a      	adds	r2, r7, r0
 8018eea:	8812      	ldrh	r2, [r2, #0]
 8018eec:	4985      	ldr	r1, [pc, #532]	@ (8019104 <USB_DeactivateEndpoint+0x378>)
 8018eee:	430a      	orrs	r2, r1
 8018ef0:	b292      	uxth	r2, r2
 8018ef2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018ef4:	687a      	ldr	r2, [r7, #4]
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	781b      	ldrb	r3, [r3, #0]
 8018efa:	009b      	lsls	r3, r3, #2
 8018efc:	18d2      	adds	r2, r2, r3
 8018efe:	211c      	movs	r1, #28
 8018f00:	187b      	adds	r3, r7, r1
 8018f02:	8812      	ldrh	r2, [r2, #0]
 8018f04:	801a      	strh	r2, [r3, #0]
 8018f06:	187b      	adds	r3, r7, r1
 8018f08:	881b      	ldrh	r3, [r3, #0]
 8018f0a:	2240      	movs	r2, #64	@ 0x40
 8018f0c:	4013      	ands	r3, r2
 8018f0e:	d016      	beq.n	8018f3e <USB_DeactivateEndpoint+0x1b2>
 8018f10:	687a      	ldr	r2, [r7, #4]
 8018f12:	683b      	ldr	r3, [r7, #0]
 8018f14:	781b      	ldrb	r3, [r3, #0]
 8018f16:	009b      	lsls	r3, r3, #2
 8018f18:	18d3      	adds	r3, r2, r3
 8018f1a:	881b      	ldrh	r3, [r3, #0]
 8018f1c:	b29a      	uxth	r2, r3
 8018f1e:	201a      	movs	r0, #26
 8018f20:	183b      	adds	r3, r7, r0
 8018f22:	4974      	ldr	r1, [pc, #464]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8018f24:	400a      	ands	r2, r1
 8018f26:	801a      	strh	r2, [r3, #0]
 8018f28:	687a      	ldr	r2, [r7, #4]
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	781b      	ldrb	r3, [r3, #0]
 8018f2e:	009b      	lsls	r3, r3, #2
 8018f30:	18d3      	adds	r3, r2, r3
 8018f32:	183a      	adds	r2, r7, r0
 8018f34:	8812      	ldrh	r2, [r2, #0]
 8018f36:	4970      	ldr	r1, [pc, #448]	@ (80190f8 <USB_DeactivateEndpoint+0x36c>)
 8018f38:	430a      	orrs	r2, r1
 8018f3a:	b292      	uxth	r2, r2
 8018f3c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	781b      	ldrb	r3, [r3, #0]
 8018f44:	009b      	lsls	r3, r3, #2
 8018f46:	18d3      	adds	r3, r2, r3
 8018f48:	881b      	ldrh	r3, [r3, #0]
 8018f4a:	b29a      	uxth	r2, r3
 8018f4c:	2018      	movs	r0, #24
 8018f4e:	183b      	adds	r3, r7, r0
 8018f50:	4968      	ldr	r1, [pc, #416]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8018f52:	400a      	ands	r2, r1
 8018f54:	801a      	strh	r2, [r3, #0]
 8018f56:	687a      	ldr	r2, [r7, #4]
 8018f58:	683b      	ldr	r3, [r7, #0]
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	009b      	lsls	r3, r3, #2
 8018f5e:	18d3      	adds	r3, r2, r3
 8018f60:	183a      	adds	r2, r7, r0
 8018f62:	8812      	ldrh	r2, [r2, #0]
 8018f64:	4964      	ldr	r1, [pc, #400]	@ (80190f8 <USB_DeactivateEndpoint+0x36c>)
 8018f66:	430a      	orrs	r2, r1
 8018f68:	b292      	uxth	r2, r2
 8018f6a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018f6c:	687a      	ldr	r2, [r7, #4]
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	009b      	lsls	r3, r3, #2
 8018f74:	18d3      	adds	r3, r2, r3
 8018f76:	881b      	ldrh	r3, [r3, #0]
 8018f78:	b29a      	uxth	r2, r3
 8018f7a:	2016      	movs	r0, #22
 8018f7c:	183b      	adds	r3, r7, r0
 8018f7e:	4962      	ldr	r1, [pc, #392]	@ (8019108 <USB_DeactivateEndpoint+0x37c>)
 8018f80:	400a      	ands	r2, r1
 8018f82:	801a      	strh	r2, [r3, #0]
 8018f84:	687a      	ldr	r2, [r7, #4]
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	009b      	lsls	r3, r3, #2
 8018f8c:	18d3      	adds	r3, r2, r3
 8018f8e:	183a      	adds	r2, r7, r0
 8018f90:	8812      	ldrh	r2, [r2, #0]
 8018f92:	495b      	ldr	r1, [pc, #364]	@ (8019100 <USB_DeactivateEndpoint+0x374>)
 8018f94:	430a      	orrs	r2, r1
 8018f96:	b292      	uxth	r2, r2
 8018f98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018f9a:	687a      	ldr	r2, [r7, #4]
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	781b      	ldrb	r3, [r3, #0]
 8018fa0:	009b      	lsls	r3, r3, #2
 8018fa2:	18d3      	adds	r3, r2, r3
 8018fa4:	881b      	ldrh	r3, [r3, #0]
 8018fa6:	b29a      	uxth	r2, r3
 8018fa8:	2014      	movs	r0, #20
 8018faa:	183b      	adds	r3, r7, r0
 8018fac:	4953      	ldr	r1, [pc, #332]	@ (80190fc <USB_DeactivateEndpoint+0x370>)
 8018fae:	400a      	ands	r2, r1
 8018fb0:	801a      	strh	r2, [r3, #0]
 8018fb2:	687a      	ldr	r2, [r7, #4]
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	781b      	ldrb	r3, [r3, #0]
 8018fb8:	009b      	lsls	r3, r3, #2
 8018fba:	18d3      	adds	r3, r2, r3
 8018fbc:	183a      	adds	r2, r7, r0
 8018fbe:	8812      	ldrh	r2, [r2, #0]
 8018fc0:	494f      	ldr	r1, [pc, #316]	@ (8019100 <USB_DeactivateEndpoint+0x374>)
 8018fc2:	430a      	orrs	r2, r1
 8018fc4:	b292      	uxth	r2, r2
 8018fc6:	801a      	strh	r2, [r3, #0]
 8018fc8:	e08f      	b.n	80190ea <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018fca:	687a      	ldr	r2, [r7, #4]
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	781b      	ldrb	r3, [r3, #0]
 8018fd0:	009b      	lsls	r3, r3, #2
 8018fd2:	18d2      	adds	r2, r2, r3
 8018fd4:	212e      	movs	r1, #46	@ 0x2e
 8018fd6:	187b      	adds	r3, r7, r1
 8018fd8:	8812      	ldrh	r2, [r2, #0]
 8018fda:	801a      	strh	r2, [r3, #0]
 8018fdc:	187b      	adds	r3, r7, r1
 8018fde:	881a      	ldrh	r2, [r3, #0]
 8018fe0:	2380      	movs	r3, #128	@ 0x80
 8018fe2:	01db      	lsls	r3, r3, #7
 8018fe4:	4013      	ands	r3, r2
 8018fe6:	d016      	beq.n	8019016 <USB_DeactivateEndpoint+0x28a>
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	781b      	ldrb	r3, [r3, #0]
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	18d3      	adds	r3, r2, r3
 8018ff2:	881b      	ldrh	r3, [r3, #0]
 8018ff4:	b29a      	uxth	r2, r3
 8018ff6:	202c      	movs	r0, #44	@ 0x2c
 8018ff8:	183b      	adds	r3, r7, r0
 8018ffa:	493e      	ldr	r1, [pc, #248]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8018ffc:	400a      	ands	r2, r1
 8018ffe:	801a      	strh	r2, [r3, #0]
 8019000:	687a      	ldr	r2, [r7, #4]
 8019002:	683b      	ldr	r3, [r7, #0]
 8019004:	781b      	ldrb	r3, [r3, #0]
 8019006:	009b      	lsls	r3, r3, #2
 8019008:	18d3      	adds	r3, r2, r3
 801900a:	183a      	adds	r2, r7, r0
 801900c:	8812      	ldrh	r2, [r2, #0]
 801900e:	493d      	ldr	r1, [pc, #244]	@ (8019104 <USB_DeactivateEndpoint+0x378>)
 8019010:	430a      	orrs	r2, r1
 8019012:	b292      	uxth	r2, r2
 8019014:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019016:	687a      	ldr	r2, [r7, #4]
 8019018:	683b      	ldr	r3, [r7, #0]
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	009b      	lsls	r3, r3, #2
 801901e:	18d2      	adds	r2, r2, r3
 8019020:	212a      	movs	r1, #42	@ 0x2a
 8019022:	187b      	adds	r3, r7, r1
 8019024:	8812      	ldrh	r2, [r2, #0]
 8019026:	801a      	strh	r2, [r3, #0]
 8019028:	187b      	adds	r3, r7, r1
 801902a:	881b      	ldrh	r3, [r3, #0]
 801902c:	2240      	movs	r2, #64	@ 0x40
 801902e:	4013      	ands	r3, r2
 8019030:	d016      	beq.n	8019060 <USB_DeactivateEndpoint+0x2d4>
 8019032:	687a      	ldr	r2, [r7, #4]
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	781b      	ldrb	r3, [r3, #0]
 8019038:	009b      	lsls	r3, r3, #2
 801903a:	18d3      	adds	r3, r2, r3
 801903c:	881b      	ldrh	r3, [r3, #0]
 801903e:	b29a      	uxth	r2, r3
 8019040:	2028      	movs	r0, #40	@ 0x28
 8019042:	183b      	adds	r3, r7, r0
 8019044:	492b      	ldr	r1, [pc, #172]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8019046:	400a      	ands	r2, r1
 8019048:	801a      	strh	r2, [r3, #0]
 801904a:	687a      	ldr	r2, [r7, #4]
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	781b      	ldrb	r3, [r3, #0]
 8019050:	009b      	lsls	r3, r3, #2
 8019052:	18d3      	adds	r3, r2, r3
 8019054:	183a      	adds	r2, r7, r0
 8019056:	8812      	ldrh	r2, [r2, #0]
 8019058:	4927      	ldr	r1, [pc, #156]	@ (80190f8 <USB_DeactivateEndpoint+0x36c>)
 801905a:	430a      	orrs	r2, r1
 801905c:	b292      	uxth	r2, r2
 801905e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019060:	687a      	ldr	r2, [r7, #4]
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	009b      	lsls	r3, r3, #2
 8019068:	18d3      	adds	r3, r2, r3
 801906a:	881b      	ldrh	r3, [r3, #0]
 801906c:	b29a      	uxth	r2, r3
 801906e:	2026      	movs	r0, #38	@ 0x26
 8019070:	183b      	adds	r3, r7, r0
 8019072:	4920      	ldr	r1, [pc, #128]	@ (80190f4 <USB_DeactivateEndpoint+0x368>)
 8019074:	400a      	ands	r2, r1
 8019076:	801a      	strh	r2, [r3, #0]
 8019078:	687a      	ldr	r2, [r7, #4]
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	009b      	lsls	r3, r3, #2
 8019080:	18d3      	adds	r3, r2, r3
 8019082:	183a      	adds	r2, r7, r0
 8019084:	8812      	ldrh	r2, [r2, #0]
 8019086:	491f      	ldr	r1, [pc, #124]	@ (8019104 <USB_DeactivateEndpoint+0x378>)
 8019088:	430a      	orrs	r2, r1
 801908a:	b292      	uxth	r2, r2
 801908c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801908e:	687a      	ldr	r2, [r7, #4]
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	009b      	lsls	r3, r3, #2
 8019096:	18d3      	adds	r3, r2, r3
 8019098:	881b      	ldrh	r3, [r3, #0]
 801909a:	b29a      	uxth	r2, r3
 801909c:	2024      	movs	r0, #36	@ 0x24
 801909e:	183b      	adds	r3, r7, r0
 80190a0:	4916      	ldr	r1, [pc, #88]	@ (80190fc <USB_DeactivateEndpoint+0x370>)
 80190a2:	400a      	ands	r2, r1
 80190a4:	801a      	strh	r2, [r3, #0]
 80190a6:	687a      	ldr	r2, [r7, #4]
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	781b      	ldrb	r3, [r3, #0]
 80190ac:	009b      	lsls	r3, r3, #2
 80190ae:	18d3      	adds	r3, r2, r3
 80190b0:	183a      	adds	r2, r7, r0
 80190b2:	8812      	ldrh	r2, [r2, #0]
 80190b4:	4912      	ldr	r1, [pc, #72]	@ (8019100 <USB_DeactivateEndpoint+0x374>)
 80190b6:	430a      	orrs	r2, r1
 80190b8:	b292      	uxth	r2, r2
 80190ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80190bc:	687a      	ldr	r2, [r7, #4]
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	009b      	lsls	r3, r3, #2
 80190c4:	18d3      	adds	r3, r2, r3
 80190c6:	881b      	ldrh	r3, [r3, #0]
 80190c8:	b29a      	uxth	r2, r3
 80190ca:	2022      	movs	r0, #34	@ 0x22
 80190cc:	183b      	adds	r3, r7, r0
 80190ce:	490e      	ldr	r1, [pc, #56]	@ (8019108 <USB_DeactivateEndpoint+0x37c>)
 80190d0:	400a      	ands	r2, r1
 80190d2:	801a      	strh	r2, [r3, #0]
 80190d4:	687a      	ldr	r2, [r7, #4]
 80190d6:	683b      	ldr	r3, [r7, #0]
 80190d8:	781b      	ldrb	r3, [r3, #0]
 80190da:	009b      	lsls	r3, r3, #2
 80190dc:	18d3      	adds	r3, r2, r3
 80190de:	183a      	adds	r2, r7, r0
 80190e0:	8812      	ldrh	r2, [r2, #0]
 80190e2:	4907      	ldr	r1, [pc, #28]	@ (8019100 <USB_DeactivateEndpoint+0x374>)
 80190e4:	430a      	orrs	r2, r1
 80190e6:	b292      	uxth	r2, r2
 80190e8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80190ea:	2300      	movs	r3, #0
}
 80190ec:	0018      	movs	r0, r3
 80190ee:	46bd      	mov	sp, r7
 80190f0:	b00c      	add	sp, #48	@ 0x30
 80190f2:	bd80      	pop	{r7, pc}
 80190f4:	ffff8f8f 	.word	0xffff8f8f
 80190f8:	ffff80c0 	.word	0xffff80c0
 80190fc:	ffff8fbf 	.word	0xffff8fbf
 8019100:	ffff8080 	.word	0xffff8080
 8019104:	ffffc080 	.word	0xffffc080
 8019108:	ffffbf8f 	.word	0xffffbf8f

0801910c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801910c:	b590      	push	{r4, r7, lr}
 801910e:	b0c3      	sub	sp, #268	@ 0x10c
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
 8019114:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019116:	683b      	ldr	r3, [r7, #0]
 8019118:	785b      	ldrb	r3, [r3, #1]
 801911a:	2b01      	cmp	r3, #1
 801911c:	d001      	beq.n	8019122 <USB_EPStartXfer+0x16>
 801911e:	f000 fd2d 	bl	8019b7c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	699a      	ldr	r2, [r3, #24]
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	691b      	ldr	r3, [r3, #16]
 801912a:	429a      	cmp	r2, r3
 801912c:	d905      	bls.n	801913a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	691b      	ldr	r3, [r3, #16]
 8019132:	1d7a      	adds	r2, r7, #5
 8019134:	32ff      	adds	r2, #255	@ 0xff
 8019136:	6013      	str	r3, [r2, #0]
 8019138:	e004      	b.n	8019144 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	699b      	ldr	r3, [r3, #24]
 801913e:	1d7a      	adds	r2, r7, #5
 8019140:	32ff      	adds	r2, #255	@ 0xff
 8019142:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	7b1b      	ldrb	r3, [r3, #12]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d125      	bne.n	8019198 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	6959      	ldr	r1, [r3, #20]
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	88da      	ldrh	r2, [r3, #6]
 8019154:	1d7b      	adds	r3, r7, #5
 8019156:	33ff      	adds	r3, #255	@ 0xff
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	b29b      	uxth	r3, r3
 801915c:	6878      	ldr	r0, [r7, #4]
 801915e:	f001 fa47 	bl	801a5f0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	613b      	str	r3, [r7, #16]
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2250      	movs	r2, #80	@ 0x50
 801916a:	5a9b      	ldrh	r3, [r3, r2]
 801916c:	b29b      	uxth	r3, r3
 801916e:	001a      	movs	r2, r3
 8019170:	693b      	ldr	r3, [r7, #16]
 8019172:	189b      	adds	r3, r3, r2
 8019174:	613b      	str	r3, [r7, #16]
 8019176:	683b      	ldr	r3, [r7, #0]
 8019178:	781b      	ldrb	r3, [r3, #0]
 801917a:	00da      	lsls	r2, r3, #3
 801917c:	693b      	ldr	r3, [r7, #16]
 801917e:	18d3      	adds	r3, r2, r3
 8019180:	4ad7      	ldr	r2, [pc, #860]	@ (80194e0 <USB_EPStartXfer+0x3d4>)
 8019182:	4694      	mov	ip, r2
 8019184:	4463      	add	r3, ip
 8019186:	60fb      	str	r3, [r7, #12]
 8019188:	1d7b      	adds	r3, r7, #5
 801918a:	33ff      	adds	r3, #255	@ 0xff
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	b29a      	uxth	r2, r3
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	801a      	strh	r2, [r3, #0]
 8019194:	f000 fccd 	bl	8019b32 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019198:	683b      	ldr	r3, [r7, #0]
 801919a:	78db      	ldrb	r3, [r3, #3]
 801919c:	2b02      	cmp	r3, #2
 801919e:	d000      	beq.n	80191a2 <USB_EPStartXfer+0x96>
 80191a0:	e362      	b.n	8019868 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	6a1a      	ldr	r2, [r3, #32]
 80191a6:	683b      	ldr	r3, [r7, #0]
 80191a8:	691b      	ldr	r3, [r3, #16]
 80191aa:	429a      	cmp	r2, r3
 80191ac:	d800      	bhi.n	80191b0 <USB_EPStartXfer+0xa4>
 80191ae:	e309      	b.n	80197c4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80191b0:	687a      	ldr	r2, [r7, #4]
 80191b2:	683b      	ldr	r3, [r7, #0]
 80191b4:	781b      	ldrb	r3, [r3, #0]
 80191b6:	009b      	lsls	r3, r3, #2
 80191b8:	18d3      	adds	r3, r2, r3
 80191ba:	881b      	ldrh	r3, [r3, #0]
 80191bc:	b29a      	uxth	r2, r3
 80191be:	2056      	movs	r0, #86	@ 0x56
 80191c0:	183b      	adds	r3, r7, r0
 80191c2:	49c8      	ldr	r1, [pc, #800]	@ (80194e4 <USB_EPStartXfer+0x3d8>)
 80191c4:	400a      	ands	r2, r1
 80191c6:	801a      	strh	r2, [r3, #0]
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	683b      	ldr	r3, [r7, #0]
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	009b      	lsls	r3, r3, #2
 80191d0:	18d3      	adds	r3, r2, r3
 80191d2:	183a      	adds	r2, r7, r0
 80191d4:	8812      	ldrh	r2, [r2, #0]
 80191d6:	49c4      	ldr	r1, [pc, #784]	@ (80194e8 <USB_EPStartXfer+0x3dc>)
 80191d8:	430a      	orrs	r2, r1
 80191da:	b292      	uxth	r2, r2
 80191dc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	6a1a      	ldr	r2, [r3, #32]
 80191e2:	1d7b      	adds	r3, r7, #5
 80191e4:	33ff      	adds	r3, #255	@ 0xff
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	1ad2      	subs	r2, r2, r3
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80191ee:	687a      	ldr	r2, [r7, #4]
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	009b      	lsls	r3, r3, #2
 80191f6:	18d3      	adds	r3, r2, r3
 80191f8:	881b      	ldrh	r3, [r3, #0]
 80191fa:	b29b      	uxth	r3, r3
 80191fc:	001a      	movs	r2, r3
 80191fe:	2340      	movs	r3, #64	@ 0x40
 8019200:	4013      	ands	r3, r2
 8019202:	d100      	bne.n	8019206 <USB_EPStartXfer+0xfa>
 8019204:	e176      	b.n	80194f4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	633b      	str	r3, [r7, #48]	@ 0x30
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	785b      	ldrb	r3, [r3, #1]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d000      	beq.n	8019214 <USB_EPStartXfer+0x108>
 8019212:	e074      	b.n	80192fe <USB_EPStartXfer+0x1f2>
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2250      	movs	r2, #80	@ 0x50
 801921c:	5a9b      	ldrh	r3, [r3, r2]
 801921e:	b29b      	uxth	r3, r3
 8019220:	001a      	movs	r2, r3
 8019222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019224:	189b      	adds	r3, r3, r2
 8019226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	00da      	lsls	r2, r3, #3
 801922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019230:	18d3      	adds	r3, r2, r3
 8019232:	4aae      	ldr	r2, [pc, #696]	@ (80194ec <USB_EPStartXfer+0x3e0>)
 8019234:	4694      	mov	ip, r2
 8019236:	4463      	add	r3, ip
 8019238:	627b      	str	r3, [r7, #36]	@ 0x24
 801923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801923c:	881b      	ldrh	r3, [r3, #0]
 801923e:	b29b      	uxth	r3, r3
 8019240:	059b      	lsls	r3, r3, #22
 8019242:	0d9b      	lsrs	r3, r3, #22
 8019244:	b29a      	uxth	r2, r3
 8019246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019248:	801a      	strh	r2, [r3, #0]
 801924a:	1d7b      	adds	r3, r7, #5
 801924c:	33ff      	adds	r3, #255	@ 0xff
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	2b3e      	cmp	r3, #62	@ 0x3e
 8019252:	d924      	bls.n	801929e <USB_EPStartXfer+0x192>
 8019254:	1d7b      	adds	r3, r7, #5
 8019256:	33ff      	adds	r3, #255	@ 0xff
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	095b      	lsrs	r3, r3, #5
 801925c:	1c7a      	adds	r2, r7, #1
 801925e:	32ff      	adds	r2, #255	@ 0xff
 8019260:	6013      	str	r3, [r2, #0]
 8019262:	1d7b      	adds	r3, r7, #5
 8019264:	33ff      	adds	r3, #255	@ 0xff
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	221f      	movs	r2, #31
 801926a:	4013      	ands	r3, r2
 801926c:	d106      	bne.n	801927c <USB_EPStartXfer+0x170>
 801926e:	1c7b      	adds	r3, r7, #1
 8019270:	33ff      	adds	r3, #255	@ 0xff
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	3b01      	subs	r3, #1
 8019276:	1c7a      	adds	r2, r7, #1
 8019278:	32ff      	adds	r2, #255	@ 0xff
 801927a:	6013      	str	r3, [r2, #0]
 801927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801927e:	881b      	ldrh	r3, [r3, #0]
 8019280:	b29a      	uxth	r2, r3
 8019282:	1c7b      	adds	r3, r7, #1
 8019284:	33ff      	adds	r3, #255	@ 0xff
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	b29b      	uxth	r3, r3
 801928a:	029b      	lsls	r3, r3, #10
 801928c:	b29b      	uxth	r3, r3
 801928e:	4313      	orrs	r3, r2
 8019290:	b29b      	uxth	r3, r3
 8019292:	4a97      	ldr	r2, [pc, #604]	@ (80194f0 <USB_EPStartXfer+0x3e4>)
 8019294:	4313      	orrs	r3, r2
 8019296:	b29a      	uxth	r2, r3
 8019298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801929a:	801a      	strh	r2, [r3, #0]
 801929c:	e04a      	b.n	8019334 <USB_EPStartXfer+0x228>
 801929e:	1d7b      	adds	r3, r7, #5
 80192a0:	33ff      	adds	r3, #255	@ 0xff
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d108      	bne.n	80192ba <USB_EPStartXfer+0x1ae>
 80192a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192aa:	881b      	ldrh	r3, [r3, #0]
 80192ac:	b29b      	uxth	r3, r3
 80192ae:	4a90      	ldr	r2, [pc, #576]	@ (80194f0 <USB_EPStartXfer+0x3e4>)
 80192b0:	4313      	orrs	r3, r2
 80192b2:	b29a      	uxth	r2, r3
 80192b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192b6:	801a      	strh	r2, [r3, #0]
 80192b8:	e03c      	b.n	8019334 <USB_EPStartXfer+0x228>
 80192ba:	1d7b      	adds	r3, r7, #5
 80192bc:	33ff      	adds	r3, #255	@ 0xff
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	085b      	lsrs	r3, r3, #1
 80192c2:	1c7a      	adds	r2, r7, #1
 80192c4:	32ff      	adds	r2, #255	@ 0xff
 80192c6:	6013      	str	r3, [r2, #0]
 80192c8:	1d7b      	adds	r3, r7, #5
 80192ca:	33ff      	adds	r3, #255	@ 0xff
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	2201      	movs	r2, #1
 80192d0:	4013      	ands	r3, r2
 80192d2:	d006      	beq.n	80192e2 <USB_EPStartXfer+0x1d6>
 80192d4:	1c7b      	adds	r3, r7, #1
 80192d6:	33ff      	adds	r3, #255	@ 0xff
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	3301      	adds	r3, #1
 80192dc:	1c7a      	adds	r2, r7, #1
 80192de:	32ff      	adds	r2, #255	@ 0xff
 80192e0:	6013      	str	r3, [r2, #0]
 80192e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	b29a      	uxth	r2, r3
 80192e8:	1c7b      	adds	r3, r7, #1
 80192ea:	33ff      	adds	r3, #255	@ 0xff
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	029b      	lsls	r3, r3, #10
 80192f2:	b29b      	uxth	r3, r3
 80192f4:	4313      	orrs	r3, r2
 80192f6:	b29a      	uxth	r2, r3
 80192f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192fa:	801a      	strh	r2, [r3, #0]
 80192fc:	e01a      	b.n	8019334 <USB_EPStartXfer+0x228>
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	785b      	ldrb	r3, [r3, #1]
 8019302:	2b01      	cmp	r3, #1
 8019304:	d116      	bne.n	8019334 <USB_EPStartXfer+0x228>
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2250      	movs	r2, #80	@ 0x50
 801930a:	5a9b      	ldrh	r3, [r3, r2]
 801930c:	b29b      	uxth	r3, r3
 801930e:	001a      	movs	r2, r3
 8019310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019312:	189b      	adds	r3, r3, r2
 8019314:	633b      	str	r3, [r7, #48]	@ 0x30
 8019316:	683b      	ldr	r3, [r7, #0]
 8019318:	781b      	ldrb	r3, [r3, #0]
 801931a:	00da      	lsls	r2, r3, #3
 801931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801931e:	18d3      	adds	r3, r2, r3
 8019320:	4a72      	ldr	r2, [pc, #456]	@ (80194ec <USB_EPStartXfer+0x3e0>)
 8019322:	4694      	mov	ip, r2
 8019324:	4463      	add	r3, ip
 8019326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019328:	1d7b      	adds	r3, r7, #5
 801932a:	33ff      	adds	r3, #255	@ 0xff
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	b29a      	uxth	r2, r3
 8019330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019332:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019334:	2076      	movs	r0, #118	@ 0x76
 8019336:	183b      	adds	r3, r7, r0
 8019338:	683a      	ldr	r2, [r7, #0]
 801933a:	8952      	ldrh	r2, [r2, #10]
 801933c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	6959      	ldr	r1, [r3, #20]
 8019342:	1d7b      	adds	r3, r7, #5
 8019344:	33ff      	adds	r3, #255	@ 0xff
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	b29c      	uxth	r4, r3
 801934a:	183b      	adds	r3, r7, r0
 801934c:	881a      	ldrh	r2, [r3, #0]
 801934e:	6878      	ldr	r0, [r7, #4]
 8019350:	0023      	movs	r3, r4
 8019352:	f001 f94d 	bl	801a5f0 <USB_WritePMA>
            ep->xfer_buff += len;
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	695a      	ldr	r2, [r3, #20]
 801935a:	1d7b      	adds	r3, r7, #5
 801935c:	33ff      	adds	r3, #255	@ 0xff
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	18d2      	adds	r2, r2, r3
 8019362:	683b      	ldr	r3, [r7, #0]
 8019364:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	6a1a      	ldr	r2, [r3, #32]
 801936a:	683b      	ldr	r3, [r7, #0]
 801936c:	691b      	ldr	r3, [r3, #16]
 801936e:	429a      	cmp	r2, r3
 8019370:	d908      	bls.n	8019384 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	6a1a      	ldr	r2, [r3, #32]
 8019376:	1d7b      	adds	r3, r7, #5
 8019378:	33ff      	adds	r3, #255	@ 0xff
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	1ad2      	subs	r2, r2, r3
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	621a      	str	r2, [r3, #32]
 8019382:	e007      	b.n	8019394 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019384:	683b      	ldr	r3, [r7, #0]
 8019386:	6a1b      	ldr	r3, [r3, #32]
 8019388:	1d7a      	adds	r2, r7, #5
 801938a:	32ff      	adds	r2, #255	@ 0xff
 801938c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801938e:	683b      	ldr	r3, [r7, #0]
 8019390:	2200      	movs	r2, #0
 8019392:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	785b      	ldrb	r3, [r3, #1]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d000      	beq.n	801939e <USB_EPStartXfer+0x292>
 801939c:	e070      	b.n	8019480 <USB_EPStartXfer+0x374>
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	61bb      	str	r3, [r7, #24]
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	2250      	movs	r2, #80	@ 0x50
 80193a6:	5a9b      	ldrh	r3, [r3, r2]
 80193a8:	b29b      	uxth	r3, r3
 80193aa:	001a      	movs	r2, r3
 80193ac:	69bb      	ldr	r3, [r7, #24]
 80193ae:	189b      	adds	r3, r3, r2
 80193b0:	61bb      	str	r3, [r7, #24]
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	781b      	ldrb	r3, [r3, #0]
 80193b6:	00da      	lsls	r2, r3, #3
 80193b8:	69bb      	ldr	r3, [r7, #24]
 80193ba:	18d3      	adds	r3, r2, r3
 80193bc:	4a48      	ldr	r2, [pc, #288]	@ (80194e0 <USB_EPStartXfer+0x3d4>)
 80193be:	4694      	mov	ip, r2
 80193c0:	4463      	add	r3, ip
 80193c2:	617b      	str	r3, [r7, #20]
 80193c4:	697b      	ldr	r3, [r7, #20]
 80193c6:	881b      	ldrh	r3, [r3, #0]
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	059b      	lsls	r3, r3, #22
 80193cc:	0d9b      	lsrs	r3, r3, #22
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	697b      	ldr	r3, [r7, #20]
 80193d2:	801a      	strh	r2, [r3, #0]
 80193d4:	1d7b      	adds	r3, r7, #5
 80193d6:	33ff      	adds	r3, #255	@ 0xff
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	2b3e      	cmp	r3, #62	@ 0x3e
 80193dc:	d922      	bls.n	8019424 <USB_EPStartXfer+0x318>
 80193de:	1d7b      	adds	r3, r7, #5
 80193e0:	33ff      	adds	r3, #255	@ 0xff
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	095b      	lsrs	r3, r3, #5
 80193e6:	21fc      	movs	r1, #252	@ 0xfc
 80193e8:	187a      	adds	r2, r7, r1
 80193ea:	6013      	str	r3, [r2, #0]
 80193ec:	1d7b      	adds	r3, r7, #5
 80193ee:	33ff      	adds	r3, #255	@ 0xff
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	221f      	movs	r2, #31
 80193f4:	4013      	ands	r3, r2
 80193f6:	d104      	bne.n	8019402 <USB_EPStartXfer+0x2f6>
 80193f8:	187b      	adds	r3, r7, r1
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	3b01      	subs	r3, #1
 80193fe:	187a      	adds	r2, r7, r1
 8019400:	6013      	str	r3, [r2, #0]
 8019402:	697b      	ldr	r3, [r7, #20]
 8019404:	881b      	ldrh	r3, [r3, #0]
 8019406:	b29a      	uxth	r2, r3
 8019408:	23fc      	movs	r3, #252	@ 0xfc
 801940a:	18fb      	adds	r3, r7, r3
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	b29b      	uxth	r3, r3
 8019410:	029b      	lsls	r3, r3, #10
 8019412:	b29b      	uxth	r3, r3
 8019414:	4313      	orrs	r3, r2
 8019416:	b29b      	uxth	r3, r3
 8019418:	4a35      	ldr	r2, [pc, #212]	@ (80194f0 <USB_EPStartXfer+0x3e4>)
 801941a:	4313      	orrs	r3, r2
 801941c:	b29a      	uxth	r2, r3
 801941e:	697b      	ldr	r3, [r7, #20]
 8019420:	801a      	strh	r2, [r3, #0]
 8019422:	e04a      	b.n	80194ba <USB_EPStartXfer+0x3ae>
 8019424:	1d7b      	adds	r3, r7, #5
 8019426:	33ff      	adds	r3, #255	@ 0xff
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d108      	bne.n	8019440 <USB_EPStartXfer+0x334>
 801942e:	697b      	ldr	r3, [r7, #20]
 8019430:	881b      	ldrh	r3, [r3, #0]
 8019432:	b29b      	uxth	r3, r3
 8019434:	4a2e      	ldr	r2, [pc, #184]	@ (80194f0 <USB_EPStartXfer+0x3e4>)
 8019436:	4313      	orrs	r3, r2
 8019438:	b29a      	uxth	r2, r3
 801943a:	697b      	ldr	r3, [r7, #20]
 801943c:	801a      	strh	r2, [r3, #0]
 801943e:	e03c      	b.n	80194ba <USB_EPStartXfer+0x3ae>
 8019440:	1d7b      	adds	r3, r7, #5
 8019442:	33ff      	adds	r3, #255	@ 0xff
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	085b      	lsrs	r3, r3, #1
 8019448:	21fc      	movs	r1, #252	@ 0xfc
 801944a:	187a      	adds	r2, r7, r1
 801944c:	6013      	str	r3, [r2, #0]
 801944e:	1d7b      	adds	r3, r7, #5
 8019450:	33ff      	adds	r3, #255	@ 0xff
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	2201      	movs	r2, #1
 8019456:	4013      	ands	r3, r2
 8019458:	d004      	beq.n	8019464 <USB_EPStartXfer+0x358>
 801945a:	187b      	adds	r3, r7, r1
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	3301      	adds	r3, #1
 8019460:	187a      	adds	r2, r7, r1
 8019462:	6013      	str	r3, [r2, #0]
 8019464:	697b      	ldr	r3, [r7, #20]
 8019466:	881b      	ldrh	r3, [r3, #0]
 8019468:	b29a      	uxth	r2, r3
 801946a:	23fc      	movs	r3, #252	@ 0xfc
 801946c:	18fb      	adds	r3, r7, r3
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	b29b      	uxth	r3, r3
 8019472:	029b      	lsls	r3, r3, #10
 8019474:	b29b      	uxth	r3, r3
 8019476:	4313      	orrs	r3, r2
 8019478:	b29a      	uxth	r2, r3
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	801a      	strh	r2, [r3, #0]
 801947e:	e01c      	b.n	80194ba <USB_EPStartXfer+0x3ae>
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	785b      	ldrb	r3, [r3, #1]
 8019484:	2b01      	cmp	r3, #1
 8019486:	d118      	bne.n	80194ba <USB_EPStartXfer+0x3ae>
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	623b      	str	r3, [r7, #32]
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	2250      	movs	r2, #80	@ 0x50
 8019490:	5a9b      	ldrh	r3, [r3, r2]
 8019492:	b29b      	uxth	r3, r3
 8019494:	001a      	movs	r2, r3
 8019496:	6a3b      	ldr	r3, [r7, #32]
 8019498:	189b      	adds	r3, r3, r2
 801949a:	623b      	str	r3, [r7, #32]
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	00da      	lsls	r2, r3, #3
 80194a2:	6a3b      	ldr	r3, [r7, #32]
 80194a4:	18d3      	adds	r3, r2, r3
 80194a6:	4a0e      	ldr	r2, [pc, #56]	@ (80194e0 <USB_EPStartXfer+0x3d4>)
 80194a8:	4694      	mov	ip, r2
 80194aa:	4463      	add	r3, ip
 80194ac:	61fb      	str	r3, [r7, #28]
 80194ae:	1d7b      	adds	r3, r7, #5
 80194b0:	33ff      	adds	r3, #255	@ 0xff
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	b29a      	uxth	r2, r3
 80194b6:	69fb      	ldr	r3, [r7, #28]
 80194b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80194ba:	2076      	movs	r0, #118	@ 0x76
 80194bc:	183b      	adds	r3, r7, r0
 80194be:	683a      	ldr	r2, [r7, #0]
 80194c0:	8912      	ldrh	r2, [r2, #8]
 80194c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80194c4:	683b      	ldr	r3, [r7, #0]
 80194c6:	6959      	ldr	r1, [r3, #20]
 80194c8:	1d7b      	adds	r3, r7, #5
 80194ca:	33ff      	adds	r3, #255	@ 0xff
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	b29c      	uxth	r4, r3
 80194d0:	183b      	adds	r3, r7, r0
 80194d2:	881a      	ldrh	r2, [r3, #0]
 80194d4:	6878      	ldr	r0, [r7, #4]
 80194d6:	0023      	movs	r3, r4
 80194d8:	f001 f88a 	bl	801a5f0 <USB_WritePMA>
 80194dc:	e329      	b.n	8019b32 <USB_EPStartXfer+0xa26>
 80194de:	46c0      	nop			@ (mov r8, r8)
 80194e0:	00000402 	.word	0x00000402
 80194e4:	ffff8f8f 	.word	0xffff8f8f
 80194e8:	ffff8180 	.word	0xffff8180
 80194ec:	00000406 	.word	0x00000406
 80194f0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	785b      	ldrb	r3, [r3, #1]
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d000      	beq.n	80194fe <USB_EPStartXfer+0x3f2>
 80194fc:	e070      	b.n	80195e0 <USB_EPStartXfer+0x4d4>
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	2250      	movs	r2, #80	@ 0x50
 8019506:	5a9b      	ldrh	r3, [r3, r2]
 8019508:	b29b      	uxth	r3, r3
 801950a:	001a      	movs	r2, r3
 801950c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801950e:	189b      	adds	r3, r3, r2
 8019510:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019512:	683b      	ldr	r3, [r7, #0]
 8019514:	781b      	ldrb	r3, [r3, #0]
 8019516:	00da      	lsls	r2, r3, #3
 8019518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801951a:	18d3      	adds	r3, r2, r3
 801951c:	4acd      	ldr	r2, [pc, #820]	@ (8019854 <USB_EPStartXfer+0x748>)
 801951e:	4694      	mov	ip, r2
 8019520:	4463      	add	r3, ip
 8019522:	647b      	str	r3, [r7, #68]	@ 0x44
 8019524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019526:	881b      	ldrh	r3, [r3, #0]
 8019528:	b29b      	uxth	r3, r3
 801952a:	059b      	lsls	r3, r3, #22
 801952c:	0d9b      	lsrs	r3, r3, #22
 801952e:	b29a      	uxth	r2, r3
 8019530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019532:	801a      	strh	r2, [r3, #0]
 8019534:	1d7b      	adds	r3, r7, #5
 8019536:	33ff      	adds	r3, #255	@ 0xff
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	2b3e      	cmp	r3, #62	@ 0x3e
 801953c:	d922      	bls.n	8019584 <USB_EPStartXfer+0x478>
 801953e:	1d7b      	adds	r3, r7, #5
 8019540:	33ff      	adds	r3, #255	@ 0xff
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	095b      	lsrs	r3, r3, #5
 8019546:	21f8      	movs	r1, #248	@ 0xf8
 8019548:	187a      	adds	r2, r7, r1
 801954a:	6013      	str	r3, [r2, #0]
 801954c:	1d7b      	adds	r3, r7, #5
 801954e:	33ff      	adds	r3, #255	@ 0xff
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	221f      	movs	r2, #31
 8019554:	4013      	ands	r3, r2
 8019556:	d104      	bne.n	8019562 <USB_EPStartXfer+0x456>
 8019558:	187b      	adds	r3, r7, r1
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	3b01      	subs	r3, #1
 801955e:	187a      	adds	r2, r7, r1
 8019560:	6013      	str	r3, [r2, #0]
 8019562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019564:	881b      	ldrh	r3, [r3, #0]
 8019566:	b29a      	uxth	r2, r3
 8019568:	23f8      	movs	r3, #248	@ 0xf8
 801956a:	18fb      	adds	r3, r7, r3
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	b29b      	uxth	r3, r3
 8019570:	029b      	lsls	r3, r3, #10
 8019572:	b29b      	uxth	r3, r3
 8019574:	4313      	orrs	r3, r2
 8019576:	b29b      	uxth	r3, r3
 8019578:	4ab7      	ldr	r2, [pc, #732]	@ (8019858 <USB_EPStartXfer+0x74c>)
 801957a:	4313      	orrs	r3, r2
 801957c:	b29a      	uxth	r2, r3
 801957e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019580:	801a      	strh	r2, [r3, #0]
 8019582:	e04a      	b.n	801961a <USB_EPStartXfer+0x50e>
 8019584:	1d7b      	adds	r3, r7, #5
 8019586:	33ff      	adds	r3, #255	@ 0xff
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d108      	bne.n	80195a0 <USB_EPStartXfer+0x494>
 801958e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019590:	881b      	ldrh	r3, [r3, #0]
 8019592:	b29b      	uxth	r3, r3
 8019594:	4ab0      	ldr	r2, [pc, #704]	@ (8019858 <USB_EPStartXfer+0x74c>)
 8019596:	4313      	orrs	r3, r2
 8019598:	b29a      	uxth	r2, r3
 801959a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801959c:	801a      	strh	r2, [r3, #0]
 801959e:	e03c      	b.n	801961a <USB_EPStartXfer+0x50e>
 80195a0:	1d7b      	adds	r3, r7, #5
 80195a2:	33ff      	adds	r3, #255	@ 0xff
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	085b      	lsrs	r3, r3, #1
 80195a8:	21f8      	movs	r1, #248	@ 0xf8
 80195aa:	187a      	adds	r2, r7, r1
 80195ac:	6013      	str	r3, [r2, #0]
 80195ae:	1d7b      	adds	r3, r7, #5
 80195b0:	33ff      	adds	r3, #255	@ 0xff
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	2201      	movs	r2, #1
 80195b6:	4013      	ands	r3, r2
 80195b8:	d004      	beq.n	80195c4 <USB_EPStartXfer+0x4b8>
 80195ba:	187b      	adds	r3, r7, r1
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	3301      	adds	r3, #1
 80195c0:	187a      	adds	r2, r7, r1
 80195c2:	6013      	str	r3, [r2, #0]
 80195c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195c6:	881b      	ldrh	r3, [r3, #0]
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	23f8      	movs	r3, #248	@ 0xf8
 80195cc:	18fb      	adds	r3, r7, r3
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	b29b      	uxth	r3, r3
 80195d2:	029b      	lsls	r3, r3, #10
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	4313      	orrs	r3, r2
 80195d8:	b29a      	uxth	r2, r3
 80195da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80195dc:	801a      	strh	r2, [r3, #0]
 80195de:	e01c      	b.n	801961a <USB_EPStartXfer+0x50e>
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	785b      	ldrb	r3, [r3, #1]
 80195e4:	2b01      	cmp	r3, #1
 80195e6:	d118      	bne.n	801961a <USB_EPStartXfer+0x50e>
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2250      	movs	r2, #80	@ 0x50
 80195f0:	5a9b      	ldrh	r3, [r3, r2]
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	001a      	movs	r2, r3
 80195f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195f8:	189b      	adds	r3, r3, r2
 80195fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	781b      	ldrb	r3, [r3, #0]
 8019600:	00da      	lsls	r2, r3, #3
 8019602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019604:	18d3      	adds	r3, r2, r3
 8019606:	4a93      	ldr	r2, [pc, #588]	@ (8019854 <USB_EPStartXfer+0x748>)
 8019608:	4694      	mov	ip, r2
 801960a:	4463      	add	r3, ip
 801960c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801960e:	1d7b      	adds	r3, r7, #5
 8019610:	33ff      	adds	r3, #255	@ 0xff
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	b29a      	uxth	r2, r3
 8019616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019618:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801961a:	2076      	movs	r0, #118	@ 0x76
 801961c:	183b      	adds	r3, r7, r0
 801961e:	683a      	ldr	r2, [r7, #0]
 8019620:	8912      	ldrh	r2, [r2, #8]
 8019622:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019624:	683b      	ldr	r3, [r7, #0]
 8019626:	6959      	ldr	r1, [r3, #20]
 8019628:	1d7b      	adds	r3, r7, #5
 801962a:	33ff      	adds	r3, #255	@ 0xff
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	b29c      	uxth	r4, r3
 8019630:	183b      	adds	r3, r7, r0
 8019632:	881a      	ldrh	r2, [r3, #0]
 8019634:	6878      	ldr	r0, [r7, #4]
 8019636:	0023      	movs	r3, r4
 8019638:	f000 ffda 	bl	801a5f0 <USB_WritePMA>
            ep->xfer_buff += len;
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	695a      	ldr	r2, [r3, #20]
 8019640:	1d7b      	adds	r3, r7, #5
 8019642:	33ff      	adds	r3, #255	@ 0xff
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	18d2      	adds	r2, r2, r3
 8019648:	683b      	ldr	r3, [r7, #0]
 801964a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801964c:	683b      	ldr	r3, [r7, #0]
 801964e:	6a1a      	ldr	r2, [r3, #32]
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	691b      	ldr	r3, [r3, #16]
 8019654:	429a      	cmp	r2, r3
 8019656:	d908      	bls.n	801966a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8019658:	683b      	ldr	r3, [r7, #0]
 801965a:	6a1a      	ldr	r2, [r3, #32]
 801965c:	1d7b      	adds	r3, r7, #5
 801965e:	33ff      	adds	r3, #255	@ 0xff
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	1ad2      	subs	r2, r2, r3
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	621a      	str	r2, [r3, #32]
 8019668:	e007      	b.n	801967a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801966a:	683b      	ldr	r3, [r7, #0]
 801966c:	6a1b      	ldr	r3, [r3, #32]
 801966e:	1d7a      	adds	r2, r7, #5
 8019670:	32ff      	adds	r2, #255	@ 0xff
 8019672:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019674:	683b      	ldr	r3, [r7, #0]
 8019676:	2200      	movs	r2, #0
 8019678:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	643b      	str	r3, [r7, #64]	@ 0x40
 801967e:	683b      	ldr	r3, [r7, #0]
 8019680:	785b      	ldrb	r3, [r3, #1]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d000      	beq.n	8019688 <USB_EPStartXfer+0x57c>
 8019686:	e070      	b.n	801976a <USB_EPStartXfer+0x65e>
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2250      	movs	r2, #80	@ 0x50
 8019690:	5a9b      	ldrh	r3, [r3, r2]
 8019692:	b29b      	uxth	r3, r3
 8019694:	001a      	movs	r2, r3
 8019696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019698:	189b      	adds	r3, r3, r2
 801969a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	00da      	lsls	r2, r3, #3
 80196a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196a4:	18d3      	adds	r3, r2, r3
 80196a6:	4a6d      	ldr	r2, [pc, #436]	@ (801985c <USB_EPStartXfer+0x750>)
 80196a8:	4694      	mov	ip, r2
 80196aa:	4463      	add	r3, ip
 80196ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80196ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196b0:	881b      	ldrh	r3, [r3, #0]
 80196b2:	b29b      	uxth	r3, r3
 80196b4:	059b      	lsls	r3, r3, #22
 80196b6:	0d9b      	lsrs	r3, r3, #22
 80196b8:	b29a      	uxth	r2, r3
 80196ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196bc:	801a      	strh	r2, [r3, #0]
 80196be:	1d7b      	adds	r3, r7, #5
 80196c0:	33ff      	adds	r3, #255	@ 0xff
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80196c6:	d922      	bls.n	801970e <USB_EPStartXfer+0x602>
 80196c8:	1d7b      	adds	r3, r7, #5
 80196ca:	33ff      	adds	r3, #255	@ 0xff
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	095b      	lsrs	r3, r3, #5
 80196d0:	21f4      	movs	r1, #244	@ 0xf4
 80196d2:	187a      	adds	r2, r7, r1
 80196d4:	6013      	str	r3, [r2, #0]
 80196d6:	1d7b      	adds	r3, r7, #5
 80196d8:	33ff      	adds	r3, #255	@ 0xff
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	221f      	movs	r2, #31
 80196de:	4013      	ands	r3, r2
 80196e0:	d104      	bne.n	80196ec <USB_EPStartXfer+0x5e0>
 80196e2:	187b      	adds	r3, r7, r1
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	3b01      	subs	r3, #1
 80196e8:	187a      	adds	r2, r7, r1
 80196ea:	6013      	str	r3, [r2, #0]
 80196ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80196ee:	881b      	ldrh	r3, [r3, #0]
 80196f0:	b29a      	uxth	r2, r3
 80196f2:	23f4      	movs	r3, #244	@ 0xf4
 80196f4:	18fb      	adds	r3, r7, r3
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	b29b      	uxth	r3, r3
 80196fa:	029b      	lsls	r3, r3, #10
 80196fc:	b29b      	uxth	r3, r3
 80196fe:	4313      	orrs	r3, r2
 8019700:	b29b      	uxth	r3, r3
 8019702:	4a55      	ldr	r2, [pc, #340]	@ (8019858 <USB_EPStartXfer+0x74c>)
 8019704:	4313      	orrs	r3, r2
 8019706:	b29a      	uxth	r2, r3
 8019708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801970a:	801a      	strh	r2, [r3, #0]
 801970c:	e048      	b.n	80197a0 <USB_EPStartXfer+0x694>
 801970e:	1d7b      	adds	r3, r7, #5
 8019710:	33ff      	adds	r3, #255	@ 0xff
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d108      	bne.n	801972a <USB_EPStartXfer+0x61e>
 8019718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801971a:	881b      	ldrh	r3, [r3, #0]
 801971c:	b29b      	uxth	r3, r3
 801971e:	4a4e      	ldr	r2, [pc, #312]	@ (8019858 <USB_EPStartXfer+0x74c>)
 8019720:	4313      	orrs	r3, r2
 8019722:	b29a      	uxth	r2, r3
 8019724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019726:	801a      	strh	r2, [r3, #0]
 8019728:	e03a      	b.n	80197a0 <USB_EPStartXfer+0x694>
 801972a:	1d7b      	adds	r3, r7, #5
 801972c:	33ff      	adds	r3, #255	@ 0xff
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	085b      	lsrs	r3, r3, #1
 8019732:	21f4      	movs	r1, #244	@ 0xf4
 8019734:	187a      	adds	r2, r7, r1
 8019736:	6013      	str	r3, [r2, #0]
 8019738:	1d7b      	adds	r3, r7, #5
 801973a:	33ff      	adds	r3, #255	@ 0xff
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	2201      	movs	r2, #1
 8019740:	4013      	ands	r3, r2
 8019742:	d004      	beq.n	801974e <USB_EPStartXfer+0x642>
 8019744:	187b      	adds	r3, r7, r1
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	3301      	adds	r3, #1
 801974a:	187a      	adds	r2, r7, r1
 801974c:	6013      	str	r3, [r2, #0]
 801974e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019750:	881b      	ldrh	r3, [r3, #0]
 8019752:	b29a      	uxth	r2, r3
 8019754:	23f4      	movs	r3, #244	@ 0xf4
 8019756:	18fb      	adds	r3, r7, r3
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	b29b      	uxth	r3, r3
 801975c:	029b      	lsls	r3, r3, #10
 801975e:	b29b      	uxth	r3, r3
 8019760:	4313      	orrs	r3, r2
 8019762:	b29a      	uxth	r2, r3
 8019764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019766:	801a      	strh	r2, [r3, #0]
 8019768:	e01a      	b.n	80197a0 <USB_EPStartXfer+0x694>
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	785b      	ldrb	r3, [r3, #1]
 801976e:	2b01      	cmp	r3, #1
 8019770:	d116      	bne.n	80197a0 <USB_EPStartXfer+0x694>
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	2250      	movs	r2, #80	@ 0x50
 8019776:	5a9b      	ldrh	r3, [r3, r2]
 8019778:	b29b      	uxth	r3, r3
 801977a:	001a      	movs	r2, r3
 801977c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801977e:	189b      	adds	r3, r3, r2
 8019780:	643b      	str	r3, [r7, #64]	@ 0x40
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	00da      	lsls	r2, r3, #3
 8019788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801978a:	18d3      	adds	r3, r2, r3
 801978c:	4a33      	ldr	r2, [pc, #204]	@ (801985c <USB_EPStartXfer+0x750>)
 801978e:	4694      	mov	ip, r2
 8019790:	4463      	add	r3, ip
 8019792:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019794:	1d7b      	adds	r3, r7, #5
 8019796:	33ff      	adds	r3, #255	@ 0xff
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	b29a      	uxth	r2, r3
 801979c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801979e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80197a0:	2076      	movs	r0, #118	@ 0x76
 80197a2:	183b      	adds	r3, r7, r0
 80197a4:	683a      	ldr	r2, [r7, #0]
 80197a6:	8952      	ldrh	r2, [r2, #10]
 80197a8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80197aa:	683b      	ldr	r3, [r7, #0]
 80197ac:	6959      	ldr	r1, [r3, #20]
 80197ae:	1d7b      	adds	r3, r7, #5
 80197b0:	33ff      	adds	r3, #255	@ 0xff
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	b29c      	uxth	r4, r3
 80197b6:	183b      	adds	r3, r7, r0
 80197b8:	881a      	ldrh	r2, [r3, #0]
 80197ba:	6878      	ldr	r0, [r7, #4]
 80197bc:	0023      	movs	r3, r4
 80197be:	f000 ff17 	bl	801a5f0 <USB_WritePMA>
 80197c2:	e1b6      	b.n	8019b32 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	6a1b      	ldr	r3, [r3, #32]
 80197c8:	1d7a      	adds	r2, r7, #5
 80197ca:	32ff      	adds	r2, #255	@ 0xff
 80197cc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80197ce:	687a      	ldr	r2, [r7, #4]
 80197d0:	683b      	ldr	r3, [r7, #0]
 80197d2:	781b      	ldrb	r3, [r3, #0]
 80197d4:	009b      	lsls	r3, r3, #2
 80197d6:	18d3      	adds	r3, r2, r3
 80197d8:	881b      	ldrh	r3, [r3, #0]
 80197da:	b29a      	uxth	r2, r3
 80197dc:	2062      	movs	r0, #98	@ 0x62
 80197de:	183b      	adds	r3, r7, r0
 80197e0:	491f      	ldr	r1, [pc, #124]	@ (8019860 <USB_EPStartXfer+0x754>)
 80197e2:	400a      	ands	r2, r1
 80197e4:	801a      	strh	r2, [r3, #0]
 80197e6:	687a      	ldr	r2, [r7, #4]
 80197e8:	683b      	ldr	r3, [r7, #0]
 80197ea:	781b      	ldrb	r3, [r3, #0]
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	18d3      	adds	r3, r2, r3
 80197f0:	183a      	adds	r2, r7, r0
 80197f2:	8812      	ldrh	r2, [r2, #0]
 80197f4:	491b      	ldr	r1, [pc, #108]	@ (8019864 <USB_EPStartXfer+0x758>)
 80197f6:	430a      	orrs	r2, r1
 80197f8:	b292      	uxth	r2, r2
 80197fa:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	2250      	movs	r2, #80	@ 0x50
 8019804:	5a9b      	ldrh	r3, [r3, r2]
 8019806:	b29b      	uxth	r3, r3
 8019808:	001a      	movs	r2, r3
 801980a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801980c:	189b      	adds	r3, r3, r2
 801980e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	781b      	ldrb	r3, [r3, #0]
 8019814:	00da      	lsls	r2, r3, #3
 8019816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019818:	18d3      	adds	r3, r2, r3
 801981a:	4a0e      	ldr	r2, [pc, #56]	@ (8019854 <USB_EPStartXfer+0x748>)
 801981c:	4694      	mov	ip, r2
 801981e:	4463      	add	r3, ip
 8019820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019822:	1d7b      	adds	r3, r7, #5
 8019824:	33ff      	adds	r3, #255	@ 0xff
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	b29a      	uxth	r2, r3
 801982a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801982c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801982e:	2076      	movs	r0, #118	@ 0x76
 8019830:	183b      	adds	r3, r7, r0
 8019832:	683a      	ldr	r2, [r7, #0]
 8019834:	8912      	ldrh	r2, [r2, #8]
 8019836:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	6959      	ldr	r1, [r3, #20]
 801983c:	1d7b      	adds	r3, r7, #5
 801983e:	33ff      	adds	r3, #255	@ 0xff
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	b29c      	uxth	r4, r3
 8019844:	183b      	adds	r3, r7, r0
 8019846:	881a      	ldrh	r2, [r3, #0]
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	0023      	movs	r3, r4
 801984c:	f000 fed0 	bl	801a5f0 <USB_WritePMA>
 8019850:	e16f      	b.n	8019b32 <USB_EPStartXfer+0xa26>
 8019852:	46c0      	nop			@ (mov r8, r8)
 8019854:	00000402 	.word	0x00000402
 8019858:	ffff8000 	.word	0xffff8000
 801985c:	00000406 	.word	0x00000406
 8019860:	ffff8e8f 	.word	0xffff8e8f
 8019864:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	6a1a      	ldr	r2, [r3, #32]
 801986c:	1d7b      	adds	r3, r7, #5
 801986e:	33ff      	adds	r3, #255	@ 0xff
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	1ad2      	subs	r2, r2, r3
 8019874:	683b      	ldr	r3, [r7, #0]
 8019876:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019878:	687a      	ldr	r2, [r7, #4]
 801987a:	683b      	ldr	r3, [r7, #0]
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	009b      	lsls	r3, r3, #2
 8019880:	18d3      	adds	r3, r2, r3
 8019882:	881b      	ldrh	r3, [r3, #0]
 8019884:	b29b      	uxth	r3, r3
 8019886:	001a      	movs	r2, r3
 8019888:	2340      	movs	r3, #64	@ 0x40
 801988a:	4013      	ands	r3, r2
 801988c:	d100      	bne.n	8019890 <USB_EPStartXfer+0x784>
 801988e:	e0a4      	b.n	80199da <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	673b      	str	r3, [r7, #112]	@ 0x70
 8019894:	683b      	ldr	r3, [r7, #0]
 8019896:	785b      	ldrb	r3, [r3, #1]
 8019898:	2b00      	cmp	r3, #0
 801989a:	d000      	beq.n	801989e <USB_EPStartXfer+0x792>
 801989c:	e070      	b.n	8019980 <USB_EPStartXfer+0x874>
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	2250      	movs	r2, #80	@ 0x50
 80198a6:	5a9b      	ldrh	r3, [r3, r2]
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	001a      	movs	r2, r3
 80198ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80198ae:	189b      	adds	r3, r3, r2
 80198b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80198b2:	683b      	ldr	r3, [r7, #0]
 80198b4:	781b      	ldrb	r3, [r3, #0]
 80198b6:	00da      	lsls	r2, r3, #3
 80198b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80198ba:	18d3      	adds	r3, r2, r3
 80198bc:	4abc      	ldr	r2, [pc, #752]	@ (8019bb0 <USB_EPStartXfer+0xaa4>)
 80198be:	4694      	mov	ip, r2
 80198c0:	4463      	add	r3, ip
 80198c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80198c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198c6:	881b      	ldrh	r3, [r3, #0]
 80198c8:	b29b      	uxth	r3, r3
 80198ca:	059b      	lsls	r3, r3, #22
 80198cc:	0d9b      	lsrs	r3, r3, #22
 80198ce:	b29a      	uxth	r2, r3
 80198d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198d2:	801a      	strh	r2, [r3, #0]
 80198d4:	1d7b      	adds	r3, r7, #5
 80198d6:	33ff      	adds	r3, #255	@ 0xff
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	2b3e      	cmp	r3, #62	@ 0x3e
 80198dc:	d922      	bls.n	8019924 <USB_EPStartXfer+0x818>
 80198de:	1d7b      	adds	r3, r7, #5
 80198e0:	33ff      	adds	r3, #255	@ 0xff
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	095b      	lsrs	r3, r3, #5
 80198e6:	21f0      	movs	r1, #240	@ 0xf0
 80198e8:	187a      	adds	r2, r7, r1
 80198ea:	6013      	str	r3, [r2, #0]
 80198ec:	1d7b      	adds	r3, r7, #5
 80198ee:	33ff      	adds	r3, #255	@ 0xff
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	221f      	movs	r2, #31
 80198f4:	4013      	ands	r3, r2
 80198f6:	d104      	bne.n	8019902 <USB_EPStartXfer+0x7f6>
 80198f8:	187b      	adds	r3, r7, r1
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	3b01      	subs	r3, #1
 80198fe:	187a      	adds	r2, r7, r1
 8019900:	6013      	str	r3, [r2, #0]
 8019902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019904:	881b      	ldrh	r3, [r3, #0]
 8019906:	b29a      	uxth	r2, r3
 8019908:	23f0      	movs	r3, #240	@ 0xf0
 801990a:	18fb      	adds	r3, r7, r3
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	b29b      	uxth	r3, r3
 8019910:	029b      	lsls	r3, r3, #10
 8019912:	b29b      	uxth	r3, r3
 8019914:	4313      	orrs	r3, r2
 8019916:	b29b      	uxth	r3, r3
 8019918:	4aa6      	ldr	r2, [pc, #664]	@ (8019bb4 <USB_EPStartXfer+0xaa8>)
 801991a:	4313      	orrs	r3, r2
 801991c:	b29a      	uxth	r2, r3
 801991e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019920:	801a      	strh	r2, [r3, #0]
 8019922:	e048      	b.n	80199b6 <USB_EPStartXfer+0x8aa>
 8019924:	1d7b      	adds	r3, r7, #5
 8019926:	33ff      	adds	r3, #255	@ 0xff
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d108      	bne.n	8019940 <USB_EPStartXfer+0x834>
 801992e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019930:	881b      	ldrh	r3, [r3, #0]
 8019932:	b29b      	uxth	r3, r3
 8019934:	4a9f      	ldr	r2, [pc, #636]	@ (8019bb4 <USB_EPStartXfer+0xaa8>)
 8019936:	4313      	orrs	r3, r2
 8019938:	b29a      	uxth	r2, r3
 801993a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801993c:	801a      	strh	r2, [r3, #0]
 801993e:	e03a      	b.n	80199b6 <USB_EPStartXfer+0x8aa>
 8019940:	1d7b      	adds	r3, r7, #5
 8019942:	33ff      	adds	r3, #255	@ 0xff
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	085b      	lsrs	r3, r3, #1
 8019948:	21f0      	movs	r1, #240	@ 0xf0
 801994a:	187a      	adds	r2, r7, r1
 801994c:	6013      	str	r3, [r2, #0]
 801994e:	1d7b      	adds	r3, r7, #5
 8019950:	33ff      	adds	r3, #255	@ 0xff
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	2201      	movs	r2, #1
 8019956:	4013      	ands	r3, r2
 8019958:	d004      	beq.n	8019964 <USB_EPStartXfer+0x858>
 801995a:	187b      	adds	r3, r7, r1
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	3301      	adds	r3, #1
 8019960:	187a      	adds	r2, r7, r1
 8019962:	6013      	str	r3, [r2, #0]
 8019964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019966:	881b      	ldrh	r3, [r3, #0]
 8019968:	b29a      	uxth	r2, r3
 801996a:	23f0      	movs	r3, #240	@ 0xf0
 801996c:	18fb      	adds	r3, r7, r3
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	b29b      	uxth	r3, r3
 8019972:	029b      	lsls	r3, r3, #10
 8019974:	b29b      	uxth	r3, r3
 8019976:	4313      	orrs	r3, r2
 8019978:	b29a      	uxth	r2, r3
 801997a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801997c:	801a      	strh	r2, [r3, #0]
 801997e:	e01a      	b.n	80199b6 <USB_EPStartXfer+0x8aa>
 8019980:	683b      	ldr	r3, [r7, #0]
 8019982:	785b      	ldrb	r3, [r3, #1]
 8019984:	2b01      	cmp	r3, #1
 8019986:	d116      	bne.n	80199b6 <USB_EPStartXfer+0x8aa>
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	2250      	movs	r2, #80	@ 0x50
 801998c:	5a9b      	ldrh	r3, [r3, r2]
 801998e:	b29b      	uxth	r3, r3
 8019990:	001a      	movs	r2, r3
 8019992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019994:	189b      	adds	r3, r3, r2
 8019996:	673b      	str	r3, [r7, #112]	@ 0x70
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	00da      	lsls	r2, r3, #3
 801999e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80199a0:	18d3      	adds	r3, r2, r3
 80199a2:	4a83      	ldr	r2, [pc, #524]	@ (8019bb0 <USB_EPStartXfer+0xaa4>)
 80199a4:	4694      	mov	ip, r2
 80199a6:	4463      	add	r3, ip
 80199a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80199aa:	1d7b      	adds	r3, r7, #5
 80199ac:	33ff      	adds	r3, #255	@ 0xff
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	b29a      	uxth	r2, r3
 80199b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80199b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80199b6:	2076      	movs	r0, #118	@ 0x76
 80199b8:	183b      	adds	r3, r7, r0
 80199ba:	683a      	ldr	r2, [r7, #0]
 80199bc:	8952      	ldrh	r2, [r2, #10]
 80199be:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80199c0:	683b      	ldr	r3, [r7, #0]
 80199c2:	6959      	ldr	r1, [r3, #20]
 80199c4:	1d7b      	adds	r3, r7, #5
 80199c6:	33ff      	adds	r3, #255	@ 0xff
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	b29c      	uxth	r4, r3
 80199cc:	183b      	adds	r3, r7, r0
 80199ce:	881a      	ldrh	r2, [r3, #0]
 80199d0:	6878      	ldr	r0, [r7, #4]
 80199d2:	0023      	movs	r3, r4
 80199d4:	f000 fe0c 	bl	801a5f0 <USB_WritePMA>
 80199d8:	e0ab      	b.n	8019b32 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80199da:	683b      	ldr	r3, [r7, #0]
 80199dc:	785b      	ldrb	r3, [r3, #1]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d000      	beq.n	80199e4 <USB_EPStartXfer+0x8d8>
 80199e2:	e070      	b.n	8019ac6 <USB_EPStartXfer+0x9ba>
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	2250      	movs	r2, #80	@ 0x50
 80199ec:	5a9b      	ldrh	r3, [r3, r2]
 80199ee:	b29b      	uxth	r3, r3
 80199f0:	001a      	movs	r2, r3
 80199f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80199f4:	189b      	adds	r3, r3, r2
 80199f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80199f8:	683b      	ldr	r3, [r7, #0]
 80199fa:	781b      	ldrb	r3, [r3, #0]
 80199fc:	00da      	lsls	r2, r3, #3
 80199fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019a00:	18d3      	adds	r3, r2, r3
 8019a02:	4a6d      	ldr	r2, [pc, #436]	@ (8019bb8 <USB_EPStartXfer+0xaac>)
 8019a04:	4694      	mov	ip, r2
 8019a06:	4463      	add	r3, ip
 8019a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019a0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a0c:	881b      	ldrh	r3, [r3, #0]
 8019a0e:	b29b      	uxth	r3, r3
 8019a10:	059b      	lsls	r3, r3, #22
 8019a12:	0d9b      	lsrs	r3, r3, #22
 8019a14:	b29a      	uxth	r2, r3
 8019a16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a18:	801a      	strh	r2, [r3, #0]
 8019a1a:	1d7b      	adds	r3, r7, #5
 8019a1c:	33ff      	adds	r3, #255	@ 0xff
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8019a22:	d922      	bls.n	8019a6a <USB_EPStartXfer+0x95e>
 8019a24:	1d7b      	adds	r3, r7, #5
 8019a26:	33ff      	adds	r3, #255	@ 0xff
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	095b      	lsrs	r3, r3, #5
 8019a2c:	21ec      	movs	r1, #236	@ 0xec
 8019a2e:	187a      	adds	r2, r7, r1
 8019a30:	6013      	str	r3, [r2, #0]
 8019a32:	1d7b      	adds	r3, r7, #5
 8019a34:	33ff      	adds	r3, #255	@ 0xff
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	221f      	movs	r2, #31
 8019a3a:	4013      	ands	r3, r2
 8019a3c:	d104      	bne.n	8019a48 <USB_EPStartXfer+0x93c>
 8019a3e:	187b      	adds	r3, r7, r1
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	3b01      	subs	r3, #1
 8019a44:	187a      	adds	r2, r7, r1
 8019a46:	6013      	str	r3, [r2, #0]
 8019a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a4a:	881b      	ldrh	r3, [r3, #0]
 8019a4c:	b29a      	uxth	r2, r3
 8019a4e:	23ec      	movs	r3, #236	@ 0xec
 8019a50:	18fb      	adds	r3, r7, r3
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	b29b      	uxth	r3, r3
 8019a56:	029b      	lsls	r3, r3, #10
 8019a58:	b29b      	uxth	r3, r3
 8019a5a:	4313      	orrs	r3, r2
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	4a55      	ldr	r2, [pc, #340]	@ (8019bb4 <USB_EPStartXfer+0xaa8>)
 8019a60:	4313      	orrs	r3, r2
 8019a62:	b29a      	uxth	r2, r3
 8019a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a66:	801a      	strh	r2, [r3, #0]
 8019a68:	e052      	b.n	8019b10 <USB_EPStartXfer+0xa04>
 8019a6a:	1d7b      	adds	r3, r7, #5
 8019a6c:	33ff      	adds	r3, #255	@ 0xff
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d108      	bne.n	8019a86 <USB_EPStartXfer+0x97a>
 8019a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a76:	881b      	ldrh	r3, [r3, #0]
 8019a78:	b29b      	uxth	r3, r3
 8019a7a:	4a4e      	ldr	r2, [pc, #312]	@ (8019bb4 <USB_EPStartXfer+0xaa8>)
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	b29a      	uxth	r2, r3
 8019a80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019a82:	801a      	strh	r2, [r3, #0]
 8019a84:	e044      	b.n	8019b10 <USB_EPStartXfer+0xa04>
 8019a86:	1d7b      	adds	r3, r7, #5
 8019a88:	33ff      	adds	r3, #255	@ 0xff
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	085b      	lsrs	r3, r3, #1
 8019a8e:	21ec      	movs	r1, #236	@ 0xec
 8019a90:	187a      	adds	r2, r7, r1
 8019a92:	6013      	str	r3, [r2, #0]
 8019a94:	1d7b      	adds	r3, r7, #5
 8019a96:	33ff      	adds	r3, #255	@ 0xff
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	2201      	movs	r2, #1
 8019a9c:	4013      	ands	r3, r2
 8019a9e:	d004      	beq.n	8019aaa <USB_EPStartXfer+0x99e>
 8019aa0:	187b      	adds	r3, r7, r1
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	187a      	adds	r2, r7, r1
 8019aa8:	6013      	str	r3, [r2, #0]
 8019aaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019aac:	881b      	ldrh	r3, [r3, #0]
 8019aae:	b29a      	uxth	r2, r3
 8019ab0:	23ec      	movs	r3, #236	@ 0xec
 8019ab2:	18fb      	adds	r3, r7, r3
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	b29b      	uxth	r3, r3
 8019ab8:	029b      	lsls	r3, r3, #10
 8019aba:	b29b      	uxth	r3, r3
 8019abc:	4313      	orrs	r3, r2
 8019abe:	b29a      	uxth	r2, r3
 8019ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019ac2:	801a      	strh	r2, [r3, #0]
 8019ac4:	e024      	b.n	8019b10 <USB_EPStartXfer+0xa04>
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	785b      	ldrb	r3, [r3, #1]
 8019aca:	2b01      	cmp	r3, #1
 8019acc:	d120      	bne.n	8019b10 <USB_EPStartXfer+0xa04>
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	2184      	movs	r1, #132	@ 0x84
 8019ad2:	187a      	adds	r2, r7, r1
 8019ad4:	6013      	str	r3, [r2, #0]
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	2250      	movs	r2, #80	@ 0x50
 8019ada:	5a9b      	ldrh	r3, [r3, r2]
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	001a      	movs	r2, r3
 8019ae0:	187b      	adds	r3, r7, r1
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	189b      	adds	r3, r3, r2
 8019ae6:	187a      	adds	r2, r7, r1
 8019ae8:	6013      	str	r3, [r2, #0]
 8019aea:	683b      	ldr	r3, [r7, #0]
 8019aec:	781b      	ldrb	r3, [r3, #0]
 8019aee:	00da      	lsls	r2, r3, #3
 8019af0:	187b      	adds	r3, r7, r1
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	18d3      	adds	r3, r2, r3
 8019af6:	4a30      	ldr	r2, [pc, #192]	@ (8019bb8 <USB_EPStartXfer+0xaac>)
 8019af8:	4694      	mov	ip, r2
 8019afa:	4463      	add	r3, ip
 8019afc:	2180      	movs	r1, #128	@ 0x80
 8019afe:	187a      	adds	r2, r7, r1
 8019b00:	6013      	str	r3, [r2, #0]
 8019b02:	1d7b      	adds	r3, r7, #5
 8019b04:	33ff      	adds	r3, #255	@ 0xff
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	b29a      	uxth	r2, r3
 8019b0a:	187b      	adds	r3, r7, r1
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019b10:	2076      	movs	r0, #118	@ 0x76
 8019b12:	183b      	adds	r3, r7, r0
 8019b14:	683a      	ldr	r2, [r7, #0]
 8019b16:	8912      	ldrh	r2, [r2, #8]
 8019b18:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	6959      	ldr	r1, [r3, #20]
 8019b1e:	1d7b      	adds	r3, r7, #5
 8019b20:	33ff      	adds	r3, #255	@ 0xff
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	b29c      	uxth	r4, r3
 8019b26:	183b      	adds	r3, r7, r0
 8019b28:	881a      	ldrh	r2, [r3, #0]
 8019b2a:	6878      	ldr	r0, [r7, #4]
 8019b2c:	0023      	movs	r3, r4
 8019b2e:	f000 fd5f 	bl	801a5f0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8019b32:	687a      	ldr	r2, [r7, #4]
 8019b34:	683b      	ldr	r3, [r7, #0]
 8019b36:	781b      	ldrb	r3, [r3, #0]
 8019b38:	009b      	lsls	r3, r3, #2
 8019b3a:	18d3      	adds	r3, r2, r3
 8019b3c:	881b      	ldrh	r3, [r3, #0]
 8019b3e:	b29a      	uxth	r2, r3
 8019b40:	200a      	movs	r0, #10
 8019b42:	183b      	adds	r3, r7, r0
 8019b44:	491d      	ldr	r1, [pc, #116]	@ (8019bbc <USB_EPStartXfer+0xab0>)
 8019b46:	400a      	ands	r2, r1
 8019b48:	801a      	strh	r2, [r3, #0]
 8019b4a:	183b      	adds	r3, r7, r0
 8019b4c:	183a      	adds	r2, r7, r0
 8019b4e:	8812      	ldrh	r2, [r2, #0]
 8019b50:	2110      	movs	r1, #16
 8019b52:	404a      	eors	r2, r1
 8019b54:	801a      	strh	r2, [r3, #0]
 8019b56:	183b      	adds	r3, r7, r0
 8019b58:	183a      	adds	r2, r7, r0
 8019b5a:	8812      	ldrh	r2, [r2, #0]
 8019b5c:	2120      	movs	r1, #32
 8019b5e:	404a      	eors	r2, r1
 8019b60:	801a      	strh	r2, [r3, #0]
 8019b62:	687a      	ldr	r2, [r7, #4]
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	781b      	ldrb	r3, [r3, #0]
 8019b68:	009b      	lsls	r3, r3, #2
 8019b6a:	18d3      	adds	r3, r2, r3
 8019b6c:	183a      	adds	r2, r7, r0
 8019b6e:	8812      	ldrh	r2, [r2, #0]
 8019b70:	4913      	ldr	r1, [pc, #76]	@ (8019bc0 <USB_EPStartXfer+0xab4>)
 8019b72:	430a      	orrs	r2, r1
 8019b74:	b292      	uxth	r2, r2
 8019b76:	801a      	strh	r2, [r3, #0]
 8019b78:	f000 fbf4 	bl	801a364 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019b7c:	683b      	ldr	r3, [r7, #0]
 8019b7e:	7b1b      	ldrb	r3, [r3, #12]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d000      	beq.n	8019b86 <USB_EPStartXfer+0xa7a>
 8019b84:	e0a9      	b.n	8019cda <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	699a      	ldr	r2, [r3, #24]
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	691b      	ldr	r3, [r3, #16]
 8019b8e:	429a      	cmp	r2, r3
 8019b90:	d918      	bls.n	8019bc4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	691b      	ldr	r3, [r3, #16]
 8019b96:	1d7a      	adds	r2, r7, #5
 8019b98:	32ff      	adds	r2, #255	@ 0xff
 8019b9a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019b9c:	683b      	ldr	r3, [r7, #0]
 8019b9e:	699a      	ldr	r2, [r3, #24]
 8019ba0:	1d7b      	adds	r3, r7, #5
 8019ba2:	33ff      	adds	r3, #255	@ 0xff
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	1ad2      	subs	r2, r2, r3
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	619a      	str	r2, [r3, #24]
 8019bac:	e012      	b.n	8019bd4 <USB_EPStartXfer+0xac8>
 8019bae:	46c0      	nop			@ (mov r8, r8)
 8019bb0:	00000406 	.word	0x00000406
 8019bb4:	ffff8000 	.word	0xffff8000
 8019bb8:	00000402 	.word	0x00000402
 8019bbc:	ffff8fbf 	.word	0xffff8fbf
 8019bc0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8019bc4:	683b      	ldr	r3, [r7, #0]
 8019bc6:	699b      	ldr	r3, [r3, #24]
 8019bc8:	1d7a      	adds	r2, r7, #5
 8019bca:	32ff      	adds	r2, #255	@ 0xff
 8019bcc:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	2200      	movs	r2, #0
 8019bd2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2190      	movs	r1, #144	@ 0x90
 8019bd8:	187a      	adds	r2, r7, r1
 8019bda:	6013      	str	r3, [r2, #0]
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2250      	movs	r2, #80	@ 0x50
 8019be0:	5a9b      	ldrh	r3, [r3, r2]
 8019be2:	b29b      	uxth	r3, r3
 8019be4:	001a      	movs	r2, r3
 8019be6:	187b      	adds	r3, r7, r1
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	189b      	adds	r3, r3, r2
 8019bec:	187a      	adds	r2, r7, r1
 8019bee:	6013      	str	r3, [r2, #0]
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	781b      	ldrb	r3, [r3, #0]
 8019bf4:	00da      	lsls	r2, r3, #3
 8019bf6:	187b      	adds	r3, r7, r1
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	18d3      	adds	r3, r2, r3
 8019bfc:	4acf      	ldr	r2, [pc, #828]	@ (8019f3c <USB_EPStartXfer+0xe30>)
 8019bfe:	4694      	mov	ip, r2
 8019c00:	4463      	add	r3, ip
 8019c02:	218c      	movs	r1, #140	@ 0x8c
 8019c04:	187a      	adds	r2, r7, r1
 8019c06:	6013      	str	r3, [r2, #0]
 8019c08:	187b      	adds	r3, r7, r1
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	881b      	ldrh	r3, [r3, #0]
 8019c0e:	b29b      	uxth	r3, r3
 8019c10:	059b      	lsls	r3, r3, #22
 8019c12:	0d9b      	lsrs	r3, r3, #22
 8019c14:	b29a      	uxth	r2, r3
 8019c16:	187b      	adds	r3, r7, r1
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	801a      	strh	r2, [r3, #0]
 8019c1c:	1d7b      	adds	r3, r7, #5
 8019c1e:	33ff      	adds	r3, #255	@ 0xff
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c24:	d925      	bls.n	8019c72 <USB_EPStartXfer+0xb66>
 8019c26:	1d7b      	adds	r3, r7, #5
 8019c28:	33ff      	adds	r3, #255	@ 0xff
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	095b      	lsrs	r3, r3, #5
 8019c2e:	21e8      	movs	r1, #232	@ 0xe8
 8019c30:	187a      	adds	r2, r7, r1
 8019c32:	6013      	str	r3, [r2, #0]
 8019c34:	1d7b      	adds	r3, r7, #5
 8019c36:	33ff      	adds	r3, #255	@ 0xff
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	221f      	movs	r2, #31
 8019c3c:	4013      	ands	r3, r2
 8019c3e:	d104      	bne.n	8019c4a <USB_EPStartXfer+0xb3e>
 8019c40:	187b      	adds	r3, r7, r1
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	3b01      	subs	r3, #1
 8019c46:	187a      	adds	r2, r7, r1
 8019c48:	6013      	str	r3, [r2, #0]
 8019c4a:	218c      	movs	r1, #140	@ 0x8c
 8019c4c:	187b      	adds	r3, r7, r1
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	881b      	ldrh	r3, [r3, #0]
 8019c52:	b29a      	uxth	r2, r3
 8019c54:	23e8      	movs	r3, #232	@ 0xe8
 8019c56:	18fb      	adds	r3, r7, r3
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	b29b      	uxth	r3, r3
 8019c5c:	029b      	lsls	r3, r3, #10
 8019c5e:	b29b      	uxth	r3, r3
 8019c60:	4313      	orrs	r3, r2
 8019c62:	b29b      	uxth	r3, r3
 8019c64:	4ab6      	ldr	r2, [pc, #728]	@ (8019f40 <USB_EPStartXfer+0xe34>)
 8019c66:	4313      	orrs	r3, r2
 8019c68:	b29a      	uxth	r2, r3
 8019c6a:	187b      	adds	r3, r7, r1
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	801a      	strh	r2, [r3, #0]
 8019c70:	e353      	b.n	801a31a <USB_EPStartXfer+0x120e>
 8019c72:	1d7b      	adds	r3, r7, #5
 8019c74:	33ff      	adds	r3, #255	@ 0xff
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d10b      	bne.n	8019c94 <USB_EPStartXfer+0xb88>
 8019c7c:	218c      	movs	r1, #140	@ 0x8c
 8019c7e:	187b      	adds	r3, r7, r1
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	881b      	ldrh	r3, [r3, #0]
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	4aae      	ldr	r2, [pc, #696]	@ (8019f40 <USB_EPStartXfer+0xe34>)
 8019c88:	4313      	orrs	r3, r2
 8019c8a:	b29a      	uxth	r2, r3
 8019c8c:	187b      	adds	r3, r7, r1
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	801a      	strh	r2, [r3, #0]
 8019c92:	e342      	b.n	801a31a <USB_EPStartXfer+0x120e>
 8019c94:	1d7b      	adds	r3, r7, #5
 8019c96:	33ff      	adds	r3, #255	@ 0xff
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	085b      	lsrs	r3, r3, #1
 8019c9c:	21e8      	movs	r1, #232	@ 0xe8
 8019c9e:	187a      	adds	r2, r7, r1
 8019ca0:	6013      	str	r3, [r2, #0]
 8019ca2:	1d7b      	adds	r3, r7, #5
 8019ca4:	33ff      	adds	r3, #255	@ 0xff
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	2201      	movs	r2, #1
 8019caa:	4013      	ands	r3, r2
 8019cac:	d004      	beq.n	8019cb8 <USB_EPStartXfer+0xbac>
 8019cae:	187b      	adds	r3, r7, r1
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	3301      	adds	r3, #1
 8019cb4:	187a      	adds	r2, r7, r1
 8019cb6:	6013      	str	r3, [r2, #0]
 8019cb8:	218c      	movs	r1, #140	@ 0x8c
 8019cba:	187b      	adds	r3, r7, r1
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	881b      	ldrh	r3, [r3, #0]
 8019cc0:	b29a      	uxth	r2, r3
 8019cc2:	23e8      	movs	r3, #232	@ 0xe8
 8019cc4:	18fb      	adds	r3, r7, r3
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	b29b      	uxth	r3, r3
 8019cca:	029b      	lsls	r3, r3, #10
 8019ccc:	b29b      	uxth	r3, r3
 8019cce:	4313      	orrs	r3, r2
 8019cd0:	b29a      	uxth	r2, r3
 8019cd2:	187b      	adds	r3, r7, r1
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	801a      	strh	r2, [r3, #0]
 8019cd8:	e31f      	b.n	801a31a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	78db      	ldrb	r3, [r3, #3]
 8019cde:	2b02      	cmp	r3, #2
 8019ce0:	d000      	beq.n	8019ce4 <USB_EPStartXfer+0xbd8>
 8019ce2:	e191      	b.n	801a008 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8019ce4:	683b      	ldr	r3, [r7, #0]
 8019ce6:	785b      	ldrb	r3, [r3, #1]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d000      	beq.n	8019cee <USB_EPStartXfer+0xbe2>
 8019cec:	e07c      	b.n	8019de8 <USB_EPStartXfer+0xcdc>
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	21ac      	movs	r1, #172	@ 0xac
 8019cf2:	187a      	adds	r2, r7, r1
 8019cf4:	6013      	str	r3, [r2, #0]
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	2250      	movs	r2, #80	@ 0x50
 8019cfa:	5a9b      	ldrh	r3, [r3, r2]
 8019cfc:	b29b      	uxth	r3, r3
 8019cfe:	001a      	movs	r2, r3
 8019d00:	187b      	adds	r3, r7, r1
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	189b      	adds	r3, r3, r2
 8019d06:	187a      	adds	r2, r7, r1
 8019d08:	6013      	str	r3, [r2, #0]
 8019d0a:	683b      	ldr	r3, [r7, #0]
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	00da      	lsls	r2, r3, #3
 8019d10:	187b      	adds	r3, r7, r1
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	18d3      	adds	r3, r2, r3
 8019d16:	4a8b      	ldr	r2, [pc, #556]	@ (8019f44 <USB_EPStartXfer+0xe38>)
 8019d18:	4694      	mov	ip, r2
 8019d1a:	4463      	add	r3, ip
 8019d1c:	21a8      	movs	r1, #168	@ 0xa8
 8019d1e:	187a      	adds	r2, r7, r1
 8019d20:	6013      	str	r3, [r2, #0]
 8019d22:	187b      	adds	r3, r7, r1
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	881b      	ldrh	r3, [r3, #0]
 8019d28:	b29b      	uxth	r3, r3
 8019d2a:	059b      	lsls	r3, r3, #22
 8019d2c:	0d9b      	lsrs	r3, r3, #22
 8019d2e:	b29a      	uxth	r2, r3
 8019d30:	187b      	adds	r3, r7, r1
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	801a      	strh	r2, [r3, #0]
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	691b      	ldr	r3, [r3, #16]
 8019d3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d3c:	d923      	bls.n	8019d86 <USB_EPStartXfer+0xc7a>
 8019d3e:	683b      	ldr	r3, [r7, #0]
 8019d40:	691b      	ldr	r3, [r3, #16]
 8019d42:	095b      	lsrs	r3, r3, #5
 8019d44:	21e4      	movs	r1, #228	@ 0xe4
 8019d46:	187a      	adds	r2, r7, r1
 8019d48:	6013      	str	r3, [r2, #0]
 8019d4a:	683b      	ldr	r3, [r7, #0]
 8019d4c:	691b      	ldr	r3, [r3, #16]
 8019d4e:	221f      	movs	r2, #31
 8019d50:	4013      	ands	r3, r2
 8019d52:	d104      	bne.n	8019d5e <USB_EPStartXfer+0xc52>
 8019d54:	187b      	adds	r3, r7, r1
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	3b01      	subs	r3, #1
 8019d5a:	187a      	adds	r2, r7, r1
 8019d5c:	6013      	str	r3, [r2, #0]
 8019d5e:	21a8      	movs	r1, #168	@ 0xa8
 8019d60:	187b      	adds	r3, r7, r1
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	881b      	ldrh	r3, [r3, #0]
 8019d66:	b29a      	uxth	r2, r3
 8019d68:	23e4      	movs	r3, #228	@ 0xe4
 8019d6a:	18fb      	adds	r3, r7, r3
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	b29b      	uxth	r3, r3
 8019d70:	029b      	lsls	r3, r3, #10
 8019d72:	b29b      	uxth	r3, r3
 8019d74:	4313      	orrs	r3, r2
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	4a71      	ldr	r2, [pc, #452]	@ (8019f40 <USB_EPStartXfer+0xe34>)
 8019d7a:	4313      	orrs	r3, r2
 8019d7c:	b29a      	uxth	r2, r3
 8019d7e:	187b      	adds	r3, r7, r1
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	801a      	strh	r2, [r3, #0]
 8019d84:	e054      	b.n	8019e30 <USB_EPStartXfer+0xd24>
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	691b      	ldr	r3, [r3, #16]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d10b      	bne.n	8019da6 <USB_EPStartXfer+0xc9a>
 8019d8e:	21a8      	movs	r1, #168	@ 0xa8
 8019d90:	187b      	adds	r3, r7, r1
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	881b      	ldrh	r3, [r3, #0]
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	4a69      	ldr	r2, [pc, #420]	@ (8019f40 <USB_EPStartXfer+0xe34>)
 8019d9a:	4313      	orrs	r3, r2
 8019d9c:	b29a      	uxth	r2, r3
 8019d9e:	187b      	adds	r3, r7, r1
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	801a      	strh	r2, [r3, #0]
 8019da4:	e044      	b.n	8019e30 <USB_EPStartXfer+0xd24>
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	691b      	ldr	r3, [r3, #16]
 8019daa:	085b      	lsrs	r3, r3, #1
 8019dac:	21e4      	movs	r1, #228	@ 0xe4
 8019dae:	187a      	adds	r2, r7, r1
 8019db0:	6013      	str	r3, [r2, #0]
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	691b      	ldr	r3, [r3, #16]
 8019db6:	2201      	movs	r2, #1
 8019db8:	4013      	ands	r3, r2
 8019dba:	d004      	beq.n	8019dc6 <USB_EPStartXfer+0xcba>
 8019dbc:	187b      	adds	r3, r7, r1
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	3301      	adds	r3, #1
 8019dc2:	187a      	adds	r2, r7, r1
 8019dc4:	6013      	str	r3, [r2, #0]
 8019dc6:	21a8      	movs	r1, #168	@ 0xa8
 8019dc8:	187b      	adds	r3, r7, r1
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	881b      	ldrh	r3, [r3, #0]
 8019dce:	b29a      	uxth	r2, r3
 8019dd0:	23e4      	movs	r3, #228	@ 0xe4
 8019dd2:	18fb      	adds	r3, r7, r3
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	029b      	lsls	r3, r3, #10
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	4313      	orrs	r3, r2
 8019dde:	b29a      	uxth	r2, r3
 8019de0:	187b      	adds	r3, r7, r1
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	801a      	strh	r2, [r3, #0]
 8019de6:	e023      	b.n	8019e30 <USB_EPStartXfer+0xd24>
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	785b      	ldrb	r3, [r3, #1]
 8019dec:	2b01      	cmp	r3, #1
 8019dee:	d11f      	bne.n	8019e30 <USB_EPStartXfer+0xd24>
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	21b4      	movs	r1, #180	@ 0xb4
 8019df4:	187a      	adds	r2, r7, r1
 8019df6:	6013      	str	r3, [r2, #0]
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	2250      	movs	r2, #80	@ 0x50
 8019dfc:	5a9b      	ldrh	r3, [r3, r2]
 8019dfe:	b29b      	uxth	r3, r3
 8019e00:	001a      	movs	r2, r3
 8019e02:	187b      	adds	r3, r7, r1
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	189b      	adds	r3, r3, r2
 8019e08:	187a      	adds	r2, r7, r1
 8019e0a:	6013      	str	r3, [r2, #0]
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	00da      	lsls	r2, r3, #3
 8019e12:	187b      	adds	r3, r7, r1
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	18d3      	adds	r3, r2, r3
 8019e18:	4a4a      	ldr	r2, [pc, #296]	@ (8019f44 <USB_EPStartXfer+0xe38>)
 8019e1a:	4694      	mov	ip, r2
 8019e1c:	4463      	add	r3, ip
 8019e1e:	21b0      	movs	r1, #176	@ 0xb0
 8019e20:	187a      	adds	r2, r7, r1
 8019e22:	6013      	str	r3, [r2, #0]
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	691b      	ldr	r3, [r3, #16]
 8019e28:	b29a      	uxth	r2, r3
 8019e2a:	187b      	adds	r3, r7, r1
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	801a      	strh	r2, [r3, #0]
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	22a4      	movs	r2, #164	@ 0xa4
 8019e34:	18ba      	adds	r2, r7, r2
 8019e36:	6013      	str	r3, [r2, #0]
 8019e38:	683b      	ldr	r3, [r7, #0]
 8019e3a:	785b      	ldrb	r3, [r3, #1]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d000      	beq.n	8019e42 <USB_EPStartXfer+0xd36>
 8019e40:	e082      	b.n	8019f48 <USB_EPStartXfer+0xe3c>
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	219c      	movs	r1, #156	@ 0x9c
 8019e46:	187a      	adds	r2, r7, r1
 8019e48:	6013      	str	r3, [r2, #0]
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	2250      	movs	r2, #80	@ 0x50
 8019e4e:	5a9b      	ldrh	r3, [r3, r2]
 8019e50:	b29b      	uxth	r3, r3
 8019e52:	001a      	movs	r2, r3
 8019e54:	187b      	adds	r3, r7, r1
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	189b      	adds	r3, r3, r2
 8019e5a:	187a      	adds	r2, r7, r1
 8019e5c:	6013      	str	r3, [r2, #0]
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	781b      	ldrb	r3, [r3, #0]
 8019e62:	00da      	lsls	r2, r3, #3
 8019e64:	187b      	adds	r3, r7, r1
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	18d3      	adds	r3, r2, r3
 8019e6a:	4a34      	ldr	r2, [pc, #208]	@ (8019f3c <USB_EPStartXfer+0xe30>)
 8019e6c:	4694      	mov	ip, r2
 8019e6e:	4463      	add	r3, ip
 8019e70:	2198      	movs	r1, #152	@ 0x98
 8019e72:	187a      	adds	r2, r7, r1
 8019e74:	6013      	str	r3, [r2, #0]
 8019e76:	187b      	adds	r3, r7, r1
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	881b      	ldrh	r3, [r3, #0]
 8019e7c:	b29b      	uxth	r3, r3
 8019e7e:	059b      	lsls	r3, r3, #22
 8019e80:	0d9b      	lsrs	r3, r3, #22
 8019e82:	b29a      	uxth	r2, r3
 8019e84:	187b      	adds	r3, r7, r1
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	801a      	strh	r2, [r3, #0]
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	691b      	ldr	r3, [r3, #16]
 8019e8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e90:	d923      	bls.n	8019eda <USB_EPStartXfer+0xdce>
 8019e92:	683b      	ldr	r3, [r7, #0]
 8019e94:	691b      	ldr	r3, [r3, #16]
 8019e96:	095b      	lsrs	r3, r3, #5
 8019e98:	21e0      	movs	r1, #224	@ 0xe0
 8019e9a:	187a      	adds	r2, r7, r1
 8019e9c:	6013      	str	r3, [r2, #0]
 8019e9e:	683b      	ldr	r3, [r7, #0]
 8019ea0:	691b      	ldr	r3, [r3, #16]
 8019ea2:	221f      	movs	r2, #31
 8019ea4:	4013      	ands	r3, r2
 8019ea6:	d104      	bne.n	8019eb2 <USB_EPStartXfer+0xda6>
 8019ea8:	187b      	adds	r3, r7, r1
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	3b01      	subs	r3, #1
 8019eae:	187a      	adds	r2, r7, r1
 8019eb0:	6013      	str	r3, [r2, #0]
 8019eb2:	2198      	movs	r1, #152	@ 0x98
 8019eb4:	187b      	adds	r3, r7, r1
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	881b      	ldrh	r3, [r3, #0]
 8019eba:	b29a      	uxth	r2, r3
 8019ebc:	23e0      	movs	r3, #224	@ 0xe0
 8019ebe:	18fb      	adds	r3, r7, r3
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	b29b      	uxth	r3, r3
 8019ec4:	029b      	lsls	r3, r3, #10
 8019ec6:	b29b      	uxth	r3, r3
 8019ec8:	4313      	orrs	r3, r2
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8019f40 <USB_EPStartXfer+0xe34>)
 8019ece:	4313      	orrs	r3, r2
 8019ed0:	b29a      	uxth	r2, r3
 8019ed2:	187b      	adds	r3, r7, r1
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	801a      	strh	r2, [r3, #0]
 8019ed8:	e057      	b.n	8019f8a <USB_EPStartXfer+0xe7e>
 8019eda:	683b      	ldr	r3, [r7, #0]
 8019edc:	691b      	ldr	r3, [r3, #16]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d10b      	bne.n	8019efa <USB_EPStartXfer+0xdee>
 8019ee2:	2198      	movs	r1, #152	@ 0x98
 8019ee4:	187b      	adds	r3, r7, r1
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	881b      	ldrh	r3, [r3, #0]
 8019eea:	b29b      	uxth	r3, r3
 8019eec:	4a14      	ldr	r2, [pc, #80]	@ (8019f40 <USB_EPStartXfer+0xe34>)
 8019eee:	4313      	orrs	r3, r2
 8019ef0:	b29a      	uxth	r2, r3
 8019ef2:	187b      	adds	r3, r7, r1
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	801a      	strh	r2, [r3, #0]
 8019ef8:	e047      	b.n	8019f8a <USB_EPStartXfer+0xe7e>
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	691b      	ldr	r3, [r3, #16]
 8019efe:	085b      	lsrs	r3, r3, #1
 8019f00:	21e0      	movs	r1, #224	@ 0xe0
 8019f02:	187a      	adds	r2, r7, r1
 8019f04:	6013      	str	r3, [r2, #0]
 8019f06:	683b      	ldr	r3, [r7, #0]
 8019f08:	691b      	ldr	r3, [r3, #16]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	4013      	ands	r3, r2
 8019f0e:	d004      	beq.n	8019f1a <USB_EPStartXfer+0xe0e>
 8019f10:	187b      	adds	r3, r7, r1
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	3301      	adds	r3, #1
 8019f16:	187a      	adds	r2, r7, r1
 8019f18:	6013      	str	r3, [r2, #0]
 8019f1a:	2198      	movs	r1, #152	@ 0x98
 8019f1c:	187b      	adds	r3, r7, r1
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	881b      	ldrh	r3, [r3, #0]
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	23e0      	movs	r3, #224	@ 0xe0
 8019f26:	18fb      	adds	r3, r7, r3
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	b29b      	uxth	r3, r3
 8019f2c:	029b      	lsls	r3, r3, #10
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	4313      	orrs	r3, r2
 8019f32:	b29a      	uxth	r2, r3
 8019f34:	187b      	adds	r3, r7, r1
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	801a      	strh	r2, [r3, #0]
 8019f3a:	e026      	b.n	8019f8a <USB_EPStartXfer+0xe7e>
 8019f3c:	00000406 	.word	0x00000406
 8019f40:	ffff8000 	.word	0xffff8000
 8019f44:	00000402 	.word	0x00000402
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	785b      	ldrb	r3, [r3, #1]
 8019f4c:	2b01      	cmp	r3, #1
 8019f4e:	d11c      	bne.n	8019f8a <USB_EPStartXfer+0xe7e>
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	2250      	movs	r2, #80	@ 0x50
 8019f54:	5a9b      	ldrh	r3, [r3, r2]
 8019f56:	b29b      	uxth	r3, r3
 8019f58:	001a      	movs	r2, r3
 8019f5a:	21a4      	movs	r1, #164	@ 0xa4
 8019f5c:	187b      	adds	r3, r7, r1
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	189b      	adds	r3, r3, r2
 8019f62:	187a      	adds	r2, r7, r1
 8019f64:	6013      	str	r3, [r2, #0]
 8019f66:	683b      	ldr	r3, [r7, #0]
 8019f68:	781b      	ldrb	r3, [r3, #0]
 8019f6a:	00da      	lsls	r2, r3, #3
 8019f6c:	187b      	adds	r3, r7, r1
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	18d3      	adds	r3, r2, r3
 8019f72:	4ad2      	ldr	r2, [pc, #840]	@ (801a2bc <USB_EPStartXfer+0x11b0>)
 8019f74:	4694      	mov	ip, r2
 8019f76:	4463      	add	r3, ip
 8019f78:	21a0      	movs	r1, #160	@ 0xa0
 8019f7a:	187a      	adds	r2, r7, r1
 8019f7c:	6013      	str	r3, [r2, #0]
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	691b      	ldr	r3, [r3, #16]
 8019f82:	b29a      	uxth	r2, r3
 8019f84:	187b      	adds	r3, r7, r1
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8019f8a:	683b      	ldr	r3, [r7, #0]
 8019f8c:	69db      	ldr	r3, [r3, #28]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d100      	bne.n	8019f94 <USB_EPStartXfer+0xe88>
 8019f92:	e1c2      	b.n	801a31a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8019f94:	687a      	ldr	r2, [r7, #4]
 8019f96:	683b      	ldr	r3, [r7, #0]
 8019f98:	781b      	ldrb	r3, [r3, #0]
 8019f9a:	009b      	lsls	r3, r3, #2
 8019f9c:	18d2      	adds	r2, r2, r3
 8019f9e:	2196      	movs	r1, #150	@ 0x96
 8019fa0:	187b      	adds	r3, r7, r1
 8019fa2:	8812      	ldrh	r2, [r2, #0]
 8019fa4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019fa6:	187b      	adds	r3, r7, r1
 8019fa8:	881a      	ldrh	r2, [r3, #0]
 8019faa:	2380      	movs	r3, #128	@ 0x80
 8019fac:	01db      	lsls	r3, r3, #7
 8019fae:	4013      	ands	r3, r2
 8019fb0:	d004      	beq.n	8019fbc <USB_EPStartXfer+0xeb0>
 8019fb2:	187b      	adds	r3, r7, r1
 8019fb4:	881b      	ldrh	r3, [r3, #0]
 8019fb6:	2240      	movs	r2, #64	@ 0x40
 8019fb8:	4013      	ands	r3, r2
 8019fba:	d10d      	bne.n	8019fd8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019fbc:	2196      	movs	r1, #150	@ 0x96
 8019fbe:	187b      	adds	r3, r7, r1
 8019fc0:	881a      	ldrh	r2, [r3, #0]
 8019fc2:	2380      	movs	r3, #128	@ 0x80
 8019fc4:	01db      	lsls	r3, r3, #7
 8019fc6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019fc8:	d000      	beq.n	8019fcc <USB_EPStartXfer+0xec0>
 8019fca:	e1a6      	b.n	801a31a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019fcc:	187b      	adds	r3, r7, r1
 8019fce:	881b      	ldrh	r3, [r3, #0]
 8019fd0:	2240      	movs	r2, #64	@ 0x40
 8019fd2:	4013      	ands	r3, r2
 8019fd4:	d000      	beq.n	8019fd8 <USB_EPStartXfer+0xecc>
 8019fd6:	e1a0      	b.n	801a31a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8019fd8:	687a      	ldr	r2, [r7, #4]
 8019fda:	683b      	ldr	r3, [r7, #0]
 8019fdc:	781b      	ldrb	r3, [r3, #0]
 8019fde:	009b      	lsls	r3, r3, #2
 8019fe0:	18d3      	adds	r3, r2, r3
 8019fe2:	881b      	ldrh	r3, [r3, #0]
 8019fe4:	b29a      	uxth	r2, r3
 8019fe6:	2094      	movs	r0, #148	@ 0x94
 8019fe8:	183b      	adds	r3, r7, r0
 8019fea:	49b5      	ldr	r1, [pc, #724]	@ (801a2c0 <USB_EPStartXfer+0x11b4>)
 8019fec:	400a      	ands	r2, r1
 8019fee:	801a      	strh	r2, [r3, #0]
 8019ff0:	687a      	ldr	r2, [r7, #4]
 8019ff2:	683b      	ldr	r3, [r7, #0]
 8019ff4:	781b      	ldrb	r3, [r3, #0]
 8019ff6:	009b      	lsls	r3, r3, #2
 8019ff8:	18d3      	adds	r3, r2, r3
 8019ffa:	183a      	adds	r2, r7, r0
 8019ffc:	8812      	ldrh	r2, [r2, #0]
 8019ffe:	49b1      	ldr	r1, [pc, #708]	@ (801a2c4 <USB_EPStartXfer+0x11b8>)
 801a000:	430a      	orrs	r2, r1
 801a002:	b292      	uxth	r2, r2
 801a004:	801a      	strh	r2, [r3, #0]
 801a006:	e188      	b.n	801a31a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a008:	683b      	ldr	r3, [r7, #0]
 801a00a:	78db      	ldrb	r3, [r3, #3]
 801a00c:	2b01      	cmp	r3, #1
 801a00e:	d000      	beq.n	801a012 <USB_EPStartXfer+0xf06>
 801a010:	e181      	b.n	801a316 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	699a      	ldr	r2, [r3, #24]
 801a016:	683b      	ldr	r3, [r7, #0]
 801a018:	691b      	ldr	r3, [r3, #16]
 801a01a:	429a      	cmp	r2, r3
 801a01c:	d90d      	bls.n	801a03a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a01e:	683b      	ldr	r3, [r7, #0]
 801a020:	691b      	ldr	r3, [r3, #16]
 801a022:	1d7a      	adds	r2, r7, #5
 801a024:	32ff      	adds	r2, #255	@ 0xff
 801a026:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a028:	683b      	ldr	r3, [r7, #0]
 801a02a:	699a      	ldr	r2, [r3, #24]
 801a02c:	1d7b      	adds	r3, r7, #5
 801a02e:	33ff      	adds	r3, #255	@ 0xff
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	1ad2      	subs	r2, r2, r3
 801a034:	683b      	ldr	r3, [r7, #0]
 801a036:	619a      	str	r2, [r3, #24]
 801a038:	e007      	b.n	801a04a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	699b      	ldr	r3, [r3, #24]
 801a03e:	1d7a      	adds	r2, r7, #5
 801a040:	32ff      	adds	r2, #255	@ 0xff
 801a042:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	2200      	movs	r2, #0
 801a048:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	785b      	ldrb	r3, [r3, #1]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d000      	beq.n	801a054 <USB_EPStartXfer+0xf48>
 801a052:	e082      	b.n	801a15a <USB_EPStartXfer+0x104e>
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	21cc      	movs	r1, #204	@ 0xcc
 801a058:	187a      	adds	r2, r7, r1
 801a05a:	6013      	str	r3, [r2, #0]
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2250      	movs	r2, #80	@ 0x50
 801a060:	5a9b      	ldrh	r3, [r3, r2]
 801a062:	b29b      	uxth	r3, r3
 801a064:	001a      	movs	r2, r3
 801a066:	187b      	adds	r3, r7, r1
 801a068:	681b      	ldr	r3, [r3, #0]
 801a06a:	189b      	adds	r3, r3, r2
 801a06c:	187a      	adds	r2, r7, r1
 801a06e:	6013      	str	r3, [r2, #0]
 801a070:	683b      	ldr	r3, [r7, #0]
 801a072:	781b      	ldrb	r3, [r3, #0]
 801a074:	00da      	lsls	r2, r3, #3
 801a076:	187b      	adds	r3, r7, r1
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	18d3      	adds	r3, r2, r3
 801a07c:	4a92      	ldr	r2, [pc, #584]	@ (801a2c8 <USB_EPStartXfer+0x11bc>)
 801a07e:	4694      	mov	ip, r2
 801a080:	4463      	add	r3, ip
 801a082:	21c8      	movs	r1, #200	@ 0xc8
 801a084:	187a      	adds	r2, r7, r1
 801a086:	6013      	str	r3, [r2, #0]
 801a088:	187b      	adds	r3, r7, r1
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	881b      	ldrh	r3, [r3, #0]
 801a08e:	b29b      	uxth	r3, r3
 801a090:	059b      	lsls	r3, r3, #22
 801a092:	0d9b      	lsrs	r3, r3, #22
 801a094:	b29a      	uxth	r2, r3
 801a096:	187b      	adds	r3, r7, r1
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	801a      	strh	r2, [r3, #0]
 801a09c:	1d7b      	adds	r3, r7, #5
 801a09e:	33ff      	adds	r3, #255	@ 0xff
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0a4:	d925      	bls.n	801a0f2 <USB_EPStartXfer+0xfe6>
 801a0a6:	1d7b      	adds	r3, r7, #5
 801a0a8:	33ff      	adds	r3, #255	@ 0xff
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	095b      	lsrs	r3, r3, #5
 801a0ae:	21dc      	movs	r1, #220	@ 0xdc
 801a0b0:	187a      	adds	r2, r7, r1
 801a0b2:	6013      	str	r3, [r2, #0]
 801a0b4:	1d7b      	adds	r3, r7, #5
 801a0b6:	33ff      	adds	r3, #255	@ 0xff
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	221f      	movs	r2, #31
 801a0bc:	4013      	ands	r3, r2
 801a0be:	d104      	bne.n	801a0ca <USB_EPStartXfer+0xfbe>
 801a0c0:	187b      	adds	r3, r7, r1
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	3b01      	subs	r3, #1
 801a0c6:	187a      	adds	r2, r7, r1
 801a0c8:	6013      	str	r3, [r2, #0]
 801a0ca:	21c8      	movs	r1, #200	@ 0xc8
 801a0cc:	187b      	adds	r3, r7, r1
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	881b      	ldrh	r3, [r3, #0]
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	23dc      	movs	r3, #220	@ 0xdc
 801a0d6:	18fb      	adds	r3, r7, r3
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	029b      	lsls	r3, r3, #10
 801a0de:	b29b      	uxth	r3, r3
 801a0e0:	4313      	orrs	r3, r2
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	4a79      	ldr	r2, [pc, #484]	@ (801a2cc <USB_EPStartXfer+0x11c0>)
 801a0e6:	4313      	orrs	r3, r2
 801a0e8:	b29a      	uxth	r2, r3
 801a0ea:	187b      	adds	r3, r7, r1
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	801a      	strh	r2, [r3, #0]
 801a0f0:	e058      	b.n	801a1a4 <USB_EPStartXfer+0x1098>
 801a0f2:	1d7b      	adds	r3, r7, #5
 801a0f4:	33ff      	adds	r3, #255	@ 0xff
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d10b      	bne.n	801a114 <USB_EPStartXfer+0x1008>
 801a0fc:	21c8      	movs	r1, #200	@ 0xc8
 801a0fe:	187b      	adds	r3, r7, r1
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	881b      	ldrh	r3, [r3, #0]
 801a104:	b29b      	uxth	r3, r3
 801a106:	4a71      	ldr	r2, [pc, #452]	@ (801a2cc <USB_EPStartXfer+0x11c0>)
 801a108:	4313      	orrs	r3, r2
 801a10a:	b29a      	uxth	r2, r3
 801a10c:	187b      	adds	r3, r7, r1
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	801a      	strh	r2, [r3, #0]
 801a112:	e047      	b.n	801a1a4 <USB_EPStartXfer+0x1098>
 801a114:	1d7b      	adds	r3, r7, #5
 801a116:	33ff      	adds	r3, #255	@ 0xff
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	085b      	lsrs	r3, r3, #1
 801a11c:	21dc      	movs	r1, #220	@ 0xdc
 801a11e:	187a      	adds	r2, r7, r1
 801a120:	6013      	str	r3, [r2, #0]
 801a122:	1d7b      	adds	r3, r7, #5
 801a124:	33ff      	adds	r3, #255	@ 0xff
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	2201      	movs	r2, #1
 801a12a:	4013      	ands	r3, r2
 801a12c:	d004      	beq.n	801a138 <USB_EPStartXfer+0x102c>
 801a12e:	187b      	adds	r3, r7, r1
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	3301      	adds	r3, #1
 801a134:	187a      	adds	r2, r7, r1
 801a136:	6013      	str	r3, [r2, #0]
 801a138:	21c8      	movs	r1, #200	@ 0xc8
 801a13a:	187b      	adds	r3, r7, r1
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	881b      	ldrh	r3, [r3, #0]
 801a140:	b29a      	uxth	r2, r3
 801a142:	23dc      	movs	r3, #220	@ 0xdc
 801a144:	18fb      	adds	r3, r7, r3
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	b29b      	uxth	r3, r3
 801a14a:	029b      	lsls	r3, r3, #10
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	4313      	orrs	r3, r2
 801a150:	b29a      	uxth	r2, r3
 801a152:	187b      	adds	r3, r7, r1
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	801a      	strh	r2, [r3, #0]
 801a158:	e024      	b.n	801a1a4 <USB_EPStartXfer+0x1098>
 801a15a:	683b      	ldr	r3, [r7, #0]
 801a15c:	785b      	ldrb	r3, [r3, #1]
 801a15e:	2b01      	cmp	r3, #1
 801a160:	d120      	bne.n	801a1a4 <USB_EPStartXfer+0x1098>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	21d4      	movs	r1, #212	@ 0xd4
 801a166:	187a      	adds	r2, r7, r1
 801a168:	6013      	str	r3, [r2, #0]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	2250      	movs	r2, #80	@ 0x50
 801a16e:	5a9b      	ldrh	r3, [r3, r2]
 801a170:	b29b      	uxth	r3, r3
 801a172:	001a      	movs	r2, r3
 801a174:	187b      	adds	r3, r7, r1
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	189b      	adds	r3, r3, r2
 801a17a:	187a      	adds	r2, r7, r1
 801a17c:	6013      	str	r3, [r2, #0]
 801a17e:	683b      	ldr	r3, [r7, #0]
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	00da      	lsls	r2, r3, #3
 801a184:	187b      	adds	r3, r7, r1
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	18d3      	adds	r3, r2, r3
 801a18a:	4a4f      	ldr	r2, [pc, #316]	@ (801a2c8 <USB_EPStartXfer+0x11bc>)
 801a18c:	4694      	mov	ip, r2
 801a18e:	4463      	add	r3, ip
 801a190:	21d0      	movs	r1, #208	@ 0xd0
 801a192:	187a      	adds	r2, r7, r1
 801a194:	6013      	str	r3, [r2, #0]
 801a196:	1d7b      	adds	r3, r7, #5
 801a198:	33ff      	adds	r3, #255	@ 0xff
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	b29a      	uxth	r2, r3
 801a19e:	187b      	adds	r3, r7, r1
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	801a      	strh	r2, [r3, #0]
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	22c4      	movs	r2, #196	@ 0xc4
 801a1a8:	18ba      	adds	r2, r7, r2
 801a1aa:	6013      	str	r3, [r2, #0]
 801a1ac:	683b      	ldr	r3, [r7, #0]
 801a1ae:	785b      	ldrb	r3, [r3, #1]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d000      	beq.n	801a1b6 <USB_EPStartXfer+0x10aa>
 801a1b4:	e08c      	b.n	801a2d0 <USB_EPStartXfer+0x11c4>
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	21bc      	movs	r1, #188	@ 0xbc
 801a1ba:	187a      	adds	r2, r7, r1
 801a1bc:	6013      	str	r3, [r2, #0]
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	2250      	movs	r2, #80	@ 0x50
 801a1c2:	5a9b      	ldrh	r3, [r3, r2]
 801a1c4:	b29b      	uxth	r3, r3
 801a1c6:	001a      	movs	r2, r3
 801a1c8:	187b      	adds	r3, r7, r1
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	189b      	adds	r3, r3, r2
 801a1ce:	187a      	adds	r2, r7, r1
 801a1d0:	6013      	str	r3, [r2, #0]
 801a1d2:	683b      	ldr	r3, [r7, #0]
 801a1d4:	781b      	ldrb	r3, [r3, #0]
 801a1d6:	00da      	lsls	r2, r3, #3
 801a1d8:	187b      	adds	r3, r7, r1
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	18d3      	adds	r3, r2, r3
 801a1de:	4a37      	ldr	r2, [pc, #220]	@ (801a2bc <USB_EPStartXfer+0x11b0>)
 801a1e0:	4694      	mov	ip, r2
 801a1e2:	4463      	add	r3, ip
 801a1e4:	21b8      	movs	r1, #184	@ 0xb8
 801a1e6:	187a      	adds	r2, r7, r1
 801a1e8:	6013      	str	r3, [r2, #0]
 801a1ea:	187b      	adds	r3, r7, r1
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	881b      	ldrh	r3, [r3, #0]
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	059b      	lsls	r3, r3, #22
 801a1f4:	0d9b      	lsrs	r3, r3, #22
 801a1f6:	b29a      	uxth	r2, r3
 801a1f8:	187b      	adds	r3, r7, r1
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	801a      	strh	r2, [r3, #0]
 801a1fe:	1d7b      	adds	r3, r7, #5
 801a200:	33ff      	adds	r3, #255	@ 0xff
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	2b3e      	cmp	r3, #62	@ 0x3e
 801a206:	d925      	bls.n	801a254 <USB_EPStartXfer+0x1148>
 801a208:	1d7b      	adds	r3, r7, #5
 801a20a:	33ff      	adds	r3, #255	@ 0xff
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	095b      	lsrs	r3, r3, #5
 801a210:	21d8      	movs	r1, #216	@ 0xd8
 801a212:	187a      	adds	r2, r7, r1
 801a214:	6013      	str	r3, [r2, #0]
 801a216:	1d7b      	adds	r3, r7, #5
 801a218:	33ff      	adds	r3, #255	@ 0xff
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	221f      	movs	r2, #31
 801a21e:	4013      	ands	r3, r2
 801a220:	d104      	bne.n	801a22c <USB_EPStartXfer+0x1120>
 801a222:	187b      	adds	r3, r7, r1
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	3b01      	subs	r3, #1
 801a228:	187a      	adds	r2, r7, r1
 801a22a:	6013      	str	r3, [r2, #0]
 801a22c:	21b8      	movs	r1, #184	@ 0xb8
 801a22e:	187b      	adds	r3, r7, r1
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	881b      	ldrh	r3, [r3, #0]
 801a234:	b29a      	uxth	r2, r3
 801a236:	23d8      	movs	r3, #216	@ 0xd8
 801a238:	18fb      	adds	r3, r7, r3
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	b29b      	uxth	r3, r3
 801a23e:	029b      	lsls	r3, r3, #10
 801a240:	b29b      	uxth	r3, r3
 801a242:	4313      	orrs	r3, r2
 801a244:	b29b      	uxth	r3, r3
 801a246:	4a21      	ldr	r2, [pc, #132]	@ (801a2cc <USB_EPStartXfer+0x11c0>)
 801a248:	4313      	orrs	r3, r2
 801a24a:	b29a      	uxth	r2, r3
 801a24c:	187b      	adds	r3, r7, r1
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	801a      	strh	r2, [r3, #0]
 801a252:	e062      	b.n	801a31a <USB_EPStartXfer+0x120e>
 801a254:	1d7b      	adds	r3, r7, #5
 801a256:	33ff      	adds	r3, #255	@ 0xff
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d10b      	bne.n	801a276 <USB_EPStartXfer+0x116a>
 801a25e:	21b8      	movs	r1, #184	@ 0xb8
 801a260:	187b      	adds	r3, r7, r1
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	881b      	ldrh	r3, [r3, #0]
 801a266:	b29b      	uxth	r3, r3
 801a268:	4a18      	ldr	r2, [pc, #96]	@ (801a2cc <USB_EPStartXfer+0x11c0>)
 801a26a:	4313      	orrs	r3, r2
 801a26c:	b29a      	uxth	r2, r3
 801a26e:	187b      	adds	r3, r7, r1
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	801a      	strh	r2, [r3, #0]
 801a274:	e051      	b.n	801a31a <USB_EPStartXfer+0x120e>
 801a276:	1d7b      	adds	r3, r7, #5
 801a278:	33ff      	adds	r3, #255	@ 0xff
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	085b      	lsrs	r3, r3, #1
 801a27e:	21d8      	movs	r1, #216	@ 0xd8
 801a280:	187a      	adds	r2, r7, r1
 801a282:	6013      	str	r3, [r2, #0]
 801a284:	1d7b      	adds	r3, r7, #5
 801a286:	33ff      	adds	r3, #255	@ 0xff
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	2201      	movs	r2, #1
 801a28c:	4013      	ands	r3, r2
 801a28e:	d004      	beq.n	801a29a <USB_EPStartXfer+0x118e>
 801a290:	187b      	adds	r3, r7, r1
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	3301      	adds	r3, #1
 801a296:	187a      	adds	r2, r7, r1
 801a298:	6013      	str	r3, [r2, #0]
 801a29a:	21b8      	movs	r1, #184	@ 0xb8
 801a29c:	187b      	adds	r3, r7, r1
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	881b      	ldrh	r3, [r3, #0]
 801a2a2:	b29a      	uxth	r2, r3
 801a2a4:	23d8      	movs	r3, #216	@ 0xd8
 801a2a6:	18fb      	adds	r3, r7, r3
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	b29b      	uxth	r3, r3
 801a2ac:	029b      	lsls	r3, r3, #10
 801a2ae:	b29b      	uxth	r3, r3
 801a2b0:	4313      	orrs	r3, r2
 801a2b2:	b29a      	uxth	r2, r3
 801a2b4:	187b      	adds	r3, r7, r1
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	801a      	strh	r2, [r3, #0]
 801a2ba:	e02e      	b.n	801a31a <USB_EPStartXfer+0x120e>
 801a2bc:	00000406 	.word	0x00000406
 801a2c0:	ffff8f8f 	.word	0xffff8f8f
 801a2c4:	ffff80c0 	.word	0xffff80c0
 801a2c8:	00000402 	.word	0x00000402
 801a2cc:	ffff8000 	.word	0xffff8000
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	785b      	ldrb	r3, [r3, #1]
 801a2d4:	2b01      	cmp	r3, #1
 801a2d6:	d120      	bne.n	801a31a <USB_EPStartXfer+0x120e>
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	2250      	movs	r2, #80	@ 0x50
 801a2dc:	5a9b      	ldrh	r3, [r3, r2]
 801a2de:	b29b      	uxth	r3, r3
 801a2e0:	001a      	movs	r2, r3
 801a2e2:	21c4      	movs	r1, #196	@ 0xc4
 801a2e4:	187b      	adds	r3, r7, r1
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	189b      	adds	r3, r3, r2
 801a2ea:	187a      	adds	r2, r7, r1
 801a2ec:	6013      	str	r3, [r2, #0]
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	781b      	ldrb	r3, [r3, #0]
 801a2f2:	00da      	lsls	r2, r3, #3
 801a2f4:	187b      	adds	r3, r7, r1
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	18d3      	adds	r3, r2, r3
 801a2fa:	4a1d      	ldr	r2, [pc, #116]	@ (801a370 <USB_EPStartXfer+0x1264>)
 801a2fc:	4694      	mov	ip, r2
 801a2fe:	4463      	add	r3, ip
 801a300:	21c0      	movs	r1, #192	@ 0xc0
 801a302:	187a      	adds	r2, r7, r1
 801a304:	6013      	str	r3, [r2, #0]
 801a306:	1d7b      	adds	r3, r7, #5
 801a308:	33ff      	adds	r3, #255	@ 0xff
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	b29a      	uxth	r2, r3
 801a30e:	187b      	adds	r3, r7, r1
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	801a      	strh	r2, [r3, #0]
 801a314:	e001      	b.n	801a31a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801a316:	2301      	movs	r3, #1
 801a318:	e025      	b.n	801a366 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a31a:	687a      	ldr	r2, [r7, #4]
 801a31c:	683b      	ldr	r3, [r7, #0]
 801a31e:	781b      	ldrb	r3, [r3, #0]
 801a320:	009b      	lsls	r3, r3, #2
 801a322:	18d3      	adds	r3, r2, r3
 801a324:	881b      	ldrh	r3, [r3, #0]
 801a326:	b29a      	uxth	r2, r3
 801a328:	208a      	movs	r0, #138	@ 0x8a
 801a32a:	183b      	adds	r3, r7, r0
 801a32c:	4911      	ldr	r1, [pc, #68]	@ (801a374 <USB_EPStartXfer+0x1268>)
 801a32e:	400a      	ands	r2, r1
 801a330:	801a      	strh	r2, [r3, #0]
 801a332:	183b      	adds	r3, r7, r0
 801a334:	183a      	adds	r2, r7, r0
 801a336:	8812      	ldrh	r2, [r2, #0]
 801a338:	2180      	movs	r1, #128	@ 0x80
 801a33a:	0149      	lsls	r1, r1, #5
 801a33c:	404a      	eors	r2, r1
 801a33e:	801a      	strh	r2, [r3, #0]
 801a340:	183b      	adds	r3, r7, r0
 801a342:	183a      	adds	r2, r7, r0
 801a344:	8812      	ldrh	r2, [r2, #0]
 801a346:	2180      	movs	r1, #128	@ 0x80
 801a348:	0189      	lsls	r1, r1, #6
 801a34a:	404a      	eors	r2, r1
 801a34c:	801a      	strh	r2, [r3, #0]
 801a34e:	687a      	ldr	r2, [r7, #4]
 801a350:	683b      	ldr	r3, [r7, #0]
 801a352:	781b      	ldrb	r3, [r3, #0]
 801a354:	009b      	lsls	r3, r3, #2
 801a356:	18d3      	adds	r3, r2, r3
 801a358:	183a      	adds	r2, r7, r0
 801a35a:	8812      	ldrh	r2, [r2, #0]
 801a35c:	4906      	ldr	r1, [pc, #24]	@ (801a378 <USB_EPStartXfer+0x126c>)
 801a35e:	430a      	orrs	r2, r1
 801a360:	b292      	uxth	r2, r2
 801a362:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a364:	2300      	movs	r3, #0
}
 801a366:	0018      	movs	r0, r3
 801a368:	46bd      	mov	sp, r7
 801a36a:	b043      	add	sp, #268	@ 0x10c
 801a36c:	bd90      	pop	{r4, r7, pc}
 801a36e:	46c0      	nop			@ (mov r8, r8)
 801a370:	00000406 	.word	0x00000406
 801a374:	ffffbf8f 	.word	0xffffbf8f
 801a378:	ffff8080 	.word	0xffff8080

0801a37c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b084      	sub	sp, #16
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
 801a384:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801a386:	683b      	ldr	r3, [r7, #0]
 801a388:	785b      	ldrb	r3, [r3, #1]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d01d      	beq.n	801a3ca <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801a38e:	687a      	ldr	r2, [r7, #4]
 801a390:	683b      	ldr	r3, [r7, #0]
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	009b      	lsls	r3, r3, #2
 801a396:	18d3      	adds	r3, r2, r3
 801a398:	881b      	ldrh	r3, [r3, #0]
 801a39a:	b29a      	uxth	r2, r3
 801a39c:	200c      	movs	r0, #12
 801a39e:	183b      	adds	r3, r7, r0
 801a3a0:	491b      	ldr	r1, [pc, #108]	@ (801a410 <USB_EPSetStall+0x94>)
 801a3a2:	400a      	ands	r2, r1
 801a3a4:	801a      	strh	r2, [r3, #0]
 801a3a6:	183b      	adds	r3, r7, r0
 801a3a8:	183a      	adds	r2, r7, r0
 801a3aa:	8812      	ldrh	r2, [r2, #0]
 801a3ac:	2110      	movs	r1, #16
 801a3ae:	404a      	eors	r2, r1
 801a3b0:	801a      	strh	r2, [r3, #0]
 801a3b2:	687a      	ldr	r2, [r7, #4]
 801a3b4:	683b      	ldr	r3, [r7, #0]
 801a3b6:	781b      	ldrb	r3, [r3, #0]
 801a3b8:	009b      	lsls	r3, r3, #2
 801a3ba:	18d3      	adds	r3, r2, r3
 801a3bc:	183a      	adds	r2, r7, r0
 801a3be:	8812      	ldrh	r2, [r2, #0]
 801a3c0:	4914      	ldr	r1, [pc, #80]	@ (801a414 <USB_EPSetStall+0x98>)
 801a3c2:	430a      	orrs	r2, r1
 801a3c4:	b292      	uxth	r2, r2
 801a3c6:	801a      	strh	r2, [r3, #0]
 801a3c8:	e01d      	b.n	801a406 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801a3ca:	687a      	ldr	r2, [r7, #4]
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	781b      	ldrb	r3, [r3, #0]
 801a3d0:	009b      	lsls	r3, r3, #2
 801a3d2:	18d3      	adds	r3, r2, r3
 801a3d4:	881b      	ldrh	r3, [r3, #0]
 801a3d6:	b29a      	uxth	r2, r3
 801a3d8:	200e      	movs	r0, #14
 801a3da:	183b      	adds	r3, r7, r0
 801a3dc:	490e      	ldr	r1, [pc, #56]	@ (801a418 <USB_EPSetStall+0x9c>)
 801a3de:	400a      	ands	r2, r1
 801a3e0:	801a      	strh	r2, [r3, #0]
 801a3e2:	183b      	adds	r3, r7, r0
 801a3e4:	183a      	adds	r2, r7, r0
 801a3e6:	8812      	ldrh	r2, [r2, #0]
 801a3e8:	2180      	movs	r1, #128	@ 0x80
 801a3ea:	0149      	lsls	r1, r1, #5
 801a3ec:	404a      	eors	r2, r1
 801a3ee:	801a      	strh	r2, [r3, #0]
 801a3f0:	687a      	ldr	r2, [r7, #4]
 801a3f2:	683b      	ldr	r3, [r7, #0]
 801a3f4:	781b      	ldrb	r3, [r3, #0]
 801a3f6:	009b      	lsls	r3, r3, #2
 801a3f8:	18d3      	adds	r3, r2, r3
 801a3fa:	183a      	adds	r2, r7, r0
 801a3fc:	8812      	ldrh	r2, [r2, #0]
 801a3fe:	4905      	ldr	r1, [pc, #20]	@ (801a414 <USB_EPSetStall+0x98>)
 801a400:	430a      	orrs	r2, r1
 801a402:	b292      	uxth	r2, r2
 801a404:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a406:	2300      	movs	r3, #0
}
 801a408:	0018      	movs	r0, r3
 801a40a:	46bd      	mov	sp, r7
 801a40c:	b004      	add	sp, #16
 801a40e:	bd80      	pop	{r7, pc}
 801a410:	ffff8fbf 	.word	0xffff8fbf
 801a414:	ffff8080 	.word	0xffff8080
 801a418:	ffffbf8f 	.word	0xffffbf8f

0801a41c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b086      	sub	sp, #24
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	7b1b      	ldrb	r3, [r3, #12]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d000      	beq.n	801a430 <USB_EPClearStall+0x14>
 801a42e:	e095      	b.n	801a55c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	785b      	ldrb	r3, [r3, #1]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d046      	beq.n	801a4c6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a438:	687a      	ldr	r2, [r7, #4]
 801a43a:	683b      	ldr	r3, [r7, #0]
 801a43c:	781b      	ldrb	r3, [r3, #0]
 801a43e:	009b      	lsls	r3, r3, #2
 801a440:	18d2      	adds	r2, r2, r3
 801a442:	2110      	movs	r1, #16
 801a444:	187b      	adds	r3, r7, r1
 801a446:	8812      	ldrh	r2, [r2, #0]
 801a448:	801a      	strh	r2, [r3, #0]
 801a44a:	187b      	adds	r3, r7, r1
 801a44c:	881b      	ldrh	r3, [r3, #0]
 801a44e:	2240      	movs	r2, #64	@ 0x40
 801a450:	4013      	ands	r3, r2
 801a452:	d016      	beq.n	801a482 <USB_EPClearStall+0x66>
 801a454:	687a      	ldr	r2, [r7, #4]
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	781b      	ldrb	r3, [r3, #0]
 801a45a:	009b      	lsls	r3, r3, #2
 801a45c:	18d3      	adds	r3, r2, r3
 801a45e:	881b      	ldrh	r3, [r3, #0]
 801a460:	b29a      	uxth	r2, r3
 801a462:	200e      	movs	r0, #14
 801a464:	183b      	adds	r3, r7, r0
 801a466:	4940      	ldr	r1, [pc, #256]	@ (801a568 <USB_EPClearStall+0x14c>)
 801a468:	400a      	ands	r2, r1
 801a46a:	801a      	strh	r2, [r3, #0]
 801a46c:	687a      	ldr	r2, [r7, #4]
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	781b      	ldrb	r3, [r3, #0]
 801a472:	009b      	lsls	r3, r3, #2
 801a474:	18d3      	adds	r3, r2, r3
 801a476:	183a      	adds	r2, r7, r0
 801a478:	8812      	ldrh	r2, [r2, #0]
 801a47a:	493c      	ldr	r1, [pc, #240]	@ (801a56c <USB_EPClearStall+0x150>)
 801a47c:	430a      	orrs	r2, r1
 801a47e:	b292      	uxth	r2, r2
 801a480:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a482:	683b      	ldr	r3, [r7, #0]
 801a484:	78db      	ldrb	r3, [r3, #3]
 801a486:	2b01      	cmp	r3, #1
 801a488:	d068      	beq.n	801a55c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a48a:	687a      	ldr	r2, [r7, #4]
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	781b      	ldrb	r3, [r3, #0]
 801a490:	009b      	lsls	r3, r3, #2
 801a492:	18d3      	adds	r3, r2, r3
 801a494:	881b      	ldrh	r3, [r3, #0]
 801a496:	b29a      	uxth	r2, r3
 801a498:	200c      	movs	r0, #12
 801a49a:	183b      	adds	r3, r7, r0
 801a49c:	4934      	ldr	r1, [pc, #208]	@ (801a570 <USB_EPClearStall+0x154>)
 801a49e:	400a      	ands	r2, r1
 801a4a0:	801a      	strh	r2, [r3, #0]
 801a4a2:	183b      	adds	r3, r7, r0
 801a4a4:	183a      	adds	r2, r7, r0
 801a4a6:	8812      	ldrh	r2, [r2, #0]
 801a4a8:	2120      	movs	r1, #32
 801a4aa:	404a      	eors	r2, r1
 801a4ac:	801a      	strh	r2, [r3, #0]
 801a4ae:	687a      	ldr	r2, [r7, #4]
 801a4b0:	683b      	ldr	r3, [r7, #0]
 801a4b2:	781b      	ldrb	r3, [r3, #0]
 801a4b4:	009b      	lsls	r3, r3, #2
 801a4b6:	18d3      	adds	r3, r2, r3
 801a4b8:	183a      	adds	r2, r7, r0
 801a4ba:	8812      	ldrh	r2, [r2, #0]
 801a4bc:	492d      	ldr	r1, [pc, #180]	@ (801a574 <USB_EPClearStall+0x158>)
 801a4be:	430a      	orrs	r2, r1
 801a4c0:	b292      	uxth	r2, r2
 801a4c2:	801a      	strh	r2, [r3, #0]
 801a4c4:	e04a      	b.n	801a55c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a4c6:	687a      	ldr	r2, [r7, #4]
 801a4c8:	683b      	ldr	r3, [r7, #0]
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	009b      	lsls	r3, r3, #2
 801a4ce:	18d2      	adds	r2, r2, r3
 801a4d0:	2116      	movs	r1, #22
 801a4d2:	187b      	adds	r3, r7, r1
 801a4d4:	8812      	ldrh	r2, [r2, #0]
 801a4d6:	801a      	strh	r2, [r3, #0]
 801a4d8:	187b      	adds	r3, r7, r1
 801a4da:	881a      	ldrh	r2, [r3, #0]
 801a4dc:	2380      	movs	r3, #128	@ 0x80
 801a4de:	01db      	lsls	r3, r3, #7
 801a4e0:	4013      	ands	r3, r2
 801a4e2:	d016      	beq.n	801a512 <USB_EPClearStall+0xf6>
 801a4e4:	687a      	ldr	r2, [r7, #4]
 801a4e6:	683b      	ldr	r3, [r7, #0]
 801a4e8:	781b      	ldrb	r3, [r3, #0]
 801a4ea:	009b      	lsls	r3, r3, #2
 801a4ec:	18d3      	adds	r3, r2, r3
 801a4ee:	881b      	ldrh	r3, [r3, #0]
 801a4f0:	b29a      	uxth	r2, r3
 801a4f2:	2014      	movs	r0, #20
 801a4f4:	183b      	adds	r3, r7, r0
 801a4f6:	491c      	ldr	r1, [pc, #112]	@ (801a568 <USB_EPClearStall+0x14c>)
 801a4f8:	400a      	ands	r2, r1
 801a4fa:	801a      	strh	r2, [r3, #0]
 801a4fc:	687a      	ldr	r2, [r7, #4]
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	781b      	ldrb	r3, [r3, #0]
 801a502:	009b      	lsls	r3, r3, #2
 801a504:	18d3      	adds	r3, r2, r3
 801a506:	183a      	adds	r2, r7, r0
 801a508:	8812      	ldrh	r2, [r2, #0]
 801a50a:	491b      	ldr	r1, [pc, #108]	@ (801a578 <USB_EPClearStall+0x15c>)
 801a50c:	430a      	orrs	r2, r1
 801a50e:	b292      	uxth	r2, r2
 801a510:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a512:	687a      	ldr	r2, [r7, #4]
 801a514:	683b      	ldr	r3, [r7, #0]
 801a516:	781b      	ldrb	r3, [r3, #0]
 801a518:	009b      	lsls	r3, r3, #2
 801a51a:	18d3      	adds	r3, r2, r3
 801a51c:	881b      	ldrh	r3, [r3, #0]
 801a51e:	b29a      	uxth	r2, r3
 801a520:	2012      	movs	r0, #18
 801a522:	183b      	adds	r3, r7, r0
 801a524:	4915      	ldr	r1, [pc, #84]	@ (801a57c <USB_EPClearStall+0x160>)
 801a526:	400a      	ands	r2, r1
 801a528:	801a      	strh	r2, [r3, #0]
 801a52a:	183b      	adds	r3, r7, r0
 801a52c:	183a      	adds	r2, r7, r0
 801a52e:	8812      	ldrh	r2, [r2, #0]
 801a530:	2180      	movs	r1, #128	@ 0x80
 801a532:	0149      	lsls	r1, r1, #5
 801a534:	404a      	eors	r2, r1
 801a536:	801a      	strh	r2, [r3, #0]
 801a538:	183b      	adds	r3, r7, r0
 801a53a:	183a      	adds	r2, r7, r0
 801a53c:	8812      	ldrh	r2, [r2, #0]
 801a53e:	2180      	movs	r1, #128	@ 0x80
 801a540:	0189      	lsls	r1, r1, #6
 801a542:	404a      	eors	r2, r1
 801a544:	801a      	strh	r2, [r3, #0]
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	683b      	ldr	r3, [r7, #0]
 801a54a:	781b      	ldrb	r3, [r3, #0]
 801a54c:	009b      	lsls	r3, r3, #2
 801a54e:	18d3      	adds	r3, r2, r3
 801a550:	183a      	adds	r2, r7, r0
 801a552:	8812      	ldrh	r2, [r2, #0]
 801a554:	4907      	ldr	r1, [pc, #28]	@ (801a574 <USB_EPClearStall+0x158>)
 801a556:	430a      	orrs	r2, r1
 801a558:	b292      	uxth	r2, r2
 801a55a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a55c:	2300      	movs	r3, #0
}
 801a55e:	0018      	movs	r0, r3
 801a560:	46bd      	mov	sp, r7
 801a562:	b006      	add	sp, #24
 801a564:	bd80      	pop	{r7, pc}
 801a566:	46c0      	nop			@ (mov r8, r8)
 801a568:	ffff8f8f 	.word	0xffff8f8f
 801a56c:	ffff80c0 	.word	0xffff80c0
 801a570:	ffff8fbf 	.word	0xffff8fbf
 801a574:	ffff8080 	.word	0xffff8080
 801a578:	ffffc080 	.word	0xffffc080
 801a57c:	ffffbf8f 	.word	0xffffbf8f

0801a580 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a580:	b580      	push	{r7, lr}
 801a582:	b082      	sub	sp, #8
 801a584:	af00      	add	r7, sp, #0
 801a586:	6078      	str	r0, [r7, #4]
 801a588:	000a      	movs	r2, r1
 801a58a:	1cfb      	adds	r3, r7, #3
 801a58c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a58e:	1cfb      	adds	r3, r7, #3
 801a590:	781b      	ldrb	r3, [r3, #0]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d103      	bne.n	801a59e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	224c      	movs	r2, #76	@ 0x4c
 801a59a:	2180      	movs	r1, #128	@ 0x80
 801a59c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a59e:	2300      	movs	r3, #0
}
 801a5a0:	0018      	movs	r0, r3
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	b002      	add	sp, #8
 801a5a6:	bd80      	pop	{r7, pc}

0801a5a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b082      	sub	sp, #8
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	2258      	movs	r2, #88	@ 0x58
 801a5b4:	5a9b      	ldrh	r3, [r3, r2]
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	4a05      	ldr	r2, [pc, #20]	@ (801a5d0 <USB_DevConnect+0x28>)
 801a5ba:	4313      	orrs	r3, r2
 801a5bc:	b299      	uxth	r1, r3
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	2258      	movs	r2, #88	@ 0x58
 801a5c2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a5c4:	2300      	movs	r3, #0
}
 801a5c6:	0018      	movs	r0, r3
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	b002      	add	sp, #8
 801a5cc:	bd80      	pop	{r7, pc}
 801a5ce:	46c0      	nop			@ (mov r8, r8)
 801a5d0:	ffff8000 	.word	0xffff8000

0801a5d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a5d4:	b580      	push	{r7, lr}
 801a5d6:	b084      	sub	sp, #16
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2244      	movs	r2, #68	@ 0x44
 801a5e0:	5a9b      	ldrh	r3, [r3, r2]
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a5e6:	68fb      	ldr	r3, [r7, #12]
}
 801a5e8:	0018      	movs	r0, r3
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	b004      	add	sp, #16
 801a5ee:	bd80      	pop	{r7, pc}

0801a5f0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b08a      	sub	sp, #40	@ 0x28
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	60f8      	str	r0, [r7, #12]
 801a5f8:	60b9      	str	r1, [r7, #8]
 801a5fa:	0019      	movs	r1, r3
 801a5fc:	1dbb      	adds	r3, r7, #6
 801a5fe:	801a      	strh	r2, [r3, #0]
 801a600:	1d3b      	adds	r3, r7, #4
 801a602:	1c0a      	adds	r2, r1, #0
 801a604:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a606:	1d3b      	adds	r3, r7, #4
 801a608:	881b      	ldrh	r3, [r3, #0]
 801a60a:	3301      	adds	r3, #1
 801a60c:	085b      	lsrs	r3, r3, #1
 801a60e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a618:	1dbb      	adds	r3, r7, #6
 801a61a:	881a      	ldrh	r2, [r3, #0]
 801a61c:	697b      	ldr	r3, [r7, #20]
 801a61e:	18d3      	adds	r3, r2, r3
 801a620:	2280      	movs	r2, #128	@ 0x80
 801a622:	00d2      	lsls	r2, r2, #3
 801a624:	4694      	mov	ip, r2
 801a626:	4463      	add	r3, ip
 801a628:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a62a:	69bb      	ldr	r3, [r7, #24]
 801a62c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a62e:	e020      	b.n	801a672 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a630:	69fb      	ldr	r3, [r7, #28]
 801a632:	781a      	ldrb	r2, [r3, #0]
 801a634:	2112      	movs	r1, #18
 801a636:	187b      	adds	r3, r7, r1
 801a638:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a63a:	69fb      	ldr	r3, [r7, #28]
 801a63c:	3301      	adds	r3, #1
 801a63e:	781b      	ldrb	r3, [r3, #0]
 801a640:	021b      	lsls	r3, r3, #8
 801a642:	b21a      	sxth	r2, r3
 801a644:	187b      	adds	r3, r7, r1
 801a646:	2000      	movs	r0, #0
 801a648:	5e1b      	ldrsh	r3, [r3, r0]
 801a64a:	4313      	orrs	r3, r2
 801a64c:	b21a      	sxth	r2, r3
 801a64e:	187b      	adds	r3, r7, r1
 801a650:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a652:	6a3b      	ldr	r3, [r7, #32]
 801a654:	187a      	adds	r2, r7, r1
 801a656:	8812      	ldrh	r2, [r2, #0]
 801a658:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a65a:	6a3b      	ldr	r3, [r7, #32]
 801a65c:	3302      	adds	r3, #2
 801a65e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801a660:	69fb      	ldr	r3, [r7, #28]
 801a662:	3301      	adds	r3, #1
 801a664:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801a666:	69fb      	ldr	r3, [r7, #28]
 801a668:	3301      	adds	r3, #1
 801a66a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a66e:	3b01      	subs	r3, #1
 801a670:	627b      	str	r3, [r7, #36]	@ 0x24
 801a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a674:	2b00      	cmp	r3, #0
 801a676:	d1db      	bne.n	801a630 <USB_WritePMA+0x40>
  }
}
 801a678:	46c0      	nop			@ (mov r8, r8)
 801a67a:	46c0      	nop			@ (mov r8, r8)
 801a67c:	46bd      	mov	sp, r7
 801a67e:	b00a      	add	sp, #40	@ 0x28
 801a680:	bd80      	pop	{r7, pc}

0801a682 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a682:	b580      	push	{r7, lr}
 801a684:	b08a      	sub	sp, #40	@ 0x28
 801a686:	af00      	add	r7, sp, #0
 801a688:	60f8      	str	r0, [r7, #12]
 801a68a:	60b9      	str	r1, [r7, #8]
 801a68c:	0019      	movs	r1, r3
 801a68e:	1dbb      	adds	r3, r7, #6
 801a690:	801a      	strh	r2, [r3, #0]
 801a692:	1d3b      	adds	r3, r7, #4
 801a694:	1c0a      	adds	r2, r1, #0
 801a696:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801a698:	1d3b      	adds	r3, r7, #4
 801a69a:	881b      	ldrh	r3, [r3, #0]
 801a69c:	085b      	lsrs	r3, r3, #1
 801a69e:	b29b      	uxth	r3, r3
 801a6a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a6a6:	68bb      	ldr	r3, [r7, #8]
 801a6a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a6aa:	1dbb      	adds	r3, r7, #6
 801a6ac:	881a      	ldrh	r2, [r3, #0]
 801a6ae:	697b      	ldr	r3, [r7, #20]
 801a6b0:	18d3      	adds	r3, r2, r3
 801a6b2:	2280      	movs	r2, #128	@ 0x80
 801a6b4:	00d2      	lsls	r2, r2, #3
 801a6b6:	4694      	mov	ip, r2
 801a6b8:	4463      	add	r3, ip
 801a6ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a6bc:	69bb      	ldr	r3, [r7, #24]
 801a6be:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6c0:	e018      	b.n	801a6f4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801a6c2:	6a3b      	ldr	r3, [r7, #32]
 801a6c4:	881b      	ldrh	r3, [r3, #0]
 801a6c6:	b29b      	uxth	r3, r3
 801a6c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801a6ca:	6a3b      	ldr	r3, [r7, #32]
 801a6cc:	3302      	adds	r3, #2
 801a6ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a6d0:	693b      	ldr	r3, [r7, #16]
 801a6d2:	b2da      	uxtb	r2, r3
 801a6d4:	69fb      	ldr	r3, [r7, #28]
 801a6d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a6d8:	69fb      	ldr	r3, [r7, #28]
 801a6da:	3301      	adds	r3, #1
 801a6dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801a6de:	693b      	ldr	r3, [r7, #16]
 801a6e0:	0a1b      	lsrs	r3, r3, #8
 801a6e2:	b2da      	uxtb	r2, r3
 801a6e4:	69fb      	ldr	r3, [r7, #28]
 801a6e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a6e8:	69fb      	ldr	r3, [r7, #28]
 801a6ea:	3301      	adds	r3, #1
 801a6ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6f0:	3b01      	subs	r3, #1
 801a6f2:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d1e3      	bne.n	801a6c2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801a6fa:	1d3b      	adds	r3, r7, #4
 801a6fc:	881b      	ldrh	r3, [r3, #0]
 801a6fe:	2201      	movs	r2, #1
 801a700:	4013      	ands	r3, r2
 801a702:	b29b      	uxth	r3, r3
 801a704:	2b00      	cmp	r3, #0
 801a706:	d007      	beq.n	801a718 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801a708:	6a3b      	ldr	r3, [r7, #32]
 801a70a:	881b      	ldrh	r3, [r3, #0]
 801a70c:	b29b      	uxth	r3, r3
 801a70e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a710:	693b      	ldr	r3, [r7, #16]
 801a712:	b2da      	uxtb	r2, r3
 801a714:	69fb      	ldr	r3, [r7, #28]
 801a716:	701a      	strb	r2, [r3, #0]
  }
}
 801a718:	46c0      	nop			@ (mov r8, r8)
 801a71a:	46bd      	mov	sp, r7
 801a71c:	b00a      	add	sp, #40	@ 0x28
 801a71e:	bd80      	pop	{r7, pc}

0801a720 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b084      	sub	sp, #16
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
 801a728:	000a      	movs	r2, r1
 801a72a:	1cfb      	adds	r3, r7, #3
 801a72c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a72e:	230f      	movs	r3, #15
 801a730:	18fb      	adds	r3, r7, r3
 801a732:	2200      	movs	r2, #0
 801a734:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	7c1b      	ldrb	r3, [r3, #16]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d116      	bne.n	801a76c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a73e:	2380      	movs	r3, #128	@ 0x80
 801a740:	009b      	lsls	r3, r3, #2
 801a742:	6878      	ldr	r0, [r7, #4]
 801a744:	2202      	movs	r2, #2
 801a746:	2181      	movs	r1, #129	@ 0x81
 801a748:	f002 f8eb 	bl	801c922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	2201      	movs	r2, #1
 801a750:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a752:	2380      	movs	r3, #128	@ 0x80
 801a754:	009b      	lsls	r3, r3, #2
 801a756:	6878      	ldr	r0, [r7, #4]
 801a758:	2202      	movs	r2, #2
 801a75a:	2101      	movs	r1, #1
 801a75c:	f002 f8e1 	bl	801c922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a760:	687a      	ldr	r2, [r7, #4]
 801a762:	23b6      	movs	r3, #182	@ 0xb6
 801a764:	005b      	lsls	r3, r3, #1
 801a766:	2101      	movs	r1, #1
 801a768:	50d1      	str	r1, [r2, r3]
 801a76a:	e013      	b.n	801a794 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a76c:	6878      	ldr	r0, [r7, #4]
 801a76e:	2340      	movs	r3, #64	@ 0x40
 801a770:	2202      	movs	r2, #2
 801a772:	2181      	movs	r1, #129	@ 0x81
 801a774:	f002 f8d5 	bl	801c922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2201      	movs	r2, #1
 801a77c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a77e:	6878      	ldr	r0, [r7, #4]
 801a780:	2340      	movs	r3, #64	@ 0x40
 801a782:	2202      	movs	r2, #2
 801a784:	2101      	movs	r1, #1
 801a786:	f002 f8cc 	bl	801c922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a78a:	687a      	ldr	r2, [r7, #4]
 801a78c:	23b6      	movs	r3, #182	@ 0xb6
 801a78e:	005b      	lsls	r3, r3, #1
 801a790:	2101      	movs	r1, #1
 801a792:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a794:	6878      	ldr	r0, [r7, #4]
 801a796:	2308      	movs	r3, #8
 801a798:	2203      	movs	r2, #3
 801a79a:	2182      	movs	r1, #130	@ 0x82
 801a79c:	f002 f8c1 	bl	801c922 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	2201      	movs	r2, #1
 801a7a4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a7a6:	2387      	movs	r3, #135	@ 0x87
 801a7a8:	009b      	lsls	r3, r3, #2
 801a7aa:	0018      	movs	r0, r3
 801a7ac:	f002 fa52 	bl	801cc54 <USBD_static_malloc>
 801a7b0:	0001      	movs	r1, r0
 801a7b2:	687a      	ldr	r2, [r7, #4]
 801a7b4:	23ae      	movs	r3, #174	@ 0xae
 801a7b6:	009b      	lsls	r3, r3, #2
 801a7b8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801a7ba:	687a      	ldr	r2, [r7, #4]
 801a7bc:	23ae      	movs	r3, #174	@ 0xae
 801a7be:	009b      	lsls	r3, r3, #2
 801a7c0:	58d3      	ldr	r3, [r2, r3]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d104      	bne.n	801a7d0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801a7c6:	230f      	movs	r3, #15
 801a7c8:	18fb      	adds	r3, r7, r3
 801a7ca:	2201      	movs	r2, #1
 801a7cc:	701a      	strb	r2, [r3, #0]
 801a7ce:	e02c      	b.n	801a82a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a7d0:	687a      	ldr	r2, [r7, #4]
 801a7d2:	23ae      	movs	r3, #174	@ 0xae
 801a7d4:	009b      	lsls	r3, r3, #2
 801a7d6:	58d3      	ldr	r3, [r2, r3]
 801a7d8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a7da:	687a      	ldr	r2, [r7, #4]
 801a7dc:	23af      	movs	r3, #175	@ 0xaf
 801a7de:	009b      	lsls	r3, r3, #2
 801a7e0:	58d3      	ldr	r3, [r2, r3]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801a7e6:	68ba      	ldr	r2, [r7, #8]
 801a7e8:	2385      	movs	r3, #133	@ 0x85
 801a7ea:	009b      	lsls	r3, r3, #2
 801a7ec:	2100      	movs	r1, #0
 801a7ee:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801a7f0:	68ba      	ldr	r2, [r7, #8]
 801a7f2:	2386      	movs	r3, #134	@ 0x86
 801a7f4:	009b      	lsls	r3, r3, #2
 801a7f6:	2100      	movs	r1, #0
 801a7f8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	7c1b      	ldrb	r3, [r3, #16]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d10a      	bne.n	801a818 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a802:	68ba      	ldr	r2, [r7, #8]
 801a804:	2381      	movs	r3, #129	@ 0x81
 801a806:	009b      	lsls	r3, r3, #2
 801a808:	58d2      	ldr	r2, [r2, r3]
 801a80a:	2380      	movs	r3, #128	@ 0x80
 801a80c:	009b      	lsls	r3, r3, #2
 801a80e:	6878      	ldr	r0, [r7, #4]
 801a810:	2101      	movs	r1, #1
 801a812:	f002 f9d1 	bl	801cbb8 <USBD_LL_PrepareReceive>
 801a816:	e008      	b.n	801a82a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a818:	68ba      	ldr	r2, [r7, #8]
 801a81a:	2381      	movs	r3, #129	@ 0x81
 801a81c:	009b      	lsls	r3, r3, #2
 801a81e:	58d2      	ldr	r2, [r2, r3]
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	2340      	movs	r3, #64	@ 0x40
 801a824:	2101      	movs	r1, #1
 801a826:	f002 f9c7 	bl	801cbb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a82a:	230f      	movs	r3, #15
 801a82c:	18fb      	adds	r3, r7, r3
 801a82e:	781b      	ldrb	r3, [r3, #0]
}
 801a830:	0018      	movs	r0, r3
 801a832:	46bd      	mov	sp, r7
 801a834:	b004      	add	sp, #16
 801a836:	bd80      	pop	{r7, pc}

0801a838 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a838:	b580      	push	{r7, lr}
 801a83a:	b084      	sub	sp, #16
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
 801a840:	000a      	movs	r2, r1
 801a842:	1cfb      	adds	r3, r7, #3
 801a844:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a846:	230f      	movs	r3, #15
 801a848:	18fb      	adds	r3, r7, r3
 801a84a:	2200      	movs	r2, #0
 801a84c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	2181      	movs	r1, #129	@ 0x81
 801a852:	0018      	movs	r0, r3
 801a854:	f002 f89c 	bl	801c990 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	2200      	movs	r2, #0
 801a85c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	2101      	movs	r1, #1
 801a862:	0018      	movs	r0, r3
 801a864:	f002 f894 	bl	801c990 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a868:	687a      	ldr	r2, [r7, #4]
 801a86a:	23b6      	movs	r3, #182	@ 0xb6
 801a86c:	005b      	lsls	r3, r3, #1
 801a86e:	2100      	movs	r1, #0
 801a870:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	2182      	movs	r1, #130	@ 0x82
 801a876:	0018      	movs	r0, r3
 801a878:	f002 f88a 	bl	801c990 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	2200      	movs	r2, #0
 801a880:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a882:	687a      	ldr	r2, [r7, #4]
 801a884:	23ae      	movs	r3, #174	@ 0xae
 801a886:	009b      	lsls	r3, r3, #2
 801a888:	58d3      	ldr	r3, [r2, r3]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d011      	beq.n	801a8b2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	23af      	movs	r3, #175	@ 0xaf
 801a892:	009b      	lsls	r3, r3, #2
 801a894:	58d3      	ldr	r3, [r2, r3]
 801a896:	685b      	ldr	r3, [r3, #4]
 801a898:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a89a:	687a      	ldr	r2, [r7, #4]
 801a89c:	23ae      	movs	r3, #174	@ 0xae
 801a89e:	009b      	lsls	r3, r3, #2
 801a8a0:	58d3      	ldr	r3, [r2, r3]
 801a8a2:	0018      	movs	r0, r3
 801a8a4:	f002 f9e2 	bl	801cc6c <USBD_static_free>
    pdev->pClassData = NULL;
 801a8a8:	687a      	ldr	r2, [r7, #4]
 801a8aa:	23ae      	movs	r3, #174	@ 0xae
 801a8ac:	009b      	lsls	r3, r3, #2
 801a8ae:	2100      	movs	r1, #0
 801a8b0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801a8b2:	230f      	movs	r3, #15
 801a8b4:	18fb      	adds	r3, r7, r3
 801a8b6:	781b      	ldrb	r3, [r3, #0]
}
 801a8b8:	0018      	movs	r0, r3
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	b004      	add	sp, #16
 801a8be:	bd80      	pop	{r7, pc}

0801a8c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b086      	sub	sp, #24
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
 801a8c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a8ca:	687a      	ldr	r2, [r7, #4]
 801a8cc:	23ae      	movs	r3, #174	@ 0xae
 801a8ce:	009b      	lsls	r3, r3, #2
 801a8d0:	58d3      	ldr	r3, [r2, r3]
 801a8d2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801a8d4:	230f      	movs	r3, #15
 801a8d6:	18fb      	adds	r3, r7, r3
 801a8d8:	2200      	movs	r2, #0
 801a8da:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a8dc:	230c      	movs	r3, #12
 801a8de:	18fb      	adds	r3, r7, r3
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a8e4:	2317      	movs	r3, #23
 801a8e6:	18fb      	adds	r3, r7, r3
 801a8e8:	2200      	movs	r2, #0
 801a8ea:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	001a      	movs	r2, r3
 801a8f2:	2360      	movs	r3, #96	@ 0x60
 801a8f4:	4013      	ands	r3, r2
 801a8f6:	d03d      	beq.n	801a974 <USBD_CDC_Setup+0xb4>
 801a8f8:	2b20      	cmp	r3, #32
 801a8fa:	d000      	beq.n	801a8fe <USBD_CDC_Setup+0x3e>
 801a8fc:	e094      	b.n	801aa28 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	88db      	ldrh	r3, [r3, #6]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d02b      	beq.n	801a95e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	781b      	ldrb	r3, [r3, #0]
 801a90a:	b25b      	sxtb	r3, r3
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	da12      	bge.n	801a936 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a910:	687a      	ldr	r2, [r7, #4]
 801a912:	23af      	movs	r3, #175	@ 0xaf
 801a914:	009b      	lsls	r3, r3, #2
 801a916:	58d3      	ldr	r3, [r2, r3]
 801a918:	689b      	ldr	r3, [r3, #8]
 801a91a:	683a      	ldr	r2, [r7, #0]
 801a91c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a91e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a920:	683a      	ldr	r2, [r7, #0]
 801a922:	88d2      	ldrh	r2, [r2, #6]
 801a924:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a926:	6939      	ldr	r1, [r7, #16]
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	88da      	ldrh	r2, [r3, #6]
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	0018      	movs	r0, r3
 801a930:	f001 fbaf 	bl	801c092 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a934:	e083      	b.n	801aa3e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a936:	683b      	ldr	r3, [r7, #0]
 801a938:	7859      	ldrb	r1, [r3, #1]
 801a93a:	693a      	ldr	r2, [r7, #16]
 801a93c:	2380      	movs	r3, #128	@ 0x80
 801a93e:	009b      	lsls	r3, r3, #2
 801a940:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a942:	683b      	ldr	r3, [r7, #0]
 801a944:	88db      	ldrh	r3, [r3, #6]
 801a946:	b2d9      	uxtb	r1, r3
 801a948:	693b      	ldr	r3, [r7, #16]
 801a94a:	4a40      	ldr	r2, [pc, #256]	@ (801aa4c <USBD_CDC_Setup+0x18c>)
 801a94c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a94e:	6939      	ldr	r1, [r7, #16]
 801a950:	683b      	ldr	r3, [r7, #0]
 801a952:	88da      	ldrh	r2, [r3, #6]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	0018      	movs	r0, r3
 801a958:	f001 fbce 	bl	801c0f8 <USBD_CtlPrepareRx>
      break;
 801a95c:	e06f      	b.n	801aa3e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a95e:	687a      	ldr	r2, [r7, #4]
 801a960:	23af      	movs	r3, #175	@ 0xaf
 801a962:	009b      	lsls	r3, r3, #2
 801a964:	58d3      	ldr	r3, [r2, r3]
 801a966:	689b      	ldr	r3, [r3, #8]
 801a968:	683a      	ldr	r2, [r7, #0]
 801a96a:	7850      	ldrb	r0, [r2, #1]
 801a96c:	6839      	ldr	r1, [r7, #0]
 801a96e:	2200      	movs	r2, #0
 801a970:	4798      	blx	r3
      break;
 801a972:	e064      	b.n	801aa3e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a974:	683b      	ldr	r3, [r7, #0]
 801a976:	785b      	ldrb	r3, [r3, #1]
 801a978:	2b0b      	cmp	r3, #11
 801a97a:	d037      	beq.n	801a9ec <USBD_CDC_Setup+0x12c>
 801a97c:	dc47      	bgt.n	801aa0e <USBD_CDC_Setup+0x14e>
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d002      	beq.n	801a988 <USBD_CDC_Setup+0xc8>
 801a982:	2b0a      	cmp	r3, #10
 801a984:	d019      	beq.n	801a9ba <USBD_CDC_Setup+0xfa>
 801a986:	e042      	b.n	801aa0e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	23a7      	movs	r3, #167	@ 0xa7
 801a98c:	009b      	lsls	r3, r3, #2
 801a98e:	5cd3      	ldrb	r3, [r2, r3]
 801a990:	2b03      	cmp	r3, #3
 801a992:	d107      	bne.n	801a9a4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801a994:	230c      	movs	r3, #12
 801a996:	18f9      	adds	r1, r7, r3
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2202      	movs	r2, #2
 801a99c:	0018      	movs	r0, r3
 801a99e:	f001 fb78 	bl	801c092 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a9a2:	e040      	b.n	801aa26 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a9a4:	683a      	ldr	r2, [r7, #0]
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	0011      	movs	r1, r2
 801a9aa:	0018      	movs	r0, r3
 801a9ac:	f001 faf3 	bl	801bf96 <USBD_CtlError>
            ret = USBD_FAIL;
 801a9b0:	2317      	movs	r3, #23
 801a9b2:	18fb      	adds	r3, r7, r3
 801a9b4:	2202      	movs	r2, #2
 801a9b6:	701a      	strb	r2, [r3, #0]
          break;
 801a9b8:	e035      	b.n	801aa26 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a9ba:	687a      	ldr	r2, [r7, #4]
 801a9bc:	23a7      	movs	r3, #167	@ 0xa7
 801a9be:	009b      	lsls	r3, r3, #2
 801a9c0:	5cd3      	ldrb	r3, [r2, r3]
 801a9c2:	2b03      	cmp	r3, #3
 801a9c4:	d107      	bne.n	801a9d6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801a9c6:	230f      	movs	r3, #15
 801a9c8:	18f9      	adds	r1, r7, r3
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2201      	movs	r2, #1
 801a9ce:	0018      	movs	r0, r3
 801a9d0:	f001 fb5f 	bl	801c092 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a9d4:	e027      	b.n	801aa26 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a9d6:	683a      	ldr	r2, [r7, #0]
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	0011      	movs	r1, r2
 801a9dc:	0018      	movs	r0, r3
 801a9de:	f001 fada 	bl	801bf96 <USBD_CtlError>
            ret = USBD_FAIL;
 801a9e2:	2317      	movs	r3, #23
 801a9e4:	18fb      	adds	r3, r7, r3
 801a9e6:	2202      	movs	r2, #2
 801a9e8:	701a      	strb	r2, [r3, #0]
          break;
 801a9ea:	e01c      	b.n	801aa26 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a9ec:	687a      	ldr	r2, [r7, #4]
 801a9ee:	23a7      	movs	r3, #167	@ 0xa7
 801a9f0:	009b      	lsls	r3, r3, #2
 801a9f2:	5cd3      	ldrb	r3, [r2, r3]
 801a9f4:	2b03      	cmp	r3, #3
 801a9f6:	d015      	beq.n	801aa24 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801a9f8:	683a      	ldr	r2, [r7, #0]
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	0011      	movs	r1, r2
 801a9fe:	0018      	movs	r0, r3
 801aa00:	f001 fac9 	bl	801bf96 <USBD_CtlError>
            ret = USBD_FAIL;
 801aa04:	2317      	movs	r3, #23
 801aa06:	18fb      	adds	r3, r7, r3
 801aa08:	2202      	movs	r2, #2
 801aa0a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801aa0c:	e00a      	b.n	801aa24 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801aa0e:	683a      	ldr	r2, [r7, #0]
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	0011      	movs	r1, r2
 801aa14:	0018      	movs	r0, r3
 801aa16:	f001 fabe 	bl	801bf96 <USBD_CtlError>
          ret = USBD_FAIL;
 801aa1a:	2317      	movs	r3, #23
 801aa1c:	18fb      	adds	r3, r7, r3
 801aa1e:	2202      	movs	r2, #2
 801aa20:	701a      	strb	r2, [r3, #0]
          break;
 801aa22:	e000      	b.n	801aa26 <USBD_CDC_Setup+0x166>
          break;
 801aa24:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801aa26:	e00a      	b.n	801aa3e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801aa28:	683a      	ldr	r2, [r7, #0]
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	0011      	movs	r1, r2
 801aa2e:	0018      	movs	r0, r3
 801aa30:	f001 fab1 	bl	801bf96 <USBD_CtlError>
      ret = USBD_FAIL;
 801aa34:	2317      	movs	r3, #23
 801aa36:	18fb      	adds	r3, r7, r3
 801aa38:	2202      	movs	r2, #2
 801aa3a:	701a      	strb	r2, [r3, #0]
      break;
 801aa3c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801aa3e:	2317      	movs	r3, #23
 801aa40:	18fb      	adds	r3, r7, r3
 801aa42:	781b      	ldrb	r3, [r3, #0]
}
 801aa44:	0018      	movs	r0, r3
 801aa46:	46bd      	mov	sp, r7
 801aa48:	b006      	add	sp, #24
 801aa4a:	bd80      	pop	{r7, pc}
 801aa4c:	00000201 	.word	0x00000201

0801aa50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b084      	sub	sp, #16
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	6078      	str	r0, [r7, #4]
 801aa58:	000a      	movs	r2, r1
 801aa5a:	1cfb      	adds	r3, r7, #3
 801aa5c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801aa5e:	687a      	ldr	r2, [r7, #4]
 801aa60:	23ae      	movs	r3, #174	@ 0xae
 801aa62:	009b      	lsls	r3, r3, #2
 801aa64:	58d3      	ldr	r3, [r2, r3]
 801aa66:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801aa68:	687a      	ldr	r2, [r7, #4]
 801aa6a:	23b0      	movs	r3, #176	@ 0xb0
 801aa6c:	009b      	lsls	r3, r3, #2
 801aa6e:	58d3      	ldr	r3, [r2, r3]
 801aa70:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801aa72:	687a      	ldr	r2, [r7, #4]
 801aa74:	23ae      	movs	r3, #174	@ 0xae
 801aa76:	009b      	lsls	r3, r3, #2
 801aa78:	58d3      	ldr	r3, [r2, r3]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d03e      	beq.n	801aafc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801aa7e:	1cfb      	adds	r3, r7, #3
 801aa80:	781a      	ldrb	r2, [r3, #0]
 801aa82:	6879      	ldr	r1, [r7, #4]
 801aa84:	0013      	movs	r3, r2
 801aa86:	009b      	lsls	r3, r3, #2
 801aa88:	189b      	adds	r3, r3, r2
 801aa8a:	009b      	lsls	r3, r3, #2
 801aa8c:	18cb      	adds	r3, r1, r3
 801aa8e:	331c      	adds	r3, #28
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d02b      	beq.n	801aaee <USBD_CDC_DataIn+0x9e>
 801aa96:	1cfb      	adds	r3, r7, #3
 801aa98:	781a      	ldrb	r2, [r3, #0]
 801aa9a:	6879      	ldr	r1, [r7, #4]
 801aa9c:	0013      	movs	r3, r2
 801aa9e:	009b      	lsls	r3, r3, #2
 801aaa0:	189b      	adds	r3, r3, r2
 801aaa2:	009b      	lsls	r3, r3, #2
 801aaa4:	18cb      	adds	r3, r1, r3
 801aaa6:	331c      	adds	r3, #28
 801aaa8:	6818      	ldr	r0, [r3, #0]
 801aaaa:	1cfb      	adds	r3, r7, #3
 801aaac:	781a      	ldrb	r2, [r3, #0]
 801aaae:	68b9      	ldr	r1, [r7, #8]
 801aab0:	0013      	movs	r3, r2
 801aab2:	009b      	lsls	r3, r3, #2
 801aab4:	189b      	adds	r3, r3, r2
 801aab6:	00db      	lsls	r3, r3, #3
 801aab8:	18cb      	adds	r3, r1, r3
 801aaba:	3338      	adds	r3, #56	@ 0x38
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	0019      	movs	r1, r3
 801aac0:	f7e5 fbf6 	bl	80002b0 <__aeabi_uidivmod>
 801aac4:	1e0b      	subs	r3, r1, #0
 801aac6:	d112      	bne.n	801aaee <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801aac8:	1cfb      	adds	r3, r7, #3
 801aaca:	781a      	ldrb	r2, [r3, #0]
 801aacc:	6879      	ldr	r1, [r7, #4]
 801aace:	0013      	movs	r3, r2
 801aad0:	009b      	lsls	r3, r3, #2
 801aad2:	189b      	adds	r3, r3, r2
 801aad4:	009b      	lsls	r3, r3, #2
 801aad6:	18cb      	adds	r3, r1, r3
 801aad8:	331c      	adds	r3, #28
 801aada:	2200      	movs	r2, #0
 801aadc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801aade:	1cfb      	adds	r3, r7, #3
 801aae0:	7819      	ldrb	r1, [r3, #0]
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	2300      	movs	r3, #0
 801aae6:	2200      	movs	r2, #0
 801aae8:	f002 f82f 	bl	801cb4a <USBD_LL_Transmit>
 801aaec:	e004      	b.n	801aaf8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801aaee:	68fa      	ldr	r2, [r7, #12]
 801aaf0:	2385      	movs	r3, #133	@ 0x85
 801aaf2:	009b      	lsls	r3, r3, #2
 801aaf4:	2100      	movs	r1, #0
 801aaf6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801aaf8:	2300      	movs	r3, #0
 801aafa:	e000      	b.n	801aafe <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801aafc:	2302      	movs	r3, #2
  }
}
 801aafe:	0018      	movs	r0, r3
 801ab00:	46bd      	mov	sp, r7
 801ab02:	b004      	add	sp, #16
 801ab04:	bd80      	pop	{r7, pc}

0801ab06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ab06:	b580      	push	{r7, lr}
 801ab08:	b084      	sub	sp, #16
 801ab0a:	af00      	add	r7, sp, #0
 801ab0c:	6078      	str	r0, [r7, #4]
 801ab0e:	000a      	movs	r2, r1
 801ab10:	1cfb      	adds	r3, r7, #3
 801ab12:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ab14:	687a      	ldr	r2, [r7, #4]
 801ab16:	23ae      	movs	r3, #174	@ 0xae
 801ab18:	009b      	lsls	r3, r3, #2
 801ab1a:	58d3      	ldr	r3, [r2, r3]
 801ab1c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801ab1e:	1cfb      	adds	r3, r7, #3
 801ab20:	781a      	ldrb	r2, [r3, #0]
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	0011      	movs	r1, r2
 801ab26:	0018      	movs	r0, r3
 801ab28:	f002 f87d 	bl	801cc26 <USBD_LL_GetRxDataSize>
 801ab2c:	0001      	movs	r1, r0
 801ab2e:	68fa      	ldr	r2, [r7, #12]
 801ab30:	2383      	movs	r3, #131	@ 0x83
 801ab32:	009b      	lsls	r3, r3, #2
 801ab34:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801ab36:	687a      	ldr	r2, [r7, #4]
 801ab38:	23ae      	movs	r3, #174	@ 0xae
 801ab3a:	009b      	lsls	r3, r3, #2
 801ab3c:	58d3      	ldr	r3, [r2, r3]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d011      	beq.n	801ab66 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801ab42:	687a      	ldr	r2, [r7, #4]
 801ab44:	23af      	movs	r3, #175	@ 0xaf
 801ab46:	009b      	lsls	r3, r3, #2
 801ab48:	58d3      	ldr	r3, [r2, r3]
 801ab4a:	68da      	ldr	r2, [r3, #12]
 801ab4c:	68f9      	ldr	r1, [r7, #12]
 801ab4e:	2381      	movs	r3, #129	@ 0x81
 801ab50:	009b      	lsls	r3, r3, #2
 801ab52:	58c8      	ldr	r0, [r1, r3]
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	2183      	movs	r1, #131	@ 0x83
 801ab58:	0089      	lsls	r1, r1, #2
 801ab5a:	468c      	mov	ip, r1
 801ab5c:	4463      	add	r3, ip
 801ab5e:	0019      	movs	r1, r3
 801ab60:	4790      	blx	r2

    return USBD_OK;
 801ab62:	2300      	movs	r3, #0
 801ab64:	e000      	b.n	801ab68 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801ab66:	2302      	movs	r3, #2
  }
}
 801ab68:	0018      	movs	r0, r3
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	b004      	add	sp, #16
 801ab6e:	bd80      	pop	{r7, pc}

0801ab70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801ab70:	b590      	push	{r4, r7, lr}
 801ab72:	b085      	sub	sp, #20
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ab78:	687a      	ldr	r2, [r7, #4]
 801ab7a:	23ae      	movs	r3, #174	@ 0xae
 801ab7c:	009b      	lsls	r3, r3, #2
 801ab7e:	58d3      	ldr	r3, [r2, r3]
 801ab80:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	23af      	movs	r3, #175	@ 0xaf
 801ab86:	009b      	lsls	r3, r3, #2
 801ab88:	58d3      	ldr	r3, [r2, r3]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d018      	beq.n	801abc0 <USBD_CDC_EP0_RxReady+0x50>
 801ab8e:	68fa      	ldr	r2, [r7, #12]
 801ab90:	2380      	movs	r3, #128	@ 0x80
 801ab92:	009b      	lsls	r3, r3, #2
 801ab94:	5cd3      	ldrb	r3, [r2, r3]
 801ab96:	2bff      	cmp	r3, #255	@ 0xff
 801ab98:	d012      	beq.n	801abc0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ab9a:	687a      	ldr	r2, [r7, #4]
 801ab9c:	23af      	movs	r3, #175	@ 0xaf
 801ab9e:	009b      	lsls	r3, r3, #2
 801aba0:	58d3      	ldr	r3, [r2, r3]
 801aba2:	689b      	ldr	r3, [r3, #8]
 801aba4:	68f9      	ldr	r1, [r7, #12]
 801aba6:	2280      	movs	r2, #128	@ 0x80
 801aba8:	0092      	lsls	r2, r2, #2
 801abaa:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801abac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801abae:	68fa      	ldr	r2, [r7, #12]
 801abb0:	4c06      	ldr	r4, [pc, #24]	@ (801abcc <USBD_CDC_EP0_RxReady+0x5c>)
 801abb2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801abb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801abb6:	68fa      	ldr	r2, [r7, #12]
 801abb8:	2380      	movs	r3, #128	@ 0x80
 801abba:	009b      	lsls	r3, r3, #2
 801abbc:	21ff      	movs	r1, #255	@ 0xff
 801abbe:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801abc0:	2300      	movs	r3, #0
}
 801abc2:	0018      	movs	r0, r3
 801abc4:	46bd      	mov	sp, r7
 801abc6:	b005      	add	sp, #20
 801abc8:	bd90      	pop	{r4, r7, pc}
 801abca:	46c0      	nop			@ (mov r8, r8)
 801abcc:	00000201 	.word	0x00000201

0801abd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b082      	sub	sp, #8
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	2243      	movs	r2, #67	@ 0x43
 801abdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801abde:	4b02      	ldr	r3, [pc, #8]	@ (801abe8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801abe0:	0018      	movs	r0, r3
 801abe2:	46bd      	mov	sp, r7
 801abe4:	b002      	add	sp, #8
 801abe6:	bd80      	pop	{r7, pc}
 801abe8:	20000168 	.word	0x20000168

0801abec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b082      	sub	sp, #8
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	2243      	movs	r2, #67	@ 0x43
 801abf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801abfa:	4b02      	ldr	r3, [pc, #8]	@ (801ac04 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801abfc:	0018      	movs	r0, r3
 801abfe:	46bd      	mov	sp, r7
 801ac00:	b002      	add	sp, #8
 801ac02:	bd80      	pop	{r7, pc}
 801ac04:	20000124 	.word	0x20000124

0801ac08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b082      	sub	sp, #8
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	2243      	movs	r2, #67	@ 0x43
 801ac14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801ac16:	4b02      	ldr	r3, [pc, #8]	@ (801ac20 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801ac18:	0018      	movs	r0, r3
 801ac1a:	46bd      	mov	sp, r7
 801ac1c:	b002      	add	sp, #8
 801ac1e:	bd80      	pop	{r7, pc}
 801ac20:	200001ac 	.word	0x200001ac

0801ac24 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b082      	sub	sp, #8
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	220a      	movs	r2, #10
 801ac30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801ac32:	4b02      	ldr	r3, [pc, #8]	@ (801ac3c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801ac34:	0018      	movs	r0, r3
 801ac36:	46bd      	mov	sp, r7
 801ac38:	b002      	add	sp, #8
 801ac3a:	bd80      	pop	{r7, pc}
 801ac3c:	200000e0 	.word	0x200000e0

0801ac40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b084      	sub	sp, #16
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
 801ac48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801ac4a:	200f      	movs	r0, #15
 801ac4c:	183b      	adds	r3, r7, r0
 801ac4e:	2202      	movs	r2, #2
 801ac50:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ac52:	683b      	ldr	r3, [r7, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d007      	beq.n	801ac68 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801ac58:	687a      	ldr	r2, [r7, #4]
 801ac5a:	23af      	movs	r3, #175	@ 0xaf
 801ac5c:	009b      	lsls	r3, r3, #2
 801ac5e:	6839      	ldr	r1, [r7, #0]
 801ac60:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801ac62:	183b      	adds	r3, r7, r0
 801ac64:	2200      	movs	r2, #0
 801ac66:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801ac68:	230f      	movs	r3, #15
 801ac6a:	18fb      	adds	r3, r7, r3
 801ac6c:	781b      	ldrb	r3, [r3, #0]
}
 801ac6e:	0018      	movs	r0, r3
 801ac70:	46bd      	mov	sp, r7
 801ac72:	b004      	add	sp, #16
 801ac74:	bd80      	pop	{r7, pc}

0801ac76 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801ac76:	b580      	push	{r7, lr}
 801ac78:	b086      	sub	sp, #24
 801ac7a:	af00      	add	r7, sp, #0
 801ac7c:	60f8      	str	r0, [r7, #12]
 801ac7e:	60b9      	str	r1, [r7, #8]
 801ac80:	1dbb      	adds	r3, r7, #6
 801ac82:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ac84:	68fa      	ldr	r2, [r7, #12]
 801ac86:	23ae      	movs	r3, #174	@ 0xae
 801ac88:	009b      	lsls	r3, r3, #2
 801ac8a:	58d3      	ldr	r3, [r2, r3]
 801ac8c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801ac8e:	697a      	ldr	r2, [r7, #20]
 801ac90:	2382      	movs	r3, #130	@ 0x82
 801ac92:	009b      	lsls	r3, r3, #2
 801ac94:	68b9      	ldr	r1, [r7, #8]
 801ac96:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801ac98:	1dbb      	adds	r3, r7, #6
 801ac9a:	8819      	ldrh	r1, [r3, #0]
 801ac9c:	697a      	ldr	r2, [r7, #20]
 801ac9e:	2384      	movs	r3, #132	@ 0x84
 801aca0:	009b      	lsls	r3, r3, #2
 801aca2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801aca4:	2300      	movs	r3, #0
}
 801aca6:	0018      	movs	r0, r3
 801aca8:	46bd      	mov	sp, r7
 801acaa:	b006      	add	sp, #24
 801acac:	bd80      	pop	{r7, pc}

0801acae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801acae:	b580      	push	{r7, lr}
 801acb0:	b084      	sub	sp, #16
 801acb2:	af00      	add	r7, sp, #0
 801acb4:	6078      	str	r0, [r7, #4]
 801acb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801acb8:	687a      	ldr	r2, [r7, #4]
 801acba:	23ae      	movs	r3, #174	@ 0xae
 801acbc:	009b      	lsls	r3, r3, #2
 801acbe:	58d3      	ldr	r3, [r2, r3]
 801acc0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801acc2:	68fa      	ldr	r2, [r7, #12]
 801acc4:	2381      	movs	r3, #129	@ 0x81
 801acc6:	009b      	lsls	r3, r3, #2
 801acc8:	6839      	ldr	r1, [r7, #0]
 801acca:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801accc:	2300      	movs	r3, #0
}
 801acce:	0018      	movs	r0, r3
 801acd0:	46bd      	mov	sp, r7
 801acd2:	b004      	add	sp, #16
 801acd4:	bd80      	pop	{r7, pc}

0801acd6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801acd6:	b580      	push	{r7, lr}
 801acd8:	b084      	sub	sp, #16
 801acda:	af00      	add	r7, sp, #0
 801acdc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801acde:	687a      	ldr	r2, [r7, #4]
 801ace0:	23ae      	movs	r3, #174	@ 0xae
 801ace2:	009b      	lsls	r3, r3, #2
 801ace4:	58d3      	ldr	r3, [r2, r3]
 801ace6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801ace8:	687a      	ldr	r2, [r7, #4]
 801acea:	23ae      	movs	r3, #174	@ 0xae
 801acec:	009b      	lsls	r3, r3, #2
 801acee:	58d3      	ldr	r3, [r2, r3]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d022      	beq.n	801ad3a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801acf4:	68fa      	ldr	r2, [r7, #12]
 801acf6:	2385      	movs	r3, #133	@ 0x85
 801acf8:	009b      	lsls	r3, r3, #2
 801acfa:	58d3      	ldr	r3, [r2, r3]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d11a      	bne.n	801ad36 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801ad00:	68fa      	ldr	r2, [r7, #12]
 801ad02:	2385      	movs	r3, #133	@ 0x85
 801ad04:	009b      	lsls	r3, r3, #2
 801ad06:	2101      	movs	r1, #1
 801ad08:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801ad0a:	68fa      	ldr	r2, [r7, #12]
 801ad0c:	2384      	movs	r3, #132	@ 0x84
 801ad0e:	009b      	lsls	r3, r3, #2
 801ad10:	58d2      	ldr	r2, [r2, r3]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801ad16:	68fa      	ldr	r2, [r7, #12]
 801ad18:	2382      	movs	r3, #130	@ 0x82
 801ad1a:	009b      	lsls	r3, r3, #2
 801ad1c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801ad1e:	68fa      	ldr	r2, [r7, #12]
 801ad20:	2384      	movs	r3, #132	@ 0x84
 801ad22:	009b      	lsls	r3, r3, #2
 801ad24:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801ad26:	b29b      	uxth	r3, r3
 801ad28:	6878      	ldr	r0, [r7, #4]
 801ad2a:	000a      	movs	r2, r1
 801ad2c:	2181      	movs	r1, #129	@ 0x81
 801ad2e:	f001 ff0c 	bl	801cb4a <USBD_LL_Transmit>

      return USBD_OK;
 801ad32:	2300      	movs	r3, #0
 801ad34:	e002      	b.n	801ad3c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801ad36:	2301      	movs	r3, #1
 801ad38:	e000      	b.n	801ad3c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801ad3a:	2302      	movs	r3, #2
  }
}
 801ad3c:	0018      	movs	r0, r3
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	b004      	add	sp, #16
 801ad42:	bd80      	pop	{r7, pc}

0801ad44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b084      	sub	sp, #16
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ad4c:	687a      	ldr	r2, [r7, #4]
 801ad4e:	23ae      	movs	r3, #174	@ 0xae
 801ad50:	009b      	lsls	r3, r3, #2
 801ad52:	58d3      	ldr	r3, [r2, r3]
 801ad54:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801ad56:	687a      	ldr	r2, [r7, #4]
 801ad58:	23ae      	movs	r3, #174	@ 0xae
 801ad5a:	009b      	lsls	r3, r3, #2
 801ad5c:	58d3      	ldr	r3, [r2, r3]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d019      	beq.n	801ad96 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	7c1b      	ldrb	r3, [r3, #16]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d10a      	bne.n	801ad80 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ad6a:	68fa      	ldr	r2, [r7, #12]
 801ad6c:	2381      	movs	r3, #129	@ 0x81
 801ad6e:	009b      	lsls	r3, r3, #2
 801ad70:	58d2      	ldr	r2, [r2, r3]
 801ad72:	2380      	movs	r3, #128	@ 0x80
 801ad74:	009b      	lsls	r3, r3, #2
 801ad76:	6878      	ldr	r0, [r7, #4]
 801ad78:	2101      	movs	r1, #1
 801ad7a:	f001 ff1d 	bl	801cbb8 <USBD_LL_PrepareReceive>
 801ad7e:	e008      	b.n	801ad92 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ad80:	68fa      	ldr	r2, [r7, #12]
 801ad82:	2381      	movs	r3, #129	@ 0x81
 801ad84:	009b      	lsls	r3, r3, #2
 801ad86:	58d2      	ldr	r2, [r2, r3]
 801ad88:	6878      	ldr	r0, [r7, #4]
 801ad8a:	2340      	movs	r3, #64	@ 0x40
 801ad8c:	2101      	movs	r1, #1
 801ad8e:	f001 ff13 	bl	801cbb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801ad92:	2300      	movs	r3, #0
 801ad94:	e000      	b.n	801ad98 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801ad96:	2302      	movs	r3, #2
  }
}
 801ad98:	0018      	movs	r0, r3
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	b004      	add	sp, #16
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b084      	sub	sp, #16
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	60f8      	str	r0, [r7, #12]
 801ada8:	60b9      	str	r1, [r7, #8]
 801adaa:	1dfb      	adds	r3, r7, #7
 801adac:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d101      	bne.n	801adb8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801adb4:	2302      	movs	r3, #2
 801adb6:	e020      	b.n	801adfa <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801adb8:	68fa      	ldr	r2, [r7, #12]
 801adba:	23ad      	movs	r3, #173	@ 0xad
 801adbc:	009b      	lsls	r3, r3, #2
 801adbe:	58d3      	ldr	r3, [r2, r3]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d004      	beq.n	801adce <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801adc4:	68fa      	ldr	r2, [r7, #12]
 801adc6:	23ad      	movs	r3, #173	@ 0xad
 801adc8:	009b      	lsls	r3, r3, #2
 801adca:	2100      	movs	r1, #0
 801adcc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801adce:	68bb      	ldr	r3, [r7, #8]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d004      	beq.n	801adde <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801add4:	68fa      	ldr	r2, [r7, #12]
 801add6:	23ac      	movs	r3, #172	@ 0xac
 801add8:	009b      	lsls	r3, r3, #2
 801adda:	68b9      	ldr	r1, [r7, #8]
 801addc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801adde:	68fa      	ldr	r2, [r7, #12]
 801ade0:	23a7      	movs	r3, #167	@ 0xa7
 801ade2:	009b      	lsls	r3, r3, #2
 801ade4:	2101      	movs	r1, #1
 801ade6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	1dfa      	adds	r2, r7, #7
 801adec:	7812      	ldrb	r2, [r2, #0]
 801adee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801adf0:	68fb      	ldr	r3, [r7, #12]
 801adf2:	0018      	movs	r0, r3
 801adf4:	f001 fd0c 	bl	801c810 <USBD_LL_Init>

  return USBD_OK;
 801adf8:	2300      	movs	r3, #0
}
 801adfa:	0018      	movs	r0, r3
 801adfc:	46bd      	mov	sp, r7
 801adfe:	b004      	add	sp, #16
 801ae00:	bd80      	pop	{r7, pc}

0801ae02 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801ae02:	b580      	push	{r7, lr}
 801ae04:	b084      	sub	sp, #16
 801ae06:	af00      	add	r7, sp, #0
 801ae08:	6078      	str	r0, [r7, #4]
 801ae0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801ae0c:	200f      	movs	r0, #15
 801ae0e:	183b      	adds	r3, r7, r0
 801ae10:	2200      	movs	r2, #0
 801ae12:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d008      	beq.n	801ae2c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801ae1a:	687a      	ldr	r2, [r7, #4]
 801ae1c:	23ad      	movs	r3, #173	@ 0xad
 801ae1e:	009b      	lsls	r3, r3, #2
 801ae20:	6839      	ldr	r1, [r7, #0]
 801ae22:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801ae24:	183b      	adds	r3, r7, r0
 801ae26:	2200      	movs	r2, #0
 801ae28:	701a      	strb	r2, [r3, #0]
 801ae2a:	e003      	b.n	801ae34 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801ae2c:	230f      	movs	r3, #15
 801ae2e:	18fb      	adds	r3, r7, r3
 801ae30:	2202      	movs	r2, #2
 801ae32:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801ae34:	230f      	movs	r3, #15
 801ae36:	18fb      	adds	r3, r7, r3
 801ae38:	781b      	ldrb	r3, [r3, #0]
}
 801ae3a:	0018      	movs	r0, r3
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	b004      	add	sp, #16
 801ae40:	bd80      	pop	{r7, pc}

0801ae42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ae42:	b580      	push	{r7, lr}
 801ae44:	b082      	sub	sp, #8
 801ae46:	af00      	add	r7, sp, #0
 801ae48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	0018      	movs	r0, r3
 801ae4e:	f001 fd43 	bl	801c8d8 <USBD_LL_Start>

  return USBD_OK;
 801ae52:	2300      	movs	r3, #0
}
 801ae54:	0018      	movs	r0, r3
 801ae56:	46bd      	mov	sp, r7
 801ae58:	b002      	add	sp, #8
 801ae5a:	bd80      	pop	{r7, pc}

0801ae5c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b082      	sub	sp, #8
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ae64:	2300      	movs	r3, #0
}
 801ae66:	0018      	movs	r0, r3
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	b002      	add	sp, #8
 801ae6c:	bd80      	pop	{r7, pc}

0801ae6e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ae6e:	b590      	push	{r4, r7, lr}
 801ae70:	b085      	sub	sp, #20
 801ae72:	af00      	add	r7, sp, #0
 801ae74:	6078      	str	r0, [r7, #4]
 801ae76:	000a      	movs	r2, r1
 801ae78:	1cfb      	adds	r3, r7, #3
 801ae7a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ae7c:	240f      	movs	r4, #15
 801ae7e:	193b      	adds	r3, r7, r4
 801ae80:	2202      	movs	r2, #2
 801ae82:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801ae84:	687a      	ldr	r2, [r7, #4]
 801ae86:	23ad      	movs	r3, #173	@ 0xad
 801ae88:	009b      	lsls	r3, r3, #2
 801ae8a:	58d3      	ldr	r3, [r2, r3]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d00e      	beq.n	801aeae <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801ae90:	687a      	ldr	r2, [r7, #4]
 801ae92:	23ad      	movs	r3, #173	@ 0xad
 801ae94:	009b      	lsls	r3, r3, #2
 801ae96:	58d3      	ldr	r3, [r2, r3]
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	1cfa      	adds	r2, r7, #3
 801ae9c:	7811      	ldrb	r1, [r2, #0]
 801ae9e:	687a      	ldr	r2, [r7, #4]
 801aea0:	0010      	movs	r0, r2
 801aea2:	4798      	blx	r3
 801aea4:	1e03      	subs	r3, r0, #0
 801aea6:	d102      	bne.n	801aeae <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801aea8:	193b      	adds	r3, r7, r4
 801aeaa:	2200      	movs	r2, #0
 801aeac:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801aeae:	230f      	movs	r3, #15
 801aeb0:	18fb      	adds	r3, r7, r3
 801aeb2:	781b      	ldrb	r3, [r3, #0]
}
 801aeb4:	0018      	movs	r0, r3
 801aeb6:	46bd      	mov	sp, r7
 801aeb8:	b005      	add	sp, #20
 801aeba:	bd90      	pop	{r4, r7, pc}

0801aebc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b082      	sub	sp, #8
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
 801aec4:	000a      	movs	r2, r1
 801aec6:	1cfb      	adds	r3, r7, #3
 801aec8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801aeca:	687a      	ldr	r2, [r7, #4]
 801aecc:	23ad      	movs	r3, #173	@ 0xad
 801aece:	009b      	lsls	r3, r3, #2
 801aed0:	58d3      	ldr	r3, [r2, r3]
 801aed2:	685b      	ldr	r3, [r3, #4]
 801aed4:	1cfa      	adds	r2, r7, #3
 801aed6:	7811      	ldrb	r1, [r2, #0]
 801aed8:	687a      	ldr	r2, [r7, #4]
 801aeda:	0010      	movs	r0, r2
 801aedc:	4798      	blx	r3

  return USBD_OK;
 801aede:	2300      	movs	r3, #0
}
 801aee0:	0018      	movs	r0, r3
 801aee2:	46bd      	mov	sp, r7
 801aee4:	b002      	add	sp, #8
 801aee6:	bd80      	pop	{r7, pc}

0801aee8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801aee8:	b580      	push	{r7, lr}
 801aeea:	b082      	sub	sp, #8
 801aeec:	af00      	add	r7, sp, #0
 801aeee:	6078      	str	r0, [r7, #4]
 801aef0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	22aa      	movs	r2, #170	@ 0xaa
 801aef6:	0092      	lsls	r2, r2, #2
 801aef8:	4694      	mov	ip, r2
 801aefa:	4463      	add	r3, ip
 801aefc:	683a      	ldr	r2, [r7, #0]
 801aefe:	0011      	movs	r1, r2
 801af00:	0018      	movs	r0, r3
 801af02:	f001 f810 	bl	801bf26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801af06:	687a      	ldr	r2, [r7, #4]
 801af08:	23a5      	movs	r3, #165	@ 0xa5
 801af0a:	009b      	lsls	r3, r3, #2
 801af0c:	2101      	movs	r1, #1
 801af0e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	4a23      	ldr	r2, [pc, #140]	@ (801afa0 <USBD_LL_SetupStage+0xb8>)
 801af14:	5a9b      	ldrh	r3, [r3, r2]
 801af16:	0019      	movs	r1, r3
 801af18:	687a      	ldr	r2, [r7, #4]
 801af1a:	23a6      	movs	r3, #166	@ 0xa6
 801af1c:	009b      	lsls	r3, r3, #2
 801af1e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801af20:	687a      	ldr	r2, [r7, #4]
 801af22:	23aa      	movs	r3, #170	@ 0xaa
 801af24:	009b      	lsls	r3, r3, #2
 801af26:	5cd3      	ldrb	r3, [r2, r3]
 801af28:	001a      	movs	r2, r3
 801af2a:	231f      	movs	r3, #31
 801af2c:	4013      	ands	r3, r2
 801af2e:	2b02      	cmp	r3, #2
 801af30:	d019      	beq.n	801af66 <USBD_LL_SetupStage+0x7e>
 801af32:	d822      	bhi.n	801af7a <USBD_LL_SetupStage+0x92>
 801af34:	2b00      	cmp	r3, #0
 801af36:	d002      	beq.n	801af3e <USBD_LL_SetupStage+0x56>
 801af38:	2b01      	cmp	r3, #1
 801af3a:	d00a      	beq.n	801af52 <USBD_LL_SetupStage+0x6a>
 801af3c:	e01d      	b.n	801af7a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	22aa      	movs	r2, #170	@ 0xaa
 801af42:	0092      	lsls	r2, r2, #2
 801af44:	189a      	adds	r2, r3, r2
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	0011      	movs	r1, r2
 801af4a:	0018      	movs	r0, r3
 801af4c:	f000 fa10 	bl	801b370 <USBD_StdDevReq>
      break;
 801af50:	e020      	b.n	801af94 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	22aa      	movs	r2, #170	@ 0xaa
 801af56:	0092      	lsls	r2, r2, #2
 801af58:	189a      	adds	r2, r3, r2
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	0011      	movs	r1, r2
 801af5e:	0018      	movs	r0, r3
 801af60:	f000 fa78 	bl	801b454 <USBD_StdItfReq>
      break;
 801af64:	e016      	b.n	801af94 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	22aa      	movs	r2, #170	@ 0xaa
 801af6a:	0092      	lsls	r2, r2, #2
 801af6c:	189a      	adds	r2, r3, r2
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	0011      	movs	r1, r2
 801af72:	0018      	movs	r0, r3
 801af74:	f000 fac5 	bl	801b502 <USBD_StdEPReq>
      break;
 801af78:	e00c      	b.n	801af94 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801af7a:	687a      	ldr	r2, [r7, #4]
 801af7c:	23aa      	movs	r3, #170	@ 0xaa
 801af7e:	009b      	lsls	r3, r3, #2
 801af80:	5cd3      	ldrb	r3, [r2, r3]
 801af82:	227f      	movs	r2, #127	@ 0x7f
 801af84:	4393      	bics	r3, r2
 801af86:	b2da      	uxtb	r2, r3
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	0011      	movs	r1, r2
 801af8c:	0018      	movs	r0, r3
 801af8e:	f001 fd2a 	bl	801c9e6 <USBD_LL_StallEP>
      break;
 801af92:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801af94:	2300      	movs	r3, #0
}
 801af96:	0018      	movs	r0, r3
 801af98:	46bd      	mov	sp, r7
 801af9a:	b002      	add	sp, #8
 801af9c:	bd80      	pop	{r7, pc}
 801af9e:	46c0      	nop			@ (mov r8, r8)
 801afa0:	000002ae 	.word	0x000002ae

0801afa4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b086      	sub	sp, #24
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	60f8      	str	r0, [r7, #12]
 801afac:	607a      	str	r2, [r7, #4]
 801afae:	200b      	movs	r0, #11
 801afb0:	183b      	adds	r3, r7, r0
 801afb2:	1c0a      	adds	r2, r1, #0
 801afb4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801afb6:	183b      	adds	r3, r7, r0
 801afb8:	781b      	ldrb	r3, [r3, #0]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d154      	bne.n	801b068 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	3355      	adds	r3, #85	@ 0x55
 801afc2:	33ff      	adds	r3, #255	@ 0xff
 801afc4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801afc6:	68fa      	ldr	r2, [r7, #12]
 801afc8:	23a5      	movs	r3, #165	@ 0xa5
 801afca:	009b      	lsls	r3, r3, #2
 801afcc:	58d3      	ldr	r3, [r2, r3]
 801afce:	2b03      	cmp	r3, #3
 801afd0:	d139      	bne.n	801b046 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801afd2:	697b      	ldr	r3, [r7, #20]
 801afd4:	68da      	ldr	r2, [r3, #12]
 801afd6:	697b      	ldr	r3, [r7, #20]
 801afd8:	691b      	ldr	r3, [r3, #16]
 801afda:	429a      	cmp	r2, r3
 801afdc:	d919      	bls.n	801b012 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801afde:	697b      	ldr	r3, [r7, #20]
 801afe0:	68da      	ldr	r2, [r3, #12]
 801afe2:	697b      	ldr	r3, [r7, #20]
 801afe4:	691b      	ldr	r3, [r3, #16]
 801afe6:	1ad2      	subs	r2, r2, r3
 801afe8:	697b      	ldr	r3, [r7, #20]
 801afea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801afec:	697b      	ldr	r3, [r7, #20]
 801afee:	68da      	ldr	r2, [r3, #12]
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801aff4:	429a      	cmp	r2, r3
 801aff6:	d203      	bcs.n	801b000 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801aff8:	697b      	ldr	r3, [r7, #20]
 801affa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801affc:	b29b      	uxth	r3, r3
 801affe:	e002      	b.n	801b006 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b000:	697b      	ldr	r3, [r7, #20]
 801b002:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b004:	b29b      	uxth	r3, r3
 801b006:	6879      	ldr	r1, [r7, #4]
 801b008:	68f8      	ldr	r0, [r7, #12]
 801b00a:	001a      	movs	r2, r3
 801b00c:	f001 f898 	bl	801c140 <USBD_CtlContinueRx>
 801b010:	e045      	b.n	801b09e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b012:	68fa      	ldr	r2, [r7, #12]
 801b014:	23ad      	movs	r3, #173	@ 0xad
 801b016:	009b      	lsls	r3, r3, #2
 801b018:	58d3      	ldr	r3, [r2, r3]
 801b01a:	691b      	ldr	r3, [r3, #16]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d00d      	beq.n	801b03c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b020:	68fa      	ldr	r2, [r7, #12]
 801b022:	23a7      	movs	r3, #167	@ 0xa7
 801b024:	009b      	lsls	r3, r3, #2
 801b026:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b028:	2b03      	cmp	r3, #3
 801b02a:	d107      	bne.n	801b03c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b02c:	68fa      	ldr	r2, [r7, #12]
 801b02e:	23ad      	movs	r3, #173	@ 0xad
 801b030:	009b      	lsls	r3, r3, #2
 801b032:	58d3      	ldr	r3, [r2, r3]
 801b034:	691b      	ldr	r3, [r3, #16]
 801b036:	68fa      	ldr	r2, [r7, #12]
 801b038:	0010      	movs	r0, r2
 801b03a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	0018      	movs	r0, r3
 801b040:	f001 f891 	bl	801c166 <USBD_CtlSendStatus>
 801b044:	e02b      	b.n	801b09e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b046:	68fa      	ldr	r2, [r7, #12]
 801b048:	23a5      	movs	r3, #165	@ 0xa5
 801b04a:	009b      	lsls	r3, r3, #2
 801b04c:	58d3      	ldr	r3, [r2, r3]
 801b04e:	2b05      	cmp	r3, #5
 801b050:	d125      	bne.n	801b09e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801b052:	68fa      	ldr	r2, [r7, #12]
 801b054:	23a5      	movs	r3, #165	@ 0xa5
 801b056:	009b      	lsls	r3, r3, #2
 801b058:	2100      	movs	r1, #0
 801b05a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	2100      	movs	r1, #0
 801b060:	0018      	movs	r0, r3
 801b062:	f001 fcc0 	bl	801c9e6 <USBD_LL_StallEP>
 801b066:	e01a      	b.n	801b09e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801b068:	68fa      	ldr	r2, [r7, #12]
 801b06a:	23ad      	movs	r3, #173	@ 0xad
 801b06c:	009b      	lsls	r3, r3, #2
 801b06e:	58d3      	ldr	r3, [r2, r3]
 801b070:	699b      	ldr	r3, [r3, #24]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d011      	beq.n	801b09a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b076:	68fa      	ldr	r2, [r7, #12]
 801b078:	23a7      	movs	r3, #167	@ 0xa7
 801b07a:	009b      	lsls	r3, r3, #2
 801b07c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801b07e:	2b03      	cmp	r3, #3
 801b080:	d10b      	bne.n	801b09a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801b082:	68fa      	ldr	r2, [r7, #12]
 801b084:	23ad      	movs	r3, #173	@ 0xad
 801b086:	009b      	lsls	r3, r3, #2
 801b088:	58d3      	ldr	r3, [r2, r3]
 801b08a:	699b      	ldr	r3, [r3, #24]
 801b08c:	220b      	movs	r2, #11
 801b08e:	18ba      	adds	r2, r7, r2
 801b090:	7811      	ldrb	r1, [r2, #0]
 801b092:	68fa      	ldr	r2, [r7, #12]
 801b094:	0010      	movs	r0, r2
 801b096:	4798      	blx	r3
 801b098:	e001      	b.n	801b09e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b09a:	2302      	movs	r3, #2
 801b09c:	e000      	b.n	801b0a0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801b09e:	2300      	movs	r3, #0
}
 801b0a0:	0018      	movs	r0, r3
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	b006      	add	sp, #24
 801b0a6:	bd80      	pop	{r7, pc}

0801b0a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b086      	sub	sp, #24
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	60f8      	str	r0, [r7, #12]
 801b0b0:	607a      	str	r2, [r7, #4]
 801b0b2:	200b      	movs	r0, #11
 801b0b4:	183b      	adds	r3, r7, r0
 801b0b6:	1c0a      	adds	r2, r1, #0
 801b0b8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b0ba:	183b      	adds	r3, r7, r0
 801b0bc:	781b      	ldrb	r3, [r3, #0]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d000      	beq.n	801b0c4 <USBD_LL_DataInStage+0x1c>
 801b0c2:	e08e      	b.n	801b1e2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	3314      	adds	r3, #20
 801b0c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b0ca:	68fa      	ldr	r2, [r7, #12]
 801b0cc:	23a5      	movs	r3, #165	@ 0xa5
 801b0ce:	009b      	lsls	r3, r3, #2
 801b0d0:	58d3      	ldr	r3, [r2, r3]
 801b0d2:	2b02      	cmp	r3, #2
 801b0d4:	d164      	bne.n	801b1a0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801b0d6:	697b      	ldr	r3, [r7, #20]
 801b0d8:	68da      	ldr	r2, [r3, #12]
 801b0da:	697b      	ldr	r3, [r7, #20]
 801b0dc:	691b      	ldr	r3, [r3, #16]
 801b0de:	429a      	cmp	r2, r3
 801b0e0:	d915      	bls.n	801b10e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	68da      	ldr	r2, [r3, #12]
 801b0e6:	697b      	ldr	r3, [r7, #20]
 801b0e8:	691b      	ldr	r3, [r3, #16]
 801b0ea:	1ad2      	subs	r2, r2, r3
 801b0ec:	697b      	ldr	r3, [r7, #20]
 801b0ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801b0f0:	697b      	ldr	r3, [r7, #20]
 801b0f2:	68db      	ldr	r3, [r3, #12]
 801b0f4:	b29a      	uxth	r2, r3
 801b0f6:	6879      	ldr	r1, [r7, #4]
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	0018      	movs	r0, r3
 801b0fc:	f000 ffe9 	bl	801c0d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b100:	68f8      	ldr	r0, [r7, #12]
 801b102:	2300      	movs	r3, #0
 801b104:	2200      	movs	r2, #0
 801b106:	2100      	movs	r1, #0
 801b108:	f001 fd56 	bl	801cbb8 <USBD_LL_PrepareReceive>
 801b10c:	e059      	b.n	801b1c2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b10e:	697b      	ldr	r3, [r7, #20]
 801b110:	689a      	ldr	r2, [r3, #8]
 801b112:	697b      	ldr	r3, [r7, #20]
 801b114:	691b      	ldr	r3, [r3, #16]
 801b116:	0019      	movs	r1, r3
 801b118:	0010      	movs	r0, r2
 801b11a:	f7e5 f8c9 	bl	80002b0 <__aeabi_uidivmod>
 801b11e:	1e0b      	subs	r3, r1, #0
 801b120:	d11f      	bne.n	801b162 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801b122:	697b      	ldr	r3, [r7, #20]
 801b124:	689a      	ldr	r2, [r3, #8]
 801b126:	697b      	ldr	r3, [r7, #20]
 801b128:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801b12a:	429a      	cmp	r2, r3
 801b12c:	d319      	bcc.n	801b162 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	689a      	ldr	r2, [r3, #8]
 801b132:	68f9      	ldr	r1, [r7, #12]
 801b134:	23a6      	movs	r3, #166	@ 0xa6
 801b136:	009b      	lsls	r3, r3, #2
 801b138:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801b13a:	429a      	cmp	r2, r3
 801b13c:	d211      	bcs.n	801b162 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801b13e:	68fb      	ldr	r3, [r7, #12]
 801b140:	2200      	movs	r2, #0
 801b142:	2100      	movs	r1, #0
 801b144:	0018      	movs	r0, r3
 801b146:	f000 ffc4 	bl	801c0d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801b14a:	68fa      	ldr	r2, [r7, #12]
 801b14c:	23a6      	movs	r3, #166	@ 0xa6
 801b14e:	009b      	lsls	r3, r3, #2
 801b150:	2100      	movs	r1, #0
 801b152:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b154:	68f8      	ldr	r0, [r7, #12]
 801b156:	2300      	movs	r3, #0
 801b158:	2200      	movs	r2, #0
 801b15a:	2100      	movs	r1, #0
 801b15c:	f001 fd2c 	bl	801cbb8 <USBD_LL_PrepareReceive>
 801b160:	e02f      	b.n	801b1c2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b162:	68fa      	ldr	r2, [r7, #12]
 801b164:	23ad      	movs	r3, #173	@ 0xad
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	58d3      	ldr	r3, [r2, r3]
 801b16a:	68db      	ldr	r3, [r3, #12]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d00d      	beq.n	801b18c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b170:	68fa      	ldr	r2, [r7, #12]
 801b172:	23a7      	movs	r3, #167	@ 0xa7
 801b174:	009b      	lsls	r3, r3, #2
 801b176:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801b178:	2b03      	cmp	r3, #3
 801b17a:	d107      	bne.n	801b18c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801b17c:	68fa      	ldr	r2, [r7, #12]
 801b17e:	23ad      	movs	r3, #173	@ 0xad
 801b180:	009b      	lsls	r3, r3, #2
 801b182:	58d3      	ldr	r3, [r2, r3]
 801b184:	68db      	ldr	r3, [r3, #12]
 801b186:	68fa      	ldr	r2, [r7, #12]
 801b188:	0010      	movs	r0, r2
 801b18a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	2180      	movs	r1, #128	@ 0x80
 801b190:	0018      	movs	r0, r3
 801b192:	f001 fc28 	bl	801c9e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	0018      	movs	r0, r3
 801b19a:	f000 fff8 	bl	801c18e <USBD_CtlReceiveStatus>
 801b19e:	e010      	b.n	801b1c2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b1a0:	68fa      	ldr	r2, [r7, #12]
 801b1a2:	23a5      	movs	r3, #165	@ 0xa5
 801b1a4:	009b      	lsls	r3, r3, #2
 801b1a6:	58d3      	ldr	r3, [r2, r3]
 801b1a8:	2b04      	cmp	r3, #4
 801b1aa:	d005      	beq.n	801b1b8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801b1ac:	68fa      	ldr	r2, [r7, #12]
 801b1ae:	23a5      	movs	r3, #165	@ 0xa5
 801b1b0:	009b      	lsls	r3, r3, #2
 801b1b2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d104      	bne.n	801b1c2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	2180      	movs	r1, #128	@ 0x80
 801b1bc:	0018      	movs	r0, r3
 801b1be:	f001 fc12 	bl	801c9e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801b1c2:	68fa      	ldr	r2, [r7, #12]
 801b1c4:	23a8      	movs	r3, #168	@ 0xa8
 801b1c6:	009b      	lsls	r3, r3, #2
 801b1c8:	5cd3      	ldrb	r3, [r2, r3]
 801b1ca:	2b01      	cmp	r3, #1
 801b1cc:	d124      	bne.n	801b218 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	0018      	movs	r0, r3
 801b1d2:	f7ff fe43 	bl	801ae5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801b1d6:	68fa      	ldr	r2, [r7, #12]
 801b1d8:	23a8      	movs	r3, #168	@ 0xa8
 801b1da:	009b      	lsls	r3, r3, #2
 801b1dc:	2100      	movs	r1, #0
 801b1de:	54d1      	strb	r1, [r2, r3]
 801b1e0:	e01a      	b.n	801b218 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801b1e2:	68fa      	ldr	r2, [r7, #12]
 801b1e4:	23ad      	movs	r3, #173	@ 0xad
 801b1e6:	009b      	lsls	r3, r3, #2
 801b1e8:	58d3      	ldr	r3, [r2, r3]
 801b1ea:	695b      	ldr	r3, [r3, #20]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d011      	beq.n	801b214 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b1f0:	68fa      	ldr	r2, [r7, #12]
 801b1f2:	23a7      	movs	r3, #167	@ 0xa7
 801b1f4:	009b      	lsls	r3, r3, #2
 801b1f6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801b1f8:	2b03      	cmp	r3, #3
 801b1fa:	d10b      	bne.n	801b214 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801b1fc:	68fa      	ldr	r2, [r7, #12]
 801b1fe:	23ad      	movs	r3, #173	@ 0xad
 801b200:	009b      	lsls	r3, r3, #2
 801b202:	58d3      	ldr	r3, [r2, r3]
 801b204:	695b      	ldr	r3, [r3, #20]
 801b206:	220b      	movs	r2, #11
 801b208:	18ba      	adds	r2, r7, r2
 801b20a:	7811      	ldrb	r1, [r2, #0]
 801b20c:	68fa      	ldr	r2, [r7, #12]
 801b20e:	0010      	movs	r0, r2
 801b210:	4798      	blx	r3
 801b212:	e001      	b.n	801b218 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b214:	2302      	movs	r3, #2
 801b216:	e000      	b.n	801b21a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801b218:	2300      	movs	r3, #0
}
 801b21a:	0018      	movs	r0, r3
 801b21c:	46bd      	mov	sp, r7
 801b21e:	b006      	add	sp, #24
 801b220:	bd80      	pop	{r7, pc}

0801b222 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801b222:	b580      	push	{r7, lr}
 801b224:	b082      	sub	sp, #8
 801b226:	af00      	add	r7, sp, #0
 801b228:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	2340      	movs	r3, #64	@ 0x40
 801b22e:	2200      	movs	r2, #0
 801b230:	2100      	movs	r1, #0
 801b232:	f001 fb76 	bl	801c922 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801b236:	687a      	ldr	r2, [r7, #4]
 801b238:	23ac      	movs	r3, #172	@ 0xac
 801b23a:	005b      	lsls	r3, r3, #1
 801b23c:	2101      	movs	r1, #1
 801b23e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801b240:	687a      	ldr	r2, [r7, #4]
 801b242:	23b2      	movs	r3, #178	@ 0xb2
 801b244:	005b      	lsls	r3, r3, #1
 801b246:	2140      	movs	r1, #64	@ 0x40
 801b248:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b24a:	6878      	ldr	r0, [r7, #4]
 801b24c:	2340      	movs	r3, #64	@ 0x40
 801b24e:	2200      	movs	r2, #0
 801b250:	2180      	movs	r1, #128	@ 0x80
 801b252:	f001 fb66 	bl	801c922 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	2201      	movs	r2, #1
 801b25a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	2240      	movs	r2, #64	@ 0x40
 801b260:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b262:	687a      	ldr	r2, [r7, #4]
 801b264:	23a7      	movs	r3, #167	@ 0xa7
 801b266:	009b      	lsls	r3, r3, #2
 801b268:	2101      	movs	r1, #1
 801b26a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801b26c:	687a      	ldr	r2, [r7, #4]
 801b26e:	23a5      	movs	r3, #165	@ 0xa5
 801b270:	009b      	lsls	r3, r3, #2
 801b272:	2100      	movs	r1, #0
 801b274:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2200      	movs	r2, #0
 801b27a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b27c:	687a      	ldr	r2, [r7, #4]
 801b27e:	23a9      	movs	r3, #169	@ 0xa9
 801b280:	009b      	lsls	r3, r3, #2
 801b282:	2100      	movs	r1, #0
 801b284:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801b286:	687a      	ldr	r2, [r7, #4]
 801b288:	23ae      	movs	r3, #174	@ 0xae
 801b28a:	009b      	lsls	r3, r3, #2
 801b28c:	58d3      	ldr	r3, [r2, r3]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d00a      	beq.n	801b2a8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801b292:	687a      	ldr	r2, [r7, #4]
 801b294:	23ad      	movs	r3, #173	@ 0xad
 801b296:	009b      	lsls	r3, r3, #2
 801b298:	58d3      	ldr	r3, [r2, r3]
 801b29a:	685a      	ldr	r2, [r3, #4]
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	685b      	ldr	r3, [r3, #4]
 801b2a0:	b2d9      	uxtb	r1, r3
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	0018      	movs	r0, r3
 801b2a6:	4790      	blx	r2
  }

  return USBD_OK;
 801b2a8:	2300      	movs	r3, #0
}
 801b2aa:	0018      	movs	r0, r3
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	b002      	add	sp, #8
 801b2b0:	bd80      	pop	{r7, pc}

0801b2b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b2b2:	b580      	push	{r7, lr}
 801b2b4:	b082      	sub	sp, #8
 801b2b6:	af00      	add	r7, sp, #0
 801b2b8:	6078      	str	r0, [r7, #4]
 801b2ba:	000a      	movs	r2, r1
 801b2bc:	1cfb      	adds	r3, r7, #3
 801b2be:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	1cfa      	adds	r2, r7, #3
 801b2c4:	7812      	ldrb	r2, [r2, #0]
 801b2c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b2c8:	2300      	movs	r3, #0
}
 801b2ca:	0018      	movs	r0, r3
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	b002      	add	sp, #8
 801b2d0:	bd80      	pop	{r7, pc}
	...

0801b2d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b082      	sub	sp, #8
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	23a7      	movs	r3, #167	@ 0xa7
 801b2e0:	009b      	lsls	r3, r3, #2
 801b2e2:	5cd1      	ldrb	r1, [r2, r3]
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	4a06      	ldr	r2, [pc, #24]	@ (801b300 <USBD_LL_Suspend+0x2c>)
 801b2e8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801b2ea:	687a      	ldr	r2, [r7, #4]
 801b2ec:	23a7      	movs	r3, #167	@ 0xa7
 801b2ee:	009b      	lsls	r3, r3, #2
 801b2f0:	2104      	movs	r1, #4
 801b2f2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801b2f4:	2300      	movs	r3, #0
}
 801b2f6:	0018      	movs	r0, r3
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	b002      	add	sp, #8
 801b2fc:	bd80      	pop	{r7, pc}
 801b2fe:	46c0      	nop			@ (mov r8, r8)
 801b300:	0000029d 	.word	0x0000029d

0801b304 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b304:	b580      	push	{r7, lr}
 801b306:	b082      	sub	sp, #8
 801b308:	af00      	add	r7, sp, #0
 801b30a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b30c:	687a      	ldr	r2, [r7, #4]
 801b30e:	23a7      	movs	r3, #167	@ 0xa7
 801b310:	009b      	lsls	r3, r3, #2
 801b312:	5cd3      	ldrb	r3, [r2, r3]
 801b314:	2b04      	cmp	r3, #4
 801b316:	d106      	bne.n	801b326 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	4a05      	ldr	r2, [pc, #20]	@ (801b330 <USBD_LL_Resume+0x2c>)
 801b31c:	5c99      	ldrb	r1, [r3, r2]
 801b31e:	687a      	ldr	r2, [r7, #4]
 801b320:	23a7      	movs	r3, #167	@ 0xa7
 801b322:	009b      	lsls	r3, r3, #2
 801b324:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801b326:	2300      	movs	r3, #0
}
 801b328:	0018      	movs	r0, r3
 801b32a:	46bd      	mov	sp, r7
 801b32c:	b002      	add	sp, #8
 801b32e:	bd80      	pop	{r7, pc}
 801b330:	0000029d 	.word	0x0000029d

0801b334 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b334:	b580      	push	{r7, lr}
 801b336:	b082      	sub	sp, #8
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b33c:	687a      	ldr	r2, [r7, #4]
 801b33e:	23a7      	movs	r3, #167	@ 0xa7
 801b340:	009b      	lsls	r3, r3, #2
 801b342:	5cd3      	ldrb	r3, [r2, r3]
 801b344:	2b03      	cmp	r3, #3
 801b346:	d10e      	bne.n	801b366 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801b348:	687a      	ldr	r2, [r7, #4]
 801b34a:	23ad      	movs	r3, #173	@ 0xad
 801b34c:	009b      	lsls	r3, r3, #2
 801b34e:	58d3      	ldr	r3, [r2, r3]
 801b350:	69db      	ldr	r3, [r3, #28]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d007      	beq.n	801b366 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801b356:	687a      	ldr	r2, [r7, #4]
 801b358:	23ad      	movs	r3, #173	@ 0xad
 801b35a:	009b      	lsls	r3, r3, #2
 801b35c:	58d3      	ldr	r3, [r2, r3]
 801b35e:	69db      	ldr	r3, [r3, #28]
 801b360:	687a      	ldr	r2, [r7, #4]
 801b362:	0010      	movs	r0, r2
 801b364:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b366:	2300      	movs	r3, #0
}
 801b368:	0018      	movs	r0, r3
 801b36a:	46bd      	mov	sp, r7
 801b36c:	b002      	add	sp, #8
 801b36e:	bd80      	pop	{r7, pc}

0801b370 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b084      	sub	sp, #16
 801b374:	af00      	add	r7, sp, #0
 801b376:	6078      	str	r0, [r7, #4]
 801b378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b37a:	230f      	movs	r3, #15
 801b37c:	18fb      	adds	r3, r7, r3
 801b37e:	2200      	movs	r2, #0
 801b380:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b382:	683b      	ldr	r3, [r7, #0]
 801b384:	781b      	ldrb	r3, [r3, #0]
 801b386:	001a      	movs	r2, r3
 801b388:	2360      	movs	r3, #96	@ 0x60
 801b38a:	4013      	ands	r3, r2
 801b38c:	2b40      	cmp	r3, #64	@ 0x40
 801b38e:	d004      	beq.n	801b39a <USBD_StdDevReq+0x2a>
 801b390:	d84f      	bhi.n	801b432 <USBD_StdDevReq+0xc2>
 801b392:	2b00      	cmp	r3, #0
 801b394:	d00b      	beq.n	801b3ae <USBD_StdDevReq+0x3e>
 801b396:	2b20      	cmp	r3, #32
 801b398:	d14b      	bne.n	801b432 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b39a:	687a      	ldr	r2, [r7, #4]
 801b39c:	23ad      	movs	r3, #173	@ 0xad
 801b39e:	009b      	lsls	r3, r3, #2
 801b3a0:	58d3      	ldr	r3, [r2, r3]
 801b3a2:	689b      	ldr	r3, [r3, #8]
 801b3a4:	6839      	ldr	r1, [r7, #0]
 801b3a6:	687a      	ldr	r2, [r7, #4]
 801b3a8:	0010      	movs	r0, r2
 801b3aa:	4798      	blx	r3
      break;
 801b3ac:	e048      	b.n	801b440 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b3ae:	683b      	ldr	r3, [r7, #0]
 801b3b0:	785b      	ldrb	r3, [r3, #1]
 801b3b2:	2b09      	cmp	r3, #9
 801b3b4:	d835      	bhi.n	801b422 <USBD_StdDevReq+0xb2>
 801b3b6:	009a      	lsls	r2, r3, #2
 801b3b8:	4b25      	ldr	r3, [pc, #148]	@ (801b450 <USBD_StdDevReq+0xe0>)
 801b3ba:	18d3      	adds	r3, r2, r3
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b3c0:	683a      	ldr	r2, [r7, #0]
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	0011      	movs	r1, r2
 801b3c6:	0018      	movs	r0, r3
 801b3c8:	f000 fa52 	bl	801b870 <USBD_GetDescriptor>
          break;
 801b3cc:	e030      	b.n	801b430 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b3ce:	683a      	ldr	r2, [r7, #0]
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	0011      	movs	r1, r2
 801b3d4:	0018      	movs	r0, r3
 801b3d6:	f000 fbfd 	bl	801bbd4 <USBD_SetAddress>
          break;
 801b3da:	e029      	b.n	801b430 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801b3dc:	683a      	ldr	r2, [r7, #0]
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	0011      	movs	r1, r2
 801b3e2:	0018      	movs	r0, r3
 801b3e4:	f000 fc4a 	bl	801bc7c <USBD_SetConfig>
          break;
 801b3e8:	e022      	b.n	801b430 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b3ea:	683a      	ldr	r2, [r7, #0]
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	0011      	movs	r1, r2
 801b3f0:	0018      	movs	r0, r3
 801b3f2:	f000 fce7 	bl	801bdc4 <USBD_GetConfig>
          break;
 801b3f6:	e01b      	b.n	801b430 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b3f8:	683a      	ldr	r2, [r7, #0]
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	0011      	movs	r1, r2
 801b3fe:	0018      	movs	r0, r3
 801b400:	f000 fd1b 	bl	801be3a <USBD_GetStatus>
          break;
 801b404:	e014      	b.n	801b430 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b406:	683a      	ldr	r2, [r7, #0]
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	0011      	movs	r1, r2
 801b40c:	0018      	movs	r0, r3
 801b40e:	f000 fd4e 	bl	801beae <USBD_SetFeature>
          break;
 801b412:	e00d      	b.n	801b430 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b414:	683a      	ldr	r2, [r7, #0]
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	0011      	movs	r1, r2
 801b41a:	0018      	movs	r0, r3
 801b41c:	f000 fd5d 	bl	801beda <USBD_ClrFeature>
          break;
 801b420:	e006      	b.n	801b430 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b422:	683a      	ldr	r2, [r7, #0]
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	0011      	movs	r1, r2
 801b428:	0018      	movs	r0, r3
 801b42a:	f000 fdb4 	bl	801bf96 <USBD_CtlError>
          break;
 801b42e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b430:	e006      	b.n	801b440 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801b432:	683a      	ldr	r2, [r7, #0]
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	0011      	movs	r1, r2
 801b438:	0018      	movs	r0, r3
 801b43a:	f000 fdac 	bl	801bf96 <USBD_CtlError>
      break;
 801b43e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b440:	230f      	movs	r3, #15
 801b442:	18fb      	adds	r3, r7, r3
 801b444:	781b      	ldrb	r3, [r3, #0]
}
 801b446:	0018      	movs	r0, r3
 801b448:	46bd      	mov	sp, r7
 801b44a:	b004      	add	sp, #16
 801b44c:	bd80      	pop	{r7, pc}
 801b44e:	46c0      	nop			@ (mov r8, r8)
 801b450:	0802494c 	.word	0x0802494c

0801b454 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801b454:	b5b0      	push	{r4, r5, r7, lr}
 801b456:	b084      	sub	sp, #16
 801b458:	af00      	add	r7, sp, #0
 801b45a:	6078      	str	r0, [r7, #4]
 801b45c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b45e:	230f      	movs	r3, #15
 801b460:	18fb      	adds	r3, r7, r3
 801b462:	2200      	movs	r2, #0
 801b464:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b466:	683b      	ldr	r3, [r7, #0]
 801b468:	781b      	ldrb	r3, [r3, #0]
 801b46a:	001a      	movs	r2, r3
 801b46c:	2360      	movs	r3, #96	@ 0x60
 801b46e:	4013      	ands	r3, r2
 801b470:	2b40      	cmp	r3, #64	@ 0x40
 801b472:	d004      	beq.n	801b47e <USBD_StdItfReq+0x2a>
 801b474:	d839      	bhi.n	801b4ea <USBD_StdItfReq+0x96>
 801b476:	2b00      	cmp	r3, #0
 801b478:	d001      	beq.n	801b47e <USBD_StdItfReq+0x2a>
 801b47a:	2b20      	cmp	r3, #32
 801b47c:	d135      	bne.n	801b4ea <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b47e:	687a      	ldr	r2, [r7, #4]
 801b480:	23a7      	movs	r3, #167	@ 0xa7
 801b482:	009b      	lsls	r3, r3, #2
 801b484:	5cd3      	ldrb	r3, [r2, r3]
 801b486:	3b01      	subs	r3, #1
 801b488:	2b02      	cmp	r3, #2
 801b48a:	d825      	bhi.n	801b4d8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b48c:	683b      	ldr	r3, [r7, #0]
 801b48e:	889b      	ldrh	r3, [r3, #4]
 801b490:	b2db      	uxtb	r3, r3
 801b492:	2b01      	cmp	r3, #1
 801b494:	d819      	bhi.n	801b4ca <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b496:	687a      	ldr	r2, [r7, #4]
 801b498:	23ad      	movs	r3, #173	@ 0xad
 801b49a:	009b      	lsls	r3, r3, #2
 801b49c:	58d3      	ldr	r3, [r2, r3]
 801b49e:	689b      	ldr	r3, [r3, #8]
 801b4a0:	250f      	movs	r5, #15
 801b4a2:	197c      	adds	r4, r7, r5
 801b4a4:	6839      	ldr	r1, [r7, #0]
 801b4a6:	687a      	ldr	r2, [r7, #4]
 801b4a8:	0010      	movs	r0, r2
 801b4aa:	4798      	blx	r3
 801b4ac:	0003      	movs	r3, r0
 801b4ae:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	88db      	ldrh	r3, [r3, #6]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d116      	bne.n	801b4e6 <USBD_StdItfReq+0x92>
 801b4b8:	197b      	adds	r3, r7, r5
 801b4ba:	781b      	ldrb	r3, [r3, #0]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d112      	bne.n	801b4e6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	0018      	movs	r0, r3
 801b4c4:	f000 fe4f 	bl	801c166 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b4c8:	e00d      	b.n	801b4e6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b4ca:	683a      	ldr	r2, [r7, #0]
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	0011      	movs	r1, r2
 801b4d0:	0018      	movs	r0, r3
 801b4d2:	f000 fd60 	bl	801bf96 <USBD_CtlError>
          break;
 801b4d6:	e006      	b.n	801b4e6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b4d8:	683a      	ldr	r2, [r7, #0]
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	0011      	movs	r1, r2
 801b4de:	0018      	movs	r0, r3
 801b4e0:	f000 fd59 	bl	801bf96 <USBD_CtlError>
          break;
 801b4e4:	e000      	b.n	801b4e8 <USBD_StdItfReq+0x94>
          break;
 801b4e6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b4e8:	e006      	b.n	801b4f8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b4ea:	683a      	ldr	r2, [r7, #0]
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	0011      	movs	r1, r2
 801b4f0:	0018      	movs	r0, r3
 801b4f2:	f000 fd50 	bl	801bf96 <USBD_CtlError>
      break;
 801b4f6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b4f8:	2300      	movs	r3, #0
}
 801b4fa:	0018      	movs	r0, r3
 801b4fc:	46bd      	mov	sp, r7
 801b4fe:	b004      	add	sp, #16
 801b500:	bdb0      	pop	{r4, r5, r7, pc}

0801b502 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b502:	b5b0      	push	{r4, r5, r7, lr}
 801b504:	b084      	sub	sp, #16
 801b506:	af00      	add	r7, sp, #0
 801b508:	6078      	str	r0, [r7, #4]
 801b50a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b50c:	230f      	movs	r3, #15
 801b50e:	18fb      	adds	r3, r7, r3
 801b510:	2200      	movs	r2, #0
 801b512:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b514:	683b      	ldr	r3, [r7, #0]
 801b516:	889a      	ldrh	r2, [r3, #4]
 801b518:	230e      	movs	r3, #14
 801b51a:	18fb      	adds	r3, r7, r3
 801b51c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b51e:	683b      	ldr	r3, [r7, #0]
 801b520:	781b      	ldrb	r3, [r3, #0]
 801b522:	001a      	movs	r2, r3
 801b524:	2360      	movs	r3, #96	@ 0x60
 801b526:	4013      	ands	r3, r2
 801b528:	2b40      	cmp	r3, #64	@ 0x40
 801b52a:	d006      	beq.n	801b53a <USBD_StdEPReq+0x38>
 801b52c:	d900      	bls.n	801b530 <USBD_StdEPReq+0x2e>
 801b52e:	e190      	b.n	801b852 <USBD_StdEPReq+0x350>
 801b530:	2b00      	cmp	r3, #0
 801b532:	d00c      	beq.n	801b54e <USBD_StdEPReq+0x4c>
 801b534:	2b20      	cmp	r3, #32
 801b536:	d000      	beq.n	801b53a <USBD_StdEPReq+0x38>
 801b538:	e18b      	b.n	801b852 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b53a:	687a      	ldr	r2, [r7, #4]
 801b53c:	23ad      	movs	r3, #173	@ 0xad
 801b53e:	009b      	lsls	r3, r3, #2
 801b540:	58d3      	ldr	r3, [r2, r3]
 801b542:	689b      	ldr	r3, [r3, #8]
 801b544:	6839      	ldr	r1, [r7, #0]
 801b546:	687a      	ldr	r2, [r7, #4]
 801b548:	0010      	movs	r0, r2
 801b54a:	4798      	blx	r3
      break;
 801b54c:	e188      	b.n	801b860 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b54e:	683b      	ldr	r3, [r7, #0]
 801b550:	781b      	ldrb	r3, [r3, #0]
 801b552:	001a      	movs	r2, r3
 801b554:	2360      	movs	r3, #96	@ 0x60
 801b556:	4013      	ands	r3, r2
 801b558:	2b20      	cmp	r3, #32
 801b55a:	d10f      	bne.n	801b57c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	23ad      	movs	r3, #173	@ 0xad
 801b560:	009b      	lsls	r3, r3, #2
 801b562:	58d3      	ldr	r3, [r2, r3]
 801b564:	689b      	ldr	r3, [r3, #8]
 801b566:	250f      	movs	r5, #15
 801b568:	197c      	adds	r4, r7, r5
 801b56a:	6839      	ldr	r1, [r7, #0]
 801b56c:	687a      	ldr	r2, [r7, #4]
 801b56e:	0010      	movs	r0, r2
 801b570:	4798      	blx	r3
 801b572:	0003      	movs	r3, r0
 801b574:	7023      	strb	r3, [r4, #0]

        return ret;
 801b576:	197b      	adds	r3, r7, r5
 801b578:	781b      	ldrb	r3, [r3, #0]
 801b57a:	e174      	b.n	801b866 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b57c:	683b      	ldr	r3, [r7, #0]
 801b57e:	785b      	ldrb	r3, [r3, #1]
 801b580:	2b03      	cmp	r3, #3
 801b582:	d007      	beq.n	801b594 <USBD_StdEPReq+0x92>
 801b584:	dd00      	ble.n	801b588 <USBD_StdEPReq+0x86>
 801b586:	e15c      	b.n	801b842 <USBD_StdEPReq+0x340>
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d100      	bne.n	801b58e <USBD_StdEPReq+0x8c>
 801b58c:	e092      	b.n	801b6b4 <USBD_StdEPReq+0x1b2>
 801b58e:	2b01      	cmp	r3, #1
 801b590:	d04b      	beq.n	801b62a <USBD_StdEPReq+0x128>
 801b592:	e156      	b.n	801b842 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b594:	687a      	ldr	r2, [r7, #4]
 801b596:	23a7      	movs	r3, #167	@ 0xa7
 801b598:	009b      	lsls	r3, r3, #2
 801b59a:	5cd3      	ldrb	r3, [r2, r3]
 801b59c:	2b02      	cmp	r3, #2
 801b59e:	d002      	beq.n	801b5a6 <USBD_StdEPReq+0xa4>
 801b5a0:	2b03      	cmp	r3, #3
 801b5a2:	d01d      	beq.n	801b5e0 <USBD_StdEPReq+0xde>
 801b5a4:	e039      	b.n	801b61a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b5a6:	220e      	movs	r2, #14
 801b5a8:	18bb      	adds	r3, r7, r2
 801b5aa:	781b      	ldrb	r3, [r3, #0]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d010      	beq.n	801b5d2 <USBD_StdEPReq+0xd0>
 801b5b0:	18bb      	adds	r3, r7, r2
 801b5b2:	781b      	ldrb	r3, [r3, #0]
 801b5b4:	2b80      	cmp	r3, #128	@ 0x80
 801b5b6:	d00c      	beq.n	801b5d2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b5b8:	18bb      	adds	r3, r7, r2
 801b5ba:	781a      	ldrb	r2, [r3, #0]
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	0011      	movs	r1, r2
 801b5c0:	0018      	movs	r0, r3
 801b5c2:	f001 fa10 	bl	801c9e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	2180      	movs	r1, #128	@ 0x80
 801b5ca:	0018      	movs	r0, r3
 801b5cc:	f001 fa0b 	bl	801c9e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b5d0:	e02a      	b.n	801b628 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b5d2:	683a      	ldr	r2, [r7, #0]
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	0011      	movs	r1, r2
 801b5d8:	0018      	movs	r0, r3
 801b5da:	f000 fcdc 	bl	801bf96 <USBD_CtlError>
              break;
 801b5de:	e023      	b.n	801b628 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	885b      	ldrh	r3, [r3, #2]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d113      	bne.n	801b610 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b5e8:	220e      	movs	r2, #14
 801b5ea:	18bb      	adds	r3, r7, r2
 801b5ec:	781b      	ldrb	r3, [r3, #0]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d00e      	beq.n	801b610 <USBD_StdEPReq+0x10e>
 801b5f2:	18bb      	adds	r3, r7, r2
 801b5f4:	781b      	ldrb	r3, [r3, #0]
 801b5f6:	2b80      	cmp	r3, #128	@ 0x80
 801b5f8:	d00a      	beq.n	801b610 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b5fa:	683b      	ldr	r3, [r7, #0]
 801b5fc:	88db      	ldrh	r3, [r3, #6]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d106      	bne.n	801b610 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b602:	18bb      	adds	r3, r7, r2
 801b604:	781a      	ldrb	r2, [r3, #0]
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	0011      	movs	r1, r2
 801b60a:	0018      	movs	r0, r3
 801b60c:	f001 f9eb 	bl	801c9e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	0018      	movs	r0, r3
 801b614:	f000 fda7 	bl	801c166 <USBD_CtlSendStatus>

              break;
 801b618:	e006      	b.n	801b628 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b61a:	683a      	ldr	r2, [r7, #0]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	0011      	movs	r1, r2
 801b620:	0018      	movs	r0, r3
 801b622:	f000 fcb8 	bl	801bf96 <USBD_CtlError>
              break;
 801b626:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b628:	e112      	b.n	801b850 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b62a:	687a      	ldr	r2, [r7, #4]
 801b62c:	23a7      	movs	r3, #167	@ 0xa7
 801b62e:	009b      	lsls	r3, r3, #2
 801b630:	5cd3      	ldrb	r3, [r2, r3]
 801b632:	2b02      	cmp	r3, #2
 801b634:	d002      	beq.n	801b63c <USBD_StdEPReq+0x13a>
 801b636:	2b03      	cmp	r3, #3
 801b638:	d01d      	beq.n	801b676 <USBD_StdEPReq+0x174>
 801b63a:	e032      	b.n	801b6a2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b63c:	220e      	movs	r2, #14
 801b63e:	18bb      	adds	r3, r7, r2
 801b640:	781b      	ldrb	r3, [r3, #0]
 801b642:	2b00      	cmp	r3, #0
 801b644:	d010      	beq.n	801b668 <USBD_StdEPReq+0x166>
 801b646:	18bb      	adds	r3, r7, r2
 801b648:	781b      	ldrb	r3, [r3, #0]
 801b64a:	2b80      	cmp	r3, #128	@ 0x80
 801b64c:	d00c      	beq.n	801b668 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b64e:	18bb      	adds	r3, r7, r2
 801b650:	781a      	ldrb	r2, [r3, #0]
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	0011      	movs	r1, r2
 801b656:	0018      	movs	r0, r3
 801b658:	f001 f9c5 	bl	801c9e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	2180      	movs	r1, #128	@ 0x80
 801b660:	0018      	movs	r0, r3
 801b662:	f001 f9c0 	bl	801c9e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b666:	e024      	b.n	801b6b2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801b668:	683a      	ldr	r2, [r7, #0]
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	0011      	movs	r1, r2
 801b66e:	0018      	movs	r0, r3
 801b670:	f000 fc91 	bl	801bf96 <USBD_CtlError>
              break;
 801b674:	e01d      	b.n	801b6b2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b676:	683b      	ldr	r3, [r7, #0]
 801b678:	885b      	ldrh	r3, [r3, #2]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d118      	bne.n	801b6b0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b67e:	210e      	movs	r1, #14
 801b680:	187b      	adds	r3, r7, r1
 801b682:	781b      	ldrb	r3, [r3, #0]
 801b684:	227f      	movs	r2, #127	@ 0x7f
 801b686:	4013      	ands	r3, r2
 801b688:	d006      	beq.n	801b698 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801b68a:	187b      	adds	r3, r7, r1
 801b68c:	781a      	ldrb	r2, [r3, #0]
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	0011      	movs	r1, r2
 801b692:	0018      	movs	r0, r3
 801b694:	f001 f9d2 	bl	801ca3c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	0018      	movs	r0, r3
 801b69c:	f000 fd63 	bl	801c166 <USBD_CtlSendStatus>
              }
              break;
 801b6a0:	e006      	b.n	801b6b0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801b6a2:	683a      	ldr	r2, [r7, #0]
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	0011      	movs	r1, r2
 801b6a8:	0018      	movs	r0, r3
 801b6aa:	f000 fc74 	bl	801bf96 <USBD_CtlError>
              break;
 801b6ae:	e000      	b.n	801b6b2 <USBD_StdEPReq+0x1b0>
              break;
 801b6b0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b6b2:	e0cd      	b.n	801b850 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b6b4:	687a      	ldr	r2, [r7, #4]
 801b6b6:	23a7      	movs	r3, #167	@ 0xa7
 801b6b8:	009b      	lsls	r3, r3, #2
 801b6ba:	5cd3      	ldrb	r3, [r2, r3]
 801b6bc:	2b02      	cmp	r3, #2
 801b6be:	d002      	beq.n	801b6c6 <USBD_StdEPReq+0x1c4>
 801b6c0:	2b03      	cmp	r3, #3
 801b6c2:	d03c      	beq.n	801b73e <USBD_StdEPReq+0x23c>
 801b6c4:	e0b5      	b.n	801b832 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b6c6:	220e      	movs	r2, #14
 801b6c8:	18bb      	adds	r3, r7, r2
 801b6ca:	781b      	ldrb	r3, [r3, #0]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d00a      	beq.n	801b6e6 <USBD_StdEPReq+0x1e4>
 801b6d0:	18bb      	adds	r3, r7, r2
 801b6d2:	781b      	ldrb	r3, [r3, #0]
 801b6d4:	2b80      	cmp	r3, #128	@ 0x80
 801b6d6:	d006      	beq.n	801b6e6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801b6d8:	683a      	ldr	r2, [r7, #0]
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	0011      	movs	r1, r2
 801b6de:	0018      	movs	r0, r3
 801b6e0:	f000 fc59 	bl	801bf96 <USBD_CtlError>
                break;
 801b6e4:	e0ac      	b.n	801b840 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b6e6:	220e      	movs	r2, #14
 801b6e8:	18bb      	adds	r3, r7, r2
 801b6ea:	781b      	ldrb	r3, [r3, #0]
 801b6ec:	b25b      	sxtb	r3, r3
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	da0c      	bge.n	801b70c <USBD_StdEPReq+0x20a>
 801b6f2:	18bb      	adds	r3, r7, r2
 801b6f4:	781b      	ldrb	r3, [r3, #0]
 801b6f6:	227f      	movs	r2, #127	@ 0x7f
 801b6f8:	401a      	ands	r2, r3
 801b6fa:	0013      	movs	r3, r2
 801b6fc:	009b      	lsls	r3, r3, #2
 801b6fe:	189b      	adds	r3, r3, r2
 801b700:	009b      	lsls	r3, r3, #2
 801b702:	3310      	adds	r3, #16
 801b704:	687a      	ldr	r2, [r7, #4]
 801b706:	18d3      	adds	r3, r2, r3
 801b708:	3304      	adds	r3, #4
 801b70a:	e00d      	b.n	801b728 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b70c:	230e      	movs	r3, #14
 801b70e:	18fb      	adds	r3, r7, r3
 801b710:	781b      	ldrb	r3, [r3, #0]
 801b712:	227f      	movs	r2, #127	@ 0x7f
 801b714:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b716:	0013      	movs	r3, r2
 801b718:	009b      	lsls	r3, r3, #2
 801b71a:	189b      	adds	r3, r3, r2
 801b71c:	009b      	lsls	r3, r3, #2
 801b71e:	3351      	adds	r3, #81	@ 0x51
 801b720:	33ff      	adds	r3, #255	@ 0xff
 801b722:	687a      	ldr	r2, [r7, #4]
 801b724:	18d3      	adds	r3, r2, r3
 801b726:	3304      	adds	r3, #4
 801b728:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b72a:	68bb      	ldr	r3, [r7, #8]
 801b72c:	2200      	movs	r2, #0
 801b72e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b730:	68b9      	ldr	r1, [r7, #8]
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	2202      	movs	r2, #2
 801b736:	0018      	movs	r0, r3
 801b738:	f000 fcab 	bl	801c092 <USBD_CtlSendData>
              break;
 801b73c:	e080      	b.n	801b840 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b73e:	220e      	movs	r2, #14
 801b740:	18bb      	adds	r3, r7, r2
 801b742:	781b      	ldrb	r3, [r3, #0]
 801b744:	b25b      	sxtb	r3, r3
 801b746:	2b00      	cmp	r3, #0
 801b748:	da14      	bge.n	801b774 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b74a:	18bb      	adds	r3, r7, r2
 801b74c:	781b      	ldrb	r3, [r3, #0]
 801b74e:	220f      	movs	r2, #15
 801b750:	401a      	ands	r2, r3
 801b752:	6879      	ldr	r1, [r7, #4]
 801b754:	0013      	movs	r3, r2
 801b756:	009b      	lsls	r3, r3, #2
 801b758:	189b      	adds	r3, r3, r2
 801b75a:	009b      	lsls	r3, r3, #2
 801b75c:	18cb      	adds	r3, r1, r3
 801b75e:	3318      	adds	r3, #24
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d11e      	bne.n	801b7a4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b766:	683a      	ldr	r2, [r7, #0]
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	0011      	movs	r1, r2
 801b76c:	0018      	movs	r0, r3
 801b76e:	f000 fc12 	bl	801bf96 <USBD_CtlError>
                  break;
 801b772:	e065      	b.n	801b840 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b774:	230e      	movs	r3, #14
 801b776:	18fb      	adds	r3, r7, r3
 801b778:	781b      	ldrb	r3, [r3, #0]
 801b77a:	220f      	movs	r2, #15
 801b77c:	401a      	ands	r2, r3
 801b77e:	6878      	ldr	r0, [r7, #4]
 801b780:	23ac      	movs	r3, #172	@ 0xac
 801b782:	0059      	lsls	r1, r3, #1
 801b784:	0013      	movs	r3, r2
 801b786:	009b      	lsls	r3, r3, #2
 801b788:	189b      	adds	r3, r3, r2
 801b78a:	009b      	lsls	r3, r3, #2
 801b78c:	18c3      	adds	r3, r0, r3
 801b78e:	185b      	adds	r3, r3, r1
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d106      	bne.n	801b7a4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b796:	683a      	ldr	r2, [r7, #0]
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	0011      	movs	r1, r2
 801b79c:	0018      	movs	r0, r3
 801b79e:	f000 fbfa 	bl	801bf96 <USBD_CtlError>
                  break;
 801b7a2:	e04d      	b.n	801b840 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b7a4:	220e      	movs	r2, #14
 801b7a6:	18bb      	adds	r3, r7, r2
 801b7a8:	781b      	ldrb	r3, [r3, #0]
 801b7aa:	b25b      	sxtb	r3, r3
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	da0c      	bge.n	801b7ca <USBD_StdEPReq+0x2c8>
 801b7b0:	18bb      	adds	r3, r7, r2
 801b7b2:	781b      	ldrb	r3, [r3, #0]
 801b7b4:	227f      	movs	r2, #127	@ 0x7f
 801b7b6:	401a      	ands	r2, r3
 801b7b8:	0013      	movs	r3, r2
 801b7ba:	009b      	lsls	r3, r3, #2
 801b7bc:	189b      	adds	r3, r3, r2
 801b7be:	009b      	lsls	r3, r3, #2
 801b7c0:	3310      	adds	r3, #16
 801b7c2:	687a      	ldr	r2, [r7, #4]
 801b7c4:	18d3      	adds	r3, r2, r3
 801b7c6:	3304      	adds	r3, #4
 801b7c8:	e00d      	b.n	801b7e6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b7ca:	230e      	movs	r3, #14
 801b7cc:	18fb      	adds	r3, r7, r3
 801b7ce:	781b      	ldrb	r3, [r3, #0]
 801b7d0:	227f      	movs	r2, #127	@ 0x7f
 801b7d2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b7d4:	0013      	movs	r3, r2
 801b7d6:	009b      	lsls	r3, r3, #2
 801b7d8:	189b      	adds	r3, r3, r2
 801b7da:	009b      	lsls	r3, r3, #2
 801b7dc:	3351      	adds	r3, #81	@ 0x51
 801b7de:	33ff      	adds	r3, #255	@ 0xff
 801b7e0:	687a      	ldr	r2, [r7, #4]
 801b7e2:	18d3      	adds	r3, r2, r3
 801b7e4:	3304      	adds	r3, #4
 801b7e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b7e8:	220e      	movs	r2, #14
 801b7ea:	18bb      	adds	r3, r7, r2
 801b7ec:	781b      	ldrb	r3, [r3, #0]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d003      	beq.n	801b7fa <USBD_StdEPReq+0x2f8>
 801b7f2:	18bb      	adds	r3, r7, r2
 801b7f4:	781b      	ldrb	r3, [r3, #0]
 801b7f6:	2b80      	cmp	r3, #128	@ 0x80
 801b7f8:	d103      	bne.n	801b802 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801b7fa:	68bb      	ldr	r3, [r7, #8]
 801b7fc:	2200      	movs	r2, #0
 801b7fe:	601a      	str	r2, [r3, #0]
 801b800:	e010      	b.n	801b824 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b802:	230e      	movs	r3, #14
 801b804:	18fb      	adds	r3, r7, r3
 801b806:	781a      	ldrb	r2, [r3, #0]
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	0011      	movs	r1, r2
 801b80c:	0018      	movs	r0, r3
 801b80e:	f001 f940 	bl	801ca92 <USBD_LL_IsStallEP>
 801b812:	1e03      	subs	r3, r0, #0
 801b814:	d003      	beq.n	801b81e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b816:	68bb      	ldr	r3, [r7, #8]
 801b818:	2201      	movs	r2, #1
 801b81a:	601a      	str	r2, [r3, #0]
 801b81c:	e002      	b.n	801b824 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b81e:	68bb      	ldr	r3, [r7, #8]
 801b820:	2200      	movs	r2, #0
 801b822:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b824:	68b9      	ldr	r1, [r7, #8]
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	2202      	movs	r2, #2
 801b82a:	0018      	movs	r0, r3
 801b82c:	f000 fc31 	bl	801c092 <USBD_CtlSendData>
              break;
 801b830:	e006      	b.n	801b840 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b832:	683a      	ldr	r2, [r7, #0]
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	0011      	movs	r1, r2
 801b838:	0018      	movs	r0, r3
 801b83a:	f000 fbac 	bl	801bf96 <USBD_CtlError>
              break;
 801b83e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b840:	e006      	b.n	801b850 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b842:	683a      	ldr	r2, [r7, #0]
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	0011      	movs	r1, r2
 801b848:	0018      	movs	r0, r3
 801b84a:	f000 fba4 	bl	801bf96 <USBD_CtlError>
          break;
 801b84e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b850:	e006      	b.n	801b860 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b852:	683a      	ldr	r2, [r7, #0]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	0011      	movs	r1, r2
 801b858:	0018      	movs	r0, r3
 801b85a:	f000 fb9c 	bl	801bf96 <USBD_CtlError>
      break;
 801b85e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b860:	230f      	movs	r3, #15
 801b862:	18fb      	adds	r3, r7, r3
 801b864:	781b      	ldrb	r3, [r3, #0]
}
 801b866:	0018      	movs	r0, r3
 801b868:	46bd      	mov	sp, r7
 801b86a:	b004      	add	sp, #16
 801b86c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b870 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b870:	b580      	push	{r7, lr}
 801b872:	b084      	sub	sp, #16
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
 801b878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b87a:	2308      	movs	r3, #8
 801b87c:	18fb      	adds	r3, r7, r3
 801b87e:	2200      	movs	r2, #0
 801b880:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b882:	2300      	movs	r3, #0
 801b884:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b886:	230b      	movs	r3, #11
 801b888:	18fb      	adds	r3, r7, r3
 801b88a:	2200      	movs	r2, #0
 801b88c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b88e:	683b      	ldr	r3, [r7, #0]
 801b890:	885b      	ldrh	r3, [r3, #2]
 801b892:	0a1b      	lsrs	r3, r3, #8
 801b894:	b29b      	uxth	r3, r3
 801b896:	2b07      	cmp	r3, #7
 801b898:	d900      	bls.n	801b89c <USBD_GetDescriptor+0x2c>
 801b89a:	e159      	b.n	801bb50 <USBD_GetDescriptor+0x2e0>
 801b89c:	009a      	lsls	r2, r3, #2
 801b89e:	4bcb      	ldr	r3, [pc, #812]	@ (801bbcc <USBD_GetDescriptor+0x35c>)
 801b8a0:	18d3      	adds	r3, r2, r3
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b8a6:	687a      	ldr	r2, [r7, #4]
 801b8a8:	23ac      	movs	r3, #172	@ 0xac
 801b8aa:	009b      	lsls	r3, r3, #2
 801b8ac:	58d3      	ldr	r3, [r2, r3]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	687a      	ldr	r2, [r7, #4]
 801b8b2:	7c12      	ldrb	r2, [r2, #16]
 801b8b4:	2108      	movs	r1, #8
 801b8b6:	1879      	adds	r1, r7, r1
 801b8b8:	0010      	movs	r0, r2
 801b8ba:	4798      	blx	r3
 801b8bc:	0003      	movs	r3, r0
 801b8be:	60fb      	str	r3, [r7, #12]
      break;
 801b8c0:	e153      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	7c1b      	ldrb	r3, [r3, #16]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d10f      	bne.n	801b8ea <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b8ca:	687a      	ldr	r2, [r7, #4]
 801b8cc:	23ad      	movs	r3, #173	@ 0xad
 801b8ce:	009b      	lsls	r3, r3, #2
 801b8d0:	58d3      	ldr	r3, [r2, r3]
 801b8d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8d4:	2208      	movs	r2, #8
 801b8d6:	18ba      	adds	r2, r7, r2
 801b8d8:	0010      	movs	r0, r2
 801b8da:	4798      	blx	r3
 801b8dc:	0003      	movs	r3, r0
 801b8de:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	3301      	adds	r3, #1
 801b8e4:	2202      	movs	r2, #2
 801b8e6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b8e8:	e13f      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b8ea:	687a      	ldr	r2, [r7, #4]
 801b8ec:	23ad      	movs	r3, #173	@ 0xad
 801b8ee:	009b      	lsls	r3, r3, #2
 801b8f0:	58d3      	ldr	r3, [r2, r3]
 801b8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8f4:	2208      	movs	r2, #8
 801b8f6:	18ba      	adds	r2, r7, r2
 801b8f8:	0010      	movs	r0, r2
 801b8fa:	4798      	blx	r3
 801b8fc:	0003      	movs	r3, r0
 801b8fe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	3301      	adds	r3, #1
 801b904:	2202      	movs	r2, #2
 801b906:	701a      	strb	r2, [r3, #0]
      break;
 801b908:	e12f      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	885b      	ldrh	r3, [r3, #2]
 801b90e:	b2db      	uxtb	r3, r3
 801b910:	2b05      	cmp	r3, #5
 801b912:	d900      	bls.n	801b916 <USBD_GetDescriptor+0xa6>
 801b914:	e0d0      	b.n	801bab8 <USBD_GetDescriptor+0x248>
 801b916:	009a      	lsls	r2, r3, #2
 801b918:	4bad      	ldr	r3, [pc, #692]	@ (801bbd0 <USBD_GetDescriptor+0x360>)
 801b91a:	18d3      	adds	r3, r2, r3
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b920:	687a      	ldr	r2, [r7, #4]
 801b922:	23ac      	movs	r3, #172	@ 0xac
 801b924:	009b      	lsls	r3, r3, #2
 801b926:	58d3      	ldr	r3, [r2, r3]
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d00d      	beq.n	801b94a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b92e:	687a      	ldr	r2, [r7, #4]
 801b930:	23ac      	movs	r3, #172	@ 0xac
 801b932:	009b      	lsls	r3, r3, #2
 801b934:	58d3      	ldr	r3, [r2, r3]
 801b936:	685b      	ldr	r3, [r3, #4]
 801b938:	687a      	ldr	r2, [r7, #4]
 801b93a:	7c12      	ldrb	r2, [r2, #16]
 801b93c:	2108      	movs	r1, #8
 801b93e:	1879      	adds	r1, r7, r1
 801b940:	0010      	movs	r0, r2
 801b942:	4798      	blx	r3
 801b944:	0003      	movs	r3, r0
 801b946:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b948:	e0c3      	b.n	801bad2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b94a:	683a      	ldr	r2, [r7, #0]
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	0011      	movs	r1, r2
 801b950:	0018      	movs	r0, r3
 801b952:	f000 fb20 	bl	801bf96 <USBD_CtlError>
            err++;
 801b956:	210b      	movs	r1, #11
 801b958:	187b      	adds	r3, r7, r1
 801b95a:	781a      	ldrb	r2, [r3, #0]
 801b95c:	187b      	adds	r3, r7, r1
 801b95e:	3201      	adds	r2, #1
 801b960:	701a      	strb	r2, [r3, #0]
          break;
 801b962:	e0b6      	b.n	801bad2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b964:	687a      	ldr	r2, [r7, #4]
 801b966:	23ac      	movs	r3, #172	@ 0xac
 801b968:	009b      	lsls	r3, r3, #2
 801b96a:	58d3      	ldr	r3, [r2, r3]
 801b96c:	689b      	ldr	r3, [r3, #8]
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d00d      	beq.n	801b98e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b972:	687a      	ldr	r2, [r7, #4]
 801b974:	23ac      	movs	r3, #172	@ 0xac
 801b976:	009b      	lsls	r3, r3, #2
 801b978:	58d3      	ldr	r3, [r2, r3]
 801b97a:	689b      	ldr	r3, [r3, #8]
 801b97c:	687a      	ldr	r2, [r7, #4]
 801b97e:	7c12      	ldrb	r2, [r2, #16]
 801b980:	2108      	movs	r1, #8
 801b982:	1879      	adds	r1, r7, r1
 801b984:	0010      	movs	r0, r2
 801b986:	4798      	blx	r3
 801b988:	0003      	movs	r3, r0
 801b98a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b98c:	e0a1      	b.n	801bad2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b98e:	683a      	ldr	r2, [r7, #0]
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	0011      	movs	r1, r2
 801b994:	0018      	movs	r0, r3
 801b996:	f000 fafe 	bl	801bf96 <USBD_CtlError>
            err++;
 801b99a:	210b      	movs	r1, #11
 801b99c:	187b      	adds	r3, r7, r1
 801b99e:	781a      	ldrb	r2, [r3, #0]
 801b9a0:	187b      	adds	r3, r7, r1
 801b9a2:	3201      	adds	r2, #1
 801b9a4:	701a      	strb	r2, [r3, #0]
          break;
 801b9a6:	e094      	b.n	801bad2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b9a8:	687a      	ldr	r2, [r7, #4]
 801b9aa:	23ac      	movs	r3, #172	@ 0xac
 801b9ac:	009b      	lsls	r3, r3, #2
 801b9ae:	58d3      	ldr	r3, [r2, r3]
 801b9b0:	68db      	ldr	r3, [r3, #12]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d00d      	beq.n	801b9d2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b9b6:	687a      	ldr	r2, [r7, #4]
 801b9b8:	23ac      	movs	r3, #172	@ 0xac
 801b9ba:	009b      	lsls	r3, r3, #2
 801b9bc:	58d3      	ldr	r3, [r2, r3]
 801b9be:	68db      	ldr	r3, [r3, #12]
 801b9c0:	687a      	ldr	r2, [r7, #4]
 801b9c2:	7c12      	ldrb	r2, [r2, #16]
 801b9c4:	2108      	movs	r1, #8
 801b9c6:	1879      	adds	r1, r7, r1
 801b9c8:	0010      	movs	r0, r2
 801b9ca:	4798      	blx	r3
 801b9cc:	0003      	movs	r3, r0
 801b9ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b9d0:	e07f      	b.n	801bad2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b9d2:	683a      	ldr	r2, [r7, #0]
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	0011      	movs	r1, r2
 801b9d8:	0018      	movs	r0, r3
 801b9da:	f000 fadc 	bl	801bf96 <USBD_CtlError>
            err++;
 801b9de:	210b      	movs	r1, #11
 801b9e0:	187b      	adds	r3, r7, r1
 801b9e2:	781a      	ldrb	r2, [r3, #0]
 801b9e4:	187b      	adds	r3, r7, r1
 801b9e6:	3201      	adds	r2, #1
 801b9e8:	701a      	strb	r2, [r3, #0]
          break;
 801b9ea:	e072      	b.n	801bad2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b9ec:	687a      	ldr	r2, [r7, #4]
 801b9ee:	23ac      	movs	r3, #172	@ 0xac
 801b9f0:	009b      	lsls	r3, r3, #2
 801b9f2:	58d3      	ldr	r3, [r2, r3]
 801b9f4:	691b      	ldr	r3, [r3, #16]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d00d      	beq.n	801ba16 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b9fa:	687a      	ldr	r2, [r7, #4]
 801b9fc:	23ac      	movs	r3, #172	@ 0xac
 801b9fe:	009b      	lsls	r3, r3, #2
 801ba00:	58d3      	ldr	r3, [r2, r3]
 801ba02:	691b      	ldr	r3, [r3, #16]
 801ba04:	687a      	ldr	r2, [r7, #4]
 801ba06:	7c12      	ldrb	r2, [r2, #16]
 801ba08:	2108      	movs	r1, #8
 801ba0a:	1879      	adds	r1, r7, r1
 801ba0c:	0010      	movs	r0, r2
 801ba0e:	4798      	blx	r3
 801ba10:	0003      	movs	r3, r0
 801ba12:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba14:	e05d      	b.n	801bad2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba16:	683a      	ldr	r2, [r7, #0]
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	0011      	movs	r1, r2
 801ba1c:	0018      	movs	r0, r3
 801ba1e:	f000 faba 	bl	801bf96 <USBD_CtlError>
            err++;
 801ba22:	210b      	movs	r1, #11
 801ba24:	187b      	adds	r3, r7, r1
 801ba26:	781a      	ldrb	r2, [r3, #0]
 801ba28:	187b      	adds	r3, r7, r1
 801ba2a:	3201      	adds	r2, #1
 801ba2c:	701a      	strb	r2, [r3, #0]
          break;
 801ba2e:	e050      	b.n	801bad2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ba30:	687a      	ldr	r2, [r7, #4]
 801ba32:	23ac      	movs	r3, #172	@ 0xac
 801ba34:	009b      	lsls	r3, r3, #2
 801ba36:	58d3      	ldr	r3, [r2, r3]
 801ba38:	695b      	ldr	r3, [r3, #20]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d00d      	beq.n	801ba5a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ba3e:	687a      	ldr	r2, [r7, #4]
 801ba40:	23ac      	movs	r3, #172	@ 0xac
 801ba42:	009b      	lsls	r3, r3, #2
 801ba44:	58d3      	ldr	r3, [r2, r3]
 801ba46:	695b      	ldr	r3, [r3, #20]
 801ba48:	687a      	ldr	r2, [r7, #4]
 801ba4a:	7c12      	ldrb	r2, [r2, #16]
 801ba4c:	2108      	movs	r1, #8
 801ba4e:	1879      	adds	r1, r7, r1
 801ba50:	0010      	movs	r0, r2
 801ba52:	4798      	blx	r3
 801ba54:	0003      	movs	r3, r0
 801ba56:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba58:	e03b      	b.n	801bad2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba5a:	683a      	ldr	r2, [r7, #0]
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	0011      	movs	r1, r2
 801ba60:	0018      	movs	r0, r3
 801ba62:	f000 fa98 	bl	801bf96 <USBD_CtlError>
            err++;
 801ba66:	210b      	movs	r1, #11
 801ba68:	187b      	adds	r3, r7, r1
 801ba6a:	781a      	ldrb	r2, [r3, #0]
 801ba6c:	187b      	adds	r3, r7, r1
 801ba6e:	3201      	adds	r2, #1
 801ba70:	701a      	strb	r2, [r3, #0]
          break;
 801ba72:	e02e      	b.n	801bad2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801ba74:	687a      	ldr	r2, [r7, #4]
 801ba76:	23ac      	movs	r3, #172	@ 0xac
 801ba78:	009b      	lsls	r3, r3, #2
 801ba7a:	58d3      	ldr	r3, [r2, r3]
 801ba7c:	699b      	ldr	r3, [r3, #24]
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d00d      	beq.n	801ba9e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ba82:	687a      	ldr	r2, [r7, #4]
 801ba84:	23ac      	movs	r3, #172	@ 0xac
 801ba86:	009b      	lsls	r3, r3, #2
 801ba88:	58d3      	ldr	r3, [r2, r3]
 801ba8a:	699b      	ldr	r3, [r3, #24]
 801ba8c:	687a      	ldr	r2, [r7, #4]
 801ba8e:	7c12      	ldrb	r2, [r2, #16]
 801ba90:	2108      	movs	r1, #8
 801ba92:	1879      	adds	r1, r7, r1
 801ba94:	0010      	movs	r0, r2
 801ba96:	4798      	blx	r3
 801ba98:	0003      	movs	r3, r0
 801ba9a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ba9c:	e019      	b.n	801bad2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ba9e:	683a      	ldr	r2, [r7, #0]
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	0011      	movs	r1, r2
 801baa4:	0018      	movs	r0, r3
 801baa6:	f000 fa76 	bl	801bf96 <USBD_CtlError>
            err++;
 801baaa:	210b      	movs	r1, #11
 801baac:	187b      	adds	r3, r7, r1
 801baae:	781a      	ldrb	r2, [r3, #0]
 801bab0:	187b      	adds	r3, r7, r1
 801bab2:	3201      	adds	r2, #1
 801bab4:	701a      	strb	r2, [r3, #0]
          break;
 801bab6:	e00c      	b.n	801bad2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801bab8:	683a      	ldr	r2, [r7, #0]
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	0011      	movs	r1, r2
 801babe:	0018      	movs	r0, r3
 801bac0:	f000 fa69 	bl	801bf96 <USBD_CtlError>
          err++;
 801bac4:	210b      	movs	r1, #11
 801bac6:	187b      	adds	r3, r7, r1
 801bac8:	781a      	ldrb	r2, [r3, #0]
 801baca:	187b      	adds	r3, r7, r1
 801bacc:	3201      	adds	r2, #1
 801bace:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801bad0:	e04b      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>
 801bad2:	e04a      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	7c1b      	ldrb	r3, [r3, #16]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d10b      	bne.n	801baf4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801badc:	687a      	ldr	r2, [r7, #4]
 801bade:	23ad      	movs	r3, #173	@ 0xad
 801bae0:	009b      	lsls	r3, r3, #2
 801bae2:	58d3      	ldr	r3, [r2, r3]
 801bae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bae6:	2208      	movs	r2, #8
 801bae8:	18ba      	adds	r2, r7, r2
 801baea:	0010      	movs	r0, r2
 801baec:	4798      	blx	r3
 801baee:	0003      	movs	r3, r0
 801baf0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801baf2:	e03a      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801baf4:	683a      	ldr	r2, [r7, #0]
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	0011      	movs	r1, r2
 801bafa:	0018      	movs	r0, r3
 801bafc:	f000 fa4b 	bl	801bf96 <USBD_CtlError>
        err++;
 801bb00:	210b      	movs	r1, #11
 801bb02:	187b      	adds	r3, r7, r1
 801bb04:	781a      	ldrb	r2, [r3, #0]
 801bb06:	187b      	adds	r3, r7, r1
 801bb08:	3201      	adds	r2, #1
 801bb0a:	701a      	strb	r2, [r3, #0]
      break;
 801bb0c:	e02d      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	7c1b      	ldrb	r3, [r3, #16]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d10f      	bne.n	801bb36 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801bb16:	687a      	ldr	r2, [r7, #4]
 801bb18:	23ad      	movs	r3, #173	@ 0xad
 801bb1a:	009b      	lsls	r3, r3, #2
 801bb1c:	58d3      	ldr	r3, [r2, r3]
 801bb1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb20:	2208      	movs	r2, #8
 801bb22:	18ba      	adds	r2, r7, r2
 801bb24:	0010      	movs	r0, r2
 801bb26:	4798      	blx	r3
 801bb28:	0003      	movs	r3, r0
 801bb2a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	3301      	adds	r3, #1
 801bb30:	2207      	movs	r2, #7
 801bb32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801bb34:	e019      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801bb36:	683a      	ldr	r2, [r7, #0]
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	0011      	movs	r1, r2
 801bb3c:	0018      	movs	r0, r3
 801bb3e:	f000 fa2a 	bl	801bf96 <USBD_CtlError>
        err++;
 801bb42:	210b      	movs	r1, #11
 801bb44:	187b      	adds	r3, r7, r1
 801bb46:	781a      	ldrb	r2, [r3, #0]
 801bb48:	187b      	adds	r3, r7, r1
 801bb4a:	3201      	adds	r2, #1
 801bb4c:	701a      	strb	r2, [r3, #0]
      break;
 801bb4e:	e00c      	b.n	801bb6a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801bb50:	683a      	ldr	r2, [r7, #0]
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	0011      	movs	r1, r2
 801bb56:	0018      	movs	r0, r3
 801bb58:	f000 fa1d 	bl	801bf96 <USBD_CtlError>
      err++;
 801bb5c:	210b      	movs	r1, #11
 801bb5e:	187b      	adds	r3, r7, r1
 801bb60:	781a      	ldrb	r2, [r3, #0]
 801bb62:	187b      	adds	r3, r7, r1
 801bb64:	3201      	adds	r2, #1
 801bb66:	701a      	strb	r2, [r3, #0]
      break;
 801bb68:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801bb6a:	230b      	movs	r3, #11
 801bb6c:	18fb      	adds	r3, r7, r3
 801bb6e:	781b      	ldrb	r3, [r3, #0]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d127      	bne.n	801bbc4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801bb74:	2108      	movs	r1, #8
 801bb76:	187b      	adds	r3, r7, r1
 801bb78:	881b      	ldrh	r3, [r3, #0]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d019      	beq.n	801bbb2 <USBD_GetDescriptor+0x342>
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	88db      	ldrh	r3, [r3, #6]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d015      	beq.n	801bbb2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	88da      	ldrh	r2, [r3, #6]
 801bb8a:	187b      	adds	r3, r7, r1
 801bb8c:	881b      	ldrh	r3, [r3, #0]
 801bb8e:	1c18      	adds	r0, r3, #0
 801bb90:	1c11      	adds	r1, r2, #0
 801bb92:	b28a      	uxth	r2, r1
 801bb94:	b283      	uxth	r3, r0
 801bb96:	429a      	cmp	r2, r3
 801bb98:	d900      	bls.n	801bb9c <USBD_GetDescriptor+0x32c>
 801bb9a:	1c01      	adds	r1, r0, #0
 801bb9c:	b28a      	uxth	r2, r1
 801bb9e:	2108      	movs	r1, #8
 801bba0:	187b      	adds	r3, r7, r1
 801bba2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801bba4:	187b      	adds	r3, r7, r1
 801bba6:	881a      	ldrh	r2, [r3, #0]
 801bba8:	68f9      	ldr	r1, [r7, #12]
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	0018      	movs	r0, r3
 801bbae:	f000 fa70 	bl	801c092 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801bbb2:	683b      	ldr	r3, [r7, #0]
 801bbb4:	88db      	ldrh	r3, [r3, #6]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d105      	bne.n	801bbc6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	0018      	movs	r0, r3
 801bbbe:	f000 fad2 	bl	801c166 <USBD_CtlSendStatus>
 801bbc2:	e000      	b.n	801bbc6 <USBD_GetDescriptor+0x356>
    return;
 801bbc4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	b004      	add	sp, #16
 801bbca:	bd80      	pop	{r7, pc}
 801bbcc:	08024974 	.word	0x08024974
 801bbd0:	08024994 	.word	0x08024994

0801bbd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bbd4:	b590      	push	{r4, r7, lr}
 801bbd6:	b085      	sub	sp, #20
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
 801bbdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	889b      	ldrh	r3, [r3, #4]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d13d      	bne.n	801bc62 <USBD_SetAddress+0x8e>
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	88db      	ldrh	r3, [r3, #6]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d139      	bne.n	801bc62 <USBD_SetAddress+0x8e>
 801bbee:	683b      	ldr	r3, [r7, #0]
 801bbf0:	885b      	ldrh	r3, [r3, #2]
 801bbf2:	2b7f      	cmp	r3, #127	@ 0x7f
 801bbf4:	d835      	bhi.n	801bc62 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801bbf6:	683b      	ldr	r3, [r7, #0]
 801bbf8:	885b      	ldrh	r3, [r3, #2]
 801bbfa:	b2da      	uxtb	r2, r3
 801bbfc:	230f      	movs	r3, #15
 801bbfe:	18fb      	adds	r3, r7, r3
 801bc00:	217f      	movs	r1, #127	@ 0x7f
 801bc02:	400a      	ands	r2, r1
 801bc04:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc06:	687a      	ldr	r2, [r7, #4]
 801bc08:	23a7      	movs	r3, #167	@ 0xa7
 801bc0a:	009b      	lsls	r3, r3, #2
 801bc0c:	5cd3      	ldrb	r3, [r2, r3]
 801bc0e:	2b03      	cmp	r3, #3
 801bc10:	d106      	bne.n	801bc20 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801bc12:	683a      	ldr	r2, [r7, #0]
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	0011      	movs	r1, r2
 801bc18:	0018      	movs	r0, r3
 801bc1a:	f000 f9bc 	bl	801bf96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc1e:	e027      	b.n	801bc70 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	240f      	movs	r4, #15
 801bc24:	193a      	adds	r2, r7, r4
 801bc26:	4914      	ldr	r1, [pc, #80]	@ (801bc78 <USBD_SetAddress+0xa4>)
 801bc28:	7812      	ldrb	r2, [r2, #0]
 801bc2a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801bc2c:	193b      	adds	r3, r7, r4
 801bc2e:	781a      	ldrb	r2, [r3, #0]
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	0011      	movs	r1, r2
 801bc34:	0018      	movs	r0, r3
 801bc36:	f000 ff5d 	bl	801caf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	0018      	movs	r0, r3
 801bc3e:	f000 fa92 	bl	801c166 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801bc42:	193b      	adds	r3, r7, r4
 801bc44:	781b      	ldrb	r3, [r3, #0]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d005      	beq.n	801bc56 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801bc4a:	687a      	ldr	r2, [r7, #4]
 801bc4c:	23a7      	movs	r3, #167	@ 0xa7
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	2102      	movs	r1, #2
 801bc52:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc54:	e00c      	b.n	801bc70 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801bc56:	687a      	ldr	r2, [r7, #4]
 801bc58:	23a7      	movs	r3, #167	@ 0xa7
 801bc5a:	009b      	lsls	r3, r3, #2
 801bc5c:	2101      	movs	r1, #1
 801bc5e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc60:	e006      	b.n	801bc70 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801bc62:	683a      	ldr	r2, [r7, #0]
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	0011      	movs	r1, r2
 801bc68:	0018      	movs	r0, r3
 801bc6a:	f000 f994 	bl	801bf96 <USBD_CtlError>
  }
}
 801bc6e:	46c0      	nop			@ (mov r8, r8)
 801bc70:	46c0      	nop			@ (mov r8, r8)
 801bc72:	46bd      	mov	sp, r7
 801bc74:	b005      	add	sp, #20
 801bc76:	bd90      	pop	{r4, r7, pc}
 801bc78:	0000029e 	.word	0x0000029e

0801bc7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b082      	sub	sp, #8
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
 801bc84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801bc86:	683b      	ldr	r3, [r7, #0]
 801bc88:	885b      	ldrh	r3, [r3, #2]
 801bc8a:	b2da      	uxtb	r2, r3
 801bc8c:	4b4c      	ldr	r3, [pc, #304]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bc8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801bc90:	4b4b      	ldr	r3, [pc, #300]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bc92:	781b      	ldrb	r3, [r3, #0]
 801bc94:	2b01      	cmp	r3, #1
 801bc96:	d906      	bls.n	801bca6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801bc98:	683a      	ldr	r2, [r7, #0]
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	0011      	movs	r1, r2
 801bc9e:	0018      	movs	r0, r3
 801bca0:	f000 f979 	bl	801bf96 <USBD_CtlError>
 801bca4:	e088      	b.n	801bdb8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801bca6:	687a      	ldr	r2, [r7, #4]
 801bca8:	23a7      	movs	r3, #167	@ 0xa7
 801bcaa:	009b      	lsls	r3, r3, #2
 801bcac:	5cd3      	ldrb	r3, [r2, r3]
 801bcae:	2b02      	cmp	r3, #2
 801bcb0:	d002      	beq.n	801bcb8 <USBD_SetConfig+0x3c>
 801bcb2:	2b03      	cmp	r3, #3
 801bcb4:	d029      	beq.n	801bd0a <USBD_SetConfig+0x8e>
 801bcb6:	e071      	b.n	801bd9c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801bcb8:	4b41      	ldr	r3, [pc, #260]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bcba:	781b      	ldrb	r3, [r3, #0]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d01f      	beq.n	801bd00 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801bcc0:	4b3f      	ldr	r3, [pc, #252]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bcc2:	781b      	ldrb	r3, [r3, #0]
 801bcc4:	001a      	movs	r2, r3
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801bcca:	687a      	ldr	r2, [r7, #4]
 801bccc:	23a7      	movs	r3, #167	@ 0xa7
 801bcce:	009b      	lsls	r3, r3, #2
 801bcd0:	2103      	movs	r1, #3
 801bcd2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801bcd4:	4b3a      	ldr	r3, [pc, #232]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bcd6:	781a      	ldrb	r2, [r3, #0]
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	0011      	movs	r1, r2
 801bcdc:	0018      	movs	r0, r3
 801bcde:	f7ff f8c6 	bl	801ae6e <USBD_SetClassConfig>
 801bce2:	0003      	movs	r3, r0
 801bce4:	2b02      	cmp	r3, #2
 801bce6:	d106      	bne.n	801bcf6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801bce8:	683a      	ldr	r2, [r7, #0]
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	0011      	movs	r1, r2
 801bcee:	0018      	movs	r0, r3
 801bcf0:	f000 f951 	bl	801bf96 <USBD_CtlError>
            return;
 801bcf4:	e060      	b.n	801bdb8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	0018      	movs	r0, r3
 801bcfa:	f000 fa34 	bl	801c166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801bcfe:	e05b      	b.n	801bdb8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	0018      	movs	r0, r3
 801bd04:	f000 fa2f 	bl	801c166 <USBD_CtlSendStatus>
        break;
 801bd08:	e056      	b.n	801bdb8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801bd0a:	4b2d      	ldr	r3, [pc, #180]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bd0c:	781b      	ldrb	r3, [r3, #0]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d115      	bne.n	801bd3e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bd12:	687a      	ldr	r2, [r7, #4]
 801bd14:	23a7      	movs	r3, #167	@ 0xa7
 801bd16:	009b      	lsls	r3, r3, #2
 801bd18:	2102      	movs	r1, #2
 801bd1a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801bd1c:	4b28      	ldr	r3, [pc, #160]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bd1e:	781b      	ldrb	r3, [r3, #0]
 801bd20:	001a      	movs	r2, r3
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801bd26:	4b26      	ldr	r3, [pc, #152]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bd28:	781a      	ldrb	r2, [r3, #0]
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	0011      	movs	r1, r2
 801bd2e:	0018      	movs	r0, r3
 801bd30:	f7ff f8c4 	bl	801aebc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	0018      	movs	r0, r3
 801bd38:	f000 fa15 	bl	801c166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801bd3c:	e03c      	b.n	801bdb8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801bd3e:	4b20      	ldr	r3, [pc, #128]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bd40:	781b      	ldrb	r3, [r3, #0]
 801bd42:	001a      	movs	r2, r3
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	685b      	ldr	r3, [r3, #4]
 801bd48:	429a      	cmp	r2, r3
 801bd4a:	d022      	beq.n	801bd92 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	685b      	ldr	r3, [r3, #4]
 801bd50:	b2da      	uxtb	r2, r3
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	0011      	movs	r1, r2
 801bd56:	0018      	movs	r0, r3
 801bd58:	f7ff f8b0 	bl	801aebc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801bd5c:	4b18      	ldr	r3, [pc, #96]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bd5e:	781b      	ldrb	r3, [r3, #0]
 801bd60:	001a      	movs	r2, r3
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801bd66:	4b16      	ldr	r3, [pc, #88]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bd68:	781a      	ldrb	r2, [r3, #0]
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	0011      	movs	r1, r2
 801bd6e:	0018      	movs	r0, r3
 801bd70:	f7ff f87d 	bl	801ae6e <USBD_SetClassConfig>
 801bd74:	0003      	movs	r3, r0
 801bd76:	2b02      	cmp	r3, #2
 801bd78:	d106      	bne.n	801bd88 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801bd7a:	683a      	ldr	r2, [r7, #0]
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	0011      	movs	r1, r2
 801bd80:	0018      	movs	r0, r3
 801bd82:	f000 f908 	bl	801bf96 <USBD_CtlError>
            return;
 801bd86:	e017      	b.n	801bdb8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	0018      	movs	r0, r3
 801bd8c:	f000 f9eb 	bl	801c166 <USBD_CtlSendStatus>
        break;
 801bd90:	e012      	b.n	801bdb8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	0018      	movs	r0, r3
 801bd96:	f000 f9e6 	bl	801c166 <USBD_CtlSendStatus>
        break;
 801bd9a:	e00d      	b.n	801bdb8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801bd9c:	683a      	ldr	r2, [r7, #0]
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	0011      	movs	r1, r2
 801bda2:	0018      	movs	r0, r3
 801bda4:	f000 f8f7 	bl	801bf96 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801bda8:	4b05      	ldr	r3, [pc, #20]	@ (801bdc0 <USBD_SetConfig+0x144>)
 801bdaa:	781a      	ldrb	r2, [r3, #0]
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	0011      	movs	r1, r2
 801bdb0:	0018      	movs	r0, r3
 801bdb2:	f7ff f883 	bl	801aebc <USBD_ClrClassConfig>
        break;
 801bdb6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bdb8:	46bd      	mov	sp, r7
 801bdba:	b002      	add	sp, #8
 801bdbc:	bd80      	pop	{r7, pc}
 801bdbe:	46c0      	nop			@ (mov r8, r8)
 801bdc0:	20002518 	.word	0x20002518

0801bdc4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	b082      	sub	sp, #8
 801bdc8:	af00      	add	r7, sp, #0
 801bdca:	6078      	str	r0, [r7, #4]
 801bdcc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801bdce:	683b      	ldr	r3, [r7, #0]
 801bdd0:	88db      	ldrh	r3, [r3, #6]
 801bdd2:	2b01      	cmp	r3, #1
 801bdd4:	d006      	beq.n	801bde4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801bdd6:	683a      	ldr	r2, [r7, #0]
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	0011      	movs	r1, r2
 801bddc:	0018      	movs	r0, r3
 801bdde:	f000 f8da 	bl	801bf96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801bde2:	e026      	b.n	801be32 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801bde4:	687a      	ldr	r2, [r7, #4]
 801bde6:	23a7      	movs	r3, #167	@ 0xa7
 801bde8:	009b      	lsls	r3, r3, #2
 801bdea:	5cd3      	ldrb	r3, [r2, r3]
 801bdec:	2b02      	cmp	r3, #2
 801bdee:	dc02      	bgt.n	801bdf6 <USBD_GetConfig+0x32>
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	dc03      	bgt.n	801bdfc <USBD_GetConfig+0x38>
 801bdf4:	e016      	b.n	801be24 <USBD_GetConfig+0x60>
 801bdf6:	2b03      	cmp	r3, #3
 801bdf8:	d00c      	beq.n	801be14 <USBD_GetConfig+0x50>
 801bdfa:	e013      	b.n	801be24 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	2200      	movs	r2, #0
 801be00:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	3308      	adds	r3, #8
 801be06:	0019      	movs	r1, r3
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	2201      	movs	r2, #1
 801be0c:	0018      	movs	r0, r3
 801be0e:	f000 f940 	bl	801c092 <USBD_CtlSendData>
        break;
 801be12:	e00e      	b.n	801be32 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	1d19      	adds	r1, r3, #4
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	2201      	movs	r2, #1
 801be1c:	0018      	movs	r0, r3
 801be1e:	f000 f938 	bl	801c092 <USBD_CtlSendData>
        break;
 801be22:	e006      	b.n	801be32 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801be24:	683a      	ldr	r2, [r7, #0]
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	0011      	movs	r1, r2
 801be2a:	0018      	movs	r0, r3
 801be2c:	f000 f8b3 	bl	801bf96 <USBD_CtlError>
        break;
 801be30:	46c0      	nop			@ (mov r8, r8)
}
 801be32:	46c0      	nop			@ (mov r8, r8)
 801be34:	46bd      	mov	sp, r7
 801be36:	b002      	add	sp, #8
 801be38:	bd80      	pop	{r7, pc}

0801be3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801be3a:	b580      	push	{r7, lr}
 801be3c:	b082      	sub	sp, #8
 801be3e:	af00      	add	r7, sp, #0
 801be40:	6078      	str	r0, [r7, #4]
 801be42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801be44:	687a      	ldr	r2, [r7, #4]
 801be46:	23a7      	movs	r3, #167	@ 0xa7
 801be48:	009b      	lsls	r3, r3, #2
 801be4a:	5cd3      	ldrb	r3, [r2, r3]
 801be4c:	3b01      	subs	r3, #1
 801be4e:	2b02      	cmp	r3, #2
 801be50:	d822      	bhi.n	801be98 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	88db      	ldrh	r3, [r3, #6]
 801be56:	2b02      	cmp	r3, #2
 801be58:	d006      	beq.n	801be68 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801be5a:	683a      	ldr	r2, [r7, #0]
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	0011      	movs	r1, r2
 801be60:	0018      	movs	r0, r3
 801be62:	f000 f898 	bl	801bf96 <USBD_CtlError>
        break;
 801be66:	e01e      	b.n	801bea6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	2201      	movs	r2, #1
 801be6c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801be6e:	687a      	ldr	r2, [r7, #4]
 801be70:	23a9      	movs	r3, #169	@ 0xa9
 801be72:	009b      	lsls	r3, r3, #2
 801be74:	58d3      	ldr	r3, [r2, r3]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d005      	beq.n	801be86 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	68db      	ldr	r3, [r3, #12]
 801be7e:	2202      	movs	r2, #2
 801be80:	431a      	orrs	r2, r3
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	330c      	adds	r3, #12
 801be8a:	0019      	movs	r1, r3
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	2202      	movs	r2, #2
 801be90:	0018      	movs	r0, r3
 801be92:	f000 f8fe 	bl	801c092 <USBD_CtlSendData>
      break;
 801be96:	e006      	b.n	801bea6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801be98:	683a      	ldr	r2, [r7, #0]
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	0011      	movs	r1, r2
 801be9e:	0018      	movs	r0, r3
 801bea0:	f000 f879 	bl	801bf96 <USBD_CtlError>
      break;
 801bea4:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bea6:	46c0      	nop			@ (mov r8, r8)
 801bea8:	46bd      	mov	sp, r7
 801beaa:	b002      	add	sp, #8
 801beac:	bd80      	pop	{r7, pc}

0801beae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801beae:	b580      	push	{r7, lr}
 801beb0:	b082      	sub	sp, #8
 801beb2:	af00      	add	r7, sp, #0
 801beb4:	6078      	str	r0, [r7, #4]
 801beb6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801beb8:	683b      	ldr	r3, [r7, #0]
 801beba:	885b      	ldrh	r3, [r3, #2]
 801bebc:	2b01      	cmp	r3, #1
 801bebe:	d108      	bne.n	801bed2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801bec0:	687a      	ldr	r2, [r7, #4]
 801bec2:	23a9      	movs	r3, #169	@ 0xa9
 801bec4:	009b      	lsls	r3, r3, #2
 801bec6:	2101      	movs	r1, #1
 801bec8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	0018      	movs	r0, r3
 801bece:	f000 f94a 	bl	801c166 <USBD_CtlSendStatus>
  }
}
 801bed2:	46c0      	nop			@ (mov r8, r8)
 801bed4:	46bd      	mov	sp, r7
 801bed6:	b002      	add	sp, #8
 801bed8:	bd80      	pop	{r7, pc}

0801beda <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801beda:	b580      	push	{r7, lr}
 801bedc:	b082      	sub	sp, #8
 801bede:	af00      	add	r7, sp, #0
 801bee0:	6078      	str	r0, [r7, #4]
 801bee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bee4:	687a      	ldr	r2, [r7, #4]
 801bee6:	23a7      	movs	r3, #167	@ 0xa7
 801bee8:	009b      	lsls	r3, r3, #2
 801beea:	5cd3      	ldrb	r3, [r2, r3]
 801beec:	3b01      	subs	r3, #1
 801beee:	2b02      	cmp	r3, #2
 801bef0:	d80d      	bhi.n	801bf0e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bef2:	683b      	ldr	r3, [r7, #0]
 801bef4:	885b      	ldrh	r3, [r3, #2]
 801bef6:	2b01      	cmp	r3, #1
 801bef8:	d110      	bne.n	801bf1c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801befa:	687a      	ldr	r2, [r7, #4]
 801befc:	23a9      	movs	r3, #169	@ 0xa9
 801befe:	009b      	lsls	r3, r3, #2
 801bf00:	2100      	movs	r1, #0
 801bf02:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	0018      	movs	r0, r3
 801bf08:	f000 f92d 	bl	801c166 <USBD_CtlSendStatus>
      }
      break;
 801bf0c:	e006      	b.n	801bf1c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801bf0e:	683a      	ldr	r2, [r7, #0]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	0011      	movs	r1, r2
 801bf14:	0018      	movs	r0, r3
 801bf16:	f000 f83e 	bl	801bf96 <USBD_CtlError>
      break;
 801bf1a:	e000      	b.n	801bf1e <USBD_ClrFeature+0x44>
      break;
 801bf1c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bf1e:	46c0      	nop			@ (mov r8, r8)
 801bf20:	46bd      	mov	sp, r7
 801bf22:	b002      	add	sp, #8
 801bf24:	bd80      	pop	{r7, pc}

0801bf26 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801bf26:	b580      	push	{r7, lr}
 801bf28:	b082      	sub	sp, #8
 801bf2a:	af00      	add	r7, sp, #0
 801bf2c:	6078      	str	r0, [r7, #4]
 801bf2e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801bf30:	683b      	ldr	r3, [r7, #0]
 801bf32:	781a      	ldrb	r2, [r3, #0]
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801bf38:	683b      	ldr	r3, [r7, #0]
 801bf3a:	785a      	ldrb	r2, [r3, #1]
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801bf40:	683b      	ldr	r3, [r7, #0]
 801bf42:	3302      	adds	r3, #2
 801bf44:	781b      	ldrb	r3, [r3, #0]
 801bf46:	001a      	movs	r2, r3
 801bf48:	683b      	ldr	r3, [r7, #0]
 801bf4a:	3303      	adds	r3, #3
 801bf4c:	781b      	ldrb	r3, [r3, #0]
 801bf4e:	021b      	lsls	r3, r3, #8
 801bf50:	b29b      	uxth	r3, r3
 801bf52:	18d3      	adds	r3, r2, r3
 801bf54:	b29a      	uxth	r2, r3
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801bf5a:	683b      	ldr	r3, [r7, #0]
 801bf5c:	3304      	adds	r3, #4
 801bf5e:	781b      	ldrb	r3, [r3, #0]
 801bf60:	001a      	movs	r2, r3
 801bf62:	683b      	ldr	r3, [r7, #0]
 801bf64:	3305      	adds	r3, #5
 801bf66:	781b      	ldrb	r3, [r3, #0]
 801bf68:	021b      	lsls	r3, r3, #8
 801bf6a:	b29b      	uxth	r3, r3
 801bf6c:	18d3      	adds	r3, r2, r3
 801bf6e:	b29a      	uxth	r2, r3
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801bf74:	683b      	ldr	r3, [r7, #0]
 801bf76:	3306      	adds	r3, #6
 801bf78:	781b      	ldrb	r3, [r3, #0]
 801bf7a:	001a      	movs	r2, r3
 801bf7c:	683b      	ldr	r3, [r7, #0]
 801bf7e:	3307      	adds	r3, #7
 801bf80:	781b      	ldrb	r3, [r3, #0]
 801bf82:	021b      	lsls	r3, r3, #8
 801bf84:	b29b      	uxth	r3, r3
 801bf86:	18d3      	adds	r3, r2, r3
 801bf88:	b29a      	uxth	r2, r3
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	80da      	strh	r2, [r3, #6]

}
 801bf8e:	46c0      	nop			@ (mov r8, r8)
 801bf90:	46bd      	mov	sp, r7
 801bf92:	b002      	add	sp, #8
 801bf94:	bd80      	pop	{r7, pc}

0801bf96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801bf96:	b580      	push	{r7, lr}
 801bf98:	b082      	sub	sp, #8
 801bf9a:	af00      	add	r7, sp, #0
 801bf9c:	6078      	str	r0, [r7, #4]
 801bf9e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	2180      	movs	r1, #128	@ 0x80
 801bfa4:	0018      	movs	r0, r3
 801bfa6:	f000 fd1e 	bl	801c9e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	2100      	movs	r1, #0
 801bfae:	0018      	movs	r0, r3
 801bfb0:	f000 fd19 	bl	801c9e6 <USBD_LL_StallEP>
}
 801bfb4:	46c0      	nop			@ (mov r8, r8)
 801bfb6:	46bd      	mov	sp, r7
 801bfb8:	b002      	add	sp, #8
 801bfba:	bd80      	pop	{r7, pc}

0801bfbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801bfbc:	b590      	push	{r4, r7, lr}
 801bfbe:	b087      	sub	sp, #28
 801bfc0:	af00      	add	r7, sp, #0
 801bfc2:	60f8      	str	r0, [r7, #12]
 801bfc4:	60b9      	str	r1, [r7, #8]
 801bfc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801bfc8:	2417      	movs	r4, #23
 801bfca:	193b      	adds	r3, r7, r4
 801bfcc:	2200      	movs	r2, #0
 801bfce:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d03c      	beq.n	801c050 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	0018      	movs	r0, r3
 801bfda:	f000 f83d 	bl	801c058 <USBD_GetLen>
 801bfde:	0003      	movs	r3, r0
 801bfe0:	3301      	adds	r3, #1
 801bfe2:	b29b      	uxth	r3, r3
 801bfe4:	18db      	adds	r3, r3, r3
 801bfe6:	b29a      	uxth	r2, r3
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801bfec:	193b      	adds	r3, r7, r4
 801bfee:	781b      	ldrb	r3, [r3, #0]
 801bff0:	193a      	adds	r2, r7, r4
 801bff2:	1c59      	adds	r1, r3, #1
 801bff4:	7011      	strb	r1, [r2, #0]
 801bff6:	001a      	movs	r2, r3
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	189b      	adds	r3, r3, r2
 801bffc:	687a      	ldr	r2, [r7, #4]
 801bffe:	7812      	ldrb	r2, [r2, #0]
 801c000:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c002:	193b      	adds	r3, r7, r4
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	193a      	adds	r2, r7, r4
 801c008:	1c59      	adds	r1, r3, #1
 801c00a:	7011      	strb	r1, [r2, #0]
 801c00c:	001a      	movs	r2, r3
 801c00e:	68bb      	ldr	r3, [r7, #8]
 801c010:	189b      	adds	r3, r3, r2
 801c012:	2203      	movs	r2, #3
 801c014:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c016:	e017      	b.n	801c048 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	1c5a      	adds	r2, r3, #1
 801c01c:	60fa      	str	r2, [r7, #12]
 801c01e:	2417      	movs	r4, #23
 801c020:	193a      	adds	r2, r7, r4
 801c022:	7812      	ldrb	r2, [r2, #0]
 801c024:	1939      	adds	r1, r7, r4
 801c026:	1c50      	adds	r0, r2, #1
 801c028:	7008      	strb	r0, [r1, #0]
 801c02a:	0011      	movs	r1, r2
 801c02c:	68ba      	ldr	r2, [r7, #8]
 801c02e:	1852      	adds	r2, r2, r1
 801c030:	781b      	ldrb	r3, [r3, #0]
 801c032:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c034:	193b      	adds	r3, r7, r4
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	193a      	adds	r2, r7, r4
 801c03a:	1c59      	adds	r1, r3, #1
 801c03c:	7011      	strb	r1, [r2, #0]
 801c03e:	001a      	movs	r2, r3
 801c040:	68bb      	ldr	r3, [r7, #8]
 801c042:	189b      	adds	r3, r3, r2
 801c044:	2200      	movs	r2, #0
 801c046:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	781b      	ldrb	r3, [r3, #0]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d1e3      	bne.n	801c018 <USBD_GetString+0x5c>
    }
  }
}
 801c050:	46c0      	nop			@ (mov r8, r8)
 801c052:	46bd      	mov	sp, r7
 801c054:	b007      	add	sp, #28
 801c056:	bd90      	pop	{r4, r7, pc}

0801c058 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c058:	b580      	push	{r7, lr}
 801c05a:	b084      	sub	sp, #16
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c060:	230f      	movs	r3, #15
 801c062:	18fb      	adds	r3, r7, r3
 801c064:	2200      	movs	r2, #0
 801c066:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801c068:	e008      	b.n	801c07c <USBD_GetLen+0x24>
  {
    len++;
 801c06a:	210f      	movs	r1, #15
 801c06c:	187b      	adds	r3, r7, r1
 801c06e:	781a      	ldrb	r2, [r3, #0]
 801c070:	187b      	adds	r3, r7, r1
 801c072:	3201      	adds	r2, #1
 801c074:	701a      	strb	r2, [r3, #0]
    buf++;
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	3301      	adds	r3, #1
 801c07a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	781b      	ldrb	r3, [r3, #0]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d1f2      	bne.n	801c06a <USBD_GetLen+0x12>
  }

  return len;
 801c084:	230f      	movs	r3, #15
 801c086:	18fb      	adds	r3, r7, r3
 801c088:	781b      	ldrb	r3, [r3, #0]
}
 801c08a:	0018      	movs	r0, r3
 801c08c:	46bd      	mov	sp, r7
 801c08e:	b004      	add	sp, #16
 801c090:	bd80      	pop	{r7, pc}

0801c092 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801c092:	b580      	push	{r7, lr}
 801c094:	b084      	sub	sp, #16
 801c096:	af00      	add	r7, sp, #0
 801c098:	60f8      	str	r0, [r7, #12]
 801c09a:	60b9      	str	r1, [r7, #8]
 801c09c:	1dbb      	adds	r3, r7, #6
 801c09e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c0a0:	68fa      	ldr	r2, [r7, #12]
 801c0a2:	23a5      	movs	r3, #165	@ 0xa5
 801c0a4:	009b      	lsls	r3, r3, #2
 801c0a6:	2102      	movs	r1, #2
 801c0a8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801c0aa:	1dbb      	adds	r3, r7, #6
 801c0ac:	881a      	ldrh	r2, [r3, #0]
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801c0b2:	1dbb      	adds	r3, r7, #6
 801c0b4:	881a      	ldrh	r2, [r3, #0]
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c0ba:	1dbb      	adds	r3, r7, #6
 801c0bc:	881b      	ldrh	r3, [r3, #0]
 801c0be:	68ba      	ldr	r2, [r7, #8]
 801c0c0:	68f8      	ldr	r0, [r7, #12]
 801c0c2:	2100      	movs	r1, #0
 801c0c4:	f000 fd41 	bl	801cb4a <USBD_LL_Transmit>

  return USBD_OK;
 801c0c8:	2300      	movs	r3, #0
}
 801c0ca:	0018      	movs	r0, r3
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	b004      	add	sp, #16
 801c0d0:	bd80      	pop	{r7, pc}

0801c0d2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801c0d2:	b580      	push	{r7, lr}
 801c0d4:	b084      	sub	sp, #16
 801c0d6:	af00      	add	r7, sp, #0
 801c0d8:	60f8      	str	r0, [r7, #12]
 801c0da:	60b9      	str	r1, [r7, #8]
 801c0dc:	1dbb      	adds	r3, r7, #6
 801c0de:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c0e0:	1dbb      	adds	r3, r7, #6
 801c0e2:	881b      	ldrh	r3, [r3, #0]
 801c0e4:	68ba      	ldr	r2, [r7, #8]
 801c0e6:	68f8      	ldr	r0, [r7, #12]
 801c0e8:	2100      	movs	r1, #0
 801c0ea:	f000 fd2e 	bl	801cb4a <USBD_LL_Transmit>

  return USBD_OK;
 801c0ee:	2300      	movs	r3, #0
}
 801c0f0:	0018      	movs	r0, r3
 801c0f2:	46bd      	mov	sp, r7
 801c0f4:	b004      	add	sp, #16
 801c0f6:	bd80      	pop	{r7, pc}

0801c0f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801c0f8:	b580      	push	{r7, lr}
 801c0fa:	b084      	sub	sp, #16
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	60f8      	str	r0, [r7, #12]
 801c100:	60b9      	str	r1, [r7, #8]
 801c102:	1dbb      	adds	r3, r7, #6
 801c104:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c106:	68fa      	ldr	r2, [r7, #12]
 801c108:	23a5      	movs	r3, #165	@ 0xa5
 801c10a:	009b      	lsls	r3, r3, #2
 801c10c:	2103      	movs	r1, #3
 801c10e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801c110:	1dbb      	adds	r3, r7, #6
 801c112:	8819      	ldrh	r1, [r3, #0]
 801c114:	68fa      	ldr	r2, [r7, #12]
 801c116:	23ae      	movs	r3, #174	@ 0xae
 801c118:	005b      	lsls	r3, r3, #1
 801c11a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801c11c:	1dbb      	adds	r3, r7, #6
 801c11e:	8819      	ldrh	r1, [r3, #0]
 801c120:	68fa      	ldr	r2, [r7, #12]
 801c122:	23b0      	movs	r3, #176	@ 0xb0
 801c124:	005b      	lsls	r3, r3, #1
 801c126:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c128:	1dbb      	adds	r3, r7, #6
 801c12a:	881b      	ldrh	r3, [r3, #0]
 801c12c:	68ba      	ldr	r2, [r7, #8]
 801c12e:	68f8      	ldr	r0, [r7, #12]
 801c130:	2100      	movs	r1, #0
 801c132:	f000 fd41 	bl	801cbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c136:	2300      	movs	r3, #0
}
 801c138:	0018      	movs	r0, r3
 801c13a:	46bd      	mov	sp, r7
 801c13c:	b004      	add	sp, #16
 801c13e:	bd80      	pop	{r7, pc}

0801c140 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801c140:	b580      	push	{r7, lr}
 801c142:	b084      	sub	sp, #16
 801c144:	af00      	add	r7, sp, #0
 801c146:	60f8      	str	r0, [r7, #12]
 801c148:	60b9      	str	r1, [r7, #8]
 801c14a:	1dbb      	adds	r3, r7, #6
 801c14c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801c14e:	1dbb      	adds	r3, r7, #6
 801c150:	881b      	ldrh	r3, [r3, #0]
 801c152:	68ba      	ldr	r2, [r7, #8]
 801c154:	68f8      	ldr	r0, [r7, #12]
 801c156:	2100      	movs	r1, #0
 801c158:	f000 fd2e 	bl	801cbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c15c:	2300      	movs	r3, #0
}
 801c15e:	0018      	movs	r0, r3
 801c160:	46bd      	mov	sp, r7
 801c162:	b004      	add	sp, #16
 801c164:	bd80      	pop	{r7, pc}

0801c166 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801c166:	b580      	push	{r7, lr}
 801c168:	b082      	sub	sp, #8
 801c16a:	af00      	add	r7, sp, #0
 801c16c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801c16e:	687a      	ldr	r2, [r7, #4]
 801c170:	23a5      	movs	r3, #165	@ 0xa5
 801c172:	009b      	lsls	r3, r3, #2
 801c174:	2104      	movs	r1, #4
 801c176:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801c178:	6878      	ldr	r0, [r7, #4]
 801c17a:	2300      	movs	r3, #0
 801c17c:	2200      	movs	r2, #0
 801c17e:	2100      	movs	r1, #0
 801c180:	f000 fce3 	bl	801cb4a <USBD_LL_Transmit>

  return USBD_OK;
 801c184:	2300      	movs	r3, #0
}
 801c186:	0018      	movs	r0, r3
 801c188:	46bd      	mov	sp, r7
 801c18a:	b002      	add	sp, #8
 801c18c:	bd80      	pop	{r7, pc}

0801c18e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801c18e:	b580      	push	{r7, lr}
 801c190:	b082      	sub	sp, #8
 801c192:	af00      	add	r7, sp, #0
 801c194:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801c196:	687a      	ldr	r2, [r7, #4]
 801c198:	23a5      	movs	r3, #165	@ 0xa5
 801c19a:	009b      	lsls	r3, r3, #2
 801c19c:	2105      	movs	r1, #5
 801c19e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c1a0:	6878      	ldr	r0, [r7, #4]
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	2200      	movs	r2, #0
 801c1a6:	2100      	movs	r1, #0
 801c1a8:	f000 fd06 	bl	801cbb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801c1ac:	2300      	movs	r3, #0
}
 801c1ae:	0018      	movs	r0, r3
 801c1b0:	46bd      	mov	sp, r7
 801c1b2:	b002      	add	sp, #8
 801c1b4:	bd80      	pop	{r7, pc}
	...

0801c1b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c1b8:	b580      	push	{r7, lr}
 801c1ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c1bc:	4914      	ldr	r1, [pc, #80]	@ (801c210 <MX_USB_DEVICE_Init+0x58>)
 801c1be:	4b15      	ldr	r3, [pc, #84]	@ (801c214 <MX_USB_DEVICE_Init+0x5c>)
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	0018      	movs	r0, r3
 801c1c4:	f7fe fdec 	bl	801ada0 <USBD_Init>
 801c1c8:	1e03      	subs	r3, r0, #0
 801c1ca:	d001      	beq.n	801c1d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801c1cc:	f7ec f966 	bl	800849c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801c1d0:	4a11      	ldr	r2, [pc, #68]	@ (801c218 <MX_USB_DEVICE_Init+0x60>)
 801c1d2:	4b10      	ldr	r3, [pc, #64]	@ (801c214 <MX_USB_DEVICE_Init+0x5c>)
 801c1d4:	0011      	movs	r1, r2
 801c1d6:	0018      	movs	r0, r3
 801c1d8:	f7fe fe13 	bl	801ae02 <USBD_RegisterClass>
 801c1dc:	1e03      	subs	r3, r0, #0
 801c1de:	d001      	beq.n	801c1e4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801c1e0:	f7ec f95c 	bl	800849c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801c1e4:	4a0d      	ldr	r2, [pc, #52]	@ (801c21c <MX_USB_DEVICE_Init+0x64>)
 801c1e6:	4b0b      	ldr	r3, [pc, #44]	@ (801c214 <MX_USB_DEVICE_Init+0x5c>)
 801c1e8:	0011      	movs	r1, r2
 801c1ea:	0018      	movs	r0, r3
 801c1ec:	f7fe fd28 	bl	801ac40 <USBD_CDC_RegisterInterface>
 801c1f0:	1e03      	subs	r3, r0, #0
 801c1f2:	d001      	beq.n	801c1f8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801c1f4:	f7ec f952 	bl	800849c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801c1f8:	4b06      	ldr	r3, [pc, #24]	@ (801c214 <MX_USB_DEVICE_Init+0x5c>)
 801c1fa:	0018      	movs	r0, r3
 801c1fc:	f7fe fe21 	bl	801ae42 <USBD_Start>
 801c200:	1e03      	subs	r3, r0, #0
 801c202:	d001      	beq.n	801c208 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801c204:	f7ec f94a 	bl	800849c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c208:	46c0      	nop			@ (mov r8, r8)
 801c20a:	46bd      	mov	sp, r7
 801c20c:	bd80      	pop	{r7, pc}
 801c20e:	46c0      	nop			@ (mov r8, r8)
 801c210:	20000200 	.word	0x20000200
 801c214:	2000251c 	.word	0x2000251c
 801c218:	200000ec 	.word	0x200000ec
 801c21c:	200001f0 	.word	0x200001f0

0801c220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801c220:	b580      	push	{r7, lr}
 801c222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801c224:	4907      	ldr	r1, [pc, #28]	@ (801c244 <CDC_Init_FS+0x24>)
 801c226:	4b08      	ldr	r3, [pc, #32]	@ (801c248 <CDC_Init_FS+0x28>)
 801c228:	2200      	movs	r2, #0
 801c22a:	0018      	movs	r0, r3
 801c22c:	f7fe fd23 	bl	801ac76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c230:	4a06      	ldr	r2, [pc, #24]	@ (801c24c <CDC_Init_FS+0x2c>)
 801c232:	4b05      	ldr	r3, [pc, #20]	@ (801c248 <CDC_Init_FS+0x28>)
 801c234:	0011      	movs	r1, r2
 801c236:	0018      	movs	r0, r3
 801c238:	f7fe fd39 	bl	801acae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801c23c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801c23e:	0018      	movs	r0, r3
 801c240:	46bd      	mov	sp, r7
 801c242:	bd80      	pop	{r7, pc}
 801c244:	20002ca0 	.word	0x20002ca0
 801c248:	2000251c 	.word	0x2000251c
 801c24c:	200028a0 	.word	0x200028a0

0801c250 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c250:	b580      	push	{r7, lr}
 801c252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c254:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c256:	0018      	movs	r0, r3
 801c258:	46bd      	mov	sp, r7
 801c25a:	bd80      	pop	{r7, pc}

0801c25c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c25c:	b580      	push	{r7, lr}
 801c25e:	b082      	sub	sp, #8
 801c260:	af00      	add	r7, sp, #0
 801c262:	6039      	str	r1, [r7, #0]
 801c264:	0011      	movs	r1, r2
 801c266:	1dfb      	adds	r3, r7, #7
 801c268:	1c02      	adds	r2, r0, #0
 801c26a:	701a      	strb	r2, [r3, #0]
 801c26c:	1d3b      	adds	r3, r7, #4
 801c26e:	1c0a      	adds	r2, r1, #0
 801c270:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c272:	1dfb      	adds	r3, r7, #7
 801c274:	781b      	ldrb	r3, [r3, #0]
 801c276:	2b23      	cmp	r3, #35	@ 0x23
 801c278:	d804      	bhi.n	801c284 <CDC_Control_FS+0x28>
 801c27a:	009a      	lsls	r2, r3, #2
 801c27c:	4b04      	ldr	r3, [pc, #16]	@ (801c290 <CDC_Control_FS+0x34>)
 801c27e:	18d3      	adds	r3, r2, r3
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c284:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801c286:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c288:	0018      	movs	r0, r3
 801c28a:	46bd      	mov	sp, r7
 801c28c:	b002      	add	sp, #8
 801c28e:	bd80      	pop	{r7, pc}
 801c290:	080249ac 	.word	0x080249ac

0801c294 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c294:	b580      	push	{r7, lr}
 801c296:	b082      	sub	sp, #8
 801c298:	af00      	add	r7, sp, #0
 801c29a:	6078      	str	r0, [r7, #4]
 801c29c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801c29e:	4b12      	ldr	r3, [pc, #72]	@ (801c2e8 <CDC_Receive_FS+0x54>)
 801c2a0:	781b      	ldrb	r3, [r3, #0]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d013      	beq.n	801c2ce <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801c2a6:	683b      	ldr	r3, [r7, #0]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	b29a      	uxth	r2, r3
 801c2ac:	2301      	movs	r3, #1
 801c2ae:	425b      	negs	r3, r3
 801c2b0:	6879      	ldr	r1, [r7, #4]
 801c2b2:	480e      	ldr	r0, [pc, #56]	@ (801c2ec <CDC_Receive_FS+0x58>)
 801c2b4:	f7fa fa46 	bl	8016744 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c2b8:	687a      	ldr	r2, [r7, #4]
 801c2ba:	4b0d      	ldr	r3, [pc, #52]	@ (801c2f0 <CDC_Receive_FS+0x5c>)
 801c2bc:	0011      	movs	r1, r2
 801c2be:	0018      	movs	r0, r3
 801c2c0:	f7fe fcf5 	bl	801acae <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c2c4:	4b0a      	ldr	r3, [pc, #40]	@ (801c2f0 <CDC_Receive_FS+0x5c>)
 801c2c6:	0018      	movs	r0, r3
 801c2c8:	f7fe fd3c 	bl	801ad44 <USBD_CDC_ReceivePacket>
 801c2cc:	e006      	b.n	801c2dc <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	681a      	ldr	r2, [r3, #0]
 801c2d2:	4b08      	ldr	r3, [pc, #32]	@ (801c2f4 <CDC_Receive_FS+0x60>)
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	18d2      	adds	r2, r2, r3
 801c2d8:	4b06      	ldr	r3, [pc, #24]	@ (801c2f4 <CDC_Receive_FS+0x60>)
 801c2da:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801c2dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c2de:	0018      	movs	r0, r3
 801c2e0:	46bd      	mov	sp, r7
 801c2e2:	b002      	add	sp, #8
 801c2e4:	bd80      	pop	{r7, pc}
 801c2e6:	46c0      	nop			@ (mov r8, r8)
 801c2e8:	200027e0 	.word	0x200027e0
 801c2ec:	200027e4 	.word	0x200027e4
 801c2f0:	2000251c 	.word	0x2000251c
 801c2f4:	2000289c 	.word	0x2000289c

0801c2f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c2f8:	b5b0      	push	{r4, r5, r7, lr}
 801c2fa:	b084      	sub	sp, #16
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	6078      	str	r0, [r7, #4]
 801c300:	000a      	movs	r2, r1
 801c302:	1cbb      	adds	r3, r7, #2
 801c304:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c306:	230f      	movs	r3, #15
 801c308:	18fb      	adds	r3, r7, r3
 801c30a:	2200      	movs	r2, #0
 801c30c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c30e:	4a11      	ldr	r2, [pc, #68]	@ (801c354 <CDC_Transmit_FS+0x5c>)
 801c310:	23ae      	movs	r3, #174	@ 0xae
 801c312:	009b      	lsls	r3, r3, #2
 801c314:	58d3      	ldr	r3, [r2, r3]
 801c316:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c318:	68ba      	ldr	r2, [r7, #8]
 801c31a:	2385      	movs	r3, #133	@ 0x85
 801c31c:	009b      	lsls	r3, r3, #2
 801c31e:	58d3      	ldr	r3, [r2, r3]
 801c320:	2b00      	cmp	r3, #0
 801c322:	d001      	beq.n	801c328 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801c324:	2301      	movs	r3, #1
 801c326:	e010      	b.n	801c34a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c328:	1cbb      	adds	r3, r7, #2
 801c32a:	881a      	ldrh	r2, [r3, #0]
 801c32c:	6879      	ldr	r1, [r7, #4]
 801c32e:	4b09      	ldr	r3, [pc, #36]	@ (801c354 <CDC_Transmit_FS+0x5c>)
 801c330:	0018      	movs	r0, r3
 801c332:	f7fe fca0 	bl	801ac76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c336:	250f      	movs	r5, #15
 801c338:	197c      	adds	r4, r7, r5
 801c33a:	4b06      	ldr	r3, [pc, #24]	@ (801c354 <CDC_Transmit_FS+0x5c>)
 801c33c:	0018      	movs	r0, r3
 801c33e:	f7fe fcca 	bl	801acd6 <USBD_CDC_TransmitPacket>
 801c342:	0003      	movs	r3, r0
 801c344:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801c346:	197b      	adds	r3, r7, r5
 801c348:	781b      	ldrb	r3, [r3, #0]
}
 801c34a:	0018      	movs	r0, r3
 801c34c:	46bd      	mov	sp, r7
 801c34e:	b004      	add	sp, #16
 801c350:	bdb0      	pop	{r4, r5, r7, pc}
 801c352:	46c0      	nop			@ (mov r8, r8)
 801c354:	2000251c 	.word	0x2000251c

0801c358 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801c358:	b580      	push	{r7, lr}
 801c35a:	af00      	add	r7, sp, #0
  ESPProg = true;
 801c35c:	4b02      	ldr	r3, [pc, #8]	@ (801c368 <EnableESPProg+0x10>)
 801c35e:	2201      	movs	r2, #1
 801c360:	701a      	strb	r2, [r3, #0]
}
 801c362:	46c0      	nop			@ (mov r8, r8)
 801c364:	46bd      	mov	sp, r7
 801c366:	bd80      	pop	{r7, pc}
 801c368:	200027e0 	.word	0x200027e0

0801c36c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801c370:	4b01      	ldr	r3, [pc, #4]	@ (801c378 <GetUsbRxPointer+0xc>)
}
 801c372:	0018      	movs	r0, r3
 801c374:	46bd      	mov	sp, r7
 801c376:	bd80      	pop	{r7, pc}
 801c378:	200028a0 	.word	0x200028a0

0801c37c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801c380:	4b07      	ldr	r3, [pc, #28]	@ (801c3a0 <ResetUsbRxDataSize+0x24>)
 801c382:	2200      	movs	r2, #0
 801c384:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801c386:	4a07      	ldr	r2, [pc, #28]	@ (801c3a4 <ResetUsbRxDataSize+0x28>)
 801c388:	4b07      	ldr	r3, [pc, #28]	@ (801c3a8 <ResetUsbRxDataSize+0x2c>)
 801c38a:	0011      	movs	r1, r2
 801c38c:	0018      	movs	r0, r3
 801c38e:	f7fe fc8e 	bl	801acae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c392:	4b05      	ldr	r3, [pc, #20]	@ (801c3a8 <ResetUsbRxDataSize+0x2c>)
 801c394:	0018      	movs	r0, r3
 801c396:	f7fe fcd5 	bl	801ad44 <USBD_CDC_ReceivePacket>
}
 801c39a:	46c0      	nop			@ (mov r8, r8)
 801c39c:	46bd      	mov	sp, r7
 801c39e:	bd80      	pop	{r7, pc}
 801c3a0:	2000289c 	.word	0x2000289c
 801c3a4:	200028a0 	.word	0x200028a0
 801c3a8:	2000251c 	.word	0x2000251c

0801c3ac <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801c3ac:	b580      	push	{r7, lr}
 801c3ae:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801c3b0:	4b02      	ldr	r3, [pc, #8]	@ (801c3bc <GetUsbRxDataSize+0x10>)
 801c3b2:	681b      	ldr	r3, [r3, #0]
}
 801c3b4:	0018      	movs	r0, r3
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	bd80      	pop	{r7, pc}
 801c3ba:	46c0      	nop			@ (mov r8, r8)
 801c3bc:	2000289c 	.word	0x2000289c

0801c3c0 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b082      	sub	sp, #8
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801c3c8:	687a      	ldr	r2, [r7, #4]
 801c3ca:	4b07      	ldr	r3, [pc, #28]	@ (801c3e8 <GetUsbRxNextChunk+0x28>)
 801c3cc:	18d2      	adds	r2, r2, r3
 801c3ce:	4b07      	ldr	r3, [pc, #28]	@ (801c3ec <GetUsbRxNextChunk+0x2c>)
 801c3d0:	0011      	movs	r1, r2
 801c3d2:	0018      	movs	r0, r3
 801c3d4:	f7fe fc6b 	bl	801acae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c3d8:	4b04      	ldr	r3, [pc, #16]	@ (801c3ec <GetUsbRxNextChunk+0x2c>)
 801c3da:	0018      	movs	r0, r3
 801c3dc:	f7fe fcb2 	bl	801ad44 <USBD_CDC_ReceivePacket>
}
 801c3e0:	46c0      	nop			@ (mov r8, r8)
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	b002      	add	sp, #8
 801c3e6:	bd80      	pop	{r7, pc}
 801c3e8:	200028a0 	.word	0x200028a0
 801c3ec:	2000251c 	.word	0x2000251c

0801c3f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c3f0:	b580      	push	{r7, lr}
 801c3f2:	b082      	sub	sp, #8
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	0002      	movs	r2, r0
 801c3f8:	6039      	str	r1, [r7, #0]
 801c3fa:	1dfb      	adds	r3, r7, #7
 801c3fc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c3fe:	683b      	ldr	r3, [r7, #0]
 801c400:	2212      	movs	r2, #18
 801c402:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c404:	4b02      	ldr	r3, [pc, #8]	@ (801c410 <USBD_FS_DeviceDescriptor+0x20>)
}
 801c406:	0018      	movs	r0, r3
 801c408:	46bd      	mov	sp, r7
 801c40a:	b002      	add	sp, #8
 801c40c:	bd80      	pop	{r7, pc}
 801c40e:	46c0      	nop			@ (mov r8, r8)
 801c410:	2000021c 	.word	0x2000021c

0801c414 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b082      	sub	sp, #8
 801c418:	af00      	add	r7, sp, #0
 801c41a:	0002      	movs	r2, r0
 801c41c:	6039      	str	r1, [r7, #0]
 801c41e:	1dfb      	adds	r3, r7, #7
 801c420:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c422:	683b      	ldr	r3, [r7, #0]
 801c424:	2204      	movs	r2, #4
 801c426:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c428:	4b02      	ldr	r3, [pc, #8]	@ (801c434 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c42a:	0018      	movs	r0, r3
 801c42c:	46bd      	mov	sp, r7
 801c42e:	b002      	add	sp, #8
 801c430:	bd80      	pop	{r7, pc}
 801c432:	46c0      	nop			@ (mov r8, r8)
 801c434:	20000230 	.word	0x20000230

0801c438 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c438:	b580      	push	{r7, lr}
 801c43a:	b082      	sub	sp, #8
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	0002      	movs	r2, r0
 801c440:	6039      	str	r1, [r7, #0]
 801c442:	1dfb      	adds	r3, r7, #7
 801c444:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c446:	1dfb      	adds	r3, r7, #7
 801c448:	781b      	ldrb	r3, [r3, #0]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d106      	bne.n	801c45c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c44e:	683a      	ldr	r2, [r7, #0]
 801c450:	4908      	ldr	r1, [pc, #32]	@ (801c474 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c452:	4b09      	ldr	r3, [pc, #36]	@ (801c478 <USBD_FS_ProductStrDescriptor+0x40>)
 801c454:	0018      	movs	r0, r3
 801c456:	f7ff fdb1 	bl	801bfbc <USBD_GetString>
 801c45a:	e005      	b.n	801c468 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c45c:	683a      	ldr	r2, [r7, #0]
 801c45e:	4905      	ldr	r1, [pc, #20]	@ (801c474 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c460:	4b05      	ldr	r3, [pc, #20]	@ (801c478 <USBD_FS_ProductStrDescriptor+0x40>)
 801c462:	0018      	movs	r0, r3
 801c464:	f7ff fdaa 	bl	801bfbc <USBD_GetString>
  }
  return USBD_StrDesc;
 801c468:	4b02      	ldr	r3, [pc, #8]	@ (801c474 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801c46a:	0018      	movs	r0, r3
 801c46c:	46bd      	mov	sp, r7
 801c46e:	b002      	add	sp, #8
 801c470:	bd80      	pop	{r7, pc}
 801c472:	46c0      	nop			@ (mov r8, r8)
 801c474:	200030a0 	.word	0x200030a0
 801c478:	0802443c 	.word	0x0802443c

0801c47c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c47c:	b580      	push	{r7, lr}
 801c47e:	b082      	sub	sp, #8
 801c480:	af00      	add	r7, sp, #0
 801c482:	0002      	movs	r2, r0
 801c484:	6039      	str	r1, [r7, #0]
 801c486:	1dfb      	adds	r3, r7, #7
 801c488:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c48a:	683a      	ldr	r2, [r7, #0]
 801c48c:	4904      	ldr	r1, [pc, #16]	@ (801c4a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c48e:	4b05      	ldr	r3, [pc, #20]	@ (801c4a4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c490:	0018      	movs	r0, r3
 801c492:	f7ff fd93 	bl	801bfbc <USBD_GetString>
  return USBD_StrDesc;
 801c496:	4b02      	ldr	r3, [pc, #8]	@ (801c4a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c498:	0018      	movs	r0, r3
 801c49a:	46bd      	mov	sp, r7
 801c49c:	b002      	add	sp, #8
 801c49e:	bd80      	pop	{r7, pc}
 801c4a0:	200030a0 	.word	0x200030a0
 801c4a4:	08024454 	.word	0x08024454

0801c4a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b082      	sub	sp, #8
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	0002      	movs	r2, r0
 801c4b0:	6039      	str	r1, [r7, #0]
 801c4b2:	1dfb      	adds	r3, r7, #7
 801c4b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	221a      	movs	r2, #26
 801c4ba:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c4bc:	f000 f84c 	bl	801c558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c4c0:	4b02      	ldr	r3, [pc, #8]	@ (801c4cc <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c4c2:	0018      	movs	r0, r3
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	b002      	add	sp, #8
 801c4c8:	bd80      	pop	{r7, pc}
 801c4ca:	46c0      	nop			@ (mov r8, r8)
 801c4cc:	20000234 	.word	0x20000234

0801c4d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b082      	sub	sp, #8
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	0002      	movs	r2, r0
 801c4d8:	6039      	str	r1, [r7, #0]
 801c4da:	1dfb      	adds	r3, r7, #7
 801c4dc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c4de:	1dfb      	adds	r3, r7, #7
 801c4e0:	781b      	ldrb	r3, [r3, #0]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d106      	bne.n	801c4f4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c4e6:	683a      	ldr	r2, [r7, #0]
 801c4e8:	4908      	ldr	r1, [pc, #32]	@ (801c50c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c4ea:	4b09      	ldr	r3, [pc, #36]	@ (801c510 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c4ec:	0018      	movs	r0, r3
 801c4ee:	f7ff fd65 	bl	801bfbc <USBD_GetString>
 801c4f2:	e005      	b.n	801c500 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c4f4:	683a      	ldr	r2, [r7, #0]
 801c4f6:	4905      	ldr	r1, [pc, #20]	@ (801c50c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c4f8:	4b05      	ldr	r3, [pc, #20]	@ (801c510 <USBD_FS_ConfigStrDescriptor+0x40>)
 801c4fa:	0018      	movs	r0, r3
 801c4fc:	f7ff fd5e 	bl	801bfbc <USBD_GetString>
  }
  return USBD_StrDesc;
 801c500:	4b02      	ldr	r3, [pc, #8]	@ (801c50c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c502:	0018      	movs	r0, r3
 801c504:	46bd      	mov	sp, r7
 801c506:	b002      	add	sp, #8
 801c508:	bd80      	pop	{r7, pc}
 801c50a:	46c0      	nop			@ (mov r8, r8)
 801c50c:	200030a0 	.word	0x200030a0
 801c510:	08024468 	.word	0x08024468

0801c514 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b082      	sub	sp, #8
 801c518:	af00      	add	r7, sp, #0
 801c51a:	0002      	movs	r2, r0
 801c51c:	6039      	str	r1, [r7, #0]
 801c51e:	1dfb      	adds	r3, r7, #7
 801c520:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c522:	1dfb      	adds	r3, r7, #7
 801c524:	781b      	ldrb	r3, [r3, #0]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d106      	bne.n	801c538 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c52a:	683a      	ldr	r2, [r7, #0]
 801c52c:	4908      	ldr	r1, [pc, #32]	@ (801c550 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c52e:	4b09      	ldr	r3, [pc, #36]	@ (801c554 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c530:	0018      	movs	r0, r3
 801c532:	f7ff fd43 	bl	801bfbc <USBD_GetString>
 801c536:	e005      	b.n	801c544 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c538:	683a      	ldr	r2, [r7, #0]
 801c53a:	4905      	ldr	r1, [pc, #20]	@ (801c550 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c53c:	4b05      	ldr	r3, [pc, #20]	@ (801c554 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c53e:	0018      	movs	r0, r3
 801c540:	f7ff fd3c 	bl	801bfbc <USBD_GetString>
  }
  return USBD_StrDesc;
 801c544:	4b02      	ldr	r3, [pc, #8]	@ (801c550 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c546:	0018      	movs	r0, r3
 801c548:	46bd      	mov	sp, r7
 801c54a:	b002      	add	sp, #8
 801c54c:	bd80      	pop	{r7, pc}
 801c54e:	46c0      	nop			@ (mov r8, r8)
 801c550:	200030a0 	.word	0x200030a0
 801c554:	08024474 	.word	0x08024474

0801c558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c558:	b580      	push	{r7, lr}
 801c55a:	b084      	sub	sp, #16
 801c55c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c55e:	4b10      	ldr	r3, [pc, #64]	@ (801c5a0 <Get_SerialNum+0x48>)
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c564:	4b0f      	ldr	r3, [pc, #60]	@ (801c5a4 <Get_SerialNum+0x4c>)
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c56a:	4b0f      	ldr	r3, [pc, #60]	@ (801c5a8 <Get_SerialNum+0x50>)
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c570:	68fa      	ldr	r2, [r7, #12]
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	18d3      	adds	r3, r2, r3
 801c576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d00b      	beq.n	801c596 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c57e:	490b      	ldr	r1, [pc, #44]	@ (801c5ac <Get_SerialNum+0x54>)
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	2208      	movs	r2, #8
 801c584:	0018      	movs	r0, r3
 801c586:	f000 f815 	bl	801c5b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c58a:	4909      	ldr	r1, [pc, #36]	@ (801c5b0 <Get_SerialNum+0x58>)
 801c58c:	68bb      	ldr	r3, [r7, #8]
 801c58e:	2204      	movs	r2, #4
 801c590:	0018      	movs	r0, r3
 801c592:	f000 f80f 	bl	801c5b4 <IntToUnicode>
  }
}
 801c596:	46c0      	nop			@ (mov r8, r8)
 801c598:	46bd      	mov	sp, r7
 801c59a:	b004      	add	sp, #16
 801c59c:	bd80      	pop	{r7, pc}
 801c59e:	46c0      	nop			@ (mov r8, r8)
 801c5a0:	1ff80050 	.word	0x1ff80050
 801c5a4:	1ff80054 	.word	0x1ff80054
 801c5a8:	1ff80058 	.word	0x1ff80058
 801c5ac:	20000236 	.word	0x20000236
 801c5b0:	20000246 	.word	0x20000246

0801c5b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c5b4:	b580      	push	{r7, lr}
 801c5b6:	b086      	sub	sp, #24
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	60f8      	str	r0, [r7, #12]
 801c5bc:	60b9      	str	r1, [r7, #8]
 801c5be:	1dfb      	adds	r3, r7, #7
 801c5c0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c5c2:	2117      	movs	r1, #23
 801c5c4:	187b      	adds	r3, r7, r1
 801c5c6:	2200      	movs	r2, #0
 801c5c8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c5ca:	187b      	adds	r3, r7, r1
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	701a      	strb	r2, [r3, #0]
 801c5d0:	e02f      	b.n	801c632 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	0f1b      	lsrs	r3, r3, #28
 801c5d6:	2b09      	cmp	r3, #9
 801c5d8:	d80d      	bhi.n	801c5f6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	0f1b      	lsrs	r3, r3, #28
 801c5de:	b2da      	uxtb	r2, r3
 801c5e0:	2317      	movs	r3, #23
 801c5e2:	18fb      	adds	r3, r7, r3
 801c5e4:	781b      	ldrb	r3, [r3, #0]
 801c5e6:	005b      	lsls	r3, r3, #1
 801c5e8:	0019      	movs	r1, r3
 801c5ea:	68bb      	ldr	r3, [r7, #8]
 801c5ec:	185b      	adds	r3, r3, r1
 801c5ee:	3230      	adds	r2, #48	@ 0x30
 801c5f0:	b2d2      	uxtb	r2, r2
 801c5f2:	701a      	strb	r2, [r3, #0]
 801c5f4:	e00c      	b.n	801c610 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	0f1b      	lsrs	r3, r3, #28
 801c5fa:	b2da      	uxtb	r2, r3
 801c5fc:	2317      	movs	r3, #23
 801c5fe:	18fb      	adds	r3, r7, r3
 801c600:	781b      	ldrb	r3, [r3, #0]
 801c602:	005b      	lsls	r3, r3, #1
 801c604:	0019      	movs	r1, r3
 801c606:	68bb      	ldr	r3, [r7, #8]
 801c608:	185b      	adds	r3, r3, r1
 801c60a:	3237      	adds	r2, #55	@ 0x37
 801c60c:	b2d2      	uxtb	r2, r2
 801c60e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	011b      	lsls	r3, r3, #4
 801c614:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c616:	2117      	movs	r1, #23
 801c618:	187b      	adds	r3, r7, r1
 801c61a:	781b      	ldrb	r3, [r3, #0]
 801c61c:	005b      	lsls	r3, r3, #1
 801c61e:	3301      	adds	r3, #1
 801c620:	68ba      	ldr	r2, [r7, #8]
 801c622:	18d3      	adds	r3, r2, r3
 801c624:	2200      	movs	r2, #0
 801c626:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c628:	187b      	adds	r3, r7, r1
 801c62a:	781a      	ldrb	r2, [r3, #0]
 801c62c:	187b      	adds	r3, r7, r1
 801c62e:	3201      	adds	r2, #1
 801c630:	701a      	strb	r2, [r3, #0]
 801c632:	2317      	movs	r3, #23
 801c634:	18fa      	adds	r2, r7, r3
 801c636:	1dfb      	adds	r3, r7, #7
 801c638:	7812      	ldrb	r2, [r2, #0]
 801c63a:	781b      	ldrb	r3, [r3, #0]
 801c63c:	429a      	cmp	r2, r3
 801c63e:	d3c8      	bcc.n	801c5d2 <IntToUnicode+0x1e>
  }
}
 801c640:	46c0      	nop			@ (mov r8, r8)
 801c642:	46c0      	nop			@ (mov r8, r8)
 801c644:	46bd      	mov	sp, r7
 801c646:	b006      	add	sp, #24
 801c648:	bd80      	pop	{r7, pc}
	...

0801c64c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b082      	sub	sp, #8
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	4a0a      	ldr	r2, [pc, #40]	@ (801c684 <HAL_PCD_MspInit+0x38>)
 801c65a:	4293      	cmp	r3, r2
 801c65c:	d10e      	bne.n	801c67c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801c65e:	4b0a      	ldr	r3, [pc, #40]	@ (801c688 <HAL_PCD_MspInit+0x3c>)
 801c660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c662:	4b09      	ldr	r3, [pc, #36]	@ (801c688 <HAL_PCD_MspInit+0x3c>)
 801c664:	2180      	movs	r1, #128	@ 0x80
 801c666:	0409      	lsls	r1, r1, #16
 801c668:	430a      	orrs	r2, r1
 801c66a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801c66c:	2200      	movs	r2, #0
 801c66e:	2100      	movs	r1, #0
 801c670:	201f      	movs	r0, #31
 801c672:	f7f2 fae3 	bl	800ec3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801c676:	201f      	movs	r0, #31
 801c678:	f7f2 faf5 	bl	800ec66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801c67c:	46c0      	nop			@ (mov r8, r8)
 801c67e:	46bd      	mov	sp, r7
 801c680:	b002      	add	sp, #8
 801c682:	bd80      	pop	{r7, pc}
 801c684:	40005c00 	.word	0x40005c00
 801c688:	40021000 	.word	0x40021000

0801c68c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c68c:	b580      	push	{r7, lr}
 801c68e:	b082      	sub	sp, #8
 801c690:	af00      	add	r7, sp, #0
 801c692:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c694:	687a      	ldr	r2, [r7, #4]
 801c696:	23bc      	movs	r3, #188	@ 0xbc
 801c698:	009b      	lsls	r3, r3, #2
 801c69a:	58d2      	ldr	r2, [r2, r3]
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	21ac      	movs	r1, #172	@ 0xac
 801c6a0:	0089      	lsls	r1, r1, #2
 801c6a2:	468c      	mov	ip, r1
 801c6a4:	4463      	add	r3, ip
 801c6a6:	0019      	movs	r1, r3
 801c6a8:	0010      	movs	r0, r2
 801c6aa:	f7fe fc1d 	bl	801aee8 <USBD_LL_SetupStage>
}
 801c6ae:	46c0      	nop			@ (mov r8, r8)
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	b002      	add	sp, #8
 801c6b4:	bd80      	pop	{r7, pc}

0801c6b6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c6b6:	b590      	push	{r4, r7, lr}
 801c6b8:	b083      	sub	sp, #12
 801c6ba:	af00      	add	r7, sp, #0
 801c6bc:	6078      	str	r0, [r7, #4]
 801c6be:	000a      	movs	r2, r1
 801c6c0:	1cfb      	adds	r3, r7, #3
 801c6c2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c6c4:	687a      	ldr	r2, [r7, #4]
 801c6c6:	23bc      	movs	r3, #188	@ 0xbc
 801c6c8:	009b      	lsls	r3, r3, #2
 801c6ca:	58d4      	ldr	r4, [r2, r3]
 801c6cc:	1cfb      	adds	r3, r7, #3
 801c6ce:	781a      	ldrb	r2, [r3, #0]
 801c6d0:	6878      	ldr	r0, [r7, #4]
 801c6d2:	23be      	movs	r3, #190	@ 0xbe
 801c6d4:	0059      	lsls	r1, r3, #1
 801c6d6:	0013      	movs	r3, r2
 801c6d8:	009b      	lsls	r3, r3, #2
 801c6da:	189b      	adds	r3, r3, r2
 801c6dc:	00db      	lsls	r3, r3, #3
 801c6de:	18c3      	adds	r3, r0, r3
 801c6e0:	185b      	adds	r3, r3, r1
 801c6e2:	681a      	ldr	r2, [r3, #0]
 801c6e4:	1cfb      	adds	r3, r7, #3
 801c6e6:	781b      	ldrb	r3, [r3, #0]
 801c6e8:	0019      	movs	r1, r3
 801c6ea:	0020      	movs	r0, r4
 801c6ec:	f7fe fc5a 	bl	801afa4 <USBD_LL_DataOutStage>
}
 801c6f0:	46c0      	nop			@ (mov r8, r8)
 801c6f2:	46bd      	mov	sp, r7
 801c6f4:	b003      	add	sp, #12
 801c6f6:	bd90      	pop	{r4, r7, pc}

0801c6f8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b082      	sub	sp, #8
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	6078      	str	r0, [r7, #4]
 801c700:	000a      	movs	r2, r1
 801c702:	1cfb      	adds	r3, r7, #3
 801c704:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c706:	687a      	ldr	r2, [r7, #4]
 801c708:	23bc      	movs	r3, #188	@ 0xbc
 801c70a:	009b      	lsls	r3, r3, #2
 801c70c:	58d0      	ldr	r0, [r2, r3]
 801c70e:	1cfb      	adds	r3, r7, #3
 801c710:	781a      	ldrb	r2, [r3, #0]
 801c712:	6879      	ldr	r1, [r7, #4]
 801c714:	0013      	movs	r3, r2
 801c716:	009b      	lsls	r3, r3, #2
 801c718:	189b      	adds	r3, r3, r2
 801c71a:	00db      	lsls	r3, r3, #3
 801c71c:	18cb      	adds	r3, r1, r3
 801c71e:	333c      	adds	r3, #60	@ 0x3c
 801c720:	681a      	ldr	r2, [r3, #0]
 801c722:	1cfb      	adds	r3, r7, #3
 801c724:	781b      	ldrb	r3, [r3, #0]
 801c726:	0019      	movs	r1, r3
 801c728:	f7fe fcbe 	bl	801b0a8 <USBD_LL_DataInStage>
}
 801c72c:	46c0      	nop			@ (mov r8, r8)
 801c72e:	46bd      	mov	sp, r7
 801c730:	b002      	add	sp, #8
 801c732:	bd80      	pop	{r7, pc}

0801c734 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b082      	sub	sp, #8
 801c738:	af00      	add	r7, sp, #0
 801c73a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c73c:	687a      	ldr	r2, [r7, #4]
 801c73e:	23bc      	movs	r3, #188	@ 0xbc
 801c740:	009b      	lsls	r3, r3, #2
 801c742:	58d3      	ldr	r3, [r2, r3]
 801c744:	0018      	movs	r0, r3
 801c746:	f7fe fdf5 	bl	801b334 <USBD_LL_SOF>
}
 801c74a:	46c0      	nop			@ (mov r8, r8)
 801c74c:	46bd      	mov	sp, r7
 801c74e:	b002      	add	sp, #8
 801c750:	bd80      	pop	{r7, pc}

0801c752 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c752:	b580      	push	{r7, lr}
 801c754:	b084      	sub	sp, #16
 801c756:	af00      	add	r7, sp, #0
 801c758:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c75a:	230f      	movs	r3, #15
 801c75c:	18fb      	adds	r3, r7, r3
 801c75e:	2201      	movs	r2, #1
 801c760:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	689b      	ldr	r3, [r3, #8]
 801c766:	2b02      	cmp	r3, #2
 801c768:	d001      	beq.n	801c76e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801c76a:	f7eb fe97 	bl	800849c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c76e:	687a      	ldr	r2, [r7, #4]
 801c770:	23bc      	movs	r3, #188	@ 0xbc
 801c772:	009b      	lsls	r3, r3, #2
 801c774:	58d2      	ldr	r2, [r2, r3]
 801c776:	230f      	movs	r3, #15
 801c778:	18fb      	adds	r3, r7, r3
 801c77a:	781b      	ldrb	r3, [r3, #0]
 801c77c:	0019      	movs	r1, r3
 801c77e:	0010      	movs	r0, r2
 801c780:	f7fe fd97 	bl	801b2b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c784:	687a      	ldr	r2, [r7, #4]
 801c786:	23bc      	movs	r3, #188	@ 0xbc
 801c788:	009b      	lsls	r3, r3, #2
 801c78a:	58d3      	ldr	r3, [r2, r3]
 801c78c:	0018      	movs	r0, r3
 801c78e:	f7fe fd48 	bl	801b222 <USBD_LL_Reset>
}
 801c792:	46c0      	nop			@ (mov r8, r8)
 801c794:	46bd      	mov	sp, r7
 801c796:	b004      	add	sp, #16
 801c798:	bd80      	pop	{r7, pc}
	...

0801c79c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b082      	sub	sp, #8
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c7a4:	687a      	ldr	r2, [r7, #4]
 801c7a6:	23bc      	movs	r3, #188	@ 0xbc
 801c7a8:	009b      	lsls	r3, r3, #2
 801c7aa:	58d3      	ldr	r3, [r2, r3]
 801c7ac:	0018      	movs	r0, r3
 801c7ae:	f7fe fd91 	bl	801b2d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	699b      	ldr	r3, [r3, #24]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d005      	beq.n	801c7c6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c7ba:	4b05      	ldr	r3, [pc, #20]	@ (801c7d0 <HAL_PCD_SuspendCallback+0x34>)
 801c7bc:	691a      	ldr	r2, [r3, #16]
 801c7be:	4b04      	ldr	r3, [pc, #16]	@ (801c7d0 <HAL_PCD_SuspendCallback+0x34>)
 801c7c0:	2106      	movs	r1, #6
 801c7c2:	430a      	orrs	r2, r1
 801c7c4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801c7c6:	46c0      	nop			@ (mov r8, r8)
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	b002      	add	sp, #8
 801c7cc:	bd80      	pop	{r7, pc}
 801c7ce:	46c0      	nop			@ (mov r8, r8)
 801c7d0:	e000ed00 	.word	0xe000ed00

0801c7d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c7d4:	b580      	push	{r7, lr}
 801c7d6:	b082      	sub	sp, #8
 801c7d8:	af00      	add	r7, sp, #0
 801c7da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	699b      	ldr	r3, [r3, #24]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d007      	beq.n	801c7f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c7e4:	4b09      	ldr	r3, [pc, #36]	@ (801c80c <HAL_PCD_ResumeCallback+0x38>)
 801c7e6:	691a      	ldr	r2, [r3, #16]
 801c7e8:	4b08      	ldr	r3, [pc, #32]	@ (801c80c <HAL_PCD_ResumeCallback+0x38>)
 801c7ea:	2106      	movs	r1, #6
 801c7ec:	438a      	bics	r2, r1
 801c7ee:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801c7f0:	f000 fa44 	bl	801cc7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c7f4:	687a      	ldr	r2, [r7, #4]
 801c7f6:	23bc      	movs	r3, #188	@ 0xbc
 801c7f8:	009b      	lsls	r3, r3, #2
 801c7fa:	58d3      	ldr	r3, [r2, r3]
 801c7fc:	0018      	movs	r0, r3
 801c7fe:	f7fe fd81 	bl	801b304 <USBD_LL_Resume>
}
 801c802:	46c0      	nop			@ (mov r8, r8)
 801c804:	46bd      	mov	sp, r7
 801c806:	b002      	add	sp, #8
 801c808:	bd80      	pop	{r7, pc}
 801c80a:	46c0      	nop			@ (mov r8, r8)
 801c80c:	e000ed00 	.word	0xe000ed00

0801c810 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c810:	b580      	push	{r7, lr}
 801c812:	b082      	sub	sp, #8
 801c814:	af00      	add	r7, sp, #0
 801c816:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c818:	4a2d      	ldr	r2, [pc, #180]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c81a:	23bc      	movs	r3, #188	@ 0xbc
 801c81c:	009b      	lsls	r3, r3, #2
 801c81e:	6879      	ldr	r1, [r7, #4]
 801c820:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c822:	687a      	ldr	r2, [r7, #4]
 801c824:	23b0      	movs	r3, #176	@ 0xb0
 801c826:	009b      	lsls	r3, r3, #2
 801c828:	4929      	ldr	r1, [pc, #164]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c82a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c82c:	4b28      	ldr	r3, [pc, #160]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c82e:	4a29      	ldr	r2, [pc, #164]	@ (801c8d4 <USBD_LL_Init+0xc4>)
 801c830:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c832:	4b27      	ldr	r3, [pc, #156]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c834:	2208      	movs	r2, #8
 801c836:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c838:	4b25      	ldr	r3, [pc, #148]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c83a:	2202      	movs	r2, #2
 801c83c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c83e:	4b24      	ldr	r3, [pc, #144]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c840:	2202      	movs	r2, #2
 801c842:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c844:	4b22      	ldr	r3, [pc, #136]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c846:	2200      	movs	r2, #0
 801c848:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c84a:	4b21      	ldr	r3, [pc, #132]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c84c:	2200      	movs	r2, #0
 801c84e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c850:	4b1f      	ldr	r3, [pc, #124]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c852:	2200      	movs	r2, #0
 801c854:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c856:	4b1e      	ldr	r3, [pc, #120]	@ (801c8d0 <USBD_LL_Init+0xc0>)
 801c858:	0018      	movs	r0, r3
 801c85a:	f7f5 ff95 	bl	8012788 <HAL_PCD_Init>
 801c85e:	1e03      	subs	r3, r0, #0
 801c860:	d001      	beq.n	801c866 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c862:	f7eb fe1b 	bl	800849c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c866:	687a      	ldr	r2, [r7, #4]
 801c868:	23b0      	movs	r3, #176	@ 0xb0
 801c86a:	009b      	lsls	r3, r3, #2
 801c86c:	58d0      	ldr	r0, [r2, r3]
 801c86e:	2318      	movs	r3, #24
 801c870:	2200      	movs	r2, #0
 801c872:	2100      	movs	r1, #0
 801c874:	f7f7 fd56 	bl	8014324 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c878:	687a      	ldr	r2, [r7, #4]
 801c87a:	23b0      	movs	r3, #176	@ 0xb0
 801c87c:	009b      	lsls	r3, r3, #2
 801c87e:	58d0      	ldr	r0, [r2, r3]
 801c880:	2358      	movs	r3, #88	@ 0x58
 801c882:	2200      	movs	r2, #0
 801c884:	2180      	movs	r1, #128	@ 0x80
 801c886:	f7f7 fd4d 	bl	8014324 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c88a:	687a      	ldr	r2, [r7, #4]
 801c88c:	23b0      	movs	r3, #176	@ 0xb0
 801c88e:	009b      	lsls	r3, r3, #2
 801c890:	58d0      	ldr	r0, [r2, r3]
 801c892:	23c0      	movs	r3, #192	@ 0xc0
 801c894:	2200      	movs	r2, #0
 801c896:	2181      	movs	r1, #129	@ 0x81
 801c898:	f7f7 fd44 	bl	8014324 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c89c:	687a      	ldr	r2, [r7, #4]
 801c89e:	23b0      	movs	r3, #176	@ 0xb0
 801c8a0:	009b      	lsls	r3, r3, #2
 801c8a2:	58d0      	ldr	r0, [r2, r3]
 801c8a4:	2388      	movs	r3, #136	@ 0x88
 801c8a6:	005b      	lsls	r3, r3, #1
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	2101      	movs	r1, #1
 801c8ac:	f7f7 fd3a 	bl	8014324 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801c8b0:	687a      	ldr	r2, [r7, #4]
 801c8b2:	23b0      	movs	r3, #176	@ 0xb0
 801c8b4:	009b      	lsls	r3, r3, #2
 801c8b6:	58d0      	ldr	r0, [r2, r3]
 801c8b8:	2380      	movs	r3, #128	@ 0x80
 801c8ba:	005b      	lsls	r3, r3, #1
 801c8bc:	2200      	movs	r2, #0
 801c8be:	2182      	movs	r1, #130	@ 0x82
 801c8c0:	f7f7 fd30 	bl	8014324 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801c8c4:	2300      	movs	r3, #0
}
 801c8c6:	0018      	movs	r0, r3
 801c8c8:	46bd      	mov	sp, r7
 801c8ca:	b002      	add	sp, #8
 801c8cc:	bd80      	pop	{r7, pc}
 801c8ce:	46c0      	nop			@ (mov r8, r8)
 801c8d0:	200032a0 	.word	0x200032a0
 801c8d4:	40005c00 	.word	0x40005c00

0801c8d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8da:	b085      	sub	sp, #20
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8e0:	210f      	movs	r1, #15
 801c8e2:	187b      	adds	r3, r7, r1
 801c8e4:	2200      	movs	r2, #0
 801c8e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c8e8:	260e      	movs	r6, #14
 801c8ea:	19bb      	adds	r3, r7, r6
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c8f0:	687a      	ldr	r2, [r7, #4]
 801c8f2:	23b0      	movs	r3, #176	@ 0xb0
 801c8f4:	009b      	lsls	r3, r3, #2
 801c8f6:	58d3      	ldr	r3, [r2, r3]
 801c8f8:	000d      	movs	r5, r1
 801c8fa:	187c      	adds	r4, r7, r1
 801c8fc:	0018      	movs	r0, r3
 801c8fe:	f7f6 f843 	bl	8012988 <HAL_PCD_Start>
 801c902:	0003      	movs	r3, r0
 801c904:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c906:	19bc      	adds	r4, r7, r6
 801c908:	197b      	adds	r3, r7, r5
 801c90a:	781b      	ldrb	r3, [r3, #0]
 801c90c:	0018      	movs	r0, r3
 801c90e:	f000 f9bc 	bl	801cc8a <USBD_Get_USB_Status>
 801c912:	0003      	movs	r3, r0
 801c914:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c916:	19bb      	adds	r3, r7, r6
 801c918:	781b      	ldrb	r3, [r3, #0]
}
 801c91a:	0018      	movs	r0, r3
 801c91c:	46bd      	mov	sp, r7
 801c91e:	b005      	add	sp, #20
 801c920:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c922 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c922:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c924:	b085      	sub	sp, #20
 801c926:	af00      	add	r7, sp, #0
 801c928:	6078      	str	r0, [r7, #4]
 801c92a:	000c      	movs	r4, r1
 801c92c:	0010      	movs	r0, r2
 801c92e:	0019      	movs	r1, r3
 801c930:	1cfb      	adds	r3, r7, #3
 801c932:	1c22      	adds	r2, r4, #0
 801c934:	701a      	strb	r2, [r3, #0]
 801c936:	1cbb      	adds	r3, r7, #2
 801c938:	1c02      	adds	r2, r0, #0
 801c93a:	701a      	strb	r2, [r3, #0]
 801c93c:	003b      	movs	r3, r7
 801c93e:	1c0a      	adds	r2, r1, #0
 801c940:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c942:	260f      	movs	r6, #15
 801c944:	19bb      	adds	r3, r7, r6
 801c946:	2200      	movs	r2, #0
 801c948:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c94a:	250e      	movs	r5, #14
 801c94c:	197b      	adds	r3, r7, r5
 801c94e:	2200      	movs	r2, #0
 801c950:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	23b0      	movs	r3, #176	@ 0xb0
 801c956:	009b      	lsls	r3, r3, #2
 801c958:	58d0      	ldr	r0, [r2, r3]
 801c95a:	19bc      	adds	r4, r7, r6
 801c95c:	1cbb      	adds	r3, r7, #2
 801c95e:	781d      	ldrb	r5, [r3, #0]
 801c960:	003b      	movs	r3, r7
 801c962:	881a      	ldrh	r2, [r3, #0]
 801c964:	1cfb      	adds	r3, r7, #3
 801c966:	7819      	ldrb	r1, [r3, #0]
 801c968:	002b      	movs	r3, r5
 801c96a:	f7f6 f9a2 	bl	8012cb2 <HAL_PCD_EP_Open>
 801c96e:	0003      	movs	r3, r0
 801c970:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c972:	250e      	movs	r5, #14
 801c974:	197c      	adds	r4, r7, r5
 801c976:	19bb      	adds	r3, r7, r6
 801c978:	781b      	ldrb	r3, [r3, #0]
 801c97a:	0018      	movs	r0, r3
 801c97c:	f000 f985 	bl	801cc8a <USBD_Get_USB_Status>
 801c980:	0003      	movs	r3, r0
 801c982:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c984:	197b      	adds	r3, r7, r5
 801c986:	781b      	ldrb	r3, [r3, #0]
}
 801c988:	0018      	movs	r0, r3
 801c98a:	46bd      	mov	sp, r7
 801c98c:	b005      	add	sp, #20
 801c98e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c990 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c990:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c992:	b085      	sub	sp, #20
 801c994:	af00      	add	r7, sp, #0
 801c996:	6078      	str	r0, [r7, #4]
 801c998:	000a      	movs	r2, r1
 801c99a:	1cfb      	adds	r3, r7, #3
 801c99c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c99e:	210f      	movs	r1, #15
 801c9a0:	187b      	adds	r3, r7, r1
 801c9a2:	2200      	movs	r2, #0
 801c9a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c9a6:	260e      	movs	r6, #14
 801c9a8:	19bb      	adds	r3, r7, r6
 801c9aa:	2200      	movs	r2, #0
 801c9ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c9ae:	687a      	ldr	r2, [r7, #4]
 801c9b0:	23b0      	movs	r3, #176	@ 0xb0
 801c9b2:	009b      	lsls	r3, r3, #2
 801c9b4:	58d2      	ldr	r2, [r2, r3]
 801c9b6:	000d      	movs	r5, r1
 801c9b8:	187c      	adds	r4, r7, r1
 801c9ba:	1cfb      	adds	r3, r7, #3
 801c9bc:	781b      	ldrb	r3, [r3, #0]
 801c9be:	0019      	movs	r1, r3
 801c9c0:	0010      	movs	r0, r2
 801c9c2:	f7f6 f9e5 	bl	8012d90 <HAL_PCD_EP_Close>
 801c9c6:	0003      	movs	r3, r0
 801c9c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c9ca:	19bc      	adds	r4, r7, r6
 801c9cc:	197b      	adds	r3, r7, r5
 801c9ce:	781b      	ldrb	r3, [r3, #0]
 801c9d0:	0018      	movs	r0, r3
 801c9d2:	f000 f95a 	bl	801cc8a <USBD_Get_USB_Status>
 801c9d6:	0003      	movs	r3, r0
 801c9d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c9da:	19bb      	adds	r3, r7, r6
 801c9dc:	781b      	ldrb	r3, [r3, #0]
}
 801c9de:	0018      	movs	r0, r3
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	b005      	add	sp, #20
 801c9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c9e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c9e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9e8:	b085      	sub	sp, #20
 801c9ea:	af00      	add	r7, sp, #0
 801c9ec:	6078      	str	r0, [r7, #4]
 801c9ee:	000a      	movs	r2, r1
 801c9f0:	1cfb      	adds	r3, r7, #3
 801c9f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c9f4:	210f      	movs	r1, #15
 801c9f6:	187b      	adds	r3, r7, r1
 801c9f8:	2200      	movs	r2, #0
 801c9fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c9fc:	260e      	movs	r6, #14
 801c9fe:	19bb      	adds	r3, r7, r6
 801ca00:	2200      	movs	r2, #0
 801ca02:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ca04:	687a      	ldr	r2, [r7, #4]
 801ca06:	23b0      	movs	r3, #176	@ 0xb0
 801ca08:	009b      	lsls	r3, r3, #2
 801ca0a:	58d2      	ldr	r2, [r2, r3]
 801ca0c:	000d      	movs	r5, r1
 801ca0e:	187c      	adds	r4, r7, r1
 801ca10:	1cfb      	adds	r3, r7, #3
 801ca12:	781b      	ldrb	r3, [r3, #0]
 801ca14:	0019      	movs	r1, r3
 801ca16:	0010      	movs	r0, r2
 801ca18:	f7f6 fa97 	bl	8012f4a <HAL_PCD_EP_SetStall>
 801ca1c:	0003      	movs	r3, r0
 801ca1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca20:	19bc      	adds	r4, r7, r6
 801ca22:	197b      	adds	r3, r7, r5
 801ca24:	781b      	ldrb	r3, [r3, #0]
 801ca26:	0018      	movs	r0, r3
 801ca28:	f000 f92f 	bl	801cc8a <USBD_Get_USB_Status>
 801ca2c:	0003      	movs	r3, r0
 801ca2e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ca30:	19bb      	adds	r3, r7, r6
 801ca32:	781b      	ldrb	r3, [r3, #0]
}
 801ca34:	0018      	movs	r0, r3
 801ca36:	46bd      	mov	sp, r7
 801ca38:	b005      	add	sp, #20
 801ca3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca3e:	b085      	sub	sp, #20
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
 801ca44:	000a      	movs	r2, r1
 801ca46:	1cfb      	adds	r3, r7, #3
 801ca48:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ca4a:	210f      	movs	r1, #15
 801ca4c:	187b      	adds	r3, r7, r1
 801ca4e:	2200      	movs	r2, #0
 801ca50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca52:	260e      	movs	r6, #14
 801ca54:	19bb      	adds	r3, r7, r6
 801ca56:	2200      	movs	r2, #0
 801ca58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ca5a:	687a      	ldr	r2, [r7, #4]
 801ca5c:	23b0      	movs	r3, #176	@ 0xb0
 801ca5e:	009b      	lsls	r3, r3, #2
 801ca60:	58d2      	ldr	r2, [r2, r3]
 801ca62:	000d      	movs	r5, r1
 801ca64:	187c      	adds	r4, r7, r1
 801ca66:	1cfb      	adds	r3, r7, #3
 801ca68:	781b      	ldrb	r3, [r3, #0]
 801ca6a:	0019      	movs	r1, r3
 801ca6c:	0010      	movs	r0, r2
 801ca6e:	f7f6 fac8 	bl	8013002 <HAL_PCD_EP_ClrStall>
 801ca72:	0003      	movs	r3, r0
 801ca74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ca76:	19bc      	adds	r4, r7, r6
 801ca78:	197b      	adds	r3, r7, r5
 801ca7a:	781b      	ldrb	r3, [r3, #0]
 801ca7c:	0018      	movs	r0, r3
 801ca7e:	f000 f904 	bl	801cc8a <USBD_Get_USB_Status>
 801ca82:	0003      	movs	r3, r0
 801ca84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ca86:	19bb      	adds	r3, r7, r6
 801ca88:	781b      	ldrb	r3, [r3, #0]
}
 801ca8a:	0018      	movs	r0, r3
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	b005      	add	sp, #20
 801ca90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca92 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ca92:	b580      	push	{r7, lr}
 801ca94:	b084      	sub	sp, #16
 801ca96:	af00      	add	r7, sp, #0
 801ca98:	6078      	str	r0, [r7, #4]
 801ca9a:	000a      	movs	r2, r1
 801ca9c:	1cfb      	adds	r3, r7, #3
 801ca9e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801caa0:	687a      	ldr	r2, [r7, #4]
 801caa2:	23b0      	movs	r3, #176	@ 0xb0
 801caa4:	009b      	lsls	r3, r3, #2
 801caa6:	58d3      	ldr	r3, [r2, r3]
 801caa8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801caaa:	1cfb      	adds	r3, r7, #3
 801caac:	781b      	ldrb	r3, [r3, #0]
 801caae:	b25b      	sxtb	r3, r3
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	da0d      	bge.n	801cad0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801cab4:	1cfb      	adds	r3, r7, #3
 801cab6:	781b      	ldrb	r3, [r3, #0]
 801cab8:	227f      	movs	r2, #127	@ 0x7f
 801caba:	4013      	ands	r3, r2
 801cabc:	68f9      	ldr	r1, [r7, #12]
 801cabe:	1c5a      	adds	r2, r3, #1
 801cac0:	0013      	movs	r3, r2
 801cac2:	009b      	lsls	r3, r3, #2
 801cac4:	189b      	adds	r3, r3, r2
 801cac6:	00db      	lsls	r3, r3, #3
 801cac8:	18cb      	adds	r3, r1, r3
 801caca:	3302      	adds	r3, #2
 801cacc:	781b      	ldrb	r3, [r3, #0]
 801cace:	e00d      	b.n	801caec <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801cad0:	1cfb      	adds	r3, r7, #3
 801cad2:	781b      	ldrb	r3, [r3, #0]
 801cad4:	227f      	movs	r2, #127	@ 0x7f
 801cad6:	401a      	ands	r2, r3
 801cad8:	68f8      	ldr	r0, [r7, #12]
 801cada:	23b5      	movs	r3, #181	@ 0xb5
 801cadc:	0059      	lsls	r1, r3, #1
 801cade:	0013      	movs	r3, r2
 801cae0:	009b      	lsls	r3, r3, #2
 801cae2:	189b      	adds	r3, r3, r2
 801cae4:	00db      	lsls	r3, r3, #3
 801cae6:	18c3      	adds	r3, r0, r3
 801cae8:	185b      	adds	r3, r3, r1
 801caea:	781b      	ldrb	r3, [r3, #0]
  }
}
 801caec:	0018      	movs	r0, r3
 801caee:	46bd      	mov	sp, r7
 801caf0:	b004      	add	sp, #16
 801caf2:	bd80      	pop	{r7, pc}

0801caf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801caf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801caf6:	b085      	sub	sp, #20
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
 801cafc:	000a      	movs	r2, r1
 801cafe:	1cfb      	adds	r3, r7, #3
 801cb00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb02:	210f      	movs	r1, #15
 801cb04:	187b      	adds	r3, r7, r1
 801cb06:	2200      	movs	r2, #0
 801cb08:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb0a:	260e      	movs	r6, #14
 801cb0c:	19bb      	adds	r3, r7, r6
 801cb0e:	2200      	movs	r2, #0
 801cb10:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801cb12:	687a      	ldr	r2, [r7, #4]
 801cb14:	23b0      	movs	r3, #176	@ 0xb0
 801cb16:	009b      	lsls	r3, r3, #2
 801cb18:	58d2      	ldr	r2, [r2, r3]
 801cb1a:	000d      	movs	r5, r1
 801cb1c:	187c      	adds	r4, r7, r1
 801cb1e:	1cfb      	adds	r3, r7, #3
 801cb20:	781b      	ldrb	r3, [r3, #0]
 801cb22:	0019      	movs	r1, r3
 801cb24:	0010      	movs	r0, r2
 801cb26:	f7f6 f899 	bl	8012c5c <HAL_PCD_SetAddress>
 801cb2a:	0003      	movs	r3, r0
 801cb2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb2e:	19bc      	adds	r4, r7, r6
 801cb30:	197b      	adds	r3, r7, r5
 801cb32:	781b      	ldrb	r3, [r3, #0]
 801cb34:	0018      	movs	r0, r3
 801cb36:	f000 f8a8 	bl	801cc8a <USBD_Get_USB_Status>
 801cb3a:	0003      	movs	r3, r0
 801cb3c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cb3e:	19bb      	adds	r3, r7, r6
 801cb40:	781b      	ldrb	r3, [r3, #0]
}
 801cb42:	0018      	movs	r0, r3
 801cb44:	46bd      	mov	sp, r7
 801cb46:	b005      	add	sp, #20
 801cb48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cb4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cb4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb4c:	b087      	sub	sp, #28
 801cb4e:	af00      	add	r7, sp, #0
 801cb50:	60f8      	str	r0, [r7, #12]
 801cb52:	0008      	movs	r0, r1
 801cb54:	607a      	str	r2, [r7, #4]
 801cb56:	0019      	movs	r1, r3
 801cb58:	230b      	movs	r3, #11
 801cb5a:	18fb      	adds	r3, r7, r3
 801cb5c:	1c02      	adds	r2, r0, #0
 801cb5e:	701a      	strb	r2, [r3, #0]
 801cb60:	2408      	movs	r4, #8
 801cb62:	193b      	adds	r3, r7, r4
 801cb64:	1c0a      	adds	r2, r1, #0
 801cb66:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cb68:	2117      	movs	r1, #23
 801cb6a:	187b      	adds	r3, r7, r1
 801cb6c:	2200      	movs	r2, #0
 801cb6e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cb70:	2516      	movs	r5, #22
 801cb72:	197b      	adds	r3, r7, r5
 801cb74:	2200      	movs	r2, #0
 801cb76:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801cb78:	68fa      	ldr	r2, [r7, #12]
 801cb7a:	23b0      	movs	r3, #176	@ 0xb0
 801cb7c:	009b      	lsls	r3, r3, #2
 801cb7e:	58d0      	ldr	r0, [r2, r3]
 801cb80:	193b      	adds	r3, r7, r4
 801cb82:	881d      	ldrh	r5, [r3, #0]
 801cb84:	000e      	movs	r6, r1
 801cb86:	187c      	adds	r4, r7, r1
 801cb88:	687a      	ldr	r2, [r7, #4]
 801cb8a:	230b      	movs	r3, #11
 801cb8c:	18fb      	adds	r3, r7, r3
 801cb8e:	7819      	ldrb	r1, [r3, #0]
 801cb90:	002b      	movs	r3, r5
 801cb92:	f7f6 f99e 	bl	8012ed2 <HAL_PCD_EP_Transmit>
 801cb96:	0003      	movs	r3, r0
 801cb98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cb9a:	2516      	movs	r5, #22
 801cb9c:	197c      	adds	r4, r7, r5
 801cb9e:	19bb      	adds	r3, r7, r6
 801cba0:	781b      	ldrb	r3, [r3, #0]
 801cba2:	0018      	movs	r0, r3
 801cba4:	f000 f871 	bl	801cc8a <USBD_Get_USB_Status>
 801cba8:	0003      	movs	r3, r0
 801cbaa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cbac:	197b      	adds	r3, r7, r5
 801cbae:	781b      	ldrb	r3, [r3, #0]
}
 801cbb0:	0018      	movs	r0, r3
 801cbb2:	46bd      	mov	sp, r7
 801cbb4:	b007      	add	sp, #28
 801cbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cbb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbba:	b087      	sub	sp, #28
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	60f8      	str	r0, [r7, #12]
 801cbc0:	0008      	movs	r0, r1
 801cbc2:	607a      	str	r2, [r7, #4]
 801cbc4:	0019      	movs	r1, r3
 801cbc6:	230b      	movs	r3, #11
 801cbc8:	18fb      	adds	r3, r7, r3
 801cbca:	1c02      	adds	r2, r0, #0
 801cbcc:	701a      	strb	r2, [r3, #0]
 801cbce:	2408      	movs	r4, #8
 801cbd0:	193b      	adds	r3, r7, r4
 801cbd2:	1c0a      	adds	r2, r1, #0
 801cbd4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801cbd6:	2117      	movs	r1, #23
 801cbd8:	187b      	adds	r3, r7, r1
 801cbda:	2200      	movs	r2, #0
 801cbdc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cbde:	2516      	movs	r5, #22
 801cbe0:	197b      	adds	r3, r7, r5
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801cbe6:	68fa      	ldr	r2, [r7, #12]
 801cbe8:	23b0      	movs	r3, #176	@ 0xb0
 801cbea:	009b      	lsls	r3, r3, #2
 801cbec:	58d0      	ldr	r0, [r2, r3]
 801cbee:	193b      	adds	r3, r7, r4
 801cbf0:	881d      	ldrh	r5, [r3, #0]
 801cbf2:	000e      	movs	r6, r1
 801cbf4:	187c      	adds	r4, r7, r1
 801cbf6:	687a      	ldr	r2, [r7, #4]
 801cbf8:	230b      	movs	r3, #11
 801cbfa:	18fb      	adds	r3, r7, r3
 801cbfc:	7819      	ldrb	r1, [r3, #0]
 801cbfe:	002b      	movs	r3, r5
 801cc00:	f7f6 f917 	bl	8012e32 <HAL_PCD_EP_Receive>
 801cc04:	0003      	movs	r3, r0
 801cc06:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801cc08:	2516      	movs	r5, #22
 801cc0a:	197c      	adds	r4, r7, r5
 801cc0c:	19bb      	adds	r3, r7, r6
 801cc0e:	781b      	ldrb	r3, [r3, #0]
 801cc10:	0018      	movs	r0, r3
 801cc12:	f000 f83a 	bl	801cc8a <USBD_Get_USB_Status>
 801cc16:	0003      	movs	r3, r0
 801cc18:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801cc1a:	197b      	adds	r3, r7, r5
 801cc1c:	781b      	ldrb	r3, [r3, #0]
}
 801cc1e:	0018      	movs	r0, r3
 801cc20:	46bd      	mov	sp, r7
 801cc22:	b007      	add	sp, #28
 801cc24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cc26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801cc26:	b580      	push	{r7, lr}
 801cc28:	b082      	sub	sp, #8
 801cc2a:	af00      	add	r7, sp, #0
 801cc2c:	6078      	str	r0, [r7, #4]
 801cc2e:	000a      	movs	r2, r1
 801cc30:	1cfb      	adds	r3, r7, #3
 801cc32:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801cc34:	687a      	ldr	r2, [r7, #4]
 801cc36:	23b0      	movs	r3, #176	@ 0xb0
 801cc38:	009b      	lsls	r3, r3, #2
 801cc3a:	58d2      	ldr	r2, [r2, r3]
 801cc3c:	1cfb      	adds	r3, r7, #3
 801cc3e:	781b      	ldrb	r3, [r3, #0]
 801cc40:	0019      	movs	r1, r3
 801cc42:	0010      	movs	r0, r2
 801cc44:	f7f6 f92c 	bl	8012ea0 <HAL_PCD_EP_GetRxCount>
 801cc48:	0003      	movs	r3, r0
}
 801cc4a:	0018      	movs	r0, r3
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	b002      	add	sp, #8
 801cc50:	bd80      	pop	{r7, pc}
	...

0801cc54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801cc5c:	4b02      	ldr	r3, [pc, #8]	@ (801cc68 <USBD_static_malloc+0x14>)
}
 801cc5e:	0018      	movs	r0, r3
 801cc60:	46bd      	mov	sp, r7
 801cc62:	b002      	add	sp, #8
 801cc64:	bd80      	pop	{r7, pc}
 801cc66:	46c0      	nop			@ (mov r8, r8)
 801cc68:	20003594 	.word	0x20003594

0801cc6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b082      	sub	sp, #8
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]

}
 801cc74:	46c0      	nop			@ (mov r8, r8)
 801cc76:	46bd      	mov	sp, r7
 801cc78:	b002      	add	sp, #8
 801cc7a:	bd80      	pop	{r7, pc}

0801cc7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801cc7c:	b580      	push	{r7, lr}
 801cc7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801cc80:	f7eb fac2 	bl	8008208 <SystemClock_Config>
}
 801cc84:	46c0      	nop			@ (mov r8, r8)
 801cc86:	46bd      	mov	sp, r7
 801cc88:	bd80      	pop	{r7, pc}

0801cc8a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801cc8a:	b580      	push	{r7, lr}
 801cc8c:	b084      	sub	sp, #16
 801cc8e:	af00      	add	r7, sp, #0
 801cc90:	0002      	movs	r2, r0
 801cc92:	1dfb      	adds	r3, r7, #7
 801cc94:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801cc96:	230f      	movs	r3, #15
 801cc98:	18fb      	adds	r3, r7, r3
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801cc9e:	1dfb      	adds	r3, r7, #7
 801cca0:	781b      	ldrb	r3, [r3, #0]
 801cca2:	2b03      	cmp	r3, #3
 801cca4:	d017      	beq.n	801ccd6 <USBD_Get_USB_Status+0x4c>
 801cca6:	dc1b      	bgt.n	801cce0 <USBD_Get_USB_Status+0x56>
 801cca8:	2b02      	cmp	r3, #2
 801ccaa:	d00f      	beq.n	801cccc <USBD_Get_USB_Status+0x42>
 801ccac:	dc18      	bgt.n	801cce0 <USBD_Get_USB_Status+0x56>
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d002      	beq.n	801ccb8 <USBD_Get_USB_Status+0x2e>
 801ccb2:	2b01      	cmp	r3, #1
 801ccb4:	d005      	beq.n	801ccc2 <USBD_Get_USB_Status+0x38>
 801ccb6:	e013      	b.n	801cce0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ccb8:	230f      	movs	r3, #15
 801ccba:	18fb      	adds	r3, r7, r3
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	701a      	strb	r2, [r3, #0]
    break;
 801ccc0:	e013      	b.n	801ccea <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ccc2:	230f      	movs	r3, #15
 801ccc4:	18fb      	adds	r3, r7, r3
 801ccc6:	2202      	movs	r2, #2
 801ccc8:	701a      	strb	r2, [r3, #0]
    break;
 801ccca:	e00e      	b.n	801ccea <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801cccc:	230f      	movs	r3, #15
 801ccce:	18fb      	adds	r3, r7, r3
 801ccd0:	2201      	movs	r2, #1
 801ccd2:	701a      	strb	r2, [r3, #0]
    break;
 801ccd4:	e009      	b.n	801ccea <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ccd6:	230f      	movs	r3, #15
 801ccd8:	18fb      	adds	r3, r7, r3
 801ccda:	2202      	movs	r2, #2
 801ccdc:	701a      	strb	r2, [r3, #0]
    break;
 801ccde:	e004      	b.n	801ccea <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801cce0:	230f      	movs	r3, #15
 801cce2:	18fb      	adds	r3, r7, r3
 801cce4:	2202      	movs	r2, #2
 801cce6:	701a      	strb	r2, [r3, #0]
    break;
 801cce8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801ccea:	230f      	movs	r3, #15
 801ccec:	18fb      	adds	r3, r7, r3
 801ccee:	781b      	ldrb	r3, [r3, #0]
}
 801ccf0:	0018      	movs	r0, r3
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	b004      	add	sp, #16
 801ccf6:	bd80      	pop	{r7, pc}

0801ccf8 <arm_cfft_radix4by2_q31>:
 801ccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccfa:	465f      	mov	r7, fp
 801ccfc:	4656      	mov	r6, sl
 801ccfe:	464d      	mov	r5, r9
 801cd00:	4644      	mov	r4, r8
 801cd02:	000b      	movs	r3, r1
 801cd04:	b4f0      	push	{r4, r5, r6, r7}
 801cd06:	085b      	lsrs	r3, r3, #1
 801cd08:	b08f      	sub	sp, #60	@ 0x3c
 801cd0a:	910a      	str	r1, [sp, #40]	@ 0x28
 801cd0c:	0007      	movs	r7, r0
 801cd0e:	9009      	str	r0, [sp, #36]	@ 0x24
 801cd10:	0011      	movs	r1, r2
 801cd12:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cd14:	930c      	str	r3, [sp, #48]	@ 0x30
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d100      	bne.n	801cd1c <arm_cfft_radix4by2_q31+0x24>
 801cd1a:	e0a0      	b.n	801ce5e <arm_cfft_radix4by2_q31+0x166>
 801cd1c:	0002      	movs	r2, r0
 801cd1e:	00db      	lsls	r3, r3, #3
 801cd20:	3204      	adds	r2, #4
 801cd22:	4691      	mov	r9, r2
 801cd24:	4698      	mov	r8, r3
 801cd26:	000a      	movs	r2, r1
 801cd28:	464e      	mov	r6, r9
 801cd2a:	4442      	add	r2, r8
 801cd2c:	4699      	mov	r9, r3
 801cd2e:	4688      	mov	r8, r1
 801cd30:	9208      	str	r2, [sp, #32]
 801cd32:	900d      	str	r0, [sp, #52]	@ 0x34
 801cd34:	4643      	mov	r3, r8
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	469b      	mov	fp, r3
 801cd3a:	4643      	mov	r3, r8
 801cd3c:	685b      	ldr	r3, [r3, #4]
 801cd3e:	469a      	mov	sl, r3
 801cd40:	683b      	ldr	r3, [r7, #0]
 801cd42:	109c      	asrs	r4, r3, #2
 801cd44:	464b      	mov	r3, r9
 801cd46:	58fb      	ldr	r3, [r7, r3]
 801cd48:	109a      	asrs	r2, r3, #2
 801cd4a:	18a3      	adds	r3, r4, r2
 801cd4c:	603b      	str	r3, [r7, #0]
 801cd4e:	6833      	ldr	r3, [r6, #0]
 801cd50:	1aa4      	subs	r4, r4, r2
 801cd52:	109d      	asrs	r5, r3, #2
 801cd54:	464b      	mov	r3, r9
 801cd56:	58f3      	ldr	r3, [r6, r3]
 801cd58:	17e2      	asrs	r2, r4, #31
 801cd5a:	109b      	asrs	r3, r3, #2
 801cd5c:	18e9      	adds	r1, r5, r3
 801cd5e:	6031      	str	r1, [r6, #0]
 801cd60:	0011      	movs	r1, r2
 801cd62:	465a      	mov	r2, fp
 801cd64:	17d2      	asrs	r2, r2, #31
 801cd66:	0010      	movs	r0, r2
 801cd68:	4652      	mov	r2, sl
 801cd6a:	1aed      	subs	r5, r5, r3
 801cd6c:	17eb      	asrs	r3, r5, #31
 801cd6e:	17d2      	asrs	r2, r2, #31
 801cd70:	9307      	str	r3, [sp, #28]
 801cd72:	9204      	str	r2, [sp, #16]
 801cd74:	0003      	movs	r3, r0
 801cd76:	465a      	mov	r2, fp
 801cd78:	9006      	str	r0, [sp, #24]
 801cd7a:	0020      	movs	r0, r4
 801cd7c:	9105      	str	r1, [sp, #20]
 801cd7e:	f7e3 fc1f 	bl	80005c0 <__aeabi_lmul>
 801cd82:	2280      	movs	r2, #128	@ 0x80
 801cd84:	2300      	movs	r3, #0
 801cd86:	0612      	lsls	r2, r2, #24
 801cd88:	1880      	adds	r0, r0, r2
 801cd8a:	4159      	adcs	r1, r3
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	9101      	str	r1, [sp, #4]
 801cd90:	9300      	str	r3, [sp, #0]
 801cd92:	4652      	mov	r2, sl
 801cd94:	9b04      	ldr	r3, [sp, #16]
 801cd96:	0028      	movs	r0, r5
 801cd98:	17e9      	asrs	r1, r5, #31
 801cd9a:	f7e3 fc11 	bl	80005c0 <__aeabi_lmul>
 801cd9e:	9a00      	ldr	r2, [sp, #0]
 801cda0:	9b01      	ldr	r3, [sp, #4]
 801cda2:	1880      	adds	r0, r0, r2
 801cda4:	4159      	adcs	r1, r3
 801cda6:	2280      	movs	r2, #128	@ 0x80
 801cda8:	2300      	movs	r3, #0
 801cdaa:	0612      	lsls	r2, r2, #24
 801cdac:	1880      	adds	r0, r0, r2
 801cdae:	4159      	adcs	r1, r3
 801cdb0:	464a      	mov	r2, r9
 801cdb2:	004b      	lsls	r3, r1, #1
 801cdb4:	50bb      	str	r3, [r7, r2]
 801cdb6:	4658      	mov	r0, fp
 801cdb8:	002a      	movs	r2, r5
 801cdba:	9b07      	ldr	r3, [sp, #28]
 801cdbc:	9906      	ldr	r1, [sp, #24]
 801cdbe:	f7e3 fbff 	bl	80005c0 <__aeabi_lmul>
 801cdc2:	2280      	movs	r2, #128	@ 0x80
 801cdc4:	2300      	movs	r3, #0
 801cdc6:	0612      	lsls	r2, r2, #24
 801cdc8:	1880      	adds	r0, r0, r2
 801cdca:	4159      	adcs	r1, r3
 801cdcc:	2000      	movs	r0, #0
 801cdce:	9103      	str	r1, [sp, #12]
 801cdd0:	9002      	str	r0, [sp, #8]
 801cdd2:	4652      	mov	r2, sl
 801cdd4:	9b04      	ldr	r3, [sp, #16]
 801cdd6:	0020      	movs	r0, r4
 801cdd8:	9905      	ldr	r1, [sp, #20]
 801cdda:	f7e3 fbf1 	bl	80005c0 <__aeabi_lmul>
 801cdde:	9a02      	ldr	r2, [sp, #8]
 801cde0:	9b03      	ldr	r3, [sp, #12]
 801cde2:	1a12      	subs	r2, r2, r0
 801cde4:	418b      	sbcs	r3, r1
 801cde6:	2080      	movs	r0, #128	@ 0x80
 801cde8:	2100      	movs	r1, #0
 801cdea:	0600      	lsls	r0, r0, #24
 801cdec:	1812      	adds	r2, r2, r0
 801cdee:	414b      	adcs	r3, r1
 801cdf0:	464a      	mov	r2, r9
 801cdf2:	005b      	lsls	r3, r3, #1
 801cdf4:	50b3      	str	r3, [r6, r2]
 801cdf6:	2308      	movs	r3, #8
 801cdf8:	469c      	mov	ip, r3
 801cdfa:	9b08      	ldr	r3, [sp, #32]
 801cdfc:	44e0      	add	r8, ip
 801cdfe:	3708      	adds	r7, #8
 801ce00:	3608      	adds	r6, #8
 801ce02:	4598      	cmp	r8, r3
 801ce04:	d196      	bne.n	801cd34 <arm_cfft_radix4by2_q31+0x3c>
 801ce06:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ce08:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ce0a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ce0c:	2302      	movs	r3, #2
 801ce0e:	003a      	movs	r2, r7
 801ce10:	0029      	movs	r1, r5
 801ce12:	0020      	movs	r0, r4
 801ce14:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801ce16:	f000 f957 	bl	801d0c8 <arm_radix4_butterfly_q31>
 801ce1a:	46a4      	mov	ip, r4
 801ce1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ce1e:	2302      	movs	r3, #2
 801ce20:	0088      	lsls	r0, r1, #2
 801ce22:	4460      	add	r0, ip
 801ce24:	003a      	movs	r2, r7
 801ce26:	0029      	movs	r1, r5
 801ce28:	f000 f94e 	bl	801d0c8 <arm_radix4_butterfly_q31>
 801ce2c:	46a4      	mov	ip, r4
 801ce2e:	0128      	lsls	r0, r5, #4
 801ce30:	4460      	add	r0, ip
 801ce32:	6833      	ldr	r3, [r6, #0]
 801ce34:	005b      	lsls	r3, r3, #1
 801ce36:	6033      	str	r3, [r6, #0]
 801ce38:	6873      	ldr	r3, [r6, #4]
 801ce3a:	005b      	lsls	r3, r3, #1
 801ce3c:	6073      	str	r3, [r6, #4]
 801ce3e:	68b3      	ldr	r3, [r6, #8]
 801ce40:	005b      	lsls	r3, r3, #1
 801ce42:	60b3      	str	r3, [r6, #8]
 801ce44:	68f3      	ldr	r3, [r6, #12]
 801ce46:	005b      	lsls	r3, r3, #1
 801ce48:	60f3      	str	r3, [r6, #12]
 801ce4a:	3610      	adds	r6, #16
 801ce4c:	42b0      	cmp	r0, r6
 801ce4e:	d1f0      	bne.n	801ce32 <arm_cfft_radix4by2_q31+0x13a>
 801ce50:	b00f      	add	sp, #60	@ 0x3c
 801ce52:	bc3c      	pop	{r2, r3, r4, r5}
 801ce54:	4690      	mov	r8, r2
 801ce56:	4699      	mov	r9, r3
 801ce58:	46a2      	mov	sl, r4
 801ce5a:	46ab      	mov	fp, r5
 801ce5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce5e:	2302      	movs	r3, #2
 801ce60:	2100      	movs	r1, #0
 801ce62:	0015      	movs	r5, r2
 801ce64:	f000 f930 	bl	801d0c8 <arm_radix4_butterfly_q31>
 801ce68:	46bc      	mov	ip, r7
 801ce6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce6c:	002a      	movs	r2, r5
 801ce6e:	0098      	lsls	r0, r3, #2
 801ce70:	4460      	add	r0, ip
 801ce72:	2302      	movs	r3, #2
 801ce74:	2100      	movs	r1, #0
 801ce76:	f000 f927 	bl	801d0c8 <arm_radix4_butterfly_q31>
 801ce7a:	e7e9      	b.n	801ce50 <arm_cfft_radix4by2_q31+0x158>

0801ce7c <arm_cfft_radix4by2_inverse_q31>:
 801ce7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce7e:	465f      	mov	r7, fp
 801ce80:	4656      	mov	r6, sl
 801ce82:	464d      	mov	r5, r9
 801ce84:	4644      	mov	r4, r8
 801ce86:	000b      	movs	r3, r1
 801ce88:	b4f0      	push	{r4, r5, r6, r7}
 801ce8a:	085b      	lsrs	r3, r3, #1
 801ce8c:	b08f      	sub	sp, #60	@ 0x3c
 801ce8e:	910a      	str	r1, [sp, #40]	@ 0x28
 801ce90:	0007      	movs	r7, r0
 801ce92:	9009      	str	r0, [sp, #36]	@ 0x24
 801ce94:	0011      	movs	r1, r2
 801ce96:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ce98:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d100      	bne.n	801cea0 <arm_cfft_radix4by2_inverse_q31+0x24>
 801ce9e:	e0a0      	b.n	801cfe2 <arm_cfft_radix4by2_inverse_q31+0x166>
 801cea0:	0002      	movs	r2, r0
 801cea2:	00db      	lsls	r3, r3, #3
 801cea4:	3204      	adds	r2, #4
 801cea6:	4691      	mov	r9, r2
 801cea8:	4698      	mov	r8, r3
 801ceaa:	000a      	movs	r2, r1
 801ceac:	464e      	mov	r6, r9
 801ceae:	4442      	add	r2, r8
 801ceb0:	4699      	mov	r9, r3
 801ceb2:	4688      	mov	r8, r1
 801ceb4:	9208      	str	r2, [sp, #32]
 801ceb6:	900d      	str	r0, [sp, #52]	@ 0x34
 801ceb8:	4643      	mov	r3, r8
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	469b      	mov	fp, r3
 801cebe:	4643      	mov	r3, r8
 801cec0:	685b      	ldr	r3, [r3, #4]
 801cec2:	469a      	mov	sl, r3
 801cec4:	683b      	ldr	r3, [r7, #0]
 801cec6:	109c      	asrs	r4, r3, #2
 801cec8:	464b      	mov	r3, r9
 801ceca:	58fb      	ldr	r3, [r7, r3]
 801cecc:	109a      	asrs	r2, r3, #2
 801cece:	18a3      	adds	r3, r4, r2
 801ced0:	603b      	str	r3, [r7, #0]
 801ced2:	6833      	ldr	r3, [r6, #0]
 801ced4:	1aa4      	subs	r4, r4, r2
 801ced6:	109d      	asrs	r5, r3, #2
 801ced8:	464b      	mov	r3, r9
 801ceda:	58f3      	ldr	r3, [r6, r3]
 801cedc:	17e2      	asrs	r2, r4, #31
 801cede:	109b      	asrs	r3, r3, #2
 801cee0:	18e9      	adds	r1, r5, r3
 801cee2:	6031      	str	r1, [r6, #0]
 801cee4:	0011      	movs	r1, r2
 801cee6:	465a      	mov	r2, fp
 801cee8:	17d2      	asrs	r2, r2, #31
 801ceea:	0010      	movs	r0, r2
 801ceec:	4652      	mov	r2, sl
 801ceee:	1aed      	subs	r5, r5, r3
 801cef0:	17eb      	asrs	r3, r5, #31
 801cef2:	17d2      	asrs	r2, r2, #31
 801cef4:	9307      	str	r3, [sp, #28]
 801cef6:	9204      	str	r2, [sp, #16]
 801cef8:	0003      	movs	r3, r0
 801cefa:	465a      	mov	r2, fp
 801cefc:	9006      	str	r0, [sp, #24]
 801cefe:	0020      	movs	r0, r4
 801cf00:	9105      	str	r1, [sp, #20]
 801cf02:	f7e3 fb5d 	bl	80005c0 <__aeabi_lmul>
 801cf06:	2280      	movs	r2, #128	@ 0x80
 801cf08:	2300      	movs	r3, #0
 801cf0a:	0612      	lsls	r2, r2, #24
 801cf0c:	1880      	adds	r0, r0, r2
 801cf0e:	4159      	adcs	r1, r3
 801cf10:	2300      	movs	r3, #0
 801cf12:	9101      	str	r1, [sp, #4]
 801cf14:	9300      	str	r3, [sp, #0]
 801cf16:	4652      	mov	r2, sl
 801cf18:	9b04      	ldr	r3, [sp, #16]
 801cf1a:	0028      	movs	r0, r5
 801cf1c:	17e9      	asrs	r1, r5, #31
 801cf1e:	f7e3 fb4f 	bl	80005c0 <__aeabi_lmul>
 801cf22:	9a00      	ldr	r2, [sp, #0]
 801cf24:	9b01      	ldr	r3, [sp, #4]
 801cf26:	1a12      	subs	r2, r2, r0
 801cf28:	418b      	sbcs	r3, r1
 801cf2a:	2080      	movs	r0, #128	@ 0x80
 801cf2c:	2100      	movs	r1, #0
 801cf2e:	0600      	lsls	r0, r0, #24
 801cf30:	1812      	adds	r2, r2, r0
 801cf32:	414b      	adcs	r3, r1
 801cf34:	464a      	mov	r2, r9
 801cf36:	005b      	lsls	r3, r3, #1
 801cf38:	50bb      	str	r3, [r7, r2]
 801cf3a:	4658      	mov	r0, fp
 801cf3c:	002a      	movs	r2, r5
 801cf3e:	9b07      	ldr	r3, [sp, #28]
 801cf40:	9906      	ldr	r1, [sp, #24]
 801cf42:	f7e3 fb3d 	bl	80005c0 <__aeabi_lmul>
 801cf46:	2280      	movs	r2, #128	@ 0x80
 801cf48:	2300      	movs	r3, #0
 801cf4a:	0612      	lsls	r2, r2, #24
 801cf4c:	1880      	adds	r0, r0, r2
 801cf4e:	4159      	adcs	r1, r3
 801cf50:	2000      	movs	r0, #0
 801cf52:	9103      	str	r1, [sp, #12]
 801cf54:	9002      	str	r0, [sp, #8]
 801cf56:	4652      	mov	r2, sl
 801cf58:	9b04      	ldr	r3, [sp, #16]
 801cf5a:	0020      	movs	r0, r4
 801cf5c:	9905      	ldr	r1, [sp, #20]
 801cf5e:	f7e3 fb2f 	bl	80005c0 <__aeabi_lmul>
 801cf62:	9b02      	ldr	r3, [sp, #8]
 801cf64:	9c03      	ldr	r4, [sp, #12]
 801cf66:	18c0      	adds	r0, r0, r3
 801cf68:	4161      	adcs	r1, r4
 801cf6a:	2380      	movs	r3, #128	@ 0x80
 801cf6c:	2400      	movs	r4, #0
 801cf6e:	061b      	lsls	r3, r3, #24
 801cf70:	18c0      	adds	r0, r0, r3
 801cf72:	4161      	adcs	r1, r4
 801cf74:	464a      	mov	r2, r9
 801cf76:	004b      	lsls	r3, r1, #1
 801cf78:	50b3      	str	r3, [r6, r2]
 801cf7a:	2308      	movs	r3, #8
 801cf7c:	469c      	mov	ip, r3
 801cf7e:	9b08      	ldr	r3, [sp, #32]
 801cf80:	44e0      	add	r8, ip
 801cf82:	3708      	adds	r7, #8
 801cf84:	3608      	adds	r6, #8
 801cf86:	4598      	cmp	r8, r3
 801cf88:	d196      	bne.n	801ceb8 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801cf8a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cf8c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cf8e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cf90:	2302      	movs	r3, #2
 801cf92:	003a      	movs	r2, r7
 801cf94:	0029      	movs	r1, r5
 801cf96:	0020      	movs	r0, r4
 801cf98:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cf9a:	f000 fb3b 	bl	801d614 <arm_radix4_butterfly_inverse_q31>
 801cf9e:	46a4      	mov	ip, r4
 801cfa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cfa2:	2302      	movs	r3, #2
 801cfa4:	0088      	lsls	r0, r1, #2
 801cfa6:	4460      	add	r0, ip
 801cfa8:	003a      	movs	r2, r7
 801cfaa:	0029      	movs	r1, r5
 801cfac:	f000 fb32 	bl	801d614 <arm_radix4_butterfly_inverse_q31>
 801cfb0:	46a4      	mov	ip, r4
 801cfb2:	0128      	lsls	r0, r5, #4
 801cfb4:	4460      	add	r0, ip
 801cfb6:	6833      	ldr	r3, [r6, #0]
 801cfb8:	005b      	lsls	r3, r3, #1
 801cfba:	6033      	str	r3, [r6, #0]
 801cfbc:	6873      	ldr	r3, [r6, #4]
 801cfbe:	005b      	lsls	r3, r3, #1
 801cfc0:	6073      	str	r3, [r6, #4]
 801cfc2:	68b3      	ldr	r3, [r6, #8]
 801cfc4:	005b      	lsls	r3, r3, #1
 801cfc6:	60b3      	str	r3, [r6, #8]
 801cfc8:	68f3      	ldr	r3, [r6, #12]
 801cfca:	005b      	lsls	r3, r3, #1
 801cfcc:	60f3      	str	r3, [r6, #12]
 801cfce:	3610      	adds	r6, #16
 801cfd0:	42b0      	cmp	r0, r6
 801cfd2:	d1f0      	bne.n	801cfb6 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801cfd4:	b00f      	add	sp, #60	@ 0x3c
 801cfd6:	bc3c      	pop	{r2, r3, r4, r5}
 801cfd8:	4690      	mov	r8, r2
 801cfda:	4699      	mov	r9, r3
 801cfdc:	46a2      	mov	sl, r4
 801cfde:	46ab      	mov	fp, r5
 801cfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfe2:	2302      	movs	r3, #2
 801cfe4:	2100      	movs	r1, #0
 801cfe6:	0015      	movs	r5, r2
 801cfe8:	f000 fb14 	bl	801d614 <arm_radix4_butterfly_inverse_q31>
 801cfec:	46bc      	mov	ip, r7
 801cfee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cff0:	002a      	movs	r2, r5
 801cff2:	0098      	lsls	r0, r3, #2
 801cff4:	4460      	add	r0, ip
 801cff6:	2302      	movs	r3, #2
 801cff8:	2100      	movs	r1, #0
 801cffa:	f000 fb0b 	bl	801d614 <arm_radix4_butterfly_inverse_q31>
 801cffe:	e7e9      	b.n	801cfd4 <arm_cfft_radix4by2_inverse_q31+0x158>

0801d000 <arm_cfft_q31>:
 801d000:	b570      	push	{r4, r5, r6, lr}
 801d002:	001e      	movs	r6, r3
 801d004:	2380      	movs	r3, #128	@ 0x80
 801d006:	000d      	movs	r5, r1
 801d008:	0004      	movs	r4, r0
 801d00a:	8801      	ldrh	r1, [r0, #0]
 801d00c:	005b      	lsls	r3, r3, #1
 801d00e:	2a01      	cmp	r2, #1
 801d010:	d028      	beq.n	801d064 <arm_cfft_q31+0x64>
 801d012:	4299      	cmp	r1, r3
 801d014:	d020      	beq.n	801d058 <arm_cfft_q31+0x58>
 801d016:	d812      	bhi.n	801d03e <arm_cfft_q31+0x3e>
 801d018:	2920      	cmp	r1, #32
 801d01a:	d004      	beq.n	801d026 <arm_cfft_q31+0x26>
 801d01c:	d949      	bls.n	801d0b2 <arm_cfft_q31+0xb2>
 801d01e:	2940      	cmp	r1, #64	@ 0x40
 801d020:	d01a      	beq.n	801d058 <arm_cfft_q31+0x58>
 801d022:	2980      	cmp	r1, #128	@ 0x80
 801d024:	d103      	bne.n	801d02e <arm_cfft_q31+0x2e>
 801d026:	6862      	ldr	r2, [r4, #4]
 801d028:	0028      	movs	r0, r5
 801d02a:	f7ff fe65 	bl	801ccf8 <arm_cfft_radix4by2_q31>
 801d02e:	2e00      	cmp	r6, #0
 801d030:	d004      	beq.n	801d03c <arm_cfft_q31+0x3c>
 801d032:	68a2      	ldr	r2, [r4, #8]
 801d034:	89a1      	ldrh	r1, [r4, #12]
 801d036:	0028      	movs	r0, r5
 801d038:	f7e3 f866 	bl	8000108 <arm_bitreversal_32>
 801d03c:	bd70      	pop	{r4, r5, r6, pc}
 801d03e:	2380      	movs	r3, #128	@ 0x80
 801d040:	00db      	lsls	r3, r3, #3
 801d042:	4299      	cmp	r1, r3
 801d044:	d008      	beq.n	801d058 <arm_cfft_q31+0x58>
 801d046:	d92f      	bls.n	801d0a8 <arm_cfft_q31+0xa8>
 801d048:	2380      	movs	r3, #128	@ 0x80
 801d04a:	011b      	lsls	r3, r3, #4
 801d04c:	4299      	cmp	r1, r3
 801d04e:	d0ea      	beq.n	801d026 <arm_cfft_q31+0x26>
 801d050:	2380      	movs	r3, #128	@ 0x80
 801d052:	015b      	lsls	r3, r3, #5
 801d054:	4299      	cmp	r1, r3
 801d056:	d1ea      	bne.n	801d02e <arm_cfft_q31+0x2e>
 801d058:	2301      	movs	r3, #1
 801d05a:	6862      	ldr	r2, [r4, #4]
 801d05c:	0028      	movs	r0, r5
 801d05e:	f000 f833 	bl	801d0c8 <arm_radix4_butterfly_q31>
 801d062:	e7e4      	b.n	801d02e <arm_cfft_q31+0x2e>
 801d064:	4299      	cmp	r1, r3
 801d066:	d019      	beq.n	801d09c <arm_cfft_q31+0x9c>
 801d068:	d80b      	bhi.n	801d082 <arm_cfft_q31+0x82>
 801d06a:	2920      	cmp	r1, #32
 801d06c:	d004      	beq.n	801d078 <arm_cfft_q31+0x78>
 801d06e:	d928      	bls.n	801d0c2 <arm_cfft_q31+0xc2>
 801d070:	2940      	cmp	r1, #64	@ 0x40
 801d072:	d013      	beq.n	801d09c <arm_cfft_q31+0x9c>
 801d074:	2980      	cmp	r1, #128	@ 0x80
 801d076:	d1da      	bne.n	801d02e <arm_cfft_q31+0x2e>
 801d078:	6862      	ldr	r2, [r4, #4]
 801d07a:	0028      	movs	r0, r5
 801d07c:	f7ff fefe 	bl	801ce7c <arm_cfft_radix4by2_inverse_q31>
 801d080:	e7d5      	b.n	801d02e <arm_cfft_q31+0x2e>
 801d082:	2380      	movs	r3, #128	@ 0x80
 801d084:	00db      	lsls	r3, r3, #3
 801d086:	4299      	cmp	r1, r3
 801d088:	d008      	beq.n	801d09c <arm_cfft_q31+0x9c>
 801d08a:	d915      	bls.n	801d0b8 <arm_cfft_q31+0xb8>
 801d08c:	2380      	movs	r3, #128	@ 0x80
 801d08e:	011b      	lsls	r3, r3, #4
 801d090:	4299      	cmp	r1, r3
 801d092:	d0f1      	beq.n	801d078 <arm_cfft_q31+0x78>
 801d094:	2380      	movs	r3, #128	@ 0x80
 801d096:	015b      	lsls	r3, r3, #5
 801d098:	4299      	cmp	r1, r3
 801d09a:	d1c8      	bne.n	801d02e <arm_cfft_q31+0x2e>
 801d09c:	2301      	movs	r3, #1
 801d09e:	6862      	ldr	r2, [r4, #4]
 801d0a0:	0028      	movs	r0, r5
 801d0a2:	f000 fab7 	bl	801d614 <arm_radix4_butterfly_inverse_q31>
 801d0a6:	e7c2      	b.n	801d02e <arm_cfft_q31+0x2e>
 801d0a8:	2380      	movs	r3, #128	@ 0x80
 801d0aa:	009b      	lsls	r3, r3, #2
 801d0ac:	4299      	cmp	r1, r3
 801d0ae:	d0ba      	beq.n	801d026 <arm_cfft_q31+0x26>
 801d0b0:	e7bd      	b.n	801d02e <arm_cfft_q31+0x2e>
 801d0b2:	2910      	cmp	r1, #16
 801d0b4:	d1bb      	bne.n	801d02e <arm_cfft_q31+0x2e>
 801d0b6:	e7cf      	b.n	801d058 <arm_cfft_q31+0x58>
 801d0b8:	2380      	movs	r3, #128	@ 0x80
 801d0ba:	009b      	lsls	r3, r3, #2
 801d0bc:	4299      	cmp	r1, r3
 801d0be:	d0db      	beq.n	801d078 <arm_cfft_q31+0x78>
 801d0c0:	e7b5      	b.n	801d02e <arm_cfft_q31+0x2e>
 801d0c2:	2910      	cmp	r1, #16
 801d0c4:	d1b3      	bne.n	801d02e <arm_cfft_q31+0x2e>
 801d0c6:	e7e9      	b.n	801d09c <arm_cfft_q31+0x9c>

0801d0c8 <arm_radix4_butterfly_q31>:
 801d0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d0ca:	464d      	mov	r5, r9
 801d0cc:	4644      	mov	r4, r8
 801d0ce:	465f      	mov	r7, fp
 801d0d0:	4656      	mov	r6, sl
 801d0d2:	469c      	mov	ip, r3
 801d0d4:	b4f0      	push	{r4, r5, r6, r7}
 801d0d6:	b0a7      	sub	sp, #156	@ 0x9c
 801d0d8:	9114      	str	r1, [sp, #80]	@ 0x50
 801d0da:	0889      	lsrs	r1, r1, #2
 801d0dc:	9310      	str	r3, [sp, #64]	@ 0x40
 801d0de:	00cb      	lsls	r3, r1, #3
 801d0e0:	0015      	movs	r5, r2
 801d0e2:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d0e4:	18c2      	adds	r2, r0, r3
 801d0e6:	000c      	movs	r4, r1
 801d0e8:	469a      	mov	sl, r3
 801d0ea:	9124      	str	r1, [sp, #144]	@ 0x90
 801d0ec:	18d1      	adds	r1, r2, r3
 801d0ee:	4663      	mov	r3, ip
 801d0f0:	468b      	mov	fp, r1
 801d0f2:	0119      	lsls	r1, r3, #4
 801d0f4:	910d      	str	r1, [sp, #52]	@ 0x34
 801d0f6:	00d9      	lsls	r1, r3, #3
 801d0f8:	005b      	lsls	r3, r3, #1
 801d0fa:	4463      	add	r3, ip
 801d0fc:	910e      	str	r1, [sp, #56]	@ 0x38
 801d0fe:	00d9      	lsls	r1, r3, #3
 801d100:	465b      	mov	r3, fp
 801d102:	44da      	add	sl, fp
 801d104:	4690      	mov	r8, r2
 801d106:	4683      	mov	fp, r0
 801d108:	4699      	mov	r9, r3
 801d10a:	9022      	str	r0, [sp, #136]	@ 0x88
 801d10c:	9025      	str	r0, [sp, #148]	@ 0x94
 801d10e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d110:	9502      	str	r5, [sp, #8]
 801d112:	9500      	str	r5, [sp, #0]
 801d114:	9501      	str	r5, [sp, #4]
 801d116:	9407      	str	r4, [sp, #28]
 801d118:	465b      	mov	r3, fp
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	4642      	mov	r2, r8
 801d11e:	111c      	asrs	r4, r3, #4
 801d120:	464b      	mov	r3, r9
 801d122:	4658      	mov	r0, fp
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	6812      	ldr	r2, [r2, #0]
 801d128:	111b      	asrs	r3, r3, #4
 801d12a:	18e7      	adds	r7, r4, r3
 801d12c:	1ae3      	subs	r3, r4, r3
 801d12e:	1114      	asrs	r4, r2, #4
 801d130:	4652      	mov	r2, sl
 801d132:	6840      	ldr	r0, [r0, #4]
 801d134:	6812      	ldr	r2, [r2, #0]
 801d136:	1105      	asrs	r5, r0, #4
 801d138:	4648      	mov	r0, r9
 801d13a:	9303      	str	r3, [sp, #12]
 801d13c:	1113      	asrs	r3, r2, #4
 801d13e:	18e2      	adds	r2, r4, r3
 801d140:	465c      	mov	r4, fp
 801d142:	6840      	ldr	r0, [r0, #4]
 801d144:	1103      	asrs	r3, r0, #4
 801d146:	18ee      	adds	r6, r5, r3
 801d148:	1ae8      	subs	r0, r5, r3
 801d14a:	18bb      	adds	r3, r7, r2
 801d14c:	6023      	str	r3, [r4, #0]
 801d14e:	4644      	mov	r4, r8
 801d150:	6864      	ldr	r4, [r4, #4]
 801d152:	9004      	str	r0, [sp, #16]
 801d154:	1125      	asrs	r5, r4, #4
 801d156:	4654      	mov	r4, sl
 801d158:	6864      	ldr	r4, [r4, #4]
 801d15a:	1123      	asrs	r3, r4, #4
 801d15c:	465c      	mov	r4, fp
 801d15e:	18eb      	adds	r3, r5, r3
 801d160:	18f1      	adds	r1, r6, r3
 801d162:	6061      	str	r1, [r4, #4]
 801d164:	4655      	mov	r5, sl
 801d166:	4644      	mov	r4, r8
 801d168:	686d      	ldr	r5, [r5, #4]
 801d16a:	6864      	ldr	r4, [r4, #4]
 801d16c:	1129      	asrs	r1, r5, #4
 801d16e:	1124      	asrs	r4, r4, #4
 801d170:	1a64      	subs	r4, r4, r1
 801d172:	4641      	mov	r1, r8
 801d174:	6809      	ldr	r1, [r1, #0]
 801d176:	9405      	str	r4, [sp, #20]
 801d178:	1108      	asrs	r0, r1, #4
 801d17a:	4651      	mov	r1, sl
 801d17c:	6809      	ldr	r1, [r1, #0]
 801d17e:	1abc      	subs	r4, r7, r2
 801d180:	1109      	asrs	r1, r1, #4
 801d182:	1a41      	subs	r1, r0, r1
 801d184:	17e2      	asrs	r2, r4, #31
 801d186:	9106      	str	r1, [sp, #24]
 801d188:	0011      	movs	r1, r2
 801d18a:	9a01      	ldr	r2, [sp, #4]
 801d18c:	9108      	str	r1, [sp, #32]
 801d18e:	6817      	ldr	r7, [r2, #0]
 801d190:	17fd      	asrs	r5, r7, #31
 801d192:	0028      	movs	r0, r5
 801d194:	1af5      	subs	r5, r6, r3
 801d196:	17ee      	asrs	r6, r5, #31
 801d198:	960a      	str	r6, [sp, #40]	@ 0x28
 801d19a:	6856      	ldr	r6, [r2, #4]
 801d19c:	9009      	str	r0, [sp, #36]	@ 0x24
 801d19e:	17f3      	asrs	r3, r6, #31
 801d1a0:	003a      	movs	r2, r7
 801d1a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d1a4:	0003      	movs	r3, r0
 801d1a6:	0020      	movs	r0, r4
 801d1a8:	f7e3 fa0a 	bl	80005c0 <__aeabi_lmul>
 801d1ac:	0032      	movs	r2, r6
 801d1ae:	17f3      	asrs	r3, r6, #31
 801d1b0:	910c      	str	r1, [sp, #48]	@ 0x30
 801d1b2:	0028      	movs	r0, r5
 801d1b4:	17e9      	asrs	r1, r5, #31
 801d1b6:	f7e3 fa03 	bl	80005c0 <__aeabi_lmul>
 801d1ba:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d1bc:	002a      	movs	r2, r5
 801d1be:	4684      	mov	ip, r0
 801d1c0:	4640      	mov	r0, r8
 801d1c2:	4461      	add	r1, ip
 801d1c4:	0049      	lsls	r1, r1, #1
 801d1c6:	6001      	str	r1, [r0, #0]
 801d1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d1cc:	0038      	movs	r0, r7
 801d1ce:	f7e3 f9f7 	bl	80005c0 <__aeabi_lmul>
 801d1d2:	0032      	movs	r2, r6
 801d1d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d1d6:	000d      	movs	r5, r1
 801d1d8:	0020      	movs	r0, r4
 801d1da:	9908      	ldr	r1, [sp, #32]
 801d1dc:	f7e3 f9f0 	bl	80005c0 <__aeabi_lmul>
 801d1e0:	4646      	mov	r6, r8
 801d1e2:	1a6d      	subs	r5, r5, r1
 801d1e4:	006d      	lsls	r5, r5, #1
 801d1e6:	6075      	str	r5, [r6, #4]
 801d1e8:	9903      	ldr	r1, [sp, #12]
 801d1ea:	9d05      	ldr	r5, [sp, #20]
 801d1ec:	000c      	movs	r4, r1
 801d1ee:	46ac      	mov	ip, r5
 801d1f0:	4464      	add	r4, ip
 801d1f2:	17e6      	asrs	r6, r4, #31
 801d1f4:	0031      	movs	r1, r6
 801d1f6:	9b00      	ldr	r3, [sp, #0]
 801d1f8:	9804      	ldr	r0, [sp, #16]
 801d1fa:	681e      	ldr	r6, [r3, #0]
 801d1fc:	17f7      	asrs	r7, r6, #31
 801d1fe:	9709      	str	r7, [sp, #36]	@ 0x24
 801d200:	9f06      	ldr	r7, [sp, #24]
 801d202:	0032      	movs	r2, r6
 801d204:	1bc7      	subs	r7, r0, r7
 801d206:	17fd      	asrs	r5, r7, #31
 801d208:	950a      	str	r5, [sp, #40]	@ 0x28
 801d20a:	685d      	ldr	r5, [r3, #4]
 801d20c:	17f3      	asrs	r3, r6, #31
 801d20e:	17e8      	asrs	r0, r5, #31
 801d210:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d212:	0020      	movs	r0, r4
 801d214:	9108      	str	r1, [sp, #32]
 801d216:	f7e3 f9d3 	bl	80005c0 <__aeabi_lmul>
 801d21a:	002a      	movs	r2, r5
 801d21c:	17eb      	asrs	r3, r5, #31
 801d21e:	910c      	str	r1, [sp, #48]	@ 0x30
 801d220:	0038      	movs	r0, r7
 801d222:	17f9      	asrs	r1, r7, #31
 801d224:	f7e3 f9cc 	bl	80005c0 <__aeabi_lmul>
 801d228:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801d22a:	003a      	movs	r2, r7
 801d22c:	4684      	mov	ip, r0
 801d22e:	4648      	mov	r0, r9
 801d230:	4461      	add	r1, ip
 801d232:	0049      	lsls	r1, r1, #1
 801d234:	6001      	str	r1, [r0, #0]
 801d236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d238:	0030      	movs	r0, r6
 801d23a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d23c:	f7e3 f9c0 	bl	80005c0 <__aeabi_lmul>
 801d240:	002a      	movs	r2, r5
 801d242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d244:	000e      	movs	r6, r1
 801d246:	0020      	movs	r0, r4
 801d248:	9908      	ldr	r1, [sp, #32]
 801d24a:	f7e3 f9b9 	bl	80005c0 <__aeabi_lmul>
 801d24e:	464c      	mov	r4, r9
 801d250:	9d05      	ldr	r5, [sp, #20]
 801d252:	1a76      	subs	r6, r6, r1
 801d254:	9903      	ldr	r1, [sp, #12]
 801d256:	0076      	lsls	r6, r6, #1
 801d258:	6066      	str	r6, [r4, #4]
 801d25a:	1b4c      	subs	r4, r1, r5
 801d25c:	9e06      	ldr	r6, [sp, #24]
 801d25e:	17e1      	asrs	r1, r4, #31
 801d260:	9103      	str	r1, [sp, #12]
 801d262:	9902      	ldr	r1, [sp, #8]
 801d264:	46b4      	mov	ip, r6
 801d266:	680f      	ldr	r7, [r1, #0]
 801d268:	9804      	ldr	r0, [sp, #16]
 801d26a:	17fd      	asrs	r5, r7, #31
 801d26c:	002b      	movs	r3, r5
 801d26e:	684e      	ldr	r6, [r1, #4]
 801d270:	4460      	add	r0, ip
 801d272:	0005      	movs	r5, r0
 801d274:	17c0      	asrs	r0, r0, #31
 801d276:	9005      	str	r0, [sp, #20]
 801d278:	17f0      	asrs	r0, r6, #31
 801d27a:	9006      	str	r0, [sp, #24]
 801d27c:	003a      	movs	r2, r7
 801d27e:	0020      	movs	r0, r4
 801d280:	17e1      	asrs	r1, r4, #31
 801d282:	9304      	str	r3, [sp, #16]
 801d284:	f7e3 f99c 	bl	80005c0 <__aeabi_lmul>
 801d288:	0032      	movs	r2, r6
 801d28a:	9108      	str	r1, [sp, #32]
 801d28c:	17f3      	asrs	r3, r6, #31
 801d28e:	0028      	movs	r0, r5
 801d290:	17e9      	asrs	r1, r5, #31
 801d292:	f7e3 f995 	bl	80005c0 <__aeabi_lmul>
 801d296:	9808      	ldr	r0, [sp, #32]
 801d298:	002a      	movs	r2, r5
 801d29a:	4684      	mov	ip, r0
 801d29c:	4650      	mov	r0, sl
 801d29e:	4461      	add	r1, ip
 801d2a0:	0049      	lsls	r1, r1, #1
 801d2a2:	6001      	str	r1, [r0, #0]
 801d2a4:	9b05      	ldr	r3, [sp, #20]
 801d2a6:	9904      	ldr	r1, [sp, #16]
 801d2a8:	0038      	movs	r0, r7
 801d2aa:	f7e3 f989 	bl	80005c0 <__aeabi_lmul>
 801d2ae:	0020      	movs	r0, r4
 801d2b0:	2408      	movs	r4, #8
 801d2b2:	000d      	movs	r5, r1
 801d2b4:	0032      	movs	r2, r6
 801d2b6:	9b06      	ldr	r3, [sp, #24]
 801d2b8:	9903      	ldr	r1, [sp, #12]
 801d2ba:	f7e3 f981 	bl	80005c0 <__aeabi_lmul>
 801d2be:	46a4      	mov	ip, r4
 801d2c0:	4650      	mov	r0, sl
 801d2c2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d2c4:	44e3      	add	fp, ip
 801d2c6:	44e0      	add	r8, ip
 801d2c8:	44e1      	add	r9, ip
 801d2ca:	44e2      	add	sl, ip
 801d2cc:	46a4      	mov	ip, r4
 801d2ce:	1a6d      	subs	r5, r5, r1
 801d2d0:	006d      	lsls	r5, r5, #1
 801d2d2:	9a01      	ldr	r2, [sp, #4]
 801d2d4:	6045      	str	r5, [r0, #4]
 801d2d6:	9807      	ldr	r0, [sp, #28]
 801d2d8:	4462      	add	r2, ip
 801d2da:	3801      	subs	r0, #1
 801d2dc:	9201      	str	r2, [sp, #4]
 801d2de:	9007      	str	r0, [sp, #28]
 801d2e0:	9b00      	ldr	r3, [sp, #0]
 801d2e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d2e4:	9902      	ldr	r1, [sp, #8]
 801d2e6:	4694      	mov	ip, r2
 801d2e8:	4463      	add	r3, ip
 801d2ea:	9300      	str	r3, [sp, #0]
 801d2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2ee:	469c      	mov	ip, r3
 801d2f0:	4461      	add	r1, ip
 801d2f2:	9102      	str	r1, [sp, #8]
 801d2f4:	2800      	cmp	r0, #0
 801d2f6:	d000      	beq.n	801d2fa <arm_radix4_butterfly_q31+0x232>
 801d2f8:	e70e      	b.n	801d118 <arm_radix4_butterfly_q31+0x50>
 801d2fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2fc:	009b      	lsls	r3, r3, #2
 801d2fe:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d300:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d302:	9320      	str	r3, [sp, #128]	@ 0x80
 801d304:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d306:	2b04      	cmp	r3, #4
 801d308:	d800      	bhi.n	801d30c <arm_radix4_butterfly_q31+0x244>
 801d30a:	e180      	b.n	801d60e <arm_radix4_butterfly_q31+0x546>
 801d30c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d30e:	0893      	lsrs	r3, r2, #2
 801d310:	1e59      	subs	r1, r3, #1
 801d312:	9321      	str	r3, [sp, #132]	@ 0x84
 801d314:	00db      	lsls	r3, r3, #3
 801d316:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d318:	00d3      	lsls	r3, r2, #3
 801d31a:	9300      	str	r3, [sp, #0]
 801d31c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d31e:	911a      	str	r1, [sp, #104]	@ 0x68
 801d320:	00da      	lsls	r2, r3, #3
 801d322:	921e      	str	r2, [sp, #120]	@ 0x78
 801d324:	011a      	lsls	r2, r3, #4
 801d326:	921d      	str	r2, [sp, #116]	@ 0x74
 801d328:	001a      	movs	r2, r3
 801d32a:	4694      	mov	ip, r2
 801d32c:	005b      	lsls	r3, r3, #1
 801d32e:	4463      	add	r3, ip
 801d330:	00db      	lsls	r3, r3, #3
 801d332:	931c      	str	r3, [sp, #112]	@ 0x70
 801d334:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d336:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d338:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d33a:	9318      	str	r3, [sp, #96]	@ 0x60
 801d33c:	9319      	str	r3, [sp, #100]	@ 0x64
 801d33e:	9316      	str	r3, [sp, #88]	@ 0x58
 801d340:	2300      	movs	r3, #0
 801d342:	9315      	str	r3, [sp, #84]	@ 0x54
 801d344:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d346:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d348:	681a      	ldr	r2, [r3, #0]
 801d34a:	685b      	ldr	r3, [r3, #4]
 801d34c:	9205      	str	r2, [sp, #20]
 801d34e:	9306      	str	r3, [sp, #24]
 801d350:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d352:	468c      	mov	ip, r1
 801d354:	681a      	ldr	r2, [r3, #0]
 801d356:	685b      	ldr	r3, [r3, #4]
 801d358:	9207      	str	r2, [sp, #28]
 801d35a:	9308      	str	r3, [sp, #32]
 801d35c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d35e:	681a      	ldr	r2, [r3, #0]
 801d360:	685b      	ldr	r3, [r3, #4]
 801d362:	9209      	str	r2, [sp, #36]	@ 0x24
 801d364:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d366:	930a      	str	r3, [sp, #40]	@ 0x28
 801d368:	0013      	movs	r3, r2
 801d36a:	4463      	add	r3, ip
 801d36c:	4698      	mov	r8, r3
 801d36e:	0013      	movs	r3, r2
 801d370:	4442      	add	r2, r8
 801d372:	4691      	mov	r9, r2
 801d374:	001a      	movs	r2, r3
 801d376:	444a      	add	r2, r9
 801d378:	4692      	mov	sl, r2
 801d37a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d37c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d37e:	4293      	cmp	r3, r2
 801d380:	d800      	bhi.n	801d384 <arm_radix4_butterfly_q31+0x2bc>
 801d382:	e0dd      	b.n	801d540 <arm_radix4_butterfly_q31+0x478>
 801d384:	4694      	mov	ip, r2
 801d386:	468b      	mov	fp, r1
 801d388:	4644      	mov	r4, r8
 801d38a:	4655      	mov	r5, sl
 801d38c:	9b07      	ldr	r3, [sp, #28]
 801d38e:	17db      	asrs	r3, r3, #31
 801d390:	930c      	str	r3, [sp, #48]	@ 0x30
 801d392:	9b08      	ldr	r3, [sp, #32]
 801d394:	17db      	asrs	r3, r3, #31
 801d396:	930d      	str	r3, [sp, #52]	@ 0x34
 801d398:	9b05      	ldr	r3, [sp, #20]
 801d39a:	17db      	asrs	r3, r3, #31
 801d39c:	930e      	str	r3, [sp, #56]	@ 0x38
 801d39e:	9b06      	ldr	r3, [sp, #24]
 801d3a0:	17db      	asrs	r3, r3, #31
 801d3a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d3a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3a6:	17db      	asrs	r3, r3, #31
 801d3a8:	9310      	str	r3, [sp, #64]	@ 0x40
 801d3aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d3ac:	17db      	asrs	r3, r3, #31
 801d3ae:	9311      	str	r3, [sp, #68]	@ 0x44
 801d3b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d3b2:	4463      	add	r3, ip
 801d3b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d3b6:	465b      	mov	r3, fp
 801d3b8:	4659      	mov	r1, fp
 801d3ba:	681a      	ldr	r2, [r3, #0]
 801d3bc:	464b      	mov	r3, r9
 801d3be:	684f      	ldr	r7, [r1, #4]
 801d3c0:	4649      	mov	r1, r9
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	18d6      	adds	r6, r2, r3
 801d3c6:	1ad3      	subs	r3, r2, r3
 801d3c8:	9301      	str	r3, [sp, #4]
 801d3ca:	684b      	ldr	r3, [r1, #4]
 801d3cc:	18f8      	adds	r0, r7, r3
 801d3ce:	1af9      	subs	r1, r7, r3
 801d3d0:	6827      	ldr	r7, [r4, #0]
 801d3d2:	9102      	str	r1, [sp, #8]
 801d3d4:	003a      	movs	r2, r7
 801d3d6:	682f      	ldr	r7, [r5, #0]
 801d3d8:	46bc      	mov	ip, r7
 801d3da:	465f      	mov	r7, fp
 801d3dc:	4462      	add	r2, ip
 801d3de:	18b3      	adds	r3, r6, r2
 801d3e0:	109b      	asrs	r3, r3, #2
 801d3e2:	603b      	str	r3, [r7, #0]
 801d3e4:	6867      	ldr	r7, [r4, #4]
 801d3e6:	1ab6      	subs	r6, r6, r2
 801d3e8:	46b8      	mov	r8, r7
 801d3ea:	686f      	ldr	r7, [r5, #4]
 801d3ec:	17f2      	asrs	r2, r6, #31
 801d3ee:	46bc      	mov	ip, r7
 801d3f0:	44e0      	add	r8, ip
 801d3f2:	4643      	mov	r3, r8
 801d3f4:	465f      	mov	r7, fp
 801d3f6:	18c1      	adds	r1, r0, r3
 801d3f8:	1089      	asrs	r1, r1, #2
 801d3fa:	6079      	str	r1, [r7, #4]
 801d3fc:	9900      	ldr	r1, [sp, #0]
 801d3fe:	4690      	mov	r8, r2
 801d400:	468c      	mov	ip, r1
 801d402:	6867      	ldr	r7, [r4, #4]
 801d404:	6869      	ldr	r1, [r5, #4]
 801d406:	44e3      	add	fp, ip
 801d408:	1a7f      	subs	r7, r7, r1
 801d40a:	9703      	str	r7, [sp, #12]
 801d40c:	6829      	ldr	r1, [r5, #0]
 801d40e:	6827      	ldr	r7, [r4, #0]
 801d410:	1a7f      	subs	r7, r7, r1
 801d412:	9704      	str	r7, [sp, #16]
 801d414:	1ac7      	subs	r7, r0, r3
 801d416:	17fa      	asrs	r2, r7, #31
 801d418:	4692      	mov	sl, r2
 801d41a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d41c:	9a07      	ldr	r2, [sp, #28]
 801d41e:	0030      	movs	r0, r6
 801d420:	4641      	mov	r1, r8
 801d422:	f7e3 f8cd 	bl	80005c0 <__aeabi_lmul>
 801d426:	9a08      	ldr	r2, [sp, #32]
 801d428:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d42a:	9112      	str	r1, [sp, #72]	@ 0x48
 801d42c:	0038      	movs	r0, r7
 801d42e:	4651      	mov	r1, sl
 801d430:	f7e3 f8c6 	bl	80005c0 <__aeabi_lmul>
 801d434:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d436:	9a07      	ldr	r2, [sp, #28]
 801d438:	4684      	mov	ip, r0
 801d43a:	4461      	add	r1, ip
 801d43c:	1049      	asrs	r1, r1, #1
 801d43e:	6021      	str	r1, [r4, #0]
 801d440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d442:	0038      	movs	r0, r7
 801d444:	4651      	mov	r1, sl
 801d446:	f7e3 f8bb 	bl	80005c0 <__aeabi_lmul>
 801d44a:	9a08      	ldr	r2, [sp, #32]
 801d44c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d44e:	000f      	movs	r7, r1
 801d450:	0030      	movs	r0, r6
 801d452:	4641      	mov	r1, r8
 801d454:	f7e3 f8b4 	bl	80005c0 <__aeabi_lmul>
 801d458:	9b00      	ldr	r3, [sp, #0]
 801d45a:	9a01      	ldr	r2, [sp, #4]
 801d45c:	469c      	mov	ip, r3
 801d45e:	9803      	ldr	r0, [sp, #12]
 801d460:	1a7f      	subs	r7, r7, r1
 801d462:	107f      	asrs	r7, r7, #1
 801d464:	6067      	str	r7, [r4, #4]
 801d466:	0016      	movs	r6, r2
 801d468:	4464      	add	r4, ip
 801d46a:	4684      	mov	ip, r0
 801d46c:	4466      	add	r6, ip
 801d46e:	17f2      	asrs	r2, r6, #31
 801d470:	4690      	mov	r8, r2
 801d472:	9902      	ldr	r1, [sp, #8]
 801d474:	9f04      	ldr	r7, [sp, #16]
 801d476:	0030      	movs	r0, r6
 801d478:	1bcf      	subs	r7, r1, r7
 801d47a:	17fa      	asrs	r2, r7, #31
 801d47c:	4692      	mov	sl, r2
 801d47e:	4641      	mov	r1, r8
 801d480:	9a05      	ldr	r2, [sp, #20]
 801d482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d484:	f7e3 f89c 	bl	80005c0 <__aeabi_lmul>
 801d488:	9a06      	ldr	r2, [sp, #24]
 801d48a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d48c:	9112      	str	r1, [sp, #72]	@ 0x48
 801d48e:	0038      	movs	r0, r7
 801d490:	4651      	mov	r1, sl
 801d492:	f7e3 f895 	bl	80005c0 <__aeabi_lmul>
 801d496:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d498:	9a05      	ldr	r2, [sp, #20]
 801d49a:	4684      	mov	ip, r0
 801d49c:	4648      	mov	r0, r9
 801d49e:	4461      	add	r1, ip
 801d4a0:	1049      	asrs	r1, r1, #1
 801d4a2:	6001      	str	r1, [r0, #0]
 801d4a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4a6:	0038      	movs	r0, r7
 801d4a8:	4651      	mov	r1, sl
 801d4aa:	f7e3 f889 	bl	80005c0 <__aeabi_lmul>
 801d4ae:	9a06      	ldr	r2, [sp, #24]
 801d4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d4b2:	000f      	movs	r7, r1
 801d4b4:	0030      	movs	r0, r6
 801d4b6:	4641      	mov	r1, r8
 801d4b8:	f7e3 f882 	bl	80005c0 <__aeabi_lmul>
 801d4bc:	464e      	mov	r6, r9
 801d4be:	9a00      	ldr	r2, [sp, #0]
 801d4c0:	9b01      	ldr	r3, [sp, #4]
 801d4c2:	4694      	mov	ip, r2
 801d4c4:	9803      	ldr	r0, [sp, #12]
 801d4c6:	1a7f      	subs	r7, r7, r1
 801d4c8:	107f      	asrs	r7, r7, #1
 801d4ca:	6077      	str	r7, [r6, #4]
 801d4cc:	1a1e      	subs	r6, r3, r0
 801d4ce:	9b04      	ldr	r3, [sp, #16]
 801d4d0:	44e1      	add	r9, ip
 801d4d2:	469c      	mov	ip, r3
 801d4d4:	17f0      	asrs	r0, r6, #31
 801d4d6:	4680      	mov	r8, r0
 801d4d8:	9902      	ldr	r1, [sp, #8]
 801d4da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4dc:	4461      	add	r1, ip
 801d4de:	17cb      	asrs	r3, r1, #31
 801d4e0:	000f      	movs	r7, r1
 801d4e2:	469a      	mov	sl, r3
 801d4e4:	0030      	movs	r0, r6
 801d4e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d4e8:	4641      	mov	r1, r8
 801d4ea:	f7e3 f869 	bl	80005c0 <__aeabi_lmul>
 801d4ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d4f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d4f2:	9101      	str	r1, [sp, #4]
 801d4f4:	0038      	movs	r0, r7
 801d4f6:	4651      	mov	r1, sl
 801d4f8:	f7e3 f862 	bl	80005c0 <__aeabi_lmul>
 801d4fc:	9801      	ldr	r0, [sp, #4]
 801d4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d500:	4684      	mov	ip, r0
 801d502:	4461      	add	r1, ip
 801d504:	1049      	asrs	r1, r1, #1
 801d506:	6029      	str	r1, [r5, #0]
 801d508:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d50a:	0038      	movs	r0, r7
 801d50c:	4651      	mov	r1, sl
 801d50e:	f7e3 f857 	bl	80005c0 <__aeabi_lmul>
 801d512:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d514:	000f      	movs	r7, r1
 801d516:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d518:	0030      	movs	r0, r6
 801d51a:	4641      	mov	r1, r8
 801d51c:	f7e3 f850 	bl	80005c0 <__aeabi_lmul>
 801d520:	1a7f      	subs	r7, r7, r1
 801d522:	107f      	asrs	r7, r7, #1
 801d524:	606f      	str	r7, [r5, #4]
 801d526:	9a00      	ldr	r2, [sp, #0]
 801d528:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d52a:	4694      	mov	ip, r2
 801d52c:	4465      	add	r5, ip
 801d52e:	468c      	mov	ip, r1
 801d530:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d532:	0013      	movs	r3, r2
 801d534:	4462      	add	r2, ip
 801d536:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d538:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d53a:	429a      	cmp	r2, r3
 801d53c:	d900      	bls.n	801d540 <arm_radix4_butterfly_q31+0x478>
 801d53e:	e73a      	b.n	801d3b6 <arm_radix4_butterfly_q31+0x2ee>
 801d540:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d542:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d544:	468c      	mov	ip, r1
 801d546:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d548:	4462      	add	r2, ip
 801d54a:	468c      	mov	ip, r1
 801d54c:	9216      	str	r2, [sp, #88]	@ 0x58
 801d54e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d550:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d552:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d554:	4462      	add	r2, ip
 801d556:	468c      	mov	ip, r1
 801d558:	9219      	str	r2, [sp, #100]	@ 0x64
 801d55a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d55c:	3301      	adds	r3, #1
 801d55e:	4462      	add	r2, ip
 801d560:	9218      	str	r2, [sp, #96]	@ 0x60
 801d562:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d564:	9315      	str	r3, [sp, #84]	@ 0x54
 801d566:	3208      	adds	r2, #8
 801d568:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d56a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d56c:	4293      	cmp	r3, r2
 801d56e:	d800      	bhi.n	801d572 <arm_radix4_butterfly_q31+0x4aa>
 801d570:	e6e8      	b.n	801d344 <arm_radix4_butterfly_q31+0x27c>
 801d572:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d574:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d576:	009b      	lsls	r3, r3, #2
 801d578:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d57a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d57c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d57e:	089b      	lsrs	r3, r3, #2
 801d580:	9320      	str	r3, [sp, #128]	@ 0x80
 801d582:	2b04      	cmp	r3, #4
 801d584:	d900      	bls.n	801d588 <arm_radix4_butterfly_q31+0x4c0>
 801d586:	e6c1      	b.n	801d30c <arm_radix4_butterfly_q31+0x244>
 801d588:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d58a:	469a      	mov	sl, r3
 801d58c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d58e:	691c      	ldr	r4, [r3, #16]
 801d590:	685a      	ldr	r2, [r3, #4]
 801d592:	46a1      	mov	r9, r4
 801d594:	4690      	mov	r8, r2
 801d596:	6819      	ldr	r1, [r3, #0]
 801d598:	689a      	ldr	r2, [r3, #8]
 801d59a:	699f      	ldr	r7, [r3, #24]
 801d59c:	188d      	adds	r5, r1, r2
 801d59e:	444d      	add	r5, r9
 801d5a0:	19ed      	adds	r5, r5, r7
 801d5a2:	69de      	ldr	r6, [r3, #28]
 801d5a4:	601d      	str	r5, [r3, #0]
 801d5a6:	4645      	mov	r5, r8
 801d5a8:	46b4      	mov	ip, r6
 801d5aa:	68d8      	ldr	r0, [r3, #12]
 801d5ac:	695c      	ldr	r4, [r3, #20]
 801d5ae:	182d      	adds	r5, r5, r0
 801d5b0:	192d      	adds	r5, r5, r4
 801d5b2:	4465      	add	r5, ip
 801d5b4:	605d      	str	r5, [r3, #4]
 801d5b6:	1a8d      	subs	r5, r1, r2
 801d5b8:	444d      	add	r5, r9
 801d5ba:	1bed      	subs	r5, r5, r7
 801d5bc:	609d      	str	r5, [r3, #8]
 801d5be:	4645      	mov	r5, r8
 801d5c0:	1a2d      	subs	r5, r5, r0
 801d5c2:	192d      	adds	r5, r5, r4
 801d5c4:	1bad      	subs	r5, r5, r6
 801d5c6:	464e      	mov	r6, r9
 801d5c8:	60dd      	str	r5, [r3, #12]
 801d5ca:	180d      	adds	r5, r1, r0
 801d5cc:	1bad      	subs	r5, r5, r6
 801d5ce:	4666      	mov	r6, ip
 801d5d0:	1bad      	subs	r5, r5, r6
 801d5d2:	611d      	str	r5, [r3, #16]
 801d5d4:	4645      	mov	r5, r8
 801d5d6:	1aad      	subs	r5, r5, r2
 801d5d8:	4442      	add	r2, r8
 801d5da:	1b12      	subs	r2, r2, r4
 801d5dc:	1bd2      	subs	r2, r2, r7
 801d5de:	1a08      	subs	r0, r1, r0
 801d5e0:	61da      	str	r2, [r3, #28]
 801d5e2:	4649      	mov	r1, r9
 801d5e4:	2201      	movs	r2, #1
 801d5e6:	1a41      	subs	r1, r0, r1
 801d5e8:	4252      	negs	r2, r2
 801d5ea:	4461      	add	r1, ip
 801d5ec:	4694      	mov	ip, r2
 801d5ee:	44e2      	add	sl, ip
 801d5f0:	4652      	mov	r2, sl
 801d5f2:	1b2d      	subs	r5, r5, r4
 801d5f4:	19ed      	adds	r5, r5, r7
 801d5f6:	615d      	str	r5, [r3, #20]
 801d5f8:	6199      	str	r1, [r3, #24]
 801d5fa:	3320      	adds	r3, #32
 801d5fc:	2a00      	cmp	r2, #0
 801d5fe:	d1c6      	bne.n	801d58e <arm_radix4_butterfly_q31+0x4c6>
 801d600:	b027      	add	sp, #156	@ 0x9c
 801d602:	bc3c      	pop	{r2, r3, r4, r5}
 801d604:	4690      	mov	r8, r2
 801d606:	4699      	mov	r9, r3
 801d608:	46a2      	mov	sl, r4
 801d60a:	46ab      	mov	fp, r5
 801d60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d60e:	469a      	mov	sl, r3
 801d610:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d612:	e7bc      	b.n	801d58e <arm_radix4_butterfly_q31+0x4c6>

0801d614 <arm_radix4_butterfly_inverse_q31>:
 801d614:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d616:	464d      	mov	r5, r9
 801d618:	4644      	mov	r4, r8
 801d61a:	465f      	mov	r7, fp
 801d61c:	4656      	mov	r6, sl
 801d61e:	b4f0      	push	{r4, r5, r6, r7}
 801d620:	b0a7      	sub	sp, #156	@ 0x9c
 801d622:	469c      	mov	ip, r3
 801d624:	9114      	str	r1, [sp, #80]	@ 0x50
 801d626:	0889      	lsrs	r1, r1, #2
 801d628:	9310      	str	r3, [sp, #64]	@ 0x40
 801d62a:	00cb      	lsls	r3, r1, #3
 801d62c:	0015      	movs	r5, r2
 801d62e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d630:	18c2      	adds	r2, r0, r3
 801d632:	000c      	movs	r4, r1
 801d634:	9124      	str	r1, [sp, #144]	@ 0x90
 801d636:	18d1      	adds	r1, r2, r3
 801d638:	468b      	mov	fp, r1
 801d63a:	469a      	mov	sl, r3
 801d63c:	4663      	mov	r3, ip
 801d63e:	44da      	add	sl, fp
 801d640:	46d0      	mov	r8, sl
 801d642:	4681      	mov	r9, r0
 801d644:	4692      	mov	sl, r2
 801d646:	0119      	lsls	r1, r3, #4
 801d648:	910d      	str	r1, [sp, #52]	@ 0x34
 801d64a:	00d9      	lsls	r1, r3, #3
 801d64c:	005b      	lsls	r3, r3, #1
 801d64e:	4463      	add	r3, ip
 801d650:	910e      	str	r1, [sp, #56]	@ 0x38
 801d652:	00d9      	lsls	r1, r3, #3
 801d654:	9022      	str	r0, [sp, #136]	@ 0x88
 801d656:	9025      	str	r0, [sp, #148]	@ 0x94
 801d658:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d65a:	9502      	str	r5, [sp, #8]
 801d65c:	9500      	str	r5, [sp, #0]
 801d65e:	9501      	str	r5, [sp, #4]
 801d660:	9409      	str	r4, [sp, #36]	@ 0x24
 801d662:	464b      	mov	r3, r9
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	4652      	mov	r2, sl
 801d668:	111c      	asrs	r4, r3, #4
 801d66a:	465b      	mov	r3, fp
 801d66c:	4648      	mov	r0, r9
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	6812      	ldr	r2, [r2, #0]
 801d672:	6840      	ldr	r0, [r0, #4]
 801d674:	111b      	asrs	r3, r3, #4
 801d676:	18e7      	adds	r7, r4, r3
 801d678:	1ae3      	subs	r3, r4, r3
 801d67a:	1114      	asrs	r4, r2, #4
 801d67c:	4642      	mov	r2, r8
 801d67e:	1105      	asrs	r5, r0, #4
 801d680:	4658      	mov	r0, fp
 801d682:	6812      	ldr	r2, [r2, #0]
 801d684:	6840      	ldr	r0, [r0, #4]
 801d686:	9303      	str	r3, [sp, #12]
 801d688:	1113      	asrs	r3, r2, #4
 801d68a:	18e2      	adds	r2, r4, r3
 801d68c:	1103      	asrs	r3, r0, #4
 801d68e:	18ee      	adds	r6, r5, r3
 801d690:	1ae8      	subs	r0, r5, r3
 801d692:	464d      	mov	r5, r9
 801d694:	18bb      	adds	r3, r7, r2
 801d696:	602b      	str	r3, [r5, #0]
 801d698:	4641      	mov	r1, r8
 801d69a:	4655      	mov	r5, sl
 801d69c:	6849      	ldr	r1, [r1, #4]
 801d69e:	686d      	ldr	r5, [r5, #4]
 801d6a0:	110b      	asrs	r3, r1, #4
 801d6a2:	112d      	asrs	r5, r5, #4
 801d6a4:	18eb      	adds	r3, r5, r3
 801d6a6:	464d      	mov	r5, r9
 801d6a8:	18f1      	adds	r1, r6, r3
 801d6aa:	6069      	str	r1, [r5, #4]
 801d6ac:	4655      	mov	r5, sl
 801d6ae:	686d      	ldr	r5, [r5, #4]
 801d6b0:	9004      	str	r0, [sp, #16]
 801d6b2:	112c      	asrs	r4, r5, #4
 801d6b4:	4645      	mov	r5, r8
 801d6b6:	686d      	ldr	r5, [r5, #4]
 801d6b8:	1129      	asrs	r1, r5, #4
 801d6ba:	1a65      	subs	r5, r4, r1
 801d6bc:	4651      	mov	r1, sl
 801d6be:	6809      	ldr	r1, [r1, #0]
 801d6c0:	1abc      	subs	r4, r7, r2
 801d6c2:	1108      	asrs	r0, r1, #4
 801d6c4:	4641      	mov	r1, r8
 801d6c6:	17e2      	asrs	r2, r4, #31
 801d6c8:	6809      	ldr	r1, [r1, #0]
 801d6ca:	9207      	str	r2, [sp, #28]
 801d6cc:	9a01      	ldr	r2, [sp, #4]
 801d6ce:	1109      	asrs	r1, r1, #4
 801d6d0:	6817      	ldr	r7, [r2, #0]
 801d6d2:	1a41      	subs	r1, r0, r1
 801d6d4:	9106      	str	r1, [sp, #24]
 801d6d6:	0039      	movs	r1, r7
 801d6d8:	17ff      	asrs	r7, r7, #31
 801d6da:	0038      	movs	r0, r7
 801d6dc:	9505      	str	r5, [sp, #20]
 801d6de:	1af5      	subs	r5, r6, r3
 801d6e0:	17ef      	asrs	r7, r5, #31
 801d6e2:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d6e4:	6857      	ldr	r7, [r2, #4]
 801d6e6:	0003      	movs	r3, r0
 801d6e8:	17fe      	asrs	r6, r7, #31
 801d6ea:	000a      	movs	r2, r1
 801d6ec:	9108      	str	r1, [sp, #32]
 801d6ee:	900a      	str	r0, [sp, #40]	@ 0x28
 801d6f0:	17e1      	asrs	r1, r4, #31
 801d6f2:	0020      	movs	r0, r4
 801d6f4:	960c      	str	r6, [sp, #48]	@ 0x30
 801d6f6:	f7e2 ff63 	bl	80005c0 <__aeabi_lmul>
 801d6fa:	003a      	movs	r2, r7
 801d6fc:	17fb      	asrs	r3, r7, #31
 801d6fe:	000e      	movs	r6, r1
 801d700:	0028      	movs	r0, r5
 801d702:	17e9      	asrs	r1, r5, #31
 801d704:	f7e2 ff5c 	bl	80005c0 <__aeabi_lmul>
 801d708:	4653      	mov	r3, sl
 801d70a:	1a76      	subs	r6, r6, r1
 801d70c:	0076      	lsls	r6, r6, #1
 801d70e:	601e      	str	r6, [r3, #0]
 801d710:	002a      	movs	r2, r5
 801d712:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d714:	9808      	ldr	r0, [sp, #32]
 801d716:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d718:	f7e2 ff52 	bl	80005c0 <__aeabi_lmul>
 801d71c:	003a      	movs	r2, r7
 801d71e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d720:	000d      	movs	r5, r1
 801d722:	0020      	movs	r0, r4
 801d724:	9907      	ldr	r1, [sp, #28]
 801d726:	f7e2 ff4b 	bl	80005c0 <__aeabi_lmul>
 801d72a:	4657      	mov	r7, sl
 801d72c:	186d      	adds	r5, r5, r1
 801d72e:	006d      	lsls	r5, r5, #1
 801d730:	607d      	str	r5, [r7, #4]
 801d732:	9b03      	ldr	r3, [sp, #12]
 801d734:	9e06      	ldr	r6, [sp, #24]
 801d736:	9d05      	ldr	r5, [sp, #20]
 801d738:	46b4      	mov	ip, r6
 801d73a:	1b5d      	subs	r5, r3, r5
 801d73c:	9b00      	ldr	r3, [sp, #0]
 801d73e:	17ef      	asrs	r7, r5, #31
 801d740:	0039      	movs	r1, r7
 801d742:	681f      	ldr	r7, [r3, #0]
 801d744:	17fc      	asrs	r4, r7, #31
 801d746:	0020      	movs	r0, r4
 801d748:	9c04      	ldr	r4, [sp, #16]
 801d74a:	4464      	add	r4, ip
 801d74c:	17e6      	asrs	r6, r4, #31
 801d74e:	9407      	str	r4, [sp, #28]
 801d750:	9608      	str	r6, [sp, #32]
 801d752:	685e      	ldr	r6, [r3, #4]
 801d754:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d756:	17f2      	asrs	r2, r6, #31
 801d758:	0003      	movs	r3, r0
 801d75a:	920c      	str	r2, [sp, #48]	@ 0x30
 801d75c:	0028      	movs	r0, r5
 801d75e:	003a      	movs	r2, r7
 801d760:	910a      	str	r1, [sp, #40]	@ 0x28
 801d762:	f7e2 ff2d 	bl	80005c0 <__aeabi_lmul>
 801d766:	0032      	movs	r2, r6
 801d768:	17f3      	asrs	r3, r6, #31
 801d76a:	9807      	ldr	r0, [sp, #28]
 801d76c:	000c      	movs	r4, r1
 801d76e:	9908      	ldr	r1, [sp, #32]
 801d770:	f7e2 ff26 	bl	80005c0 <__aeabi_lmul>
 801d774:	4658      	mov	r0, fp
 801d776:	1a64      	subs	r4, r4, r1
 801d778:	0064      	lsls	r4, r4, #1
 801d77a:	9a07      	ldr	r2, [sp, #28]
 801d77c:	6004      	str	r4, [r0, #0]
 801d77e:	9b08      	ldr	r3, [sp, #32]
 801d780:	0038      	movs	r0, r7
 801d782:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d784:	f7e2 ff1c 	bl	80005c0 <__aeabi_lmul>
 801d788:	0032      	movs	r2, r6
 801d78a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d78c:	000c      	movs	r4, r1
 801d78e:	0028      	movs	r0, r5
 801d790:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d792:	f7e2 ff15 	bl	80005c0 <__aeabi_lmul>
 801d796:	9d05      	ldr	r5, [sp, #20]
 801d798:	465f      	mov	r7, fp
 801d79a:	46ac      	mov	ip, r5
 801d79c:	1864      	adds	r4, r4, r1
 801d79e:	9903      	ldr	r1, [sp, #12]
 801d7a0:	0064      	lsls	r4, r4, #1
 801d7a2:	4461      	add	r1, ip
 801d7a4:	607c      	str	r4, [r7, #4]
 801d7a6:	000c      	movs	r4, r1
 801d7a8:	17c9      	asrs	r1, r1, #31
 801d7aa:	9105      	str	r1, [sp, #20]
 801d7ac:	9902      	ldr	r1, [sp, #8]
 801d7ae:	9804      	ldr	r0, [sp, #16]
 801d7b0:	680d      	ldr	r5, [r1, #0]
 801d7b2:	9e06      	ldr	r6, [sp, #24]
 801d7b4:	002b      	movs	r3, r5
 801d7b6:	17ed      	asrs	r5, r5, #31
 801d7b8:	684f      	ldr	r7, [r1, #4]
 801d7ba:	9503      	str	r5, [sp, #12]
 801d7bc:	1b85      	subs	r5, r0, r6
 801d7be:	17e8      	asrs	r0, r5, #31
 801d7c0:	001a      	movs	r2, r3
 801d7c2:	9006      	str	r0, [sp, #24]
 801d7c4:	17fe      	asrs	r6, r7, #31
 801d7c6:	9304      	str	r3, [sp, #16]
 801d7c8:	0020      	movs	r0, r4
 801d7ca:	9b03      	ldr	r3, [sp, #12]
 801d7cc:	17e1      	asrs	r1, r4, #31
 801d7ce:	9607      	str	r6, [sp, #28]
 801d7d0:	f7e2 fef6 	bl	80005c0 <__aeabi_lmul>
 801d7d4:	003a      	movs	r2, r7
 801d7d6:	000e      	movs	r6, r1
 801d7d8:	17fb      	asrs	r3, r7, #31
 801d7da:	0028      	movs	r0, r5
 801d7dc:	17e9      	asrs	r1, r5, #31
 801d7de:	f7e2 feef 	bl	80005c0 <__aeabi_lmul>
 801d7e2:	4640      	mov	r0, r8
 801d7e4:	1a76      	subs	r6, r6, r1
 801d7e6:	0076      	lsls	r6, r6, #1
 801d7e8:	002a      	movs	r2, r5
 801d7ea:	9b06      	ldr	r3, [sp, #24]
 801d7ec:	6006      	str	r6, [r0, #0]
 801d7ee:	9903      	ldr	r1, [sp, #12]
 801d7f0:	9804      	ldr	r0, [sp, #16]
 801d7f2:	f7e2 fee5 	bl	80005c0 <__aeabi_lmul>
 801d7f6:	0020      	movs	r0, r4
 801d7f8:	2408      	movs	r4, #8
 801d7fa:	9b07      	ldr	r3, [sp, #28]
 801d7fc:	000d      	movs	r5, r1
 801d7fe:	003a      	movs	r2, r7
 801d800:	9905      	ldr	r1, [sp, #20]
 801d802:	f7e2 fedd 	bl	80005c0 <__aeabi_lmul>
 801d806:	4640      	mov	r0, r8
 801d808:	46a4      	mov	ip, r4
 801d80a:	186d      	adds	r5, r5, r1
 801d80c:	006d      	lsls	r5, r5, #1
 801d80e:	6045      	str	r5, [r0, #4]
 801d810:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d812:	44e1      	add	r9, ip
 801d814:	3801      	subs	r0, #1
 801d816:	9009      	str	r0, [sp, #36]	@ 0x24
 801d818:	9a01      	ldr	r2, [sp, #4]
 801d81a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d81c:	44e2      	add	sl, ip
 801d81e:	44e3      	add	fp, ip
 801d820:	44e0      	add	r8, ip
 801d822:	46a4      	mov	ip, r4
 801d824:	4462      	add	r2, ip
 801d826:	9201      	str	r2, [sp, #4]
 801d828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d82a:	9b00      	ldr	r3, [sp, #0]
 801d82c:	4694      	mov	ip, r2
 801d82e:	4463      	add	r3, ip
 801d830:	9300      	str	r3, [sp, #0]
 801d832:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d834:	9902      	ldr	r1, [sp, #8]
 801d836:	469c      	mov	ip, r3
 801d838:	4461      	add	r1, ip
 801d83a:	9102      	str	r1, [sp, #8]
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d000      	beq.n	801d842 <arm_radix4_butterfly_inverse_q31+0x22e>
 801d840:	e70f      	b.n	801d662 <arm_radix4_butterfly_inverse_q31+0x4e>
 801d842:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d844:	009b      	lsls	r3, r3, #2
 801d846:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d848:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d84a:	9320      	str	r3, [sp, #128]	@ 0x80
 801d84c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d84e:	2b04      	cmp	r3, #4
 801d850:	d800      	bhi.n	801d854 <arm_radix4_butterfly_inverse_q31+0x240>
 801d852:	e17c      	b.n	801db4e <arm_radix4_butterfly_inverse_q31+0x53a>
 801d854:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d856:	0893      	lsrs	r3, r2, #2
 801d858:	1e59      	subs	r1, r3, #1
 801d85a:	9321      	str	r3, [sp, #132]	@ 0x84
 801d85c:	00db      	lsls	r3, r3, #3
 801d85e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d860:	00d3      	lsls	r3, r2, #3
 801d862:	9300      	str	r3, [sp, #0]
 801d864:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d866:	911a      	str	r1, [sp, #104]	@ 0x68
 801d868:	00da      	lsls	r2, r3, #3
 801d86a:	921e      	str	r2, [sp, #120]	@ 0x78
 801d86c:	011a      	lsls	r2, r3, #4
 801d86e:	921d      	str	r2, [sp, #116]	@ 0x74
 801d870:	001a      	movs	r2, r3
 801d872:	4694      	mov	ip, r2
 801d874:	005b      	lsls	r3, r3, #1
 801d876:	4463      	add	r3, ip
 801d878:	00db      	lsls	r3, r3, #3
 801d87a:	931c      	str	r3, [sp, #112]	@ 0x70
 801d87c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d87e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d880:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d882:	9318      	str	r3, [sp, #96]	@ 0x60
 801d884:	9319      	str	r3, [sp, #100]	@ 0x64
 801d886:	9316      	str	r3, [sp, #88]	@ 0x58
 801d888:	2300      	movs	r3, #0
 801d88a:	9315      	str	r3, [sp, #84]	@ 0x54
 801d88c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d88e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d890:	681a      	ldr	r2, [r3, #0]
 801d892:	685b      	ldr	r3, [r3, #4]
 801d894:	9205      	str	r2, [sp, #20]
 801d896:	9306      	str	r3, [sp, #24]
 801d898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d89a:	468c      	mov	ip, r1
 801d89c:	681a      	ldr	r2, [r3, #0]
 801d89e:	685b      	ldr	r3, [r3, #4]
 801d8a0:	9207      	str	r2, [sp, #28]
 801d8a2:	9308      	str	r3, [sp, #32]
 801d8a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d8a6:	681a      	ldr	r2, [r3, #0]
 801d8a8:	685b      	ldr	r3, [r3, #4]
 801d8aa:	9209      	str	r2, [sp, #36]	@ 0x24
 801d8ac:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801d8b0:	0013      	movs	r3, r2
 801d8b2:	4463      	add	r3, ip
 801d8b4:	4698      	mov	r8, r3
 801d8b6:	0013      	movs	r3, r2
 801d8b8:	4442      	add	r2, r8
 801d8ba:	4691      	mov	r9, r2
 801d8bc:	001a      	movs	r2, r3
 801d8be:	444a      	add	r2, r9
 801d8c0:	4692      	mov	sl, r2
 801d8c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d8c4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d8c6:	4293      	cmp	r3, r2
 801d8c8:	d800      	bhi.n	801d8cc <arm_radix4_butterfly_inverse_q31+0x2b8>
 801d8ca:	e0d9      	b.n	801da80 <arm_radix4_butterfly_inverse_q31+0x46c>
 801d8cc:	4694      	mov	ip, r2
 801d8ce:	4644      	mov	r4, r8
 801d8d0:	4655      	mov	r5, sl
 801d8d2:	4688      	mov	r8, r1
 801d8d4:	9b07      	ldr	r3, [sp, #28]
 801d8d6:	17db      	asrs	r3, r3, #31
 801d8d8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d8da:	9b08      	ldr	r3, [sp, #32]
 801d8dc:	17db      	asrs	r3, r3, #31
 801d8de:	930d      	str	r3, [sp, #52]	@ 0x34
 801d8e0:	9b05      	ldr	r3, [sp, #20]
 801d8e2:	17db      	asrs	r3, r3, #31
 801d8e4:	930e      	str	r3, [sp, #56]	@ 0x38
 801d8e6:	9b06      	ldr	r3, [sp, #24]
 801d8e8:	17db      	asrs	r3, r3, #31
 801d8ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8ee:	17db      	asrs	r3, r3, #31
 801d8f0:	9310      	str	r3, [sp, #64]	@ 0x40
 801d8f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8f4:	17db      	asrs	r3, r3, #31
 801d8f6:	9311      	str	r3, [sp, #68]	@ 0x44
 801d8f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d8fa:	4463      	add	r3, ip
 801d8fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d8fe:	4643      	mov	r3, r8
 801d900:	4641      	mov	r1, r8
 801d902:	681a      	ldr	r2, [r3, #0]
 801d904:	464b      	mov	r3, r9
 801d906:	684f      	ldr	r7, [r1, #4]
 801d908:	4649      	mov	r1, r9
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	18d6      	adds	r6, r2, r3
 801d90e:	1ad3      	subs	r3, r2, r3
 801d910:	9301      	str	r3, [sp, #4]
 801d912:	684b      	ldr	r3, [r1, #4]
 801d914:	1af9      	subs	r1, r7, r3
 801d916:	9102      	str	r1, [sp, #8]
 801d918:	6829      	ldr	r1, [r5, #0]
 801d91a:	18f8      	adds	r0, r7, r3
 801d91c:	468c      	mov	ip, r1
 801d91e:	6827      	ldr	r7, [r4, #0]
 801d920:	4467      	add	r7, ip
 801d922:	003a      	movs	r2, r7
 801d924:	19f3      	adds	r3, r6, r7
 801d926:	4647      	mov	r7, r8
 801d928:	109b      	asrs	r3, r3, #2
 801d92a:	603b      	str	r3, [r7, #0]
 801d92c:	6869      	ldr	r1, [r5, #4]
 801d92e:	6867      	ldr	r7, [r4, #4]
 801d930:	468c      	mov	ip, r1
 801d932:	4467      	add	r7, ip
 801d934:	003b      	movs	r3, r7
 801d936:	19c1      	adds	r1, r0, r7
 801d938:	4647      	mov	r7, r8
 801d93a:	1ab6      	subs	r6, r6, r2
 801d93c:	1089      	asrs	r1, r1, #2
 801d93e:	6079      	str	r1, [r7, #4]
 801d940:	17f2      	asrs	r2, r6, #31
 801d942:	9900      	ldr	r1, [sp, #0]
 801d944:	4692      	mov	sl, r2
 801d946:	468c      	mov	ip, r1
 801d948:	6867      	ldr	r7, [r4, #4]
 801d94a:	6869      	ldr	r1, [r5, #4]
 801d94c:	44e0      	add	r8, ip
 801d94e:	1a7f      	subs	r7, r7, r1
 801d950:	9703      	str	r7, [sp, #12]
 801d952:	6821      	ldr	r1, [r4, #0]
 801d954:	682f      	ldr	r7, [r5, #0]
 801d956:	1bc9      	subs	r1, r1, r7
 801d958:	1ac7      	subs	r7, r0, r3
 801d95a:	17fa      	asrs	r2, r7, #31
 801d95c:	4693      	mov	fp, r2
 801d95e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d960:	9a07      	ldr	r2, [sp, #28]
 801d962:	9104      	str	r1, [sp, #16]
 801d964:	0030      	movs	r0, r6
 801d966:	4651      	mov	r1, sl
 801d968:	f7e2 fe2a 	bl	80005c0 <__aeabi_lmul>
 801d96c:	9a08      	ldr	r2, [sp, #32]
 801d96e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d970:	9112      	str	r1, [sp, #72]	@ 0x48
 801d972:	0038      	movs	r0, r7
 801d974:	4659      	mov	r1, fp
 801d976:	f7e2 fe23 	bl	80005c0 <__aeabi_lmul>
 801d97a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d97c:	9a07      	ldr	r2, [sp, #28]
 801d97e:	1a41      	subs	r1, r0, r1
 801d980:	1049      	asrs	r1, r1, #1
 801d982:	6021      	str	r1, [r4, #0]
 801d984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d986:	0038      	movs	r0, r7
 801d988:	4659      	mov	r1, fp
 801d98a:	f7e2 fe19 	bl	80005c0 <__aeabi_lmul>
 801d98e:	9a08      	ldr	r2, [sp, #32]
 801d990:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d992:	000f      	movs	r7, r1
 801d994:	0030      	movs	r0, r6
 801d996:	4651      	mov	r1, sl
 801d998:	f7e2 fe12 	bl	80005c0 <__aeabi_lmul>
 801d99c:	9b00      	ldr	r3, [sp, #0]
 801d99e:	187f      	adds	r7, r7, r1
 801d9a0:	469c      	mov	ip, r3
 801d9a2:	107f      	asrs	r7, r7, #1
 801d9a4:	6067      	str	r7, [r4, #4]
 801d9a6:	9a01      	ldr	r2, [sp, #4]
 801d9a8:	9f03      	ldr	r7, [sp, #12]
 801d9aa:	9802      	ldr	r0, [sp, #8]
 801d9ac:	1bd7      	subs	r7, r2, r7
 801d9ae:	17fe      	asrs	r6, r7, #31
 801d9b0:	0031      	movs	r1, r6
 801d9b2:	9e04      	ldr	r6, [sp, #16]
 801d9b4:	4682      	mov	sl, r0
 801d9b6:	4464      	add	r4, ip
 801d9b8:	46b4      	mov	ip, r6
 801d9ba:	44e2      	add	sl, ip
 801d9bc:	4652      	mov	r2, sl
 801d9be:	17d2      	asrs	r2, r2, #31
 801d9c0:	4693      	mov	fp, r2
 801d9c2:	0038      	movs	r0, r7
 801d9c4:	9a05      	ldr	r2, [sp, #20]
 801d9c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9c8:	9112      	str	r1, [sp, #72]	@ 0x48
 801d9ca:	f7e2 fdf9 	bl	80005c0 <__aeabi_lmul>
 801d9ce:	9a06      	ldr	r2, [sp, #24]
 801d9d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9d2:	000e      	movs	r6, r1
 801d9d4:	4650      	mov	r0, sl
 801d9d6:	4659      	mov	r1, fp
 801d9d8:	f7e2 fdf2 	bl	80005c0 <__aeabi_lmul>
 801d9dc:	4648      	mov	r0, r9
 801d9de:	1a76      	subs	r6, r6, r1
 801d9e0:	1076      	asrs	r6, r6, #1
 801d9e2:	6006      	str	r6, [r0, #0]
 801d9e4:	9a05      	ldr	r2, [sp, #20]
 801d9e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9e8:	4650      	mov	r0, sl
 801d9ea:	4659      	mov	r1, fp
 801d9ec:	f7e2 fde8 	bl	80005c0 <__aeabi_lmul>
 801d9f0:	9a06      	ldr	r2, [sp, #24]
 801d9f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d9f4:	000e      	movs	r6, r1
 801d9f6:	0038      	movs	r0, r7
 801d9f8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d9fa:	f7e2 fde1 	bl	80005c0 <__aeabi_lmul>
 801d9fe:	9a00      	ldr	r2, [sp, #0]
 801da00:	9f03      	ldr	r7, [sp, #12]
 801da02:	4694      	mov	ip, r2
 801da04:	1876      	adds	r6, r6, r1
 801da06:	4649      	mov	r1, r9
 801da08:	44e1      	add	r9, ip
 801da0a:	46bc      	mov	ip, r7
 801da0c:	9b01      	ldr	r3, [sp, #4]
 801da0e:	1076      	asrs	r6, r6, #1
 801da10:	4463      	add	r3, ip
 801da12:	17df      	asrs	r7, r3, #31
 801da14:	604e      	str	r6, [r1, #4]
 801da16:	46ba      	mov	sl, r7
 801da18:	001e      	movs	r6, r3
 801da1a:	9802      	ldr	r0, [sp, #8]
 801da1c:	9b04      	ldr	r3, [sp, #16]
 801da1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da20:	1ac7      	subs	r7, r0, r3
 801da22:	17fb      	asrs	r3, r7, #31
 801da24:	469b      	mov	fp, r3
 801da26:	0030      	movs	r0, r6
 801da28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da2a:	4651      	mov	r1, sl
 801da2c:	f7e2 fdc8 	bl	80005c0 <__aeabi_lmul>
 801da30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801da32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da34:	9101      	str	r1, [sp, #4]
 801da36:	0038      	movs	r0, r7
 801da38:	4659      	mov	r1, fp
 801da3a:	f7e2 fdc1 	bl	80005c0 <__aeabi_lmul>
 801da3e:	9801      	ldr	r0, [sp, #4]
 801da40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da42:	1a41      	subs	r1, r0, r1
 801da44:	1049      	asrs	r1, r1, #1
 801da46:	6029      	str	r1, [r5, #0]
 801da48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801da4a:	0038      	movs	r0, r7
 801da4c:	4659      	mov	r1, fp
 801da4e:	f7e2 fdb7 	bl	80005c0 <__aeabi_lmul>
 801da52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801da54:	000f      	movs	r7, r1
 801da56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801da58:	0030      	movs	r0, r6
 801da5a:	4651      	mov	r1, sl
 801da5c:	f7e2 fdb0 	bl	80005c0 <__aeabi_lmul>
 801da60:	187f      	adds	r7, r7, r1
 801da62:	107f      	asrs	r7, r7, #1
 801da64:	606f      	str	r7, [r5, #4]
 801da66:	9a00      	ldr	r2, [sp, #0]
 801da68:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801da6a:	4694      	mov	ip, r2
 801da6c:	4465      	add	r5, ip
 801da6e:	468c      	mov	ip, r1
 801da70:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801da72:	0013      	movs	r3, r2
 801da74:	4462      	add	r2, ip
 801da76:	920b      	str	r2, [sp, #44]	@ 0x2c
 801da78:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801da7a:	429a      	cmp	r2, r3
 801da7c:	d900      	bls.n	801da80 <arm_radix4_butterfly_inverse_q31+0x46c>
 801da7e:	e73e      	b.n	801d8fe <arm_radix4_butterfly_inverse_q31+0x2ea>
 801da80:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801da82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801da84:	468c      	mov	ip, r1
 801da86:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801da88:	4462      	add	r2, ip
 801da8a:	468c      	mov	ip, r1
 801da8c:	9216      	str	r2, [sp, #88]	@ 0x58
 801da8e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801da90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801da92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801da94:	4462      	add	r2, ip
 801da96:	468c      	mov	ip, r1
 801da98:	9219      	str	r2, [sp, #100]	@ 0x64
 801da9a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801da9c:	3301      	adds	r3, #1
 801da9e:	4462      	add	r2, ip
 801daa0:	9218      	str	r2, [sp, #96]	@ 0x60
 801daa2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801daa4:	9315      	str	r3, [sp, #84]	@ 0x54
 801daa6:	3208      	adds	r2, #8
 801daa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801daaa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801daac:	4293      	cmp	r3, r2
 801daae:	d800      	bhi.n	801dab2 <arm_radix4_butterfly_inverse_q31+0x49e>
 801dab0:	e6ec      	b.n	801d88c <arm_radix4_butterfly_inverse_q31+0x278>
 801dab2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dab4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801dab6:	009b      	lsls	r3, r3, #2
 801dab8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801daba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dabc:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dabe:	089b      	lsrs	r3, r3, #2
 801dac0:	9320      	str	r3, [sp, #128]	@ 0x80
 801dac2:	2b04      	cmp	r3, #4
 801dac4:	d900      	bls.n	801dac8 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801dac6:	e6c5      	b.n	801d854 <arm_radix4_butterfly_inverse_q31+0x240>
 801dac8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801daca:	469a      	mov	sl, r3
 801dacc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dace:	681a      	ldr	r2, [r3, #0]
 801dad0:	6918      	ldr	r0, [r3, #16]
 801dad2:	4691      	mov	r9, r2
 801dad4:	464c      	mov	r4, r9
 801dad6:	4680      	mov	r8, r0
 801dad8:	69de      	ldr	r6, [r3, #28]
 801dada:	689d      	ldr	r5, [r3, #8]
 801dadc:	46b4      	mov	ip, r6
 801dade:	6998      	ldr	r0, [r3, #24]
 801dae0:	1964      	adds	r4, r4, r5
 801dae2:	6859      	ldr	r1, [r3, #4]
 801dae4:	68da      	ldr	r2, [r3, #12]
 801dae6:	4444      	add	r4, r8
 801dae8:	695f      	ldr	r7, [r3, #20]
 801daea:	1824      	adds	r4, r4, r0
 801daec:	601c      	str	r4, [r3, #0]
 801daee:	188c      	adds	r4, r1, r2
 801daf0:	19e4      	adds	r4, r4, r7
 801daf2:	4464      	add	r4, ip
 801daf4:	605c      	str	r4, [r3, #4]
 801daf6:	464c      	mov	r4, r9
 801daf8:	1b64      	subs	r4, r4, r5
 801dafa:	4444      	add	r4, r8
 801dafc:	1a24      	subs	r4, r4, r0
 801dafe:	609c      	str	r4, [r3, #8]
 801db00:	1a8c      	subs	r4, r1, r2
 801db02:	19e4      	adds	r4, r4, r7
 801db04:	1ba4      	subs	r4, r4, r6
 801db06:	60dc      	str	r4, [r3, #12]
 801db08:	464c      	mov	r4, r9
 801db0a:	4646      	mov	r6, r8
 801db0c:	1aa4      	subs	r4, r4, r2
 801db0e:	1ba4      	subs	r4, r4, r6
 801db10:	4464      	add	r4, ip
 801db12:	611c      	str	r4, [r3, #16]
 801db14:	194c      	adds	r4, r1, r5
 801db16:	1be4      	subs	r4, r4, r7
 801db18:	1a24      	subs	r4, r4, r0
 801db1a:	615c      	str	r4, [r3, #20]
 801db1c:	4644      	mov	r4, r8
 801db1e:	4666      	mov	r6, ip
 801db20:	444a      	add	r2, r9
 801db22:	1b12      	subs	r2, r2, r4
 801db24:	1b92      	subs	r2, r2, r6
 801db26:	619a      	str	r2, [r3, #24]
 801db28:	1b4a      	subs	r2, r1, r5
 801db2a:	1bd1      	subs	r1, r2, r7
 801db2c:	2201      	movs	r2, #1
 801db2e:	4252      	negs	r2, r2
 801db30:	4694      	mov	ip, r2
 801db32:	44e2      	add	sl, ip
 801db34:	4652      	mov	r2, sl
 801db36:	1809      	adds	r1, r1, r0
 801db38:	61d9      	str	r1, [r3, #28]
 801db3a:	3320      	adds	r3, #32
 801db3c:	2a00      	cmp	r2, #0
 801db3e:	d1c6      	bne.n	801dace <arm_radix4_butterfly_inverse_q31+0x4ba>
 801db40:	b027      	add	sp, #156	@ 0x9c
 801db42:	bc3c      	pop	{r2, r3, r4, r5}
 801db44:	4690      	mov	r8, r2
 801db46:	4699      	mov	r9, r3
 801db48:	46a2      	mov	sl, r4
 801db4a:	46ab      	mov	fp, r5
 801db4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db4e:	469a      	mov	sl, r3
 801db50:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801db52:	e7bc      	b.n	801dace <arm_radix4_butterfly_inverse_q31+0x4ba>

0801db54 <arm_cmplx_mag_squared_q31>:
 801db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db56:	464f      	mov	r7, r9
 801db58:	4646      	mov	r6, r8
 801db5a:	0004      	movs	r4, r0
 801db5c:	b4c0      	push	{r6, r7}
 801db5e:	0016      	movs	r6, r2
 801db60:	000f      	movs	r7, r1
 801db62:	2a00      	cmp	r2, #0
 801db64:	d018      	beq.n	801db98 <arm_cmplx_mag_squared_q31+0x44>
 801db66:	6823      	ldr	r3, [r4, #0]
 801db68:	6822      	ldr	r2, [r4, #0]
 801db6a:	17d9      	asrs	r1, r3, #31
 801db6c:	6863      	ldr	r3, [r4, #4]
 801db6e:	0010      	movs	r0, r2
 801db70:	4698      	mov	r8, r3
 801db72:	17db      	asrs	r3, r3, #31
 801db74:	4699      	mov	r9, r3
 801db76:	000b      	movs	r3, r1
 801db78:	f7e2 fd22 	bl	80005c0 <__aeabi_lmul>
 801db7c:	4642      	mov	r2, r8
 801db7e:	104d      	asrs	r5, r1, #1
 801db80:	464b      	mov	r3, r9
 801db82:	4640      	mov	r0, r8
 801db84:	4649      	mov	r1, r9
 801db86:	f7e2 fd1b 	bl	80005c0 <__aeabi_lmul>
 801db8a:	1049      	asrs	r1, r1, #1
 801db8c:	1869      	adds	r1, r5, r1
 801db8e:	3e01      	subs	r6, #1
 801db90:	c702      	stmia	r7!, {r1}
 801db92:	3408      	adds	r4, #8
 801db94:	2e00      	cmp	r6, #0
 801db96:	d1e6      	bne.n	801db66 <arm_cmplx_mag_squared_q31+0x12>
 801db98:	bc0c      	pop	{r2, r3}
 801db9a:	4690      	mov	r8, r2
 801db9c:	4699      	mov	r9, r3
 801db9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801dba0 <arm_mult_q31>:
 801dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dba2:	4646      	mov	r6, r8
 801dba4:	464f      	mov	r7, r9
 801dba6:	4690      	mov	r8, r2
 801dba8:	b4c0      	push	{r6, r7}
 801dbaa:	001d      	movs	r5, r3
 801dbac:	0006      	movs	r6, r0
 801dbae:	000f      	movs	r7, r1
 801dbb0:	2400      	movs	r4, #0
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d020      	beq.n	801dbf8 <arm_mult_q31+0x58>
 801dbb6:	4b12      	ldr	r3, [pc, #72]	@ (801dc00 <arm_mult_q31+0x60>)
 801dbb8:	4699      	mov	r9, r3
 801dbba:	e007      	b.n	801dbcc <arm_mult_q31+0x2c>
 801dbbc:	464b      	mov	r3, r9
 801dbbe:	4059      	eors	r1, r3
 801dbc0:	4643      	mov	r3, r8
 801dbc2:	3d01      	subs	r5, #1
 801dbc4:	5119      	str	r1, [r3, r4]
 801dbc6:	3404      	adds	r4, #4
 801dbc8:	2d00      	cmp	r5, #0
 801dbca:	d015      	beq.n	801dbf8 <arm_mult_q31+0x58>
 801dbcc:	5933      	ldr	r3, [r6, r4]
 801dbce:	593a      	ldr	r2, [r7, r4]
 801dbd0:	17d9      	asrs	r1, r3, #31
 801dbd2:	593b      	ldr	r3, [r7, r4]
 801dbd4:	5930      	ldr	r0, [r6, r4]
 801dbd6:	17db      	asrs	r3, r3, #31
 801dbd8:	f7e2 fcf2 	bl	80005c0 <__aeabi_lmul>
 801dbdc:	004b      	lsls	r3, r1, #1
 801dbde:	0fc0      	lsrs	r0, r0, #31
 801dbe0:	4318      	orrs	r0, r3
 801dbe2:	17c9      	asrs	r1, r1, #31
 801dbe4:	17c3      	asrs	r3, r0, #31
 801dbe6:	428b      	cmp	r3, r1
 801dbe8:	d1e8      	bne.n	801dbbc <arm_mult_q31+0x1c>
 801dbea:	0001      	movs	r1, r0
 801dbec:	4643      	mov	r3, r8
 801dbee:	3d01      	subs	r5, #1
 801dbf0:	5119      	str	r1, [r3, r4]
 801dbf2:	3404      	adds	r4, #4
 801dbf4:	2d00      	cmp	r5, #0
 801dbf6:	d1e9      	bne.n	801dbcc <arm_mult_q31+0x2c>
 801dbf8:	bc0c      	pop	{r2, r3}
 801dbfa:	4690      	mov	r8, r2
 801dbfc:	4699      	mov	r9, r3
 801dbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc00:	7fffffff 	.word	0x7fffffff

0801dc04 <arm_add_q31>:
 801dc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc06:	465f      	mov	r7, fp
 801dc08:	4656      	mov	r6, sl
 801dc0a:	464d      	mov	r5, r9
 801dc0c:	4644      	mov	r4, r8
 801dc0e:	b4f0      	push	{r4, r5, r6, r7}
 801dc10:	4693      	mov	fp, r2
 801dc12:	b083      	sub	sp, #12
 801dc14:	4681      	mov	r9, r0
 801dc16:	468a      	mov	sl, r1
 801dc18:	4698      	mov	r8, r3
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d020      	beq.n	801dc62 <arm_add_q31+0x5e>
 801dc20:	4649      	mov	r1, r9
 801dc22:	4653      	mov	r3, sl
 801dc24:	588e      	ldr	r6, [r1, r2]
 801dc26:	589b      	ldr	r3, [r3, r2]
 801dc28:	17f7      	asrs	r7, r6, #31
 801dc2a:	001c      	movs	r4, r3
 801dc2c:	0030      	movs	r0, r6
 801dc2e:	0039      	movs	r1, r7
 801dc30:	17dd      	asrs	r5, r3, #31
 801dc32:	46b4      	mov	ip, r6
 801dc34:	1900      	adds	r0, r0, r4
 801dc36:	4169      	adcs	r1, r5
 801dc38:	4463      	add	r3, ip
 801dc3a:	9000      	str	r0, [sp, #0]
 801dc3c:	9101      	str	r1, [sp, #4]
 801dc3e:	17d9      	asrs	r1, r3, #31
 801dc40:	468c      	mov	ip, r1
 801dc42:	9901      	ldr	r1, [sp, #4]
 801dc44:	458c      	cmp	ip, r1
 801dc46:	d002      	beq.n	801dc4e <arm_add_q31+0x4a>
 801dc48:	17cb      	asrs	r3, r1, #31
 801dc4a:	4909      	ldr	r1, [pc, #36]	@ (801dc70 <arm_add_q31+0x6c>)
 801dc4c:	404b      	eors	r3, r1
 801dc4e:	4659      	mov	r1, fp
 801dc50:	508b      	str	r3, [r1, r2]
 801dc52:	2301      	movs	r3, #1
 801dc54:	425b      	negs	r3, r3
 801dc56:	469c      	mov	ip, r3
 801dc58:	44e0      	add	r8, ip
 801dc5a:	4643      	mov	r3, r8
 801dc5c:	3204      	adds	r2, #4
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	d1de      	bne.n	801dc20 <arm_add_q31+0x1c>
 801dc62:	b003      	add	sp, #12
 801dc64:	bc3c      	pop	{r2, r3, r4, r5}
 801dc66:	4690      	mov	r8, r2
 801dc68:	4699      	mov	r9, r3
 801dc6a:	46a2      	mov	sl, r4
 801dc6c:	46ab      	mov	fp, r5
 801dc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc70:	7fffffff 	.word	0x7fffffff

0801dc74 <atof>:
 801dc74:	b510      	push	{r4, lr}
 801dc76:	2100      	movs	r1, #0
 801dc78:	f000 fe12 	bl	801e8a0 <strtod>
 801dc7c:	bd10      	pop	{r4, pc}

0801dc7e <atoi>:
 801dc7e:	b510      	push	{r4, lr}
 801dc80:	220a      	movs	r2, #10
 801dc82:	2100      	movs	r1, #0
 801dc84:	f000 fea4 	bl	801e9d0 <strtol>
 801dc88:	bd10      	pop	{r4, pc}
	...

0801dc8c <sulp>:
 801dc8c:	b570      	push	{r4, r5, r6, lr}
 801dc8e:	0016      	movs	r6, r2
 801dc90:	000d      	movs	r5, r1
 801dc92:	f003 fcf3 	bl	802167c <__ulp>
 801dc96:	2e00      	cmp	r6, #0
 801dc98:	d00d      	beq.n	801dcb6 <sulp+0x2a>
 801dc9a:	236b      	movs	r3, #107	@ 0x6b
 801dc9c:	006a      	lsls	r2, r5, #1
 801dc9e:	0d52      	lsrs	r2, r2, #21
 801dca0:	1a9b      	subs	r3, r3, r2
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	dd07      	ble.n	801dcb6 <sulp+0x2a>
 801dca6:	2400      	movs	r4, #0
 801dca8:	4a03      	ldr	r2, [pc, #12]	@ (801dcb8 <sulp+0x2c>)
 801dcaa:	051b      	lsls	r3, r3, #20
 801dcac:	189d      	adds	r5, r3, r2
 801dcae:	002b      	movs	r3, r5
 801dcb0:	0022      	movs	r2, r4
 801dcb2:	f7e4 fcc3 	bl	800263c <__aeabi_dmul>
 801dcb6:	bd70      	pop	{r4, r5, r6, pc}
 801dcb8:	3ff00000 	.word	0x3ff00000

0801dcbc <_strtod_l>:
 801dcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcbe:	b0a3      	sub	sp, #140	@ 0x8c
 801dcc0:	921b      	str	r2, [sp, #108]	@ 0x6c
 801dcc2:	2200      	movs	r2, #0
 801dcc4:	2600      	movs	r6, #0
 801dcc6:	2700      	movs	r7, #0
 801dcc8:	9005      	str	r0, [sp, #20]
 801dcca:	9109      	str	r1, [sp, #36]	@ 0x24
 801dccc:	921e      	str	r2, [sp, #120]	@ 0x78
 801dcce:	911d      	str	r1, [sp, #116]	@ 0x74
 801dcd0:	780a      	ldrb	r2, [r1, #0]
 801dcd2:	2a2b      	cmp	r2, #43	@ 0x2b
 801dcd4:	d053      	beq.n	801dd7e <_strtod_l+0xc2>
 801dcd6:	d83f      	bhi.n	801dd58 <_strtod_l+0x9c>
 801dcd8:	2a0d      	cmp	r2, #13
 801dcda:	d839      	bhi.n	801dd50 <_strtod_l+0x94>
 801dcdc:	2a08      	cmp	r2, #8
 801dcde:	d839      	bhi.n	801dd54 <_strtod_l+0x98>
 801dce0:	2a00      	cmp	r2, #0
 801dce2:	d042      	beq.n	801dd6a <_strtod_l+0xae>
 801dce4:	2200      	movs	r2, #0
 801dce6:	9212      	str	r2, [sp, #72]	@ 0x48
 801dce8:	2100      	movs	r1, #0
 801dcea:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801dcec:	910c      	str	r1, [sp, #48]	@ 0x30
 801dcee:	782a      	ldrb	r2, [r5, #0]
 801dcf0:	2a30      	cmp	r2, #48	@ 0x30
 801dcf2:	d000      	beq.n	801dcf6 <_strtod_l+0x3a>
 801dcf4:	e083      	b.n	801ddfe <_strtod_l+0x142>
 801dcf6:	786a      	ldrb	r2, [r5, #1]
 801dcf8:	3120      	adds	r1, #32
 801dcfa:	438a      	bics	r2, r1
 801dcfc:	2a58      	cmp	r2, #88	@ 0x58
 801dcfe:	d000      	beq.n	801dd02 <_strtod_l+0x46>
 801dd00:	e073      	b.n	801ddea <_strtod_l+0x12e>
 801dd02:	9302      	str	r3, [sp, #8]
 801dd04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd06:	4a95      	ldr	r2, [pc, #596]	@ (801df5c <_strtod_l+0x2a0>)
 801dd08:	9301      	str	r3, [sp, #4]
 801dd0a:	ab1e      	add	r3, sp, #120	@ 0x78
 801dd0c:	9300      	str	r3, [sp, #0]
 801dd0e:	9805      	ldr	r0, [sp, #20]
 801dd10:	ab1f      	add	r3, sp, #124	@ 0x7c
 801dd12:	a91d      	add	r1, sp, #116	@ 0x74
 801dd14:	f002 fd62 	bl	80207dc <__gethex>
 801dd18:	230f      	movs	r3, #15
 801dd1a:	0002      	movs	r2, r0
 801dd1c:	401a      	ands	r2, r3
 801dd1e:	0004      	movs	r4, r0
 801dd20:	9206      	str	r2, [sp, #24]
 801dd22:	4218      	tst	r0, r3
 801dd24:	d005      	beq.n	801dd32 <_strtod_l+0x76>
 801dd26:	2a06      	cmp	r2, #6
 801dd28:	d12b      	bne.n	801dd82 <_strtod_l+0xc6>
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	3501      	adds	r5, #1
 801dd2e:	951d      	str	r5, [sp, #116]	@ 0x74
 801dd30:	9312      	str	r3, [sp, #72]	@ 0x48
 801dd32:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d002      	beq.n	801dd3e <_strtod_l+0x82>
 801dd38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dd3c:	6013      	str	r3, [r2, #0]
 801dd3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d019      	beq.n	801dd78 <_strtod_l+0xbc>
 801dd44:	2380      	movs	r3, #128	@ 0x80
 801dd46:	0030      	movs	r0, r6
 801dd48:	061b      	lsls	r3, r3, #24
 801dd4a:	18f9      	adds	r1, r7, r3
 801dd4c:	b023      	add	sp, #140	@ 0x8c
 801dd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd50:	2a20      	cmp	r2, #32
 801dd52:	d1c7      	bne.n	801dce4 <_strtod_l+0x28>
 801dd54:	3101      	adds	r1, #1
 801dd56:	e7ba      	b.n	801dcce <_strtod_l+0x12>
 801dd58:	2a2d      	cmp	r2, #45	@ 0x2d
 801dd5a:	d1c3      	bne.n	801dce4 <_strtod_l+0x28>
 801dd5c:	3a2c      	subs	r2, #44	@ 0x2c
 801dd5e:	9212      	str	r2, [sp, #72]	@ 0x48
 801dd60:	1c4a      	adds	r2, r1, #1
 801dd62:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd64:	784a      	ldrb	r2, [r1, #1]
 801dd66:	2a00      	cmp	r2, #0
 801dd68:	d1be      	bne.n	801dce8 <_strtod_l+0x2c>
 801dd6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd6c:	931d      	str	r3, [sp, #116]	@ 0x74
 801dd6e:	2300      	movs	r3, #0
 801dd70:	9312      	str	r3, [sp, #72]	@ 0x48
 801dd72:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d1df      	bne.n	801dd38 <_strtod_l+0x7c>
 801dd78:	0030      	movs	r0, r6
 801dd7a:	0039      	movs	r1, r7
 801dd7c:	e7e6      	b.n	801dd4c <_strtod_l+0x90>
 801dd7e:	2200      	movs	r2, #0
 801dd80:	e7ed      	b.n	801dd5e <_strtod_l+0xa2>
 801dd82:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801dd84:	2a00      	cmp	r2, #0
 801dd86:	d007      	beq.n	801dd98 <_strtod_l+0xdc>
 801dd88:	2135      	movs	r1, #53	@ 0x35
 801dd8a:	a820      	add	r0, sp, #128	@ 0x80
 801dd8c:	f003 fd6c 	bl	8021868 <__copybits>
 801dd90:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dd92:	9805      	ldr	r0, [sp, #20]
 801dd94:	f003 f926 	bl	8020fe4 <_Bfree>
 801dd98:	9806      	ldr	r0, [sp, #24]
 801dd9a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dd9c:	3801      	subs	r0, #1
 801dd9e:	2804      	cmp	r0, #4
 801dda0:	d806      	bhi.n	801ddb0 <_strtod_l+0xf4>
 801dda2:	f7e2 f9eb 	bl	800017c <__gnu_thumb1_case_uqi>
 801dda6:	0312      	.short	0x0312
 801dda8:	1e1c      	.short	0x1e1c
 801ddaa:	12          	.byte	0x12
 801ddab:	00          	.byte	0x00
 801ddac:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ddae:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ddb0:	05e4      	lsls	r4, r4, #23
 801ddb2:	d502      	bpl.n	801ddba <_strtod_l+0xfe>
 801ddb4:	2380      	movs	r3, #128	@ 0x80
 801ddb6:	061b      	lsls	r3, r3, #24
 801ddb8:	431f      	orrs	r7, r3
 801ddba:	4b69      	ldr	r3, [pc, #420]	@ (801df60 <_strtod_l+0x2a4>)
 801ddbc:	423b      	tst	r3, r7
 801ddbe:	d1b8      	bne.n	801dd32 <_strtod_l+0x76>
 801ddc0:	f001 fd90 	bl	801f8e4 <__errno>
 801ddc4:	2322      	movs	r3, #34	@ 0x22
 801ddc6:	6003      	str	r3, [r0, #0]
 801ddc8:	e7b3      	b.n	801dd32 <_strtod_l+0x76>
 801ddca:	4966      	ldr	r1, [pc, #408]	@ (801df64 <_strtod_l+0x2a8>)
 801ddcc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ddce:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ddd0:	400a      	ands	r2, r1
 801ddd2:	4965      	ldr	r1, [pc, #404]	@ (801df68 <_strtod_l+0x2ac>)
 801ddd4:	185b      	adds	r3, r3, r1
 801ddd6:	051b      	lsls	r3, r3, #20
 801ddd8:	431a      	orrs	r2, r3
 801ddda:	0017      	movs	r7, r2
 801dddc:	e7e8      	b.n	801ddb0 <_strtod_l+0xf4>
 801ddde:	4f60      	ldr	r7, [pc, #384]	@ (801df60 <_strtod_l+0x2a4>)
 801dde0:	e7e6      	b.n	801ddb0 <_strtod_l+0xf4>
 801dde2:	2601      	movs	r6, #1
 801dde4:	4f61      	ldr	r7, [pc, #388]	@ (801df6c <_strtod_l+0x2b0>)
 801dde6:	4276      	negs	r6, r6
 801dde8:	e7e2      	b.n	801ddb0 <_strtod_l+0xf4>
 801ddea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ddec:	1c5a      	adds	r2, r3, #1
 801ddee:	921d      	str	r2, [sp, #116]	@ 0x74
 801ddf0:	785b      	ldrb	r3, [r3, #1]
 801ddf2:	2b30      	cmp	r3, #48	@ 0x30
 801ddf4:	d0f9      	beq.n	801ddea <_strtod_l+0x12e>
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	d09b      	beq.n	801dd32 <_strtod_l+0x76>
 801ddfa:	2301      	movs	r3, #1
 801ddfc:	930c      	str	r3, [sp, #48]	@ 0x30
 801ddfe:	2500      	movs	r5, #0
 801de00:	220a      	movs	r2, #10
 801de02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de04:	950d      	str	r5, [sp, #52]	@ 0x34
 801de06:	9313      	str	r3, [sp, #76]	@ 0x4c
 801de08:	9508      	str	r5, [sp, #32]
 801de0a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801de0c:	7804      	ldrb	r4, [r0, #0]
 801de0e:	0023      	movs	r3, r4
 801de10:	3b30      	subs	r3, #48	@ 0x30
 801de12:	b2d9      	uxtb	r1, r3
 801de14:	2909      	cmp	r1, #9
 801de16:	d927      	bls.n	801de68 <_strtod_l+0x1ac>
 801de18:	2201      	movs	r2, #1
 801de1a:	4955      	ldr	r1, [pc, #340]	@ (801df70 <_strtod_l+0x2b4>)
 801de1c:	f001 fcd4 	bl	801f7c8 <strncmp>
 801de20:	2800      	cmp	r0, #0
 801de22:	d031      	beq.n	801de88 <_strtod_l+0x1cc>
 801de24:	2000      	movs	r0, #0
 801de26:	0023      	movs	r3, r4
 801de28:	4684      	mov	ip, r0
 801de2a:	9a08      	ldr	r2, [sp, #32]
 801de2c:	900e      	str	r0, [sp, #56]	@ 0x38
 801de2e:	9206      	str	r2, [sp, #24]
 801de30:	2220      	movs	r2, #32
 801de32:	0019      	movs	r1, r3
 801de34:	4391      	bics	r1, r2
 801de36:	000a      	movs	r2, r1
 801de38:	2100      	movs	r1, #0
 801de3a:	9107      	str	r1, [sp, #28]
 801de3c:	2a45      	cmp	r2, #69	@ 0x45
 801de3e:	d000      	beq.n	801de42 <_strtod_l+0x186>
 801de40:	e0c0      	b.n	801dfc4 <_strtod_l+0x308>
 801de42:	9b06      	ldr	r3, [sp, #24]
 801de44:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801de46:	4303      	orrs	r3, r0
 801de48:	4313      	orrs	r3, r2
 801de4a:	428b      	cmp	r3, r1
 801de4c:	d08d      	beq.n	801dd6a <_strtod_l+0xae>
 801de4e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de50:	9309      	str	r3, [sp, #36]	@ 0x24
 801de52:	3301      	adds	r3, #1
 801de54:	931d      	str	r3, [sp, #116]	@ 0x74
 801de56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de58:	785b      	ldrb	r3, [r3, #1]
 801de5a:	2b2b      	cmp	r3, #43	@ 0x2b
 801de5c:	d070      	beq.n	801df40 <_strtod_l+0x284>
 801de5e:	000c      	movs	r4, r1
 801de60:	2b2d      	cmp	r3, #45	@ 0x2d
 801de62:	d173      	bne.n	801df4c <_strtod_l+0x290>
 801de64:	2401      	movs	r4, #1
 801de66:	e06c      	b.n	801df42 <_strtod_l+0x286>
 801de68:	9908      	ldr	r1, [sp, #32]
 801de6a:	2908      	cmp	r1, #8
 801de6c:	dc09      	bgt.n	801de82 <_strtod_l+0x1c6>
 801de6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801de70:	4351      	muls	r1, r2
 801de72:	185b      	adds	r3, r3, r1
 801de74:	930d      	str	r3, [sp, #52]	@ 0x34
 801de76:	9b08      	ldr	r3, [sp, #32]
 801de78:	3001      	adds	r0, #1
 801de7a:	3301      	adds	r3, #1
 801de7c:	9308      	str	r3, [sp, #32]
 801de7e:	901d      	str	r0, [sp, #116]	@ 0x74
 801de80:	e7c3      	b.n	801de0a <_strtod_l+0x14e>
 801de82:	4355      	muls	r5, r2
 801de84:	195d      	adds	r5, r3, r5
 801de86:	e7f6      	b.n	801de76 <_strtod_l+0x1ba>
 801de88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de8a:	1c5a      	adds	r2, r3, #1
 801de8c:	921d      	str	r2, [sp, #116]	@ 0x74
 801de8e:	9a08      	ldr	r2, [sp, #32]
 801de90:	785b      	ldrb	r3, [r3, #1]
 801de92:	2a00      	cmp	r2, #0
 801de94:	d03a      	beq.n	801df0c <_strtod_l+0x250>
 801de96:	900e      	str	r0, [sp, #56]	@ 0x38
 801de98:	9206      	str	r2, [sp, #24]
 801de9a:	001a      	movs	r2, r3
 801de9c:	3a30      	subs	r2, #48	@ 0x30
 801de9e:	2a09      	cmp	r2, #9
 801dea0:	d912      	bls.n	801dec8 <_strtod_l+0x20c>
 801dea2:	2201      	movs	r2, #1
 801dea4:	4694      	mov	ip, r2
 801dea6:	e7c3      	b.n	801de30 <_strtod_l+0x174>
 801dea8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801deaa:	3001      	adds	r0, #1
 801deac:	1c5a      	adds	r2, r3, #1
 801deae:	921d      	str	r2, [sp, #116]	@ 0x74
 801deb0:	785b      	ldrb	r3, [r3, #1]
 801deb2:	2b30      	cmp	r3, #48	@ 0x30
 801deb4:	d0f8      	beq.n	801dea8 <_strtod_l+0x1ec>
 801deb6:	001a      	movs	r2, r3
 801deb8:	3a31      	subs	r2, #49	@ 0x31
 801deba:	2a08      	cmp	r2, #8
 801debc:	d83b      	bhi.n	801df36 <_strtod_l+0x27a>
 801debe:	900e      	str	r0, [sp, #56]	@ 0x38
 801dec0:	2000      	movs	r0, #0
 801dec2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801dec4:	9006      	str	r0, [sp, #24]
 801dec6:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dec8:	001a      	movs	r2, r3
 801deca:	1c41      	adds	r1, r0, #1
 801decc:	3a30      	subs	r2, #48	@ 0x30
 801dece:	2b30      	cmp	r3, #48	@ 0x30
 801ded0:	d016      	beq.n	801df00 <_strtod_l+0x244>
 801ded2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ded4:	185b      	adds	r3, r3, r1
 801ded6:	930e      	str	r3, [sp, #56]	@ 0x38
 801ded8:	9b06      	ldr	r3, [sp, #24]
 801deda:	210a      	movs	r1, #10
 801dedc:	469c      	mov	ip, r3
 801dede:	4484      	add	ip, r0
 801dee0:	459c      	cmp	ip, r3
 801dee2:	d115      	bne.n	801df10 <_strtod_l+0x254>
 801dee4:	9906      	ldr	r1, [sp, #24]
 801dee6:	9b06      	ldr	r3, [sp, #24]
 801dee8:	3101      	adds	r1, #1
 801deea:	1809      	adds	r1, r1, r0
 801deec:	181b      	adds	r3, r3, r0
 801deee:	9106      	str	r1, [sp, #24]
 801def0:	2b08      	cmp	r3, #8
 801def2:	dc19      	bgt.n	801df28 <_strtod_l+0x26c>
 801def4:	230a      	movs	r3, #10
 801def6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801def8:	434b      	muls	r3, r1
 801defa:	2100      	movs	r1, #0
 801defc:	18d3      	adds	r3, r2, r3
 801defe:	930d      	str	r3, [sp, #52]	@ 0x34
 801df00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df02:	0008      	movs	r0, r1
 801df04:	1c5a      	adds	r2, r3, #1
 801df06:	921d      	str	r2, [sp, #116]	@ 0x74
 801df08:	785b      	ldrb	r3, [r3, #1]
 801df0a:	e7c6      	b.n	801de9a <_strtod_l+0x1de>
 801df0c:	9808      	ldr	r0, [sp, #32]
 801df0e:	e7d0      	b.n	801deb2 <_strtod_l+0x1f6>
 801df10:	1c5c      	adds	r4, r3, #1
 801df12:	2b08      	cmp	r3, #8
 801df14:	dc04      	bgt.n	801df20 <_strtod_l+0x264>
 801df16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df18:	434b      	muls	r3, r1
 801df1a:	930d      	str	r3, [sp, #52]	@ 0x34
 801df1c:	0023      	movs	r3, r4
 801df1e:	e7df      	b.n	801dee0 <_strtod_l+0x224>
 801df20:	2c10      	cmp	r4, #16
 801df22:	dcfb      	bgt.n	801df1c <_strtod_l+0x260>
 801df24:	434d      	muls	r5, r1
 801df26:	e7f9      	b.n	801df1c <_strtod_l+0x260>
 801df28:	2100      	movs	r1, #0
 801df2a:	2b0f      	cmp	r3, #15
 801df2c:	dce8      	bgt.n	801df00 <_strtod_l+0x244>
 801df2e:	230a      	movs	r3, #10
 801df30:	435d      	muls	r5, r3
 801df32:	1955      	adds	r5, r2, r5
 801df34:	e7e4      	b.n	801df00 <_strtod_l+0x244>
 801df36:	2200      	movs	r2, #0
 801df38:	920e      	str	r2, [sp, #56]	@ 0x38
 801df3a:	9206      	str	r2, [sp, #24]
 801df3c:	3201      	adds	r2, #1
 801df3e:	e7b1      	b.n	801dea4 <_strtod_l+0x1e8>
 801df40:	2400      	movs	r4, #0
 801df42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df44:	3302      	adds	r3, #2
 801df46:	931d      	str	r3, [sp, #116]	@ 0x74
 801df48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df4a:	789b      	ldrb	r3, [r3, #2]
 801df4c:	001a      	movs	r2, r3
 801df4e:	3a30      	subs	r2, #48	@ 0x30
 801df50:	2a09      	cmp	r2, #9
 801df52:	d913      	bls.n	801df7c <_strtod_l+0x2c0>
 801df54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df56:	921d      	str	r2, [sp, #116]	@ 0x74
 801df58:	2200      	movs	r2, #0
 801df5a:	e032      	b.n	801dfc2 <_strtod_l+0x306>
 801df5c:	08024e44 	.word	0x08024e44
 801df60:	7ff00000 	.word	0x7ff00000
 801df64:	ffefffff 	.word	0xffefffff
 801df68:	00000433 	.word	0x00000433
 801df6c:	7fffffff 	.word	0x7fffffff
 801df70:	08024e2c 	.word	0x08024e2c
 801df74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df76:	1c5a      	adds	r2, r3, #1
 801df78:	921d      	str	r2, [sp, #116]	@ 0x74
 801df7a:	785b      	ldrb	r3, [r3, #1]
 801df7c:	2b30      	cmp	r3, #48	@ 0x30
 801df7e:	d0f9      	beq.n	801df74 <_strtod_l+0x2b8>
 801df80:	2200      	movs	r2, #0
 801df82:	9207      	str	r2, [sp, #28]
 801df84:	001a      	movs	r2, r3
 801df86:	3a31      	subs	r2, #49	@ 0x31
 801df88:	2a08      	cmp	r2, #8
 801df8a:	d81b      	bhi.n	801dfc4 <_strtod_l+0x308>
 801df8c:	3b30      	subs	r3, #48	@ 0x30
 801df8e:	9310      	str	r3, [sp, #64]	@ 0x40
 801df90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df92:	9307      	str	r3, [sp, #28]
 801df94:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801df96:	1c59      	adds	r1, r3, #1
 801df98:	911d      	str	r1, [sp, #116]	@ 0x74
 801df9a:	785b      	ldrb	r3, [r3, #1]
 801df9c:	001a      	movs	r2, r3
 801df9e:	3a30      	subs	r2, #48	@ 0x30
 801dfa0:	2a09      	cmp	r2, #9
 801dfa2:	d93a      	bls.n	801e01a <_strtod_l+0x35e>
 801dfa4:	9a07      	ldr	r2, [sp, #28]
 801dfa6:	1a8a      	subs	r2, r1, r2
 801dfa8:	49b4      	ldr	r1, [pc, #720]	@ (801e27c <_strtod_l+0x5c0>)
 801dfaa:	9107      	str	r1, [sp, #28]
 801dfac:	2a08      	cmp	r2, #8
 801dfae:	dc04      	bgt.n	801dfba <_strtod_l+0x2fe>
 801dfb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dfb2:	9207      	str	r2, [sp, #28]
 801dfb4:	428a      	cmp	r2, r1
 801dfb6:	dd00      	ble.n	801dfba <_strtod_l+0x2fe>
 801dfb8:	9107      	str	r1, [sp, #28]
 801dfba:	2c00      	cmp	r4, #0
 801dfbc:	d002      	beq.n	801dfc4 <_strtod_l+0x308>
 801dfbe:	9a07      	ldr	r2, [sp, #28]
 801dfc0:	4252      	negs	r2, r2
 801dfc2:	9207      	str	r2, [sp, #28]
 801dfc4:	9a06      	ldr	r2, [sp, #24]
 801dfc6:	2a00      	cmp	r2, #0
 801dfc8:	d14d      	bne.n	801e066 <_strtod_l+0x3aa>
 801dfca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dfcc:	4310      	orrs	r0, r2
 801dfce:	d000      	beq.n	801dfd2 <_strtod_l+0x316>
 801dfd0:	e6af      	b.n	801dd32 <_strtod_l+0x76>
 801dfd2:	4662      	mov	r2, ip
 801dfd4:	2a00      	cmp	r2, #0
 801dfd6:	d000      	beq.n	801dfda <_strtod_l+0x31e>
 801dfd8:	e6c7      	b.n	801dd6a <_strtod_l+0xae>
 801dfda:	2b69      	cmp	r3, #105	@ 0x69
 801dfdc:	d027      	beq.n	801e02e <_strtod_l+0x372>
 801dfde:	dc23      	bgt.n	801e028 <_strtod_l+0x36c>
 801dfe0:	2b49      	cmp	r3, #73	@ 0x49
 801dfe2:	d024      	beq.n	801e02e <_strtod_l+0x372>
 801dfe4:	2b4e      	cmp	r3, #78	@ 0x4e
 801dfe6:	d000      	beq.n	801dfea <_strtod_l+0x32e>
 801dfe8:	e6bf      	b.n	801dd6a <_strtod_l+0xae>
 801dfea:	49a5      	ldr	r1, [pc, #660]	@ (801e280 <_strtod_l+0x5c4>)
 801dfec:	a81d      	add	r0, sp, #116	@ 0x74
 801dfee:	f002 fe2b 	bl	8020c48 <__match>
 801dff2:	2800      	cmp	r0, #0
 801dff4:	d100      	bne.n	801dff8 <_strtod_l+0x33c>
 801dff6:	e6b8      	b.n	801dd6a <_strtod_l+0xae>
 801dff8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dffa:	781b      	ldrb	r3, [r3, #0]
 801dffc:	2b28      	cmp	r3, #40	@ 0x28
 801dffe:	d12c      	bne.n	801e05a <_strtod_l+0x39e>
 801e000:	49a0      	ldr	r1, [pc, #640]	@ (801e284 <_strtod_l+0x5c8>)
 801e002:	aa20      	add	r2, sp, #128	@ 0x80
 801e004:	a81d      	add	r0, sp, #116	@ 0x74
 801e006:	f002 fe33 	bl	8020c70 <__hexnan>
 801e00a:	2805      	cmp	r0, #5
 801e00c:	d125      	bne.n	801e05a <_strtod_l+0x39e>
 801e00e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e010:	4a9d      	ldr	r2, [pc, #628]	@ (801e288 <_strtod_l+0x5cc>)
 801e012:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e014:	431a      	orrs	r2, r3
 801e016:	0017      	movs	r7, r2
 801e018:	e68b      	b.n	801dd32 <_strtod_l+0x76>
 801e01a:	220a      	movs	r2, #10
 801e01c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e01e:	434a      	muls	r2, r1
 801e020:	18d2      	adds	r2, r2, r3
 801e022:	3a30      	subs	r2, #48	@ 0x30
 801e024:	9210      	str	r2, [sp, #64]	@ 0x40
 801e026:	e7b5      	b.n	801df94 <_strtod_l+0x2d8>
 801e028:	2b6e      	cmp	r3, #110	@ 0x6e
 801e02a:	d0de      	beq.n	801dfea <_strtod_l+0x32e>
 801e02c:	e69d      	b.n	801dd6a <_strtod_l+0xae>
 801e02e:	4997      	ldr	r1, [pc, #604]	@ (801e28c <_strtod_l+0x5d0>)
 801e030:	a81d      	add	r0, sp, #116	@ 0x74
 801e032:	f002 fe09 	bl	8020c48 <__match>
 801e036:	2800      	cmp	r0, #0
 801e038:	d100      	bne.n	801e03c <_strtod_l+0x380>
 801e03a:	e696      	b.n	801dd6a <_strtod_l+0xae>
 801e03c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e03e:	4994      	ldr	r1, [pc, #592]	@ (801e290 <_strtod_l+0x5d4>)
 801e040:	3b01      	subs	r3, #1
 801e042:	a81d      	add	r0, sp, #116	@ 0x74
 801e044:	931d      	str	r3, [sp, #116]	@ 0x74
 801e046:	f002 fdff 	bl	8020c48 <__match>
 801e04a:	2800      	cmp	r0, #0
 801e04c:	d102      	bne.n	801e054 <_strtod_l+0x398>
 801e04e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e050:	3301      	adds	r3, #1
 801e052:	931d      	str	r3, [sp, #116]	@ 0x74
 801e054:	2600      	movs	r6, #0
 801e056:	4f8c      	ldr	r7, [pc, #560]	@ (801e288 <_strtod_l+0x5cc>)
 801e058:	e66b      	b.n	801dd32 <_strtod_l+0x76>
 801e05a:	488e      	ldr	r0, [pc, #568]	@ (801e294 <_strtod_l+0x5d8>)
 801e05c:	f001 fc84 	bl	801f968 <nan>
 801e060:	0006      	movs	r6, r0
 801e062:	000f      	movs	r7, r1
 801e064:	e665      	b.n	801dd32 <_strtod_l+0x76>
 801e066:	9b07      	ldr	r3, [sp, #28]
 801e068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e06a:	1a9b      	subs	r3, r3, r2
 801e06c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e06e:	9b08      	ldr	r3, [sp, #32]
 801e070:	2b00      	cmp	r3, #0
 801e072:	d101      	bne.n	801e078 <_strtod_l+0x3bc>
 801e074:	9b06      	ldr	r3, [sp, #24]
 801e076:	9308      	str	r3, [sp, #32]
 801e078:	9c06      	ldr	r4, [sp, #24]
 801e07a:	2c10      	cmp	r4, #16
 801e07c:	dd00      	ble.n	801e080 <_strtod_l+0x3c4>
 801e07e:	2410      	movs	r4, #16
 801e080:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e082:	f7e5 f9cb 	bl	800341c <__aeabi_ui2d>
 801e086:	9b06      	ldr	r3, [sp, #24]
 801e088:	0006      	movs	r6, r0
 801e08a:	000f      	movs	r7, r1
 801e08c:	2b09      	cmp	r3, #9
 801e08e:	dc13      	bgt.n	801e0b8 <_strtod_l+0x3fc>
 801e090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e092:	2b00      	cmp	r3, #0
 801e094:	d100      	bne.n	801e098 <_strtod_l+0x3dc>
 801e096:	e64c      	b.n	801dd32 <_strtod_l+0x76>
 801e098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	dc00      	bgt.n	801e0a0 <_strtod_l+0x3e4>
 801e09e:	e07e      	b.n	801e19e <_strtod_l+0x4e2>
 801e0a0:	2b16      	cmp	r3, #22
 801e0a2:	dc63      	bgt.n	801e16c <_strtod_l+0x4b0>
 801e0a4:	497c      	ldr	r1, [pc, #496]	@ (801e298 <_strtod_l+0x5dc>)
 801e0a6:	00db      	lsls	r3, r3, #3
 801e0a8:	18c9      	adds	r1, r1, r3
 801e0aa:	0032      	movs	r2, r6
 801e0ac:	6808      	ldr	r0, [r1, #0]
 801e0ae:	6849      	ldr	r1, [r1, #4]
 801e0b0:	003b      	movs	r3, r7
 801e0b2:	f7e4 fac3 	bl	800263c <__aeabi_dmul>
 801e0b6:	e7d3      	b.n	801e060 <_strtod_l+0x3a4>
 801e0b8:	0022      	movs	r2, r4
 801e0ba:	4b77      	ldr	r3, [pc, #476]	@ (801e298 <_strtod_l+0x5dc>)
 801e0bc:	3a09      	subs	r2, #9
 801e0be:	00d2      	lsls	r2, r2, #3
 801e0c0:	189b      	adds	r3, r3, r2
 801e0c2:	681a      	ldr	r2, [r3, #0]
 801e0c4:	685b      	ldr	r3, [r3, #4]
 801e0c6:	f7e4 fab9 	bl	800263c <__aeabi_dmul>
 801e0ca:	0006      	movs	r6, r0
 801e0cc:	0028      	movs	r0, r5
 801e0ce:	000f      	movs	r7, r1
 801e0d0:	f7e5 f9a4 	bl	800341c <__aeabi_ui2d>
 801e0d4:	000b      	movs	r3, r1
 801e0d6:	0002      	movs	r2, r0
 801e0d8:	0039      	movs	r1, r7
 801e0da:	0030      	movs	r0, r6
 801e0dc:	f7e3 fb06 	bl	80016ec <__aeabi_dadd>
 801e0e0:	9b06      	ldr	r3, [sp, #24]
 801e0e2:	0006      	movs	r6, r0
 801e0e4:	000f      	movs	r7, r1
 801e0e6:	2b0f      	cmp	r3, #15
 801e0e8:	ddd2      	ble.n	801e090 <_strtod_l+0x3d4>
 801e0ea:	9b06      	ldr	r3, [sp, #24]
 801e0ec:	1b1c      	subs	r4, r3, r4
 801e0ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0f0:	18e4      	adds	r4, r4, r3
 801e0f2:	2c00      	cmp	r4, #0
 801e0f4:	dc00      	bgt.n	801e0f8 <_strtod_l+0x43c>
 801e0f6:	e09b      	b.n	801e230 <_strtod_l+0x574>
 801e0f8:	220f      	movs	r2, #15
 801e0fa:	0023      	movs	r3, r4
 801e0fc:	4013      	ands	r3, r2
 801e0fe:	4214      	tst	r4, r2
 801e100:	d00a      	beq.n	801e118 <_strtod_l+0x45c>
 801e102:	4965      	ldr	r1, [pc, #404]	@ (801e298 <_strtod_l+0x5dc>)
 801e104:	00db      	lsls	r3, r3, #3
 801e106:	18c9      	adds	r1, r1, r3
 801e108:	0032      	movs	r2, r6
 801e10a:	6808      	ldr	r0, [r1, #0]
 801e10c:	6849      	ldr	r1, [r1, #4]
 801e10e:	003b      	movs	r3, r7
 801e110:	f7e4 fa94 	bl	800263c <__aeabi_dmul>
 801e114:	0006      	movs	r6, r0
 801e116:	000f      	movs	r7, r1
 801e118:	230f      	movs	r3, #15
 801e11a:	439c      	bics	r4, r3
 801e11c:	d073      	beq.n	801e206 <_strtod_l+0x54a>
 801e11e:	3326      	adds	r3, #38	@ 0x26
 801e120:	33ff      	adds	r3, #255	@ 0xff
 801e122:	429c      	cmp	r4, r3
 801e124:	dd4b      	ble.n	801e1be <_strtod_l+0x502>
 801e126:	2300      	movs	r3, #0
 801e128:	9306      	str	r3, [sp, #24]
 801e12a:	9307      	str	r3, [sp, #28]
 801e12c:	930d      	str	r3, [sp, #52]	@ 0x34
 801e12e:	9308      	str	r3, [sp, #32]
 801e130:	2322      	movs	r3, #34	@ 0x22
 801e132:	2600      	movs	r6, #0
 801e134:	9a05      	ldr	r2, [sp, #20]
 801e136:	4f54      	ldr	r7, [pc, #336]	@ (801e288 <_strtod_l+0x5cc>)
 801e138:	6013      	str	r3, [r2, #0]
 801e13a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e13c:	42b3      	cmp	r3, r6
 801e13e:	d100      	bne.n	801e142 <_strtod_l+0x486>
 801e140:	e5f7      	b.n	801dd32 <_strtod_l+0x76>
 801e142:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e144:	9805      	ldr	r0, [sp, #20]
 801e146:	f002 ff4d 	bl	8020fe4 <_Bfree>
 801e14a:	9908      	ldr	r1, [sp, #32]
 801e14c:	9805      	ldr	r0, [sp, #20]
 801e14e:	f002 ff49 	bl	8020fe4 <_Bfree>
 801e152:	9907      	ldr	r1, [sp, #28]
 801e154:	9805      	ldr	r0, [sp, #20]
 801e156:	f002 ff45 	bl	8020fe4 <_Bfree>
 801e15a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e15c:	9805      	ldr	r0, [sp, #20]
 801e15e:	f002 ff41 	bl	8020fe4 <_Bfree>
 801e162:	9906      	ldr	r1, [sp, #24]
 801e164:	9805      	ldr	r0, [sp, #20]
 801e166:	f002 ff3d 	bl	8020fe4 <_Bfree>
 801e16a:	e5e2      	b.n	801dd32 <_strtod_l+0x76>
 801e16c:	2325      	movs	r3, #37	@ 0x25
 801e16e:	9a06      	ldr	r2, [sp, #24]
 801e170:	1a9b      	subs	r3, r3, r2
 801e172:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e174:	4293      	cmp	r3, r2
 801e176:	dbb8      	blt.n	801e0ea <_strtod_l+0x42e>
 801e178:	240f      	movs	r4, #15
 801e17a:	9b06      	ldr	r3, [sp, #24]
 801e17c:	4d46      	ldr	r5, [pc, #280]	@ (801e298 <_strtod_l+0x5dc>)
 801e17e:	1ae4      	subs	r4, r4, r3
 801e180:	00e1      	lsls	r1, r4, #3
 801e182:	1869      	adds	r1, r5, r1
 801e184:	0032      	movs	r2, r6
 801e186:	6808      	ldr	r0, [r1, #0]
 801e188:	6849      	ldr	r1, [r1, #4]
 801e18a:	003b      	movs	r3, r7
 801e18c:	f7e4 fa56 	bl	800263c <__aeabi_dmul>
 801e190:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e192:	1b1c      	subs	r4, r3, r4
 801e194:	00e4      	lsls	r4, r4, #3
 801e196:	192d      	adds	r5, r5, r4
 801e198:	682a      	ldr	r2, [r5, #0]
 801e19a:	686b      	ldr	r3, [r5, #4]
 801e19c:	e789      	b.n	801e0b2 <_strtod_l+0x3f6>
 801e19e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e1a0:	3316      	adds	r3, #22
 801e1a2:	dba2      	blt.n	801e0ea <_strtod_l+0x42e>
 801e1a4:	9907      	ldr	r1, [sp, #28]
 801e1a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1a8:	4b3b      	ldr	r3, [pc, #236]	@ (801e298 <_strtod_l+0x5dc>)
 801e1aa:	1a52      	subs	r2, r2, r1
 801e1ac:	00d2      	lsls	r2, r2, #3
 801e1ae:	189b      	adds	r3, r3, r2
 801e1b0:	0030      	movs	r0, r6
 801e1b2:	681a      	ldr	r2, [r3, #0]
 801e1b4:	685b      	ldr	r3, [r3, #4]
 801e1b6:	0039      	movs	r1, r7
 801e1b8:	f7e3 fdfc 	bl	8001db4 <__aeabi_ddiv>
 801e1bc:	e750      	b.n	801e060 <_strtod_l+0x3a4>
 801e1be:	2300      	movs	r3, #0
 801e1c0:	0030      	movs	r0, r6
 801e1c2:	0039      	movs	r1, r7
 801e1c4:	4d35      	ldr	r5, [pc, #212]	@ (801e29c <_strtod_l+0x5e0>)
 801e1c6:	1124      	asrs	r4, r4, #4
 801e1c8:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1ca:	2c01      	cmp	r4, #1
 801e1cc:	dc1e      	bgt.n	801e20c <_strtod_l+0x550>
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d001      	beq.n	801e1d6 <_strtod_l+0x51a>
 801e1d2:	0006      	movs	r6, r0
 801e1d4:	000f      	movs	r7, r1
 801e1d6:	4b32      	ldr	r3, [pc, #200]	@ (801e2a0 <_strtod_l+0x5e4>)
 801e1d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1da:	18ff      	adds	r7, r7, r3
 801e1dc:	4b2f      	ldr	r3, [pc, #188]	@ (801e29c <_strtod_l+0x5e0>)
 801e1de:	00d5      	lsls	r5, r2, #3
 801e1e0:	195d      	adds	r5, r3, r5
 801e1e2:	0032      	movs	r2, r6
 801e1e4:	6828      	ldr	r0, [r5, #0]
 801e1e6:	6869      	ldr	r1, [r5, #4]
 801e1e8:	003b      	movs	r3, r7
 801e1ea:	f7e4 fa27 	bl	800263c <__aeabi_dmul>
 801e1ee:	4b26      	ldr	r3, [pc, #152]	@ (801e288 <_strtod_l+0x5cc>)
 801e1f0:	4a2c      	ldr	r2, [pc, #176]	@ (801e2a4 <_strtod_l+0x5e8>)
 801e1f2:	0006      	movs	r6, r0
 801e1f4:	400b      	ands	r3, r1
 801e1f6:	4293      	cmp	r3, r2
 801e1f8:	d895      	bhi.n	801e126 <_strtod_l+0x46a>
 801e1fa:	4a2b      	ldr	r2, [pc, #172]	@ (801e2a8 <_strtod_l+0x5ec>)
 801e1fc:	4293      	cmp	r3, r2
 801e1fe:	d913      	bls.n	801e228 <_strtod_l+0x56c>
 801e200:	2601      	movs	r6, #1
 801e202:	4f2a      	ldr	r7, [pc, #168]	@ (801e2ac <_strtod_l+0x5f0>)
 801e204:	4276      	negs	r6, r6
 801e206:	2300      	movs	r3, #0
 801e208:	9309      	str	r3, [sp, #36]	@ 0x24
 801e20a:	e086      	b.n	801e31a <_strtod_l+0x65e>
 801e20c:	2201      	movs	r2, #1
 801e20e:	4214      	tst	r4, r2
 801e210:	d004      	beq.n	801e21c <_strtod_l+0x560>
 801e212:	682a      	ldr	r2, [r5, #0]
 801e214:	686b      	ldr	r3, [r5, #4]
 801e216:	f7e4 fa11 	bl	800263c <__aeabi_dmul>
 801e21a:	2301      	movs	r3, #1
 801e21c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e21e:	1064      	asrs	r4, r4, #1
 801e220:	3201      	adds	r2, #1
 801e222:	9209      	str	r2, [sp, #36]	@ 0x24
 801e224:	3508      	adds	r5, #8
 801e226:	e7d0      	b.n	801e1ca <_strtod_l+0x50e>
 801e228:	23d4      	movs	r3, #212	@ 0xd4
 801e22a:	049b      	lsls	r3, r3, #18
 801e22c:	18cf      	adds	r7, r1, r3
 801e22e:	e7ea      	b.n	801e206 <_strtod_l+0x54a>
 801e230:	2c00      	cmp	r4, #0
 801e232:	d0e8      	beq.n	801e206 <_strtod_l+0x54a>
 801e234:	4264      	negs	r4, r4
 801e236:	230f      	movs	r3, #15
 801e238:	0022      	movs	r2, r4
 801e23a:	401a      	ands	r2, r3
 801e23c:	421c      	tst	r4, r3
 801e23e:	d00a      	beq.n	801e256 <_strtod_l+0x59a>
 801e240:	4b15      	ldr	r3, [pc, #84]	@ (801e298 <_strtod_l+0x5dc>)
 801e242:	00d2      	lsls	r2, r2, #3
 801e244:	189b      	adds	r3, r3, r2
 801e246:	0030      	movs	r0, r6
 801e248:	681a      	ldr	r2, [r3, #0]
 801e24a:	685b      	ldr	r3, [r3, #4]
 801e24c:	0039      	movs	r1, r7
 801e24e:	f7e3 fdb1 	bl	8001db4 <__aeabi_ddiv>
 801e252:	0006      	movs	r6, r0
 801e254:	000f      	movs	r7, r1
 801e256:	1124      	asrs	r4, r4, #4
 801e258:	d0d5      	beq.n	801e206 <_strtod_l+0x54a>
 801e25a:	2c1f      	cmp	r4, #31
 801e25c:	dd28      	ble.n	801e2b0 <_strtod_l+0x5f4>
 801e25e:	2300      	movs	r3, #0
 801e260:	9306      	str	r3, [sp, #24]
 801e262:	9307      	str	r3, [sp, #28]
 801e264:	930d      	str	r3, [sp, #52]	@ 0x34
 801e266:	9308      	str	r3, [sp, #32]
 801e268:	2322      	movs	r3, #34	@ 0x22
 801e26a:	9a05      	ldr	r2, [sp, #20]
 801e26c:	2600      	movs	r6, #0
 801e26e:	6013      	str	r3, [r2, #0]
 801e270:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e272:	2700      	movs	r7, #0
 801e274:	2b00      	cmp	r3, #0
 801e276:	d000      	beq.n	801e27a <_strtod_l+0x5be>
 801e278:	e763      	b.n	801e142 <_strtod_l+0x486>
 801e27a:	e55a      	b.n	801dd32 <_strtod_l+0x76>
 801e27c:	00004e1f 	.word	0x00004e1f
 801e280:	08024f8e 	.word	0x08024f8e
 801e284:	08024e30 	.word	0x08024e30
 801e288:	7ff00000 	.word	0x7ff00000
 801e28c:	08024f86 	.word	0x08024f86
 801e290:	08024fc0 	.word	0x08024fc0
 801e294:	0802524c 	.word	0x0802524c
 801e298:	08025138 	.word	0x08025138
 801e29c:	08025110 	.word	0x08025110
 801e2a0:	fcb00000 	.word	0xfcb00000
 801e2a4:	7ca00000 	.word	0x7ca00000
 801e2a8:	7c900000 	.word	0x7c900000
 801e2ac:	7fefffff 	.word	0x7fefffff
 801e2b0:	2310      	movs	r3, #16
 801e2b2:	0022      	movs	r2, r4
 801e2b4:	401a      	ands	r2, r3
 801e2b6:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2b8:	421c      	tst	r4, r3
 801e2ba:	d001      	beq.n	801e2c0 <_strtod_l+0x604>
 801e2bc:	335a      	adds	r3, #90	@ 0x5a
 801e2be:	9309      	str	r3, [sp, #36]	@ 0x24
 801e2c0:	0030      	movs	r0, r6
 801e2c2:	0039      	movs	r1, r7
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	4dbf      	ldr	r5, [pc, #764]	@ (801e5c4 <_strtod_l+0x908>)
 801e2c8:	2201      	movs	r2, #1
 801e2ca:	4214      	tst	r4, r2
 801e2cc:	d004      	beq.n	801e2d8 <_strtod_l+0x61c>
 801e2ce:	682a      	ldr	r2, [r5, #0]
 801e2d0:	686b      	ldr	r3, [r5, #4]
 801e2d2:	f7e4 f9b3 	bl	800263c <__aeabi_dmul>
 801e2d6:	2301      	movs	r3, #1
 801e2d8:	1064      	asrs	r4, r4, #1
 801e2da:	3508      	adds	r5, #8
 801e2dc:	2c00      	cmp	r4, #0
 801e2de:	d1f3      	bne.n	801e2c8 <_strtod_l+0x60c>
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d001      	beq.n	801e2e8 <_strtod_l+0x62c>
 801e2e4:	0006      	movs	r6, r0
 801e2e6:	000f      	movs	r7, r1
 801e2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2ea:	2b00      	cmp	r3, #0
 801e2ec:	d00d      	beq.n	801e30a <_strtod_l+0x64e>
 801e2ee:	236b      	movs	r3, #107	@ 0x6b
 801e2f0:	007a      	lsls	r2, r7, #1
 801e2f2:	0d52      	lsrs	r2, r2, #21
 801e2f4:	0039      	movs	r1, r7
 801e2f6:	1a9b      	subs	r3, r3, r2
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	dd06      	ble.n	801e30a <_strtod_l+0x64e>
 801e2fc:	2b1f      	cmp	r3, #31
 801e2fe:	dd5a      	ble.n	801e3b6 <_strtod_l+0x6fa>
 801e300:	2600      	movs	r6, #0
 801e302:	2b34      	cmp	r3, #52	@ 0x34
 801e304:	dd50      	ble.n	801e3a8 <_strtod_l+0x6ec>
 801e306:	27dc      	movs	r7, #220	@ 0xdc
 801e308:	04bf      	lsls	r7, r7, #18
 801e30a:	2200      	movs	r2, #0
 801e30c:	2300      	movs	r3, #0
 801e30e:	0030      	movs	r0, r6
 801e310:	0039      	movs	r1, r7
 801e312:	f7e2 f8cd 	bl	80004b0 <__aeabi_dcmpeq>
 801e316:	2800      	cmp	r0, #0
 801e318:	d1a1      	bne.n	801e25e <_strtod_l+0x5a2>
 801e31a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e31c:	9a08      	ldr	r2, [sp, #32]
 801e31e:	9300      	str	r3, [sp, #0]
 801e320:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e322:	9b06      	ldr	r3, [sp, #24]
 801e324:	9805      	ldr	r0, [sp, #20]
 801e326:	f002 fec5 	bl	80210b4 <__s2b>
 801e32a:	900d      	str	r0, [sp, #52]	@ 0x34
 801e32c:	2800      	cmp	r0, #0
 801e32e:	d100      	bne.n	801e332 <_strtod_l+0x676>
 801e330:	e6f9      	b.n	801e126 <_strtod_l+0x46a>
 801e332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e334:	9907      	ldr	r1, [sp, #28]
 801e336:	17da      	asrs	r2, r3, #31
 801e338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e33a:	1a5b      	subs	r3, r3, r1
 801e33c:	401a      	ands	r2, r3
 801e33e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e340:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e342:	43db      	mvns	r3, r3
 801e344:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e346:	17db      	asrs	r3, r3, #31
 801e348:	401a      	ands	r2, r3
 801e34a:	2300      	movs	r3, #0
 801e34c:	921a      	str	r2, [sp, #104]	@ 0x68
 801e34e:	9306      	str	r3, [sp, #24]
 801e350:	9307      	str	r3, [sp, #28]
 801e352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e354:	9805      	ldr	r0, [sp, #20]
 801e356:	6859      	ldr	r1, [r3, #4]
 801e358:	f002 fe00 	bl	8020f5c <_Balloc>
 801e35c:	9008      	str	r0, [sp, #32]
 801e35e:	2800      	cmp	r0, #0
 801e360:	d100      	bne.n	801e364 <_strtod_l+0x6a8>
 801e362:	e6e5      	b.n	801e130 <_strtod_l+0x474>
 801e364:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e366:	300c      	adds	r0, #12
 801e368:	0019      	movs	r1, r3
 801e36a:	691a      	ldr	r2, [r3, #16]
 801e36c:	310c      	adds	r1, #12
 801e36e:	3202      	adds	r2, #2
 801e370:	0092      	lsls	r2, r2, #2
 801e372:	f001 faef 	bl	801f954 <memcpy>
 801e376:	ab20      	add	r3, sp, #128	@ 0x80
 801e378:	9301      	str	r3, [sp, #4]
 801e37a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e37c:	9300      	str	r3, [sp, #0]
 801e37e:	0032      	movs	r2, r6
 801e380:	003b      	movs	r3, r7
 801e382:	9805      	ldr	r0, [sp, #20]
 801e384:	9610      	str	r6, [sp, #64]	@ 0x40
 801e386:	9711      	str	r7, [sp, #68]	@ 0x44
 801e388:	f003 f9e4 	bl	8021754 <__d2b>
 801e38c:	901e      	str	r0, [sp, #120]	@ 0x78
 801e38e:	2800      	cmp	r0, #0
 801e390:	d100      	bne.n	801e394 <_strtod_l+0x6d8>
 801e392:	e6cd      	b.n	801e130 <_strtod_l+0x474>
 801e394:	2101      	movs	r1, #1
 801e396:	9805      	ldr	r0, [sp, #20]
 801e398:	f002 ff28 	bl	80211ec <__i2b>
 801e39c:	9007      	str	r0, [sp, #28]
 801e39e:	2800      	cmp	r0, #0
 801e3a0:	d10e      	bne.n	801e3c0 <_strtod_l+0x704>
 801e3a2:	2300      	movs	r3, #0
 801e3a4:	9307      	str	r3, [sp, #28]
 801e3a6:	e6c3      	b.n	801e130 <_strtod_l+0x474>
 801e3a8:	234b      	movs	r3, #75	@ 0x4b
 801e3aa:	1a9a      	subs	r2, r3, r2
 801e3ac:	3b4c      	subs	r3, #76	@ 0x4c
 801e3ae:	4093      	lsls	r3, r2
 801e3b0:	4019      	ands	r1, r3
 801e3b2:	000f      	movs	r7, r1
 801e3b4:	e7a9      	b.n	801e30a <_strtod_l+0x64e>
 801e3b6:	2201      	movs	r2, #1
 801e3b8:	4252      	negs	r2, r2
 801e3ba:	409a      	lsls	r2, r3
 801e3bc:	4016      	ands	r6, r2
 801e3be:	e7a4      	b.n	801e30a <_strtod_l+0x64e>
 801e3c0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e3c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e3c4:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801e3c6:	1ad4      	subs	r4, r2, r3
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	db01      	blt.n	801e3d0 <_strtod_l+0x714>
 801e3cc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e3ce:	195d      	adds	r5, r3, r5
 801e3d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e3d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e3d4:	1a5b      	subs	r3, r3, r1
 801e3d6:	2136      	movs	r1, #54	@ 0x36
 801e3d8:	189b      	adds	r3, r3, r2
 801e3da:	1a8a      	subs	r2, r1, r2
 801e3dc:	497a      	ldr	r1, [pc, #488]	@ (801e5c8 <_strtod_l+0x90c>)
 801e3de:	2001      	movs	r0, #1
 801e3e0:	468c      	mov	ip, r1
 801e3e2:	2100      	movs	r1, #0
 801e3e4:	3b01      	subs	r3, #1
 801e3e6:	9116      	str	r1, [sp, #88]	@ 0x58
 801e3e8:	9014      	str	r0, [sp, #80]	@ 0x50
 801e3ea:	4563      	cmp	r3, ip
 801e3ec:	da06      	bge.n	801e3fc <_strtod_l+0x740>
 801e3ee:	4661      	mov	r1, ip
 801e3f0:	1ac9      	subs	r1, r1, r3
 801e3f2:	1a52      	subs	r2, r2, r1
 801e3f4:	291f      	cmp	r1, #31
 801e3f6:	dc3f      	bgt.n	801e478 <_strtod_l+0x7bc>
 801e3f8:	4088      	lsls	r0, r1
 801e3fa:	9014      	str	r0, [sp, #80]	@ 0x50
 801e3fc:	18ab      	adds	r3, r5, r2
 801e3fe:	930e      	str	r3, [sp, #56]	@ 0x38
 801e400:	18a4      	adds	r4, r4, r2
 801e402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e406:	191c      	adds	r4, r3, r4
 801e408:	002b      	movs	r3, r5
 801e40a:	4295      	cmp	r5, r2
 801e40c:	dd00      	ble.n	801e410 <_strtod_l+0x754>
 801e40e:	0013      	movs	r3, r2
 801e410:	42a3      	cmp	r3, r4
 801e412:	dd00      	ble.n	801e416 <_strtod_l+0x75a>
 801e414:	0023      	movs	r3, r4
 801e416:	2b00      	cmp	r3, #0
 801e418:	dd04      	ble.n	801e424 <_strtod_l+0x768>
 801e41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e41c:	1ae4      	subs	r4, r4, r3
 801e41e:	1ad2      	subs	r2, r2, r3
 801e420:	920e      	str	r2, [sp, #56]	@ 0x38
 801e422:	1aed      	subs	r5, r5, r3
 801e424:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e426:	2b00      	cmp	r3, #0
 801e428:	dd16      	ble.n	801e458 <_strtod_l+0x79c>
 801e42a:	001a      	movs	r2, r3
 801e42c:	9907      	ldr	r1, [sp, #28]
 801e42e:	9805      	ldr	r0, [sp, #20]
 801e430:	f002 ffa6 	bl	8021380 <__pow5mult>
 801e434:	9007      	str	r0, [sp, #28]
 801e436:	2800      	cmp	r0, #0
 801e438:	d0b3      	beq.n	801e3a2 <_strtod_l+0x6e6>
 801e43a:	0001      	movs	r1, r0
 801e43c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e43e:	9805      	ldr	r0, [sp, #20]
 801e440:	f002 feec 	bl	802121c <__multiply>
 801e444:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e446:	2800      	cmp	r0, #0
 801e448:	d100      	bne.n	801e44c <_strtod_l+0x790>
 801e44a:	e671      	b.n	801e130 <_strtod_l+0x474>
 801e44c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e44e:	9805      	ldr	r0, [sp, #20]
 801e450:	f002 fdc8 	bl	8020fe4 <_Bfree>
 801e454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e456:	931e      	str	r3, [sp, #120]	@ 0x78
 801e458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	dc12      	bgt.n	801e484 <_strtod_l+0x7c8>
 801e45e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e460:	2b00      	cmp	r3, #0
 801e462:	dd18      	ble.n	801e496 <_strtod_l+0x7da>
 801e464:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e466:	9908      	ldr	r1, [sp, #32]
 801e468:	9805      	ldr	r0, [sp, #20]
 801e46a:	f002 ff89 	bl	8021380 <__pow5mult>
 801e46e:	9008      	str	r0, [sp, #32]
 801e470:	2800      	cmp	r0, #0
 801e472:	d110      	bne.n	801e496 <_strtod_l+0x7da>
 801e474:	2300      	movs	r3, #0
 801e476:	e65a      	b.n	801e12e <_strtod_l+0x472>
 801e478:	4954      	ldr	r1, [pc, #336]	@ (801e5cc <_strtod_l+0x910>)
 801e47a:	1acb      	subs	r3, r1, r3
 801e47c:	0001      	movs	r1, r0
 801e47e:	4099      	lsls	r1, r3
 801e480:	9116      	str	r1, [sp, #88]	@ 0x58
 801e482:	e7ba      	b.n	801e3fa <_strtod_l+0x73e>
 801e484:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e486:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e488:	9805      	ldr	r0, [sp, #20]
 801e48a:	f002 ffd5 	bl	8021438 <__lshift>
 801e48e:	901e      	str	r0, [sp, #120]	@ 0x78
 801e490:	2800      	cmp	r0, #0
 801e492:	d1e4      	bne.n	801e45e <_strtod_l+0x7a2>
 801e494:	e64c      	b.n	801e130 <_strtod_l+0x474>
 801e496:	2c00      	cmp	r4, #0
 801e498:	dd07      	ble.n	801e4aa <_strtod_l+0x7ee>
 801e49a:	0022      	movs	r2, r4
 801e49c:	9908      	ldr	r1, [sp, #32]
 801e49e:	9805      	ldr	r0, [sp, #20]
 801e4a0:	f002 ffca 	bl	8021438 <__lshift>
 801e4a4:	9008      	str	r0, [sp, #32]
 801e4a6:	2800      	cmp	r0, #0
 801e4a8:	d0e4      	beq.n	801e474 <_strtod_l+0x7b8>
 801e4aa:	2d00      	cmp	r5, #0
 801e4ac:	dd08      	ble.n	801e4c0 <_strtod_l+0x804>
 801e4ae:	002a      	movs	r2, r5
 801e4b0:	9907      	ldr	r1, [sp, #28]
 801e4b2:	9805      	ldr	r0, [sp, #20]
 801e4b4:	f002 ffc0 	bl	8021438 <__lshift>
 801e4b8:	9007      	str	r0, [sp, #28]
 801e4ba:	2800      	cmp	r0, #0
 801e4bc:	d100      	bne.n	801e4c0 <_strtod_l+0x804>
 801e4be:	e637      	b.n	801e130 <_strtod_l+0x474>
 801e4c0:	9a08      	ldr	r2, [sp, #32]
 801e4c2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e4c4:	9805      	ldr	r0, [sp, #20]
 801e4c6:	f003 f83f 	bl	8021548 <__mdiff>
 801e4ca:	9006      	str	r0, [sp, #24]
 801e4cc:	2800      	cmp	r0, #0
 801e4ce:	d100      	bne.n	801e4d2 <_strtod_l+0x816>
 801e4d0:	e62e      	b.n	801e130 <_strtod_l+0x474>
 801e4d2:	68c3      	ldr	r3, [r0, #12]
 801e4d4:	9907      	ldr	r1, [sp, #28]
 801e4d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e4d8:	2300      	movs	r3, #0
 801e4da:	60c3      	str	r3, [r0, #12]
 801e4dc:	f003 f818 	bl	8021510 <__mcmp>
 801e4e0:	2800      	cmp	r0, #0
 801e4e2:	da3b      	bge.n	801e55c <_strtod_l+0x8a0>
 801e4e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4e6:	4333      	orrs	r3, r6
 801e4e8:	d167      	bne.n	801e5ba <_strtod_l+0x8fe>
 801e4ea:	033b      	lsls	r3, r7, #12
 801e4ec:	d165      	bne.n	801e5ba <_strtod_l+0x8fe>
 801e4ee:	22d6      	movs	r2, #214	@ 0xd6
 801e4f0:	4b37      	ldr	r3, [pc, #220]	@ (801e5d0 <_strtod_l+0x914>)
 801e4f2:	04d2      	lsls	r2, r2, #19
 801e4f4:	403b      	ands	r3, r7
 801e4f6:	4293      	cmp	r3, r2
 801e4f8:	d95f      	bls.n	801e5ba <_strtod_l+0x8fe>
 801e4fa:	9b06      	ldr	r3, [sp, #24]
 801e4fc:	695b      	ldr	r3, [r3, #20]
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d103      	bne.n	801e50a <_strtod_l+0x84e>
 801e502:	9b06      	ldr	r3, [sp, #24]
 801e504:	691b      	ldr	r3, [r3, #16]
 801e506:	2b01      	cmp	r3, #1
 801e508:	dd57      	ble.n	801e5ba <_strtod_l+0x8fe>
 801e50a:	9906      	ldr	r1, [sp, #24]
 801e50c:	2201      	movs	r2, #1
 801e50e:	9805      	ldr	r0, [sp, #20]
 801e510:	f002 ff92 	bl	8021438 <__lshift>
 801e514:	9907      	ldr	r1, [sp, #28]
 801e516:	9006      	str	r0, [sp, #24]
 801e518:	f002 fffa 	bl	8021510 <__mcmp>
 801e51c:	2800      	cmp	r0, #0
 801e51e:	dd4c      	ble.n	801e5ba <_strtod_l+0x8fe>
 801e520:	4b2b      	ldr	r3, [pc, #172]	@ (801e5d0 <_strtod_l+0x914>)
 801e522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e524:	403b      	ands	r3, r7
 801e526:	2a00      	cmp	r2, #0
 801e528:	d074      	beq.n	801e614 <_strtod_l+0x958>
 801e52a:	22d6      	movs	r2, #214	@ 0xd6
 801e52c:	04d2      	lsls	r2, r2, #19
 801e52e:	4293      	cmp	r3, r2
 801e530:	d870      	bhi.n	801e614 <_strtod_l+0x958>
 801e532:	22dc      	movs	r2, #220	@ 0xdc
 801e534:	0492      	lsls	r2, r2, #18
 801e536:	4293      	cmp	r3, r2
 801e538:	d800      	bhi.n	801e53c <_strtod_l+0x880>
 801e53a:	e695      	b.n	801e268 <_strtod_l+0x5ac>
 801e53c:	0030      	movs	r0, r6
 801e53e:	0039      	movs	r1, r7
 801e540:	4b24      	ldr	r3, [pc, #144]	@ (801e5d4 <_strtod_l+0x918>)
 801e542:	2200      	movs	r2, #0
 801e544:	f7e4 f87a 	bl	800263c <__aeabi_dmul>
 801e548:	4b21      	ldr	r3, [pc, #132]	@ (801e5d0 <_strtod_l+0x914>)
 801e54a:	0006      	movs	r6, r0
 801e54c:	000f      	movs	r7, r1
 801e54e:	420b      	tst	r3, r1
 801e550:	d000      	beq.n	801e554 <_strtod_l+0x898>
 801e552:	e5f6      	b.n	801e142 <_strtod_l+0x486>
 801e554:	2322      	movs	r3, #34	@ 0x22
 801e556:	9a05      	ldr	r2, [sp, #20]
 801e558:	6013      	str	r3, [r2, #0]
 801e55a:	e5f2      	b.n	801e142 <_strtod_l+0x486>
 801e55c:	970e      	str	r7, [sp, #56]	@ 0x38
 801e55e:	2800      	cmp	r0, #0
 801e560:	d175      	bne.n	801e64e <_strtod_l+0x992>
 801e562:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e564:	033b      	lsls	r3, r7, #12
 801e566:	0b1b      	lsrs	r3, r3, #12
 801e568:	2a00      	cmp	r2, #0
 801e56a:	d039      	beq.n	801e5e0 <_strtod_l+0x924>
 801e56c:	4a1a      	ldr	r2, [pc, #104]	@ (801e5d8 <_strtod_l+0x91c>)
 801e56e:	4293      	cmp	r3, r2
 801e570:	d138      	bne.n	801e5e4 <_strtod_l+0x928>
 801e572:	2101      	movs	r1, #1
 801e574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e576:	4249      	negs	r1, r1
 801e578:	0032      	movs	r2, r6
 801e57a:	0008      	movs	r0, r1
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d00b      	beq.n	801e598 <_strtod_l+0x8dc>
 801e580:	24d4      	movs	r4, #212	@ 0xd4
 801e582:	4b13      	ldr	r3, [pc, #76]	@ (801e5d0 <_strtod_l+0x914>)
 801e584:	0008      	movs	r0, r1
 801e586:	403b      	ands	r3, r7
 801e588:	04e4      	lsls	r4, r4, #19
 801e58a:	42a3      	cmp	r3, r4
 801e58c:	d804      	bhi.n	801e598 <_strtod_l+0x8dc>
 801e58e:	306c      	adds	r0, #108	@ 0x6c
 801e590:	0d1b      	lsrs	r3, r3, #20
 801e592:	1ac3      	subs	r3, r0, r3
 801e594:	4099      	lsls	r1, r3
 801e596:	0008      	movs	r0, r1
 801e598:	4282      	cmp	r2, r0
 801e59a:	d123      	bne.n	801e5e4 <_strtod_l+0x928>
 801e59c:	4b0f      	ldr	r3, [pc, #60]	@ (801e5dc <_strtod_l+0x920>)
 801e59e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e5a0:	4299      	cmp	r1, r3
 801e5a2:	d102      	bne.n	801e5aa <_strtod_l+0x8ee>
 801e5a4:	3201      	adds	r2, #1
 801e5a6:	d100      	bne.n	801e5aa <_strtod_l+0x8ee>
 801e5a8:	e5c2      	b.n	801e130 <_strtod_l+0x474>
 801e5aa:	4b09      	ldr	r3, [pc, #36]	@ (801e5d0 <_strtod_l+0x914>)
 801e5ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e5ae:	2600      	movs	r6, #0
 801e5b0:	401a      	ands	r2, r3
 801e5b2:	0013      	movs	r3, r2
 801e5b4:	2280      	movs	r2, #128	@ 0x80
 801e5b6:	0352      	lsls	r2, r2, #13
 801e5b8:	189f      	adds	r7, r3, r2
 801e5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d1bd      	bne.n	801e53c <_strtod_l+0x880>
 801e5c0:	e5bf      	b.n	801e142 <_strtod_l+0x486>
 801e5c2:	46c0      	nop			@ (mov r8, r8)
 801e5c4:	08024e58 	.word	0x08024e58
 801e5c8:	fffffc02 	.word	0xfffffc02
 801e5cc:	fffffbe2 	.word	0xfffffbe2
 801e5d0:	7ff00000 	.word	0x7ff00000
 801e5d4:	39500000 	.word	0x39500000
 801e5d8:	000fffff 	.word	0x000fffff
 801e5dc:	7fefffff 	.word	0x7fefffff
 801e5e0:	4333      	orrs	r3, r6
 801e5e2:	d09d      	beq.n	801e520 <_strtod_l+0x864>
 801e5e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d01c      	beq.n	801e624 <_strtod_l+0x968>
 801e5ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e5ee:	4213      	tst	r3, r2
 801e5f0:	d0e3      	beq.n	801e5ba <_strtod_l+0x8fe>
 801e5f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5f4:	0030      	movs	r0, r6
 801e5f6:	0039      	movs	r1, r7
 801e5f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d016      	beq.n	801e62c <_strtod_l+0x970>
 801e5fe:	f7ff fb45 	bl	801dc8c <sulp>
 801e602:	0002      	movs	r2, r0
 801e604:	000b      	movs	r3, r1
 801e606:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e608:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e60a:	f7e3 f86f 	bl	80016ec <__aeabi_dadd>
 801e60e:	0006      	movs	r6, r0
 801e610:	000f      	movs	r7, r1
 801e612:	e7d2      	b.n	801e5ba <_strtod_l+0x8fe>
 801e614:	2601      	movs	r6, #1
 801e616:	4a92      	ldr	r2, [pc, #584]	@ (801e860 <_strtod_l+0xba4>)
 801e618:	4276      	negs	r6, r6
 801e61a:	189b      	adds	r3, r3, r2
 801e61c:	4a91      	ldr	r2, [pc, #580]	@ (801e864 <_strtod_l+0xba8>)
 801e61e:	431a      	orrs	r2, r3
 801e620:	0017      	movs	r7, r2
 801e622:	e7ca      	b.n	801e5ba <_strtod_l+0x8fe>
 801e624:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e626:	4233      	tst	r3, r6
 801e628:	d0c7      	beq.n	801e5ba <_strtod_l+0x8fe>
 801e62a:	e7e2      	b.n	801e5f2 <_strtod_l+0x936>
 801e62c:	f7ff fb2e 	bl	801dc8c <sulp>
 801e630:	0002      	movs	r2, r0
 801e632:	000b      	movs	r3, r1
 801e634:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e636:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e638:	f7e4 fac8 	bl	8002bcc <__aeabi_dsub>
 801e63c:	2200      	movs	r2, #0
 801e63e:	2300      	movs	r3, #0
 801e640:	0006      	movs	r6, r0
 801e642:	000f      	movs	r7, r1
 801e644:	f7e1 ff34 	bl	80004b0 <__aeabi_dcmpeq>
 801e648:	2800      	cmp	r0, #0
 801e64a:	d0b6      	beq.n	801e5ba <_strtod_l+0x8fe>
 801e64c:	e60c      	b.n	801e268 <_strtod_l+0x5ac>
 801e64e:	9907      	ldr	r1, [sp, #28]
 801e650:	9806      	ldr	r0, [sp, #24]
 801e652:	f003 f8df 	bl	8021814 <__ratio>
 801e656:	2380      	movs	r3, #128	@ 0x80
 801e658:	2200      	movs	r2, #0
 801e65a:	05db      	lsls	r3, r3, #23
 801e65c:	0004      	movs	r4, r0
 801e65e:	000d      	movs	r5, r1
 801e660:	f7e1 ff36 	bl	80004d0 <__aeabi_dcmple>
 801e664:	2800      	cmp	r0, #0
 801e666:	d06c      	beq.n	801e742 <_strtod_l+0xa86>
 801e668:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d177      	bne.n	801e75e <_strtod_l+0xaa2>
 801e66e:	2e00      	cmp	r6, #0
 801e670:	d157      	bne.n	801e722 <_strtod_l+0xa66>
 801e672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e674:	031b      	lsls	r3, r3, #12
 801e676:	d15a      	bne.n	801e72e <_strtod_l+0xa72>
 801e678:	2200      	movs	r2, #0
 801e67a:	0020      	movs	r0, r4
 801e67c:	0029      	movs	r1, r5
 801e67e:	4b7a      	ldr	r3, [pc, #488]	@ (801e868 <_strtod_l+0xbac>)
 801e680:	f7e1 ff1c 	bl	80004bc <__aeabi_dcmplt>
 801e684:	2800      	cmp	r0, #0
 801e686:	d159      	bne.n	801e73c <_strtod_l+0xa80>
 801e688:	0020      	movs	r0, r4
 801e68a:	0029      	movs	r1, r5
 801e68c:	2200      	movs	r2, #0
 801e68e:	4b77      	ldr	r3, [pc, #476]	@ (801e86c <_strtod_l+0xbb0>)
 801e690:	f7e3 ffd4 	bl	800263c <__aeabi_dmul>
 801e694:	0004      	movs	r4, r0
 801e696:	000d      	movs	r5, r1
 801e698:	2380      	movs	r3, #128	@ 0x80
 801e69a:	061b      	lsls	r3, r3, #24
 801e69c:	18eb      	adds	r3, r5, r3
 801e69e:	940a      	str	r4, [sp, #40]	@ 0x28
 801e6a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e6a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e6a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6a6:	9214      	str	r2, [sp, #80]	@ 0x50
 801e6a8:	9315      	str	r3, [sp, #84]	@ 0x54
 801e6aa:	4a71      	ldr	r2, [pc, #452]	@ (801e870 <_strtod_l+0xbb4>)
 801e6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6ae:	4013      	ands	r3, r2
 801e6b0:	9316      	str	r3, [sp, #88]	@ 0x58
 801e6b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e6b4:	4b6f      	ldr	r3, [pc, #444]	@ (801e874 <_strtod_l+0xbb8>)
 801e6b6:	429a      	cmp	r2, r3
 801e6b8:	d000      	beq.n	801e6bc <_strtod_l+0xa00>
 801e6ba:	e087      	b.n	801e7cc <_strtod_l+0xb10>
 801e6bc:	4a6e      	ldr	r2, [pc, #440]	@ (801e878 <_strtod_l+0xbbc>)
 801e6be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6c0:	4694      	mov	ip, r2
 801e6c2:	4463      	add	r3, ip
 801e6c4:	001f      	movs	r7, r3
 801e6c6:	0030      	movs	r0, r6
 801e6c8:	0019      	movs	r1, r3
 801e6ca:	f002 ffd7 	bl	802167c <__ulp>
 801e6ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e6d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6d2:	f7e3 ffb3 	bl	800263c <__aeabi_dmul>
 801e6d6:	0032      	movs	r2, r6
 801e6d8:	003b      	movs	r3, r7
 801e6da:	f7e3 f807 	bl	80016ec <__aeabi_dadd>
 801e6de:	4a64      	ldr	r2, [pc, #400]	@ (801e870 <_strtod_l+0xbb4>)
 801e6e0:	4b66      	ldr	r3, [pc, #408]	@ (801e87c <_strtod_l+0xbc0>)
 801e6e2:	0006      	movs	r6, r0
 801e6e4:	400a      	ands	r2, r1
 801e6e6:	429a      	cmp	r2, r3
 801e6e8:	d940      	bls.n	801e76c <_strtod_l+0xab0>
 801e6ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e6ec:	4a64      	ldr	r2, [pc, #400]	@ (801e880 <_strtod_l+0xbc4>)
 801e6ee:	4293      	cmp	r3, r2
 801e6f0:	d103      	bne.n	801e6fa <_strtod_l+0xa3e>
 801e6f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e6f4:	3301      	adds	r3, #1
 801e6f6:	d100      	bne.n	801e6fa <_strtod_l+0xa3e>
 801e6f8:	e51a      	b.n	801e130 <_strtod_l+0x474>
 801e6fa:	2601      	movs	r6, #1
 801e6fc:	4f60      	ldr	r7, [pc, #384]	@ (801e880 <_strtod_l+0xbc4>)
 801e6fe:	4276      	negs	r6, r6
 801e700:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e702:	9805      	ldr	r0, [sp, #20]
 801e704:	f002 fc6e 	bl	8020fe4 <_Bfree>
 801e708:	9908      	ldr	r1, [sp, #32]
 801e70a:	9805      	ldr	r0, [sp, #20]
 801e70c:	f002 fc6a 	bl	8020fe4 <_Bfree>
 801e710:	9907      	ldr	r1, [sp, #28]
 801e712:	9805      	ldr	r0, [sp, #20]
 801e714:	f002 fc66 	bl	8020fe4 <_Bfree>
 801e718:	9906      	ldr	r1, [sp, #24]
 801e71a:	9805      	ldr	r0, [sp, #20]
 801e71c:	f002 fc62 	bl	8020fe4 <_Bfree>
 801e720:	e617      	b.n	801e352 <_strtod_l+0x696>
 801e722:	2e01      	cmp	r6, #1
 801e724:	d103      	bne.n	801e72e <_strtod_l+0xa72>
 801e726:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e728:	2b00      	cmp	r3, #0
 801e72a:	d100      	bne.n	801e72e <_strtod_l+0xa72>
 801e72c:	e59c      	b.n	801e268 <_strtod_l+0x5ac>
 801e72e:	2300      	movs	r3, #0
 801e730:	4c54      	ldr	r4, [pc, #336]	@ (801e884 <_strtod_l+0xbc8>)
 801e732:	4d4d      	ldr	r5, [pc, #308]	@ (801e868 <_strtod_l+0xbac>)
 801e734:	930a      	str	r3, [sp, #40]	@ 0x28
 801e736:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e738:	2400      	movs	r4, #0
 801e73a:	e7b2      	b.n	801e6a2 <_strtod_l+0x9e6>
 801e73c:	2400      	movs	r4, #0
 801e73e:	4d4b      	ldr	r5, [pc, #300]	@ (801e86c <_strtod_l+0xbb0>)
 801e740:	e7aa      	b.n	801e698 <_strtod_l+0x9dc>
 801e742:	0020      	movs	r0, r4
 801e744:	0029      	movs	r1, r5
 801e746:	4b49      	ldr	r3, [pc, #292]	@ (801e86c <_strtod_l+0xbb0>)
 801e748:	2200      	movs	r2, #0
 801e74a:	f7e3 ff77 	bl	800263c <__aeabi_dmul>
 801e74e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e750:	0004      	movs	r4, r0
 801e752:	000d      	movs	r5, r1
 801e754:	2b00      	cmp	r3, #0
 801e756:	d09f      	beq.n	801e698 <_strtod_l+0x9dc>
 801e758:	940a      	str	r4, [sp, #40]	@ 0x28
 801e75a:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e75c:	e7a1      	b.n	801e6a2 <_strtod_l+0x9e6>
 801e75e:	2300      	movs	r3, #0
 801e760:	4c41      	ldr	r4, [pc, #260]	@ (801e868 <_strtod_l+0xbac>)
 801e762:	0025      	movs	r5, r4
 801e764:	930a      	str	r3, [sp, #40]	@ 0x28
 801e766:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e768:	001c      	movs	r4, r3
 801e76a:	e79a      	b.n	801e6a2 <_strtod_l+0x9e6>
 801e76c:	23d4      	movs	r3, #212	@ 0xd4
 801e76e:	049b      	lsls	r3, r3, #18
 801e770:	18cf      	adds	r7, r1, r3
 801e772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e774:	9710      	str	r7, [sp, #64]	@ 0x40
 801e776:	2b00      	cmp	r3, #0
 801e778:	d1c2      	bne.n	801e700 <_strtod_l+0xa44>
 801e77a:	4b3d      	ldr	r3, [pc, #244]	@ (801e870 <_strtod_l+0xbb4>)
 801e77c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e77e:	403b      	ands	r3, r7
 801e780:	429a      	cmp	r2, r3
 801e782:	d1bd      	bne.n	801e700 <_strtod_l+0xa44>
 801e784:	0020      	movs	r0, r4
 801e786:	0029      	movs	r1, r5
 801e788:	f7e1 ff7e 	bl	8000688 <__aeabi_d2lz>
 801e78c:	f7e1 ffb6 	bl	80006fc <__aeabi_l2d>
 801e790:	0002      	movs	r2, r0
 801e792:	000b      	movs	r3, r1
 801e794:	0020      	movs	r0, r4
 801e796:	0029      	movs	r1, r5
 801e798:	f7e4 fa18 	bl	8002bcc <__aeabi_dsub>
 801e79c:	033c      	lsls	r4, r7, #12
 801e79e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7a0:	0b24      	lsrs	r4, r4, #12
 801e7a2:	4334      	orrs	r4, r6
 801e7a4:	900e      	str	r0, [sp, #56]	@ 0x38
 801e7a6:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e7a8:	4a37      	ldr	r2, [pc, #220]	@ (801e888 <_strtod_l+0xbcc>)
 801e7aa:	431c      	orrs	r4, r3
 801e7ac:	d052      	beq.n	801e854 <_strtod_l+0xb98>
 801e7ae:	4b37      	ldr	r3, [pc, #220]	@ (801e88c <_strtod_l+0xbd0>)
 801e7b0:	f7e1 fe84 	bl	80004bc <__aeabi_dcmplt>
 801e7b4:	2800      	cmp	r0, #0
 801e7b6:	d000      	beq.n	801e7ba <_strtod_l+0xafe>
 801e7b8:	e4c3      	b.n	801e142 <_strtod_l+0x486>
 801e7ba:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e7bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e7be:	4a34      	ldr	r2, [pc, #208]	@ (801e890 <_strtod_l+0xbd4>)
 801e7c0:	4b2a      	ldr	r3, [pc, #168]	@ (801e86c <_strtod_l+0xbb0>)
 801e7c2:	f7e1 fe8f 	bl	80004e4 <__aeabi_dcmpgt>
 801e7c6:	2800      	cmp	r0, #0
 801e7c8:	d09a      	beq.n	801e700 <_strtod_l+0xa44>
 801e7ca:	e4ba      	b.n	801e142 <_strtod_l+0x486>
 801e7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d02a      	beq.n	801e828 <_strtod_l+0xb6c>
 801e7d2:	23d4      	movs	r3, #212	@ 0xd4
 801e7d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e7d6:	04db      	lsls	r3, r3, #19
 801e7d8:	429a      	cmp	r2, r3
 801e7da:	d825      	bhi.n	801e828 <_strtod_l+0xb6c>
 801e7dc:	0020      	movs	r0, r4
 801e7de:	0029      	movs	r1, r5
 801e7e0:	4a2c      	ldr	r2, [pc, #176]	@ (801e894 <_strtod_l+0xbd8>)
 801e7e2:	4b2d      	ldr	r3, [pc, #180]	@ (801e898 <_strtod_l+0xbdc>)
 801e7e4:	f7e1 fe74 	bl	80004d0 <__aeabi_dcmple>
 801e7e8:	2800      	cmp	r0, #0
 801e7ea:	d016      	beq.n	801e81a <_strtod_l+0xb5e>
 801e7ec:	0020      	movs	r0, r4
 801e7ee:	0029      	movs	r1, r5
 801e7f0:	f7e1 ff2c 	bl	800064c <__aeabi_d2uiz>
 801e7f4:	2800      	cmp	r0, #0
 801e7f6:	d100      	bne.n	801e7fa <_strtod_l+0xb3e>
 801e7f8:	3001      	adds	r0, #1
 801e7fa:	f7e4 fe0f 	bl	800341c <__aeabi_ui2d>
 801e7fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e800:	0004      	movs	r4, r0
 801e802:	000d      	movs	r5, r1
 801e804:	2b00      	cmp	r3, #0
 801e806:	d122      	bne.n	801e84e <_strtod_l+0xb92>
 801e808:	2380      	movs	r3, #128	@ 0x80
 801e80a:	061b      	lsls	r3, r3, #24
 801e80c:	18cb      	adds	r3, r1, r3
 801e80e:	9018      	str	r0, [sp, #96]	@ 0x60
 801e810:	9319      	str	r3, [sp, #100]	@ 0x64
 801e812:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e814:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e816:	9214      	str	r2, [sp, #80]	@ 0x50
 801e818:	9315      	str	r3, [sp, #84]	@ 0x54
 801e81a:	22d6      	movs	r2, #214	@ 0xd6
 801e81c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e81e:	04d2      	lsls	r2, r2, #19
 801e820:	189b      	adds	r3, r3, r2
 801e822:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e824:	1a9b      	subs	r3, r3, r2
 801e826:	9315      	str	r3, [sp, #84]	@ 0x54
 801e828:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e82a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e82c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e82e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e830:	f002 ff24 	bl	802167c <__ulp>
 801e834:	0002      	movs	r2, r0
 801e836:	000b      	movs	r3, r1
 801e838:	0030      	movs	r0, r6
 801e83a:	0039      	movs	r1, r7
 801e83c:	f7e3 fefe 	bl	800263c <__aeabi_dmul>
 801e840:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e844:	f7e2 ff52 	bl	80016ec <__aeabi_dadd>
 801e848:	0006      	movs	r6, r0
 801e84a:	000f      	movs	r7, r1
 801e84c:	e791      	b.n	801e772 <_strtod_l+0xab6>
 801e84e:	9418      	str	r4, [sp, #96]	@ 0x60
 801e850:	9519      	str	r5, [sp, #100]	@ 0x64
 801e852:	e7de      	b.n	801e812 <_strtod_l+0xb56>
 801e854:	4b11      	ldr	r3, [pc, #68]	@ (801e89c <_strtod_l+0xbe0>)
 801e856:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e858:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e85a:	f7e1 fe2f 	bl	80004bc <__aeabi_dcmplt>
 801e85e:	e7b2      	b.n	801e7c6 <_strtod_l+0xb0a>
 801e860:	fff00000 	.word	0xfff00000
 801e864:	000fffff 	.word	0x000fffff
 801e868:	3ff00000 	.word	0x3ff00000
 801e86c:	3fe00000 	.word	0x3fe00000
 801e870:	7ff00000 	.word	0x7ff00000
 801e874:	7fe00000 	.word	0x7fe00000
 801e878:	fcb00000 	.word	0xfcb00000
 801e87c:	7c9fffff 	.word	0x7c9fffff
 801e880:	7fefffff 	.word	0x7fefffff
 801e884:	bff00000 	.word	0xbff00000
 801e888:	94a03595 	.word	0x94a03595
 801e88c:	3fdfffff 	.word	0x3fdfffff
 801e890:	35afe535 	.word	0x35afe535
 801e894:	ffc00000 	.word	0xffc00000
 801e898:	41dfffff 	.word	0x41dfffff
 801e89c:	3fcfffff 	.word	0x3fcfffff

0801e8a0 <strtod>:
 801e8a0:	b510      	push	{r4, lr}
 801e8a2:	4c04      	ldr	r4, [pc, #16]	@ (801e8b4 <strtod+0x14>)
 801e8a4:	000a      	movs	r2, r1
 801e8a6:	0001      	movs	r1, r0
 801e8a8:	4b03      	ldr	r3, [pc, #12]	@ (801e8b8 <strtod+0x18>)
 801e8aa:	6820      	ldr	r0, [r4, #0]
 801e8ac:	f7ff fa06 	bl	801dcbc <_strtod_l>
 801e8b0:	bd10      	pop	{r4, pc}
 801e8b2:	46c0      	nop			@ (mov r8, r8)
 801e8b4:	200003c8 	.word	0x200003c8
 801e8b8:	2000025c 	.word	0x2000025c

0801e8bc <_strtol_l.constprop.0>:
 801e8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8be:	b085      	sub	sp, #20
 801e8c0:	0017      	movs	r7, r2
 801e8c2:	001e      	movs	r6, r3
 801e8c4:	9003      	str	r0, [sp, #12]
 801e8c6:	9101      	str	r1, [sp, #4]
 801e8c8:	2b24      	cmp	r3, #36	@ 0x24
 801e8ca:	d844      	bhi.n	801e956 <_strtol_l.constprop.0+0x9a>
 801e8cc:	000c      	movs	r4, r1
 801e8ce:	2b01      	cmp	r3, #1
 801e8d0:	d041      	beq.n	801e956 <_strtol_l.constprop.0+0x9a>
 801e8d2:	4b3d      	ldr	r3, [pc, #244]	@ (801e9c8 <_strtol_l.constprop.0+0x10c>)
 801e8d4:	2208      	movs	r2, #8
 801e8d6:	469c      	mov	ip, r3
 801e8d8:	0023      	movs	r3, r4
 801e8da:	4661      	mov	r1, ip
 801e8dc:	781d      	ldrb	r5, [r3, #0]
 801e8de:	3401      	adds	r4, #1
 801e8e0:	5d48      	ldrb	r0, [r1, r5]
 801e8e2:	0001      	movs	r1, r0
 801e8e4:	4011      	ands	r1, r2
 801e8e6:	4210      	tst	r0, r2
 801e8e8:	d1f6      	bne.n	801e8d8 <_strtol_l.constprop.0+0x1c>
 801e8ea:	2d2d      	cmp	r5, #45	@ 0x2d
 801e8ec:	d13a      	bne.n	801e964 <_strtol_l.constprop.0+0xa8>
 801e8ee:	7825      	ldrb	r5, [r4, #0]
 801e8f0:	1c9c      	adds	r4, r3, #2
 801e8f2:	2301      	movs	r3, #1
 801e8f4:	9300      	str	r3, [sp, #0]
 801e8f6:	2210      	movs	r2, #16
 801e8f8:	0033      	movs	r3, r6
 801e8fa:	4393      	bics	r3, r2
 801e8fc:	d109      	bne.n	801e912 <_strtol_l.constprop.0+0x56>
 801e8fe:	2d30      	cmp	r5, #48	@ 0x30
 801e900:	d136      	bne.n	801e970 <_strtol_l.constprop.0+0xb4>
 801e902:	2120      	movs	r1, #32
 801e904:	7823      	ldrb	r3, [r4, #0]
 801e906:	438b      	bics	r3, r1
 801e908:	2b58      	cmp	r3, #88	@ 0x58
 801e90a:	d131      	bne.n	801e970 <_strtol_l.constprop.0+0xb4>
 801e90c:	0016      	movs	r6, r2
 801e90e:	7865      	ldrb	r5, [r4, #1]
 801e910:	3402      	adds	r4, #2
 801e912:	4a2e      	ldr	r2, [pc, #184]	@ (801e9cc <_strtol_l.constprop.0+0x110>)
 801e914:	9b00      	ldr	r3, [sp, #0]
 801e916:	4694      	mov	ip, r2
 801e918:	4463      	add	r3, ip
 801e91a:	0031      	movs	r1, r6
 801e91c:	0018      	movs	r0, r3
 801e91e:	9302      	str	r3, [sp, #8]
 801e920:	f7e1 fcc6 	bl	80002b0 <__aeabi_uidivmod>
 801e924:	2200      	movs	r2, #0
 801e926:	4684      	mov	ip, r0
 801e928:	0010      	movs	r0, r2
 801e92a:	002b      	movs	r3, r5
 801e92c:	3b30      	subs	r3, #48	@ 0x30
 801e92e:	2b09      	cmp	r3, #9
 801e930:	d825      	bhi.n	801e97e <_strtol_l.constprop.0+0xc2>
 801e932:	001d      	movs	r5, r3
 801e934:	42ae      	cmp	r6, r5
 801e936:	dd31      	ble.n	801e99c <_strtol_l.constprop.0+0xe0>
 801e938:	1c53      	adds	r3, r2, #1
 801e93a:	d009      	beq.n	801e950 <_strtol_l.constprop.0+0x94>
 801e93c:	2201      	movs	r2, #1
 801e93e:	4252      	negs	r2, r2
 801e940:	4584      	cmp	ip, r0
 801e942:	d305      	bcc.n	801e950 <_strtol_l.constprop.0+0x94>
 801e944:	d101      	bne.n	801e94a <_strtol_l.constprop.0+0x8e>
 801e946:	42a9      	cmp	r1, r5
 801e948:	db25      	blt.n	801e996 <_strtol_l.constprop.0+0xda>
 801e94a:	2201      	movs	r2, #1
 801e94c:	4370      	muls	r0, r6
 801e94e:	1828      	adds	r0, r5, r0
 801e950:	7825      	ldrb	r5, [r4, #0]
 801e952:	3401      	adds	r4, #1
 801e954:	e7e9      	b.n	801e92a <_strtol_l.constprop.0+0x6e>
 801e956:	f000 ffc5 	bl	801f8e4 <__errno>
 801e95a:	2316      	movs	r3, #22
 801e95c:	6003      	str	r3, [r0, #0]
 801e95e:	2000      	movs	r0, #0
 801e960:	b005      	add	sp, #20
 801e962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e964:	9100      	str	r1, [sp, #0]
 801e966:	2d2b      	cmp	r5, #43	@ 0x2b
 801e968:	d1c5      	bne.n	801e8f6 <_strtol_l.constprop.0+0x3a>
 801e96a:	7825      	ldrb	r5, [r4, #0]
 801e96c:	1c9c      	adds	r4, r3, #2
 801e96e:	e7c2      	b.n	801e8f6 <_strtol_l.constprop.0+0x3a>
 801e970:	2e00      	cmp	r6, #0
 801e972:	d1ce      	bne.n	801e912 <_strtol_l.constprop.0+0x56>
 801e974:	3608      	adds	r6, #8
 801e976:	2d30      	cmp	r5, #48	@ 0x30
 801e978:	d0cb      	beq.n	801e912 <_strtol_l.constprop.0+0x56>
 801e97a:	3602      	adds	r6, #2
 801e97c:	e7c9      	b.n	801e912 <_strtol_l.constprop.0+0x56>
 801e97e:	002b      	movs	r3, r5
 801e980:	3b41      	subs	r3, #65	@ 0x41
 801e982:	2b19      	cmp	r3, #25
 801e984:	d801      	bhi.n	801e98a <_strtol_l.constprop.0+0xce>
 801e986:	3d37      	subs	r5, #55	@ 0x37
 801e988:	e7d4      	b.n	801e934 <_strtol_l.constprop.0+0x78>
 801e98a:	002b      	movs	r3, r5
 801e98c:	3b61      	subs	r3, #97	@ 0x61
 801e98e:	2b19      	cmp	r3, #25
 801e990:	d804      	bhi.n	801e99c <_strtol_l.constprop.0+0xe0>
 801e992:	3d57      	subs	r5, #87	@ 0x57
 801e994:	e7ce      	b.n	801e934 <_strtol_l.constprop.0+0x78>
 801e996:	2201      	movs	r2, #1
 801e998:	4252      	negs	r2, r2
 801e99a:	e7d9      	b.n	801e950 <_strtol_l.constprop.0+0x94>
 801e99c:	1c53      	adds	r3, r2, #1
 801e99e:	d108      	bne.n	801e9b2 <_strtol_l.constprop.0+0xf6>
 801e9a0:	2322      	movs	r3, #34	@ 0x22
 801e9a2:	9a03      	ldr	r2, [sp, #12]
 801e9a4:	9802      	ldr	r0, [sp, #8]
 801e9a6:	6013      	str	r3, [r2, #0]
 801e9a8:	2f00      	cmp	r7, #0
 801e9aa:	d0d9      	beq.n	801e960 <_strtol_l.constprop.0+0xa4>
 801e9ac:	1e63      	subs	r3, r4, #1
 801e9ae:	9301      	str	r3, [sp, #4]
 801e9b0:	e007      	b.n	801e9c2 <_strtol_l.constprop.0+0x106>
 801e9b2:	9b00      	ldr	r3, [sp, #0]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d000      	beq.n	801e9ba <_strtol_l.constprop.0+0xfe>
 801e9b8:	4240      	negs	r0, r0
 801e9ba:	2f00      	cmp	r7, #0
 801e9bc:	d0d0      	beq.n	801e960 <_strtol_l.constprop.0+0xa4>
 801e9be:	2a00      	cmp	r2, #0
 801e9c0:	d1f4      	bne.n	801e9ac <_strtol_l.constprop.0+0xf0>
 801e9c2:	9b01      	ldr	r3, [sp, #4]
 801e9c4:	603b      	str	r3, [r7, #0]
 801e9c6:	e7cb      	b.n	801e960 <_strtol_l.constprop.0+0xa4>
 801e9c8:	08024e81 	.word	0x08024e81
 801e9cc:	7fffffff 	.word	0x7fffffff

0801e9d0 <strtol>:
 801e9d0:	b510      	push	{r4, lr}
 801e9d2:	4c04      	ldr	r4, [pc, #16]	@ (801e9e4 <strtol+0x14>)
 801e9d4:	0013      	movs	r3, r2
 801e9d6:	000a      	movs	r2, r1
 801e9d8:	0001      	movs	r1, r0
 801e9da:	6820      	ldr	r0, [r4, #0]
 801e9dc:	f7ff ff6e 	bl	801e8bc <_strtol_l.constprop.0>
 801e9e0:	bd10      	pop	{r4, pc}
 801e9e2:	46c0      	nop			@ (mov r8, r8)
 801e9e4:	200003c8 	.word	0x200003c8

0801e9e8 <__cvt>:
 801e9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9ea:	001f      	movs	r7, r3
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	0016      	movs	r6, r2
 801e9f0:	b08b      	sub	sp, #44	@ 0x2c
 801e9f2:	429f      	cmp	r7, r3
 801e9f4:	da04      	bge.n	801ea00 <__cvt+0x18>
 801e9f6:	2180      	movs	r1, #128	@ 0x80
 801e9f8:	0609      	lsls	r1, r1, #24
 801e9fa:	187b      	adds	r3, r7, r1
 801e9fc:	001f      	movs	r7, r3
 801e9fe:	232d      	movs	r3, #45	@ 0x2d
 801ea00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ea02:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ea04:	7013      	strb	r3, [r2, #0]
 801ea06:	2320      	movs	r3, #32
 801ea08:	2203      	movs	r2, #3
 801ea0a:	439d      	bics	r5, r3
 801ea0c:	2d46      	cmp	r5, #70	@ 0x46
 801ea0e:	d007      	beq.n	801ea20 <__cvt+0x38>
 801ea10:	002b      	movs	r3, r5
 801ea12:	3b45      	subs	r3, #69	@ 0x45
 801ea14:	4259      	negs	r1, r3
 801ea16:	414b      	adcs	r3, r1
 801ea18:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ea1a:	3a01      	subs	r2, #1
 801ea1c:	18cb      	adds	r3, r1, r3
 801ea1e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ea20:	ab09      	add	r3, sp, #36	@ 0x24
 801ea22:	9304      	str	r3, [sp, #16]
 801ea24:	ab08      	add	r3, sp, #32
 801ea26:	9303      	str	r3, [sp, #12]
 801ea28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ea2a:	9200      	str	r2, [sp, #0]
 801ea2c:	9302      	str	r3, [sp, #8]
 801ea2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea30:	0032      	movs	r2, r6
 801ea32:	9301      	str	r3, [sp, #4]
 801ea34:	003b      	movs	r3, r7
 801ea36:	f001 f82b 	bl	801fa90 <_dtoa_r>
 801ea3a:	0004      	movs	r4, r0
 801ea3c:	2d47      	cmp	r5, #71	@ 0x47
 801ea3e:	d11b      	bne.n	801ea78 <__cvt+0x90>
 801ea40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ea42:	07db      	lsls	r3, r3, #31
 801ea44:	d511      	bpl.n	801ea6a <__cvt+0x82>
 801ea46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea48:	18c3      	adds	r3, r0, r3
 801ea4a:	9307      	str	r3, [sp, #28]
 801ea4c:	2200      	movs	r2, #0
 801ea4e:	2300      	movs	r3, #0
 801ea50:	0030      	movs	r0, r6
 801ea52:	0039      	movs	r1, r7
 801ea54:	f7e1 fd2c 	bl	80004b0 <__aeabi_dcmpeq>
 801ea58:	2800      	cmp	r0, #0
 801ea5a:	d001      	beq.n	801ea60 <__cvt+0x78>
 801ea5c:	9b07      	ldr	r3, [sp, #28]
 801ea5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea60:	2230      	movs	r2, #48	@ 0x30
 801ea62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea64:	9907      	ldr	r1, [sp, #28]
 801ea66:	428b      	cmp	r3, r1
 801ea68:	d320      	bcc.n	801eaac <__cvt+0xc4>
 801ea6a:	0020      	movs	r0, r4
 801ea6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea6e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ea70:	1b1b      	subs	r3, r3, r4
 801ea72:	6013      	str	r3, [r2, #0]
 801ea74:	b00b      	add	sp, #44	@ 0x2c
 801ea76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea7a:	18c3      	adds	r3, r0, r3
 801ea7c:	9307      	str	r3, [sp, #28]
 801ea7e:	2d46      	cmp	r5, #70	@ 0x46
 801ea80:	d1e4      	bne.n	801ea4c <__cvt+0x64>
 801ea82:	7803      	ldrb	r3, [r0, #0]
 801ea84:	2b30      	cmp	r3, #48	@ 0x30
 801ea86:	d10c      	bne.n	801eaa2 <__cvt+0xba>
 801ea88:	2200      	movs	r2, #0
 801ea8a:	2300      	movs	r3, #0
 801ea8c:	0030      	movs	r0, r6
 801ea8e:	0039      	movs	r1, r7
 801ea90:	f7e1 fd0e 	bl	80004b0 <__aeabi_dcmpeq>
 801ea94:	2800      	cmp	r0, #0
 801ea96:	d104      	bne.n	801eaa2 <__cvt+0xba>
 801ea98:	2301      	movs	r3, #1
 801ea9a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ea9c:	1a9b      	subs	r3, r3, r2
 801ea9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eaa0:	6013      	str	r3, [r2, #0]
 801eaa2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eaa4:	9a07      	ldr	r2, [sp, #28]
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	18d3      	adds	r3, r2, r3
 801eaaa:	e7ce      	b.n	801ea4a <__cvt+0x62>
 801eaac:	1c59      	adds	r1, r3, #1
 801eaae:	9109      	str	r1, [sp, #36]	@ 0x24
 801eab0:	701a      	strb	r2, [r3, #0]
 801eab2:	e7d6      	b.n	801ea62 <__cvt+0x7a>

0801eab4 <__exponent>:
 801eab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eab6:	232b      	movs	r3, #43	@ 0x2b
 801eab8:	0005      	movs	r5, r0
 801eaba:	000c      	movs	r4, r1
 801eabc:	b085      	sub	sp, #20
 801eabe:	7002      	strb	r2, [r0, #0]
 801eac0:	2900      	cmp	r1, #0
 801eac2:	da01      	bge.n	801eac8 <__exponent+0x14>
 801eac4:	424c      	negs	r4, r1
 801eac6:	3302      	adds	r3, #2
 801eac8:	706b      	strb	r3, [r5, #1]
 801eaca:	2c09      	cmp	r4, #9
 801eacc:	dd2c      	ble.n	801eb28 <__exponent+0x74>
 801eace:	ab02      	add	r3, sp, #8
 801ead0:	1dde      	adds	r6, r3, #7
 801ead2:	0020      	movs	r0, r4
 801ead4:	210a      	movs	r1, #10
 801ead6:	f7e1 fcd5 	bl	8000484 <__aeabi_idivmod>
 801eada:	0037      	movs	r7, r6
 801eadc:	3130      	adds	r1, #48	@ 0x30
 801eade:	3e01      	subs	r6, #1
 801eae0:	0020      	movs	r0, r4
 801eae2:	7031      	strb	r1, [r6, #0]
 801eae4:	210a      	movs	r1, #10
 801eae6:	9401      	str	r4, [sp, #4]
 801eae8:	f7e1 fbe6 	bl	80002b8 <__divsi3>
 801eaec:	9b01      	ldr	r3, [sp, #4]
 801eaee:	0004      	movs	r4, r0
 801eaf0:	2b63      	cmp	r3, #99	@ 0x63
 801eaf2:	dcee      	bgt.n	801ead2 <__exponent+0x1e>
 801eaf4:	1eba      	subs	r2, r7, #2
 801eaf6:	1ca8      	adds	r0, r5, #2
 801eaf8:	0001      	movs	r1, r0
 801eafa:	0013      	movs	r3, r2
 801eafc:	3430      	adds	r4, #48	@ 0x30
 801eafe:	7014      	strb	r4, [r2, #0]
 801eb00:	ac02      	add	r4, sp, #8
 801eb02:	3407      	adds	r4, #7
 801eb04:	429c      	cmp	r4, r3
 801eb06:	d80a      	bhi.n	801eb1e <__exponent+0x6a>
 801eb08:	2300      	movs	r3, #0
 801eb0a:	42a2      	cmp	r2, r4
 801eb0c:	d803      	bhi.n	801eb16 <__exponent+0x62>
 801eb0e:	3309      	adds	r3, #9
 801eb10:	aa02      	add	r2, sp, #8
 801eb12:	189b      	adds	r3, r3, r2
 801eb14:	1bdb      	subs	r3, r3, r7
 801eb16:	18c0      	adds	r0, r0, r3
 801eb18:	1b40      	subs	r0, r0, r5
 801eb1a:	b005      	add	sp, #20
 801eb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb1e:	781c      	ldrb	r4, [r3, #0]
 801eb20:	3301      	adds	r3, #1
 801eb22:	700c      	strb	r4, [r1, #0]
 801eb24:	3101      	adds	r1, #1
 801eb26:	e7eb      	b.n	801eb00 <__exponent+0x4c>
 801eb28:	2330      	movs	r3, #48	@ 0x30
 801eb2a:	18e4      	adds	r4, r4, r3
 801eb2c:	70ab      	strb	r3, [r5, #2]
 801eb2e:	1d28      	adds	r0, r5, #4
 801eb30:	70ec      	strb	r4, [r5, #3]
 801eb32:	e7f1      	b.n	801eb18 <__exponent+0x64>

0801eb34 <_printf_float>:
 801eb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb36:	b097      	sub	sp, #92	@ 0x5c
 801eb38:	000d      	movs	r5, r1
 801eb3a:	920a      	str	r2, [sp, #40]	@ 0x28
 801eb3c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801eb3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eb40:	9009      	str	r0, [sp, #36]	@ 0x24
 801eb42:	f000 fe7d 	bl	801f840 <_localeconv_r>
 801eb46:	6803      	ldr	r3, [r0, #0]
 801eb48:	0018      	movs	r0, r3
 801eb4a:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb4c:	f7e1 fb0e 	bl	800016c <strlen>
 801eb50:	2300      	movs	r3, #0
 801eb52:	900f      	str	r0, [sp, #60]	@ 0x3c
 801eb54:	9314      	str	r3, [sp, #80]	@ 0x50
 801eb56:	7e2b      	ldrb	r3, [r5, #24]
 801eb58:	2207      	movs	r2, #7
 801eb5a:	930c      	str	r3, [sp, #48]	@ 0x30
 801eb5c:	682b      	ldr	r3, [r5, #0]
 801eb5e:	930e      	str	r3, [sp, #56]	@ 0x38
 801eb60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801eb62:	6823      	ldr	r3, [r4, #0]
 801eb64:	05c9      	lsls	r1, r1, #23
 801eb66:	d545      	bpl.n	801ebf4 <_printf_float+0xc0>
 801eb68:	189b      	adds	r3, r3, r2
 801eb6a:	4393      	bics	r3, r2
 801eb6c:	001a      	movs	r2, r3
 801eb6e:	3208      	adds	r2, #8
 801eb70:	6022      	str	r2, [r4, #0]
 801eb72:	2201      	movs	r2, #1
 801eb74:	681e      	ldr	r6, [r3, #0]
 801eb76:	685f      	ldr	r7, [r3, #4]
 801eb78:	007b      	lsls	r3, r7, #1
 801eb7a:	085b      	lsrs	r3, r3, #1
 801eb7c:	9311      	str	r3, [sp, #68]	@ 0x44
 801eb7e:	9610      	str	r6, [sp, #64]	@ 0x40
 801eb80:	64ae      	str	r6, [r5, #72]	@ 0x48
 801eb82:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801eb84:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eb86:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801eb88:	4ba7      	ldr	r3, [pc, #668]	@ (801ee28 <_printf_float+0x2f4>)
 801eb8a:	4252      	negs	r2, r2
 801eb8c:	f7e4 fbba 	bl	8003304 <__aeabi_dcmpun>
 801eb90:	2800      	cmp	r0, #0
 801eb92:	d131      	bne.n	801ebf8 <_printf_float+0xc4>
 801eb94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eb96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801eb98:	2201      	movs	r2, #1
 801eb9a:	4ba3      	ldr	r3, [pc, #652]	@ (801ee28 <_printf_float+0x2f4>)
 801eb9c:	4252      	negs	r2, r2
 801eb9e:	f7e1 fc97 	bl	80004d0 <__aeabi_dcmple>
 801eba2:	2800      	cmp	r0, #0
 801eba4:	d128      	bne.n	801ebf8 <_printf_float+0xc4>
 801eba6:	2200      	movs	r2, #0
 801eba8:	2300      	movs	r3, #0
 801ebaa:	0030      	movs	r0, r6
 801ebac:	0039      	movs	r1, r7
 801ebae:	f7e1 fc85 	bl	80004bc <__aeabi_dcmplt>
 801ebb2:	2800      	cmp	r0, #0
 801ebb4:	d003      	beq.n	801ebbe <_printf_float+0x8a>
 801ebb6:	002b      	movs	r3, r5
 801ebb8:	222d      	movs	r2, #45	@ 0x2d
 801ebba:	3343      	adds	r3, #67	@ 0x43
 801ebbc:	701a      	strb	r2, [r3, #0]
 801ebbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebc0:	4f9a      	ldr	r7, [pc, #616]	@ (801ee2c <_printf_float+0x2f8>)
 801ebc2:	2b47      	cmp	r3, #71	@ 0x47
 801ebc4:	d900      	bls.n	801ebc8 <_printf_float+0x94>
 801ebc6:	4f9a      	ldr	r7, [pc, #616]	@ (801ee30 <_printf_float+0x2fc>)
 801ebc8:	2303      	movs	r3, #3
 801ebca:	2400      	movs	r4, #0
 801ebcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ebce:	612b      	str	r3, [r5, #16]
 801ebd0:	3301      	adds	r3, #1
 801ebd2:	439a      	bics	r2, r3
 801ebd4:	602a      	str	r2, [r5, #0]
 801ebd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ebd8:	0029      	movs	r1, r5
 801ebda:	9300      	str	r3, [sp, #0]
 801ebdc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ebe0:	aa15      	add	r2, sp, #84	@ 0x54
 801ebe2:	f000 f9e5 	bl	801efb0 <_printf_common>
 801ebe6:	3001      	adds	r0, #1
 801ebe8:	d000      	beq.n	801ebec <_printf_float+0xb8>
 801ebea:	e09f      	b.n	801ed2c <_printf_float+0x1f8>
 801ebec:	2001      	movs	r0, #1
 801ebee:	4240      	negs	r0, r0
 801ebf0:	b017      	add	sp, #92	@ 0x5c
 801ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebf4:	3307      	adds	r3, #7
 801ebf6:	e7b8      	b.n	801eb6a <_printf_float+0x36>
 801ebf8:	0032      	movs	r2, r6
 801ebfa:	003b      	movs	r3, r7
 801ebfc:	0030      	movs	r0, r6
 801ebfe:	0039      	movs	r1, r7
 801ec00:	f7e4 fb80 	bl	8003304 <__aeabi_dcmpun>
 801ec04:	2800      	cmp	r0, #0
 801ec06:	d00b      	beq.n	801ec20 <_printf_float+0xec>
 801ec08:	2f00      	cmp	r7, #0
 801ec0a:	da03      	bge.n	801ec14 <_printf_float+0xe0>
 801ec0c:	002b      	movs	r3, r5
 801ec0e:	222d      	movs	r2, #45	@ 0x2d
 801ec10:	3343      	adds	r3, #67	@ 0x43
 801ec12:	701a      	strb	r2, [r3, #0]
 801ec14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec16:	4f87      	ldr	r7, [pc, #540]	@ (801ee34 <_printf_float+0x300>)
 801ec18:	2b47      	cmp	r3, #71	@ 0x47
 801ec1a:	d9d5      	bls.n	801ebc8 <_printf_float+0x94>
 801ec1c:	4f86      	ldr	r7, [pc, #536]	@ (801ee38 <_printf_float+0x304>)
 801ec1e:	e7d3      	b.n	801ebc8 <_printf_float+0x94>
 801ec20:	2220      	movs	r2, #32
 801ec22:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ec24:	686b      	ldr	r3, [r5, #4]
 801ec26:	4394      	bics	r4, r2
 801ec28:	1c5a      	adds	r2, r3, #1
 801ec2a:	d146      	bne.n	801ecba <_printf_float+0x186>
 801ec2c:	3307      	adds	r3, #7
 801ec2e:	606b      	str	r3, [r5, #4]
 801ec30:	2380      	movs	r3, #128	@ 0x80
 801ec32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec34:	00db      	lsls	r3, r3, #3
 801ec36:	4313      	orrs	r3, r2
 801ec38:	2200      	movs	r2, #0
 801ec3a:	602b      	str	r3, [r5, #0]
 801ec3c:	9206      	str	r2, [sp, #24]
 801ec3e:	aa14      	add	r2, sp, #80	@ 0x50
 801ec40:	9205      	str	r2, [sp, #20]
 801ec42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec44:	a90a      	add	r1, sp, #40	@ 0x28
 801ec46:	9204      	str	r2, [sp, #16]
 801ec48:	aa13      	add	r2, sp, #76	@ 0x4c
 801ec4a:	9203      	str	r2, [sp, #12]
 801ec4c:	2223      	movs	r2, #35	@ 0x23
 801ec4e:	1852      	adds	r2, r2, r1
 801ec50:	9202      	str	r2, [sp, #8]
 801ec52:	9301      	str	r3, [sp, #4]
 801ec54:	686b      	ldr	r3, [r5, #4]
 801ec56:	0032      	movs	r2, r6
 801ec58:	9300      	str	r3, [sp, #0]
 801ec5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec5c:	003b      	movs	r3, r7
 801ec5e:	f7ff fec3 	bl	801e9e8 <__cvt>
 801ec62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ec64:	0007      	movs	r7, r0
 801ec66:	2c47      	cmp	r4, #71	@ 0x47
 801ec68:	d12d      	bne.n	801ecc6 <_printf_float+0x192>
 801ec6a:	1cd3      	adds	r3, r2, #3
 801ec6c:	db02      	blt.n	801ec74 <_printf_float+0x140>
 801ec6e:	686b      	ldr	r3, [r5, #4]
 801ec70:	429a      	cmp	r2, r3
 801ec72:	dd48      	ble.n	801ed06 <_printf_float+0x1d2>
 801ec74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec76:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ec78:	3b02      	subs	r3, #2
 801ec7a:	b2db      	uxtb	r3, r3
 801ec7c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec7e:	0028      	movs	r0, r5
 801ec80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec82:	3901      	subs	r1, #1
 801ec84:	3050      	adds	r0, #80	@ 0x50
 801ec86:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ec88:	f7ff ff14 	bl	801eab4 <__exponent>
 801ec8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ec8e:	0004      	movs	r4, r0
 801ec90:	1813      	adds	r3, r2, r0
 801ec92:	612b      	str	r3, [r5, #16]
 801ec94:	2a01      	cmp	r2, #1
 801ec96:	dc02      	bgt.n	801ec9e <_printf_float+0x16a>
 801ec98:	682a      	ldr	r2, [r5, #0]
 801ec9a:	07d2      	lsls	r2, r2, #31
 801ec9c:	d501      	bpl.n	801eca2 <_printf_float+0x16e>
 801ec9e:	3301      	adds	r3, #1
 801eca0:	612b      	str	r3, [r5, #16]
 801eca2:	2323      	movs	r3, #35	@ 0x23
 801eca4:	aa0a      	add	r2, sp, #40	@ 0x28
 801eca6:	189b      	adds	r3, r3, r2
 801eca8:	781b      	ldrb	r3, [r3, #0]
 801ecaa:	2b00      	cmp	r3, #0
 801ecac:	d100      	bne.n	801ecb0 <_printf_float+0x17c>
 801ecae:	e792      	b.n	801ebd6 <_printf_float+0xa2>
 801ecb0:	002b      	movs	r3, r5
 801ecb2:	222d      	movs	r2, #45	@ 0x2d
 801ecb4:	3343      	adds	r3, #67	@ 0x43
 801ecb6:	701a      	strb	r2, [r3, #0]
 801ecb8:	e78d      	b.n	801ebd6 <_printf_float+0xa2>
 801ecba:	2c47      	cmp	r4, #71	@ 0x47
 801ecbc:	d1b8      	bne.n	801ec30 <_printf_float+0xfc>
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d1b6      	bne.n	801ec30 <_printf_float+0xfc>
 801ecc2:	3301      	adds	r3, #1
 801ecc4:	e7b3      	b.n	801ec2e <_printf_float+0xfa>
 801ecc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecc8:	0011      	movs	r1, r2
 801ecca:	2b65      	cmp	r3, #101	@ 0x65
 801eccc:	d9d7      	bls.n	801ec7e <_printf_float+0x14a>
 801ecce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecd0:	2b66      	cmp	r3, #102	@ 0x66
 801ecd2:	d11a      	bne.n	801ed0a <_printf_float+0x1d6>
 801ecd4:	686b      	ldr	r3, [r5, #4]
 801ecd6:	2a00      	cmp	r2, #0
 801ecd8:	dd09      	ble.n	801ecee <_printf_float+0x1ba>
 801ecda:	612a      	str	r2, [r5, #16]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d102      	bne.n	801ece6 <_printf_float+0x1b2>
 801ece0:	6829      	ldr	r1, [r5, #0]
 801ece2:	07c9      	lsls	r1, r1, #31
 801ece4:	d50b      	bpl.n	801ecfe <_printf_float+0x1ca>
 801ece6:	3301      	adds	r3, #1
 801ece8:	189b      	adds	r3, r3, r2
 801ecea:	612b      	str	r3, [r5, #16]
 801ecec:	e007      	b.n	801ecfe <_printf_float+0x1ca>
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	d103      	bne.n	801ecfa <_printf_float+0x1c6>
 801ecf2:	2201      	movs	r2, #1
 801ecf4:	6829      	ldr	r1, [r5, #0]
 801ecf6:	4211      	tst	r1, r2
 801ecf8:	d000      	beq.n	801ecfc <_printf_float+0x1c8>
 801ecfa:	1c9a      	adds	r2, r3, #2
 801ecfc:	612a      	str	r2, [r5, #16]
 801ecfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed00:	2400      	movs	r4, #0
 801ed02:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ed04:	e7cd      	b.n	801eca2 <_printf_float+0x16e>
 801ed06:	2367      	movs	r3, #103	@ 0x67
 801ed08:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ed0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ed0e:	4299      	cmp	r1, r3
 801ed10:	db06      	blt.n	801ed20 <_printf_float+0x1ec>
 801ed12:	682b      	ldr	r3, [r5, #0]
 801ed14:	6129      	str	r1, [r5, #16]
 801ed16:	07db      	lsls	r3, r3, #31
 801ed18:	d5f1      	bpl.n	801ecfe <_printf_float+0x1ca>
 801ed1a:	3101      	adds	r1, #1
 801ed1c:	6129      	str	r1, [r5, #16]
 801ed1e:	e7ee      	b.n	801ecfe <_printf_float+0x1ca>
 801ed20:	2201      	movs	r2, #1
 801ed22:	2900      	cmp	r1, #0
 801ed24:	dce0      	bgt.n	801ece8 <_printf_float+0x1b4>
 801ed26:	1892      	adds	r2, r2, r2
 801ed28:	1a52      	subs	r2, r2, r1
 801ed2a:	e7dd      	b.n	801ece8 <_printf_float+0x1b4>
 801ed2c:	682a      	ldr	r2, [r5, #0]
 801ed2e:	0553      	lsls	r3, r2, #21
 801ed30:	d408      	bmi.n	801ed44 <_printf_float+0x210>
 801ed32:	692b      	ldr	r3, [r5, #16]
 801ed34:	003a      	movs	r2, r7
 801ed36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed3a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed3c:	47a0      	blx	r4
 801ed3e:	3001      	adds	r0, #1
 801ed40:	d129      	bne.n	801ed96 <_printf_float+0x262>
 801ed42:	e753      	b.n	801ebec <_printf_float+0xb8>
 801ed44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed46:	2b65      	cmp	r3, #101	@ 0x65
 801ed48:	d800      	bhi.n	801ed4c <_printf_float+0x218>
 801ed4a:	e0da      	b.n	801ef02 <_printf_float+0x3ce>
 801ed4c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ed4e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ed50:	2200      	movs	r2, #0
 801ed52:	2300      	movs	r3, #0
 801ed54:	f7e1 fbac 	bl	80004b0 <__aeabi_dcmpeq>
 801ed58:	2800      	cmp	r0, #0
 801ed5a:	d033      	beq.n	801edc4 <_printf_float+0x290>
 801ed5c:	2301      	movs	r3, #1
 801ed5e:	4a37      	ldr	r2, [pc, #220]	@ (801ee3c <_printf_float+0x308>)
 801ed60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed64:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed66:	47a0      	blx	r4
 801ed68:	3001      	adds	r0, #1
 801ed6a:	d100      	bne.n	801ed6e <_printf_float+0x23a>
 801ed6c:	e73e      	b.n	801ebec <_printf_float+0xb8>
 801ed6e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ed70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed72:	42b3      	cmp	r3, r6
 801ed74:	db02      	blt.n	801ed7c <_printf_float+0x248>
 801ed76:	682b      	ldr	r3, [r5, #0]
 801ed78:	07db      	lsls	r3, r3, #31
 801ed7a:	d50c      	bpl.n	801ed96 <_printf_float+0x262>
 801ed7c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ed82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed86:	47a0      	blx	r4
 801ed88:	2400      	movs	r4, #0
 801ed8a:	3001      	adds	r0, #1
 801ed8c:	d100      	bne.n	801ed90 <_printf_float+0x25c>
 801ed8e:	e72d      	b.n	801ebec <_printf_float+0xb8>
 801ed90:	1e73      	subs	r3, r6, #1
 801ed92:	42a3      	cmp	r3, r4
 801ed94:	dc0a      	bgt.n	801edac <_printf_float+0x278>
 801ed96:	682b      	ldr	r3, [r5, #0]
 801ed98:	079b      	lsls	r3, r3, #30
 801ed9a:	d500      	bpl.n	801ed9e <_printf_float+0x26a>
 801ed9c:	e105      	b.n	801efaa <_printf_float+0x476>
 801ed9e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801eda0:	68e8      	ldr	r0, [r5, #12]
 801eda2:	4298      	cmp	r0, r3
 801eda4:	db00      	blt.n	801eda8 <_printf_float+0x274>
 801eda6:	e723      	b.n	801ebf0 <_printf_float+0xbc>
 801eda8:	0018      	movs	r0, r3
 801edaa:	e721      	b.n	801ebf0 <_printf_float+0xbc>
 801edac:	002a      	movs	r2, r5
 801edae:	2301      	movs	r3, #1
 801edb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801edb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edb4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801edb6:	321a      	adds	r2, #26
 801edb8:	47b8      	blx	r7
 801edba:	3001      	adds	r0, #1
 801edbc:	d100      	bne.n	801edc0 <_printf_float+0x28c>
 801edbe:	e715      	b.n	801ebec <_printf_float+0xb8>
 801edc0:	3401      	adds	r4, #1
 801edc2:	e7e5      	b.n	801ed90 <_printf_float+0x25c>
 801edc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	dc3a      	bgt.n	801ee40 <_printf_float+0x30c>
 801edca:	2301      	movs	r3, #1
 801edcc:	4a1b      	ldr	r2, [pc, #108]	@ (801ee3c <_printf_float+0x308>)
 801edce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801edd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edd4:	47a0      	blx	r4
 801edd6:	3001      	adds	r0, #1
 801edd8:	d100      	bne.n	801eddc <_printf_float+0x2a8>
 801edda:	e707      	b.n	801ebec <_printf_float+0xb8>
 801eddc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801edde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ede0:	4333      	orrs	r3, r6
 801ede2:	d102      	bne.n	801edea <_printf_float+0x2b6>
 801ede4:	682b      	ldr	r3, [r5, #0]
 801ede6:	07db      	lsls	r3, r3, #31
 801ede8:	d5d5      	bpl.n	801ed96 <_printf_float+0x262>
 801edea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801edec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801edee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801edf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801edf2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801edf4:	47a0      	blx	r4
 801edf6:	2300      	movs	r3, #0
 801edf8:	3001      	adds	r0, #1
 801edfa:	d100      	bne.n	801edfe <_printf_float+0x2ca>
 801edfc:	e6f6      	b.n	801ebec <_printf_float+0xb8>
 801edfe:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee04:	425b      	negs	r3, r3
 801ee06:	4293      	cmp	r3, r2
 801ee08:	dc01      	bgt.n	801ee0e <_printf_float+0x2da>
 801ee0a:	0033      	movs	r3, r6
 801ee0c:	e792      	b.n	801ed34 <_printf_float+0x200>
 801ee0e:	002a      	movs	r2, r5
 801ee10:	2301      	movs	r3, #1
 801ee12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ee14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ee16:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ee18:	321a      	adds	r2, #26
 801ee1a:	47a0      	blx	r4
 801ee1c:	3001      	adds	r0, #1
 801ee1e:	d100      	bne.n	801ee22 <_printf_float+0x2ee>
 801ee20:	e6e4      	b.n	801ebec <_printf_float+0xb8>
 801ee22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee24:	3301      	adds	r3, #1
 801ee26:	e7ea      	b.n	801edfe <_printf_float+0x2ca>
 801ee28:	7fefffff 	.word	0x7fefffff
 801ee2c:	08024f81 	.word	0x08024f81
 801ee30:	08024f85 	.word	0x08024f85
 801ee34:	08024f89 	.word	0x08024f89
 801ee38:	08024f8d 	.word	0x08024f8d
 801ee3c:	08024f91 	.word	0x08024f91
 801ee40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ee42:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ee44:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee46:	429e      	cmp	r6, r3
 801ee48:	dd00      	ble.n	801ee4c <_printf_float+0x318>
 801ee4a:	001e      	movs	r6, r3
 801ee4c:	2e00      	cmp	r6, #0
 801ee4e:	dc31      	bgt.n	801eeb4 <_printf_float+0x380>
 801ee50:	43f3      	mvns	r3, r6
 801ee52:	2400      	movs	r4, #0
 801ee54:	17db      	asrs	r3, r3, #31
 801ee56:	4033      	ands	r3, r6
 801ee58:	930e      	str	r3, [sp, #56]	@ 0x38
 801ee5a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ee5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee5e:	1af3      	subs	r3, r6, r3
 801ee60:	42a3      	cmp	r3, r4
 801ee62:	dc30      	bgt.n	801eec6 <_printf_float+0x392>
 801ee64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee68:	429a      	cmp	r2, r3
 801ee6a:	dc38      	bgt.n	801eede <_printf_float+0x3aa>
 801ee6c:	682b      	ldr	r3, [r5, #0]
 801ee6e:	07db      	lsls	r3, r3, #31
 801ee70:	d435      	bmi.n	801eede <_printf_float+0x3aa>
 801ee72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ee74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee78:	1b9b      	subs	r3, r3, r6
 801ee7a:	1b14      	subs	r4, r2, r4
 801ee7c:	429c      	cmp	r4, r3
 801ee7e:	dd00      	ble.n	801ee82 <_printf_float+0x34e>
 801ee80:	001c      	movs	r4, r3
 801ee82:	2c00      	cmp	r4, #0
 801ee84:	dc34      	bgt.n	801eef0 <_printf_float+0x3bc>
 801ee86:	43e3      	mvns	r3, r4
 801ee88:	2600      	movs	r6, #0
 801ee8a:	17db      	asrs	r3, r3, #31
 801ee8c:	401c      	ands	r4, r3
 801ee8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee92:	1ad3      	subs	r3, r2, r3
 801ee94:	1b1b      	subs	r3, r3, r4
 801ee96:	42b3      	cmp	r3, r6
 801ee98:	dc00      	bgt.n	801ee9c <_printf_float+0x368>
 801ee9a:	e77c      	b.n	801ed96 <_printf_float+0x262>
 801ee9c:	002a      	movs	r2, r5
 801ee9e:	2301      	movs	r3, #1
 801eea0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eea4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eea6:	321a      	adds	r2, #26
 801eea8:	47b8      	blx	r7
 801eeaa:	3001      	adds	r0, #1
 801eeac:	d100      	bne.n	801eeb0 <_printf_float+0x37c>
 801eeae:	e69d      	b.n	801ebec <_printf_float+0xb8>
 801eeb0:	3601      	adds	r6, #1
 801eeb2:	e7ec      	b.n	801ee8e <_printf_float+0x35a>
 801eeb4:	0033      	movs	r3, r6
 801eeb6:	003a      	movs	r2, r7
 801eeb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eeba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eebc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eebe:	47a0      	blx	r4
 801eec0:	3001      	adds	r0, #1
 801eec2:	d1c5      	bne.n	801ee50 <_printf_float+0x31c>
 801eec4:	e692      	b.n	801ebec <_printf_float+0xb8>
 801eec6:	002a      	movs	r2, r5
 801eec8:	2301      	movs	r3, #1
 801eeca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eecc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eece:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801eed0:	321a      	adds	r2, #26
 801eed2:	47b0      	blx	r6
 801eed4:	3001      	adds	r0, #1
 801eed6:	d100      	bne.n	801eeda <_printf_float+0x3a6>
 801eed8:	e688      	b.n	801ebec <_printf_float+0xb8>
 801eeda:	3401      	adds	r4, #1
 801eedc:	e7bd      	b.n	801ee5a <_printf_float+0x326>
 801eede:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eee0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eee4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eee6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eee8:	47a0      	blx	r4
 801eeea:	3001      	adds	r0, #1
 801eeec:	d1c1      	bne.n	801ee72 <_printf_float+0x33e>
 801eeee:	e67d      	b.n	801ebec <_printf_float+0xb8>
 801eef0:	19ba      	adds	r2, r7, r6
 801eef2:	0023      	movs	r3, r4
 801eef4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eef8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801eefa:	47b0      	blx	r6
 801eefc:	3001      	adds	r0, #1
 801eefe:	d1c2      	bne.n	801ee86 <_printf_float+0x352>
 801ef00:	e674      	b.n	801ebec <_printf_float+0xb8>
 801ef02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ef04:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef06:	2b01      	cmp	r3, #1
 801ef08:	dc02      	bgt.n	801ef10 <_printf_float+0x3dc>
 801ef0a:	2301      	movs	r3, #1
 801ef0c:	421a      	tst	r2, r3
 801ef0e:	d039      	beq.n	801ef84 <_printf_float+0x450>
 801ef10:	2301      	movs	r3, #1
 801ef12:	003a      	movs	r2, r7
 801ef14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef1a:	47b0      	blx	r6
 801ef1c:	3001      	adds	r0, #1
 801ef1e:	d100      	bne.n	801ef22 <_printf_float+0x3ee>
 801ef20:	e664      	b.n	801ebec <_printf_float+0xb8>
 801ef22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ef26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef2a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef2c:	47b0      	blx	r6
 801ef2e:	3001      	adds	r0, #1
 801ef30:	d100      	bne.n	801ef34 <_printf_float+0x400>
 801ef32:	e65b      	b.n	801ebec <_printf_float+0xb8>
 801ef34:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ef36:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ef38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef3a:	2200      	movs	r2, #0
 801ef3c:	3b01      	subs	r3, #1
 801ef3e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef40:	2300      	movs	r3, #0
 801ef42:	f7e1 fab5 	bl	80004b0 <__aeabi_dcmpeq>
 801ef46:	2800      	cmp	r0, #0
 801ef48:	d11a      	bne.n	801ef80 <_printf_float+0x44c>
 801ef4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef4c:	1c7a      	adds	r2, r7, #1
 801ef4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef52:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef54:	47b0      	blx	r6
 801ef56:	3001      	adds	r0, #1
 801ef58:	d10e      	bne.n	801ef78 <_printf_float+0x444>
 801ef5a:	e647      	b.n	801ebec <_printf_float+0xb8>
 801ef5c:	002a      	movs	r2, r5
 801ef5e:	2301      	movs	r3, #1
 801ef60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef64:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ef66:	321a      	adds	r2, #26
 801ef68:	47b8      	blx	r7
 801ef6a:	3001      	adds	r0, #1
 801ef6c:	d100      	bne.n	801ef70 <_printf_float+0x43c>
 801ef6e:	e63d      	b.n	801ebec <_printf_float+0xb8>
 801ef70:	3601      	adds	r6, #1
 801ef72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef74:	429e      	cmp	r6, r3
 801ef76:	dbf1      	blt.n	801ef5c <_printf_float+0x428>
 801ef78:	002a      	movs	r2, r5
 801ef7a:	0023      	movs	r3, r4
 801ef7c:	3250      	adds	r2, #80	@ 0x50
 801ef7e:	e6da      	b.n	801ed36 <_printf_float+0x202>
 801ef80:	2600      	movs	r6, #0
 801ef82:	e7f6      	b.n	801ef72 <_printf_float+0x43e>
 801ef84:	003a      	movs	r2, r7
 801ef86:	e7e2      	b.n	801ef4e <_printf_float+0x41a>
 801ef88:	002a      	movs	r2, r5
 801ef8a:	2301      	movs	r3, #1
 801ef8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ef8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ef90:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ef92:	3219      	adds	r2, #25
 801ef94:	47b0      	blx	r6
 801ef96:	3001      	adds	r0, #1
 801ef98:	d100      	bne.n	801ef9c <_printf_float+0x468>
 801ef9a:	e627      	b.n	801ebec <_printf_float+0xb8>
 801ef9c:	3401      	adds	r4, #1
 801ef9e:	68eb      	ldr	r3, [r5, #12]
 801efa0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801efa2:	1a9b      	subs	r3, r3, r2
 801efa4:	42a3      	cmp	r3, r4
 801efa6:	dcef      	bgt.n	801ef88 <_printf_float+0x454>
 801efa8:	e6f9      	b.n	801ed9e <_printf_float+0x26a>
 801efaa:	2400      	movs	r4, #0
 801efac:	e7f7      	b.n	801ef9e <_printf_float+0x46a>
 801efae:	46c0      	nop			@ (mov r8, r8)

0801efb0 <_printf_common>:
 801efb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801efb2:	0016      	movs	r6, r2
 801efb4:	9301      	str	r3, [sp, #4]
 801efb6:	688a      	ldr	r2, [r1, #8]
 801efb8:	690b      	ldr	r3, [r1, #16]
 801efba:	000c      	movs	r4, r1
 801efbc:	9000      	str	r0, [sp, #0]
 801efbe:	4293      	cmp	r3, r2
 801efc0:	da00      	bge.n	801efc4 <_printf_common+0x14>
 801efc2:	0013      	movs	r3, r2
 801efc4:	0022      	movs	r2, r4
 801efc6:	6033      	str	r3, [r6, #0]
 801efc8:	3243      	adds	r2, #67	@ 0x43
 801efca:	7812      	ldrb	r2, [r2, #0]
 801efcc:	2a00      	cmp	r2, #0
 801efce:	d001      	beq.n	801efd4 <_printf_common+0x24>
 801efd0:	3301      	adds	r3, #1
 801efd2:	6033      	str	r3, [r6, #0]
 801efd4:	6823      	ldr	r3, [r4, #0]
 801efd6:	069b      	lsls	r3, r3, #26
 801efd8:	d502      	bpl.n	801efe0 <_printf_common+0x30>
 801efda:	6833      	ldr	r3, [r6, #0]
 801efdc:	3302      	adds	r3, #2
 801efde:	6033      	str	r3, [r6, #0]
 801efe0:	6822      	ldr	r2, [r4, #0]
 801efe2:	2306      	movs	r3, #6
 801efe4:	0015      	movs	r5, r2
 801efe6:	401d      	ands	r5, r3
 801efe8:	421a      	tst	r2, r3
 801efea:	d027      	beq.n	801f03c <_printf_common+0x8c>
 801efec:	0023      	movs	r3, r4
 801efee:	3343      	adds	r3, #67	@ 0x43
 801eff0:	781b      	ldrb	r3, [r3, #0]
 801eff2:	1e5a      	subs	r2, r3, #1
 801eff4:	4193      	sbcs	r3, r2
 801eff6:	6822      	ldr	r2, [r4, #0]
 801eff8:	0692      	lsls	r2, r2, #26
 801effa:	d430      	bmi.n	801f05e <_printf_common+0xae>
 801effc:	0022      	movs	r2, r4
 801effe:	9901      	ldr	r1, [sp, #4]
 801f000:	9800      	ldr	r0, [sp, #0]
 801f002:	9d08      	ldr	r5, [sp, #32]
 801f004:	3243      	adds	r2, #67	@ 0x43
 801f006:	47a8      	blx	r5
 801f008:	3001      	adds	r0, #1
 801f00a:	d025      	beq.n	801f058 <_printf_common+0xa8>
 801f00c:	2206      	movs	r2, #6
 801f00e:	6823      	ldr	r3, [r4, #0]
 801f010:	2500      	movs	r5, #0
 801f012:	4013      	ands	r3, r2
 801f014:	2b04      	cmp	r3, #4
 801f016:	d105      	bne.n	801f024 <_printf_common+0x74>
 801f018:	6833      	ldr	r3, [r6, #0]
 801f01a:	68e5      	ldr	r5, [r4, #12]
 801f01c:	1aed      	subs	r5, r5, r3
 801f01e:	43eb      	mvns	r3, r5
 801f020:	17db      	asrs	r3, r3, #31
 801f022:	401d      	ands	r5, r3
 801f024:	68a3      	ldr	r3, [r4, #8]
 801f026:	6922      	ldr	r2, [r4, #16]
 801f028:	4293      	cmp	r3, r2
 801f02a:	dd01      	ble.n	801f030 <_printf_common+0x80>
 801f02c:	1a9b      	subs	r3, r3, r2
 801f02e:	18ed      	adds	r5, r5, r3
 801f030:	2600      	movs	r6, #0
 801f032:	42b5      	cmp	r5, r6
 801f034:	d120      	bne.n	801f078 <_printf_common+0xc8>
 801f036:	2000      	movs	r0, #0
 801f038:	e010      	b.n	801f05c <_printf_common+0xac>
 801f03a:	3501      	adds	r5, #1
 801f03c:	68e3      	ldr	r3, [r4, #12]
 801f03e:	6832      	ldr	r2, [r6, #0]
 801f040:	1a9b      	subs	r3, r3, r2
 801f042:	42ab      	cmp	r3, r5
 801f044:	ddd2      	ble.n	801efec <_printf_common+0x3c>
 801f046:	0022      	movs	r2, r4
 801f048:	2301      	movs	r3, #1
 801f04a:	9901      	ldr	r1, [sp, #4]
 801f04c:	9800      	ldr	r0, [sp, #0]
 801f04e:	9f08      	ldr	r7, [sp, #32]
 801f050:	3219      	adds	r2, #25
 801f052:	47b8      	blx	r7
 801f054:	3001      	adds	r0, #1
 801f056:	d1f0      	bne.n	801f03a <_printf_common+0x8a>
 801f058:	2001      	movs	r0, #1
 801f05a:	4240      	negs	r0, r0
 801f05c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f05e:	2030      	movs	r0, #48	@ 0x30
 801f060:	18e1      	adds	r1, r4, r3
 801f062:	3143      	adds	r1, #67	@ 0x43
 801f064:	7008      	strb	r0, [r1, #0]
 801f066:	0021      	movs	r1, r4
 801f068:	1c5a      	adds	r2, r3, #1
 801f06a:	3145      	adds	r1, #69	@ 0x45
 801f06c:	7809      	ldrb	r1, [r1, #0]
 801f06e:	18a2      	adds	r2, r4, r2
 801f070:	3243      	adds	r2, #67	@ 0x43
 801f072:	3302      	adds	r3, #2
 801f074:	7011      	strb	r1, [r2, #0]
 801f076:	e7c1      	b.n	801effc <_printf_common+0x4c>
 801f078:	0022      	movs	r2, r4
 801f07a:	2301      	movs	r3, #1
 801f07c:	9901      	ldr	r1, [sp, #4]
 801f07e:	9800      	ldr	r0, [sp, #0]
 801f080:	9f08      	ldr	r7, [sp, #32]
 801f082:	321a      	adds	r2, #26
 801f084:	47b8      	blx	r7
 801f086:	3001      	adds	r0, #1
 801f088:	d0e6      	beq.n	801f058 <_printf_common+0xa8>
 801f08a:	3601      	adds	r6, #1
 801f08c:	e7d1      	b.n	801f032 <_printf_common+0x82>
	...

0801f090 <_printf_i>:
 801f090:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f092:	b08b      	sub	sp, #44	@ 0x2c
 801f094:	9206      	str	r2, [sp, #24]
 801f096:	000a      	movs	r2, r1
 801f098:	3243      	adds	r2, #67	@ 0x43
 801f09a:	9307      	str	r3, [sp, #28]
 801f09c:	9005      	str	r0, [sp, #20]
 801f09e:	9203      	str	r2, [sp, #12]
 801f0a0:	7e0a      	ldrb	r2, [r1, #24]
 801f0a2:	000c      	movs	r4, r1
 801f0a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f0a6:	2a78      	cmp	r2, #120	@ 0x78
 801f0a8:	d809      	bhi.n	801f0be <_printf_i+0x2e>
 801f0aa:	2a62      	cmp	r2, #98	@ 0x62
 801f0ac:	d80b      	bhi.n	801f0c6 <_printf_i+0x36>
 801f0ae:	2a00      	cmp	r2, #0
 801f0b0:	d100      	bne.n	801f0b4 <_printf_i+0x24>
 801f0b2:	e0bc      	b.n	801f22e <_printf_i+0x19e>
 801f0b4:	497b      	ldr	r1, [pc, #492]	@ (801f2a4 <_printf_i+0x214>)
 801f0b6:	9104      	str	r1, [sp, #16]
 801f0b8:	2a58      	cmp	r2, #88	@ 0x58
 801f0ba:	d100      	bne.n	801f0be <_printf_i+0x2e>
 801f0bc:	e090      	b.n	801f1e0 <_printf_i+0x150>
 801f0be:	0025      	movs	r5, r4
 801f0c0:	3542      	adds	r5, #66	@ 0x42
 801f0c2:	702a      	strb	r2, [r5, #0]
 801f0c4:	e022      	b.n	801f10c <_printf_i+0x7c>
 801f0c6:	0010      	movs	r0, r2
 801f0c8:	3863      	subs	r0, #99	@ 0x63
 801f0ca:	2815      	cmp	r0, #21
 801f0cc:	d8f7      	bhi.n	801f0be <_printf_i+0x2e>
 801f0ce:	f7e1 f85f 	bl	8000190 <__gnu_thumb1_case_shi>
 801f0d2:	0016      	.short	0x0016
 801f0d4:	fff6001f 	.word	0xfff6001f
 801f0d8:	fff6fff6 	.word	0xfff6fff6
 801f0dc:	001ffff6 	.word	0x001ffff6
 801f0e0:	fff6fff6 	.word	0xfff6fff6
 801f0e4:	fff6fff6 	.word	0xfff6fff6
 801f0e8:	003600a1 	.word	0x003600a1
 801f0ec:	fff60080 	.word	0xfff60080
 801f0f0:	00b2fff6 	.word	0x00b2fff6
 801f0f4:	0036fff6 	.word	0x0036fff6
 801f0f8:	fff6fff6 	.word	0xfff6fff6
 801f0fc:	0084      	.short	0x0084
 801f0fe:	0025      	movs	r5, r4
 801f100:	681a      	ldr	r2, [r3, #0]
 801f102:	3542      	adds	r5, #66	@ 0x42
 801f104:	1d11      	adds	r1, r2, #4
 801f106:	6019      	str	r1, [r3, #0]
 801f108:	6813      	ldr	r3, [r2, #0]
 801f10a:	702b      	strb	r3, [r5, #0]
 801f10c:	2301      	movs	r3, #1
 801f10e:	e0a0      	b.n	801f252 <_printf_i+0x1c2>
 801f110:	6818      	ldr	r0, [r3, #0]
 801f112:	6809      	ldr	r1, [r1, #0]
 801f114:	1d02      	adds	r2, r0, #4
 801f116:	060d      	lsls	r5, r1, #24
 801f118:	d50b      	bpl.n	801f132 <_printf_i+0xa2>
 801f11a:	6806      	ldr	r6, [r0, #0]
 801f11c:	601a      	str	r2, [r3, #0]
 801f11e:	2e00      	cmp	r6, #0
 801f120:	da03      	bge.n	801f12a <_printf_i+0x9a>
 801f122:	232d      	movs	r3, #45	@ 0x2d
 801f124:	9a03      	ldr	r2, [sp, #12]
 801f126:	4276      	negs	r6, r6
 801f128:	7013      	strb	r3, [r2, #0]
 801f12a:	4b5e      	ldr	r3, [pc, #376]	@ (801f2a4 <_printf_i+0x214>)
 801f12c:	270a      	movs	r7, #10
 801f12e:	9304      	str	r3, [sp, #16]
 801f130:	e018      	b.n	801f164 <_printf_i+0xd4>
 801f132:	6806      	ldr	r6, [r0, #0]
 801f134:	601a      	str	r2, [r3, #0]
 801f136:	0649      	lsls	r1, r1, #25
 801f138:	d5f1      	bpl.n	801f11e <_printf_i+0x8e>
 801f13a:	b236      	sxth	r6, r6
 801f13c:	e7ef      	b.n	801f11e <_printf_i+0x8e>
 801f13e:	6808      	ldr	r0, [r1, #0]
 801f140:	6819      	ldr	r1, [r3, #0]
 801f142:	c940      	ldmia	r1!, {r6}
 801f144:	0605      	lsls	r5, r0, #24
 801f146:	d402      	bmi.n	801f14e <_printf_i+0xbe>
 801f148:	0640      	lsls	r0, r0, #25
 801f14a:	d500      	bpl.n	801f14e <_printf_i+0xbe>
 801f14c:	b2b6      	uxth	r6, r6
 801f14e:	6019      	str	r1, [r3, #0]
 801f150:	4b54      	ldr	r3, [pc, #336]	@ (801f2a4 <_printf_i+0x214>)
 801f152:	270a      	movs	r7, #10
 801f154:	9304      	str	r3, [sp, #16]
 801f156:	2a6f      	cmp	r2, #111	@ 0x6f
 801f158:	d100      	bne.n	801f15c <_printf_i+0xcc>
 801f15a:	3f02      	subs	r7, #2
 801f15c:	0023      	movs	r3, r4
 801f15e:	2200      	movs	r2, #0
 801f160:	3343      	adds	r3, #67	@ 0x43
 801f162:	701a      	strb	r2, [r3, #0]
 801f164:	6863      	ldr	r3, [r4, #4]
 801f166:	60a3      	str	r3, [r4, #8]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	db03      	blt.n	801f174 <_printf_i+0xe4>
 801f16c:	2104      	movs	r1, #4
 801f16e:	6822      	ldr	r2, [r4, #0]
 801f170:	438a      	bics	r2, r1
 801f172:	6022      	str	r2, [r4, #0]
 801f174:	2e00      	cmp	r6, #0
 801f176:	d102      	bne.n	801f17e <_printf_i+0xee>
 801f178:	9d03      	ldr	r5, [sp, #12]
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d00c      	beq.n	801f198 <_printf_i+0x108>
 801f17e:	9d03      	ldr	r5, [sp, #12]
 801f180:	0030      	movs	r0, r6
 801f182:	0039      	movs	r1, r7
 801f184:	f7e1 f894 	bl	80002b0 <__aeabi_uidivmod>
 801f188:	9b04      	ldr	r3, [sp, #16]
 801f18a:	3d01      	subs	r5, #1
 801f18c:	5c5b      	ldrb	r3, [r3, r1]
 801f18e:	702b      	strb	r3, [r5, #0]
 801f190:	0033      	movs	r3, r6
 801f192:	0006      	movs	r6, r0
 801f194:	429f      	cmp	r7, r3
 801f196:	d9f3      	bls.n	801f180 <_printf_i+0xf0>
 801f198:	2f08      	cmp	r7, #8
 801f19a:	d109      	bne.n	801f1b0 <_printf_i+0x120>
 801f19c:	6823      	ldr	r3, [r4, #0]
 801f19e:	07db      	lsls	r3, r3, #31
 801f1a0:	d506      	bpl.n	801f1b0 <_printf_i+0x120>
 801f1a2:	6862      	ldr	r2, [r4, #4]
 801f1a4:	6923      	ldr	r3, [r4, #16]
 801f1a6:	429a      	cmp	r2, r3
 801f1a8:	dc02      	bgt.n	801f1b0 <_printf_i+0x120>
 801f1aa:	2330      	movs	r3, #48	@ 0x30
 801f1ac:	3d01      	subs	r5, #1
 801f1ae:	702b      	strb	r3, [r5, #0]
 801f1b0:	9b03      	ldr	r3, [sp, #12]
 801f1b2:	1b5b      	subs	r3, r3, r5
 801f1b4:	6123      	str	r3, [r4, #16]
 801f1b6:	9b07      	ldr	r3, [sp, #28]
 801f1b8:	0021      	movs	r1, r4
 801f1ba:	9300      	str	r3, [sp, #0]
 801f1bc:	9805      	ldr	r0, [sp, #20]
 801f1be:	9b06      	ldr	r3, [sp, #24]
 801f1c0:	aa09      	add	r2, sp, #36	@ 0x24
 801f1c2:	f7ff fef5 	bl	801efb0 <_printf_common>
 801f1c6:	3001      	adds	r0, #1
 801f1c8:	d148      	bne.n	801f25c <_printf_i+0x1cc>
 801f1ca:	2001      	movs	r0, #1
 801f1cc:	4240      	negs	r0, r0
 801f1ce:	b00b      	add	sp, #44	@ 0x2c
 801f1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1d2:	2220      	movs	r2, #32
 801f1d4:	6809      	ldr	r1, [r1, #0]
 801f1d6:	430a      	orrs	r2, r1
 801f1d8:	6022      	str	r2, [r4, #0]
 801f1da:	2278      	movs	r2, #120	@ 0x78
 801f1dc:	4932      	ldr	r1, [pc, #200]	@ (801f2a8 <_printf_i+0x218>)
 801f1de:	9104      	str	r1, [sp, #16]
 801f1e0:	0021      	movs	r1, r4
 801f1e2:	3145      	adds	r1, #69	@ 0x45
 801f1e4:	700a      	strb	r2, [r1, #0]
 801f1e6:	6819      	ldr	r1, [r3, #0]
 801f1e8:	6822      	ldr	r2, [r4, #0]
 801f1ea:	c940      	ldmia	r1!, {r6}
 801f1ec:	0610      	lsls	r0, r2, #24
 801f1ee:	d402      	bmi.n	801f1f6 <_printf_i+0x166>
 801f1f0:	0650      	lsls	r0, r2, #25
 801f1f2:	d500      	bpl.n	801f1f6 <_printf_i+0x166>
 801f1f4:	b2b6      	uxth	r6, r6
 801f1f6:	6019      	str	r1, [r3, #0]
 801f1f8:	07d3      	lsls	r3, r2, #31
 801f1fa:	d502      	bpl.n	801f202 <_printf_i+0x172>
 801f1fc:	2320      	movs	r3, #32
 801f1fe:	4313      	orrs	r3, r2
 801f200:	6023      	str	r3, [r4, #0]
 801f202:	2e00      	cmp	r6, #0
 801f204:	d001      	beq.n	801f20a <_printf_i+0x17a>
 801f206:	2710      	movs	r7, #16
 801f208:	e7a8      	b.n	801f15c <_printf_i+0xcc>
 801f20a:	2220      	movs	r2, #32
 801f20c:	6823      	ldr	r3, [r4, #0]
 801f20e:	4393      	bics	r3, r2
 801f210:	6023      	str	r3, [r4, #0]
 801f212:	e7f8      	b.n	801f206 <_printf_i+0x176>
 801f214:	681a      	ldr	r2, [r3, #0]
 801f216:	680d      	ldr	r5, [r1, #0]
 801f218:	1d10      	adds	r0, r2, #4
 801f21a:	6949      	ldr	r1, [r1, #20]
 801f21c:	6018      	str	r0, [r3, #0]
 801f21e:	6813      	ldr	r3, [r2, #0]
 801f220:	062e      	lsls	r6, r5, #24
 801f222:	d501      	bpl.n	801f228 <_printf_i+0x198>
 801f224:	6019      	str	r1, [r3, #0]
 801f226:	e002      	b.n	801f22e <_printf_i+0x19e>
 801f228:	066d      	lsls	r5, r5, #25
 801f22a:	d5fb      	bpl.n	801f224 <_printf_i+0x194>
 801f22c:	8019      	strh	r1, [r3, #0]
 801f22e:	2300      	movs	r3, #0
 801f230:	9d03      	ldr	r5, [sp, #12]
 801f232:	6123      	str	r3, [r4, #16]
 801f234:	e7bf      	b.n	801f1b6 <_printf_i+0x126>
 801f236:	681a      	ldr	r2, [r3, #0]
 801f238:	1d11      	adds	r1, r2, #4
 801f23a:	6019      	str	r1, [r3, #0]
 801f23c:	6815      	ldr	r5, [r2, #0]
 801f23e:	2100      	movs	r1, #0
 801f240:	0028      	movs	r0, r5
 801f242:	6862      	ldr	r2, [r4, #4]
 801f244:	f000 fb7b 	bl	801f93e <memchr>
 801f248:	2800      	cmp	r0, #0
 801f24a:	d001      	beq.n	801f250 <_printf_i+0x1c0>
 801f24c:	1b40      	subs	r0, r0, r5
 801f24e:	6060      	str	r0, [r4, #4]
 801f250:	6863      	ldr	r3, [r4, #4]
 801f252:	6123      	str	r3, [r4, #16]
 801f254:	2300      	movs	r3, #0
 801f256:	9a03      	ldr	r2, [sp, #12]
 801f258:	7013      	strb	r3, [r2, #0]
 801f25a:	e7ac      	b.n	801f1b6 <_printf_i+0x126>
 801f25c:	002a      	movs	r2, r5
 801f25e:	6923      	ldr	r3, [r4, #16]
 801f260:	9906      	ldr	r1, [sp, #24]
 801f262:	9805      	ldr	r0, [sp, #20]
 801f264:	9d07      	ldr	r5, [sp, #28]
 801f266:	47a8      	blx	r5
 801f268:	3001      	adds	r0, #1
 801f26a:	d0ae      	beq.n	801f1ca <_printf_i+0x13a>
 801f26c:	6823      	ldr	r3, [r4, #0]
 801f26e:	079b      	lsls	r3, r3, #30
 801f270:	d415      	bmi.n	801f29e <_printf_i+0x20e>
 801f272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f274:	68e0      	ldr	r0, [r4, #12]
 801f276:	4298      	cmp	r0, r3
 801f278:	daa9      	bge.n	801f1ce <_printf_i+0x13e>
 801f27a:	0018      	movs	r0, r3
 801f27c:	e7a7      	b.n	801f1ce <_printf_i+0x13e>
 801f27e:	0022      	movs	r2, r4
 801f280:	2301      	movs	r3, #1
 801f282:	9906      	ldr	r1, [sp, #24]
 801f284:	9805      	ldr	r0, [sp, #20]
 801f286:	9e07      	ldr	r6, [sp, #28]
 801f288:	3219      	adds	r2, #25
 801f28a:	47b0      	blx	r6
 801f28c:	3001      	adds	r0, #1
 801f28e:	d09c      	beq.n	801f1ca <_printf_i+0x13a>
 801f290:	3501      	adds	r5, #1
 801f292:	68e3      	ldr	r3, [r4, #12]
 801f294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f296:	1a9b      	subs	r3, r3, r2
 801f298:	42ab      	cmp	r3, r5
 801f29a:	dcf0      	bgt.n	801f27e <_printf_i+0x1ee>
 801f29c:	e7e9      	b.n	801f272 <_printf_i+0x1e2>
 801f29e:	2500      	movs	r5, #0
 801f2a0:	e7f7      	b.n	801f292 <_printf_i+0x202>
 801f2a2:	46c0      	nop			@ (mov r8, r8)
 801f2a4:	08024f93 	.word	0x08024f93
 801f2a8:	08024fa4 	.word	0x08024fa4

0801f2ac <std>:
 801f2ac:	2300      	movs	r3, #0
 801f2ae:	b510      	push	{r4, lr}
 801f2b0:	0004      	movs	r4, r0
 801f2b2:	6003      	str	r3, [r0, #0]
 801f2b4:	6043      	str	r3, [r0, #4]
 801f2b6:	6083      	str	r3, [r0, #8]
 801f2b8:	8181      	strh	r1, [r0, #12]
 801f2ba:	6643      	str	r3, [r0, #100]	@ 0x64
 801f2bc:	81c2      	strh	r2, [r0, #14]
 801f2be:	6103      	str	r3, [r0, #16]
 801f2c0:	6143      	str	r3, [r0, #20]
 801f2c2:	6183      	str	r3, [r0, #24]
 801f2c4:	0019      	movs	r1, r3
 801f2c6:	2208      	movs	r2, #8
 801f2c8:	305c      	adds	r0, #92	@ 0x5c
 801f2ca:	f000 fa67 	bl	801f79c <memset>
 801f2ce:	4b0b      	ldr	r3, [pc, #44]	@ (801f2fc <std+0x50>)
 801f2d0:	6224      	str	r4, [r4, #32]
 801f2d2:	6263      	str	r3, [r4, #36]	@ 0x24
 801f2d4:	4b0a      	ldr	r3, [pc, #40]	@ (801f300 <std+0x54>)
 801f2d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f2d8:	4b0a      	ldr	r3, [pc, #40]	@ (801f304 <std+0x58>)
 801f2da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f2dc:	4b0a      	ldr	r3, [pc, #40]	@ (801f308 <std+0x5c>)
 801f2de:	6323      	str	r3, [r4, #48]	@ 0x30
 801f2e0:	4b0a      	ldr	r3, [pc, #40]	@ (801f30c <std+0x60>)
 801f2e2:	429c      	cmp	r4, r3
 801f2e4:	d005      	beq.n	801f2f2 <std+0x46>
 801f2e6:	4b0a      	ldr	r3, [pc, #40]	@ (801f310 <std+0x64>)
 801f2e8:	429c      	cmp	r4, r3
 801f2ea:	d002      	beq.n	801f2f2 <std+0x46>
 801f2ec:	4b09      	ldr	r3, [pc, #36]	@ (801f314 <std+0x68>)
 801f2ee:	429c      	cmp	r4, r3
 801f2f0:	d103      	bne.n	801f2fa <std+0x4e>
 801f2f2:	0020      	movs	r0, r4
 801f2f4:	3058      	adds	r0, #88	@ 0x58
 801f2f6:	f000 fb1f 	bl	801f938 <__retarget_lock_init_recursive>
 801f2fa:	bd10      	pop	{r4, pc}
 801f2fc:	0801f555 	.word	0x0801f555
 801f300:	0801f57d 	.word	0x0801f57d
 801f304:	0801f5b5 	.word	0x0801f5b5
 801f308:	0801f5e1 	.word	0x0801f5e1
 801f30c:	200037b4 	.word	0x200037b4
 801f310:	2000381c 	.word	0x2000381c
 801f314:	20003884 	.word	0x20003884

0801f318 <stdio_exit_handler>:
 801f318:	b510      	push	{r4, lr}
 801f31a:	4a03      	ldr	r2, [pc, #12]	@ (801f328 <stdio_exit_handler+0x10>)
 801f31c:	4903      	ldr	r1, [pc, #12]	@ (801f32c <stdio_exit_handler+0x14>)
 801f31e:	4804      	ldr	r0, [pc, #16]	@ (801f330 <stdio_exit_handler+0x18>)
 801f320:	f000 f86c 	bl	801f3fc <_fwalk_sglue>
 801f324:	bd10      	pop	{r4, pc}
 801f326:	46c0      	nop			@ (mov r8, r8)
 801f328:	20000250 	.word	0x20000250
 801f32c:	08021f5d 	.word	0x08021f5d
 801f330:	200003cc 	.word	0x200003cc

0801f334 <cleanup_stdio>:
 801f334:	6841      	ldr	r1, [r0, #4]
 801f336:	4b0b      	ldr	r3, [pc, #44]	@ (801f364 <cleanup_stdio+0x30>)
 801f338:	b510      	push	{r4, lr}
 801f33a:	0004      	movs	r4, r0
 801f33c:	4299      	cmp	r1, r3
 801f33e:	d001      	beq.n	801f344 <cleanup_stdio+0x10>
 801f340:	f002 fe0c 	bl	8021f5c <_fflush_r>
 801f344:	68a1      	ldr	r1, [r4, #8]
 801f346:	4b08      	ldr	r3, [pc, #32]	@ (801f368 <cleanup_stdio+0x34>)
 801f348:	4299      	cmp	r1, r3
 801f34a:	d002      	beq.n	801f352 <cleanup_stdio+0x1e>
 801f34c:	0020      	movs	r0, r4
 801f34e:	f002 fe05 	bl	8021f5c <_fflush_r>
 801f352:	68e1      	ldr	r1, [r4, #12]
 801f354:	4b05      	ldr	r3, [pc, #20]	@ (801f36c <cleanup_stdio+0x38>)
 801f356:	4299      	cmp	r1, r3
 801f358:	d002      	beq.n	801f360 <cleanup_stdio+0x2c>
 801f35a:	0020      	movs	r0, r4
 801f35c:	f002 fdfe 	bl	8021f5c <_fflush_r>
 801f360:	bd10      	pop	{r4, pc}
 801f362:	46c0      	nop			@ (mov r8, r8)
 801f364:	200037b4 	.word	0x200037b4
 801f368:	2000381c 	.word	0x2000381c
 801f36c:	20003884 	.word	0x20003884

0801f370 <global_stdio_init.part.0>:
 801f370:	b510      	push	{r4, lr}
 801f372:	4b09      	ldr	r3, [pc, #36]	@ (801f398 <global_stdio_init.part.0+0x28>)
 801f374:	4a09      	ldr	r2, [pc, #36]	@ (801f39c <global_stdio_init.part.0+0x2c>)
 801f376:	2104      	movs	r1, #4
 801f378:	601a      	str	r2, [r3, #0]
 801f37a:	4809      	ldr	r0, [pc, #36]	@ (801f3a0 <global_stdio_init.part.0+0x30>)
 801f37c:	2200      	movs	r2, #0
 801f37e:	f7ff ff95 	bl	801f2ac <std>
 801f382:	2201      	movs	r2, #1
 801f384:	2109      	movs	r1, #9
 801f386:	4807      	ldr	r0, [pc, #28]	@ (801f3a4 <global_stdio_init.part.0+0x34>)
 801f388:	f7ff ff90 	bl	801f2ac <std>
 801f38c:	2202      	movs	r2, #2
 801f38e:	2112      	movs	r1, #18
 801f390:	4805      	ldr	r0, [pc, #20]	@ (801f3a8 <global_stdio_init.part.0+0x38>)
 801f392:	f7ff ff8b 	bl	801f2ac <std>
 801f396:	bd10      	pop	{r4, pc}
 801f398:	200038ec 	.word	0x200038ec
 801f39c:	0801f319 	.word	0x0801f319
 801f3a0:	200037b4 	.word	0x200037b4
 801f3a4:	2000381c 	.word	0x2000381c
 801f3a8:	20003884 	.word	0x20003884

0801f3ac <__sfp_lock_acquire>:
 801f3ac:	b510      	push	{r4, lr}
 801f3ae:	4802      	ldr	r0, [pc, #8]	@ (801f3b8 <__sfp_lock_acquire+0xc>)
 801f3b0:	f000 fac3 	bl	801f93a <__retarget_lock_acquire_recursive>
 801f3b4:	bd10      	pop	{r4, pc}
 801f3b6:	46c0      	nop			@ (mov r8, r8)
 801f3b8:	200038f5 	.word	0x200038f5

0801f3bc <__sfp_lock_release>:
 801f3bc:	b510      	push	{r4, lr}
 801f3be:	4802      	ldr	r0, [pc, #8]	@ (801f3c8 <__sfp_lock_release+0xc>)
 801f3c0:	f000 fabc 	bl	801f93c <__retarget_lock_release_recursive>
 801f3c4:	bd10      	pop	{r4, pc}
 801f3c6:	46c0      	nop			@ (mov r8, r8)
 801f3c8:	200038f5 	.word	0x200038f5

0801f3cc <__sinit>:
 801f3cc:	b510      	push	{r4, lr}
 801f3ce:	0004      	movs	r4, r0
 801f3d0:	f7ff ffec 	bl	801f3ac <__sfp_lock_acquire>
 801f3d4:	6a23      	ldr	r3, [r4, #32]
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d002      	beq.n	801f3e0 <__sinit+0x14>
 801f3da:	f7ff ffef 	bl	801f3bc <__sfp_lock_release>
 801f3de:	bd10      	pop	{r4, pc}
 801f3e0:	4b04      	ldr	r3, [pc, #16]	@ (801f3f4 <__sinit+0x28>)
 801f3e2:	6223      	str	r3, [r4, #32]
 801f3e4:	4b04      	ldr	r3, [pc, #16]	@ (801f3f8 <__sinit+0x2c>)
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	d1f6      	bne.n	801f3da <__sinit+0xe>
 801f3ec:	f7ff ffc0 	bl	801f370 <global_stdio_init.part.0>
 801f3f0:	e7f3      	b.n	801f3da <__sinit+0xe>
 801f3f2:	46c0      	nop			@ (mov r8, r8)
 801f3f4:	0801f335 	.word	0x0801f335
 801f3f8:	200038ec 	.word	0x200038ec

0801f3fc <_fwalk_sglue>:
 801f3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f3fe:	0014      	movs	r4, r2
 801f400:	2600      	movs	r6, #0
 801f402:	9000      	str	r0, [sp, #0]
 801f404:	9101      	str	r1, [sp, #4]
 801f406:	68a5      	ldr	r5, [r4, #8]
 801f408:	6867      	ldr	r7, [r4, #4]
 801f40a:	3f01      	subs	r7, #1
 801f40c:	d504      	bpl.n	801f418 <_fwalk_sglue+0x1c>
 801f40e:	6824      	ldr	r4, [r4, #0]
 801f410:	2c00      	cmp	r4, #0
 801f412:	d1f8      	bne.n	801f406 <_fwalk_sglue+0xa>
 801f414:	0030      	movs	r0, r6
 801f416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f418:	89ab      	ldrh	r3, [r5, #12]
 801f41a:	2b01      	cmp	r3, #1
 801f41c:	d908      	bls.n	801f430 <_fwalk_sglue+0x34>
 801f41e:	220e      	movs	r2, #14
 801f420:	5eab      	ldrsh	r3, [r5, r2]
 801f422:	3301      	adds	r3, #1
 801f424:	d004      	beq.n	801f430 <_fwalk_sglue+0x34>
 801f426:	0029      	movs	r1, r5
 801f428:	9800      	ldr	r0, [sp, #0]
 801f42a:	9b01      	ldr	r3, [sp, #4]
 801f42c:	4798      	blx	r3
 801f42e:	4306      	orrs	r6, r0
 801f430:	3568      	adds	r5, #104	@ 0x68
 801f432:	e7ea      	b.n	801f40a <_fwalk_sglue+0xe>

0801f434 <iprintf>:
 801f434:	b40f      	push	{r0, r1, r2, r3}
 801f436:	b507      	push	{r0, r1, r2, lr}
 801f438:	4905      	ldr	r1, [pc, #20]	@ (801f450 <iprintf+0x1c>)
 801f43a:	ab04      	add	r3, sp, #16
 801f43c:	6808      	ldr	r0, [r1, #0]
 801f43e:	cb04      	ldmia	r3!, {r2}
 801f440:	6881      	ldr	r1, [r0, #8]
 801f442:	9301      	str	r3, [sp, #4]
 801f444:	f002 fbe8 	bl	8021c18 <_vfiprintf_r>
 801f448:	b003      	add	sp, #12
 801f44a:	bc08      	pop	{r3}
 801f44c:	b004      	add	sp, #16
 801f44e:	4718      	bx	r3
 801f450:	200003c8 	.word	0x200003c8

0801f454 <_puts_r>:
 801f454:	6a03      	ldr	r3, [r0, #32]
 801f456:	b570      	push	{r4, r5, r6, lr}
 801f458:	0005      	movs	r5, r0
 801f45a:	000e      	movs	r6, r1
 801f45c:	6884      	ldr	r4, [r0, #8]
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d101      	bne.n	801f466 <_puts_r+0x12>
 801f462:	f7ff ffb3 	bl	801f3cc <__sinit>
 801f466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f468:	07db      	lsls	r3, r3, #31
 801f46a:	d405      	bmi.n	801f478 <_puts_r+0x24>
 801f46c:	89a3      	ldrh	r3, [r4, #12]
 801f46e:	059b      	lsls	r3, r3, #22
 801f470:	d402      	bmi.n	801f478 <_puts_r+0x24>
 801f472:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f474:	f000 fa61 	bl	801f93a <__retarget_lock_acquire_recursive>
 801f478:	89a3      	ldrh	r3, [r4, #12]
 801f47a:	071b      	lsls	r3, r3, #28
 801f47c:	d502      	bpl.n	801f484 <_puts_r+0x30>
 801f47e:	6923      	ldr	r3, [r4, #16]
 801f480:	2b00      	cmp	r3, #0
 801f482:	d11f      	bne.n	801f4c4 <_puts_r+0x70>
 801f484:	0021      	movs	r1, r4
 801f486:	0028      	movs	r0, r5
 801f488:	f000 f92a 	bl	801f6e0 <__swsetup_r>
 801f48c:	2800      	cmp	r0, #0
 801f48e:	d019      	beq.n	801f4c4 <_puts_r+0x70>
 801f490:	2501      	movs	r5, #1
 801f492:	426d      	negs	r5, r5
 801f494:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f496:	07db      	lsls	r3, r3, #31
 801f498:	d405      	bmi.n	801f4a6 <_puts_r+0x52>
 801f49a:	89a3      	ldrh	r3, [r4, #12]
 801f49c:	059b      	lsls	r3, r3, #22
 801f49e:	d402      	bmi.n	801f4a6 <_puts_r+0x52>
 801f4a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f4a2:	f000 fa4b 	bl	801f93c <__retarget_lock_release_recursive>
 801f4a6:	0028      	movs	r0, r5
 801f4a8:	bd70      	pop	{r4, r5, r6, pc}
 801f4aa:	3601      	adds	r6, #1
 801f4ac:	60a3      	str	r3, [r4, #8]
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	da04      	bge.n	801f4bc <_puts_r+0x68>
 801f4b2:	69a2      	ldr	r2, [r4, #24]
 801f4b4:	429a      	cmp	r2, r3
 801f4b6:	dc16      	bgt.n	801f4e6 <_puts_r+0x92>
 801f4b8:	290a      	cmp	r1, #10
 801f4ba:	d014      	beq.n	801f4e6 <_puts_r+0x92>
 801f4bc:	6823      	ldr	r3, [r4, #0]
 801f4be:	1c5a      	adds	r2, r3, #1
 801f4c0:	6022      	str	r2, [r4, #0]
 801f4c2:	7019      	strb	r1, [r3, #0]
 801f4c4:	68a3      	ldr	r3, [r4, #8]
 801f4c6:	7831      	ldrb	r1, [r6, #0]
 801f4c8:	3b01      	subs	r3, #1
 801f4ca:	2900      	cmp	r1, #0
 801f4cc:	d1ed      	bne.n	801f4aa <_puts_r+0x56>
 801f4ce:	60a3      	str	r3, [r4, #8]
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	da0f      	bge.n	801f4f4 <_puts_r+0xa0>
 801f4d4:	0022      	movs	r2, r4
 801f4d6:	0028      	movs	r0, r5
 801f4d8:	310a      	adds	r1, #10
 801f4da:	f000 f8bf 	bl	801f65c <__swbuf_r>
 801f4de:	3001      	adds	r0, #1
 801f4e0:	d0d6      	beq.n	801f490 <_puts_r+0x3c>
 801f4e2:	250a      	movs	r5, #10
 801f4e4:	e7d6      	b.n	801f494 <_puts_r+0x40>
 801f4e6:	0022      	movs	r2, r4
 801f4e8:	0028      	movs	r0, r5
 801f4ea:	f000 f8b7 	bl	801f65c <__swbuf_r>
 801f4ee:	3001      	adds	r0, #1
 801f4f0:	d1e8      	bne.n	801f4c4 <_puts_r+0x70>
 801f4f2:	e7cd      	b.n	801f490 <_puts_r+0x3c>
 801f4f4:	6823      	ldr	r3, [r4, #0]
 801f4f6:	1c5a      	adds	r2, r3, #1
 801f4f8:	6022      	str	r2, [r4, #0]
 801f4fa:	220a      	movs	r2, #10
 801f4fc:	701a      	strb	r2, [r3, #0]
 801f4fe:	e7f0      	b.n	801f4e2 <_puts_r+0x8e>

0801f500 <puts>:
 801f500:	b510      	push	{r4, lr}
 801f502:	4b03      	ldr	r3, [pc, #12]	@ (801f510 <puts+0x10>)
 801f504:	0001      	movs	r1, r0
 801f506:	6818      	ldr	r0, [r3, #0]
 801f508:	f7ff ffa4 	bl	801f454 <_puts_r>
 801f50c:	bd10      	pop	{r4, pc}
 801f50e:	46c0      	nop			@ (mov r8, r8)
 801f510:	200003c8 	.word	0x200003c8

0801f514 <siprintf>:
 801f514:	b40e      	push	{r1, r2, r3}
 801f516:	b500      	push	{lr}
 801f518:	490b      	ldr	r1, [pc, #44]	@ (801f548 <siprintf+0x34>)
 801f51a:	b09c      	sub	sp, #112	@ 0x70
 801f51c:	ab1d      	add	r3, sp, #116	@ 0x74
 801f51e:	9002      	str	r0, [sp, #8]
 801f520:	9006      	str	r0, [sp, #24]
 801f522:	9107      	str	r1, [sp, #28]
 801f524:	9104      	str	r1, [sp, #16]
 801f526:	4809      	ldr	r0, [pc, #36]	@ (801f54c <siprintf+0x38>)
 801f528:	4909      	ldr	r1, [pc, #36]	@ (801f550 <siprintf+0x3c>)
 801f52a:	cb04      	ldmia	r3!, {r2}
 801f52c:	9105      	str	r1, [sp, #20]
 801f52e:	6800      	ldr	r0, [r0, #0]
 801f530:	a902      	add	r1, sp, #8
 801f532:	9301      	str	r3, [sp, #4]
 801f534:	f002 fa4a 	bl	80219cc <_svfiprintf_r>
 801f538:	2200      	movs	r2, #0
 801f53a:	9b02      	ldr	r3, [sp, #8]
 801f53c:	701a      	strb	r2, [r3, #0]
 801f53e:	b01c      	add	sp, #112	@ 0x70
 801f540:	bc08      	pop	{r3}
 801f542:	b003      	add	sp, #12
 801f544:	4718      	bx	r3
 801f546:	46c0      	nop			@ (mov r8, r8)
 801f548:	7fffffff 	.word	0x7fffffff
 801f54c:	200003c8 	.word	0x200003c8
 801f550:	ffff0208 	.word	0xffff0208

0801f554 <__sread>:
 801f554:	b570      	push	{r4, r5, r6, lr}
 801f556:	000c      	movs	r4, r1
 801f558:	250e      	movs	r5, #14
 801f55a:	5f49      	ldrsh	r1, [r1, r5]
 801f55c:	f000 f99a 	bl	801f894 <_read_r>
 801f560:	2800      	cmp	r0, #0
 801f562:	db03      	blt.n	801f56c <__sread+0x18>
 801f564:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f566:	181b      	adds	r3, r3, r0
 801f568:	6563      	str	r3, [r4, #84]	@ 0x54
 801f56a:	bd70      	pop	{r4, r5, r6, pc}
 801f56c:	89a3      	ldrh	r3, [r4, #12]
 801f56e:	4a02      	ldr	r2, [pc, #8]	@ (801f578 <__sread+0x24>)
 801f570:	4013      	ands	r3, r2
 801f572:	81a3      	strh	r3, [r4, #12]
 801f574:	e7f9      	b.n	801f56a <__sread+0x16>
 801f576:	46c0      	nop			@ (mov r8, r8)
 801f578:	ffffefff 	.word	0xffffefff

0801f57c <__swrite>:
 801f57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f57e:	001f      	movs	r7, r3
 801f580:	898b      	ldrh	r3, [r1, #12]
 801f582:	0005      	movs	r5, r0
 801f584:	000c      	movs	r4, r1
 801f586:	0016      	movs	r6, r2
 801f588:	05db      	lsls	r3, r3, #23
 801f58a:	d505      	bpl.n	801f598 <__swrite+0x1c>
 801f58c:	230e      	movs	r3, #14
 801f58e:	5ec9      	ldrsh	r1, [r1, r3]
 801f590:	2200      	movs	r2, #0
 801f592:	2302      	movs	r3, #2
 801f594:	f000 f96a 	bl	801f86c <_lseek_r>
 801f598:	89a3      	ldrh	r3, [r4, #12]
 801f59a:	4a05      	ldr	r2, [pc, #20]	@ (801f5b0 <__swrite+0x34>)
 801f59c:	0028      	movs	r0, r5
 801f59e:	4013      	ands	r3, r2
 801f5a0:	81a3      	strh	r3, [r4, #12]
 801f5a2:	0032      	movs	r2, r6
 801f5a4:	230e      	movs	r3, #14
 801f5a6:	5ee1      	ldrsh	r1, [r4, r3]
 801f5a8:	003b      	movs	r3, r7
 801f5aa:	f000 f987 	bl	801f8bc <_write_r>
 801f5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f5b0:	ffffefff 	.word	0xffffefff

0801f5b4 <__sseek>:
 801f5b4:	b570      	push	{r4, r5, r6, lr}
 801f5b6:	000c      	movs	r4, r1
 801f5b8:	250e      	movs	r5, #14
 801f5ba:	5f49      	ldrsh	r1, [r1, r5]
 801f5bc:	f000 f956 	bl	801f86c <_lseek_r>
 801f5c0:	89a3      	ldrh	r3, [r4, #12]
 801f5c2:	1c42      	adds	r2, r0, #1
 801f5c4:	d103      	bne.n	801f5ce <__sseek+0x1a>
 801f5c6:	4a05      	ldr	r2, [pc, #20]	@ (801f5dc <__sseek+0x28>)
 801f5c8:	4013      	ands	r3, r2
 801f5ca:	81a3      	strh	r3, [r4, #12]
 801f5cc:	bd70      	pop	{r4, r5, r6, pc}
 801f5ce:	2280      	movs	r2, #128	@ 0x80
 801f5d0:	0152      	lsls	r2, r2, #5
 801f5d2:	4313      	orrs	r3, r2
 801f5d4:	81a3      	strh	r3, [r4, #12]
 801f5d6:	6560      	str	r0, [r4, #84]	@ 0x54
 801f5d8:	e7f8      	b.n	801f5cc <__sseek+0x18>
 801f5da:	46c0      	nop			@ (mov r8, r8)
 801f5dc:	ffffefff 	.word	0xffffefff

0801f5e0 <__sclose>:
 801f5e0:	b510      	push	{r4, lr}
 801f5e2:	230e      	movs	r3, #14
 801f5e4:	5ec9      	ldrsh	r1, [r1, r3]
 801f5e6:	f000 f92f 	bl	801f848 <_close_r>
 801f5ea:	bd10      	pop	{r4, pc}

0801f5ec <_vsniprintf_r>:
 801f5ec:	b530      	push	{r4, r5, lr}
 801f5ee:	0014      	movs	r4, r2
 801f5f0:	0005      	movs	r5, r0
 801f5f2:	001a      	movs	r2, r3
 801f5f4:	b09b      	sub	sp, #108	@ 0x6c
 801f5f6:	2c00      	cmp	r4, #0
 801f5f8:	da05      	bge.n	801f606 <_vsniprintf_r+0x1a>
 801f5fa:	238b      	movs	r3, #139	@ 0x8b
 801f5fc:	6003      	str	r3, [r0, #0]
 801f5fe:	2001      	movs	r0, #1
 801f600:	4240      	negs	r0, r0
 801f602:	b01b      	add	sp, #108	@ 0x6c
 801f604:	bd30      	pop	{r4, r5, pc}
 801f606:	2382      	movs	r3, #130	@ 0x82
 801f608:	4668      	mov	r0, sp
 801f60a:	009b      	lsls	r3, r3, #2
 801f60c:	8183      	strh	r3, [r0, #12]
 801f60e:	2300      	movs	r3, #0
 801f610:	9100      	str	r1, [sp, #0]
 801f612:	9104      	str	r1, [sp, #16]
 801f614:	429c      	cmp	r4, r3
 801f616:	d000      	beq.n	801f61a <_vsniprintf_r+0x2e>
 801f618:	1e63      	subs	r3, r4, #1
 801f61a:	9302      	str	r3, [sp, #8]
 801f61c:	9305      	str	r3, [sp, #20]
 801f61e:	2301      	movs	r3, #1
 801f620:	4669      	mov	r1, sp
 801f622:	425b      	negs	r3, r3
 801f624:	81cb      	strh	r3, [r1, #14]
 801f626:	0028      	movs	r0, r5
 801f628:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f62a:	f002 f9cf 	bl	80219cc <_svfiprintf_r>
 801f62e:	1c43      	adds	r3, r0, #1
 801f630:	da01      	bge.n	801f636 <_vsniprintf_r+0x4a>
 801f632:	238b      	movs	r3, #139	@ 0x8b
 801f634:	602b      	str	r3, [r5, #0]
 801f636:	2c00      	cmp	r4, #0
 801f638:	d0e3      	beq.n	801f602 <_vsniprintf_r+0x16>
 801f63a:	2200      	movs	r2, #0
 801f63c:	9b00      	ldr	r3, [sp, #0]
 801f63e:	701a      	strb	r2, [r3, #0]
 801f640:	e7df      	b.n	801f602 <_vsniprintf_r+0x16>
	...

0801f644 <vsniprintf>:
 801f644:	b513      	push	{r0, r1, r4, lr}
 801f646:	4c04      	ldr	r4, [pc, #16]	@ (801f658 <vsniprintf+0x14>)
 801f648:	9300      	str	r3, [sp, #0]
 801f64a:	0013      	movs	r3, r2
 801f64c:	000a      	movs	r2, r1
 801f64e:	0001      	movs	r1, r0
 801f650:	6820      	ldr	r0, [r4, #0]
 801f652:	f7ff ffcb 	bl	801f5ec <_vsniprintf_r>
 801f656:	bd16      	pop	{r1, r2, r4, pc}
 801f658:	200003c8 	.word	0x200003c8

0801f65c <__swbuf_r>:
 801f65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f65e:	0006      	movs	r6, r0
 801f660:	000d      	movs	r5, r1
 801f662:	0014      	movs	r4, r2
 801f664:	2800      	cmp	r0, #0
 801f666:	d004      	beq.n	801f672 <__swbuf_r+0x16>
 801f668:	6a03      	ldr	r3, [r0, #32]
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d101      	bne.n	801f672 <__swbuf_r+0x16>
 801f66e:	f7ff fead 	bl	801f3cc <__sinit>
 801f672:	69a3      	ldr	r3, [r4, #24]
 801f674:	60a3      	str	r3, [r4, #8]
 801f676:	89a3      	ldrh	r3, [r4, #12]
 801f678:	071b      	lsls	r3, r3, #28
 801f67a:	d502      	bpl.n	801f682 <__swbuf_r+0x26>
 801f67c:	6923      	ldr	r3, [r4, #16]
 801f67e:	2b00      	cmp	r3, #0
 801f680:	d109      	bne.n	801f696 <__swbuf_r+0x3a>
 801f682:	0021      	movs	r1, r4
 801f684:	0030      	movs	r0, r6
 801f686:	f000 f82b 	bl	801f6e0 <__swsetup_r>
 801f68a:	2800      	cmp	r0, #0
 801f68c:	d003      	beq.n	801f696 <__swbuf_r+0x3a>
 801f68e:	2501      	movs	r5, #1
 801f690:	426d      	negs	r5, r5
 801f692:	0028      	movs	r0, r5
 801f694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f696:	6923      	ldr	r3, [r4, #16]
 801f698:	6820      	ldr	r0, [r4, #0]
 801f69a:	b2ef      	uxtb	r7, r5
 801f69c:	1ac0      	subs	r0, r0, r3
 801f69e:	6963      	ldr	r3, [r4, #20]
 801f6a0:	b2ed      	uxtb	r5, r5
 801f6a2:	4283      	cmp	r3, r0
 801f6a4:	dc05      	bgt.n	801f6b2 <__swbuf_r+0x56>
 801f6a6:	0021      	movs	r1, r4
 801f6a8:	0030      	movs	r0, r6
 801f6aa:	f002 fc57 	bl	8021f5c <_fflush_r>
 801f6ae:	2800      	cmp	r0, #0
 801f6b0:	d1ed      	bne.n	801f68e <__swbuf_r+0x32>
 801f6b2:	68a3      	ldr	r3, [r4, #8]
 801f6b4:	3001      	adds	r0, #1
 801f6b6:	3b01      	subs	r3, #1
 801f6b8:	60a3      	str	r3, [r4, #8]
 801f6ba:	6823      	ldr	r3, [r4, #0]
 801f6bc:	1c5a      	adds	r2, r3, #1
 801f6be:	6022      	str	r2, [r4, #0]
 801f6c0:	701f      	strb	r7, [r3, #0]
 801f6c2:	6963      	ldr	r3, [r4, #20]
 801f6c4:	4283      	cmp	r3, r0
 801f6c6:	d004      	beq.n	801f6d2 <__swbuf_r+0x76>
 801f6c8:	89a3      	ldrh	r3, [r4, #12]
 801f6ca:	07db      	lsls	r3, r3, #31
 801f6cc:	d5e1      	bpl.n	801f692 <__swbuf_r+0x36>
 801f6ce:	2d0a      	cmp	r5, #10
 801f6d0:	d1df      	bne.n	801f692 <__swbuf_r+0x36>
 801f6d2:	0021      	movs	r1, r4
 801f6d4:	0030      	movs	r0, r6
 801f6d6:	f002 fc41 	bl	8021f5c <_fflush_r>
 801f6da:	2800      	cmp	r0, #0
 801f6dc:	d0d9      	beq.n	801f692 <__swbuf_r+0x36>
 801f6de:	e7d6      	b.n	801f68e <__swbuf_r+0x32>

0801f6e0 <__swsetup_r>:
 801f6e0:	4b2d      	ldr	r3, [pc, #180]	@ (801f798 <__swsetup_r+0xb8>)
 801f6e2:	b570      	push	{r4, r5, r6, lr}
 801f6e4:	0005      	movs	r5, r0
 801f6e6:	6818      	ldr	r0, [r3, #0]
 801f6e8:	000c      	movs	r4, r1
 801f6ea:	2800      	cmp	r0, #0
 801f6ec:	d004      	beq.n	801f6f8 <__swsetup_r+0x18>
 801f6ee:	6a03      	ldr	r3, [r0, #32]
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d101      	bne.n	801f6f8 <__swsetup_r+0x18>
 801f6f4:	f7ff fe6a 	bl	801f3cc <__sinit>
 801f6f8:	230c      	movs	r3, #12
 801f6fa:	5ee2      	ldrsh	r2, [r4, r3]
 801f6fc:	0713      	lsls	r3, r2, #28
 801f6fe:	d423      	bmi.n	801f748 <__swsetup_r+0x68>
 801f700:	06d3      	lsls	r3, r2, #27
 801f702:	d407      	bmi.n	801f714 <__swsetup_r+0x34>
 801f704:	2309      	movs	r3, #9
 801f706:	602b      	str	r3, [r5, #0]
 801f708:	2340      	movs	r3, #64	@ 0x40
 801f70a:	2001      	movs	r0, #1
 801f70c:	4313      	orrs	r3, r2
 801f70e:	81a3      	strh	r3, [r4, #12]
 801f710:	4240      	negs	r0, r0
 801f712:	e03a      	b.n	801f78a <__swsetup_r+0xaa>
 801f714:	0752      	lsls	r2, r2, #29
 801f716:	d513      	bpl.n	801f740 <__swsetup_r+0x60>
 801f718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f71a:	2900      	cmp	r1, #0
 801f71c:	d008      	beq.n	801f730 <__swsetup_r+0x50>
 801f71e:	0023      	movs	r3, r4
 801f720:	3344      	adds	r3, #68	@ 0x44
 801f722:	4299      	cmp	r1, r3
 801f724:	d002      	beq.n	801f72c <__swsetup_r+0x4c>
 801f726:	0028      	movs	r0, r5
 801f728:	f000 ffa6 	bl	8020678 <_free_r>
 801f72c:	2300      	movs	r3, #0
 801f72e:	6363      	str	r3, [r4, #52]	@ 0x34
 801f730:	2224      	movs	r2, #36	@ 0x24
 801f732:	89a3      	ldrh	r3, [r4, #12]
 801f734:	4393      	bics	r3, r2
 801f736:	81a3      	strh	r3, [r4, #12]
 801f738:	2300      	movs	r3, #0
 801f73a:	6063      	str	r3, [r4, #4]
 801f73c:	6923      	ldr	r3, [r4, #16]
 801f73e:	6023      	str	r3, [r4, #0]
 801f740:	2308      	movs	r3, #8
 801f742:	89a2      	ldrh	r2, [r4, #12]
 801f744:	4313      	orrs	r3, r2
 801f746:	81a3      	strh	r3, [r4, #12]
 801f748:	6923      	ldr	r3, [r4, #16]
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	d10b      	bne.n	801f766 <__swsetup_r+0x86>
 801f74e:	21a0      	movs	r1, #160	@ 0xa0
 801f750:	2280      	movs	r2, #128	@ 0x80
 801f752:	89a3      	ldrh	r3, [r4, #12]
 801f754:	0089      	lsls	r1, r1, #2
 801f756:	0092      	lsls	r2, r2, #2
 801f758:	400b      	ands	r3, r1
 801f75a:	4293      	cmp	r3, r2
 801f75c:	d003      	beq.n	801f766 <__swsetup_r+0x86>
 801f75e:	0021      	movs	r1, r4
 801f760:	0028      	movs	r0, r5
 801f762:	f002 fc51 	bl	8022008 <__smakebuf_r>
 801f766:	230c      	movs	r3, #12
 801f768:	5ee2      	ldrsh	r2, [r4, r3]
 801f76a:	2101      	movs	r1, #1
 801f76c:	0013      	movs	r3, r2
 801f76e:	400b      	ands	r3, r1
 801f770:	420a      	tst	r2, r1
 801f772:	d00b      	beq.n	801f78c <__swsetup_r+0xac>
 801f774:	2300      	movs	r3, #0
 801f776:	60a3      	str	r3, [r4, #8]
 801f778:	6963      	ldr	r3, [r4, #20]
 801f77a:	425b      	negs	r3, r3
 801f77c:	61a3      	str	r3, [r4, #24]
 801f77e:	2000      	movs	r0, #0
 801f780:	6923      	ldr	r3, [r4, #16]
 801f782:	4283      	cmp	r3, r0
 801f784:	d101      	bne.n	801f78a <__swsetup_r+0xaa>
 801f786:	0613      	lsls	r3, r2, #24
 801f788:	d4be      	bmi.n	801f708 <__swsetup_r+0x28>
 801f78a:	bd70      	pop	{r4, r5, r6, pc}
 801f78c:	0791      	lsls	r1, r2, #30
 801f78e:	d400      	bmi.n	801f792 <__swsetup_r+0xb2>
 801f790:	6963      	ldr	r3, [r4, #20]
 801f792:	60a3      	str	r3, [r4, #8]
 801f794:	e7f3      	b.n	801f77e <__swsetup_r+0x9e>
 801f796:	46c0      	nop			@ (mov r8, r8)
 801f798:	200003c8 	.word	0x200003c8

0801f79c <memset>:
 801f79c:	0003      	movs	r3, r0
 801f79e:	1882      	adds	r2, r0, r2
 801f7a0:	4293      	cmp	r3, r2
 801f7a2:	d100      	bne.n	801f7a6 <memset+0xa>
 801f7a4:	4770      	bx	lr
 801f7a6:	7019      	strb	r1, [r3, #0]
 801f7a8:	3301      	adds	r3, #1
 801f7aa:	e7f9      	b.n	801f7a0 <memset+0x4>

0801f7ac <strchr>:
 801f7ac:	b2c9      	uxtb	r1, r1
 801f7ae:	7803      	ldrb	r3, [r0, #0]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d004      	beq.n	801f7be <strchr+0x12>
 801f7b4:	428b      	cmp	r3, r1
 801f7b6:	d100      	bne.n	801f7ba <strchr+0xe>
 801f7b8:	4770      	bx	lr
 801f7ba:	3001      	adds	r0, #1
 801f7bc:	e7f7      	b.n	801f7ae <strchr+0x2>
 801f7be:	424b      	negs	r3, r1
 801f7c0:	4159      	adcs	r1, r3
 801f7c2:	4249      	negs	r1, r1
 801f7c4:	4008      	ands	r0, r1
 801f7c6:	e7f7      	b.n	801f7b8 <strchr+0xc>

0801f7c8 <strncmp>:
 801f7c8:	b530      	push	{r4, r5, lr}
 801f7ca:	0005      	movs	r5, r0
 801f7cc:	1e10      	subs	r0, r2, #0
 801f7ce:	d00b      	beq.n	801f7e8 <strncmp+0x20>
 801f7d0:	2400      	movs	r4, #0
 801f7d2:	3a01      	subs	r2, #1
 801f7d4:	5d2b      	ldrb	r3, [r5, r4]
 801f7d6:	5d08      	ldrb	r0, [r1, r4]
 801f7d8:	4283      	cmp	r3, r0
 801f7da:	d104      	bne.n	801f7e6 <strncmp+0x1e>
 801f7dc:	42a2      	cmp	r2, r4
 801f7de:	d002      	beq.n	801f7e6 <strncmp+0x1e>
 801f7e0:	3401      	adds	r4, #1
 801f7e2:	2b00      	cmp	r3, #0
 801f7e4:	d1f6      	bne.n	801f7d4 <strncmp+0xc>
 801f7e6:	1a18      	subs	r0, r3, r0
 801f7e8:	bd30      	pop	{r4, r5, pc}

0801f7ea <strncpy>:
 801f7ea:	0003      	movs	r3, r0
 801f7ec:	b530      	push	{r4, r5, lr}
 801f7ee:	001d      	movs	r5, r3
 801f7f0:	2a00      	cmp	r2, #0
 801f7f2:	d006      	beq.n	801f802 <strncpy+0x18>
 801f7f4:	780c      	ldrb	r4, [r1, #0]
 801f7f6:	3a01      	subs	r2, #1
 801f7f8:	3301      	adds	r3, #1
 801f7fa:	702c      	strb	r4, [r5, #0]
 801f7fc:	3101      	adds	r1, #1
 801f7fe:	2c00      	cmp	r4, #0
 801f800:	d1f5      	bne.n	801f7ee <strncpy+0x4>
 801f802:	2100      	movs	r1, #0
 801f804:	189a      	adds	r2, r3, r2
 801f806:	4293      	cmp	r3, r2
 801f808:	d100      	bne.n	801f80c <strncpy+0x22>
 801f80a:	bd30      	pop	{r4, r5, pc}
 801f80c:	7019      	strb	r1, [r3, #0]
 801f80e:	3301      	adds	r3, #1
 801f810:	e7f9      	b.n	801f806 <strncpy+0x1c>

0801f812 <strstr>:
 801f812:	780a      	ldrb	r2, [r1, #0]
 801f814:	b530      	push	{r4, r5, lr}
 801f816:	2a00      	cmp	r2, #0
 801f818:	d10c      	bne.n	801f834 <strstr+0x22>
 801f81a:	bd30      	pop	{r4, r5, pc}
 801f81c:	429a      	cmp	r2, r3
 801f81e:	d108      	bne.n	801f832 <strstr+0x20>
 801f820:	2301      	movs	r3, #1
 801f822:	5ccc      	ldrb	r4, [r1, r3]
 801f824:	2c00      	cmp	r4, #0
 801f826:	d0f8      	beq.n	801f81a <strstr+0x8>
 801f828:	5cc5      	ldrb	r5, [r0, r3]
 801f82a:	42a5      	cmp	r5, r4
 801f82c:	d101      	bne.n	801f832 <strstr+0x20>
 801f82e:	3301      	adds	r3, #1
 801f830:	e7f7      	b.n	801f822 <strstr+0x10>
 801f832:	3001      	adds	r0, #1
 801f834:	7803      	ldrb	r3, [r0, #0]
 801f836:	2b00      	cmp	r3, #0
 801f838:	d1f0      	bne.n	801f81c <strstr+0xa>
 801f83a:	0018      	movs	r0, r3
 801f83c:	e7ed      	b.n	801f81a <strstr+0x8>
	...

0801f840 <_localeconv_r>:
 801f840:	4800      	ldr	r0, [pc, #0]	@ (801f844 <_localeconv_r+0x4>)
 801f842:	4770      	bx	lr
 801f844:	2000034c 	.word	0x2000034c

0801f848 <_close_r>:
 801f848:	2300      	movs	r3, #0
 801f84a:	b570      	push	{r4, r5, r6, lr}
 801f84c:	4d06      	ldr	r5, [pc, #24]	@ (801f868 <_close_r+0x20>)
 801f84e:	0004      	movs	r4, r0
 801f850:	0008      	movs	r0, r1
 801f852:	602b      	str	r3, [r5, #0]
 801f854:	f7ed fcb2 	bl	800d1bc <_close>
 801f858:	1c43      	adds	r3, r0, #1
 801f85a:	d103      	bne.n	801f864 <_close_r+0x1c>
 801f85c:	682b      	ldr	r3, [r5, #0]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d000      	beq.n	801f864 <_close_r+0x1c>
 801f862:	6023      	str	r3, [r4, #0]
 801f864:	bd70      	pop	{r4, r5, r6, pc}
 801f866:	46c0      	nop			@ (mov r8, r8)
 801f868:	200038f0 	.word	0x200038f0

0801f86c <_lseek_r>:
 801f86c:	b570      	push	{r4, r5, r6, lr}
 801f86e:	0004      	movs	r4, r0
 801f870:	0008      	movs	r0, r1
 801f872:	0011      	movs	r1, r2
 801f874:	001a      	movs	r2, r3
 801f876:	2300      	movs	r3, #0
 801f878:	4d05      	ldr	r5, [pc, #20]	@ (801f890 <_lseek_r+0x24>)
 801f87a:	602b      	str	r3, [r5, #0]
 801f87c:	f7ed fcbf 	bl	800d1fe <_lseek>
 801f880:	1c43      	adds	r3, r0, #1
 801f882:	d103      	bne.n	801f88c <_lseek_r+0x20>
 801f884:	682b      	ldr	r3, [r5, #0]
 801f886:	2b00      	cmp	r3, #0
 801f888:	d000      	beq.n	801f88c <_lseek_r+0x20>
 801f88a:	6023      	str	r3, [r4, #0]
 801f88c:	bd70      	pop	{r4, r5, r6, pc}
 801f88e:	46c0      	nop			@ (mov r8, r8)
 801f890:	200038f0 	.word	0x200038f0

0801f894 <_read_r>:
 801f894:	b570      	push	{r4, r5, r6, lr}
 801f896:	0004      	movs	r4, r0
 801f898:	0008      	movs	r0, r1
 801f89a:	0011      	movs	r1, r2
 801f89c:	001a      	movs	r2, r3
 801f89e:	2300      	movs	r3, #0
 801f8a0:	4d05      	ldr	r5, [pc, #20]	@ (801f8b8 <_read_r+0x24>)
 801f8a2:	602b      	str	r3, [r5, #0]
 801f8a4:	f7ed fc6d 	bl	800d182 <_read>
 801f8a8:	1c43      	adds	r3, r0, #1
 801f8aa:	d103      	bne.n	801f8b4 <_read_r+0x20>
 801f8ac:	682b      	ldr	r3, [r5, #0]
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d000      	beq.n	801f8b4 <_read_r+0x20>
 801f8b2:	6023      	str	r3, [r4, #0]
 801f8b4:	bd70      	pop	{r4, r5, r6, pc}
 801f8b6:	46c0      	nop			@ (mov r8, r8)
 801f8b8:	200038f0 	.word	0x200038f0

0801f8bc <_write_r>:
 801f8bc:	b570      	push	{r4, r5, r6, lr}
 801f8be:	0004      	movs	r4, r0
 801f8c0:	0008      	movs	r0, r1
 801f8c2:	0011      	movs	r1, r2
 801f8c4:	001a      	movs	r2, r3
 801f8c6:	2300      	movs	r3, #0
 801f8c8:	4d05      	ldr	r5, [pc, #20]	@ (801f8e0 <_write_r+0x24>)
 801f8ca:	602b      	str	r3, [r5, #0]
 801f8cc:	f7ee f92e 	bl	800db2c <_write>
 801f8d0:	1c43      	adds	r3, r0, #1
 801f8d2:	d103      	bne.n	801f8dc <_write_r+0x20>
 801f8d4:	682b      	ldr	r3, [r5, #0]
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	d000      	beq.n	801f8dc <_write_r+0x20>
 801f8da:	6023      	str	r3, [r4, #0]
 801f8dc:	bd70      	pop	{r4, r5, r6, pc}
 801f8de:	46c0      	nop			@ (mov r8, r8)
 801f8e0:	200038f0 	.word	0x200038f0

0801f8e4 <__errno>:
 801f8e4:	4b01      	ldr	r3, [pc, #4]	@ (801f8ec <__errno+0x8>)
 801f8e6:	6818      	ldr	r0, [r3, #0]
 801f8e8:	4770      	bx	lr
 801f8ea:	46c0      	nop			@ (mov r8, r8)
 801f8ec:	200003c8 	.word	0x200003c8

0801f8f0 <__libc_init_array>:
 801f8f0:	b570      	push	{r4, r5, r6, lr}
 801f8f2:	2600      	movs	r6, #0
 801f8f4:	4c0c      	ldr	r4, [pc, #48]	@ (801f928 <__libc_init_array+0x38>)
 801f8f6:	4d0d      	ldr	r5, [pc, #52]	@ (801f92c <__libc_init_array+0x3c>)
 801f8f8:	1b64      	subs	r4, r4, r5
 801f8fa:	10a4      	asrs	r4, r4, #2
 801f8fc:	42a6      	cmp	r6, r4
 801f8fe:	d109      	bne.n	801f914 <__libc_init_array+0x24>
 801f900:	2600      	movs	r6, #0
 801f902:	f002 fee9 	bl	80226d8 <_init>
 801f906:	4c0a      	ldr	r4, [pc, #40]	@ (801f930 <__libc_init_array+0x40>)
 801f908:	4d0a      	ldr	r5, [pc, #40]	@ (801f934 <__libc_init_array+0x44>)
 801f90a:	1b64      	subs	r4, r4, r5
 801f90c:	10a4      	asrs	r4, r4, #2
 801f90e:	42a6      	cmp	r6, r4
 801f910:	d105      	bne.n	801f91e <__libc_init_array+0x2e>
 801f912:	bd70      	pop	{r4, r5, r6, pc}
 801f914:	00b3      	lsls	r3, r6, #2
 801f916:	58eb      	ldr	r3, [r5, r3]
 801f918:	4798      	blx	r3
 801f91a:	3601      	adds	r6, #1
 801f91c:	e7ee      	b.n	801f8fc <__libc_init_array+0xc>
 801f91e:	00b3      	lsls	r3, r6, #2
 801f920:	58eb      	ldr	r3, [r5, r3]
 801f922:	4798      	blx	r3
 801f924:	3601      	adds	r6, #1
 801f926:	e7f2      	b.n	801f90e <__libc_init_array+0x1e>
 801f928:	08025270 	.word	0x08025270
 801f92c:	08025270 	.word	0x08025270
 801f930:	08025274 	.word	0x08025274
 801f934:	08025270 	.word	0x08025270

0801f938 <__retarget_lock_init_recursive>:
 801f938:	4770      	bx	lr

0801f93a <__retarget_lock_acquire_recursive>:
 801f93a:	4770      	bx	lr

0801f93c <__retarget_lock_release_recursive>:
 801f93c:	4770      	bx	lr

0801f93e <memchr>:
 801f93e:	b2c9      	uxtb	r1, r1
 801f940:	1882      	adds	r2, r0, r2
 801f942:	4290      	cmp	r0, r2
 801f944:	d101      	bne.n	801f94a <memchr+0xc>
 801f946:	2000      	movs	r0, #0
 801f948:	4770      	bx	lr
 801f94a:	7803      	ldrb	r3, [r0, #0]
 801f94c:	428b      	cmp	r3, r1
 801f94e:	d0fb      	beq.n	801f948 <memchr+0xa>
 801f950:	3001      	adds	r0, #1
 801f952:	e7f6      	b.n	801f942 <memchr+0x4>

0801f954 <memcpy>:
 801f954:	2300      	movs	r3, #0
 801f956:	b510      	push	{r4, lr}
 801f958:	429a      	cmp	r2, r3
 801f95a:	d100      	bne.n	801f95e <memcpy+0xa>
 801f95c:	bd10      	pop	{r4, pc}
 801f95e:	5ccc      	ldrb	r4, [r1, r3]
 801f960:	54c4      	strb	r4, [r0, r3]
 801f962:	3301      	adds	r3, #1
 801f964:	e7f8      	b.n	801f958 <memcpy+0x4>
	...

0801f968 <nan>:
 801f968:	2000      	movs	r0, #0
 801f96a:	4901      	ldr	r1, [pc, #4]	@ (801f970 <nan+0x8>)
 801f96c:	4770      	bx	lr
 801f96e:	46c0      	nop			@ (mov r8, r8)
 801f970:	7ff80000 	.word	0x7ff80000

0801f974 <quorem>:
 801f974:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f976:	6902      	ldr	r2, [r0, #16]
 801f978:	690f      	ldr	r7, [r1, #16]
 801f97a:	b087      	sub	sp, #28
 801f97c:	0006      	movs	r6, r0
 801f97e:	000b      	movs	r3, r1
 801f980:	2000      	movs	r0, #0
 801f982:	9102      	str	r1, [sp, #8]
 801f984:	42ba      	cmp	r2, r7
 801f986:	db6d      	blt.n	801fa64 <quorem+0xf0>
 801f988:	3f01      	subs	r7, #1
 801f98a:	00bc      	lsls	r4, r7, #2
 801f98c:	3314      	adds	r3, #20
 801f98e:	9305      	str	r3, [sp, #20]
 801f990:	191b      	adds	r3, r3, r4
 801f992:	9303      	str	r3, [sp, #12]
 801f994:	0033      	movs	r3, r6
 801f996:	3314      	adds	r3, #20
 801f998:	191c      	adds	r4, r3, r4
 801f99a:	9301      	str	r3, [sp, #4]
 801f99c:	6823      	ldr	r3, [r4, #0]
 801f99e:	9304      	str	r3, [sp, #16]
 801f9a0:	9b03      	ldr	r3, [sp, #12]
 801f9a2:	9804      	ldr	r0, [sp, #16]
 801f9a4:	681d      	ldr	r5, [r3, #0]
 801f9a6:	3501      	adds	r5, #1
 801f9a8:	0029      	movs	r1, r5
 801f9aa:	f7e0 fbfb 	bl	80001a4 <__udivsi3>
 801f9ae:	9b04      	ldr	r3, [sp, #16]
 801f9b0:	9000      	str	r0, [sp, #0]
 801f9b2:	42ab      	cmp	r3, r5
 801f9b4:	d32b      	bcc.n	801fa0e <quorem+0x9a>
 801f9b6:	9b05      	ldr	r3, [sp, #20]
 801f9b8:	9d01      	ldr	r5, [sp, #4]
 801f9ba:	469c      	mov	ip, r3
 801f9bc:	2300      	movs	r3, #0
 801f9be:	9305      	str	r3, [sp, #20]
 801f9c0:	9304      	str	r3, [sp, #16]
 801f9c2:	4662      	mov	r2, ip
 801f9c4:	ca08      	ldmia	r2!, {r3}
 801f9c6:	6828      	ldr	r0, [r5, #0]
 801f9c8:	4694      	mov	ip, r2
 801f9ca:	9a00      	ldr	r2, [sp, #0]
 801f9cc:	b299      	uxth	r1, r3
 801f9ce:	4351      	muls	r1, r2
 801f9d0:	9a05      	ldr	r2, [sp, #20]
 801f9d2:	0c1b      	lsrs	r3, r3, #16
 801f9d4:	1889      	adds	r1, r1, r2
 801f9d6:	9a00      	ldr	r2, [sp, #0]
 801f9d8:	4353      	muls	r3, r2
 801f9da:	0c0a      	lsrs	r2, r1, #16
 801f9dc:	189b      	adds	r3, r3, r2
 801f9de:	0c1a      	lsrs	r2, r3, #16
 801f9e0:	b289      	uxth	r1, r1
 801f9e2:	9205      	str	r2, [sp, #20]
 801f9e4:	b282      	uxth	r2, r0
 801f9e6:	1a52      	subs	r2, r2, r1
 801f9e8:	9904      	ldr	r1, [sp, #16]
 801f9ea:	0c00      	lsrs	r0, r0, #16
 801f9ec:	1852      	adds	r2, r2, r1
 801f9ee:	b29b      	uxth	r3, r3
 801f9f0:	1411      	asrs	r1, r2, #16
 801f9f2:	1ac3      	subs	r3, r0, r3
 801f9f4:	185b      	adds	r3, r3, r1
 801f9f6:	1419      	asrs	r1, r3, #16
 801f9f8:	b292      	uxth	r2, r2
 801f9fa:	041b      	lsls	r3, r3, #16
 801f9fc:	431a      	orrs	r2, r3
 801f9fe:	9b03      	ldr	r3, [sp, #12]
 801fa00:	9104      	str	r1, [sp, #16]
 801fa02:	c504      	stmia	r5!, {r2}
 801fa04:	4563      	cmp	r3, ip
 801fa06:	d2dc      	bcs.n	801f9c2 <quorem+0x4e>
 801fa08:	6823      	ldr	r3, [r4, #0]
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	d030      	beq.n	801fa70 <quorem+0xfc>
 801fa0e:	0030      	movs	r0, r6
 801fa10:	9902      	ldr	r1, [sp, #8]
 801fa12:	f001 fd7d 	bl	8021510 <__mcmp>
 801fa16:	2800      	cmp	r0, #0
 801fa18:	db23      	blt.n	801fa62 <quorem+0xee>
 801fa1a:	0034      	movs	r4, r6
 801fa1c:	2500      	movs	r5, #0
 801fa1e:	9902      	ldr	r1, [sp, #8]
 801fa20:	3414      	adds	r4, #20
 801fa22:	3114      	adds	r1, #20
 801fa24:	6823      	ldr	r3, [r4, #0]
 801fa26:	c901      	ldmia	r1!, {r0}
 801fa28:	9302      	str	r3, [sp, #8]
 801fa2a:	466b      	mov	r3, sp
 801fa2c:	891b      	ldrh	r3, [r3, #8]
 801fa2e:	b282      	uxth	r2, r0
 801fa30:	1a9a      	subs	r2, r3, r2
 801fa32:	9b02      	ldr	r3, [sp, #8]
 801fa34:	1952      	adds	r2, r2, r5
 801fa36:	0c00      	lsrs	r0, r0, #16
 801fa38:	0c1b      	lsrs	r3, r3, #16
 801fa3a:	1a1b      	subs	r3, r3, r0
 801fa3c:	1410      	asrs	r0, r2, #16
 801fa3e:	181b      	adds	r3, r3, r0
 801fa40:	141d      	asrs	r5, r3, #16
 801fa42:	b292      	uxth	r2, r2
 801fa44:	041b      	lsls	r3, r3, #16
 801fa46:	431a      	orrs	r2, r3
 801fa48:	9b03      	ldr	r3, [sp, #12]
 801fa4a:	c404      	stmia	r4!, {r2}
 801fa4c:	428b      	cmp	r3, r1
 801fa4e:	d2e9      	bcs.n	801fa24 <quorem+0xb0>
 801fa50:	9a01      	ldr	r2, [sp, #4]
 801fa52:	00bb      	lsls	r3, r7, #2
 801fa54:	18d3      	adds	r3, r2, r3
 801fa56:	681a      	ldr	r2, [r3, #0]
 801fa58:	2a00      	cmp	r2, #0
 801fa5a:	d013      	beq.n	801fa84 <quorem+0x110>
 801fa5c:	9b00      	ldr	r3, [sp, #0]
 801fa5e:	3301      	adds	r3, #1
 801fa60:	9300      	str	r3, [sp, #0]
 801fa62:	9800      	ldr	r0, [sp, #0]
 801fa64:	b007      	add	sp, #28
 801fa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa68:	6823      	ldr	r3, [r4, #0]
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d104      	bne.n	801fa78 <quorem+0x104>
 801fa6e:	3f01      	subs	r7, #1
 801fa70:	9b01      	ldr	r3, [sp, #4]
 801fa72:	3c04      	subs	r4, #4
 801fa74:	42a3      	cmp	r3, r4
 801fa76:	d3f7      	bcc.n	801fa68 <quorem+0xf4>
 801fa78:	6137      	str	r7, [r6, #16]
 801fa7a:	e7c8      	b.n	801fa0e <quorem+0x9a>
 801fa7c:	681a      	ldr	r2, [r3, #0]
 801fa7e:	2a00      	cmp	r2, #0
 801fa80:	d104      	bne.n	801fa8c <quorem+0x118>
 801fa82:	3f01      	subs	r7, #1
 801fa84:	9a01      	ldr	r2, [sp, #4]
 801fa86:	3b04      	subs	r3, #4
 801fa88:	429a      	cmp	r2, r3
 801fa8a:	d3f7      	bcc.n	801fa7c <quorem+0x108>
 801fa8c:	6137      	str	r7, [r6, #16]
 801fa8e:	e7e5      	b.n	801fa5c <quorem+0xe8>

0801fa90 <_dtoa_r>:
 801fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa92:	0014      	movs	r4, r2
 801fa94:	001d      	movs	r5, r3
 801fa96:	69c6      	ldr	r6, [r0, #28]
 801fa98:	b09d      	sub	sp, #116	@ 0x74
 801fa9a:	940a      	str	r4, [sp, #40]	@ 0x28
 801fa9c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801fa9e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801faa0:	9003      	str	r0, [sp, #12]
 801faa2:	2e00      	cmp	r6, #0
 801faa4:	d10f      	bne.n	801fac6 <_dtoa_r+0x36>
 801faa6:	2010      	movs	r0, #16
 801faa8:	f001 f98a 	bl	8020dc0 <malloc>
 801faac:	9b03      	ldr	r3, [sp, #12]
 801faae:	1e02      	subs	r2, r0, #0
 801fab0:	61d8      	str	r0, [r3, #28]
 801fab2:	d104      	bne.n	801fabe <_dtoa_r+0x2e>
 801fab4:	21ef      	movs	r1, #239	@ 0xef
 801fab6:	4bc7      	ldr	r3, [pc, #796]	@ (801fdd4 <_dtoa_r+0x344>)
 801fab8:	48c7      	ldr	r0, [pc, #796]	@ (801fdd8 <_dtoa_r+0x348>)
 801faba:	f002 fb2f 	bl	802211c <__assert_func>
 801fabe:	6046      	str	r6, [r0, #4]
 801fac0:	6086      	str	r6, [r0, #8]
 801fac2:	6006      	str	r6, [r0, #0]
 801fac4:	60c6      	str	r6, [r0, #12]
 801fac6:	9b03      	ldr	r3, [sp, #12]
 801fac8:	69db      	ldr	r3, [r3, #28]
 801faca:	6819      	ldr	r1, [r3, #0]
 801facc:	2900      	cmp	r1, #0
 801face:	d00b      	beq.n	801fae8 <_dtoa_r+0x58>
 801fad0:	685a      	ldr	r2, [r3, #4]
 801fad2:	2301      	movs	r3, #1
 801fad4:	4093      	lsls	r3, r2
 801fad6:	604a      	str	r2, [r1, #4]
 801fad8:	608b      	str	r3, [r1, #8]
 801fada:	9803      	ldr	r0, [sp, #12]
 801fadc:	f001 fa82 	bl	8020fe4 <_Bfree>
 801fae0:	2200      	movs	r2, #0
 801fae2:	9b03      	ldr	r3, [sp, #12]
 801fae4:	69db      	ldr	r3, [r3, #28]
 801fae6:	601a      	str	r2, [r3, #0]
 801fae8:	2d00      	cmp	r5, #0
 801faea:	da1e      	bge.n	801fb2a <_dtoa_r+0x9a>
 801faec:	2301      	movs	r3, #1
 801faee:	603b      	str	r3, [r7, #0]
 801faf0:	006b      	lsls	r3, r5, #1
 801faf2:	085b      	lsrs	r3, r3, #1
 801faf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801faf6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801faf8:	4bb8      	ldr	r3, [pc, #736]	@ (801fddc <_dtoa_r+0x34c>)
 801fafa:	4ab8      	ldr	r2, [pc, #736]	@ (801fddc <_dtoa_r+0x34c>)
 801fafc:	403b      	ands	r3, r7
 801fafe:	4293      	cmp	r3, r2
 801fb00:	d116      	bne.n	801fb30 <_dtoa_r+0xa0>
 801fb02:	4bb7      	ldr	r3, [pc, #732]	@ (801fde0 <_dtoa_r+0x350>)
 801fb04:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fb06:	6013      	str	r3, [r2, #0]
 801fb08:	033b      	lsls	r3, r7, #12
 801fb0a:	0b1b      	lsrs	r3, r3, #12
 801fb0c:	4323      	orrs	r3, r4
 801fb0e:	d101      	bne.n	801fb14 <_dtoa_r+0x84>
 801fb10:	f000 fd83 	bl	802061a <_dtoa_r+0xb8a>
 801fb14:	4bb3      	ldr	r3, [pc, #716]	@ (801fde4 <_dtoa_r+0x354>)
 801fb16:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fb18:	9308      	str	r3, [sp, #32]
 801fb1a:	2a00      	cmp	r2, #0
 801fb1c:	d002      	beq.n	801fb24 <_dtoa_r+0x94>
 801fb1e:	4bb2      	ldr	r3, [pc, #712]	@ (801fde8 <_dtoa_r+0x358>)
 801fb20:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fb22:	6013      	str	r3, [r2, #0]
 801fb24:	9808      	ldr	r0, [sp, #32]
 801fb26:	b01d      	add	sp, #116	@ 0x74
 801fb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	603b      	str	r3, [r7, #0]
 801fb2e:	e7e2      	b.n	801faf6 <_dtoa_r+0x66>
 801fb30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb34:	9212      	str	r2, [sp, #72]	@ 0x48
 801fb36:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fb38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fb3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb3c:	2200      	movs	r2, #0
 801fb3e:	2300      	movs	r3, #0
 801fb40:	f7e0 fcb6 	bl	80004b0 <__aeabi_dcmpeq>
 801fb44:	1e06      	subs	r6, r0, #0
 801fb46:	d00b      	beq.n	801fb60 <_dtoa_r+0xd0>
 801fb48:	2301      	movs	r3, #1
 801fb4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fb4c:	6013      	str	r3, [r2, #0]
 801fb4e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fb50:	2b00      	cmp	r3, #0
 801fb52:	d002      	beq.n	801fb5a <_dtoa_r+0xca>
 801fb54:	4ba5      	ldr	r3, [pc, #660]	@ (801fdec <_dtoa_r+0x35c>)
 801fb56:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fb58:	6013      	str	r3, [r2, #0]
 801fb5a:	4ba5      	ldr	r3, [pc, #660]	@ (801fdf0 <_dtoa_r+0x360>)
 801fb5c:	9308      	str	r3, [sp, #32]
 801fb5e:	e7e1      	b.n	801fb24 <_dtoa_r+0x94>
 801fb60:	ab1a      	add	r3, sp, #104	@ 0x68
 801fb62:	9301      	str	r3, [sp, #4]
 801fb64:	ab1b      	add	r3, sp, #108	@ 0x6c
 801fb66:	9300      	str	r3, [sp, #0]
 801fb68:	9803      	ldr	r0, [sp, #12]
 801fb6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fb6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fb6e:	f001 fdf1 	bl	8021754 <__d2b>
 801fb72:	007a      	lsls	r2, r7, #1
 801fb74:	9005      	str	r0, [sp, #20]
 801fb76:	0d52      	lsrs	r2, r2, #21
 801fb78:	d100      	bne.n	801fb7c <_dtoa_r+0xec>
 801fb7a:	e07b      	b.n	801fc74 <_dtoa_r+0x1e4>
 801fb7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fb7e:	9618      	str	r6, [sp, #96]	@ 0x60
 801fb80:	0319      	lsls	r1, r3, #12
 801fb82:	4b9c      	ldr	r3, [pc, #624]	@ (801fdf4 <_dtoa_r+0x364>)
 801fb84:	0b09      	lsrs	r1, r1, #12
 801fb86:	430b      	orrs	r3, r1
 801fb88:	499b      	ldr	r1, [pc, #620]	@ (801fdf8 <_dtoa_r+0x368>)
 801fb8a:	1857      	adds	r7, r2, r1
 801fb8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fb8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb90:	0019      	movs	r1, r3
 801fb92:	2200      	movs	r2, #0
 801fb94:	4b99      	ldr	r3, [pc, #612]	@ (801fdfc <_dtoa_r+0x36c>)
 801fb96:	f7e3 f819 	bl	8002bcc <__aeabi_dsub>
 801fb9a:	4a99      	ldr	r2, [pc, #612]	@ (801fe00 <_dtoa_r+0x370>)
 801fb9c:	4b99      	ldr	r3, [pc, #612]	@ (801fe04 <_dtoa_r+0x374>)
 801fb9e:	f7e2 fd4d 	bl	800263c <__aeabi_dmul>
 801fba2:	4a99      	ldr	r2, [pc, #612]	@ (801fe08 <_dtoa_r+0x378>)
 801fba4:	4b99      	ldr	r3, [pc, #612]	@ (801fe0c <_dtoa_r+0x37c>)
 801fba6:	f7e1 fda1 	bl	80016ec <__aeabi_dadd>
 801fbaa:	0004      	movs	r4, r0
 801fbac:	0038      	movs	r0, r7
 801fbae:	000d      	movs	r5, r1
 801fbb0:	f7e3 fc06 	bl	80033c0 <__aeabi_i2d>
 801fbb4:	4a96      	ldr	r2, [pc, #600]	@ (801fe10 <_dtoa_r+0x380>)
 801fbb6:	4b97      	ldr	r3, [pc, #604]	@ (801fe14 <_dtoa_r+0x384>)
 801fbb8:	f7e2 fd40 	bl	800263c <__aeabi_dmul>
 801fbbc:	0002      	movs	r2, r0
 801fbbe:	000b      	movs	r3, r1
 801fbc0:	0020      	movs	r0, r4
 801fbc2:	0029      	movs	r1, r5
 801fbc4:	f7e1 fd92 	bl	80016ec <__aeabi_dadd>
 801fbc8:	0004      	movs	r4, r0
 801fbca:	000d      	movs	r5, r1
 801fbcc:	f7e3 fbbc 	bl	8003348 <__aeabi_d2iz>
 801fbd0:	2200      	movs	r2, #0
 801fbd2:	9004      	str	r0, [sp, #16]
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	0020      	movs	r0, r4
 801fbd8:	0029      	movs	r1, r5
 801fbda:	f7e0 fc6f 	bl	80004bc <__aeabi_dcmplt>
 801fbde:	2800      	cmp	r0, #0
 801fbe0:	d00b      	beq.n	801fbfa <_dtoa_r+0x16a>
 801fbe2:	9804      	ldr	r0, [sp, #16]
 801fbe4:	f7e3 fbec 	bl	80033c0 <__aeabi_i2d>
 801fbe8:	002b      	movs	r3, r5
 801fbea:	0022      	movs	r2, r4
 801fbec:	f7e0 fc60 	bl	80004b0 <__aeabi_dcmpeq>
 801fbf0:	4243      	negs	r3, r0
 801fbf2:	4158      	adcs	r0, r3
 801fbf4:	9b04      	ldr	r3, [sp, #16]
 801fbf6:	1a1b      	subs	r3, r3, r0
 801fbf8:	9304      	str	r3, [sp, #16]
 801fbfa:	2301      	movs	r3, #1
 801fbfc:	9315      	str	r3, [sp, #84]	@ 0x54
 801fbfe:	9b04      	ldr	r3, [sp, #16]
 801fc00:	2b16      	cmp	r3, #22
 801fc02:	d810      	bhi.n	801fc26 <_dtoa_r+0x196>
 801fc04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fc06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fc08:	9a04      	ldr	r2, [sp, #16]
 801fc0a:	4b83      	ldr	r3, [pc, #524]	@ (801fe18 <_dtoa_r+0x388>)
 801fc0c:	00d2      	lsls	r2, r2, #3
 801fc0e:	189b      	adds	r3, r3, r2
 801fc10:	681a      	ldr	r2, [r3, #0]
 801fc12:	685b      	ldr	r3, [r3, #4]
 801fc14:	f7e0 fc52 	bl	80004bc <__aeabi_dcmplt>
 801fc18:	2800      	cmp	r0, #0
 801fc1a:	d047      	beq.n	801fcac <_dtoa_r+0x21c>
 801fc1c:	9b04      	ldr	r3, [sp, #16]
 801fc1e:	3b01      	subs	r3, #1
 801fc20:	9304      	str	r3, [sp, #16]
 801fc22:	2300      	movs	r3, #0
 801fc24:	9315      	str	r3, [sp, #84]	@ 0x54
 801fc26:	2200      	movs	r2, #0
 801fc28:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801fc2a:	9206      	str	r2, [sp, #24]
 801fc2c:	1bdb      	subs	r3, r3, r7
 801fc2e:	1e5a      	subs	r2, r3, #1
 801fc30:	d53e      	bpl.n	801fcb0 <_dtoa_r+0x220>
 801fc32:	2201      	movs	r2, #1
 801fc34:	1ad3      	subs	r3, r2, r3
 801fc36:	9306      	str	r3, [sp, #24]
 801fc38:	2300      	movs	r3, #0
 801fc3a:	930d      	str	r3, [sp, #52]	@ 0x34
 801fc3c:	9b04      	ldr	r3, [sp, #16]
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	db38      	blt.n	801fcb4 <_dtoa_r+0x224>
 801fc42:	9a04      	ldr	r2, [sp, #16]
 801fc44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fc46:	4694      	mov	ip, r2
 801fc48:	4463      	add	r3, ip
 801fc4a:	930d      	str	r3, [sp, #52]	@ 0x34
 801fc4c:	2300      	movs	r3, #0
 801fc4e:	9214      	str	r2, [sp, #80]	@ 0x50
 801fc50:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fc52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fc54:	2401      	movs	r4, #1
 801fc56:	2b09      	cmp	r3, #9
 801fc58:	d867      	bhi.n	801fd2a <_dtoa_r+0x29a>
 801fc5a:	2b05      	cmp	r3, #5
 801fc5c:	dd02      	ble.n	801fc64 <_dtoa_r+0x1d4>
 801fc5e:	2400      	movs	r4, #0
 801fc60:	3b04      	subs	r3, #4
 801fc62:	9322      	str	r3, [sp, #136]	@ 0x88
 801fc64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fc66:	1e98      	subs	r0, r3, #2
 801fc68:	2803      	cmp	r0, #3
 801fc6a:	d867      	bhi.n	801fd3c <_dtoa_r+0x2ac>
 801fc6c:	f7e0 fa86 	bl	800017c <__gnu_thumb1_case_uqi>
 801fc70:	5b383a2b 	.word	0x5b383a2b
 801fc74:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fc76:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801fc78:	18f6      	adds	r6, r6, r3
 801fc7a:	4b68      	ldr	r3, [pc, #416]	@ (801fe1c <_dtoa_r+0x38c>)
 801fc7c:	18f2      	adds	r2, r6, r3
 801fc7e:	2a20      	cmp	r2, #32
 801fc80:	dd0f      	ble.n	801fca2 <_dtoa_r+0x212>
 801fc82:	2340      	movs	r3, #64	@ 0x40
 801fc84:	1a9b      	subs	r3, r3, r2
 801fc86:	409f      	lsls	r7, r3
 801fc88:	4b65      	ldr	r3, [pc, #404]	@ (801fe20 <_dtoa_r+0x390>)
 801fc8a:	0038      	movs	r0, r7
 801fc8c:	18f3      	adds	r3, r6, r3
 801fc8e:	40dc      	lsrs	r4, r3
 801fc90:	4320      	orrs	r0, r4
 801fc92:	f7e3 fbc3 	bl	800341c <__aeabi_ui2d>
 801fc96:	2201      	movs	r2, #1
 801fc98:	4b62      	ldr	r3, [pc, #392]	@ (801fe24 <_dtoa_r+0x394>)
 801fc9a:	1e77      	subs	r7, r6, #1
 801fc9c:	18cb      	adds	r3, r1, r3
 801fc9e:	9218      	str	r2, [sp, #96]	@ 0x60
 801fca0:	e776      	b.n	801fb90 <_dtoa_r+0x100>
 801fca2:	2320      	movs	r3, #32
 801fca4:	0020      	movs	r0, r4
 801fca6:	1a9b      	subs	r3, r3, r2
 801fca8:	4098      	lsls	r0, r3
 801fcaa:	e7f2      	b.n	801fc92 <_dtoa_r+0x202>
 801fcac:	9015      	str	r0, [sp, #84]	@ 0x54
 801fcae:	e7ba      	b.n	801fc26 <_dtoa_r+0x196>
 801fcb0:	920d      	str	r2, [sp, #52]	@ 0x34
 801fcb2:	e7c3      	b.n	801fc3c <_dtoa_r+0x1ac>
 801fcb4:	9b06      	ldr	r3, [sp, #24]
 801fcb6:	9a04      	ldr	r2, [sp, #16]
 801fcb8:	1a9b      	subs	r3, r3, r2
 801fcba:	9306      	str	r3, [sp, #24]
 801fcbc:	4253      	negs	r3, r2
 801fcbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fcc0:	2300      	movs	r3, #0
 801fcc2:	9314      	str	r3, [sp, #80]	@ 0x50
 801fcc4:	e7c5      	b.n	801fc52 <_dtoa_r+0x1c2>
 801fcc6:	2300      	movs	r3, #0
 801fcc8:	9310      	str	r3, [sp, #64]	@ 0x40
 801fcca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fccc:	930e      	str	r3, [sp, #56]	@ 0x38
 801fcce:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	dc13      	bgt.n	801fcfc <_dtoa_r+0x26c>
 801fcd4:	2301      	movs	r3, #1
 801fcd6:	001a      	movs	r2, r3
 801fcd8:	930e      	str	r3, [sp, #56]	@ 0x38
 801fcda:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcdc:	9223      	str	r2, [sp, #140]	@ 0x8c
 801fcde:	e00d      	b.n	801fcfc <_dtoa_r+0x26c>
 801fce0:	2301      	movs	r3, #1
 801fce2:	e7f1      	b.n	801fcc8 <_dtoa_r+0x238>
 801fce4:	2300      	movs	r3, #0
 801fce6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801fce8:	9310      	str	r3, [sp, #64]	@ 0x40
 801fcea:	4694      	mov	ip, r2
 801fcec:	9b04      	ldr	r3, [sp, #16]
 801fcee:	4463      	add	r3, ip
 801fcf0:	930e      	str	r3, [sp, #56]	@ 0x38
 801fcf2:	3301      	adds	r3, #1
 801fcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	dc00      	bgt.n	801fcfc <_dtoa_r+0x26c>
 801fcfa:	2301      	movs	r3, #1
 801fcfc:	9a03      	ldr	r2, [sp, #12]
 801fcfe:	2100      	movs	r1, #0
 801fd00:	69d0      	ldr	r0, [r2, #28]
 801fd02:	2204      	movs	r2, #4
 801fd04:	0015      	movs	r5, r2
 801fd06:	3514      	adds	r5, #20
 801fd08:	429d      	cmp	r5, r3
 801fd0a:	d91b      	bls.n	801fd44 <_dtoa_r+0x2b4>
 801fd0c:	6041      	str	r1, [r0, #4]
 801fd0e:	9803      	ldr	r0, [sp, #12]
 801fd10:	f001 f924 	bl	8020f5c <_Balloc>
 801fd14:	9008      	str	r0, [sp, #32]
 801fd16:	2800      	cmp	r0, #0
 801fd18:	d117      	bne.n	801fd4a <_dtoa_r+0x2ba>
 801fd1a:	21b0      	movs	r1, #176	@ 0xb0
 801fd1c:	4b42      	ldr	r3, [pc, #264]	@ (801fe28 <_dtoa_r+0x398>)
 801fd1e:	482e      	ldr	r0, [pc, #184]	@ (801fdd8 <_dtoa_r+0x348>)
 801fd20:	9a08      	ldr	r2, [sp, #32]
 801fd22:	31ff      	adds	r1, #255	@ 0xff
 801fd24:	e6c9      	b.n	801faba <_dtoa_r+0x2a>
 801fd26:	2301      	movs	r3, #1
 801fd28:	e7dd      	b.n	801fce6 <_dtoa_r+0x256>
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	9410      	str	r4, [sp, #64]	@ 0x40
 801fd2e:	9322      	str	r3, [sp, #136]	@ 0x88
 801fd30:	3b01      	subs	r3, #1
 801fd32:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd34:	9309      	str	r3, [sp, #36]	@ 0x24
 801fd36:	2200      	movs	r2, #0
 801fd38:	3313      	adds	r3, #19
 801fd3a:	e7cf      	b.n	801fcdc <_dtoa_r+0x24c>
 801fd3c:	2301      	movs	r3, #1
 801fd3e:	9310      	str	r3, [sp, #64]	@ 0x40
 801fd40:	3b02      	subs	r3, #2
 801fd42:	e7f6      	b.n	801fd32 <_dtoa_r+0x2a2>
 801fd44:	3101      	adds	r1, #1
 801fd46:	0052      	lsls	r2, r2, #1
 801fd48:	e7dc      	b.n	801fd04 <_dtoa_r+0x274>
 801fd4a:	9b03      	ldr	r3, [sp, #12]
 801fd4c:	9a08      	ldr	r2, [sp, #32]
 801fd4e:	69db      	ldr	r3, [r3, #28]
 801fd50:	601a      	str	r2, [r3, #0]
 801fd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd54:	2b0e      	cmp	r3, #14
 801fd56:	d900      	bls.n	801fd5a <_dtoa_r+0x2ca>
 801fd58:	e0d9      	b.n	801ff0e <_dtoa_r+0x47e>
 801fd5a:	2c00      	cmp	r4, #0
 801fd5c:	d100      	bne.n	801fd60 <_dtoa_r+0x2d0>
 801fd5e:	e0d6      	b.n	801ff0e <_dtoa_r+0x47e>
 801fd60:	9b04      	ldr	r3, [sp, #16]
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	dd64      	ble.n	801fe30 <_dtoa_r+0x3a0>
 801fd66:	210f      	movs	r1, #15
 801fd68:	9a04      	ldr	r2, [sp, #16]
 801fd6a:	4b2b      	ldr	r3, [pc, #172]	@ (801fe18 <_dtoa_r+0x388>)
 801fd6c:	400a      	ands	r2, r1
 801fd6e:	00d2      	lsls	r2, r2, #3
 801fd70:	189b      	adds	r3, r3, r2
 801fd72:	681e      	ldr	r6, [r3, #0]
 801fd74:	685f      	ldr	r7, [r3, #4]
 801fd76:	9b04      	ldr	r3, [sp, #16]
 801fd78:	2402      	movs	r4, #2
 801fd7a:	111d      	asrs	r5, r3, #4
 801fd7c:	05db      	lsls	r3, r3, #23
 801fd7e:	d50a      	bpl.n	801fd96 <_dtoa_r+0x306>
 801fd80:	4b2a      	ldr	r3, [pc, #168]	@ (801fe2c <_dtoa_r+0x39c>)
 801fd82:	400d      	ands	r5, r1
 801fd84:	6a1a      	ldr	r2, [r3, #32]
 801fd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fd8c:	f7e2 f812 	bl	8001db4 <__aeabi_ddiv>
 801fd90:	900a      	str	r0, [sp, #40]	@ 0x28
 801fd92:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fd94:	3401      	adds	r4, #1
 801fd96:	4b25      	ldr	r3, [pc, #148]	@ (801fe2c <_dtoa_r+0x39c>)
 801fd98:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd9a:	2d00      	cmp	r5, #0
 801fd9c:	d108      	bne.n	801fdb0 <_dtoa_r+0x320>
 801fd9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fda0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fda2:	0032      	movs	r2, r6
 801fda4:	003b      	movs	r3, r7
 801fda6:	f7e2 f805 	bl	8001db4 <__aeabi_ddiv>
 801fdaa:	900a      	str	r0, [sp, #40]	@ 0x28
 801fdac:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fdae:	e05a      	b.n	801fe66 <_dtoa_r+0x3d6>
 801fdb0:	2301      	movs	r3, #1
 801fdb2:	421d      	tst	r5, r3
 801fdb4:	d009      	beq.n	801fdca <_dtoa_r+0x33a>
 801fdb6:	18e4      	adds	r4, r4, r3
 801fdb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdba:	0030      	movs	r0, r6
 801fdbc:	681a      	ldr	r2, [r3, #0]
 801fdbe:	685b      	ldr	r3, [r3, #4]
 801fdc0:	0039      	movs	r1, r7
 801fdc2:	f7e2 fc3b 	bl	800263c <__aeabi_dmul>
 801fdc6:	0006      	movs	r6, r0
 801fdc8:	000f      	movs	r7, r1
 801fdca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdcc:	106d      	asrs	r5, r5, #1
 801fdce:	3308      	adds	r3, #8
 801fdd0:	e7e2      	b.n	801fd98 <_dtoa_r+0x308>
 801fdd2:	46c0      	nop			@ (mov r8, r8)
 801fdd4:	08024fca 	.word	0x08024fca
 801fdd8:	08024fe1 	.word	0x08024fe1
 801fddc:	7ff00000 	.word	0x7ff00000
 801fde0:	0000270f 	.word	0x0000270f
 801fde4:	08024fc6 	.word	0x08024fc6
 801fde8:	08024fc9 	.word	0x08024fc9
 801fdec:	08024f92 	.word	0x08024f92
 801fdf0:	08024f91 	.word	0x08024f91
 801fdf4:	3ff00000 	.word	0x3ff00000
 801fdf8:	fffffc01 	.word	0xfffffc01
 801fdfc:	3ff80000 	.word	0x3ff80000
 801fe00:	636f4361 	.word	0x636f4361
 801fe04:	3fd287a7 	.word	0x3fd287a7
 801fe08:	8b60c8b3 	.word	0x8b60c8b3
 801fe0c:	3fc68a28 	.word	0x3fc68a28
 801fe10:	509f79fb 	.word	0x509f79fb
 801fe14:	3fd34413 	.word	0x3fd34413
 801fe18:	08025138 	.word	0x08025138
 801fe1c:	00000432 	.word	0x00000432
 801fe20:	00000412 	.word	0x00000412
 801fe24:	fe100000 	.word	0xfe100000
 801fe28:	08025039 	.word	0x08025039
 801fe2c:	08025110 	.word	0x08025110
 801fe30:	9b04      	ldr	r3, [sp, #16]
 801fe32:	2402      	movs	r4, #2
 801fe34:	2b00      	cmp	r3, #0
 801fe36:	d016      	beq.n	801fe66 <_dtoa_r+0x3d6>
 801fe38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fe3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fe3c:	220f      	movs	r2, #15
 801fe3e:	425d      	negs	r5, r3
 801fe40:	402a      	ands	r2, r5
 801fe42:	4bd7      	ldr	r3, [pc, #860]	@ (80201a0 <_dtoa_r+0x710>)
 801fe44:	00d2      	lsls	r2, r2, #3
 801fe46:	189b      	adds	r3, r3, r2
 801fe48:	681a      	ldr	r2, [r3, #0]
 801fe4a:	685b      	ldr	r3, [r3, #4]
 801fe4c:	f7e2 fbf6 	bl	800263c <__aeabi_dmul>
 801fe50:	2701      	movs	r7, #1
 801fe52:	2300      	movs	r3, #0
 801fe54:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe56:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe58:	4ed2      	ldr	r6, [pc, #840]	@ (80201a4 <_dtoa_r+0x714>)
 801fe5a:	112d      	asrs	r5, r5, #4
 801fe5c:	2d00      	cmp	r5, #0
 801fe5e:	d000      	beq.n	801fe62 <_dtoa_r+0x3d2>
 801fe60:	e0ba      	b.n	801ffd8 <_dtoa_r+0x548>
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d1a1      	bne.n	801fdaa <_dtoa_r+0x31a>
 801fe66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fe68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fe6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	d100      	bne.n	801fe72 <_dtoa_r+0x3e2>
 801fe70:	e0bd      	b.n	801ffee <_dtoa_r+0x55e>
 801fe72:	2200      	movs	r2, #0
 801fe74:	0030      	movs	r0, r6
 801fe76:	0039      	movs	r1, r7
 801fe78:	4bcb      	ldr	r3, [pc, #812]	@ (80201a8 <_dtoa_r+0x718>)
 801fe7a:	f7e0 fb1f 	bl	80004bc <__aeabi_dcmplt>
 801fe7e:	2800      	cmp	r0, #0
 801fe80:	d100      	bne.n	801fe84 <_dtoa_r+0x3f4>
 801fe82:	e0b4      	b.n	801ffee <_dtoa_r+0x55e>
 801fe84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	d100      	bne.n	801fe8c <_dtoa_r+0x3fc>
 801fe8a:	e0b0      	b.n	801ffee <_dtoa_r+0x55e>
 801fe8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	dd39      	ble.n	801ff06 <_dtoa_r+0x476>
 801fe92:	9b04      	ldr	r3, [sp, #16]
 801fe94:	2200      	movs	r2, #0
 801fe96:	3b01      	subs	r3, #1
 801fe98:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe9a:	0030      	movs	r0, r6
 801fe9c:	4bc3      	ldr	r3, [pc, #780]	@ (80201ac <_dtoa_r+0x71c>)
 801fe9e:	0039      	movs	r1, r7
 801fea0:	f7e2 fbcc 	bl	800263c <__aeabi_dmul>
 801fea4:	900a      	str	r0, [sp, #40]	@ 0x28
 801fea6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801feaa:	3401      	adds	r4, #1
 801feac:	0020      	movs	r0, r4
 801feae:	9311      	str	r3, [sp, #68]	@ 0x44
 801feb0:	f7e3 fa86 	bl	80033c0 <__aeabi_i2d>
 801feb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801feb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801feb8:	f7e2 fbc0 	bl	800263c <__aeabi_dmul>
 801febc:	4bbc      	ldr	r3, [pc, #752]	@ (80201b0 <_dtoa_r+0x720>)
 801febe:	2200      	movs	r2, #0
 801fec0:	f7e1 fc14 	bl	80016ec <__aeabi_dadd>
 801fec4:	4bbb      	ldr	r3, [pc, #748]	@ (80201b4 <_dtoa_r+0x724>)
 801fec6:	0006      	movs	r6, r0
 801fec8:	18cf      	adds	r7, r1, r3
 801feca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d000      	beq.n	801fed2 <_dtoa_r+0x442>
 801fed0:	e091      	b.n	801fff6 <_dtoa_r+0x566>
 801fed2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fed6:	2200      	movs	r2, #0
 801fed8:	4bb7      	ldr	r3, [pc, #732]	@ (80201b8 <_dtoa_r+0x728>)
 801feda:	f7e2 fe77 	bl	8002bcc <__aeabi_dsub>
 801fede:	0032      	movs	r2, r6
 801fee0:	003b      	movs	r3, r7
 801fee2:	0004      	movs	r4, r0
 801fee4:	000d      	movs	r5, r1
 801fee6:	f7e0 fafd 	bl	80004e4 <__aeabi_dcmpgt>
 801feea:	2800      	cmp	r0, #0
 801feec:	d000      	beq.n	801fef0 <_dtoa_r+0x460>
 801feee:	e29d      	b.n	802042c <_dtoa_r+0x99c>
 801fef0:	2180      	movs	r1, #128	@ 0x80
 801fef2:	0609      	lsls	r1, r1, #24
 801fef4:	187b      	adds	r3, r7, r1
 801fef6:	0032      	movs	r2, r6
 801fef8:	0020      	movs	r0, r4
 801fefa:	0029      	movs	r1, r5
 801fefc:	f7e0 fade 	bl	80004bc <__aeabi_dcmplt>
 801ff00:	2800      	cmp	r0, #0
 801ff02:	d000      	beq.n	801ff06 <_dtoa_r+0x476>
 801ff04:	e130      	b.n	8020168 <_dtoa_r+0x6d8>
 801ff06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ff08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ff0a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ff0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ff0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	da00      	bge.n	801ff16 <_dtoa_r+0x486>
 801ff14:	e177      	b.n	8020206 <_dtoa_r+0x776>
 801ff16:	9a04      	ldr	r2, [sp, #16]
 801ff18:	2a0e      	cmp	r2, #14
 801ff1a:	dd00      	ble.n	801ff1e <_dtoa_r+0x48e>
 801ff1c:	e173      	b.n	8020206 <_dtoa_r+0x776>
 801ff1e:	4ba0      	ldr	r3, [pc, #640]	@ (80201a0 <_dtoa_r+0x710>)
 801ff20:	00d2      	lsls	r2, r2, #3
 801ff22:	189b      	adds	r3, r3, r2
 801ff24:	685c      	ldr	r4, [r3, #4]
 801ff26:	681b      	ldr	r3, [r3, #0]
 801ff28:	9306      	str	r3, [sp, #24]
 801ff2a:	9407      	str	r4, [sp, #28]
 801ff2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	da03      	bge.n	801ff3a <_dtoa_r+0x4aa>
 801ff32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	dc00      	bgt.n	801ff3a <_dtoa_r+0x4aa>
 801ff38:	e106      	b.n	8020148 <_dtoa_r+0x6b8>
 801ff3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ff3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ff3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff40:	9d08      	ldr	r5, [sp, #32]
 801ff42:	3b01      	subs	r3, #1
 801ff44:	195b      	adds	r3, r3, r5
 801ff46:	930a      	str	r3, [sp, #40]	@ 0x28
 801ff48:	9a06      	ldr	r2, [sp, #24]
 801ff4a:	9b07      	ldr	r3, [sp, #28]
 801ff4c:	0030      	movs	r0, r6
 801ff4e:	0039      	movs	r1, r7
 801ff50:	f7e1 ff30 	bl	8001db4 <__aeabi_ddiv>
 801ff54:	f7e3 f9f8 	bl	8003348 <__aeabi_d2iz>
 801ff58:	9009      	str	r0, [sp, #36]	@ 0x24
 801ff5a:	f7e3 fa31 	bl	80033c0 <__aeabi_i2d>
 801ff5e:	9a06      	ldr	r2, [sp, #24]
 801ff60:	9b07      	ldr	r3, [sp, #28]
 801ff62:	f7e2 fb6b 	bl	800263c <__aeabi_dmul>
 801ff66:	0002      	movs	r2, r0
 801ff68:	000b      	movs	r3, r1
 801ff6a:	0030      	movs	r0, r6
 801ff6c:	0039      	movs	r1, r7
 801ff6e:	f7e2 fe2d 	bl	8002bcc <__aeabi_dsub>
 801ff72:	002b      	movs	r3, r5
 801ff74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff76:	3501      	adds	r5, #1
 801ff78:	3230      	adds	r2, #48	@ 0x30
 801ff7a:	701a      	strb	r2, [r3, #0]
 801ff7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ff7e:	002c      	movs	r4, r5
 801ff80:	429a      	cmp	r2, r3
 801ff82:	d000      	beq.n	801ff86 <_dtoa_r+0x4f6>
 801ff84:	e131      	b.n	80201ea <_dtoa_r+0x75a>
 801ff86:	0002      	movs	r2, r0
 801ff88:	000b      	movs	r3, r1
 801ff8a:	f7e1 fbaf 	bl	80016ec <__aeabi_dadd>
 801ff8e:	9a06      	ldr	r2, [sp, #24]
 801ff90:	9b07      	ldr	r3, [sp, #28]
 801ff92:	0006      	movs	r6, r0
 801ff94:	000f      	movs	r7, r1
 801ff96:	f7e0 faa5 	bl	80004e4 <__aeabi_dcmpgt>
 801ff9a:	2800      	cmp	r0, #0
 801ff9c:	d000      	beq.n	801ffa0 <_dtoa_r+0x510>
 801ff9e:	e10f      	b.n	80201c0 <_dtoa_r+0x730>
 801ffa0:	9a06      	ldr	r2, [sp, #24]
 801ffa2:	9b07      	ldr	r3, [sp, #28]
 801ffa4:	0030      	movs	r0, r6
 801ffa6:	0039      	movs	r1, r7
 801ffa8:	f7e0 fa82 	bl	80004b0 <__aeabi_dcmpeq>
 801ffac:	2800      	cmp	r0, #0
 801ffae:	d003      	beq.n	801ffb8 <_dtoa_r+0x528>
 801ffb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffb2:	07dd      	lsls	r5, r3, #31
 801ffb4:	d500      	bpl.n	801ffb8 <_dtoa_r+0x528>
 801ffb6:	e103      	b.n	80201c0 <_dtoa_r+0x730>
 801ffb8:	9905      	ldr	r1, [sp, #20]
 801ffba:	9803      	ldr	r0, [sp, #12]
 801ffbc:	f001 f812 	bl	8020fe4 <_Bfree>
 801ffc0:	2300      	movs	r3, #0
 801ffc2:	7023      	strb	r3, [r4, #0]
 801ffc4:	9b04      	ldr	r3, [sp, #16]
 801ffc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ffc8:	3301      	adds	r3, #1
 801ffca:	6013      	str	r3, [r2, #0]
 801ffcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	d100      	bne.n	801ffd4 <_dtoa_r+0x544>
 801ffd2:	e5a7      	b.n	801fb24 <_dtoa_r+0x94>
 801ffd4:	601c      	str	r4, [r3, #0]
 801ffd6:	e5a5      	b.n	801fb24 <_dtoa_r+0x94>
 801ffd8:	423d      	tst	r5, r7
 801ffda:	d005      	beq.n	801ffe8 <_dtoa_r+0x558>
 801ffdc:	6832      	ldr	r2, [r6, #0]
 801ffde:	6873      	ldr	r3, [r6, #4]
 801ffe0:	f7e2 fb2c 	bl	800263c <__aeabi_dmul>
 801ffe4:	003b      	movs	r3, r7
 801ffe6:	3401      	adds	r4, #1
 801ffe8:	106d      	asrs	r5, r5, #1
 801ffea:	3608      	adds	r6, #8
 801ffec:	e736      	b.n	801fe5c <_dtoa_r+0x3cc>
 801ffee:	9b04      	ldr	r3, [sp, #16]
 801fff0:	930c      	str	r3, [sp, #48]	@ 0x30
 801fff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fff4:	e75a      	b.n	801feac <_dtoa_r+0x41c>
 801fff6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fff8:	4b69      	ldr	r3, [pc, #420]	@ (80201a0 <_dtoa_r+0x710>)
 801fffa:	3a01      	subs	r2, #1
 801fffc:	00d2      	lsls	r2, r2, #3
 801fffe:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020000:	189b      	adds	r3, r3, r2
 8020002:	681a      	ldr	r2, [r3, #0]
 8020004:	685b      	ldr	r3, [r3, #4]
 8020006:	2900      	cmp	r1, #0
 8020008:	d04c      	beq.n	80200a4 <_dtoa_r+0x614>
 802000a:	2000      	movs	r0, #0
 802000c:	496b      	ldr	r1, [pc, #428]	@ (80201bc <_dtoa_r+0x72c>)
 802000e:	f7e1 fed1 	bl	8001db4 <__aeabi_ddiv>
 8020012:	0032      	movs	r2, r6
 8020014:	003b      	movs	r3, r7
 8020016:	f7e2 fdd9 	bl	8002bcc <__aeabi_dsub>
 802001a:	9a08      	ldr	r2, [sp, #32]
 802001c:	0006      	movs	r6, r0
 802001e:	4694      	mov	ip, r2
 8020020:	000f      	movs	r7, r1
 8020022:	9b08      	ldr	r3, [sp, #32]
 8020024:	9316      	str	r3, [sp, #88]	@ 0x58
 8020026:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020028:	4463      	add	r3, ip
 802002a:	9311      	str	r3, [sp, #68]	@ 0x44
 802002c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802002e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020030:	f7e3 f98a 	bl	8003348 <__aeabi_d2iz>
 8020034:	0005      	movs	r5, r0
 8020036:	f7e3 f9c3 	bl	80033c0 <__aeabi_i2d>
 802003a:	0002      	movs	r2, r0
 802003c:	000b      	movs	r3, r1
 802003e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020042:	f7e2 fdc3 	bl	8002bcc <__aeabi_dsub>
 8020046:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020048:	3530      	adds	r5, #48	@ 0x30
 802004a:	1c5c      	adds	r4, r3, #1
 802004c:	701d      	strb	r5, [r3, #0]
 802004e:	0032      	movs	r2, r6
 8020050:	003b      	movs	r3, r7
 8020052:	900a      	str	r0, [sp, #40]	@ 0x28
 8020054:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020056:	f7e0 fa31 	bl	80004bc <__aeabi_dcmplt>
 802005a:	2800      	cmp	r0, #0
 802005c:	d16a      	bne.n	8020134 <_dtoa_r+0x6a4>
 802005e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020062:	2000      	movs	r0, #0
 8020064:	4950      	ldr	r1, [pc, #320]	@ (80201a8 <_dtoa_r+0x718>)
 8020066:	f7e2 fdb1 	bl	8002bcc <__aeabi_dsub>
 802006a:	0032      	movs	r2, r6
 802006c:	003b      	movs	r3, r7
 802006e:	f7e0 fa25 	bl	80004bc <__aeabi_dcmplt>
 8020072:	2800      	cmp	r0, #0
 8020074:	d000      	beq.n	8020078 <_dtoa_r+0x5e8>
 8020076:	e0a5      	b.n	80201c4 <_dtoa_r+0x734>
 8020078:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802007a:	42a3      	cmp	r3, r4
 802007c:	d100      	bne.n	8020080 <_dtoa_r+0x5f0>
 802007e:	e742      	b.n	801ff06 <_dtoa_r+0x476>
 8020080:	2200      	movs	r2, #0
 8020082:	0030      	movs	r0, r6
 8020084:	0039      	movs	r1, r7
 8020086:	4b49      	ldr	r3, [pc, #292]	@ (80201ac <_dtoa_r+0x71c>)
 8020088:	f7e2 fad8 	bl	800263c <__aeabi_dmul>
 802008c:	2200      	movs	r2, #0
 802008e:	0006      	movs	r6, r0
 8020090:	000f      	movs	r7, r1
 8020092:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020096:	4b45      	ldr	r3, [pc, #276]	@ (80201ac <_dtoa_r+0x71c>)
 8020098:	f7e2 fad0 	bl	800263c <__aeabi_dmul>
 802009c:	9416      	str	r4, [sp, #88]	@ 0x58
 802009e:	900a      	str	r0, [sp, #40]	@ 0x28
 80200a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80200a2:	e7c3      	b.n	802002c <_dtoa_r+0x59c>
 80200a4:	0030      	movs	r0, r6
 80200a6:	0039      	movs	r1, r7
 80200a8:	f7e2 fac8 	bl	800263c <__aeabi_dmul>
 80200ac:	9d08      	ldr	r5, [sp, #32]
 80200ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80200b0:	002b      	movs	r3, r5
 80200b2:	4694      	mov	ip, r2
 80200b4:	9016      	str	r0, [sp, #88]	@ 0x58
 80200b6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80200b8:	4463      	add	r3, ip
 80200ba:	9319      	str	r3, [sp, #100]	@ 0x64
 80200bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80200be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80200c0:	f7e3 f942 	bl	8003348 <__aeabi_d2iz>
 80200c4:	0004      	movs	r4, r0
 80200c6:	f7e3 f97b 	bl	80033c0 <__aeabi_i2d>
 80200ca:	000b      	movs	r3, r1
 80200cc:	0002      	movs	r2, r0
 80200ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80200d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80200d2:	f7e2 fd7b 	bl	8002bcc <__aeabi_dsub>
 80200d6:	3430      	adds	r4, #48	@ 0x30
 80200d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80200da:	702c      	strb	r4, [r5, #0]
 80200dc:	3501      	adds	r5, #1
 80200de:	0006      	movs	r6, r0
 80200e0:	000f      	movs	r7, r1
 80200e2:	42ab      	cmp	r3, r5
 80200e4:	d129      	bne.n	802013a <_dtoa_r+0x6aa>
 80200e6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80200e8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80200ea:	9b08      	ldr	r3, [sp, #32]
 80200ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80200ee:	469c      	mov	ip, r3
 80200f0:	2200      	movs	r2, #0
 80200f2:	4b32      	ldr	r3, [pc, #200]	@ (80201bc <_dtoa_r+0x72c>)
 80200f4:	4464      	add	r4, ip
 80200f6:	f7e1 faf9 	bl	80016ec <__aeabi_dadd>
 80200fa:	0002      	movs	r2, r0
 80200fc:	000b      	movs	r3, r1
 80200fe:	0030      	movs	r0, r6
 8020100:	0039      	movs	r1, r7
 8020102:	f7e0 f9ef 	bl	80004e4 <__aeabi_dcmpgt>
 8020106:	2800      	cmp	r0, #0
 8020108:	d15c      	bne.n	80201c4 <_dtoa_r+0x734>
 802010a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802010c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802010e:	2000      	movs	r0, #0
 8020110:	492a      	ldr	r1, [pc, #168]	@ (80201bc <_dtoa_r+0x72c>)
 8020112:	f7e2 fd5b 	bl	8002bcc <__aeabi_dsub>
 8020116:	0002      	movs	r2, r0
 8020118:	000b      	movs	r3, r1
 802011a:	0030      	movs	r0, r6
 802011c:	0039      	movs	r1, r7
 802011e:	f7e0 f9cd 	bl	80004bc <__aeabi_dcmplt>
 8020122:	2800      	cmp	r0, #0
 8020124:	d100      	bne.n	8020128 <_dtoa_r+0x698>
 8020126:	e6ee      	b.n	801ff06 <_dtoa_r+0x476>
 8020128:	0023      	movs	r3, r4
 802012a:	3c01      	subs	r4, #1
 802012c:	7822      	ldrb	r2, [r4, #0]
 802012e:	2a30      	cmp	r2, #48	@ 0x30
 8020130:	d0fa      	beq.n	8020128 <_dtoa_r+0x698>
 8020132:	001c      	movs	r4, r3
 8020134:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020136:	9304      	str	r3, [sp, #16]
 8020138:	e73e      	b.n	801ffb8 <_dtoa_r+0x528>
 802013a:	2200      	movs	r2, #0
 802013c:	4b1b      	ldr	r3, [pc, #108]	@ (80201ac <_dtoa_r+0x71c>)
 802013e:	f7e2 fa7d 	bl	800263c <__aeabi_dmul>
 8020142:	900a      	str	r0, [sp, #40]	@ 0x28
 8020144:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020146:	e7b9      	b.n	80200bc <_dtoa_r+0x62c>
 8020148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802014a:	2b00      	cmp	r3, #0
 802014c:	d10c      	bne.n	8020168 <_dtoa_r+0x6d8>
 802014e:	9806      	ldr	r0, [sp, #24]
 8020150:	9907      	ldr	r1, [sp, #28]
 8020152:	2200      	movs	r2, #0
 8020154:	4b18      	ldr	r3, [pc, #96]	@ (80201b8 <_dtoa_r+0x728>)
 8020156:	f7e2 fa71 	bl	800263c <__aeabi_dmul>
 802015a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802015c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802015e:	f7e0 f9cb 	bl	80004f8 <__aeabi_dcmpge>
 8020162:	2800      	cmp	r0, #0
 8020164:	d100      	bne.n	8020168 <_dtoa_r+0x6d8>
 8020166:	e164      	b.n	8020432 <_dtoa_r+0x9a2>
 8020168:	2600      	movs	r6, #0
 802016a:	0037      	movs	r7, r6
 802016c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802016e:	9c08      	ldr	r4, [sp, #32]
 8020170:	43db      	mvns	r3, r3
 8020172:	930c      	str	r3, [sp, #48]	@ 0x30
 8020174:	2300      	movs	r3, #0
 8020176:	9304      	str	r3, [sp, #16]
 8020178:	0031      	movs	r1, r6
 802017a:	9803      	ldr	r0, [sp, #12]
 802017c:	f000 ff32 	bl	8020fe4 <_Bfree>
 8020180:	2f00      	cmp	r7, #0
 8020182:	d0d7      	beq.n	8020134 <_dtoa_r+0x6a4>
 8020184:	9b04      	ldr	r3, [sp, #16]
 8020186:	2b00      	cmp	r3, #0
 8020188:	d005      	beq.n	8020196 <_dtoa_r+0x706>
 802018a:	42bb      	cmp	r3, r7
 802018c:	d003      	beq.n	8020196 <_dtoa_r+0x706>
 802018e:	0019      	movs	r1, r3
 8020190:	9803      	ldr	r0, [sp, #12]
 8020192:	f000 ff27 	bl	8020fe4 <_Bfree>
 8020196:	0039      	movs	r1, r7
 8020198:	9803      	ldr	r0, [sp, #12]
 802019a:	f000 ff23 	bl	8020fe4 <_Bfree>
 802019e:	e7c9      	b.n	8020134 <_dtoa_r+0x6a4>
 80201a0:	08025138 	.word	0x08025138
 80201a4:	08025110 	.word	0x08025110
 80201a8:	3ff00000 	.word	0x3ff00000
 80201ac:	40240000 	.word	0x40240000
 80201b0:	401c0000 	.word	0x401c0000
 80201b4:	fcc00000 	.word	0xfcc00000
 80201b8:	40140000 	.word	0x40140000
 80201bc:	3fe00000 	.word	0x3fe00000
 80201c0:	9b04      	ldr	r3, [sp, #16]
 80201c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80201c4:	0023      	movs	r3, r4
 80201c6:	001c      	movs	r4, r3
 80201c8:	3b01      	subs	r3, #1
 80201ca:	781a      	ldrb	r2, [r3, #0]
 80201cc:	2a39      	cmp	r2, #57	@ 0x39
 80201ce:	d108      	bne.n	80201e2 <_dtoa_r+0x752>
 80201d0:	9a08      	ldr	r2, [sp, #32]
 80201d2:	429a      	cmp	r2, r3
 80201d4:	d1f7      	bne.n	80201c6 <_dtoa_r+0x736>
 80201d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80201d8:	9908      	ldr	r1, [sp, #32]
 80201da:	3201      	adds	r2, #1
 80201dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80201de:	2230      	movs	r2, #48	@ 0x30
 80201e0:	700a      	strb	r2, [r1, #0]
 80201e2:	781a      	ldrb	r2, [r3, #0]
 80201e4:	3201      	adds	r2, #1
 80201e6:	701a      	strb	r2, [r3, #0]
 80201e8:	e7a4      	b.n	8020134 <_dtoa_r+0x6a4>
 80201ea:	2200      	movs	r2, #0
 80201ec:	4bc6      	ldr	r3, [pc, #792]	@ (8020508 <_dtoa_r+0xa78>)
 80201ee:	f7e2 fa25 	bl	800263c <__aeabi_dmul>
 80201f2:	2200      	movs	r2, #0
 80201f4:	2300      	movs	r3, #0
 80201f6:	0006      	movs	r6, r0
 80201f8:	000f      	movs	r7, r1
 80201fa:	f7e0 f959 	bl	80004b0 <__aeabi_dcmpeq>
 80201fe:	2800      	cmp	r0, #0
 8020200:	d100      	bne.n	8020204 <_dtoa_r+0x774>
 8020202:	e6a1      	b.n	801ff48 <_dtoa_r+0x4b8>
 8020204:	e6d8      	b.n	801ffb8 <_dtoa_r+0x528>
 8020206:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020208:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802020a:	9c06      	ldr	r4, [sp, #24]
 802020c:	2f00      	cmp	r7, #0
 802020e:	d014      	beq.n	802023a <_dtoa_r+0x7aa>
 8020210:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020212:	2a01      	cmp	r2, #1
 8020214:	dd00      	ble.n	8020218 <_dtoa_r+0x788>
 8020216:	e0c8      	b.n	80203aa <_dtoa_r+0x91a>
 8020218:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802021a:	2a00      	cmp	r2, #0
 802021c:	d100      	bne.n	8020220 <_dtoa_r+0x790>
 802021e:	e0be      	b.n	802039e <_dtoa_r+0x90e>
 8020220:	4aba      	ldr	r2, [pc, #744]	@ (802050c <_dtoa_r+0xa7c>)
 8020222:	189b      	adds	r3, r3, r2
 8020224:	9a06      	ldr	r2, [sp, #24]
 8020226:	2101      	movs	r1, #1
 8020228:	18d2      	adds	r2, r2, r3
 802022a:	9206      	str	r2, [sp, #24]
 802022c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802022e:	9803      	ldr	r0, [sp, #12]
 8020230:	18d3      	adds	r3, r2, r3
 8020232:	930d      	str	r3, [sp, #52]	@ 0x34
 8020234:	f000 ffda 	bl	80211ec <__i2b>
 8020238:	0007      	movs	r7, r0
 802023a:	2c00      	cmp	r4, #0
 802023c:	d00e      	beq.n	802025c <_dtoa_r+0x7cc>
 802023e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020240:	2b00      	cmp	r3, #0
 8020242:	dd0b      	ble.n	802025c <_dtoa_r+0x7cc>
 8020244:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020246:	0023      	movs	r3, r4
 8020248:	4294      	cmp	r4, r2
 802024a:	dd00      	ble.n	802024e <_dtoa_r+0x7be>
 802024c:	0013      	movs	r3, r2
 802024e:	9a06      	ldr	r2, [sp, #24]
 8020250:	1ae4      	subs	r4, r4, r3
 8020252:	1ad2      	subs	r2, r2, r3
 8020254:	9206      	str	r2, [sp, #24]
 8020256:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020258:	1ad3      	subs	r3, r2, r3
 802025a:	930d      	str	r3, [sp, #52]	@ 0x34
 802025c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802025e:	2b00      	cmp	r3, #0
 8020260:	d01f      	beq.n	80202a2 <_dtoa_r+0x812>
 8020262:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020264:	2b00      	cmp	r3, #0
 8020266:	d100      	bne.n	802026a <_dtoa_r+0x7da>
 8020268:	e0b5      	b.n	80203d6 <_dtoa_r+0x946>
 802026a:	2d00      	cmp	r5, #0
 802026c:	d010      	beq.n	8020290 <_dtoa_r+0x800>
 802026e:	0039      	movs	r1, r7
 8020270:	002a      	movs	r2, r5
 8020272:	9803      	ldr	r0, [sp, #12]
 8020274:	f001 f884 	bl	8021380 <__pow5mult>
 8020278:	9a05      	ldr	r2, [sp, #20]
 802027a:	0001      	movs	r1, r0
 802027c:	0007      	movs	r7, r0
 802027e:	9803      	ldr	r0, [sp, #12]
 8020280:	f000 ffcc 	bl	802121c <__multiply>
 8020284:	0006      	movs	r6, r0
 8020286:	9905      	ldr	r1, [sp, #20]
 8020288:	9803      	ldr	r0, [sp, #12]
 802028a:	f000 feab 	bl	8020fe4 <_Bfree>
 802028e:	9605      	str	r6, [sp, #20]
 8020290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020292:	1b5a      	subs	r2, r3, r5
 8020294:	42ab      	cmp	r3, r5
 8020296:	d004      	beq.n	80202a2 <_dtoa_r+0x812>
 8020298:	9905      	ldr	r1, [sp, #20]
 802029a:	9803      	ldr	r0, [sp, #12]
 802029c:	f001 f870 	bl	8021380 <__pow5mult>
 80202a0:	9005      	str	r0, [sp, #20]
 80202a2:	2101      	movs	r1, #1
 80202a4:	9803      	ldr	r0, [sp, #12]
 80202a6:	f000 ffa1 	bl	80211ec <__i2b>
 80202aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80202ac:	0006      	movs	r6, r0
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d100      	bne.n	80202b4 <_dtoa_r+0x824>
 80202b2:	e1bc      	b.n	802062e <_dtoa_r+0xb9e>
 80202b4:	001a      	movs	r2, r3
 80202b6:	0001      	movs	r1, r0
 80202b8:	9803      	ldr	r0, [sp, #12]
 80202ba:	f001 f861 	bl	8021380 <__pow5mult>
 80202be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80202c0:	0006      	movs	r6, r0
 80202c2:	2500      	movs	r5, #0
 80202c4:	2b01      	cmp	r3, #1
 80202c6:	dc16      	bgt.n	80202f6 <_dtoa_r+0x866>
 80202c8:	2500      	movs	r5, #0
 80202ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80202cc:	42ab      	cmp	r3, r5
 80202ce:	d10e      	bne.n	80202ee <_dtoa_r+0x85e>
 80202d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80202d2:	031b      	lsls	r3, r3, #12
 80202d4:	42ab      	cmp	r3, r5
 80202d6:	d10a      	bne.n	80202ee <_dtoa_r+0x85e>
 80202d8:	4b8d      	ldr	r3, [pc, #564]	@ (8020510 <_dtoa_r+0xa80>)
 80202da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80202dc:	4213      	tst	r3, r2
 80202de:	d006      	beq.n	80202ee <_dtoa_r+0x85e>
 80202e0:	9b06      	ldr	r3, [sp, #24]
 80202e2:	3501      	adds	r5, #1
 80202e4:	3301      	adds	r3, #1
 80202e6:	9306      	str	r3, [sp, #24]
 80202e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202ea:	3301      	adds	r3, #1
 80202ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80202ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80202f0:	2001      	movs	r0, #1
 80202f2:	2b00      	cmp	r3, #0
 80202f4:	d008      	beq.n	8020308 <_dtoa_r+0x878>
 80202f6:	6933      	ldr	r3, [r6, #16]
 80202f8:	3303      	adds	r3, #3
 80202fa:	009b      	lsls	r3, r3, #2
 80202fc:	18f3      	adds	r3, r6, r3
 80202fe:	6858      	ldr	r0, [r3, #4]
 8020300:	f000 ff24 	bl	802114c <__hi0bits>
 8020304:	2320      	movs	r3, #32
 8020306:	1a18      	subs	r0, r3, r0
 8020308:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802030a:	1818      	adds	r0, r3, r0
 802030c:	0002      	movs	r2, r0
 802030e:	231f      	movs	r3, #31
 8020310:	401a      	ands	r2, r3
 8020312:	4218      	tst	r0, r3
 8020314:	d065      	beq.n	80203e2 <_dtoa_r+0x952>
 8020316:	3301      	adds	r3, #1
 8020318:	1a9b      	subs	r3, r3, r2
 802031a:	2b04      	cmp	r3, #4
 802031c:	dd5d      	ble.n	80203da <_dtoa_r+0x94a>
 802031e:	231c      	movs	r3, #28
 8020320:	1a9b      	subs	r3, r3, r2
 8020322:	9a06      	ldr	r2, [sp, #24]
 8020324:	18e4      	adds	r4, r4, r3
 8020326:	18d2      	adds	r2, r2, r3
 8020328:	9206      	str	r2, [sp, #24]
 802032a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802032c:	18d3      	adds	r3, r2, r3
 802032e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020330:	9b06      	ldr	r3, [sp, #24]
 8020332:	2b00      	cmp	r3, #0
 8020334:	dd05      	ble.n	8020342 <_dtoa_r+0x8b2>
 8020336:	001a      	movs	r2, r3
 8020338:	9905      	ldr	r1, [sp, #20]
 802033a:	9803      	ldr	r0, [sp, #12]
 802033c:	f001 f87c 	bl	8021438 <__lshift>
 8020340:	9005      	str	r0, [sp, #20]
 8020342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020344:	2b00      	cmp	r3, #0
 8020346:	dd05      	ble.n	8020354 <_dtoa_r+0x8c4>
 8020348:	0031      	movs	r1, r6
 802034a:	001a      	movs	r2, r3
 802034c:	9803      	ldr	r0, [sp, #12]
 802034e:	f001 f873 	bl	8021438 <__lshift>
 8020352:	0006      	movs	r6, r0
 8020354:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020356:	2b00      	cmp	r3, #0
 8020358:	d045      	beq.n	80203e6 <_dtoa_r+0x956>
 802035a:	0031      	movs	r1, r6
 802035c:	9805      	ldr	r0, [sp, #20]
 802035e:	f001 f8d7 	bl	8021510 <__mcmp>
 8020362:	2800      	cmp	r0, #0
 8020364:	da3f      	bge.n	80203e6 <_dtoa_r+0x956>
 8020366:	9b04      	ldr	r3, [sp, #16]
 8020368:	220a      	movs	r2, #10
 802036a:	3b01      	subs	r3, #1
 802036c:	930c      	str	r3, [sp, #48]	@ 0x30
 802036e:	9905      	ldr	r1, [sp, #20]
 8020370:	2300      	movs	r3, #0
 8020372:	9803      	ldr	r0, [sp, #12]
 8020374:	f000 fe5a 	bl	802102c <__multadd>
 8020378:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802037a:	9005      	str	r0, [sp, #20]
 802037c:	2b00      	cmp	r3, #0
 802037e:	d100      	bne.n	8020382 <_dtoa_r+0x8f2>
 8020380:	e15c      	b.n	802063c <_dtoa_r+0xbac>
 8020382:	2300      	movs	r3, #0
 8020384:	0039      	movs	r1, r7
 8020386:	220a      	movs	r2, #10
 8020388:	9803      	ldr	r0, [sp, #12]
 802038a:	f000 fe4f 	bl	802102c <__multadd>
 802038e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020390:	0007      	movs	r7, r0
 8020392:	2b00      	cmp	r3, #0
 8020394:	dc55      	bgt.n	8020442 <_dtoa_r+0x9b2>
 8020396:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020398:	2b02      	cmp	r3, #2
 802039a:	dc2d      	bgt.n	80203f8 <_dtoa_r+0x968>
 802039c:	e051      	b.n	8020442 <_dtoa_r+0x9b2>
 802039e:	2336      	movs	r3, #54	@ 0x36
 80203a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80203a2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80203a4:	9c06      	ldr	r4, [sp, #24]
 80203a6:	1a9b      	subs	r3, r3, r2
 80203a8:	e73c      	b.n	8020224 <_dtoa_r+0x794>
 80203aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203ac:	1e5d      	subs	r5, r3, #1
 80203ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203b0:	42ab      	cmp	r3, r5
 80203b2:	db08      	blt.n	80203c6 <_dtoa_r+0x936>
 80203b4:	1b5d      	subs	r5, r3, r5
 80203b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203b8:	9c06      	ldr	r4, [sp, #24]
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	db00      	blt.n	80203c0 <_dtoa_r+0x930>
 80203be:	e731      	b.n	8020224 <_dtoa_r+0x794>
 80203c0:	1ae4      	subs	r4, r4, r3
 80203c2:	2300      	movs	r3, #0
 80203c4:	e72e      	b.n	8020224 <_dtoa_r+0x794>
 80203c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80203ca:	1aeb      	subs	r3, r5, r3
 80203cc:	18d3      	adds	r3, r2, r3
 80203ce:	950f      	str	r5, [sp, #60]	@ 0x3c
 80203d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80203d2:	2500      	movs	r5, #0
 80203d4:	e7ef      	b.n	80203b6 <_dtoa_r+0x926>
 80203d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80203d8:	e75e      	b.n	8020298 <_dtoa_r+0x808>
 80203da:	2b04      	cmp	r3, #4
 80203dc:	d0a8      	beq.n	8020330 <_dtoa_r+0x8a0>
 80203de:	331c      	adds	r3, #28
 80203e0:	e79f      	b.n	8020322 <_dtoa_r+0x892>
 80203e2:	0013      	movs	r3, r2
 80203e4:	e7fb      	b.n	80203de <_dtoa_r+0x94e>
 80203e6:	9b04      	ldr	r3, [sp, #16]
 80203e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80203ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80203ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	dc23      	bgt.n	802043a <_dtoa_r+0x9aa>
 80203f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80203f4:	2b02      	cmp	r3, #2
 80203f6:	dd20      	ble.n	802043a <_dtoa_r+0x9aa>
 80203f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203fa:	2b00      	cmp	r3, #0
 80203fc:	d000      	beq.n	8020400 <_dtoa_r+0x970>
 80203fe:	e6b5      	b.n	802016c <_dtoa_r+0x6dc>
 8020400:	0031      	movs	r1, r6
 8020402:	2205      	movs	r2, #5
 8020404:	9803      	ldr	r0, [sp, #12]
 8020406:	f000 fe11 	bl	802102c <__multadd>
 802040a:	0006      	movs	r6, r0
 802040c:	0001      	movs	r1, r0
 802040e:	9805      	ldr	r0, [sp, #20]
 8020410:	f001 f87e 	bl	8021510 <__mcmp>
 8020414:	2800      	cmp	r0, #0
 8020416:	dc00      	bgt.n	802041a <_dtoa_r+0x98a>
 8020418:	e6a8      	b.n	802016c <_dtoa_r+0x6dc>
 802041a:	9b08      	ldr	r3, [sp, #32]
 802041c:	9a08      	ldr	r2, [sp, #32]
 802041e:	1c5c      	adds	r4, r3, #1
 8020420:	2331      	movs	r3, #49	@ 0x31
 8020422:	7013      	strb	r3, [r2, #0]
 8020424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020426:	3301      	adds	r3, #1
 8020428:	930c      	str	r3, [sp, #48]	@ 0x30
 802042a:	e6a3      	b.n	8020174 <_dtoa_r+0x6e4>
 802042c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802042e:	0037      	movs	r7, r6
 8020430:	e7f3      	b.n	802041a <_dtoa_r+0x98a>
 8020432:	9b04      	ldr	r3, [sp, #16]
 8020434:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020436:	930c      	str	r3, [sp, #48]	@ 0x30
 8020438:	e7f9      	b.n	802042e <_dtoa_r+0x99e>
 802043a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802043c:	2b00      	cmp	r3, #0
 802043e:	d100      	bne.n	8020442 <_dtoa_r+0x9b2>
 8020440:	e100      	b.n	8020644 <_dtoa_r+0xbb4>
 8020442:	2c00      	cmp	r4, #0
 8020444:	dd05      	ble.n	8020452 <_dtoa_r+0x9c2>
 8020446:	0039      	movs	r1, r7
 8020448:	0022      	movs	r2, r4
 802044a:	9803      	ldr	r0, [sp, #12]
 802044c:	f000 fff4 	bl	8021438 <__lshift>
 8020450:	0007      	movs	r7, r0
 8020452:	0038      	movs	r0, r7
 8020454:	2d00      	cmp	r5, #0
 8020456:	d018      	beq.n	802048a <_dtoa_r+0x9fa>
 8020458:	6879      	ldr	r1, [r7, #4]
 802045a:	9803      	ldr	r0, [sp, #12]
 802045c:	f000 fd7e 	bl	8020f5c <_Balloc>
 8020460:	1e04      	subs	r4, r0, #0
 8020462:	d105      	bne.n	8020470 <_dtoa_r+0x9e0>
 8020464:	0022      	movs	r2, r4
 8020466:	4b2b      	ldr	r3, [pc, #172]	@ (8020514 <_dtoa_r+0xa84>)
 8020468:	482b      	ldr	r0, [pc, #172]	@ (8020518 <_dtoa_r+0xa88>)
 802046a:	492c      	ldr	r1, [pc, #176]	@ (802051c <_dtoa_r+0xa8c>)
 802046c:	f7ff fb25 	bl	801faba <_dtoa_r+0x2a>
 8020470:	0039      	movs	r1, r7
 8020472:	693a      	ldr	r2, [r7, #16]
 8020474:	310c      	adds	r1, #12
 8020476:	3202      	adds	r2, #2
 8020478:	0092      	lsls	r2, r2, #2
 802047a:	300c      	adds	r0, #12
 802047c:	f7ff fa6a 	bl	801f954 <memcpy>
 8020480:	2201      	movs	r2, #1
 8020482:	0021      	movs	r1, r4
 8020484:	9803      	ldr	r0, [sp, #12]
 8020486:	f000 ffd7 	bl	8021438 <__lshift>
 802048a:	9b08      	ldr	r3, [sp, #32]
 802048c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802048e:	9306      	str	r3, [sp, #24]
 8020490:	3b01      	subs	r3, #1
 8020492:	189b      	adds	r3, r3, r2
 8020494:	2201      	movs	r2, #1
 8020496:	9704      	str	r7, [sp, #16]
 8020498:	0007      	movs	r7, r0
 802049a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802049c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802049e:	4013      	ands	r3, r2
 80204a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80204a2:	0031      	movs	r1, r6
 80204a4:	9805      	ldr	r0, [sp, #20]
 80204a6:	f7ff fa65 	bl	801f974 <quorem>
 80204aa:	9904      	ldr	r1, [sp, #16]
 80204ac:	0005      	movs	r5, r0
 80204ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80204b0:	9805      	ldr	r0, [sp, #20]
 80204b2:	f001 f82d 	bl	8021510 <__mcmp>
 80204b6:	003a      	movs	r2, r7
 80204b8:	900d      	str	r0, [sp, #52]	@ 0x34
 80204ba:	0031      	movs	r1, r6
 80204bc:	9803      	ldr	r0, [sp, #12]
 80204be:	f001 f843 	bl	8021548 <__mdiff>
 80204c2:	2201      	movs	r2, #1
 80204c4:	68c3      	ldr	r3, [r0, #12]
 80204c6:	0004      	movs	r4, r0
 80204c8:	3530      	adds	r5, #48	@ 0x30
 80204ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80204cc:	2b00      	cmp	r3, #0
 80204ce:	d104      	bne.n	80204da <_dtoa_r+0xa4a>
 80204d0:	0001      	movs	r1, r0
 80204d2:	9805      	ldr	r0, [sp, #20]
 80204d4:	f001 f81c 	bl	8021510 <__mcmp>
 80204d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80204da:	0021      	movs	r1, r4
 80204dc:	9803      	ldr	r0, [sp, #12]
 80204de:	f000 fd81 	bl	8020fe4 <_Bfree>
 80204e2:	9b06      	ldr	r3, [sp, #24]
 80204e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80204e6:	1c5c      	adds	r4, r3, #1
 80204e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80204ea:	4313      	orrs	r3, r2
 80204ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80204ee:	4313      	orrs	r3, r2
 80204f0:	d116      	bne.n	8020520 <_dtoa_r+0xa90>
 80204f2:	2d39      	cmp	r5, #57	@ 0x39
 80204f4:	d02f      	beq.n	8020556 <_dtoa_r+0xac6>
 80204f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	dd01      	ble.n	8020500 <_dtoa_r+0xa70>
 80204fc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80204fe:	3531      	adds	r5, #49	@ 0x31
 8020500:	9b06      	ldr	r3, [sp, #24]
 8020502:	701d      	strb	r5, [r3, #0]
 8020504:	e638      	b.n	8020178 <_dtoa_r+0x6e8>
 8020506:	46c0      	nop			@ (mov r8, r8)
 8020508:	40240000 	.word	0x40240000
 802050c:	00000433 	.word	0x00000433
 8020510:	7ff00000 	.word	0x7ff00000
 8020514:	08025039 	.word	0x08025039
 8020518:	08024fe1 	.word	0x08024fe1
 802051c:	000002ef 	.word	0x000002ef
 8020520:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020522:	2b00      	cmp	r3, #0
 8020524:	db04      	blt.n	8020530 <_dtoa_r+0xaa0>
 8020526:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020528:	4313      	orrs	r3, r2
 802052a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802052c:	4313      	orrs	r3, r2
 802052e:	d11e      	bne.n	802056e <_dtoa_r+0xade>
 8020530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020532:	2b00      	cmp	r3, #0
 8020534:	dde4      	ble.n	8020500 <_dtoa_r+0xa70>
 8020536:	9905      	ldr	r1, [sp, #20]
 8020538:	2201      	movs	r2, #1
 802053a:	9803      	ldr	r0, [sp, #12]
 802053c:	f000 ff7c 	bl	8021438 <__lshift>
 8020540:	0031      	movs	r1, r6
 8020542:	9005      	str	r0, [sp, #20]
 8020544:	f000 ffe4 	bl	8021510 <__mcmp>
 8020548:	2800      	cmp	r0, #0
 802054a:	dc02      	bgt.n	8020552 <_dtoa_r+0xac2>
 802054c:	d1d8      	bne.n	8020500 <_dtoa_r+0xa70>
 802054e:	07eb      	lsls	r3, r5, #31
 8020550:	d5d6      	bpl.n	8020500 <_dtoa_r+0xa70>
 8020552:	2d39      	cmp	r5, #57	@ 0x39
 8020554:	d1d2      	bne.n	80204fc <_dtoa_r+0xa6c>
 8020556:	2339      	movs	r3, #57	@ 0x39
 8020558:	9a06      	ldr	r2, [sp, #24]
 802055a:	7013      	strb	r3, [r2, #0]
 802055c:	0023      	movs	r3, r4
 802055e:	001c      	movs	r4, r3
 8020560:	3b01      	subs	r3, #1
 8020562:	781a      	ldrb	r2, [r3, #0]
 8020564:	2a39      	cmp	r2, #57	@ 0x39
 8020566:	d04f      	beq.n	8020608 <_dtoa_r+0xb78>
 8020568:	3201      	adds	r2, #1
 802056a:	701a      	strb	r2, [r3, #0]
 802056c:	e604      	b.n	8020178 <_dtoa_r+0x6e8>
 802056e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020570:	2b00      	cmp	r3, #0
 8020572:	dd03      	ble.n	802057c <_dtoa_r+0xaec>
 8020574:	2d39      	cmp	r5, #57	@ 0x39
 8020576:	d0ee      	beq.n	8020556 <_dtoa_r+0xac6>
 8020578:	3501      	adds	r5, #1
 802057a:	e7c1      	b.n	8020500 <_dtoa_r+0xa70>
 802057c:	9b06      	ldr	r3, [sp, #24]
 802057e:	9a06      	ldr	r2, [sp, #24]
 8020580:	701d      	strb	r5, [r3, #0]
 8020582:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020584:	4293      	cmp	r3, r2
 8020586:	d02a      	beq.n	80205de <_dtoa_r+0xb4e>
 8020588:	2300      	movs	r3, #0
 802058a:	220a      	movs	r2, #10
 802058c:	9905      	ldr	r1, [sp, #20]
 802058e:	9803      	ldr	r0, [sp, #12]
 8020590:	f000 fd4c 	bl	802102c <__multadd>
 8020594:	9b04      	ldr	r3, [sp, #16]
 8020596:	9005      	str	r0, [sp, #20]
 8020598:	42bb      	cmp	r3, r7
 802059a:	d109      	bne.n	80205b0 <_dtoa_r+0xb20>
 802059c:	2300      	movs	r3, #0
 802059e:	220a      	movs	r2, #10
 80205a0:	9904      	ldr	r1, [sp, #16]
 80205a2:	9803      	ldr	r0, [sp, #12]
 80205a4:	f000 fd42 	bl	802102c <__multadd>
 80205a8:	9004      	str	r0, [sp, #16]
 80205aa:	0007      	movs	r7, r0
 80205ac:	9406      	str	r4, [sp, #24]
 80205ae:	e778      	b.n	80204a2 <_dtoa_r+0xa12>
 80205b0:	9904      	ldr	r1, [sp, #16]
 80205b2:	2300      	movs	r3, #0
 80205b4:	220a      	movs	r2, #10
 80205b6:	9803      	ldr	r0, [sp, #12]
 80205b8:	f000 fd38 	bl	802102c <__multadd>
 80205bc:	2300      	movs	r3, #0
 80205be:	9004      	str	r0, [sp, #16]
 80205c0:	220a      	movs	r2, #10
 80205c2:	0039      	movs	r1, r7
 80205c4:	9803      	ldr	r0, [sp, #12]
 80205c6:	f000 fd31 	bl	802102c <__multadd>
 80205ca:	e7ee      	b.n	80205aa <_dtoa_r+0xb1a>
 80205cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205ce:	2401      	movs	r4, #1
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	dd00      	ble.n	80205d6 <_dtoa_r+0xb46>
 80205d4:	001c      	movs	r4, r3
 80205d6:	9b08      	ldr	r3, [sp, #32]
 80205d8:	191c      	adds	r4, r3, r4
 80205da:	2300      	movs	r3, #0
 80205dc:	9304      	str	r3, [sp, #16]
 80205de:	9905      	ldr	r1, [sp, #20]
 80205e0:	2201      	movs	r2, #1
 80205e2:	9803      	ldr	r0, [sp, #12]
 80205e4:	f000 ff28 	bl	8021438 <__lshift>
 80205e8:	0031      	movs	r1, r6
 80205ea:	9005      	str	r0, [sp, #20]
 80205ec:	f000 ff90 	bl	8021510 <__mcmp>
 80205f0:	2800      	cmp	r0, #0
 80205f2:	dcb3      	bgt.n	802055c <_dtoa_r+0xacc>
 80205f4:	d101      	bne.n	80205fa <_dtoa_r+0xb6a>
 80205f6:	07ed      	lsls	r5, r5, #31
 80205f8:	d4b0      	bmi.n	802055c <_dtoa_r+0xacc>
 80205fa:	0023      	movs	r3, r4
 80205fc:	001c      	movs	r4, r3
 80205fe:	3b01      	subs	r3, #1
 8020600:	781a      	ldrb	r2, [r3, #0]
 8020602:	2a30      	cmp	r2, #48	@ 0x30
 8020604:	d0fa      	beq.n	80205fc <_dtoa_r+0xb6c>
 8020606:	e5b7      	b.n	8020178 <_dtoa_r+0x6e8>
 8020608:	9a08      	ldr	r2, [sp, #32]
 802060a:	429a      	cmp	r2, r3
 802060c:	d1a7      	bne.n	802055e <_dtoa_r+0xace>
 802060e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020610:	3301      	adds	r3, #1
 8020612:	930c      	str	r3, [sp, #48]	@ 0x30
 8020614:	2331      	movs	r3, #49	@ 0x31
 8020616:	7013      	strb	r3, [r2, #0]
 8020618:	e5ae      	b.n	8020178 <_dtoa_r+0x6e8>
 802061a:	4b15      	ldr	r3, [pc, #84]	@ (8020670 <_dtoa_r+0xbe0>)
 802061c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802061e:	9308      	str	r3, [sp, #32]
 8020620:	4b14      	ldr	r3, [pc, #80]	@ (8020674 <_dtoa_r+0xbe4>)
 8020622:	2a00      	cmp	r2, #0
 8020624:	d001      	beq.n	802062a <_dtoa_r+0xb9a>
 8020626:	f7ff fa7b 	bl	801fb20 <_dtoa_r+0x90>
 802062a:	f7ff fa7b 	bl	801fb24 <_dtoa_r+0x94>
 802062e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020630:	2b01      	cmp	r3, #1
 8020632:	dc00      	bgt.n	8020636 <_dtoa_r+0xba6>
 8020634:	e648      	b.n	80202c8 <_dtoa_r+0x838>
 8020636:	2001      	movs	r0, #1
 8020638:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802063a:	e665      	b.n	8020308 <_dtoa_r+0x878>
 802063c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802063e:	2b00      	cmp	r3, #0
 8020640:	dc00      	bgt.n	8020644 <_dtoa_r+0xbb4>
 8020642:	e6d6      	b.n	80203f2 <_dtoa_r+0x962>
 8020644:	2400      	movs	r4, #0
 8020646:	0031      	movs	r1, r6
 8020648:	9805      	ldr	r0, [sp, #20]
 802064a:	f7ff f993 	bl	801f974 <quorem>
 802064e:	9b08      	ldr	r3, [sp, #32]
 8020650:	3030      	adds	r0, #48	@ 0x30
 8020652:	5518      	strb	r0, [r3, r4]
 8020654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020656:	3401      	adds	r4, #1
 8020658:	0005      	movs	r5, r0
 802065a:	429c      	cmp	r4, r3
 802065c:	dab6      	bge.n	80205cc <_dtoa_r+0xb3c>
 802065e:	2300      	movs	r3, #0
 8020660:	220a      	movs	r2, #10
 8020662:	9905      	ldr	r1, [sp, #20]
 8020664:	9803      	ldr	r0, [sp, #12]
 8020666:	f000 fce1 	bl	802102c <__multadd>
 802066a:	9005      	str	r0, [sp, #20]
 802066c:	e7eb      	b.n	8020646 <_dtoa_r+0xbb6>
 802066e:	46c0      	nop			@ (mov r8, r8)
 8020670:	08024fbd 	.word	0x08024fbd
 8020674:	08024fc5 	.word	0x08024fc5

08020678 <_free_r>:
 8020678:	b570      	push	{r4, r5, r6, lr}
 802067a:	0005      	movs	r5, r0
 802067c:	1e0c      	subs	r4, r1, #0
 802067e:	d010      	beq.n	80206a2 <_free_r+0x2a>
 8020680:	3c04      	subs	r4, #4
 8020682:	6823      	ldr	r3, [r4, #0]
 8020684:	2b00      	cmp	r3, #0
 8020686:	da00      	bge.n	802068a <_free_r+0x12>
 8020688:	18e4      	adds	r4, r4, r3
 802068a:	0028      	movs	r0, r5
 802068c:	f000 fc56 	bl	8020f3c <__malloc_lock>
 8020690:	4a1d      	ldr	r2, [pc, #116]	@ (8020708 <_free_r+0x90>)
 8020692:	6813      	ldr	r3, [r2, #0]
 8020694:	2b00      	cmp	r3, #0
 8020696:	d105      	bne.n	80206a4 <_free_r+0x2c>
 8020698:	6063      	str	r3, [r4, #4]
 802069a:	6014      	str	r4, [r2, #0]
 802069c:	0028      	movs	r0, r5
 802069e:	f000 fc55 	bl	8020f4c <__malloc_unlock>
 80206a2:	bd70      	pop	{r4, r5, r6, pc}
 80206a4:	42a3      	cmp	r3, r4
 80206a6:	d908      	bls.n	80206ba <_free_r+0x42>
 80206a8:	6820      	ldr	r0, [r4, #0]
 80206aa:	1821      	adds	r1, r4, r0
 80206ac:	428b      	cmp	r3, r1
 80206ae:	d1f3      	bne.n	8020698 <_free_r+0x20>
 80206b0:	6819      	ldr	r1, [r3, #0]
 80206b2:	685b      	ldr	r3, [r3, #4]
 80206b4:	1809      	adds	r1, r1, r0
 80206b6:	6021      	str	r1, [r4, #0]
 80206b8:	e7ee      	b.n	8020698 <_free_r+0x20>
 80206ba:	001a      	movs	r2, r3
 80206bc:	685b      	ldr	r3, [r3, #4]
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d001      	beq.n	80206c6 <_free_r+0x4e>
 80206c2:	42a3      	cmp	r3, r4
 80206c4:	d9f9      	bls.n	80206ba <_free_r+0x42>
 80206c6:	6811      	ldr	r1, [r2, #0]
 80206c8:	1850      	adds	r0, r2, r1
 80206ca:	42a0      	cmp	r0, r4
 80206cc:	d10b      	bne.n	80206e6 <_free_r+0x6e>
 80206ce:	6820      	ldr	r0, [r4, #0]
 80206d0:	1809      	adds	r1, r1, r0
 80206d2:	1850      	adds	r0, r2, r1
 80206d4:	6011      	str	r1, [r2, #0]
 80206d6:	4283      	cmp	r3, r0
 80206d8:	d1e0      	bne.n	802069c <_free_r+0x24>
 80206da:	6818      	ldr	r0, [r3, #0]
 80206dc:	685b      	ldr	r3, [r3, #4]
 80206de:	1841      	adds	r1, r0, r1
 80206e0:	6011      	str	r1, [r2, #0]
 80206e2:	6053      	str	r3, [r2, #4]
 80206e4:	e7da      	b.n	802069c <_free_r+0x24>
 80206e6:	42a0      	cmp	r0, r4
 80206e8:	d902      	bls.n	80206f0 <_free_r+0x78>
 80206ea:	230c      	movs	r3, #12
 80206ec:	602b      	str	r3, [r5, #0]
 80206ee:	e7d5      	b.n	802069c <_free_r+0x24>
 80206f0:	6820      	ldr	r0, [r4, #0]
 80206f2:	1821      	adds	r1, r4, r0
 80206f4:	428b      	cmp	r3, r1
 80206f6:	d103      	bne.n	8020700 <_free_r+0x88>
 80206f8:	6819      	ldr	r1, [r3, #0]
 80206fa:	685b      	ldr	r3, [r3, #4]
 80206fc:	1809      	adds	r1, r1, r0
 80206fe:	6021      	str	r1, [r4, #0]
 8020700:	6063      	str	r3, [r4, #4]
 8020702:	6054      	str	r4, [r2, #4]
 8020704:	e7ca      	b.n	802069c <_free_r+0x24>
 8020706:	46c0      	nop			@ (mov r8, r8)
 8020708:	200038fc 	.word	0x200038fc

0802070c <rshift>:
 802070c:	0002      	movs	r2, r0
 802070e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020710:	6904      	ldr	r4, [r0, #16]
 8020712:	b085      	sub	sp, #20
 8020714:	3214      	adds	r2, #20
 8020716:	114b      	asrs	r3, r1, #5
 8020718:	0016      	movs	r6, r2
 802071a:	9302      	str	r3, [sp, #8]
 802071c:	429c      	cmp	r4, r3
 802071e:	dd31      	ble.n	8020784 <rshift+0x78>
 8020720:	261f      	movs	r6, #31
 8020722:	000f      	movs	r7, r1
 8020724:	009b      	lsls	r3, r3, #2
 8020726:	00a5      	lsls	r5, r4, #2
 8020728:	18d3      	adds	r3, r2, r3
 802072a:	4037      	ands	r7, r6
 802072c:	1955      	adds	r5, r2, r5
 802072e:	9300      	str	r3, [sp, #0]
 8020730:	9701      	str	r7, [sp, #4]
 8020732:	4231      	tst	r1, r6
 8020734:	d10d      	bne.n	8020752 <rshift+0x46>
 8020736:	0016      	movs	r6, r2
 8020738:	0019      	movs	r1, r3
 802073a:	428d      	cmp	r5, r1
 802073c:	d836      	bhi.n	80207ac <rshift+0xa0>
 802073e:	9b00      	ldr	r3, [sp, #0]
 8020740:	2600      	movs	r6, #0
 8020742:	3b03      	subs	r3, #3
 8020744:	429d      	cmp	r5, r3
 8020746:	d302      	bcc.n	802074e <rshift+0x42>
 8020748:	9b02      	ldr	r3, [sp, #8]
 802074a:	1ae4      	subs	r4, r4, r3
 802074c:	00a6      	lsls	r6, r4, #2
 802074e:	1996      	adds	r6, r2, r6
 8020750:	e018      	b.n	8020784 <rshift+0x78>
 8020752:	2120      	movs	r1, #32
 8020754:	9e01      	ldr	r6, [sp, #4]
 8020756:	9f01      	ldr	r7, [sp, #4]
 8020758:	1b89      	subs	r1, r1, r6
 802075a:	9e00      	ldr	r6, [sp, #0]
 802075c:	9103      	str	r1, [sp, #12]
 802075e:	ce02      	ldmia	r6!, {r1}
 8020760:	4694      	mov	ip, r2
 8020762:	40f9      	lsrs	r1, r7
 8020764:	42b5      	cmp	r5, r6
 8020766:	d816      	bhi.n	8020796 <rshift+0x8a>
 8020768:	9b00      	ldr	r3, [sp, #0]
 802076a:	2600      	movs	r6, #0
 802076c:	3301      	adds	r3, #1
 802076e:	429d      	cmp	r5, r3
 8020770:	d303      	bcc.n	802077a <rshift+0x6e>
 8020772:	9b02      	ldr	r3, [sp, #8]
 8020774:	1ae4      	subs	r4, r4, r3
 8020776:	00a6      	lsls	r6, r4, #2
 8020778:	3e04      	subs	r6, #4
 802077a:	1996      	adds	r6, r2, r6
 802077c:	6031      	str	r1, [r6, #0]
 802077e:	2900      	cmp	r1, #0
 8020780:	d000      	beq.n	8020784 <rshift+0x78>
 8020782:	3604      	adds	r6, #4
 8020784:	1ab1      	subs	r1, r6, r2
 8020786:	1089      	asrs	r1, r1, #2
 8020788:	6101      	str	r1, [r0, #16]
 802078a:	4296      	cmp	r6, r2
 802078c:	d101      	bne.n	8020792 <rshift+0x86>
 802078e:	2300      	movs	r3, #0
 8020790:	6143      	str	r3, [r0, #20]
 8020792:	b005      	add	sp, #20
 8020794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020796:	6837      	ldr	r7, [r6, #0]
 8020798:	9b03      	ldr	r3, [sp, #12]
 802079a:	409f      	lsls	r7, r3
 802079c:	430f      	orrs	r7, r1
 802079e:	4661      	mov	r1, ip
 80207a0:	c180      	stmia	r1!, {r7}
 80207a2:	468c      	mov	ip, r1
 80207a4:	9b01      	ldr	r3, [sp, #4]
 80207a6:	ce02      	ldmia	r6!, {r1}
 80207a8:	40d9      	lsrs	r1, r3
 80207aa:	e7db      	b.n	8020764 <rshift+0x58>
 80207ac:	c980      	ldmia	r1!, {r7}
 80207ae:	c680      	stmia	r6!, {r7}
 80207b0:	e7c3      	b.n	802073a <rshift+0x2e>

080207b2 <__hexdig_fun>:
 80207b2:	0002      	movs	r2, r0
 80207b4:	3a30      	subs	r2, #48	@ 0x30
 80207b6:	0003      	movs	r3, r0
 80207b8:	2a09      	cmp	r2, #9
 80207ba:	d802      	bhi.n	80207c2 <__hexdig_fun+0x10>
 80207bc:	3b20      	subs	r3, #32
 80207be:	b2d8      	uxtb	r0, r3
 80207c0:	4770      	bx	lr
 80207c2:	0002      	movs	r2, r0
 80207c4:	3a61      	subs	r2, #97	@ 0x61
 80207c6:	2a05      	cmp	r2, #5
 80207c8:	d801      	bhi.n	80207ce <__hexdig_fun+0x1c>
 80207ca:	3b47      	subs	r3, #71	@ 0x47
 80207cc:	e7f7      	b.n	80207be <__hexdig_fun+0xc>
 80207ce:	001a      	movs	r2, r3
 80207d0:	3a41      	subs	r2, #65	@ 0x41
 80207d2:	2000      	movs	r0, #0
 80207d4:	2a05      	cmp	r2, #5
 80207d6:	d8f3      	bhi.n	80207c0 <__hexdig_fun+0xe>
 80207d8:	3b27      	subs	r3, #39	@ 0x27
 80207da:	e7f0      	b.n	80207be <__hexdig_fun+0xc>

080207dc <__gethex>:
 80207dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80207de:	b089      	sub	sp, #36	@ 0x24
 80207e0:	9307      	str	r3, [sp, #28]
 80207e2:	680b      	ldr	r3, [r1, #0]
 80207e4:	9201      	str	r2, [sp, #4]
 80207e6:	9003      	str	r0, [sp, #12]
 80207e8:	9106      	str	r1, [sp, #24]
 80207ea:	1c9a      	adds	r2, r3, #2
 80207ec:	0011      	movs	r1, r2
 80207ee:	3201      	adds	r2, #1
 80207f0:	1e50      	subs	r0, r2, #1
 80207f2:	7800      	ldrb	r0, [r0, #0]
 80207f4:	2830      	cmp	r0, #48	@ 0x30
 80207f6:	d0f9      	beq.n	80207ec <__gethex+0x10>
 80207f8:	1acb      	subs	r3, r1, r3
 80207fa:	3b02      	subs	r3, #2
 80207fc:	9305      	str	r3, [sp, #20]
 80207fe:	9100      	str	r1, [sp, #0]
 8020800:	f7ff ffd7 	bl	80207b2 <__hexdig_fun>
 8020804:	2300      	movs	r3, #0
 8020806:	001d      	movs	r5, r3
 8020808:	9302      	str	r3, [sp, #8]
 802080a:	4298      	cmp	r0, r3
 802080c:	d11e      	bne.n	802084c <__gethex+0x70>
 802080e:	2201      	movs	r2, #1
 8020810:	49a6      	ldr	r1, [pc, #664]	@ (8020aac <__gethex+0x2d0>)
 8020812:	9800      	ldr	r0, [sp, #0]
 8020814:	f7fe ffd8 	bl	801f7c8 <strncmp>
 8020818:	0007      	movs	r7, r0
 802081a:	42a8      	cmp	r0, r5
 802081c:	d000      	beq.n	8020820 <__gethex+0x44>
 802081e:	e06a      	b.n	80208f6 <__gethex+0x11a>
 8020820:	9b00      	ldr	r3, [sp, #0]
 8020822:	7858      	ldrb	r0, [r3, #1]
 8020824:	1c5c      	adds	r4, r3, #1
 8020826:	f7ff ffc4 	bl	80207b2 <__hexdig_fun>
 802082a:	2301      	movs	r3, #1
 802082c:	9302      	str	r3, [sp, #8]
 802082e:	42a8      	cmp	r0, r5
 8020830:	d02f      	beq.n	8020892 <__gethex+0xb6>
 8020832:	9400      	str	r4, [sp, #0]
 8020834:	9b00      	ldr	r3, [sp, #0]
 8020836:	7818      	ldrb	r0, [r3, #0]
 8020838:	2830      	cmp	r0, #48	@ 0x30
 802083a:	d009      	beq.n	8020850 <__gethex+0x74>
 802083c:	f7ff ffb9 	bl	80207b2 <__hexdig_fun>
 8020840:	4242      	negs	r2, r0
 8020842:	4142      	adcs	r2, r0
 8020844:	2301      	movs	r3, #1
 8020846:	0025      	movs	r5, r4
 8020848:	9202      	str	r2, [sp, #8]
 802084a:	9305      	str	r3, [sp, #20]
 802084c:	9c00      	ldr	r4, [sp, #0]
 802084e:	e004      	b.n	802085a <__gethex+0x7e>
 8020850:	9b00      	ldr	r3, [sp, #0]
 8020852:	3301      	adds	r3, #1
 8020854:	9300      	str	r3, [sp, #0]
 8020856:	e7ed      	b.n	8020834 <__gethex+0x58>
 8020858:	3401      	adds	r4, #1
 802085a:	7820      	ldrb	r0, [r4, #0]
 802085c:	f7ff ffa9 	bl	80207b2 <__hexdig_fun>
 8020860:	1e07      	subs	r7, r0, #0
 8020862:	d1f9      	bne.n	8020858 <__gethex+0x7c>
 8020864:	2201      	movs	r2, #1
 8020866:	0020      	movs	r0, r4
 8020868:	4990      	ldr	r1, [pc, #576]	@ (8020aac <__gethex+0x2d0>)
 802086a:	f7fe ffad 	bl	801f7c8 <strncmp>
 802086e:	2800      	cmp	r0, #0
 8020870:	d10d      	bne.n	802088e <__gethex+0xb2>
 8020872:	2d00      	cmp	r5, #0
 8020874:	d106      	bne.n	8020884 <__gethex+0xa8>
 8020876:	3401      	adds	r4, #1
 8020878:	0025      	movs	r5, r4
 802087a:	7820      	ldrb	r0, [r4, #0]
 802087c:	f7ff ff99 	bl	80207b2 <__hexdig_fun>
 8020880:	2800      	cmp	r0, #0
 8020882:	d102      	bne.n	802088a <__gethex+0xae>
 8020884:	1b2d      	subs	r5, r5, r4
 8020886:	00af      	lsls	r7, r5, #2
 8020888:	e003      	b.n	8020892 <__gethex+0xb6>
 802088a:	3401      	adds	r4, #1
 802088c:	e7f5      	b.n	802087a <__gethex+0x9e>
 802088e:	2d00      	cmp	r5, #0
 8020890:	d1f8      	bne.n	8020884 <__gethex+0xa8>
 8020892:	2220      	movs	r2, #32
 8020894:	7823      	ldrb	r3, [r4, #0]
 8020896:	0026      	movs	r6, r4
 8020898:	4393      	bics	r3, r2
 802089a:	2b50      	cmp	r3, #80	@ 0x50
 802089c:	d11d      	bne.n	80208da <__gethex+0xfe>
 802089e:	7863      	ldrb	r3, [r4, #1]
 80208a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80208a2:	d02d      	beq.n	8020900 <__gethex+0x124>
 80208a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80208a6:	d02f      	beq.n	8020908 <__gethex+0x12c>
 80208a8:	2300      	movs	r3, #0
 80208aa:	1c66      	adds	r6, r4, #1
 80208ac:	9304      	str	r3, [sp, #16]
 80208ae:	7830      	ldrb	r0, [r6, #0]
 80208b0:	f7ff ff7f 	bl	80207b2 <__hexdig_fun>
 80208b4:	1e43      	subs	r3, r0, #1
 80208b6:	b2db      	uxtb	r3, r3
 80208b8:	0005      	movs	r5, r0
 80208ba:	2b18      	cmp	r3, #24
 80208bc:	d82a      	bhi.n	8020914 <__gethex+0x138>
 80208be:	7870      	ldrb	r0, [r6, #1]
 80208c0:	f7ff ff77 	bl	80207b2 <__hexdig_fun>
 80208c4:	1e43      	subs	r3, r0, #1
 80208c6:	b2db      	uxtb	r3, r3
 80208c8:	3601      	adds	r6, #1
 80208ca:	3d10      	subs	r5, #16
 80208cc:	2b18      	cmp	r3, #24
 80208ce:	d91d      	bls.n	802090c <__gethex+0x130>
 80208d0:	9b04      	ldr	r3, [sp, #16]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d000      	beq.n	80208d8 <__gethex+0xfc>
 80208d6:	426d      	negs	r5, r5
 80208d8:	197f      	adds	r7, r7, r5
 80208da:	9b06      	ldr	r3, [sp, #24]
 80208dc:	601e      	str	r6, [r3, #0]
 80208de:	9b02      	ldr	r3, [sp, #8]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d019      	beq.n	8020918 <__gethex+0x13c>
 80208e4:	9b05      	ldr	r3, [sp, #20]
 80208e6:	2606      	movs	r6, #6
 80208e8:	425a      	negs	r2, r3
 80208ea:	4153      	adcs	r3, r2
 80208ec:	425b      	negs	r3, r3
 80208ee:	401e      	ands	r6, r3
 80208f0:	0030      	movs	r0, r6
 80208f2:	b009      	add	sp, #36	@ 0x24
 80208f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208f6:	2301      	movs	r3, #1
 80208f8:	2700      	movs	r7, #0
 80208fa:	9c00      	ldr	r4, [sp, #0]
 80208fc:	9302      	str	r3, [sp, #8]
 80208fe:	e7c8      	b.n	8020892 <__gethex+0xb6>
 8020900:	2300      	movs	r3, #0
 8020902:	9304      	str	r3, [sp, #16]
 8020904:	1ca6      	adds	r6, r4, #2
 8020906:	e7d2      	b.n	80208ae <__gethex+0xd2>
 8020908:	2301      	movs	r3, #1
 802090a:	e7fa      	b.n	8020902 <__gethex+0x126>
 802090c:	230a      	movs	r3, #10
 802090e:	435d      	muls	r5, r3
 8020910:	182d      	adds	r5, r5, r0
 8020912:	e7d4      	b.n	80208be <__gethex+0xe2>
 8020914:	0026      	movs	r6, r4
 8020916:	e7e0      	b.n	80208da <__gethex+0xfe>
 8020918:	9b00      	ldr	r3, [sp, #0]
 802091a:	9902      	ldr	r1, [sp, #8]
 802091c:	1ae3      	subs	r3, r4, r3
 802091e:	3b01      	subs	r3, #1
 8020920:	2b07      	cmp	r3, #7
 8020922:	dc0a      	bgt.n	802093a <__gethex+0x15e>
 8020924:	9803      	ldr	r0, [sp, #12]
 8020926:	f000 fb19 	bl	8020f5c <_Balloc>
 802092a:	1e05      	subs	r5, r0, #0
 802092c:	d108      	bne.n	8020940 <__gethex+0x164>
 802092e:	002a      	movs	r2, r5
 8020930:	21e4      	movs	r1, #228	@ 0xe4
 8020932:	4b5f      	ldr	r3, [pc, #380]	@ (8020ab0 <__gethex+0x2d4>)
 8020934:	485f      	ldr	r0, [pc, #380]	@ (8020ab4 <__gethex+0x2d8>)
 8020936:	f001 fbf1 	bl	802211c <__assert_func>
 802093a:	3101      	adds	r1, #1
 802093c:	105b      	asrs	r3, r3, #1
 802093e:	e7ef      	b.n	8020920 <__gethex+0x144>
 8020940:	0003      	movs	r3, r0
 8020942:	3314      	adds	r3, #20
 8020944:	9302      	str	r3, [sp, #8]
 8020946:	9305      	str	r3, [sp, #20]
 8020948:	2300      	movs	r3, #0
 802094a:	001e      	movs	r6, r3
 802094c:	9304      	str	r3, [sp, #16]
 802094e:	9b00      	ldr	r3, [sp, #0]
 8020950:	42a3      	cmp	r3, r4
 8020952:	d338      	bcc.n	80209c6 <__gethex+0x1ea>
 8020954:	9c05      	ldr	r4, [sp, #20]
 8020956:	9b02      	ldr	r3, [sp, #8]
 8020958:	c440      	stmia	r4!, {r6}
 802095a:	1ae4      	subs	r4, r4, r3
 802095c:	10a4      	asrs	r4, r4, #2
 802095e:	0030      	movs	r0, r6
 8020960:	612c      	str	r4, [r5, #16]
 8020962:	f000 fbf3 	bl	802114c <__hi0bits>
 8020966:	9b01      	ldr	r3, [sp, #4]
 8020968:	0164      	lsls	r4, r4, #5
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	1a26      	subs	r6, r4, r0
 802096e:	9300      	str	r3, [sp, #0]
 8020970:	429e      	cmp	r6, r3
 8020972:	dd52      	ble.n	8020a1a <__gethex+0x23e>
 8020974:	1af6      	subs	r6, r6, r3
 8020976:	0031      	movs	r1, r6
 8020978:	0028      	movs	r0, r5
 802097a:	f000 ff96 	bl	80218aa <__any_on>
 802097e:	1e04      	subs	r4, r0, #0
 8020980:	d00f      	beq.n	80209a2 <__gethex+0x1c6>
 8020982:	2401      	movs	r4, #1
 8020984:	231f      	movs	r3, #31
 8020986:	0020      	movs	r0, r4
 8020988:	1e72      	subs	r2, r6, #1
 802098a:	4013      	ands	r3, r2
 802098c:	4098      	lsls	r0, r3
 802098e:	0003      	movs	r3, r0
 8020990:	1151      	asrs	r1, r2, #5
 8020992:	9802      	ldr	r0, [sp, #8]
 8020994:	0089      	lsls	r1, r1, #2
 8020996:	5809      	ldr	r1, [r1, r0]
 8020998:	4219      	tst	r1, r3
 802099a:	d002      	beq.n	80209a2 <__gethex+0x1c6>
 802099c:	42a2      	cmp	r2, r4
 802099e:	dc34      	bgt.n	8020a0a <__gethex+0x22e>
 80209a0:	2402      	movs	r4, #2
 80209a2:	0031      	movs	r1, r6
 80209a4:	0028      	movs	r0, r5
 80209a6:	f7ff feb1 	bl	802070c <rshift>
 80209aa:	19bf      	adds	r7, r7, r6
 80209ac:	9b01      	ldr	r3, [sp, #4]
 80209ae:	689b      	ldr	r3, [r3, #8]
 80209b0:	42bb      	cmp	r3, r7
 80209b2:	da42      	bge.n	8020a3a <__gethex+0x25e>
 80209b4:	0029      	movs	r1, r5
 80209b6:	9803      	ldr	r0, [sp, #12]
 80209b8:	f000 fb14 	bl	8020fe4 <_Bfree>
 80209bc:	2300      	movs	r3, #0
 80209be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80209c0:	26a3      	movs	r6, #163	@ 0xa3
 80209c2:	6013      	str	r3, [r2, #0]
 80209c4:	e794      	b.n	80208f0 <__gethex+0x114>
 80209c6:	3c01      	subs	r4, #1
 80209c8:	7823      	ldrb	r3, [r4, #0]
 80209ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80209cc:	d012      	beq.n	80209f4 <__gethex+0x218>
 80209ce:	9b04      	ldr	r3, [sp, #16]
 80209d0:	2b20      	cmp	r3, #32
 80209d2:	d104      	bne.n	80209de <__gethex+0x202>
 80209d4:	9b05      	ldr	r3, [sp, #20]
 80209d6:	c340      	stmia	r3!, {r6}
 80209d8:	2600      	movs	r6, #0
 80209da:	9305      	str	r3, [sp, #20]
 80209dc:	9604      	str	r6, [sp, #16]
 80209de:	7820      	ldrb	r0, [r4, #0]
 80209e0:	f7ff fee7 	bl	80207b2 <__hexdig_fun>
 80209e4:	230f      	movs	r3, #15
 80209e6:	4018      	ands	r0, r3
 80209e8:	9b04      	ldr	r3, [sp, #16]
 80209ea:	4098      	lsls	r0, r3
 80209ec:	3304      	adds	r3, #4
 80209ee:	4306      	orrs	r6, r0
 80209f0:	9304      	str	r3, [sp, #16]
 80209f2:	e7ac      	b.n	802094e <__gethex+0x172>
 80209f4:	9b00      	ldr	r3, [sp, #0]
 80209f6:	42a3      	cmp	r3, r4
 80209f8:	d8e9      	bhi.n	80209ce <__gethex+0x1f2>
 80209fa:	2201      	movs	r2, #1
 80209fc:	0020      	movs	r0, r4
 80209fe:	492b      	ldr	r1, [pc, #172]	@ (8020aac <__gethex+0x2d0>)
 8020a00:	f7fe fee2 	bl	801f7c8 <strncmp>
 8020a04:	2800      	cmp	r0, #0
 8020a06:	d1e2      	bne.n	80209ce <__gethex+0x1f2>
 8020a08:	e7a1      	b.n	802094e <__gethex+0x172>
 8020a0a:	0028      	movs	r0, r5
 8020a0c:	1eb1      	subs	r1, r6, #2
 8020a0e:	f000 ff4c 	bl	80218aa <__any_on>
 8020a12:	2800      	cmp	r0, #0
 8020a14:	d0c4      	beq.n	80209a0 <__gethex+0x1c4>
 8020a16:	2403      	movs	r4, #3
 8020a18:	e7c3      	b.n	80209a2 <__gethex+0x1c6>
 8020a1a:	9b00      	ldr	r3, [sp, #0]
 8020a1c:	2400      	movs	r4, #0
 8020a1e:	429e      	cmp	r6, r3
 8020a20:	dac4      	bge.n	80209ac <__gethex+0x1d0>
 8020a22:	1b9e      	subs	r6, r3, r6
 8020a24:	0029      	movs	r1, r5
 8020a26:	0032      	movs	r2, r6
 8020a28:	9803      	ldr	r0, [sp, #12]
 8020a2a:	f000 fd05 	bl	8021438 <__lshift>
 8020a2e:	0003      	movs	r3, r0
 8020a30:	3314      	adds	r3, #20
 8020a32:	0005      	movs	r5, r0
 8020a34:	1bbf      	subs	r7, r7, r6
 8020a36:	9302      	str	r3, [sp, #8]
 8020a38:	e7b8      	b.n	80209ac <__gethex+0x1d0>
 8020a3a:	9b01      	ldr	r3, [sp, #4]
 8020a3c:	685e      	ldr	r6, [r3, #4]
 8020a3e:	42be      	cmp	r6, r7
 8020a40:	dd6f      	ble.n	8020b22 <__gethex+0x346>
 8020a42:	9b00      	ldr	r3, [sp, #0]
 8020a44:	1bf6      	subs	r6, r6, r7
 8020a46:	42b3      	cmp	r3, r6
 8020a48:	dc36      	bgt.n	8020ab8 <__gethex+0x2dc>
 8020a4a:	9b01      	ldr	r3, [sp, #4]
 8020a4c:	68db      	ldr	r3, [r3, #12]
 8020a4e:	2b02      	cmp	r3, #2
 8020a50:	d024      	beq.n	8020a9c <__gethex+0x2c0>
 8020a52:	2b03      	cmp	r3, #3
 8020a54:	d026      	beq.n	8020aa4 <__gethex+0x2c8>
 8020a56:	2b01      	cmp	r3, #1
 8020a58:	d117      	bne.n	8020a8a <__gethex+0x2ae>
 8020a5a:	9b00      	ldr	r3, [sp, #0]
 8020a5c:	42b3      	cmp	r3, r6
 8020a5e:	d114      	bne.n	8020a8a <__gethex+0x2ae>
 8020a60:	2b01      	cmp	r3, #1
 8020a62:	d10b      	bne.n	8020a7c <__gethex+0x2a0>
 8020a64:	9b01      	ldr	r3, [sp, #4]
 8020a66:	9a07      	ldr	r2, [sp, #28]
 8020a68:	685b      	ldr	r3, [r3, #4]
 8020a6a:	2662      	movs	r6, #98	@ 0x62
 8020a6c:	6013      	str	r3, [r2, #0]
 8020a6e:	2301      	movs	r3, #1
 8020a70:	9a02      	ldr	r2, [sp, #8]
 8020a72:	612b      	str	r3, [r5, #16]
 8020a74:	6013      	str	r3, [r2, #0]
 8020a76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a78:	601d      	str	r5, [r3, #0]
 8020a7a:	e739      	b.n	80208f0 <__gethex+0x114>
 8020a7c:	9900      	ldr	r1, [sp, #0]
 8020a7e:	0028      	movs	r0, r5
 8020a80:	3901      	subs	r1, #1
 8020a82:	f000 ff12 	bl	80218aa <__any_on>
 8020a86:	2800      	cmp	r0, #0
 8020a88:	d1ec      	bne.n	8020a64 <__gethex+0x288>
 8020a8a:	0029      	movs	r1, r5
 8020a8c:	9803      	ldr	r0, [sp, #12]
 8020a8e:	f000 faa9 	bl	8020fe4 <_Bfree>
 8020a92:	2300      	movs	r3, #0
 8020a94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a96:	2650      	movs	r6, #80	@ 0x50
 8020a98:	6013      	str	r3, [r2, #0]
 8020a9a:	e729      	b.n	80208f0 <__gethex+0x114>
 8020a9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d1f3      	bne.n	8020a8a <__gethex+0x2ae>
 8020aa2:	e7df      	b.n	8020a64 <__gethex+0x288>
 8020aa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	d1dc      	bne.n	8020a64 <__gethex+0x288>
 8020aaa:	e7ee      	b.n	8020a8a <__gethex+0x2ae>
 8020aac:	08024e2c 	.word	0x08024e2c
 8020ab0:	08025039 	.word	0x08025039
 8020ab4:	0802504a 	.word	0x0802504a
 8020ab8:	1e77      	subs	r7, r6, #1
 8020aba:	2c00      	cmp	r4, #0
 8020abc:	d12f      	bne.n	8020b1e <__gethex+0x342>
 8020abe:	2f00      	cmp	r7, #0
 8020ac0:	d004      	beq.n	8020acc <__gethex+0x2f0>
 8020ac2:	0039      	movs	r1, r7
 8020ac4:	0028      	movs	r0, r5
 8020ac6:	f000 fef0 	bl	80218aa <__any_on>
 8020aca:	0004      	movs	r4, r0
 8020acc:	231f      	movs	r3, #31
 8020ace:	117a      	asrs	r2, r7, #5
 8020ad0:	401f      	ands	r7, r3
 8020ad2:	3b1e      	subs	r3, #30
 8020ad4:	40bb      	lsls	r3, r7
 8020ad6:	9902      	ldr	r1, [sp, #8]
 8020ad8:	0092      	lsls	r2, r2, #2
 8020ada:	5852      	ldr	r2, [r2, r1]
 8020adc:	421a      	tst	r2, r3
 8020ade:	d001      	beq.n	8020ae4 <__gethex+0x308>
 8020ae0:	2302      	movs	r3, #2
 8020ae2:	431c      	orrs	r4, r3
 8020ae4:	9b00      	ldr	r3, [sp, #0]
 8020ae6:	0031      	movs	r1, r6
 8020ae8:	1b9b      	subs	r3, r3, r6
 8020aea:	2602      	movs	r6, #2
 8020aec:	0028      	movs	r0, r5
 8020aee:	9300      	str	r3, [sp, #0]
 8020af0:	f7ff fe0c 	bl	802070c <rshift>
 8020af4:	9b01      	ldr	r3, [sp, #4]
 8020af6:	685f      	ldr	r7, [r3, #4]
 8020af8:	2c00      	cmp	r4, #0
 8020afa:	d03f      	beq.n	8020b7c <__gethex+0x3a0>
 8020afc:	9b01      	ldr	r3, [sp, #4]
 8020afe:	68db      	ldr	r3, [r3, #12]
 8020b00:	2b02      	cmp	r3, #2
 8020b02:	d010      	beq.n	8020b26 <__gethex+0x34a>
 8020b04:	2b03      	cmp	r3, #3
 8020b06:	d012      	beq.n	8020b2e <__gethex+0x352>
 8020b08:	2b01      	cmp	r3, #1
 8020b0a:	d106      	bne.n	8020b1a <__gethex+0x33e>
 8020b0c:	07a2      	lsls	r2, r4, #30
 8020b0e:	d504      	bpl.n	8020b1a <__gethex+0x33e>
 8020b10:	9a02      	ldr	r2, [sp, #8]
 8020b12:	6812      	ldr	r2, [r2, #0]
 8020b14:	4314      	orrs	r4, r2
 8020b16:	421c      	tst	r4, r3
 8020b18:	d10c      	bne.n	8020b34 <__gethex+0x358>
 8020b1a:	2310      	movs	r3, #16
 8020b1c:	e02d      	b.n	8020b7a <__gethex+0x39e>
 8020b1e:	2401      	movs	r4, #1
 8020b20:	e7d4      	b.n	8020acc <__gethex+0x2f0>
 8020b22:	2601      	movs	r6, #1
 8020b24:	e7e8      	b.n	8020af8 <__gethex+0x31c>
 8020b26:	2301      	movs	r3, #1
 8020b28:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020b2a:	1a9b      	subs	r3, r3, r2
 8020b2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b30:	2b00      	cmp	r3, #0
 8020b32:	d0f2      	beq.n	8020b1a <__gethex+0x33e>
 8020b34:	692b      	ldr	r3, [r5, #16]
 8020b36:	2000      	movs	r0, #0
 8020b38:	9302      	str	r3, [sp, #8]
 8020b3a:	009b      	lsls	r3, r3, #2
 8020b3c:	9304      	str	r3, [sp, #16]
 8020b3e:	002b      	movs	r3, r5
 8020b40:	9a04      	ldr	r2, [sp, #16]
 8020b42:	3314      	adds	r3, #20
 8020b44:	1899      	adds	r1, r3, r2
 8020b46:	681a      	ldr	r2, [r3, #0]
 8020b48:	1c54      	adds	r4, r2, #1
 8020b4a:	d01c      	beq.n	8020b86 <__gethex+0x3aa>
 8020b4c:	3201      	adds	r2, #1
 8020b4e:	601a      	str	r2, [r3, #0]
 8020b50:	002b      	movs	r3, r5
 8020b52:	3314      	adds	r3, #20
 8020b54:	2e02      	cmp	r6, #2
 8020b56:	d13f      	bne.n	8020bd8 <__gethex+0x3fc>
 8020b58:	9a01      	ldr	r2, [sp, #4]
 8020b5a:	9900      	ldr	r1, [sp, #0]
 8020b5c:	6812      	ldr	r2, [r2, #0]
 8020b5e:	3a01      	subs	r2, #1
 8020b60:	428a      	cmp	r2, r1
 8020b62:	d109      	bne.n	8020b78 <__gethex+0x39c>
 8020b64:	000a      	movs	r2, r1
 8020b66:	201f      	movs	r0, #31
 8020b68:	4010      	ands	r0, r2
 8020b6a:	2201      	movs	r2, #1
 8020b6c:	4082      	lsls	r2, r0
 8020b6e:	1149      	asrs	r1, r1, #5
 8020b70:	0089      	lsls	r1, r1, #2
 8020b72:	58cb      	ldr	r3, [r1, r3]
 8020b74:	4213      	tst	r3, r2
 8020b76:	d13d      	bne.n	8020bf4 <__gethex+0x418>
 8020b78:	2320      	movs	r3, #32
 8020b7a:	431e      	orrs	r6, r3
 8020b7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020b7e:	601d      	str	r5, [r3, #0]
 8020b80:	9b07      	ldr	r3, [sp, #28]
 8020b82:	601f      	str	r7, [r3, #0]
 8020b84:	e6b4      	b.n	80208f0 <__gethex+0x114>
 8020b86:	c301      	stmia	r3!, {r0}
 8020b88:	4299      	cmp	r1, r3
 8020b8a:	d8dc      	bhi.n	8020b46 <__gethex+0x36a>
 8020b8c:	68ab      	ldr	r3, [r5, #8]
 8020b8e:	9a02      	ldr	r2, [sp, #8]
 8020b90:	429a      	cmp	r2, r3
 8020b92:	db18      	blt.n	8020bc6 <__gethex+0x3ea>
 8020b94:	6869      	ldr	r1, [r5, #4]
 8020b96:	9803      	ldr	r0, [sp, #12]
 8020b98:	3101      	adds	r1, #1
 8020b9a:	f000 f9df 	bl	8020f5c <_Balloc>
 8020b9e:	1e04      	subs	r4, r0, #0
 8020ba0:	d104      	bne.n	8020bac <__gethex+0x3d0>
 8020ba2:	0022      	movs	r2, r4
 8020ba4:	2184      	movs	r1, #132	@ 0x84
 8020ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8020c1c <__gethex+0x440>)
 8020ba8:	481d      	ldr	r0, [pc, #116]	@ (8020c20 <__gethex+0x444>)
 8020baa:	e6c4      	b.n	8020936 <__gethex+0x15a>
 8020bac:	0029      	movs	r1, r5
 8020bae:	692a      	ldr	r2, [r5, #16]
 8020bb0:	310c      	adds	r1, #12
 8020bb2:	3202      	adds	r2, #2
 8020bb4:	0092      	lsls	r2, r2, #2
 8020bb6:	300c      	adds	r0, #12
 8020bb8:	f7fe fecc 	bl	801f954 <memcpy>
 8020bbc:	0029      	movs	r1, r5
 8020bbe:	9803      	ldr	r0, [sp, #12]
 8020bc0:	f000 fa10 	bl	8020fe4 <_Bfree>
 8020bc4:	0025      	movs	r5, r4
 8020bc6:	692b      	ldr	r3, [r5, #16]
 8020bc8:	1c5a      	adds	r2, r3, #1
 8020bca:	612a      	str	r2, [r5, #16]
 8020bcc:	2201      	movs	r2, #1
 8020bce:	3304      	adds	r3, #4
 8020bd0:	009b      	lsls	r3, r3, #2
 8020bd2:	18eb      	adds	r3, r5, r3
 8020bd4:	605a      	str	r2, [r3, #4]
 8020bd6:	e7bb      	b.n	8020b50 <__gethex+0x374>
 8020bd8:	692a      	ldr	r2, [r5, #16]
 8020bda:	9902      	ldr	r1, [sp, #8]
 8020bdc:	428a      	cmp	r2, r1
 8020bde:	dd0b      	ble.n	8020bf8 <__gethex+0x41c>
 8020be0:	2101      	movs	r1, #1
 8020be2:	0028      	movs	r0, r5
 8020be4:	f7ff fd92 	bl	802070c <rshift>
 8020be8:	9b01      	ldr	r3, [sp, #4]
 8020bea:	3701      	adds	r7, #1
 8020bec:	689b      	ldr	r3, [r3, #8]
 8020bee:	42bb      	cmp	r3, r7
 8020bf0:	da00      	bge.n	8020bf4 <__gethex+0x418>
 8020bf2:	e6df      	b.n	80209b4 <__gethex+0x1d8>
 8020bf4:	2601      	movs	r6, #1
 8020bf6:	e7bf      	b.n	8020b78 <__gethex+0x39c>
 8020bf8:	221f      	movs	r2, #31
 8020bfa:	9c00      	ldr	r4, [sp, #0]
 8020bfc:	9900      	ldr	r1, [sp, #0]
 8020bfe:	4014      	ands	r4, r2
 8020c00:	4211      	tst	r1, r2
 8020c02:	d0f7      	beq.n	8020bf4 <__gethex+0x418>
 8020c04:	9a04      	ldr	r2, [sp, #16]
 8020c06:	189b      	adds	r3, r3, r2
 8020c08:	3b04      	subs	r3, #4
 8020c0a:	6818      	ldr	r0, [r3, #0]
 8020c0c:	f000 fa9e 	bl	802114c <__hi0bits>
 8020c10:	2320      	movs	r3, #32
 8020c12:	1b1b      	subs	r3, r3, r4
 8020c14:	4298      	cmp	r0, r3
 8020c16:	dbe3      	blt.n	8020be0 <__gethex+0x404>
 8020c18:	e7ec      	b.n	8020bf4 <__gethex+0x418>
 8020c1a:	46c0      	nop			@ (mov r8, r8)
 8020c1c:	08025039 	.word	0x08025039
 8020c20:	0802504a 	.word	0x0802504a

08020c24 <L_shift>:
 8020c24:	2308      	movs	r3, #8
 8020c26:	b570      	push	{r4, r5, r6, lr}
 8020c28:	2520      	movs	r5, #32
 8020c2a:	1a9a      	subs	r2, r3, r2
 8020c2c:	0092      	lsls	r2, r2, #2
 8020c2e:	1aad      	subs	r5, r5, r2
 8020c30:	6843      	ldr	r3, [r0, #4]
 8020c32:	6804      	ldr	r4, [r0, #0]
 8020c34:	001e      	movs	r6, r3
 8020c36:	40ae      	lsls	r6, r5
 8020c38:	40d3      	lsrs	r3, r2
 8020c3a:	4334      	orrs	r4, r6
 8020c3c:	6004      	str	r4, [r0, #0]
 8020c3e:	6043      	str	r3, [r0, #4]
 8020c40:	3004      	adds	r0, #4
 8020c42:	4288      	cmp	r0, r1
 8020c44:	d3f4      	bcc.n	8020c30 <L_shift+0xc>
 8020c46:	bd70      	pop	{r4, r5, r6, pc}

08020c48 <__match>:
 8020c48:	b530      	push	{r4, r5, lr}
 8020c4a:	6803      	ldr	r3, [r0, #0]
 8020c4c:	780c      	ldrb	r4, [r1, #0]
 8020c4e:	3301      	adds	r3, #1
 8020c50:	2c00      	cmp	r4, #0
 8020c52:	d102      	bne.n	8020c5a <__match+0x12>
 8020c54:	6003      	str	r3, [r0, #0]
 8020c56:	2001      	movs	r0, #1
 8020c58:	bd30      	pop	{r4, r5, pc}
 8020c5a:	781a      	ldrb	r2, [r3, #0]
 8020c5c:	0015      	movs	r5, r2
 8020c5e:	3d41      	subs	r5, #65	@ 0x41
 8020c60:	2d19      	cmp	r5, #25
 8020c62:	d800      	bhi.n	8020c66 <__match+0x1e>
 8020c64:	3220      	adds	r2, #32
 8020c66:	3101      	adds	r1, #1
 8020c68:	42a2      	cmp	r2, r4
 8020c6a:	d0ef      	beq.n	8020c4c <__match+0x4>
 8020c6c:	2000      	movs	r0, #0
 8020c6e:	e7f3      	b.n	8020c58 <__match+0x10>

08020c70 <__hexnan>:
 8020c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c72:	680b      	ldr	r3, [r1, #0]
 8020c74:	b08b      	sub	sp, #44	@ 0x2c
 8020c76:	9201      	str	r2, [sp, #4]
 8020c78:	9901      	ldr	r1, [sp, #4]
 8020c7a:	115a      	asrs	r2, r3, #5
 8020c7c:	0092      	lsls	r2, r2, #2
 8020c7e:	188a      	adds	r2, r1, r2
 8020c80:	9202      	str	r2, [sp, #8]
 8020c82:	0019      	movs	r1, r3
 8020c84:	221f      	movs	r2, #31
 8020c86:	4011      	ands	r1, r2
 8020c88:	9008      	str	r0, [sp, #32]
 8020c8a:	9106      	str	r1, [sp, #24]
 8020c8c:	4213      	tst	r3, r2
 8020c8e:	d002      	beq.n	8020c96 <__hexnan+0x26>
 8020c90:	9b02      	ldr	r3, [sp, #8]
 8020c92:	3304      	adds	r3, #4
 8020c94:	9302      	str	r3, [sp, #8]
 8020c96:	9b02      	ldr	r3, [sp, #8]
 8020c98:	2500      	movs	r5, #0
 8020c9a:	1f1f      	subs	r7, r3, #4
 8020c9c:	003e      	movs	r6, r7
 8020c9e:	003c      	movs	r4, r7
 8020ca0:	9b08      	ldr	r3, [sp, #32]
 8020ca2:	603d      	str	r5, [r7, #0]
 8020ca4:	681b      	ldr	r3, [r3, #0]
 8020ca6:	9507      	str	r5, [sp, #28]
 8020ca8:	9305      	str	r3, [sp, #20]
 8020caa:	9503      	str	r5, [sp, #12]
 8020cac:	9b05      	ldr	r3, [sp, #20]
 8020cae:	3301      	adds	r3, #1
 8020cb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cb2:	9b05      	ldr	r3, [sp, #20]
 8020cb4:	785b      	ldrb	r3, [r3, #1]
 8020cb6:	9304      	str	r3, [sp, #16]
 8020cb8:	2b00      	cmp	r3, #0
 8020cba:	d028      	beq.n	8020d0e <__hexnan+0x9e>
 8020cbc:	9804      	ldr	r0, [sp, #16]
 8020cbe:	f7ff fd78 	bl	80207b2 <__hexdig_fun>
 8020cc2:	2800      	cmp	r0, #0
 8020cc4:	d155      	bne.n	8020d72 <__hexnan+0x102>
 8020cc6:	9b04      	ldr	r3, [sp, #16]
 8020cc8:	2b20      	cmp	r3, #32
 8020cca:	d819      	bhi.n	8020d00 <__hexnan+0x90>
 8020ccc:	9b03      	ldr	r3, [sp, #12]
 8020cce:	9a07      	ldr	r2, [sp, #28]
 8020cd0:	4293      	cmp	r3, r2
 8020cd2:	dd12      	ble.n	8020cfa <__hexnan+0x8a>
 8020cd4:	42b4      	cmp	r4, r6
 8020cd6:	d206      	bcs.n	8020ce6 <__hexnan+0x76>
 8020cd8:	2d07      	cmp	r5, #7
 8020cda:	dc04      	bgt.n	8020ce6 <__hexnan+0x76>
 8020cdc:	002a      	movs	r2, r5
 8020cde:	0031      	movs	r1, r6
 8020ce0:	0020      	movs	r0, r4
 8020ce2:	f7ff ff9f 	bl	8020c24 <L_shift>
 8020ce6:	9b01      	ldr	r3, [sp, #4]
 8020ce8:	2508      	movs	r5, #8
 8020cea:	429c      	cmp	r4, r3
 8020cec:	d905      	bls.n	8020cfa <__hexnan+0x8a>
 8020cee:	1f26      	subs	r6, r4, #4
 8020cf0:	2500      	movs	r5, #0
 8020cf2:	0034      	movs	r4, r6
 8020cf4:	9b03      	ldr	r3, [sp, #12]
 8020cf6:	6035      	str	r5, [r6, #0]
 8020cf8:	9307      	str	r3, [sp, #28]
 8020cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cfc:	9305      	str	r3, [sp, #20]
 8020cfe:	e7d5      	b.n	8020cac <__hexnan+0x3c>
 8020d00:	9b04      	ldr	r3, [sp, #16]
 8020d02:	2b29      	cmp	r3, #41	@ 0x29
 8020d04:	d15a      	bne.n	8020dbc <__hexnan+0x14c>
 8020d06:	9b05      	ldr	r3, [sp, #20]
 8020d08:	9a08      	ldr	r2, [sp, #32]
 8020d0a:	3302      	adds	r3, #2
 8020d0c:	6013      	str	r3, [r2, #0]
 8020d0e:	9b03      	ldr	r3, [sp, #12]
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	d053      	beq.n	8020dbc <__hexnan+0x14c>
 8020d14:	42b4      	cmp	r4, r6
 8020d16:	d206      	bcs.n	8020d26 <__hexnan+0xb6>
 8020d18:	2d07      	cmp	r5, #7
 8020d1a:	dc04      	bgt.n	8020d26 <__hexnan+0xb6>
 8020d1c:	002a      	movs	r2, r5
 8020d1e:	0031      	movs	r1, r6
 8020d20:	0020      	movs	r0, r4
 8020d22:	f7ff ff7f 	bl	8020c24 <L_shift>
 8020d26:	9b01      	ldr	r3, [sp, #4]
 8020d28:	429c      	cmp	r4, r3
 8020d2a:	d936      	bls.n	8020d9a <__hexnan+0x12a>
 8020d2c:	001a      	movs	r2, r3
 8020d2e:	0023      	movs	r3, r4
 8020d30:	cb02      	ldmia	r3!, {r1}
 8020d32:	c202      	stmia	r2!, {r1}
 8020d34:	429f      	cmp	r7, r3
 8020d36:	d2fb      	bcs.n	8020d30 <__hexnan+0xc0>
 8020d38:	9b02      	ldr	r3, [sp, #8]
 8020d3a:	1c61      	adds	r1, r4, #1
 8020d3c:	1eda      	subs	r2, r3, #3
 8020d3e:	2304      	movs	r3, #4
 8020d40:	4291      	cmp	r1, r2
 8020d42:	d805      	bhi.n	8020d50 <__hexnan+0xe0>
 8020d44:	9b02      	ldr	r3, [sp, #8]
 8020d46:	3b04      	subs	r3, #4
 8020d48:	1b1b      	subs	r3, r3, r4
 8020d4a:	089b      	lsrs	r3, r3, #2
 8020d4c:	3301      	adds	r3, #1
 8020d4e:	009b      	lsls	r3, r3, #2
 8020d50:	9a01      	ldr	r2, [sp, #4]
 8020d52:	18d3      	adds	r3, r2, r3
 8020d54:	2200      	movs	r2, #0
 8020d56:	c304      	stmia	r3!, {r2}
 8020d58:	429f      	cmp	r7, r3
 8020d5a:	d2fc      	bcs.n	8020d56 <__hexnan+0xe6>
 8020d5c:	683b      	ldr	r3, [r7, #0]
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d104      	bne.n	8020d6c <__hexnan+0xfc>
 8020d62:	9b01      	ldr	r3, [sp, #4]
 8020d64:	429f      	cmp	r7, r3
 8020d66:	d127      	bne.n	8020db8 <__hexnan+0x148>
 8020d68:	2301      	movs	r3, #1
 8020d6a:	603b      	str	r3, [r7, #0]
 8020d6c:	2005      	movs	r0, #5
 8020d6e:	b00b      	add	sp, #44	@ 0x2c
 8020d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d72:	9b03      	ldr	r3, [sp, #12]
 8020d74:	3501      	adds	r5, #1
 8020d76:	3301      	adds	r3, #1
 8020d78:	9303      	str	r3, [sp, #12]
 8020d7a:	2d08      	cmp	r5, #8
 8020d7c:	dd06      	ble.n	8020d8c <__hexnan+0x11c>
 8020d7e:	9b01      	ldr	r3, [sp, #4]
 8020d80:	429c      	cmp	r4, r3
 8020d82:	d9ba      	bls.n	8020cfa <__hexnan+0x8a>
 8020d84:	2300      	movs	r3, #0
 8020d86:	2501      	movs	r5, #1
 8020d88:	3c04      	subs	r4, #4
 8020d8a:	6023      	str	r3, [r4, #0]
 8020d8c:	220f      	movs	r2, #15
 8020d8e:	6823      	ldr	r3, [r4, #0]
 8020d90:	4010      	ands	r0, r2
 8020d92:	011b      	lsls	r3, r3, #4
 8020d94:	4303      	orrs	r3, r0
 8020d96:	6023      	str	r3, [r4, #0]
 8020d98:	e7af      	b.n	8020cfa <__hexnan+0x8a>
 8020d9a:	9b06      	ldr	r3, [sp, #24]
 8020d9c:	2b00      	cmp	r3, #0
 8020d9e:	d0dd      	beq.n	8020d5c <__hexnan+0xec>
 8020da0:	2320      	movs	r3, #32
 8020da2:	9a06      	ldr	r2, [sp, #24]
 8020da4:	9902      	ldr	r1, [sp, #8]
 8020da6:	1a9b      	subs	r3, r3, r2
 8020da8:	2201      	movs	r2, #1
 8020daa:	4252      	negs	r2, r2
 8020dac:	40da      	lsrs	r2, r3
 8020dae:	3904      	subs	r1, #4
 8020db0:	680b      	ldr	r3, [r1, #0]
 8020db2:	4013      	ands	r3, r2
 8020db4:	600b      	str	r3, [r1, #0]
 8020db6:	e7d1      	b.n	8020d5c <__hexnan+0xec>
 8020db8:	3f04      	subs	r7, #4
 8020dba:	e7cf      	b.n	8020d5c <__hexnan+0xec>
 8020dbc:	2004      	movs	r0, #4
 8020dbe:	e7d6      	b.n	8020d6e <__hexnan+0xfe>

08020dc0 <malloc>:
 8020dc0:	b510      	push	{r4, lr}
 8020dc2:	4b03      	ldr	r3, [pc, #12]	@ (8020dd0 <malloc+0x10>)
 8020dc4:	0001      	movs	r1, r0
 8020dc6:	6818      	ldr	r0, [r3, #0]
 8020dc8:	f000 f826 	bl	8020e18 <_malloc_r>
 8020dcc:	bd10      	pop	{r4, pc}
 8020dce:	46c0      	nop			@ (mov r8, r8)
 8020dd0:	200003c8 	.word	0x200003c8

08020dd4 <sbrk_aligned>:
 8020dd4:	b570      	push	{r4, r5, r6, lr}
 8020dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8020e14 <sbrk_aligned+0x40>)
 8020dd8:	000d      	movs	r5, r1
 8020dda:	6831      	ldr	r1, [r6, #0]
 8020ddc:	0004      	movs	r4, r0
 8020dde:	2900      	cmp	r1, #0
 8020de0:	d102      	bne.n	8020de8 <sbrk_aligned+0x14>
 8020de2:	f001 f989 	bl	80220f8 <_sbrk_r>
 8020de6:	6030      	str	r0, [r6, #0]
 8020de8:	0029      	movs	r1, r5
 8020dea:	0020      	movs	r0, r4
 8020dec:	f001 f984 	bl	80220f8 <_sbrk_r>
 8020df0:	1c43      	adds	r3, r0, #1
 8020df2:	d103      	bne.n	8020dfc <sbrk_aligned+0x28>
 8020df4:	2501      	movs	r5, #1
 8020df6:	426d      	negs	r5, r5
 8020df8:	0028      	movs	r0, r5
 8020dfa:	bd70      	pop	{r4, r5, r6, pc}
 8020dfc:	2303      	movs	r3, #3
 8020dfe:	1cc5      	adds	r5, r0, #3
 8020e00:	439d      	bics	r5, r3
 8020e02:	42a8      	cmp	r0, r5
 8020e04:	d0f8      	beq.n	8020df8 <sbrk_aligned+0x24>
 8020e06:	1a29      	subs	r1, r5, r0
 8020e08:	0020      	movs	r0, r4
 8020e0a:	f001 f975 	bl	80220f8 <_sbrk_r>
 8020e0e:	3001      	adds	r0, #1
 8020e10:	d1f2      	bne.n	8020df8 <sbrk_aligned+0x24>
 8020e12:	e7ef      	b.n	8020df4 <sbrk_aligned+0x20>
 8020e14:	200038f8 	.word	0x200038f8

08020e18 <_malloc_r>:
 8020e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020e1a:	2203      	movs	r2, #3
 8020e1c:	1ccb      	adds	r3, r1, #3
 8020e1e:	4393      	bics	r3, r2
 8020e20:	3308      	adds	r3, #8
 8020e22:	0005      	movs	r5, r0
 8020e24:	001f      	movs	r7, r3
 8020e26:	2b0c      	cmp	r3, #12
 8020e28:	d234      	bcs.n	8020e94 <_malloc_r+0x7c>
 8020e2a:	270c      	movs	r7, #12
 8020e2c:	42b9      	cmp	r1, r7
 8020e2e:	d833      	bhi.n	8020e98 <_malloc_r+0x80>
 8020e30:	0028      	movs	r0, r5
 8020e32:	f000 f883 	bl	8020f3c <__malloc_lock>
 8020e36:	4e37      	ldr	r6, [pc, #220]	@ (8020f14 <_malloc_r+0xfc>)
 8020e38:	6833      	ldr	r3, [r6, #0]
 8020e3a:	001c      	movs	r4, r3
 8020e3c:	2c00      	cmp	r4, #0
 8020e3e:	d12f      	bne.n	8020ea0 <_malloc_r+0x88>
 8020e40:	0039      	movs	r1, r7
 8020e42:	0028      	movs	r0, r5
 8020e44:	f7ff ffc6 	bl	8020dd4 <sbrk_aligned>
 8020e48:	0004      	movs	r4, r0
 8020e4a:	1c43      	adds	r3, r0, #1
 8020e4c:	d15f      	bne.n	8020f0e <_malloc_r+0xf6>
 8020e4e:	6834      	ldr	r4, [r6, #0]
 8020e50:	9400      	str	r4, [sp, #0]
 8020e52:	9b00      	ldr	r3, [sp, #0]
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	d14a      	bne.n	8020eee <_malloc_r+0xd6>
 8020e58:	2c00      	cmp	r4, #0
 8020e5a:	d052      	beq.n	8020f02 <_malloc_r+0xea>
 8020e5c:	6823      	ldr	r3, [r4, #0]
 8020e5e:	0028      	movs	r0, r5
 8020e60:	18e3      	adds	r3, r4, r3
 8020e62:	9900      	ldr	r1, [sp, #0]
 8020e64:	9301      	str	r3, [sp, #4]
 8020e66:	f001 f947 	bl	80220f8 <_sbrk_r>
 8020e6a:	9b01      	ldr	r3, [sp, #4]
 8020e6c:	4283      	cmp	r3, r0
 8020e6e:	d148      	bne.n	8020f02 <_malloc_r+0xea>
 8020e70:	6823      	ldr	r3, [r4, #0]
 8020e72:	0028      	movs	r0, r5
 8020e74:	1aff      	subs	r7, r7, r3
 8020e76:	0039      	movs	r1, r7
 8020e78:	f7ff ffac 	bl	8020dd4 <sbrk_aligned>
 8020e7c:	3001      	adds	r0, #1
 8020e7e:	d040      	beq.n	8020f02 <_malloc_r+0xea>
 8020e80:	6823      	ldr	r3, [r4, #0]
 8020e82:	19db      	adds	r3, r3, r7
 8020e84:	6023      	str	r3, [r4, #0]
 8020e86:	6833      	ldr	r3, [r6, #0]
 8020e88:	685a      	ldr	r2, [r3, #4]
 8020e8a:	2a00      	cmp	r2, #0
 8020e8c:	d133      	bne.n	8020ef6 <_malloc_r+0xde>
 8020e8e:	9b00      	ldr	r3, [sp, #0]
 8020e90:	6033      	str	r3, [r6, #0]
 8020e92:	e019      	b.n	8020ec8 <_malloc_r+0xb0>
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	dac9      	bge.n	8020e2c <_malloc_r+0x14>
 8020e98:	230c      	movs	r3, #12
 8020e9a:	602b      	str	r3, [r5, #0]
 8020e9c:	2000      	movs	r0, #0
 8020e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020ea0:	6821      	ldr	r1, [r4, #0]
 8020ea2:	1bc9      	subs	r1, r1, r7
 8020ea4:	d420      	bmi.n	8020ee8 <_malloc_r+0xd0>
 8020ea6:	290b      	cmp	r1, #11
 8020ea8:	d90a      	bls.n	8020ec0 <_malloc_r+0xa8>
 8020eaa:	19e2      	adds	r2, r4, r7
 8020eac:	6027      	str	r7, [r4, #0]
 8020eae:	42a3      	cmp	r3, r4
 8020eb0:	d104      	bne.n	8020ebc <_malloc_r+0xa4>
 8020eb2:	6032      	str	r2, [r6, #0]
 8020eb4:	6863      	ldr	r3, [r4, #4]
 8020eb6:	6011      	str	r1, [r2, #0]
 8020eb8:	6053      	str	r3, [r2, #4]
 8020eba:	e005      	b.n	8020ec8 <_malloc_r+0xb0>
 8020ebc:	605a      	str	r2, [r3, #4]
 8020ebe:	e7f9      	b.n	8020eb4 <_malloc_r+0x9c>
 8020ec0:	6862      	ldr	r2, [r4, #4]
 8020ec2:	42a3      	cmp	r3, r4
 8020ec4:	d10e      	bne.n	8020ee4 <_malloc_r+0xcc>
 8020ec6:	6032      	str	r2, [r6, #0]
 8020ec8:	0028      	movs	r0, r5
 8020eca:	f000 f83f 	bl	8020f4c <__malloc_unlock>
 8020ece:	0020      	movs	r0, r4
 8020ed0:	2207      	movs	r2, #7
 8020ed2:	300b      	adds	r0, #11
 8020ed4:	1d23      	adds	r3, r4, #4
 8020ed6:	4390      	bics	r0, r2
 8020ed8:	1ac2      	subs	r2, r0, r3
 8020eda:	4298      	cmp	r0, r3
 8020edc:	d0df      	beq.n	8020e9e <_malloc_r+0x86>
 8020ede:	1a1b      	subs	r3, r3, r0
 8020ee0:	50a3      	str	r3, [r4, r2]
 8020ee2:	e7dc      	b.n	8020e9e <_malloc_r+0x86>
 8020ee4:	605a      	str	r2, [r3, #4]
 8020ee6:	e7ef      	b.n	8020ec8 <_malloc_r+0xb0>
 8020ee8:	0023      	movs	r3, r4
 8020eea:	6864      	ldr	r4, [r4, #4]
 8020eec:	e7a6      	b.n	8020e3c <_malloc_r+0x24>
 8020eee:	9c00      	ldr	r4, [sp, #0]
 8020ef0:	6863      	ldr	r3, [r4, #4]
 8020ef2:	9300      	str	r3, [sp, #0]
 8020ef4:	e7ad      	b.n	8020e52 <_malloc_r+0x3a>
 8020ef6:	001a      	movs	r2, r3
 8020ef8:	685b      	ldr	r3, [r3, #4]
 8020efa:	42a3      	cmp	r3, r4
 8020efc:	d1fb      	bne.n	8020ef6 <_malloc_r+0xde>
 8020efe:	2300      	movs	r3, #0
 8020f00:	e7da      	b.n	8020eb8 <_malloc_r+0xa0>
 8020f02:	230c      	movs	r3, #12
 8020f04:	0028      	movs	r0, r5
 8020f06:	602b      	str	r3, [r5, #0]
 8020f08:	f000 f820 	bl	8020f4c <__malloc_unlock>
 8020f0c:	e7c6      	b.n	8020e9c <_malloc_r+0x84>
 8020f0e:	6007      	str	r7, [r0, #0]
 8020f10:	e7da      	b.n	8020ec8 <_malloc_r+0xb0>
 8020f12:	46c0      	nop			@ (mov r8, r8)
 8020f14:	200038fc 	.word	0x200038fc

08020f18 <__ascii_mbtowc>:
 8020f18:	b082      	sub	sp, #8
 8020f1a:	2900      	cmp	r1, #0
 8020f1c:	d100      	bne.n	8020f20 <__ascii_mbtowc+0x8>
 8020f1e:	a901      	add	r1, sp, #4
 8020f20:	1e10      	subs	r0, r2, #0
 8020f22:	d006      	beq.n	8020f32 <__ascii_mbtowc+0x1a>
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d006      	beq.n	8020f36 <__ascii_mbtowc+0x1e>
 8020f28:	7813      	ldrb	r3, [r2, #0]
 8020f2a:	600b      	str	r3, [r1, #0]
 8020f2c:	7810      	ldrb	r0, [r2, #0]
 8020f2e:	1e43      	subs	r3, r0, #1
 8020f30:	4198      	sbcs	r0, r3
 8020f32:	b002      	add	sp, #8
 8020f34:	4770      	bx	lr
 8020f36:	2002      	movs	r0, #2
 8020f38:	4240      	negs	r0, r0
 8020f3a:	e7fa      	b.n	8020f32 <__ascii_mbtowc+0x1a>

08020f3c <__malloc_lock>:
 8020f3c:	b510      	push	{r4, lr}
 8020f3e:	4802      	ldr	r0, [pc, #8]	@ (8020f48 <__malloc_lock+0xc>)
 8020f40:	f7fe fcfb 	bl	801f93a <__retarget_lock_acquire_recursive>
 8020f44:	bd10      	pop	{r4, pc}
 8020f46:	46c0      	nop			@ (mov r8, r8)
 8020f48:	200038f4 	.word	0x200038f4

08020f4c <__malloc_unlock>:
 8020f4c:	b510      	push	{r4, lr}
 8020f4e:	4802      	ldr	r0, [pc, #8]	@ (8020f58 <__malloc_unlock+0xc>)
 8020f50:	f7fe fcf4 	bl	801f93c <__retarget_lock_release_recursive>
 8020f54:	bd10      	pop	{r4, pc}
 8020f56:	46c0      	nop			@ (mov r8, r8)
 8020f58:	200038f4 	.word	0x200038f4

08020f5c <_Balloc>:
 8020f5c:	b570      	push	{r4, r5, r6, lr}
 8020f5e:	69c5      	ldr	r5, [r0, #28]
 8020f60:	0006      	movs	r6, r0
 8020f62:	000c      	movs	r4, r1
 8020f64:	2d00      	cmp	r5, #0
 8020f66:	d10e      	bne.n	8020f86 <_Balloc+0x2a>
 8020f68:	2010      	movs	r0, #16
 8020f6a:	f7ff ff29 	bl	8020dc0 <malloc>
 8020f6e:	1e02      	subs	r2, r0, #0
 8020f70:	61f0      	str	r0, [r6, #28]
 8020f72:	d104      	bne.n	8020f7e <_Balloc+0x22>
 8020f74:	216b      	movs	r1, #107	@ 0x6b
 8020f76:	4b19      	ldr	r3, [pc, #100]	@ (8020fdc <_Balloc+0x80>)
 8020f78:	4819      	ldr	r0, [pc, #100]	@ (8020fe0 <_Balloc+0x84>)
 8020f7a:	f001 f8cf 	bl	802211c <__assert_func>
 8020f7e:	6045      	str	r5, [r0, #4]
 8020f80:	6085      	str	r5, [r0, #8]
 8020f82:	6005      	str	r5, [r0, #0]
 8020f84:	60c5      	str	r5, [r0, #12]
 8020f86:	69f5      	ldr	r5, [r6, #28]
 8020f88:	68eb      	ldr	r3, [r5, #12]
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d013      	beq.n	8020fb6 <_Balloc+0x5a>
 8020f8e:	69f3      	ldr	r3, [r6, #28]
 8020f90:	00a2      	lsls	r2, r4, #2
 8020f92:	68db      	ldr	r3, [r3, #12]
 8020f94:	189b      	adds	r3, r3, r2
 8020f96:	6818      	ldr	r0, [r3, #0]
 8020f98:	2800      	cmp	r0, #0
 8020f9a:	d118      	bne.n	8020fce <_Balloc+0x72>
 8020f9c:	2101      	movs	r1, #1
 8020f9e:	000d      	movs	r5, r1
 8020fa0:	40a5      	lsls	r5, r4
 8020fa2:	1d6a      	adds	r2, r5, #5
 8020fa4:	0030      	movs	r0, r6
 8020fa6:	0092      	lsls	r2, r2, #2
 8020fa8:	f001 f8d6 	bl	8022158 <_calloc_r>
 8020fac:	2800      	cmp	r0, #0
 8020fae:	d00c      	beq.n	8020fca <_Balloc+0x6e>
 8020fb0:	6044      	str	r4, [r0, #4]
 8020fb2:	6085      	str	r5, [r0, #8]
 8020fb4:	e00d      	b.n	8020fd2 <_Balloc+0x76>
 8020fb6:	2221      	movs	r2, #33	@ 0x21
 8020fb8:	2104      	movs	r1, #4
 8020fba:	0030      	movs	r0, r6
 8020fbc:	f001 f8cc 	bl	8022158 <_calloc_r>
 8020fc0:	69f3      	ldr	r3, [r6, #28]
 8020fc2:	60e8      	str	r0, [r5, #12]
 8020fc4:	68db      	ldr	r3, [r3, #12]
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	d1e1      	bne.n	8020f8e <_Balloc+0x32>
 8020fca:	2000      	movs	r0, #0
 8020fcc:	bd70      	pop	{r4, r5, r6, pc}
 8020fce:	6802      	ldr	r2, [r0, #0]
 8020fd0:	601a      	str	r2, [r3, #0]
 8020fd2:	2300      	movs	r3, #0
 8020fd4:	6103      	str	r3, [r0, #16]
 8020fd6:	60c3      	str	r3, [r0, #12]
 8020fd8:	e7f8      	b.n	8020fcc <_Balloc+0x70>
 8020fda:	46c0      	nop			@ (mov r8, r8)
 8020fdc:	08024fca 	.word	0x08024fca
 8020fe0:	080250aa 	.word	0x080250aa

08020fe4 <_Bfree>:
 8020fe4:	b570      	push	{r4, r5, r6, lr}
 8020fe6:	69c6      	ldr	r6, [r0, #28]
 8020fe8:	0005      	movs	r5, r0
 8020fea:	000c      	movs	r4, r1
 8020fec:	2e00      	cmp	r6, #0
 8020fee:	d10e      	bne.n	802100e <_Bfree+0x2a>
 8020ff0:	2010      	movs	r0, #16
 8020ff2:	f7ff fee5 	bl	8020dc0 <malloc>
 8020ff6:	1e02      	subs	r2, r0, #0
 8020ff8:	61e8      	str	r0, [r5, #28]
 8020ffa:	d104      	bne.n	8021006 <_Bfree+0x22>
 8020ffc:	218f      	movs	r1, #143	@ 0x8f
 8020ffe:	4b09      	ldr	r3, [pc, #36]	@ (8021024 <_Bfree+0x40>)
 8021000:	4809      	ldr	r0, [pc, #36]	@ (8021028 <_Bfree+0x44>)
 8021002:	f001 f88b 	bl	802211c <__assert_func>
 8021006:	6046      	str	r6, [r0, #4]
 8021008:	6086      	str	r6, [r0, #8]
 802100a:	6006      	str	r6, [r0, #0]
 802100c:	60c6      	str	r6, [r0, #12]
 802100e:	2c00      	cmp	r4, #0
 8021010:	d007      	beq.n	8021022 <_Bfree+0x3e>
 8021012:	69eb      	ldr	r3, [r5, #28]
 8021014:	6862      	ldr	r2, [r4, #4]
 8021016:	68db      	ldr	r3, [r3, #12]
 8021018:	0092      	lsls	r2, r2, #2
 802101a:	189b      	adds	r3, r3, r2
 802101c:	681a      	ldr	r2, [r3, #0]
 802101e:	6022      	str	r2, [r4, #0]
 8021020:	601c      	str	r4, [r3, #0]
 8021022:	bd70      	pop	{r4, r5, r6, pc}
 8021024:	08024fca 	.word	0x08024fca
 8021028:	080250aa 	.word	0x080250aa

0802102c <__multadd>:
 802102c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802102e:	000f      	movs	r7, r1
 8021030:	9001      	str	r0, [sp, #4]
 8021032:	000c      	movs	r4, r1
 8021034:	001e      	movs	r6, r3
 8021036:	2000      	movs	r0, #0
 8021038:	690d      	ldr	r5, [r1, #16]
 802103a:	3714      	adds	r7, #20
 802103c:	683b      	ldr	r3, [r7, #0]
 802103e:	3001      	adds	r0, #1
 8021040:	b299      	uxth	r1, r3
 8021042:	4351      	muls	r1, r2
 8021044:	0c1b      	lsrs	r3, r3, #16
 8021046:	4353      	muls	r3, r2
 8021048:	1989      	adds	r1, r1, r6
 802104a:	0c0e      	lsrs	r6, r1, #16
 802104c:	199b      	adds	r3, r3, r6
 802104e:	0c1e      	lsrs	r6, r3, #16
 8021050:	b289      	uxth	r1, r1
 8021052:	041b      	lsls	r3, r3, #16
 8021054:	185b      	adds	r3, r3, r1
 8021056:	c708      	stmia	r7!, {r3}
 8021058:	4285      	cmp	r5, r0
 802105a:	dcef      	bgt.n	802103c <__multadd+0x10>
 802105c:	2e00      	cmp	r6, #0
 802105e:	d022      	beq.n	80210a6 <__multadd+0x7a>
 8021060:	68a3      	ldr	r3, [r4, #8]
 8021062:	42ab      	cmp	r3, r5
 8021064:	dc19      	bgt.n	802109a <__multadd+0x6e>
 8021066:	6861      	ldr	r1, [r4, #4]
 8021068:	9801      	ldr	r0, [sp, #4]
 802106a:	3101      	adds	r1, #1
 802106c:	f7ff ff76 	bl	8020f5c <_Balloc>
 8021070:	1e07      	subs	r7, r0, #0
 8021072:	d105      	bne.n	8021080 <__multadd+0x54>
 8021074:	003a      	movs	r2, r7
 8021076:	21ba      	movs	r1, #186	@ 0xba
 8021078:	4b0c      	ldr	r3, [pc, #48]	@ (80210ac <__multadd+0x80>)
 802107a:	480d      	ldr	r0, [pc, #52]	@ (80210b0 <__multadd+0x84>)
 802107c:	f001 f84e 	bl	802211c <__assert_func>
 8021080:	0021      	movs	r1, r4
 8021082:	6922      	ldr	r2, [r4, #16]
 8021084:	310c      	adds	r1, #12
 8021086:	3202      	adds	r2, #2
 8021088:	0092      	lsls	r2, r2, #2
 802108a:	300c      	adds	r0, #12
 802108c:	f7fe fc62 	bl	801f954 <memcpy>
 8021090:	0021      	movs	r1, r4
 8021092:	9801      	ldr	r0, [sp, #4]
 8021094:	f7ff ffa6 	bl	8020fe4 <_Bfree>
 8021098:	003c      	movs	r4, r7
 802109a:	1d2b      	adds	r3, r5, #4
 802109c:	009b      	lsls	r3, r3, #2
 802109e:	18e3      	adds	r3, r4, r3
 80210a0:	3501      	adds	r5, #1
 80210a2:	605e      	str	r6, [r3, #4]
 80210a4:	6125      	str	r5, [r4, #16]
 80210a6:	0020      	movs	r0, r4
 80210a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80210aa:	46c0      	nop			@ (mov r8, r8)
 80210ac:	08025039 	.word	0x08025039
 80210b0:	080250aa 	.word	0x080250aa

080210b4 <__s2b>:
 80210b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80210b6:	0007      	movs	r7, r0
 80210b8:	0018      	movs	r0, r3
 80210ba:	000c      	movs	r4, r1
 80210bc:	3008      	adds	r0, #8
 80210be:	2109      	movs	r1, #9
 80210c0:	9301      	str	r3, [sp, #4]
 80210c2:	0015      	movs	r5, r2
 80210c4:	f7df f8f8 	bl	80002b8 <__divsi3>
 80210c8:	2301      	movs	r3, #1
 80210ca:	2100      	movs	r1, #0
 80210cc:	4283      	cmp	r3, r0
 80210ce:	db0a      	blt.n	80210e6 <__s2b+0x32>
 80210d0:	0038      	movs	r0, r7
 80210d2:	f7ff ff43 	bl	8020f5c <_Balloc>
 80210d6:	1e01      	subs	r1, r0, #0
 80210d8:	d108      	bne.n	80210ec <__s2b+0x38>
 80210da:	000a      	movs	r2, r1
 80210dc:	4b19      	ldr	r3, [pc, #100]	@ (8021144 <__s2b+0x90>)
 80210de:	481a      	ldr	r0, [pc, #104]	@ (8021148 <__s2b+0x94>)
 80210e0:	31d3      	adds	r1, #211	@ 0xd3
 80210e2:	f001 f81b 	bl	802211c <__assert_func>
 80210e6:	005b      	lsls	r3, r3, #1
 80210e8:	3101      	adds	r1, #1
 80210ea:	e7ef      	b.n	80210cc <__s2b+0x18>
 80210ec:	9b08      	ldr	r3, [sp, #32]
 80210ee:	6143      	str	r3, [r0, #20]
 80210f0:	2301      	movs	r3, #1
 80210f2:	6103      	str	r3, [r0, #16]
 80210f4:	2d09      	cmp	r5, #9
 80210f6:	dd18      	ble.n	802112a <__s2b+0x76>
 80210f8:	0023      	movs	r3, r4
 80210fa:	3309      	adds	r3, #9
 80210fc:	001e      	movs	r6, r3
 80210fe:	9300      	str	r3, [sp, #0]
 8021100:	1964      	adds	r4, r4, r5
 8021102:	7833      	ldrb	r3, [r6, #0]
 8021104:	220a      	movs	r2, #10
 8021106:	0038      	movs	r0, r7
 8021108:	3b30      	subs	r3, #48	@ 0x30
 802110a:	f7ff ff8f 	bl	802102c <__multadd>
 802110e:	3601      	adds	r6, #1
 8021110:	0001      	movs	r1, r0
 8021112:	42a6      	cmp	r6, r4
 8021114:	d1f5      	bne.n	8021102 <__s2b+0x4e>
 8021116:	002c      	movs	r4, r5
 8021118:	9b00      	ldr	r3, [sp, #0]
 802111a:	3c08      	subs	r4, #8
 802111c:	191c      	adds	r4, r3, r4
 802111e:	002e      	movs	r6, r5
 8021120:	9b01      	ldr	r3, [sp, #4]
 8021122:	429e      	cmp	r6, r3
 8021124:	db04      	blt.n	8021130 <__s2b+0x7c>
 8021126:	0008      	movs	r0, r1
 8021128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802112a:	2509      	movs	r5, #9
 802112c:	340a      	adds	r4, #10
 802112e:	e7f6      	b.n	802111e <__s2b+0x6a>
 8021130:	1b63      	subs	r3, r4, r5
 8021132:	5d9b      	ldrb	r3, [r3, r6]
 8021134:	220a      	movs	r2, #10
 8021136:	0038      	movs	r0, r7
 8021138:	3b30      	subs	r3, #48	@ 0x30
 802113a:	f7ff ff77 	bl	802102c <__multadd>
 802113e:	3601      	adds	r6, #1
 8021140:	0001      	movs	r1, r0
 8021142:	e7ed      	b.n	8021120 <__s2b+0x6c>
 8021144:	08025039 	.word	0x08025039
 8021148:	080250aa 	.word	0x080250aa

0802114c <__hi0bits>:
 802114c:	2280      	movs	r2, #128	@ 0x80
 802114e:	0003      	movs	r3, r0
 8021150:	0252      	lsls	r2, r2, #9
 8021152:	2000      	movs	r0, #0
 8021154:	4293      	cmp	r3, r2
 8021156:	d201      	bcs.n	802115c <__hi0bits+0x10>
 8021158:	041b      	lsls	r3, r3, #16
 802115a:	3010      	adds	r0, #16
 802115c:	2280      	movs	r2, #128	@ 0x80
 802115e:	0452      	lsls	r2, r2, #17
 8021160:	4293      	cmp	r3, r2
 8021162:	d201      	bcs.n	8021168 <__hi0bits+0x1c>
 8021164:	3008      	adds	r0, #8
 8021166:	021b      	lsls	r3, r3, #8
 8021168:	2280      	movs	r2, #128	@ 0x80
 802116a:	0552      	lsls	r2, r2, #21
 802116c:	4293      	cmp	r3, r2
 802116e:	d201      	bcs.n	8021174 <__hi0bits+0x28>
 8021170:	3004      	adds	r0, #4
 8021172:	011b      	lsls	r3, r3, #4
 8021174:	2280      	movs	r2, #128	@ 0x80
 8021176:	05d2      	lsls	r2, r2, #23
 8021178:	4293      	cmp	r3, r2
 802117a:	d201      	bcs.n	8021180 <__hi0bits+0x34>
 802117c:	3002      	adds	r0, #2
 802117e:	009b      	lsls	r3, r3, #2
 8021180:	2b00      	cmp	r3, #0
 8021182:	db03      	blt.n	802118c <__hi0bits+0x40>
 8021184:	3001      	adds	r0, #1
 8021186:	4213      	tst	r3, r2
 8021188:	d100      	bne.n	802118c <__hi0bits+0x40>
 802118a:	2020      	movs	r0, #32
 802118c:	4770      	bx	lr

0802118e <__lo0bits>:
 802118e:	6803      	ldr	r3, [r0, #0]
 8021190:	0001      	movs	r1, r0
 8021192:	2207      	movs	r2, #7
 8021194:	0018      	movs	r0, r3
 8021196:	4010      	ands	r0, r2
 8021198:	4213      	tst	r3, r2
 802119a:	d00d      	beq.n	80211b8 <__lo0bits+0x2a>
 802119c:	3a06      	subs	r2, #6
 802119e:	2000      	movs	r0, #0
 80211a0:	4213      	tst	r3, r2
 80211a2:	d105      	bne.n	80211b0 <__lo0bits+0x22>
 80211a4:	3002      	adds	r0, #2
 80211a6:	4203      	tst	r3, r0
 80211a8:	d003      	beq.n	80211b2 <__lo0bits+0x24>
 80211aa:	40d3      	lsrs	r3, r2
 80211ac:	0010      	movs	r0, r2
 80211ae:	600b      	str	r3, [r1, #0]
 80211b0:	4770      	bx	lr
 80211b2:	089b      	lsrs	r3, r3, #2
 80211b4:	600b      	str	r3, [r1, #0]
 80211b6:	e7fb      	b.n	80211b0 <__lo0bits+0x22>
 80211b8:	b29a      	uxth	r2, r3
 80211ba:	2a00      	cmp	r2, #0
 80211bc:	d101      	bne.n	80211c2 <__lo0bits+0x34>
 80211be:	2010      	movs	r0, #16
 80211c0:	0c1b      	lsrs	r3, r3, #16
 80211c2:	b2da      	uxtb	r2, r3
 80211c4:	2a00      	cmp	r2, #0
 80211c6:	d101      	bne.n	80211cc <__lo0bits+0x3e>
 80211c8:	3008      	adds	r0, #8
 80211ca:	0a1b      	lsrs	r3, r3, #8
 80211cc:	071a      	lsls	r2, r3, #28
 80211ce:	d101      	bne.n	80211d4 <__lo0bits+0x46>
 80211d0:	3004      	adds	r0, #4
 80211d2:	091b      	lsrs	r3, r3, #4
 80211d4:	079a      	lsls	r2, r3, #30
 80211d6:	d101      	bne.n	80211dc <__lo0bits+0x4e>
 80211d8:	3002      	adds	r0, #2
 80211da:	089b      	lsrs	r3, r3, #2
 80211dc:	07da      	lsls	r2, r3, #31
 80211de:	d4e9      	bmi.n	80211b4 <__lo0bits+0x26>
 80211e0:	3001      	adds	r0, #1
 80211e2:	085b      	lsrs	r3, r3, #1
 80211e4:	d1e6      	bne.n	80211b4 <__lo0bits+0x26>
 80211e6:	2020      	movs	r0, #32
 80211e8:	e7e2      	b.n	80211b0 <__lo0bits+0x22>
	...

080211ec <__i2b>:
 80211ec:	b510      	push	{r4, lr}
 80211ee:	000c      	movs	r4, r1
 80211f0:	2101      	movs	r1, #1
 80211f2:	f7ff feb3 	bl	8020f5c <_Balloc>
 80211f6:	2800      	cmp	r0, #0
 80211f8:	d107      	bne.n	802120a <__i2b+0x1e>
 80211fa:	2146      	movs	r1, #70	@ 0x46
 80211fc:	4c05      	ldr	r4, [pc, #20]	@ (8021214 <__i2b+0x28>)
 80211fe:	0002      	movs	r2, r0
 8021200:	4b05      	ldr	r3, [pc, #20]	@ (8021218 <__i2b+0x2c>)
 8021202:	0020      	movs	r0, r4
 8021204:	31ff      	adds	r1, #255	@ 0xff
 8021206:	f000 ff89 	bl	802211c <__assert_func>
 802120a:	2301      	movs	r3, #1
 802120c:	6144      	str	r4, [r0, #20]
 802120e:	6103      	str	r3, [r0, #16]
 8021210:	bd10      	pop	{r4, pc}
 8021212:	46c0      	nop			@ (mov r8, r8)
 8021214:	080250aa 	.word	0x080250aa
 8021218:	08025039 	.word	0x08025039

0802121c <__multiply>:
 802121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802121e:	0014      	movs	r4, r2
 8021220:	690a      	ldr	r2, [r1, #16]
 8021222:	6923      	ldr	r3, [r4, #16]
 8021224:	000d      	movs	r5, r1
 8021226:	b08b      	sub	sp, #44	@ 0x2c
 8021228:	429a      	cmp	r2, r3
 802122a:	db02      	blt.n	8021232 <__multiply+0x16>
 802122c:	0023      	movs	r3, r4
 802122e:	000c      	movs	r4, r1
 8021230:	001d      	movs	r5, r3
 8021232:	6927      	ldr	r7, [r4, #16]
 8021234:	692e      	ldr	r6, [r5, #16]
 8021236:	6861      	ldr	r1, [r4, #4]
 8021238:	19bb      	adds	r3, r7, r6
 802123a:	9303      	str	r3, [sp, #12]
 802123c:	68a3      	ldr	r3, [r4, #8]
 802123e:	19ba      	adds	r2, r7, r6
 8021240:	4293      	cmp	r3, r2
 8021242:	da00      	bge.n	8021246 <__multiply+0x2a>
 8021244:	3101      	adds	r1, #1
 8021246:	f7ff fe89 	bl	8020f5c <_Balloc>
 802124a:	9002      	str	r0, [sp, #8]
 802124c:	2800      	cmp	r0, #0
 802124e:	d106      	bne.n	802125e <__multiply+0x42>
 8021250:	21b1      	movs	r1, #177	@ 0xb1
 8021252:	4b49      	ldr	r3, [pc, #292]	@ (8021378 <__multiply+0x15c>)
 8021254:	4849      	ldr	r0, [pc, #292]	@ (802137c <__multiply+0x160>)
 8021256:	9a02      	ldr	r2, [sp, #8]
 8021258:	0049      	lsls	r1, r1, #1
 802125a:	f000 ff5f 	bl	802211c <__assert_func>
 802125e:	9b02      	ldr	r3, [sp, #8]
 8021260:	2200      	movs	r2, #0
 8021262:	3314      	adds	r3, #20
 8021264:	469c      	mov	ip, r3
 8021266:	19bb      	adds	r3, r7, r6
 8021268:	009b      	lsls	r3, r3, #2
 802126a:	4463      	add	r3, ip
 802126c:	9304      	str	r3, [sp, #16]
 802126e:	4663      	mov	r3, ip
 8021270:	9904      	ldr	r1, [sp, #16]
 8021272:	428b      	cmp	r3, r1
 8021274:	d32a      	bcc.n	80212cc <__multiply+0xb0>
 8021276:	0023      	movs	r3, r4
 8021278:	00bf      	lsls	r7, r7, #2
 802127a:	3314      	adds	r3, #20
 802127c:	3514      	adds	r5, #20
 802127e:	9308      	str	r3, [sp, #32]
 8021280:	00b6      	lsls	r6, r6, #2
 8021282:	19db      	adds	r3, r3, r7
 8021284:	9305      	str	r3, [sp, #20]
 8021286:	19ab      	adds	r3, r5, r6
 8021288:	9309      	str	r3, [sp, #36]	@ 0x24
 802128a:	2304      	movs	r3, #4
 802128c:	9306      	str	r3, [sp, #24]
 802128e:	0023      	movs	r3, r4
 8021290:	9a05      	ldr	r2, [sp, #20]
 8021292:	3315      	adds	r3, #21
 8021294:	9501      	str	r5, [sp, #4]
 8021296:	429a      	cmp	r2, r3
 8021298:	d305      	bcc.n	80212a6 <__multiply+0x8a>
 802129a:	1b13      	subs	r3, r2, r4
 802129c:	3b15      	subs	r3, #21
 802129e:	089b      	lsrs	r3, r3, #2
 80212a0:	3301      	adds	r3, #1
 80212a2:	009b      	lsls	r3, r3, #2
 80212a4:	9306      	str	r3, [sp, #24]
 80212a6:	9b01      	ldr	r3, [sp, #4]
 80212a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80212aa:	4293      	cmp	r3, r2
 80212ac:	d310      	bcc.n	80212d0 <__multiply+0xb4>
 80212ae:	9b03      	ldr	r3, [sp, #12]
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	dd05      	ble.n	80212c0 <__multiply+0xa4>
 80212b4:	9b04      	ldr	r3, [sp, #16]
 80212b6:	3b04      	subs	r3, #4
 80212b8:	9304      	str	r3, [sp, #16]
 80212ba:	681b      	ldr	r3, [r3, #0]
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d056      	beq.n	802136e <__multiply+0x152>
 80212c0:	9b02      	ldr	r3, [sp, #8]
 80212c2:	9a03      	ldr	r2, [sp, #12]
 80212c4:	0018      	movs	r0, r3
 80212c6:	611a      	str	r2, [r3, #16]
 80212c8:	b00b      	add	sp, #44	@ 0x2c
 80212ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212cc:	c304      	stmia	r3!, {r2}
 80212ce:	e7cf      	b.n	8021270 <__multiply+0x54>
 80212d0:	9b01      	ldr	r3, [sp, #4]
 80212d2:	6818      	ldr	r0, [r3, #0]
 80212d4:	b280      	uxth	r0, r0
 80212d6:	2800      	cmp	r0, #0
 80212d8:	d01e      	beq.n	8021318 <__multiply+0xfc>
 80212da:	4667      	mov	r7, ip
 80212dc:	2500      	movs	r5, #0
 80212de:	9e08      	ldr	r6, [sp, #32]
 80212e0:	ce02      	ldmia	r6!, {r1}
 80212e2:	683b      	ldr	r3, [r7, #0]
 80212e4:	9307      	str	r3, [sp, #28]
 80212e6:	b28b      	uxth	r3, r1
 80212e8:	4343      	muls	r3, r0
 80212ea:	001a      	movs	r2, r3
 80212ec:	466b      	mov	r3, sp
 80212ee:	0c09      	lsrs	r1, r1, #16
 80212f0:	8b9b      	ldrh	r3, [r3, #28]
 80212f2:	4341      	muls	r1, r0
 80212f4:	18d3      	adds	r3, r2, r3
 80212f6:	9a07      	ldr	r2, [sp, #28]
 80212f8:	195b      	adds	r3, r3, r5
 80212fa:	0c12      	lsrs	r2, r2, #16
 80212fc:	1889      	adds	r1, r1, r2
 80212fe:	0c1a      	lsrs	r2, r3, #16
 8021300:	188a      	adds	r2, r1, r2
 8021302:	b29b      	uxth	r3, r3
 8021304:	0c15      	lsrs	r5, r2, #16
 8021306:	0412      	lsls	r2, r2, #16
 8021308:	431a      	orrs	r2, r3
 802130a:	9b05      	ldr	r3, [sp, #20]
 802130c:	c704      	stmia	r7!, {r2}
 802130e:	42b3      	cmp	r3, r6
 8021310:	d8e6      	bhi.n	80212e0 <__multiply+0xc4>
 8021312:	4663      	mov	r3, ip
 8021314:	9a06      	ldr	r2, [sp, #24]
 8021316:	509d      	str	r5, [r3, r2]
 8021318:	9b01      	ldr	r3, [sp, #4]
 802131a:	6818      	ldr	r0, [r3, #0]
 802131c:	0c00      	lsrs	r0, r0, #16
 802131e:	d020      	beq.n	8021362 <__multiply+0x146>
 8021320:	4663      	mov	r3, ip
 8021322:	0025      	movs	r5, r4
 8021324:	4661      	mov	r1, ip
 8021326:	2700      	movs	r7, #0
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	3514      	adds	r5, #20
 802132c:	682a      	ldr	r2, [r5, #0]
 802132e:	680e      	ldr	r6, [r1, #0]
 8021330:	b292      	uxth	r2, r2
 8021332:	4342      	muls	r2, r0
 8021334:	0c36      	lsrs	r6, r6, #16
 8021336:	1992      	adds	r2, r2, r6
 8021338:	19d2      	adds	r2, r2, r7
 802133a:	0416      	lsls	r6, r2, #16
 802133c:	b29b      	uxth	r3, r3
 802133e:	431e      	orrs	r6, r3
 8021340:	600e      	str	r6, [r1, #0]
 8021342:	cd40      	ldmia	r5!, {r6}
 8021344:	684b      	ldr	r3, [r1, #4]
 8021346:	0c36      	lsrs	r6, r6, #16
 8021348:	4346      	muls	r6, r0
 802134a:	b29b      	uxth	r3, r3
 802134c:	0c12      	lsrs	r2, r2, #16
 802134e:	18f3      	adds	r3, r6, r3
 8021350:	189b      	adds	r3, r3, r2
 8021352:	9a05      	ldr	r2, [sp, #20]
 8021354:	0c1f      	lsrs	r7, r3, #16
 8021356:	3104      	adds	r1, #4
 8021358:	42aa      	cmp	r2, r5
 802135a:	d8e7      	bhi.n	802132c <__multiply+0x110>
 802135c:	4662      	mov	r2, ip
 802135e:	9906      	ldr	r1, [sp, #24]
 8021360:	5053      	str	r3, [r2, r1]
 8021362:	9b01      	ldr	r3, [sp, #4]
 8021364:	3304      	adds	r3, #4
 8021366:	9301      	str	r3, [sp, #4]
 8021368:	2304      	movs	r3, #4
 802136a:	449c      	add	ip, r3
 802136c:	e79b      	b.n	80212a6 <__multiply+0x8a>
 802136e:	9b03      	ldr	r3, [sp, #12]
 8021370:	3b01      	subs	r3, #1
 8021372:	9303      	str	r3, [sp, #12]
 8021374:	e79b      	b.n	80212ae <__multiply+0x92>
 8021376:	46c0      	nop			@ (mov r8, r8)
 8021378:	08025039 	.word	0x08025039
 802137c:	080250aa 	.word	0x080250aa

08021380 <__pow5mult>:
 8021380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021382:	2303      	movs	r3, #3
 8021384:	0015      	movs	r5, r2
 8021386:	0007      	movs	r7, r0
 8021388:	000e      	movs	r6, r1
 802138a:	401a      	ands	r2, r3
 802138c:	421d      	tst	r5, r3
 802138e:	d008      	beq.n	80213a2 <__pow5mult+0x22>
 8021390:	4925      	ldr	r1, [pc, #148]	@ (8021428 <__pow5mult+0xa8>)
 8021392:	3a01      	subs	r2, #1
 8021394:	0092      	lsls	r2, r2, #2
 8021396:	5852      	ldr	r2, [r2, r1]
 8021398:	2300      	movs	r3, #0
 802139a:	0031      	movs	r1, r6
 802139c:	f7ff fe46 	bl	802102c <__multadd>
 80213a0:	0006      	movs	r6, r0
 80213a2:	10ad      	asrs	r5, r5, #2
 80213a4:	d03d      	beq.n	8021422 <__pow5mult+0xa2>
 80213a6:	69fc      	ldr	r4, [r7, #28]
 80213a8:	2c00      	cmp	r4, #0
 80213aa:	d10f      	bne.n	80213cc <__pow5mult+0x4c>
 80213ac:	2010      	movs	r0, #16
 80213ae:	f7ff fd07 	bl	8020dc0 <malloc>
 80213b2:	1e02      	subs	r2, r0, #0
 80213b4:	61f8      	str	r0, [r7, #28]
 80213b6:	d105      	bne.n	80213c4 <__pow5mult+0x44>
 80213b8:	21b4      	movs	r1, #180	@ 0xb4
 80213ba:	4b1c      	ldr	r3, [pc, #112]	@ (802142c <__pow5mult+0xac>)
 80213bc:	481c      	ldr	r0, [pc, #112]	@ (8021430 <__pow5mult+0xb0>)
 80213be:	31ff      	adds	r1, #255	@ 0xff
 80213c0:	f000 feac 	bl	802211c <__assert_func>
 80213c4:	6044      	str	r4, [r0, #4]
 80213c6:	6084      	str	r4, [r0, #8]
 80213c8:	6004      	str	r4, [r0, #0]
 80213ca:	60c4      	str	r4, [r0, #12]
 80213cc:	69fb      	ldr	r3, [r7, #28]
 80213ce:	689c      	ldr	r4, [r3, #8]
 80213d0:	9301      	str	r3, [sp, #4]
 80213d2:	2c00      	cmp	r4, #0
 80213d4:	d108      	bne.n	80213e8 <__pow5mult+0x68>
 80213d6:	0038      	movs	r0, r7
 80213d8:	4916      	ldr	r1, [pc, #88]	@ (8021434 <__pow5mult+0xb4>)
 80213da:	f7ff ff07 	bl	80211ec <__i2b>
 80213de:	9b01      	ldr	r3, [sp, #4]
 80213e0:	0004      	movs	r4, r0
 80213e2:	6098      	str	r0, [r3, #8]
 80213e4:	2300      	movs	r3, #0
 80213e6:	6003      	str	r3, [r0, #0]
 80213e8:	2301      	movs	r3, #1
 80213ea:	421d      	tst	r5, r3
 80213ec:	d00a      	beq.n	8021404 <__pow5mult+0x84>
 80213ee:	0031      	movs	r1, r6
 80213f0:	0022      	movs	r2, r4
 80213f2:	0038      	movs	r0, r7
 80213f4:	f7ff ff12 	bl	802121c <__multiply>
 80213f8:	0031      	movs	r1, r6
 80213fa:	9001      	str	r0, [sp, #4]
 80213fc:	0038      	movs	r0, r7
 80213fe:	f7ff fdf1 	bl	8020fe4 <_Bfree>
 8021402:	9e01      	ldr	r6, [sp, #4]
 8021404:	106d      	asrs	r5, r5, #1
 8021406:	d00c      	beq.n	8021422 <__pow5mult+0xa2>
 8021408:	6820      	ldr	r0, [r4, #0]
 802140a:	2800      	cmp	r0, #0
 802140c:	d107      	bne.n	802141e <__pow5mult+0x9e>
 802140e:	0022      	movs	r2, r4
 8021410:	0021      	movs	r1, r4
 8021412:	0038      	movs	r0, r7
 8021414:	f7ff ff02 	bl	802121c <__multiply>
 8021418:	2300      	movs	r3, #0
 802141a:	6020      	str	r0, [r4, #0]
 802141c:	6003      	str	r3, [r0, #0]
 802141e:	0004      	movs	r4, r0
 8021420:	e7e2      	b.n	80213e8 <__pow5mult+0x68>
 8021422:	0030      	movs	r0, r6
 8021424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021426:	46c0      	nop			@ (mov r8, r8)
 8021428:	08025104 	.word	0x08025104
 802142c:	08024fca 	.word	0x08024fca
 8021430:	080250aa 	.word	0x080250aa
 8021434:	00000271 	.word	0x00000271

08021438 <__lshift>:
 8021438:	b5f0      	push	{r4, r5, r6, r7, lr}
 802143a:	000c      	movs	r4, r1
 802143c:	0016      	movs	r6, r2
 802143e:	6923      	ldr	r3, [r4, #16]
 8021440:	1157      	asrs	r7, r2, #5
 8021442:	b085      	sub	sp, #20
 8021444:	18fb      	adds	r3, r7, r3
 8021446:	9301      	str	r3, [sp, #4]
 8021448:	3301      	adds	r3, #1
 802144a:	9300      	str	r3, [sp, #0]
 802144c:	6849      	ldr	r1, [r1, #4]
 802144e:	68a3      	ldr	r3, [r4, #8]
 8021450:	9002      	str	r0, [sp, #8]
 8021452:	9a00      	ldr	r2, [sp, #0]
 8021454:	4293      	cmp	r3, r2
 8021456:	db10      	blt.n	802147a <__lshift+0x42>
 8021458:	9802      	ldr	r0, [sp, #8]
 802145a:	f7ff fd7f 	bl	8020f5c <_Balloc>
 802145e:	2300      	movs	r3, #0
 8021460:	0001      	movs	r1, r0
 8021462:	0005      	movs	r5, r0
 8021464:	001a      	movs	r2, r3
 8021466:	3114      	adds	r1, #20
 8021468:	4298      	cmp	r0, r3
 802146a:	d10c      	bne.n	8021486 <__lshift+0x4e>
 802146c:	21ef      	movs	r1, #239	@ 0xef
 802146e:	002a      	movs	r2, r5
 8021470:	4b25      	ldr	r3, [pc, #148]	@ (8021508 <__lshift+0xd0>)
 8021472:	4826      	ldr	r0, [pc, #152]	@ (802150c <__lshift+0xd4>)
 8021474:	0049      	lsls	r1, r1, #1
 8021476:	f000 fe51 	bl	802211c <__assert_func>
 802147a:	3101      	adds	r1, #1
 802147c:	005b      	lsls	r3, r3, #1
 802147e:	e7e8      	b.n	8021452 <__lshift+0x1a>
 8021480:	0098      	lsls	r0, r3, #2
 8021482:	500a      	str	r2, [r1, r0]
 8021484:	3301      	adds	r3, #1
 8021486:	42bb      	cmp	r3, r7
 8021488:	dbfa      	blt.n	8021480 <__lshift+0x48>
 802148a:	43fb      	mvns	r3, r7
 802148c:	17db      	asrs	r3, r3, #31
 802148e:	401f      	ands	r7, r3
 8021490:	00bf      	lsls	r7, r7, #2
 8021492:	0023      	movs	r3, r4
 8021494:	201f      	movs	r0, #31
 8021496:	19c9      	adds	r1, r1, r7
 8021498:	0037      	movs	r7, r6
 802149a:	6922      	ldr	r2, [r4, #16]
 802149c:	3314      	adds	r3, #20
 802149e:	0092      	lsls	r2, r2, #2
 80214a0:	189a      	adds	r2, r3, r2
 80214a2:	4007      	ands	r7, r0
 80214a4:	4206      	tst	r6, r0
 80214a6:	d029      	beq.n	80214fc <__lshift+0xc4>
 80214a8:	3001      	adds	r0, #1
 80214aa:	1bc0      	subs	r0, r0, r7
 80214ac:	9003      	str	r0, [sp, #12]
 80214ae:	468c      	mov	ip, r1
 80214b0:	2000      	movs	r0, #0
 80214b2:	681e      	ldr	r6, [r3, #0]
 80214b4:	40be      	lsls	r6, r7
 80214b6:	4306      	orrs	r6, r0
 80214b8:	4660      	mov	r0, ip
 80214ba:	c040      	stmia	r0!, {r6}
 80214bc:	4684      	mov	ip, r0
 80214be:	9e03      	ldr	r6, [sp, #12]
 80214c0:	cb01      	ldmia	r3!, {r0}
 80214c2:	40f0      	lsrs	r0, r6
 80214c4:	429a      	cmp	r2, r3
 80214c6:	d8f4      	bhi.n	80214b2 <__lshift+0x7a>
 80214c8:	0026      	movs	r6, r4
 80214ca:	3615      	adds	r6, #21
 80214cc:	2304      	movs	r3, #4
 80214ce:	42b2      	cmp	r2, r6
 80214d0:	d304      	bcc.n	80214dc <__lshift+0xa4>
 80214d2:	1b13      	subs	r3, r2, r4
 80214d4:	3b15      	subs	r3, #21
 80214d6:	089b      	lsrs	r3, r3, #2
 80214d8:	3301      	adds	r3, #1
 80214da:	009b      	lsls	r3, r3, #2
 80214dc:	50c8      	str	r0, [r1, r3]
 80214de:	2800      	cmp	r0, #0
 80214e0:	d002      	beq.n	80214e8 <__lshift+0xb0>
 80214e2:	9b01      	ldr	r3, [sp, #4]
 80214e4:	3302      	adds	r3, #2
 80214e6:	9300      	str	r3, [sp, #0]
 80214e8:	9b00      	ldr	r3, [sp, #0]
 80214ea:	9802      	ldr	r0, [sp, #8]
 80214ec:	3b01      	subs	r3, #1
 80214ee:	0021      	movs	r1, r4
 80214f0:	612b      	str	r3, [r5, #16]
 80214f2:	f7ff fd77 	bl	8020fe4 <_Bfree>
 80214f6:	0028      	movs	r0, r5
 80214f8:	b005      	add	sp, #20
 80214fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214fc:	cb01      	ldmia	r3!, {r0}
 80214fe:	c101      	stmia	r1!, {r0}
 8021500:	429a      	cmp	r2, r3
 8021502:	d8fb      	bhi.n	80214fc <__lshift+0xc4>
 8021504:	e7f0      	b.n	80214e8 <__lshift+0xb0>
 8021506:	46c0      	nop			@ (mov r8, r8)
 8021508:	08025039 	.word	0x08025039
 802150c:	080250aa 	.word	0x080250aa

08021510 <__mcmp>:
 8021510:	b530      	push	{r4, r5, lr}
 8021512:	690b      	ldr	r3, [r1, #16]
 8021514:	6904      	ldr	r4, [r0, #16]
 8021516:	0002      	movs	r2, r0
 8021518:	1ae0      	subs	r0, r4, r3
 802151a:	429c      	cmp	r4, r3
 802151c:	d10f      	bne.n	802153e <__mcmp+0x2e>
 802151e:	3214      	adds	r2, #20
 8021520:	009b      	lsls	r3, r3, #2
 8021522:	3114      	adds	r1, #20
 8021524:	0014      	movs	r4, r2
 8021526:	18c9      	adds	r1, r1, r3
 8021528:	18d2      	adds	r2, r2, r3
 802152a:	3a04      	subs	r2, #4
 802152c:	3904      	subs	r1, #4
 802152e:	6815      	ldr	r5, [r2, #0]
 8021530:	680b      	ldr	r3, [r1, #0]
 8021532:	429d      	cmp	r5, r3
 8021534:	d004      	beq.n	8021540 <__mcmp+0x30>
 8021536:	2001      	movs	r0, #1
 8021538:	429d      	cmp	r5, r3
 802153a:	d200      	bcs.n	802153e <__mcmp+0x2e>
 802153c:	3802      	subs	r0, #2
 802153e:	bd30      	pop	{r4, r5, pc}
 8021540:	4294      	cmp	r4, r2
 8021542:	d3f2      	bcc.n	802152a <__mcmp+0x1a>
 8021544:	e7fb      	b.n	802153e <__mcmp+0x2e>
	...

08021548 <__mdiff>:
 8021548:	b5f0      	push	{r4, r5, r6, r7, lr}
 802154a:	000c      	movs	r4, r1
 802154c:	b087      	sub	sp, #28
 802154e:	9000      	str	r0, [sp, #0]
 8021550:	0011      	movs	r1, r2
 8021552:	0020      	movs	r0, r4
 8021554:	0017      	movs	r7, r2
 8021556:	f7ff ffdb 	bl	8021510 <__mcmp>
 802155a:	1e05      	subs	r5, r0, #0
 802155c:	d110      	bne.n	8021580 <__mdiff+0x38>
 802155e:	0001      	movs	r1, r0
 8021560:	9800      	ldr	r0, [sp, #0]
 8021562:	f7ff fcfb 	bl	8020f5c <_Balloc>
 8021566:	1e02      	subs	r2, r0, #0
 8021568:	d104      	bne.n	8021574 <__mdiff+0x2c>
 802156a:	4b40      	ldr	r3, [pc, #256]	@ (802166c <__mdiff+0x124>)
 802156c:	4840      	ldr	r0, [pc, #256]	@ (8021670 <__mdiff+0x128>)
 802156e:	4941      	ldr	r1, [pc, #260]	@ (8021674 <__mdiff+0x12c>)
 8021570:	f000 fdd4 	bl	802211c <__assert_func>
 8021574:	2301      	movs	r3, #1
 8021576:	6145      	str	r5, [r0, #20]
 8021578:	6103      	str	r3, [r0, #16]
 802157a:	0010      	movs	r0, r2
 802157c:	b007      	add	sp, #28
 802157e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021580:	2600      	movs	r6, #0
 8021582:	42b0      	cmp	r0, r6
 8021584:	da03      	bge.n	802158e <__mdiff+0x46>
 8021586:	0023      	movs	r3, r4
 8021588:	003c      	movs	r4, r7
 802158a:	001f      	movs	r7, r3
 802158c:	3601      	adds	r6, #1
 802158e:	6861      	ldr	r1, [r4, #4]
 8021590:	9800      	ldr	r0, [sp, #0]
 8021592:	f7ff fce3 	bl	8020f5c <_Balloc>
 8021596:	1e02      	subs	r2, r0, #0
 8021598:	d103      	bne.n	80215a2 <__mdiff+0x5a>
 802159a:	4b34      	ldr	r3, [pc, #208]	@ (802166c <__mdiff+0x124>)
 802159c:	4834      	ldr	r0, [pc, #208]	@ (8021670 <__mdiff+0x128>)
 802159e:	4936      	ldr	r1, [pc, #216]	@ (8021678 <__mdiff+0x130>)
 80215a0:	e7e6      	b.n	8021570 <__mdiff+0x28>
 80215a2:	6923      	ldr	r3, [r4, #16]
 80215a4:	3414      	adds	r4, #20
 80215a6:	9300      	str	r3, [sp, #0]
 80215a8:	009b      	lsls	r3, r3, #2
 80215aa:	18e3      	adds	r3, r4, r3
 80215ac:	0021      	movs	r1, r4
 80215ae:	9401      	str	r4, [sp, #4]
 80215b0:	003c      	movs	r4, r7
 80215b2:	9302      	str	r3, [sp, #8]
 80215b4:	693b      	ldr	r3, [r7, #16]
 80215b6:	3414      	adds	r4, #20
 80215b8:	009b      	lsls	r3, r3, #2
 80215ba:	18e3      	adds	r3, r4, r3
 80215bc:	9303      	str	r3, [sp, #12]
 80215be:	0003      	movs	r3, r0
 80215c0:	60c6      	str	r6, [r0, #12]
 80215c2:	468c      	mov	ip, r1
 80215c4:	2000      	movs	r0, #0
 80215c6:	3314      	adds	r3, #20
 80215c8:	9304      	str	r3, [sp, #16]
 80215ca:	9305      	str	r3, [sp, #20]
 80215cc:	4663      	mov	r3, ip
 80215ce:	cb20      	ldmia	r3!, {r5}
 80215d0:	b2a9      	uxth	r1, r5
 80215d2:	000e      	movs	r6, r1
 80215d4:	469c      	mov	ip, r3
 80215d6:	cc08      	ldmia	r4!, {r3}
 80215d8:	0c2d      	lsrs	r5, r5, #16
 80215da:	b299      	uxth	r1, r3
 80215dc:	1a71      	subs	r1, r6, r1
 80215de:	1809      	adds	r1, r1, r0
 80215e0:	0c1b      	lsrs	r3, r3, #16
 80215e2:	1408      	asrs	r0, r1, #16
 80215e4:	1aeb      	subs	r3, r5, r3
 80215e6:	181b      	adds	r3, r3, r0
 80215e8:	1418      	asrs	r0, r3, #16
 80215ea:	b289      	uxth	r1, r1
 80215ec:	041b      	lsls	r3, r3, #16
 80215ee:	4319      	orrs	r1, r3
 80215f0:	9b05      	ldr	r3, [sp, #20]
 80215f2:	c302      	stmia	r3!, {r1}
 80215f4:	9305      	str	r3, [sp, #20]
 80215f6:	9b03      	ldr	r3, [sp, #12]
 80215f8:	42a3      	cmp	r3, r4
 80215fa:	d8e7      	bhi.n	80215cc <__mdiff+0x84>
 80215fc:	0039      	movs	r1, r7
 80215fe:	9c03      	ldr	r4, [sp, #12]
 8021600:	3115      	adds	r1, #21
 8021602:	2304      	movs	r3, #4
 8021604:	428c      	cmp	r4, r1
 8021606:	d304      	bcc.n	8021612 <__mdiff+0xca>
 8021608:	1be3      	subs	r3, r4, r7
 802160a:	3b15      	subs	r3, #21
 802160c:	089b      	lsrs	r3, r3, #2
 802160e:	3301      	adds	r3, #1
 8021610:	009b      	lsls	r3, r3, #2
 8021612:	9901      	ldr	r1, [sp, #4]
 8021614:	18cd      	adds	r5, r1, r3
 8021616:	9904      	ldr	r1, [sp, #16]
 8021618:	002e      	movs	r6, r5
 802161a:	18cb      	adds	r3, r1, r3
 802161c:	001f      	movs	r7, r3
 802161e:	9902      	ldr	r1, [sp, #8]
 8021620:	428e      	cmp	r6, r1
 8021622:	d311      	bcc.n	8021648 <__mdiff+0x100>
 8021624:	9c02      	ldr	r4, [sp, #8]
 8021626:	1ee9      	subs	r1, r5, #3
 8021628:	2000      	movs	r0, #0
 802162a:	428c      	cmp	r4, r1
 802162c:	d304      	bcc.n	8021638 <__mdiff+0xf0>
 802162e:	0021      	movs	r1, r4
 8021630:	3103      	adds	r1, #3
 8021632:	1b49      	subs	r1, r1, r5
 8021634:	0889      	lsrs	r1, r1, #2
 8021636:	0088      	lsls	r0, r1, #2
 8021638:	181b      	adds	r3, r3, r0
 802163a:	3b04      	subs	r3, #4
 802163c:	6819      	ldr	r1, [r3, #0]
 802163e:	2900      	cmp	r1, #0
 8021640:	d010      	beq.n	8021664 <__mdiff+0x11c>
 8021642:	9b00      	ldr	r3, [sp, #0]
 8021644:	6113      	str	r3, [r2, #16]
 8021646:	e798      	b.n	802157a <__mdiff+0x32>
 8021648:	4684      	mov	ip, r0
 802164a:	ce02      	ldmia	r6!, {r1}
 802164c:	b288      	uxth	r0, r1
 802164e:	4460      	add	r0, ip
 8021650:	1400      	asrs	r0, r0, #16
 8021652:	0c0c      	lsrs	r4, r1, #16
 8021654:	1904      	adds	r4, r0, r4
 8021656:	4461      	add	r1, ip
 8021658:	1420      	asrs	r0, r4, #16
 802165a:	b289      	uxth	r1, r1
 802165c:	0424      	lsls	r4, r4, #16
 802165e:	4321      	orrs	r1, r4
 8021660:	c702      	stmia	r7!, {r1}
 8021662:	e7dc      	b.n	802161e <__mdiff+0xd6>
 8021664:	9900      	ldr	r1, [sp, #0]
 8021666:	3901      	subs	r1, #1
 8021668:	9100      	str	r1, [sp, #0]
 802166a:	e7e6      	b.n	802163a <__mdiff+0xf2>
 802166c:	08025039 	.word	0x08025039
 8021670:	080250aa 	.word	0x080250aa
 8021674:	00000237 	.word	0x00000237
 8021678:	00000245 	.word	0x00000245

0802167c <__ulp>:
 802167c:	b510      	push	{r4, lr}
 802167e:	2400      	movs	r4, #0
 8021680:	4b0c      	ldr	r3, [pc, #48]	@ (80216b4 <__ulp+0x38>)
 8021682:	4a0d      	ldr	r2, [pc, #52]	@ (80216b8 <__ulp+0x3c>)
 8021684:	400b      	ands	r3, r1
 8021686:	189b      	adds	r3, r3, r2
 8021688:	42a3      	cmp	r3, r4
 802168a:	dc06      	bgt.n	802169a <__ulp+0x1e>
 802168c:	425b      	negs	r3, r3
 802168e:	151a      	asrs	r2, r3, #20
 8021690:	2a13      	cmp	r2, #19
 8021692:	dc05      	bgt.n	80216a0 <__ulp+0x24>
 8021694:	2380      	movs	r3, #128	@ 0x80
 8021696:	031b      	lsls	r3, r3, #12
 8021698:	4113      	asrs	r3, r2
 802169a:	0019      	movs	r1, r3
 802169c:	0020      	movs	r0, r4
 802169e:	bd10      	pop	{r4, pc}
 80216a0:	3a14      	subs	r2, #20
 80216a2:	2401      	movs	r4, #1
 80216a4:	2a1e      	cmp	r2, #30
 80216a6:	dc02      	bgt.n	80216ae <__ulp+0x32>
 80216a8:	2480      	movs	r4, #128	@ 0x80
 80216aa:	0624      	lsls	r4, r4, #24
 80216ac:	40d4      	lsrs	r4, r2
 80216ae:	2300      	movs	r3, #0
 80216b0:	e7f3      	b.n	802169a <__ulp+0x1e>
 80216b2:	46c0      	nop			@ (mov r8, r8)
 80216b4:	7ff00000 	.word	0x7ff00000
 80216b8:	fcc00000 	.word	0xfcc00000

080216bc <__b2d>:
 80216bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80216be:	0006      	movs	r6, r0
 80216c0:	6903      	ldr	r3, [r0, #16]
 80216c2:	3614      	adds	r6, #20
 80216c4:	009b      	lsls	r3, r3, #2
 80216c6:	18f3      	adds	r3, r6, r3
 80216c8:	1f1d      	subs	r5, r3, #4
 80216ca:	682c      	ldr	r4, [r5, #0]
 80216cc:	000f      	movs	r7, r1
 80216ce:	0020      	movs	r0, r4
 80216d0:	9301      	str	r3, [sp, #4]
 80216d2:	f7ff fd3b 	bl	802114c <__hi0bits>
 80216d6:	2220      	movs	r2, #32
 80216d8:	1a12      	subs	r2, r2, r0
 80216da:	603a      	str	r2, [r7, #0]
 80216dc:	0003      	movs	r3, r0
 80216de:	4a1c      	ldr	r2, [pc, #112]	@ (8021750 <__b2d+0x94>)
 80216e0:	280a      	cmp	r0, #10
 80216e2:	dc15      	bgt.n	8021710 <__b2d+0x54>
 80216e4:	210b      	movs	r1, #11
 80216e6:	0027      	movs	r7, r4
 80216e8:	1a09      	subs	r1, r1, r0
 80216ea:	40cf      	lsrs	r7, r1
 80216ec:	433a      	orrs	r2, r7
 80216ee:	468c      	mov	ip, r1
 80216f0:	0011      	movs	r1, r2
 80216f2:	2200      	movs	r2, #0
 80216f4:	42ae      	cmp	r6, r5
 80216f6:	d202      	bcs.n	80216fe <__b2d+0x42>
 80216f8:	9a01      	ldr	r2, [sp, #4]
 80216fa:	3a08      	subs	r2, #8
 80216fc:	6812      	ldr	r2, [r2, #0]
 80216fe:	3315      	adds	r3, #21
 8021700:	409c      	lsls	r4, r3
 8021702:	4663      	mov	r3, ip
 8021704:	0027      	movs	r7, r4
 8021706:	40da      	lsrs	r2, r3
 8021708:	4317      	orrs	r7, r2
 802170a:	0038      	movs	r0, r7
 802170c:	b003      	add	sp, #12
 802170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021710:	2700      	movs	r7, #0
 8021712:	42ae      	cmp	r6, r5
 8021714:	d202      	bcs.n	802171c <__b2d+0x60>
 8021716:	9d01      	ldr	r5, [sp, #4]
 8021718:	3d08      	subs	r5, #8
 802171a:	682f      	ldr	r7, [r5, #0]
 802171c:	210b      	movs	r1, #11
 802171e:	4249      	negs	r1, r1
 8021720:	468c      	mov	ip, r1
 8021722:	449c      	add	ip, r3
 8021724:	2b0b      	cmp	r3, #11
 8021726:	d010      	beq.n	802174a <__b2d+0x8e>
 8021728:	4661      	mov	r1, ip
 802172a:	2320      	movs	r3, #32
 802172c:	408c      	lsls	r4, r1
 802172e:	1a5b      	subs	r3, r3, r1
 8021730:	0039      	movs	r1, r7
 8021732:	40d9      	lsrs	r1, r3
 8021734:	430c      	orrs	r4, r1
 8021736:	4322      	orrs	r2, r4
 8021738:	0011      	movs	r1, r2
 802173a:	2200      	movs	r2, #0
 802173c:	42b5      	cmp	r5, r6
 802173e:	d901      	bls.n	8021744 <__b2d+0x88>
 8021740:	3d04      	subs	r5, #4
 8021742:	682a      	ldr	r2, [r5, #0]
 8021744:	4664      	mov	r4, ip
 8021746:	40a7      	lsls	r7, r4
 8021748:	e7dd      	b.n	8021706 <__b2d+0x4a>
 802174a:	4322      	orrs	r2, r4
 802174c:	0011      	movs	r1, r2
 802174e:	e7dc      	b.n	802170a <__b2d+0x4e>
 8021750:	3ff00000 	.word	0x3ff00000

08021754 <__d2b>:
 8021754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021756:	2101      	movs	r1, #1
 8021758:	0016      	movs	r6, r2
 802175a:	001f      	movs	r7, r3
 802175c:	f7ff fbfe 	bl	8020f5c <_Balloc>
 8021760:	1e04      	subs	r4, r0, #0
 8021762:	d105      	bne.n	8021770 <__d2b+0x1c>
 8021764:	0022      	movs	r2, r4
 8021766:	4b25      	ldr	r3, [pc, #148]	@ (80217fc <__d2b+0xa8>)
 8021768:	4825      	ldr	r0, [pc, #148]	@ (8021800 <__d2b+0xac>)
 802176a:	4926      	ldr	r1, [pc, #152]	@ (8021804 <__d2b+0xb0>)
 802176c:	f000 fcd6 	bl	802211c <__assert_func>
 8021770:	033b      	lsls	r3, r7, #12
 8021772:	007d      	lsls	r5, r7, #1
 8021774:	0b1b      	lsrs	r3, r3, #12
 8021776:	0d6d      	lsrs	r5, r5, #21
 8021778:	d002      	beq.n	8021780 <__d2b+0x2c>
 802177a:	2280      	movs	r2, #128	@ 0x80
 802177c:	0352      	lsls	r2, r2, #13
 802177e:	4313      	orrs	r3, r2
 8021780:	9301      	str	r3, [sp, #4]
 8021782:	2e00      	cmp	r6, #0
 8021784:	d025      	beq.n	80217d2 <__d2b+0x7e>
 8021786:	4668      	mov	r0, sp
 8021788:	9600      	str	r6, [sp, #0]
 802178a:	f7ff fd00 	bl	802118e <__lo0bits>
 802178e:	9b01      	ldr	r3, [sp, #4]
 8021790:	9900      	ldr	r1, [sp, #0]
 8021792:	2800      	cmp	r0, #0
 8021794:	d01b      	beq.n	80217ce <__d2b+0x7a>
 8021796:	2220      	movs	r2, #32
 8021798:	001e      	movs	r6, r3
 802179a:	1a12      	subs	r2, r2, r0
 802179c:	4096      	lsls	r6, r2
 802179e:	0032      	movs	r2, r6
 80217a0:	40c3      	lsrs	r3, r0
 80217a2:	430a      	orrs	r2, r1
 80217a4:	6162      	str	r2, [r4, #20]
 80217a6:	9301      	str	r3, [sp, #4]
 80217a8:	9e01      	ldr	r6, [sp, #4]
 80217aa:	61a6      	str	r6, [r4, #24]
 80217ac:	1e73      	subs	r3, r6, #1
 80217ae:	419e      	sbcs	r6, r3
 80217b0:	3601      	adds	r6, #1
 80217b2:	6126      	str	r6, [r4, #16]
 80217b4:	2d00      	cmp	r5, #0
 80217b6:	d014      	beq.n	80217e2 <__d2b+0x8e>
 80217b8:	2635      	movs	r6, #53	@ 0x35
 80217ba:	4b13      	ldr	r3, [pc, #76]	@ (8021808 <__d2b+0xb4>)
 80217bc:	18ed      	adds	r5, r5, r3
 80217be:	9b08      	ldr	r3, [sp, #32]
 80217c0:	182d      	adds	r5, r5, r0
 80217c2:	601d      	str	r5, [r3, #0]
 80217c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80217c6:	1a36      	subs	r6, r6, r0
 80217c8:	601e      	str	r6, [r3, #0]
 80217ca:	0020      	movs	r0, r4
 80217cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80217ce:	6161      	str	r1, [r4, #20]
 80217d0:	e7ea      	b.n	80217a8 <__d2b+0x54>
 80217d2:	a801      	add	r0, sp, #4
 80217d4:	f7ff fcdb 	bl	802118e <__lo0bits>
 80217d8:	9b01      	ldr	r3, [sp, #4]
 80217da:	2601      	movs	r6, #1
 80217dc:	6163      	str	r3, [r4, #20]
 80217de:	3020      	adds	r0, #32
 80217e0:	e7e7      	b.n	80217b2 <__d2b+0x5e>
 80217e2:	4b0a      	ldr	r3, [pc, #40]	@ (802180c <__d2b+0xb8>)
 80217e4:	18c0      	adds	r0, r0, r3
 80217e6:	9b08      	ldr	r3, [sp, #32]
 80217e8:	6018      	str	r0, [r3, #0]
 80217ea:	4b09      	ldr	r3, [pc, #36]	@ (8021810 <__d2b+0xbc>)
 80217ec:	18f3      	adds	r3, r6, r3
 80217ee:	009b      	lsls	r3, r3, #2
 80217f0:	18e3      	adds	r3, r4, r3
 80217f2:	6958      	ldr	r0, [r3, #20]
 80217f4:	f7ff fcaa 	bl	802114c <__hi0bits>
 80217f8:	0176      	lsls	r6, r6, #5
 80217fa:	e7e3      	b.n	80217c4 <__d2b+0x70>
 80217fc:	08025039 	.word	0x08025039
 8021800:	080250aa 	.word	0x080250aa
 8021804:	0000030f 	.word	0x0000030f
 8021808:	fffffbcd 	.word	0xfffffbcd
 802180c:	fffffbce 	.word	0xfffffbce
 8021810:	3fffffff 	.word	0x3fffffff

08021814 <__ratio>:
 8021814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021816:	b087      	sub	sp, #28
 8021818:	000f      	movs	r7, r1
 802181a:	a904      	add	r1, sp, #16
 802181c:	0006      	movs	r6, r0
 802181e:	f7ff ff4d 	bl	80216bc <__b2d>
 8021822:	9000      	str	r0, [sp, #0]
 8021824:	9101      	str	r1, [sp, #4]
 8021826:	9b00      	ldr	r3, [sp, #0]
 8021828:	9c01      	ldr	r4, [sp, #4]
 802182a:	0038      	movs	r0, r7
 802182c:	a905      	add	r1, sp, #20
 802182e:	9302      	str	r3, [sp, #8]
 8021830:	9403      	str	r4, [sp, #12]
 8021832:	f7ff ff43 	bl	80216bc <__b2d>
 8021836:	000d      	movs	r5, r1
 8021838:	0002      	movs	r2, r0
 802183a:	000b      	movs	r3, r1
 802183c:	6930      	ldr	r0, [r6, #16]
 802183e:	6939      	ldr	r1, [r7, #16]
 8021840:	9e04      	ldr	r6, [sp, #16]
 8021842:	1a40      	subs	r0, r0, r1
 8021844:	9905      	ldr	r1, [sp, #20]
 8021846:	0140      	lsls	r0, r0, #5
 8021848:	1a71      	subs	r1, r6, r1
 802184a:	1841      	adds	r1, r0, r1
 802184c:	0508      	lsls	r0, r1, #20
 802184e:	2900      	cmp	r1, #0
 8021850:	dd08      	ble.n	8021864 <__ratio+0x50>
 8021852:	9901      	ldr	r1, [sp, #4]
 8021854:	1841      	adds	r1, r0, r1
 8021856:	9103      	str	r1, [sp, #12]
 8021858:	9802      	ldr	r0, [sp, #8]
 802185a:	9903      	ldr	r1, [sp, #12]
 802185c:	f7e0 faaa 	bl	8001db4 <__aeabi_ddiv>
 8021860:	b007      	add	sp, #28
 8021862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021864:	1a2b      	subs	r3, r5, r0
 8021866:	e7f7      	b.n	8021858 <__ratio+0x44>

08021868 <__copybits>:
 8021868:	b570      	push	{r4, r5, r6, lr}
 802186a:	0014      	movs	r4, r2
 802186c:	0005      	movs	r5, r0
 802186e:	3901      	subs	r1, #1
 8021870:	6913      	ldr	r3, [r2, #16]
 8021872:	1149      	asrs	r1, r1, #5
 8021874:	3101      	adds	r1, #1
 8021876:	0089      	lsls	r1, r1, #2
 8021878:	3414      	adds	r4, #20
 802187a:	009b      	lsls	r3, r3, #2
 802187c:	1841      	adds	r1, r0, r1
 802187e:	18e3      	adds	r3, r4, r3
 8021880:	42a3      	cmp	r3, r4
 8021882:	d80d      	bhi.n	80218a0 <__copybits+0x38>
 8021884:	0014      	movs	r4, r2
 8021886:	3411      	adds	r4, #17
 8021888:	2500      	movs	r5, #0
 802188a:	429c      	cmp	r4, r3
 802188c:	d803      	bhi.n	8021896 <__copybits+0x2e>
 802188e:	1a9b      	subs	r3, r3, r2
 8021890:	3b11      	subs	r3, #17
 8021892:	089b      	lsrs	r3, r3, #2
 8021894:	009d      	lsls	r5, r3, #2
 8021896:	2300      	movs	r3, #0
 8021898:	1940      	adds	r0, r0, r5
 802189a:	4281      	cmp	r1, r0
 802189c:	d803      	bhi.n	80218a6 <__copybits+0x3e>
 802189e:	bd70      	pop	{r4, r5, r6, pc}
 80218a0:	cc40      	ldmia	r4!, {r6}
 80218a2:	c540      	stmia	r5!, {r6}
 80218a4:	e7ec      	b.n	8021880 <__copybits+0x18>
 80218a6:	c008      	stmia	r0!, {r3}
 80218a8:	e7f7      	b.n	802189a <__copybits+0x32>

080218aa <__any_on>:
 80218aa:	0002      	movs	r2, r0
 80218ac:	6900      	ldr	r0, [r0, #16]
 80218ae:	b510      	push	{r4, lr}
 80218b0:	3214      	adds	r2, #20
 80218b2:	114b      	asrs	r3, r1, #5
 80218b4:	4298      	cmp	r0, r3
 80218b6:	db13      	blt.n	80218e0 <__any_on+0x36>
 80218b8:	dd0c      	ble.n	80218d4 <__any_on+0x2a>
 80218ba:	241f      	movs	r4, #31
 80218bc:	0008      	movs	r0, r1
 80218be:	4020      	ands	r0, r4
 80218c0:	4221      	tst	r1, r4
 80218c2:	d007      	beq.n	80218d4 <__any_on+0x2a>
 80218c4:	0099      	lsls	r1, r3, #2
 80218c6:	588c      	ldr	r4, [r1, r2]
 80218c8:	0021      	movs	r1, r4
 80218ca:	40c1      	lsrs	r1, r0
 80218cc:	4081      	lsls	r1, r0
 80218ce:	2001      	movs	r0, #1
 80218d0:	428c      	cmp	r4, r1
 80218d2:	d104      	bne.n	80218de <__any_on+0x34>
 80218d4:	009b      	lsls	r3, r3, #2
 80218d6:	18d3      	adds	r3, r2, r3
 80218d8:	4293      	cmp	r3, r2
 80218da:	d803      	bhi.n	80218e4 <__any_on+0x3a>
 80218dc:	2000      	movs	r0, #0
 80218de:	bd10      	pop	{r4, pc}
 80218e0:	0003      	movs	r3, r0
 80218e2:	e7f7      	b.n	80218d4 <__any_on+0x2a>
 80218e4:	3b04      	subs	r3, #4
 80218e6:	6819      	ldr	r1, [r3, #0]
 80218e8:	2900      	cmp	r1, #0
 80218ea:	d0f5      	beq.n	80218d8 <__any_on+0x2e>
 80218ec:	2001      	movs	r0, #1
 80218ee:	e7f6      	b.n	80218de <__any_on+0x34>

080218f0 <__ascii_wctomb>:
 80218f0:	0003      	movs	r3, r0
 80218f2:	1e08      	subs	r0, r1, #0
 80218f4:	d005      	beq.n	8021902 <__ascii_wctomb+0x12>
 80218f6:	2aff      	cmp	r2, #255	@ 0xff
 80218f8:	d904      	bls.n	8021904 <__ascii_wctomb+0x14>
 80218fa:	228a      	movs	r2, #138	@ 0x8a
 80218fc:	2001      	movs	r0, #1
 80218fe:	601a      	str	r2, [r3, #0]
 8021900:	4240      	negs	r0, r0
 8021902:	4770      	bx	lr
 8021904:	2001      	movs	r0, #1
 8021906:	700a      	strb	r2, [r1, #0]
 8021908:	e7fb      	b.n	8021902 <__ascii_wctomb+0x12>
	...

0802190c <__ssputs_r>:
 802190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802190e:	688e      	ldr	r6, [r1, #8]
 8021910:	b085      	sub	sp, #20
 8021912:	001f      	movs	r7, r3
 8021914:	000c      	movs	r4, r1
 8021916:	680b      	ldr	r3, [r1, #0]
 8021918:	9002      	str	r0, [sp, #8]
 802191a:	9203      	str	r2, [sp, #12]
 802191c:	42be      	cmp	r6, r7
 802191e:	d830      	bhi.n	8021982 <__ssputs_r+0x76>
 8021920:	210c      	movs	r1, #12
 8021922:	5e62      	ldrsh	r2, [r4, r1]
 8021924:	2190      	movs	r1, #144	@ 0x90
 8021926:	00c9      	lsls	r1, r1, #3
 8021928:	420a      	tst	r2, r1
 802192a:	d028      	beq.n	802197e <__ssputs_r+0x72>
 802192c:	2003      	movs	r0, #3
 802192e:	6921      	ldr	r1, [r4, #16]
 8021930:	1a5b      	subs	r3, r3, r1
 8021932:	9301      	str	r3, [sp, #4]
 8021934:	6963      	ldr	r3, [r4, #20]
 8021936:	4343      	muls	r3, r0
 8021938:	9801      	ldr	r0, [sp, #4]
 802193a:	0fdd      	lsrs	r5, r3, #31
 802193c:	18ed      	adds	r5, r5, r3
 802193e:	1c7b      	adds	r3, r7, #1
 8021940:	181b      	adds	r3, r3, r0
 8021942:	106d      	asrs	r5, r5, #1
 8021944:	42ab      	cmp	r3, r5
 8021946:	d900      	bls.n	802194a <__ssputs_r+0x3e>
 8021948:	001d      	movs	r5, r3
 802194a:	0552      	lsls	r2, r2, #21
 802194c:	d528      	bpl.n	80219a0 <__ssputs_r+0x94>
 802194e:	0029      	movs	r1, r5
 8021950:	9802      	ldr	r0, [sp, #8]
 8021952:	f7ff fa61 	bl	8020e18 <_malloc_r>
 8021956:	1e06      	subs	r6, r0, #0
 8021958:	d02c      	beq.n	80219b4 <__ssputs_r+0xa8>
 802195a:	9a01      	ldr	r2, [sp, #4]
 802195c:	6921      	ldr	r1, [r4, #16]
 802195e:	f7fd fff9 	bl	801f954 <memcpy>
 8021962:	89a2      	ldrh	r2, [r4, #12]
 8021964:	4b18      	ldr	r3, [pc, #96]	@ (80219c8 <__ssputs_r+0xbc>)
 8021966:	401a      	ands	r2, r3
 8021968:	2380      	movs	r3, #128	@ 0x80
 802196a:	4313      	orrs	r3, r2
 802196c:	81a3      	strh	r3, [r4, #12]
 802196e:	9b01      	ldr	r3, [sp, #4]
 8021970:	6126      	str	r6, [r4, #16]
 8021972:	18f6      	adds	r6, r6, r3
 8021974:	6026      	str	r6, [r4, #0]
 8021976:	003e      	movs	r6, r7
 8021978:	6165      	str	r5, [r4, #20]
 802197a:	1aed      	subs	r5, r5, r3
 802197c:	60a5      	str	r5, [r4, #8]
 802197e:	42be      	cmp	r6, r7
 8021980:	d900      	bls.n	8021984 <__ssputs_r+0x78>
 8021982:	003e      	movs	r6, r7
 8021984:	0032      	movs	r2, r6
 8021986:	9903      	ldr	r1, [sp, #12]
 8021988:	6820      	ldr	r0, [r4, #0]
 802198a:	f000 fb7e 	bl	802208a <memmove>
 802198e:	2000      	movs	r0, #0
 8021990:	68a3      	ldr	r3, [r4, #8]
 8021992:	1b9b      	subs	r3, r3, r6
 8021994:	60a3      	str	r3, [r4, #8]
 8021996:	6823      	ldr	r3, [r4, #0]
 8021998:	199b      	adds	r3, r3, r6
 802199a:	6023      	str	r3, [r4, #0]
 802199c:	b005      	add	sp, #20
 802199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80219a0:	002a      	movs	r2, r5
 80219a2:	9802      	ldr	r0, [sp, #8]
 80219a4:	f000 fc05 	bl	80221b2 <_realloc_r>
 80219a8:	1e06      	subs	r6, r0, #0
 80219aa:	d1e0      	bne.n	802196e <__ssputs_r+0x62>
 80219ac:	6921      	ldr	r1, [r4, #16]
 80219ae:	9802      	ldr	r0, [sp, #8]
 80219b0:	f7fe fe62 	bl	8020678 <_free_r>
 80219b4:	230c      	movs	r3, #12
 80219b6:	2001      	movs	r0, #1
 80219b8:	9a02      	ldr	r2, [sp, #8]
 80219ba:	4240      	negs	r0, r0
 80219bc:	6013      	str	r3, [r2, #0]
 80219be:	89a2      	ldrh	r2, [r4, #12]
 80219c0:	3334      	adds	r3, #52	@ 0x34
 80219c2:	4313      	orrs	r3, r2
 80219c4:	81a3      	strh	r3, [r4, #12]
 80219c6:	e7e9      	b.n	802199c <__ssputs_r+0x90>
 80219c8:	fffffb7f 	.word	0xfffffb7f

080219cc <_svfiprintf_r>:
 80219cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219ce:	b0a1      	sub	sp, #132	@ 0x84
 80219d0:	9003      	str	r0, [sp, #12]
 80219d2:	001d      	movs	r5, r3
 80219d4:	898b      	ldrh	r3, [r1, #12]
 80219d6:	000f      	movs	r7, r1
 80219d8:	0016      	movs	r6, r2
 80219da:	061b      	lsls	r3, r3, #24
 80219dc:	d511      	bpl.n	8021a02 <_svfiprintf_r+0x36>
 80219de:	690b      	ldr	r3, [r1, #16]
 80219e0:	2b00      	cmp	r3, #0
 80219e2:	d10e      	bne.n	8021a02 <_svfiprintf_r+0x36>
 80219e4:	2140      	movs	r1, #64	@ 0x40
 80219e6:	f7ff fa17 	bl	8020e18 <_malloc_r>
 80219ea:	6038      	str	r0, [r7, #0]
 80219ec:	6138      	str	r0, [r7, #16]
 80219ee:	2800      	cmp	r0, #0
 80219f0:	d105      	bne.n	80219fe <_svfiprintf_r+0x32>
 80219f2:	230c      	movs	r3, #12
 80219f4:	9a03      	ldr	r2, [sp, #12]
 80219f6:	6013      	str	r3, [r2, #0]
 80219f8:	2001      	movs	r0, #1
 80219fa:	4240      	negs	r0, r0
 80219fc:	e0cf      	b.n	8021b9e <_svfiprintf_r+0x1d2>
 80219fe:	2340      	movs	r3, #64	@ 0x40
 8021a00:	617b      	str	r3, [r7, #20]
 8021a02:	2300      	movs	r3, #0
 8021a04:	ac08      	add	r4, sp, #32
 8021a06:	6163      	str	r3, [r4, #20]
 8021a08:	3320      	adds	r3, #32
 8021a0a:	7663      	strb	r3, [r4, #25]
 8021a0c:	3310      	adds	r3, #16
 8021a0e:	76a3      	strb	r3, [r4, #26]
 8021a10:	9507      	str	r5, [sp, #28]
 8021a12:	0035      	movs	r5, r6
 8021a14:	782b      	ldrb	r3, [r5, #0]
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d001      	beq.n	8021a1e <_svfiprintf_r+0x52>
 8021a1a:	2b25      	cmp	r3, #37	@ 0x25
 8021a1c:	d148      	bne.n	8021ab0 <_svfiprintf_r+0xe4>
 8021a1e:	1bab      	subs	r3, r5, r6
 8021a20:	9305      	str	r3, [sp, #20]
 8021a22:	42b5      	cmp	r5, r6
 8021a24:	d00b      	beq.n	8021a3e <_svfiprintf_r+0x72>
 8021a26:	0032      	movs	r2, r6
 8021a28:	0039      	movs	r1, r7
 8021a2a:	9803      	ldr	r0, [sp, #12]
 8021a2c:	f7ff ff6e 	bl	802190c <__ssputs_r>
 8021a30:	3001      	adds	r0, #1
 8021a32:	d100      	bne.n	8021a36 <_svfiprintf_r+0x6a>
 8021a34:	e0ae      	b.n	8021b94 <_svfiprintf_r+0x1c8>
 8021a36:	6963      	ldr	r3, [r4, #20]
 8021a38:	9a05      	ldr	r2, [sp, #20]
 8021a3a:	189b      	adds	r3, r3, r2
 8021a3c:	6163      	str	r3, [r4, #20]
 8021a3e:	782b      	ldrb	r3, [r5, #0]
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	d100      	bne.n	8021a46 <_svfiprintf_r+0x7a>
 8021a44:	e0a6      	b.n	8021b94 <_svfiprintf_r+0x1c8>
 8021a46:	2201      	movs	r2, #1
 8021a48:	2300      	movs	r3, #0
 8021a4a:	4252      	negs	r2, r2
 8021a4c:	6062      	str	r2, [r4, #4]
 8021a4e:	a904      	add	r1, sp, #16
 8021a50:	3254      	adds	r2, #84	@ 0x54
 8021a52:	1852      	adds	r2, r2, r1
 8021a54:	1c6e      	adds	r6, r5, #1
 8021a56:	6023      	str	r3, [r4, #0]
 8021a58:	60e3      	str	r3, [r4, #12]
 8021a5a:	60a3      	str	r3, [r4, #8]
 8021a5c:	7013      	strb	r3, [r2, #0]
 8021a5e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021a60:	4b54      	ldr	r3, [pc, #336]	@ (8021bb4 <_svfiprintf_r+0x1e8>)
 8021a62:	2205      	movs	r2, #5
 8021a64:	0018      	movs	r0, r3
 8021a66:	7831      	ldrb	r1, [r6, #0]
 8021a68:	9305      	str	r3, [sp, #20]
 8021a6a:	f7fd ff68 	bl	801f93e <memchr>
 8021a6e:	1c75      	adds	r5, r6, #1
 8021a70:	2800      	cmp	r0, #0
 8021a72:	d11f      	bne.n	8021ab4 <_svfiprintf_r+0xe8>
 8021a74:	6822      	ldr	r2, [r4, #0]
 8021a76:	06d3      	lsls	r3, r2, #27
 8021a78:	d504      	bpl.n	8021a84 <_svfiprintf_r+0xb8>
 8021a7a:	2353      	movs	r3, #83	@ 0x53
 8021a7c:	a904      	add	r1, sp, #16
 8021a7e:	185b      	adds	r3, r3, r1
 8021a80:	2120      	movs	r1, #32
 8021a82:	7019      	strb	r1, [r3, #0]
 8021a84:	0713      	lsls	r3, r2, #28
 8021a86:	d504      	bpl.n	8021a92 <_svfiprintf_r+0xc6>
 8021a88:	2353      	movs	r3, #83	@ 0x53
 8021a8a:	a904      	add	r1, sp, #16
 8021a8c:	185b      	adds	r3, r3, r1
 8021a8e:	212b      	movs	r1, #43	@ 0x2b
 8021a90:	7019      	strb	r1, [r3, #0]
 8021a92:	7833      	ldrb	r3, [r6, #0]
 8021a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a96:	d016      	beq.n	8021ac6 <_svfiprintf_r+0xfa>
 8021a98:	0035      	movs	r5, r6
 8021a9a:	2100      	movs	r1, #0
 8021a9c:	200a      	movs	r0, #10
 8021a9e:	68e3      	ldr	r3, [r4, #12]
 8021aa0:	782a      	ldrb	r2, [r5, #0]
 8021aa2:	1c6e      	adds	r6, r5, #1
 8021aa4:	3a30      	subs	r2, #48	@ 0x30
 8021aa6:	2a09      	cmp	r2, #9
 8021aa8:	d950      	bls.n	8021b4c <_svfiprintf_r+0x180>
 8021aaa:	2900      	cmp	r1, #0
 8021aac:	d111      	bne.n	8021ad2 <_svfiprintf_r+0x106>
 8021aae:	e017      	b.n	8021ae0 <_svfiprintf_r+0x114>
 8021ab0:	3501      	adds	r5, #1
 8021ab2:	e7af      	b.n	8021a14 <_svfiprintf_r+0x48>
 8021ab4:	9b05      	ldr	r3, [sp, #20]
 8021ab6:	6822      	ldr	r2, [r4, #0]
 8021ab8:	1ac0      	subs	r0, r0, r3
 8021aba:	2301      	movs	r3, #1
 8021abc:	4083      	lsls	r3, r0
 8021abe:	4313      	orrs	r3, r2
 8021ac0:	002e      	movs	r6, r5
 8021ac2:	6023      	str	r3, [r4, #0]
 8021ac4:	e7cc      	b.n	8021a60 <_svfiprintf_r+0x94>
 8021ac6:	9b07      	ldr	r3, [sp, #28]
 8021ac8:	1d19      	adds	r1, r3, #4
 8021aca:	681b      	ldr	r3, [r3, #0]
 8021acc:	9107      	str	r1, [sp, #28]
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	db01      	blt.n	8021ad6 <_svfiprintf_r+0x10a>
 8021ad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021ad4:	e004      	b.n	8021ae0 <_svfiprintf_r+0x114>
 8021ad6:	425b      	negs	r3, r3
 8021ad8:	60e3      	str	r3, [r4, #12]
 8021ada:	2302      	movs	r3, #2
 8021adc:	4313      	orrs	r3, r2
 8021ade:	6023      	str	r3, [r4, #0]
 8021ae0:	782b      	ldrb	r3, [r5, #0]
 8021ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8021ae4:	d10c      	bne.n	8021b00 <_svfiprintf_r+0x134>
 8021ae6:	786b      	ldrb	r3, [r5, #1]
 8021ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8021aea:	d134      	bne.n	8021b56 <_svfiprintf_r+0x18a>
 8021aec:	9b07      	ldr	r3, [sp, #28]
 8021aee:	3502      	adds	r5, #2
 8021af0:	1d1a      	adds	r2, r3, #4
 8021af2:	681b      	ldr	r3, [r3, #0]
 8021af4:	9207      	str	r2, [sp, #28]
 8021af6:	2b00      	cmp	r3, #0
 8021af8:	da01      	bge.n	8021afe <_svfiprintf_r+0x132>
 8021afa:	2301      	movs	r3, #1
 8021afc:	425b      	negs	r3, r3
 8021afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b00:	4e2d      	ldr	r6, [pc, #180]	@ (8021bb8 <_svfiprintf_r+0x1ec>)
 8021b02:	2203      	movs	r2, #3
 8021b04:	0030      	movs	r0, r6
 8021b06:	7829      	ldrb	r1, [r5, #0]
 8021b08:	f7fd ff19 	bl	801f93e <memchr>
 8021b0c:	2800      	cmp	r0, #0
 8021b0e:	d006      	beq.n	8021b1e <_svfiprintf_r+0x152>
 8021b10:	2340      	movs	r3, #64	@ 0x40
 8021b12:	1b80      	subs	r0, r0, r6
 8021b14:	4083      	lsls	r3, r0
 8021b16:	6822      	ldr	r2, [r4, #0]
 8021b18:	3501      	adds	r5, #1
 8021b1a:	4313      	orrs	r3, r2
 8021b1c:	6023      	str	r3, [r4, #0]
 8021b1e:	7829      	ldrb	r1, [r5, #0]
 8021b20:	2206      	movs	r2, #6
 8021b22:	4826      	ldr	r0, [pc, #152]	@ (8021bbc <_svfiprintf_r+0x1f0>)
 8021b24:	1c6e      	adds	r6, r5, #1
 8021b26:	7621      	strb	r1, [r4, #24]
 8021b28:	f7fd ff09 	bl	801f93e <memchr>
 8021b2c:	2800      	cmp	r0, #0
 8021b2e:	d038      	beq.n	8021ba2 <_svfiprintf_r+0x1d6>
 8021b30:	4b23      	ldr	r3, [pc, #140]	@ (8021bc0 <_svfiprintf_r+0x1f4>)
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d122      	bne.n	8021b7c <_svfiprintf_r+0x1b0>
 8021b36:	2207      	movs	r2, #7
 8021b38:	9b07      	ldr	r3, [sp, #28]
 8021b3a:	3307      	adds	r3, #7
 8021b3c:	4393      	bics	r3, r2
 8021b3e:	3308      	adds	r3, #8
 8021b40:	9307      	str	r3, [sp, #28]
 8021b42:	6963      	ldr	r3, [r4, #20]
 8021b44:	9a04      	ldr	r2, [sp, #16]
 8021b46:	189b      	adds	r3, r3, r2
 8021b48:	6163      	str	r3, [r4, #20]
 8021b4a:	e762      	b.n	8021a12 <_svfiprintf_r+0x46>
 8021b4c:	4343      	muls	r3, r0
 8021b4e:	0035      	movs	r5, r6
 8021b50:	2101      	movs	r1, #1
 8021b52:	189b      	adds	r3, r3, r2
 8021b54:	e7a4      	b.n	8021aa0 <_svfiprintf_r+0xd4>
 8021b56:	2300      	movs	r3, #0
 8021b58:	200a      	movs	r0, #10
 8021b5a:	0019      	movs	r1, r3
 8021b5c:	3501      	adds	r5, #1
 8021b5e:	6063      	str	r3, [r4, #4]
 8021b60:	782a      	ldrb	r2, [r5, #0]
 8021b62:	1c6e      	adds	r6, r5, #1
 8021b64:	3a30      	subs	r2, #48	@ 0x30
 8021b66:	2a09      	cmp	r2, #9
 8021b68:	d903      	bls.n	8021b72 <_svfiprintf_r+0x1a6>
 8021b6a:	2b00      	cmp	r3, #0
 8021b6c:	d0c8      	beq.n	8021b00 <_svfiprintf_r+0x134>
 8021b6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8021b70:	e7c6      	b.n	8021b00 <_svfiprintf_r+0x134>
 8021b72:	4341      	muls	r1, r0
 8021b74:	0035      	movs	r5, r6
 8021b76:	2301      	movs	r3, #1
 8021b78:	1889      	adds	r1, r1, r2
 8021b7a:	e7f1      	b.n	8021b60 <_svfiprintf_r+0x194>
 8021b7c:	aa07      	add	r2, sp, #28
 8021b7e:	9200      	str	r2, [sp, #0]
 8021b80:	0021      	movs	r1, r4
 8021b82:	003a      	movs	r2, r7
 8021b84:	4b0f      	ldr	r3, [pc, #60]	@ (8021bc4 <_svfiprintf_r+0x1f8>)
 8021b86:	9803      	ldr	r0, [sp, #12]
 8021b88:	f7fc ffd4 	bl	801eb34 <_printf_float>
 8021b8c:	9004      	str	r0, [sp, #16]
 8021b8e:	9b04      	ldr	r3, [sp, #16]
 8021b90:	3301      	adds	r3, #1
 8021b92:	d1d6      	bne.n	8021b42 <_svfiprintf_r+0x176>
 8021b94:	89bb      	ldrh	r3, [r7, #12]
 8021b96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021b98:	065b      	lsls	r3, r3, #25
 8021b9a:	d500      	bpl.n	8021b9e <_svfiprintf_r+0x1d2>
 8021b9c:	e72c      	b.n	80219f8 <_svfiprintf_r+0x2c>
 8021b9e:	b021      	add	sp, #132	@ 0x84
 8021ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ba2:	aa07      	add	r2, sp, #28
 8021ba4:	9200      	str	r2, [sp, #0]
 8021ba6:	0021      	movs	r1, r4
 8021ba8:	003a      	movs	r2, r7
 8021baa:	4b06      	ldr	r3, [pc, #24]	@ (8021bc4 <_svfiprintf_r+0x1f8>)
 8021bac:	9803      	ldr	r0, [sp, #12]
 8021bae:	f7fd fa6f 	bl	801f090 <_printf_i>
 8021bb2:	e7eb      	b.n	8021b8c <_svfiprintf_r+0x1c0>
 8021bb4:	08025200 	.word	0x08025200
 8021bb8:	08025206 	.word	0x08025206
 8021bbc:	0802520a 	.word	0x0802520a
 8021bc0:	0801eb35 	.word	0x0801eb35
 8021bc4:	0802190d 	.word	0x0802190d

08021bc8 <__sfputc_r>:
 8021bc8:	6893      	ldr	r3, [r2, #8]
 8021bca:	b510      	push	{r4, lr}
 8021bcc:	3b01      	subs	r3, #1
 8021bce:	6093      	str	r3, [r2, #8]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	da04      	bge.n	8021bde <__sfputc_r+0x16>
 8021bd4:	6994      	ldr	r4, [r2, #24]
 8021bd6:	42a3      	cmp	r3, r4
 8021bd8:	db07      	blt.n	8021bea <__sfputc_r+0x22>
 8021bda:	290a      	cmp	r1, #10
 8021bdc:	d005      	beq.n	8021bea <__sfputc_r+0x22>
 8021bde:	6813      	ldr	r3, [r2, #0]
 8021be0:	1c58      	adds	r0, r3, #1
 8021be2:	6010      	str	r0, [r2, #0]
 8021be4:	7019      	strb	r1, [r3, #0]
 8021be6:	0008      	movs	r0, r1
 8021be8:	bd10      	pop	{r4, pc}
 8021bea:	f7fd fd37 	bl	801f65c <__swbuf_r>
 8021bee:	0001      	movs	r1, r0
 8021bf0:	e7f9      	b.n	8021be6 <__sfputc_r+0x1e>

08021bf2 <__sfputs_r>:
 8021bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bf4:	0006      	movs	r6, r0
 8021bf6:	000f      	movs	r7, r1
 8021bf8:	0014      	movs	r4, r2
 8021bfa:	18d5      	adds	r5, r2, r3
 8021bfc:	42ac      	cmp	r4, r5
 8021bfe:	d101      	bne.n	8021c04 <__sfputs_r+0x12>
 8021c00:	2000      	movs	r0, #0
 8021c02:	e007      	b.n	8021c14 <__sfputs_r+0x22>
 8021c04:	7821      	ldrb	r1, [r4, #0]
 8021c06:	003a      	movs	r2, r7
 8021c08:	0030      	movs	r0, r6
 8021c0a:	f7ff ffdd 	bl	8021bc8 <__sfputc_r>
 8021c0e:	3401      	adds	r4, #1
 8021c10:	1c43      	adds	r3, r0, #1
 8021c12:	d1f3      	bne.n	8021bfc <__sfputs_r+0xa>
 8021c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021c18 <_vfiprintf_r>:
 8021c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c1a:	b0a1      	sub	sp, #132	@ 0x84
 8021c1c:	000f      	movs	r7, r1
 8021c1e:	0015      	movs	r5, r2
 8021c20:	001e      	movs	r6, r3
 8021c22:	9003      	str	r0, [sp, #12]
 8021c24:	2800      	cmp	r0, #0
 8021c26:	d004      	beq.n	8021c32 <_vfiprintf_r+0x1a>
 8021c28:	6a03      	ldr	r3, [r0, #32]
 8021c2a:	2b00      	cmp	r3, #0
 8021c2c:	d101      	bne.n	8021c32 <_vfiprintf_r+0x1a>
 8021c2e:	f7fd fbcd 	bl	801f3cc <__sinit>
 8021c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021c34:	07db      	lsls	r3, r3, #31
 8021c36:	d405      	bmi.n	8021c44 <_vfiprintf_r+0x2c>
 8021c38:	89bb      	ldrh	r3, [r7, #12]
 8021c3a:	059b      	lsls	r3, r3, #22
 8021c3c:	d402      	bmi.n	8021c44 <_vfiprintf_r+0x2c>
 8021c3e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021c40:	f7fd fe7b 	bl	801f93a <__retarget_lock_acquire_recursive>
 8021c44:	89bb      	ldrh	r3, [r7, #12]
 8021c46:	071b      	lsls	r3, r3, #28
 8021c48:	d502      	bpl.n	8021c50 <_vfiprintf_r+0x38>
 8021c4a:	693b      	ldr	r3, [r7, #16]
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	d113      	bne.n	8021c78 <_vfiprintf_r+0x60>
 8021c50:	0039      	movs	r1, r7
 8021c52:	9803      	ldr	r0, [sp, #12]
 8021c54:	f7fd fd44 	bl	801f6e0 <__swsetup_r>
 8021c58:	2800      	cmp	r0, #0
 8021c5a:	d00d      	beq.n	8021c78 <_vfiprintf_r+0x60>
 8021c5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021c5e:	07db      	lsls	r3, r3, #31
 8021c60:	d503      	bpl.n	8021c6a <_vfiprintf_r+0x52>
 8021c62:	2001      	movs	r0, #1
 8021c64:	4240      	negs	r0, r0
 8021c66:	b021      	add	sp, #132	@ 0x84
 8021c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c6a:	89bb      	ldrh	r3, [r7, #12]
 8021c6c:	059b      	lsls	r3, r3, #22
 8021c6e:	d4f8      	bmi.n	8021c62 <_vfiprintf_r+0x4a>
 8021c70:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021c72:	f7fd fe63 	bl	801f93c <__retarget_lock_release_recursive>
 8021c76:	e7f4      	b.n	8021c62 <_vfiprintf_r+0x4a>
 8021c78:	2300      	movs	r3, #0
 8021c7a:	ac08      	add	r4, sp, #32
 8021c7c:	6163      	str	r3, [r4, #20]
 8021c7e:	3320      	adds	r3, #32
 8021c80:	7663      	strb	r3, [r4, #25]
 8021c82:	3310      	adds	r3, #16
 8021c84:	76a3      	strb	r3, [r4, #26]
 8021c86:	9607      	str	r6, [sp, #28]
 8021c88:	002e      	movs	r6, r5
 8021c8a:	7833      	ldrb	r3, [r6, #0]
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d001      	beq.n	8021c94 <_vfiprintf_r+0x7c>
 8021c90:	2b25      	cmp	r3, #37	@ 0x25
 8021c92:	d148      	bne.n	8021d26 <_vfiprintf_r+0x10e>
 8021c94:	1b73      	subs	r3, r6, r5
 8021c96:	9305      	str	r3, [sp, #20]
 8021c98:	42ae      	cmp	r6, r5
 8021c9a:	d00b      	beq.n	8021cb4 <_vfiprintf_r+0x9c>
 8021c9c:	002a      	movs	r2, r5
 8021c9e:	0039      	movs	r1, r7
 8021ca0:	9803      	ldr	r0, [sp, #12]
 8021ca2:	f7ff ffa6 	bl	8021bf2 <__sfputs_r>
 8021ca6:	3001      	adds	r0, #1
 8021ca8:	d100      	bne.n	8021cac <_vfiprintf_r+0x94>
 8021caa:	e0ae      	b.n	8021e0a <_vfiprintf_r+0x1f2>
 8021cac:	6963      	ldr	r3, [r4, #20]
 8021cae:	9a05      	ldr	r2, [sp, #20]
 8021cb0:	189b      	adds	r3, r3, r2
 8021cb2:	6163      	str	r3, [r4, #20]
 8021cb4:	7833      	ldrb	r3, [r6, #0]
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d100      	bne.n	8021cbc <_vfiprintf_r+0xa4>
 8021cba:	e0a6      	b.n	8021e0a <_vfiprintf_r+0x1f2>
 8021cbc:	2201      	movs	r2, #1
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	4252      	negs	r2, r2
 8021cc2:	6062      	str	r2, [r4, #4]
 8021cc4:	a904      	add	r1, sp, #16
 8021cc6:	3254      	adds	r2, #84	@ 0x54
 8021cc8:	1852      	adds	r2, r2, r1
 8021cca:	1c75      	adds	r5, r6, #1
 8021ccc:	6023      	str	r3, [r4, #0]
 8021cce:	60e3      	str	r3, [r4, #12]
 8021cd0:	60a3      	str	r3, [r4, #8]
 8021cd2:	7013      	strb	r3, [r2, #0]
 8021cd4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021cd6:	4b59      	ldr	r3, [pc, #356]	@ (8021e3c <_vfiprintf_r+0x224>)
 8021cd8:	2205      	movs	r2, #5
 8021cda:	0018      	movs	r0, r3
 8021cdc:	7829      	ldrb	r1, [r5, #0]
 8021cde:	9305      	str	r3, [sp, #20]
 8021ce0:	f7fd fe2d 	bl	801f93e <memchr>
 8021ce4:	1c6e      	adds	r6, r5, #1
 8021ce6:	2800      	cmp	r0, #0
 8021ce8:	d11f      	bne.n	8021d2a <_vfiprintf_r+0x112>
 8021cea:	6822      	ldr	r2, [r4, #0]
 8021cec:	06d3      	lsls	r3, r2, #27
 8021cee:	d504      	bpl.n	8021cfa <_vfiprintf_r+0xe2>
 8021cf0:	2353      	movs	r3, #83	@ 0x53
 8021cf2:	a904      	add	r1, sp, #16
 8021cf4:	185b      	adds	r3, r3, r1
 8021cf6:	2120      	movs	r1, #32
 8021cf8:	7019      	strb	r1, [r3, #0]
 8021cfa:	0713      	lsls	r3, r2, #28
 8021cfc:	d504      	bpl.n	8021d08 <_vfiprintf_r+0xf0>
 8021cfe:	2353      	movs	r3, #83	@ 0x53
 8021d00:	a904      	add	r1, sp, #16
 8021d02:	185b      	adds	r3, r3, r1
 8021d04:	212b      	movs	r1, #43	@ 0x2b
 8021d06:	7019      	strb	r1, [r3, #0]
 8021d08:	782b      	ldrb	r3, [r5, #0]
 8021d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8021d0c:	d016      	beq.n	8021d3c <_vfiprintf_r+0x124>
 8021d0e:	002e      	movs	r6, r5
 8021d10:	2100      	movs	r1, #0
 8021d12:	200a      	movs	r0, #10
 8021d14:	68e3      	ldr	r3, [r4, #12]
 8021d16:	7832      	ldrb	r2, [r6, #0]
 8021d18:	1c75      	adds	r5, r6, #1
 8021d1a:	3a30      	subs	r2, #48	@ 0x30
 8021d1c:	2a09      	cmp	r2, #9
 8021d1e:	d950      	bls.n	8021dc2 <_vfiprintf_r+0x1aa>
 8021d20:	2900      	cmp	r1, #0
 8021d22:	d111      	bne.n	8021d48 <_vfiprintf_r+0x130>
 8021d24:	e017      	b.n	8021d56 <_vfiprintf_r+0x13e>
 8021d26:	3601      	adds	r6, #1
 8021d28:	e7af      	b.n	8021c8a <_vfiprintf_r+0x72>
 8021d2a:	9b05      	ldr	r3, [sp, #20]
 8021d2c:	6822      	ldr	r2, [r4, #0]
 8021d2e:	1ac0      	subs	r0, r0, r3
 8021d30:	2301      	movs	r3, #1
 8021d32:	4083      	lsls	r3, r0
 8021d34:	4313      	orrs	r3, r2
 8021d36:	0035      	movs	r5, r6
 8021d38:	6023      	str	r3, [r4, #0]
 8021d3a:	e7cc      	b.n	8021cd6 <_vfiprintf_r+0xbe>
 8021d3c:	9b07      	ldr	r3, [sp, #28]
 8021d3e:	1d19      	adds	r1, r3, #4
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	9107      	str	r1, [sp, #28]
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	db01      	blt.n	8021d4c <_vfiprintf_r+0x134>
 8021d48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d4a:	e004      	b.n	8021d56 <_vfiprintf_r+0x13e>
 8021d4c:	425b      	negs	r3, r3
 8021d4e:	60e3      	str	r3, [r4, #12]
 8021d50:	2302      	movs	r3, #2
 8021d52:	4313      	orrs	r3, r2
 8021d54:	6023      	str	r3, [r4, #0]
 8021d56:	7833      	ldrb	r3, [r6, #0]
 8021d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d5a:	d10c      	bne.n	8021d76 <_vfiprintf_r+0x15e>
 8021d5c:	7873      	ldrb	r3, [r6, #1]
 8021d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021d60:	d134      	bne.n	8021dcc <_vfiprintf_r+0x1b4>
 8021d62:	9b07      	ldr	r3, [sp, #28]
 8021d64:	3602      	adds	r6, #2
 8021d66:	1d1a      	adds	r2, r3, #4
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	9207      	str	r2, [sp, #28]
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	da01      	bge.n	8021d74 <_vfiprintf_r+0x15c>
 8021d70:	2301      	movs	r3, #1
 8021d72:	425b      	negs	r3, r3
 8021d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d76:	4d32      	ldr	r5, [pc, #200]	@ (8021e40 <_vfiprintf_r+0x228>)
 8021d78:	2203      	movs	r2, #3
 8021d7a:	0028      	movs	r0, r5
 8021d7c:	7831      	ldrb	r1, [r6, #0]
 8021d7e:	f7fd fdde 	bl	801f93e <memchr>
 8021d82:	2800      	cmp	r0, #0
 8021d84:	d006      	beq.n	8021d94 <_vfiprintf_r+0x17c>
 8021d86:	2340      	movs	r3, #64	@ 0x40
 8021d88:	1b40      	subs	r0, r0, r5
 8021d8a:	4083      	lsls	r3, r0
 8021d8c:	6822      	ldr	r2, [r4, #0]
 8021d8e:	3601      	adds	r6, #1
 8021d90:	4313      	orrs	r3, r2
 8021d92:	6023      	str	r3, [r4, #0]
 8021d94:	7831      	ldrb	r1, [r6, #0]
 8021d96:	2206      	movs	r2, #6
 8021d98:	482a      	ldr	r0, [pc, #168]	@ (8021e44 <_vfiprintf_r+0x22c>)
 8021d9a:	1c75      	adds	r5, r6, #1
 8021d9c:	7621      	strb	r1, [r4, #24]
 8021d9e:	f7fd fdce 	bl	801f93e <memchr>
 8021da2:	2800      	cmp	r0, #0
 8021da4:	d040      	beq.n	8021e28 <_vfiprintf_r+0x210>
 8021da6:	4b28      	ldr	r3, [pc, #160]	@ (8021e48 <_vfiprintf_r+0x230>)
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d122      	bne.n	8021df2 <_vfiprintf_r+0x1da>
 8021dac:	2207      	movs	r2, #7
 8021dae:	9b07      	ldr	r3, [sp, #28]
 8021db0:	3307      	adds	r3, #7
 8021db2:	4393      	bics	r3, r2
 8021db4:	3308      	adds	r3, #8
 8021db6:	9307      	str	r3, [sp, #28]
 8021db8:	6963      	ldr	r3, [r4, #20]
 8021dba:	9a04      	ldr	r2, [sp, #16]
 8021dbc:	189b      	adds	r3, r3, r2
 8021dbe:	6163      	str	r3, [r4, #20]
 8021dc0:	e762      	b.n	8021c88 <_vfiprintf_r+0x70>
 8021dc2:	4343      	muls	r3, r0
 8021dc4:	002e      	movs	r6, r5
 8021dc6:	2101      	movs	r1, #1
 8021dc8:	189b      	adds	r3, r3, r2
 8021dca:	e7a4      	b.n	8021d16 <_vfiprintf_r+0xfe>
 8021dcc:	2300      	movs	r3, #0
 8021dce:	200a      	movs	r0, #10
 8021dd0:	0019      	movs	r1, r3
 8021dd2:	3601      	adds	r6, #1
 8021dd4:	6063      	str	r3, [r4, #4]
 8021dd6:	7832      	ldrb	r2, [r6, #0]
 8021dd8:	1c75      	adds	r5, r6, #1
 8021dda:	3a30      	subs	r2, #48	@ 0x30
 8021ddc:	2a09      	cmp	r2, #9
 8021dde:	d903      	bls.n	8021de8 <_vfiprintf_r+0x1d0>
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d0c8      	beq.n	8021d76 <_vfiprintf_r+0x15e>
 8021de4:	9109      	str	r1, [sp, #36]	@ 0x24
 8021de6:	e7c6      	b.n	8021d76 <_vfiprintf_r+0x15e>
 8021de8:	4341      	muls	r1, r0
 8021dea:	002e      	movs	r6, r5
 8021dec:	2301      	movs	r3, #1
 8021dee:	1889      	adds	r1, r1, r2
 8021df0:	e7f1      	b.n	8021dd6 <_vfiprintf_r+0x1be>
 8021df2:	aa07      	add	r2, sp, #28
 8021df4:	9200      	str	r2, [sp, #0]
 8021df6:	0021      	movs	r1, r4
 8021df8:	003a      	movs	r2, r7
 8021dfa:	4b14      	ldr	r3, [pc, #80]	@ (8021e4c <_vfiprintf_r+0x234>)
 8021dfc:	9803      	ldr	r0, [sp, #12]
 8021dfe:	f7fc fe99 	bl	801eb34 <_printf_float>
 8021e02:	9004      	str	r0, [sp, #16]
 8021e04:	9b04      	ldr	r3, [sp, #16]
 8021e06:	3301      	adds	r3, #1
 8021e08:	d1d6      	bne.n	8021db8 <_vfiprintf_r+0x1a0>
 8021e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021e0c:	07db      	lsls	r3, r3, #31
 8021e0e:	d405      	bmi.n	8021e1c <_vfiprintf_r+0x204>
 8021e10:	89bb      	ldrh	r3, [r7, #12]
 8021e12:	059b      	lsls	r3, r3, #22
 8021e14:	d402      	bmi.n	8021e1c <_vfiprintf_r+0x204>
 8021e16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021e18:	f7fd fd90 	bl	801f93c <__retarget_lock_release_recursive>
 8021e1c:	89bb      	ldrh	r3, [r7, #12]
 8021e1e:	065b      	lsls	r3, r3, #25
 8021e20:	d500      	bpl.n	8021e24 <_vfiprintf_r+0x20c>
 8021e22:	e71e      	b.n	8021c62 <_vfiprintf_r+0x4a>
 8021e24:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021e26:	e71e      	b.n	8021c66 <_vfiprintf_r+0x4e>
 8021e28:	aa07      	add	r2, sp, #28
 8021e2a:	9200      	str	r2, [sp, #0]
 8021e2c:	0021      	movs	r1, r4
 8021e2e:	003a      	movs	r2, r7
 8021e30:	4b06      	ldr	r3, [pc, #24]	@ (8021e4c <_vfiprintf_r+0x234>)
 8021e32:	9803      	ldr	r0, [sp, #12]
 8021e34:	f7fd f92c 	bl	801f090 <_printf_i>
 8021e38:	e7e3      	b.n	8021e02 <_vfiprintf_r+0x1ea>
 8021e3a:	46c0      	nop			@ (mov r8, r8)
 8021e3c:	08025200 	.word	0x08025200
 8021e40:	08025206 	.word	0x08025206
 8021e44:	0802520a 	.word	0x0802520a
 8021e48:	0801eb35 	.word	0x0801eb35
 8021e4c:	08021bf3 	.word	0x08021bf3

08021e50 <__sflush_r>:
 8021e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021e52:	220c      	movs	r2, #12
 8021e54:	5e8b      	ldrsh	r3, [r1, r2]
 8021e56:	0005      	movs	r5, r0
 8021e58:	000c      	movs	r4, r1
 8021e5a:	071a      	lsls	r2, r3, #28
 8021e5c:	d456      	bmi.n	8021f0c <__sflush_r+0xbc>
 8021e5e:	684a      	ldr	r2, [r1, #4]
 8021e60:	2a00      	cmp	r2, #0
 8021e62:	dc02      	bgt.n	8021e6a <__sflush_r+0x1a>
 8021e64:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8021e66:	2a00      	cmp	r2, #0
 8021e68:	dd4e      	ble.n	8021f08 <__sflush_r+0xb8>
 8021e6a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021e6c:	2f00      	cmp	r7, #0
 8021e6e:	d04b      	beq.n	8021f08 <__sflush_r+0xb8>
 8021e70:	2200      	movs	r2, #0
 8021e72:	2080      	movs	r0, #128	@ 0x80
 8021e74:	682e      	ldr	r6, [r5, #0]
 8021e76:	602a      	str	r2, [r5, #0]
 8021e78:	001a      	movs	r2, r3
 8021e7a:	0140      	lsls	r0, r0, #5
 8021e7c:	6a21      	ldr	r1, [r4, #32]
 8021e7e:	4002      	ands	r2, r0
 8021e80:	4203      	tst	r3, r0
 8021e82:	d033      	beq.n	8021eec <__sflush_r+0x9c>
 8021e84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021e86:	89a3      	ldrh	r3, [r4, #12]
 8021e88:	075b      	lsls	r3, r3, #29
 8021e8a:	d506      	bpl.n	8021e9a <__sflush_r+0x4a>
 8021e8c:	6863      	ldr	r3, [r4, #4]
 8021e8e:	1ad2      	subs	r2, r2, r3
 8021e90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	d001      	beq.n	8021e9a <__sflush_r+0x4a>
 8021e96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021e98:	1ad2      	subs	r2, r2, r3
 8021e9a:	2300      	movs	r3, #0
 8021e9c:	0028      	movs	r0, r5
 8021e9e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021ea0:	6a21      	ldr	r1, [r4, #32]
 8021ea2:	47b8      	blx	r7
 8021ea4:	89a2      	ldrh	r2, [r4, #12]
 8021ea6:	1c43      	adds	r3, r0, #1
 8021ea8:	d106      	bne.n	8021eb8 <__sflush_r+0x68>
 8021eaa:	6829      	ldr	r1, [r5, #0]
 8021eac:	291d      	cmp	r1, #29
 8021eae:	d846      	bhi.n	8021f3e <__sflush_r+0xee>
 8021eb0:	4b29      	ldr	r3, [pc, #164]	@ (8021f58 <__sflush_r+0x108>)
 8021eb2:	410b      	asrs	r3, r1
 8021eb4:	07db      	lsls	r3, r3, #31
 8021eb6:	d442      	bmi.n	8021f3e <__sflush_r+0xee>
 8021eb8:	2300      	movs	r3, #0
 8021eba:	6063      	str	r3, [r4, #4]
 8021ebc:	6923      	ldr	r3, [r4, #16]
 8021ebe:	6023      	str	r3, [r4, #0]
 8021ec0:	04d2      	lsls	r2, r2, #19
 8021ec2:	d505      	bpl.n	8021ed0 <__sflush_r+0x80>
 8021ec4:	1c43      	adds	r3, r0, #1
 8021ec6:	d102      	bne.n	8021ece <__sflush_r+0x7e>
 8021ec8:	682b      	ldr	r3, [r5, #0]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d100      	bne.n	8021ed0 <__sflush_r+0x80>
 8021ece:	6560      	str	r0, [r4, #84]	@ 0x54
 8021ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021ed2:	602e      	str	r6, [r5, #0]
 8021ed4:	2900      	cmp	r1, #0
 8021ed6:	d017      	beq.n	8021f08 <__sflush_r+0xb8>
 8021ed8:	0023      	movs	r3, r4
 8021eda:	3344      	adds	r3, #68	@ 0x44
 8021edc:	4299      	cmp	r1, r3
 8021ede:	d002      	beq.n	8021ee6 <__sflush_r+0x96>
 8021ee0:	0028      	movs	r0, r5
 8021ee2:	f7fe fbc9 	bl	8020678 <_free_r>
 8021ee6:	2300      	movs	r3, #0
 8021ee8:	6363      	str	r3, [r4, #52]	@ 0x34
 8021eea:	e00d      	b.n	8021f08 <__sflush_r+0xb8>
 8021eec:	2301      	movs	r3, #1
 8021eee:	0028      	movs	r0, r5
 8021ef0:	47b8      	blx	r7
 8021ef2:	0002      	movs	r2, r0
 8021ef4:	1c43      	adds	r3, r0, #1
 8021ef6:	d1c6      	bne.n	8021e86 <__sflush_r+0x36>
 8021ef8:	682b      	ldr	r3, [r5, #0]
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	d0c3      	beq.n	8021e86 <__sflush_r+0x36>
 8021efe:	2b1d      	cmp	r3, #29
 8021f00:	d001      	beq.n	8021f06 <__sflush_r+0xb6>
 8021f02:	2b16      	cmp	r3, #22
 8021f04:	d11a      	bne.n	8021f3c <__sflush_r+0xec>
 8021f06:	602e      	str	r6, [r5, #0]
 8021f08:	2000      	movs	r0, #0
 8021f0a:	e01e      	b.n	8021f4a <__sflush_r+0xfa>
 8021f0c:	690e      	ldr	r6, [r1, #16]
 8021f0e:	2e00      	cmp	r6, #0
 8021f10:	d0fa      	beq.n	8021f08 <__sflush_r+0xb8>
 8021f12:	680f      	ldr	r7, [r1, #0]
 8021f14:	600e      	str	r6, [r1, #0]
 8021f16:	1bba      	subs	r2, r7, r6
 8021f18:	9201      	str	r2, [sp, #4]
 8021f1a:	2200      	movs	r2, #0
 8021f1c:	079b      	lsls	r3, r3, #30
 8021f1e:	d100      	bne.n	8021f22 <__sflush_r+0xd2>
 8021f20:	694a      	ldr	r2, [r1, #20]
 8021f22:	60a2      	str	r2, [r4, #8]
 8021f24:	9b01      	ldr	r3, [sp, #4]
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	ddee      	ble.n	8021f08 <__sflush_r+0xb8>
 8021f2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021f2c:	0032      	movs	r2, r6
 8021f2e:	001f      	movs	r7, r3
 8021f30:	0028      	movs	r0, r5
 8021f32:	9b01      	ldr	r3, [sp, #4]
 8021f34:	6a21      	ldr	r1, [r4, #32]
 8021f36:	47b8      	blx	r7
 8021f38:	2800      	cmp	r0, #0
 8021f3a:	dc07      	bgt.n	8021f4c <__sflush_r+0xfc>
 8021f3c:	89a2      	ldrh	r2, [r4, #12]
 8021f3e:	2340      	movs	r3, #64	@ 0x40
 8021f40:	2001      	movs	r0, #1
 8021f42:	4313      	orrs	r3, r2
 8021f44:	b21b      	sxth	r3, r3
 8021f46:	81a3      	strh	r3, [r4, #12]
 8021f48:	4240      	negs	r0, r0
 8021f4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021f4c:	9b01      	ldr	r3, [sp, #4]
 8021f4e:	1836      	adds	r6, r6, r0
 8021f50:	1a1b      	subs	r3, r3, r0
 8021f52:	9301      	str	r3, [sp, #4]
 8021f54:	e7e6      	b.n	8021f24 <__sflush_r+0xd4>
 8021f56:	46c0      	nop			@ (mov r8, r8)
 8021f58:	dfbffffe 	.word	0xdfbffffe

08021f5c <_fflush_r>:
 8021f5c:	690b      	ldr	r3, [r1, #16]
 8021f5e:	b570      	push	{r4, r5, r6, lr}
 8021f60:	0005      	movs	r5, r0
 8021f62:	000c      	movs	r4, r1
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d102      	bne.n	8021f6e <_fflush_r+0x12>
 8021f68:	2500      	movs	r5, #0
 8021f6a:	0028      	movs	r0, r5
 8021f6c:	bd70      	pop	{r4, r5, r6, pc}
 8021f6e:	2800      	cmp	r0, #0
 8021f70:	d004      	beq.n	8021f7c <_fflush_r+0x20>
 8021f72:	6a03      	ldr	r3, [r0, #32]
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	d101      	bne.n	8021f7c <_fflush_r+0x20>
 8021f78:	f7fd fa28 	bl	801f3cc <__sinit>
 8021f7c:	220c      	movs	r2, #12
 8021f7e:	5ea3      	ldrsh	r3, [r4, r2]
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	d0f1      	beq.n	8021f68 <_fflush_r+0xc>
 8021f84:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021f86:	07d2      	lsls	r2, r2, #31
 8021f88:	d404      	bmi.n	8021f94 <_fflush_r+0x38>
 8021f8a:	059b      	lsls	r3, r3, #22
 8021f8c:	d402      	bmi.n	8021f94 <_fflush_r+0x38>
 8021f8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021f90:	f7fd fcd3 	bl	801f93a <__retarget_lock_acquire_recursive>
 8021f94:	0028      	movs	r0, r5
 8021f96:	0021      	movs	r1, r4
 8021f98:	f7ff ff5a 	bl	8021e50 <__sflush_r>
 8021f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021f9e:	0005      	movs	r5, r0
 8021fa0:	07db      	lsls	r3, r3, #31
 8021fa2:	d4e2      	bmi.n	8021f6a <_fflush_r+0xe>
 8021fa4:	89a3      	ldrh	r3, [r4, #12]
 8021fa6:	059b      	lsls	r3, r3, #22
 8021fa8:	d4df      	bmi.n	8021f6a <_fflush_r+0xe>
 8021faa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021fac:	f7fd fcc6 	bl	801f93c <__retarget_lock_release_recursive>
 8021fb0:	e7db      	b.n	8021f6a <_fflush_r+0xe>
	...

08021fb4 <__swhatbuf_r>:
 8021fb4:	b570      	push	{r4, r5, r6, lr}
 8021fb6:	000e      	movs	r6, r1
 8021fb8:	001d      	movs	r5, r3
 8021fba:	230e      	movs	r3, #14
 8021fbc:	5ec9      	ldrsh	r1, [r1, r3]
 8021fbe:	0014      	movs	r4, r2
 8021fc0:	b096      	sub	sp, #88	@ 0x58
 8021fc2:	2900      	cmp	r1, #0
 8021fc4:	da0c      	bge.n	8021fe0 <__swhatbuf_r+0x2c>
 8021fc6:	89b2      	ldrh	r2, [r6, #12]
 8021fc8:	2380      	movs	r3, #128	@ 0x80
 8021fca:	0011      	movs	r1, r2
 8021fcc:	4019      	ands	r1, r3
 8021fce:	421a      	tst	r2, r3
 8021fd0:	d114      	bne.n	8021ffc <__swhatbuf_r+0x48>
 8021fd2:	2380      	movs	r3, #128	@ 0x80
 8021fd4:	00db      	lsls	r3, r3, #3
 8021fd6:	2000      	movs	r0, #0
 8021fd8:	6029      	str	r1, [r5, #0]
 8021fda:	6023      	str	r3, [r4, #0]
 8021fdc:	b016      	add	sp, #88	@ 0x58
 8021fde:	bd70      	pop	{r4, r5, r6, pc}
 8021fe0:	466a      	mov	r2, sp
 8021fe2:	f000 f865 	bl	80220b0 <_fstat_r>
 8021fe6:	2800      	cmp	r0, #0
 8021fe8:	dbed      	blt.n	8021fc6 <__swhatbuf_r+0x12>
 8021fea:	23f0      	movs	r3, #240	@ 0xf0
 8021fec:	9901      	ldr	r1, [sp, #4]
 8021fee:	021b      	lsls	r3, r3, #8
 8021ff0:	4019      	ands	r1, r3
 8021ff2:	4b04      	ldr	r3, [pc, #16]	@ (8022004 <__swhatbuf_r+0x50>)
 8021ff4:	18c9      	adds	r1, r1, r3
 8021ff6:	424b      	negs	r3, r1
 8021ff8:	4159      	adcs	r1, r3
 8021ffa:	e7ea      	b.n	8021fd2 <__swhatbuf_r+0x1e>
 8021ffc:	2100      	movs	r1, #0
 8021ffe:	2340      	movs	r3, #64	@ 0x40
 8022000:	e7e9      	b.n	8021fd6 <__swhatbuf_r+0x22>
 8022002:	46c0      	nop			@ (mov r8, r8)
 8022004:	ffffe000 	.word	0xffffe000

08022008 <__smakebuf_r>:
 8022008:	b5f0      	push	{r4, r5, r6, r7, lr}
 802200a:	2602      	movs	r6, #2
 802200c:	898b      	ldrh	r3, [r1, #12]
 802200e:	0005      	movs	r5, r0
 8022010:	000c      	movs	r4, r1
 8022012:	b085      	sub	sp, #20
 8022014:	4233      	tst	r3, r6
 8022016:	d007      	beq.n	8022028 <__smakebuf_r+0x20>
 8022018:	0023      	movs	r3, r4
 802201a:	3347      	adds	r3, #71	@ 0x47
 802201c:	6023      	str	r3, [r4, #0]
 802201e:	6123      	str	r3, [r4, #16]
 8022020:	2301      	movs	r3, #1
 8022022:	6163      	str	r3, [r4, #20]
 8022024:	b005      	add	sp, #20
 8022026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022028:	ab03      	add	r3, sp, #12
 802202a:	aa02      	add	r2, sp, #8
 802202c:	f7ff ffc2 	bl	8021fb4 <__swhatbuf_r>
 8022030:	9f02      	ldr	r7, [sp, #8]
 8022032:	9001      	str	r0, [sp, #4]
 8022034:	0039      	movs	r1, r7
 8022036:	0028      	movs	r0, r5
 8022038:	f7fe feee 	bl	8020e18 <_malloc_r>
 802203c:	2800      	cmp	r0, #0
 802203e:	d108      	bne.n	8022052 <__smakebuf_r+0x4a>
 8022040:	220c      	movs	r2, #12
 8022042:	5ea3      	ldrsh	r3, [r4, r2]
 8022044:	059a      	lsls	r2, r3, #22
 8022046:	d4ed      	bmi.n	8022024 <__smakebuf_r+0x1c>
 8022048:	2203      	movs	r2, #3
 802204a:	4393      	bics	r3, r2
 802204c:	431e      	orrs	r6, r3
 802204e:	81a6      	strh	r6, [r4, #12]
 8022050:	e7e2      	b.n	8022018 <__smakebuf_r+0x10>
 8022052:	2380      	movs	r3, #128	@ 0x80
 8022054:	89a2      	ldrh	r2, [r4, #12]
 8022056:	6020      	str	r0, [r4, #0]
 8022058:	4313      	orrs	r3, r2
 802205a:	81a3      	strh	r3, [r4, #12]
 802205c:	9b03      	ldr	r3, [sp, #12]
 802205e:	6120      	str	r0, [r4, #16]
 8022060:	6167      	str	r7, [r4, #20]
 8022062:	2b00      	cmp	r3, #0
 8022064:	d00c      	beq.n	8022080 <__smakebuf_r+0x78>
 8022066:	0028      	movs	r0, r5
 8022068:	230e      	movs	r3, #14
 802206a:	5ee1      	ldrsh	r1, [r4, r3]
 802206c:	f000 f832 	bl	80220d4 <_isatty_r>
 8022070:	2800      	cmp	r0, #0
 8022072:	d005      	beq.n	8022080 <__smakebuf_r+0x78>
 8022074:	2303      	movs	r3, #3
 8022076:	89a2      	ldrh	r2, [r4, #12]
 8022078:	439a      	bics	r2, r3
 802207a:	3b02      	subs	r3, #2
 802207c:	4313      	orrs	r3, r2
 802207e:	81a3      	strh	r3, [r4, #12]
 8022080:	89a3      	ldrh	r3, [r4, #12]
 8022082:	9a01      	ldr	r2, [sp, #4]
 8022084:	4313      	orrs	r3, r2
 8022086:	81a3      	strh	r3, [r4, #12]
 8022088:	e7cc      	b.n	8022024 <__smakebuf_r+0x1c>

0802208a <memmove>:
 802208a:	b510      	push	{r4, lr}
 802208c:	4288      	cmp	r0, r1
 802208e:	d806      	bhi.n	802209e <memmove+0x14>
 8022090:	2300      	movs	r3, #0
 8022092:	429a      	cmp	r2, r3
 8022094:	d008      	beq.n	80220a8 <memmove+0x1e>
 8022096:	5ccc      	ldrb	r4, [r1, r3]
 8022098:	54c4      	strb	r4, [r0, r3]
 802209a:	3301      	adds	r3, #1
 802209c:	e7f9      	b.n	8022092 <memmove+0x8>
 802209e:	188b      	adds	r3, r1, r2
 80220a0:	4298      	cmp	r0, r3
 80220a2:	d2f5      	bcs.n	8022090 <memmove+0x6>
 80220a4:	3a01      	subs	r2, #1
 80220a6:	d200      	bcs.n	80220aa <memmove+0x20>
 80220a8:	bd10      	pop	{r4, pc}
 80220aa:	5c8b      	ldrb	r3, [r1, r2]
 80220ac:	5483      	strb	r3, [r0, r2]
 80220ae:	e7f9      	b.n	80220a4 <memmove+0x1a>

080220b0 <_fstat_r>:
 80220b0:	2300      	movs	r3, #0
 80220b2:	b570      	push	{r4, r5, r6, lr}
 80220b4:	4d06      	ldr	r5, [pc, #24]	@ (80220d0 <_fstat_r+0x20>)
 80220b6:	0004      	movs	r4, r0
 80220b8:	0008      	movs	r0, r1
 80220ba:	0011      	movs	r1, r2
 80220bc:	602b      	str	r3, [r5, #0]
 80220be:	f7eb f887 	bl	800d1d0 <_fstat>
 80220c2:	1c43      	adds	r3, r0, #1
 80220c4:	d103      	bne.n	80220ce <_fstat_r+0x1e>
 80220c6:	682b      	ldr	r3, [r5, #0]
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	d000      	beq.n	80220ce <_fstat_r+0x1e>
 80220cc:	6023      	str	r3, [r4, #0]
 80220ce:	bd70      	pop	{r4, r5, r6, pc}
 80220d0:	200038f0 	.word	0x200038f0

080220d4 <_isatty_r>:
 80220d4:	2300      	movs	r3, #0
 80220d6:	b570      	push	{r4, r5, r6, lr}
 80220d8:	4d06      	ldr	r5, [pc, #24]	@ (80220f4 <_isatty_r+0x20>)
 80220da:	0004      	movs	r4, r0
 80220dc:	0008      	movs	r0, r1
 80220de:	602b      	str	r3, [r5, #0]
 80220e0:	f7eb f884 	bl	800d1ec <_isatty>
 80220e4:	1c43      	adds	r3, r0, #1
 80220e6:	d103      	bne.n	80220f0 <_isatty_r+0x1c>
 80220e8:	682b      	ldr	r3, [r5, #0]
 80220ea:	2b00      	cmp	r3, #0
 80220ec:	d000      	beq.n	80220f0 <_isatty_r+0x1c>
 80220ee:	6023      	str	r3, [r4, #0]
 80220f0:	bd70      	pop	{r4, r5, r6, pc}
 80220f2:	46c0      	nop			@ (mov r8, r8)
 80220f4:	200038f0 	.word	0x200038f0

080220f8 <_sbrk_r>:
 80220f8:	2300      	movs	r3, #0
 80220fa:	b570      	push	{r4, r5, r6, lr}
 80220fc:	4d06      	ldr	r5, [pc, #24]	@ (8022118 <_sbrk_r+0x20>)
 80220fe:	0004      	movs	r4, r0
 8022100:	0008      	movs	r0, r1
 8022102:	602b      	str	r3, [r5, #0]
 8022104:	f7eb f886 	bl	800d214 <_sbrk>
 8022108:	1c43      	adds	r3, r0, #1
 802210a:	d103      	bne.n	8022114 <_sbrk_r+0x1c>
 802210c:	682b      	ldr	r3, [r5, #0]
 802210e:	2b00      	cmp	r3, #0
 8022110:	d000      	beq.n	8022114 <_sbrk_r+0x1c>
 8022112:	6023      	str	r3, [r4, #0]
 8022114:	bd70      	pop	{r4, r5, r6, pc}
 8022116:	46c0      	nop			@ (mov r8, r8)
 8022118:	200038f0 	.word	0x200038f0

0802211c <__assert_func>:
 802211c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802211e:	0014      	movs	r4, r2
 8022120:	001a      	movs	r2, r3
 8022122:	4b09      	ldr	r3, [pc, #36]	@ (8022148 <__assert_func+0x2c>)
 8022124:	0005      	movs	r5, r0
 8022126:	681b      	ldr	r3, [r3, #0]
 8022128:	000e      	movs	r6, r1
 802212a:	68d8      	ldr	r0, [r3, #12]
 802212c:	4b07      	ldr	r3, [pc, #28]	@ (802214c <__assert_func+0x30>)
 802212e:	2c00      	cmp	r4, #0
 8022130:	d101      	bne.n	8022136 <__assert_func+0x1a>
 8022132:	4b07      	ldr	r3, [pc, #28]	@ (8022150 <__assert_func+0x34>)
 8022134:	001c      	movs	r4, r3
 8022136:	4907      	ldr	r1, [pc, #28]	@ (8022154 <__assert_func+0x38>)
 8022138:	9301      	str	r3, [sp, #4]
 802213a:	9402      	str	r4, [sp, #8]
 802213c:	002b      	movs	r3, r5
 802213e:	9600      	str	r6, [sp, #0]
 8022140:	f000 f866 	bl	8022210 <fiprintf>
 8022144:	f000 f874 	bl	8022230 <abort>
 8022148:	200003c8 	.word	0x200003c8
 802214c:	08025211 	.word	0x08025211
 8022150:	0802524c 	.word	0x0802524c
 8022154:	0802521e 	.word	0x0802521e

08022158 <_calloc_r>:
 8022158:	b570      	push	{r4, r5, r6, lr}
 802215a:	0c0b      	lsrs	r3, r1, #16
 802215c:	0c15      	lsrs	r5, r2, #16
 802215e:	2b00      	cmp	r3, #0
 8022160:	d11e      	bne.n	80221a0 <_calloc_r+0x48>
 8022162:	2d00      	cmp	r5, #0
 8022164:	d10c      	bne.n	8022180 <_calloc_r+0x28>
 8022166:	b289      	uxth	r1, r1
 8022168:	b294      	uxth	r4, r2
 802216a:	434c      	muls	r4, r1
 802216c:	0021      	movs	r1, r4
 802216e:	f7fe fe53 	bl	8020e18 <_malloc_r>
 8022172:	1e05      	subs	r5, r0, #0
 8022174:	d01a      	beq.n	80221ac <_calloc_r+0x54>
 8022176:	0022      	movs	r2, r4
 8022178:	2100      	movs	r1, #0
 802217a:	f7fd fb0f 	bl	801f79c <memset>
 802217e:	e016      	b.n	80221ae <_calloc_r+0x56>
 8022180:	1c2b      	adds	r3, r5, #0
 8022182:	1c0c      	adds	r4, r1, #0
 8022184:	b289      	uxth	r1, r1
 8022186:	b292      	uxth	r2, r2
 8022188:	434a      	muls	r2, r1
 802218a:	b29b      	uxth	r3, r3
 802218c:	b2a1      	uxth	r1, r4
 802218e:	4359      	muls	r1, r3
 8022190:	0c14      	lsrs	r4, r2, #16
 8022192:	190c      	adds	r4, r1, r4
 8022194:	0c23      	lsrs	r3, r4, #16
 8022196:	d107      	bne.n	80221a8 <_calloc_r+0x50>
 8022198:	0424      	lsls	r4, r4, #16
 802219a:	b292      	uxth	r2, r2
 802219c:	4314      	orrs	r4, r2
 802219e:	e7e5      	b.n	802216c <_calloc_r+0x14>
 80221a0:	2d00      	cmp	r5, #0
 80221a2:	d101      	bne.n	80221a8 <_calloc_r+0x50>
 80221a4:	1c14      	adds	r4, r2, #0
 80221a6:	e7ed      	b.n	8022184 <_calloc_r+0x2c>
 80221a8:	230c      	movs	r3, #12
 80221aa:	6003      	str	r3, [r0, #0]
 80221ac:	2500      	movs	r5, #0
 80221ae:	0028      	movs	r0, r5
 80221b0:	bd70      	pop	{r4, r5, r6, pc}

080221b2 <_realloc_r>:
 80221b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221b4:	0006      	movs	r6, r0
 80221b6:	000c      	movs	r4, r1
 80221b8:	0015      	movs	r5, r2
 80221ba:	2900      	cmp	r1, #0
 80221bc:	d105      	bne.n	80221ca <_realloc_r+0x18>
 80221be:	0011      	movs	r1, r2
 80221c0:	f7fe fe2a 	bl	8020e18 <_malloc_r>
 80221c4:	0004      	movs	r4, r0
 80221c6:	0020      	movs	r0, r4
 80221c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80221ca:	2a00      	cmp	r2, #0
 80221cc:	d103      	bne.n	80221d6 <_realloc_r+0x24>
 80221ce:	f7fe fa53 	bl	8020678 <_free_r>
 80221d2:	2400      	movs	r4, #0
 80221d4:	e7f7      	b.n	80221c6 <_realloc_r+0x14>
 80221d6:	f000 f832 	bl	802223e <_malloc_usable_size_r>
 80221da:	0007      	movs	r7, r0
 80221dc:	4285      	cmp	r5, r0
 80221de:	d802      	bhi.n	80221e6 <_realloc_r+0x34>
 80221e0:	0843      	lsrs	r3, r0, #1
 80221e2:	42ab      	cmp	r3, r5
 80221e4:	d3ef      	bcc.n	80221c6 <_realloc_r+0x14>
 80221e6:	0029      	movs	r1, r5
 80221e8:	0030      	movs	r0, r6
 80221ea:	f7fe fe15 	bl	8020e18 <_malloc_r>
 80221ee:	9001      	str	r0, [sp, #4]
 80221f0:	2800      	cmp	r0, #0
 80221f2:	d0ee      	beq.n	80221d2 <_realloc_r+0x20>
 80221f4:	002a      	movs	r2, r5
 80221f6:	42bd      	cmp	r5, r7
 80221f8:	d900      	bls.n	80221fc <_realloc_r+0x4a>
 80221fa:	003a      	movs	r2, r7
 80221fc:	0021      	movs	r1, r4
 80221fe:	9801      	ldr	r0, [sp, #4]
 8022200:	f7fd fba8 	bl	801f954 <memcpy>
 8022204:	0021      	movs	r1, r4
 8022206:	0030      	movs	r0, r6
 8022208:	f7fe fa36 	bl	8020678 <_free_r>
 802220c:	9c01      	ldr	r4, [sp, #4]
 802220e:	e7da      	b.n	80221c6 <_realloc_r+0x14>

08022210 <fiprintf>:
 8022210:	b40e      	push	{r1, r2, r3}
 8022212:	b517      	push	{r0, r1, r2, r4, lr}
 8022214:	4c05      	ldr	r4, [pc, #20]	@ (802222c <fiprintf+0x1c>)
 8022216:	ab05      	add	r3, sp, #20
 8022218:	cb04      	ldmia	r3!, {r2}
 802221a:	0001      	movs	r1, r0
 802221c:	6820      	ldr	r0, [r4, #0]
 802221e:	9301      	str	r3, [sp, #4]
 8022220:	f7ff fcfa 	bl	8021c18 <_vfiprintf_r>
 8022224:	bc1e      	pop	{r1, r2, r3, r4}
 8022226:	bc08      	pop	{r3}
 8022228:	b003      	add	sp, #12
 802222a:	4718      	bx	r3
 802222c:	200003c8 	.word	0x200003c8

08022230 <abort>:
 8022230:	2006      	movs	r0, #6
 8022232:	b510      	push	{r4, lr}
 8022234:	f000 f834 	bl	80222a0 <raise>
 8022238:	2001      	movs	r0, #1
 802223a:	f7ea ff95 	bl	800d168 <_exit>

0802223e <_malloc_usable_size_r>:
 802223e:	1f0b      	subs	r3, r1, #4
 8022240:	681b      	ldr	r3, [r3, #0]
 8022242:	1f18      	subs	r0, r3, #4
 8022244:	2b00      	cmp	r3, #0
 8022246:	da01      	bge.n	802224c <_malloc_usable_size_r+0xe>
 8022248:	580b      	ldr	r3, [r1, r0]
 802224a:	18c0      	adds	r0, r0, r3
 802224c:	4770      	bx	lr

0802224e <_raise_r>:
 802224e:	b570      	push	{r4, r5, r6, lr}
 8022250:	0004      	movs	r4, r0
 8022252:	000d      	movs	r5, r1
 8022254:	291f      	cmp	r1, #31
 8022256:	d904      	bls.n	8022262 <_raise_r+0x14>
 8022258:	2316      	movs	r3, #22
 802225a:	6003      	str	r3, [r0, #0]
 802225c:	2001      	movs	r0, #1
 802225e:	4240      	negs	r0, r0
 8022260:	bd70      	pop	{r4, r5, r6, pc}
 8022262:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022264:	2b00      	cmp	r3, #0
 8022266:	d004      	beq.n	8022272 <_raise_r+0x24>
 8022268:	008a      	lsls	r2, r1, #2
 802226a:	189b      	adds	r3, r3, r2
 802226c:	681a      	ldr	r2, [r3, #0]
 802226e:	2a00      	cmp	r2, #0
 8022270:	d108      	bne.n	8022284 <_raise_r+0x36>
 8022272:	0020      	movs	r0, r4
 8022274:	f000 f830 	bl	80222d8 <_getpid_r>
 8022278:	002a      	movs	r2, r5
 802227a:	0001      	movs	r1, r0
 802227c:	0020      	movs	r0, r4
 802227e:	f000 f819 	bl	80222b4 <_kill_r>
 8022282:	e7ed      	b.n	8022260 <_raise_r+0x12>
 8022284:	2a01      	cmp	r2, #1
 8022286:	d009      	beq.n	802229c <_raise_r+0x4e>
 8022288:	1c51      	adds	r1, r2, #1
 802228a:	d103      	bne.n	8022294 <_raise_r+0x46>
 802228c:	2316      	movs	r3, #22
 802228e:	6003      	str	r3, [r0, #0]
 8022290:	2001      	movs	r0, #1
 8022292:	e7e5      	b.n	8022260 <_raise_r+0x12>
 8022294:	2100      	movs	r1, #0
 8022296:	0028      	movs	r0, r5
 8022298:	6019      	str	r1, [r3, #0]
 802229a:	4790      	blx	r2
 802229c:	2000      	movs	r0, #0
 802229e:	e7df      	b.n	8022260 <_raise_r+0x12>

080222a0 <raise>:
 80222a0:	b510      	push	{r4, lr}
 80222a2:	4b03      	ldr	r3, [pc, #12]	@ (80222b0 <raise+0x10>)
 80222a4:	0001      	movs	r1, r0
 80222a6:	6818      	ldr	r0, [r3, #0]
 80222a8:	f7ff ffd1 	bl	802224e <_raise_r>
 80222ac:	bd10      	pop	{r4, pc}
 80222ae:	46c0      	nop			@ (mov r8, r8)
 80222b0:	200003c8 	.word	0x200003c8

080222b4 <_kill_r>:
 80222b4:	2300      	movs	r3, #0
 80222b6:	b570      	push	{r4, r5, r6, lr}
 80222b8:	4d06      	ldr	r5, [pc, #24]	@ (80222d4 <_kill_r+0x20>)
 80222ba:	0004      	movs	r4, r0
 80222bc:	0008      	movs	r0, r1
 80222be:	0011      	movs	r1, r2
 80222c0:	602b      	str	r3, [r5, #0]
 80222c2:	f7ea ff41 	bl	800d148 <_kill>
 80222c6:	1c43      	adds	r3, r0, #1
 80222c8:	d103      	bne.n	80222d2 <_kill_r+0x1e>
 80222ca:	682b      	ldr	r3, [r5, #0]
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d000      	beq.n	80222d2 <_kill_r+0x1e>
 80222d0:	6023      	str	r3, [r4, #0]
 80222d2:	bd70      	pop	{r4, r5, r6, pc}
 80222d4:	200038f0 	.word	0x200038f0

080222d8 <_getpid_r>:
 80222d8:	b510      	push	{r4, lr}
 80222da:	f7ea ff2f 	bl	800d13c <_getpid>
 80222de:	bd10      	pop	{r4, pc}

080222e0 <expf>:
 80222e0:	b570      	push	{r4, r5, r6, lr}
 80222e2:	1c04      	adds	r4, r0, #0
 80222e4:	f000 f8e6 	bl	80224b4 <__ieee754_expf>
 80222e8:	1c05      	adds	r5, r0, #0
 80222ea:	1c20      	adds	r0, r4, #0
 80222ec:	f000 f83c 	bl	8022368 <finitef>
 80222f0:	2800      	cmp	r0, #0
 80222f2:	d00b      	beq.n	802230c <expf+0x2c>
 80222f4:	490c      	ldr	r1, [pc, #48]	@ (8022328 <expf+0x48>)
 80222f6:	1c20      	adds	r0, r4, #0
 80222f8:	f7de f92e 	bl	8000558 <__aeabi_fcmpgt>
 80222fc:	2800      	cmp	r0, #0
 80222fe:	d007      	beq.n	8022310 <expf+0x30>
 8022300:	f7fd faf0 	bl	801f8e4 <__errno>
 8022304:	25ff      	movs	r5, #255	@ 0xff
 8022306:	2322      	movs	r3, #34	@ 0x22
 8022308:	05ed      	lsls	r5, r5, #23
 802230a:	6003      	str	r3, [r0, #0]
 802230c:	1c28      	adds	r0, r5, #0
 802230e:	bd70      	pop	{r4, r5, r6, pc}
 8022310:	4906      	ldr	r1, [pc, #24]	@ (802232c <expf+0x4c>)
 8022312:	1c20      	adds	r0, r4, #0
 8022314:	f7de f90c 	bl	8000530 <__aeabi_fcmplt>
 8022318:	2800      	cmp	r0, #0
 802231a:	d0f7      	beq.n	802230c <expf+0x2c>
 802231c:	f7fd fae2 	bl	801f8e4 <__errno>
 8022320:	2322      	movs	r3, #34	@ 0x22
 8022322:	2500      	movs	r5, #0
 8022324:	6003      	str	r3, [r0, #0]
 8022326:	e7f1      	b.n	802230c <expf+0x2c>
 8022328:	42b17217 	.word	0x42b17217
 802232c:	c2cff1b5 	.word	0xc2cff1b5

08022330 <sqrtf>:
 8022330:	b570      	push	{r4, r5, r6, lr}
 8022332:	1c05      	adds	r5, r0, #0
 8022334:	f000 f822 	bl	802237c <__ieee754_sqrtf>
 8022338:	1c29      	adds	r1, r5, #0
 802233a:	1c04      	adds	r4, r0, #0
 802233c:	1c28      	adds	r0, r5, #0
 802233e:	f7df f911 	bl	8001564 <__aeabi_fcmpun>
 8022342:	2800      	cmp	r0, #0
 8022344:	d10e      	bne.n	8022364 <sqrtf+0x34>
 8022346:	2100      	movs	r1, #0
 8022348:	1c28      	adds	r0, r5, #0
 802234a:	f7de f8f1 	bl	8000530 <__aeabi_fcmplt>
 802234e:	2800      	cmp	r0, #0
 8022350:	d008      	beq.n	8022364 <sqrtf+0x34>
 8022352:	f7fd fac7 	bl	801f8e4 <__errno>
 8022356:	2321      	movs	r3, #33	@ 0x21
 8022358:	2100      	movs	r1, #0
 802235a:	6003      	str	r3, [r0, #0]
 802235c:	1c08      	adds	r0, r1, #0
 802235e:	f7de fc39 	bl	8000bd4 <__aeabi_fdiv>
 8022362:	1c04      	adds	r4, r0, #0
 8022364:	1c20      	adds	r0, r4, #0
 8022366:	bd70      	pop	{r4, r5, r6, pc}

08022368 <finitef>:
 8022368:	22ff      	movs	r2, #255	@ 0xff
 802236a:	0043      	lsls	r3, r0, #1
 802236c:	085b      	lsrs	r3, r3, #1
 802236e:	2001      	movs	r0, #1
 8022370:	05d2      	lsls	r2, r2, #23
 8022372:	4293      	cmp	r3, r2
 8022374:	db00      	blt.n	8022378 <finitef+0x10>
 8022376:	2000      	movs	r0, #0
 8022378:	4770      	bx	lr
	...

0802237c <__ieee754_sqrtf>:
 802237c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802237e:	0003      	movs	r3, r0
 8022380:	0042      	lsls	r2, r0, #1
 8022382:	1c04      	adds	r4, r0, #0
 8022384:	20ff      	movs	r0, #255	@ 0xff
 8022386:	0852      	lsrs	r2, r2, #1
 8022388:	05c0      	lsls	r0, r0, #23
 802238a:	4282      	cmp	r2, r0
 802238c:	d30a      	bcc.n	80223a4 <__ieee754_sqrtf+0x28>
 802238e:	1c21      	adds	r1, r4, #0
 8022390:	1c20      	adds	r0, r4, #0
 8022392:	f7de fe05 	bl	8000fa0 <__aeabi_fmul>
 8022396:	1c01      	adds	r1, r0, #0
 8022398:	1c20      	adds	r0, r4, #0
 802239a:	f7de fa91 	bl	80008c0 <__aeabi_fadd>
 802239e:	1c04      	adds	r4, r0, #0
 80223a0:	1c20      	adds	r0, r4, #0
 80223a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80223a4:	2a00      	cmp	r2, #0
 80223a6:	d0fb      	beq.n	80223a0 <__ieee754_sqrtf+0x24>
 80223a8:	2c00      	cmp	r4, #0
 80223aa:	da07      	bge.n	80223bc <__ieee754_sqrtf+0x40>
 80223ac:	1c21      	adds	r1, r4, #0
 80223ae:	1c20      	adds	r0, r4, #0
 80223b0:	f7de ff34 	bl	800121c <__aeabi_fsub>
 80223b4:	1c01      	adds	r1, r0, #0
 80223b6:	f7de fc0d 	bl	8000bd4 <__aeabi_fdiv>
 80223ba:	e7f0      	b.n	802239e <__ieee754_sqrtf+0x22>
 80223bc:	0022      	movs	r2, r4
 80223be:	15e1      	asrs	r1, r4, #23
 80223c0:	4002      	ands	r2, r0
 80223c2:	4204      	tst	r4, r0
 80223c4:	d046      	beq.n	8022454 <__ieee754_sqrtf+0xd8>
 80223c6:	2280      	movs	r2, #128	@ 0x80
 80223c8:	000f      	movs	r7, r1
 80223ca:	025b      	lsls	r3, r3, #9
 80223cc:	0a5b      	lsrs	r3, r3, #9
 80223ce:	0412      	lsls	r2, r2, #16
 80223d0:	3f7f      	subs	r7, #127	@ 0x7f
 80223d2:	4313      	orrs	r3, r2
 80223d4:	07c9      	lsls	r1, r1, #31
 80223d6:	d400      	bmi.n	80223da <__ieee754_sqrtf+0x5e>
 80223d8:	005b      	lsls	r3, r3, #1
 80223da:	2400      	movs	r4, #0
 80223dc:	2180      	movs	r1, #128	@ 0x80
 80223de:	2019      	movs	r0, #25
 80223e0:	0026      	movs	r6, r4
 80223e2:	107f      	asrs	r7, r7, #1
 80223e4:	005b      	lsls	r3, r3, #1
 80223e6:	0449      	lsls	r1, r1, #17
 80223e8:	1875      	adds	r5, r6, r1
 80223ea:	001a      	movs	r2, r3
 80223ec:	429d      	cmp	r5, r3
 80223ee:	dc02      	bgt.n	80223f6 <__ieee754_sqrtf+0x7a>
 80223f0:	186e      	adds	r6, r5, r1
 80223f2:	1b5a      	subs	r2, r3, r5
 80223f4:	1864      	adds	r4, r4, r1
 80223f6:	3801      	subs	r0, #1
 80223f8:	0053      	lsls	r3, r2, #1
 80223fa:	0849      	lsrs	r1, r1, #1
 80223fc:	2800      	cmp	r0, #0
 80223fe:	d1f3      	bne.n	80223e8 <__ieee754_sqrtf+0x6c>
 8022400:	2a00      	cmp	r2, #0
 8022402:	d019      	beq.n	8022438 <__ieee754_sqrtf+0xbc>
 8022404:	4d17      	ldr	r5, [pc, #92]	@ (8022464 <__ieee754_sqrtf+0xe8>)
 8022406:	4e18      	ldr	r6, [pc, #96]	@ (8022468 <__ieee754_sqrtf+0xec>)
 8022408:	6828      	ldr	r0, [r5, #0]
 802240a:	6831      	ldr	r1, [r6, #0]
 802240c:	682b      	ldr	r3, [r5, #0]
 802240e:	9301      	str	r3, [sp, #4]
 8022410:	f7de ff04 	bl	800121c <__aeabi_fsub>
 8022414:	1c01      	adds	r1, r0, #0
 8022416:	9801      	ldr	r0, [sp, #4]
 8022418:	f7de f894 	bl	8000544 <__aeabi_fcmple>
 802241c:	2800      	cmp	r0, #0
 802241e:	d00b      	beq.n	8022438 <__ieee754_sqrtf+0xbc>
 8022420:	6828      	ldr	r0, [r5, #0]
 8022422:	6831      	ldr	r1, [r6, #0]
 8022424:	f7de fa4c 	bl	80008c0 <__aeabi_fadd>
 8022428:	682d      	ldr	r5, [r5, #0]
 802242a:	1c01      	adds	r1, r0, #0
 802242c:	1c28      	adds	r0, r5, #0
 802242e:	f7de f87f 	bl	8000530 <__aeabi_fcmplt>
 8022432:	2800      	cmp	r0, #0
 8022434:	d011      	beq.n	802245a <__ieee754_sqrtf+0xde>
 8022436:	3402      	adds	r4, #2
 8022438:	23fc      	movs	r3, #252	@ 0xfc
 802243a:	1064      	asrs	r4, r4, #1
 802243c:	059b      	lsls	r3, r3, #22
 802243e:	18e3      	adds	r3, r4, r3
 8022440:	05fc      	lsls	r4, r7, #23
 8022442:	18e4      	adds	r4, r4, r3
 8022444:	e7ac      	b.n	80223a0 <__ieee754_sqrtf+0x24>
 8022446:	005b      	lsls	r3, r3, #1
 8022448:	3201      	adds	r2, #1
 802244a:	4203      	tst	r3, r0
 802244c:	d0fb      	beq.n	8022446 <__ieee754_sqrtf+0xca>
 802244e:	3a01      	subs	r2, #1
 8022450:	1a89      	subs	r1, r1, r2
 8022452:	e7b8      	b.n	80223c6 <__ieee754_sqrtf+0x4a>
 8022454:	2080      	movs	r0, #128	@ 0x80
 8022456:	0400      	lsls	r0, r0, #16
 8022458:	e7f7      	b.n	802244a <__ieee754_sqrtf+0xce>
 802245a:	2301      	movs	r3, #1
 802245c:	3401      	adds	r4, #1
 802245e:	439c      	bics	r4, r3
 8022460:	e7ea      	b.n	8022438 <__ieee754_sqrtf+0xbc>
 8022462:	46c0      	nop			@ (mov r8, r8)
 8022464:	2000041c 	.word	0x2000041c
 8022468:	20000418 	.word	0x20000418

0802246c <roundf>:
 802246c:	0dc3      	lsrs	r3, r0, #23
 802246e:	b2db      	uxtb	r3, r3
 8022470:	3b7f      	subs	r3, #127	@ 0x7f
 8022472:	0002      	movs	r2, r0
 8022474:	b510      	push	{r4, lr}
 8022476:	2b16      	cmp	r3, #22
 8022478:	dc13      	bgt.n	80224a2 <roundf+0x36>
 802247a:	2b00      	cmp	r3, #0
 802247c:	da07      	bge.n	802248e <roundf+0x22>
 802247e:	0fc2      	lsrs	r2, r0, #31
 8022480:	07d0      	lsls	r0, r2, #31
 8022482:	3301      	adds	r3, #1
 8022484:	d102      	bne.n	802248c <roundf+0x20>
 8022486:	23fe      	movs	r3, #254	@ 0xfe
 8022488:	059b      	lsls	r3, r3, #22
 802248a:	4318      	orrs	r0, r3
 802248c:	bd10      	pop	{r4, pc}
 802248e:	4908      	ldr	r1, [pc, #32]	@ (80224b0 <roundf+0x44>)
 8022490:	4119      	asrs	r1, r3
 8022492:	4208      	tst	r0, r1
 8022494:	d0fa      	beq.n	802248c <roundf+0x20>
 8022496:	2080      	movs	r0, #128	@ 0x80
 8022498:	03c0      	lsls	r0, r0, #15
 802249a:	4118      	asrs	r0, r3
 802249c:	1880      	adds	r0, r0, r2
 802249e:	4388      	bics	r0, r1
 80224a0:	e7f4      	b.n	802248c <roundf+0x20>
 80224a2:	2b80      	cmp	r3, #128	@ 0x80
 80224a4:	d1f2      	bne.n	802248c <roundf+0x20>
 80224a6:	1c01      	adds	r1, r0, #0
 80224a8:	f7de fa0a 	bl	80008c0 <__aeabi_fadd>
 80224ac:	e7ee      	b.n	802248c <roundf+0x20>
 80224ae:	46c0      	nop			@ (mov r8, r8)
 80224b0:	007fffff 	.word	0x007fffff

080224b4 <__ieee754_expf>:
 80224b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80224b6:	21ff      	movs	r1, #255	@ 0xff
 80224b8:	0043      	lsls	r3, r0, #1
 80224ba:	1c04      	adds	r4, r0, #0
 80224bc:	085b      	lsrs	r3, r3, #1
 80224be:	05c9      	lsls	r1, r1, #23
 80224c0:	428b      	cmp	r3, r1
 80224c2:	d904      	bls.n	80224ce <__ieee754_expf+0x1a>
 80224c4:	1c01      	adds	r1, r0, #0
 80224c6:	1c20      	adds	r0, r4, #0
 80224c8:	f7de f9fa 	bl	80008c0 <__aeabi_fadd>
 80224cc:	e00d      	b.n	80224ea <__ieee754_expf+0x36>
 80224ce:	0fc6      	lsrs	r6, r0, #31
 80224d0:	428b      	cmp	r3, r1
 80224d2:	d104      	bne.n	80224de <__ieee754_expf+0x2a>
 80224d4:	2e00      	cmp	r6, #0
 80224d6:	d000      	beq.n	80224da <__ieee754_expf+0x26>
 80224d8:	e0ba      	b.n	8022650 <__ieee754_expf+0x19c>
 80224da:	1c20      	adds	r0, r4, #0
 80224dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80224de:	495d      	ldr	r1, [pc, #372]	@ (8022654 <__ieee754_expf+0x1a0>)
 80224e0:	4288      	cmp	r0, r1
 80224e2:	dd04      	ble.n	80224ee <__ieee754_expf+0x3a>
 80224e4:	2000      	movs	r0, #0
 80224e6:	f000 f8f1 	bl	80226cc <__math_oflowf>
 80224ea:	1c04      	adds	r4, r0, #0
 80224ec:	e7f5      	b.n	80224da <__ieee754_expf+0x26>
 80224ee:	2800      	cmp	r0, #0
 80224f0:	da06      	bge.n	8022500 <__ieee754_expf+0x4c>
 80224f2:	4a59      	ldr	r2, [pc, #356]	@ (8022658 <__ieee754_expf+0x1a4>)
 80224f4:	4293      	cmp	r3, r2
 80224f6:	d903      	bls.n	8022500 <__ieee754_expf+0x4c>
 80224f8:	2000      	movs	r0, #0
 80224fa:	f000 f8e1 	bl	80226c0 <__math_uflowf>
 80224fe:	e7f4      	b.n	80224ea <__ieee754_expf+0x36>
 8022500:	4a56      	ldr	r2, [pc, #344]	@ (802265c <__ieee754_expf+0x1a8>)
 8022502:	4293      	cmp	r3, r2
 8022504:	d96e      	bls.n	80225e4 <__ieee754_expf+0x130>
 8022506:	4a56      	ldr	r2, [pc, #344]	@ (8022660 <__ieee754_expf+0x1ac>)
 8022508:	00b5      	lsls	r5, r6, #2
 802250a:	4293      	cmp	r3, r2
 802250c:	d84e      	bhi.n	80225ac <__ieee754_expf+0xf8>
 802250e:	4b55      	ldr	r3, [pc, #340]	@ (8022664 <__ieee754_expf+0x1b0>)
 8022510:	1c20      	adds	r0, r4, #0
 8022512:	5959      	ldr	r1, [r3, r5]
 8022514:	f7de fe82 	bl	800121c <__aeabi_fsub>
 8022518:	4b53      	ldr	r3, [pc, #332]	@ (8022668 <__ieee754_expf+0x1b4>)
 802251a:	1c07      	adds	r7, r0, #0
 802251c:	595b      	ldr	r3, [r3, r5]
 802251e:	2501      	movs	r5, #1
 8022520:	1bad      	subs	r5, r5, r6
 8022522:	9300      	str	r3, [sp, #0]
 8022524:	1bad      	subs	r5, r5, r6
 8022526:	9900      	ldr	r1, [sp, #0]
 8022528:	1c38      	adds	r0, r7, #0
 802252a:	f7de fe77 	bl	800121c <__aeabi_fsub>
 802252e:	1c04      	adds	r4, r0, #0
 8022530:	1c21      	adds	r1, r4, #0
 8022532:	1c20      	adds	r0, r4, #0
 8022534:	f7de fd34 	bl	8000fa0 <__aeabi_fmul>
 8022538:	494c      	ldr	r1, [pc, #304]	@ (802266c <__ieee754_expf+0x1b8>)
 802253a:	1c06      	adds	r6, r0, #0
 802253c:	f7de fd30 	bl	8000fa0 <__aeabi_fmul>
 8022540:	494b      	ldr	r1, [pc, #300]	@ (8022670 <__ieee754_expf+0x1bc>)
 8022542:	f7de fe6b 	bl	800121c <__aeabi_fsub>
 8022546:	1c31      	adds	r1, r6, #0
 8022548:	f7de fd2a 	bl	8000fa0 <__aeabi_fmul>
 802254c:	4949      	ldr	r1, [pc, #292]	@ (8022674 <__ieee754_expf+0x1c0>)
 802254e:	f7de f9b7 	bl	80008c0 <__aeabi_fadd>
 8022552:	1c31      	adds	r1, r6, #0
 8022554:	f7de fd24 	bl	8000fa0 <__aeabi_fmul>
 8022558:	4947      	ldr	r1, [pc, #284]	@ (8022678 <__ieee754_expf+0x1c4>)
 802255a:	f7de fe5f 	bl	800121c <__aeabi_fsub>
 802255e:	1c31      	adds	r1, r6, #0
 8022560:	f7de fd1e 	bl	8000fa0 <__aeabi_fmul>
 8022564:	4945      	ldr	r1, [pc, #276]	@ (802267c <__ieee754_expf+0x1c8>)
 8022566:	f7de f9ab 	bl	80008c0 <__aeabi_fadd>
 802256a:	1c31      	adds	r1, r6, #0
 802256c:	f7de fd18 	bl	8000fa0 <__aeabi_fmul>
 8022570:	1c01      	adds	r1, r0, #0
 8022572:	1c20      	adds	r0, r4, #0
 8022574:	f7de fe52 	bl	800121c <__aeabi_fsub>
 8022578:	1c01      	adds	r1, r0, #0
 802257a:	1c06      	adds	r6, r0, #0
 802257c:	1c20      	adds	r0, r4, #0
 802257e:	f7de fd0f 	bl	8000fa0 <__aeabi_fmul>
 8022582:	9001      	str	r0, [sp, #4]
 8022584:	2d00      	cmp	r5, #0
 8022586:	d140      	bne.n	802260a <__ieee754_expf+0x156>
 8022588:	2180      	movs	r1, #128	@ 0x80
 802258a:	1c30      	adds	r0, r6, #0
 802258c:	05c9      	lsls	r1, r1, #23
 802258e:	f7de fe45 	bl	800121c <__aeabi_fsub>
 8022592:	1c01      	adds	r1, r0, #0
 8022594:	9801      	ldr	r0, [sp, #4]
 8022596:	f7de fb1d 	bl	8000bd4 <__aeabi_fdiv>
 802259a:	1c21      	adds	r1, r4, #0
 802259c:	f7de fe3e 	bl	800121c <__aeabi_fsub>
 80225a0:	1c01      	adds	r1, r0, #0
 80225a2:	20fe      	movs	r0, #254	@ 0xfe
 80225a4:	0580      	lsls	r0, r0, #22
 80225a6:	f7de fe39 	bl	800121c <__aeabi_fsub>
 80225aa:	e79e      	b.n	80224ea <__ieee754_expf+0x36>
 80225ac:	4934      	ldr	r1, [pc, #208]	@ (8022680 <__ieee754_expf+0x1cc>)
 80225ae:	1c20      	adds	r0, r4, #0
 80225b0:	f7de fcf6 	bl	8000fa0 <__aeabi_fmul>
 80225b4:	4b33      	ldr	r3, [pc, #204]	@ (8022684 <__ieee754_expf+0x1d0>)
 80225b6:	5959      	ldr	r1, [r3, r5]
 80225b8:	f7de f982 	bl	80008c0 <__aeabi_fadd>
 80225bc:	f7de ffe8 	bl	8001590 <__aeabi_f2iz>
 80225c0:	0005      	movs	r5, r0
 80225c2:	f7df f805 	bl	80015d0 <__aeabi_i2f>
 80225c6:	4930      	ldr	r1, [pc, #192]	@ (8022688 <__ieee754_expf+0x1d4>)
 80225c8:	1c06      	adds	r6, r0, #0
 80225ca:	f7de fce9 	bl	8000fa0 <__aeabi_fmul>
 80225ce:	1c01      	adds	r1, r0, #0
 80225d0:	1c20      	adds	r0, r4, #0
 80225d2:	f7de fe23 	bl	800121c <__aeabi_fsub>
 80225d6:	492d      	ldr	r1, [pc, #180]	@ (802268c <__ieee754_expf+0x1d8>)
 80225d8:	1c07      	adds	r7, r0, #0
 80225da:	1c30      	adds	r0, r6, #0
 80225dc:	f7de fce0 	bl	8000fa0 <__aeabi_fmul>
 80225e0:	9000      	str	r0, [sp, #0]
 80225e2:	e7a0      	b.n	8022526 <__ieee754_expf+0x72>
 80225e4:	22d0      	movs	r2, #208	@ 0xd0
 80225e6:	0592      	lsls	r2, r2, #22
 80225e8:	4293      	cmp	r3, r2
 80225ea:	d20c      	bcs.n	8022606 <__ieee754_expf+0x152>
 80225ec:	4928      	ldr	r1, [pc, #160]	@ (8022690 <__ieee754_expf+0x1dc>)
 80225ee:	1c20      	adds	r0, r4, #0
 80225f0:	f7de f966 	bl	80008c0 <__aeabi_fadd>
 80225f4:	21fe      	movs	r1, #254	@ 0xfe
 80225f6:	0589      	lsls	r1, r1, #22
 80225f8:	f7dd ffae 	bl	8000558 <__aeabi_fcmpgt>
 80225fc:	1e05      	subs	r5, r0, #0
 80225fe:	d097      	beq.n	8022530 <__ieee754_expf+0x7c>
 8022600:	21fe      	movs	r1, #254	@ 0xfe
 8022602:	0589      	lsls	r1, r1, #22
 8022604:	e75f      	b.n	80224c6 <__ieee754_expf+0x12>
 8022606:	2500      	movs	r5, #0
 8022608:	e792      	b.n	8022530 <__ieee754_expf+0x7c>
 802260a:	2080      	movs	r0, #128	@ 0x80
 802260c:	1c31      	adds	r1, r6, #0
 802260e:	05c0      	lsls	r0, r0, #23
 8022610:	f7de fe04 	bl	800121c <__aeabi_fsub>
 8022614:	1c01      	adds	r1, r0, #0
 8022616:	9801      	ldr	r0, [sp, #4]
 8022618:	f7de fadc 	bl	8000bd4 <__aeabi_fdiv>
 802261c:	1c01      	adds	r1, r0, #0
 802261e:	9800      	ldr	r0, [sp, #0]
 8022620:	f7de fdfc 	bl	800121c <__aeabi_fsub>
 8022624:	1c39      	adds	r1, r7, #0
 8022626:	f7de fdf9 	bl	800121c <__aeabi_fsub>
 802262a:	1c01      	adds	r1, r0, #0
 802262c:	20fe      	movs	r0, #254	@ 0xfe
 802262e:	0580      	lsls	r0, r0, #22
 8022630:	f7de fdf4 	bl	800121c <__aeabi_fsub>
 8022634:	002b      	movs	r3, r5
 8022636:	337d      	adds	r3, #125	@ 0x7d
 8022638:	db02      	blt.n	8022640 <__ieee754_expf+0x18c>
 802263a:	05ec      	lsls	r4, r5, #23
 802263c:	1824      	adds	r4, r4, r0
 802263e:	e74c      	b.n	80224da <__ieee754_expf+0x26>
 8022640:	21d8      	movs	r1, #216	@ 0xd8
 8022642:	3564      	adds	r5, #100	@ 0x64
 8022644:	05ed      	lsls	r5, r5, #23
 8022646:	1828      	adds	r0, r5, r0
 8022648:	0509      	lsls	r1, r1, #20
 802264a:	f7de fca9 	bl	8000fa0 <__aeabi_fmul>
 802264e:	e74c      	b.n	80224ea <__ieee754_expf+0x36>
 8022650:	2400      	movs	r4, #0
 8022652:	e742      	b.n	80224da <__ieee754_expf+0x26>
 8022654:	42b17217 	.word	0x42b17217
 8022658:	42cff1b5 	.word	0x42cff1b5
 802265c:	3eb17218 	.word	0x3eb17218
 8022660:	3f851591 	.word	0x3f851591
 8022664:	08025258 	.word	0x08025258
 8022668:	08025250 	.word	0x08025250
 802266c:	3331bb4c 	.word	0x3331bb4c
 8022670:	35ddea0e 	.word	0x35ddea0e
 8022674:	388ab355 	.word	0x388ab355
 8022678:	3b360b61 	.word	0x3b360b61
 802267c:	3e2aaaab 	.word	0x3e2aaaab
 8022680:	3fb8aa3b 	.word	0x3fb8aa3b
 8022684:	08025260 	.word	0x08025260
 8022688:	3f317180 	.word	0x3f317180
 802268c:	3717f7d1 	.word	0x3717f7d1
 8022690:	7149f2ca 	.word	0x7149f2ca

08022694 <with_errnof>:
 8022694:	b570      	push	{r4, r5, r6, lr}
 8022696:	000d      	movs	r5, r1
 8022698:	1c04      	adds	r4, r0, #0
 802269a:	f7fd f923 	bl	801f8e4 <__errno>
 802269e:	6005      	str	r5, [r0, #0]
 80226a0:	1c20      	adds	r0, r4, #0
 80226a2:	bd70      	pop	{r4, r5, r6, pc}

080226a4 <xflowf>:
 80226a4:	b510      	push	{r4, lr}
 80226a6:	1c0b      	adds	r3, r1, #0
 80226a8:	2800      	cmp	r0, #0
 80226aa:	d002      	beq.n	80226b2 <xflowf+0xe>
 80226ac:	2380      	movs	r3, #128	@ 0x80
 80226ae:	061b      	lsls	r3, r3, #24
 80226b0:	18cb      	adds	r3, r1, r3
 80226b2:	1c18      	adds	r0, r3, #0
 80226b4:	f7de fc74 	bl	8000fa0 <__aeabi_fmul>
 80226b8:	2122      	movs	r1, #34	@ 0x22
 80226ba:	f7ff ffeb 	bl	8022694 <with_errnof>
 80226be:	bd10      	pop	{r4, pc}

080226c0 <__math_uflowf>:
 80226c0:	2180      	movs	r1, #128	@ 0x80
 80226c2:	b510      	push	{r4, lr}
 80226c4:	0549      	lsls	r1, r1, #21
 80226c6:	f7ff ffed 	bl	80226a4 <xflowf>
 80226ca:	bd10      	pop	{r4, pc}

080226cc <__math_oflowf>:
 80226cc:	21e0      	movs	r1, #224	@ 0xe0
 80226ce:	b510      	push	{r4, lr}
 80226d0:	05c9      	lsls	r1, r1, #23
 80226d2:	f7ff ffe7 	bl	80226a4 <xflowf>
 80226d6:	bd10      	pop	{r4, pc}

080226d8 <_init>:
 80226d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226da:	46c0      	nop			@ (mov r8, r8)
 80226dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226de:	bc08      	pop	{r3}
 80226e0:	469e      	mov	lr, r3
 80226e2:	4770      	bx	lr

080226e4 <_fini>:
 80226e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226e6:	46c0      	nop			@ (mov r8, r8)
 80226e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226ea:	bc08      	pop	{r3}
 80226ec:	469e      	mov	lr, r3
 80226ee:	4770      	bx	lr
