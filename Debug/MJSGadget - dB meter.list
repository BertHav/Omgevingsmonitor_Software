
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002919c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d00  08029260  08029260  0002a260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802df60  0802df60  0002f448  2**0
                  CONTENTS
  4 .ARM          00000008  0802df60  0802df60  0002ef60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802df68  0802df68  0002f448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802df68  0802df68  0002ef68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802df6c  0802df6c  0002ef6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000448  20000000  0802df70  0002f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031f8  20000448  0802e3b8  0002f448  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003640  0802e3b8  0002f640  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002f448  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036a0e  00000000  00000000  0002f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009cf9  00000000  00000000  00065e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002da0  00000000  00000000  0006fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021fb  00000000  00000000  00072918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024267  00000000  00000000  00074b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004614a  00000000  00000000  00098d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2fc0  00000000  00000000  000deec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00181e84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb9c  00000000  00000000  00181f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018dad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018db41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  001900bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000448 	.word	0x20000448
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08029244 	.word	0x08029244

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000044c 	.word	0x2000044c
 8000104:	08029244 	.word	0x08029244

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802d080 	.word	0x0802d080
 8000e0c:	0802d0c0 	.word	0x0802d0c0
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802d0fc 	.word	0x0802d0fc
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af02      	add	r7, sp, #8
 8003656:	0004      	movs	r4, r0
 8003658:	0008      	movs	r0, r1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	0019      	movs	r1, r3
 800365e:	260e      	movs	r6, #14
 8003660:	19bb      	adds	r3, r7, r6
 8003662:	1c22      	adds	r2, r4, #0
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	230c      	movs	r3, #12
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	1c0a      	adds	r2, r1, #0
 8003672:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteMemRegister+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteMemRegister+0x58>)
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <WriteMemRegister+0x5c>)
 8003682:	7918      	ldrb	r0, [r3, #4]
 8003684:	68bd      	ldr	r5, [r7, #8]
 8003686:	230c      	movs	r3, #12
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	19bb      	adds	r3, r7, r6
 800368e:	8819      	ldrh	r1, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	002b      	movs	r3, r5
 8003698:	47a0      	blx	r4
 800369a:	0003      	movs	r3, r0
 800369c:	e000      	b.n	80036a0 <WriteMemRegister+0x50>
  }
  return false;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b005      	add	sp, #20
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20000474 	.word	0x20000474
 80036ac:	200004a4 	.word	0x200004a4

080036b0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	0004      	movs	r4, r0
 80036b8:	0008      	movs	r0, r1
 80036ba:	60ba      	str	r2, [r7, #8]
 80036bc:	0019      	movs	r1, r3
 80036be:	260e      	movs	r6, #14
 80036c0:	19bb      	adds	r3, r7, r6
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	230c      	movs	r3, #12
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <ReadMemRegister+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <ReadMemRegister+0x58>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <ReadMemRegister+0x5c>)
 80036e2:	7918      	ldrb	r0, [r3, #4]
 80036e4:	68bd      	ldr	r5, [r7, #8]
 80036e6:	230c      	movs	r3, #12
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	19bb      	adds	r3, r7, r6
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	002b      	movs	r3, r5
 80036f8:	47a0      	blx	r4
 80036fa:	0003      	movs	r3, r0
 80036fc:	e000      	b.n	8003700 <ReadMemRegister+0x50>
  }
  return false;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b005      	add	sp, #20
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	20000470 	.word	0x20000470
 800370c:	200004a4 	.word	0x200004a4

08003710 <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003714:	4b02      	ldr	r3, [pc, #8]	@ (8003720 <ResetENS160samplecounter+0x10>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	2000046c 	.word	0x2000046c

08003724 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 800372c:	f00f ffca 	bl	80136c4 <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	18d2      	adds	r2, r2, r3
 8003736:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <setENS160TimeStamp+0x20>)
 8003738:	601a      	str	r2, [r3, #0]
}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	20000468 	.word	0x20000468

08003748 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <ENS_Init+0x20>)
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <ENS_Init+0x24>)
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	601a      	str	r2, [r3, #0]
}	
 800375e:	46c0      	nop			@ (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	20000470 	.word	0x20000470
 800376c:	20000474 	.word	0x20000474

08003770 <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003776:	1dbb      	adds	r3, r7, #6
 8003778:	22f0      	movs	r2, #240	@ 0xf0
 800377a:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800377c:	1dba      	adds	r2, r7, #6
 800377e:	2301      	movs	r3, #1
 8003780:	2101      	movs	r1, #1
 8003782:	2010      	movs	r0, #16
 8003784:	f7ff ff64 	bl	8003650 <WriteMemRegister>
 8003788:	0003      	movs	r3, r0
 800378a:	001a      	movs	r2, r3
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003790:	201e      	movs	r0, #30
 8003792:	f00f ffa1 	bl	80136d8 <HAL_Delay>
	return result;
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	1e5a      	subs	r2, r3, #1
 800379c:	4193      	sbcs	r3, r2
 800379e:	b2db      	uxtb	r3, r3
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 80037ae:	003b      	movs	r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 80037ba:	003a      	movs	r2, r7
 80037bc:	2302      	movs	r3, #2
 80037be:	2101      	movs	r1, #1
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7ff ff75 	bl	80036b0 <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 80037c6:	003b      	movs	r3, r7
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	b21a      	sxth	r2, r3
 80037cc:	003b      	movs	r3, r7
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <ENS160_checkPartID+0xa8>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <ENS160_checkPartID+0x68>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	23b0      	movs	r3, #176	@ 0xb0
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d009      	beq.n	8003804 <ENS160_checkPartID+0x5c>
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	2362      	movs	r3, #98	@ 0x62
 80037f6:	33ff      	adds	r3, #255	@ 0xff
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d101      	bne.n	8003800 <ENS160_checkPartID+0x58>
 80037fc:	4b15      	ldr	r3, [pc, #84]	@ (8003854 <ENS160_checkPartID+0xac>)
 80037fe:	e002      	b.n	8003806 <ENS160_checkPartID+0x5e>
 8003800:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <ENS160_checkPartID+0xb0>)
 8003802:	e000      	b.n	8003806 <ENS160_checkPartID+0x5e>
 8003804:	4b15      	ldr	r3, [pc, #84]	@ (800385c <ENS160_checkPartID+0xb4>)
 8003806:	4a16      	ldr	r2, [pc, #88]	@ (8003860 <ENS160_checkPartID+0xb8>)
 8003808:	4916      	ldr	r1, [pc, #88]	@ (8003864 <ENS160_checkPartID+0xbc>)
 800380a:	2003      	movs	r0, #3
 800380c:	f00f fa1c 	bl	8012c48 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	23b0      	movs	r3, #176	@ 0xb0
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	429a      	cmp	r2, r3
 800381a:	d106      	bne.n	800382a <ENS160_checkPartID+0x82>
	  hwsw._revENS16x = 0;
 800381c:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <ENS160_checkPartID+0xc0>)
 800381e:	2200      	movs	r2, #0
 8003820:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e00b      	b.n	8003842 <ENS160_checkPartID+0x9a>
	}
	else if (part_id == ENS161_PARTID) {
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	2362      	movs	r3, #98	@ 0x62
 8003830:	33ff      	adds	r3, #255	@ 0xff
 8003832:	429a      	cmp	r2, r3
 8003834:	d105      	bne.n	8003842 <ENS160_checkPartID+0x9a>
	  hwsw._revENS16x = 1;
 8003836:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <ENS160_checkPartID+0xc0>)
 8003838:	2201      	movs	r2, #1
 800383a:	70da      	strb	r2, [r3, #3]
	  result = true;
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b002      	add	sp, #8
 800384c:	bd80      	pop	{r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	20000464 	.word	0x20000464
 8003854:	08029260 	.word	0x08029260
 8003858:	0802926c 	.word	0x0802926c
 800385c:	08029270 	.word	0x08029270
 8003860:	0802927c 	.word	0x0802927c
 8003864:	0802929c 	.word	0x0802929c
 8003868:	200004a4 	.word	0x200004a4

0800386c <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003872:	4a27      	ldr	r2, [pc, #156]	@ (8003910 <ENS160_clearCommand+0xa4>)
 8003874:	2301      	movs	r3, #1
 8003876:	2101      	movs	r1, #1
 8003878:	2012      	movs	r0, #18
 800387a:	f7ff fee9 	bl	8003650 <WriteMemRegister>
 800387e:	0003      	movs	r3, r0
 8003880:	001a      	movs	r2, r3
 8003882:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <ENS160_clearCommand+0xa8>)
 8003884:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003886:	200a      	movs	r0, #10
 8003888:	f00f ff26 	bl	80136d8 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 800388c:	4b20      	ldr	r3, [pc, #128]	@ (8003910 <ENS160_clearCommand+0xa4>)
 800388e:	22cc      	movs	r2, #204	@ 0xcc
 8003890:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003892:	4a1f      	ldr	r2, [pc, #124]	@ (8003910 <ENS160_clearCommand+0xa4>)
 8003894:	2301      	movs	r3, #1
 8003896:	2101      	movs	r1, #1
 8003898:	2012      	movs	r0, #18
 800389a:	f7ff fed9 	bl	8003650 <WriteMemRegister>
 800389e:	0003      	movs	r3, r0
 80038a0:	001a      	movs	r2, r3
 80038a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4013      	ands	r3, r2
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038ac:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038ae:	200a      	movs	r0, #10
 80038b0:	f00f ff12 	bl	80136d8 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 80038b4:	4a16      	ldr	r2, [pc, #88]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038b6:	2301      	movs	r3, #1
 80038b8:	2101      	movs	r1, #1
 80038ba:	2020      	movs	r0, #32
 80038bc:	f7ff fef8 	bl	80036b0 <ReadMemRegister>
 80038c0:	0003      	movs	r3, r0
 80038c2:	001a      	movs	r2, r3
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4013      	ands	r3, r2
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <ENS160_clearCommand+0xa8>)
 80038ce:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <ENS160_clearCommand+0xac>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 80038d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	0018      	movs	r0, r3
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <ENS160_clearCommand+0xa4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <ENS160_clearCommand+0x7e>
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <ENS160_clearCommand+0xb0>)
 80038e8:	e000      	b.n	80038ec <ENS160_clearCommand+0x80>
 80038ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <ENS160_clearCommand+0xb4>)
 80038ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <ENS160_clearCommand+0xb8>)
 80038ee:	490e      	ldr	r1, [pc, #56]	@ (8003928 <ENS160_clearCommand+0xbc>)
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	0003      	movs	r3, r0
 80038f4:	2003      	movs	r0, #3
 80038f6:	f00f f9a7 	bl	8012c48 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038fa:	200a      	movs	r0, #10
 80038fc:	f00f feec 	bl	80136d8 <HAL_Delay>
		
	return result;
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <ENS160_clearCommand+0xa8>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	4193      	sbcs	r3, r2
 8003908:	b2db      	uxtb	r3, r3
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200004ac 	.word	0x200004ac
 8003914:	200004ad 	.word	0x200004ad
 8003918:	20000464 	.word	0x20000464
 800391c:	080292a0 	.word	0x080292a0
 8003920:	0802926c 	.word	0x0802926c
 8003924:	080292a4 	.word	0x080292a4
 8003928:	0802929c 	.word	0x0802929c

0800392c <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b085      	sub	sp, #20
 8003930:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003932:	f7ff ff9b 	bl	800386c <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003936:	200a      	movs	r0, #10
 8003938:	f00f fece 	bl	80136d8 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	220e      	movs	r2, #14
 8003940:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003942:	1d3a      	adds	r2, r7, #4
 8003944:	2301      	movs	r3, #1
 8003946:	2101      	movs	r1, #1
 8003948:	2012      	movs	r0, #18
 800394a:	f7ff fe81 	bl	8003650 <WriteMemRegister>

	HAL_Delay(10);
 800394e:	200a      	movs	r0, #10
 8003950:	f00f fec2 	bl	80136d8 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003954:	1d3a      	adds	r2, r7, #4
 8003956:	2303      	movs	r3, #3
 8003958:	2101      	movs	r1, #1
 800395a:	204c      	movs	r0, #76	@ 0x4c
 800395c:	f7ff fea8 	bl	80036b0 <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003960:	1d3b      	adds	r3, r7, #4
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003966:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	785a      	ldrb	r2, [r3, #1]
 800396c:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800396e:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	789a      	ldrb	r2, [r3, #2]
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003976:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003978:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d903      	bls.n	8003988 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003982:	2201      	movs	r2, #1
 8003984:	70da      	strb	r2, [r3, #3]
 8003986:	e002      	b.n	800398e <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800398a:	2200      	movs	r2, #0
 800398c:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 800398e:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <ENS160_getFirmware+0xa8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003996:	4b0e      	ldr	r3, [pc, #56]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	001c      	movs	r4, r3
 800399c:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	0018      	movs	r0, r3
 80039a2:	4b0b      	ldr	r3, [pc, #44]	@ (80039d0 <ENS160_getFirmware+0xa4>)
 80039a4:	789b      	ldrb	r3, [r3, #2]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	@ (80039d8 <ENS160_getFirmware+0xac>)
 80039a8:	490c      	ldr	r1, [pc, #48]	@ (80039dc <ENS160_getFirmware+0xb0>)
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	9000      	str	r0, [sp, #0]
 80039ae:	0023      	movs	r3, r4
 80039b0:	2003      	movs	r0, #3
 80039b2:	f00f f949 	bl	8012c48 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80039b6:	200a      	movs	r0, #10
 80039b8:	f00f fe8e 	bl	80136d8 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	1e5a      	subs	r2, r3, #1
 80039c2:	4193      	sbcs	r3, r2
 80039c4:	b2db      	uxtb	r3, r3
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b003      	add	sp, #12
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	200004a4 	.word	0x200004a4
 80039d4:	20000464 	.word	0x20000464
 80039d8:	080292d0 	.word	0x080292d0
 80039dc:	0802929c 	.word	0x0802929c

080039e0 <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0002      	movs	r2, r0
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d108      	bne.n	8003a06 <ENS160_setMode+0x26>
 80039f4:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <ENS160_setMode+0x58>)
 80039f6:	78db      	ldrb	r3, [r3, #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <ENS160_setMode+0x26>
	  result = 1;
 80039fc:	230f      	movs	r3, #15
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
 8003a04:	e00a      	b.n	8003a1c <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003a06:	1dfa      	adds	r2, r7, #7
 8003a08:	2301      	movs	r3, #1
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	2010      	movs	r0, #16
 8003a0e:	f7ff fe1f 	bl	8003650 <WriteMemRegister>
 8003a12:	0003      	movs	r3, r0
 8003a14:	001a      	movs	r2, r3
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003a1c:	200a      	movs	r0, #10
 8003a1e:	f00f fe5b 	bl	80136d8 <HAL_Delay>
	
	return result;
 8003a22:	230f      	movs	r3, #15
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	4193      	sbcs	r3, r2
 8003a2c:	b2db      	uxtb	r3, r3
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	200004a4 	.word	0x200004a4

08003a3c <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003a48:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <ENS_DeviceConnected+0xec>)
 8003a4a:	2252      	movs	r2, #82	@ 0x52
 8003a4c:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e02d      	b.n	8003ab2 <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003a56:	f7ff fe8b 	bl	8003770 <ENS160_reset>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	401a      	ands	r2, r3
 8003a64:	1dfb      	adds	r3, r7, #7
 8003a66:	1e51      	subs	r1, r2, #1
 8003a68:	418a      	sbcs	r2, r1
 8003a6a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003a6c:	f7ff fe9c 	bl	80037a8 <ENS160_checkPartID>
 8003a70:	0003      	movs	r3, r0
 8003a72:	001a      	movs	r2, r3
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	401a      	ands	r2, r3
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	1e51      	subs	r1, r2, #1
 8003a7e:	418a      	sbcs	r2, r1
 8003a80:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4053      	eors	r3, r2
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003a90:	4a26      	ldr	r2, [pc, #152]	@ (8003b2c <ENS_DeviceConnected+0xf0>)
 8003a92:	4b27      	ldr	r3, [pc, #156]	@ (8003b30 <ENS_DeviceConnected+0xf4>)
 8003a94:	0019      	movs	r1, r3
 8003a96:	2002      	movs	r0, #2
 8003a98:	f00f f8d6 	bl	8012c48 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003a9c:	4b22      	ldr	r3, [pc, #136]	@ (8003b28 <ENS_DeviceConnected+0xec>)
 8003a9e:	2253      	movs	r2, #83	@ 0x53
 8003aa0:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003aa2:	1dfb      	adds	r3, r7, #7
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003aa8:	1dbb      	adds	r3, r7, #6
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	1dbb      	adds	r3, r7, #6
 8003aae:	3201      	adds	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	1dbb      	adds	r3, r7, #6
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d9cd      	bls.n	8003a56 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02b      	beq.n	8003b1a <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7ff ff8c 	bl	80039e0 <ENS160_setMode>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	001a      	movs	r2, r3
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	401a      	ands	r2, r3
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	1e51      	subs	r1, r2, #1
 8003ad6:	418a      	sbcs	r2, r1
 8003ad8:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003ada:	f7ff fec7 	bl	800386c <ENS160_clearCommand>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	1dfb      	adds	r3, r7, #7
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	1e51      	subs	r1, r2, #1
 8003aec:	418a      	sbcs	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003af0:	f7ff ff1c 	bl	800392c <ENS160_getFirmware>
 8003af4:	0003      	movs	r3, r0
 8003af6:	001a      	movs	r2, r3
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	401a      	ands	r2, r3
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	1e51      	subs	r1, r2, #1
 8003b02:	418a      	sbcs	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <ENS_DeviceConnected+0xf8>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <ENS_DeviceConnected+0xfc>)
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <ENS_DeviceConnected+0x100>)
 8003b12:	0019      	movs	r1, r3
 8003b14:	2003      	movs	r0, #3
 8003b16:	f00f f897 	bl	8012c48 <CreateLine>
    }
  }
  return _available;
 8003b1a:	1dfb      	adds	r3, r7, #7
 8003b1c:	781b      	ldrb	r3, [r3, #0]
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	200004a4 	.word	0x200004a4
 8003b2c:	080292ec 	.word	0x080292ec
 8003b30:	0802930c 	.word	0x0802930c
 8003b34:	20000464 	.word	0x20000464
 8003b38:	08029310 	.word	0x08029310
 8003b3c:	0802929c 	.word	0x0802929c

08003b40 <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003b46:	1dfa      	adds	r2, r7, #7
 8003b48:	2301      	movs	r3, #1
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	2020      	movs	r0, #32
 8003b4e:	f7ff fdaf 	bl	80036b0 <ReadMemRegister>

  if (debugENS160) {
 8003b52:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <ENS160_readStatus+0x34>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003b5a:	1dfb      	adds	r3, r7, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <ENS160_readStatus+0x38>)
 8003b60:	4906      	ldr	r1, [pc, #24]	@ (8003b7c <ENS160_readStatus+0x3c>)
 8003b62:	2003      	movs	r0, #3
 8003b64:	f00f f870 	bl	8012c48 <CreateLine>
  }
  return status;
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	781b      	ldrb	r3, [r3, #0]
}
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000464 	.word	0x20000464
 8003b78:	08029344 	.word	0x08029344
 8003b7c:	0802929c 	.word	0x0802929c

08003b80 <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003b80:	b5b0      	push	{r4, r5, r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	0002      	movs	r2, r0
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003b8c:	2317      	movs	r3, #23
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003b94:	4b32      	ldr	r3, [pc, #200]	@ (8003c60 <ENS160_measure+0xe0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003b9c:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <ENS160_measure+0xe4>)
 8003b9e:	4b32      	ldr	r3, [pc, #200]	@ (8003c68 <ENS160_measure+0xe8>)
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	2003      	movs	r0, #3
 8003ba4:	f00f f850 	bl	8012c48 <CreateLine>
	}
	
	if (waitForNew) {
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d010      	beq.n	8003bd2 <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f00f fd91 	bl	80136d8 <HAL_Delay>
			status = ENS160_readStatus();
 8003bb6:	2516      	movs	r5, #22
 8003bb8:	197c      	adds	r4, r7, r5
 8003bba:	f7ff ffc1 	bl	8003b40 <ENS160_readStatus>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <ENS160_measure+0x30>
 8003bd0:	e002      	b.n	8003bd8 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003bd2:	200a      	movs	r0, #10
 8003bd4:	f00f fd80 	bl	80136d8 <HAL_Delay>
	}
	
	newData = true;
 8003bd8:	2317      	movs	r3, #23
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 8003be0:	240c      	movs	r4, #12
 8003be2:	193a      	adds	r2, r7, r4
 8003be4:	2307      	movs	r3, #7
 8003be6:	2101      	movs	r1, #1
 8003be8:	2021      	movs	r0, #33	@ 0x21
 8003bea:	f7ff fd61 	bl	80036b0 <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 8003bee:	0021      	movs	r1, r4
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	781a      	ldrb	r2, [r3, #0]
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <ENS160_measure+0xec>)
 8003bf6:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21a      	sxth	r2, r3
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	789b      	ldrb	r3, [r3, #2]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b17      	ldr	r3, [pc, #92]	@ (8003c6c <ENS160_measure+0xec>)
 8003c0e:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	b21a      	sxth	r2, r3
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	791b      	ldrb	r3, [r3, #4]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b11      	ldr	r3, [pc, #68]	@ (8003c6c <ENS160_measure+0xec>)
 8003c26:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <ENS160_measure+0xf0>)
 8003c2a:	78db      	ldrb	r3, [r3, #3]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <ENS160_measure+0xca>
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	795b      	ldrb	r3, [r3, #5]
 8003c34:	b21a      	sxth	r2, r3
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	799b      	ldrb	r3, [r3, #6]
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b21b      	sxth	r3, r3
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <ENS160_measure+0xec>)
 8003c46:	80da      	strh	r2, [r3, #6]
 8003c48:	e002      	b.n	8003c50 <ENS160_measure+0xd0>
  	else pred._data_aqi500 = 0;
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <ENS160_measure+0xec>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8003c50:	2317      	movs	r3, #23
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b006      	add	sp, #24
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	20000464 	.word	0x20000464
 8003c64:	08029358 	.word	0x08029358
 8003c68:	0802929c 	.word	0x0802929c
 8003c6c:	2000049c 	.word	0x2000049c
 8003c70:	200004a4 	.word	0x200004a4

08003c74 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 8003c80:	2317      	movs	r3, #23
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 8003c88:	4bae      	ldr	r3, [pc, #696]	@ (8003f44 <ENS160_measureRaw+0x2d0>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 8003c90:	4aad      	ldr	r2, [pc, #692]	@ (8003f48 <ENS160_measureRaw+0x2d4>)
 8003c92:	4bae      	ldr	r3, [pc, #696]	@ (8003f4c <ENS160_measureRaw+0x2d8>)
 8003c94:	0019      	movs	r1, r3
 8003c96:	2003      	movs	r0, #3
 8003c98:	f00e ffd6 	bl	8012c48 <CreateLine>
	}
	
	if (waitForNew) {
 8003c9c:	1dfb      	adds	r3, r7, #7
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d010      	beq.n	8003cc6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	f00f fd17 	bl	80136d8 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003caa:	240b      	movs	r4, #11
 8003cac:	193a      	adds	r2, r7, r4
 8003cae:	2301      	movs	r3, #1
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	2020      	movs	r0, #32
 8003cb4:	f7ff fcfc 	bl	80036b0 <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ee      	beq.n	8003ca4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 8003cc6:	240c      	movs	r4, #12
 8003cc8:	193a      	adds	r2, r7, r4
 8003cca:	2308      	movs	r3, #8
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2048      	movs	r0, #72	@ 0x48
 8003cd0:	f7ff fcee 	bl	80036b0 <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	001a      	movs	r2, r3
 8003cda:	193b      	adds	r3, r7, r4
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7fd fcc0 	bl	8001668 <__aeabi_ui2f>
 8003ce8:	1c03      	adds	r3, r0, #0
 8003cea:	218a      	movs	r1, #138	@ 0x8a
 8003cec:	05c9      	lsls	r1, r1, #23
 8003cee:	1c18      	adds	r0, r3, #0
 8003cf0:	f7fc ff70 	bl	8000bd4 <__aeabi_fdiv>
 8003cf4:	1c03      	adds	r3, r0, #0
 8003cf6:	1c18      	adds	r0, r3, #0
 8003cf8:	f7ff fbb4 	bl	8003464 <__aeabi_f2d>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	000b      	movs	r3, r1
 8003d00:	2000      	movs	r0, #0
 8003d02:	2180      	movs	r1, #128	@ 0x80
 8003d04:	05c9      	lsls	r1, r1, #23
 8003d06:	f023 ffc7 	bl	8027c98 <pow>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	000b      	movs	r3, r1
 8003d0e:	0010      	movs	r0, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	f7fc fc9b 	bl	800064c <__aeabi_d2uiz>
 8003d16:	0002      	movs	r2, r0
 8003d18:	4b8d      	ldr	r3, [pc, #564]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003d1a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003d1c:	193b      	adds	r3, r7, r4
 8003d1e:	789b      	ldrb	r3, [r3, #2]
 8003d20:	001a      	movs	r2, r3
 8003d22:	193b      	adds	r3, r7, r4
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7fd fc9c 	bl	8001668 <__aeabi_ui2f>
 8003d30:	1c03      	adds	r3, r0, #0
 8003d32:	218a      	movs	r1, #138	@ 0x8a
 8003d34:	05c9      	lsls	r1, r1, #23
 8003d36:	1c18      	adds	r0, r3, #0
 8003d38:	f7fc ff4c 	bl	8000bd4 <__aeabi_fdiv>
 8003d3c:	1c03      	adds	r3, r0, #0
 8003d3e:	1c18      	adds	r0, r3, #0
 8003d40:	f7ff fb90 	bl	8003464 <__aeabi_f2d>
 8003d44:	0002      	movs	r2, r0
 8003d46:	000b      	movs	r3, r1
 8003d48:	2000      	movs	r0, #0
 8003d4a:	2180      	movs	r1, #128	@ 0x80
 8003d4c:	05c9      	lsls	r1, r1, #23
 8003d4e:	f023 ffa3 	bl	8027c98 <pow>
 8003d52:	0002      	movs	r2, r0
 8003d54:	000b      	movs	r3, r1
 8003d56:	0010      	movs	r0, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	f7fc fc77 	bl	800064c <__aeabi_d2uiz>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	4b7b      	ldr	r3, [pc, #492]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003d62:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003d64:	193b      	adds	r3, r7, r4
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	001a      	movs	r2, r3
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	795b      	ldrb	r3, [r3, #5]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	4313      	orrs	r3, r2
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fd fc78 	bl	8001668 <__aeabi_ui2f>
 8003d78:	1c03      	adds	r3, r0, #0
 8003d7a:	218a      	movs	r1, #138	@ 0x8a
 8003d7c:	05c9      	lsls	r1, r1, #23
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f7fc ff28 	bl	8000bd4 <__aeabi_fdiv>
 8003d84:	1c03      	adds	r3, r0, #0
 8003d86:	1c18      	adds	r0, r3, #0
 8003d88:	f7ff fb6c 	bl	8003464 <__aeabi_f2d>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	2000      	movs	r0, #0
 8003d92:	2180      	movs	r1, #128	@ 0x80
 8003d94:	05c9      	lsls	r1, r1, #23
 8003d96:	f023 ff7f 	bl	8027c98 <pow>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	000b      	movs	r3, r1
 8003d9e:	0010      	movs	r0, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	f7fc fc53 	bl	800064c <__aeabi_d2uiz>
 8003da6:	0002      	movs	r2, r0
 8003da8:	4b69      	ldr	r3, [pc, #420]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003daa:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	799b      	ldrb	r3, [r3, #6]
 8003db0:	001a      	movs	r2, r3
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	79db      	ldrb	r3, [r3, #7]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	4313      	orrs	r3, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7fd fc54 	bl	8001668 <__aeabi_ui2f>
 8003dc0:	1c03      	adds	r3, r0, #0
 8003dc2:	218a      	movs	r1, #138	@ 0x8a
 8003dc4:	05c9      	lsls	r1, r1, #23
 8003dc6:	1c18      	adds	r0, r3, #0
 8003dc8:	f7fc ff04 	bl	8000bd4 <__aeabi_fdiv>
 8003dcc:	1c03      	adds	r3, r0, #0
 8003dce:	1c18      	adds	r0, r3, #0
 8003dd0:	f7ff fb48 	bl	8003464 <__aeabi_f2d>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	000b      	movs	r3, r1
 8003dd8:	2000      	movs	r0, #0
 8003dda:	2180      	movs	r1, #128	@ 0x80
 8003ddc:	05c9      	lsls	r1, r1, #23
 8003dde:	f023 ff5b 	bl	8027c98 <pow>
 8003de2:	0002      	movs	r2, r0
 8003de4:	000b      	movs	r3, r1
 8003de6:	0010      	movs	r0, r2
 8003de8:	0019      	movs	r1, r3
 8003dea:	f7fc fc2f 	bl	800064c <__aeabi_d2uiz>
 8003dee:	0002      	movs	r2, r0
 8003df0:	4b57      	ldr	r3, [pc, #348]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003df2:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8003df4:	193a      	adds	r2, r7, r4
 8003df6:	2308      	movs	r3, #8
 8003df8:	2101      	movs	r1, #1
 8003dfa:	2028      	movs	r0, #40	@ 0x28
 8003dfc:	f7ff fc58 	bl	80036b0 <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	001a      	movs	r2, r3
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7fd fc2a 	bl	8001668 <__aeabi_ui2f>
 8003e14:	1c03      	adds	r3, r0, #0
 8003e16:	218a      	movs	r1, #138	@ 0x8a
 8003e18:	05c9      	lsls	r1, r1, #23
 8003e1a:	1c18      	adds	r0, r3, #0
 8003e1c:	f7fc feda 	bl	8000bd4 <__aeabi_fdiv>
 8003e20:	1c03      	adds	r3, r0, #0
 8003e22:	1c18      	adds	r0, r3, #0
 8003e24:	f7ff fb1e 	bl	8003464 <__aeabi_f2d>
 8003e28:	0002      	movs	r2, r0
 8003e2a:	000b      	movs	r3, r1
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	05c9      	lsls	r1, r1, #23
 8003e32:	f023 ff31 	bl	8027c98 <pow>
 8003e36:	0002      	movs	r2, r0
 8003e38:	000b      	movs	r3, r1
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	f7fc fc05 	bl	800064c <__aeabi_d2uiz>
 8003e42:	0002      	movs	r2, r0
 8003e44:	4b42      	ldr	r3, [pc, #264]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003e46:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003e48:	193b      	adds	r3, r7, r4
 8003e4a:	789b      	ldrb	r3, [r3, #2]
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	78db      	ldrb	r3, [r3, #3]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	4313      	orrs	r3, r2
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd fc06 	bl	8001668 <__aeabi_ui2f>
 8003e5c:	1c03      	adds	r3, r0, #0
 8003e5e:	218a      	movs	r1, #138	@ 0x8a
 8003e60:	05c9      	lsls	r1, r1, #23
 8003e62:	1c18      	adds	r0, r3, #0
 8003e64:	f7fc feb6 	bl	8000bd4 <__aeabi_fdiv>
 8003e68:	1c03      	adds	r3, r0, #0
 8003e6a:	1c18      	adds	r0, r3, #0
 8003e6c:	f7ff fafa 	bl	8003464 <__aeabi_f2d>
 8003e70:	0002      	movs	r2, r0
 8003e72:	000b      	movs	r3, r1
 8003e74:	2000      	movs	r0, #0
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	05c9      	lsls	r1, r1, #23
 8003e7a:	f023 ff0d 	bl	8027c98 <pow>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	000b      	movs	r3, r1
 8003e82:	0010      	movs	r0, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	f7fc fbe1 	bl	800064c <__aeabi_d2uiz>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	4b30      	ldr	r3, [pc, #192]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003e8e:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	791b      	ldrb	r3, [r3, #4]
 8003e94:	001a      	movs	r2, r3
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	795b      	ldrb	r3, [r3, #5]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fd fbe2 	bl	8001668 <__aeabi_ui2f>
 8003ea4:	1c03      	adds	r3, r0, #0
 8003ea6:	218a      	movs	r1, #138	@ 0x8a
 8003ea8:	05c9      	lsls	r1, r1, #23
 8003eaa:	1c18      	adds	r0, r3, #0
 8003eac:	f7fc fe92 	bl	8000bd4 <__aeabi_fdiv>
 8003eb0:	1c03      	adds	r3, r0, #0
 8003eb2:	1c18      	adds	r0, r3, #0
 8003eb4:	f7ff fad6 	bl	8003464 <__aeabi_f2d>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	000b      	movs	r3, r1
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	2180      	movs	r1, #128	@ 0x80
 8003ec0:	05c9      	lsls	r1, r1, #23
 8003ec2:	f023 fee9 	bl	8027c98 <pow>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	000b      	movs	r3, r1
 8003eca:	0010      	movs	r0, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	f7fc fbbd 	bl	800064c <__aeabi_d2uiz>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003ed6:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003ed8:	193b      	adds	r3, r7, r4
 8003eda:	799b      	ldrb	r3, [r3, #6]
 8003edc:	001a      	movs	r2, r3
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	79db      	ldrb	r3, [r3, #7]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fd fbbe 	bl	8001668 <__aeabi_ui2f>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	218a      	movs	r1, #138	@ 0x8a
 8003ef0:	05c9      	lsls	r1, r1, #23
 8003ef2:	1c18      	adds	r0, r3, #0
 8003ef4:	f7fc fe6e 	bl	8000bd4 <__aeabi_fdiv>
 8003ef8:	1c03      	adds	r3, r0, #0
 8003efa:	1c18      	adds	r0, r3, #0
 8003efc:	f7ff fab2 	bl	8003464 <__aeabi_f2d>
 8003f00:	0002      	movs	r2, r0
 8003f02:	000b      	movs	r3, r1
 8003f04:	2000      	movs	r0, #0
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	05c9      	lsls	r1, r1, #23
 8003f0a:	f023 fec5 	bl	8027c98 <pow>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	000b      	movs	r3, r1
 8003f12:	0010      	movs	r0, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	f7fc fb99 	bl	800064c <__aeabi_d2uiz>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003f1e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8003f20:	193a      	adds	r2, r7, r4
 8003f22:	2301      	movs	r3, #1
 8003f24:	2101      	movs	r1, #1
 8003f26:	2038      	movs	r0, #56	@ 0x38
 8003f28:	f7ff fbc2 	bl	80036b0 <ReadMemRegister>
    raw._misr = i2cbuf[0];
 8003f2c:	193b      	adds	r3, r7, r4
 8003f2e:	7819      	ldrb	r1, [r3, #0]
 8003f30:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <ENS160_measureRaw+0x2dc>)
 8003f32:	2220      	movs	r2, #32
 8003f34:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8003f36:	2317      	movs	r3, #23
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b007      	add	sp, #28
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	20000464 	.word	0x20000464
 8003f48:	08029374 	.word	0x08029374
 8003f4c:	0802929c 	.word	0x0802929c
 8003f50:	20000478 	.word	0x20000478

08003f54 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	1dbb      	adds	r3, r7, #6
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	1c0a      	adds	r2, r1, #0
 8003f64:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8003f66:	1dbb      	adds	r3, r7, #6
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	2108      	movs	r1, #8
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 8003f72:	1dbb      	adds	r3, r7, #6
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	187b      	adds	r3, r7, r1
 8003f7e:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 8003f98:	187a      	adds	r2, r7, r1
 8003f9a:	2304      	movs	r3, #4
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	2013      	movs	r0, #19
 8003fa0:	f7ff fb56 	bl	8003650 <WriteMemRegister>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	210f      	movs	r1, #15
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	701a      	strb	r2, [r3, #0]
  return result;
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	4193      	sbcs	r3, r2
 8003fb6:	b2db      	uxtb	r3, r3
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b004      	add	sp, #16
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 8003fca:	4916      	ldr	r1, [pc, #88]	@ (8004024 <ENS160_set_envdata+0x64>)
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7fc fc77 	bl	80008c0 <__aeabi_fadd>
 8003fd2:	1c03      	adds	r3, r0, #0
 8003fd4:	2185      	movs	r1, #133	@ 0x85
 8003fd6:	05c9      	lsls	r1, r1, #23
 8003fd8:	1c18      	adds	r0, r3, #0
 8003fda:	f7fc ffe1 	bl	8000fa0 <__aeabi_fmul>
 8003fde:	1c03      	adds	r3, r0, #0
 8003fe0:	250e      	movs	r5, #14
 8003fe2:	197c      	adds	r4, r7, r5
 8003fe4:	1c18      	adds	r0, r3, #0
 8003fe6:	f7fc fb19 	bl	800061c <__aeabi_f2uiz>
 8003fea:	0003      	movs	r3, r0
 8003fec:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 8003fee:	2188      	movs	r1, #136	@ 0x88
 8003ff0:	05c9      	lsls	r1, r1, #23
 8003ff2:	6838      	ldr	r0, [r7, #0]
 8003ff4:	f7fc ffd4 	bl	8000fa0 <__aeabi_fmul>
 8003ff8:	1c03      	adds	r3, r0, #0
 8003ffa:	260c      	movs	r6, #12
 8003ffc:	19bc      	adds	r4, r7, r6
 8003ffe:	1c18      	adds	r0, r3, #0
 8004000:	f7fc fb0c 	bl	800061c <__aeabi_f2uiz>
 8004004:	0003      	movs	r3, r0
 8004006:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004008:	19bb      	adds	r3, r7, r6
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	197b      	adds	r3, r7, r5
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	0011      	movs	r1, r2
 8004012:	0018      	movs	r0, r3
 8004014:	f7ff ff9e 	bl	8003f54 <ENS160_set_envdata210>
 8004018:	0003      	movs	r3, r0
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b005      	add	sp, #20
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	43889333 	.word	0x43889333

08004028 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b085      	sub	sp, #20
 800402c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800402e:	4bc8      	ldr	r3, [pc, #800]	@ (8004350 <ENS_Upkeep+0x328>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	0018      	movs	r0, r3
 8004034:	f00e fdb2 	bl	8012b9c <TimestampIsReached>
 8004038:	0003      	movs	r3, r0
 800403a:	001a      	movs	r2, r3
 800403c:	2301      	movs	r3, #1
 800403e:	4053      	eors	r3, r2
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <ENS_Upkeep+0x24>
    return ENSState;
 8004046:	4bc3      	ldr	r3, [pc, #780]	@ (8004354 <ENS_Upkeep+0x32c>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	e21c      	b.n	8004486 <ENS_Upkeep+0x45e>
  }
  switch(ENSState) {
 800404c:	4bc1      	ldr	r3, [pc, #772]	@ (8004354 <ENS_Upkeep+0x32c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d900      	bls.n	8004056 <ENS_Upkeep+0x2e>
 8004054:	e200      	b.n	8004458 <ENS_Upkeep+0x430>
 8004056:	009a      	lsls	r2, r3, #2
 8004058:	4bbf      	ldr	r3, [pc, #764]	@ (8004358 <ENS_Upkeep+0x330>)
 800405a:	18d3      	adds	r3, r2, r3
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004060:	4abe      	ldr	r2, [pc, #760]	@ (800435c <ENS_Upkeep+0x334>)
 8004062:	4bbf      	ldr	r3, [pc, #764]	@ (8004360 <ENS_Upkeep+0x338>)
 8004064:	0019      	movs	r1, r3
 8004066:	2003      	movs	r0, #3
 8004068:	f00e fdee 	bl	8012c48 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800406c:	f00f fb2a 	bl	80136c4 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	4abc      	ldr	r2, [pc, #752]	@ (8004364 <ENS_Upkeep+0x33c>)
 8004074:	189a      	adds	r2, r3, r2
 8004076:	4bb6      	ldr	r3, [pc, #728]	@ (8004350 <ENS_Upkeep+0x328>)
 8004078:	601a      	str	r2, [r3, #0]
    break;
 800407a:	e202      	b.n	8004482 <ENS_Upkeep+0x45a>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 800407c:	f008 feae 	bl	800cddc <getSensorLock>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d000      	beq.n	8004086 <ENS_Upkeep+0x5e>
 8004084:	e1f4      	b.n	8004470 <ENS_Upkeep+0x448>
      break;
    }
    setSensorLock(ENS160);
 8004086:	2004      	movs	r0, #4
 8004088:	f008 fe94 	bl	800cdb4 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 800408c:	1d3c      	adds	r4, r7, #4
 800408e:	2002      	movs	r0, #2
 8004090:	f7ff fca6 	bl	80039e0 <ENS160_setMode>
 8004094:	0003      	movs	r3, r0
 8004096:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <ENS_Upkeep+0x7c>
 80040a0:	4bb1      	ldr	r3, [pc, #708]	@ (8004368 <ENS_Upkeep+0x340>)
 80040a2:	e000      	b.n	80040a6 <ENS_Upkeep+0x7e>
 80040a4:	4bb1      	ldr	r3, [pc, #708]	@ (800436c <ENS_Upkeep+0x344>)
 80040a6:	4ab2      	ldr	r2, [pc, #712]	@ (8004370 <ENS_Upkeep+0x348>)
 80040a8:	49ad      	ldr	r1, [pc, #692]	@ (8004360 <ENS_Upkeep+0x338>)
 80040aa:	2003      	movs	r0, #3
 80040ac:	f00e fdcc 	bl	8012c48 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80040b0:	200a      	movs	r0, #10
 80040b2:	f00f fb11 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 80040b6:	2000      	movs	r0, #0
 80040b8:	f008 fe7c 	bl	800cdb4 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80040bc:	4ba5      	ldr	r3, [pc, #660]	@ (8004354 <ENS_Upkeep+0x32c>)
 80040be:	2203      	movs	r2, #3
 80040c0:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80040c2:	f00f faff 	bl	80136c4 <HAL_GetTick>
 80040c6:	0003      	movs	r3, r0
 80040c8:	22fa      	movs	r2, #250	@ 0xfa
 80040ca:	0092      	lsls	r2, r2, #2
 80040cc:	189a      	adds	r2, r3, r2
 80040ce:	4ba0      	ldr	r3, [pc, #640]	@ (8004350 <ENS_Upkeep+0x328>)
 80040d0:	601a      	str	r2, [r3, #0]
    break;
 80040d2:	e1d6      	b.n	8004482 <ENS_Upkeep+0x45a>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 80040d4:	f008 fe82 	bl	800cddc <getSensorLock>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d000      	beq.n	80040de <ENS_Upkeep+0xb6>
 80040dc:	e1ca      	b.n	8004474 <ENS_Upkeep+0x44c>
      break;
    }
    setSensorLock(ENS160);
 80040de:	2004      	movs	r0, #4
 80040e0:	f008 fe68 	bl	800cdb4 <setSensorLock>
    status = ENS160_readStatus();
 80040e4:	1d7c      	adds	r4, r7, #5
 80040e6:	f7ff fd2b 	bl	8003b40 <ENS160_readStatus>
 80040ea:	0003      	movs	r3, r0
 80040ec:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 80040ee:	200a      	movs	r0, #10
 80040f0:	f00f faf2 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f008 fe5d 	bl	800cdb4 <setSensorLock>
    if ((status & 0x0C) != 0) {
 80040fa:	1d7b      	adds	r3, r7, #5
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	220c      	movs	r2, #12
 8004100:	4013      	ands	r3, r2
 8004102:	d02e      	beq.n	8004162 <ENS_Upkeep+0x13a>
      switch (status >> 2) {
 8004104:	1d7b      	adds	r3, r7, #5
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b03      	cmp	r3, #3
 800410e:	d013      	beq.n	8004138 <ENS_Upkeep+0x110>
 8004110:	dc19      	bgt.n	8004146 <ENS_Upkeep+0x11e>
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <ENS_Upkeep+0xf4>
 8004116:	2b02      	cmp	r3, #2
 8004118:	d007      	beq.n	800412a <ENS_Upkeep+0x102>
 800411a:	e014      	b.n	8004146 <ENS_Upkeep+0x11e>
      case 1:
        Debug("ENS160 Warm-Up phase");
 800411c:	4a95      	ldr	r2, [pc, #596]	@ (8004374 <ENS_Upkeep+0x34c>)
 800411e:	4b90      	ldr	r3, [pc, #576]	@ (8004360 <ENS_Upkeep+0x338>)
 8004120:	0019      	movs	r1, r3
 8004122:	2003      	movs	r0, #3
 8004124:	f00e fd90 	bl	8012c48 <CreateLine>
        break;
 8004128:	e00d      	b.n	8004146 <ENS_Upkeep+0x11e>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800412a:	4a93      	ldr	r2, [pc, #588]	@ (8004378 <ENS_Upkeep+0x350>)
 800412c:	4b8c      	ldr	r3, [pc, #560]	@ (8004360 <ENS_Upkeep+0x338>)
 800412e:	0019      	movs	r1, r3
 8004130:	2003      	movs	r0, #3
 8004132:	f00e fd89 	bl	8012c48 <CreateLine>
        break;
 8004136:	e006      	b.n	8004146 <ENS_Upkeep+0x11e>
      case 3:
        Debug("ENS160 Invalid output");
 8004138:	4a90      	ldr	r2, [pc, #576]	@ (800437c <ENS_Upkeep+0x354>)
 800413a:	4b89      	ldr	r3, [pc, #548]	@ (8004360 <ENS_Upkeep+0x338>)
 800413c:	0019      	movs	r1, r3
 800413e:	2003      	movs	r0, #3
 8004140:	f00e fd82 	bl	8012c48 <CreateLine>
        break;
 8004144:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 8004146:	1d7b      	adds	r3, r7, #5
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2203      	movs	r2, #3
 800414c:	4013      	ands	r3, r2
 800414e:	d108      	bne.n	8004162 <ENS_Upkeep+0x13a>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004150:	f00f fab8 	bl	80136c4 <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	22fa      	movs	r2, #250	@ 0xfa
 8004158:	0092      	lsls	r2, r2, #2
 800415a:	189a      	adds	r2, r3, r2
 800415c:	4b7c      	ldr	r3, [pc, #496]	@ (8004350 <ENS_Upkeep+0x328>)
 800415e:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 8004160:	e18f      	b.n	8004482 <ENS_Upkeep+0x45a>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004162:	4b7c      	ldr	r3, [pc, #496]	@ (8004354 <ENS_Upkeep+0x32c>)
 8004164:	2204      	movs	r2, #4
 8004166:	701a      	strb	r2, [r3, #0]
    break;
 8004168:	e18b      	b.n	8004482 <ENS_Upkeep+0x45a>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 800416a:	f008 fe37 	bl	800cddc <getSensorLock>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d036      	beq.n	80041e0 <ENS_Upkeep+0x1b8>
 8004172:	f008 fe33 	bl	800cddc <getSensorLock>
 8004176:	0003      	movs	r3, r0
 8004178:	2b04      	cmp	r3, #4
 800417a:	d031      	beq.n	80041e0 <ENS_Upkeep+0x1b8>
      uint8_t locktype = getSensorLock();
 800417c:	1dbc      	adds	r4, r7, #6
 800417e:	f008 fe2d 	bl	800cddc <getSensorLock>
 8004182:	0003      	movs	r3, r0
 8004184:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d019      	beq.n	80041c2 <ENS_Upkeep+0x19a>
 800418e:	1dbb      	adds	r3, r7, #6
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d013      	beq.n	80041be <ENS_Upkeep+0x196>
 8004196:	1dbb      	adds	r3, r7, #6
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d00d      	beq.n	80041ba <ENS_Upkeep+0x192>
 800419e:	1dbb      	adds	r3, r7, #6
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d007      	beq.n	80041b6 <ENS_Upkeep+0x18e>
 80041a6:	1dbb      	adds	r3, r7, #6
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d101      	bne.n	80041b2 <ENS_Upkeep+0x18a>
 80041ae:	4b74      	ldr	r3, [pc, #464]	@ (8004380 <ENS_Upkeep+0x358>)
 80041b0:	e008      	b.n	80041c4 <ENS_Upkeep+0x19c>
 80041b2:	4b74      	ldr	r3, [pc, #464]	@ (8004384 <ENS_Upkeep+0x35c>)
 80041b4:	e006      	b.n	80041c4 <ENS_Upkeep+0x19c>
 80041b6:	4b74      	ldr	r3, [pc, #464]	@ (8004388 <ENS_Upkeep+0x360>)
 80041b8:	e004      	b.n	80041c4 <ENS_Upkeep+0x19c>
 80041ba:	4b74      	ldr	r3, [pc, #464]	@ (800438c <ENS_Upkeep+0x364>)
 80041bc:	e002      	b.n	80041c4 <ENS_Upkeep+0x19c>
 80041be:	4b74      	ldr	r3, [pc, #464]	@ (8004390 <ENS_Upkeep+0x368>)
 80041c0:	e000      	b.n	80041c4 <ENS_Upkeep+0x19c>
 80041c2:	4b74      	ldr	r3, [pc, #464]	@ (8004394 <ENS_Upkeep+0x36c>)
 80041c4:	4a74      	ldr	r2, [pc, #464]	@ (8004398 <ENS_Upkeep+0x370>)
 80041c6:	4966      	ldr	r1, [pc, #408]	@ (8004360 <ENS_Upkeep+0x338>)
 80041c8:	2003      	movs	r0, #3
 80041ca:	f00e fd3d 	bl	8012c48 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80041ce:	f00f fa79 	bl	80136c4 <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	334e      	adds	r3, #78	@ 0x4e
 80041d6:	33ff      	adds	r3, #255	@ 0xff
 80041d8:	001a      	movs	r2, r3
 80041da:	4b5d      	ldr	r3, [pc, #372]	@ (8004350 <ENS_Upkeep+0x328>)
 80041dc:	601a      	str	r2, [r3, #0]
      break;
 80041de:	e150      	b.n	8004482 <ENS_Upkeep+0x45a>
    }
    setSensorLock(ENS160);
 80041e0:	2004      	movs	r0, #4
 80041e2:	f008 fde7 	bl	800cdb4 <setSensorLock>
    status = ENS160_readStatus();
 80041e6:	1d7c      	adds	r4, r7, #5
 80041e8:	f7ff fcaa 	bl	8003b40 <ENS160_readStatus>
 80041ec:	0003      	movs	r3, r0
 80041ee:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 80041f0:	1d7b      	adds	r3, r7, #5
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2202      	movs	r2, #2
 80041f6:	4013      	ands	r3, r2
 80041f8:	d10e      	bne.n	8004218 <ENS_Upkeep+0x1f0>
      ENS160TimeStamp = HAL_GetTick() + 500;
 80041fa:	f00f fa63 	bl	80136c4 <HAL_GetTick>
 80041fe:	0003      	movs	r3, r0
 8004200:	33f5      	adds	r3, #245	@ 0xf5
 8004202:	33ff      	adds	r3, #255	@ 0xff
 8004204:	001a      	movs	r2, r3
 8004206:	4b52      	ldr	r3, [pc, #328]	@ (8004350 <ENS_Upkeep+0x328>)
 8004208:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800420a:	200a      	movs	r0, #10
 800420c:	f00f fa64 	bl	80136d8 <HAL_Delay>
      setSensorLock(FREE);
 8004210:	2000      	movs	r0, #0
 8004212:	f008 fdcf 	bl	800cdb4 <setSensorLock>
      break;
 8004216:	e134      	b.n	8004482 <ENS_Upkeep+0x45a>
    }
    ENS160_measure(false);
 8004218:	2000      	movs	r0, #0
 800421a:	f7ff fcb1 	bl	8003b80 <ENS160_measure>
    HAL_Delay(10);
 800421e:	200a      	movs	r0, #10
 8004220:	f00f fa5a 	bl	80136d8 <HAL_Delay>
    ENS160_measureRaw(false);
 8004224:	2000      	movs	r0, #0
 8004226:	f7ff fd25 	bl	8003c74 <ENS160_measureRaw>
    HAL_Delay(10);
 800422a:	200a      	movs	r0, #10
 800422c:	f00f fa54 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 8004230:	2000      	movs	r0, #0
 8004232:	f008 fdbf 	bl	800cdb4 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 8004236:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <ENS_Upkeep+0x32c>)
 8004238:	2206      	movs	r2, #6
 800423a:	701a      	strb	r2, [r3, #0]
    break;
 800423c:	e121      	b.n	8004482 <ENS_Upkeep+0x45a>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 800423e:	4b57      	ldr	r3, [pc, #348]	@ (800439c <ENS_Upkeep+0x374>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d13b      	bne.n	80042be <ENS_Upkeep+0x296>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004246:	4b56      	ldr	r3, [pc, #344]	@ (80043a0 <ENS_Upkeep+0x378>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	001c      	movs	r4, r3
 800424c:	4b54      	ldr	r3, [pc, #336]	@ (80043a0 <ENS_Upkeep+0x378>)
 800424e:	885b      	ldrh	r3, [r3, #2]
 8004250:	0018      	movs	r0, r3
 8004252:	4b53      	ldr	r3, [pc, #332]	@ (80043a0 <ENS_Upkeep+0x378>)
 8004254:	889b      	ldrh	r3, [r3, #4]
 8004256:	4a53      	ldr	r2, [pc, #332]	@ (80043a4 <ENS_Upkeep+0x37c>)
 8004258:	4953      	ldr	r1, [pc, #332]	@ (80043a8 <ENS_Upkeep+0x380>)
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	9000      	str	r0, [sp, #0]
 800425e:	0023      	movs	r3, r4
 8004260:	2002      	movs	r0, #2
 8004262:	f00e fcf1 	bl	8012c48 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004266:	4b51      	ldr	r3, [pc, #324]	@ (80043ac <ENS_Upkeep+0x384>)
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	4b50      	ldr	r3, [pc, #320]	@ (80043ac <ENS_Upkeep+0x384>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a50      	ldr	r2, [pc, #320]	@ (80043b0 <ENS_Upkeep+0x388>)
 8004270:	494d      	ldr	r1, [pc, #308]	@ (80043a8 <ENS_Upkeep+0x380>)
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	0003      	movs	r3, r0
 8004276:	2002      	movs	r0, #2
 8004278:	f00e fce6 	bl	8012c48 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 800427c:	4b4b      	ldr	r3, [pc, #300]	@ (80043ac <ENS_Upkeep+0x384>)
 800427e:	6898      	ldr	r0, [r3, #8]
 8004280:	4b4a      	ldr	r3, [pc, #296]	@ (80043ac <ENS_Upkeep+0x384>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a4b      	ldr	r2, [pc, #300]	@ (80043b4 <ENS_Upkeep+0x38c>)
 8004286:	4948      	ldr	r1, [pc, #288]	@ (80043a8 <ENS_Upkeep+0x380>)
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	0003      	movs	r3, r0
 800428c:	2002      	movs	r0, #2
 800428e:	f00e fcdb 	bl	8012c48 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 8004292:	4b46      	ldr	r3, [pc, #280]	@ (80043ac <ENS_Upkeep+0x384>)
 8004294:	6918      	ldr	r0, [r3, #16]
 8004296:	4b45      	ldr	r3, [pc, #276]	@ (80043ac <ENS_Upkeep+0x384>)
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4a47      	ldr	r2, [pc, #284]	@ (80043b8 <ENS_Upkeep+0x390>)
 800429c:	4942      	ldr	r1, [pc, #264]	@ (80043a8 <ENS_Upkeep+0x380>)
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	0003      	movs	r3, r0
 80042a2:	2002      	movs	r0, #2
 80042a4:	f00e fcd0 	bl	8012c48 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80042a8:	4b40      	ldr	r3, [pc, #256]	@ (80043ac <ENS_Upkeep+0x384>)
 80042aa:	6998      	ldr	r0, [r3, #24]
 80042ac:	4b3f      	ldr	r3, [pc, #252]	@ (80043ac <ENS_Upkeep+0x384>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4a42      	ldr	r2, [pc, #264]	@ (80043bc <ENS_Upkeep+0x394>)
 80042b2:	493d      	ldr	r1, [pc, #244]	@ (80043a8 <ENS_Upkeep+0x380>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	0003      	movs	r3, r0
 80042b8:	2002      	movs	r0, #2
 80042ba:	f00e fcc5 	bl	8012c48 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80042be:	4b37      	ldr	r3, [pc, #220]	@ (800439c <ENS_Upkeep+0x374>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d103      	bne.n	80042ce <ENS_Upkeep+0x2a6>
 80042c6:	4b35      	ldr	r3, [pc, #212]	@ (800439c <ENS_Upkeep+0x374>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	e005      	b.n	80042da <ENS_Upkeep+0x2b2>
 80042ce:	4b33      	ldr	r3, [pc, #204]	@ (800439c <ENS_Upkeep+0x374>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4b31      	ldr	r3, [pc, #196]	@ (800439c <ENS_Upkeep+0x374>)
 80042d8:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 80042da:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <ENS_Upkeep+0x378>)
 80042dc:	7818      	ldrb	r0, [r3, #0]
 80042de:	4b30      	ldr	r3, [pc, #192]	@ (80043a0 <ENS_Upkeep+0x378>)
 80042e0:	8859      	ldrh	r1, [r3, #2]
 80042e2:	4b2f      	ldr	r3, [pc, #188]	@ (80043a0 <ENS_Upkeep+0x378>)
 80042e4:	889b      	ldrh	r3, [r3, #4]
 80042e6:	001a      	movs	r2, r3
 80042e8:	f000 fa04 	bl	80046f4 <setENS160>
    ENSState = ENS_LOW_POWER;
 80042ec:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <ENS_Upkeep+0x32c>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
    break;
 80042f2:	e0c6      	b.n	8004482 <ENS_Upkeep+0x45a>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80042f4:	f00f f9e6 	bl	80136c4 <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	22fa      	movs	r2, #250	@ 0xfa
 80042fc:	0092      	lsls	r2, r2, #2
 80042fe:	189a      	adds	r2, r3, r2
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <ENS_Upkeep+0x328>)
 8004302:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004304:	4b2e      	ldr	r3, [pc, #184]	@ (80043c0 <ENS_Upkeep+0x398>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	4053      	eors	r3, r2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d071      	beq.n	80043f6 <ENS_Upkeep+0x3ce>
 8004312:	4b2c      	ldr	r3, [pc, #176]	@ (80043c4 <ENS_Upkeep+0x39c>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2201      	movs	r2, #1
 8004318:	4053      	eors	r3, r2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d06a      	beq.n	80043f6 <ENS_Upkeep+0x3ce>
 8004320:	4b1e      	ldr	r3, [pc, #120]	@ (800439c <ENS_Upkeep+0x374>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d966      	bls.n	80043f6 <ENS_Upkeep+0x3ce>
      if (getSensorLock() != FREE) {
 8004328:	f008 fd58 	bl	800cddc <getSensorLock>
 800432c:	1e03      	subs	r3, r0, #0
 800432e:	d000      	beq.n	8004332 <ENS_Upkeep+0x30a>
 8004330:	e0a2      	b.n	8004478 <ENS_Upkeep+0x450>
        break;
      }
      setSensorLock(ENS160);
 8004332:	2004      	movs	r0, #4
 8004334:	f008 fd3e 	bl	800cdb4 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004338:	1cfc      	adds	r4, r7, #3
 800433a:	2000      	movs	r0, #0
 800433c:	f7ff fb50 	bl	80039e0 <ENS160_setMode>
 8004340:	0003      	movs	r3, r0
 8004342:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004344:	1cfb      	adds	r3, r7, #3
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d03d      	beq.n	80043c8 <ENS_Upkeep+0x3a0>
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <ENS_Upkeep+0x340>)
 800434e:	e03c      	b.n	80043ca <ENS_Upkeep+0x3a2>
 8004350:	20000468 	.word	0x20000468
 8004354:	20000000 	.word	0x20000000
 8004358:	0802d13c 	.word	0x0802d13c
 800435c:	08029394 	.word	0x08029394
 8004360:	0802929c 	.word	0x0802929c
 8004364:	002f9b80 	.word	0x002f9b80
 8004368:	080293c8 	.word	0x080293c8
 800436c:	080293d0 	.word	0x080293d0
 8004370:	080293d8 	.word	0x080293d8
 8004374:	080293fc 	.word	0x080293fc
 8004378:	08029414 	.word	0x08029414
 800437c:	08029434 	.word	0x08029434
 8004380:	0802944c 	.word	0x0802944c
 8004384:	08029454 	.word	0x08029454
 8004388:	0802945c 	.word	0x0802945c
 800438c:	08029464 	.word	0x08029464
 8004390:	0802946c 	.word	0x0802946c
 8004394:	08029474 	.word	0x08029474
 8004398:	0802947c 	.word	0x0802947c
 800439c:	2000046c 	.word	0x2000046c
 80043a0:	2000049c 	.word	0x2000049c
 80043a4:	080294a4 	.word	0x080294a4
 80043a8:	0802930c 	.word	0x0802930c
 80043ac:	20000478 	.word	0x20000478
 80043b0:	080294d0 	.word	0x080294d0
 80043b4:	080294ec 	.word	0x080294ec
 80043b8:	08029508 	.word	0x08029508
 80043bc:	08029524 	.word	0x08029524
 80043c0:	20001e75 	.word	0x20001e75
 80043c4:	20001e76 	.word	0x20001e76
 80043c8:	4b31      	ldr	r3, [pc, #196]	@ (8004490 <ENS_Upkeep+0x468>)
 80043ca:	4a32      	ldr	r2, [pc, #200]	@ (8004494 <ENS_Upkeep+0x46c>)
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	0010      	movs	r0, r2
 80043d0:	4a31      	ldr	r2, [pc, #196]	@ (8004498 <ENS_Upkeep+0x470>)
 80043d2:	4932      	ldr	r1, [pc, #200]	@ (800449c <ENS_Upkeep+0x474>)
 80043d4:	9000      	str	r0, [sp, #0]
 80043d6:	2003      	movs	r0, #3
 80043d8:	f00e fc36 	bl	8012c48 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 80043dc:	200a      	movs	r0, #10
 80043de:	f00f f97b 	bl	80136d8 <HAL_Delay>
      setSensorLock(FREE);
 80043e2:	2000      	movs	r0, #0
 80043e4:	f008 fce6 	bl	800cdb4 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 80043e8:	f00f f96c 	bl	80136c4 <HAL_GetTick>
 80043ec:	0003      	movs	r3, r0
 80043ee:	4a2c      	ldr	r2, [pc, #176]	@ (80044a0 <ENS_Upkeep+0x478>)
 80043f0:	189a      	adds	r2, r3, r2
 80043f2:	4b2c      	ldr	r3, [pc, #176]	@ (80044a4 <ENS_Upkeep+0x47c>)
 80043f4:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 80043f6:	4b2c      	ldr	r3, [pc, #176]	@ (80044a8 <ENS_Upkeep+0x480>)
 80043f8:	2208      	movs	r2, #8
 80043fa:	701a      	strb	r2, [r3, #0]
    break;
 80043fc:	e041      	b.n	8004482 <ENS_Upkeep+0x45a>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 80043fe:	f008 fced 	bl	800cddc <getSensorLock>
 8004402:	1e03      	subs	r3, r0, #0
 8004404:	d13a      	bne.n	800447c <ENS_Upkeep+0x454>
        break;
      }
      setSensorLock(ENS160);
 8004406:	2004      	movs	r0, #4
 8004408:	f008 fcd4 	bl	800cdb4 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800440c:	1cba      	adds	r2, r7, #2
 800440e:	2301      	movs	r3, #1
 8004410:	2101      	movs	r1, #1
 8004412:	2010      	movs	r0, #16
 8004414:	f7ff f94c 	bl	80036b0 <ReadMemRegister>
      if (data == 0) {
 8004418:	1cbb      	adds	r3, r7, #2
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d111      	bne.n	8004444 <ENS_Upkeep+0x41c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004420:	1dfc      	adds	r4, r7, #7
 8004422:	2002      	movs	r0, #2
 8004424:	f7ff fadc 	bl	80039e0 <ENS160_setMode>
 8004428:	0003      	movs	r3, r0
 800442a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800442c:	1dfb      	adds	r3, r7, #7
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <ENS_Upkeep+0x410>
 8004434:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <ENS_Upkeep+0x484>)
 8004436:	e000      	b.n	800443a <ENS_Upkeep+0x412>
 8004438:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <ENS_Upkeep+0x468>)
 800443a:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <ENS_Upkeep+0x488>)
 800443c:	4917      	ldr	r1, [pc, #92]	@ (800449c <ENS_Upkeep+0x474>)
 800443e:	2003      	movs	r0, #3
 8004440:	f00e fc02 	bl	8012c48 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004444:	200a      	movs	r0, #10
 8004446:	f00f f947 	bl	80136d8 <HAL_Delay>
      setSensorLock(FREE);
 800444a:	2000      	movs	r0, #0
 800444c:	f008 fcb2 	bl	800cdb4 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 8004450:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <ENS_Upkeep+0x480>)
 8004452:	2203      	movs	r2, #3
 8004454:	701a      	strb	r2, [r3, #0]
    break;
 8004456:	e014      	b.n	8004482 <ENS_Upkeep+0x45a>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004458:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <ENS_Upkeep+0x480>)
 800445a:	2202      	movs	r2, #2
 800445c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 800445e:	f008 fcbd 	bl	800cddc <getSensorLock>
 8004462:	0003      	movs	r3, r0
 8004464:	2b04      	cmp	r3, #4
 8004466:	d00b      	beq.n	8004480 <ENS_Upkeep+0x458>
      setSensorLock(FREE);
 8004468:	2000      	movs	r0, #0
 800446a:	f008 fca3 	bl	800cdb4 <setSensorLock>
    }
    break;
 800446e:	e007      	b.n	8004480 <ENS_Upkeep+0x458>
      break;
 8004470:	46c0      	nop			@ (mov r8, r8)
 8004472:	e006      	b.n	8004482 <ENS_Upkeep+0x45a>
      break;
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	e004      	b.n	8004482 <ENS_Upkeep+0x45a>
        break;
 8004478:	46c0      	nop			@ (mov r8, r8)
 800447a:	e002      	b.n	8004482 <ENS_Upkeep+0x45a>
        break;
 800447c:	46c0      	nop			@ (mov r8, r8)
 800447e:	e000      	b.n	8004482 <ENS_Upkeep+0x45a>
    break;
 8004480:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004482:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <ENS_Upkeep+0x480>)
 8004484:	781b      	ldrb	r3, [r3, #0]
}
 8004486:	0018      	movs	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	b003      	add	sp, #12
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	46c0      	nop			@ (mov r8, r8)
 8004490:	080293d0 	.word	0x080293d0
 8004494:	2000046c 	.word	0x2000046c
 8004498:	08029540 	.word	0x08029540
 800449c:	0802929c 	.word	0x0802929c
 80044a0:	0000afc8 	.word	0x0000afc8
 80044a4:	20000468 	.word	0x20000468
 80044a8:	20000000 	.word	0x20000000
 80044ac:	080293c8 	.word	0x080293c8
 80044b0:	08029578 	.word	0x08029578

080044b4 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80044b8:	4b02      	ldr	r3, [pc, #8]	@ (80044c4 <forceNTPupdate+0x10>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000688 	.word	0x20000688

080044c8 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80044d0:	f00f f8f8 	bl	80136c4 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	18d2      	adds	r2, r2, r3
 80044da:	4b03      	ldr	r3, [pc, #12]	@ (80044e8 <setESPTimeStamp+0x20>)
 80044dc:	601a      	str	r2, [r3, #0]
}
 80044de:	46c0      	nop			@ (mov r8, r8)
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	20000684 	.word	0x20000684

080044ec <setCharges>:
void setCharges(){
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80044f0:	f004 fc36 	bl	8008d60 <ReadBatteryVoltage>
 80044f4:	1c02      	adds	r2, r0, #0
 80044f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <setCharges+0x3c>)
 80044f8:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80044fa:	f004 fc93 	bl	8008e24 <ReadSolarVoltage>
 80044fe:	0003      	movs	r3, r0
 8004500:	0018      	movs	r0, r3
 8004502:	f7fe ff5d 	bl	80033c0 <__aeabi_i2d>
 8004506:	2200      	movs	r2, #0
 8004508:	4b08      	ldr	r3, [pc, #32]	@ (800452c <setCharges+0x40>)
 800450a:	f7fd fc53 	bl	8001db4 <__aeabi_ddiv>
 800450e:	0002      	movs	r2, r0
 8004510:	000b      	movs	r3, r1
 8004512:	0010      	movs	r0, r2
 8004514:	0019      	movs	r1, r3
 8004516:	f7fe ffed 	bl	80034f4 <__aeabi_d2f>
 800451a:	1c02      	adds	r2, r0, #0
 800451c:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <setCharges+0x44>)
 800451e:	601a      	str	r2, [r3, #0]
}
 8004520:	46c0      	nop			@ (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	200005dc 	.word	0x200005dc
 800452c:	408f4000 	.word	0x408f4000
 8004530:	200005e0 	.word	0x200005e0

08004534 <checkEEprom>:
bool checkEEprom(){
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800453a:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <checkEEprom+0x5c>)
 800453c:	4815      	ldr	r0, [pc, #84]	@ (8004594 <checkEEprom+0x60>)
 800453e:	220c      	movs	r2, #12
 8004540:	0019      	movs	r1, r3
 8004542:	f006 fea9 	bl	800b298 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e00e      	b.n	800456c <checkEEprom+0x38>
    configSum += tempConfig[i];
 800454e:	1dfb      	adds	r3, r7, #7
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	4a0f      	ldr	r2, [pc, #60]	@ (8004590 <checkEEprom+0x5c>)
 8004554:	5cd3      	ldrb	r3, [r2, r3]
 8004556:	001a      	movs	r2, r3
 8004558:	4b0f      	ldr	r3, [pc, #60]	@ (8004598 <checkEEprom+0x64>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	18d2      	adds	r2, r2, r3
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <checkEEprom+0x64>)
 8004560:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004562:	1dfb      	adds	r3, r7, #7
 8004564:	781a      	ldrb	r2, [r3, #0]
 8004566:	1dfb      	adds	r3, r7, #7
 8004568:	3201      	adds	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b0b      	cmp	r3, #11
 8004572:	d9ec      	bls.n	800454e <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8004574:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <checkEEprom+0x64>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	425a      	negs	r2, r3
 800457a:	4153      	adcs	r3, r2
 800457c:	b2da      	uxtb	r2, r3
 800457e:	4b07      	ldr	r3, [pc, #28]	@ (800459c <checkEEprom+0x68>)
 8004580:	701a      	strb	r2, [r3, #0]
  return test;
 8004582:	4b06      	ldr	r3, [pc, #24]	@ (800459c <checkEEprom+0x68>)
 8004584:	781b      	ldrb	r3, [r3, #0]
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b002      	add	sp, #8
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	20000710 	.word	0x20000710
 8004594:	0808000c 	.word	0x0808000c
 8004598:	2000071c 	.word	0x2000071c
 800459c:	20000720 	.word	0x20000720

080045a0 <checkName>:
bool checkName(){
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80045a6:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <checkName+0x5c>)
 80045a8:	4815      	ldr	r0, [pc, #84]	@ (8004600 <checkName+0x60>)
 80045aa:	2220      	movs	r2, #32
 80045ac:	0019      	movs	r1, r3
 80045ae:	f006 fe73 	bl	800b298 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80045b2:	1dfb      	adds	r3, r7, #7
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e00e      	b.n	80045d8 <checkName+0x38>
    configSum += nameConfig[i];
 80045ba:	1dfb      	adds	r3, r7, #7
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	4a0f      	ldr	r2, [pc, #60]	@ (80045fc <checkName+0x5c>)
 80045c0:	5cd3      	ldrb	r3, [r2, r3]
 80045c2:	001a      	movs	r2, r3
 80045c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004604 <checkName+0x64>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	18d2      	adds	r2, r2, r3
 80045ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <checkName+0x64>)
 80045cc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	3201      	adds	r2, #1
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	1dfb      	adds	r3, r7, #7
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b0b      	cmp	r3, #11
 80045de:	d9ec      	bls.n	80045ba <checkName+0x1a>
  }
  test = (configSum != 0);
 80045e0:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <checkName+0x64>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1e5a      	subs	r2, r3, #1
 80045e6:	4193      	sbcs	r3, r2
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <checkName+0x68>)
 80045ec:	701a      	strb	r2, [r3, #0]
  return test;
 80045ee:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <checkName+0x68>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	20000724 	.word	0x20000724
 8004600:	08080090 	.word	0x08080090
 8004604:	20000744 	.word	0x20000744
 8004608:	20000748 	.word	0x20000748

0800460c <setHIDS>:


void setHIDS(float temp, float humid){
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004616:	4b05      	ldr	r3, [pc, #20]	@ (800462c <setHIDS+0x20>)
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 800461c:	4b03      	ldr	r3, [pc, #12]	@ (800462c <setHIDS+0x20>)
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	20000694 	.word	0x20000694

08004630 <setVOC>:

void setVOC(uint16_t voc) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	0002      	movs	r2, r0
 8004638:	1dbb      	adds	r3, r7, #6
 800463a:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <setVOC+0x20>)
 800463e:	1dba      	adds	r2, r7, #6
 8004640:	2158      	movs	r1, #88	@ 0x58
 8004642:	8812      	ldrh	r2, [r2, #0]
 8004644:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	46bd      	mov	sp, r7
 800464a:	b002      	add	sp, #8
 800464c:	bd80      	pop	{r7, pc}
 800464e:	46c0      	nop			@ (mov r8, r8)
 8004650:	20000694 	.word	0x20000694

08004654 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 800465e:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <setAHT2x+0x4c>)
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	639a      	str	r2, [r3, #56]	@ 0x38
  if (airhum > MeasVal.AHT2x_humiditymax) {
 8004664:	4b0e      	ldr	r3, [pc, #56]	@ (80046a0 <setAHT2x+0x4c>)
 8004666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004668:	1c19      	adds	r1, r3, #0
 800466a:	6838      	ldr	r0, [r7, #0]
 800466c:	f7fb ff74 	bl	8000558 <__aeabi_fcmpgt>
 8004670:	1e03      	subs	r3, r0, #0
 8004672:	d002      	beq.n	800467a <setAHT2x+0x26>
    MeasVal.AHT2x_humiditymax = airhum;
 8004674:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <setAHT2x+0x4c>)
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  MeasVal.AHT2x_temperature = airtemp;
 800467a:	4b09      	ldr	r3, [pc, #36]	@ (80046a0 <setAHT2x+0x4c>)
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (airtemp > MeasVal.AHT2x_temperaturemax) {
 8004680:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <setAHT2x+0x4c>)
 8004682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004684:	1c19      	adds	r1, r3, #0
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fb ff66 	bl	8000558 <__aeabi_fcmpgt>
 800468c:	1e03      	subs	r3, r0, #0
 800468e:	d100      	bne.n	8004692 <setAHT2x+0x3e>
    MeasVal.AHT2x_temperaturemax = airtemp;
  }
}
 8004690:	e002      	b.n	8004698 <setAHT2x+0x44>
    MeasVal.AHT2x_temperaturemax = airtemp;
 8004692:	4b03      	ldr	r3, [pc, #12]	@ (80046a0 <setAHT2x+0x4c>)
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b002      	add	sp, #8
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000694 	.word	0x20000694

080046a4 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 80046ae:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <setBMP280+0x4c>)
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (airtemp > MeasVal.BMP280_temperaturemax) {
 80046b4:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <setBMP280+0x4c>)
 80046b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b8:	1c19      	adds	r1, r3, #0
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fb ff4c 	bl	8000558 <__aeabi_fcmpgt>
 80046c0:	1e03      	subs	r3, r0, #0
 80046c2:	d002      	beq.n	80046ca <setBMP280+0x26>
    MeasVal.BMP280_temperaturemax = airtemp;
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <setBMP280+0x4c>)
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  MeasVal.BMP280_airpressure = airhpa;
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <setBMP280+0x4c>)
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	651a      	str	r2, [r3, #80]	@ 0x50
  if (airhpa > MeasVal.BMP280_airpressuremax) {
 80046d0:	4b07      	ldr	r3, [pc, #28]	@ (80046f0 <setBMP280+0x4c>)
 80046d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d4:	1c19      	adds	r1, r3, #0
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	f7fb ff3e 	bl	8000558 <__aeabi_fcmpgt>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d100      	bne.n	80046e2 <setBMP280+0x3e>
    MeasVal.BMP280_airpressuremax = airhpa;
  }
}
 80046e0:	e002      	b.n	80046e8 <setBMP280+0x44>
    MeasVal.BMP280_airpressuremax = airhpa;
 80046e2:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <setBMP280+0x4c>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000694 	.word	0x20000694

080046f4 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	0004      	movs	r4, r0
 80046fc:	0008      	movs	r0, r1
 80046fe:	0011      	movs	r1, r2
 8004700:	1dfb      	adds	r3, r7, #7
 8004702:	1c22      	adds	r2, r4, #0
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	1c02      	adds	r2, r0, #0
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	1cbb      	adds	r3, r7, #2
 800470e:	1c0a      	adds	r2, r1, #0
 8004710:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004712:	4b15      	ldr	r3, [pc, #84]	@ (8004768 <setENS160+0x74>)
 8004714:	1dfa      	adds	r2, r7, #7
 8004716:	2164      	movs	r1, #100	@ 0x64
 8004718:	7812      	ldrb	r2, [r2, #0]
 800471a:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 800471c:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <setENS160+0x74>)
 800471e:	2265      	movs	r2, #101	@ 0x65
 8004720:	5c9b      	ldrb	r3, [r3, r2]
 8004722:	1dfa      	adds	r2, r7, #7
 8004724:	7812      	ldrb	r2, [r2, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d904      	bls.n	8004734 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 800472a:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <setENS160+0x74>)
 800472c:	1dfa      	adds	r2, r7, #7
 800472e:	2165      	movs	r1, #101	@ 0x65
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004734:	4b0c      	ldr	r3, [pc, #48]	@ (8004768 <setENS160+0x74>)
 8004736:	1d3a      	adds	r2, r7, #4
 8004738:	215a      	movs	r1, #90	@ 0x5a
 800473a:	8812      	ldrh	r2, [r2, #0]
 800473c:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <setENS160+0x74>)
 8004740:	1cba      	adds	r2, r7, #2
 8004742:	2160      	movs	r1, #96	@ 0x60
 8004744:	8812      	ldrh	r2, [r2, #0]
 8004746:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004748:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <setENS160+0x74>)
 800474a:	2262      	movs	r2, #98	@ 0x62
 800474c:	5a9b      	ldrh	r3, [r3, r2]
 800474e:	1cba      	adds	r2, r7, #2
 8004750:	8812      	ldrh	r2, [r2, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d904      	bls.n	8004760 <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004756:	4b04      	ldr	r3, [pc, #16]	@ (8004768 <setENS160+0x74>)
 8004758:	1cba      	adds	r2, r7, #2
 800475a:	2162      	movs	r1, #98	@ 0x62
 800475c:	8812      	ldrh	r2, [r2, #0]
 800475e:	525a      	strh	r2, [r3, r1]
  }
}
 8004760:	46c0      	nop			@ (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b003      	add	sp, #12
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	20000694 	.word	0x20000694

0800476c <sethPa>:

void sethPa(float hPa) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <sethPa+0x30>)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	675a      	str	r2, [r3, #116]	@ 0x74
  if (hPa > MeasVal.hPaValuemax) {
 800477a:	4b08      	ldr	r3, [pc, #32]	@ (800479c <sethPa+0x30>)
 800477c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800477e:	1c19      	adds	r1, r3, #0
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fb fee9 	bl	8000558 <__aeabi_fcmpgt>
 8004786:	1e03      	subs	r3, r0, #0
 8004788:	d100      	bne.n	800478c <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 800478a:	e002      	b.n	8004792 <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <sethPa+0x30>)
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b002      	add	sp, #8
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	20000694 	.word	0x20000694

080047a0 <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <setMic+0x28>)
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	669a      	str	r2, [r3, #104]	@ 0x68
  MeasVal.dBApeak = dBmax;
 80047b2:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <setMic+0x28>)
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  MeasVal.dBAaverage = dBAavg;
 80047b8:	4b03      	ldr	r3, [pc, #12]	@ (80047c8 <setMic+0x28>)
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	671a      	str	r2, [r3, #112]	@ 0x70
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 80047be:	46c0      	nop			@ (mov r8, r8)
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b004      	add	sp, #16
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	20000694 	.word	0x20000694

080047cc <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	0002      	movs	r2, r0
 80047d4:	1dbb      	adds	r3, r7, #6
 80047d6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 80047d8:	1dbb      	adds	r3, r7, #6
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	0018      	movs	r0, r3
 80047de:	f7fc fef7 	bl	80015d0 <__aeabi_i2f>
 80047e2:	1c03      	adds	r3, r0, #0
 80047e4:	490d      	ldr	r1, [pc, #52]	@ (800481c <setPM1p0+0x50>)
 80047e6:	1c18      	adds	r0, r3, #0
 80047e8:	f7fc f9f4 	bl	8000bd4 <__aeabi_fdiv>
 80047ec:	1c03      	adds	r3, r0, #0
 80047ee:	1c1a      	adds	r2, r3, #0
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <setPM1p0+0x54>)
 80047f2:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 80047f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004820 <setPM1p0+0x54>)
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <setPM1p0+0x54>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	1c19      	adds	r1, r3, #0
 80047fe:	1c10      	adds	r0, r2, #0
 8004800:	f7fb feaa 	bl	8000558 <__aeabi_fcmpgt>
 8004804:	1e03      	subs	r3, r0, #0
 8004806:	d100      	bne.n	800480a <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004808:	e003      	b.n	8004812 <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <setPM1p0+0x54>)
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <setPM1p0+0x54>)
 8004810:	60da      	str	r2, [r3, #12]
}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	b002      	add	sp, #8
 8004818:	bd80      	pop	{r7, pc}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	41200000 	.word	0x41200000
 8004820:	20000694 	.word	0x20000694

08004824 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	0002      	movs	r2, r0
 800482c:	1dbb      	adds	r3, r7, #6
 800482e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004830:	1dbb      	adds	r3, r7, #6
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	0018      	movs	r0, r3
 8004836:	f7fc fecb 	bl	80015d0 <__aeabi_i2f>
 800483a:	1c03      	adds	r3, r0, #0
 800483c:	490d      	ldr	r1, [pc, #52]	@ (8004874 <setPM2p5+0x50>)
 800483e:	1c18      	adds	r0, r3, #0
 8004840:	f7fc f9c8 	bl	8000bd4 <__aeabi_fdiv>
 8004844:	1c03      	adds	r3, r0, #0
 8004846:	1c1a      	adds	r2, r3, #0
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <setPM2p5+0x54>)
 800484a:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 800484c:	4b0a      	ldr	r3, [pc, #40]	@ (8004878 <setPM2p5+0x54>)
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <setPM2p5+0x54>)
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	1c19      	adds	r1, r3, #0
 8004856:	1c10      	adds	r0, r2, #0
 8004858:	f7fb fe7e 	bl	8000558 <__aeabi_fcmpgt>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d100      	bne.n	8004862 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004860:	e003      	b.n	800486a <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <setPM2p5+0x54>)
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	4b04      	ldr	r3, [pc, #16]	@ (8004878 <setPM2p5+0x54>)
 8004868:	615a      	str	r2, [r3, #20]
}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	46bd      	mov	sp, r7
 800486e:	b002      	add	sp, #8
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	41200000 	.word	0x41200000
 8004878:	20000694 	.word	0x20000694

0800487c <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	0002      	movs	r2, r0
 8004884:	1dbb      	adds	r3, r7, #6
 8004886:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004888:	1dbb      	adds	r3, r7, #6
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	0018      	movs	r0, r3
 800488e:	f7fc fe9f 	bl	80015d0 <__aeabi_i2f>
 8004892:	1c03      	adds	r3, r0, #0
 8004894:	490d      	ldr	r1, [pc, #52]	@ (80048cc <setPM4p0+0x50>)
 8004896:	1c18      	adds	r0, r3, #0
 8004898:	f7fc f99c 	bl	8000bd4 <__aeabi_fdiv>
 800489c:	1c03      	adds	r3, r0, #0
 800489e:	1c1a      	adds	r2, r3, #0
 80048a0:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <setPM4p0+0x54>)
 80048a2:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 80048a4:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <setPM4p0+0x54>)
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <setPM4p0+0x54>)
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	1c19      	adds	r1, r3, #0
 80048ae:	1c10      	adds	r0, r2, #0
 80048b0:	f7fb fe52 	bl	8000558 <__aeabi_fcmpgt>
 80048b4:	1e03      	subs	r3, r0, #0
 80048b6:	d100      	bne.n	80048ba <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 80048b8:	e003      	b.n	80048c2 <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 80048ba:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <setPM4p0+0x54>)
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <setPM4p0+0x54>)
 80048c0:	61da      	str	r2, [r3, #28]
}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	41200000 	.word	0x41200000
 80048d0:	20000694 	.word	0x20000694

080048d4 <setPM10>:

void setPM10(uint16_t PM10) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	0002      	movs	r2, r0
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 80048e0:	1dbb      	adds	r3, r7, #6
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fc fe73 	bl	80015d0 <__aeabi_i2f>
 80048ea:	1c03      	adds	r3, r0, #0
 80048ec:	490d      	ldr	r1, [pc, #52]	@ (8004924 <setPM10+0x50>)
 80048ee:	1c18      	adds	r0, r3, #0
 80048f0:	f7fc f970 	bl	8000bd4 <__aeabi_fdiv>
 80048f4:	1c03      	adds	r3, r0, #0
 80048f6:	1c1a      	adds	r2, r3, #0
 80048f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <setPM10+0x54>)
 80048fa:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <setPM10+0x54>)
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <setPM10+0x54>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c19      	adds	r1, r3, #0
 8004906:	1c10      	adds	r0, r2, #0
 8004908:	f7fb fe26 	bl	8000558 <__aeabi_fcmpgt>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d100      	bne.n	8004912 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004910:	e003      	b.n	800491a <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004912:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <setPM10+0x54>)
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	4b04      	ldr	r3, [pc, #16]	@ (8004928 <setPM10+0x54>)
 8004918:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b002      	add	sp, #8
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	41200000 	.word	0x41200000
 8004928:	20000694 	.word	0x20000694

0800492c <setNOx>:

void setNOx(uint16_t nox) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	0002      	movs	r2, r0
 8004934:	1dbb      	adds	r3, r7, #6
 8004936:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004938:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <setNOx+0x38>)
 800493a:	1dba      	adds	r2, r7, #6
 800493c:	215c      	movs	r1, #92	@ 0x5c
 800493e:	8812      	ldrh	r2, [r2, #0]
 8004940:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <setNOx+0x38>)
 8004944:	225e      	movs	r2, #94	@ 0x5e
 8004946:	5a9b      	ldrh	r3, [r3, r2]
 8004948:	1dba      	adds	r2, r7, #6
 800494a:	8812      	ldrh	r2, [r2, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d904      	bls.n	800495a <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004950:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <setNOx+0x38>)
 8004952:	1dba      	adds	r2, r7, #6
 8004954:	215e      	movs	r1, #94	@ 0x5e
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b002      	add	sp, #8
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	20000694 	.word	0x20000694

08004968 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004972:	490a      	ldr	r1, [pc, #40]	@ (800499c <SetSEN545temphum+0x34>)
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fc f92d 	bl	8000bd4 <__aeabi_fdiv>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	1c1a      	adds	r2, r3, #0
 800497e:	4b08      	ldr	r3, [pc, #32]	@ (80049a0 <SetSEN545temphum+0x38>)
 8004980:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004982:	4908      	ldr	r1, [pc, #32]	@ (80049a4 <SetSEN545temphum+0x3c>)
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f7fc f925 	bl	8000bd4 <__aeabi_fdiv>
 800498a:	1c03      	adds	r3, r0, #0
 800498c:	1c1a      	adds	r2, r3, #0
 800498e:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <SetSEN545temphum+0x38>)
 8004990:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	43480000 	.word	0x43480000
 80049a0:	20000694 	.word	0x20000694
 80049a4:	42c80000 	.word	0x42c80000

080049a8 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 80049ac:	f008 fdcc 	bl	800d548 <sen5x_Get_sen5x_enable_state>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d00f      	beq.n	80049d4 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 80049b4:	4b14      	ldr	r3, [pc, #80]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049bc:	2200      	movs	r2, #0
 80049be:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 80049c0:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 80049c6:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 80049cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049ce:	225e      	movs	r2, #94	@ 0x5e
 80049d0:	2100      	movs	r1, #0
 80049d2:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.AHT2x_humiditymax = 0.0;
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  MeasVal.AHT2x_temperaturemax = 0.0;
 80049da:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049dc:	2200      	movs	r2, #0
 80049de:	645a      	str	r2, [r3, #68]	@ 0x44
  MeasVal.BMP280_temperaturemax = 0.0;
 80049e0:	4b09      	ldr	r3, [pc, #36]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  MeasVal.BMP280_airpressuremax = 0.0;
 80049e6:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
  MeasVal.eCO2Indexmax = 0;
 80049ec:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049ee:	2262      	movs	r2, #98	@ 0x62
 80049f0:	2100      	movs	r1, #0
 80049f2:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 80049f4:	4b04      	ldr	r3, [pc, #16]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049f6:	2265      	movs	r2, #101	@ 0x65
 80049f8:	2100      	movs	r1, #0
 80049fa:	5499      	strb	r1, [r3, r2]
  MeasVal.hPaValuemax = 0.0;
 80049fc:	4b02      	ldr	r3, [pc, #8]	@ (8004a08 <resetMaxMeasurementValues+0x60>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000694 	.word	0x20000694

08004a0c <SetConfigMode>:

void SetConfigMode(){
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004a10:	4b0a      	ldr	r3, [pc, #40]	@ (8004a3c <SetConfigMode+0x30>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	4053      	eors	r3, r2
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004a1e:	4a08      	ldr	r2, [pc, #32]	@ (8004a40 <SetConfigMode+0x34>)
 8004a20:	4b08      	ldr	r3, [pc, #32]	@ (8004a44 <SetConfigMode+0x38>)
 8004a22:	0019      	movs	r1, r3
 8004a24:	2003      	movs	r0, #3
 8004a26:	f00e f90f 	bl	8012c48 <CreateLine>
  }
  ReconfigSet = true;
 8004a2a:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <SetConfigMode+0x30>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004a30:	4b05      	ldr	r3, [pc, #20]	@ (8004a48 <SetConfigMode+0x3c>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	200005bb 	.word	0x200005bb
 8004a40:	080295a8 	.word	0x080295a8
 8004a44:	080295c8 	.word	0x080295c8
 8004a48:	20000207 	.word	0x20000207

08004a4c <GetReconfigMode>:

bool GetReconfigMode() {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004a50:	4b02      	ldr	r3, [pc, #8]	@ (8004a5c <GetReconfigMode+0x10>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	200005bb 	.word	0x200005bb

08004a60 <ESP_GetUID>:

void ESP_GetUID(){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004a64:	f00e fe78 	bl	8013758 <HAL_GetUIDw0>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <ESP_GetUID+0x28>)
 8004a6c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004a6e:	f00e fe7d 	bl	801376c <HAL_GetUIDw1>
 8004a72:	0002      	movs	r2, r0
 8004a74:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <ESP_GetUID+0x28>)
 8004a76:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004a78:	f00e fe82 	bl	8013780 <HAL_GetUIDw2>
 8004a7c:	0002      	movs	r2, r0
 8004a7e:	4b02      	ldr	r3, [pc, #8]	@ (8004a88 <ESP_GetUID+0x28>)
 8004a80:	609a      	str	r2, [r3, #8]
}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200005c4 	.word	0x200005c4

08004a8c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004a94:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <ESP_Init+0x2c>)
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004a9a:	4b08      	ldr	r3, [pc, #32]	@ (8004abc <ESP_Init+0x30>)
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004aa0:	f7ff ffde 	bl	8004a60 <ESP_GetUID>
  beurs = checkEEprom();
 8004aa4:	f7ff fd46 	bl	8004534 <checkEEprom>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	001a      	movs	r2, r3
 8004aac:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <ESP_Init+0x34>)
 8004aae:	701a      	strb	r2, [r3, #0]
}
 8004ab0:	46c0      	nop			@ (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	200004b0 	.word	0x200004b0
 8004abc:	2000002c 	.word	0x2000002c
 8004ac0:	200005be 	.word	0x200005be

08004ac4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004ac4:	b5b0      	push	{r4, r5, r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	000a      	movs	r2, r1
 8004ace:	1cbb      	adds	r3, r7, #2
 8004ad0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004ad2:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <ESP_Send+0x54>)
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	250f      	movs	r5, #15
 8004ad8:	197c      	adds	r4, r7, r5
 8004ada:	1cbb      	adds	r3, r7, #2
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	f017 fbb1 	bl	801c248 <HAL_UART_Transmit_DMA>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004aea:	197b      	adds	r3, r7, r5
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004af2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <ESP_Send+0x58>)
 8004af4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <ESP_Send+0x5c>)
 8004af6:	0019      	movs	r1, r3
 8004af8:	2001      	movs	r0, #1
 8004afa:	f00e f8a5 	bl	8012c48 <CreateLine>
    return false;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e006      	b.n	8004b10 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <ESP_Send+0x60>)
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f020 f917 	bl	8024d3c <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b004      	add	sp, #16
 8004b16:	bdb0      	pop	{r4, r5, r7, pc}
 8004b18:	200004b0 	.word	0x200004b0
 8004b1c:	080295cc 	.word	0x080295cc
 8004b20:	080295ec 	.word	0x080295ec
 8004b24:	080295f0 	.word	0x080295f0

08004b28 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	000a      	movs	r2, r1
 8004b32:	1cbb      	adds	r3, r7, #2
 8004b34:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004b36:	4b5d      	ldr	r3, [pc, #372]	@ (8004cac <ESP_Receive+0x184>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004b3c:	260f      	movs	r6, #15
 8004b3e:	19bb      	adds	r3, r7, r6
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004b44:	4b5a      	ldr	r3, [pc, #360]	@ (8004cb0 <ESP_Receive+0x188>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	250d      	movs	r5, #13
 8004b4a:	197c      	adds	r4, r7, r5
 8004b4c:	1cbb      	adds	r3, r7, #2
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0019      	movs	r1, r3
 8004b54:	f017 fc08 	bl	801c368 <HAL_UART_Receive_DMA>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004b5c:	002c      	movs	r4, r5
 8004b5e:	193b      	adds	r3, r7, r4
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d100      	bne.n	8004b68 <ESP_Receive+0x40>
 8004b66:	e09c      	b.n	8004ca2 <ESP_Receive+0x17a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004b68:	4b51      	ldr	r3, [pc, #324]	@ (8004cb0 <ESP_Receive+0x188>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2284      	movs	r2, #132	@ 0x84
 8004b6e:	589b      	ldr	r3, [r3, r2]
 8004b70:	4a50      	ldr	r2, [pc, #320]	@ (8004cb4 <ESP_Receive+0x18c>)
 8004b72:	4951      	ldr	r1, [pc, #324]	@ (8004cb8 <ESP_Receive+0x190>)
 8004b74:	2001      	movs	r0, #1
 8004b76:	f00e f867 	bl	8012c48 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004b7a:	193b      	adds	r3, r7, r4
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d008      	beq.n	8004b96 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004b84:	4a4d      	ldr	r2, [pc, #308]	@ (8004cbc <ESP_Receive+0x194>)
 8004b86:	4b4c      	ldr	r3, [pc, #304]	@ (8004cb8 <ESP_Receive+0x190>)
 8004b88:	0019      	movs	r1, r3
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	f00e f85c 	bl	8012c48 <CreateLine>
      reset = true;
 8004b90:	19bb      	adds	r3, r7, r6
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004b96:	230d      	movs	r3, #13
 8004b98:	18fb      	adds	r3, r7, r3
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	d005      	beq.n	8004bae <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004ba2:	4a47      	ldr	r2, [pc, #284]	@ (8004cc0 <ESP_Receive+0x198>)
 8004ba4:	4b44      	ldr	r3, [pc, #272]	@ (8004cb8 <ESP_Receive+0x190>)
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	2001      	movs	r0, #1
 8004baa:	f00e f84d 	bl	8012c48 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004bae:	230d      	movs	r3, #13
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d005      	beq.n	8004bc6 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004bba:	4a42      	ldr	r2, [pc, #264]	@ (8004cc4 <ESP_Receive+0x19c>)
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb8 <ESP_Receive+0x190>)
 8004bbe:	0019      	movs	r1, r3
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f00e f841 	bl	8012c48 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004bc6:	230d      	movs	r3, #13
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d005      	beq.n	8004bde <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc8 <ESP_Receive+0x1a0>)
 8004bd4:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <ESP_Receive+0x190>)
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f00e f835 	bl	8012c48 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004bde:	230d      	movs	r3, #13
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2210      	movs	r2, #16
 8004be6:	4013      	ands	r3, r2
 8004be8:	d005      	beq.n	8004bf6 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8004bea:	4a38      	ldr	r2, [pc, #224]	@ (8004ccc <ESP_Receive+0x1a4>)
 8004bec:	4b32      	ldr	r3, [pc, #200]	@ (8004cb8 <ESP_Receive+0x190>)
 8004bee:	0019      	movs	r1, r3
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f00e f829 	bl	8012c48 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004bf6:	230d      	movs	r3, #13
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d005      	beq.n	8004c0e <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004c02:	4a33      	ldr	r2, [pc, #204]	@ (8004cd0 <ESP_Receive+0x1a8>)
 8004c04:	4b2c      	ldr	r3, [pc, #176]	@ (8004cb8 <ESP_Receive+0x190>)
 8004c06:	0019      	movs	r1, r3
 8004c08:	2001      	movs	r0, #1
 8004c0a:	f00e f81d 	bl	8012c48 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004c0e:	230d      	movs	r3, #13
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2240      	movs	r2, #64	@ 0x40
 8004c16:	4013      	ands	r3, r2
 8004c18:	d005      	beq.n	8004c26 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8004c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd4 <ESP_Receive+0x1ac>)
 8004c1c:	4b26      	ldr	r3, [pc, #152]	@ (8004cb8 <ESP_Receive+0x190>)
 8004c1e:	0019      	movs	r1, r3
 8004c20:	2001      	movs	r0, #1
 8004c22:	f00e f811 	bl	8012c48 <CreateLine>
    }
#endif
    if (reset) {
 8004c26:	230f      	movs	r3, #15
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d033      	beq.n	8004c98 <ESP_Receive+0x170>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c30:	4b29      	ldr	r3, [pc, #164]	@ (8004cd8 <ESP_Receive+0x1b0>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	2101      	movs	r1, #1
 8004c36:	0018      	movs	r0, r3
 8004c38:	f00f ffd5 	bl	8014be6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	f00e fd4b 	bl	80136d8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	4825      	ldr	r0, [pc, #148]	@ (8004cdc <ESP_Receive+0x1b4>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	f00f ffcb 	bl	8014be6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004c50:	2001      	movs	r0, #1
 8004c52:	f00e fd41 	bl	80136d8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004c56:	4b20      	ldr	r3, [pc, #128]	@ (8004cd8 <ESP_Receive+0x1b0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2102      	movs	r1, #2
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f00f ffc2 	bl	8014be6 <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004c62:	230e      	movs	r3, #14
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e00e      	b.n	8004c8a <ESP_Receive+0x162>
        SetAllREDLED();
 8004c6c:	f00c fef2 	bl	8011a54 <SetAllREDLED>
        SetLEDsOff();
 8004c70:	f00c fed4 	bl	8011a1c <SetLEDsOff>
        HAL_Delay(500);
 8004c74:	23fa      	movs	r3, #250	@ 0xfa
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f00e fd2d 	bl	80136d8 <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8004c7e:	210e      	movs	r1, #14
 8004c80:	187b      	adds	r3, r7, r1
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	187b      	adds	r3, r7, r1
 8004c86:	3201      	adds	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	230e      	movs	r3, #14
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b05      	cmp	r3, #5
 8004c92:	d9eb      	bls.n	8004c6c <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 8004c94:	f00f f9df 	bl	8014056 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8004c98:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <ESP_Receive+0x184>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
    return false;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <ESP_Receive+0x17c>
  }
  return true;
 8004ca2:	2301      	movs	r3, #1
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b005      	add	sp, #20
 8004caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cac:	200004b4 	.word	0x200004b4
 8004cb0:	200004b0 	.word	0x200004b0
 8004cb4:	08029600 	.word	0x08029600
 8004cb8:	080295ec 	.word	0x080295ec
 8004cbc:	08029630 	.word	0x08029630
 8004cc0:	08029654 	.word	0x08029654
 8004cc4:	08029678 	.word	0x08029678
 8004cc8:	0802969c 	.word	0x0802969c
 8004ccc:	080296c0 	.word	0x080296c0
 8004cd0:	080296ec 	.word	0x080296ec
 8004cd4:	0802971c 	.word	0x0802971c
 8004cd8:	50001c00 	.word	0x50001c00
 8004cdc:	50000800 	.word	0x50000800

08004ce0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8004ce8:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <HAL_UART_ErrorCallback+0xf0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d16b      	bne.n	8004dca <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2284      	movs	r2, #132	@ 0x84
 8004cf6:	589b      	ldr	r3, [r3, r2]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d065      	beq.n	8004dc8 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2284      	movs	r2, #132	@ 0x84
 8004d00:	589b      	ldr	r3, [r3, r2]
 8004d02:	4a34      	ldr	r2, [pc, #208]	@ (8004dd4 <HAL_UART_ErrorCallback+0xf4>)
 8004d04:	4934      	ldr	r1, [pc, #208]	@ (8004dd8 <HAL_UART_ErrorCallback+0xf8>)
 8004d06:	2003      	movs	r0, #3
 8004d08:	f00d ff9e 	bl	8012c48 <CreateLine>
    switch (huart->ErrorCode) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2284      	movs	r2, #132	@ 0x84
 8004d10:	589b      	ldr	r3, [r3, r2]
 8004d12:	2b0c      	cmp	r3, #12
 8004d14:	d851      	bhi.n	8004dba <HAL_UART_ErrorCallback+0xda>
 8004d16:	009a      	lsls	r2, r3, #2
 8004d18:	4b30      	ldr	r3, [pc, #192]	@ (8004ddc <HAL_UART_ErrorCallback+0xfc>)
 8004d1a:	18d3      	adds	r3, r2, r3
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8004d20:	4a2f      	ldr	r2, [pc, #188]	@ (8004de0 <HAL_UART_ErrorCallback+0x100>)
 8004d22:	4b30      	ldr	r3, [pc, #192]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d24:	0019      	movs	r1, r3
 8004d26:	2001      	movs	r0, #1
 8004d28:	f00d ff8e 	bl	8012c48 <CreateLine>
        break;
 8004d2c:	e04d      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8004d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8004de8 <HAL_UART_ErrorCallback+0x108>)
 8004d30:	4b2c      	ldr	r3, [pc, #176]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d32:	0019      	movs	r1, r3
 8004d34:	2001      	movs	r0, #1
 8004d36:	f00d ff87 	bl	8012c48 <CreateLine>
        break;
 8004d3a:	e046      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8004d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dec <HAL_UART_ErrorCallback+0x10c>)
 8004d3e:	4b29      	ldr	r3, [pc, #164]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d40:	0019      	movs	r1, r3
 8004d42:	2001      	movs	r0, #1
 8004d44:	f00d ff80 	bl	8012c48 <CreateLine>
        break;
 8004d48:	e03f      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8004d4a:	4a29      	ldr	r2, [pc, #164]	@ (8004df0 <HAL_UART_ErrorCallback+0x110>)
 8004d4c:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d4e:	0019      	movs	r1, r3
 8004d50:	2001      	movs	r0, #1
 8004d52:	f00d ff79 	bl	8012c48 <CreateLine>
        break;
 8004d56:	e038      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8004d58:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <HAL_UART_ErrorCallback+0x114>)
 8004d5a:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f00d ff72 	bl	8012c48 <CreateLine>
        break;
 8004d64:	e031      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8004d66:	4a24      	ldr	r2, [pc, #144]	@ (8004df8 <HAL_UART_ErrorCallback+0x118>)
 8004d68:	4b1e      	ldr	r3, [pc, #120]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	f00d ff6b 	bl	8012c48 <CreateLine>
        break;
 8004d72:	e02a      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8004d74:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <HAL_UART_ErrorCallback+0x11c>)
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d78:	0019      	movs	r1, r3
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f00d ff64 	bl	8012c48 <CreateLine>
        break;
 8004d80:	e023      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8004d82:	4a1f      	ldr	r2, [pc, #124]	@ (8004e00 <HAL_UART_ErrorCallback+0x120>)
 8004d84:	4b17      	ldr	r3, [pc, #92]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d86:	0019      	movs	r1, r3
 8004d88:	2001      	movs	r0, #1
 8004d8a:	f00d ff5d 	bl	8012c48 <CreateLine>
        break;
 8004d8e:	e01c      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8004d90:	4a1c      	ldr	r2, [pc, #112]	@ (8004e04 <HAL_UART_ErrorCallback+0x124>)
 8004d92:	4b14      	ldr	r3, [pc, #80]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004d94:	0019      	movs	r1, r3
 8004d96:	2001      	movs	r0, #1
 8004d98:	f00d ff56 	bl	8012c48 <CreateLine>
        break;
 8004d9c:	e015      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8004d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e08 <HAL_UART_ErrorCallback+0x128>)
 8004da0:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004da2:	0019      	movs	r1, r3
 8004da4:	2001      	movs	r0, #1
 8004da6:	f00d ff4f 	bl	8012c48 <CreateLine>
        break;
 8004daa:	e00e      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8004dac:	4a17      	ldr	r2, [pc, #92]	@ (8004e0c <HAL_UART_ErrorCallback+0x12c>)
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004db0:	0019      	movs	r1, r3
 8004db2:	2001      	movs	r0, #1
 8004db4:	f00d ff48 	bl	8012c48 <CreateLine>
        break;
 8004db8:	e007      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8004dba:	4a15      	ldr	r2, [pc, #84]	@ (8004e10 <HAL_UART_ErrorCallback+0x130>)
 8004dbc:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_UART_ErrorCallback+0x104>)
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f00d ff41 	bl	8012c48 <CreateLine>
 8004dc6:	e000      	b.n	8004dca <HAL_UART_ErrorCallback+0xea>
      return;
 8004dc8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b002      	add	sp, #8
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	200004b0 	.word	0x200004b0
 8004dd4:	0802974c 	.word	0x0802974c
 8004dd8:	080295c8 	.word	0x080295c8
 8004ddc:	0802d1ec 	.word	0x0802d1ec
 8004de0:	0802977c 	.word	0x0802977c
 8004de4:	080295ec 	.word	0x080295ec
 8004de8:	080297b0 	.word	0x080297b0
 8004dec:	080297dc 	.word	0x080297dc
 8004df0:	08029810 	.word	0x08029810
 8004df4:	0802983c 	.word	0x0802983c
 8004df8:	08029864 	.word	0x08029864
 8004dfc:	08029894 	.word	0x08029894
 8004e00:	080298cc 	.word	0x080298cc
 8004e04:	08029904 	.word	0x08029904
 8004e08:	0802992c 	.word	0x0802992c
 8004e0c:	08029954 	.word	0x08029954
 8004e10:	08029980 	.word	0x08029980

08004e14 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b42      	cmp	r3, #66	@ 0x42
 8004e26:	d905      	bls.n	8004e34 <isKeyValid+0x20>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2bff      	cmp	r3, #255	@ 0xff
 8004e2e:	d001      	beq.n	8004e34 <isKeyValid+0x20>
    return true;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e01d      	b.n	8004e70 <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <isKeyValid+0x64>)
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f01f ff7e 	bl	8024d3c <iprintf>
    for (int i = 0; i < 12; i++) {
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e00c      	b.n	8004e60 <isKeyValid+0x4c>
      printf("%02x", data[i]);
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	18d3      	adds	r3, r2, r3
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	001a      	movs	r2, r3
 8004e50:	4b0a      	ldr	r3, [pc, #40]	@ (8004e7c <isKeyValid+0x68>)
 8004e52:	0011      	movs	r1, r2
 8004e54:	0018      	movs	r0, r3
 8004e56:	f01f ff71 	bl	8024d3c <iprintf>
    for (int i = 0; i < 12; i++) {
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b0b      	cmp	r3, #11
 8004e64:	ddef      	ble.n	8004e46 <isKeyValid+0x32>
    }
    printf("\r\n");
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <isKeyValid+0x6c>)
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f01f ffcd 	bl	8024e08 <puts>
    return false;
 8004e6e:	2300      	movs	r3, #0
  }
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b006      	add	sp, #24
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	080299a4 	.word	0x080299a4
 8004e7c:	080299dc 	.word	0x080299dc
 8004e80:	080299e4 	.word	0x080299e4

08004e84 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	e010      	b.n	8004eb6 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	001a      	movs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	1898      	adds	r0, r3, r2
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	18d3      	adds	r3, r2, r3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <uint8ArrayToString+0x44>)
 8004eaa:	0019      	movs	r1, r3
 8004eac:	f01f ffb6 	bl	8024e1c <siprintf>
  for (int i = 0; i < 12; i++) {
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b0b      	cmp	r3, #11
 8004eba:	ddeb      	ble.n	8004e94 <uint8ArrayToString+0x10>
  }
}
 8004ebc:	46c0      	nop			@ (mov r8, r8)
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b004      	add	sp, #16
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	080299dc 	.word	0x080299dc

08004ecc <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b089      	sub	sp, #36	@ 0x24
 8004ed0:	af04      	add	r7, sp, #16
 8004ed2:	6039      	str	r1, [r7, #0]
 8004ed4:	0011      	movs	r1, r2
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	1c02      	adds	r2, r0, #0
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	1dbb      	adds	r3, r7, #6
 8004ede:	1c0a      	adds	r2, r1, #0
 8004ee0:	701a      	strb	r2, [r3, #0]

#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8004ee2:	f7ff fb5d 	bl	80045a0 <checkName>
 8004ee6:	1e03      	subs	r3, r0, #0
 8004ee8:	d00a      	beq.n	8004f00 <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004eea:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <CreateMessage+0x2c>)
 8004eec:	4803      	ldr	r0, [pc, #12]	@ (8004efc <CreateMessage+0x30>)
 8004eee:	2220      	movs	r2, #32
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	f006 f9d1 	bl	800b298 <ReadUint8ArrayEEprom>
 8004ef6:	e009      	b.n	8004f0c <CreateMessage+0x40>
 8004ef8:	2000074c 	.word	0x2000074c
 8004efc:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8004f00:	4bed      	ldr	r3, [pc, #948]	@ (80052b8 <CreateMessage+0x3ec>)
 8004f02:	4aee      	ldr	r2, [pc, #952]	@ (80052bc <CreateMessage+0x3f0>)
 8004f04:	6811      	ldr	r1, [r2, #0]
 8004f06:	6019      	str	r1, [r3, #0]
 8004f08:	7912      	ldrb	r2, [r2, #4]
 8004f0a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8004f0c:	f7ff faee 	bl	80044ec <setCharges>
  uint16_t index = 0;
 8004f10:	260e      	movs	r6, #14
 8004f12:	19bb      	adds	r3, r7, r6
 8004f14:	2200      	movs	r2, #0
 8004f16:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8004f18:	19bb      	adds	r3, r7, r6
 8004f1a:	881a      	ldrh	r2, [r3, #0]
 8004f1c:	4be8      	ldr	r3, [pc, #928]	@ (80052c0 <CreateMessage+0x3f4>)
 8004f1e:	18d3      	adds	r3, r2, r3
 8004f20:	4ae8      	ldr	r2, [pc, #928]	@ (80052c4 <CreateMessage+0x3f8>)
 8004f22:	0011      	movs	r1, r2
 8004f24:	0018      	movs	r0, r3
 8004f26:	f01f ff79 	bl	8024e1c <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 8004f2a:	4be7      	ldr	r3, [pc, #924]	@ (80052c8 <CreateMessage+0x3fc>)
 8004f2c:	48e7      	ldr	r0, [pc, #924]	@ (80052cc <CreateMessage+0x400>)
 8004f2e:	220c      	movs	r2, #12
 8004f30:	0019      	movs	r1, r3
 8004f32:	f006 f9b1 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8004f36:	4ae4      	ldr	r2, [pc, #912]	@ (80052c8 <CreateMessage+0x3fc>)
 8004f38:	4be5      	ldr	r3, [pc, #916]	@ (80052d0 <CreateMessage+0x404>)
 8004f3a:	0011      	movs	r1, r2
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7ff ffa1 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8004f42:	4be4      	ldr	r3, [pc, #912]	@ (80052d4 <CreateMessage+0x408>)
 8004f44:	689c      	ldr	r4, [r3, #8]
 8004f46:	4be4      	ldr	r3, [pc, #912]	@ (80052d8 <CreateMessage+0x40c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	1c18      	adds	r0, r3, #0
 8004f4c:	f7fe fa8a 	bl	8003464 <__aeabi_f2d>
 8004f50:	0002      	movs	r2, r0
 8004f52:	000b      	movs	r3, r1
 8004f54:	4dd8      	ldr	r5, [pc, #864]	@ (80052b8 <CreateMessage+0x3ec>)
 8004f56:	49e1      	ldr	r1, [pc, #900]	@ (80052dc <CreateMessage+0x410>)
 8004f58:	48e1      	ldr	r0, [pc, #900]	@ (80052e0 <CreateMessage+0x414>)
 8004f5a:	9202      	str	r2, [sp, #8]
 8004f5c:	9303      	str	r3, [sp, #12]
 8004f5e:	4bdc      	ldr	r3, [pc, #880]	@ (80052d0 <CreateMessage+0x404>)
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	002b      	movs	r3, r5
 8004f64:	0022      	movs	r2, r4
 8004f66:	f01f ff59 	bl	8024e1c <siprintf>
#endif
index = strlen(message);
 8004f6a:	4bd5      	ldr	r3, [pc, #852]	@ (80052c0 <CreateMessage+0x3f4>)
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fb f8fd 	bl	800016c <strlen>
 8004f72:	0002      	movs	r2, r0
 8004f74:	19bb      	adds	r3, r7, r6
 8004f76:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004f78:	1dbb      	adds	r3, r7, #6
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d019      	beq.n	8004fb4 <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004f80:	4bcf      	ldr	r3, [pc, #828]	@ (80052c0 <CreateMessage+0x3f4>)
 8004f82:	0018      	movs	r0, r3
 8004f84:	f7fb f8f2 	bl	800016c <strlen>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	4bcc      	ldr	r3, [pc, #816]	@ (80052c0 <CreateMessage+0x3f4>)
 8004f8e:	0011      	movs	r1, r2
 8004f90:	0018      	movs	r0, r3
 8004f92:	f7ff fd97 	bl	8004ac4 <ESP_Send>
 8004f96:	0003      	movs	r3, r0
 8004f98:	001a      	movs	r2, r3
 8004f9a:	4bd2      	ldr	r3, [pc, #840]	@ (80052e4 <CreateMessage+0x418>)
 8004f9c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004f9e:	4bd2      	ldr	r3, [pc, #840]	@ (80052e8 <CreateMessage+0x41c>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	4bcf      	ldr	r3, [pc, #828]	@ (80052e4 <CreateMessage+0x418>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	4193      	sbcs	r3, r2
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	4bcd      	ldr	r3, [pc, #820]	@ (80052e8 <CreateMessage+0x41c>)
 8004fb2:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 8004fb4:	4bc4      	ldr	r3, [pc, #784]	@ (80052c8 <CreateMessage+0x3fc>)
 8004fb6:	48cd      	ldr	r0, [pc, #820]	@ (80052ec <CreateMessage+0x420>)
 8004fb8:	220c      	movs	r2, #12
 8004fba:	0019      	movs	r1, r3
 8004fbc:	f006 f96c 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8004fc0:	4ac1      	ldr	r2, [pc, #772]	@ (80052c8 <CreateMessage+0x3fc>)
 8004fc2:	4bc3      	ldr	r3, [pc, #780]	@ (80052d0 <CreateMessage+0x404>)
 8004fc4:	0011      	movs	r1, r2
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7ff ff5c 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8004fcc:	4bc1      	ldr	r3, [pc, #772]	@ (80052d4 <CreateMessage+0x408>)
 8004fce:	689c      	ldr	r4, [r3, #8]
 8004fd0:	4bc1      	ldr	r3, [pc, #772]	@ (80052d8 <CreateMessage+0x40c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	1c18      	adds	r0, r3, #0
 8004fd6:	f7fe fa45 	bl	8003464 <__aeabi_f2d>
 8004fda:	0002      	movs	r2, r0
 8004fdc:	000b      	movs	r3, r1
 8004fde:	4db6      	ldr	r5, [pc, #728]	@ (80052b8 <CreateMessage+0x3ec>)
 8004fe0:	49c3      	ldr	r1, [pc, #780]	@ (80052f0 <CreateMessage+0x424>)
 8004fe2:	48b7      	ldr	r0, [pc, #732]	@ (80052c0 <CreateMessage+0x3f4>)
 8004fe4:	9202      	str	r2, [sp, #8]
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	4bb9      	ldr	r3, [pc, #740]	@ (80052d0 <CreateMessage+0x404>)
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	002b      	movs	r3, r5
 8004fee:	0022      	movs	r2, r4
 8004ff0:	f01f ff14 	bl	8024e1c <siprintf>
#endif
  index += strlen(message);
 8004ff4:	4bb2      	ldr	r3, [pc, #712]	@ (80052c0 <CreateMessage+0x3f4>)
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7fb f8b8 	bl	800016c <strlen>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	b299      	uxth	r1, r3
 8005000:	220e      	movs	r2, #14
 8005002:	18bb      	adds	r3, r7, r2
 8005004:	18ba      	adds	r2, r7, r2
 8005006:	8812      	ldrh	r2, [r2, #0]
 8005008:	188a      	adds	r2, r1, r2
 800500a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800500c:	1dbb      	adds	r3, r7, #6
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d019      	beq.n	8005048 <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005014:	4baa      	ldr	r3, [pc, #680]	@ (80052c0 <CreateMessage+0x3f4>)
 8005016:	0018      	movs	r0, r3
 8005018:	f7fb f8a8 	bl	800016c <strlen>
 800501c:	0003      	movs	r3, r0
 800501e:	b29a      	uxth	r2, r3
 8005020:	4ba7      	ldr	r3, [pc, #668]	@ (80052c0 <CreateMessage+0x3f4>)
 8005022:	0011      	movs	r1, r2
 8005024:	0018      	movs	r0, r3
 8005026:	f7ff fd4d 	bl	8004ac4 <ESP_Send>
 800502a:	0003      	movs	r3, r0
 800502c:	001a      	movs	r2, r3
 800502e:	4bad      	ldr	r3, [pc, #692]	@ (80052e4 <CreateMessage+0x418>)
 8005030:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005032:	4bad      	ldr	r3, [pc, #692]	@ (80052e8 <CreateMessage+0x41c>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	001a      	movs	r2, r3
 8005038:	4baa      	ldr	r3, [pc, #680]	@ (80052e4 <CreateMessage+0x418>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	4013      	ands	r3, r2
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	4193      	sbcs	r3, r2
 8005042:	b2da      	uxtb	r2, r3
 8005044:	4ba8      	ldr	r3, [pc, #672]	@ (80052e8 <CreateMessage+0x41c>)
 8005046:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8005048:	4b9f      	ldr	r3, [pc, #636]	@ (80052c8 <CreateMessage+0x3fc>)
 800504a:	48aa      	ldr	r0, [pc, #680]	@ (80052f4 <CreateMessage+0x428>)
 800504c:	220c      	movs	r2, #12
 800504e:	0019      	movs	r1, r3
 8005050:	f006 f922 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005054:	4a9c      	ldr	r2, [pc, #624]	@ (80052c8 <CreateMessage+0x3fc>)
 8005056:	4b9e      	ldr	r3, [pc, #632]	@ (80052d0 <CreateMessage+0x404>)
 8005058:	0011      	movs	r1, r2
 800505a:	0018      	movs	r0, r3
 800505c:	f7ff ff12 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8005060:	4b9c      	ldr	r3, [pc, #624]	@ (80052d4 <CreateMessage+0x408>)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	4b9c      	ldr	r3, [pc, #624]	@ (80052d8 <CreateMessage+0x40c>)
 8005066:	2158      	movs	r1, #88	@ 0x58
 8005068:	5a5b      	ldrh	r3, [r3, r1]
 800506a:	4c93      	ldr	r4, [pc, #588]	@ (80052b8 <CreateMessage+0x3ec>)
 800506c:	49a2      	ldr	r1, [pc, #648]	@ (80052f8 <CreateMessage+0x42c>)
 800506e:	4894      	ldr	r0, [pc, #592]	@ (80052c0 <CreateMessage+0x3f4>)
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	4b97      	ldr	r3, [pc, #604]	@ (80052d0 <CreateMessage+0x404>)
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	0023      	movs	r3, r4
 8005078:	f01f fed0 	bl	8024e1c <siprintf>
#endif
  index += strlen(message);
 800507c:	4b90      	ldr	r3, [pc, #576]	@ (80052c0 <CreateMessage+0x3f4>)
 800507e:	0018      	movs	r0, r3
 8005080:	f7fb f874 	bl	800016c <strlen>
 8005084:	0003      	movs	r3, r0
 8005086:	b299      	uxth	r1, r3
 8005088:	220e      	movs	r2, #14
 800508a:	18bb      	adds	r3, r7, r2
 800508c:	18ba      	adds	r2, r7, r2
 800508e:	8812      	ldrh	r2, [r2, #0]
 8005090:	188a      	adds	r2, r1, r2
 8005092:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005094:	1dbb      	adds	r3, r7, #6
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d019      	beq.n	80050d0 <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800509c:	4b88      	ldr	r3, [pc, #544]	@ (80052c0 <CreateMessage+0x3f4>)
 800509e:	0018      	movs	r0, r3
 80050a0:	f7fb f864 	bl	800016c <strlen>
 80050a4:	0003      	movs	r3, r0
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	4b85      	ldr	r3, [pc, #532]	@ (80052c0 <CreateMessage+0x3f4>)
 80050aa:	0011      	movs	r1, r2
 80050ac:	0018      	movs	r0, r3
 80050ae:	f7ff fd09 	bl	8004ac4 <ESP_Send>
 80050b2:	0003      	movs	r3, r0
 80050b4:	001a      	movs	r2, r3
 80050b6:	4b8b      	ldr	r3, [pc, #556]	@ (80052e4 <CreateMessage+0x418>)
 80050b8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80050ba:	4b8b      	ldr	r3, [pc, #556]	@ (80052e8 <CreateMessage+0x41c>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	001a      	movs	r2, r3
 80050c0:	4b88      	ldr	r3, [pc, #544]	@ (80052e4 <CreateMessage+0x418>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	4013      	ands	r3, r2
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	4193      	sbcs	r3, r2
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	4b86      	ldr	r3, [pc, #536]	@ (80052e8 <CreateMessage+0x41c>)
 80050ce:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 80050d0:	f007 fa16 	bl	800c500 <IsBMP280SensorPresent>
 80050d4:	1e03      	subs	r3, r0, #0
 80050d6:	d100      	bne.n	80050da <CreateMessage+0x20e>
 80050d8:	e0ab      	b.n	8005232 <CreateMessage+0x366>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 80050da:	4b7b      	ldr	r3, [pc, #492]	@ (80052c8 <CreateMessage+0x3fc>)
 80050dc:	4887      	ldr	r0, [pc, #540]	@ (80052fc <CreateMessage+0x430>)
 80050de:	220c      	movs	r2, #12
 80050e0:	0019      	movs	r1, r3
 80050e2:	f006 f8d9 	bl	800b298 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && (MeasVal.hPaValuemax != 0.0)) {
 80050e6:	4a86      	ldr	r2, [pc, #536]	@ (8005300 <CreateMessage+0x434>)
 80050e8:	4986      	ldr	r1, [pc, #536]	@ (8005304 <CreateMessage+0x438>)
 80050ea:	4b77      	ldr	r3, [pc, #476]	@ (80052c8 <CreateMessage+0x3fc>)
 80050ec:	0018      	movs	r0, r3
 80050ee:	f7ff fe91 	bl	8004e14 <isKeyValid>
 80050f2:	1e03      	subs	r3, r0, #0
 80050f4:	d04b      	beq.n	800518e <CreateMessage+0x2c2>
 80050f6:	4b78      	ldr	r3, [pc, #480]	@ (80052d8 <CreateMessage+0x40c>)
 80050f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050fa:	2100      	movs	r1, #0
 80050fc:	1c18      	adds	r0, r3, #0
 80050fe:	f7fb fa11 	bl	8000524 <__aeabi_fcmpeq>
 8005102:	1e03      	subs	r3, r0, #0
 8005104:	d143      	bne.n	800518e <CreateMessage+0x2c2>
      uint8ArrayToString(Buffer, keybuffer);
 8005106:	4a70      	ldr	r2, [pc, #448]	@ (80052c8 <CreateMessage+0x3fc>)
 8005108:	4b71      	ldr	r3, [pc, #452]	@ (80052d0 <CreateMessage+0x404>)
 800510a:	0011      	movs	r1, r2
 800510c:	0018      	movs	r0, r3
 800510e:	f7ff feb9 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8005112:	4b70      	ldr	r3, [pc, #448]	@ (80052d4 <CreateMessage+0x408>)
 8005114:	689c      	ldr	r4, [r3, #8]
 8005116:	4b70      	ldr	r3, [pc, #448]	@ (80052d8 <CreateMessage+0x40c>)
 8005118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800511a:	1c18      	adds	r0, r3, #0
 800511c:	f7fe f9a2 	bl	8003464 <__aeabi_f2d>
 8005120:	0002      	movs	r2, r0
 8005122:	000b      	movs	r3, r1
 8005124:	4d64      	ldr	r5, [pc, #400]	@ (80052b8 <CreateMessage+0x3ec>)
 8005126:	4978      	ldr	r1, [pc, #480]	@ (8005308 <CreateMessage+0x43c>)
 8005128:	4865      	ldr	r0, [pc, #404]	@ (80052c0 <CreateMessage+0x3f4>)
 800512a:	9202      	str	r2, [sp, #8]
 800512c:	9303      	str	r3, [sp, #12]
 800512e:	4b68      	ldr	r3, [pc, #416]	@ (80052d0 <CreateMessage+0x404>)
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	002b      	movs	r3, r5
 8005134:	0022      	movs	r2, r4
 8005136:	f01f fe71 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 800513a:	4b61      	ldr	r3, [pc, #388]	@ (80052c0 <CreateMessage+0x3f4>)
 800513c:	0018      	movs	r0, r3
 800513e:	f7fb f815 	bl	800016c <strlen>
 8005142:	0003      	movs	r3, r0
 8005144:	b299      	uxth	r1, r3
 8005146:	220e      	movs	r2, #14
 8005148:	18bb      	adds	r3, r7, r2
 800514a:	18ba      	adds	r2, r7, r2
 800514c:	8812      	ldrh	r2, [r2, #0]
 800514e:	188a      	adds	r2, r1, r2
 8005150:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005152:	1dbb      	adds	r3, r7, #6
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d019      	beq.n	800518e <CreateMessage+0x2c2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800515a:	4b59      	ldr	r3, [pc, #356]	@ (80052c0 <CreateMessage+0x3f4>)
 800515c:	0018      	movs	r0, r3
 800515e:	f7fb f805 	bl	800016c <strlen>
 8005162:	0003      	movs	r3, r0
 8005164:	b29a      	uxth	r2, r3
 8005166:	4b56      	ldr	r3, [pc, #344]	@ (80052c0 <CreateMessage+0x3f4>)
 8005168:	0011      	movs	r1, r2
 800516a:	0018      	movs	r0, r3
 800516c:	f7ff fcaa 	bl	8004ac4 <ESP_Send>
 8005170:	0003      	movs	r3, r0
 8005172:	001a      	movs	r2, r3
 8005174:	4b5b      	ldr	r3, [pc, #364]	@ (80052e4 <CreateMessage+0x418>)
 8005176:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005178:	4b5b      	ldr	r3, [pc, #364]	@ (80052e8 <CreateMessage+0x41c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	001a      	movs	r2, r3
 800517e:	4b59      	ldr	r3, [pc, #356]	@ (80052e4 <CreateMessage+0x418>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	4013      	ands	r3, r2
 8005184:	1e5a      	subs	r2, r3, #1
 8005186:	4193      	sbcs	r3, r2
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b57      	ldr	r3, [pc, #348]	@ (80052e8 <CreateMessage+0x41c>)
 800518c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 800518e:	4b4e      	ldr	r3, [pc, #312]	@ (80052c8 <CreateMessage+0x3fc>)
 8005190:	485e      	ldr	r0, [pc, #376]	@ (800530c <CreateMessage+0x440>)
 8005192:	220c      	movs	r2, #12
 8005194:	0019      	movs	r1, r3
 8005196:	f006 f87f 	bl	800b298 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 800519a:	4a5d      	ldr	r2, [pc, #372]	@ (8005310 <CreateMessage+0x444>)
 800519c:	4959      	ldr	r1, [pc, #356]	@ (8005304 <CreateMessage+0x438>)
 800519e:	4b4a      	ldr	r3, [pc, #296]	@ (80052c8 <CreateMessage+0x3fc>)
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7ff fe37 	bl	8004e14 <isKeyValid>
 80051a6:	1e03      	subs	r3, r0, #0
 80051a8:	d043      	beq.n	8005232 <CreateMessage+0x366>
      uint8ArrayToString(Buffer, keybuffer);
 80051aa:	4a47      	ldr	r2, [pc, #284]	@ (80052c8 <CreateMessage+0x3fc>)
 80051ac:	4b48      	ldr	r3, [pc, #288]	@ (80052d0 <CreateMessage+0x404>)
 80051ae:	0011      	movs	r1, r2
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7ff fe67 	bl	8004e84 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperaturemax);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperaturemax);
 80051b6:	4b47      	ldr	r3, [pc, #284]	@ (80052d4 <CreateMessage+0x408>)
 80051b8:	689c      	ldr	r4, [r3, #8]
 80051ba:	4b47      	ldr	r3, [pc, #284]	@ (80052d8 <CreateMessage+0x40c>)
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	1c18      	adds	r0, r3, #0
 80051c0:	f7fe f950 	bl	8003464 <__aeabi_f2d>
 80051c4:	0002      	movs	r2, r0
 80051c6:	000b      	movs	r3, r1
 80051c8:	4d3b      	ldr	r5, [pc, #236]	@ (80052b8 <CreateMessage+0x3ec>)
 80051ca:	4952      	ldr	r1, [pc, #328]	@ (8005314 <CreateMessage+0x448>)
 80051cc:	483c      	ldr	r0, [pc, #240]	@ (80052c0 <CreateMessage+0x3f4>)
 80051ce:	9202      	str	r2, [sp, #8]
 80051d0:	9303      	str	r3, [sp, #12]
 80051d2:	4b3f      	ldr	r3, [pc, #252]	@ (80052d0 <CreateMessage+0x404>)
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	002b      	movs	r3, r5
 80051d8:	0022      	movs	r2, r4
 80051da:	f01f fe1f 	bl	8024e1c <siprintf>
  #endif
      index += strlen(message);
 80051de:	4b38      	ldr	r3, [pc, #224]	@ (80052c0 <CreateMessage+0x3f4>)
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7fa ffc3 	bl	800016c <strlen>
 80051e6:	0003      	movs	r3, r0
 80051e8:	b299      	uxth	r1, r3
 80051ea:	220e      	movs	r2, #14
 80051ec:	18bb      	adds	r3, r7, r2
 80051ee:	18ba      	adds	r2, r7, r2
 80051f0:	8812      	ldrh	r2, [r2, #0]
 80051f2:	188a      	adds	r2, r1, r2
 80051f4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80051f6:	1dbb      	adds	r3, r7, #6
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d019      	beq.n	8005232 <CreateMessage+0x366>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80051fe:	4b30      	ldr	r3, [pc, #192]	@ (80052c0 <CreateMessage+0x3f4>)
 8005200:	0018      	movs	r0, r3
 8005202:	f7fa ffb3 	bl	800016c <strlen>
 8005206:	0003      	movs	r3, r0
 8005208:	b29a      	uxth	r2, r3
 800520a:	4b2d      	ldr	r3, [pc, #180]	@ (80052c0 <CreateMessage+0x3f4>)
 800520c:	0011      	movs	r1, r2
 800520e:	0018      	movs	r0, r3
 8005210:	f7ff fc58 	bl	8004ac4 <ESP_Send>
 8005214:	0003      	movs	r3, r0
 8005216:	001a      	movs	r2, r3
 8005218:	4b32      	ldr	r3, [pc, #200]	@ (80052e4 <CreateMessage+0x418>)
 800521a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800521c:	4b32      	ldr	r3, [pc, #200]	@ (80052e8 <CreateMessage+0x41c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	001a      	movs	r2, r3
 8005222:	4b30      	ldr	r3, [pc, #192]	@ (80052e4 <CreateMessage+0x418>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4013      	ands	r3, r2
 8005228:	1e5a      	subs	r2, r3, #1
 800522a:	4193      	sbcs	r3, r2
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4b2e      	ldr	r3, [pc, #184]	@ (80052e8 <CreateMessage+0x41c>)
 8005230:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005232:	4b25      	ldr	r3, [pc, #148]	@ (80052c8 <CreateMessage+0x3fc>)
 8005234:	4838      	ldr	r0, [pc, #224]	@ (8005318 <CreateMessage+0x44c>)
 8005236:	220c      	movs	r2, #12
 8005238:	0019      	movs	r1, r3
 800523a:	f006 f82d 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800523e:	4a22      	ldr	r2, [pc, #136]	@ (80052c8 <CreateMessage+0x3fc>)
 8005240:	4b23      	ldr	r3, [pc, #140]	@ (80052d0 <CreateMessage+0x404>)
 8005242:	0011      	movs	r1, r2
 8005244:	0018      	movs	r0, r3
 8005246:	f7ff fe1d 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 800524a:	4b22      	ldr	r3, [pc, #136]	@ (80052d4 <CreateMessage+0x408>)
 800524c:	689c      	ldr	r4, [r3, #8]
 800524e:	4b22      	ldr	r3, [pc, #136]	@ (80052d8 <CreateMessage+0x40c>)
 8005250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005252:	1c18      	adds	r0, r3, #0
 8005254:	f7fe f906 	bl	8003464 <__aeabi_f2d>
 8005258:	0002      	movs	r2, r0
 800525a:	000b      	movs	r3, r1
 800525c:	4d16      	ldr	r5, [pc, #88]	@ (80052b8 <CreateMessage+0x3ec>)
 800525e:	492f      	ldr	r1, [pc, #188]	@ (800531c <CreateMessage+0x450>)
 8005260:	4817      	ldr	r0, [pc, #92]	@ (80052c0 <CreateMessage+0x3f4>)
 8005262:	9202      	str	r2, [sp, #8]
 8005264:	9303      	str	r3, [sp, #12]
 8005266:	4b1a      	ldr	r3, [pc, #104]	@ (80052d0 <CreateMessage+0x404>)
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	002b      	movs	r3, r5
 800526c:	0022      	movs	r2, r4
 800526e:	f01f fdd5 	bl	8024e1c <siprintf>
#endif
  index += strlen(message);
 8005272:	4b13      	ldr	r3, [pc, #76]	@ (80052c0 <CreateMessage+0x3f4>)
 8005274:	0018      	movs	r0, r3
 8005276:	f7fa ff79 	bl	800016c <strlen>
 800527a:	0003      	movs	r3, r0
 800527c:	b299      	uxth	r1, r3
 800527e:	220e      	movs	r2, #14
 8005280:	18bb      	adds	r3, r7, r2
 8005282:	18ba      	adds	r2, r7, r2
 8005284:	8812      	ldrh	r2, [r2, #0]
 8005286:	188a      	adds	r2, r1, r2
 8005288:	801a      	strh	r2, [r3, #0]
  if (send) {
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d04e      	beq.n	8005330 <CreateMessage+0x464>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005292:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <CreateMessage+0x3f4>)
 8005294:	0018      	movs	r0, r3
 8005296:	f7fa ff69 	bl	800016c <strlen>
 800529a:	0003      	movs	r3, r0
 800529c:	b29a      	uxth	r2, r3
 800529e:	4b08      	ldr	r3, [pc, #32]	@ (80052c0 <CreateMessage+0x3f4>)
 80052a0:	0011      	movs	r1, r2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7ff fc0e 	bl	8004ac4 <ESP_Send>
 80052a8:	0003      	movs	r3, r0
 80052aa:	001a      	movs	r2, r3
 80052ac:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <CreateMessage+0x418>)
 80052ae:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80052b0:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <CreateMessage+0x41c>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	001a      	movs	r2, r3
 80052b6:	e033      	b.n	8005320 <CreateMessage+0x454>
 80052b8:	2000074c 	.word	0x2000074c
 80052bc:	0802d180 	.word	0x0802d180
 80052c0:	200005e4 	.word	0x200005e4
 80052c4:	080299e8 	.word	0x080299e8
 80052c8:	2000076c 	.word	0x2000076c
 80052cc:	0808000c 	.word	0x0808000c
 80052d0:	20000778 	.word	0x20000778
 80052d4:	200005c4 	.word	0x200005c4
 80052d8:	20000694 	.word	0x20000694
 80052dc:	080299ec 	.word	0x080299ec
 80052e0:	200005e5 	.word	0x200005e5
 80052e4:	20000791 	.word	0x20000791
 80052e8:	2000002d 	.word	0x2000002d
 80052ec:	08080018 	.word	0x08080018
 80052f0:	08029a40 	.word	0x08029a40
 80052f4:	08080030 	.word	0x08080030
 80052f8:	08029a98 	.word	0x08029a98
 80052fc:	0808003c 	.word	0x0808003c
 8005300:	08029aec 	.word	0x08029aec
 8005304:	08029af0 	.word	0x08029af0
 8005308:	08029af8 	.word	0x08029af8
 800530c:	080800e0 	.word	0x080800e0
 8005310:	08029b54 	.word	0x08029b54
 8005314:	08029b60 	.word	0x08029b60
 8005318:	08080048 	.word	0x08080048
 800531c:	08029bbc 	.word	0x08029bbc
 8005320:	4be8      	ldr	r3, [pc, #928]	@ (80056c4 <CreateMessage+0x7f8>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	4013      	ands	r3, r2
 8005326:	1e5a      	subs	r2, r3, #1
 8005328:	4193      	sbcs	r3, r2
 800532a:	b2da      	uxtb	r2, r3
 800532c:	4be6      	ldr	r3, [pc, #920]	@ (80056c8 <CreateMessage+0x7fc>)
 800532e:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8005330:	1dfb      	adds	r3, r7, #7
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2201      	movs	r2, #1
 8005336:	4053      	eors	r3, r2
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d100      	bne.n	8005340 <CreateMessage+0x474>
 800533e:	e2bd      	b.n	80058bc <CreateMessage+0x9f0>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005340:	4be2      	ldr	r3, [pc, #904]	@ (80056cc <CreateMessage+0x800>)
 8005342:	48e3      	ldr	r0, [pc, #908]	@ (80056d0 <CreateMessage+0x804>)
 8005344:	220c      	movs	r2, #12
 8005346:	0019      	movs	r1, r3
 8005348:	f005 ffa6 	bl	800b298 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 800534c:	4adf      	ldr	r2, [pc, #892]	@ (80056cc <CreateMessage+0x800>)
 800534e:	4be1      	ldr	r3, [pc, #900]	@ (80056d4 <CreateMessage+0x808>)
 8005350:	0011      	movs	r1, r2
 8005352:	0018      	movs	r0, r3
 8005354:	f7ff fd96 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8005358:	4bdf      	ldr	r3, [pc, #892]	@ (80056d8 <CreateMessage+0x80c>)
 800535a:	689c      	ldr	r4, [r3, #8]
 800535c:	4bdf      	ldr	r3, [pc, #892]	@ (80056dc <CreateMessage+0x810>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	1c18      	adds	r0, r3, #0
 8005362:	f7fe f87f 	bl	8003464 <__aeabi_f2d>
 8005366:	0002      	movs	r2, r0
 8005368:	000b      	movs	r3, r1
 800536a:	4ddd      	ldr	r5, [pc, #884]	@ (80056e0 <CreateMessage+0x814>)
 800536c:	49dd      	ldr	r1, [pc, #884]	@ (80056e4 <CreateMessage+0x818>)
 800536e:	48de      	ldr	r0, [pc, #888]	@ (80056e8 <CreateMessage+0x81c>)
 8005370:	9202      	str	r2, [sp, #8]
 8005372:	9303      	str	r3, [sp, #12]
 8005374:	4bd7      	ldr	r3, [pc, #860]	@ (80056d4 <CreateMessage+0x808>)
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	002b      	movs	r3, r5
 800537a:	0022      	movs	r2, r4
 800537c:	f01f fd4e 	bl	8024e1c <siprintf>
#endif
    index += strlen(message);
 8005380:	4bd9      	ldr	r3, [pc, #868]	@ (80056e8 <CreateMessage+0x81c>)
 8005382:	0018      	movs	r0, r3
 8005384:	f7fa fef2 	bl	800016c <strlen>
 8005388:	0003      	movs	r3, r0
 800538a:	b299      	uxth	r1, r3
 800538c:	220e      	movs	r2, #14
 800538e:	18bb      	adds	r3, r7, r2
 8005390:	18ba      	adds	r2, r7, r2
 8005392:	8812      	ldrh	r2, [r2, #0]
 8005394:	188a      	adds	r2, r1, r2
 8005396:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005398:	1dbb      	adds	r3, r7, #6
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d019      	beq.n	80053d4 <CreateMessage+0x508>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80053a0:	4bd1      	ldr	r3, [pc, #836]	@ (80056e8 <CreateMessage+0x81c>)
 80053a2:	0018      	movs	r0, r3
 80053a4:	f7fa fee2 	bl	800016c <strlen>
 80053a8:	0003      	movs	r3, r0
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	4bce      	ldr	r3, [pc, #824]	@ (80056e8 <CreateMessage+0x81c>)
 80053ae:	0011      	movs	r1, r2
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff fb87 	bl	8004ac4 <ESP_Send>
 80053b6:	0003      	movs	r3, r0
 80053b8:	001a      	movs	r2, r3
 80053ba:	4bc2      	ldr	r3, [pc, #776]	@ (80056c4 <CreateMessage+0x7f8>)
 80053bc:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80053be:	4bc2      	ldr	r3, [pc, #776]	@ (80056c8 <CreateMessage+0x7fc>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	001a      	movs	r2, r3
 80053c4:	4bbf      	ldr	r3, [pc, #764]	@ (80056c4 <CreateMessage+0x7f8>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	4013      	ands	r3, r2
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	4193      	sbcs	r3, r2
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	4bbd      	ldr	r3, [pc, #756]	@ (80056c8 <CreateMessage+0x7fc>)
 80053d2:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80053d4:	4bc5      	ldr	r3, [pc, #788]	@ (80056ec <CreateMessage+0x820>)
 80053d6:	791b      	ldrb	r3, [r3, #4]
 80053d8:	2b35      	cmp	r3, #53	@ 0x35
 80053da:	d147      	bne.n	800546c <CreateMessage+0x5a0>
 80053dc:	f003 fd76 	bl	8008ecc <Check_USB_PowerOn>
 80053e0:	1e03      	subs	r3, r0, #0
 80053e2:	d043      	beq.n	800546c <CreateMessage+0x5a0>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 80053e4:	4bb9      	ldr	r3, [pc, #740]	@ (80056cc <CreateMessage+0x800>)
 80053e6:	48c2      	ldr	r0, [pc, #776]	@ (80056f0 <CreateMessage+0x824>)
 80053e8:	220c      	movs	r2, #12
 80053ea:	0019      	movs	r1, r3
 80053ec:	f005 ff54 	bl	800b298 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 80053f0:	4ab6      	ldr	r2, [pc, #728]	@ (80056cc <CreateMessage+0x800>)
 80053f2:	4bb8      	ldr	r3, [pc, #736]	@ (80056d4 <CreateMessage+0x808>)
 80053f4:	0011      	movs	r1, r2
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff fd44 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 80053fc:	4bb6      	ldr	r3, [pc, #728]	@ (80056d8 <CreateMessage+0x80c>)
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	4bbc      	ldr	r3, [pc, #752]	@ (80056f4 <CreateMessage+0x828>)
 8005402:	215e      	movs	r1, #94	@ 0x5e
 8005404:	5a5b      	ldrh	r3, [r3, r1]
 8005406:	4cb6      	ldr	r4, [pc, #728]	@ (80056e0 <CreateMessage+0x814>)
 8005408:	49bb      	ldr	r1, [pc, #748]	@ (80056f8 <CreateMessage+0x82c>)
 800540a:	48b7      	ldr	r0, [pc, #732]	@ (80056e8 <CreateMessage+0x81c>)
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	4bb1      	ldr	r3, [pc, #708]	@ (80056d4 <CreateMessage+0x808>)
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	0023      	movs	r3, r4
 8005414:	f01f fd02 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 8005418:	4bb3      	ldr	r3, [pc, #716]	@ (80056e8 <CreateMessage+0x81c>)
 800541a:	0018      	movs	r0, r3
 800541c:	f7fa fea6 	bl	800016c <strlen>
 8005420:	0003      	movs	r3, r0
 8005422:	b299      	uxth	r1, r3
 8005424:	220e      	movs	r2, #14
 8005426:	18bb      	adds	r3, r7, r2
 8005428:	18ba      	adds	r2, r7, r2
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	188a      	adds	r2, r1, r2
 800542e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005430:	1dbb      	adds	r3, r7, #6
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d019      	beq.n	800546c <CreateMessage+0x5a0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005438:	4bab      	ldr	r3, [pc, #684]	@ (80056e8 <CreateMessage+0x81c>)
 800543a:	0018      	movs	r0, r3
 800543c:	f7fa fe96 	bl	800016c <strlen>
 8005440:	0003      	movs	r3, r0
 8005442:	b29a      	uxth	r2, r3
 8005444:	4ba8      	ldr	r3, [pc, #672]	@ (80056e8 <CreateMessage+0x81c>)
 8005446:	0011      	movs	r1, r2
 8005448:	0018      	movs	r0, r3
 800544a:	f7ff fb3b 	bl	8004ac4 <ESP_Send>
 800544e:	0003      	movs	r3, r0
 8005450:	001a      	movs	r2, r3
 8005452:	4b9c      	ldr	r3, [pc, #624]	@ (80056c4 <CreateMessage+0x7f8>)
 8005454:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005456:	4b9c      	ldr	r3, [pc, #624]	@ (80056c8 <CreateMessage+0x7fc>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	001a      	movs	r2, r3
 800545c:	4b99      	ldr	r3, [pc, #612]	@ (80056c4 <CreateMessage+0x7f8>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4013      	ands	r3, r2
 8005462:	1e5a      	subs	r2, r3, #1
 8005464:	4193      	sbcs	r3, r2
 8005466:	b2da      	uxtb	r2, r3
 8005468:	4b97      	ldr	r3, [pc, #604]	@ (80056c8 <CreateMessage+0x7fc>)
 800546a:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 800546c:	4b97      	ldr	r3, [pc, #604]	@ (80056cc <CreateMessage+0x800>)
 800546e:	48a3      	ldr	r0, [pc, #652]	@ (80056fc <CreateMessage+0x830>)
 8005470:	220c      	movs	r2, #12
 8005472:	0019      	movs	r1, r3
 8005474:	f005 ff10 	bl	800b298 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005478:	4b9c      	ldr	r3, [pc, #624]	@ (80056ec <CreateMessage+0x820>)
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	2b34      	cmp	r3, #52	@ 0x34
 800547e:	d003      	beq.n	8005488 <CreateMessage+0x5bc>
 8005480:	4b9a      	ldr	r3, [pc, #616]	@ (80056ec <CreateMessage+0x820>)
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	2b35      	cmp	r3, #53	@ 0x35
 8005486:	d14b      	bne.n	8005520 <CreateMessage+0x654>
 8005488:	4a9d      	ldr	r2, [pc, #628]	@ (8005700 <CreateMessage+0x834>)
 800548a:	499e      	ldr	r1, [pc, #632]	@ (8005704 <CreateMessage+0x838>)
 800548c:	4b8f      	ldr	r3, [pc, #572]	@ (80056cc <CreateMessage+0x800>)
 800548e:	0018      	movs	r0, r3
 8005490:	f7ff fcc0 	bl	8004e14 <isKeyValid>
 8005494:	1e03      	subs	r3, r0, #0
 8005496:	d043      	beq.n	8005520 <CreateMessage+0x654>
      uint8ArrayToString(Buffer, keybuffer);
 8005498:	4a8c      	ldr	r2, [pc, #560]	@ (80056cc <CreateMessage+0x800>)
 800549a:	4b8e      	ldr	r3, [pc, #568]	@ (80056d4 <CreateMessage+0x808>)
 800549c:	0011      	movs	r1, r2
 800549e:	0018      	movs	r0, r3
 80054a0:	f7ff fcf0 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
 80054a4:	4b8c      	ldr	r3, [pc, #560]	@ (80056d8 <CreateMessage+0x80c>)
 80054a6:	689c      	ldr	r4, [r3, #8]
 80054a8:	4b92      	ldr	r3, [pc, #584]	@ (80056f4 <CreateMessage+0x828>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	1c18      	adds	r0, r3, #0
 80054ae:	f7fd ffd9 	bl	8003464 <__aeabi_f2d>
 80054b2:	0002      	movs	r2, r0
 80054b4:	000b      	movs	r3, r1
 80054b6:	4d8a      	ldr	r5, [pc, #552]	@ (80056e0 <CreateMessage+0x814>)
 80054b8:	4993      	ldr	r1, [pc, #588]	@ (8005708 <CreateMessage+0x83c>)
 80054ba:	488b      	ldr	r0, [pc, #556]	@ (80056e8 <CreateMessage+0x81c>)
 80054bc:	9202      	str	r2, [sp, #8]
 80054be:	9303      	str	r3, [sp, #12]
 80054c0:	4b84      	ldr	r3, [pc, #528]	@ (80056d4 <CreateMessage+0x808>)
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	002b      	movs	r3, r5
 80054c6:	0022      	movs	r2, r4
 80054c8:	f01f fca8 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 80054cc:	4b86      	ldr	r3, [pc, #536]	@ (80056e8 <CreateMessage+0x81c>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fa fe4c 	bl	800016c <strlen>
 80054d4:	0003      	movs	r3, r0
 80054d6:	b299      	uxth	r1, r3
 80054d8:	220e      	movs	r2, #14
 80054da:	18bb      	adds	r3, r7, r2
 80054dc:	18ba      	adds	r2, r7, r2
 80054de:	8812      	ldrh	r2, [r2, #0]
 80054e0:	188a      	adds	r2, r1, r2
 80054e2:	801a      	strh	r2, [r3, #0]
      if (send) {
 80054e4:	1dbb      	adds	r3, r7, #6
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d019      	beq.n	8005520 <CreateMessage+0x654>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80054ec:	4b7e      	ldr	r3, [pc, #504]	@ (80056e8 <CreateMessage+0x81c>)
 80054ee:	0018      	movs	r0, r3
 80054f0:	f7fa fe3c 	bl	800016c <strlen>
 80054f4:	0003      	movs	r3, r0
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	4b7b      	ldr	r3, [pc, #492]	@ (80056e8 <CreateMessage+0x81c>)
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff fae1 	bl	8004ac4 <ESP_Send>
 8005502:	0003      	movs	r3, r0
 8005504:	001a      	movs	r2, r3
 8005506:	4b6f      	ldr	r3, [pc, #444]	@ (80056c4 <CreateMessage+0x7f8>)
 8005508:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800550a:	4b6f      	ldr	r3, [pc, #444]	@ (80056c8 <CreateMessage+0x7fc>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	001a      	movs	r2, r3
 8005510:	4b6c      	ldr	r3, [pc, #432]	@ (80056c4 <CreateMessage+0x7f8>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	4013      	ands	r3, r2
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	4193      	sbcs	r3, r2
 800551a:	b2da      	uxtb	r2, r3
 800551c:	4b6a      	ldr	r3, [pc, #424]	@ (80056c8 <CreateMessage+0x7fc>)
 800551e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005520:	4b6a      	ldr	r3, [pc, #424]	@ (80056cc <CreateMessage+0x800>)
 8005522:	487a      	ldr	r0, [pc, #488]	@ (800570c <CreateMessage+0x840>)
 8005524:	220c      	movs	r2, #12
 8005526:	0019      	movs	r1, r3
 8005528:	f005 feb6 	bl	800b298 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 800552c:	4b6f      	ldr	r3, [pc, #444]	@ (80056ec <CreateMessage+0x820>)
 800552e:	791b      	ldrb	r3, [r3, #4]
 8005530:	2b34      	cmp	r3, #52	@ 0x34
 8005532:	d003      	beq.n	800553c <CreateMessage+0x670>
 8005534:	4b6d      	ldr	r3, [pc, #436]	@ (80056ec <CreateMessage+0x820>)
 8005536:	791b      	ldrb	r3, [r3, #4]
 8005538:	2b35      	cmp	r3, #53	@ 0x35
 800553a:	d14b      	bne.n	80055d4 <CreateMessage+0x708>
 800553c:	4a74      	ldr	r2, [pc, #464]	@ (8005710 <CreateMessage+0x844>)
 800553e:	4971      	ldr	r1, [pc, #452]	@ (8005704 <CreateMessage+0x838>)
 8005540:	4b62      	ldr	r3, [pc, #392]	@ (80056cc <CreateMessage+0x800>)
 8005542:	0018      	movs	r0, r3
 8005544:	f7ff fc66 	bl	8004e14 <isKeyValid>
 8005548:	1e03      	subs	r3, r0, #0
 800554a:	d043      	beq.n	80055d4 <CreateMessage+0x708>
      uint8ArrayToString(Buffer, keybuffer);
 800554c:	4a5f      	ldr	r2, [pc, #380]	@ (80056cc <CreateMessage+0x800>)
 800554e:	4b61      	ldr	r3, [pc, #388]	@ (80056d4 <CreateMessage+0x808>)
 8005550:	0011      	movs	r1, r2
 8005552:	0018      	movs	r0, r3
 8005554:	f7ff fc96 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_humidity);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
 8005558:	4b5f      	ldr	r3, [pc, #380]	@ (80056d8 <CreateMessage+0x80c>)
 800555a:	689c      	ldr	r4, [r3, #8]
 800555c:	4b65      	ldr	r3, [pc, #404]	@ (80056f4 <CreateMessage+0x828>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	1c18      	adds	r0, r3, #0
 8005562:	f7fd ff7f 	bl	8003464 <__aeabi_f2d>
 8005566:	0002      	movs	r2, r0
 8005568:	000b      	movs	r3, r1
 800556a:	4d5d      	ldr	r5, [pc, #372]	@ (80056e0 <CreateMessage+0x814>)
 800556c:	4969      	ldr	r1, [pc, #420]	@ (8005714 <CreateMessage+0x848>)
 800556e:	485e      	ldr	r0, [pc, #376]	@ (80056e8 <CreateMessage+0x81c>)
 8005570:	9202      	str	r2, [sp, #8]
 8005572:	9303      	str	r3, [sp, #12]
 8005574:	4b57      	ldr	r3, [pc, #348]	@ (80056d4 <CreateMessage+0x808>)
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	002b      	movs	r3, r5
 800557a:	0022      	movs	r2, r4
 800557c:	f01f fc4e 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 8005580:	4b59      	ldr	r3, [pc, #356]	@ (80056e8 <CreateMessage+0x81c>)
 8005582:	0018      	movs	r0, r3
 8005584:	f7fa fdf2 	bl	800016c <strlen>
 8005588:	0003      	movs	r3, r0
 800558a:	b299      	uxth	r1, r3
 800558c:	220e      	movs	r2, #14
 800558e:	18bb      	adds	r3, r7, r2
 8005590:	18ba      	adds	r2, r7, r2
 8005592:	8812      	ldrh	r2, [r2, #0]
 8005594:	188a      	adds	r2, r1, r2
 8005596:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005598:	1dbb      	adds	r3, r7, #6
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d019      	beq.n	80055d4 <CreateMessage+0x708>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80055a0:	4b51      	ldr	r3, [pc, #324]	@ (80056e8 <CreateMessage+0x81c>)
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7fa fde2 	bl	800016c <strlen>
 80055a8:	0003      	movs	r3, r0
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	4b4e      	ldr	r3, [pc, #312]	@ (80056e8 <CreateMessage+0x81c>)
 80055ae:	0011      	movs	r1, r2
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff fa87 	bl	8004ac4 <ESP_Send>
 80055b6:	0003      	movs	r3, r0
 80055b8:	001a      	movs	r2, r3
 80055ba:	4b42      	ldr	r3, [pc, #264]	@ (80056c4 <CreateMessage+0x7f8>)
 80055bc:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80055be:	4b42      	ldr	r3, [pc, #264]	@ (80056c8 <CreateMessage+0x7fc>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	001a      	movs	r2, r3
 80055c4:	4b3f      	ldr	r3, [pc, #252]	@ (80056c4 <CreateMessage+0x7f8>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4013      	ands	r3, r2
 80055ca:	1e5a      	subs	r2, r3, #1
 80055cc:	4193      	sbcs	r3, r2
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	4b3d      	ldr	r3, [pc, #244]	@ (80056c8 <CreateMessage+0x7fc>)
 80055d2:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 80055d4:	f007 ffb8 	bl	800d548 <sen5x_Get_sen5x_enable_state>
 80055d8:	1e03      	subs	r3, r0, #0
 80055da:	d100      	bne.n	80055de <CreateMessage+0x712>
 80055dc:	e16e      	b.n	80058bc <CreateMessage+0x9f0>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 80055de:	4b3b      	ldr	r3, [pc, #236]	@ (80056cc <CreateMessage+0x800>)
 80055e0:	484d      	ldr	r0, [pc, #308]	@ (8005718 <CreateMessage+0x84c>)
 80055e2:	220c      	movs	r2, #12
 80055e4:	0019      	movs	r1, r3
 80055e6:	f005 fe57 	bl	800b298 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 80055ea:	4a4c      	ldr	r2, [pc, #304]	@ (800571c <CreateMessage+0x850>)
 80055ec:	494c      	ldr	r1, [pc, #304]	@ (8005720 <CreateMessage+0x854>)
 80055ee:	4b37      	ldr	r3, [pc, #220]	@ (80056cc <CreateMessage+0x800>)
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7ff fc0f 	bl	8004e14 <isKeyValid>
 80055f6:	1e03      	subs	r3, r0, #0
 80055f8:	d043      	beq.n	8005682 <CreateMessage+0x7b6>
        uint8ArrayToString(Buffer, keybuffer);
 80055fa:	4a34      	ldr	r2, [pc, #208]	@ (80056cc <CreateMessage+0x800>)
 80055fc:	4b35      	ldr	r3, [pc, #212]	@ (80056d4 <CreateMessage+0x808>)
 80055fe:	0011      	movs	r1, r2
 8005600:	0018      	movs	r0, r3
 8005602:	f7ff fc3f 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 8005606:	4b34      	ldr	r3, [pc, #208]	@ (80056d8 <CreateMessage+0x80c>)
 8005608:	689c      	ldr	r4, [r3, #8]
 800560a:	4b3a      	ldr	r3, [pc, #232]	@ (80056f4 <CreateMessage+0x828>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	1c18      	adds	r0, r3, #0
 8005610:	f7fd ff28 	bl	8003464 <__aeabi_f2d>
 8005614:	0002      	movs	r2, r0
 8005616:	000b      	movs	r3, r1
 8005618:	4d31      	ldr	r5, [pc, #196]	@ (80056e0 <CreateMessage+0x814>)
 800561a:	4942      	ldr	r1, [pc, #264]	@ (8005724 <CreateMessage+0x858>)
 800561c:	4832      	ldr	r0, [pc, #200]	@ (80056e8 <CreateMessage+0x81c>)
 800561e:	9202      	str	r2, [sp, #8]
 8005620:	9303      	str	r3, [sp, #12]
 8005622:	4b2c      	ldr	r3, [pc, #176]	@ (80056d4 <CreateMessage+0x808>)
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	002b      	movs	r3, r5
 8005628:	0022      	movs	r2, r4
 800562a:	f01f fbf7 	bl	8024e1c <siprintf>
#endif
        index += strlen(message);
 800562e:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <CreateMessage+0x81c>)
 8005630:	0018      	movs	r0, r3
 8005632:	f7fa fd9b 	bl	800016c <strlen>
 8005636:	0003      	movs	r3, r0
 8005638:	b299      	uxth	r1, r3
 800563a:	220e      	movs	r2, #14
 800563c:	18bb      	adds	r3, r7, r2
 800563e:	18ba      	adds	r2, r7, r2
 8005640:	8812      	ldrh	r2, [r2, #0]
 8005642:	188a      	adds	r2, r1, r2
 8005644:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005646:	1dbb      	adds	r3, r7, #6
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d019      	beq.n	8005682 <CreateMessage+0x7b6>
          status = ESP_Send((uint8_t*)message, strlen(message));
 800564e:	4b26      	ldr	r3, [pc, #152]	@ (80056e8 <CreateMessage+0x81c>)
 8005650:	0018      	movs	r0, r3
 8005652:	f7fa fd8b 	bl	800016c <strlen>
 8005656:	0003      	movs	r3, r0
 8005658:	b29a      	uxth	r2, r3
 800565a:	4b23      	ldr	r3, [pc, #140]	@ (80056e8 <CreateMessage+0x81c>)
 800565c:	0011      	movs	r1, r2
 800565e:	0018      	movs	r0, r3
 8005660:	f7ff fa30 	bl	8004ac4 <ESP_Send>
 8005664:	0003      	movs	r3, r0
 8005666:	001a      	movs	r2, r3
 8005668:	4b16      	ldr	r3, [pc, #88]	@ (80056c4 <CreateMessage+0x7f8>)
 800566a:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 800566c:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <CreateMessage+0x7fc>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	001a      	movs	r2, r3
 8005672:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <CreateMessage+0x7f8>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	4013      	ands	r3, r2
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	4193      	sbcs	r3, r2
 800567c:	b2da      	uxtb	r2, r3
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <CreateMessage+0x7fc>)
 8005680:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <CreateMessage+0x800>)
 8005684:	4828      	ldr	r0, [pc, #160]	@ (8005728 <CreateMessage+0x85c>)
 8005686:	220c      	movs	r2, #12
 8005688:	0019      	movs	r1, r3
 800568a:	f005 fe05 	bl	800b298 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 800568e:	4a0f      	ldr	r2, [pc, #60]	@ (80056cc <CreateMessage+0x800>)
 8005690:	4b10      	ldr	r3, [pc, #64]	@ (80056d4 <CreateMessage+0x808>)
 8005692:	0011      	movs	r1, r2
 8005694:	0018      	movs	r0, r3
 8005696:	f7ff fbf5 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 800569a:	4b0f      	ldr	r3, [pc, #60]	@ (80056d8 <CreateMessage+0x80c>)
 800569c:	689c      	ldr	r4, [r3, #8]
 800569e:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <CreateMessage+0x828>)
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	1c18      	adds	r0, r3, #0
 80056a4:	f7fd fede 	bl	8003464 <__aeabi_f2d>
 80056a8:	0002      	movs	r2, r0
 80056aa:	000b      	movs	r3, r1
 80056ac:	4d0c      	ldr	r5, [pc, #48]	@ (80056e0 <CreateMessage+0x814>)
 80056ae:	491f      	ldr	r1, [pc, #124]	@ (800572c <CreateMessage+0x860>)
 80056b0:	480d      	ldr	r0, [pc, #52]	@ (80056e8 <CreateMessage+0x81c>)
 80056b2:	9202      	str	r2, [sp, #8]
 80056b4:	9303      	str	r3, [sp, #12]
 80056b6:	4b07      	ldr	r3, [pc, #28]	@ (80056d4 <CreateMessage+0x808>)
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	002b      	movs	r3, r5
 80056bc:	0022      	movs	r2, r4
 80056be:	f01f fbad 	bl	8024e1c <siprintf>
 80056c2:	e035      	b.n	8005730 <CreateMessage+0x864>
 80056c4:	20000791 	.word	0x20000791
 80056c8:	2000002d 	.word	0x2000002d
 80056cc:	2000076c 	.word	0x2000076c
 80056d0:	08080078 	.word	0x08080078
 80056d4:	20000778 	.word	0x20000778
 80056d8:	200005c4 	.word	0x200005c4
 80056dc:	200005e0 	.word	0x200005e0
 80056e0:	2000074c 	.word	0x2000074c
 80056e4:	08029c18 	.word	0x08029c18
 80056e8:	200005e4 	.word	0x200005e4
 80056ec:	20000ee8 	.word	0x20000ee8
 80056f0:	08080024 	.word	0x08080024
 80056f4:	20000694 	.word	0x20000694
 80056f8:	08029c78 	.word	0x08029c78
 80056fc:	08080170 	.word	0x08080170
 8005700:	08029ccc 	.word	0x08029ccc
 8005704:	08029cd8 	.word	0x08029cd8
 8005708:	08029ce0 	.word	0x08029ce0
 800570c:	0808017c 	.word	0x0808017c
 8005710:	08029d3c 	.word	0x08029d3c
 8005714:	08029d48 	.word	0x08029d48
 8005718:	080800b0 	.word	0x080800b0
 800571c:	08029da8 	.word	0x08029da8
 8005720:	08029db4 	.word	0x08029db4
 8005724:	08029db8 	.word	0x08029db8
 8005728:	08080054 	.word	0x08080054
 800572c:	08029e10 	.word	0x08029e10
#endif
      index += strlen(message);
 8005730:	4beb      	ldr	r3, [pc, #940]	@ (8005ae0 <CreateMessage+0xc14>)
 8005732:	0018      	movs	r0, r3
 8005734:	f7fa fd1a 	bl	800016c <strlen>
 8005738:	0003      	movs	r3, r0
 800573a:	b299      	uxth	r1, r3
 800573c:	220e      	movs	r2, #14
 800573e:	18bb      	adds	r3, r7, r2
 8005740:	18ba      	adds	r2, r7, r2
 8005742:	8812      	ldrh	r2, [r2, #0]
 8005744:	188a      	adds	r2, r1, r2
 8005746:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005748:	1dbb      	adds	r3, r7, #6
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d019      	beq.n	8005784 <CreateMessage+0x8b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005750:	4be3      	ldr	r3, [pc, #908]	@ (8005ae0 <CreateMessage+0xc14>)
 8005752:	0018      	movs	r0, r3
 8005754:	f7fa fd0a 	bl	800016c <strlen>
 8005758:	0003      	movs	r3, r0
 800575a:	b29a      	uxth	r2, r3
 800575c:	4be0      	ldr	r3, [pc, #896]	@ (8005ae0 <CreateMessage+0xc14>)
 800575e:	0011      	movs	r1, r2
 8005760:	0018      	movs	r0, r3
 8005762:	f7ff f9af 	bl	8004ac4 <ESP_Send>
 8005766:	0003      	movs	r3, r0
 8005768:	001a      	movs	r2, r3
 800576a:	4bde      	ldr	r3, [pc, #888]	@ (8005ae4 <CreateMessage+0xc18>)
 800576c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800576e:	4bde      	ldr	r3, [pc, #888]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	001a      	movs	r2, r3
 8005774:	4bdb      	ldr	r3, [pc, #876]	@ (8005ae4 <CreateMessage+0xc18>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	1e5a      	subs	r2, r3, #1
 800577c:	4193      	sbcs	r3, r2
 800577e:	b2da      	uxtb	r2, r3
 8005780:	4bd9      	ldr	r3, [pc, #868]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005782:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005784:	4bd9      	ldr	r3, [pc, #868]	@ (8005aec <CreateMessage+0xc20>)
 8005786:	48da      	ldr	r0, [pc, #872]	@ (8005af0 <CreateMessage+0xc24>)
 8005788:	220c      	movs	r2, #12
 800578a:	0019      	movs	r1, r3
 800578c:	f005 fd84 	bl	800b298 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005790:	4ad8      	ldr	r2, [pc, #864]	@ (8005af4 <CreateMessage+0xc28>)
 8005792:	49d9      	ldr	r1, [pc, #868]	@ (8005af8 <CreateMessage+0xc2c>)
 8005794:	4bd5      	ldr	r3, [pc, #852]	@ (8005aec <CreateMessage+0xc20>)
 8005796:	0018      	movs	r0, r3
 8005798:	f7ff fb3c 	bl	8004e14 <isKeyValid>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d043      	beq.n	8005828 <CreateMessage+0x95c>
        uint8ArrayToString(Buffer, keybuffer);
 80057a0:	4ad2      	ldr	r2, [pc, #840]	@ (8005aec <CreateMessage+0xc20>)
 80057a2:	4bd6      	ldr	r3, [pc, #856]	@ (8005afc <CreateMessage+0xc30>)
 80057a4:	0011      	movs	r1, r2
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7ff fb6c 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 80057ac:	4bd4      	ldr	r3, [pc, #848]	@ (8005b00 <CreateMessage+0xc34>)
 80057ae:	689c      	ldr	r4, [r3, #8]
 80057b0:	4bd4      	ldr	r3, [pc, #848]	@ (8005b04 <CreateMessage+0xc38>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	1c18      	adds	r0, r3, #0
 80057b6:	f7fd fe55 	bl	8003464 <__aeabi_f2d>
 80057ba:	0002      	movs	r2, r0
 80057bc:	000b      	movs	r3, r1
 80057be:	4dd2      	ldr	r5, [pc, #840]	@ (8005b08 <CreateMessage+0xc3c>)
 80057c0:	49d2      	ldr	r1, [pc, #840]	@ (8005b0c <CreateMessage+0xc40>)
 80057c2:	48c7      	ldr	r0, [pc, #796]	@ (8005ae0 <CreateMessage+0xc14>)
 80057c4:	9202      	str	r2, [sp, #8]
 80057c6:	9303      	str	r3, [sp, #12]
 80057c8:	4bcc      	ldr	r3, [pc, #816]	@ (8005afc <CreateMessage+0xc30>)
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	002b      	movs	r3, r5
 80057ce:	0022      	movs	r2, r4
 80057d0:	f01f fb24 	bl	8024e1c <siprintf>
#endif
        index += strlen(message);
 80057d4:	4bc2      	ldr	r3, [pc, #776]	@ (8005ae0 <CreateMessage+0xc14>)
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7fa fcc8 	bl	800016c <strlen>
 80057dc:	0003      	movs	r3, r0
 80057de:	b299      	uxth	r1, r3
 80057e0:	220e      	movs	r2, #14
 80057e2:	18bb      	adds	r3, r7, r2
 80057e4:	18ba      	adds	r2, r7, r2
 80057e6:	8812      	ldrh	r2, [r2, #0]
 80057e8:	188a      	adds	r2, r1, r2
 80057ea:	801a      	strh	r2, [r3, #0]
        if (send) {
 80057ec:	1dbb      	adds	r3, r7, #6
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d019      	beq.n	8005828 <CreateMessage+0x95c>
          status = ESP_Send((uint8_t*)message, strlen(message));
 80057f4:	4bba      	ldr	r3, [pc, #744]	@ (8005ae0 <CreateMessage+0xc14>)
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7fa fcb8 	bl	800016c <strlen>
 80057fc:	0003      	movs	r3, r0
 80057fe:	b29a      	uxth	r2, r3
 8005800:	4bb7      	ldr	r3, [pc, #732]	@ (8005ae0 <CreateMessage+0xc14>)
 8005802:	0011      	movs	r1, r2
 8005804:	0018      	movs	r0, r3
 8005806:	f7ff f95d 	bl	8004ac4 <ESP_Send>
 800580a:	0003      	movs	r3, r0
 800580c:	001a      	movs	r2, r3
 800580e:	4bb5      	ldr	r3, [pc, #724]	@ (8005ae4 <CreateMessage+0xc18>)
 8005810:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005812:	4bb5      	ldr	r3, [pc, #724]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	001a      	movs	r2, r3
 8005818:	4bb2      	ldr	r3, [pc, #712]	@ (8005ae4 <CreateMessage+0xc18>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	4013      	ands	r3, r2
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	4193      	sbcs	r3, r2
 8005822:	b2da      	uxtb	r2, r3
 8005824:	4bb0      	ldr	r3, [pc, #704]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005826:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005828:	4bb0      	ldr	r3, [pc, #704]	@ (8005aec <CreateMessage+0xc20>)
 800582a:	48b9      	ldr	r0, [pc, #740]	@ (8005b10 <CreateMessage+0xc44>)
 800582c:	220c      	movs	r2, #12
 800582e:	0019      	movs	r1, r3
 8005830:	f005 fd32 	bl	800b298 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005834:	4aad      	ldr	r2, [pc, #692]	@ (8005aec <CreateMessage+0xc20>)
 8005836:	4bb1      	ldr	r3, [pc, #708]	@ (8005afc <CreateMessage+0xc30>)
 8005838:	0011      	movs	r1, r2
 800583a:	0018      	movs	r0, r3
 800583c:	f7ff fb22 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8005840:	4baf      	ldr	r3, [pc, #700]	@ (8005b00 <CreateMessage+0xc34>)
 8005842:	689c      	ldr	r4, [r3, #8]
 8005844:	4baf      	ldr	r3, [pc, #700]	@ (8005b04 <CreateMessage+0xc38>)
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	1c18      	adds	r0, r3, #0
 800584a:	f7fd fe0b 	bl	8003464 <__aeabi_f2d>
 800584e:	0002      	movs	r2, r0
 8005850:	000b      	movs	r3, r1
 8005852:	4dad      	ldr	r5, [pc, #692]	@ (8005b08 <CreateMessage+0xc3c>)
 8005854:	49af      	ldr	r1, [pc, #700]	@ (8005b14 <CreateMessage+0xc48>)
 8005856:	48a2      	ldr	r0, [pc, #648]	@ (8005ae0 <CreateMessage+0xc14>)
 8005858:	9202      	str	r2, [sp, #8]
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	4ba7      	ldr	r3, [pc, #668]	@ (8005afc <CreateMessage+0xc30>)
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	002b      	movs	r3, r5
 8005862:	0022      	movs	r2, r4
 8005864:	f01f fada 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 8005868:	4b9d      	ldr	r3, [pc, #628]	@ (8005ae0 <CreateMessage+0xc14>)
 800586a:	0018      	movs	r0, r3
 800586c:	f7fa fc7e 	bl	800016c <strlen>
 8005870:	0003      	movs	r3, r0
 8005872:	b299      	uxth	r1, r3
 8005874:	220e      	movs	r2, #14
 8005876:	18bb      	adds	r3, r7, r2
 8005878:	18ba      	adds	r2, r7, r2
 800587a:	8812      	ldrh	r2, [r2, #0]
 800587c:	188a      	adds	r2, r1, r2
 800587e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005880:	1dbb      	adds	r3, r7, #6
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <CreateMessage+0x9f0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005888:	4b95      	ldr	r3, [pc, #596]	@ (8005ae0 <CreateMessage+0xc14>)
 800588a:	0018      	movs	r0, r3
 800588c:	f7fa fc6e 	bl	800016c <strlen>
 8005890:	0003      	movs	r3, r0
 8005892:	b29a      	uxth	r2, r3
 8005894:	4b92      	ldr	r3, [pc, #584]	@ (8005ae0 <CreateMessage+0xc14>)
 8005896:	0011      	movs	r1, r2
 8005898:	0018      	movs	r0, r3
 800589a:	f7ff f913 	bl	8004ac4 <ESP_Send>
 800589e:	0003      	movs	r3, r0
 80058a0:	001a      	movs	r2, r3
 80058a2:	4b90      	ldr	r3, [pc, #576]	@ (8005ae4 <CreateMessage+0xc18>)
 80058a4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80058a6:	4b90      	ldr	r3, [pc, #576]	@ (8005ae8 <CreateMessage+0xc1c>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	001a      	movs	r2, r3
 80058ac:	4b8d      	ldr	r3, [pc, #564]	@ (8005ae4 <CreateMessage+0xc18>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	4013      	ands	r3, r2
 80058b2:	1e5a      	subs	r2, r3, #1
 80058b4:	4193      	sbcs	r3, r2
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	4b8b      	ldr	r3, [pc, #556]	@ (8005ae8 <CreateMessage+0xc1c>)
 80058ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 80058bc:	f006 fe16 	bl	800c4ec <IsAHT20SensorPresent>
 80058c0:	1e03      	subs	r3, r0, #0
 80058c2:	d100      	bne.n	80058c6 <CreateMessage+0x9fa>
 80058c4:	e0a3      	b.n	8005a0e <CreateMessage+0xb42>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 80058c6:	4b89      	ldr	r3, [pc, #548]	@ (8005aec <CreateMessage+0xc20>)
 80058c8:	4893      	ldr	r0, [pc, #588]	@ (8005b18 <CreateMessage+0xc4c>)
 80058ca:	220c      	movs	r2, #12
 80058cc:	0019      	movs	r1, r3
 80058ce:	f005 fce3 	bl	800b298 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 80058d2:	4a92      	ldr	r2, [pc, #584]	@ (8005b1c <CreateMessage+0xc50>)
 80058d4:	4992      	ldr	r1, [pc, #584]	@ (8005b20 <CreateMessage+0xc54>)
 80058d6:	4b85      	ldr	r3, [pc, #532]	@ (8005aec <CreateMessage+0xc20>)
 80058d8:	0018      	movs	r0, r3
 80058da:	f7ff fa9b 	bl	8004e14 <isKeyValid>
 80058de:	1e03      	subs	r3, r0, #0
 80058e0:	d043      	beq.n	800596a <CreateMessage+0xa9e>
      uint8ArrayToString(Buffer, keybuffer);
 80058e2:	4a82      	ldr	r2, [pc, #520]	@ (8005aec <CreateMessage+0xc20>)
 80058e4:	4b85      	ldr	r3, [pc, #532]	@ (8005afc <CreateMessage+0xc30>)
 80058e6:	0011      	movs	r1, r2
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff facb 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperaturemax);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperaturemax);
 80058ee:	4b84      	ldr	r3, [pc, #528]	@ (8005b00 <CreateMessage+0xc34>)
 80058f0:	689c      	ldr	r4, [r3, #8]
 80058f2:	4b84      	ldr	r3, [pc, #528]	@ (8005b04 <CreateMessage+0xc38>)
 80058f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f6:	1c18      	adds	r0, r3, #0
 80058f8:	f7fd fdb4 	bl	8003464 <__aeabi_f2d>
 80058fc:	0002      	movs	r2, r0
 80058fe:	000b      	movs	r3, r1
 8005900:	4d81      	ldr	r5, [pc, #516]	@ (8005b08 <CreateMessage+0xc3c>)
 8005902:	4988      	ldr	r1, [pc, #544]	@ (8005b24 <CreateMessage+0xc58>)
 8005904:	4876      	ldr	r0, [pc, #472]	@ (8005ae0 <CreateMessage+0xc14>)
 8005906:	9202      	str	r2, [sp, #8]
 8005908:	9303      	str	r3, [sp, #12]
 800590a:	4b7c      	ldr	r3, [pc, #496]	@ (8005afc <CreateMessage+0xc30>)
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	002b      	movs	r3, r5
 8005910:	0022      	movs	r2, r4
 8005912:	f01f fa83 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 8005916:	4b72      	ldr	r3, [pc, #456]	@ (8005ae0 <CreateMessage+0xc14>)
 8005918:	0018      	movs	r0, r3
 800591a:	f7fa fc27 	bl	800016c <strlen>
 800591e:	0003      	movs	r3, r0
 8005920:	b299      	uxth	r1, r3
 8005922:	220e      	movs	r2, #14
 8005924:	18bb      	adds	r3, r7, r2
 8005926:	18ba      	adds	r2, r7, r2
 8005928:	8812      	ldrh	r2, [r2, #0]
 800592a:	188a      	adds	r2, r1, r2
 800592c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800592e:	1dbb      	adds	r3, r7, #6
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d019      	beq.n	800596a <CreateMessage+0xa9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005936:	4b6a      	ldr	r3, [pc, #424]	@ (8005ae0 <CreateMessage+0xc14>)
 8005938:	0018      	movs	r0, r3
 800593a:	f7fa fc17 	bl	800016c <strlen>
 800593e:	0003      	movs	r3, r0
 8005940:	b29a      	uxth	r2, r3
 8005942:	4b67      	ldr	r3, [pc, #412]	@ (8005ae0 <CreateMessage+0xc14>)
 8005944:	0011      	movs	r1, r2
 8005946:	0018      	movs	r0, r3
 8005948:	f7ff f8bc 	bl	8004ac4 <ESP_Send>
 800594c:	0003      	movs	r3, r0
 800594e:	001a      	movs	r2, r3
 8005950:	4b64      	ldr	r3, [pc, #400]	@ (8005ae4 <CreateMessage+0xc18>)
 8005952:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005954:	4b64      	ldr	r3, [pc, #400]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	001a      	movs	r2, r3
 800595a:	4b62      	ldr	r3, [pc, #392]	@ (8005ae4 <CreateMessage+0xc18>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4013      	ands	r3, r2
 8005960:	1e5a      	subs	r2, r3, #1
 8005962:	4193      	sbcs	r3, r2
 8005964:	b2da      	uxtb	r2, r3
 8005966:	4b60      	ldr	r3, [pc, #384]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005968:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 800596a:	4b60      	ldr	r3, [pc, #384]	@ (8005aec <CreateMessage+0xc20>)
 800596c:	486e      	ldr	r0, [pc, #440]	@ (8005b28 <CreateMessage+0xc5c>)
 800596e:	220c      	movs	r2, #12
 8005970:	0019      	movs	r1, r3
 8005972:	f005 fc91 	bl	800b298 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005976:	4a6d      	ldr	r2, [pc, #436]	@ (8005b2c <CreateMessage+0xc60>)
 8005978:	4969      	ldr	r1, [pc, #420]	@ (8005b20 <CreateMessage+0xc54>)
 800597a:	4b5c      	ldr	r3, [pc, #368]	@ (8005aec <CreateMessage+0xc20>)
 800597c:	0018      	movs	r0, r3
 800597e:	f7ff fa49 	bl	8004e14 <isKeyValid>
 8005982:	1e03      	subs	r3, r0, #0
 8005984:	d043      	beq.n	8005a0e <CreateMessage+0xb42>
      uint8ArrayToString(Buffer, keybuffer);
 8005986:	4a59      	ldr	r2, [pc, #356]	@ (8005aec <CreateMessage+0xc20>)
 8005988:	4b5c      	ldr	r3, [pc, #368]	@ (8005afc <CreateMessage+0xc30>)
 800598a:	0011      	movs	r1, r2
 800598c:	0018      	movs	r0, r3
 800598e:	f7ff fa79 	bl	8004e84 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humiditymax);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humiditymax);
 8005992:	4b5b      	ldr	r3, [pc, #364]	@ (8005b00 <CreateMessage+0xc34>)
 8005994:	689c      	ldr	r4, [r3, #8]
 8005996:	4b5b      	ldr	r3, [pc, #364]	@ (8005b04 <CreateMessage+0xc38>)
 8005998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599a:	1c18      	adds	r0, r3, #0
 800599c:	f7fd fd62 	bl	8003464 <__aeabi_f2d>
 80059a0:	0002      	movs	r2, r0
 80059a2:	000b      	movs	r3, r1
 80059a4:	4d58      	ldr	r5, [pc, #352]	@ (8005b08 <CreateMessage+0xc3c>)
 80059a6:	4962      	ldr	r1, [pc, #392]	@ (8005b30 <CreateMessage+0xc64>)
 80059a8:	484d      	ldr	r0, [pc, #308]	@ (8005ae0 <CreateMessage+0xc14>)
 80059aa:	9202      	str	r2, [sp, #8]
 80059ac:	9303      	str	r3, [sp, #12]
 80059ae:	4b53      	ldr	r3, [pc, #332]	@ (8005afc <CreateMessage+0xc30>)
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	002b      	movs	r3, r5
 80059b4:	0022      	movs	r2, r4
 80059b6:	f01f fa31 	bl	8024e1c <siprintf>
  #endif
      index += strlen(message);
 80059ba:	4b49      	ldr	r3, [pc, #292]	@ (8005ae0 <CreateMessage+0xc14>)
 80059bc:	0018      	movs	r0, r3
 80059be:	f7fa fbd5 	bl	800016c <strlen>
 80059c2:	0003      	movs	r3, r0
 80059c4:	b299      	uxth	r1, r3
 80059c6:	220e      	movs	r2, #14
 80059c8:	18bb      	adds	r3, r7, r2
 80059ca:	18ba      	adds	r2, r7, r2
 80059cc:	8812      	ldrh	r2, [r2, #0]
 80059ce:	188a      	adds	r2, r1, r2
 80059d0:	801a      	strh	r2, [r3, #0]
      if (send) {
 80059d2:	1dbb      	adds	r3, r7, #6
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d019      	beq.n	8005a0e <CreateMessage+0xb42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80059da:	4b41      	ldr	r3, [pc, #260]	@ (8005ae0 <CreateMessage+0xc14>)
 80059dc:	0018      	movs	r0, r3
 80059de:	f7fa fbc5 	bl	800016c <strlen>
 80059e2:	0003      	movs	r3, r0
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ae0 <CreateMessage+0xc14>)
 80059e8:	0011      	movs	r1, r2
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7ff f86a 	bl	8004ac4 <ESP_Send>
 80059f0:	0003      	movs	r3, r0
 80059f2:	001a      	movs	r2, r3
 80059f4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae4 <CreateMessage+0xc18>)
 80059f6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80059f8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae8 <CreateMessage+0xc1c>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	001a      	movs	r2, r3
 80059fe:	4b39      	ldr	r3, [pc, #228]	@ (8005ae4 <CreateMessage+0xc18>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4013      	ands	r3, r2
 8005a04:	1e5a      	subs	r2, r3, #1
 8005a06:	4193      	sbcs	r3, r2
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	4b37      	ldr	r3, [pc, #220]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005a0c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005a0e:	f006 fd81 	bl	800c514 <IsENS160SensorPresent>
 8005a12:	1e03      	subs	r3, r0, #0
 8005a14:	d100      	bne.n	8005a18 <CreateMessage+0xb4c>
 8005a16:	e11b      	b.n	8005c50 <CreateMessage+0xd84>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005a18:	4b34      	ldr	r3, [pc, #208]	@ (8005aec <CreateMessage+0xc20>)
 8005a1a:	4846      	ldr	r0, [pc, #280]	@ (8005b34 <CreateMessage+0xc68>)
 8005a1c:	220c      	movs	r2, #12
 8005a1e:	0019      	movs	r1, r3
 8005a20:	f005 fc3a 	bl	800b298 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005a24:	4a44      	ldr	r2, [pc, #272]	@ (8005b38 <CreateMessage+0xc6c>)
 8005a26:	4945      	ldr	r1, [pc, #276]	@ (8005b3c <CreateMessage+0xc70>)
 8005a28:	4b30      	ldr	r3, [pc, #192]	@ (8005aec <CreateMessage+0xc20>)
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff f9f2 	bl	8004e14 <isKeyValid>
 8005a30:	1e03      	subs	r3, r0, #0
 8005a32:	d03d      	beq.n	8005ab0 <CreateMessage+0xbe4>
      uint8ArrayToString(Buffer, keybuffer);
 8005a34:	4a2d      	ldr	r2, [pc, #180]	@ (8005aec <CreateMessage+0xc20>)
 8005a36:	4b31      	ldr	r3, [pc, #196]	@ (8005afc <CreateMessage+0xc30>)
 8005a38:	0011      	movs	r1, r2
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7ff fa22 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005a40:	4b2f      	ldr	r3, [pc, #188]	@ (8005b00 <CreateMessage+0xc34>)
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	4b2f      	ldr	r3, [pc, #188]	@ (8005b04 <CreateMessage+0xc38>)
 8005a46:	2165      	movs	r1, #101	@ 0x65
 8005a48:	5c5b      	ldrb	r3, [r3, r1]
 8005a4a:	4c2f      	ldr	r4, [pc, #188]	@ (8005b08 <CreateMessage+0xc3c>)
 8005a4c:	493c      	ldr	r1, [pc, #240]	@ (8005b40 <CreateMessage+0xc74>)
 8005a4e:	4824      	ldr	r0, [pc, #144]	@ (8005ae0 <CreateMessage+0xc14>)
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	4b2a      	ldr	r3, [pc, #168]	@ (8005afc <CreateMessage+0xc30>)
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	0023      	movs	r3, r4
 8005a58:	f01f f9e0 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 8005a5c:	4b20      	ldr	r3, [pc, #128]	@ (8005ae0 <CreateMessage+0xc14>)
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f7fa fb84 	bl	800016c <strlen>
 8005a64:	0003      	movs	r3, r0
 8005a66:	b299      	uxth	r1, r3
 8005a68:	220e      	movs	r2, #14
 8005a6a:	18bb      	adds	r3, r7, r2
 8005a6c:	18ba      	adds	r2, r7, r2
 8005a6e:	8812      	ldrh	r2, [r2, #0]
 8005a70:	188a      	adds	r2, r1, r2
 8005a72:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005a74:	1dbb      	adds	r3, r7, #6
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d019      	beq.n	8005ab0 <CreateMessage+0xbe4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005a7c:	4b18      	ldr	r3, [pc, #96]	@ (8005ae0 <CreateMessage+0xc14>)
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f7fa fb74 	bl	800016c <strlen>
 8005a84:	0003      	movs	r3, r0
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	4b15      	ldr	r3, [pc, #84]	@ (8005ae0 <CreateMessage+0xc14>)
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f7ff f819 	bl	8004ac4 <ESP_Send>
 8005a92:	0003      	movs	r3, r0
 8005a94:	001a      	movs	r2, r3
 8005a96:	4b13      	ldr	r3, [pc, #76]	@ (8005ae4 <CreateMessage+0xc18>)
 8005a98:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005a9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	001a      	movs	r2, r3
 8005aa0:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <CreateMessage+0xc18>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	1e5a      	subs	r2, r3, #1
 8005aa8:	4193      	sbcs	r3, r2
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae8 <CreateMessage+0xc1c>)
 8005aae:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8005aec <CreateMessage+0xc20>)
 8005ab2:	4824      	ldr	r0, [pc, #144]	@ (8005b44 <CreateMessage+0xc78>)
 8005ab4:	220c      	movs	r2, #12
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	f005 fbee 	bl	800b298 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005abc:	4a22      	ldr	r2, [pc, #136]	@ (8005b48 <CreateMessage+0xc7c>)
 8005abe:	491f      	ldr	r1, [pc, #124]	@ (8005b3c <CreateMessage+0xc70>)
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <CreateMessage+0xc20>)
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7ff f9a6 	bl	8004e14 <isKeyValid>
 8005ac8:	1e03      	subs	r3, r0, #0
 8005aca:	d075      	beq.n	8005bb8 <CreateMessage+0xcec>
      uint8ArrayToString(Buffer, keybuffer);
 8005acc:	4a07      	ldr	r2, [pc, #28]	@ (8005aec <CreateMessage+0xc20>)
 8005ace:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <CreateMessage+0xc30>)
 8005ad0:	0011      	movs	r1, r2
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7ff f9d6 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 8005ad8:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <CreateMessage+0xc34>)
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	e036      	b.n	8005b4c <CreateMessage+0xc80>
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	200005e4 	.word	0x200005e4
 8005ae4:	20000791 	.word	0x20000791
 8005ae8:	2000002d 	.word	0x2000002d
 8005aec:	2000076c 	.word	0x2000076c
 8005af0:	080800bc 	.word	0x080800bc
 8005af4:	08029da8 	.word	0x08029da8
 8005af8:	08029e6c 	.word	0x08029e6c
 8005afc:	20000778 	.word	0x20000778
 8005b00:	200005c4 	.word	0x200005c4
 8005b04:	20000694 	.word	0x20000694
 8005b08:	2000074c 	.word	0x2000074c
 8005b0c:	08029e70 	.word	0x08029e70
 8005b10:	08080060 	.word	0x08080060
 8005b14:	08029ec8 	.word	0x08029ec8
 8005b18:	080800c8 	.word	0x080800c8
 8005b1c:	08029ccc 	.word	0x08029ccc
 8005b20:	08029f24 	.word	0x08029f24
 8005b24:	08029f2c 	.word	0x08029f2c
 8005b28:	080800d4 	.word	0x080800d4
 8005b2c:	08029d3c 	.word	0x08029d3c
 8005b30:	08029f88 	.word	0x08029f88
 8005b34:	080800ec 	.word	0x080800ec
 8005b38:	08029fe4 	.word	0x08029fe4
 8005b3c:	08029ff8 	.word	0x08029ff8
 8005b40:	0802a000 	.word	0x0802a000
 8005b44:	080800f8 	.word	0x080800f8
 8005b48:	0802a058 	.word	0x0802a058
 8005b4c:	4b71      	ldr	r3, [pc, #452]	@ (8005d14 <CreateMessage+0xe48>)
 8005b4e:	215a      	movs	r1, #90	@ 0x5a
 8005b50:	5a5b      	ldrh	r3, [r3, r1]
 8005b52:	4c71      	ldr	r4, [pc, #452]	@ (8005d18 <CreateMessage+0xe4c>)
 8005b54:	4971      	ldr	r1, [pc, #452]	@ (8005d1c <CreateMessage+0xe50>)
 8005b56:	4872      	ldr	r0, [pc, #456]	@ (8005d20 <CreateMessage+0xe54>)
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	4b72      	ldr	r3, [pc, #456]	@ (8005d24 <CreateMessage+0xe58>)
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	0023      	movs	r3, r4
 8005b60:	f01f f95c 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 8005b64:	4b6e      	ldr	r3, [pc, #440]	@ (8005d20 <CreateMessage+0xe54>)
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7fa fb00 	bl	800016c <strlen>
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	b299      	uxth	r1, r3
 8005b70:	220e      	movs	r2, #14
 8005b72:	18bb      	adds	r3, r7, r2
 8005b74:	18ba      	adds	r2, r7, r2
 8005b76:	8812      	ldrh	r2, [r2, #0]
 8005b78:	188a      	adds	r2, r1, r2
 8005b7a:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b7c:	1dbb      	adds	r3, r7, #6
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d019      	beq.n	8005bb8 <CreateMessage+0xcec>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b84:	4b66      	ldr	r3, [pc, #408]	@ (8005d20 <CreateMessage+0xe54>)
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7fa faf0 	bl	800016c <strlen>
 8005b8c:	0003      	movs	r3, r0
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	4b63      	ldr	r3, [pc, #396]	@ (8005d20 <CreateMessage+0xe54>)
 8005b92:	0011      	movs	r1, r2
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7fe ff95 	bl	8004ac4 <ESP_Send>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	001a      	movs	r2, r3
 8005b9e:	4b62      	ldr	r3, [pc, #392]	@ (8005d28 <CreateMessage+0xe5c>)
 8005ba0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ba2:	4b62      	ldr	r3, [pc, #392]	@ (8005d2c <CreateMessage+0xe60>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8005d28 <CreateMessage+0xe5c>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	4013      	ands	r3, r2
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	4193      	sbcs	r3, r2
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8005d2c <CreateMessage+0xe60>)
 8005bb6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005bb8:	4b5d      	ldr	r3, [pc, #372]	@ (8005d30 <CreateMessage+0xe64>)
 8005bba:	485e      	ldr	r0, [pc, #376]	@ (8005d34 <CreateMessage+0xe68>)
 8005bbc:	220c      	movs	r2, #12
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	f005 fb6a 	bl	800b298 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005bc4:	4a5c      	ldr	r2, [pc, #368]	@ (8005d38 <CreateMessage+0xe6c>)
 8005bc6:	495d      	ldr	r1, [pc, #372]	@ (8005d3c <CreateMessage+0xe70>)
 8005bc8:	4b59      	ldr	r3, [pc, #356]	@ (8005d30 <CreateMessage+0xe64>)
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f7ff f922 	bl	8004e14 <isKeyValid>
 8005bd0:	1e03      	subs	r3, r0, #0
 8005bd2:	d03d      	beq.n	8005c50 <CreateMessage+0xd84>
      uint8ArrayToString(Buffer, keybuffer);
 8005bd4:	4a56      	ldr	r2, [pc, #344]	@ (8005d30 <CreateMessage+0xe64>)
 8005bd6:	4b53      	ldr	r3, [pc, #332]	@ (8005d24 <CreateMessage+0xe58>)
 8005bd8:	0011      	movs	r1, r2
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7ff f952 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8005be0:	4b57      	ldr	r3, [pc, #348]	@ (8005d40 <CreateMessage+0xe74>)
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	4b4b      	ldr	r3, [pc, #300]	@ (8005d14 <CreateMessage+0xe48>)
 8005be6:	2162      	movs	r1, #98	@ 0x62
 8005be8:	5a5b      	ldrh	r3, [r3, r1]
 8005bea:	4c4b      	ldr	r4, [pc, #300]	@ (8005d18 <CreateMessage+0xe4c>)
 8005bec:	4955      	ldr	r1, [pc, #340]	@ (8005d44 <CreateMessage+0xe78>)
 8005bee:	484c      	ldr	r0, [pc, #304]	@ (8005d20 <CreateMessage+0xe54>)
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8005d24 <CreateMessage+0xe58>)
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	0023      	movs	r3, r4
 8005bf8:	f01f f910 	bl	8024e1c <siprintf>
#endif
      index += strlen(message);
 8005bfc:	4b48      	ldr	r3, [pc, #288]	@ (8005d20 <CreateMessage+0xe54>)
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fa fab4 	bl	800016c <strlen>
 8005c04:	0003      	movs	r3, r0
 8005c06:	b299      	uxth	r1, r3
 8005c08:	220e      	movs	r2, #14
 8005c0a:	18bb      	adds	r3, r7, r2
 8005c0c:	18ba      	adds	r2, r7, r2
 8005c0e:	8812      	ldrh	r2, [r2, #0]
 8005c10:	188a      	adds	r2, r1, r2
 8005c12:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005c14:	1dbb      	adds	r3, r7, #6
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d019      	beq.n	8005c50 <CreateMessage+0xd84>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005c1c:	4b40      	ldr	r3, [pc, #256]	@ (8005d20 <CreateMessage+0xe54>)
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7fa faa4 	bl	800016c <strlen>
 8005c24:	0003      	movs	r3, r0
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	4b3d      	ldr	r3, [pc, #244]	@ (8005d20 <CreateMessage+0xe54>)
 8005c2a:	0011      	movs	r1, r2
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7fe ff49 	bl	8004ac4 <ESP_Send>
 8005c32:	0003      	movs	r3, r0
 8005c34:	001a      	movs	r2, r3
 8005c36:	4b3c      	ldr	r3, [pc, #240]	@ (8005d28 <CreateMessage+0xe5c>)
 8005c38:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d2c <CreateMessage+0xe60>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	001a      	movs	r2, r3
 8005c40:	4b39      	ldr	r3, [pc, #228]	@ (8005d28 <CreateMessage+0xe5c>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	4013      	ands	r3, r2
 8005c46:	1e5a      	subs	r2, r3, #1
 8005c48:	4193      	sbcs	r3, r2
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	4b37      	ldr	r3, [pc, #220]	@ (8005d2c <CreateMessage+0xe60>)
 8005c4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8005c50:	4b37      	ldr	r3, [pc, #220]	@ (8005d30 <CreateMessage+0xe64>)
 8005c52:	483d      	ldr	r0, [pc, #244]	@ (8005d48 <CreateMessage+0xe7c>)
 8005c54:	220c      	movs	r2, #12
 8005c56:	0019      	movs	r1, r3
 8005c58:	f005 fb1e 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005c5c:	4a34      	ldr	r2, [pc, #208]	@ (8005d30 <CreateMessage+0xe64>)
 8005c5e:	4b31      	ldr	r3, [pc, #196]	@ (8005d24 <CreateMessage+0xe58>)
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7ff f90e 	bl	8004e84 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8005c68:	4b35      	ldr	r3, [pc, #212]	@ (8005d40 <CreateMessage+0xe74>)
 8005c6a:	689c      	ldr	r4, [r3, #8]
 8005c6c:	4b37      	ldr	r3, [pc, #220]	@ (8005d4c <CreateMessage+0xe80>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	1c18      	adds	r0, r3, #0
 8005c72:	f7fd fbf7 	bl	8003464 <__aeabi_f2d>
 8005c76:	0002      	movs	r2, r0
 8005c78:	000b      	movs	r3, r1
 8005c7a:	4d27      	ldr	r5, [pc, #156]	@ (8005d18 <CreateMessage+0xe4c>)
 8005c7c:	4934      	ldr	r1, [pc, #208]	@ (8005d50 <CreateMessage+0xe84>)
 8005c7e:	4828      	ldr	r0, [pc, #160]	@ (8005d20 <CreateMessage+0xe54>)
 8005c80:	9202      	str	r2, [sp, #8]
 8005c82:	9303      	str	r3, [sp, #12]
 8005c84:	4b27      	ldr	r3, [pc, #156]	@ (8005d24 <CreateMessage+0xe58>)
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	002b      	movs	r3, r5
 8005c8a:	0022      	movs	r2, r4
 8005c8c:	f01f f8c6 	bl	8024e1c <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8005c90:	4b23      	ldr	r3, [pc, #140]	@ (8005d20 <CreateMessage+0xe54>)
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fa fa6a 	bl	800016c <strlen>
 8005c98:	0002      	movs	r2, r0
 8005c9a:	4b21      	ldr	r3, [pc, #132]	@ (8005d20 <CreateMessage+0xe54>)
 8005c9c:	18d3      	adds	r3, r2, r3
 8005c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005d54 <CreateMessage+0xe88>)
 8005ca0:	0011      	movs	r1, r2
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f01f f8ba 	bl	8024e1c <siprintf>
  index += strlen(message);
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d20 <CreateMessage+0xe54>)
 8005caa:	0018      	movs	r0, r3
 8005cac:	f7fa fa5e 	bl	800016c <strlen>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	b299      	uxth	r1, r3
 8005cb4:	220e      	movs	r2, #14
 8005cb6:	18bb      	adds	r3, r7, r2
 8005cb8:	18ba      	adds	r2, r7, r2
 8005cba:	8812      	ldrh	r2, [r2, #0]
 8005cbc:	188a      	adds	r2, r1, r2
 8005cbe:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005cc0:	1dbb      	adds	r3, r7, #6
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d019      	beq.n	8005cfc <CreateMessage+0xe30>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005cc8:	4b15      	ldr	r3, [pc, #84]	@ (8005d20 <CreateMessage+0xe54>)
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f7fa fa4e 	bl	800016c <strlen>
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	4b12      	ldr	r3, [pc, #72]	@ (8005d20 <CreateMessage+0xe54>)
 8005cd6:	0011      	movs	r1, r2
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7fe fef3 	bl	8004ac4 <ESP_Send>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	4b11      	ldr	r3, [pc, #68]	@ (8005d28 <CreateMessage+0xe5c>)
 8005ce4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005ce6:	4b11      	ldr	r3, [pc, #68]	@ (8005d2c <CreateMessage+0xe60>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	001a      	movs	r2, r3
 8005cec:	4b0e      	ldr	r3, [pc, #56]	@ (8005d28 <CreateMessage+0xe5c>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	1e5a      	subs	r2, r3, #1
 8005cf4:	4193      	sbcs	r3, r2
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <CreateMessage+0xe60>)
 8005cfa:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <CreateMessage+0xe60>)
 8005cfe:	781a      	ldrb	r2, [r3, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	701a      	strb	r2, [r3, #0]
  return index;
 8005d04:	230e      	movs	r3, #14
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	881b      	ldrh	r3, [r3, #0]
}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b005      	add	sp, #20
 8005d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d12:	46c0      	nop			@ (mov r8, r8)
 8005d14:	20000694 	.word	0x20000694
 8005d18:	2000074c 	.word	0x2000074c
 8005d1c:	0802a060 	.word	0x0802a060
 8005d20:	200005e4 	.word	0x200005e4
 8005d24:	20000778 	.word	0x20000778
 8005d28:	20000791 	.word	0x20000791
 8005d2c:	2000002d 	.word	0x2000002d
 8005d30:	2000076c 	.word	0x2000076c
 8005d34:	08080104 	.word	0x08080104
 8005d38:	0802a0bc 	.word	0x0802a0bc
 8005d3c:	08029ff8 	.word	0x08029ff8
 8005d40:	200005c4 	.word	0x200005c4
 8005d44:	0802a0c4 	.word	0x0802a0c4
 8005d48:	0808006c 	.word	0x0808006c
 8005d4c:	200005dc 	.word	0x200005dc
 8005d50:	0802a120 	.word	0x0802a120
 8005d54:	0802a178 	.word	0x0802a178

08005d58 <StartProg>:

void StartProg(){
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8005d5c:	2064      	movs	r0, #100	@ 0x64
 8005d5e:	f00d fcbb 	bl	80136d8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005d62:	4b15      	ldr	r3, [pc, #84]	@ (8005db8 <StartProg+0x60>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	2101      	movs	r1, #1
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f00e ff3c 	bl	8014be6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8005d6e:	2064      	movs	r0, #100	@ 0x64
 8005d70:	f00d fcb2 	bl	80136d8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005d74:	4b10      	ldr	r3, [pc, #64]	@ (8005db8 <StartProg+0x60>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	2102      	movs	r1, #2
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f00e ff33 	bl	8014be6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8005d80:	23fa      	movs	r3, #250	@ 0xfa
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	0018      	movs	r0, r3
 8005d86:	f00d fca7 	bl	80136d8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <StartProg+0x60>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	2101      	movs	r1, #1
 8005d90:	0018      	movs	r0, r3
 8005d92:	f00e ff28 	bl	8014be6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8005d96:	23fa      	movs	r3, #250	@ 0xfa
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f00d fc9c 	bl	80136d8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8005da0:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <StartProg+0x60>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	2102      	movs	r1, #2
 8005da6:	0018      	movs	r0, r3
 8005da8:	f00e ff1d 	bl	8014be6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8005dac:	2028      	movs	r0, #40	@ 0x28
 8005dae:	f00d fc93 	bl	80136d8 <HAL_Delay>
}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	50001c00 	.word	0x50001c00

08005dbc <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dbe:	b0d9      	sub	sp, #356	@ 0x164
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	0008      	movs	r0, r1
 8005dc6:	0011      	movs	r1, r2
 8005dc8:	4ba4      	ldr	r3, [pc, #656]	@ (800605c <ParseBuffer+0x2a0>)
 8005dca:	24b0      	movs	r4, #176	@ 0xb0
 8005dcc:	0064      	lsls	r4, r4, #1
 8005dce:	191b      	adds	r3, r3, r4
 8005dd0:	19db      	adds	r3, r3, r7
 8005dd2:	1c02      	adds	r2, r0, #0
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	4ba2      	ldr	r3, [pc, #648]	@ (8006060 <ParseBuffer+0x2a4>)
 8005dd8:	191b      	adds	r3, r3, r4
 8005dda:	19db      	adds	r3, r3, r7
 8005ddc:	1c0a      	adds	r2, r1, #0
 8005dde:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8005de0:	2380      	movs	r3, #128	@ 0x80
 8005de2:	005a      	lsls	r2, r3, #1
 8005de4:	2348      	movs	r3, #72	@ 0x48
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2100      	movs	r1, #0
 8005dea:	0018      	movs	r0, r3
 8005dec:	f01f f97c 	bl	80250e8 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8005df0:	2360      	movs	r3, #96	@ 0x60
 8005df2:	33ff      	adds	r3, #255	@ 0xff
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	2203      	movs	r2, #3
 8005df8:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8005dfa:	23ae      	movs	r3, #174	@ 0xae
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	2200      	movs	r2, #0
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	e013      	b.n	8005e2e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8005e06:	20ae      	movs	r0, #174	@ 0xae
 8005e08:	0040      	lsls	r0, r0, #1
 8005e0a:	183b      	adds	r3, r7, r0
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	18d2      	adds	r2, r2, r3
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	7811      	ldrb	r1, [r2, #0]
 8005e18:	4a92      	ldr	r2, [pc, #584]	@ (8006064 <ParseBuffer+0x2a8>)
 8005e1a:	24b0      	movs	r4, #176	@ 0xb0
 8005e1c:	0064      	lsls	r4, r4, #1
 8005e1e:	1912      	adds	r2, r2, r4
 8005e20:	19d2      	adds	r2, r2, r7
 8005e22:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8005e24:	183b      	adds	r3, r7, r0
 8005e26:	881a      	ldrh	r2, [r3, #0]
 8005e28:	183b      	adds	r3, r7, r0
 8005e2a:	3201      	adds	r2, #1
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	23ae      	movs	r3, #174	@ 0xae
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	18fa      	adds	r2, r7, r3
 8005e34:	4b89      	ldr	r3, [pc, #548]	@ (800605c <ParseBuffer+0x2a0>)
 8005e36:	21b0      	movs	r1, #176	@ 0xb0
 8005e38:	0049      	lsls	r1, r1, #1
 8005e3a:	185b      	adds	r3, r3, r1
 8005e3c:	19db      	adds	r3, r3, r7
 8005e3e:	8812      	ldrh	r2, [r2, #0]
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d3df      	bcc.n	8005e06 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8005e46:	4b85      	ldr	r3, [pc, #532]	@ (800605c <ParseBuffer+0x2a0>)
 8005e48:	185b      	adds	r3, r3, r1
 8005e4a:	19db      	adds	r3, r3, r7
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	4a85      	ldr	r2, [pc, #532]	@ (8006064 <ParseBuffer+0x2a8>)
 8005e50:	1852      	adds	r2, r2, r1
 8005e52:	19d2      	adds	r2, r2, r7
 8005e54:	2100      	movs	r1, #0
 8005e56:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8005e58:	f00c ff70 	bl	8012d3c <GetVerboseLevel>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d106      	bne.n	8005e70 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8005e62:	2348      	movs	r3, #72	@ 0x48
 8005e64:	18fa      	adds	r2, r7, r3
 8005e66:	4b80      	ldr	r3, [pc, #512]	@ (8006068 <ParseBuffer+0x2ac>)
 8005e68:	0011      	movs	r1, r2
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f01e ff66 	bl	8024d3c <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	26ac      	movs	r6, #172	@ 0xac
 8005e74:	0076      	lsls	r6, r6, #1
 8005e76:	19ba      	adds	r2, r7, r6
 8005e78:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8005e7a:	4b7c      	ldr	r3, [pc, #496]	@ (800606c <ParseBuffer+0x2b0>)
 8005e7c:	25b0      	movs	r5, #176	@ 0xb0
 8005e7e:	006d      	lsls	r5, r5, #1
 8005e80:	195b      	adds	r3, r3, r5
 8005e82:	19db      	adds	r3, r3, r7
 8005e84:	4a7a      	ldr	r2, [pc, #488]	@ (8006070 <ParseBuffer+0x2b4>)
 8005e86:	8811      	ldrh	r1, [r2, #0]
 8005e88:	8019      	strh	r1, [r3, #0]
 8005e8a:	7892      	ldrb	r2, [r2, #2]
 8005e8c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8005e8e:	4b79      	ldr	r3, [pc, #484]	@ (8006074 <ParseBuffer+0x2b8>)
 8005e90:	195b      	adds	r3, r3, r5
 8005e92:	19db      	adds	r3, r3, r7
 8005e94:	4a78      	ldr	r2, [pc, #480]	@ (8006078 <ParseBuffer+0x2bc>)
 8005e96:	6811      	ldr	r1, [r2, #0]
 8005e98:	6019      	str	r1, [r3, #0]
 8005e9a:	8892      	ldrh	r2, [r2, #4]
 8005e9c:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8005e9e:	4b77      	ldr	r3, [pc, #476]	@ (800607c <ParseBuffer+0x2c0>)
 8005ea0:	195b      	adds	r3, r3, r5
 8005ea2:	19db      	adds	r3, r3, r7
 8005ea4:	4a76      	ldr	r2, [pc, #472]	@ (8006080 <ParseBuffer+0x2c4>)
 8005ea6:	6811      	ldr	r1, [r2, #0]
 8005ea8:	6019      	str	r1, [r3, #0]
 8005eaa:	7912      	ldrb	r2, [r2, #4]
 8005eac:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8005eae:	4b75      	ldr	r3, [pc, #468]	@ (8006084 <ParseBuffer+0x2c8>)
 8005eb0:	195b      	adds	r3, r3, r5
 8005eb2:	19db      	adds	r3, r3, r7
 8005eb4:	4a74      	ldr	r2, [pc, #464]	@ (8006088 <ParseBuffer+0x2cc>)
 8005eb6:	6811      	ldr	r1, [r2, #0]
 8005eb8:	6019      	str	r1, [r3, #0]
 8005eba:	8892      	ldrh	r2, [r2, #4]
 8005ebc:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8005ebe:	4b73      	ldr	r3, [pc, #460]	@ (800608c <ParseBuffer+0x2d0>)
 8005ec0:	195b      	adds	r3, r3, r5
 8005ec2:	19db      	adds	r3, r3, r7
 8005ec4:	223e      	movs	r2, #62	@ 0x3e
 8005ec6:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8005ec8:	4b71      	ldr	r3, [pc, #452]	@ (8006090 <ParseBuffer+0x2d4>)
 8005eca:	195b      	adds	r3, r3, r5
 8005ecc:	19db      	adds	r3, r3, r7
 8005ece:	4a71      	ldr	r2, [pc, #452]	@ (8006094 <ParseBuffer+0x2d8>)
 8005ed0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ed2:	c313      	stmia	r3!, {r0, r1, r4}
 8005ed4:	8811      	ldrh	r1, [r2, #0]
 8005ed6:	8019      	strh	r1, [r3, #0]
 8005ed8:	7892      	ldrb	r2, [r2, #2]
 8005eda:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8005edc:	4b6e      	ldr	r3, [pc, #440]	@ (8006098 <ParseBuffer+0x2dc>)
 8005ede:	195b      	adds	r3, r3, r5
 8005ee0:	19db      	adds	r3, r3, r7
 8005ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800609c <ParseBuffer+0x2e0>)
 8005ee4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ee6:	c313      	stmia	r3!, {r0, r1, r4}
 8005ee8:	8812      	ldrh	r2, [r2, #0]
 8005eea:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8005eec:	4b5c      	ldr	r3, [pc, #368]	@ (8006060 <ParseBuffer+0x2a4>)
 8005eee:	195b      	adds	r3, r3, r5
 8005ef0:	19db      	adds	r3, r3, r7
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8005ef8:	2344      	movs	r3, #68	@ 0x44
 8005efa:	18fa      	adds	r2, r7, r3
 8005efc:	2348      	movs	r3, #72	@ 0x48
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	0011      	movs	r1, r2
 8005f02:	0018      	movs	r0, r3
 8005f04:	f01f f92b 	bl	802515e <strstr>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	19ba      	adds	r2, r7, r6
 8005f0c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8005f0e:	4b54      	ldr	r3, [pc, #336]	@ (8006060 <ParseBuffer+0x2a4>)
 8005f10:	22b0      	movs	r2, #176	@ 0xb0
 8005f12:	0052      	lsls	r2, r2, #1
 8005f14:	189b      	adds	r3, r3, r2
 8005f16:	19db      	adds	r3, r3, r7
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d10c      	bne.n	8005f38 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8005f1e:	232c      	movs	r3, #44	@ 0x2c
 8005f20:	18fa      	adds	r2, r7, r3
 8005f22:	2348      	movs	r3, #72	@ 0x48
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	0011      	movs	r1, r2
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f01f f918 	bl	802515e <strstr>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	22ac      	movs	r2, #172	@ 0xac
 8005f32:	0052      	lsls	r2, r2, #1
 8005f34:	18ba      	adds	r2, r7, r2
 8005f36:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8005f38:	4b49      	ldr	r3, [pc, #292]	@ (8006060 <ParseBuffer+0x2a4>)
 8005f3a:	22b0      	movs	r2, #176	@ 0xb0
 8005f3c:	0052      	lsls	r2, r2, #1
 8005f3e:	189b      	adds	r3, r3, r2
 8005f40:	19db      	adds	r3, r3, r7
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d10c      	bne.n	8005f62 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8005f48:	2328      	movs	r3, #40	@ 0x28
 8005f4a:	18fa      	adds	r2, r7, r3
 8005f4c:	2348      	movs	r3, #72	@ 0x48
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	0011      	movs	r1, r2
 8005f52:	0018      	movs	r0, r3
 8005f54:	f01f f903 	bl	802515e <strstr>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	22ac      	movs	r2, #172	@ 0xac
 8005f5c:	0052      	lsls	r2, r2, #1
 8005f5e:	18ba      	adds	r2, r7, r2
 8005f60:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8005f62:	4b3f      	ldr	r3, [pc, #252]	@ (8006060 <ParseBuffer+0x2a4>)
 8005f64:	22b0      	movs	r2, #176	@ 0xb0
 8005f66:	0052      	lsls	r2, r2, #1
 8005f68:	189b      	adds	r3, r3, r2
 8005f6a:	19db      	adds	r3, r3, r7
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d10c      	bne.n	8005f8c <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 8005f72:	2308      	movs	r3, #8
 8005f74:	18fa      	adds	r2, r7, r3
 8005f76:	2348      	movs	r3, #72	@ 0x48
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	0011      	movs	r1, r2
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f01f f8ee 	bl	802515e <strstr>
 8005f82:	0003      	movs	r3, r0
 8005f84:	22ac      	movs	r2, #172	@ 0xac
 8005f86:	0052      	lsls	r2, r2, #1
 8005f88:	18ba      	adds	r2, r7, r2
 8005f8a:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8005f8c:	233c      	movs	r3, #60	@ 0x3c
 8005f8e:	18fa      	adds	r2, r7, r3
 8005f90:	2448      	movs	r4, #72	@ 0x48
 8005f92:	193b      	adds	r3, r7, r4
 8005f94:	0011      	movs	r1, r2
 8005f96:	0018      	movs	r0, r3
 8005f98:	f01f f8e1 	bl	802515e <strstr>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	22aa      	movs	r2, #170	@ 0xaa
 8005fa0:	0052      	lsls	r2, r2, #1
 8005fa2:	18ba      	adds	r2, r7, r2
 8005fa4:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8005fa6:	2318      	movs	r3, #24
 8005fa8:	18fa      	adds	r2, r7, r3
 8005faa:	193b      	adds	r3, r7, r4
 8005fac:	0011      	movs	r1, r2
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f01f f8d5 	bl	802515e <strstr>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	22a8      	movs	r2, #168	@ 0xa8
 8005fb8:	0052      	lsls	r2, r2, #1
 8005fba:	18ba      	adds	r2, r7, r2
 8005fbc:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8005fbe:	4a38      	ldr	r2, [pc, #224]	@ (80060a0 <ParseBuffer+0x2e4>)
 8005fc0:	193b      	adds	r3, r7, r4
 8005fc2:	0011      	movs	r1, r2
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f01f f8ca 	bl	802515e <strstr>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	22a6      	movs	r2, #166	@ 0xa6
 8005fce:	0052      	lsls	r2, r2, #1
 8005fd0:	18ba      	adds	r2, r7, r2
 8005fd2:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8005fd4:	2334      	movs	r3, #52	@ 0x34
 8005fd6:	18fa      	adds	r2, r7, r3
 8005fd8:	193b      	adds	r3, r7, r4
 8005fda:	0011      	movs	r1, r2
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f01f f8be 	bl	802515e <strstr>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	22a4      	movs	r2, #164	@ 0xa4
 8005fe6:	0052      	lsls	r2, r2, #1
 8005fe8:	18ba      	adds	r2, r7, r2
 8005fea:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8005fec:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <ParseBuffer+0x2a0>)
 8005fee:	21b0      	movs	r1, #176	@ 0xb0
 8005ff0:	0049      	lsls	r1, r1, #1
 8005ff2:	185b      	adds	r3, r3, r1
 8005ff4:	19db      	adds	r3, r3, r7
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d800      	bhi.n	8005ffe <ParseBuffer+0x242>
 8005ffc:	e0bf      	b.n	800617e <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8005ffe:	22ac      	movs	r2, #172	@ 0xac
 8006000:	0052      	lsls	r2, r2, #1
 8006002:	18bb      	adds	r3, r7, r2
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d052      	beq.n	80060b0 <ParseBuffer+0x2f4>
 800600a:	18bb      	adds	r3, r7, r2
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b4f      	cmp	r3, #79	@ 0x4f
 8006012:	d14d      	bne.n	80060b0 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8006014:	2360      	movs	r3, #96	@ 0x60
 8006016:	33ff      	adds	r3, #255	@ 0xff
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800601e:	4b21      	ldr	r3, [pc, #132]	@ (80060a4 <ParseBuffer+0x2e8>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b12      	cmp	r3, #18
 8006024:	d144      	bne.n	80060b0 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <ParseBuffer+0x2a0>)
 8006028:	185b      	adds	r3, r3, r1
 800602a:	19db      	adds	r3, r3, r7
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006030:	d10b      	bne.n	800604a <ParseBuffer+0x28e>
 8006032:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <ParseBuffer+0x2a8>)
 8006034:	185b      	adds	r3, r3, r1
 8006036:	19db      	adds	r3, r3, r7
 8006038:	2221      	movs	r2, #33	@ 0x21
 800603a:	5c9b      	ldrb	r3, [r3, r2]
 800603c:	2b32      	cmp	r3, #50	@ 0x32
 800603e:	d104      	bne.n	800604a <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8006040:	193b      	adds	r3, r7, r4
 8006042:	0018      	movs	r0, r3
 8006044:	f003 f8c2 	bl	80091cc <ParseTime>
 8006048:	e032      	b.n	80060b0 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 800604a:	4a17      	ldr	r2, [pc, #92]	@ (80060a8 <ParseBuffer+0x2ec>)
 800604c:	4b17      	ldr	r3, [pc, #92]	@ (80060ac <ParseBuffer+0x2f0>)
 800604e:	0019      	movs	r1, r3
 8006050:	2001      	movs	r0, #1
 8006052:	f00c fdf9 	bl	8012c48 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8006056:	2306      	movs	r3, #6
 8006058:	e095      	b.n	8006186 <ParseBuffer+0x3ca>
 800605a:	46c0      	nop			@ (mov r8, r8)
 800605c:	fffffea2 	.word	0xfffffea2
 8006060:	fffffea1 	.word	0xfffffea1
 8006064:	fffffee8 	.word	0xfffffee8
 8006068:	0802a17c 	.word	0x0802a17c
 800606c:	fffffee4 	.word	0xfffffee4
 8006070:	0802a1a8 	.word	0x0802a1a8
 8006074:	fffffedc 	.word	0xfffffedc
 8006078:	0802a1ac 	.word	0x0802a1ac
 800607c:	fffffed4 	.word	0xfffffed4
 8006080:	0802a1b4 	.word	0x0802a1b4
 8006084:	fffffecc 	.word	0xfffffecc
 8006088:	0802a1bc 	.word	0x0802a1bc
 800608c:	fffffec8 	.word	0xfffffec8
 8006090:	fffffeb8 	.word	0xfffffeb8
 8006094:	0802a1c4 	.word	0x0802a1c4
 8006098:	fffffea8 	.word	0xfffffea8
 800609c:	0802a1d4 	.word	0x0802a1d4
 80060a0:	0802d160 	.word	0x0802d160
 80060a4:	2000068e 	.word	0x2000068e
 80060a8:	0802a194 	.word	0x0802a194
 80060ac:	080295ec 	.word	0x080295ec
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80060b0:	22ac      	movs	r2, #172	@ 0xac
 80060b2:	0052      	lsls	r2, r2, #1
 80060b4:	18bb      	adds	r3, r7, r2
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <ParseBuffer+0x314>
 80060bc:	18bb      	adds	r3, r7, r2
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b72      	cmp	r3, #114	@ 0x72
 80060c4:	d104      	bne.n	80060d0 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 80060c6:	2360      	movs	r3, #96	@ 0x60
 80060c8:	33ff      	adds	r3, #255	@ 0xff
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2202      	movs	r2, #2
 80060ce:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80060d0:	22ac      	movs	r2, #172	@ 0xac
 80060d2:	0052      	lsls	r2, r2, #1
 80060d4:	18bb      	adds	r3, r7, r2
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <ParseBuffer+0x334>
 80060dc:	18bb      	adds	r3, r7, r2
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80060e4:	d104      	bne.n	80060f0 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 80060e6:	2360      	movs	r3, #96	@ 0x60
 80060e8:	33ff      	adds	r3, #255	@ 0xff
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2205      	movs	r2, #5
 80060ee:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80060f0:	22ac      	movs	r2, #172	@ 0xac
 80060f2:	0052      	lsls	r2, r2, #1
 80060f4:	18bb      	adds	r3, r7, r2
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <ParseBuffer+0x354>
 80060fc:	18bb      	adds	r3, r7, r2
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b2b      	cmp	r3, #43	@ 0x2b
 8006104:	d104      	bne.n	8006110 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 8006106:	2360      	movs	r3, #96	@ 0x60
 8006108:	33ff      	adds	r3, #255	@ 0xff
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	220b      	movs	r2, #11
 800610e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8006110:	22aa      	movs	r2, #170	@ 0xaa
 8006112:	0052      	lsls	r2, r2, #1
 8006114:	18bb      	adds	r3, r7, r2
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <ParseBuffer+0x36a>
 800611c:	18bb      	adds	r3, r7, r2
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b45      	cmp	r3, #69	@ 0x45
 8006124:	d00a      	beq.n	800613c <ParseBuffer+0x380>
 8006126:	22a4      	movs	r2, #164	@ 0xa4
 8006128:	0052      	lsls	r2, r2, #1
 800612a:	18bb      	adds	r3, r7, r2
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <ParseBuffer+0x38a>
 8006132:	18bb      	adds	r3, r7, r2
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b46      	cmp	r3, #70	@ 0x46
 800613a:	d104      	bne.n	8006146 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 800613c:	2360      	movs	r3, #96	@ 0x60
 800613e:	33ff      	adds	r3, #255	@ 0xff
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006146:	22a8      	movs	r2, #168	@ 0xa8
 8006148:	0052      	lsls	r2, r2, #1
 800614a:	18bb      	adds	r3, r7, r2
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <ParseBuffer+0x3a6>
 8006152:	18bb      	adds	r3, r7, r2
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b57      	cmp	r3, #87	@ 0x57
 800615a:	d102      	bne.n	8006162 <ParseBuffer+0x3a6>
      ConnectionMade = true;
 800615c:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <ParseBuffer+0x3d4>)
 800615e:	2201      	movs	r2, #1
 8006160:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 8006162:	22a6      	movs	r2, #166	@ 0xa6
 8006164:	0052      	lsls	r2, r2, #1
 8006166:	18bb      	adds	r3, r7, r2
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <ParseBuffer+0x3c2>
 800616e:	18bb      	adds	r3, r7, r2
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b32      	cmp	r3, #50	@ 0x32
 8006176:	d102      	bne.n	800617e <ParseBuffer+0x3c2>
      beurs = true;
 8006178:	4b06      	ldr	r3, [pc, #24]	@ (8006194 <ParseBuffer+0x3d8>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800617e:	2360      	movs	r3, #96	@ 0x60
 8006180:	33ff      	adds	r3, #255	@ 0xff
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	781b      	ldrb	r3, [r3, #0]

}
 8006186:	0018      	movs	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	b059      	add	sp, #356	@ 0x164
 800618c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800618e:	46c0      	nop			@ (mov r8, r8)
 8006190:	200005bc 	.word	0x200005bc
 8006194:	200005be 	.word	0x200005be

08006198 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800619e:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <PollAwake+0x34>)
 80061a0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f7f9 ffe1 	bl	800016c <strlen>
 80061aa:	0003      	movs	r3, r0
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0011      	movs	r1, r2
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7fe fc86 	bl	8004ac4 <ESP_Send>
 80061b8:	1e03      	subs	r3, r0, #0
 80061ba:	d001      	beq.n	80061c0 <PollAwake+0x28>
    return true;
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <PollAwake+0x2a>
  }
  else{
    return false;
 80061c0:	2300      	movs	r3, #0
  }
}
 80061c2:	0018      	movs	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b002      	add	sp, #8
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	0802a1e4 	.word	0x0802a1e4

080061d0 <RFPower>:

bool RFPower(){
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80061d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <RFPower+0x34>)
 80061d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	0018      	movs	r0, r3
 80061de:	f7f9 ffc5 	bl	800016c <strlen>
 80061e2:	0003      	movs	r3, r0
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fe fc6a 	bl	8004ac4 <ESP_Send>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d001      	beq.n	80061f8 <RFPower+0x28>
    return true;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <RFPower+0x2a>
  }
  else{
    return false;
 80061f8:	2300      	movs	r3, #0
  }
}
 80061fa:	0018      	movs	r0, r3
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b002      	add	sp, #8
 8006200:	bd80      	pop	{r7, pc}
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	0802a1ec 	.word	0x0802a1ec

08006208 <CheckRFPower>:

bool CheckRFPower(){
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800620e:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <CheckRFPower+0x34>)
 8006210:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	0018      	movs	r0, r3
 8006216:	f7f9 ffa9 	bl	800016c <strlen>
 800621a:	0003      	movs	r3, r0
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0011      	movs	r1, r2
 8006222:	0018      	movs	r0, r3
 8006224:	f7fe fc4e 	bl	8004ac4 <ESP_Send>
 8006228:	1e03      	subs	r3, r0, #0
 800622a:	d001      	beq.n	8006230 <CheckRFPower+0x28>
    return true;
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8006230:	2300      	movs	r3, #0
  }
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b002      	add	sp, #8
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	0802a1fc 	.word	0x0802a1fc

08006240 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006246:	4b0b      	ldr	r3, [pc, #44]	@ (8006274 <ATRestore+0x34>)
 8006248:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	0018      	movs	r0, r3
 800624e:	f7f9 ff8d 	bl	800016c <strlen>
 8006252:	0003      	movs	r3, r0
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	0011      	movs	r1, r2
 800625a:	0018      	movs	r0, r3
 800625c:	f7fe fc32 	bl	8004ac4 <ESP_Send>
 8006260:	1e03      	subs	r3, r0, #0
 8006262:	d001      	beq.n	8006268 <ATRestore+0x28>
    return true;
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <ATRestore+0x2a>
  }
  else{
    return false;
 8006268:	2300      	movs	r3, #0
  }
}
 800626a:	0018      	movs	r0, r3
 800626c:	46bd      	mov	sp, r7
 800626e:	b002      	add	sp, #8
 8006270:	bd80      	pop	{r7, pc}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	0802a20c 	.word	0x0802a20c

08006278 <CWINIT>:

bool CWINIT(){
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800627e:	4b0b      	ldr	r3, [pc, #44]	@ (80062ac <CWINIT+0x34>)
 8006280:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	0018      	movs	r0, r3
 8006286:	f7f9 ff71 	bl	800016c <strlen>
 800628a:	0003      	movs	r3, r0
 800628c:	b29a      	uxth	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0011      	movs	r1, r2
 8006292:	0018      	movs	r0, r3
 8006294:	f7fe fc16 	bl	8004ac4 <ESP_Send>
 8006298:	1e03      	subs	r3, r0, #0
 800629a:	d001      	beq.n	80062a0 <CWINIT+0x28>
    return true;
 800629c:	2301      	movs	r3, #1
 800629e:	e000      	b.n	80062a2 <CWINIT+0x2a>
  }
  else{
    return false;
 80062a0:	2300      	movs	r3, #0
  }
}
 80062a2:	0018      	movs	r0, r3
 80062a4:	46bd      	mov	sp, r7
 80062a6:	b002      	add	sp, #8
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	0802a21c 	.word	0x0802a21c

080062b0 <CWMODE1>:

bool CWMODE1(){
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80062b6:	4b0b      	ldr	r3, [pc, #44]	@ (80062e4 <CWMODE1+0x34>)
 80062b8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0018      	movs	r0, r3
 80062be:	f7f9 ff55 	bl	800016c <strlen>
 80062c2:	0003      	movs	r3, r0
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0011      	movs	r1, r2
 80062ca:	0018      	movs	r0, r3
 80062cc:	f7fe fbfa 	bl	8004ac4 <ESP_Send>
 80062d0:	1e03      	subs	r3, r0, #0
 80062d2:	d001      	beq.n	80062d8 <CWMODE1+0x28>
    return true;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <CWMODE1+0x2a>
  }
  else{
    return false;
 80062d8:	2300      	movs	r3, #0
  }
}
 80062da:	0018      	movs	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	b002      	add	sp, #8
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			@ (mov r8, r8)
 80062e4:	0802a22c 	.word	0x0802a22c

080062e8 <CWMODE2>:

bool CWMODE2(){
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80062ee:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <CWMODE2+0x34>)
 80062f0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0018      	movs	r0, r3
 80062f6:	f7f9 ff39 	bl	800016c <strlen>
 80062fa:	0003      	movs	r3, r0
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0011      	movs	r1, r2
 8006302:	0018      	movs	r0, r3
 8006304:	f7fe fbde 	bl	8004ac4 <ESP_Send>
 8006308:	1e03      	subs	r3, r0, #0
 800630a:	d001      	beq.n	8006310 <CWMODE2+0x28>
    return true;
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <CWMODE2+0x2a>
  }
  else{
    return false;
 8006310:	2300      	movs	r3, #0
  }
}
 8006312:	0018      	movs	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	b002      	add	sp, #8
 8006318:	bd80      	pop	{r7, pc}
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	0802a23c 	.word	0x0802a23c

08006320 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006326:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <CWAUTOCONN+0x34>)
 8006328:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	0018      	movs	r0, r3
 800632e:	f7f9 ff1d 	bl	800016c <strlen>
 8006332:	0003      	movs	r3, r0
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0011      	movs	r1, r2
 800633a:	0018      	movs	r0, r3
 800633c:	f7fe fbc2 	bl	8004ac4 <ESP_Send>
 8006340:	1e03      	subs	r3, r0, #0
 8006342:	d001      	beq.n	8006348 <CWAUTOCONN+0x28>
    return true;
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006348:	2300      	movs	r3, #0
  }
}
 800634a:	0018      	movs	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	b002      	add	sp, #8
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			@ (mov r8, r8)
 8006354:	0802a24c 	.word	0x0802a24c

08006358 <CWJAP>:

bool CWJAP(){
 8006358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635a:	46c6      	mov	lr, r8
 800635c:	b500      	push	{lr}
 800635e:	b0a2      	sub	sp, #136	@ 0x88
 8006360:	af00      	add	r7, sp, #0
 8006362:	466b      	mov	r3, sp
 8006364:	4698      	mov	r8, r3
  beursTest = true;
 8006366:	4b39      	ldr	r3, [pc, #228]	@ (800644c <CWJAP+0xf4>)
 8006368:	2201      	movs	r2, #1
 800636a:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 800636c:	2618      	movs	r6, #24
 800636e:	19bb      	adds	r3, r7, r6
 8006370:	2264      	movs	r2, #100	@ 0x64
 8006372:	2100      	movs	r1, #0
 8006374:	0018      	movs	r0, r3
 8006376:	f01e feb7 	bl	80250e8 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800637a:	4b35      	ldr	r3, [pc, #212]	@ (8006450 <CWJAP+0xf8>)
 800637c:	4a35      	ldr	r2, [pc, #212]	@ (8006454 <CWJAP+0xfc>)
 800637e:	4936      	ldr	r1, [pc, #216]	@ (8006458 <CWJAP+0x100>)
 8006380:	19b8      	adds	r0, r7, r6
 8006382:	f01e fd4b 	bl	8024e1c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006386:	19bb      	adds	r3, r7, r6
 8006388:	0018      	movs	r0, r3
 800638a:	f7f9 feef 	bl	800016c <strlen>
 800638e:	0002      	movs	r2, r0
 8006390:	216f      	movs	r1, #111	@ 0x6f
 8006392:	0030      	movs	r0, r6
 8006394:	180b      	adds	r3, r1, r0
 8006396:	19db      	adds	r3, r3, r7
 8006398:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800639a:	180b      	adds	r3, r1, r0
 800639c:	19db      	adds	r3, r3, r7
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	3301      	adds	r3, #1
 80063a2:	1e5a      	subs	r2, r3, #1
 80063a4:	2180      	movs	r1, #128	@ 0x80
 80063a6:	1879      	adds	r1, r7, r1
 80063a8:	600a      	str	r2, [r1, #0]
 80063aa:	001a      	movs	r2, r3
 80063ac:	60ba      	str	r2, [r7, #8]
 80063ae:	2200      	movs	r2, #0
 80063b0:	60fa      	str	r2, [r7, #12]
 80063b2:	68b8      	ldr	r0, [r7, #8]
 80063b4:	68f9      	ldr	r1, [r7, #12]
 80063b6:	0002      	movs	r2, r0
 80063b8:	0f52      	lsrs	r2, r2, #29
 80063ba:	000e      	movs	r6, r1
 80063bc:	00f6      	lsls	r6, r6, #3
 80063be:	617e      	str	r6, [r7, #20]
 80063c0:	697e      	ldr	r6, [r7, #20]
 80063c2:	4316      	orrs	r6, r2
 80063c4:	617e      	str	r6, [r7, #20]
 80063c6:	0002      	movs	r2, r0
 80063c8:	00d2      	lsls	r2, r2, #3
 80063ca:	613a      	str	r2, [r7, #16]
 80063cc:	001a      	movs	r2, r3
 80063ce:	603a      	str	r2, [r7, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	6838      	ldr	r0, [r7, #0]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	0002      	movs	r2, r0
 80063da:	0f52      	lsrs	r2, r2, #29
 80063dc:	000e      	movs	r6, r1
 80063de:	00f5      	lsls	r5, r6, #3
 80063e0:	4315      	orrs	r5, r2
 80063e2:	0002      	movs	r2, r0
 80063e4:	00d4      	lsls	r4, r2, #3
 80063e6:	3307      	adds	r3, #7
 80063e8:	08db      	lsrs	r3, r3, #3
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	466a      	mov	r2, sp
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	469d      	mov	sp, r3
 80063f2:	466b      	mov	r3, sp
 80063f4:	3300      	adds	r3, #0
 80063f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80063f8:	246f      	movs	r4, #111	@ 0x6f
 80063fa:	2518      	movs	r5, #24
 80063fc:	1963      	adds	r3, r4, r5
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	001a      	movs	r2, r3
 8006406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006408:	2100      	movs	r1, #0
 800640a:	0018      	movs	r0, r3
 800640c:	f01e fe6c 	bl	80250e8 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8006410:	1963      	adds	r3, r4, r5
 8006412:	19db      	adds	r3, r3, r7
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	1979      	adds	r1, r7, r5
 8006418:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800641a:	0018      	movs	r0, r3
 800641c:	f01e fe8b 	bl	8025136 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8006420:	1963      	adds	r3, r4, r5
 8006422:	19db      	adds	r3, r3, r7
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b29a      	uxth	r2, r3
 8006428:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f7fe fb49 	bl	8004ac4 <ESP_Send>
 8006432:	1e03      	subs	r3, r0, #0
 8006434:	d001      	beq.n	800643a <CWJAP+0xe2>
    return true;
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <CWJAP+0xe4>
  }
  else{
    return false;
 800643a:	2300      	movs	r3, #0
 800643c:	46c5      	mov	sp, r8
  }
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b022      	add	sp, #136	@ 0x88
 8006444:	bc80      	pop	{r7}
 8006446:	46b8      	mov	r8, r7
 8006448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	200005bd 	.word	0x200005bd
 8006450:	0802d16c 	.word	0x0802d16c
 8006454:	0802d160 	.word	0x0802d160
 8006458:	0802a260 	.word	0x0802a260

0800645c <CWMODE3>:

bool CWMODE3(){
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006462:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <CWMODE3+0x34>)
 8006464:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	0018      	movs	r0, r3
 800646a:	f7f9 fe7f 	bl	800016c <strlen>
 800646e:	0003      	movs	r3, r0
 8006470:	b29a      	uxth	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	0011      	movs	r1, r2
 8006476:	0018      	movs	r0, r3
 8006478:	f7fe fb24 	bl	8004ac4 <ESP_Send>
 800647c:	1e03      	subs	r3, r0, #0
 800647e:	d001      	beq.n	8006484 <CWMODE3+0x28>
    return true;
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <CWMODE3+0x2a>
  }
  else{
    return false;
 8006484:	2300      	movs	r3, #0
  }
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b002      	add	sp, #8
 800648c:	bd80      	pop	{r7, pc}
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	0802a278 	.word	0x0802a278

08006494 <CWSTATE>:

bool CWSTATE(){
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800649a:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <CWSTATE+0x34>)
 800649c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7f9 fe63 	bl	800016c <strlen>
 80064a6:	0003      	movs	r3, r0
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0011      	movs	r1, r2
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7fe fb08 	bl	8004ac4 <ESP_Send>
 80064b4:	1e03      	subs	r3, r0, #0
 80064b6:	d001      	beq.n	80064bc <CWSTATE+0x28>
    return true;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <CWSTATE+0x2a>
  }
  else{
    return false;
 80064bc:	2300      	movs	r3, #0
  }
}
 80064be:	0018      	movs	r0, r3
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b002      	add	sp, #8
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	46c0      	nop			@ (mov r8, r8)
 80064c8:	0802a288 	.word	0x0802a288

080064cc <CWSAP>:

bool CWSAP(){
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80064d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <CWSAP+0x34>)
 80064d4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	0018      	movs	r0, r3
 80064da:	f7f9 fe47 	bl	800016c <strlen>
 80064de:	0003      	movs	r3, r0
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7fe faec 	bl	8004ac4 <ESP_Send>
 80064ec:	1e03      	subs	r3, r0, #0
 80064ee:	d001      	beq.n	80064f4 <CWSAP+0x28>
    return true;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <CWSAP+0x2a>
  }
  else{
    return false;
 80064f4:	2300      	movs	r3, #0
  }
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b002      	add	sp, #8
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	0802a298 	.word	0x0802a298

08006504 <CIPMUX>:

bool CIPMUX(){
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800650a:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <CIPMUX+0x34>)
 800650c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0018      	movs	r0, r3
 8006512:	f7f9 fe2b 	bl	800016c <strlen>
 8006516:	0003      	movs	r3, r0
 8006518:	b29a      	uxth	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	0011      	movs	r1, r2
 800651e:	0018      	movs	r0, r3
 8006520:	f7fe fad0 	bl	8004ac4 <ESP_Send>
 8006524:	1e03      	subs	r3, r0, #0
 8006526:	d001      	beq.n	800652c <CIPMUX+0x28>
    return true;
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <CIPMUX+0x2a>
  }
  else{
    return false;
 800652c:	2300      	movs	r3, #0
  }
}
 800652e:	0018      	movs	r0, r3
 8006530:	46bd      	mov	sp, r7
 8006532:	b002      	add	sp, #8
 8006534:	bd80      	pop	{r7, pc}
 8006536:	46c0      	nop			@ (mov r8, r8)
 8006538:	0802a2bc 	.word	0x0802a2bc

0800653c <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006542:	4b0b      	ldr	r3, [pc, #44]	@ (8006570 <WEBSERVER+0x34>)
 8006544:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0018      	movs	r0, r3
 800654a:	f7f9 fe0f 	bl	800016c <strlen>
 800654e:	0003      	movs	r3, r0
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	0011      	movs	r1, r2
 8006556:	0018      	movs	r0, r3
 8006558:	f7fe fab4 	bl	8004ac4 <ESP_Send>
 800655c:	1e03      	subs	r3, r0, #0
 800655e:	d001      	beq.n	8006564 <WEBSERVER+0x28>
    return true;
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006564:	2300      	movs	r3, #0
  }
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	0802a2cc 	.word	0x0802a2cc

08006574 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006574:	b590      	push	{r4, r7, lr}
 8006576:	b085      	sub	sp, #20
 8006578:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 800657a:	1cfb      	adds	r3, r7, #3
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8006580:	4b26      	ldr	r3, [pc, #152]	@ (800661c <HTTPCPOST+0xa8>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	1dbc      	adds	r4, r7, #6
 8006586:	1cf9      	adds	r1, r7, #3
 8006588:	2200      	movs	r2, #0
 800658a:	0018      	movs	r0, r3
 800658c:	f7fe fc9e 	bl	8004ecc <CreateMessage>
 8006590:	0003      	movs	r3, r0
 8006592:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8006594:	4b21      	ldr	r3, [pc, #132]	@ (800661c <HTTPCPOST+0xa8>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 800659c:	1dbb      	adds	r3, r7, #6
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006620 <HTTPCPOST+0xac>)
 80065a2:	4920      	ldr	r1, [pc, #128]	@ (8006624 <HTTPCPOST+0xb0>)
 80065a4:	4820      	ldr	r0, [pc, #128]	@ (8006628 <HTTPCPOST+0xb4>)
 80065a6:	f01e fc39 	bl	8024e1c <siprintf>
 80065aa:	e015      	b.n	80065d8 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80065ac:	4b1f      	ldr	r3, [pc, #124]	@ (800662c <HTTPCPOST+0xb8>)
 80065ae:	4820      	ldr	r0, [pc, #128]	@ (8006630 <HTTPCPOST+0xbc>)
 80065b0:	220c      	movs	r2, #12
 80065b2:	0019      	movs	r1, r3
 80065b4:	f004 fe70 	bl	800b298 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80065b8:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <HTTPCPOST+0xb8>)
 80065ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006634 <HTTPCPOST+0xc0>)
 80065bc:	0011      	movs	r1, r2
 80065be:	0018      	movs	r0, r3
 80065c0:	f7fe fc60 	bl	8004e84 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80065c4:	1dbb      	adds	r3, r7, #6
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	4c1a      	ldr	r4, [pc, #104]	@ (8006634 <HTTPCPOST+0xc0>)
 80065ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006638 <HTTPCPOST+0xc4>)
 80065cc:	491b      	ldr	r1, [pc, #108]	@ (800663c <HTTPCPOST+0xc8>)
 80065ce:	4816      	ldr	r0, [pc, #88]	@ (8006628 <HTTPCPOST+0xb4>)
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	0023      	movs	r3, r4
 80065d4:	f01e fc22 	bl	8024e1c <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 80065d8:	4b13      	ldr	r3, [pc, #76]	@ (8006628 <HTTPCPOST+0xb4>)
 80065da:	0018      	movs	r0, r3
 80065dc:	f7f9 fdc6 	bl	800016c <strlen>
 80065e0:	0002      	movs	r2, r0
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	8818      	ldrh	r0, [r3, #0]
 80065ea:	1cfb      	adds	r3, r7, #3
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	4a14      	ldr	r2, [pc, #80]	@ (8006640 <HTTPCPOST+0xcc>)
 80065f0:	4914      	ldr	r1, [pc, #80]	@ (8006644 <HTTPCPOST+0xd0>)
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	0003      	movs	r3, r0
 80065f6:	2003      	movs	r0, #3
 80065f8:	f00c fb26 	bl	8012c48 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 80065fc:	1d3b      	adds	r3, r7, #4
 80065fe:	881a      	ldrh	r2, [r3, #0]
 8006600:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <HTTPCPOST+0xb4>)
 8006602:	0011      	movs	r1, r2
 8006604:	0018      	movs	r0, r3
 8006606:	f7fe fa5d 	bl	8004ac4 <ESP_Send>
 800660a:	1e03      	subs	r3, r0, #0
 800660c:	d001      	beq.n	8006612 <HTTPCPOST+0x9e>
    return true;
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006612:	2300      	movs	r3, #0
  }
}
 8006614:	0018      	movs	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	b003      	add	sp, #12
 800661a:	bd90      	pop	{r4, r7, pc}
 800661c:	200005be 	.word	0x200005be
 8006620:	0802d188 	.word	0x0802d188
 8006624:	0802a2e4 	.word	0x0802a2e4
 8006628:	200005e4 	.word	0x200005e4
 800662c:	20000794 	.word	0x20000794
 8006630:	08080000 	.word	0x08080000
 8006634:	200007a0 	.word	0x200007a0
 8006638:	0802d1c4 	.word	0x0802d1c4
 800663c:	0802a31c 	.word	0x0802a31c
 8006640:	0802a35c 	.word	0x0802a35c
 8006644:	080295c8 	.word	0x080295c8

08006648 <SENDDATA>:

bool SENDDATA(){
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af02      	add	r7, sp, #8
  bool result = false;
 800664e:	1dfb      	adds	r3, r7, #7
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8006654:	4b0e      	ldr	r3, [pc, #56]	@ (8006690 <SENDDATA+0x48>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	1df9      	adds	r1, r7, #7
 800665a:	2201      	movs	r2, #1
 800665c:	0018      	movs	r0, r3
 800665e:	f7fe fc35 	bl	8004ecc <CreateMessage>
 8006662:	0003      	movs	r3, r0
 8006664:	001a      	movs	r2, r3
 8006666:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <SENDDATA+0x4c>)
 8006668:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 800666a:	1dfb      	adds	r3, r7, #7
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	0018      	movs	r0, r3
 8006670:	4b08      	ldr	r3, [pc, #32]	@ (8006694 <SENDDATA+0x4c>)
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	4a08      	ldr	r2, [pc, #32]	@ (8006698 <SENDDATA+0x50>)
 8006676:	4909      	ldr	r1, [pc, #36]	@ (800669c <SENDDATA+0x54>)
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	0003      	movs	r3, r0
 800667c:	2003      	movs	r0, #3
 800667e:	f00c fae3 	bl	8012c48 <CreateLine>
  return result;
 8006682:	1dfb      	adds	r3, r7, #7
 8006684:	781b      	ldrb	r3, [r3, #0]
}
 8006686:	0018      	movs	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	b002      	add	sp, #8
 800668c:	bd80      	pop	{r7, pc}
 800668e:	46c0      	nop			@ (mov r8, r8)
 8006690:	200005be 	.word	0x200005be
 8006694:	200005d8 	.word	0x200005d8
 8006698:	0802a3b8 	.word	0x0802a3b8
 800669c:	080295c8 	.word	0x080295c8

080066a0 <SLEEP>:

bool SLEEP(){
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80066a6:	4b0b      	ldr	r3, [pc, #44]	@ (80066d4 <SLEEP+0x34>)
 80066a8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	0018      	movs	r0, r3
 80066ae:	f7f9 fd5d 	bl	800016c <strlen>
 80066b2:	0003      	movs	r3, r0
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0011      	movs	r1, r2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7fe fa02 	bl	8004ac4 <ESP_Send>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d001      	beq.n	80066c8 <SLEEP+0x28>
    return true;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <SLEEP+0x2a>
  }
  else{
    return false;
 80066c8:	2300      	movs	r3, #0
  }
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b002      	add	sp, #8
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	46c0      	nop			@ (mov r8, r8)
 80066d4:	0802a3f4 	.word	0x0802a3f4

080066d8 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <CIPSNTPCFG+0x3c>)
 80066e0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7f9 fd41 	bl	800016c <strlen>
 80066ea:	0003      	movs	r3, r0
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7fe f9e6 	bl	8004ac4 <ESP_Send>
 80066f8:	1e03      	subs	r3, r0, #0
 80066fa:	d006      	beq.n	800670a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 80066fc:	23fa      	movs	r3, #250	@ 0xfa
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	0018      	movs	r0, r3
 8006702:	f00c ffe9 	bl	80136d8 <HAL_Delay>
    return true;
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800670a:	2300      	movs	r3, #0
  }
}
 800670c:	0018      	movs	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	b002      	add	sp, #8
 8006712:	bd80      	pop	{r7, pc}
 8006714:	0802a404 	.word	0x0802a404

08006718 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 800671e:	4b0b      	ldr	r3, [pc, #44]	@ (800674c <CIPSNTPTIME+0x34>)
 8006720:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0018      	movs	r0, r3
 8006726:	f7f9 fd21 	bl	800016c <strlen>
 800672a:	0003      	movs	r3, r0
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	0011      	movs	r1, r2
 8006732:	0018      	movs	r0, r3
 8006734:	f7fe f9c6 	bl	8004ac4 <ESP_Send>
 8006738:	1e03      	subs	r3, r0, #0
 800673a:	d001      	beq.n	8006740 <CIPSNTPTIME+0x28>
    return true;
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006740:	2300      	movs	r3, #0
  }
}
 8006742:	0018      	movs	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	b002      	add	sp, #8
 8006748:	bd80      	pop	{r7, pc}
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	0802a454 	.word	0x0802a454

08006750 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006756:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <CIPSNTPINTV+0x34>)
 8006758:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	0018      	movs	r0, r3
 800675e:	f7f9 fd05 	bl	800016c <strlen>
 8006762:	0003      	movs	r3, r0
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0011      	movs	r1, r2
 800676a:	0018      	movs	r0, r3
 800676c:	f7fe f9aa 	bl	8004ac4 <ESP_Send>
 8006770:	1e03      	subs	r3, r0, #0
 8006772:	d001      	beq.n	8006778 <CIPSNTPINTV+0x28>
    return true;
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006778:	2300      	movs	r3, #0
  }
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b002      	add	sp, #8
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			@ (mov r8, r8)
 8006784:	0802a468 	.word	0x0802a468

08006788 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006788:	b5b0      	push	{r4, r5, r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	0002      	movs	r2, r0
 8006790:	1dfb      	adds	r3, r7, #7
 8006792:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006794:	4b6c      	ldr	r3, [pc, #432]	@ (8006948 <DMA_ProcessBuffer+0x1c0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	b29a      	uxth	r2, r3
 800679c:	200e      	movs	r0, #14
 800679e:	183b      	adds	r3, r7, r0
 80067a0:	2180      	movs	r1, #128	@ 0x80
 80067a2:	0049      	lsls	r1, r1, #1
 80067a4:	1a8a      	subs	r2, r1, r2
 80067a6:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 80067a8:	230d      	movs	r3, #13
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	2203      	movs	r2, #3
 80067ae:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 80067b0:	183b      	adds	r3, r7, r0
 80067b2:	881a      	ldrh	r2, [r3, #0]
 80067b4:	2380      	movs	r3, #128	@ 0x80
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d903      	bls.n	80067c4 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 80067bc:	183b      	adds	r3, r7, r0
 80067be:	2280      	movs	r2, #128	@ 0x80
 80067c0:	0052      	lsls	r2, r2, #1
 80067c2:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 80067c4:	4b61      	ldr	r3, [pc, #388]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	001a      	movs	r2, r3
 80067cc:	230e      	movs	r3, #14
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d131      	bne.n	800683a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 80067d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006950 <DMA_ProcessBuffer+0x1c8>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b14      	cmp	r3, #20
 80067dc:	d91b      	bls.n	8006816 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80067de:	4b5c      	ldr	r3, [pc, #368]	@ (8006950 <DMA_ProcessBuffer+0x1c8>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80067e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006954 <DMA_ProcessBuffer+0x1cc>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d107      	bne.n	80067fc <DMA_ProcessBuffer+0x74>
 80067ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006958 <DMA_ProcessBuffer+0x1d0>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 80067f4:	230d      	movs	r3, #13
 80067f6:	18fb      	adds	r3, r7, r3
 80067f8:	2207      	movs	r2, #7
 80067fa:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80067fc:	4b55      	ldr	r3, [pc, #340]	@ (8006954 <DMA_ProcessBuffer+0x1cc>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d103      	bne.n	800680c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006804:	4b55      	ldr	r3, [pc, #340]	@ (800695c <DMA_ProcessBuffer+0x1d4>)
 8006806:	220b      	movs	r2, #11
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	e016      	b.n	800683a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 800680c:	230d      	movs	r3, #13
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	2206      	movs	r2, #6
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e011      	b.n	800683a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006816:	4b4e      	ldr	r3, [pc, #312]	@ (8006950 <DMA_ProcessBuffer+0x1c8>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	b2da      	uxtb	r2, r3
 800681e:	4b4c      	ldr	r3, [pc, #304]	@ (8006950 <DMA_ProcessBuffer+0x1c8>)
 8006820:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006822:	f00c ff4f 	bl	80136c4 <HAL_GetTick>
 8006826:	0003      	movs	r3, r0
 8006828:	33f5      	adds	r3, #245	@ 0xf5
 800682a:	33ff      	adds	r3, #255	@ 0xff
 800682c:	001a      	movs	r2, r3
 800682e:	4b4c      	ldr	r3, [pc, #304]	@ (8006960 <DMA_ProcessBuffer+0x1d8>)
 8006830:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006832:	230d      	movs	r3, #13
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	2204      	movs	r2, #4
 8006838:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 800683a:	4b44      	ldr	r3, [pc, #272]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	001a      	movs	r2, r3
 8006842:	210e      	movs	r1, #14
 8006844:	187b      	adds	r3, r7, r1
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	4293      	cmp	r3, r2
 800684a:	d100      	bne.n	800684e <DMA_ProcessBuffer+0xc6>
 800684c:	e075      	b.n	800693a <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 800684e:	4b40      	ldr	r3, [pc, #256]	@ (8006950 <DMA_ProcessBuffer+0x1c8>)
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006854:	4b43      	ldr	r3, [pc, #268]	@ (8006964 <DMA_ProcessBuffer+0x1dc>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b3c      	ldr	r3, [pc, #240]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	429a      	cmp	r2, r3
 8006862:	d109      	bne.n	8006878 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006864:	187b      	adds	r3, r7, r1
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b3e      	ldr	r3, [pc, #248]	@ (8006964 <DMA_ProcessBuffer+0x1dc>)
 800686c:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800686e:	230d      	movs	r3, #13
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	220a      	movs	r2, #10
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	e060      	b.n	800693a <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006878:	4b3a      	ldr	r3, [pc, #232]	@ (8006964 <DMA_ProcessBuffer+0x1dc>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	001a      	movs	r2, r3
 8006880:	210e      	movs	r1, #14
 8006882:	187b      	adds	r3, r7, r1
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 800688a:	187b      	adds	r3, r7, r1
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	4b34      	ldr	r3, [pc, #208]	@ (8006964 <DMA_ProcessBuffer+0x1dc>)
 8006892:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006894:	230d      	movs	r3, #13
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	220a      	movs	r2, #10
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e04d      	b.n	800693a <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 800689e:	4b2b      	ldr	r3, [pc, #172]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	001a      	movs	r2, r3
 80068a6:	210e      	movs	r1, #14
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d917      	bls.n	80068e0 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80068b0:	4b26      	ldr	r3, [pc, #152]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	001a      	movs	r2, r3
 80068b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006968 <DMA_ProcessBuffer+0x1e0>)
 80068ba:	18d0      	adds	r0, r2, r3
 80068bc:	4b23      	ldr	r3, [pc, #140]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	001a      	movs	r2, r3
 80068c4:	187b      	adds	r3, r7, r1
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	b299      	uxth	r1, r3
 80068cc:	230d      	movs	r3, #13
 80068ce:	18fc      	adds	r4, r7, r3
 80068d0:	1dfb      	adds	r3, r7, #7
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	001a      	movs	r2, r3
 80068d6:	f7ff fa71 	bl	8005dbc <ParseBuffer>
 80068da:	0003      	movs	r3, r0
 80068dc:	7023      	strb	r3, [r4, #0]
 80068de:	e026      	b.n	800692e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80068e0:	4b1a      	ldr	r3, [pc, #104]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	001a      	movs	r2, r3
 80068e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006968 <DMA_ProcessBuffer+0x1e0>)
 80068ea:	18d0      	adds	r0, r2, r3
 80068ec:	4b17      	ldr	r3, [pc, #92]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	001a      	movs	r2, r3
 80068f4:	2380      	movs	r3, #128	@ 0x80
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	1a9b      	subs	r3, r3, r2
 80068fa:	b299      	uxth	r1, r3
 80068fc:	250d      	movs	r5, #13
 80068fe:	197c      	adds	r4, r7, r5
 8006900:	1dfb      	adds	r3, r7, #7
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	001a      	movs	r2, r3
 8006906:	f7ff fa59 	bl	8005dbc <ParseBuffer>
 800690a:	0003      	movs	r3, r0
 800690c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 800690e:	210e      	movs	r1, #14
 8006910:	187b      	adds	r3, r7, r1
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006918:	197c      	adds	r4, r7, r5
 800691a:	1dfb      	adds	r3, r7, #7
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	187b      	adds	r3, r7, r1
 8006920:	8819      	ldrh	r1, [r3, #0]
 8006922:	4b11      	ldr	r3, [pc, #68]	@ (8006968 <DMA_ProcessBuffer+0x1e0>)
 8006924:	0018      	movs	r0, r3
 8006926:	f7ff fa49 	bl	8005dbc <ParseBuffer>
 800692a:	0003      	movs	r3, r0
 800692c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 800692e:	230e      	movs	r3, #14
 8006930:	18fb      	adds	r3, r7, r3
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b2da      	uxtb	r2, r3
 8006936:	4b05      	ldr	r3, [pc, #20]	@ (800694c <DMA_ProcessBuffer+0x1c4>)
 8006938:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 800693a:	230d      	movs	r3, #13
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	781b      	ldrb	r3, [r3, #0]
}
 8006940:	0018      	movs	r0, r3
 8006942:	46bd      	mov	sp, r7
 8006944:	b004      	add	sp, #16
 8006946:	bdb0      	pop	{r4, r5, r7, pc}
 8006948:	2000217c 	.word	0x2000217c
 800694c:	200007b9 	.word	0x200007b9
 8006950:	2000068c 	.word	0x2000068c
 8006954:	2000068e 	.word	0x2000068e
 8006958:	20000001 	.word	0x20000001
 800695c:	2000002c 	.word	0x2000002c
 8006960:	20000684 	.word	0x20000684
 8006964:	200007ba 	.word	0x200007ba
 8006968:	200004b8 	.word	0x200004b8

0800696c <clearDMABuffer>:

void clearDMABuffer(){
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006970:	2380      	movs	r3, #128	@ 0x80
 8006972:	005a      	lsls	r2, r3, #1
 8006974:	4b03      	ldr	r3, [pc, #12]	@ (8006984 <clearDMABuffer+0x18>)
 8006976:	2100      	movs	r1, #0
 8006978:	0018      	movs	r0, r3
 800697a:	f01e fbb5 	bl	80250e8 <memset>
}
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200004b8 	.word	0x200004b8

08006988 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	0002      	movs	r2, r0
 8006990:	1dfb      	adds	r3, r7, #7
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	1dbb      	adds	r3, r7, #6
 8006996:	1c0a      	adds	r2, r1, #0
 8006998:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800699a:	210f      	movs	r1, #15
 800699c:	187b      	adds	r3, r7, r1
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80069a2:	1dbb      	adds	r3, r7, #6
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	1dfa      	adds	r2, r7, #7
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	4251      	negs	r1, r2
 80069b2:	414a      	adcs	r2, r1
 80069b4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80069b6:	1dbb      	adds	r3, r7, #6
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d107      	bne.n	80069ce <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80069be:	230f      	movs	r3, #15
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	1dfa      	adds	r2, r7, #7
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	3a02      	subs	r2, #2
 80069c8:	4251      	negs	r1, r2
 80069ca:	414a      	adcs	r2, r1
 80069cc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80069ce:	1dbb      	adds	r3, r7, #6
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d107      	bne.n	80069e6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80069d6:	230f      	movs	r3, #15
 80069d8:	18fb      	adds	r3, r7, r3
 80069da:	1dfa      	adds	r2, r7, #7
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	3a05      	subs	r2, #5
 80069e0:	4251      	negs	r1, r2
 80069e2:	414a      	adcs	r2, r1
 80069e4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 80069e6:	1dbb      	adds	r3, r7, #6
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b05      	cmp	r3, #5
 80069ec:	d107      	bne.n	80069fe <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 80069ee:	230f      	movs	r3, #15
 80069f0:	18fb      	adds	r3, r7, r3
 80069f2:	1dfa      	adds	r2, r7, #7
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	3a0b      	subs	r2, #11
 80069f8:	4251      	negs	r1, r2
 80069fa:	414a      	adcs	r2, r1
 80069fc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80069fe:	230f      	movs	r3, #15
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	781b      	ldrb	r3, [r3, #0]
}
 8006a04:	0018      	movs	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b004      	add	sp, #16
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <AT_Send>:

bool AT_Send(AT_Commands state){
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	0002      	movs	r2, r0
 8006a14:	1dfb      	adds	r3, r7, #7
 8006a16:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8006a18:	230f      	movs	r3, #15
 8006a1a:	18fb      	adds	r3, r7, r3
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8006a20:	1dfb      	adds	r3, r7, #7
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b14      	cmp	r3, #20
 8006a26:	d900      	bls.n	8006a2a <AT_Send+0x1e>
 8006a28:	e19e      	b.n	8006d68 <AT_Send+0x35c>
 8006a2a:	009a      	lsls	r2, r3, #2
 8006a2c:	4bd2      	ldr	r3, [pc, #840]	@ (8006d78 <AT_Send+0x36c>)
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006a34:	4bd1      	ldr	r3, [pc, #836]	@ (8006d7c <AT_Send+0x370>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f00c f8af 	bl	8012b9c <TimestampIsReached>
 8006a3e:	1e03      	subs	r3, r0, #0
 8006a40:	d100      	bne.n	8006a44 <AT_Send+0x38>
 8006a42:	e190      	b.n	8006d66 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8006a44:	4ace      	ldr	r2, [pc, #824]	@ (8006d80 <AT_Send+0x374>)
 8006a46:	4bcf      	ldr	r3, [pc, #828]	@ (8006d84 <AT_Send+0x378>)
 8006a48:	0019      	movs	r1, r3
 8006a4a:	2003      	movs	r0, #3
 8006a4c:	f00c f8fc 	bl	8012c48 <CreateLine>
    ATCommandSend = PollAwake();
 8006a50:	230f      	movs	r3, #15
 8006a52:	18fc      	adds	r4, r7, r3
 8006a54:	f7ff fba0 	bl	8006198 <PollAwake>
 8006a58:	0003      	movs	r3, r0
 8006a5a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006a5c:	f00c fe32 	bl	80136c4 <HAL_GetTick>
 8006a60:	0003      	movs	r3, r0
 8006a62:	3332      	adds	r3, #50	@ 0x32
 8006a64:	001a      	movs	r2, r3
 8006a66:	4bc5      	ldr	r3, [pc, #788]	@ (8006d7c <AT_Send+0x370>)
 8006a68:	601a      	str	r2, [r3, #0]
  }
  break;
 8006a6a:	e17c      	b.n	8006d66 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006a6c:	4ac6      	ldr	r2, [pc, #792]	@ (8006d88 <AT_Send+0x37c>)
 8006a6e:	4bc5      	ldr	r3, [pc, #788]	@ (8006d84 <AT_Send+0x378>)
 8006a70:	0019      	movs	r1, r3
 8006a72:	2003      	movs	r0, #3
 8006a74:	f00c f8e8 	bl	8012c48 <CreateLine>
    ATCommandSend = RFPower();
 8006a78:	230f      	movs	r3, #15
 8006a7a:	18fc      	adds	r4, r7, r3
 8006a7c:	f7ff fba8 	bl	80061d0 <RFPower>
 8006a80:	0003      	movs	r3, r0
 8006a82:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006a84:	f00c fe1e 	bl	80136c4 <HAL_GetTick>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	330a      	adds	r3, #10
 8006a8c:	001a      	movs	r2, r3
 8006a8e:	4bbb      	ldr	r3, [pc, #748]	@ (8006d7c <AT_Send+0x370>)
 8006a90:	601a      	str	r2, [r3, #0]
    break;
 8006a92:	e169      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006a94:	4abd      	ldr	r2, [pc, #756]	@ (8006d8c <AT_Send+0x380>)
 8006a96:	4bbb      	ldr	r3, [pc, #748]	@ (8006d84 <AT_Send+0x378>)
 8006a98:	0019      	movs	r1, r3
 8006a9a:	2003      	movs	r0, #3
 8006a9c:	f00c f8d4 	bl	8012c48 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006aa0:	230f      	movs	r3, #15
 8006aa2:	18fc      	adds	r4, r7, r3
 8006aa4:	f7ff fbb0 	bl	8006208 <CheckRFPower>
 8006aa8:	0003      	movs	r3, r0
 8006aaa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006aac:	f00c fe0a 	bl	80136c4 <HAL_GetTick>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	330a      	adds	r3, #10
 8006ab4:	001a      	movs	r2, r3
 8006ab6:	4bb1      	ldr	r3, [pc, #708]	@ (8006d7c <AT_Send+0x370>)
 8006ab8:	601a      	str	r2, [r3, #0]
    break;
 8006aba:	e155      	b.n	8006d68 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006abc:	4ab4      	ldr	r2, [pc, #720]	@ (8006d90 <AT_Send+0x384>)
 8006abe:	4bb1      	ldr	r3, [pc, #708]	@ (8006d84 <AT_Send+0x378>)
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	2003      	movs	r0, #3
 8006ac4:	f00c f8c0 	bl	8012c48 <CreateLine>
    ATCommandSend = ATRestore();
 8006ac8:	230f      	movs	r3, #15
 8006aca:	18fc      	adds	r4, r7, r3
 8006acc:	f7ff fbb8 	bl	8006240 <ATRestore>
 8006ad0:	0003      	movs	r3, r0
 8006ad2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006ad4:	f00c fdf6 	bl	80136c4 <HAL_GetTick>
 8006ad8:	0003      	movs	r3, r0
 8006ada:	3332      	adds	r3, #50	@ 0x32
 8006adc:	001a      	movs	r2, r3
 8006ade:	4ba7      	ldr	r3, [pc, #668]	@ (8006d7c <AT_Send+0x370>)
 8006ae0:	601a      	str	r2, [r3, #0]
    break;
 8006ae2:	e141      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006ae4:	4aab      	ldr	r2, [pc, #684]	@ (8006d94 <AT_Send+0x388>)
 8006ae6:	4ba7      	ldr	r3, [pc, #668]	@ (8006d84 <AT_Send+0x378>)
 8006ae8:	0019      	movs	r1, r3
 8006aea:	2003      	movs	r0, #3
 8006aec:	f00c f8ac 	bl	8012c48 <CreateLine>
    ATCommandSend = CWINIT();
 8006af0:	230f      	movs	r3, #15
 8006af2:	18fc      	adds	r4, r7, r3
 8006af4:	f7ff fbc0 	bl	8006278 <CWINIT>
 8006af8:	0003      	movs	r3, r0
 8006afa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006afc:	f00c fde2 	bl	80136c4 <HAL_GetTick>
 8006b00:	0003      	movs	r3, r0
 8006b02:	33f5      	adds	r3, #245	@ 0xf5
 8006b04:	33ff      	adds	r3, #255	@ 0xff
 8006b06:	001a      	movs	r2, r3
 8006b08:	4b9c      	ldr	r3, [pc, #624]	@ (8006d7c <AT_Send+0x370>)
 8006b0a:	601a      	str	r2, [r3, #0]
    break;
 8006b0c:	e12c      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006b0e:	4aa2      	ldr	r2, [pc, #648]	@ (8006d98 <AT_Send+0x38c>)
 8006b10:	4b9c      	ldr	r3, [pc, #624]	@ (8006d84 <AT_Send+0x378>)
 8006b12:	0019      	movs	r1, r3
 8006b14:	2003      	movs	r0, #3
 8006b16:	f00c f897 	bl	8012c48 <CreateLine>
    ATCommandSend = CWSTATE();
 8006b1a:	230f      	movs	r3, #15
 8006b1c:	18fc      	adds	r4, r7, r3
 8006b1e:	f7ff fcb9 	bl	8006494 <CWSTATE>
 8006b22:	0003      	movs	r3, r0
 8006b24:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006b26:	f00c fdcd 	bl	80136c4 <HAL_GetTick>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	33f5      	adds	r3, #245	@ 0xf5
 8006b2e:	33ff      	adds	r3, #255	@ 0xff
 8006b30:	001a      	movs	r2, r3
 8006b32:	4b92      	ldr	r3, [pc, #584]	@ (8006d7c <AT_Send+0x370>)
 8006b34:	601a      	str	r2, [r3, #0]
    break;
 8006b36:	e117      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8006b38:	4a98      	ldr	r2, [pc, #608]	@ (8006d9c <AT_Send+0x390>)
 8006b3a:	4b92      	ldr	r3, [pc, #584]	@ (8006d84 <AT_Send+0x378>)
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	2003      	movs	r0, #3
 8006b40:	f00c f882 	bl	8012c48 <CreateLine>
    ATCommandSend = CWMODE1();
 8006b44:	230f      	movs	r3, #15
 8006b46:	18fc      	adds	r4, r7, r3
 8006b48:	f7ff fbb2 	bl	80062b0 <CWMODE1>
 8006b4c:	0003      	movs	r3, r0
 8006b4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006b50:	f00c fdb8 	bl	80136c4 <HAL_GetTick>
 8006b54:	0003      	movs	r3, r0
 8006b56:	330a      	adds	r3, #10
 8006b58:	001a      	movs	r2, r3
 8006b5a:	4b88      	ldr	r3, [pc, #544]	@ (8006d7c <AT_Send+0x370>)
 8006b5c:	601a      	str	r2, [r3, #0]
    break;
 8006b5e:	e103      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006b60:	4a8e      	ldr	r2, [pc, #568]	@ (8006d9c <AT_Send+0x390>)
 8006b62:	4b88      	ldr	r3, [pc, #544]	@ (8006d84 <AT_Send+0x378>)
 8006b64:	0019      	movs	r1, r3
 8006b66:	2003      	movs	r0, #3
 8006b68:	f00c f86e 	bl	8012c48 <CreateLine>
    ATCommandSend = CWMODE2();
 8006b6c:	230f      	movs	r3, #15
 8006b6e:	18fc      	adds	r4, r7, r3
 8006b70:	f7ff fbba 	bl	80062e8 <CWMODE2>
 8006b74:	0003      	movs	r3, r0
 8006b76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006b78:	f00c fda4 	bl	80136c4 <HAL_GetTick>
 8006b7c:	0003      	movs	r3, r0
 8006b7e:	330a      	adds	r3, #10
 8006b80:	001a      	movs	r2, r3
 8006b82:	4b7e      	ldr	r3, [pc, #504]	@ (8006d7c <AT_Send+0x370>)
 8006b84:	601a      	str	r2, [r3, #0]
    break;
 8006b86:	e0ef      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006b88:	4a85      	ldr	r2, [pc, #532]	@ (8006da0 <AT_Send+0x394>)
 8006b8a:	4b7e      	ldr	r3, [pc, #504]	@ (8006d84 <AT_Send+0x378>)
 8006b8c:	0019      	movs	r1, r3
 8006b8e:	2003      	movs	r0, #3
 8006b90:	f00c f85a 	bl	8012c48 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006b94:	230f      	movs	r3, #15
 8006b96:	18fc      	adds	r4, r7, r3
 8006b98:	f7ff fbc2 	bl	8006320 <CWAUTOCONN>
 8006b9c:	0003      	movs	r3, r0
 8006b9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006ba0:	f00c fd90 	bl	80136c4 <HAL_GetTick>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	330a      	adds	r3, #10
 8006ba8:	001a      	movs	r2, r3
 8006baa:	4b74      	ldr	r3, [pc, #464]	@ (8006d7c <AT_Send+0x370>)
 8006bac:	601a      	str	r2, [r3, #0]
    break;
 8006bae:	e0db      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006bb0:	4a7c      	ldr	r2, [pc, #496]	@ (8006da4 <AT_Send+0x398>)
 8006bb2:	4b74      	ldr	r3, [pc, #464]	@ (8006d84 <AT_Send+0x378>)
 8006bb4:	0019      	movs	r1, r3
 8006bb6:	2003      	movs	r0, #3
 8006bb8:	f00c f846 	bl	8012c48 <CreateLine>
    ATCommandSend = CWJAP();
 8006bbc:	230f      	movs	r3, #15
 8006bbe:	18fc      	adds	r4, r7, r3
 8006bc0:	f7ff fbca 	bl	8006358 <CWJAP>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006bc8:	f00c fd7c 	bl	80136c4 <HAL_GetTick>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	3332      	adds	r3, #50	@ 0x32
 8006bd0:	001a      	movs	r2, r3
 8006bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8006d7c <AT_Send+0x370>)
 8006bd4:	601a      	str	r2, [r3, #0]
    break;
 8006bd6:	e0c7      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8006bd8:	4a73      	ldr	r2, [pc, #460]	@ (8006da8 <AT_Send+0x39c>)
 8006bda:	4b6a      	ldr	r3, [pc, #424]	@ (8006d84 <AT_Send+0x378>)
 8006bdc:	0019      	movs	r1, r3
 8006bde:	2003      	movs	r0, #3
 8006be0:	f00c f832 	bl	8012c48 <CreateLine>
    ATCommandSend = CWMODE3();
 8006be4:	230f      	movs	r3, #15
 8006be6:	18fc      	adds	r4, r7, r3
 8006be8:	f7ff fc38 	bl	800645c <CWMODE3>
 8006bec:	0003      	movs	r3, r0
 8006bee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006bf0:	f00c fd68 	bl	80136c4 <HAL_GetTick>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	330a      	adds	r3, #10
 8006bf8:	001a      	movs	r2, r3
 8006bfa:	4b60      	ldr	r3, [pc, #384]	@ (8006d7c <AT_Send+0x370>)
 8006bfc:	601a      	str	r2, [r3, #0]
    break;
 8006bfe:	e0b3      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006c00:	4a6a      	ldr	r2, [pc, #424]	@ (8006dac <AT_Send+0x3a0>)
 8006c02:	4b60      	ldr	r3, [pc, #384]	@ (8006d84 <AT_Send+0x378>)
 8006c04:	0019      	movs	r1, r3
 8006c06:	2003      	movs	r0, #3
 8006c08:	f00c f81e 	bl	8012c48 <CreateLine>
    ATCommandSend = CWSAP();
 8006c0c:	230f      	movs	r3, #15
 8006c0e:	18fc      	adds	r4, r7, r3
 8006c10:	f7ff fc5c 	bl	80064cc <CWSAP>
 8006c14:	0003      	movs	r3, r0
 8006c16:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006c18:	f00c fd54 	bl	80136c4 <HAL_GetTick>
 8006c1c:	0003      	movs	r3, r0
 8006c1e:	330a      	adds	r3, #10
 8006c20:	001a      	movs	r2, r3
 8006c22:	4b56      	ldr	r3, [pc, #344]	@ (8006d7c <AT_Send+0x370>)
 8006c24:	601a      	str	r2, [r3, #0]
    break;
 8006c26:	e09f      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8006c28:	4a61      	ldr	r2, [pc, #388]	@ (8006db0 <AT_Send+0x3a4>)
 8006c2a:	4b56      	ldr	r3, [pc, #344]	@ (8006d84 <AT_Send+0x378>)
 8006c2c:	0019      	movs	r1, r3
 8006c2e:	2003      	movs	r0, #3
 8006c30:	f00c f80a 	bl	8012c48 <CreateLine>
    ATCommandSend = CIPMUX();
 8006c34:	230f      	movs	r3, #15
 8006c36:	18fc      	adds	r4, r7, r3
 8006c38:	f7ff fc64 	bl	8006504 <CIPMUX>
 8006c3c:	0003      	movs	r3, r0
 8006c3e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006c40:	f00c fd40 	bl	80136c4 <HAL_GetTick>
 8006c44:	0003      	movs	r3, r0
 8006c46:	330a      	adds	r3, #10
 8006c48:	001a      	movs	r2, r3
 8006c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8006d7c <AT_Send+0x370>)
 8006c4c:	601a      	str	r2, [r3, #0]
    break;
 8006c4e:	e08b      	b.n	8006d68 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 8006c50:	4a58      	ldr	r2, [pc, #352]	@ (8006db4 <AT_Send+0x3a8>)
 8006c52:	4b4c      	ldr	r3, [pc, #304]	@ (8006d84 <AT_Send+0x378>)
 8006c54:	0019      	movs	r1, r3
 8006c56:	2003      	movs	r0, #3
 8006c58:	f00b fff6 	bl	8012c48 <CreateLine>
    ATCommandSend = WEBSERVER();
 8006c5c:	230f      	movs	r3, #15
 8006c5e:	18fc      	adds	r4, r7, r3
 8006c60:	f7ff fc6c 	bl	800653c <WEBSERVER>
 8006c64:	0003      	movs	r3, r0
 8006c66:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006c68:	f00c fd2c 	bl	80136c4 <HAL_GetTick>
 8006c6c:	0003      	movs	r3, r0
 8006c6e:	330a      	adds	r3, #10
 8006c70:	001a      	movs	r2, r3
 8006c72:	4b42      	ldr	r3, [pc, #264]	@ (8006d7c <AT_Send+0x370>)
 8006c74:	601a      	str	r2, [r3, #0]
    break;
 8006c76:	e077      	b.n	8006d68 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8006c78:	230f      	movs	r3, #15
 8006c7a:	18fc      	adds	r4, r7, r3
 8006c7c:	f7ff fc7a 	bl	8006574 <HTTPCPOST>
 8006c80:	0003      	movs	r3, r0
 8006c82:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006c84:	f00c fd1e 	bl	80136c4 <HAL_GetTick>
 8006c88:	0003      	movs	r3, r0
 8006c8a:	33f5      	adds	r3, #245	@ 0xf5
 8006c8c:	33ff      	adds	r3, #255	@ 0xff
 8006c8e:	001a      	movs	r2, r3
 8006c90:	4b3a      	ldr	r3, [pc, #232]	@ (8006d7c <AT_Send+0x370>)
 8006c92:	601a      	str	r2, [r3, #0]
    break;
 8006c94:	e068      	b.n	8006d68 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8006c96:	4a48      	ldr	r2, [pc, #288]	@ (8006db8 <AT_Send+0x3ac>)
 8006c98:	4b3a      	ldr	r3, [pc, #232]	@ (8006d84 <AT_Send+0x378>)
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	2003      	movs	r0, #3
 8006c9e:	f00b ffd3 	bl	8012c48 <CreateLine>
    ATCommandSend = SENDDATA();
 8006ca2:	230f      	movs	r3, #15
 8006ca4:	18fc      	adds	r4, r7, r3
 8006ca6:	f7ff fccf 	bl	8006648 <SENDDATA>
 8006caa:	0003      	movs	r3, r0
 8006cac:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8006cae:	f00c fd09 	bl	80136c4 <HAL_GetTick>
 8006cb2:	0003      	movs	r3, r0
 8006cb4:	33f5      	adds	r3, #245	@ 0xf5
 8006cb6:	33ff      	adds	r3, #255	@ 0xff
 8006cb8:	001a      	movs	r2, r3
 8006cba:	4b30      	ldr	r3, [pc, #192]	@ (8006d7c <AT_Send+0x370>)
 8006cbc:	601a      	str	r2, [r3, #0]
    break;
 8006cbe:	e053      	b.n	8006d68 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8006cc0:	4a3e      	ldr	r2, [pc, #248]	@ (8006dbc <AT_Send+0x3b0>)
 8006cc2:	4b30      	ldr	r3, [pc, #192]	@ (8006d84 <AT_Send+0x378>)
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	2003      	movs	r0, #3
 8006cc8:	f00b ffbe 	bl	8012c48 <CreateLine>
    ATCommandSend = SLEEP();
 8006ccc:	230f      	movs	r3, #15
 8006cce:	18fc      	adds	r4, r7, r3
 8006cd0:	f7ff fce6 	bl	80066a0 <SLEEP>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006cd8:	f00c fcf4 	bl	80136c4 <HAL_GetTick>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	330a      	adds	r3, #10
 8006ce0:	001a      	movs	r2, r3
 8006ce2:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <AT_Send+0x370>)
 8006ce4:	601a      	str	r2, [r3, #0]
    break;
 8006ce6:	e03f      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8006ce8:	4a35      	ldr	r2, [pc, #212]	@ (8006dc0 <AT_Send+0x3b4>)
 8006cea:	4b26      	ldr	r3, [pc, #152]	@ (8006d84 <AT_Send+0x378>)
 8006cec:	0019      	movs	r1, r3
 8006cee:	2003      	movs	r0, #3
 8006cf0:	f00b ffaa 	bl	8012c48 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8006cf4:	230f      	movs	r3, #15
 8006cf6:	18fc      	adds	r4, r7, r3
 8006cf8:	f7ff fcee 	bl	80066d8 <CIPSNTPCFG>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006d00:	f00c fce0 	bl	80136c4 <HAL_GetTick>
 8006d04:	0003      	movs	r3, r0
 8006d06:	330a      	adds	r3, #10
 8006d08:	001a      	movs	r2, r3
 8006d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006d7c <AT_Send+0x370>)
 8006d0c:	601a      	str	r2, [r3, #0]
    break;
 8006d0e:	e02b      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8006d10:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc4 <AT_Send+0x3b8>)
 8006d12:	4b1c      	ldr	r3, [pc, #112]	@ (8006d84 <AT_Send+0x378>)
 8006d14:	0019      	movs	r1, r3
 8006d16:	2003      	movs	r0, #3
 8006d18:	f00b ff96 	bl	8012c48 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8006d1c:	230f      	movs	r3, #15
 8006d1e:	18fc      	adds	r4, r7, r3
 8006d20:	f7ff fcfa 	bl	8006718 <CIPSNTPTIME>
 8006d24:	0003      	movs	r3, r0
 8006d26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006d28:	f00c fccc 	bl	80136c4 <HAL_GetTick>
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	33f5      	adds	r3, #245	@ 0xf5
 8006d30:	33ff      	adds	r3, #255	@ 0xff
 8006d32:	001a      	movs	r2, r3
 8006d34:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <AT_Send+0x370>)
 8006d36:	601a      	str	r2, [r3, #0]
    break;
 8006d38:	e016      	b.n	8006d68 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8006d3a:	4a23      	ldr	r2, [pc, #140]	@ (8006dc8 <AT_Send+0x3bc>)
 8006d3c:	4b11      	ldr	r3, [pc, #68]	@ (8006d84 <AT_Send+0x378>)
 8006d3e:	0019      	movs	r1, r3
 8006d40:	2003      	movs	r0, #3
 8006d42:	f00b ff81 	bl	8012c48 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8006d46:	230f      	movs	r3, #15
 8006d48:	18fc      	adds	r4, r7, r3
 8006d4a:	f7ff fd01 	bl	8006750 <CIPSNTPINTV>
 8006d4e:	0003      	movs	r3, r0
 8006d50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006d52:	f00c fcb7 	bl	80136c4 <HAL_GetTick>
 8006d56:	0003      	movs	r3, r0
 8006d58:	330a      	adds	r3, #10
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	4b07      	ldr	r3, [pc, #28]	@ (8006d7c <AT_Send+0x370>)
 8006d5e:	601a      	str	r2, [r3, #0]
    break;
 8006d60:	e002      	b.n	8006d68 <AT_Send+0x35c>

  case AT_END:
    break;
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	e000      	b.n	8006d68 <AT_Send+0x35c>
  break;
 8006d66:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8006d68:	230f      	movs	r3, #15
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	781b      	ldrb	r3, [r3, #0]
}
 8006d6e:	0018      	movs	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	b005      	add	sp, #20
 8006d74:	bd90      	pop	{r4, r7, pc}
 8006d76:	46c0      	nop			@ (mov r8, r8)
 8006d78:	0802d220 	.word	0x0802d220
 8006d7c:	20000684 	.word	0x20000684
 8006d80:	0802a480 	.word	0x0802a480
 8006d84:	080295c8 	.word	0x080295c8
 8006d88:	0802a48c 	.word	0x0802a48c
 8006d8c:	0802a4a0 	.word	0x0802a4a0
 8006d90:	0802a4b4 	.word	0x0802a4b4
 8006d94:	0802a4c4 	.word	0x0802a4c4
 8006d98:	0802a4d8 	.word	0x0802a4d8
 8006d9c:	0802a4f0 	.word	0x0802a4f0
 8006da0:	0802a508 	.word	0x0802a508
 8006da4:	0802a520 	.word	0x0802a520
 8006da8:	0802a534 	.word	0x0802a534
 8006dac:	0802a550 	.word	0x0802a550
 8006db0:	0802a56c 	.word	0x0802a56c
 8006db4:	0802a588 	.word	0x0802a588
 8006db8:	0802a5a4 	.word	0x0802a5a4
 8006dbc:	0802a5b4 	.word	0x0802a5b4
 8006dc0:	0802a5d8 	.word	0x0802a5d8
 8006dc4:	0802a5ec 	.word	0x0802a5ec
 8006dc8:	0802a604 	.word	0x0802a604

08006dcc <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8006dcc:	b590      	push	{r4, r7, lr}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8006dd2:	1dfb      	adds	r3, r7, #7
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8006dd8:	4b7d      	ldr	r3, [pc, #500]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	d900      	bls.n	8006de2 <ESP_WakeTest+0x16>
 8006de0:	e0d9      	b.n	8006f96 <ESP_WakeTest+0x1ca>
 8006de2:	009a      	lsls	r2, r3, #2
 8006de4:	4b7b      	ldr	r3, [pc, #492]	@ (8006fd4 <ESP_WakeTest+0x208>)
 8006de6:	18d3      	adds	r3, r2, r3
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8006dec:	4b7a      	ldr	r3, [pc, #488]	@ (8006fd8 <ESP_WakeTest+0x20c>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2201      	movs	r2, #1
 8006df2:	4053      	eors	r3, r2
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d036      	beq.n	8006e68 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006dfa:	2380      	movs	r3, #128	@ 0x80
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	4877      	ldr	r0, [pc, #476]	@ (8006fdc <ESP_WakeTest+0x210>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	0019      	movs	r1, r3
 8006e04:	f00d feef 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8006e08:	2032      	movs	r0, #50	@ 0x32
 8006e0a:	f00c fc65 	bl	80136d8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006e0e:	2380      	movs	r3, #128	@ 0x80
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	4872      	ldr	r0, [pc, #456]	@ (8006fdc <ESP_WakeTest+0x210>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	0019      	movs	r1, r3
 8006e18:	f00d fee5 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006e1c:	200a      	movs	r0, #10
 8006e1e:	f00c fc5b 	bl	80136d8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006e22:	4b6f      	ldr	r3, [pc, #444]	@ (8006fe0 <ESP_WakeTest+0x214>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	2101      	movs	r1, #1
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f00d fedc 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006e2e:	200a      	movs	r0, #10
 8006e30:	f00c fc52 	bl	80136d8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8006e34:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe0 <ESP_WakeTest+0x214>)
 8006e36:	2201      	movs	r2, #1
 8006e38:	2102      	movs	r1, #2
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f00d fed3 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006e40:	200a      	movs	r0, #10
 8006e42:	f00c fc49 	bl	80136d8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006e46:	4b66      	ldr	r3, [pc, #408]	@ (8006fe0 <ESP_WakeTest+0x214>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f00d feca 	bl	8014be6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006e52:	f00c fc37 	bl	80136c4 <HAL_GetTick>
 8006e56:	0003      	movs	r3, r0
 8006e58:	22af      	movs	r2, #175	@ 0xaf
 8006e5a:	0092      	lsls	r2, r2, #2
 8006e5c:	189a      	adds	r2, r3, r2
 8006e5e:	4b61      	ldr	r3, [pc, #388]	@ (8006fe4 <ESP_WakeTest+0x218>)
 8006e60:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006e62:	4b5d      	ldr	r3, [pc, #372]	@ (8006fd8 <ESP_WakeTest+0x20c>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8006e68:	2380      	movs	r3, #128	@ 0x80
 8006e6a:	005a      	lsls	r2, r3, #1
 8006e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe8 <ESP_WakeTest+0x21c>)
 8006e6e:	0011      	movs	r1, r2
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7fd fe59 	bl	8004b28 <ESP_Receive>
 8006e76:	1e03      	subs	r3, r0, #0
 8006e78:	d100      	bne.n	8006e7c <ESP_WakeTest+0xb0>
 8006e7a:	e09f      	b.n	8006fbc <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8006e7c:	4b54      	ldr	r3, [pc, #336]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006e82:	e09b      	b.n	8006fbc <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8006e84:	4b57      	ldr	r3, [pc, #348]	@ (8006fe4 <ESP_WakeTest+0x218>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f00b fe87 	bl	8012b9c <TimestampIsReached>
 8006e8e:	1e03      	subs	r3, r0, #0
 8006e90:	d100      	bne.n	8006e94 <ESP_WakeTest+0xc8>
 8006e92:	e095      	b.n	8006fc0 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8006e94:	4b55      	ldr	r3, [pc, #340]	@ (8006fec <ESP_WakeTest+0x220>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	1dfc      	adds	r4, r7, #7
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7ff fdb6 	bl	8006a0c <AT_Send>
 8006ea0:	0003      	movs	r3, r0
 8006ea2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8006ea4:	1dfb      	adds	r3, r7, #7
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d100      	bne.n	8006eae <ESP_WakeTest+0xe2>
 8006eac:	e088      	b.n	8006fc0 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8006eae:	4b48      	ldr	r3, [pc, #288]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006eb4:	e084      	b.n	8006fc0 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8006eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8006fe4 <ESP_WakeTest+0x218>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f00b fe6e 	bl	8012b9c <TimestampIsReached>
 8006ec0:	1e03      	subs	r3, r0, #0
 8006ec2:	d100      	bne.n	8006ec6 <ESP_WakeTest+0xfa>
 8006ec4:	e07e      	b.n	8006fc4 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8006ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ff0 <ESP_WakeTest+0x224>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f7ff fc5c 	bl	8006788 <DMA_ProcessBuffer>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	001a      	movs	r2, r3
 8006ed4:	4b47      	ldr	r3, [pc, #284]	@ (8006ff4 <ESP_WakeTest+0x228>)
 8006ed6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8006ed8:	4b46      	ldr	r3, [pc, #280]	@ (8006ff4 <ESP_WakeTest+0x228>)
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	4b44      	ldr	r3, [pc, #272]	@ (8006ff0 <ESP_WakeTest+0x224>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	1dbc      	adds	r4, r7, #6
 8006ee2:	0019      	movs	r1, r3
 8006ee4:	0010      	movs	r0, r2
 8006ee6:	f7ff fd4f 	bl	8006988 <ATCompare>
 8006eea:	0003      	movs	r3, r0
 8006eec:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8006eee:	4b41      	ldr	r3, [pc, #260]	@ (8006ff4 <ESP_WakeTest+0x228>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d102      	bne.n	8006efc <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8006ef6:	4b36      	ldr	r3, [pc, #216]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006ef8:	2201      	movs	r2, #1
 8006efa:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8006efc:	4b3d      	ldr	r3, [pc, #244]	@ (8006ff4 <ESP_WakeTest+0x228>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b07      	cmp	r3, #7
 8006f02:	d104      	bne.n	8006f0e <ESP_WakeTest+0x142>
          StartProg();
 8006f04:	f7fe ff28 	bl	8005d58 <StartProg>
          TestState = ESP_TEST_BOOT;
 8006f08:	4b31      	ldr	r3, [pc, #196]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006f0e:	4b39      	ldr	r3, [pc, #228]	@ (8006ff4 <ESP_WakeTest+0x228>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d109      	bne.n	8006f2a <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8006f16:	f00c fbd5 	bl	80136c4 <HAL_GetTick>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	3332      	adds	r3, #50	@ 0x32
 8006f1e:	001a      	movs	r2, r3
 8006f20:	4b30      	ldr	r3, [pc, #192]	@ (8006fe4 <ESP_WakeTest+0x218>)
 8006f22:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8006f24:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8006f2a:	1dbb      	adds	r3, r7, #6
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d048      	beq.n	8006fc4 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 8006f32:	4b27      	ldr	r3, [pc, #156]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006f34:	2203      	movs	r2, #3
 8006f36:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006f38:	e044      	b.n	8006fc4 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8006f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ff8 <ESP_WakeTest+0x22c>)
 8006f3c:	22fa      	movs	r2, #250	@ 0xfa
 8006f3e:	0112      	lsls	r2, r2, #4
 8006f40:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 8006f42:	f00a fb65 	bl	8011610 <Calculate_LED_ON>
 8006f46:	0003      	movs	r3, r0
 8006f48:	001a      	movs	r2, r3
 8006f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff8 <ESP_WakeTest+0x22c>)
 8006f4c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8006f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ff8 <ESP_WakeTest+0x22c>)
 8006f50:	22fa      	movs	r2, #250	@ 0xfa
 8006f52:	0112      	lsls	r2, r2, #4
 8006f54:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8006f56:	4b1e      	ldr	r3, [pc, #120]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006f58:	2204      	movs	r2, #4
 8006f5a:	701a      	strb	r2, [r3, #0]

      break;
 8006f5c:	e033      	b.n	8006fc6 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 8006f5e:	4b27      	ldr	r3, [pc, #156]	@ (8006ffc <ESP_WakeTest+0x230>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8006f64:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd8 <ESP_WakeTest+0x20c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe0 <ESP_WakeTest+0x214>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2101      	movs	r1, #1
 8006f70:	0018      	movs	r0, r3
 8006f72:	f00d fe38 	bl	8014be6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006f76:	2380      	movs	r3, #128	@ 0x80
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	4818      	ldr	r0, [pc, #96]	@ (8006fdc <ESP_WakeTest+0x210>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	0019      	movs	r1, r3
 8006f80:	f00d fe31 	bl	8014be6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8006f84:	4b16      	ldr	r3, [pc, #88]	@ (8006fe0 <ESP_WakeTest+0x214>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	2102      	movs	r1, #2
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f00d fe2b 	bl	8014be6 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8006f90:	f005 fb2e 	bl	800c5f0 <SetESPMeasurementDone>
      break;
 8006f94:	e017      	b.n	8006fc6 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8006f96:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd0 <ESP_WakeTest+0x204>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
      break;
 8006f9c:	e013      	b.n	8006fc6 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8006f9e:	4b16      	ldr	r3, [pc, #88]	@ (8006ff8 <ESP_WakeTest+0x22c>)
 8006fa0:	22fa      	movs	r2, #250	@ 0xfa
 8006fa2:	0112      	lsls	r2, r2, #4
 8006fa4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8006fa6:	4b14      	ldr	r3, [pc, #80]	@ (8006ff8 <ESP_WakeTest+0x22c>)
 8006fa8:	22fa      	movs	r2, #250	@ 0xfa
 8006faa:	0112      	lsls	r2, r2, #4
 8006fac:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8006fae:	f00a fb2f 	bl	8011610 <Calculate_LED_ON>
 8006fb2:	0003      	movs	r3, r0
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <ESP_WakeTest+0x22c>)
 8006fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8006fba:	e004      	b.n	8006fc6 <ESP_WakeTest+0x1fa>
      break;
 8006fbc:	46c0      	nop			@ (mov r8, r8)
 8006fbe:	e002      	b.n	8006fc6 <ESP_WakeTest+0x1fa>
      break;
 8006fc0:	46c0      	nop			@ (mov r8, r8)
 8006fc2:	e000      	b.n	8006fc6 <ESP_WakeTest+0x1fa>
      break;
 8006fc4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b003      	add	sp, #12
 8006fcc:	bd90      	pop	{r4, r7, pc}
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	20000690 	.word	0x20000690
 8006fd4:	0802d274 	.word	0x0802d274
 8006fd8:	200005b8 	.word	0x200005b8
 8006fdc:	50000800 	.word	0x50000800
 8006fe0:	50001c00 	.word	0x50001c00
 8006fe4:	20000684 	.word	0x20000684
 8006fe8:	200004b8 	.word	0x200004b8
 8006fec:	2000068e 	.word	0x2000068e
 8006ff0:	2000068d 	.word	0x2000068d
 8006ff4:	2000002e 	.word	0x2000002e
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	20000001 	.word	0x20000001

08007000 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8007000:	b5b0      	push	{r4, r5, r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8007006:	1dfb      	adds	r3, r7, #7
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 800700c:	4bdf      	ldr	r3, [pc, #892]	@ (800738c <ESP_Upkeep+0x38c>)
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	4bdf      	ldr	r3, [pc, #892]	@ (8007390 <ESP_Upkeep+0x390>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d024      	beq.n	8007062 <ESP_Upkeep+0x62>
 8007018:	f00b fe90 	bl	8012d3c <GetVerboseLevel>
 800701c:	0003      	movs	r3, r0
 800701e:	2b03      	cmp	r3, #3
 8007020:	d11f      	bne.n	8007062 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8007022:	4bda      	ldr	r3, [pc, #872]	@ (800738c <ESP_Upkeep+0x38c>)
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	4bda      	ldr	r3, [pc, #872]	@ (8007390 <ESP_Upkeep+0x390>)
 8007028:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800702a:	4bd9      	ldr	r3, [pc, #868]	@ (8007390 <ESP_Upkeep+0x390>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b03      	cmp	r3, #3
 8007030:	d103      	bne.n	800703a <ESP_Upkeep+0x3a>
 8007032:	4bd8      	ldr	r3, [pc, #864]	@ (8007394 <ESP_Upkeep+0x394>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b0e      	cmp	r3, #14
 8007038:	d013      	beq.n	8007062 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800703a:	4bd5      	ldr	r3, [pc, #852]	@ (8007390 <ESP_Upkeep+0x390>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	001d      	movs	r5, r3
 8007040:	4bd4      	ldr	r3, [pc, #848]	@ (8007394 <ESP_Upkeep+0x394>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	0018      	movs	r0, r3
 8007046:	4bd4      	ldr	r3, [pc, #848]	@ (8007398 <ESP_Upkeep+0x398>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	001c      	movs	r4, r3
 800704c:	4bd3      	ldr	r3, [pc, #844]	@ (800739c <ESP_Upkeep+0x39c>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	4ad3      	ldr	r2, [pc, #844]	@ (80073a0 <ESP_Upkeep+0x3a0>)
 8007052:	49d4      	ldr	r1, [pc, #848]	@ (80073a4 <ESP_Upkeep+0x3a4>)
 8007054:	9302      	str	r3, [sp, #8]
 8007056:	9401      	str	r4, [sp, #4]
 8007058:	9000      	str	r0, [sp, #0]
 800705a:	002b      	movs	r3, r5
 800705c:	2003      	movs	r0, #3
 800705e:	f00b fdf3 	bl	8012c48 <CreateLine>
    }
  }
  switch (EspState) {
 8007062:	4bca      	ldr	r3, [pc, #808]	@ (800738c <ESP_Upkeep+0x38c>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d901      	bls.n	800706e <ESP_Upkeep+0x6e>
 800706a:	f000 fc5e 	bl	800792a <ESP_Upkeep+0x92a>
 800706e:	009a      	lsls	r2, r3, #2
 8007070:	4bcd      	ldr	r3, [pc, #820]	@ (80073a8 <ESP_Upkeep+0x3a8>)
 8007072:	18d3      	adds	r3, r2, r3
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007078:	4bc4      	ldr	r3, [pc, #784]	@ (800738c <ESP_Upkeep+0x38c>)
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
      break;
 800707e:	f000 fc6f 	bl	8007960 <ESP_Upkeep+0x960>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 8007082:	4bca      	ldr	r3, [pc, #808]	@ (80073ac <ESP_Upkeep+0x3ac>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007088:	f005 fd12 	bl	800cab0 <AllDevicesReady>
 800708c:	0003      	movs	r3, r0
 800708e:	001a      	movs	r2, r3
 8007090:	2301      	movs	r3, #1
 8007092:	4053      	eors	r3, r2
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <ESP_Upkeep+0x9e>
 800709a:	f000 fc52 	bl	8007942 <ESP_Upkeep+0x942>
        break;
      }
      SetESPIndicator();
 800709e:	f00a fc49 	bl	8011934 <SetESPIndicator>
      if(!EspTurnedOn){
 80070a2:	4bc3      	ldr	r3, [pc, #780]	@ (80073b0 <ESP_Upkeep+0x3b0>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2201      	movs	r2, #1
 80070a8:	4053      	eors	r3, r2
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d036      	beq.n	800711e <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80070b0:	2380      	movs	r3, #128	@ 0x80
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	48bf      	ldr	r0, [pc, #764]	@ (80073b4 <ESP_Upkeep+0x3b4>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	0019      	movs	r1, r3
 80070ba:	f00d fd94 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80070be:	2001      	movs	r0, #1
 80070c0:	f00c fb0a 	bl	80136d8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80070c4:	2380      	movs	r3, #128	@ 0x80
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	48ba      	ldr	r0, [pc, #744]	@ (80073b4 <ESP_Upkeep+0x3b4>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	0019      	movs	r1, r3
 80070ce:	f00d fd8a 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80070d2:	2001      	movs	r0, #1
 80070d4:	f00c fb00 	bl	80136d8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80070d8:	4bb7      	ldr	r3, [pc, #732]	@ (80073b8 <ESP_Upkeep+0x3b8>)
 80070da:	2200      	movs	r2, #0
 80070dc:	2101      	movs	r1, #1
 80070de:	0018      	movs	r0, r3
 80070e0:	f00d fd81 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80070e4:	2001      	movs	r0, #1
 80070e6:	f00c faf7 	bl	80136d8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80070ea:	4bb3      	ldr	r3, [pc, #716]	@ (80073b8 <ESP_Upkeep+0x3b8>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	2102      	movs	r1, #2
 80070f0:	0018      	movs	r0, r3
 80070f2:	f00d fd78 	bl	8014be6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80070f6:	2001      	movs	r0, #1
 80070f8:	f00c faee 	bl	80136d8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80070fc:	4bae      	ldr	r3, [pc, #696]	@ (80073b8 <ESP_Upkeep+0x3b8>)
 80070fe:	2201      	movs	r2, #1
 8007100:	2101      	movs	r1, #1
 8007102:	0018      	movs	r0, r3
 8007104:	f00d fd6f 	bl	8014be6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007108:	f00c fadc 	bl	80136c4 <HAL_GetTick>
 800710c:	0003      	movs	r3, r0
 800710e:	22af      	movs	r2, #175	@ 0xaf
 8007110:	0092      	lsls	r2, r2, #2
 8007112:	189a      	adds	r2, r3, r2
 8007114:	4ba9      	ldr	r3, [pc, #676]	@ (80073bc <ESP_Upkeep+0x3bc>)
 8007116:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007118:	4ba5      	ldr	r3, [pc, #660]	@ (80073b0 <ESP_Upkeep+0x3b0>)
 800711a:	2201      	movs	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800711e:	2380      	movs	r3, #128	@ 0x80
 8007120:	005a      	lsls	r2, r3, #1
 8007122:	4ba7      	ldr	r3, [pc, #668]	@ (80073c0 <ESP_Upkeep+0x3c0>)
 8007124:	0011      	movs	r1, r2
 8007126:	0018      	movs	r0, r3
 8007128:	f7fd fcfe 	bl	8004b28 <ESP_Receive>
 800712c:	1e03      	subs	r3, r0, #0
 800712e:	d101      	bne.n	8007134 <ESP_Upkeep+0x134>
 8007130:	f000 fc09 	bl	8007946 <ESP_Upkeep+0x946>
        EspState = ESP_STATE_WAIT_AWAKE;
 8007134:	4b95      	ldr	r3, [pc, #596]	@ (800738c <ESP_Upkeep+0x38c>)
 8007136:	220f      	movs	r2, #15
 8007138:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800713a:	f00c fac3 	bl	80136c4 <HAL_GetTick>
 800713e:	0003      	movs	r3, r0
 8007140:	22fa      	movs	r2, #250	@ 0xfa
 8007142:	00d2      	lsls	r2, r2, #3
 8007144:	189a      	adds	r2, r3, r2
 8007146:	4b9f      	ldr	r3, [pc, #636]	@ (80073c4 <ESP_Upkeep+0x3c4>)
 8007148:	601a      	str	r2, [r3, #0]
      }
      break;
 800714a:	f000 fbfc 	bl	8007946 <ESP_Upkeep+0x946>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800714e:	2001      	movs	r0, #1
 8007150:	f7ff fb1a 	bl	8006788 <DMA_ProcessBuffer>
 8007154:	0003      	movs	r3, r0
 8007156:	001a      	movs	r2, r3
 8007158:	4b9b      	ldr	r3, [pc, #620]	@ (80073c8 <ESP_Upkeep+0x3c8>)
 800715a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800715c:	4b9a      	ldr	r3, [pc, #616]	@ (80073c8 <ESP_Upkeep+0x3c8>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	1dbc      	adds	r4, r7, #6
 8007162:	2101      	movs	r1, #1
 8007164:	0018      	movs	r0, r3
 8007166:	f7ff fc0f 	bl	8006988 <ATCompare>
 800716a:	0003      	movs	r3, r0
 800716c:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800716e:	1dbb      	adds	r3, r7, #6
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d108      	bne.n	8007188 <ESP_Upkeep+0x188>
 8007176:	4b93      	ldr	r3, [pc, #588]	@ (80073c4 <ESP_Upkeep+0x3c4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	0018      	movs	r0, r3
 800717c:	f00b fd0e 	bl	8012b9c <TimestampIsReached>
 8007180:	1e03      	subs	r3, r0, #0
 8007182:	d101      	bne.n	8007188 <ESP_Upkeep+0x188>
 8007184:	f000 fbe1 	bl	800794a <ESP_Upkeep+0x94a>
          EspState = ESP_STATE_MODE_SELECT;
 8007188:	4b80      	ldr	r3, [pc, #512]	@ (800738c <ESP_Upkeep+0x38c>)
 800718a:	220b      	movs	r2, #11
 800718c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800718e:	f000 fbdc 	bl	800794a <ESP_Upkeep+0x94a>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8007192:	4b8e      	ldr	r3, [pc, #568]	@ (80073cc <ESP_Upkeep+0x3cc>)
 8007194:	2209      	movs	r2, #9
 8007196:	2114      	movs	r1, #20
 8007198:	0018      	movs	r0, r3
 800719a:	f01d ffa5 	bl	80250e8 <memset>
      if(!InitIsDone || WifiReset){
 800719e:	4b8c      	ldr	r3, [pc, #560]	@ (80073d0 <ESP_Upkeep+0x3d0>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	4053      	eors	r3, r2
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <ESP_Upkeep+0x1b4>
 80071ac:	4b89      	ldr	r3, [pc, #548]	@ (80073d4 <ESP_Upkeep+0x3d4>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d01a      	beq.n	80071ea <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 80071b4:	4b85      	ldr	r3, [pc, #532]	@ (80073cc <ESP_Upkeep+0x3cc>)
 80071b6:	4a88      	ldr	r2, [pc, #544]	@ (80073d8 <ESP_Upkeep+0x3d8>)
 80071b8:	6811      	ldr	r1, [r2, #0]
 80071ba:	6019      	str	r1, [r3, #0]
 80071bc:	8891      	ldrh	r1, [r2, #4]
 80071be:	8099      	strh	r1, [r3, #4]
 80071c0:	7992      	ldrb	r2, [r2, #6]
 80071c2:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80071c4:	4b71      	ldr	r3, [pc, #452]	@ (800738c <ESP_Upkeep+0x38c>)
 80071c6:	2204      	movs	r2, #4
 80071c8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80071ca:	4b84      	ldr	r3, [pc, #528]	@ (80073dc <ESP_Upkeep+0x3dc>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80071d0:	4b71      	ldr	r3, [pc, #452]	@ (8007398 <ESP_Upkeep+0x398>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80071d6:	4b81      	ldr	r3, [pc, #516]	@ (80073dc <ESP_Upkeep+0x3dc>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	001a      	movs	r2, r3
 80071dc:	4b7b      	ldr	r3, [pc, #492]	@ (80073cc <ESP_Upkeep+0x3cc>)
 80071de:	5c9a      	ldrb	r2, [r3, r2]
 80071e0:	4b6c      	ldr	r3, [pc, #432]	@ (8007394 <ESP_Upkeep+0x394>)
 80071e2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80071e4:	4b6d      	ldr	r3, [pc, #436]	@ (800739c <ESP_Upkeep+0x39c>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80071ea:	4b79      	ldr	r3, [pc, #484]	@ (80073d0 <ESP_Upkeep+0x3d0>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01f      	beq.n	8007232 <ESP_Upkeep+0x232>
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <ESP_Upkeep+0x3e0>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2201      	movs	r2, #1
 80071f8:	4053      	eors	r3, r2
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d018      	beq.n	8007232 <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8007200:	4b72      	ldr	r3, [pc, #456]	@ (80073cc <ESP_Upkeep+0x3cc>)
 8007202:	4a78      	ldr	r2, [pc, #480]	@ (80073e4 <ESP_Upkeep+0x3e4>)
 8007204:	6811      	ldr	r1, [r2, #0]
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	8892      	ldrh	r2, [r2, #4]
 800720a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800720c:	4b5f      	ldr	r3, [pc, #380]	@ (800738c <ESP_Upkeep+0x38c>)
 800720e:	2204      	movs	r2, #4
 8007210:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007212:	4b72      	ldr	r3, [pc, #456]	@ (80073dc <ESP_Upkeep+0x3dc>)
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8007218:	4b5f      	ldr	r3, [pc, #380]	@ (8007398 <ESP_Upkeep+0x398>)
 800721a:	2201      	movs	r2, #1
 800721c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800721e:	4b6f      	ldr	r3, [pc, #444]	@ (80073dc <ESP_Upkeep+0x3dc>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	001a      	movs	r2, r3
 8007224:	4b69      	ldr	r3, [pc, #420]	@ (80073cc <ESP_Upkeep+0x3cc>)
 8007226:	5c9a      	ldrb	r2, [r3, r2]
 8007228:	4b5a      	ldr	r3, [pc, #360]	@ (8007394 <ESP_Upkeep+0x394>)
 800722a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800722c:	4b5b      	ldr	r3, [pc, #364]	@ (800739c <ESP_Upkeep+0x39c>)
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8007232:	4b67      	ldr	r3, [pc, #412]	@ (80073d0 <ESP_Upkeep+0x3d0>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d021      	beq.n	800727e <ESP_Upkeep+0x27e>
 800723a:	4b69      	ldr	r3, [pc, #420]	@ (80073e0 <ESP_Upkeep+0x3e0>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01d      	beq.n	800727e <ESP_Upkeep+0x27e>
 8007242:	4b69      	ldr	r3, [pc, #420]	@ (80073e8 <ESP_Upkeep+0x3e8>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2201      	movs	r2, #1
 8007248:	4053      	eors	r3, r2
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b00      	cmp	r3, #0
 800724e:	d016      	beq.n	800727e <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8007250:	4b66      	ldr	r3, [pc, #408]	@ (80073ec <ESP_Upkeep+0x3ec>)
 8007252:	881a      	ldrh	r2, [r3, #0]
 8007254:	4b5d      	ldr	r3, [pc, #372]	@ (80073cc <ESP_Upkeep+0x3cc>)
 8007256:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007258:	4b4c      	ldr	r3, [pc, #304]	@ (800738c <ESP_Upkeep+0x38c>)
 800725a:	2204      	movs	r2, #4
 800725c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800725e:	4b5f      	ldr	r3, [pc, #380]	@ (80073dc <ESP_Upkeep+0x3dc>)
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8007264:	4b4c      	ldr	r3, [pc, #304]	@ (8007398 <ESP_Upkeep+0x398>)
 8007266:	2204      	movs	r2, #4
 8007268:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800726a:	4b5c      	ldr	r3, [pc, #368]	@ (80073dc <ESP_Upkeep+0x3dc>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	001a      	movs	r2, r3
 8007270:	4b56      	ldr	r3, [pc, #344]	@ (80073cc <ESP_Upkeep+0x3cc>)
 8007272:	5c9a      	ldrb	r2, [r3, r2]
 8007274:	4b47      	ldr	r3, [pc, #284]	@ (8007394 <ESP_Upkeep+0x394>)
 8007276:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007278:	4b48      	ldr	r3, [pc, #288]	@ (800739c <ESP_Upkeep+0x39c>)
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800727e:	4b54      	ldr	r3, [pc, #336]	@ (80073d0 <ESP_Upkeep+0x3d0>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d02c      	beq.n	80072e0 <ESP_Upkeep+0x2e0>
 8007286:	4b56      	ldr	r3, [pc, #344]	@ (80073e0 <ESP_Upkeep+0x3e0>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d028      	beq.n	80072e0 <ESP_Upkeep+0x2e0>
 800728e:	4b56      	ldr	r3, [pc, #344]	@ (80073e8 <ESP_Upkeep+0x3e8>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d024      	beq.n	80072e0 <ESP_Upkeep+0x2e0>
 8007296:	4b56      	ldr	r3, [pc, #344]	@ (80073f0 <ESP_Upkeep+0x3f0>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2201      	movs	r2, #1
 800729c:	4053      	eors	r3, r2
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01d      	beq.n	80072e0 <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 80072a4:	4b49      	ldr	r3, [pc, #292]	@ (80073cc <ESP_Upkeep+0x3cc>)
 80072a6:	4a53      	ldr	r2, [pc, #332]	@ (80073f4 <ESP_Upkeep+0x3f4>)
 80072a8:	8811      	ldrh	r1, [r2, #0]
 80072aa:	8019      	strh	r1, [r3, #0]
 80072ac:	7892      	ldrb	r2, [r2, #2]
 80072ae:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80072b0:	4b36      	ldr	r3, [pc, #216]	@ (800738c <ESP_Upkeep+0x38c>)
 80072b2:	2204      	movs	r2, #4
 80072b4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80072b6:	4b49      	ldr	r3, [pc, #292]	@ (80073dc <ESP_Upkeep+0x3dc>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80072bc:	4b36      	ldr	r3, [pc, #216]	@ (8007398 <ESP_Upkeep+0x398>)
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80072c2:	f00c f9ff 	bl	80136c4 <HAL_GetTick>
 80072c6:	0002      	movs	r2, r0
 80072c8:	4b4b      	ldr	r3, [pc, #300]	@ (80073f8 <ESP_Upkeep+0x3f8>)
 80072ca:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80072cc:	4b43      	ldr	r3, [pc, #268]	@ (80073dc <ESP_Upkeep+0x3dc>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	001a      	movs	r2, r3
 80072d2:	4b3e      	ldr	r3, [pc, #248]	@ (80073cc <ESP_Upkeep+0x3cc>)
 80072d4:	5c9a      	ldrb	r2, [r3, r2]
 80072d6:	4b2f      	ldr	r3, [pc, #188]	@ (8007394 <ESP_Upkeep+0x394>)
 80072d8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80072da:	4b30      	ldr	r3, [pc, #192]	@ (800739c <ESP_Upkeep+0x39c>)
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80072e0:	4b3b      	ldr	r3, [pc, #236]	@ (80073d0 <ESP_Upkeep+0x3d0>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d027      	beq.n	8007338 <ESP_Upkeep+0x338>
 80072e8:	4b3d      	ldr	r3, [pc, #244]	@ (80073e0 <ESP_Upkeep+0x3e0>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d023      	beq.n	8007338 <ESP_Upkeep+0x338>
 80072f0:	4b3d      	ldr	r3, [pc, #244]	@ (80073e8 <ESP_Upkeep+0x3e8>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01f      	beq.n	8007338 <ESP_Upkeep+0x338>
 80072f8:	4b3d      	ldr	r3, [pc, #244]	@ (80073f0 <ESP_Upkeep+0x3f0>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007300:	4b3e      	ldr	r3, [pc, #248]	@ (80073fc <ESP_Upkeep+0x3fc>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4b31      	ldr	r3, [pc, #196]	@ (80073cc <ESP_Upkeep+0x3cc>)
 8007306:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007308:	4b20      	ldr	r3, [pc, #128]	@ (800738c <ESP_Upkeep+0x38c>)
 800730a:	2204      	movs	r2, #4
 800730c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800730e:	4b33      	ldr	r3, [pc, #204]	@ (80073dc <ESP_Upkeep+0x3dc>)
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007314:	4b20      	ldr	r3, [pc, #128]	@ (8007398 <ESP_Upkeep+0x398>)
 8007316:	2205      	movs	r2, #5
 8007318:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800731a:	f00c f9d3 	bl	80136c4 <HAL_GetTick>
 800731e:	0002      	movs	r2, r0
 8007320:	4b35      	ldr	r3, [pc, #212]	@ (80073f8 <ESP_Upkeep+0x3f8>)
 8007322:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007324:	4b2d      	ldr	r3, [pc, #180]	@ (80073dc <ESP_Upkeep+0x3dc>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	001a      	movs	r2, r3
 800732a:	4b28      	ldr	r3, [pc, #160]	@ (80073cc <ESP_Upkeep+0x3cc>)
 800732c:	5c9a      	ldrb	r2, [r3, r2]
 800732e:	4b19      	ldr	r3, [pc, #100]	@ (8007394 <ESP_Upkeep+0x394>)
 8007330:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007332:	4b1a      	ldr	r3, [pc, #104]	@ (800739c <ESP_Upkeep+0x39c>)
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007338:	4b31      	ldr	r3, [pc, #196]	@ (8007400 <ESP_Upkeep+0x400>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d100      	bne.n	8007342 <ESP_Upkeep+0x342>
 8007340:	e305      	b.n	800794e <ESP_Upkeep+0x94e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007342:	4b22      	ldr	r3, [pc, #136]	@ (80073cc <ESP_Upkeep+0x3cc>)
 8007344:	4a2f      	ldr	r2, [pc, #188]	@ (8007404 <ESP_Upkeep+0x404>)
 8007346:	6811      	ldr	r1, [r2, #0]
 8007348:	6019      	str	r1, [r3, #0]
 800734a:	7912      	ldrb	r2, [r2, #4]
 800734c:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 800734e:	4a2e      	ldr	r2, [pc, #184]	@ (8007408 <ESP_Upkeep+0x408>)
 8007350:	4b14      	ldr	r3, [pc, #80]	@ (80073a4 <ESP_Upkeep+0x3a4>)
 8007352:	0019      	movs	r1, r3
 8007354:	2003      	movs	r0, #3
 8007356:	f00b fc77 	bl	8012c48 <CreateLine>
        DisableConnectedDevices();
 800735a:	f005 fd05 	bl	800cd68 <DisableConnectedDevices>
        usblog = false;
 800735e:	4b2b      	ldr	r3, [pc, #172]	@ (800740c <ESP_Upkeep+0x40c>)
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007364:	4b09      	ldr	r3, [pc, #36]	@ (800738c <ESP_Upkeep+0x38c>)
 8007366:	2204      	movs	r2, #4
 8007368:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800736a:	4b1c      	ldr	r3, [pc, #112]	@ (80073dc <ESP_Upkeep+0x3dc>)
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007370:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <ESP_Upkeep+0x398>)
 8007372:	2203      	movs	r2, #3
 8007374:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007376:	4b19      	ldr	r3, [pc, #100]	@ (80073dc <ESP_Upkeep+0x3dc>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	001a      	movs	r2, r3
 800737c:	4b13      	ldr	r3, [pc, #76]	@ (80073cc <ESP_Upkeep+0x3cc>)
 800737e:	5c9a      	ldrb	r2, [r3, r2]
 8007380:	4b04      	ldr	r3, [pc, #16]	@ (8007394 <ESP_Upkeep+0x394>)
 8007382:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007384:	4b05      	ldr	r3, [pc, #20]	@ (800739c <ESP_Upkeep+0x39c>)
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
      }
    break;
 800738a:	e2e0      	b.n	800794e <ESP_Upkeep+0x94e>
 800738c:	2000002c 	.word	0x2000002c
 8007390:	20000003 	.word	0x20000003
 8007394:	2000068e 	.word	0x2000068e
 8007398:	2000068f 	.word	0x2000068f
 800739c:	2000068d 	.word	0x2000068d
 80073a0:	0802a624 	.word	0x0802a624
 80073a4:	080295c8 	.word	0x080295c8
 80073a8:	0802d28c 	.word	0x0802d28c
 80073ac:	20000e3c 	.word	0x20000e3c
 80073b0:	200005b8 	.word	0x200005b8
 80073b4:	50000800 	.word	0x50000800
 80073b8:	50001c00 	.word	0x50001c00
 80073bc:	20000684 	.word	0x20000684
 80073c0:	200004b8 	.word	0x200004b8
 80073c4:	200007bc 	.word	0x200007bc
 80073c8:	2000002f 	.word	0x2000002f
 80073cc:	20000674 	.word	0x20000674
 80073d0:	200005b9 	.word	0x200005b9
 80073d4:	200005ba 	.word	0x200005ba
 80073d8:	20000004 	.word	0x20000004
 80073dc:	2000067e 	.word	0x2000067e
 80073e0:	200005bc 	.word	0x200005bc
 80073e4:	20000014 	.word	0x20000014
 80073e8:	200005bd 	.word	0x200005bd
 80073ec:	20000010 	.word	0x20000010
 80073f0:	20000002 	.word	0x20000002
 80073f4:	2000000c 	.word	0x2000000c
 80073f8:	200005d0 	.word	0x200005d0
 80073fc:	20000024 	.word	0x20000024
 8007400:	200005bb 	.word	0x200005bb
 8007404:	2000001c 	.word	0x2000001c
 8007408:	0802a650 	.word	0x0802a650
 800740c:	20000207 	.word	0x20000207

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007410:	4bdd      	ldr	r3, [pc, #884]	@ (8007788 <ESP_Upkeep+0x788>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	1dfc      	adds	r4, r7, #7
 8007416:	0018      	movs	r0, r3
 8007418:	f7ff faf8 	bl	8006a0c <AT_Send>
 800741c:	0003      	movs	r3, r0
 800741e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007420:	1dfb      	adds	r3, r7, #7
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d100      	bne.n	800742a <ESP_Upkeep+0x42a>
 8007428:	e293      	b.n	8007952 <ESP_Upkeep+0x952>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800742a:	4bd8      	ldr	r3, [pc, #864]	@ (800778c <ESP_Upkeep+0x78c>)
 800742c:	2203      	movs	r2, #3
 800742e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007430:	e28f      	b.n	8007952 <ESP_Upkeep+0x952>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007432:	4bd7      	ldr	r3, [pc, #860]	@ (8007790 <ESP_Upkeep+0x790>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <ESP_Upkeep+0x44a>
 800743a:	4bd6      	ldr	r3, [pc, #856]	@ (8007794 <ESP_Upkeep+0x794>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d003      	beq.n	800744a <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 8007442:	4bd2      	ldr	r3, [pc, #840]	@ (800778c <ESP_Upkeep+0x78c>)
 8007444:	220b      	movs	r2, #11
 8007446:	701a      	strb	r2, [r3, #0]
        break;
 8007448:	e28a      	b.n	8007960 <ESP_Upkeep+0x960>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 800744a:	4bd3      	ldr	r3, [pc, #844]	@ (8007798 <ESP_Upkeep+0x798>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	0018      	movs	r0, r3
 8007450:	f00b fba4 	bl	8012b9c <TimestampIsReached>
 8007454:	1e03      	subs	r3, r0, #0
 8007456:	d100      	bne.n	800745a <ESP_Upkeep+0x45a>
 8007458:	e27d      	b.n	8007956 <ESP_Upkeep+0x956>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800745a:	4bd0      	ldr	r3, [pc, #832]	@ (800779c <ESP_Upkeep+0x79c>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	0018      	movs	r0, r3
 8007460:	f7ff f992 	bl	8006788 <DMA_ProcessBuffer>
 8007464:	0003      	movs	r3, r0
 8007466:	001a      	movs	r2, r3
 8007468:	4bcd      	ldr	r3, [pc, #820]	@ (80077a0 <ESP_Upkeep+0x7a0>)
 800746a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800746c:	4bcc      	ldr	r3, [pc, #816]	@ (80077a0 <ESP_Upkeep+0x7a0>)
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	4bca      	ldr	r3, [pc, #808]	@ (800779c <ESP_Upkeep+0x79c>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	1d7c      	adds	r4, r7, #5
 8007476:	0019      	movs	r1, r3
 8007478:	0010      	movs	r0, r2
 800747a:	f7ff fa85 	bl	8006988 <ATCompare>
 800747e:	0003      	movs	r3, r0
 8007480:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007482:	4bc7      	ldr	r3, [pc, #796]	@ (80077a0 <ESP_Upkeep+0x7a0>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d138      	bne.n	80074fc <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 800748a:	4bbf      	ldr	r3, [pc, #764]	@ (8007788 <ESP_Upkeep+0x788>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d108      	bne.n	80074a4 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 8007492:	4bbd      	ldr	r3, [pc, #756]	@ (8007788 <ESP_Upkeep+0x788>)
 8007494:	220e      	movs	r2, #14
 8007496:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007498:	4bc0      	ldr	r3, [pc, #768]	@ (800779c <ESP_Upkeep+0x79c>)
 800749a:	2202      	movs	r2, #2
 800749c:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800749e:	4bc1      	ldr	r3, [pc, #772]	@ (80077a4 <ESP_Upkeep+0x7a4>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80074a4:	4bb9      	ldr	r3, [pc, #740]	@ (800778c <ESP_Upkeep+0x78c>)
 80074a6:	2204      	movs	r2, #4
 80074a8:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 80074aa:	4bbf      	ldr	r3, [pc, #764]	@ (80077a8 <ESP_Upkeep+0x7a8>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	4bbd      	ldr	r3, [pc, #756]	@ (80077a8 <ESP_Upkeep+0x7a8>)
 80074b4:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 80074b6:	4bbc      	ldr	r3, [pc, #752]	@ (80077a8 <ESP_Upkeep+0x7a8>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d91e      	bls.n	80074fc <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80074be:	f00c f901 	bl	80136c4 <HAL_GetTick>
 80074c2:	0003      	movs	r3, r0
 80074c4:	4ab9      	ldr	r2, [pc, #740]	@ (80077ac <ESP_Upkeep+0x7ac>)
 80074c6:	189a      	adds	r2, r3, r2
 80074c8:	4bb3      	ldr	r3, [pc, #716]	@ (8007798 <ESP_Upkeep+0x798>)
 80074ca:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80074cc:	4bb8      	ldr	r3, [pc, #736]	@ (80077b0 <ESP_Upkeep+0x7b0>)
 80074ce:	2201      	movs	r2, #1
 80074d0:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80074d2:	f7ff fa4b 	bl	800696c <clearDMABuffer>
            stop = HAL_GetTick();
 80074d6:	f00c f8f5 	bl	80136c4 <HAL_GetTick>
 80074da:	0002      	movs	r2, r0
 80074dc:	4bb5      	ldr	r3, [pc, #724]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 80074de:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80074e0:	4bb4      	ldr	r3, [pc, #720]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4bb4      	ldr	r3, [pc, #720]	@ (80077b8 <ESP_Upkeep+0x7b8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	4ab4      	ldr	r2, [pc, #720]	@ (80077bc <ESP_Upkeep+0x7bc>)
 80074ec:	49b4      	ldr	r1, [pc, #720]	@ (80077c0 <ESP_Upkeep+0x7c0>)
 80074ee:	2001      	movs	r0, #1
 80074f0:	f00b fbaa 	bl	8012c48 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80074f4:	4ba5      	ldr	r3, [pc, #660]	@ (800778c <ESP_Upkeep+0x78c>)
 80074f6:	220d      	movs	r2, #13
 80074f8:	701a      	strb	r2, [r3, #0]
            break;
 80074fa:	e231      	b.n	8007960 <ESP_Upkeep+0x960>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80074fc:	4ba8      	ldr	r3, [pc, #672]	@ (80077a0 <ESP_Upkeep+0x7a0>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b03      	cmp	r3, #3
 8007502:	d106      	bne.n	8007512 <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007504:	f00c f8de 	bl	80136c4 <HAL_GetTick>
 8007508:	0003      	movs	r3, r0
 800750a:	330a      	adds	r3, #10
 800750c:	001a      	movs	r2, r3
 800750e:	4ba2      	ldr	r3, [pc, #648]	@ (8007798 <ESP_Upkeep+0x798>)
 8007510:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007512:	4ba3      	ldr	r3, [pc, #652]	@ (80077a0 <ESP_Upkeep+0x7a0>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b0a      	cmp	r3, #10
 8007518:	d106      	bne.n	8007528 <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 800751a:	f00c f8d3 	bl	80136c4 <HAL_GetTick>
 800751e:	0003      	movs	r3, r0
 8007520:	330a      	adds	r3, #10
 8007522:	001a      	movs	r2, r3
 8007524:	4b9c      	ldr	r3, [pc, #624]	@ (8007798 <ESP_Upkeep+0x798>)
 8007526:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007528:	4b9d      	ldr	r3, [pc, #628]	@ (80077a0 <ESP_Upkeep+0x7a0>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b06      	cmp	r3, #6
 800752e:	d14b      	bne.n	80075c8 <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 8007530:	4ba4      	ldr	r3, [pc, #656]	@ (80077c4 <ESP_Upkeep+0x7c4>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	3301      	adds	r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	4ba2      	ldr	r3, [pc, #648]	@ (80077c4 <ESP_Upkeep+0x7c4>)
 800753a:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 800753c:	4aa2      	ldr	r2, [pc, #648]	@ (80077c8 <ESP_Upkeep+0x7c8>)
 800753e:	4ba0      	ldr	r3, [pc, #640]	@ (80077c0 <ESP_Upkeep+0x7c0>)
 8007540:	0019      	movs	r1, r3
 8007542:	2001      	movs	r0, #1
 8007544:	f00b fb80 	bl	8012c48 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007548:	4b9e      	ldr	r3, [pc, #632]	@ (80077c4 <ESP_Upkeep+0x7c4>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d924      	bls.n	800759a <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007550:	f00c f8b8 	bl	80136c4 <HAL_GetTick>
 8007554:	0003      	movs	r3, r0
 8007556:	4a9d      	ldr	r2, [pc, #628]	@ (80077cc <ESP_Upkeep+0x7cc>)
 8007558:	189a      	adds	r2, r3, r2
 800755a:	4b8f      	ldr	r3, [pc, #572]	@ (8007798 <ESP_Upkeep+0x798>)
 800755c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800755e:	4b94      	ldr	r3, [pc, #592]	@ (80077b0 <ESP_Upkeep+0x7b0>)
 8007560:	2201      	movs	r2, #1
 8007562:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007564:	f7ff fa02 	bl	800696c <clearDMABuffer>
            stop = HAL_GetTick();
 8007568:	f00c f8ac 	bl	80136c4 <HAL_GetTick>
 800756c:	0002      	movs	r2, r0
 800756e:	4b91      	ldr	r3, [pc, #580]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 8007570:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007572:	4b90      	ldr	r3, [pc, #576]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	4b90      	ldr	r3, [pc, #576]	@ (80077b8 <ESP_Upkeep+0x7b8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	4a94      	ldr	r2, [pc, #592]	@ (80077d0 <ESP_Upkeep+0x7d0>)
 800757e:	4990      	ldr	r1, [pc, #576]	@ (80077c0 <ESP_Upkeep+0x7c0>)
 8007580:	2001      	movs	r0, #1
 8007582:	f00b fb61 	bl	8012c48 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007586:	4b81      	ldr	r3, [pc, #516]	@ (800778c <ESP_Upkeep+0x78c>)
 8007588:	220d      	movs	r2, #13
 800758a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 800758c:	4b7e      	ldr	r3, [pc, #504]	@ (8007788 <ESP_Upkeep+0x788>)
 800758e:	2214      	movs	r2, #20
 8007590:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007592:	4b82      	ldr	r3, [pc, #520]	@ (800779c <ESP_Upkeep+0x79c>)
 8007594:	2200      	movs	r2, #0
 8007596:	701a      	strb	r2, [r3, #0]
            break;
 8007598:	e1e2      	b.n	8007960 <ESP_Upkeep+0x960>
          }
          if(ATCommand != AT_SENDDATA){
 800759a:	4b7b      	ldr	r3, [pc, #492]	@ (8007788 <ESP_Upkeep+0x788>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b0f      	cmp	r3, #15
 80075a0:	d003      	beq.n	80075aa <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 80075a2:	4b7a      	ldr	r3, [pc, #488]	@ (800778c <ESP_Upkeep+0x78c>)
 80075a4:	2204      	movs	r2, #4
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e00e      	b.n	80075c8 <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 80075aa:	4b77      	ldr	r3, [pc, #476]	@ (8007788 <ESP_Upkeep+0x788>)
 80075ac:	220e      	movs	r2, #14
 80075ae:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 80075b0:	4b7c      	ldr	r3, [pc, #496]	@ (80077a4 <ESP_Upkeep+0x7a4>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	4b7a      	ldr	r3, [pc, #488]	@ (80077a4 <ESP_Upkeep+0x7a4>)
 80075ba:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80075bc:	4b77      	ldr	r3, [pc, #476]	@ (800779c <ESP_Upkeep+0x79c>)
 80075be:	2202      	movs	r2, #2
 80075c0:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80075c2:	4b72      	ldr	r3, [pc, #456]	@ (800778c <ESP_Upkeep+0x78c>)
 80075c4:	2204      	movs	r2, #4
 80075c6:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80075c8:	1d7b      	adds	r3, r7, #5
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d100      	bne.n	80075d2 <ESP_Upkeep+0x5d2>
 80075d0:	e1c1      	b.n	8007956 <ESP_Upkeep+0x956>
          EspState = ESP_STATE_NEXT_AT;
 80075d2:	4b6e      	ldr	r3, [pc, #440]	@ (800778c <ESP_Upkeep+0x78c>)
 80075d4:	2205      	movs	r2, #5
 80075d6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80075d8:	e1bd      	b.n	8007956 <ESP_Upkeep+0x956>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 80075da:	4b72      	ldr	r3, [pc, #456]	@ (80077a4 <ESP_Upkeep+0x7a4>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	3301      	adds	r3, #1
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	4b70      	ldr	r3, [pc, #448]	@ (80077a4 <ESP_Upkeep+0x7a4>)
 80075e4:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80075e6:	4b6f      	ldr	r3, [pc, #444]	@ (80077a4 <ESP_Upkeep+0x7a4>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	001a      	movs	r2, r3
 80075ec:	4b79      	ldr	r3, [pc, #484]	@ (80077d4 <ESP_Upkeep+0x7d4>)
 80075ee:	5c9a      	ldrb	r2, [r3, r2]
 80075f0:	4b65      	ldr	r3, [pc, #404]	@ (8007788 <ESP_Upkeep+0x788>)
 80075f2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80075f4:	4b64      	ldr	r3, [pc, #400]	@ (8007788 <ESP_Upkeep+0x788>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d102      	bne.n	8007602 <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80075fc:	4b67      	ldr	r3, [pc, #412]	@ (800779c <ESP_Upkeep+0x79c>)
 80075fe:	2201      	movs	r2, #1
 8007600:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007602:	4b61      	ldr	r3, [pc, #388]	@ (8007788 <ESP_Upkeep+0x788>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b0e      	cmp	r3, #14
 8007608:	d102      	bne.n	8007610 <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 800760a:	4b64      	ldr	r3, [pc, #400]	@ (800779c <ESP_Upkeep+0x79c>)
 800760c:	2202      	movs	r2, #2
 800760e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007610:	4b5d      	ldr	r3, [pc, #372]	@ (8007788 <ESP_Upkeep+0x788>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b0e      	cmp	r3, #14
 8007616:	d006      	beq.n	8007626 <ESP_Upkeep+0x626>
 8007618:	4b5b      	ldr	r3, [pc, #364]	@ (8007788 <ESP_Upkeep+0x788>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b03      	cmp	r3, #3
 800761e:	d002      	beq.n	8007626 <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007620:	4b5e      	ldr	r3, [pc, #376]	@ (800779c <ESP_Upkeep+0x79c>)
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007626:	4b58      	ldr	r3, [pc, #352]	@ (8007788 <ESP_Upkeep+0x788>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b11      	cmp	r3, #17
 800762c:	d102      	bne.n	8007634 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 800762e:	4b5b      	ldr	r3, [pc, #364]	@ (800779c <ESP_Upkeep+0x79c>)
 8007630:	2205      	movs	r2, #5
 8007632:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8007634:	4b55      	ldr	r3, [pc, #340]	@ (800778c <ESP_Upkeep+0x78c>)
 8007636:	2204      	movs	r2, #4
 8007638:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 800763a:	4b53      	ldr	r3, [pc, #332]	@ (8007788 <ESP_Upkeep+0x788>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b14      	cmp	r3, #20
 8007640:	d000      	beq.n	8007644 <ESP_Upkeep+0x644>
 8007642:	e18a      	b.n	800795a <ESP_Upkeep+0x95a>
        if(Mode == AT_MODE_SEND){
 8007644:	4b53      	ldr	r3, [pc, #332]	@ (8007794 <ESP_Upkeep+0x794>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d124      	bne.n	8007696 <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800764c:	f00c f83a 	bl	80136c4 <HAL_GetTick>
 8007650:	0003      	movs	r3, r0
 8007652:	4a56      	ldr	r2, [pc, #344]	@ (80077ac <ESP_Upkeep+0x7ac>)
 8007654:	189a      	adds	r2, r3, r2
 8007656:	4b50      	ldr	r3, [pc, #320]	@ (8007798 <ESP_Upkeep+0x798>)
 8007658:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 800765a:	f7ff f987 	bl	800696c <clearDMABuffer>
          stop = HAL_GetTick();
 800765e:	f00c f831 	bl	80136c4 <HAL_GetTick>
 8007662:	0002      	movs	r2, r0
 8007664:	4b53      	ldr	r3, [pc, #332]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 8007666:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007668:	4b52      	ldr	r3, [pc, #328]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	4b52      	ldr	r3, [pc, #328]	@ (80077b8 <ESP_Upkeep+0x7b8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	4a59      	ldr	r2, [pc, #356]	@ (80077d8 <ESP_Upkeep+0x7d8>)
 8007674:	4959      	ldr	r1, [pc, #356]	@ (80077dc <ESP_Upkeep+0x7dc>)
 8007676:	2002      	movs	r0, #2
 8007678:	f00b fae6 	bl	8012c48 <CreateLine>
          ResetdBAmax();
 800767c:	f005 fbfc 	bl	800ce78 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007680:	f7fd f992 	bl	80049a8 <resetMaxMeasurementValues>
          showTime();
 8007684:	f001 fc52 	bl	8008f2c <showTime>
          ESPTransmitDone = true;
 8007688:	4b49      	ldr	r3, [pc, #292]	@ (80077b0 <ESP_Upkeep+0x7b0>)
 800768a:	2201      	movs	r2, #1
 800768c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 800768e:	4b3f      	ldr	r3, [pc, #252]	@ (800778c <ESP_Upkeep+0x78c>)
 8007690:	220d      	movs	r2, #13
 8007692:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007694:	e161      	b.n	800795a <ESP_Upkeep+0x95a>
        else if (Mode == AT_MODE_GETTIME) {
 8007696:	4b3f      	ldr	r3, [pc, #252]	@ (8007794 <ESP_Upkeep+0x794>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b05      	cmp	r3, #5
 800769c:	d13a      	bne.n	8007714 <ESP_Upkeep+0x714>
            setTime = false;
 800769e:	4b50      	ldr	r3, [pc, #320]	@ (80077e0 <ESP_Upkeep+0x7e0>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 80076a4:	f001 fc94 	bl	8008fd0 <calculateNextNTPTime>
 80076a8:	0002      	movs	r2, r0
 80076aa:	4b4e      	ldr	r3, [pc, #312]	@ (80077e4 <ESP_Upkeep+0x7e4>)
 80076ac:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 80076ae:	4b4d      	ldr	r3, [pc, #308]	@ (80077e4 <ESP_Upkeep+0x7e4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a4d      	ldr	r2, [pc, #308]	@ (80077e8 <ESP_Upkeep+0x7e8>)
 80076b4:	189a      	adds	r2, r3, r2
 80076b6:	4b4b      	ldr	r3, [pc, #300]	@ (80077e4 <ESP_Upkeep+0x7e4>)
 80076b8:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 80076ba:	4b4b      	ldr	r3, [pc, #300]	@ (80077e8 <ESP_Upkeep+0x7e8>)
 80076bc:	4a4b      	ldr	r2, [pc, #300]	@ (80077ec <ESP_Upkeep+0x7ec>)
 80076be:	4947      	ldr	r1, [pc, #284]	@ (80077dc <ESP_Upkeep+0x7dc>)
 80076c0:	2002      	movs	r0, #2
 80076c2:	f00b fac1 	bl	8012c48 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 80076c6:	4b4a      	ldr	r3, [pc, #296]	@ (80077f0 <ESP_Upkeep+0x7f0>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b33      	ldr	r3, [pc, #204]	@ (8007798 <ESP_Upkeep+0x798>)
 80076cc:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 80076ce:	f7ff f94d 	bl	800696c <clearDMABuffer>
            stop = HAL_GetTick();
 80076d2:	f00b fff7 	bl	80136c4 <HAL_GetTick>
 80076d6:	0002      	movs	r2, r0
 80076d8:	4b36      	ldr	r3, [pc, #216]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 80076da:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 80076dc:	4b35      	ldr	r3, [pc, #212]	@ (80077b4 <ESP_Upkeep+0x7b4>)
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	4b35      	ldr	r3, [pc, #212]	@ (80077b8 <ESP_Upkeep+0x7b8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	4a43      	ldr	r2, [pc, #268]	@ (80077f4 <ESP_Upkeep+0x7f4>)
 80076e8:	493c      	ldr	r1, [pc, #240]	@ (80077dc <ESP_Upkeep+0x7dc>)
 80076ea:	2002      	movs	r0, #2
 80076ec:	f00b faac 	bl	8012c48 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 80076f0:	f00b ffe8 	bl	80136c4 <HAL_GetTick>
 80076f4:	0003      	movs	r3, r0
 80076f6:	4a40      	ldr	r2, [pc, #256]	@ (80077f8 <ESP_Upkeep+0x7f8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d804      	bhi.n	8007706 <ESP_Upkeep+0x706>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 80076fc:	4b3f      	ldr	r3, [pc, #252]	@ (80077fc <ESP_Upkeep+0x7fc>)
 80076fe:	4a40      	ldr	r2, [pc, #256]	@ (8007800 <ESP_Upkeep+0x800>)
 8007700:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007702:	f005 fad9 	bl	800ccb8 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007706:	4b21      	ldr	r3, [pc, #132]	@ (800778c <ESP_Upkeep+0x78c>)
 8007708:	220d      	movs	r2, #13
 800770a:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 800770c:	4b21      	ldr	r3, [pc, #132]	@ (8007794 <ESP_Upkeep+0x794>)
 800770e:	2202      	movs	r2, #2
 8007710:	701a      	strb	r2, [r3, #0]
    break;
 8007712:	e122      	b.n	800795a <ESP_Upkeep+0x95a>
          EspState = ESP_STATE_RESET;
 8007714:	4b1d      	ldr	r3, [pc, #116]	@ (800778c <ESP_Upkeep+0x78c>)
 8007716:	2209      	movs	r2, #9
 8007718:	701a      	strb	r2, [r3, #0]
    break;
 800771a:	e11e      	b.n	800795a <ESP_Upkeep+0x95a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 800771c:	4b39      	ldr	r3, [pc, #228]	@ (8007804 <ESP_Upkeep+0x804>)
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007722:	4b39      	ldr	r3, [pc, #228]	@ (8007808 <ESP_Upkeep+0x808>)
 8007724:	2200      	movs	r2, #0
 8007726:	2101      	movs	r1, #1
 8007728:	0018      	movs	r0, r3
 800772a:	f00d fa5c 	bl	8014be6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800772e:	2001      	movs	r0, #1
 8007730:	f00b ffd2 	bl	80136d8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007734:	2380      	movs	r3, #128	@ 0x80
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	4834      	ldr	r0, [pc, #208]	@ (800780c <ESP_Upkeep+0x80c>)
 800773a:	2200      	movs	r2, #0
 800773c:	0019      	movs	r1, r3
 800773e:	f00d fa52 	bl	8014be6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007742:	2001      	movs	r0, #1
 8007744:	f00b ffc8 	bl	80136d8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007748:	4b2f      	ldr	r3, [pc, #188]	@ (8007808 <ESP_Upkeep+0x808>)
 800774a:	2200      	movs	r2, #0
 800774c:	2102      	movs	r1, #2
 800774e:	0018      	movs	r0, r3
 8007750:	f00d fa49 	bl	8014be6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007754:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <ESP_Upkeep+0x78c>)
 8007756:	2209      	movs	r2, #9
 8007758:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 800775a:	2001      	movs	r0, #1
 800775c:	f00b ffbc 	bl	80136d8 <HAL_Delay>
      ResetESPIndicator();
 8007760:	f00a f900 	bl	8011964 <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 8007764:	f001 fbb2 	bl	8008ecc <Check_USB_PowerOn>
 8007768:	1e03      	subs	r3, r0, #0
 800776a:	d103      	bne.n	8007774 <ESP_Upkeep+0x774>
 800776c:	4b28      	ldr	r3, [pc, #160]	@ (8007810 <ESP_Upkeep+0x810>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <ESP_Upkeep+0x778>
        EnabledConnectedDevices();
 8007774:	f005 faa0 	bl	800ccb8 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007778:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <ESP_Upkeep+0x7a8>)
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 800777e:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <ESP_Upkeep+0x7c4>)
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
      break;
 8007784:	e0ec      	b.n	8007960 <ESP_Upkeep+0x960>
 8007786:	46c0      	nop			@ (mov r8, r8)
 8007788:	2000068e 	.word	0x2000068e
 800778c:	2000002c 	.word	0x2000002c
 8007790:	200005bb 	.word	0x200005bb
 8007794:	2000068f 	.word	0x2000068f
 8007798:	20000684 	.word	0x20000684
 800779c:	2000068d 	.word	0x2000068d
 80077a0:	2000002f 	.word	0x2000002f
 80077a4:	2000067e 	.word	0x2000067e
 80077a8:	2000067f 	.word	0x2000067f
 80077ac:	0003a980 	.word	0x0003a980
 80077b0:	200005c0 	.word	0x200005c0
 80077b4:	200005d4 	.word	0x200005d4
 80077b8:	200005d0 	.word	0x200005d0
 80077bc:	0802a680 	.word	0x0802a680
 80077c0:	080295ec 	.word	0x080295ec
 80077c4:	20000680 	.word	0x20000680
 80077c8:	0802a6b4 	.word	0x0802a6b4
 80077cc:	0000c350 	.word	0x0000c350
 80077d0:	0802a6f0 	.word	0x0802a6f0
 80077d4:	20000674 	.word	0x20000674
 80077d8:	0802a720 	.word	0x0802a720
 80077dc:	0802a738 	.word	0x0802a738
 80077e0:	20000002 	.word	0x20000002
 80077e4:	20000688 	.word	0x20000688
 80077e8:	00012686 	.word	0x00012686
 80077ec:	0802a73c 	.word	0x0802a73c
 80077f0:	20000028 	.word	0x20000028
 80077f4:	0802a780 	.word	0x0802a780
 80077f8:	000061a7 	.word	0x000061a7
 80077fc:	20000e3c 	.word	0x20000e3c
 8007800:	000061a8 	.word	0x000061a8
 8007804:	200005b8 	.word	0x200005b8
 8007808:	50001c00 	.word	0x50001c00
 800780c:	50000800 	.word	0x50000800
 8007810:	20001e76 	.word	0x20001e76

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007814:	4b55      	ldr	r3, [pc, #340]	@ (800796c <ESP_Upkeep+0x96c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	0018      	movs	r0, r3
 800781a:	f00b f9bf 	bl	8012b9c <TimestampIsReached>
 800781e:	1e03      	subs	r3, r0, #0
 8007820:	d103      	bne.n	800782a <ESP_Upkeep+0x82a>
 8007822:	4b53      	ldr	r3, [pc, #332]	@ (8007970 <ESP_Upkeep+0x970>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d043      	beq.n	80078b2 <ESP_Upkeep+0x8b2>
        ESPTransmitDone = false;
 800782a:	4b52      	ldr	r3, [pc, #328]	@ (8007974 <ESP_Upkeep+0x974>)
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007830:	4b51      	ldr	r3, [pc, #324]	@ (8007978 <ESP_Upkeep+0x978>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <ESP_Upkeep+0x844>
          InitIsDone = true;
 8007838:	4b50      	ldr	r3, [pc, #320]	@ (800797c <ESP_Upkeep+0x97c>)
 800783a:	2201      	movs	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800783e:	4b50      	ldr	r3, [pc, #320]	@ (8007980 <ESP_Upkeep+0x980>)
 8007840:	220b      	movs	r2, #11
 8007842:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007844:	4b4c      	ldr	r3, [pc, #304]	@ (8007978 <ESP_Upkeep+0x978>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d108      	bne.n	800785e <ESP_Upkeep+0x85e>
          ConnectionMade = true;
 800784c:	4b4d      	ldr	r3, [pc, #308]	@ (8007984 <ESP_Upkeep+0x984>)
 800784e:	2201      	movs	r2, #1
 8007850:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8007852:	4b4d      	ldr	r3, [pc, #308]	@ (8007988 <ESP_Upkeep+0x988>)
 8007854:	2201      	movs	r2, #1
 8007856:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007858:	4b49      	ldr	r3, [pc, #292]	@ (8007980 <ESP_Upkeep+0x980>)
 800785a:	220b      	movs	r2, #11
 800785c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800785e:	4b46      	ldr	r3, [pc, #280]	@ (8007978 <ESP_Upkeep+0x978>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d102      	bne.n	800786c <ESP_Upkeep+0x86c>
          EspState = ESP_STATE_INIT;
 8007866:	4b46      	ldr	r3, [pc, #280]	@ (8007980 <ESP_Upkeep+0x980>)
 8007868:	2202      	movs	r2, #2
 800786a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800786c:	4b42      	ldr	r3, [pc, #264]	@ (8007978 <ESP_Upkeep+0x978>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d108      	bne.n	8007886 <ESP_Upkeep+0x886>
          EspState = ESP_STATE_CONFIG;
 8007874:	4b42      	ldr	r3, [pc, #264]	@ (8007980 <ESP_Upkeep+0x980>)
 8007876:	220e      	movs	r2, #14
 8007878:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 800787a:	4a44      	ldr	r2, [pc, #272]	@ (800798c <ESP_Upkeep+0x98c>)
 800787c:	4b44      	ldr	r3, [pc, #272]	@ (8007990 <ESP_Upkeep+0x990>)
 800787e:	0019      	movs	r1, r3
 8007880:	2002      	movs	r0, #2
 8007882:	f00b f9e1 	bl	8012c48 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007886:	4b3c      	ldr	r3, [pc, #240]	@ (8007978 <ESP_Upkeep+0x978>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d105      	bne.n	800789a <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_MODE_SELECT;
 800788e:	4b3c      	ldr	r3, [pc, #240]	@ (8007980 <ESP_Upkeep+0x980>)
 8007890:	220b      	movs	r2, #11
 8007892:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8007894:	4b3f      	ldr	r3, [pc, #252]	@ (8007994 <ESP_Upkeep+0x994>)
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800789a:	4b35      	ldr	r3, [pc, #212]	@ (8007970 <ESP_Upkeep+0x970>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d020      	beq.n	80078e4 <ESP_Upkeep+0x8e4>
 80078a2:	4b35      	ldr	r3, [pc, #212]	@ (8007978 <ESP_Upkeep+0x978>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d01c      	beq.n	80078e4 <ESP_Upkeep+0x8e4>
          EspState = ESP_STATE_INIT;
 80078aa:	4b35      	ldr	r3, [pc, #212]	@ (8007980 <ESP_Upkeep+0x980>)
 80078ac:	2202      	movs	r2, #2
 80078ae:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80078b0:	e018      	b.n	80078e4 <ESP_Upkeep+0x8e4>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 80078b2:	f001 fb8d 	bl	8008fd0 <calculateNextNTPTime>
 80078b6:	0002      	movs	r2, r0
 80078b8:	4b37      	ldr	r3, [pc, #220]	@ (8007998 <ESP_Upkeep+0x998>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d94e      	bls.n	800795e <ESP_Upkeep+0x95e>
        if(Mode == AT_MODE_SEND ) {
 80078c0:	4b2d      	ldr	r3, [pc, #180]	@ (8007978 <ESP_Upkeep+0x978>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d14a      	bne.n	800795e <ESP_Upkeep+0x95e>
           Mode = AT_MODE_GETTIME;
 80078c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007978 <ESP_Upkeep+0x978>)
 80078ca:	2205      	movs	r2, #5
 80078cc:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 80078ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007980 <ESP_Upkeep+0x980>)
 80078d0:	2202      	movs	r2, #2
 80078d2:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 80078d4:	4b25      	ldr	r3, [pc, #148]	@ (800796c <ESP_Upkeep+0x96c>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b30      	ldr	r3, [pc, #192]	@ (800799c <ESP_Upkeep+0x99c>)
 80078da:	601a      	str	r2, [r3, #0]
           setTime = true;
 80078dc:	4b30      	ldr	r3, [pc, #192]	@ (80079a0 <ESP_Upkeep+0x9a0>)
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80078e2:	e03c      	b.n	800795e <ESP_Upkeep+0x95e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80078e4:	46c0      	nop			@ (mov r8, r8)
      break;
 80078e6:	e03a      	b.n	800795e <ESP_Upkeep+0x95e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80078e8:	4b2e      	ldr	r3, [pc, #184]	@ (80079a4 <ESP_Upkeep+0x9a4>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2201      	movs	r2, #1
 80078ee:	4053      	eors	r3, r2
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d008      	beq.n	8007908 <ESP_Upkeep+0x908>
        Info("Do nothing until reset");
 80078f6:	4a25      	ldr	r2, [pc, #148]	@ (800798c <ESP_Upkeep+0x98c>)
 80078f8:	4b25      	ldr	r3, [pc, #148]	@ (8007990 <ESP_Upkeep+0x990>)
 80078fa:	0019      	movs	r1, r3
 80078fc:	2002      	movs	r0, #2
 80078fe:	f00b f9a3 	bl	8012c48 <CreateLine>
        msgdone = true;
 8007902:	4b28      	ldr	r3, [pc, #160]	@ (80079a4 <ESP_Upkeep+0x9a4>)
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007908:	f01a f9b4 	bl	8021c74 <GetUsbRxPointer>
 800790c:	0003      	movs	r3, r0
 800790e:	0018      	movs	r0, r3
 8007910:	f000 f980 	bl	8007c14 <Process_PC_Config>
      break;
 8007914:	e024      	b.n	8007960 <ESP_Upkeep+0x960>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007916:	4a24      	ldr	r2, [pc, #144]	@ (80079a8 <ESP_Upkeep+0x9a8>)
 8007918:	4b24      	ldr	r3, [pc, #144]	@ (80079ac <ESP_Upkeep+0x9ac>)
 800791a:	0019      	movs	r1, r3
 800791c:	2001      	movs	r0, #1
 800791e:	f00b f993 	bl	8012c48 <CreateLine>
      EspState = ESP_STATE_INIT;
 8007922:	4b17      	ldr	r3, [pc, #92]	@ (8007980 <ESP_Upkeep+0x980>)
 8007924:	2202      	movs	r2, #2
 8007926:	701a      	strb	r2, [r3, #0]
      break;
 8007928:	e01a      	b.n	8007960 <ESP_Upkeep+0x960>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 800792a:	4a21      	ldr	r2, [pc, #132]	@ (80079b0 <ESP_Upkeep+0x9b0>)
 800792c:	4b1f      	ldr	r3, [pc, #124]	@ (80079ac <ESP_Upkeep+0x9ac>)
 800792e:	0019      	movs	r1, r3
 8007930:	2001      	movs	r0, #1
 8007932:	f00b f989 	bl	8012c48 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8007936:	4b12      	ldr	r3, [pc, #72]	@ (8007980 <ESP_Upkeep+0x980>)
 8007938:	2207      	movs	r2, #7
 800793a:	701a      	strb	r2, [r3, #0]
      break;
 800793c:	e010      	b.n	8007960 <ESP_Upkeep+0x960>
      break;
 800793e:	46c0      	nop			@ (mov r8, r8)
 8007940:	e00e      	b.n	8007960 <ESP_Upkeep+0x960>
        break;
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	e00c      	b.n	8007960 <ESP_Upkeep+0x960>
      break;
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	e00a      	b.n	8007960 <ESP_Upkeep+0x960>
        break;
 800794a:	46c0      	nop			@ (mov r8, r8)
 800794c:	e008      	b.n	8007960 <ESP_Upkeep+0x960>
    break;
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	e006      	b.n	8007960 <ESP_Upkeep+0x960>
    break;
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	e004      	b.n	8007960 <ESP_Upkeep+0x960>
      break;
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	e002      	b.n	8007960 <ESP_Upkeep+0x960>
    break;
 800795a:	46c0      	nop			@ (mov r8, r8)
 800795c:	e000      	b.n	8007960 <ESP_Upkeep+0x960>
      break;
 800795e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007960:	4b07      	ldr	r3, [pc, #28]	@ (8007980 <ESP_Upkeep+0x980>)
 8007962:	781b      	ldrb	r3, [r3, #0]
}
 8007964:	0018      	movs	r0, r3
 8007966:	46bd      	mov	sp, r7
 8007968:	b002      	add	sp, #8
 800796a:	bdb0      	pop	{r4, r5, r7, pc}
 800796c:	20000684 	.word	0x20000684
 8007970:	200005bb 	.word	0x200005bb
 8007974:	200005c0 	.word	0x200005c0
 8007978:	2000068f 	.word	0x2000068f
 800797c:	200005b9 	.word	0x200005b9
 8007980:	2000002c 	.word	0x2000002c
 8007984:	200005bc 	.word	0x200005bc
 8007988:	200005be 	.word	0x200005be
 800798c:	0802a7a0 	.word	0x0802a7a0
 8007990:	0802a738 	.word	0x0802a738
 8007994:	200005bd 	.word	0x200005bd
 8007998:	20000688 	.word	0x20000688
 800799c:	20000028 	.word	0x20000028
 80079a0:	20000002 	.word	0x20000002
 80079a4:	200005bf 	.word	0x200005bf
 80079a8:	0802a7b8 	.word	0x0802a7b8
 80079ac:	080295ec 	.word	0x080295ec
 80079b0:	0802a7cc 	.word	0x0802a7cc

080079b4 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80079bc:	4b12      	ldr	r3, [pc, #72]	@ (8007a08 <I2CSensors_Init+0x54>)
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 80079c2:	4a12      	ldr	r2, [pc, #72]	@ (8007a0c <I2CSensors_Init+0x58>)
 80079c4:	4b12      	ldr	r3, [pc, #72]	@ (8007a10 <I2CSensors_Init+0x5c>)
 80079c6:	0011      	movs	r1, r2
 80079c8:	0018      	movs	r0, r3
 80079ca:	f00b fb39 	bl	8013040 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 80079ce:	4a0f      	ldr	r2, [pc, #60]	@ (8007a0c <I2CSensors_Init+0x58>)
 80079d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a10 <I2CSensors_Init+0x5c>)
 80079d2:	0011      	movs	r1, r2
 80079d4:	0018      	movs	r0, r3
 80079d6:	f008 f98b 	bl	800fcf0 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 80079da:	4a0e      	ldr	r2, [pc, #56]	@ (8007a14 <I2CSensors_Init+0x60>)
 80079dc:	490b      	ldr	r1, [pc, #44]	@ (8007a0c <I2CSensors_Init+0x58>)
 80079de:	4b0c      	ldr	r3, [pc, #48]	@ (8007a10 <I2CSensors_Init+0x5c>)
 80079e0:	0018      	movs	r0, r3
 80079e2:	f002 fa37 	bl	8009e54 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 80079e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a18 <I2CSensors_Init+0x64>)
 80079e8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <I2CSensors_Init+0x68>)
 80079ea:	0011      	movs	r1, r2
 80079ec:	0018      	movs	r0, r3
 80079ee:	f002 fffb 	bl	800a9e8 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80079f2:	4a09      	ldr	r2, [pc, #36]	@ (8007a18 <I2CSensors_Init+0x64>)
 80079f4:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <I2CSensors_Init+0x68>)
 80079f6:	0011      	movs	r1, r2
 80079f8:	0018      	movs	r0, r3
 80079fa:	f7fb fea5 	bl	8003748 <ENS_Init>
}
 80079fe:	46c0      	nop			@ (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b002      	add	sp, #8
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	200007c0 	.word	0x200007c0
 8007a0c:	08007acd 	.word	0x08007acd
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	08007a21 	.word	0x08007a21
 8007a18:	08007b9d 	.word	0x08007b9d
 8007a1c:	08007b21 	.word	0x08007b21

08007a20 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6039      	str	r1, [r7, #0]
 8007a28:	0011      	movs	r1, r2
 8007a2a:	1dfb      	adds	r3, r7, #7
 8007a2c:	1c02      	adds	r2, r0, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	1dbb      	adds	r3, r7, #6
 8007a32:	1c0a      	adds	r2, r1, #0
 8007a34:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8007a36:	4b0f      	ldr	r3, [pc, #60]	@ (8007a74 <ReadI2CDirect+0x54>)
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	1dfb      	adds	r3, r7, #7
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	18db      	adds	r3, r3, r3
 8007a42:	b299      	uxth	r1, r3
 8007a44:	1dbb      	adds	r3, r7, #6
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	260f      	movs	r6, #15
 8007a4c:	19bc      	adds	r4, r7, r6
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	25fa      	movs	r5, #250	@ 0xfa
 8007a52:	9500      	str	r5, [sp, #0]
 8007a54:	f00d fa9e 	bl	8014f94 <HAL_I2C_Master_Receive>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007a5c:	19bb      	adds	r3, r7, r6
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <ReadI2CDirect+0x48>
        return false;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e000      	b.n	8007a6a <ReadI2CDirect+0x4a>
    }
    return true;
 8007a68:	2301      	movs	r3, #1
}
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b005      	add	sp, #20
 8007a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a72:	46c0      	nop			@ (mov r8, r8)
 8007a74:	200007c0 	.word	0x200007c0

08007a78 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007a78:	b5b0      	push	{r4, r5, r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6039      	str	r1, [r7, #0]
 8007a80:	0011      	movs	r1, r2
 8007a82:	1dfb      	adds	r3, r7, #7
 8007a84:	1c02      	adds	r2, r0, #0
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	1dbb      	adds	r3, r7, #6
 8007a8a:	1c0a      	adds	r2, r1, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac8 <ReadI2C+0x50>)
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	1dfb      	adds	r3, r7, #7
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	18db      	adds	r3, r3, r3
 8007a9a:	b299      	uxth	r1, r3
 8007a9c:	1dbb      	adds	r3, r7, #6
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	250f      	movs	r5, #15
 8007aa4:	197c      	adds	r4, r7, r5
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	f00d fc82 	bl	80153b0 <HAL_I2C_Master_Receive_DMA>
 8007aac:	0003      	movs	r3, r0
 8007aae:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007ab0:	197b      	adds	r3, r7, r5
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <ReadI2C+0x44>
        return false;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e000      	b.n	8007abe <ReadI2C+0x46>
    }
    return true;
 8007abc:	2301      	movs	r3, #1
}
 8007abe:	0018      	movs	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b004      	add	sp, #16
 8007ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac6:	46c0      	nop			@ (mov r8, r8)
 8007ac8:	200007c0 	.word	0x200007c0

08007acc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007acc:	b5b0      	push	{r4, r5, r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6039      	str	r1, [r7, #0]
 8007ad4:	0011      	movs	r1, r2
 8007ad6:	1dfb      	adds	r3, r7, #7
 8007ad8:	1c02      	adds	r2, r0, #0
 8007ada:	701a      	strb	r2, [r3, #0]
 8007adc:	1dbb      	adds	r3, r7, #6
 8007ade:	1c0a      	adds	r2, r1, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8007b1c <WriteI2C+0x50>)
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	1dfb      	adds	r3, r7, #7
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	18db      	adds	r3, r3, r3
 8007aee:	b299      	uxth	r1, r3
 8007af0:	1dbb      	adds	r3, r7, #6
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	250f      	movs	r5, #15
 8007af8:	197c      	adds	r4, r7, r5
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	f00d fb52 	bl	80151a4 <HAL_I2C_Master_Transmit_DMA>
 8007b00:	0003      	movs	r3, r0
 8007b02:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007b04:	197b      	adds	r3, r7, r5
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <WriteI2C+0x44>
        return false;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <WriteI2C+0x46>
    }
    return true;
 8007b10:	2301      	movs	r3, #1
}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b004      	add	sp, #16
 8007b18:	bdb0      	pop	{r4, r5, r7, pc}
 8007b1a:	46c0      	nop			@ (mov r8, r8)
 8007b1c:	200007c0 	.word	0x200007c0

08007b20 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b22:	b08b      	sub	sp, #44	@ 0x2c
 8007b24:	af04      	add	r7, sp, #16
 8007b26:	0004      	movs	r4, r0
 8007b28:	0008      	movs	r0, r1
 8007b2a:	0011      	movs	r1, r2
 8007b2c:	607b      	str	r3, [r7, #4]
 8007b2e:	250f      	movs	r5, #15
 8007b30:	197b      	adds	r3, r7, r5
 8007b32:	1c22      	adds	r2, r4, #0
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	260c      	movs	r6, #12
 8007b38:	19bb      	adds	r3, r7, r6
 8007b3a:	1c02      	adds	r2, r0, #0
 8007b3c:	801a      	strh	r2, [r3, #0]
 8007b3e:	230a      	movs	r3, #10
 8007b40:	18fb      	adds	r3, r7, r3
 8007b42:	1c0a      	adds	r2, r1, #0
 8007b44:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007b46:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <ReadI2CMem+0x78>)
 8007b48:	6818      	ldr	r0, [r3, #0]
 8007b4a:	197b      	adds	r3, r7, r5
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	18db      	adds	r3, r3, r3
 8007b52:	b299      	uxth	r1, r3
 8007b54:	2217      	movs	r2, #23
 8007b56:	18bc      	adds	r4, r7, r2
 8007b58:	230a      	movs	r3, #10
 8007b5a:	18fb      	adds	r3, r7, r3
 8007b5c:	881d      	ldrh	r5, [r3, #0]
 8007b5e:	19bb      	adds	r3, r7, r6
 8007b60:	881a      	ldrh	r2, [r3, #0]
 8007b62:	2364      	movs	r3, #100	@ 0x64
 8007b64:	9302      	str	r3, [sp, #8]
 8007b66:	2328      	movs	r3, #40	@ 0x28
 8007b68:	2608      	movs	r6, #8
 8007b6a:	199b      	adds	r3, r3, r6
 8007b6c:	19db      	adds	r3, r3, r7
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	002b      	movs	r3, r5
 8007b78:	f00d fd20 	bl	80155bc <HAL_I2C_Mem_Read>
 8007b7c:	0003      	movs	r3, r0
 8007b7e:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007b80:	2217      	movs	r2, #23
 8007b82:	18bb      	adds	r3, r7, r2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <ReadI2CMem+0x6e>
     return false;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e000      	b.n	8007b90 <ReadI2CMem+0x70>
   }
   return true;
 8007b8e:	2301      	movs	r3, #1
}
 8007b90:	0018      	movs	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b007      	add	sp, #28
 8007b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b98:	200007c0 	.word	0x200007c0

08007b9c <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9e:	b089      	sub	sp, #36	@ 0x24
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	0004      	movs	r4, r0
 8007ba4:	0008      	movs	r0, r1
 8007ba6:	0011      	movs	r1, r2
 8007ba8:	607b      	str	r3, [r7, #4]
 8007baa:	250f      	movs	r5, #15
 8007bac:	197b      	adds	r3, r7, r5
 8007bae:	1c22      	adds	r2, r4, #0
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	260c      	movs	r6, #12
 8007bb4:	19bb      	adds	r3, r7, r6
 8007bb6:	1c02      	adds	r2, r0, #0
 8007bb8:	801a      	strh	r2, [r3, #0]
 8007bba:	230a      	movs	r3, #10
 8007bbc:	18fb      	adds	r3, r7, r3
 8007bbe:	1c0a      	adds	r2, r1, #0
 8007bc0:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007bc2:	4b13      	ldr	r3, [pc, #76]	@ (8007c10 <WriteI2CMem+0x74>)
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	197b      	adds	r3, r7, r5
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	18db      	adds	r3, r3, r3
 8007bce:	b299      	uxth	r1, r3
 8007bd0:	2217      	movs	r2, #23
 8007bd2:	18bc      	adds	r4, r7, r2
 8007bd4:	230a      	movs	r3, #10
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	881d      	ldrh	r5, [r3, #0]
 8007bda:	19bb      	adds	r3, r7, r6
 8007bdc:	881a      	ldrh	r2, [r3, #0]
 8007bde:	2328      	movs	r3, #40	@ 0x28
 8007be0:	2608      	movs	r6, #8
 8007be2:	199b      	adds	r3, r3, r6
 8007be4:	19db      	adds	r3, r3, r7
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	002b      	movs	r3, r5
 8007bf0:	f00d fe18 	bl	8015824 <HAL_I2C_Mem_Write_DMA>
 8007bf4:	0003      	movs	r3, r0
 8007bf6:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007bf8:	2217      	movs	r2, #23
 8007bfa:	18bb      	adds	r3, r7, r2
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <WriteI2CMem+0x6a>
     return false;
 8007c02:	2300      	movs	r3, #0
 8007c04:	e000      	b.n	8007c08 <WriteI2CMem+0x6c>
   }
   return true;
 8007c06:	2301      	movs	r3, #1
}
 8007c08:	0018      	movs	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b007      	add	sp, #28
 8007c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c10:	200007c0 	.word	0x200007c0

08007c14 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b0c3      	sub	sp, #268	@ 0x10c
 8007c18:	af3e      	add	r7, sp, #248	@ 0xf8
 8007c1a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8007c1c:	f01a f84a 	bl	8021cb4 <GetUsbRxDataSize>
 8007c20:	0003      	movs	r3, r0
 8007c22:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d971      	bls.n	8007d0e <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2123      	movs	r1, #35	@ 0x23
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f01d fa62 	bl	80250f8 <strchr>
 8007c34:	0003      	movs	r3, r0
 8007c36:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d065      	beq.n	8007d0a <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	785a      	ldrb	r2, [r3, #1]
 8007c42:	4b34      	ldr	r3, [pc, #208]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c44:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	789a      	ldrb	r2, [r3, #2]
 8007c4a:	4b32      	ldr	r3, [pc, #200]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c4c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8007c4e:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	3305      	adds	r3, #5
 8007c54:	001a      	movs	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d351      	bcc.n	8007d00 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	1cd9      	adds	r1, r3, #3
 8007c60:	4b2c      	ldr	r3, [pc, #176]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	001a      	movs	r2, r3
 8007c66:	4b2c      	ldr	r3, [pc, #176]	@ (8007d18 <Process_PC_Config+0x104>)
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f01d fb19 	bl	80252a0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8007c6e:	4b29      	ldr	r3, [pc, #164]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	3303      	adds	r3, #3
 8007c74:	001a      	movs	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	189b      	adds	r3, r3, r2
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	b21a      	sxth	r2, r3
 8007c80:	4b24      	ldr	r3, [pc, #144]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	3304      	adds	r3, #4
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	18cb      	adds	r3, r1, r3
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b21b      	sxth	r3, r3
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	b21b      	sxth	r3, r3
 8007c92:	b299      	uxth	r1, r3
 8007c94:	4a1f      	ldr	r2, [pc, #124]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c96:	2381      	movs	r3, #129	@ 0x81
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8007c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d14 <Process_PC_Config+0x100>)
 8007c9e:	2381      	movs	r3, #129	@ 0x81
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	5ad4      	ldrh	r4, [r2, r3]
 8007ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8007d14 <Process_PC_Config+0x100>)
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	3303      	adds	r3, #3
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	0011      	movs	r1, r2
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f000 fa13 	bl	80080dc <CRC16_ARC>
 8007cb6:	0003      	movs	r3, r0
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	d007      	beq.n	8007ccc <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8007cbc:	4b15      	ldr	r3, [pc, #84]	@ (8007d14 <Process_PC_Config+0x100>)
 8007cbe:	785a      	ldrb	r2, [r3, #1]
 8007cc0:	4b15      	ldr	r3, [pc, #84]	@ (8007d18 <Process_PC_Config+0x104>)
 8007cc2:	0019      	movs	r1, r3
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f000 f9b7 	bl	8008038 <Create_Message>
 8007cca:	e016      	b.n	8007cfa <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8007ccc:	4c11      	ldr	r4, [pc, #68]	@ (8007d14 <Process_PC_Config+0x100>)
 8007cce:	466b      	mov	r3, sp
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	0023      	movs	r3, r4
 8007cd4:	3310      	adds	r3, #16
 8007cd6:	22f4      	movs	r2, #244	@ 0xf4
 8007cd8:	0019      	movs	r1, r3
 8007cda:	f01d fae1 	bl	80252a0 <memcpy>
 8007cde:	6820      	ldr	r0, [r4, #0]
 8007ce0:	6861      	ldr	r1, [r4, #4]
 8007ce2:	68a2      	ldr	r2, [r4, #8]
 8007ce4:	68e3      	ldr	r3, [r4, #12]
 8007ce6:	f000 f819 	bl	8007d1c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8007cea:	4b0a      	ldr	r3, [pc, #40]	@ (8007d14 <Process_PC_Config+0x100>)
 8007cec:	7818      	ldrb	r0, [r3, #0]
 8007cee:	4b09      	ldr	r3, [pc, #36]	@ (8007d14 <Process_PC_Config+0x100>)
 8007cf0:	785a      	ldrb	r2, [r3, #1]
 8007cf2:	4b09      	ldr	r3, [pc, #36]	@ (8007d18 <Process_PC_Config+0x104>)
 8007cf4:	0019      	movs	r1, r3
 8007cf6:	f000 f99f 	bl	8008038 <Create_Message>
                }
                ResetUsbRxDataSize();
 8007cfa:	f019 ffc3 	bl	8021c84 <ResetUsbRxDataSize>
                return;
 8007cfe:	e006      	b.n	8007d0e <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	0018      	movs	r0, r3
 8007d04:	f019 ffe0 	bl	8021cc8 <GetUsbRxNextChunk>
 8007d08:	e001      	b.n	8007d0e <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8007d0a:	f019 ffbb 	bl	8021c84 <ResetUsbRxDataSize>
        }
    }
}
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b005      	add	sp, #20
 8007d12:	bd90      	pop	{r4, r7, pc}
 8007d14:	200007c4 	.word	0x200007c4
 8007d18:	200007c6 	.word	0x200007c6

08007d1c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	b5b0      	push	{r4, r5, r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	2518      	movs	r5, #24
 8007d26:	197c      	adds	r4, r7, r5
 8007d28:	6020      	str	r0, [r4, #0]
 8007d2a:	6061      	str	r1, [r4, #4]
 8007d2c:	60a2      	str	r2, [r4, #8]
 8007d2e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8007d30:	197b      	adds	r3, r7, r5
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2bfe      	cmp	r3, #254	@ 0xfe
 8007d36:	d100      	bne.n	8007d3a <ProcessCmd+0x1e>
 8007d38:	e122      	b.n	8007f80 <ProcessCmd+0x264>
 8007d3a:	dd00      	ble.n	8007d3e <ProcessCmd+0x22>
 8007d3c:	e142      	b.n	8007fc4 <ProcessCmd+0x2a8>
 8007d3e:	2b18      	cmp	r3, #24
 8007d40:	dc0a      	bgt.n	8007d58 <ProcessCmd+0x3c>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	da00      	bge.n	8007d48 <ProcessCmd+0x2c>
 8007d46:	e13d      	b.n	8007fc4 <ProcessCmd+0x2a8>
 8007d48:	2b18      	cmp	r3, #24
 8007d4a:	d900      	bls.n	8007d4e <ProcessCmd+0x32>
 8007d4c:	e13a      	b.n	8007fc4 <ProcessCmd+0x2a8>
 8007d4e:	009a      	lsls	r2, r3, #2
 8007d50:	4ba0      	ldr	r3, [pc, #640]	@ (8007fd4 <ProcessCmd+0x2b8>)
 8007d52:	18d3      	adds	r3, r2, r3
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	469f      	mov	pc, r3
 8007d58:	2bfd      	cmp	r3, #253	@ 0xfd
 8007d5a:	d100      	bne.n	8007d5e <ProcessCmd+0x42>
 8007d5c:	e108      	b.n	8007f70 <ProcessCmd+0x254>
            }
            break;
        }
    }

}
 8007d5e:	e131      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d60:	2118      	movs	r1, #24
 8007d62:	187b      	adds	r3, r7, r1
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	001a      	movs	r2, r3
 8007d68:	187b      	adds	r3, r7, r1
 8007d6a:	1c99      	adds	r1, r3, #2
 8007d6c:	489a      	ldr	r0, [pc, #616]	@ (8007fd8 <ProcessCmd+0x2bc>)
 8007d6e:	230c      	movs	r3, #12
 8007d70:	f003 fa76 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007d74:	e126      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d76:	2118      	movs	r1, #24
 8007d78:	187b      	adds	r3, r7, r1
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	001a      	movs	r2, r3
 8007d7e:	187b      	adds	r3, r7, r1
 8007d80:	1c99      	adds	r1, r3, #2
 8007d82:	4896      	ldr	r0, [pc, #600]	@ (8007fdc <ProcessCmd+0x2c0>)
 8007d84:	230c      	movs	r3, #12
 8007d86:	f003 fa6b 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007d8a:	e11b      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007d8c:	2118      	movs	r1, #24
 8007d8e:	187b      	adds	r3, r7, r1
 8007d90:	785b      	ldrb	r3, [r3, #1]
 8007d92:	001a      	movs	r2, r3
 8007d94:	187b      	adds	r3, r7, r1
 8007d96:	1c99      	adds	r1, r3, #2
 8007d98:	4891      	ldr	r0, [pc, #580]	@ (8007fe0 <ProcessCmd+0x2c4>)
 8007d9a:	230c      	movs	r3, #12
 8007d9c:	f003 fa60 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007da0:	e110      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007da2:	2118      	movs	r1, #24
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	001a      	movs	r2, r3
 8007daa:	187b      	adds	r3, r7, r1
 8007dac:	1c99      	adds	r1, r3, #2
 8007dae:	488d      	ldr	r0, [pc, #564]	@ (8007fe4 <ProcessCmd+0x2c8>)
 8007db0:	230c      	movs	r3, #12
 8007db2:	f003 fa55 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007db6:	e105      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007db8:	2118      	movs	r1, #24
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	001a      	movs	r2, r3
 8007dc0:	187b      	adds	r3, r7, r1
 8007dc2:	1c99      	adds	r1, r3, #2
 8007dc4:	4888      	ldr	r0, [pc, #544]	@ (8007fe8 <ProcessCmd+0x2cc>)
 8007dc6:	230c      	movs	r3, #12
 8007dc8:	f003 fa4a 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007dcc:	e0fa      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007dce:	2118      	movs	r1, #24
 8007dd0:	187b      	adds	r3, r7, r1
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	001a      	movs	r2, r3
 8007dd6:	187b      	adds	r3, r7, r1
 8007dd8:	1c99      	adds	r1, r3, #2
 8007dda:	4884      	ldr	r0, [pc, #528]	@ (8007fec <ProcessCmd+0x2d0>)
 8007ddc:	230c      	movs	r3, #12
 8007dde:	f003 fa3f 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007de2:	e0ef      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007de4:	2118      	movs	r1, #24
 8007de6:	187b      	adds	r3, r7, r1
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	001a      	movs	r2, r3
 8007dec:	187b      	adds	r3, r7, r1
 8007dee:	1c99      	adds	r1, r3, #2
 8007df0:	487f      	ldr	r0, [pc, #508]	@ (8007ff0 <ProcessCmd+0x2d4>)
 8007df2:	230c      	movs	r3, #12
 8007df4:	f003 fa34 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007df8:	e0e4      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007dfa:	2118      	movs	r1, #24
 8007dfc:	187b      	adds	r3, r7, r1
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	001a      	movs	r2, r3
 8007e02:	187b      	adds	r3, r7, r1
 8007e04:	1c99      	adds	r1, r3, #2
 8007e06:	487b      	ldr	r0, [pc, #492]	@ (8007ff4 <ProcessCmd+0x2d8>)
 8007e08:	230c      	movs	r3, #12
 8007e0a:	f003 fa29 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007e0e:	e0d9      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e10:	2118      	movs	r1, #24
 8007e12:	187b      	adds	r3, r7, r1
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	001a      	movs	r2, r3
 8007e18:	187b      	adds	r3, r7, r1
 8007e1a:	1c99      	adds	r1, r3, #2
 8007e1c:	4876      	ldr	r0, [pc, #472]	@ (8007ff8 <ProcessCmd+0x2dc>)
 8007e1e:	230c      	movs	r3, #12
 8007e20:	f003 fa1e 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007e24:	e0ce      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e26:	2118      	movs	r1, #24
 8007e28:	187b      	adds	r3, r7, r1
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	001a      	movs	r2, r3
 8007e2e:	187b      	adds	r3, r7, r1
 8007e30:	1c99      	adds	r1, r3, #2
 8007e32:	4872      	ldr	r0, [pc, #456]	@ (8007ffc <ProcessCmd+0x2e0>)
 8007e34:	230c      	movs	r3, #12
 8007e36:	f003 fa13 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007e3a:	e0c3      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e3c:	2118      	movs	r1, #24
 8007e3e:	187b      	adds	r3, r7, r1
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	001a      	movs	r2, r3
 8007e44:	187b      	adds	r3, r7, r1
 8007e46:	1c99      	adds	r1, r3, #2
 8007e48:	486d      	ldr	r0, [pc, #436]	@ (8008000 <ProcessCmd+0x2e4>)
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	f003 fa08 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007e50:	e0b8      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8007e52:	2118      	movs	r1, #24
 8007e54:	187b      	adds	r3, r7, r1
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	001a      	movs	r2, r3
 8007e5a:	187b      	adds	r3, r7, r1
 8007e5c:	1c99      	adds	r1, r3, #2
 8007e5e:	4869      	ldr	r0, [pc, #420]	@ (8008004 <ProcessCmd+0x2e8>)
 8007e60:	2320      	movs	r3, #32
 8007e62:	f003 f9fd 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007e66:	e0ad      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e68:	2118      	movs	r1, #24
 8007e6a:	187b      	adds	r3, r7, r1
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	001a      	movs	r2, r3
 8007e70:	187b      	adds	r3, r7, r1
 8007e72:	1c99      	adds	r1, r3, #2
 8007e74:	4864      	ldr	r0, [pc, #400]	@ (8008008 <ProcessCmd+0x2ec>)
 8007e76:	230c      	movs	r3, #12
 8007e78:	f003 f9f2 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007e7c:	e0a2      	b.n	8007fc4 <ProcessCmd+0x2a8>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e7e:	2118      	movs	r1, #24
 8007e80:	187b      	adds	r3, r7, r1
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	001a      	movs	r2, r3
 8007e86:	187b      	adds	r3, r7, r1
 8007e88:	1c99      	adds	r1, r3, #2
 8007e8a:	4860      	ldr	r0, [pc, #384]	@ (800800c <ProcessCmd+0x2f0>)
 8007e8c:	230c      	movs	r3, #12
 8007e8e:	f003 f9e7 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007e92:	e097      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007e94:	2118      	movs	r1, #24
 8007e96:	187b      	adds	r3, r7, r1
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	1c99      	adds	r1, r3, #2
 8007ea0:	485b      	ldr	r0, [pc, #364]	@ (8008010 <ProcessCmd+0x2f4>)
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	f003 f9dc 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007ea8:	e08c      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007eaa:	2118      	movs	r1, #24
 8007eac:	187b      	adds	r3, r7, r1
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	001a      	movs	r2, r3
 8007eb2:	187b      	adds	r3, r7, r1
 8007eb4:	1c99      	adds	r1, r3, #2
 8007eb6:	4857      	ldr	r0, [pc, #348]	@ (8008014 <ProcessCmd+0x2f8>)
 8007eb8:	230c      	movs	r3, #12
 8007eba:	f003 f9d1 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007ebe:	e081      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007ec0:	2118      	movs	r1, #24
 8007ec2:	187b      	adds	r3, r7, r1
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	001a      	movs	r2, r3
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	1c99      	adds	r1, r3, #2
 8007ecc:	4852      	ldr	r0, [pc, #328]	@ (8008018 <ProcessCmd+0x2fc>)
 8007ece:	230c      	movs	r3, #12
 8007ed0:	f003 f9c6 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007ed4:	e076      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007ed6:	2118      	movs	r1, #24
 8007ed8:	187b      	adds	r3, r7, r1
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	001a      	movs	r2, r3
 8007ede:	187b      	adds	r3, r7, r1
 8007ee0:	1c99      	adds	r1, r3, #2
 8007ee2:	484e      	ldr	r0, [pc, #312]	@ (800801c <ProcessCmd+0x300>)
 8007ee4:	230c      	movs	r3, #12
 8007ee6:	f003 f9bb 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007eea:	e06b      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007eec:	2118      	movs	r1, #24
 8007eee:	187b      	adds	r3, r7, r1
 8007ef0:	785b      	ldrb	r3, [r3, #1]
 8007ef2:	001a      	movs	r2, r3
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	1c99      	adds	r1, r3, #2
 8007ef8:	4849      	ldr	r0, [pc, #292]	@ (8008020 <ProcessCmd+0x304>)
 8007efa:	230c      	movs	r3, #12
 8007efc:	f003 f9b0 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007f00:	e060      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007f02:	2118      	movs	r1, #24
 8007f04:	187b      	adds	r3, r7, r1
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	001a      	movs	r2, r3
 8007f0a:	187b      	adds	r3, r7, r1
 8007f0c:	1c99      	adds	r1, r3, #2
 8007f0e:	4845      	ldr	r0, [pc, #276]	@ (8008024 <ProcessCmd+0x308>)
 8007f10:	230c      	movs	r3, #12
 8007f12:	f003 f9a5 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007f16:	e055      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007f18:	2118      	movs	r1, #24
 8007f1a:	187b      	adds	r3, r7, r1
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	001a      	movs	r2, r3
 8007f20:	187b      	adds	r3, r7, r1
 8007f22:	1c99      	adds	r1, r3, #2
 8007f24:	4840      	ldr	r0, [pc, #256]	@ (8008028 <ProcessCmd+0x30c>)
 8007f26:	230c      	movs	r3, #12
 8007f28:	f003 f99a 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007f2c:	e04a      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007f2e:	2118      	movs	r1, #24
 8007f30:	187b      	adds	r3, r7, r1
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	001a      	movs	r2, r3
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	1c99      	adds	r1, r3, #2
 8007f3a:	483c      	ldr	r0, [pc, #240]	@ (800802c <ProcessCmd+0x310>)
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	f003 f98f 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007f42:	e03f      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007f44:	2118      	movs	r1, #24
 8007f46:	187b      	adds	r3, r7, r1
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	001a      	movs	r2, r3
 8007f4c:	187b      	adds	r3, r7, r1
 8007f4e:	1c99      	adds	r1, r3, #2
 8007f50:	4837      	ldr	r0, [pc, #220]	@ (8008030 <ProcessCmd+0x314>)
 8007f52:	230c      	movs	r3, #12
 8007f54:	f003 f984 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007f58:	e034      	b.n	8007fc4 <ProcessCmd+0x2a8>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007f5a:	2118      	movs	r1, #24
 8007f5c:	187b      	adds	r3, r7, r1
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	001a      	movs	r2, r3
 8007f62:	187b      	adds	r3, r7, r1
 8007f64:	1c99      	adds	r1, r3, #2
 8007f66:	4833      	ldr	r0, [pc, #204]	@ (8008034 <ProcessCmd+0x318>)
 8007f68:	230c      	movs	r3, #12
 8007f6a:	f003 f979 	bl	800b260 <WriteUint8ArrayEepromSafe>
        break;
 8007f6e:	e029      	b.n	8007fc4 <ProcessCmd+0x2a8>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8007f70:	23c4      	movs	r3, #196	@ 0xc4
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	4a18      	ldr	r2, [pc, #96]	@ (8007fd8 <ProcessCmd+0x2bc>)
 8007f76:	0019      	movs	r1, r3
 8007f78:	0010      	movs	r0, r2
 8007f7a:	f003 f9b6 	bl	800b2ea <ClearEEprom>
        break;
 8007f7e:	e021      	b.n	8007fc4 <ProcessCmd+0x2a8>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8007f80:	2118      	movs	r1, #24
 8007f82:	187b      	adds	r3, r7, r1
 8007f84:	789b      	ldrb	r3, [r3, #2]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	b21a      	sxth	r2, r3
 8007f8a:	187b      	adds	r3, r7, r1
 8007f8c:	78db      	ldrb	r3, [r3, #3]
 8007f8e:	b21b      	sxth	r3, r3
 8007f90:	4313      	orrs	r3, r2
 8007f92:	b21a      	sxth	r2, r3
 8007f94:	1dbb      	adds	r3, r7, #6
 8007f96:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8007f98:	1dbb      	adds	r3, r7, #6
 8007f9a:	881a      	ldrh	r2, [r3, #0]
 8007f9c:	23c0      	movs	r3, #192	@ 0xc0
 8007f9e:	015b      	lsls	r3, r3, #5
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d207      	bcs.n	8007fb4 <ProcessCmd+0x298>
                ClearEEprom(EEPromStartAddr, size);
 8007fa4:	1dbb      	adds	r3, r7, #6
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8007fd8 <ProcessCmd+0x2bc>)
 8007faa:	0019      	movs	r1, r3
 8007fac:	0010      	movs	r0, r2
 8007fae:	f003 f99c 	bl	800b2ea <ClearEEprom>
            break;
 8007fb2:	e006      	b.n	8007fc2 <ProcessCmd+0x2a6>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8007fb4:	23c0      	movs	r3, #192	@ 0xc0
 8007fb6:	015b      	lsls	r3, r3, #5
 8007fb8:	4a07      	ldr	r2, [pc, #28]	@ (8007fd8 <ProcessCmd+0x2bc>)
 8007fba:	0019      	movs	r1, r3
 8007fbc:	0010      	movs	r0, r2
 8007fbe:	f003 f994 	bl	800b2ea <ClearEEprom>
            break;
 8007fc2:	46c0      	nop			@ (mov r8, r8)
}
 8007fc4:	46c0      	nop			@ (mov r8, r8)
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b002      	add	sp, #8
 8007fca:	bcb0      	pop	{r4, r5, r7}
 8007fcc:	bc08      	pop	{r3}
 8007fce:	b004      	add	sp, #16
 8007fd0:	4718      	bx	r3
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	0802d2cc 	.word	0x0802d2cc
 8007fd8:	08080000 	.word	0x08080000
 8007fdc:	0808000c 	.word	0x0808000c
 8007fe0:	08080018 	.word	0x08080018
 8007fe4:	08080024 	.word	0x08080024
 8007fe8:	08080030 	.word	0x08080030
 8007fec:	0808003c 	.word	0x0808003c
 8007ff0:	08080048 	.word	0x08080048
 8007ff4:	08080054 	.word	0x08080054
 8007ff8:	08080060 	.word	0x08080060
 8007ffc:	0808006c 	.word	0x0808006c
 8008000:	08080078 	.word	0x08080078
 8008004:	08080090 	.word	0x08080090
 8008008:	080800b0 	.word	0x080800b0
 800800c:	080800bc 	.word	0x080800bc
 8008010:	080800c8 	.word	0x080800c8
 8008014:	080800d4 	.word	0x080800d4
 8008018:	080800e0 	.word	0x080800e0
 800801c:	080800ec 	.word	0x080800ec
 8008020:	080800f8 	.word	0x080800f8
 8008024:	08080104 	.word	0x08080104
 8008028:	08080110 	.word	0x08080110
 800802c:	08080130 	.word	0x08080130
 8008030:	08080170 	.word	0x08080170
 8008034:	0808017c 	.word	0x0808017c

08008038 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6039      	str	r1, [r7, #0]
 8008040:	0011      	movs	r1, r2
 8008042:	1dfb      	adds	r3, r7, #7
 8008044:	1c02      	adds	r2, r0, #0
 8008046:	701a      	strb	r2, [r3, #0]
 8008048:	1dbb      	adds	r3, r7, #6
 800804a:	1c0a      	adds	r2, r1, #0
 800804c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 800804e:	2223      	movs	r2, #35	@ 0x23
 8008050:	4b20      	ldr	r3, [pc, #128]	@ (80080d4 <Create_Message+0x9c>)
 8008052:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8008054:	4b1f      	ldr	r3, [pc, #124]	@ (80080d4 <Create_Message+0x9c>)
 8008056:	1dfa      	adds	r2, r7, #7
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800805c:	4b1d      	ldr	r3, [pc, #116]	@ (80080d4 <Create_Message+0x9c>)
 800805e:	1dba      	adds	r2, r7, #6
 8008060:	7812      	ldrb	r2, [r2, #0]
 8008062:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8008064:	1dbb      	adds	r3, r7, #6
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	4b1b      	ldr	r3, [pc, #108]	@ (80080d8 <Create_Message+0xa0>)
 800806c:	0018      	movs	r0, r3
 800806e:	f01d f917 	bl	80252a0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8008072:	1dbb      	adds	r3, r7, #6
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b29a      	uxth	r2, r3
 8008078:	250e      	movs	r5, #14
 800807a:	197b      	adds	r3, r7, r5
 800807c:	3203      	adds	r2, #3
 800807e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008080:	260c      	movs	r6, #12
 8008082:	19bc      	adds	r4, r7, r6
 8008084:	197b      	adds	r3, r7, r5
 8008086:	881a      	ldrh	r2, [r3, #0]
 8008088:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <Create_Message+0x9c>)
 800808a:	0011      	movs	r1, r2
 800808c:	0018      	movs	r0, r3
 800808e:	f000 f825 	bl	80080dc <CRC16_ARC>
 8008092:	0003      	movs	r3, r0
 8008094:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8008096:	0030      	movs	r0, r6
 8008098:	183b      	adds	r3, r7, r0
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	0a1b      	lsrs	r3, r3, #8
 800809e:	b29a      	uxth	r2, r3
 80080a0:	197b      	adds	r3, r7, r5
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b2d1      	uxtb	r1, r2
 80080a6:	4a0b      	ldr	r2, [pc, #44]	@ (80080d4 <Create_Message+0x9c>)
 80080a8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80080aa:	197b      	adds	r3, r7, r5
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	3301      	adds	r3, #1
 80080b0:	183a      	adds	r2, r7, r0
 80080b2:	8812      	ldrh	r2, [r2, #0]
 80080b4:	b2d1      	uxtb	r1, r2
 80080b6:	4a07      	ldr	r2, [pc, #28]	@ (80080d4 <Create_Message+0x9c>)
 80080b8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80080ba:	197b      	adds	r3, r7, r5
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	3302      	adds	r3, #2
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	4b04      	ldr	r3, [pc, #16]	@ (80080d4 <Create_Message+0x9c>)
 80080c4:	0011      	movs	r1, r2
 80080c6:	0018      	movs	r0, r3
 80080c8:	f019 fd9a 	bl	8021c00 <CDC_Transmit_FS>
}
 80080cc:	46c0      	nop			@ (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b005      	add	sp, #20
 80080d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d4:	200008d0 	.word	0x200008d0
 80080d8:	200008d3 	.word	0x200008d3

080080dc <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	000a      	movs	r2, r1
 80080e6:	1cbb      	adds	r3, r7, #2
 80080e8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80080ea:	2316      	movs	r3, #22
 80080ec:	18fb      	adds	r3, r7, r3
 80080ee:	2200      	movs	r2, #0
 80080f0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80080f2:	2300      	movs	r3, #0
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	e02e      	b.n	8008156 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	18d3      	adds	r3, r2, r3
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	0019      	movs	r1, r3
 8008102:	2216      	movs	r2, #22
 8008104:	18bb      	adds	r3, r7, r2
 8008106:	18ba      	adds	r2, r7, r2
 8008108:	8812      	ldrh	r2, [r2, #0]
 800810a:	404a      	eors	r2, r1
 800810c:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800810e:	2300      	movs	r3, #0
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e01a      	b.n	800814a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008114:	2116      	movs	r1, #22
 8008116:	187b      	adds	r3, r7, r1
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	2201      	movs	r2, #1
 800811c:	4013      	ands	r3, r2
 800811e:	d00b      	beq.n	8008138 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008120:	187b      	adds	r3, r7, r1
 8008122:	187a      	adds	r2, r7, r1
 8008124:	8812      	ldrh	r2, [r2, #0]
 8008126:	0852      	lsrs	r2, r2, #1
 8008128:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800812a:	187b      	adds	r3, r7, r1
 800812c:	187a      	adds	r2, r7, r1
 800812e:	8812      	ldrh	r2, [r2, #0]
 8008130:	490f      	ldr	r1, [pc, #60]	@ (8008170 <CRC16_ARC+0x94>)
 8008132:	404a      	eors	r2, r1
 8008134:	801a      	strh	r2, [r3, #0]
 8008136:	e005      	b.n	8008144 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008138:	2216      	movs	r2, #22
 800813a:	18bb      	adds	r3, r7, r2
 800813c:	18ba      	adds	r2, r7, r2
 800813e:	8812      	ldrh	r2, [r2, #0]
 8008140:	0852      	lsrs	r2, r2, #1
 8008142:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3301      	adds	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b07      	cmp	r3, #7
 800814e:	dde1      	ble.n	8008114 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	3301      	adds	r3, #1
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	1cbb      	adds	r3, r7, #2
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	429a      	cmp	r2, r3
 800815e:	dbcb      	blt.n	80080f8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008160:	2316      	movs	r3, #22
 8008162:	18fb      	adds	r3, r7, r3
 8008164:	881b      	ldrh	r3, [r3, #0]
}
 8008166:	0018      	movs	r0, r3
 8008168:	46bd      	mov	sp, r7
 800816a:	b006      	add	sp, #24
 800816c:	bd80      	pop	{r7, pc}
 800816e:	46c0      	nop			@ (mov r8, r8)
 8008170:	ffffa001 	.word	0xffffa001

08008174 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008174:	b40f      	push	{r0, r1, r2, r3}
 8008176:	b590      	push	{r4, r7, lr}
 8008178:	b0a9      	sub	sp, #164	@ 0xa4
 800817a:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 800817c:	23ac      	movs	r3, #172	@ 0xac
 800817e:	2108      	movs	r1, #8
 8008180:	185b      	adds	r3, r3, r1
 8008182:	19db      	adds	r3, r3, r7
 8008184:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	23a8      	movs	r3, #168	@ 0xa8
 800818a:	185b      	adds	r3, r3, r1
 800818c:	19db      	adds	r3, r3, r7
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	2408      	movs	r4, #8
 8008192:	193b      	adds	r3, r7, r4
 8008194:	0018      	movs	r0, r3
 8008196:	f01c fefb 	bl	8024f90 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 800819a:	193b      	adds	r3, r7, r4
 800819c:	0018      	movs	r0, r3
 800819e:	f7f7 ffe5 	bl	800016c <strlen>
 80081a2:	0003      	movs	r3, r0
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	193b      	adds	r3, r7, r4
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f019 fd28 	bl	8021c00 <CDC_Transmit_FS>
}
 80081b0:	46c0      	nop			@ (mov r8, r8)
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b029      	add	sp, #164	@ 0xa4
 80081b6:	bc90      	pop	{r4, r7}
 80081b8:	bc08      	pop	{r3}
 80081ba:	b004      	add	sp, #16
 80081bc:	4718      	bx	r3

080081be <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	000a      	movs	r2, r1
 80081c8:	1cfb      	adds	r3, r7, #3
 80081ca:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 80081cc:	1cfb      	adds	r3, r7, #3
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <PC_selectout+0x1e>
    printf_USB(msg);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7ff ffcc 	bl	8008174 <printf_USB>
  }
//  else {
    printf(msg);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	0018      	movs	r0, r3
 80081e0:	f01c fdac 	bl	8024d3c <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 80081e4:	200a      	movs	r0, #10
 80081e6:	f00b fa77 	bl	80136d8 <HAL_Delay>
}
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	46bd      	mov	sp, r7
 80081ee:	b002      	add	sp, #8
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <PC_show_Keys>:

void PC_show_Keys() {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  static uint8_t SEN55TempConfig[IdSize];         // 23
  static uint8_t SEN55HumidConfig[IdSize];        // 24

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 80081f8:	f000 fe68 	bl	8008ecc <Check_USB_PowerOn>
 80081fc:	1e03      	subs	r3, r0, #0
 80081fe:	d005      	beq.n	800820c <PC_show_Keys+0x18>
    usb_out = true;
 8008200:	4b01      	ldr	r3, [pc, #4]	@ (8008208 <PC_show_Keys+0x14>)
 8008202:	2201      	movs	r2, #1
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e004      	b.n	8008212 <PC_show_Keys+0x1e>
 8008208:	200009d5 	.word	0x200009d5
  }
  else {
    usb_out = false;
 800820c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008604 <PC_show_Keys+0x410>)
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 8008212:	4afd      	ldr	r2, [pc, #1012]	@ (8008608 <PC_show_Keys+0x414>)
 8008214:	4bfd      	ldr	r3, [pc, #1012]	@ (800860c <PC_show_Keys+0x418>)
 8008216:	0011      	movs	r1, r2
 8008218:	0018      	movs	r0, r3
 800821a:	f01c fdff 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800821e:	4bf9      	ldr	r3, [pc, #996]	@ (8008604 <PC_show_Keys+0x410>)
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	4bfa      	ldr	r3, [pc, #1000]	@ (800860c <PC_show_Keys+0x418>)
 8008224:	0011      	movs	r1, r2
 8008226:	0018      	movs	r0, r3
 8008228:	f7ff ffc9 	bl	80081be <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800822c:	4bf8      	ldr	r3, [pc, #992]	@ (8008610 <PC_show_Keys+0x41c>)
 800822e:	48f9      	ldr	r0, [pc, #996]	@ (8008614 <PC_show_Keys+0x420>)
 8008230:	220c      	movs	r2, #12
 8008232:	0019      	movs	r1, r3
 8008234:	f003 f830 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008238:	4af5      	ldr	r2, [pc, #980]	@ (8008610 <PC_show_Keys+0x41c>)
 800823a:	4bf7      	ldr	r3, [pc, #988]	@ (8008618 <PC_show_Keys+0x424>)
 800823c:	0011      	movs	r1, r2
 800823e:	0018      	movs	r0, r3
 8008240:	f7fc fe20 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 8008244:	4af4      	ldr	r2, [pc, #976]	@ (8008618 <PC_show_Keys+0x424>)
 8008246:	49f5      	ldr	r1, [pc, #980]	@ (800861c <PC_show_Keys+0x428>)
 8008248:	4bf0      	ldr	r3, [pc, #960]	@ (800860c <PC_show_Keys+0x418>)
 800824a:	0018      	movs	r0, r3
 800824c:	f01c fde6 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008250:	4bec      	ldr	r3, [pc, #944]	@ (8008604 <PC_show_Keys+0x410>)
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	4bed      	ldr	r3, [pc, #948]	@ (800860c <PC_show_Keys+0x418>)
 8008256:	0011      	movs	r1, r2
 8008258:	0018      	movs	r0, r3
 800825a:	f7ff ffb0 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800825e:	4bf0      	ldr	r3, [pc, #960]	@ (8008620 <PC_show_Keys+0x42c>)
 8008260:	48f0      	ldr	r0, [pc, #960]	@ (8008624 <PC_show_Keys+0x430>)
 8008262:	220c      	movs	r2, #12
 8008264:	0019      	movs	r1, r3
 8008266:	f003 f817 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 800826a:	4aed      	ldr	r2, [pc, #948]	@ (8008620 <PC_show_Keys+0x42c>)
 800826c:	4bea      	ldr	r3, [pc, #936]	@ (8008618 <PC_show_Keys+0x424>)
 800826e:	0011      	movs	r1, r2
 8008270:	0018      	movs	r0, r3
 8008272:	f7fc fe07 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 8008276:	4ae8      	ldr	r2, [pc, #928]	@ (8008618 <PC_show_Keys+0x424>)
 8008278:	49eb      	ldr	r1, [pc, #940]	@ (8008628 <PC_show_Keys+0x434>)
 800827a:	4be4      	ldr	r3, [pc, #912]	@ (800860c <PC_show_Keys+0x418>)
 800827c:	0018      	movs	r0, r3
 800827e:	f01c fdcd 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008282:	4be0      	ldr	r3, [pc, #896]	@ (8008604 <PC_show_Keys+0x410>)
 8008284:	781a      	ldrb	r2, [r3, #0]
 8008286:	4be1      	ldr	r3, [pc, #900]	@ (800860c <PC_show_Keys+0x418>)
 8008288:	0011      	movs	r1, r2
 800828a:	0018      	movs	r0, r3
 800828c:	f7ff ff97 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008290:	4be6      	ldr	r3, [pc, #920]	@ (800862c <PC_show_Keys+0x438>)
 8008292:	48e7      	ldr	r0, [pc, #924]	@ (8008630 <PC_show_Keys+0x43c>)
 8008294:	220c      	movs	r2, #12
 8008296:	0019      	movs	r1, r3
 8008298:	f002 fffe 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 800829c:	4ae3      	ldr	r2, [pc, #908]	@ (800862c <PC_show_Keys+0x438>)
 800829e:	4bde      	ldr	r3, [pc, #888]	@ (8008618 <PC_show_Keys+0x424>)
 80082a0:	0011      	movs	r1, r2
 80082a2:	0018      	movs	r0, r3
 80082a4:	f7fc fdee 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 80082a8:	4adb      	ldr	r2, [pc, #876]	@ (8008618 <PC_show_Keys+0x424>)
 80082aa:	49e2      	ldr	r1, [pc, #904]	@ (8008634 <PC_show_Keys+0x440>)
 80082ac:	4bd7      	ldr	r3, [pc, #860]	@ (800860c <PC_show_Keys+0x418>)
 80082ae:	0018      	movs	r0, r3
 80082b0:	f01c fdb4 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80082b4:	4bd3      	ldr	r3, [pc, #844]	@ (8008604 <PC_show_Keys+0x410>)
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	4bd4      	ldr	r3, [pc, #848]	@ (800860c <PC_show_Keys+0x418>)
 80082ba:	0011      	movs	r1, r2
 80082bc:	0018      	movs	r0, r3
 80082be:	f7ff ff7e 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 80082c2:	4bdd      	ldr	r3, [pc, #884]	@ (8008638 <PC_show_Keys+0x444>)
 80082c4:	48dd      	ldr	r0, [pc, #884]	@ (800863c <PC_show_Keys+0x448>)
 80082c6:	220c      	movs	r2, #12
 80082c8:	0019      	movs	r1, r3
 80082ca:	f002 ffe5 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 80082ce:	4ada      	ldr	r2, [pc, #872]	@ (8008638 <PC_show_Keys+0x444>)
 80082d0:	4bd1      	ldr	r3, [pc, #836]	@ (8008618 <PC_show_Keys+0x424>)
 80082d2:	0011      	movs	r1, r2
 80082d4:	0018      	movs	r0, r3
 80082d6:	f7fc fdd5 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 80082da:	4acf      	ldr	r2, [pc, #828]	@ (8008618 <PC_show_Keys+0x424>)
 80082dc:	49d8      	ldr	r1, [pc, #864]	@ (8008640 <PC_show_Keys+0x44c>)
 80082de:	4bcb      	ldr	r3, [pc, #812]	@ (800860c <PC_show_Keys+0x418>)
 80082e0:	0018      	movs	r0, r3
 80082e2:	f01c fd9b 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80082e6:	4bc7      	ldr	r3, [pc, #796]	@ (8008604 <PC_show_Keys+0x410>)
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	4bc8      	ldr	r3, [pc, #800]	@ (800860c <PC_show_Keys+0x418>)
 80082ec:	0011      	movs	r1, r2
 80082ee:	0018      	movs	r0, r3
 80082f0:	f7ff ff65 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 80082f4:	4bd3      	ldr	r3, [pc, #844]	@ (8008644 <PC_show_Keys+0x450>)
 80082f6:	48d4      	ldr	r0, [pc, #848]	@ (8008648 <PC_show_Keys+0x454>)
 80082f8:	220c      	movs	r2, #12
 80082fa:	0019      	movs	r1, r3
 80082fc:	f002 ffcc 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008300:	4ad0      	ldr	r2, [pc, #832]	@ (8008644 <PC_show_Keys+0x450>)
 8008302:	4bc5      	ldr	r3, [pc, #788]	@ (8008618 <PC_show_Keys+0x424>)
 8008304:	0011      	movs	r1, r2
 8008306:	0018      	movs	r0, r3
 8008308:	f7fc fdbc 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 800830c:	4ac2      	ldr	r2, [pc, #776]	@ (8008618 <PC_show_Keys+0x424>)
 800830e:	49cf      	ldr	r1, [pc, #828]	@ (800864c <PC_show_Keys+0x458>)
 8008310:	4bbe      	ldr	r3, [pc, #760]	@ (800860c <PC_show_Keys+0x418>)
 8008312:	0018      	movs	r0, r3
 8008314:	f01c fd82 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008318:	4bba      	ldr	r3, [pc, #744]	@ (8008604 <PC_show_Keys+0x410>)
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	4bbb      	ldr	r3, [pc, #748]	@ (800860c <PC_show_Keys+0x418>)
 800831e:	0011      	movs	r1, r2
 8008320:	0018      	movs	r0, r3
 8008322:	f7ff ff4c 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8008326:	4bca      	ldr	r3, [pc, #808]	@ (8008650 <PC_show_Keys+0x45c>)
 8008328:	48ca      	ldr	r0, [pc, #808]	@ (8008654 <PC_show_Keys+0x460>)
 800832a:	220c      	movs	r2, #12
 800832c:	0019      	movs	r1, r3
 800832e:	f002 ffb3 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 8008332:	4ac7      	ldr	r2, [pc, #796]	@ (8008650 <PC_show_Keys+0x45c>)
 8008334:	4bb8      	ldr	r3, [pc, #736]	@ (8008618 <PC_show_Keys+0x424>)
 8008336:	0011      	movs	r1, r2
 8008338:	0018      	movs	r0, r3
 800833a:	f7fc fda3 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 800833e:	4ac6      	ldr	r2, [pc, #792]	@ (8008658 <PC_show_Keys+0x464>)
 8008340:	4bb2      	ldr	r3, [pc, #712]	@ (800860c <PC_show_Keys+0x418>)
 8008342:	0011      	movs	r1, r2
 8008344:	0018      	movs	r0, r3
 8008346:	f01c fd69 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800834a:	4bae      	ldr	r3, [pc, #696]	@ (8008604 <PC_show_Keys+0x410>)
 800834c:	781a      	ldrb	r2, [r3, #0]
 800834e:	4baf      	ldr	r3, [pc, #700]	@ (800860c <PC_show_Keys+0x418>)
 8008350:	0011      	movs	r1, r2
 8008352:	0018      	movs	r0, r3
 8008354:	f7ff ff33 	bl	80081be <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 8008358:	4aaf      	ldr	r2, [pc, #700]	@ (8008618 <PC_show_Keys+0x424>)
 800835a:	49c0      	ldr	r1, [pc, #768]	@ (800865c <PC_show_Keys+0x468>)
 800835c:	4bab      	ldr	r3, [pc, #684]	@ (800860c <PC_show_Keys+0x418>)
 800835e:	0018      	movs	r0, r3
 8008360:	f01c fd5c 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008364:	4ba7      	ldr	r3, [pc, #668]	@ (8008604 <PC_show_Keys+0x410>)
 8008366:	781a      	ldrb	r2, [r3, #0]
 8008368:	4ba8      	ldr	r3, [pc, #672]	@ (800860c <PC_show_Keys+0x418>)
 800836a:	0011      	movs	r1, r2
 800836c:	0018      	movs	r0, r3
 800836e:	f7ff ff26 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008372:	4bbb      	ldr	r3, [pc, #748]	@ (8008660 <PC_show_Keys+0x46c>)
 8008374:	48bb      	ldr	r0, [pc, #748]	@ (8008664 <PC_show_Keys+0x470>)
 8008376:	220c      	movs	r2, #12
 8008378:	0019      	movs	r1, r3
 800837a:	f002 ff8d 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 800837e:	4ab8      	ldr	r2, [pc, #736]	@ (8008660 <PC_show_Keys+0x46c>)
 8008380:	4ba5      	ldr	r3, [pc, #660]	@ (8008618 <PC_show_Keys+0x424>)
 8008382:	0011      	movs	r1, r2
 8008384:	0018      	movs	r0, r3
 8008386:	f7fc fd7d 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 800838a:	4ab7      	ldr	r2, [pc, #732]	@ (8008668 <PC_show_Keys+0x474>)
 800838c:	4b9f      	ldr	r3, [pc, #636]	@ (800860c <PC_show_Keys+0x418>)
 800838e:	0011      	movs	r1, r2
 8008390:	0018      	movs	r0, r3
 8008392:	f01c fd43 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008396:	4b9b      	ldr	r3, [pc, #620]	@ (8008604 <PC_show_Keys+0x410>)
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	4b9c      	ldr	r3, [pc, #624]	@ (800860c <PC_show_Keys+0x418>)
 800839c:	0011      	movs	r1, r2
 800839e:	0018      	movs	r0, r3
 80083a0:	f7ff ff0d 	bl	80081be <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 80083a4:	4a9c      	ldr	r2, [pc, #624]	@ (8008618 <PC_show_Keys+0x424>)
 80083a6:	49b1      	ldr	r1, [pc, #708]	@ (800866c <PC_show_Keys+0x478>)
 80083a8:	4b98      	ldr	r3, [pc, #608]	@ (800860c <PC_show_Keys+0x418>)
 80083aa:	0018      	movs	r0, r3
 80083ac:	f01c fd36 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80083b0:	4b94      	ldr	r3, [pc, #592]	@ (8008604 <PC_show_Keys+0x410>)
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	4b95      	ldr	r3, [pc, #596]	@ (800860c <PC_show_Keys+0x418>)
 80083b6:	0011      	movs	r1, r2
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7ff ff00 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 80083be:	4bac      	ldr	r3, [pc, #688]	@ (8008670 <PC_show_Keys+0x47c>)
 80083c0:	48ac      	ldr	r0, [pc, #688]	@ (8008674 <PC_show_Keys+0x480>)
 80083c2:	220c      	movs	r2, #12
 80083c4:	0019      	movs	r1, r3
 80083c6:	f002 ff67 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 80083ca:	4aa9      	ldr	r2, [pc, #676]	@ (8008670 <PC_show_Keys+0x47c>)
 80083cc:	4b92      	ldr	r3, [pc, #584]	@ (8008618 <PC_show_Keys+0x424>)
 80083ce:	0011      	movs	r1, r2
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7fc fd57 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 80083d6:	4a90      	ldr	r2, [pc, #576]	@ (8008618 <PC_show_Keys+0x424>)
 80083d8:	49a7      	ldr	r1, [pc, #668]	@ (8008678 <PC_show_Keys+0x484>)
 80083da:	4b8c      	ldr	r3, [pc, #560]	@ (800860c <PC_show_Keys+0x418>)
 80083dc:	0018      	movs	r0, r3
 80083de:	f01c fd1d 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80083e2:	4b88      	ldr	r3, [pc, #544]	@ (8008604 <PC_show_Keys+0x410>)
 80083e4:	781a      	ldrb	r2, [r3, #0]
 80083e6:	4b89      	ldr	r3, [pc, #548]	@ (800860c <PC_show_Keys+0x418>)
 80083e8:	0011      	movs	r1, r2
 80083ea:	0018      	movs	r0, r3
 80083ec:	f7ff fee7 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 80083f0:	4ba2      	ldr	r3, [pc, #648]	@ (800867c <PC_show_Keys+0x488>)
 80083f2:	48a3      	ldr	r0, [pc, #652]	@ (8008680 <PC_show_Keys+0x48c>)
 80083f4:	220c      	movs	r2, #12
 80083f6:	0019      	movs	r1, r3
 80083f8:	f002 ff4e 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 80083fc:	4a9f      	ldr	r2, [pc, #636]	@ (800867c <PC_show_Keys+0x488>)
 80083fe:	4b86      	ldr	r3, [pc, #536]	@ (8008618 <PC_show_Keys+0x424>)
 8008400:	0011      	movs	r1, r2
 8008402:	0018      	movs	r0, r3
 8008404:	f7fc fd3e 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 8008408:	4a83      	ldr	r2, [pc, #524]	@ (8008618 <PC_show_Keys+0x424>)
 800840a:	499e      	ldr	r1, [pc, #632]	@ (8008684 <PC_show_Keys+0x490>)
 800840c:	4b7f      	ldr	r3, [pc, #508]	@ (800860c <PC_show_Keys+0x418>)
 800840e:	0018      	movs	r0, r3
 8008410:	f01c fd04 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008414:	4b7b      	ldr	r3, [pc, #492]	@ (8008604 <PC_show_Keys+0x410>)
 8008416:	781a      	ldrb	r2, [r3, #0]
 8008418:	4b7c      	ldr	r3, [pc, #496]	@ (800860c <PC_show_Keys+0x418>)
 800841a:	0011      	movs	r1, r2
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff fece 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008422:	4b99      	ldr	r3, [pc, #612]	@ (8008688 <PC_show_Keys+0x494>)
 8008424:	4899      	ldr	r0, [pc, #612]	@ (800868c <PC_show_Keys+0x498>)
 8008426:	220c      	movs	r2, #12
 8008428:	0019      	movs	r1, r3
 800842a:	f002 ff35 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 800842e:	4a96      	ldr	r2, [pc, #600]	@ (8008688 <PC_show_Keys+0x494>)
 8008430:	4b79      	ldr	r3, [pc, #484]	@ (8008618 <PC_show_Keys+0x424>)
 8008432:	0011      	movs	r1, r2
 8008434:	0018      	movs	r0, r3
 8008436:	f7fc fd25 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 800843a:	4a77      	ldr	r2, [pc, #476]	@ (8008618 <PC_show_Keys+0x424>)
 800843c:	4994      	ldr	r1, [pc, #592]	@ (8008690 <PC_show_Keys+0x49c>)
 800843e:	4b73      	ldr	r3, [pc, #460]	@ (800860c <PC_show_Keys+0x418>)
 8008440:	0018      	movs	r0, r3
 8008442:	f01c fceb 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008446:	4b6f      	ldr	r3, [pc, #444]	@ (8008604 <PC_show_Keys+0x410>)
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	4b70      	ldr	r3, [pc, #448]	@ (800860c <PC_show_Keys+0x418>)
 800844c:	0011      	movs	r1, r2
 800844e:	0018      	movs	r0, r3
 8008450:	f7ff feb5 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008454:	4b8f      	ldr	r3, [pc, #572]	@ (8008694 <PC_show_Keys+0x4a0>)
 8008456:	4890      	ldr	r0, [pc, #576]	@ (8008698 <PC_show_Keys+0x4a4>)
 8008458:	220c      	movs	r2, #12
 800845a:	0019      	movs	r1, r3
 800845c:	f002 ff1c 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008460:	4a8c      	ldr	r2, [pc, #560]	@ (8008694 <PC_show_Keys+0x4a0>)
 8008462:	4b6d      	ldr	r3, [pc, #436]	@ (8008618 <PC_show_Keys+0x424>)
 8008464:	0011      	movs	r1, r2
 8008466:	0018      	movs	r0, r3
 8008468:	f7fc fd0c 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 800846c:	4a6a      	ldr	r2, [pc, #424]	@ (8008618 <PC_show_Keys+0x424>)
 800846e:	498b      	ldr	r1, [pc, #556]	@ (800869c <PC_show_Keys+0x4a8>)
 8008470:	4b66      	ldr	r3, [pc, #408]	@ (800860c <PC_show_Keys+0x418>)
 8008472:	0018      	movs	r0, r3
 8008474:	f01c fcd2 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008478:	4b62      	ldr	r3, [pc, #392]	@ (8008604 <PC_show_Keys+0x410>)
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	4b63      	ldr	r3, [pc, #396]	@ (800860c <PC_show_Keys+0x418>)
 800847e:	0011      	movs	r1, r2
 8008480:	0018      	movs	r0, r3
 8008482:	f7ff fe9c 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008486:	4b86      	ldr	r3, [pc, #536]	@ (80086a0 <PC_show_Keys+0x4ac>)
 8008488:	4886      	ldr	r0, [pc, #536]	@ (80086a4 <PC_show_Keys+0x4b0>)
 800848a:	220c      	movs	r2, #12
 800848c:	0019      	movs	r1, r3
 800848e:	f002 ff03 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008492:	4a83      	ldr	r2, [pc, #524]	@ (80086a0 <PC_show_Keys+0x4ac>)
 8008494:	4b60      	ldr	r3, [pc, #384]	@ (8008618 <PC_show_Keys+0x424>)
 8008496:	0011      	movs	r1, r2
 8008498:	0018      	movs	r0, r3
 800849a:	f7fc fcf3 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 800849e:	4a5e      	ldr	r2, [pc, #376]	@ (8008618 <PC_show_Keys+0x424>)
 80084a0:	4981      	ldr	r1, [pc, #516]	@ (80086a8 <PC_show_Keys+0x4b4>)
 80084a2:	4b5a      	ldr	r3, [pc, #360]	@ (800860c <PC_show_Keys+0x418>)
 80084a4:	0018      	movs	r0, r3
 80084a6:	f01c fcb9 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80084aa:	4b56      	ldr	r3, [pc, #344]	@ (8008604 <PC_show_Keys+0x410>)
 80084ac:	781a      	ldrb	r2, [r3, #0]
 80084ae:	4b57      	ldr	r3, [pc, #348]	@ (800860c <PC_show_Keys+0x418>)
 80084b0:	0011      	movs	r1, r2
 80084b2:	0018      	movs	r0, r3
 80084b4:	f7ff fe83 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80084b8:	4b7c      	ldr	r3, [pc, #496]	@ (80086ac <PC_show_Keys+0x4b8>)
 80084ba:	487d      	ldr	r0, [pc, #500]	@ (80086b0 <PC_show_Keys+0x4bc>)
 80084bc:	2220      	movs	r2, #32
 80084be:	0019      	movs	r1, r3
 80084c0:	f002 feea 	bl	800b298 <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 80084c4:	4a7b      	ldr	r2, [pc, #492]	@ (80086b4 <PC_show_Keys+0x4c0>)
 80084c6:	4b51      	ldr	r3, [pc, #324]	@ (800860c <PC_show_Keys+0x418>)
 80084c8:	0011      	movs	r1, r2
 80084ca:	0018      	movs	r0, r3
 80084cc:	f01c fca6 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80084d0:	4b4c      	ldr	r3, [pc, #304]	@ (8008604 <PC_show_Keys+0x410>)
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	4b4d      	ldr	r3, [pc, #308]	@ (800860c <PC_show_Keys+0x418>)
 80084d6:	0011      	movs	r1, r2
 80084d8:	0018      	movs	r0, r3
 80084da:	f7ff fe70 	bl	80081be <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 80084de:	4a73      	ldr	r2, [pc, #460]	@ (80086ac <PC_show_Keys+0x4b8>)
 80084e0:	4975      	ldr	r1, [pc, #468]	@ (80086b8 <PC_show_Keys+0x4c4>)
 80084e2:	4b4a      	ldr	r3, [pc, #296]	@ (800860c <PC_show_Keys+0x418>)
 80084e4:	0018      	movs	r0, r3
 80084e6:	f01c fc99 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80084ea:	4b46      	ldr	r3, [pc, #280]	@ (8008604 <PC_show_Keys+0x410>)
 80084ec:	781a      	ldrb	r2, [r3, #0]
 80084ee:	4b47      	ldr	r3, [pc, #284]	@ (800860c <PC_show_Keys+0x418>)
 80084f0:	0011      	movs	r1, r2
 80084f2:	0018      	movs	r0, r3
 80084f4:	f7ff fe63 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 80084f8:	4b70      	ldr	r3, [pc, #448]	@ (80086bc <PC_show_Keys+0x4c8>)
 80084fa:	4871      	ldr	r0, [pc, #452]	@ (80086c0 <PC_show_Keys+0x4cc>)
 80084fc:	220c      	movs	r2, #12
 80084fe:	0019      	movs	r1, r3
 8008500:	f002 feca 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8008504:	4a6d      	ldr	r2, [pc, #436]	@ (80086bc <PC_show_Keys+0x4c8>)
 8008506:	4b44      	ldr	r3, [pc, #272]	@ (8008618 <PC_show_Keys+0x424>)
 8008508:	0011      	movs	r1, r2
 800850a:	0018      	movs	r0, r3
 800850c:	f7fc fcba 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 8008510:	4a41      	ldr	r2, [pc, #260]	@ (8008618 <PC_show_Keys+0x424>)
 8008512:	496c      	ldr	r1, [pc, #432]	@ (80086c4 <PC_show_Keys+0x4d0>)
 8008514:	4b3d      	ldr	r3, [pc, #244]	@ (800860c <PC_show_Keys+0x418>)
 8008516:	0018      	movs	r0, r3
 8008518:	f01c fc80 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800851c:	4b39      	ldr	r3, [pc, #228]	@ (8008604 <PC_show_Keys+0x410>)
 800851e:	781a      	ldrb	r2, [r3, #0]
 8008520:	4b3a      	ldr	r3, [pc, #232]	@ (800860c <PC_show_Keys+0x418>)
 8008522:	0011      	movs	r1, r2
 8008524:	0018      	movs	r0, r3
 8008526:	f7ff fe4a 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 800852a:	4b67      	ldr	r3, [pc, #412]	@ (80086c8 <PC_show_Keys+0x4d4>)
 800852c:	4867      	ldr	r0, [pc, #412]	@ (80086cc <PC_show_Keys+0x4d8>)
 800852e:	220c      	movs	r2, #12
 8008530:	0019      	movs	r1, r3
 8008532:	f002 feb1 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 8008536:	4a64      	ldr	r2, [pc, #400]	@ (80086c8 <PC_show_Keys+0x4d4>)
 8008538:	4b37      	ldr	r3, [pc, #220]	@ (8008618 <PC_show_Keys+0x424>)
 800853a:	0011      	movs	r1, r2
 800853c:	0018      	movs	r0, r3
 800853e:	f7fc fca1 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 8008542:	4a35      	ldr	r2, [pc, #212]	@ (8008618 <PC_show_Keys+0x424>)
 8008544:	4962      	ldr	r1, [pc, #392]	@ (80086d0 <PC_show_Keys+0x4dc>)
 8008546:	4b31      	ldr	r3, [pc, #196]	@ (800860c <PC_show_Keys+0x418>)
 8008548:	0018      	movs	r0, r3
 800854a:	f01c fc67 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800854e:	4b2d      	ldr	r3, [pc, #180]	@ (8008604 <PC_show_Keys+0x410>)
 8008550:	781a      	ldrb	r2, [r3, #0]
 8008552:	4b2e      	ldr	r3, [pc, #184]	@ (800860c <PC_show_Keys+0x418>)
 8008554:	0011      	movs	r1, r2
 8008556:	0018      	movs	r0, r3
 8008558:	f7ff fe31 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 800855c:	4b5d      	ldr	r3, [pc, #372]	@ (80086d4 <PC_show_Keys+0x4e0>)
 800855e:	485e      	ldr	r0, [pc, #376]	@ (80086d8 <PC_show_Keys+0x4e4>)
 8008560:	220c      	movs	r2, #12
 8008562:	0019      	movs	r1, r3
 8008564:	f002 fe98 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008568:	4a5a      	ldr	r2, [pc, #360]	@ (80086d4 <PC_show_Keys+0x4e0>)
 800856a:	4b2b      	ldr	r3, [pc, #172]	@ (8008618 <PC_show_Keys+0x424>)
 800856c:	0011      	movs	r1, r2
 800856e:	0018      	movs	r0, r3
 8008570:	f7fc fc88 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 8008574:	4a28      	ldr	r2, [pc, #160]	@ (8008618 <PC_show_Keys+0x424>)
 8008576:	4959      	ldr	r1, [pc, #356]	@ (80086dc <PC_show_Keys+0x4e8>)
 8008578:	4b24      	ldr	r3, [pc, #144]	@ (800860c <PC_show_Keys+0x418>)
 800857a:	0018      	movs	r0, r3
 800857c:	f01c fc4e 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008580:	4b20      	ldr	r3, [pc, #128]	@ (8008604 <PC_show_Keys+0x410>)
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	4b21      	ldr	r3, [pc, #132]	@ (800860c <PC_show_Keys+0x418>)
 8008586:	0011      	movs	r1, r2
 8008588:	0018      	movs	r0, r3
 800858a:	f7ff fe18 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 800858e:	4b54      	ldr	r3, [pc, #336]	@ (80086e0 <PC_show_Keys+0x4ec>)
 8008590:	4854      	ldr	r0, [pc, #336]	@ (80086e4 <PC_show_Keys+0x4f0>)
 8008592:	220c      	movs	r2, #12
 8008594:	0019      	movs	r1, r3
 8008596:	f002 fe7f 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 800859a:	4a51      	ldr	r2, [pc, #324]	@ (80086e0 <PC_show_Keys+0x4ec>)
 800859c:	4b1e      	ldr	r3, [pc, #120]	@ (8008618 <PC_show_Keys+0x424>)
 800859e:	0011      	movs	r1, r2
 80085a0:	0018      	movs	r0, r3
 80085a2:	f7fc fc6f 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 80085a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <PC_show_Keys+0x424>)
 80085a8:	494f      	ldr	r1, [pc, #316]	@ (80086e8 <PC_show_Keys+0x4f4>)
 80085aa:	4b18      	ldr	r3, [pc, #96]	@ (800860c <PC_show_Keys+0x418>)
 80085ac:	0018      	movs	r0, r3
 80085ae:	f01c fc35 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085b2:	4b14      	ldr	r3, [pc, #80]	@ (8008604 <PC_show_Keys+0x410>)
 80085b4:	781a      	ldrb	r2, [r3, #0]
 80085b6:	4b15      	ldr	r3, [pc, #84]	@ (800860c <PC_show_Keys+0x418>)
 80085b8:	0011      	movs	r1, r2
 80085ba:	0018      	movs	r0, r3
 80085bc:	f7ff fdff 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 80085c0:	4b4a      	ldr	r3, [pc, #296]	@ (80086ec <PC_show_Keys+0x4f8>)
 80085c2:	484b      	ldr	r0, [pc, #300]	@ (80086f0 <PC_show_Keys+0x4fc>)
 80085c4:	220c      	movs	r2, #12
 80085c6:	0019      	movs	r1, r3
 80085c8:	f002 fe66 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 80085cc:	4a47      	ldr	r2, [pc, #284]	@ (80086ec <PC_show_Keys+0x4f8>)
 80085ce:	4b12      	ldr	r3, [pc, #72]	@ (8008618 <PC_show_Keys+0x424>)
 80085d0:	0011      	movs	r1, r2
 80085d2:	0018      	movs	r0, r3
 80085d4:	f7fc fc56 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 80085d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008618 <PC_show_Keys+0x424>)
 80085da:	4946      	ldr	r1, [pc, #280]	@ (80086f4 <PC_show_Keys+0x500>)
 80085dc:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <PC_show_Keys+0x418>)
 80085de:	0018      	movs	r0, r3
 80085e0:	f01c fc1c 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80085e4:	4b07      	ldr	r3, [pc, #28]	@ (8008604 <PC_show_Keys+0x410>)
 80085e6:	781a      	ldrb	r2, [r3, #0]
 80085e8:	4b08      	ldr	r3, [pc, #32]	@ (800860c <PC_show_Keys+0x418>)
 80085ea:	0011      	movs	r1, r2
 80085ec:	0018      	movs	r0, r3
 80085ee:	f7ff fde6 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 80085f2:	4b41      	ldr	r3, [pc, #260]	@ (80086f8 <PC_show_Keys+0x504>)
 80085f4:	4841      	ldr	r0, [pc, #260]	@ (80086fc <PC_show_Keys+0x508>)
 80085f6:	220c      	movs	r2, #12
 80085f8:	0019      	movs	r1, r3
 80085fa:	f002 fe4d 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 80085fe:	4a3e      	ldr	r2, [pc, #248]	@ (80086f8 <PC_show_Keys+0x504>)
 8008600:	e07e      	b.n	8008700 <PC_show_Keys+0x50c>
 8008602:	46c0      	nop			@ (mov r8, r8)
 8008604:	200009d5 	.word	0x200009d5
 8008608:	0802a7fc 	.word	0x0802a7fc
 800860c:	200009d8 	.word	0x200009d8
 8008610:	20000a20 	.word	0x20000a20
 8008614:	08080000 	.word	0x08080000
 8008618:	20000a2c 	.word	0x20000a2c
 800861c:	0802a818 	.word	0x0802a818
 8008620:	20000a48 	.word	0x20000a48
 8008624:	0808000c 	.word	0x0808000c
 8008628:	0802a844 	.word	0x0802a844
 800862c:	20000a54 	.word	0x20000a54
 8008630:	08080018 	.word	0x08080018
 8008634:	0802a870 	.word	0x0802a870
 8008638:	20000a60 	.word	0x20000a60
 800863c:	08080024 	.word	0x08080024
 8008640:	0802a89c 	.word	0x0802a89c
 8008644:	20000a6c 	.word	0x20000a6c
 8008648:	08080030 	.word	0x08080030
 800864c:	0802a8c8 	.word	0x0802a8c8
 8008650:	20000a78 	.word	0x20000a78
 8008654:	0808003c 	.word	0x0808003c
 8008658:	0802a8f4 	.word	0x0802a8f4
 800865c:	0802a910 	.word	0x0802a910
 8008660:	20000a84 	.word	0x20000a84
 8008664:	08080048 	.word	0x08080048
 8008668:	0802a93c 	.word	0x0802a93c
 800866c:	0802a950 	.word	0x0802a950
 8008670:	20000a90 	.word	0x20000a90
 8008674:	08080054 	.word	0x08080054
 8008678:	0802a97c 	.word	0x0802a97c
 800867c:	20000a9c 	.word	0x20000a9c
 8008680:	08080060 	.word	0x08080060
 8008684:	0802a9a8 	.word	0x0802a9a8
 8008688:	20000aa8 	.word	0x20000aa8
 800868c:	0808006c 	.word	0x0808006c
 8008690:	0802a9d4 	.word	0x0802a9d4
 8008694:	20000ab4 	.word	0x20000ab4
 8008698:	08080078 	.word	0x08080078
 800869c:	0802aa00 	.word	0x0802aa00
 80086a0:	20000ac0 	.word	0x20000ac0
 80086a4:	08080084 	.word	0x08080084
 80086a8:	0802aa2c 	.word	0x0802aa2c
 80086ac:	20000acc 	.word	0x20000acc
 80086b0:	08080090 	.word	0x08080090
 80086b4:	0802aa58 	.word	0x0802aa58
 80086b8:	0802aa80 	.word	0x0802aa80
 80086bc:	20000aec 	.word	0x20000aec
 80086c0:	080800b0 	.word	0x080800b0
 80086c4:	0802aa88 	.word	0x0802aa88
 80086c8:	20000af8 	.word	0x20000af8
 80086cc:	080800bc 	.word	0x080800bc
 80086d0:	0802aab4 	.word	0x0802aab4
 80086d4:	20000b04 	.word	0x20000b04
 80086d8:	080800c8 	.word	0x080800c8
 80086dc:	0802aae0 	.word	0x0802aae0
 80086e0:	20000b10 	.word	0x20000b10
 80086e4:	080800d4 	.word	0x080800d4
 80086e8:	0802ab0c 	.word	0x0802ab0c
 80086ec:	20000b1c 	.word	0x20000b1c
 80086f0:	080800e0 	.word	0x080800e0
 80086f4:	0802ab38 	.word	0x0802ab38
 80086f8:	20000b28 	.word	0x20000b28
 80086fc:	080800ec 	.word	0x080800ec
 8008700:	4b5d      	ldr	r3, [pc, #372]	@ (8008878 <PC_show_Keys+0x684>)
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f7fc fbbd 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 800870a:	4a5b      	ldr	r2, [pc, #364]	@ (8008878 <PC_show_Keys+0x684>)
 800870c:	495b      	ldr	r1, [pc, #364]	@ (800887c <PC_show_Keys+0x688>)
 800870e:	4b5c      	ldr	r3, [pc, #368]	@ (8008880 <PC_show_Keys+0x68c>)
 8008710:	0018      	movs	r0, r3
 8008712:	f01c fb83 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008716:	4b5b      	ldr	r3, [pc, #364]	@ (8008884 <PC_show_Keys+0x690>)
 8008718:	781a      	ldrb	r2, [r3, #0]
 800871a:	4b59      	ldr	r3, [pc, #356]	@ (8008880 <PC_show_Keys+0x68c>)
 800871c:	0011      	movs	r1, r2
 800871e:	0018      	movs	r0, r3
 8008720:	f7ff fd4d 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008724:	4b58      	ldr	r3, [pc, #352]	@ (8008888 <PC_show_Keys+0x694>)
 8008726:	4859      	ldr	r0, [pc, #356]	@ (800888c <PC_show_Keys+0x698>)
 8008728:	220c      	movs	r2, #12
 800872a:	0019      	movs	r1, r3
 800872c:	f002 fdb4 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008730:	4a55      	ldr	r2, [pc, #340]	@ (8008888 <PC_show_Keys+0x694>)
 8008732:	4b51      	ldr	r3, [pc, #324]	@ (8008878 <PC_show_Keys+0x684>)
 8008734:	0011      	movs	r1, r2
 8008736:	0018      	movs	r0, r3
 8008738:	f7fc fba4 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 800873c:	4a4e      	ldr	r2, [pc, #312]	@ (8008878 <PC_show_Keys+0x684>)
 800873e:	4954      	ldr	r1, [pc, #336]	@ (8008890 <PC_show_Keys+0x69c>)
 8008740:	4b4f      	ldr	r3, [pc, #316]	@ (8008880 <PC_show_Keys+0x68c>)
 8008742:	0018      	movs	r0, r3
 8008744:	f01c fb6a 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008748:	4b4e      	ldr	r3, [pc, #312]	@ (8008884 <PC_show_Keys+0x690>)
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	4b4c      	ldr	r3, [pc, #304]	@ (8008880 <PC_show_Keys+0x68c>)
 800874e:	0011      	movs	r1, r2
 8008750:	0018      	movs	r0, r3
 8008752:	f7ff fd34 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008756:	4b4f      	ldr	r3, [pc, #316]	@ (8008894 <PC_show_Keys+0x6a0>)
 8008758:	484f      	ldr	r0, [pc, #316]	@ (8008898 <PC_show_Keys+0x6a4>)
 800875a:	220c      	movs	r2, #12
 800875c:	0019      	movs	r1, r3
 800875e:	f002 fd9b 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008762:	4a4c      	ldr	r2, [pc, #304]	@ (8008894 <PC_show_Keys+0x6a0>)
 8008764:	4b44      	ldr	r3, [pc, #272]	@ (8008878 <PC_show_Keys+0x684>)
 8008766:	0011      	movs	r1, r2
 8008768:	0018      	movs	r0, r3
 800876a:	f7fc fb8b 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 800876e:	4a42      	ldr	r2, [pc, #264]	@ (8008878 <PC_show_Keys+0x684>)
 8008770:	494a      	ldr	r1, [pc, #296]	@ (800889c <PC_show_Keys+0x6a8>)
 8008772:	4b43      	ldr	r3, [pc, #268]	@ (8008880 <PC_show_Keys+0x68c>)
 8008774:	0018      	movs	r0, r3
 8008776:	f01c fb51 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800877a:	4b42      	ldr	r3, [pc, #264]	@ (8008884 <PC_show_Keys+0x690>)
 800877c:	781a      	ldrb	r2, [r3, #0]
 800877e:	4b40      	ldr	r3, [pc, #256]	@ (8008880 <PC_show_Keys+0x68c>)
 8008780:	0011      	movs	r1, r2
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff fd1b 	bl	80081be <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008788:	4a45      	ldr	r2, [pc, #276]	@ (80088a0 <PC_show_Keys+0x6ac>)
 800878a:	4b3d      	ldr	r3, [pc, #244]	@ (8008880 <PC_show_Keys+0x68c>)
 800878c:	0011      	movs	r1, r2
 800878e:	0018      	movs	r0, r3
 8008790:	f01c fb44 	bl	8024e1c <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8008794:	4b43      	ldr	r3, [pc, #268]	@ (80088a4 <PC_show_Keys+0x6b0>)
 8008796:	4844      	ldr	r0, [pc, #272]	@ (80088a8 <PC_show_Keys+0x6b4>)
 8008798:	220c      	movs	r2, #12
 800879a:	0019      	movs	r1, r3
 800879c:	f002 fd7c 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 80087a0:	4a40      	ldr	r2, [pc, #256]	@ (80088a4 <PC_show_Keys+0x6b0>)
 80087a2:	4b35      	ldr	r3, [pc, #212]	@ (8008878 <PC_show_Keys+0x684>)
 80087a4:	0011      	movs	r1, r2
 80087a6:	0018      	movs	r0, r3
 80087a8:	f7fc fb6c 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 80087ac:	4a32      	ldr	r2, [pc, #200]	@ (8008878 <PC_show_Keys+0x684>)
 80087ae:	493f      	ldr	r1, [pc, #252]	@ (80088ac <PC_show_Keys+0x6b8>)
 80087b0:	4b33      	ldr	r3, [pc, #204]	@ (8008880 <PC_show_Keys+0x68c>)
 80087b2:	0018      	movs	r0, r3
 80087b4:	f01c fb32 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087b8:	4b32      	ldr	r3, [pc, #200]	@ (8008884 <PC_show_Keys+0x690>)
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	4b30      	ldr	r3, [pc, #192]	@ (8008880 <PC_show_Keys+0x68c>)
 80087be:	0011      	movs	r1, r2
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7ff fcfc 	bl	80081be <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 80087c6:	4b3a      	ldr	r3, [pc, #232]	@ (80088b0 <PC_show_Keys+0x6bc>)
 80087c8:	483a      	ldr	r0, [pc, #232]	@ (80088b4 <PC_show_Keys+0x6c0>)
 80087ca:	220c      	movs	r2, #12
 80087cc:	0019      	movs	r1, r3
 80087ce:	f002 fd63 	bl	800b298 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 80087d2:	4a37      	ldr	r2, [pc, #220]	@ (80088b0 <PC_show_Keys+0x6bc>)
 80087d4:	4b28      	ldr	r3, [pc, #160]	@ (8008878 <PC_show_Keys+0x684>)
 80087d6:	0011      	movs	r1, r2
 80087d8:	0018      	movs	r0, r3
 80087da:	f7fc fb53 	bl	8004e84 <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 80087de:	4a26      	ldr	r2, [pc, #152]	@ (8008878 <PC_show_Keys+0x684>)
 80087e0:	4935      	ldr	r1, [pc, #212]	@ (80088b8 <PC_show_Keys+0x6c4>)
 80087e2:	4b27      	ldr	r3, [pc, #156]	@ (8008880 <PC_show_Keys+0x68c>)
 80087e4:	0018      	movs	r0, r3
 80087e6:	f01c fb19 	bl	8024e1c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087ea:	4b26      	ldr	r3, [pc, #152]	@ (8008884 <PC_show_Keys+0x690>)
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	4b24      	ldr	r3, [pc, #144]	@ (8008880 <PC_show_Keys+0x68c>)
 80087f0:	0011      	movs	r1, r2
 80087f2:	0018      	movs	r0, r3
 80087f4:	f7ff fce3 	bl	80081be <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 80087f8:	4b30      	ldr	r3, [pc, #192]	@ (80088bc <PC_show_Keys+0x6c8>)
 80087fa:	0018      	movs	r0, r3
 80087fc:	f7ff fcba 	bl	8008174 <printf_USB>
  HAL_Delay(10);
 8008800:	200a      	movs	r0, #10
 8008802:	f00a ff69 	bl	80136d8 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8008806:	4b2e      	ldr	r3, [pc, #184]	@ (80088c0 <PC_show_Keys+0x6cc>)
 8008808:	0018      	movs	r0, r3
 800880a:	f7ff fcb3 	bl	8008174 <printf_USB>
  HAL_Delay(10);
 800880e:	200a      	movs	r0, #10
 8008810:	f00a ff62 	bl	80136d8 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 8008814:	4b2b      	ldr	r3, [pc, #172]	@ (80088c4 <PC_show_Keys+0x6d0>)
 8008816:	0018      	movs	r0, r3
 8008818:	f7ff fcac 	bl	8008174 <printf_USB>
  HAL_Delay(10);
 800881c:	200a      	movs	r0, #10
 800881e:	f00a ff5b 	bl	80136d8 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8008822:	4b29      	ldr	r3, [pc, #164]	@ (80088c8 <PC_show_Keys+0x6d4>)
 8008824:	0018      	movs	r0, r3
 8008826:	f7ff fca5 	bl	8008174 <printf_USB>
  HAL_Delay(10);
 800882a:	200a      	movs	r0, #10
 800882c:	f00a ff54 	bl	80136d8 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8008830:	4b26      	ldr	r3, [pc, #152]	@ (80088cc <PC_show_Keys+0x6d8>)
 8008832:	0018      	movs	r0, r3
 8008834:	f7ff fc9e 	bl	8008174 <printf_USB>
  HAL_Delay(10);
 8008838:	200a      	movs	r0, #10
 800883a:	f00a ff4d 	bl	80136d8 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 800883e:	4b24      	ldr	r3, [pc, #144]	@ (80088d0 <PC_show_Keys+0x6dc>)
 8008840:	0018      	movs	r0, r3
 8008842:	f7ff fc97 	bl	8008174 <printf_USB>
  HAL_Delay(10);
 8008846:	200a      	movs	r0, #10
 8008848:	f00a ff46 	bl	80136d8 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 800884c:	4b21      	ldr	r3, [pc, #132]	@ (80088d4 <PC_show_Keys+0x6e0>)
 800884e:	0018      	movs	r0, r3
 8008850:	f7ff fc90 	bl	8008174 <printf_USB>
  HAL_Delay(10);
 8008854:	200a      	movs	r0, #10
 8008856:	f00a ff3f 	bl	80136d8 <HAL_Delay>
  if (!usb_out) {
 800885a:	4b0a      	ldr	r3, [pc, #40]	@ (8008884 <PC_show_Keys+0x690>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2201      	movs	r2, #1
 8008860:	4053      	eors	r3, r2
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d003      	beq.n	8008870 <PC_show_Keys+0x67c>
    printf("A key can only be changed by USB input or the configuration programm.\r\n");
 8008868:	4b1b      	ldr	r3, [pc, #108]	@ (80088d8 <PC_show_Keys+0x6e4>)
 800886a:	0018      	movs	r0, r3
 800886c:	f01c facc 	bl	8024e08 <puts>
  }
}
 8008870:	46c0      	nop			@ (mov r8, r8)
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	46c0      	nop			@ (mov r8, r8)
 8008878:	20000a2c 	.word	0x20000a2c
 800887c:	0802ab64 	.word	0x0802ab64
 8008880:	200009d8 	.word	0x200009d8
 8008884:	200009d5 	.word	0x200009d5
 8008888:	20000b34 	.word	0x20000b34
 800888c:	080800f8 	.word	0x080800f8
 8008890:	0802ab90 	.word	0x0802ab90
 8008894:	20000b40 	.word	0x20000b40
 8008898:	08080104 	.word	0x08080104
 800889c:	0802abbc 	.word	0x0802abbc
 80088a0:	0802abe8 	.word	0x0802abe8
 80088a4:	20000b4c 	.word	0x20000b4c
 80088a8:	08080170 	.word	0x08080170
 80088ac:	0802ac14 	.word	0x0802ac14
 80088b0:	20000b58 	.word	0x20000b58
 80088b4:	0808017c 	.word	0x0808017c
 80088b8:	0802ac40 	.word	0x0802ac40
 80088bc:	0802ac6c 	.word	0x0802ac6c
 80088c0:	0802ac84 	.word	0x0802ac84
 80088c4:	0802acb0 	.word	0x0802acb0
 80088c8:	0802ace0 	.word	0x0802ace0
 80088cc:	0802ad1c 	.word	0x0802ad1c
 80088d0:	0802ad54 	.word	0x0802ad54
 80088d4:	0802ad88 	.word	0x0802ad88
 80088d8:	0802ada8 	.word	0x0802ada8

080088dc <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	4b20      	ldr	r3, [pc, #128]	@ (800896c <ascii_to_uint8+0x90>)
 80088ec:	18d3      	adds	r3, r2, r3
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	001a      	movs	r2, r3
 80088f2:	2304      	movs	r3, #4
 80088f4:	4013      	ands	r3, r2
 80088f6:	d00a      	beq.n	800890e <ascii_to_uint8+0x32>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3301      	adds	r3, #1
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	4b1a      	ldr	r3, [pc, #104]	@ (800896c <ascii_to_uint8+0x90>)
 8008902:	18d3      	adds	r3, r2, r3
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	001a      	movs	r2, r3
 8008908:	2304      	movs	r3, #4
 800890a:	4013      	ands	r3, r2
 800890c:	d105      	bne.n	800891a <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 800890e:	4b18      	ldr	r3, [pc, #96]	@ (8008970 <ascii_to_uint8+0x94>)
 8008910:	0018      	movs	r0, r3
 8008912:	f7ff fc2f 	bl	8008174 <printf_USB>
    return 100;
 8008916:	2364      	movs	r3, #100	@ 0x64
 8008918:	e024      	b.n	8008964 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	1c1a      	adds	r2, r3, #0
 8008920:	0092      	lsls	r2, r2, #2
 8008922:	18d3      	adds	r3, r2, r3
 8008924:	18db      	adds	r3, r3, r3
 8008926:	b2da      	uxtb	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3301      	adds	r3, #1
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	18d3      	adds	r3, r2, r3
 8008930:	b2da      	uxtb	r2, r3
 8008932:	210f      	movs	r1, #15
 8008934:	187b      	adds	r3, r7, r1
 8008936:	3a10      	subs	r2, #16
 8008938:	701a      	strb	r2, [r3, #0]
  if (value > 24 || value == 21 || value == 22) {
 800893a:	187b      	adds	r3, r7, r1
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b18      	cmp	r3, #24
 8008940:	d807      	bhi.n	8008952 <ascii_to_uint8+0x76>
 8008942:	187b      	adds	r3, r7, r1
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b15      	cmp	r3, #21
 8008948:	d003      	beq.n	8008952 <ascii_to_uint8+0x76>
 800894a:	187b      	adds	r3, r7, r1
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b16      	cmp	r3, #22
 8008950:	d105      	bne.n	800895e <ascii_to_uint8+0x82>
    printf_USB("Error: value out of range\r\n");
 8008952:	4b08      	ldr	r3, [pc, #32]	@ (8008974 <ascii_to_uint8+0x98>)
 8008954:	0018      	movs	r0, r3
 8008956:	f7ff fc0d 	bl	8008174 <printf_USB>
    return 100;
 800895a:	2364      	movs	r3, #100	@ 0x64
 800895c:	e002      	b.n	8008964 <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 800895e:	230f      	movs	r3, #15
 8008960:	18fb      	adds	r3, r7, r3
 8008962:	781b      	ldrb	r3, [r3, #0]
}
 8008964:	0018      	movs	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	b004      	add	sp, #16
 800896a:	bd80      	pop	{r7, pc}
 800896c:	0802db48 	.word	0x0802db48
 8008970:	0802adf0 	.word	0x0802adf0
 8008974:	0802ae18 	.word	0x0802ae18

08008978 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b0d1      	sub	sp, #324	@ 0x144
 800897c:	af3e      	add	r7, sp, #248	@ 0xf8
 800897e:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8008980:	f019 f998 	bl	8021cb4 <GetUsbRxDataSize>
 8008984:	0003      	movs	r3, r0
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t r = 0;
 8008988:	2347      	movs	r3, #71	@ 0x47
 800898a:	18fb      	adds	r3, r7, r3
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
  char Buffer[25];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2124      	movs	r1, #36	@ 0x24
 8008994:	0018      	movs	r0, r3
 8008996:	f01c fbaf 	bl	80250f8 <strchr>
 800899a:	0003      	movs	r3, r0
 800899c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((length == 1) && (message != NULL) && (len != 28)){
 800899e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d10f      	bne.n	80089c4 <Process_USB_input+0x4c>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00c      	beq.n	80089c4 <Process_USB_input+0x4c>
 80089aa:	4bdb      	ldr	r3, [pc, #876]	@ (8008d18 <Process_USB_input+0x3a0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b1c      	cmp	r3, #28
 80089b0:	d008      	beq.n	80089c4 <Process_USB_input+0x4c>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 80089b2:	4ada      	ldr	r2, [pc, #872]	@ (8008d1c <Process_USB_input+0x3a4>)
 80089b4:	4bda      	ldr	r3, [pc, #872]	@ (8008d20 <Process_USB_input+0x3a8>)
 80089b6:	0019      	movs	r1, r3
 80089b8:	2003      	movs	r0, #3
 80089ba:	f00a f945 	bl	8012c48 <CreateLine>
      len = 28;
 80089be:	4bd6      	ldr	r3, [pc, #856]	@ (8008d18 <Process_USB_input+0x3a0>)
 80089c0:	221c      	movs	r2, #28
 80089c2:	601a      	str	r2, [r3, #0]
  }
  if (length >= len) {
 80089c4:	4bd4      	ldr	r3, [pc, #848]	@ (8008d18 <Process_USB_input+0x3a0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d200      	bcs.n	80089d0 <Process_USB_input+0x58>
 80089ce:	e18b      	b.n	8008ce8 <Process_USB_input+0x370>
//    HAL_Delay(20);
    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	4bd4      	ldr	r3, [pc, #848]	@ (8008d24 <Process_USB_input+0x3ac>)
 80089d4:	0011      	movs	r1, r2
 80089d6:	0018      	movs	r0, r3
 80089d8:	f7ff fbcc 	bl	8008174 <printf_USB>
    printf_USB("USB input: %s\r\n", (const char*)data);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	4bd2      	ldr	r3, [pc, #840]	@ (8008d28 <Process_USB_input+0x3b0>)
 80089e0:	0011      	movs	r1, r2
 80089e2:	0018      	movs	r0, r3
 80089e4:	f7ff fbc6 	bl	8008174 <printf_USB>
//    message = (unsigned char*)data;
//    message = data;
    if (data[0] == '$') {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b24      	cmp	r3, #36	@ 0x24
 80089ee:	d102      	bne.n	80089f6 <Process_USB_input+0x7e>
      len = 28;
 80089f0:	4bc9      	ldr	r3, [pc, #804]	@ (8008d18 <Process_USB_input+0x3a0>)
 80089f2:	221c      	movs	r2, #28
 80089f4:	601a      	str	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$')) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b23      	cmp	r3, #35	@ 0x23
 80089fc:	d004      	beq.n	8008a08 <Process_USB_input+0x90>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b24      	cmp	r3, #36	@ 0x24
 8008a04:	d000      	beq.n	8008a08 <Process_USB_input+0x90>
 8008a06:	e152      	b.n	8008cae <Process_USB_input+0x336>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7ff ff65 	bl	80088dc <ascii_to_uint8>
 8008a12:	0003      	movs	r3, r0
 8008a14:	001a      	movs	r2, r3
 8008a16:	4bc5      	ldr	r3, [pc, #788]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008a18:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 8008a1a:	4bc4      	ldr	r3, [pc, #784]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b64      	cmp	r3, #100	@ 0x64
 8008a20:	d101      	bne.n	8008a26 <Process_USB_input+0xae>
        return false; // value out of range
 8008a22:	2300      	movs	r3, #0
 8008a24:	e173      	b.n	8008d0e <Process_USB_input+0x396>
      }
      if (data[3] == ',') {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3303      	adds	r3, #3
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b2c      	cmp	r3, #44	@ 0x2c
 8008a2e:	d000      	beq.n	8008a32 <Process_USB_input+0xba>
 8008a30:	e121      	b.n	8008c76 <Process_USB_input+0x2fe>
        for (uint8_t i=4; i < len; i++) {
 8008a32:	2346      	movs	r3, #70	@ 0x46
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	2204      	movs	r2, #4
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	e0a9      	b.n	8008b90 <Process_USB_input+0x218>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", data[i], i, r);
          HAL_Delay(10);
 8008a3c:	200a      	movs	r0, #10
 8008a3e:	f00a fe4b 	bl	80136d8 <HAL_Delay>
          if (isxdigit(data[i])) {
 8008a42:	2146      	movs	r1, #70	@ 0x46
 8008a44:	187b      	adds	r3, r7, r1
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	18d3      	adds	r3, r2, r3
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	1c5a      	adds	r2, r3, #1
 8008a50:	4bb7      	ldr	r3, [pc, #732]	@ (8008d30 <Process_USB_input+0x3b8>)
 8008a52:	18d3      	adds	r3, r2, r3
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	001a      	movs	r2, r3
 8008a58:	2344      	movs	r3, #68	@ 0x44
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	d069      	beq.n	8008b32 <Process_USB_input+0x1ba>
            result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8008a5e:	4bb5      	ldr	r3, [pc, #724]	@ (8008d34 <Process_USB_input+0x3bc>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	b25a      	sxtb	r2, r3
 8008a66:	0008      	movs	r0, r1
 8008a68:	187b      	adds	r3, r7, r1
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	18cb      	adds	r3, r1, r3
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	1c59      	adds	r1, r3, #1
 8008a74:	4bae      	ldr	r3, [pc, #696]	@ (8008d30 <Process_USB_input+0x3b8>)
 8008a76:	18cb      	adds	r3, r1, r3
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	0019      	movs	r1, r3
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	400b      	ands	r3, r1
 8008a80:	d008      	beq.n	8008a94 <Process_USB_input+0x11c>
 8008a82:	183b      	adds	r3, r7, r0
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	18cb      	adds	r3, r1, r3
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	3b30      	subs	r3, #48	@ 0x30
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	e01e      	b.n	8008ad2 <Process_USB_input+0x15a>
 8008a94:	2346      	movs	r3, #70	@ 0x46
 8008a96:	18fb      	adds	r3, r7, r3
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	18c9      	adds	r1, r1, r3
 8008a9e:	2037      	movs	r0, #55	@ 0x37
 8008aa0:	183b      	adds	r3, r7, r0
 8008aa2:	7809      	ldrb	r1, [r1, #0]
 8008aa4:	7019      	strb	r1, [r3, #0]
 8008aa6:	183b      	adds	r3, r7, r0
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	1c59      	adds	r1, r3, #1
 8008aac:	4ba0      	ldr	r3, [pc, #640]	@ (8008d30 <Process_USB_input+0x3b8>)
 8008aae:	18cb      	adds	r3, r1, r3
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	0019      	movs	r1, r3
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	400b      	ands	r3, r1
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d103      	bne.n	8008ac4 <Process_USB_input+0x14c>
 8008abc:	183b      	adds	r3, r7, r0
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	3b20      	subs	r3, #32
 8008ac2:	e002      	b.n	8008aca <Process_USB_input+0x152>
 8008ac4:	2337      	movs	r3, #55	@ 0x37
 8008ac6:	18fb      	adds	r3, r7, r3
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	3b37      	subs	r3, #55	@ 0x37
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	b25b      	sxtb	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b25b      	sxtb	r3, r3
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	4b96      	ldr	r3, [pc, #600]	@ (8008d34 <Process_USB_input+0x3bc>)
 8008ada:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%02X\r\n", result);
            HAL_Delay(10);
 8008adc:	200a      	movs	r0, #10
 8008ade:	f00a fdfb 	bl	80136d8 <HAL_Delay>
            if (len == 28) {
 8008ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8008d18 <Process_USB_input+0x3a0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b1c      	cmp	r3, #28
 8008ae8:	d14c      	bne.n	8008b84 <Process_USB_input+0x20c>
              if ((i % 2) == 1) {
 8008aea:	2346      	movs	r3, #70	@ 0x46
 8008aec:	18fb      	adds	r3, r7, r3
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2201      	movs	r2, #1
 8008af2:	4013      	ands	r3, r2
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d044      	beq.n	8008b84 <Process_USB_input+0x20c>
                data[r] = result;
 8008afa:	2447      	movs	r4, #71	@ 0x47
 8008afc:	193b      	adds	r3, r7, r4
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	18d3      	adds	r3, r2, r3
 8008b04:	4a8b      	ldr	r2, [pc, #556]	@ (8008d34 <Process_USB_input+0x3bc>)
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	701a      	strb	r2, [r3, #0]
                Debug("data[%d] = 0x%02X",r, data[r]);
 8008b0a:	193b      	adds	r3, r7, r4
 8008b0c:	7818      	ldrb	r0, [r3, #0]
 8008b0e:	193b      	adds	r3, r7, r4
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	18d3      	adds	r3, r2, r3
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	4a87      	ldr	r2, [pc, #540]	@ (8008d38 <Process_USB_input+0x3c0>)
 8008b1a:	4981      	ldr	r1, [pc, #516]	@ (8008d20 <Process_USB_input+0x3a8>)
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	0003      	movs	r3, r0
 8008b20:	2003      	movs	r0, #3
 8008b22:	f00a f891 	bl	8012c48 <CreateLine>
                r++;
 8008b26:	193b      	adds	r3, r7, r4
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	193b      	adds	r3, r7, r4
 8008b2c:	3201      	adds	r2, #1
 8008b2e:	701a      	strb	r2, [r3, #0]
 8008b30:	e028      	b.n	8008b84 <Process_USB_input+0x20c>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", data[i], i);
 8008b32:	2046      	movs	r0, #70	@ 0x46
 8008b34:	183b      	adds	r3, r7, r0
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	18d3      	adds	r3, r2, r3
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	0019      	movs	r1, r3
 8008b40:	183b      	adds	r3, r7, r0
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	4b7d      	ldr	r3, [pc, #500]	@ (8008d3c <Process_USB_input+0x3c4>)
 8008b46:	0018      	movs	r0, r3
 8008b48:	f7ff fb14 	bl	8008174 <printf_USB>
            ResetUsbRxDataSize();
 8008b4c:	f019 f89a 	bl	8021c84 <ResetUsbRxDataSize>
            PC_show_Keys();
 8008b50:	f7ff fb50 	bl	80081f4 <PC_show_Keys>
            for (uint8_t i=0; i < 32; i++) {
 8008b54:	2345      	movs	r3, #69	@ 0x45
 8008b56:	18fb      	adds	r3, r7, r3
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	e00b      	b.n	8008b76 <Process_USB_input+0x1fe>
              data[i] = '\0';
 8008b5e:	2145      	movs	r1, #69	@ 0x45
 8008b60:	187b      	adds	r3, r7, r1
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	18d3      	adds	r3, r2, r3
 8008b68:	2200      	movs	r2, #0
 8008b6a:	701a      	strb	r2, [r3, #0]
            for (uint8_t i=0; i < 32; i++) {
 8008b6c:	187b      	adds	r3, r7, r1
 8008b6e:	781a      	ldrb	r2, [r3, #0]
 8008b70:	187b      	adds	r3, r7, r1
 8008b72:	3201      	adds	r2, #1
 8008b74:	701a      	strb	r2, [r3, #0]
 8008b76:	2345      	movs	r3, #69	@ 0x45
 8008b78:	18fb      	adds	r3, r7, r3
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b1f      	cmp	r3, #31
 8008b7e:	d9ee      	bls.n	8008b5e <Process_USB_input+0x1e6>
            }
            return false; // Of een andere foutwaarde
 8008b80:	2300      	movs	r3, #0
 8008b82:	e0c4      	b.n	8008d0e <Process_USB_input+0x396>
        for (uint8_t i=4; i < len; i++) {
 8008b84:	2146      	movs	r1, #70	@ 0x46
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	781a      	ldrb	r2, [r3, #0]
 8008b8a:	187b      	adds	r3, r7, r1
 8008b8c:	3201      	adds	r2, #1
 8008b8e:	701a      	strb	r2, [r3, #0]
 8008b90:	2346      	movs	r3, #70	@ 0x46
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	4b60      	ldr	r3, [pc, #384]	@ (8008d18 <Process_USB_input+0x3a0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d200      	bcs.n	8008ba0 <Process_USB_input+0x228>
 8008b9e:	e74d      	b.n	8008a3c <Process_USB_input+0xc4>
          }
        }
        if (len == 6) {
 8008ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8008d18 <Process_USB_input+0x3a0>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b06      	cmp	r3, #6
 8008ba6:	d114      	bne.n	8008bd2 <Process_USB_input+0x25a>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008ba8:	2428      	movs	r4, #40	@ 0x28
 8008baa:	193b      	adds	r3, r7, r4
 8008bac:	4864      	ldr	r0, [pc, #400]	@ (8008d40 <Process_USB_input+0x3c8>)
 8008bae:	220c      	movs	r2, #12
 8008bb0:	0019      	movs	r1, r3
 8008bb2:	f002 fb71 	bl	800b298 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte of the key
 8008bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8008d34 <Process_USB_input+0x3bc>)
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	0021      	movs	r1, r4
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8008bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	1879      	adds	r1, r7, r1
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	220c      	movs	r2, #12
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f01c fb68 	bl	80252a0 <memcpy>
 8008bd0:	e005      	b.n	8008bde <Process_USB_input+0x266>
        }
        else {
          memcpy(received.Payload, data, IdSize);
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8008d44 <Process_USB_input+0x3cc>)
 8008bd6:	220c      	movs	r2, #12
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f01c fb61 	bl	80252a0 <memcpy>
        }
        received.Payload[12] = '\0';
 8008bde:	4b53      	ldr	r3, [pc, #332]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	739a      	strb	r2, [r3, #14]
        received.PayloadLength = IdSize;
 8008be4:	4b51      	ldr	r3, [pc, #324]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008be6:	220c      	movs	r2, #12
 8008be8:	705a      	strb	r2, [r3, #1]
        Debug("first char of payload before conversion: %c", received.Payload[0]);
 8008bea:	4b50      	ldr	r3, [pc, #320]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008bec:	789b      	ldrb	r3, [r3, #2]
 8008bee:	4a56      	ldr	r2, [pc, #344]	@ (8008d48 <Process_USB_input+0x3d0>)
 8008bf0:	494b      	ldr	r1, [pc, #300]	@ (8008d20 <Process_USB_input+0x3a8>)
 8008bf2:	2003      	movs	r0, #3
 8008bf4:	f00a f828 	bl	8012c48 <CreateLine>
        uint8ArrayToString(Buffer, received.Payload);
 8008bf8:	4a52      	ldr	r2, [pc, #328]	@ (8008d44 <Process_USB_input+0x3cc>)
 8008bfa:	240c      	movs	r4, #12
 8008bfc:	193b      	adds	r3, r7, r4
 8008bfe:	0011      	movs	r1, r2
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7fc f93f 	bl	8004e84 <uint8ArrayToString>
        Debug("received Payload to write key %s", Buffer);
 8008c06:	193b      	adds	r3, r7, r4
 8008c08:	4a50      	ldr	r2, [pc, #320]	@ (8008d4c <Process_USB_input+0x3d4>)
 8008c0a:	4945      	ldr	r1, [pc, #276]	@ (8008d20 <Process_USB_input+0x3a8>)
 8008c0c:	2003      	movs	r0, #3
 8008c0e:	f00a f81b 	bl	8012c48 <CreateLine>
        Debug("first char of payload after conversion: %c", received.Payload[0]);
 8008c12:	4b46      	ldr	r3, [pc, #280]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008c14:	789b      	ldrb	r3, [r3, #2]
 8008c16:	4a4e      	ldr	r2, [pc, #312]	@ (8008d50 <Process_USB_input+0x3d8>)
 8008c18:	4941      	ldr	r1, [pc, #260]	@ (8008d20 <Process_USB_input+0x3a8>)
 8008c1a:	2003      	movs	r0, #3
 8008c1c:	f00a f814 	bl	8012c48 <CreateLine>
        ProcessCmd(received);
 8008c20:	4c42      	ldr	r4, [pc, #264]	@ (8008d2c <Process_USB_input+0x3b4>)
 8008c22:	466b      	mov	r3, sp
 8008c24:	0018      	movs	r0, r3
 8008c26:	0023      	movs	r3, r4
 8008c28:	3310      	adds	r3, #16
 8008c2a:	22f4      	movs	r2, #244	@ 0xf4
 8008c2c:	0019      	movs	r1, r3
 8008c2e:	f01c fb37 	bl	80252a0 <memcpy>
 8008c32:	6820      	ldr	r0, [r4, #0]
 8008c34:	6861      	ldr	r1, [r4, #4]
 8008c36:	68a2      	ldr	r2, [r4, #8]
 8008c38:	68e3      	ldr	r3, [r4, #12]
 8008c3a:	f7ff f86f 	bl	8007d1c <ProcessCmd>
        ResetUsbRxDataSize();
 8008c3e:	f019 f821 	bl	8021c84 <ResetUsbRxDataSize>
        PC_show_Keys();
 8008c42:	f7ff fad7 	bl	80081f4 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8008c46:	2344      	movs	r3, #68	@ 0x44
 8008c48:	18fb      	adds	r3, r7, r3
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	e00b      	b.n	8008c68 <Process_USB_input+0x2f0>
          data[i] = '\0';
 8008c50:	2144      	movs	r1, #68	@ 0x44
 8008c52:	187b      	adds	r3, r7, r1
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	18d3      	adds	r3, r2, r3
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8008c5e:	187b      	adds	r3, r7, r1
 8008c60:	781a      	ldrb	r2, [r3, #0]
 8008c62:	187b      	adds	r3, r7, r1
 8008c64:	3201      	adds	r2, #1
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	2344      	movs	r3, #68	@ 0x44
 8008c6a:	18fb      	adds	r3, r7, r3
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b1f      	cmp	r3, #31
 8008c70:	d9ee      	bls.n	8008c50 <Process_USB_input+0x2d8>
        }
        return true;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e04b      	b.n	8008d0e <Process_USB_input+0x396>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8008c76:	4b37      	ldr	r3, [pc, #220]	@ (8008d54 <Process_USB_input+0x3dc>)
 8008c78:	0018      	movs	r0, r3
 8008c7a:	f7ff fa7b 	bl	8008174 <printf_USB>
        ResetUsbRxDataSize();
 8008c7e:	f019 f801 	bl	8021c84 <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 8008c82:	2343      	movs	r3, #67	@ 0x43
 8008c84:	18fb      	adds	r3, r7, r3
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	e00b      	b.n	8008ca4 <Process_USB_input+0x32c>
          data[i] = '\0';
 8008c8c:	2143      	movs	r1, #67	@ 0x43
 8008c8e:	187b      	adds	r3, r7, r1
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	18d3      	adds	r3, r2, r3
 8008c96:	2200      	movs	r2, #0
 8008c98:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8008c9a:	187b      	adds	r3, r7, r1
 8008c9c:	781a      	ldrb	r2, [r3, #0]
 8008c9e:	187b      	adds	r3, r7, r1
 8008ca0:	3201      	adds	r2, #1
 8008ca2:	701a      	strb	r2, [r3, #0]
 8008ca4:	2343      	movs	r3, #67	@ 0x43
 8008ca6:	18fb      	adds	r3, r7, r3
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b1f      	cmp	r3, #31
 8008cac:	d9ee      	bls.n	8008c8c <Process_USB_input+0x314>
        }
      }
    }
//    else {
    len = 6;
 8008cae:	4b1a      	ldr	r3, [pc, #104]	@ (8008d18 <Process_USB_input+0x3a0>)
 8008cb0:	2206      	movs	r2, #6
 8008cb2:	601a      	str	r2, [r3, #0]
    PC_show_Keys();
 8008cb4:	f7ff fa9e 	bl	80081f4 <PC_show_Keys>
    ResetUsbRxDataSize();
 8008cb8:	f018 ffe4 	bl	8021c84 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < 32; i++) {
 8008cbc:	2342      	movs	r3, #66	@ 0x42
 8008cbe:	18fb      	adds	r3, r7, r3
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	e00b      	b.n	8008cde <Process_USB_input+0x366>
      data[i] = '\0';
 8008cc6:	2142      	movs	r1, #66	@ 0x42
 8008cc8:	187b      	adds	r3, r7, r1
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	18d3      	adds	r3, r2, r3
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8008cd4:	187b      	adds	r3, r7, r1
 8008cd6:	781a      	ldrb	r2, [r3, #0]
 8008cd8:	187b      	adds	r3, r7, r1
 8008cda:	3201      	adds	r2, #1
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	2342      	movs	r3, #66	@ 0x42
 8008ce0:	18fb      	adds	r3, r7, r3
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b1f      	cmp	r3, #31
 8008ce6:	d9ee      	bls.n	8008cc6 <Process_USB_input+0x34e>
    }
  }
  if (formerlength != length) {
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d58 <Process_USB_input+0x3e0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d008      	beq.n	8008d04 <Process_USB_input+0x38c>
    printf_USB("USB input: %s\r", (const char*)data);
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4b19      	ldr	r3, [pc, #100]	@ (8008d5c <Process_USB_input+0x3e4>)
 8008cf6:	0011      	movs	r1, r2
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff fa3b 	bl	8008174 <printf_USB>
    formerlength = length;
 8008cfe:	4b16      	ldr	r3, [pc, #88]	@ (8008d58 <Process_USB_input+0x3e0>)
 8008d00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d02:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8008d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d06:	0018      	movs	r0, r3
 8008d08:	f018 ffde 	bl	8021cc8 <GetUsbRxNextChunk>

  return false;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	0018      	movs	r0, r3
 8008d10:	46bd      	mov	sp, r7
 8008d12:	b013      	add	sp, #76	@ 0x4c
 8008d14:	bd90      	pop	{r4, r7, pc}
 8008d16:	46c0      	nop			@ (mov r8, r8)
 8008d18:	20000030 	.word	0x20000030
 8008d1c:	0802ae34 	.word	0x0802ae34
 8008d20:	0802ae74 	.word	0x0802ae74
 8008d24:	0802ae78 	.word	0x0802ae78
 8008d28:	0802aea4 	.word	0x0802aea4
 8008d2c:	200007c4 	.word	0x200007c4
 8008d30:	0802db48 	.word	0x0802db48
 8008d34:	200008c8 	.word	0x200008c8
 8008d38:	0802aeb4 	.word	0x0802aeb4
 8008d3c:	0802aec8 	.word	0x0802aec8
 8008d40:	08080000 	.word	0x08080000
 8008d44:	200007c6 	.word	0x200007c6
 8008d48:	0802af00 	.word	0x0802af00
 8008d4c:	0802af2c 	.word	0x0802af2c
 8008d50:	0802af50 	.word	0x0802af50
 8008d54:	0802af7c 	.word	0x0802af7c
 8008d58:	200008cc 	.word	0x200008cc
 8008d5c:	0802afa8 	.word	0x0802afa8

08008d60 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8008d64:	4b26      	ldr	r3, [pc, #152]	@ (8008e00 <ReadBatteryVoltage+0xa0>)
 8008d66:	4a27      	ldr	r2, [pc, #156]	@ (8008e04 <ReadBatteryVoltage+0xa4>)
 8008d68:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d6a:	4b25      	ldr	r3, [pc, #148]	@ (8008e00 <ReadBatteryVoltage+0xa0>)
 8008d6c:	2280      	movs	r2, #128	@ 0x80
 8008d6e:	0152      	lsls	r2, r2, #5
 8008d70:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d72:	4a23      	ldr	r2, [pc, #140]	@ (8008e00 <ReadBatteryVoltage+0xa0>)
 8008d74:	4b24      	ldr	r3, [pc, #144]	@ (8008e08 <ReadBatteryVoltage+0xa8>)
 8008d76:	0011      	movs	r1, r2
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f00a ff7b 	bl	8013c74 <HAL_ADC_ConfigChannel>
 8008d7e:	1e03      	subs	r3, r0, #0
 8008d80:	d001      	beq.n	8008d86 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8008d82:	f003 fb4d 	bl	800c420 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8008d86:	4b20      	ldr	r3, [pc, #128]	@ (8008e08 <ReadBatteryVoltage+0xa8>)
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f00a fe77 	bl	8013a7c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8008d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008e08 <ReadBatteryVoltage+0xa8>)
 8008d90:	2101      	movs	r1, #1
 8008d92:	0018      	movs	r0, r3
 8008d94:	f00a fec6 	bl	8013b24 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8008d98:	4b1b      	ldr	r3, [pc, #108]	@ (8008e08 <ReadBatteryVoltage+0xa8>)
 8008d9a:	0018      	movs	r0, r3
 8008d9c:	f00a ff5e 	bl	8013c5c <HAL_ADC_GetValue>
 8008da0:	0002      	movs	r2, r0
 8008da2:	4b1a      	ldr	r3, [pc, #104]	@ (8008e0c <ReadBatteryVoltage+0xac>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4353      	muls	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4919      	ldr	r1, [pc, #100]	@ (8008e10 <ReadBatteryVoltage+0xb0>)
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7f7 f9f9 	bl	80001a4 <__udivsi3>
 8008db2:	0003      	movs	r3, r0
 8008db4:	001a      	movs	r2, r3
 8008db6:	4b17      	ldr	r3, [pc, #92]	@ (8008e14 <ReadBatteryVoltage+0xb4>)
 8008db8:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8008dba:	4b16      	ldr	r3, [pc, #88]	@ (8008e14 <ReadBatteryVoltage+0xb4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7f8 fc52 	bl	8001668 <__aeabi_ui2f>
 8008dc4:	1c03      	adds	r3, r0, #0
 8008dc6:	4914      	ldr	r1, [pc, #80]	@ (8008e18 <ReadBatteryVoltage+0xb8>)
 8008dc8:	1c18      	adds	r0, r3, #0
 8008dca:	f7f7 ff03 	bl	8000bd4 <__aeabi_fdiv>
 8008dce:	1c03      	adds	r3, r0, #0
 8008dd0:	1c1a      	adds	r2, r3, #0
 8008dd2:	4b12      	ldr	r3, [pc, #72]	@ (8008e1c <ReadBatteryVoltage+0xbc>)
 8008dd4:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e00 <ReadBatteryVoltage+0xa0>)
 8008dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8008e04 <ReadBatteryVoltage+0xa4>)
 8008dda:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8008ddc:	4b08      	ldr	r3, [pc, #32]	@ (8008e00 <ReadBatteryVoltage+0xa0>)
 8008dde:	4a10      	ldr	r2, [pc, #64]	@ (8008e20 <ReadBatteryVoltage+0xc0>)
 8008de0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008de2:	4a07      	ldr	r2, [pc, #28]	@ (8008e00 <ReadBatteryVoltage+0xa0>)
 8008de4:	4b08      	ldr	r3, [pc, #32]	@ (8008e08 <ReadBatteryVoltage+0xa8>)
 8008de6:	0011      	movs	r1, r2
 8008de8:	0018      	movs	r0, r3
 8008dea:	f00a ff43 	bl	8013c74 <HAL_ADC_ConfigChannel>
 8008dee:	1e03      	subs	r3, r0, #0
 8008df0:	d001      	beq.n	8008df6 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8008df2:	f003 fb15 	bl	800c420 <Error_Handler>
  }
  return trueValue;
 8008df6:	4b09      	ldr	r3, [pc, #36]	@ (8008e1c <ReadBatteryVoltage+0xbc>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 }
 8008dfa:	1c18      	adds	r0, r3, #0
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000b64 	.word	0x20000b64
 8008e04:	38004000 	.word	0x38004000
 8008e08:	20000ba0 	.word	0x20000ba0
 8008e0c:	20000034 	.word	0x20000034
 8008e10:	00000fff 	.word	0x00000fff
 8008e14:	20000b6c 	.word	0x20000b6c
 8008e18:	447a0000 	.word	0x447a0000
 8008e1c:	20000b70 	.word	0x20000b70
 8008e20:	00001001 	.word	0x00001001

08008e24 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8008e28:	4b21      	ldr	r3, [pc, #132]	@ (8008eb0 <ReadSolarVoltage+0x8c>)
 8008e2a:	4a22      	ldr	r2, [pc, #136]	@ (8008eb4 <ReadSolarVoltage+0x90>)
 8008e2c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008e2e:	4b20      	ldr	r3, [pc, #128]	@ (8008eb0 <ReadSolarVoltage+0x8c>)
 8008e30:	2280      	movs	r2, #128	@ 0x80
 8008e32:	0152      	lsls	r2, r2, #5
 8008e34:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008e36:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb0 <ReadSolarVoltage+0x8c>)
 8008e38:	4b1f      	ldr	r3, [pc, #124]	@ (8008eb8 <ReadSolarVoltage+0x94>)
 8008e3a:	0011      	movs	r1, r2
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f00a ff19 	bl	8013c74 <HAL_ADC_ConfigChannel>
 8008e42:	1e03      	subs	r3, r0, #0
 8008e44:	d001      	beq.n	8008e4a <ReadSolarVoltage+0x26>
    Error_Handler();
 8008e46:	f003 faeb 	bl	800c420 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8008e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb8 <ReadSolarVoltage+0x94>)
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f00a fe15 	bl	8013a7c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8008e52:	4b19      	ldr	r3, [pc, #100]	@ (8008eb8 <ReadSolarVoltage+0x94>)
 8008e54:	2101      	movs	r1, #1
 8008e56:	0018      	movs	r0, r3
 8008e58:	f00a fe64 	bl	8013b24 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8008e5c:	4b16      	ldr	r3, [pc, #88]	@ (8008eb8 <ReadSolarVoltage+0x94>)
 8008e5e:	0018      	movs	r0, r3
 8008e60:	f00a fefc 	bl	8013c5c <HAL_ADC_GetValue>
 8008e64:	0002      	movs	r2, r0
 8008e66:	4b15      	ldr	r3, [pc, #84]	@ (8008ebc <ReadSolarVoltage+0x98>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	435a      	muls	r2, r3
 8008e6c:	0013      	movs	r3, r2
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	189b      	adds	r3, r3, r2
 8008e72:	4913      	ldr	r1, [pc, #76]	@ (8008ec0 <ReadSolarVoltage+0x9c>)
 8008e74:	0018      	movs	r0, r3
 8008e76:	f7f7 f995 	bl	80001a4 <__udivsi3>
 8008e7a:	0003      	movs	r3, r0
 8008e7c:	001a      	movs	r2, r3
 8008e7e:	4b11      	ldr	r3, [pc, #68]	@ (8008ec4 <ReadSolarVoltage+0xa0>)
 8008e80:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8008e82:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb0 <ReadSolarVoltage+0x8c>)
 8008e84:	4a0b      	ldr	r2, [pc, #44]	@ (8008eb4 <ReadSolarVoltage+0x90>)
 8008e86:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8008e88:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <ReadSolarVoltage+0x8c>)
 8008e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8008ec8 <ReadSolarVoltage+0xa4>)
 8008e8c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008e8e:	4a08      	ldr	r2, [pc, #32]	@ (8008eb0 <ReadSolarVoltage+0x8c>)
 8008e90:	4b09      	ldr	r3, [pc, #36]	@ (8008eb8 <ReadSolarVoltage+0x94>)
 8008e92:	0011      	movs	r1, r2
 8008e94:	0018      	movs	r0, r3
 8008e96:	f00a feed 	bl	8013c74 <HAL_ADC_ConfigChannel>
 8008e9a:	1e03      	subs	r3, r0, #0
 8008e9c:	d001      	beq.n	8008ea2 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8008e9e:	f003 fabf 	bl	800c420 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8008ea2:	4b08      	ldr	r3, [pc, #32]	@ (8008ec4 <ReadSolarVoltage+0xa0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 }
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	46c0      	nop			@ (mov r8, r8)
 8008eb0:	20000b64 	.word	0x20000b64
 8008eb4:	3c008000 	.word	0x3c008000
 8008eb8:	20000ba0 	.word	0x20000ba0
 8008ebc:	20000034 	.word	0x20000034
 8008ec0:	00000fff 	.word	0x00000fff
 8008ec4:	20000b74 	.word	0x20000b74
 8008ec8:	00001001 	.word	0x00001001

08008ecc <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8008ed0:	23a0      	movs	r3, #160	@ 0xa0
 8008ed2:	05db      	lsls	r3, r3, #23
 8008ed4:	2180      	movs	r1, #128	@ 0x80
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f00b fe68 	bl	8014bac <HAL_GPIO_ReadPin>
 8008edc:	0003      	movs	r3, r0
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	4193      	sbcs	r3, r2
 8008ee2:	b2db      	uxtb	r3, r3
}
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8008eea:	b580      	push	{r7, lr}
 8008eec:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8008eee:	2380      	movs	r3, #128	@ 0x80
 8008ef0:	021a      	lsls	r2, r3, #8
 8008ef2:	23a0      	movs	r3, #160	@ 0xa0
 8008ef4:	05db      	lsls	r3, r3, #23
 8008ef6:	0011      	movs	r1, r2
 8008ef8:	0018      	movs	r0, r3
 8008efa:	f00b fe57 	bl	8014bac <HAL_GPIO_ReadPin>
 8008efe:	0003      	movs	r3, r0
 8008f00:	1e5a      	subs	r2, r3, #1
 8008f02:	4193      	sbcs	r3, r2
 8008f04:	b2db      	uxtb	r3, r3
}
 8008f06:	0018      	movs	r0, r3
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8008f10:	4b05      	ldr	r3, [pc, #20]	@ (8008f28 <UserButton_Pressed+0x1c>)
 8008f12:	2104      	movs	r1, #4
 8008f14:	0018      	movs	r0, r3
 8008f16:	f00b fe49 	bl	8014bac <HAL_GPIO_ReadPin>
 8008f1a:	0003      	movs	r3, r0
 8008f1c:	425a      	negs	r2, r3
 8008f1e:	4153      	adcs	r3, r2
 8008f20:	b2db      	uxtb	r3, r3
}
 8008f22:	0018      	movs	r0, r3
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	50000c00 	.word	0x50000c00

08008f2c <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8008f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2e:	46d6      	mov	lr, sl
 8008f30:	464f      	mov	r7, r9
 8008f32:	4646      	mov	r6, r8
 8008f34:	b5c0      	push	{r6, r7, lr}
 8008f36:	b08e      	sub	sp, #56	@ 0x38
 8008f38:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8008f3a:	4b21      	ldr	r3, [pc, #132]	@ (8008fc0 <showTime+0x94>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d036      	beq.n	8008fb0 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008f42:	003a      	movs	r2, r7
 8008f44:	1d3b      	adds	r3, r7, #4
 8008f46:	0011      	movs	r1, r2
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f000 fa3f 	bl	80093cc <RTC_GetTime>
  UpdateSystemUptime();
 8008f4e:	f000 f853 	bl	8008ff8 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f52:	003b      	movs	r3, r7
 8008f54:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f56:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f58:	003b      	movs	r3, r7
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f5e:	4b19      	ldr	r3, [pc, #100]	@ (8008fc4 <showTime+0x98>)
 8008f60:	0092      	lsls	r2, r2, #2
 8008f62:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f64:	003b      	movs	r3, r7
 8008f66:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f68:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f6a:	1d3b      	adds	r3, r7, #4
 8008f6c:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f6e:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8008f70:	1d3b      	adds	r3, r7, #4
 8008f72:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f74:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f76:	1d3b      	adds	r3, r7, #4
 8008f78:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f7a:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f7c:	4b12      	ldr	r3, [pc, #72]	@ (8008fc8 <showTime+0x9c>)
 8008f7e:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f80:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f82:	4b11      	ldr	r3, [pc, #68]	@ (8008fc8 <showTime+0x9c>)
 8008f84:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f86:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f88:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <showTime+0x9c>)
 8008f8a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f8c:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc8 <showTime+0x9c>)
 8008f90:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8008f92:	480e      	ldr	r0, [pc, #56]	@ (8008fcc <showTime+0xa0>)
 8008f94:	9306      	str	r3, [sp, #24]
 8008f96:	4643      	mov	r3, r8
 8008f98:	9305      	str	r3, [sp, #20]
 8008f9a:	4663      	mov	r3, ip
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	9603      	str	r6, [sp, #12]
 8008fa0:	9502      	str	r5, [sp, #8]
 8008fa2:	9401      	str	r4, [sp, #4]
 8008fa4:	9100      	str	r1, [sp, #0]
 8008fa6:	4653      	mov	r3, sl
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f01b fec7 	bl	8024d3c <iprintf>
 8008fae:	e000      	b.n	8008fb2 <showTime+0x86>
    return;
 8008fb0:	46c0      	nop			@ (mov r8, r8)
}
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	b006      	add	sp, #24
 8008fb6:	bce0      	pop	{r5, r6, r7}
 8008fb8:	46ba      	mov	sl, r7
 8008fba:	46b1      	mov	r9, r6
 8008fbc:	46a8      	mov	r8, r5
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc0:	20000b84 	.word	0x20000b84
 8008fc4:	20000054 	.word	0x20000054
 8008fc8:	20000b78 	.word	0x20000b78
 8008fcc:	0802b004 	.word	0x0802b004

08008fd0 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008fd6:	003a      	movs	r2, r7
 8008fd8:	1d3b      	adds	r3, r7, #4
 8008fda:	0011      	movs	r1, r2
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f000 f9f5 	bl	80093cc <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8008fe2:	1d3a      	adds	r2, r7, #4
 8008fe4:	003b      	movs	r3, r7
 8008fe6:	0011      	movs	r1, r2
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f000 fbc7 	bl	800977c <makeTime>
 8008fee:	0003      	movs	r3, r0
}
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b006      	add	sp, #24
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8008ffe:	003a      	movs	r2, r7
 8009000:	1d3b      	adds	r3, r7, #4
 8009002:	0011      	movs	r1, r2
 8009004:	0018      	movs	r0, r3
 8009006:	f000 f9e1 	bl	80093cc <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800900a:	1d3a      	adds	r2, r7, #4
 800900c:	003b      	movs	r3, r7
 800900e:	0011      	movs	r1, r2
 8009010:	0018      	movs	r0, r3
 8009012:	f000 fbb3 	bl	800977c <makeTime>
 8009016:	0002      	movs	r2, r0
 8009018:	4b1e      	ldr	r3, [pc, #120]	@ (8009094 <UpdateSystemUptime+0x9c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	213c      	movs	r1, #60	@ 0x3c
 8009028:	0018      	movs	r0, r3
 800902a:	f7f7 f941 	bl	80002b0 <__aeabi_uidivmod>
 800902e:	000b      	movs	r3, r1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b19      	ldr	r3, [pc, #100]	@ (8009098 <UpdateSystemUptime+0xa0>)
 8009034:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	213c      	movs	r1, #60	@ 0x3c
 800903a:	0018      	movs	r0, r3
 800903c:	f7f7 f8b2 	bl	80001a4 <__udivsi3>
 8009040:	0003      	movs	r3, r0
 8009042:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	213c      	movs	r1, #60	@ 0x3c
 8009048:	0018      	movs	r0, r3
 800904a:	f7f7 f931 	bl	80002b0 <__aeabi_uidivmod>
 800904e:	000b      	movs	r3, r1
 8009050:	b2da      	uxtb	r2, r3
 8009052:	4b11      	ldr	r3, [pc, #68]	@ (8009098 <UpdateSystemUptime+0xa0>)
 8009054:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	213c      	movs	r1, #60	@ 0x3c
 800905a:	0018      	movs	r0, r3
 800905c:	f7f7 f8a2 	bl	80001a4 <__udivsi3>
 8009060:	0003      	movs	r3, r0
 8009062:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	2118      	movs	r1, #24
 8009068:	0018      	movs	r0, r3
 800906a:	f7f7 f921 	bl	80002b0 <__aeabi_uidivmod>
 800906e:	000b      	movs	r3, r1
 8009070:	b2da      	uxtb	r2, r3
 8009072:	4b09      	ldr	r3, [pc, #36]	@ (8009098 <UpdateSystemUptime+0xa0>)
 8009074:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2118      	movs	r1, #24
 800907a:	0018      	movs	r0, r3
 800907c:	f7f7 f892 	bl	80001a4 <__udivsi3>
 8009080:	0003      	movs	r3, r0
 8009082:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	b29a      	uxth	r2, r3
 8009088:	4b03      	ldr	r3, [pc, #12]	@ (8009098 <UpdateSystemUptime+0xa0>)
 800908a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800908c:	46c0      	nop			@ (mov r8, r8)
 800908e:	46bd      	mov	sp, r7
 8009090:	b008      	add	sp, #32
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000b84 	.word	0x20000b84
 8009098:	20000b78 	.word	0x20000b78

0800909c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800909c:	b590      	push	{r4, r7, lr}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	0008      	movs	r0, r1
 80090a6:	0011      	movs	r1, r2
 80090a8:	1cfb      	adds	r3, r7, #3
 80090aa:	1c02      	adds	r2, r0, #0
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	1cbb      	adds	r3, r7, #2
 80090b0:	1c0a      	adds	r2, r1, #0
 80090b2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80090b4:	230e      	movs	r3, #14
 80090b6:	18fb      	adds	r3, r7, r3
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80090bc:	230f      	movs	r3, #15
 80090be:	18fb      	adds	r3, r7, r3
 80090c0:	1cfa      	adds	r2, r7, #3
 80090c2:	7812      	ldrb	r2, [r2, #0]
 80090c4:	701a      	strb	r2, [r3, #0]
 80090c6:	e015      	b.n	80090f4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80090c8:	200f      	movs	r0, #15
 80090ca:	183b      	adds	r3, r7, r0
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	18d2      	adds	r2, r2, r3
 80090d2:	240e      	movs	r4, #14
 80090d4:	193b      	adds	r3, r7, r4
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	7811      	ldrb	r1, [r2, #0]
 80090da:	2208      	movs	r2, #8
 80090dc:	18ba      	adds	r2, r7, r2
 80090de:	54d1      	strb	r1, [r2, r3]
    pos++;
 80090e0:	193b      	adds	r3, r7, r4
 80090e2:	781a      	ldrb	r2, [r3, #0]
 80090e4:	193b      	adds	r3, r7, r4
 80090e6:	3201      	adds	r2, #1
 80090e8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80090ea:	183b      	adds	r3, r7, r0
 80090ec:	781a      	ldrb	r2, [r3, #0]
 80090ee:	183b      	adds	r3, r7, r0
 80090f0:	3201      	adds	r2, #1
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	200f      	movs	r0, #15
 80090f6:	183a      	adds	r2, r7, r0
 80090f8:	1cbb      	adds	r3, r7, #2
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d9e2      	bls.n	80090c8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8009102:	230e      	movs	r3, #14
 8009104:	18fb      	adds	r3, r7, r3
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2208      	movs	r2, #8
 800910a:	18ba      	adds	r2, r7, r2
 800910c:	2100      	movs	r1, #0
 800910e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8009110:	1cfb      	adds	r3, r7, #3
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b13      	cmp	r3, #19
 8009116:	d849      	bhi.n	80091ac <aBuff2int+0x110>
    if (start == 17) { //month
 8009118:	1cfb      	adds	r3, r7, #3
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b11      	cmp	r3, #17
 800911e:	d122      	bne.n	8009166 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8009120:	183b      	adds	r3, r7, r0
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	e018      	b.n	800915a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8009128:	240f      	movs	r4, #15
 800912a:	193b      	adds	r3, r7, r4
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	4b25      	ldr	r3, [pc, #148]	@ (80091c4 <aBuff2int+0x128>)
 8009130:	0092      	lsls	r2, r2, #2
 8009132:	58d2      	ldr	r2, [r2, r3]
 8009134:	2308      	movs	r3, #8
 8009136:	18fb      	adds	r3, r7, r3
 8009138:	0011      	movs	r1, r2
 800913a:	0018      	movs	r0, r3
 800913c:	f7f7 f80c 	bl	8000158 <strcmp>
 8009140:	1e03      	subs	r3, r0, #0
 8009142:	d104      	bne.n	800914e <aBuff2int+0xb2>
          return i+1;
 8009144:	193b      	adds	r3, r7, r4
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	3301      	adds	r3, #1
 800914a:	b2db      	uxtb	r3, r3
 800914c:	e035      	b.n	80091ba <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800914e:	210f      	movs	r1, #15
 8009150:	187b      	adds	r3, r7, r1
 8009152:	781a      	ldrb	r2, [r3, #0]
 8009154:	187b      	adds	r3, r7, r1
 8009156:	3201      	adds	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
 800915a:	230f      	movs	r3, #15
 800915c:	18fb      	adds	r3, r7, r3
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b0b      	cmp	r3, #11
 8009162:	d9e1      	bls.n	8009128 <aBuff2int+0x8c>
 8009164:	e022      	b.n	80091ac <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8009166:	230f      	movs	r3, #15
 8009168:	18fb      	adds	r3, r7, r3
 800916a:	2200      	movs	r2, #0
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e018      	b.n	80091a2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8009170:	240f      	movs	r4, #15
 8009172:	193b      	adds	r3, r7, r4
 8009174:	781a      	ldrb	r2, [r3, #0]
 8009176:	4b14      	ldr	r3, [pc, #80]	@ (80091c8 <aBuff2int+0x12c>)
 8009178:	0092      	lsls	r2, r2, #2
 800917a:	58d2      	ldr	r2, [r2, r3]
 800917c:	2308      	movs	r3, #8
 800917e:	18fb      	adds	r3, r7, r3
 8009180:	0011      	movs	r1, r2
 8009182:	0018      	movs	r0, r3
 8009184:	f7f6 ffe8 	bl	8000158 <strcmp>
 8009188:	1e03      	subs	r3, r0, #0
 800918a:	d104      	bne.n	8009196 <aBuff2int+0xfa>
          return i+1;
 800918c:	193b      	adds	r3, r7, r4
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	b2db      	uxtb	r3, r3
 8009194:	e011      	b.n	80091ba <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8009196:	210f      	movs	r1, #15
 8009198:	187b      	adds	r3, r7, r1
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	187b      	adds	r3, r7, r1
 800919e:	3201      	adds	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
 80091a2:	230f      	movs	r3, #15
 80091a4:	18fb      	adds	r3, r7, r3
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b06      	cmp	r3, #6
 80091aa:	d9e1      	bls.n	8009170 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80091ac:	2308      	movs	r3, #8
 80091ae:	18fb      	adds	r3, r7, r3
 80091b0:	0018      	movs	r0, r3
 80091b2:	f01a f9e8 	bl	8023586 <atoi>
 80091b6:	0003      	movs	r3, r0
 80091b8:	b2db      	uxtb	r3, r3
}
 80091ba:	0018      	movs	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	b005      	add	sp, #20
 80091c0:	bd90      	pop	{r4, r7, pc}
 80091c2:	46c0      	nop			@ (mov r8, r8)
 80091c4:	20000054 	.word	0x20000054
 80091c8:	20000038 	.word	0x20000038

080091cc <ParseTime>:

void ParseTime(char* buffer) {
 80091cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ce:	b08b      	sub	sp, #44	@ 0x2c
 80091d0:	af02      	add	r7, sp, #8
 80091d2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80091d4:	2408      	movs	r4, #8
 80091d6:	193a      	adds	r2, r7, r4
 80091d8:	260c      	movs	r6, #12
 80091da:	19bb      	adds	r3, r7, r6
 80091dc:	0011      	movs	r1, r2
 80091de:	0018      	movs	r0, r3
 80091e0:	f000 f8f4 	bl	80093cc <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2219      	movs	r2, #25
 80091e8:	2118      	movs	r1, #24
 80091ea:	0018      	movs	r0, r3
 80091ec:	f7ff ff56 	bl	800909c <aBuff2int>
 80091f0:	0003      	movs	r3, r0
 80091f2:	001a      	movs	r2, r3
 80091f4:	19bb      	adds	r3, r7, r6
 80091f6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	221c      	movs	r2, #28
 80091fc:	211b      	movs	r1, #27
 80091fe:	0018      	movs	r0, r3
 8009200:	f7ff ff4c 	bl	800909c <aBuff2int>
 8009204:	0003      	movs	r3, r0
 8009206:	001a      	movs	r2, r3
 8009208:	19bb      	adds	r3, r7, r6
 800920a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	221f      	movs	r2, #31
 8009210:	211e      	movs	r1, #30
 8009212:	0018      	movs	r0, r3
 8009214:	f7ff ff42 	bl	800909c <aBuff2int>
 8009218:	0003      	movs	r3, r0
 800921a:	001a      	movs	r2, r3
 800921c:	19bb      	adds	r3, r7, r6
 800921e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2224      	movs	r2, #36	@ 0x24
 8009224:	2123      	movs	r1, #35	@ 0x23
 8009226:	0018      	movs	r0, r3
 8009228:	f7ff ff38 	bl	800909c <aBuff2int>
 800922c:	0003      	movs	r3, r0
 800922e:	001a      	movs	r2, r3
 8009230:	0025      	movs	r5, r4
 8009232:	197b      	adds	r3, r7, r5
 8009234:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2213      	movs	r2, #19
 800923a:	2111      	movs	r1, #17
 800923c:	0018      	movs	r0, r3
 800923e:	f7ff ff2d 	bl	800909c <aBuff2int>
 8009242:	0003      	movs	r3, r0
 8009244:	001a      	movs	r2, r3
 8009246:	197b      	adds	r3, r7, r5
 8009248:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2216      	movs	r2, #22
 800924e:	2115      	movs	r1, #21
 8009250:	0018      	movs	r0, r3
 8009252:	f7ff ff23 	bl	800909c <aBuff2int>
 8009256:	0003      	movs	r3, r0
 8009258:	001a      	movs	r2, r3
 800925a:	197b      	adds	r3, r7, r5
 800925c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	220f      	movs	r2, #15
 8009262:	210d      	movs	r1, #13
 8009264:	0018      	movs	r0, r3
 8009266:	f7ff ff19 	bl	800909c <aBuff2int>
 800926a:	0003      	movs	r3, r0
 800926c:	001a      	movs	r2, r3
 800926e:	197b      	adds	r3, r7, r5
 8009270:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8009272:	19bb      	adds	r3, r7, r6
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	001c      	movs	r4, r3
 8009278:	19bb      	adds	r3, r7, r6
 800927a:	785b      	ldrb	r3, [r3, #1]
 800927c:	0018      	movs	r0, r3
 800927e:	19bb      	adds	r3, r7, r6
 8009280:	789b      	ldrb	r3, [r3, #2]
 8009282:	4a1c      	ldr	r2, [pc, #112]	@ (80092f4 <ParseTime+0x128>)
 8009284:	491c      	ldr	r1, [pc, #112]	@ (80092f8 <ParseTime+0x12c>)
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	9000      	str	r0, [sp, #0]
 800928a:	0023      	movs	r3, r4
 800928c:	2003      	movs	r0, #3
 800928e:	f009 fcdb 	bl	8012c48 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8009292:	197b      	adds	r3, r7, r5
 8009294:	789b      	ldrb	r3, [r3, #2]
 8009296:	001c      	movs	r4, r3
 8009298:	197b      	adds	r3, r7, r5
 800929a:	785b      	ldrb	r3, [r3, #1]
 800929c:	0018      	movs	r0, r3
 800929e:	197b      	adds	r3, r7, r5
 80092a0:	78db      	ldrb	r3, [r3, #3]
 80092a2:	4a16      	ldr	r2, [pc, #88]	@ (80092fc <ParseTime+0x130>)
 80092a4:	4914      	ldr	r1, [pc, #80]	@ (80092f8 <ParseTime+0x12c>)
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	9000      	str	r0, [sp, #0]
 80092aa:	0023      	movs	r3, r4
 80092ac:	2003      	movs	r0, #3
 80092ae:	f009 fccb 	bl	8012c48 <CreateLine>
  RTC_SetTime(&currentTime);
 80092b2:	19bb      	adds	r3, r7, r6
 80092b4:	0018      	movs	r0, r3
 80092b6:	f000 f825 	bl	8009304 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80092ba:	197b      	adds	r3, r7, r5
 80092bc:	0018      	movs	r0, r3
 80092be:	f000 f847 	bl	8009350 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80092c2:	197b      	adds	r3, r7, r5
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d101      	bne.n	80092ce <ParseTime+0x102>
    reset_fanCleaningDone();
 80092ca:	f004 fa31 	bl	800d730 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80092ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009300 <ParseTime+0x134>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80092d6:	230c      	movs	r3, #12
 80092d8:	18fa      	adds	r2, r7, r3
 80092da:	2308      	movs	r3, #8
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	0011      	movs	r1, r2
 80092e0:	0018      	movs	r0, r3
 80092e2:	f000 fa4b 	bl	800977c <makeTime>
 80092e6:	0002      	movs	r2, r0
 80092e8:	4b05      	ldr	r3, [pc, #20]	@ (8009300 <ParseTime+0x134>)
 80092ea:	601a      	str	r2, [r3, #0]
  }
}
 80092ec:	46c0      	nop			@ (mov r8, r8)
 80092ee:	46bd      	mov	sp, r7
 80092f0:	b009      	add	sp, #36	@ 0x24
 80092f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092f4:	0802b05c 	.word	0x0802b05c
 80092f8:	0802b094 	.word	0x0802b094
 80092fc:	0802b098 	.word	0x0802b098
 8009300:	20000b84 	.word	0x20000b84

08009304 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800931e:	4b09      	ldr	r3, [pc, #36]	@ (8009344 <RTC_SetTime+0x40>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	0018      	movs	r0, r3
 8009328:	f011 fd84 	bl	801ae34 <HAL_RTC_SetTime>
 800932c:	1e03      	subs	r3, r0, #0
 800932e:	d005      	beq.n	800933c <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8009330:	4a05      	ldr	r2, [pc, #20]	@ (8009348 <RTC_SetTime+0x44>)
 8009332:	4b06      	ldr	r3, [pc, #24]	@ (800934c <RTC_SetTime+0x48>)
 8009334:	0019      	movs	r1, r3
 8009336:	2001      	movs	r0, #1
 8009338:	f009 fc86 	bl	8012c48 <CreateLine>
    }
}
 800933c:	46c0      	nop			@ (mov r8, r8)
 800933e:	46bd      	mov	sp, r7
 8009340:	b002      	add	sp, #8
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20000b80 	.word	0x20000b80
 8009348:	0802b0cc 	.word	0x0802b0cc
 800934c:	0802b0e8 	.word	0x0802b0e8

08009350 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009358:	4b16      	ldr	r3, [pc, #88]	@ (80093b4 <RTC_SetDate+0x64>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	0018      	movs	r0, r3
 8009362:	f011 fe6f 	bl	801b044 <HAL_RTC_SetDate>
 8009366:	1e03      	subs	r3, r0, #0
 8009368:	d005      	beq.n	8009376 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800936a:	4a13      	ldr	r2, [pc, #76]	@ (80093b8 <RTC_SetDate+0x68>)
 800936c:	4b13      	ldr	r3, [pc, #76]	@ (80093bc <RTC_SetDate+0x6c>)
 800936e:	0019      	movs	r1, r3
 8009370:	2001      	movs	r0, #1
 8009372:	f009 fc69 	bl	8012c48 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8009376:	4b0f      	ldr	r3, [pc, #60]	@ (80093b4 <RTC_SetDate+0x64>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2101      	movs	r1, #1
 800937c:	0018      	movs	r0, r3
 800937e:	f012 f9a7 	bl	801b6d0 <HAL_RTCEx_BKUPRead>
 8009382:	0003      	movs	r3, r0
 8009384:	4a0e      	ldr	r2, [pc, #56]	@ (80093c0 <RTC_SetDate+0x70>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d010      	beq.n	80093ac <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800938a:	4a0e      	ldr	r2, [pc, #56]	@ (80093c4 <RTC_SetDate+0x74>)
 800938c:	4b0e      	ldr	r3, [pc, #56]	@ (80093c8 <RTC_SetDate+0x78>)
 800938e:	0019      	movs	r1, r3
 8009390:	2003      	movs	r0, #3
 8009392:	f009 fc59 	bl	8012c48 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8009396:	f010 fccd 	bl	8019d34 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800939a:	4b06      	ldr	r3, [pc, #24]	@ (80093b4 <RTC_SetDate+0x64>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a08      	ldr	r2, [pc, #32]	@ (80093c0 <RTC_SetDate+0x70>)
 80093a0:	2101      	movs	r1, #1
 80093a2:	0018      	movs	r0, r3
 80093a4:	f012 f97c 	bl	801b6a0 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80093a8:	f010 fcd2 	bl	8019d50 <HAL_PWR_DisableBkUpAccess>
    }
}
 80093ac:	46c0      	nop			@ (mov r8, r8)
 80093ae:	46bd      	mov	sp, r7
 80093b0:	b002      	add	sp, #8
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000b80 	.word	0x20000b80
 80093b8:	0802b0ec 	.word	0x0802b0ec
 80093bc:	0802b0e8 	.word	0x0802b0e8
 80093c0:	0000bebe 	.word	0x0000bebe
 80093c4:	0802b108 	.word	0x0802b108
 80093c8:	0802b094 	.word	0x0802b094

080093cc <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80093cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 80093d6:	250f      	movs	r5, #15
 80093d8:	197b      	adds	r3, r7, r5
 80093da:	2201      	movs	r2, #1
 80093dc:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 80093de:	230e      	movs	r3, #14
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	2200      	movs	r2, #0
 80093e4:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 80093e6:	260c      	movs	r6, #12
 80093e8:	19bc      	adds	r4, r7, r6
 80093ea:	f008 fca7 	bl	8011d3c <powerCheck>
 80093ee:	0003      	movs	r3, r0
 80093f0:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 80093f2:	19bb      	adds	r3, r7, r6
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d104      	bne.n	8009404 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 80093fa:	197b      	adds	r3, r7, r5
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	197b      	adds	r3, r7, r5
 8009400:	3201      	adds	r2, #1
 8009402:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8009404:	230d      	movs	r3, #13
 8009406:	18fb      	adds	r3, r7, r3
 8009408:	2200      	movs	r2, #0
 800940a:	701a      	strb	r2, [r3, #0]
 800940c:	e039      	b.n	8009482 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800940e:	4b23      	ldr	r3, [pc, #140]	@ (800949c <RTC_GetTime+0xd0>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	0018      	movs	r0, r3
 8009418:	f011 fdb6 	bl	801af88 <HAL_RTC_GetTime>
 800941c:	1e03      	subs	r3, r0, #0
 800941e:	d005      	beq.n	800942c <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8009420:	4a1f      	ldr	r2, [pc, #124]	@ (80094a0 <RTC_GetTime+0xd4>)
 8009422:	4b20      	ldr	r3, [pc, #128]	@ (80094a4 <RTC_GetTime+0xd8>)
 8009424:	0019      	movs	r1, r3
 8009426:	2001      	movs	r0, #1
 8009428:	f009 fc0e 	bl	8012c48 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800942c:	4b1b      	ldr	r3, [pc, #108]	@ (800949c <RTC_GetTime+0xd0>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	0018      	movs	r0, r3
 8009436:	f011 fe99 	bl	801b16c <HAL_RTC_GetDate>
 800943a:	1e03      	subs	r3, r0, #0
 800943c:	d005      	beq.n	800944a <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800943e:	4a1a      	ldr	r2, [pc, #104]	@ (80094a8 <RTC_GetTime+0xdc>)
 8009440:	4b18      	ldr	r3, [pc, #96]	@ (80094a4 <RTC_GetTime+0xd8>)
 8009442:	0019      	movs	r1, r3
 8009444:	2001      	movs	r0, #1
 8009446:	f009 fbff 	bl	8012c48 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800944a:	230c      	movs	r3, #12
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d110      	bne.n	8009476 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	210e      	movs	r1, #14
 800945a:	187a      	adds	r2, r7, r1
 800945c:	7812      	ldrb	r2, [r2, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d018      	beq.n	8009494 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8009462:	187b      	adds	r3, r7, r1
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	7812      	ldrb	r2, [r2, #0]
 8009468:	701a      	strb	r2, [r3, #0]
        t++;
 800946a:	210f      	movs	r1, #15
 800946c:	187b      	adds	r3, r7, r1
 800946e:	781a      	ldrb	r2, [r3, #0]
 8009470:	187b      	adds	r3, r7, r1
 8009472:	3201      	adds	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8009476:	210d      	movs	r1, #13
 8009478:	187b      	adds	r3, r7, r1
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	187b      	adds	r3, r7, r1
 800947e:	3201      	adds	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	230d      	movs	r3, #13
 8009484:	18fa      	adds	r2, r7, r3
 8009486:	230f      	movs	r3, #15
 8009488:	18fb      	adds	r3, r7, r3
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d3bd      	bcc.n	800940e <RTC_GetTime+0x42>
 8009492:	e000      	b.n	8009496 <RTC_GetTime+0xca>
      }
      else {
        return;
 8009494:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8009496:	46bd      	mov	sp, r7
 8009498:	b005      	add	sp, #20
 800949a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800949c:	20000b80 	.word	0x20000b80
 80094a0:	0802b120 	.word	0x0802b120
 80094a4:	0802b0e8 	.word	0x0802b0e8
 80094a8:	0802b13c 	.word	0x0802b13c

080094ac <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80094b2:	003a      	movs	r2, r7
 80094b4:	1d3b      	adds	r3, r7, #4
 80094b6:	0011      	movs	r1, r2
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7ff ff87 	bl	80093cc <RTC_GetTime>
  return currentDate.WeekDay;
 80094be:	003b      	movs	r3, r7
 80094c0:	781b      	ldrb	r3, [r3, #0]
}
 80094c2:	0018      	movs	r0, r3
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b006      	add	sp, #24
 80094c8:	bd80      	pop	{r7, pc}

080094ca <getPosixTime>:

uint32_t getPosixTime(void) {
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b086      	sub	sp, #24
 80094ce:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80094d0:	003a      	movs	r2, r7
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	0011      	movs	r1, r2
 80094d6:	0018      	movs	r0, r3
 80094d8:	f7ff ff78 	bl	80093cc <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 80094dc:	1d3a      	adds	r2, r7, #4
 80094de:	003b      	movs	r3, r7
 80094e0:	0011      	movs	r1, r2
 80094e2:	0018      	movs	r0, r3
 80094e4:	f000 f94a 	bl	800977c <makeTime>
 80094e8:	0003      	movs	r3, r0
}
 80094ea:	0018      	movs	r0, r3
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b006      	add	sp, #24
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 80094f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f6:	b08d      	sub	sp, #52	@ 0x34
 80094f8:	af04      	add	r7, sp, #16
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 80094fe:	240c      	movs	r4, #12
 8009500:	193a      	adds	r2, r7, r4
 8009502:	2508      	movs	r5, #8
 8009504:	1979      	adds	r1, r7, r5
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	0018      	movs	r0, r3
 800950a:	f000 fa01 	bl	8009910 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800950e:	002a      	movs	r2, r5
 8009510:	18bb      	adds	r3, r7, r2
 8009512:	789b      	ldrb	r3, [r3, #2]
 8009514:	001e      	movs	r6, r3
 8009516:	18bb      	adds	r3, r7, r2
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	469c      	mov	ip, r3
 800951c:	18bb      	adds	r3, r7, r2
 800951e:	78db      	ldrb	r3, [r3, #3]
 8009520:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009522:	0021      	movs	r1, r4
 8009524:	187b      	adds	r3, r7, r1
 8009526:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009528:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800952a:	187b      	adds	r3, r7, r1
 800952c:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800952e:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009530:	187b      	adds	r3, r7, r1
 8009532:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009534:	4906      	ldr	r1, [pc, #24]	@ (8009550 <getUTCfromPosixTime+0x5c>)
 8009536:	6838      	ldr	r0, [r7, #0]
 8009538:	9303      	str	r3, [sp, #12]
 800953a:	9502      	str	r5, [sp, #8]
 800953c:	9401      	str	r4, [sp, #4]
 800953e:	9200      	str	r2, [sp, #0]
 8009540:	4663      	mov	r3, ip
 8009542:	0032      	movs	r2, r6
 8009544:	f01b fc6a 	bl	8024e1c <siprintf>
}
 8009548:	46c0      	nop			@ (mov r8, r8)
 800954a:	46bd      	mov	sp, r7
 800954c:	b009      	add	sp, #36	@ 0x24
 800954e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009550:	0802b158 	.word	0x0802b158

08009554 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800955c:	4b10      	ldr	r3, [pc, #64]	@ (80095a0 <RTC_SetWakeUpTimer+0x4c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	0018      	movs	r0, r3
 8009562:	f012 f801 	bl	801b568 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8009566:	4b0e      	ldr	r3, [pc, #56]	@ (80095a0 <RTC_SetWakeUpTimer+0x4c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	22ff      	movs	r2, #255	@ 0xff
 8009570:	401a      	ands	r2, r3
 8009572:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <RTC_SetWakeUpTimer+0x4c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	490a      	ldr	r1, [pc, #40]	@ (80095a4 <RTC_SetWakeUpTimer+0x50>)
 800957a:	430a      	orrs	r2, r1
 800957c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800957e:	4b0a      	ldr	r3, [pc, #40]	@ (80095a8 <RTC_SetWakeUpTimer+0x54>)
 8009580:	2280      	movs	r2, #128	@ 0x80
 8009582:	0352      	lsls	r2, r2, #13
 8009584:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8009586:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <RTC_SetWakeUpTimer+0x4c>)
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3b01      	subs	r3, #1
 800958e:	2204      	movs	r2, #4
 8009590:	0019      	movs	r1, r3
 8009592:	f011 ff11 	bl	801b3b8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8009596:	46c0      	nop			@ (mov r8, r8)
 8009598:	46bd      	mov	sp, r7
 800959a:	b002      	add	sp, #8
 800959c:	bd80      	pop	{r7, pc}
 800959e:	46c0      	nop			@ (mov r8, r8)
 80095a0:	20000b80 	.word	0x20000b80
 80095a4:	fffffb7f 	.word	0xfffffb7f
 80095a8:	40010400 	.word	0x40010400

080095ac <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80095b0:	4a0b      	ldr	r2, [pc, #44]	@ (80095e0 <Enter_Standby_Mode+0x34>)
 80095b2:	4b0c      	ldr	r3, [pc, #48]	@ (80095e4 <Enter_Standby_Mode+0x38>)
 80095b4:	0019      	movs	r1, r3
 80095b6:	2003      	movs	r0, #3
 80095b8:	f009 fb46 	bl	8012c48 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80095bc:	2064      	movs	r0, #100	@ 0x64
 80095be:	f00a f88b 	bl	80136d8 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80095c2:	4b09      	ldr	r3, [pc, #36]	@ (80095e8 <Enter_Standby_Mode+0x3c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	0018      	movs	r0, r3
 80095c8:	f011 ffce 	bl	801b568 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80095cc:	f002 f93e 	bl	800b84c <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 80095d0:	f00a f8a6 	bl	8013720 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 80095d4:	f010 fc28 	bl	8019e28 <HAL_PWR_EnterSTANDBYMode>
}
 80095d8:	46c0      	nop			@ (mov r8, r8)
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	46c0      	nop			@ (mov r8, r8)
 80095e0:	0802b1ac 	.word	0x0802b1ac
 80095e4:	0802b094 	.word	0x0802b094
 80095e8:	20000b80 	.word	0x20000b80

080095ec <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	0002      	movs	r2, r0
 80095f4:	1dbb      	adds	r3, r7, #6
 80095f6:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 80095f8:	4b4e      	ldr	r3, [pc, #312]	@ (8009734 <Enter_Stop_Mode+0x148>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8009600:	f004 f86a 	bl	800d6d8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8009604:	f7ff fbac 	bl	8008d60 <ReadBatteryVoltage>
 8009608:	1c03      	adds	r3, r0, #0
 800960a:	1c18      	adds	r0, r3, #0
 800960c:	f7f9 ff2a 	bl	8003464 <__aeabi_f2d>
 8009610:	0002      	movs	r2, r0
 8009612:	000b      	movs	r3, r1
 8009614:	4848      	ldr	r0, [pc, #288]	@ (8009738 <Enter_Stop_Mode+0x14c>)
 8009616:	4949      	ldr	r1, [pc, #292]	@ (800973c <Enter_Stop_Mode+0x150>)
 8009618:	9200      	str	r2, [sp, #0]
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	0002      	movs	r2, r0
 800961e:	2002      	movs	r0, #2
 8009620:	f009 fb12 	bl	8012c48 <CreateLine>
  powerDisplay(powerCheck());
 8009624:	f008 fb8a 	bl	8011d3c <powerCheck>
 8009628:	0003      	movs	r3, r0
 800962a:	0018      	movs	r0, r3
 800962c:	f008 fba2 	bl	8011d74 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8009630:	1dbb      	adds	r3, r7, #6
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	4a42      	ldr	r2, [pc, #264]	@ (8009740 <Enter_Stop_Mode+0x154>)
 8009636:	4943      	ldr	r1, [pc, #268]	@ (8009744 <Enter_Stop_Mode+0x158>)
 8009638:	2003      	movs	r0, #3
 800963a:	f009 fb05 	bl	8012c48 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800963e:	f7ff ff44 	bl	80094ca <getPosixTime>
 8009642:	0002      	movs	r2, r0
 8009644:	1dbb      	adds	r3, r7, #6
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	18d3      	adds	r3, r2, r3
 800964a:	4a3f      	ldr	r2, [pc, #252]	@ (8009748 <Enter_Stop_Mode+0x15c>)
 800964c:	0011      	movs	r1, r2
 800964e:	0018      	movs	r0, r3
 8009650:	f7ff ff50 	bl	80094f4 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8009654:	4b3c      	ldr	r3, [pc, #240]	@ (8009748 <Enter_Stop_Mode+0x15c>)
 8009656:	4a3d      	ldr	r2, [pc, #244]	@ (800974c <Enter_Stop_Mode+0x160>)
 8009658:	4938      	ldr	r1, [pc, #224]	@ (800973c <Enter_Stop_Mode+0x150>)
 800965a:	2002      	movs	r0, #2
 800965c:	f009 faf4 	bl	8012c48 <CreateLine>
  HAL_Delay(100);
 8009660:	2064      	movs	r0, #100	@ 0x64
 8009662:	f00a f839 	bl	80136d8 <HAL_Delay>
  HAL_SuspendTick();
 8009666:	f00a f85b 	bl	8013720 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800966a:	1dbb      	adds	r3, r7, #6
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	0018      	movs	r0, r3
 8009670:	f7ff ff70 	bl	8009554 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009674:	2101      	movs	r1, #1
 8009676:	2001      	movs	r0, #1
 8009678:	f010 fb7a 	bl	8019d70 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800967c:	f002 fd80 	bl	800c180 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8009680:	f00a f85c 	bl	801373c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8009684:	1dbb      	adds	r3, r7, #6
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	0018      	movs	r0, r3
 800968a:	f003 ff99 	bl	800d5c0 <sen5x_enable>
 800968e:	1e03      	subs	r3, r0, #0
 8009690:	d01e      	beq.n	80096d0 <Enter_Stop_Mode+0xe4>
    showTime();
 8009692:	f7ff fc4b 	bl	8008f2c <showTime>
    set_light_on_state();
 8009696:	f004 fcc7 	bl	800e028 <set_light_on_state>
    if (!userToggle) {
 800969a:	4b2d      	ldr	r3, [pc, #180]	@ (8009750 <Enter_Stop_Mode+0x164>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	2201      	movs	r2, #1
 80096a0:	4053      	eors	r3, r2
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d013      	beq.n	80096d0 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 80096a8:	201c      	movs	r0, #28
 80096aa:	f7ff ff53 	bl	8009554 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80096ae:	4a24      	ldr	r2, [pc, #144]	@ (8009740 <Enter_Stop_Mode+0x154>)
 80096b0:	4924      	ldr	r1, [pc, #144]	@ (8009744 <Enter_Stop_Mode+0x158>)
 80096b2:	231c      	movs	r3, #28
 80096b4:	2003      	movs	r0, #3
 80096b6:	f009 fac7 	bl	8012c48 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80096ba:	2101      	movs	r1, #1
 80096bc:	2001      	movs	r0, #1
 80096be:	f010 fb57 	bl	8019d70 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 80096c2:	f002 fd5d 	bl	800c180 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 80096c6:	f00a f839 	bl	801373c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 80096ca:	2000      	movs	r0, #0
 80096cc:	f003 ff56 	bl	800d57c <setsen5xReadTimer>
    }
  }
  showTime();
 80096d0:	f7ff fc2c 	bl	8008f2c <showTime>
  EnabledConnectedDevices();
 80096d4:	f003 faf0 	bl	800ccb8 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 80096d8:	f003 fbea 	bl	800ceb0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 80096dc:	f006 fafe 	bl	800fcdc <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 80096e0:	f7fa f816 	bl	8003710 <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 80096e4:	2000      	movs	r0, #0
 80096e6:	f003 ff5b 	bl	800d5a0 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 80096ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009754 <Enter_Stop_Mode+0x168>)
 80096ec:	0018      	movs	r0, r3
 80096ee:	f7fa feeb 	bl	80044c8 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 80096f2:	201e      	movs	r0, #30
 80096f4:	f006 fae0 	bl	800fcb8 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 80096f8:	205a      	movs	r0, #90	@ 0x5a
 80096fa:	f009 fd01 	bl	8013100 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 80096fe:	203c      	movs	r0, #60	@ 0x3c
 8009700:	f000 fb96 	bl	8009e30 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8009704:	205a      	movs	r0, #90	@ 0x5a
 8009706:	f000 ff3d 	bl	800a584 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800970a:	2000      	movs	r0, #0
 800970c:	f7fa f80a 	bl	8003724 <setENS160TimeStamp>
  setMICTimeStamp(0);
 8009710:	2000      	movs	r0, #0
 8009712:	f003 fbbb 	bl	800ce8c <setMICTimeStamp>
  ESPTransmitDone = false;
 8009716:	4b10      	ldr	r3, [pc, #64]	@ (8009758 <Enter_Stop_Mode+0x16c>)
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800971c:	f009 ffd2 	bl	80136c4 <HAL_GetTick>
 8009720:	0003      	movs	r3, r0
 8009722:	4a0c      	ldr	r2, [pc, #48]	@ (8009754 <Enter_Stop_Mode+0x168>)
 8009724:	189a      	adds	r2, r3, r2
 8009726:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <Enter_Stop_Mode+0x170>)
 8009728:	601a      	str	r2, [r3, #0]
}
 800972a:	46c0      	nop			@ (mov r8, r8)
 800972c:	46bd      	mov	sp, r7
 800972e:	b002      	add	sp, #8
 8009730:	bd80      	pop	{r7, pc}
 8009732:	46c0      	nop			@ (mov r8, r8)
 8009734:	20000ee5 	.word	0x20000ee5
 8009738:	0802b1d0 	.word	0x0802b1d0
 800973c:	0802b1e8 	.word	0x0802b1e8
 8009740:	0802b1ec 	.word	0x0802b1ec
 8009744:	0802b094 	.word	0x0802b094
 8009748:	20000b88 	.word	0x20000b88
 800974c:	0802b210 	.word	0x0802b210
 8009750:	20001e76 	.word	0x20001e76
 8009754:	00001194 	.word	0x00001194
 8009758:	200005c0 	.word	0x200005c0
 800975c:	20000e3c 	.word	0x20000e3c

08009760 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009768:	4b03      	ldr	r3, [pc, #12]	@ (8009778 <InitClock+0x18>)
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
}
 800976e:	46c0      	nop			@ (mov r8, r8)
 8009770:	46bd      	mov	sp, r7
 8009772:	b002      	add	sp, #8
 8009774:	bd80      	pop	{r7, pc}
 8009776:	46c0      	nop			@ (mov r8, r8)
 8009778:	20000b80 	.word	0x20000b80

0800977c <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	78db      	ldrb	r3, [r3, #3]
 800978a:	001a      	movs	r2, r3
 800978c:	0013      	movs	r3, r2
 800978e:	025b      	lsls	r3, r3, #9
 8009790:	189b      	adds	r3, r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	189b      	adds	r3, r3, r2
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	189b      	adds	r3, r3, r2
 800979a:	011a      	lsls	r2, r3, #4
 800979c:	1ad2      	subs	r2, r2, r3
 800979e:	01d3      	lsls	r3, r2, #7
 80097a0:	001a      	movs	r2, r3
 80097a2:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e028      	b.n	80097fc <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4a53      	ldr	r2, [pc, #332]	@ (80098fc <makeTime+0x180>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	db21      	blt.n	80097f6 <makeTime+0x7a>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4a52      	ldr	r2, [pc, #328]	@ (8009900 <makeTime+0x184>)
 80097b6:	4694      	mov	ip, r2
 80097b8:	4463      	add	r3, ip
 80097ba:	001a      	movs	r2, r3
 80097bc:	2303      	movs	r3, #3
 80097be:	4013      	ands	r3, r2
 80097c0:	d119      	bne.n	80097f6 <makeTime+0x7a>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4a4e      	ldr	r2, [pc, #312]	@ (8009900 <makeTime+0x184>)
 80097c6:	4694      	mov	ip, r2
 80097c8:	4463      	add	r3, ip
 80097ca:	2164      	movs	r1, #100	@ 0x64
 80097cc:	0018      	movs	r0, r3
 80097ce:	f7f6 fe59 	bl	8000484 <__aeabi_idivmod>
 80097d2:	1e0b      	subs	r3, r1, #0
 80097d4:	d10a      	bne.n	80097ec <makeTime+0x70>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4a49      	ldr	r2, [pc, #292]	@ (8009900 <makeTime+0x184>)
 80097da:	4694      	mov	ip, r2
 80097dc:	4463      	add	r3, ip
 80097de:	22c8      	movs	r2, #200	@ 0xc8
 80097e0:	0051      	lsls	r1, r2, #1
 80097e2:	0018      	movs	r0, r3
 80097e4:	f7f6 fe4e 	bl	8000484 <__aeabi_idivmod>
 80097e8:	1e0b      	subs	r3, r1, #0
 80097ea:	d104      	bne.n	80097f6 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4a45      	ldr	r2, [pc, #276]	@ (8009904 <makeTime+0x188>)
 80097f0:	4694      	mov	ip, r2
 80097f2:	4463      	add	r3, ip
 80097f4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	001a      	movs	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4293      	cmp	r3, r2
 8009806:	dbd0      	blt.n	80097aa <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8009808:	2301      	movs	r3, #1
 800980a:	60fb      	str	r3, [r7, #12]
 800980c:	e03c      	b.n	8009888 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b02      	cmp	r3, #2
 8009812:	d125      	bne.n	8009860 <makeTime+0xe4>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	78db      	ldrb	r3, [r3, #3]
 8009818:	4a39      	ldr	r2, [pc, #228]	@ (8009900 <makeTime+0x184>)
 800981a:	4694      	mov	ip, r2
 800981c:	4463      	add	r3, ip
 800981e:	001a      	movs	r2, r3
 8009820:	2303      	movs	r3, #3
 8009822:	4013      	ands	r3, r2
 8009824:	d11c      	bne.n	8009860 <makeTime+0xe4>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	78db      	ldrb	r3, [r3, #3]
 800982a:	4a35      	ldr	r2, [pc, #212]	@ (8009900 <makeTime+0x184>)
 800982c:	4694      	mov	ip, r2
 800982e:	4463      	add	r3, ip
 8009830:	2164      	movs	r1, #100	@ 0x64
 8009832:	0018      	movs	r0, r3
 8009834:	f7f6 fe26 	bl	8000484 <__aeabi_idivmod>
 8009838:	1e0b      	subs	r3, r1, #0
 800983a:	d10b      	bne.n	8009854 <makeTime+0xd8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	78db      	ldrb	r3, [r3, #3]
 8009840:	4a2f      	ldr	r2, [pc, #188]	@ (8009900 <makeTime+0x184>)
 8009842:	4694      	mov	ip, r2
 8009844:	4463      	add	r3, ip
 8009846:	22c8      	movs	r2, #200	@ 0xc8
 8009848:	0051      	lsls	r1, r2, #1
 800984a:	0018      	movs	r0, r3
 800984c:	f7f6 fe1a 	bl	8000484 <__aeabi_idivmod>
 8009850:	1e0b      	subs	r3, r1, #0
 8009852:	d105      	bne.n	8009860 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	4a2c      	ldr	r2, [pc, #176]	@ (8009908 <makeTime+0x18c>)
 8009858:	4694      	mov	ip, r2
 800985a:	4463      	add	r3, ip
 800985c:	60bb      	str	r3, [r7, #8]
 800985e:	e010      	b.n	8009882 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3b01      	subs	r3, #1
 8009864:	4a29      	ldr	r2, [pc, #164]	@ (800990c <makeTime+0x190>)
 8009866:	5cd3      	ldrb	r3, [r2, r3]
 8009868:	001a      	movs	r2, r3
 800986a:	0013      	movs	r3, r2
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	189b      	adds	r3, r3, r2
 8009870:	011a      	lsls	r2, r3, #4
 8009872:	1ad2      	subs	r2, r2, r3
 8009874:	0113      	lsls	r3, r2, #4
 8009876:	1a9b      	subs	r3, r3, r2
 8009878:	01db      	lsls	r3, r3, #7
 800987a:	001a      	movs	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	189b      	adds	r3, r3, r2
 8009880:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3301      	adds	r3, #1
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	001a      	movs	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4293      	cmp	r3, r2
 8009892:	dbbc      	blt.n	800980e <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	789b      	ldrb	r3, [r3, #2]
 8009898:	3b01      	subs	r3, #1
 800989a:	001a      	movs	r2, r3
 800989c:	0013      	movs	r3, r2
 800989e:	005b      	lsls	r3, r3, #1
 80098a0:	189b      	adds	r3, r3, r2
 80098a2:	011a      	lsls	r2, r3, #4
 80098a4:	1ad2      	subs	r2, r2, r3
 80098a6:	0113      	lsls	r3, r2, #4
 80098a8:	1a9b      	subs	r3, r3, r2
 80098aa:	01db      	lsls	r3, r3, #7
 80098ac:	001a      	movs	r2, r3
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	189b      	adds	r3, r3, r2
 80098b2:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	001a      	movs	r2, r3
 80098ba:	0013      	movs	r3, r2
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	011a      	lsls	r2, r3, #4
 80098c2:	1ad2      	subs	r2, r2, r3
 80098c4:	0113      	lsls	r3, r2, #4
 80098c6:	001a      	movs	r2, r3
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	189b      	adds	r3, r3, r2
 80098cc:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	001a      	movs	r2, r3
 80098d4:	0013      	movs	r3, r2
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	001a      	movs	r2, r3
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	189b      	adds	r3, r3, r2
 80098e2:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	789b      	ldrb	r3, [r3, #2]
 80098e8:	001a      	movs	r2, r3
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	189b      	adds	r3, r3, r2
 80098ee:	60bb      	str	r3, [r7, #8]
  return seconds;
 80098f0:	68bb      	ldr	r3, [r7, #8]
}
 80098f2:	0018      	movs	r0, r3
 80098f4:	46bd      	mov	sp, r7
 80098f6:	b004      	add	sp, #16
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	46c0      	nop			@ (mov r8, r8)
 80098fc:	fffff84f 	.word	0xfffff84f
 8009900:	000007b2 	.word	0x000007b2
 8009904:	00015180 	.word	0x00015180
 8009908:	00263b80 	.word	0x00263b80
 800990c:	0802d330 	.word	0x0802d330

08009910 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009910:	b590      	push	{r4, r7, lr}
 8009912:	b089      	sub	sp, #36	@ 0x24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	213c      	movs	r1, #60	@ 0x3c
 8009924:	0018      	movs	r0, r3
 8009926:	f7f6 fcc3 	bl	80002b0 <__aeabi_uidivmod>
 800992a:	000b      	movs	r3, r1
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	213c      	movs	r1, #60	@ 0x3c
 8009936:	0018      	movs	r0, r3
 8009938:	f7f6 fc34 	bl	80001a4 <__udivsi3>
 800993c:	0003      	movs	r3, r0
 800993e:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	213c      	movs	r1, #60	@ 0x3c
 8009944:	0018      	movs	r0, r3
 8009946:	f7f6 fcb3 	bl	80002b0 <__aeabi_uidivmod>
 800994a:	000b      	movs	r3, r1
 800994c:	b2da      	uxtb	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	213c      	movs	r1, #60	@ 0x3c
 8009956:	0018      	movs	r0, r3
 8009958:	f7f6 fc24 	bl	80001a4 <__udivsi3>
 800995c:	0003      	movs	r3, r0
 800995e:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	2118      	movs	r1, #24
 8009964:	0018      	movs	r0, r3
 8009966:	f7f6 fca3 	bl	80002b0 <__aeabi_uidivmod>
 800996a:	000b      	movs	r3, r1
 800996c:	b2da      	uxtb	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2118      	movs	r1, #24
 8009976:	0018      	movs	r0, r3
 8009978:	f7f6 fc14 	bl	80001a4 <__udivsi3>
 800997c:	0003      	movs	r3, r0
 800997e:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	3b01      	subs	r3, #1
 8009984:	2107      	movs	r1, #7
 8009986:	0018      	movs	r0, r3
 8009988:	f7f6 fc92 	bl	80002b0 <__aeabi_uidivmod>
 800998c:	000b      	movs	r3, r1
 800998e:	b2db      	uxtb	r3, r3
 8009990:	3301      	adds	r3, #1
 8009992:	b2da      	uxtb	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009998:	231f      	movs	r3, #31
 800999a:	18fb      	adds	r3, r7, r3
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
  days = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80099a4:	e005      	b.n	80099b2 <breakPosixTime+0xa2>
    year++;
 80099a6:	211f      	movs	r1, #31
 80099a8:	187b      	adds	r3, r7, r1
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	187b      	adds	r3, r7, r1
 80099ae:	3201      	adds	r2, #1
 80099b0:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80099b2:	241f      	movs	r4, #31
 80099b4:	193b      	adds	r3, r7, r4
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	4a64      	ldr	r2, [pc, #400]	@ (8009b4c <breakPosixTime+0x23c>)
 80099ba:	4694      	mov	ip, r2
 80099bc:	4463      	add	r3, ip
 80099be:	001a      	movs	r2, r3
 80099c0:	2303      	movs	r3, #3
 80099c2:	4013      	ands	r3, r2
 80099c4:	d119      	bne.n	80099fa <breakPosixTime+0xea>
 80099c6:	193b      	adds	r3, r7, r4
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	4a60      	ldr	r2, [pc, #384]	@ (8009b4c <breakPosixTime+0x23c>)
 80099cc:	4694      	mov	ip, r2
 80099ce:	4463      	add	r3, ip
 80099d0:	2164      	movs	r1, #100	@ 0x64
 80099d2:	0018      	movs	r0, r3
 80099d4:	f7f6 fd56 	bl	8000484 <__aeabi_idivmod>
 80099d8:	1e0b      	subs	r3, r1, #0
 80099da:	d10b      	bne.n	80099f4 <breakPosixTime+0xe4>
 80099dc:	193b      	adds	r3, r7, r4
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	4a5a      	ldr	r2, [pc, #360]	@ (8009b4c <breakPosixTime+0x23c>)
 80099e2:	4694      	mov	ip, r2
 80099e4:	4463      	add	r3, ip
 80099e6:	22c8      	movs	r2, #200	@ 0xc8
 80099e8:	0051      	lsls	r1, r2, #1
 80099ea:	0018      	movs	r0, r3
 80099ec:	f7f6 fd4a 	bl	8000484 <__aeabi_idivmod>
 80099f0:	1e0b      	subs	r3, r1, #0
 80099f2:	d102      	bne.n	80099fa <breakPosixTime+0xea>
 80099f4:	23b7      	movs	r3, #183	@ 0xb7
 80099f6:	005b      	lsls	r3, r3, #1
 80099f8:	e001      	b.n	80099fe <breakPosixTime+0xee>
 80099fa:	236e      	movs	r3, #110	@ 0x6e
 80099fc:	33ff      	adds	r3, #255	@ 0xff
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	18d3      	adds	r3, r2, r3
 8009a02:	617b      	str	r3, [r7, #20]
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d9cc      	bls.n	80099a6 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	241f      	movs	r4, #31
 8009a10:	193a      	adds	r2, r7, r4
 8009a12:	7812      	ldrb	r2, [r2, #0]
 8009a14:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8009a16:	193b      	adds	r3, r7, r4
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8009b4c <breakPosixTime+0x23c>)
 8009a1c:	4694      	mov	ip, r2
 8009a1e:	4463      	add	r3, ip
 8009a20:	001a      	movs	r2, r3
 8009a22:	2303      	movs	r3, #3
 8009a24:	4013      	ands	r3, r2
 8009a26:	d119      	bne.n	8009a5c <breakPosixTime+0x14c>
 8009a28:	193b      	adds	r3, r7, r4
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	4a47      	ldr	r2, [pc, #284]	@ (8009b4c <breakPosixTime+0x23c>)
 8009a2e:	4694      	mov	ip, r2
 8009a30:	4463      	add	r3, ip
 8009a32:	2164      	movs	r1, #100	@ 0x64
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7f6 fd25 	bl	8000484 <__aeabi_idivmod>
 8009a3a:	1e0b      	subs	r3, r1, #0
 8009a3c:	d10b      	bne.n	8009a56 <breakPosixTime+0x146>
 8009a3e:	193b      	adds	r3, r7, r4
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	4a42      	ldr	r2, [pc, #264]	@ (8009b4c <breakPosixTime+0x23c>)
 8009a44:	4694      	mov	ip, r2
 8009a46:	4463      	add	r3, ip
 8009a48:	22c8      	movs	r2, #200	@ 0xc8
 8009a4a:	0051      	lsls	r1, r2, #1
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	f7f6 fd19 	bl	8000484 <__aeabi_idivmod>
 8009a52:	1e0b      	subs	r3, r1, #0
 8009a54:	d102      	bne.n	8009a5c <breakPosixTime+0x14c>
 8009a56:	23b7      	movs	r3, #183	@ 0xb7
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	e001      	b.n	8009a60 <breakPosixTime+0x150>
 8009a5c:	236e      	movs	r3, #110	@ 0x6e
 8009a5e:	33ff      	adds	r3, #255	@ 0xff
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8009a66:	69ba      	ldr	r2, [r7, #24]
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	61bb      	str	r3, [r7, #24]

  days=0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
  month=0;
 8009a72:	211e      	movs	r1, #30
 8009a74:	187b      	adds	r3, r7, r1
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8009a7a:	231d      	movs	r3, #29
 8009a7c:	18fb      	adds	r3, r7, r3
 8009a7e:	2200      	movs	r2, #0
 8009a80:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8009a82:	187b      	adds	r3, r7, r1
 8009a84:	2200      	movs	r2, #0
 8009a86:	701a      	strb	r2, [r3, #0]
 8009a88:	e048      	b.n	8009b1c <breakPosixTime+0x20c>
    if (month==1) { // february
 8009a8a:	231e      	movs	r3, #30
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d12a      	bne.n	8009aea <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8009a94:	241f      	movs	r4, #31
 8009a96:	193b      	adds	r3, r7, r4
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8009b4c <breakPosixTime+0x23c>)
 8009a9c:	4694      	mov	ip, r2
 8009a9e:	4463      	add	r3, ip
 8009aa0:	001a      	movs	r2, r3
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d11b      	bne.n	8009ae0 <breakPosixTime+0x1d0>
 8009aa8:	193b      	adds	r3, r7, r4
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	4a27      	ldr	r2, [pc, #156]	@ (8009b4c <breakPosixTime+0x23c>)
 8009aae:	4694      	mov	ip, r2
 8009ab0:	4463      	add	r3, ip
 8009ab2:	2164      	movs	r1, #100	@ 0x64
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f7f6 fce5 	bl	8000484 <__aeabi_idivmod>
 8009aba:	1e0b      	subs	r3, r1, #0
 8009abc:	d10b      	bne.n	8009ad6 <breakPosixTime+0x1c6>
 8009abe:	193b      	adds	r3, r7, r4
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	4a22      	ldr	r2, [pc, #136]	@ (8009b4c <breakPosixTime+0x23c>)
 8009ac4:	4694      	mov	ip, r2
 8009ac6:	4463      	add	r3, ip
 8009ac8:	22c8      	movs	r2, #200	@ 0xc8
 8009aca:	0051      	lsls	r1, r2, #1
 8009acc:	0018      	movs	r0, r3
 8009ace:	f7f6 fcd9 	bl	8000484 <__aeabi_idivmod>
 8009ad2:	1e0b      	subs	r3, r1, #0
 8009ad4:	d104      	bne.n	8009ae0 <breakPosixTime+0x1d0>
        monthLength=29;
 8009ad6:	231d      	movs	r3, #29
 8009ad8:	18fb      	adds	r3, r7, r3
 8009ada:	221d      	movs	r2, #29
 8009adc:	701a      	strb	r2, [r3, #0]
 8009ade:	e00c      	b.n	8009afa <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8009ae0:	231d      	movs	r3, #29
 8009ae2:	18fb      	adds	r3, r7, r3
 8009ae4:	221c      	movs	r2, #28
 8009ae6:	701a      	strb	r2, [r3, #0]
 8009ae8:	e007      	b.n	8009afa <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8009aea:	231e      	movs	r3, #30
 8009aec:	18fb      	adds	r3, r7, r3
 8009aee:	781a      	ldrb	r2, [r3, #0]
 8009af0:	231d      	movs	r3, #29
 8009af2:	18fb      	adds	r3, r7, r3
 8009af4:	4916      	ldr	r1, [pc, #88]	@ (8009b50 <breakPosixTime+0x240>)
 8009af6:	5c8a      	ldrb	r2, [r1, r2]
 8009af8:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8009afa:	211d      	movs	r1, #29
 8009afc:	187b      	adds	r3, r7, r1
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d310      	bcc.n	8009b28 <breakPosixTime+0x218>
      time -= monthLength;
 8009b06:	187b      	adds	r3, r7, r1
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8009b10:	211e      	movs	r1, #30
 8009b12:	187b      	adds	r3, r7, r1
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	187b      	adds	r3, r7, r1
 8009b18:	3201      	adds	r2, #1
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	231e      	movs	r3, #30
 8009b1e:	18fb      	adds	r3, r7, r3
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b0b      	cmp	r3, #11
 8009b24:	d9b1      	bls.n	8009a8a <breakPosixTime+0x17a>
 8009b26:	e000      	b.n	8009b2a <breakPosixTime+0x21a>
    } else {
        break;
 8009b28:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8009b2a:	231e      	movs	r3, #30
 8009b2c:	18fb      	adds	r3, r7, r3
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	3301      	adds	r3, #1
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	709a      	strb	r2, [r3, #2]
}
 8009b44:	46c0      	nop			@ (mov r8, r8)
 8009b46:	46bd      	mov	sp, r7
 8009b48:	b009      	add	sp, #36	@ 0x24
 8009b4a:	bd90      	pop	{r4, r7, pc}
 8009b4c:	000007b2 	.word	0x000007b2
 8009b50:	0802d330 	.word	0x0802d330

08009b54 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009b5a:	003b      	movs	r3, r7
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	2308      	movs	r3, #8
 8009b60:	001a      	movs	r2, r3
 8009b62:	2100      	movs	r1, #0
 8009b64:	f01b fac0 	bl	80250e8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8009b68:	4b30      	ldr	r3, [pc, #192]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b6a:	4a31      	ldr	r2, [pc, #196]	@ (8009c30 <MX_ADC_Init+0xdc>)
 8009b6c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8009b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009b74:	4b2d      	ldr	r3, [pc, #180]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b76:	22c0      	movs	r2, #192	@ 0xc0
 8009b78:	0612      	lsls	r2, r2, #24
 8009b7a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009b82:	4b2a      	ldr	r3, [pc, #168]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8009b88:	4b28      	ldr	r3, [pc, #160]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009b8e:	4b27      	ldr	r3, [pc, #156]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8009b94:	4b25      	ldr	r3, [pc, #148]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b96:	2220      	movs	r2, #32
 8009b98:	2100      	movs	r1, #0
 8009b9a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8009b9c:	4b23      	ldr	r3, [pc, #140]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009b9e:	2221      	movs	r2, #33	@ 0x21
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009ba4:	4b21      	ldr	r3, [pc, #132]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009baa:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bac:	22c2      	movs	r2, #194	@ 0xc2
 8009bae:	32ff      	adds	r2, #255	@ 0xff
 8009bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8009bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bb4:	222c      	movs	r2, #44	@ 0x2c
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009bba:	4b1c      	ldr	r3, [pc, #112]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8009bc6:	4b19      	ldr	r3, [pc, #100]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8009bcc:	4b17      	ldr	r3, [pc, #92]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8009bd2:	4b16      	ldr	r3, [pc, #88]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8009bd8:	4b14      	ldr	r3, [pc, #80]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bda:	0018      	movs	r0, r3
 8009bdc:	f009 fdda 	bl	8013794 <HAL_ADC_Init>
 8009be0:	1e03      	subs	r3, r0, #0
 8009be2:	d001      	beq.n	8009be8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8009be4:	f002 fc1c 	bl	800c420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8009be8:	003b      	movs	r3, r7
 8009bea:	4a12      	ldr	r2, [pc, #72]	@ (8009c34 <MX_ADC_Init+0xe0>)
 8009bec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009bee:	003b      	movs	r3, r7
 8009bf0:	2280      	movs	r2, #128	@ 0x80
 8009bf2:	0152      	lsls	r2, r2, #5
 8009bf4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8009bf6:	003a      	movs	r2, r7
 8009bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009bfa:	0011      	movs	r1, r2
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f00a f839 	bl	8013c74 <HAL_ADC_ConfigChannel>
 8009c02:	1e03      	subs	r3, r0, #0
 8009c04:	d001      	beq.n	8009c0a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8009c06:	f002 fc0b 	bl	800c420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8009c0a:	003b      	movs	r3, r7
 8009c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8009c38 <MX_ADC_Init+0xe4>)
 8009c0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8009c10:	003a      	movs	r2, r7
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <MX_ADC_Init+0xd8>)
 8009c14:	0011      	movs	r1, r2
 8009c16:	0018      	movs	r0, r3
 8009c18:	f00a f82c 	bl	8013c74 <HAL_ADC_ConfigChannel>
 8009c1c:	1e03      	subs	r3, r0, #0
 8009c1e:	d001      	beq.n	8009c24 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8009c20:	f002 fbfe 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8009c24:	46c0      	nop			@ (mov r8, r8)
 8009c26:	46bd      	mov	sp, r7
 8009c28:	b002      	add	sp, #8
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20000ba0 	.word	0x20000ba0
 8009c30:	40012400 	.word	0x40012400
 8009c34:	38004000 	.word	0x38004000
 8009c38:	3c008000 	.word	0x3c008000

08009c3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009c3c:	b590      	push	{r4, r7, lr}
 8009c3e:	b089      	sub	sp, #36	@ 0x24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c44:	240c      	movs	r4, #12
 8009c46:	193b      	adds	r3, r7, r4
 8009c48:	0018      	movs	r0, r3
 8009c4a:	2314      	movs	r3, #20
 8009c4c:	001a      	movs	r2, r3
 8009c4e:	2100      	movs	r1, #0
 8009c50:	f01b fa4a 	bl	80250e8 <memset>
  if(adcHandle->Instance==ADC1)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a14      	ldr	r2, [pc, #80]	@ (8009cac <HAL_ADC_MspInit+0x70>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d121      	bne.n	8009ca2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009c5e:	4b14      	ldr	r3, [pc, #80]	@ (8009cb0 <HAL_ADC_MspInit+0x74>)
 8009c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c62:	4b13      	ldr	r3, [pc, #76]	@ (8009cb0 <HAL_ADC_MspInit+0x74>)
 8009c64:	2180      	movs	r1, #128	@ 0x80
 8009c66:	0089      	lsls	r1, r1, #2
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009c6c:	4b10      	ldr	r3, [pc, #64]	@ (8009cb0 <HAL_ADC_MspInit+0x74>)
 8009c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c70:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb0 <HAL_ADC_MspInit+0x74>)
 8009c72:	2104      	movs	r1, #4
 8009c74:	430a      	orrs	r2, r1
 8009c76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009c78:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb0 <HAL_ADC_MspInit+0x74>)
 8009c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7c:	2204      	movs	r2, #4
 8009c7e:	4013      	ands	r3, r2
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8009c84:	193b      	adds	r3, r7, r4
 8009c86:	2230      	movs	r2, #48	@ 0x30
 8009c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009c8a:	193b      	adds	r3, r7, r4
 8009c8c:	2203      	movs	r2, #3
 8009c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c90:	193b      	adds	r3, r7, r4
 8009c92:	2200      	movs	r2, #0
 8009c94:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c96:	193b      	adds	r3, r7, r4
 8009c98:	4a06      	ldr	r2, [pc, #24]	@ (8009cb4 <HAL_ADC_MspInit+0x78>)
 8009c9a:	0019      	movs	r1, r3
 8009c9c:	0010      	movs	r0, r2
 8009c9e:	f00a fe07 	bl	80148b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009ca2:	46c0      	nop			@ (mov r8, r8)
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	b009      	add	sp, #36	@ 0x24
 8009ca8:	bd90      	pop	{r4, r7, pc}
 8009caa:	46c0      	nop			@ (mov r8, r8)
 8009cac:	40012400 	.word	0x40012400
 8009cb0:	40021000 	.word	0x40021000
 8009cb4:	50000800 	.word	0x50000800

08009cb8 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6039      	str	r1, [r7, #0]
 8009cc0:	0011      	movs	r1, r2
 8009cc2:	1dfb      	adds	r3, r7, #7
 8009cc4:	1c02      	adds	r2, r0, #0
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	1dbb      	adds	r3, r7, #6
 8009cca:	1c0a      	adds	r2, r1, #0
 8009ccc:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 8009cce:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <ReadDirRegister+0x40>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00a      	beq.n	8009cec <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 8009cd6:	4b08      	ldr	r3, [pc, #32]	@ (8009cf8 <ReadDirRegister+0x40>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	1dba      	adds	r2, r7, #6
 8009cdc:	7814      	ldrb	r4, [r2, #0]
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	1dfa      	adds	r2, r7, #7
 8009ce2:	7810      	ldrb	r0, [r2, #0]
 8009ce4:	0022      	movs	r2, r4
 8009ce6:	4798      	blx	r3
 8009ce8:	0003      	movs	r3, r0
 8009cea:	e000      	b.n	8009cee <ReadDirRegister+0x36>
  }
  return false;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	0018      	movs	r0, r3
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	b003      	add	sp, #12
 8009cf4:	bd90      	pop	{r4, r7, pc}
 8009cf6:	46c0      	nop			@ (mov r8, r8)
 8009cf8:	20000c08 	.word	0x20000c08

08009cfc <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009cfc:	b590      	push	{r4, r7, lr}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6039      	str	r1, [r7, #0]
 8009d04:	0011      	movs	r1, r2
 8009d06:	1dfb      	adds	r3, r7, #7
 8009d08:	1c02      	adds	r2, r0, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
 8009d0c:	1dbb      	adds	r3, r7, #6
 8009d0e:	1c0a      	adds	r2, r1, #0
 8009d10:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8009d12:	4b0a      	ldr	r3, [pc, #40]	@ (8009d3c <ReadRegister+0x40>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00a      	beq.n	8009d30 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8009d1a:	4b08      	ldr	r3, [pc, #32]	@ (8009d3c <ReadRegister+0x40>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	1dba      	adds	r2, r7, #6
 8009d20:	7814      	ldrb	r4, [r2, #0]
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	1dfa      	adds	r2, r7, #7
 8009d26:	7810      	ldrb	r0, [r2, #0]
 8009d28:	0022      	movs	r2, r4
 8009d2a:	4798      	blx	r3
 8009d2c:	0003      	movs	r3, r0
 8009d2e:	e000      	b.n	8009d32 <ReadRegister+0x36>
  }
  return false;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	0018      	movs	r0, r3
 8009d34:	46bd      	mov	sp, r7
 8009d36:	b003      	add	sp, #12
 8009d38:	bd90      	pop	{r4, r7, pc}
 8009d3a:	46c0      	nop			@ (mov r8, r8)
 8009d3c:	20000c00 	.word	0x20000c00

08009d40 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6039      	str	r1, [r7, #0]
 8009d48:	0011      	movs	r1, r2
 8009d4a:	1dfb      	adds	r3, r7, #7
 8009d4c:	1c02      	adds	r2, r0, #0
 8009d4e:	701a      	strb	r2, [r3, #0]
 8009d50:	1dbb      	adds	r3, r7, #6
 8009d52:	1c0a      	adds	r2, r1, #0
 8009d54:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009d56:	4b0a      	ldr	r3, [pc, #40]	@ (8009d80 <WriteRegister+0x40>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8009d5e:	4b08      	ldr	r3, [pc, #32]	@ (8009d80 <WriteRegister+0x40>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	1dba      	adds	r2, r7, #6
 8009d64:	7814      	ldrb	r4, [r2, #0]
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	1dfa      	adds	r2, r7, #7
 8009d6a:	7810      	ldrb	r0, [r2, #0]
 8009d6c:	0022      	movs	r2, r4
 8009d6e:	4798      	blx	r3
 8009d70:	0003      	movs	r3, r0
 8009d72:	e000      	b.n	8009d76 <WriteRegister+0x36>
  }
  return false;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	0018      	movs	r0, r3
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	b003      	add	sp, #12
 8009d7c:	bd90      	pop	{r4, r7, pc}
 8009d7e:	46c0      	nop			@ (mov r8, r8)
 8009d80:	20000c04 	.word	0x20000c04

08009d84 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	000a      	movs	r2, r1
 8009d8e:	1cfb      	adds	r3, r7, #3
 8009d90:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8009d92:	230f      	movs	r3, #15
 8009d94:	18fb      	adds	r3, r7, r3
 8009d96:	22ff      	movs	r2, #255	@ 0xff
 8009d98:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009d9a:	230e      	movs	r3, #14
 8009d9c:	18fb      	adds	r3, r7, r3
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	e037      	b.n	8009e14 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009da4:	230e      	movs	r3, #14
 8009da6:	18fb      	adds	r3, r7, r3
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	18d3      	adds	r3, r2, r3
 8009dae:	7819      	ldrb	r1, [r3, #0]
 8009db0:	220f      	movs	r2, #15
 8009db2:	18bb      	adds	r3, r7, r2
 8009db4:	18ba      	adds	r2, r7, r2
 8009db6:	7812      	ldrb	r2, [r2, #0]
 8009db8:	404a      	eors	r2, r1
 8009dba:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009dbc:	230d      	movs	r3, #13
 8009dbe:	18fb      	adds	r3, r7, r3
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	701a      	strb	r2, [r3, #0]
 8009dc4:	e01b      	b.n	8009dfe <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8009dc6:	210f      	movs	r1, #15
 8009dc8:	187b      	adds	r3, r7, r1
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	b25b      	sxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	da09      	bge.n	8009de6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8009dd2:	187b      	adds	r3, r7, r1
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	2231      	movs	r2, #49	@ 0x31
 8009ddc:	4053      	eors	r3, r2
 8009dde:	b25a      	sxtb	r2, r3
 8009de0:	187b      	adds	r3, r7, r1
 8009de2:	701a      	strb	r2, [r3, #0]
 8009de4:	e005      	b.n	8009df2 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009de6:	230f      	movs	r3, #15
 8009de8:	18fa      	adds	r2, r7, r3
 8009dea:	18fb      	adds	r3, r7, r3
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	18db      	adds	r3, r3, r3
 8009df0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009df2:	210d      	movs	r1, #13
 8009df4:	187b      	adds	r3, r7, r1
 8009df6:	781a      	ldrb	r2, [r3, #0]
 8009df8:	187b      	adds	r3, r7, r1
 8009dfa:	3201      	adds	r2, #1
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	230d      	movs	r3, #13
 8009e00:	18fb      	adds	r3, r7, r3
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b07      	cmp	r3, #7
 8009e06:	d9de      	bls.n	8009dc6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009e08:	210e      	movs	r1, #14
 8009e0a:	187b      	adds	r3, r7, r1
 8009e0c:	781a      	ldrb	r2, [r3, #0]
 8009e0e:	187b      	adds	r3, r7, r1
 8009e10:	3201      	adds	r2, #1
 8009e12:	701a      	strb	r2, [r3, #0]
 8009e14:	230e      	movs	r3, #14
 8009e16:	18fa      	adds	r2, r7, r3
 8009e18:	1cfb      	adds	r3, r7, #3
 8009e1a:	7812      	ldrb	r2, [r2, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d3c0      	bcc.n	8009da4 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009e22:	230f      	movs	r3, #15
 8009e24:	18fb      	adds	r3, r7, r3
 8009e26:	781b      	ldrb	r3, [r3, #0]
}
 8009e28:	0018      	movs	r0, r3
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	b004      	add	sp, #16
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8009e38:	f009 fc44 	bl	80136c4 <HAL_GetTick>
 8009e3c:	0002      	movs	r2, r0
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	18d2      	adds	r2, r2, r3
 8009e42:	4b03      	ldr	r3, [pc, #12]	@ (8009e50 <setAHT20TimeStamp+0x20>)
 8009e44:	601a      	str	r2, [r3, #0]
}
 8009e46:	46c0      	nop			@ (mov r8, r8)
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b002      	add	sp, #8
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	46c0      	nop			@ (mov r8, r8)
 8009e50:	20000bfc 	.word	0x20000bfc

08009e54 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 8009e60:	4b06      	ldr	r3, [pc, #24]	@ (8009e7c <AHT_Init+0x28>)
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 8009e66:	4b06      	ldr	r3, [pc, #24]	@ (8009e80 <AHT_Init+0x2c>)
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8009e6c:	4b05      	ldr	r3, [pc, #20]	@ (8009e84 <AHT_Init+0x30>)
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	601a      	str	r2, [r3, #0]
}
 8009e72:	46c0      	nop			@ (mov r8, r8)
 8009e74:	46bd      	mov	sp, r7
 8009e76:	b004      	add	sp, #16
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	46c0      	nop			@ (mov r8, r8)
 8009e7c:	20000c08 	.word	0x20000c08
 8009e80:	20000c00 	.word	0x20000c00
 8009e84:	20000c04 	.word	0x20000c04

08009e88 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af02      	add	r7, sp, #8
 8009e8e:	0002      	movs	r2, r0
 8009e90:	1dfb      	adds	r3, r7, #7
 8009e92:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 8009e94:	4b18      	ldr	r3, [pc, #96]	@ (8009ef8 <AHT20_register_reset+0x70>)
 8009e96:	1dfa      	adds	r2, r7, #7
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 8009e9c:	4b16      	ldr	r3, [pc, #88]	@ (8009ef8 <AHT20_register_reset+0x70>)
 8009e9e:	2203      	movs	r2, #3
 8009ea0:	0019      	movs	r1, r3
 8009ea2:	2038      	movs	r0, #56	@ 0x38
 8009ea4:	f7ff ff4c 	bl	8009d40 <WriteRegister>
  HAL_Delay(15);
 8009ea8:	200f      	movs	r0, #15
 8009eaa:	f009 fc15 	bl	80136d8 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8009eae:	4b13      	ldr	r3, [pc, #76]	@ (8009efc <AHT20_register_reset+0x74>)
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	2038      	movs	r0, #56	@ 0x38
 8009eb6:	f7ff ff21 	bl	8009cfc <ReadRegister>
  HAL_Delay(15);
 8009eba:	200f      	movs	r0, #15
 8009ebc:	f009 fc0c 	bl	80136d8 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 8009ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8009efc <AHT20_register_reset+0x74>)
 8009ec2:	22b0      	movs	r2, #176	@ 0xb0
 8009ec4:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8009efc <AHT20_register_reset+0x74>)
 8009ec8:	789b      	ldrb	r3, [r3, #2]
 8009eca:	0018      	movs	r0, r3
 8009ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8009efc <AHT20_register_reset+0x74>)
 8009ece:	78db      	ldrb	r3, [r3, #3]
 8009ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8009f00 <AHT20_register_reset+0x78>)
 8009ed2:	490c      	ldr	r1, [pc, #48]	@ (8009f04 <AHT20_register_reset+0x7c>)
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	0003      	movs	r3, r0
 8009ed8:	2003      	movs	r0, #3
 8009eda:	f008 feb5 	bl	8012c48 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8009ede:	4b07      	ldr	r3, [pc, #28]	@ (8009efc <AHT20_register_reset+0x74>)
 8009ee0:	2203      	movs	r2, #3
 8009ee2:	0019      	movs	r1, r3
 8009ee4:	2038      	movs	r0, #56	@ 0x38
 8009ee6:	f7ff ff2b 	bl	8009d40 <WriteRegister>
  HAL_Delay(15);
 8009eea:	200f      	movs	r0, #15
 8009eec:	f009 fbf4 	bl	80136d8 <HAL_Delay>
}
 8009ef0:	46c0      	nop			@ (mov r8, r8)
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b002      	add	sp, #8
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20000090 	.word	0x20000090
 8009efc:	20000c0c 	.word	0x20000c0c
 8009f00:	0802b230 	.word	0x0802b230
 8009f04:	0802b280 	.word	0x0802b280

08009f08 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 8009f0c:	201b      	movs	r0, #27
 8009f0e:	f7ff ffbb 	bl	8009e88 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 8009f12:	201c      	movs	r0, #28
 8009f14:	f7ff ffb8 	bl	8009e88 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 8009f18:	201e      	movs	r0, #30
 8009f1a:	f7ff ffb5 	bl	8009e88 <AHT20_register_reset>
}
 8009f1e:	46c0      	nop			@ (mov r8, r8)
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8009f28:	4b0c      	ldr	r3, [pc, #48]	@ (8009f5c <AHT20_read_status+0x38>)
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	0019      	movs	r1, r3
 8009f2e:	2038      	movs	r0, #56	@ 0x38
 8009f30:	f7ff ff06 	bl	8009d40 <WriteRegister>
  HAL_Delay(10);
 8009f34:	200a      	movs	r0, #10
 8009f36:	f009 fbcf 	bl	80136d8 <HAL_Delay>
  airtemphumraw[0] = 0;
 8009f3a:	4b09      	ldr	r3, [pc, #36]	@ (8009f60 <AHT20_read_status+0x3c>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8009f40:	4b07      	ldr	r3, [pc, #28]	@ (8009f60 <AHT20_read_status+0x3c>)
 8009f42:	2201      	movs	r2, #1
 8009f44:	0019      	movs	r1, r3
 8009f46:	2038      	movs	r0, #56	@ 0x38
 8009f48:	f7ff fed8 	bl	8009cfc <ReadRegister>
  HAL_Delay(10);
 8009f4c:	200a      	movs	r0, #10
 8009f4e:	f009 fbc3 	bl	80136d8 <HAL_Delay>
  return airtemphumraw[0];
 8009f52:	4b03      	ldr	r3, [pc, #12]	@ (8009f60 <AHT20_read_status+0x3c>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
}
 8009f56:	0018      	movs	r0, r3
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	2000008c 	.word	0x2000008c
 8009f60:	20000c0c 	.word	0x20000c0c

08009f64 <AHT20_init>:

bool AHT20_init(void) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 8009f6a:	f009 fbab 	bl	80136c4 <HAL_GetTick>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b77      	cmp	r3, #119	@ 0x77
 8009f76:	d805      	bhi.n	8009f84 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2278      	movs	r2, #120	@ 0x78
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	0018      	movs	r0, r3
 8009f80:	f009 fbaa 	bl	80136d8 <HAL_Delay>
  }
  AHT20_read_status();
 8009f84:	f7ff ffce 	bl	8009f24 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 8009f88:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc4 <AHT20_init+0x60>)
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009fc8 <AHT20_init+0x64>)
 8009f8e:	490f      	ldr	r1, [pc, #60]	@ (8009fcc <AHT20_init+0x68>)
 8009f90:	2003      	movs	r0, #3
 8009f92:	f008 fe59 	bl	8012c48 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 8009f96:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc4 <AHT20_init+0x60>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	001a      	movs	r2, r3
 8009f9c:	2318      	movs	r3, #24
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b18      	cmp	r3, #24
 8009fa2:	d00a      	beq.n	8009fba <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8009fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd0 <AHT20_init+0x6c>)
 8009fa6:	2203      	movs	r2, #3
 8009fa8:	0019      	movs	r1, r3
 8009faa:	2038      	movs	r0, #56	@ 0x38
 8009fac:	f7ff fec8 	bl	8009d40 <WriteRegister>
    HAL_Delay(10);
 8009fb0:	200a      	movs	r0, #10
 8009fb2:	f009 fb91 	bl	80136d8 <HAL_Delay>
    AHT20_Start_Init();
 8009fb6:	f7ff ffa7 	bl	8009f08 <AHT20_Start_Init>
  }
  return true;
 8009fba:	2301      	movs	r3, #1
}
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	b002      	add	sp, #8
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20000c0c 	.word	0x20000c0c
 8009fc8:	0802b284 	.word	0x0802b284
 8009fcc:	0802b280 	.word	0x0802b280
 8009fd0:	20000084 	.word	0x20000084

08009fd4 <AHT20_calibrate>:


bool AHT20_calibrate() {
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8009fda:	1dfc      	adds	r4, r7, #7
 8009fdc:	4b10      	ldr	r3, [pc, #64]	@ (800a020 <AHT20_calibrate+0x4c>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	0019      	movs	r1, r3
 8009fe2:	2038      	movs	r0, #56	@ 0x38
 8009fe4:	f7ff feac 	bl	8009d40 <WriteRegister>
 8009fe8:	0003      	movs	r3, r0
 8009fea:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8009fec:	1dfb      	adds	r3, r7, #7
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	4053      	eors	r3, r2
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d005      	beq.n	800a006 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 8009ffa:	4a0a      	ldr	r2, [pc, #40]	@ (800a024 <AHT20_calibrate+0x50>)
 8009ffc:	4b0a      	ldr	r3, [pc, #40]	@ (800a028 <AHT20_calibrate+0x54>)
 8009ffe:	0019      	movs	r1, r3
 800a000:	2001      	movs	r0, #1
 800a002:	f008 fe21 	bl	8012c48 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800a006:	f009 fb5d 	bl	80136c4 <HAL_GetTick>
 800a00a:	0003      	movs	r3, r0
 800a00c:	3332      	adds	r3, #50	@ 0x32
 800a00e:	001a      	movs	r2, r3
 800a010:	4b06      	ldr	r3, [pc, #24]	@ (800a02c <AHT20_calibrate+0x58>)
 800a012:	601a      	str	r2, [r3, #0]
  return response;
 800a014:	1dfb      	adds	r3, r7, #7
 800a016:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800a018:	0018      	movs	r0, r3
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b003      	add	sp, #12
 800a01e:	bd90      	pop	{r4, r7, pc}
 800a020:	2000008c 	.word	0x2000008c
 800a024:	0802b2ac 	.word	0x0802b2ac
 800a028:	0802b2e4 	.word	0x0802b2e4
 800a02c:	20000bfc 	.word	0x20000bfc

0800a030 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800a034:	4a0a      	ldr	r2, [pc, #40]	@ (800a060 <AHT20_DeviceConnected+0x30>)
 800a036:	4b0b      	ldr	r3, [pc, #44]	@ (800a064 <AHT20_DeviceConnected+0x34>)
 800a038:	0019      	movs	r1, r3
 800a03a:	2003      	movs	r0, #3
 800a03c:	f008 fe04 	bl	8012c48 <CreateLine>
   AHT20_init();
 800a040:	f7ff ff90 	bl	8009f64 <AHT20_init>
   HAL_Delay(10);
 800a044:	200a      	movs	r0, #10
 800a046:	f009 fb47 	bl	80136d8 <HAL_Delay>
   AHT20_calibrate();
 800a04a:	f7ff ffc3 	bl	8009fd4 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800a04e:	f7ff ff69 	bl	8009f24 <AHT20_read_status>
 800a052:	0003      	movs	r3, r0
 800a054:	1e5a      	subs	r2, r3, #1
 800a056:	4193      	sbcs	r3, r2
 800a058:	b2db      	uxtb	r3, r3
 }
 800a05a:	0018      	movs	r0, r3
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	0802b2e8 	.word	0x0802b2e8
 800a064:	0802b280 	.word	0x0802b280

0800a068 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800a068:	b590      	push	{r4, r7, lr}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800a06e:	1dfc      	adds	r4, r7, #7
 800a070:	4b10      	ldr	r3, [pc, #64]	@ (800a0b4 <AHT20_StartMeasurement+0x4c>)
 800a072:	2203      	movs	r2, #3
 800a074:	0019      	movs	r1, r3
 800a076:	2038      	movs	r0, #56	@ 0x38
 800a078:	f7ff fe62 	bl	8009d40 <WriteRegister>
 800a07c:	0003      	movs	r3, r0
 800a07e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800a080:	1dfb      	adds	r3, r7, #7
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	2201      	movs	r2, #1
 800a086:	4053      	eors	r3, r2
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d005      	beq.n	800a09a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800a08e:	4a0a      	ldr	r2, [pc, #40]	@ (800a0b8 <AHT20_StartMeasurement+0x50>)
 800a090:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <AHT20_StartMeasurement+0x54>)
 800a092:	0019      	movs	r1, r3
 800a094:	2001      	movs	r0, #1
 800a096:	f008 fdd7 	bl	8012c48 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800a09a:	f009 fb13 	bl	80136c4 <HAL_GetTick>
 800a09e:	0003      	movs	r3, r0
 800a0a0:	33fa      	adds	r3, #250	@ 0xfa
 800a0a2:	001a      	movs	r2, r3
 800a0a4:	4b06      	ldr	r3, [pc, #24]	@ (800a0c0 <AHT20_StartMeasurement+0x58>)
 800a0a6:	601a      	str	r2, [r3, #0]
  return response;
 800a0a8:	1dfb      	adds	r3, r7, #7
 800a0aa:	781b      	ldrb	r3, [r3, #0]
}
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	b003      	add	sp, #12
 800a0b2:	bd90      	pop	{r4, r7, pc}
 800a0b4:	20000088 	.word	0x20000088
 800a0b8:	0802b300 	.word	0x0802b300
 800a0bc:	0802b2e4 	.word	0x0802b2e4
 800a0c0:	20000bfc 	.word	0x20000bfc

0800a0c4 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800a0c4:	b590      	push	{r4, r7, lr}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800a0ca:	f009 fafb 	bl	80136c4 <HAL_GetTick>
 800a0ce:	0003      	movs	r3, r0
 800a0d0:	22fa      	movs	r2, #250	@ 0xfa
 800a0d2:	0092      	lsls	r2, r2, #2
 800a0d4:	189a      	adds	r2, r3, r2
 800a0d6:	4b2c      	ldr	r3, [pc, #176]	@ (800a188 <AHT20_GetMeasurementValues+0xc4>)
 800a0d8:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a0da:	e01f      	b.n	800a11c <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800a0dc:	4a2b      	ldr	r2, [pc, #172]	@ (800a18c <AHT20_GetMeasurementValues+0xc8>)
 800a0de:	4b2c      	ldr	r3, [pc, #176]	@ (800a190 <AHT20_GetMeasurementValues+0xcc>)
 800a0e0:	0019      	movs	r1, r3
 800a0e2:	2002      	movs	r0, #2
 800a0e4:	f008 fdb0 	bl	8012c48 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800a0e8:	4b27      	ldr	r3, [pc, #156]	@ (800a188 <AHT20_GetMeasurementValues+0xc4>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	0018      	movs	r0, r3
 800a0ee:	f008 fd55 	bl	8012b9c <TimestampIsReached>
 800a0f2:	1e03      	subs	r3, r0, #0
 800a0f4:	d00f      	beq.n	800a116 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800a0f6:	4a27      	ldr	r2, [pc, #156]	@ (800a194 <AHT20_GetMeasurementValues+0xd0>)
 800a0f8:	4b27      	ldr	r3, [pc, #156]	@ (800a198 <AHT20_GetMeasurementValues+0xd4>)
 800a0fa:	0019      	movs	r1, r3
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	f008 fda3 	bl	8012c48 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800a102:	f009 fadf 	bl	80136c4 <HAL_GetTick>
 800a106:	0003      	movs	r3, r0
 800a108:	22fa      	movs	r2, #250	@ 0xfa
 800a10a:	00d2      	lsls	r2, r2, #3
 800a10c:	189a      	adds	r2, r3, r2
 800a10e:	4b1e      	ldr	r3, [pc, #120]	@ (800a188 <AHT20_GetMeasurementValues+0xc4>)
 800a110:	601a      	str	r2, [r3, #0]
      return false;
 800a112:	2300      	movs	r3, #0
 800a114:	e034      	b.n	800a180 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800a116:	200a      	movs	r0, #10
 800a118:	f009 fade 	bl	80136d8 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a11c:	f7ff ff02 	bl	8009f24 <AHT20_read_status>
 800a120:	0003      	movs	r3, r0
 800a122:	001a      	movs	r2, r3
 800a124:	2380      	movs	r3, #128	@ 0x80
 800a126:	4013      	ands	r3, r2
 800a128:	2b80      	cmp	r3, #128	@ 0x80
 800a12a:	d0d7      	beq.n	800a0dc <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800a12c:	200a      	movs	r0, #10
 800a12e:	f009 fad3 	bl	80136d8 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800a132:	1dfb      	adds	r3, r7, #7
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	e009      	b.n	800a14e <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800a13a:	1dfb      	adds	r3, r7, #7
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	4a17      	ldr	r2, [pc, #92]	@ (800a19c <AHT20_GetMeasurementValues+0xd8>)
 800a140:	2100      	movs	r1, #0
 800a142:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800a144:	1dfb      	adds	r3, r7, #7
 800a146:	781a      	ldrb	r2, [r3, #0]
 800a148:	1dfb      	adds	r3, r7, #7
 800a14a:	3201      	adds	r2, #1
 800a14c:	701a      	strb	r2, [r3, #0]
 800a14e:	1dfb      	adds	r3, r7, #7
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	2b06      	cmp	r3, #6
 800a154:	d9f1      	bls.n	800a13a <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800a156:	1dbc      	adds	r4, r7, #6
 800a158:	4b10      	ldr	r3, [pc, #64]	@ (800a19c <AHT20_GetMeasurementValues+0xd8>)
 800a15a:	2207      	movs	r2, #7
 800a15c:	0019      	movs	r1, r3
 800a15e:	2038      	movs	r0, #56	@ 0x38
 800a160:	f7ff fdaa 	bl	8009cb8 <ReadDirRegister>
 800a164:	0003      	movs	r3, r0
 800a166:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800a168:	200a      	movs	r0, #10
 800a16a:	f009 fab5 	bl	80136d8 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800a16e:	f009 faa9 	bl	80136c4 <HAL_GetTick>
 800a172:	0003      	movs	r3, r0
 800a174:	3364      	adds	r3, #100	@ 0x64
 800a176:	001a      	movs	r2, r3
 800a178:	4b03      	ldr	r3, [pc, #12]	@ (800a188 <AHT20_GetMeasurementValues+0xc4>)
 800a17a:	601a      	str	r2, [r3, #0]
  return response;
 800a17c:	1dbb      	adds	r3, r7, #6
 800a17e:	781b      	ldrb	r3, [r3, #0]
}
 800a180:	0018      	movs	r0, r3
 800a182:	46bd      	mov	sp, r7
 800a184:	b003      	add	sp, #12
 800a186:	bd90      	pop	{r4, r7, pc}
 800a188:	20000bfc 	.word	0x20000bfc
 800a18c:	0802b32c 	.word	0x0802b32c
 800a190:	0802b354 	.word	0x0802b354
 800a194:	0802b358 	.word	0x0802b358
 800a198:	0802b2e4 	.word	0x0802b2e4
 800a19c:	20000c0c 	.word	0x20000c0c

0800a1a0 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800a1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1a2:	46c6      	mov	lr, r8
 800a1a4:	b500      	push	{lr}
 800a1a6:	b08a      	sub	sp, #40	@ 0x28
 800a1a8:	af06      	add	r7, sp, #24
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800a1ae:	4b5a      	ldr	r3, [pc, #360]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1b0:	799c      	ldrb	r4, [r3, #6]
 800a1b2:	4b59      	ldr	r3, [pc, #356]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1b4:	2106      	movs	r1, #6
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7ff fde4 	bl	8009d84 <CalculateCRC>
 800a1bc:	0003      	movs	r3, r0
 800a1be:	429c      	cmp	r4, r3
 800a1c0:	d044      	beq.n	800a24c <AHT20_Calculate+0xac>
 800a1c2:	4b55      	ldr	r3, [pc, #340]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1c4:	799b      	ldrb	r3, [r3, #6]
 800a1c6:	2bff      	cmp	r3, #255	@ 0xff
 800a1c8:	d040      	beq.n	800a24c <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800a1ca:	4b53      	ldr	r3, [pc, #332]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	4698      	mov	r8, r3
 800a1d0:	4b51      	ldr	r3, [pc, #324]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1d2:	785b      	ldrb	r3, [r3, #1]
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	4b50      	ldr	r3, [pc, #320]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1d8:	789b      	ldrb	r3, [r3, #2]
 800a1da:	001c      	movs	r4, r3
 800a1dc:	4b4e      	ldr	r3, [pc, #312]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1de:	78db      	ldrb	r3, [r3, #3]
 800a1e0:	001d      	movs	r5, r3
 800a1e2:	4b4d      	ldr	r3, [pc, #308]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1e4:	791b      	ldrb	r3, [r3, #4]
 800a1e6:	001e      	movs	r6, r3
 800a1e8:	4b4b      	ldr	r3, [pc, #300]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1ea:	795b      	ldrb	r3, [r3, #5]
 800a1ec:	469c      	mov	ip, r3
 800a1ee:	4b4a      	ldr	r3, [pc, #296]	@ (800a318 <AHT20_Calculate+0x178>)
 800a1f0:	799b      	ldrb	r3, [r3, #6]
 800a1f2:	4a4a      	ldr	r2, [pc, #296]	@ (800a31c <AHT20_Calculate+0x17c>)
 800a1f4:	494a      	ldr	r1, [pc, #296]	@ (800a320 <AHT20_Calculate+0x180>)
 800a1f6:	9305      	str	r3, [sp, #20]
 800a1f8:	4663      	mov	r3, ip
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	9603      	str	r6, [sp, #12]
 800a1fe:	9502      	str	r5, [sp, #8]
 800a200:	9401      	str	r4, [sp, #4]
 800a202:	9000      	str	r0, [sp, #0]
 800a204:	4643      	mov	r3, r8
 800a206:	2003      	movs	r0, #3
 800a208:	f008 fd1e 	bl	8012c48 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800a20c:	4b42      	ldr	r3, [pc, #264]	@ (800a318 <AHT20_Calculate+0x178>)
 800a20e:	799b      	ldrb	r3, [r3, #6]
 800a210:	001c      	movs	r4, r3
 800a212:	4b41      	ldr	r3, [pc, #260]	@ (800a318 <AHT20_Calculate+0x178>)
 800a214:	2106      	movs	r1, #6
 800a216:	0018      	movs	r0, r3
 800a218:	f7ff fdb4 	bl	8009d84 <CalculateCRC>
 800a21c:	0003      	movs	r3, r0
 800a21e:	4a41      	ldr	r2, [pc, #260]	@ (800a324 <AHT20_Calculate+0x184>)
 800a220:	4941      	ldr	r1, [pc, #260]	@ (800a328 <AHT20_Calculate+0x188>)
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	0023      	movs	r3, r4
 800a226:	2001      	movs	r0, #1
 800a228:	f008 fd0e 	bl	8012c48 <CreateLine>
    *airtemp = 0.0;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800a238:	f009 fa44 	bl	80136c4 <HAL_GetTick>
 800a23c:	0003      	movs	r3, r0
 800a23e:	22fa      	movs	r2, #250	@ 0xfa
 800a240:	00d2      	lsls	r2, r2, #3
 800a242:	189a      	adds	r2, r3, r2
 800a244:	4b39      	ldr	r3, [pc, #228]	@ (800a32c <AHT20_Calculate+0x18c>)
 800a246:	601a      	str	r2, [r3, #0]
    return false;
 800a248:	2300      	movs	r3, #0
 800a24a:	e05f      	b.n	800a30c <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800a24c:	4b38      	ldr	r3, [pc, #224]	@ (800a330 <AHT20_Calculate+0x190>)
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800a252:	4b31      	ldr	r3, [pc, #196]	@ (800a318 <AHT20_Calculate+0x178>)
 800a254:	78db      	ldrb	r3, [r3, #3]
 800a256:	041a      	lsls	r2, r3, #16
 800a258:	23f0      	movs	r3, #240	@ 0xf0
 800a25a:	031b      	lsls	r3, r3, #12
 800a25c:	401a      	ands	r2, r3
 800a25e:	4b2e      	ldr	r3, [pc, #184]	@ (800a318 <AHT20_Calculate+0x178>)
 800a260:	791b      	ldrb	r3, [r3, #4]
 800a262:	021b      	lsls	r3, r3, #8
 800a264:	18d3      	adds	r3, r2, r3
 800a266:	4a2c      	ldr	r2, [pc, #176]	@ (800a318 <AHT20_Calculate+0x178>)
 800a268:	7952      	ldrb	r2, [r2, #5]
 800a26a:	189b      	adds	r3, r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7f7 f9fa 	bl	8001668 <__aeabi_ui2f>
 800a274:	1c03      	adds	r3, r0, #0
 800a276:	2193      	movs	r1, #147	@ 0x93
 800a278:	05c9      	lsls	r1, r1, #23
 800a27a:	1c18      	adds	r0, r3, #0
 800a27c:	f7f6 fcaa 	bl	8000bd4 <__aeabi_fdiv>
 800a280:	1c03      	adds	r3, r0, #0
 800a282:	492c      	ldr	r1, [pc, #176]	@ (800a334 <AHT20_Calculate+0x194>)
 800a284:	1c18      	adds	r0, r3, #0
 800a286:	f7f6 fe8b 	bl	8000fa0 <__aeabi_fmul>
 800a28a:	1c03      	adds	r3, r0, #0
 800a28c:	492a      	ldr	r1, [pc, #168]	@ (800a338 <AHT20_Calculate+0x198>)
 800a28e:	1c18      	adds	r0, r3, #0
 800a290:	f7f6 ffc4 	bl	800121c <__aeabi_fsub>
 800a294:	1c03      	adds	r3, r0, #0
 800a296:	1c1a      	adds	r2, r3, #0
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800a29c:	4b1e      	ldr	r3, [pc, #120]	@ (800a318 <AHT20_Calculate+0x178>)
 800a29e:	785b      	ldrb	r3, [r3, #1]
 800a2a0:	031a      	lsls	r2, r3, #12
 800a2a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a318 <AHT20_Calculate+0x178>)
 800a2a4:	789b      	ldrb	r3, [r3, #2]
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	18d3      	adds	r3, r2, r3
 800a2aa:	4a1b      	ldr	r2, [pc, #108]	@ (800a318 <AHT20_Calculate+0x178>)
 800a2ac:	78d2      	ldrb	r2, [r2, #3]
 800a2ae:	0912      	lsrs	r2, r2, #4
 800a2b0:	b2d2      	uxtb	r2, r2
 800a2b2:	189b      	adds	r3, r3, r2
 800a2b4:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800a2b6:	68b8      	ldr	r0, [r7, #8]
 800a2b8:	f7f7 f9d6 	bl	8001668 <__aeabi_ui2f>
 800a2bc:	1c03      	adds	r3, r0, #0
 800a2be:	2193      	movs	r1, #147	@ 0x93
 800a2c0:	05c9      	lsls	r1, r1, #23
 800a2c2:	1c18      	adds	r0, r3, #0
 800a2c4:	f7f6 fc86 	bl	8000bd4 <__aeabi_fdiv>
 800a2c8:	1c03      	adds	r3, r0, #0
 800a2ca:	491c      	ldr	r1, [pc, #112]	@ (800a33c <AHT20_Calculate+0x19c>)
 800a2cc:	1c18      	adds	r0, r3, #0
 800a2ce:	f7f6 fe67 	bl	8000fa0 <__aeabi_fmul>
 800a2d2:	1c03      	adds	r3, r0, #0
 800a2d4:	1c1a      	adds	r2, r3, #0
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	1c18      	adds	r0, r3, #0
 800a2e0:	f7f9 f8c0 	bl	8003464 <__aeabi_f2d>
 800a2e4:	0004      	movs	r4, r0
 800a2e6:	000d      	movs	r5, r1
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	1c18      	adds	r0, r3, #0
 800a2ee:	f7f9 f8b9 	bl	8003464 <__aeabi_f2d>
 800a2f2:	0002      	movs	r2, r0
 800a2f4:	000b      	movs	r3, r1
 800a2f6:	4812      	ldr	r0, [pc, #72]	@ (800a340 <AHT20_Calculate+0x1a0>)
 800a2f8:	4909      	ldr	r1, [pc, #36]	@ (800a320 <AHT20_Calculate+0x180>)
 800a2fa:	9202      	str	r2, [sp, #8]
 800a2fc:	9303      	str	r3, [sp, #12]
 800a2fe:	9400      	str	r4, [sp, #0]
 800a300:	9501      	str	r5, [sp, #4]
 800a302:	0002      	movs	r2, r0
 800a304:	2003      	movs	r0, #3
 800a306:	f008 fc9f 	bl	8012c48 <CreateLine>
  return true;
 800a30a:	2301      	movs	r3, #1
}
 800a30c:	0018      	movs	r0, r3
 800a30e:	46bd      	mov	sp, r7
 800a310:	b004      	add	sp, #16
 800a312:	bc80      	pop	{r7}
 800a314:	46b8      	mov	r8, r7
 800a316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a318:	20000c0c 	.word	0x20000c0c
 800a31c:	0802b37c 	.word	0x0802b37c
 800a320:	0802b280 	.word	0x0802b280
 800a324:	0802b3fc 	.word	0x0802b3fc
 800a328:	0802b2e4 	.word	0x0802b2e4
 800a32c:	20000bfc 	.word	0x20000bfc
 800a330:	20000c13 	.word	0x20000c13
 800a334:	43480000 	.word	0x43480000
 800a338:	42480000 	.word	0x42480000
 800a33c:	42c80000 	.word	0x42c80000
 800a340:	0802b424 	.word	0x0802b424

0800a344 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800a34a:	4b54      	ldr	r3, [pc, #336]	@ (800a49c <AHT_Upkeep+0x158>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	0018      	movs	r0, r3
 800a350:	f008 fc24 	bl	8012b9c <TimestampIsReached>
 800a354:	0003      	movs	r3, r0
 800a356:	001a      	movs	r2, r3
 800a358:	2301      	movs	r3, #1
 800a35a:	4053      	eors	r3, r2
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <AHT_Upkeep+0x24>
    return AHTState;
 800a362:	4b4f      	ldr	r3, [pc, #316]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	e094      	b.n	800a492 <AHT_Upkeep+0x14e>
  }
  switch(AHTState) {
 800a368:	4b4d      	ldr	r3, [pc, #308]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	d86a      	bhi.n	800a446 <AHT_Upkeep+0x102>
 800a370:	009a      	lsls	r2, r3, #2
 800a372:	4b4c      	ldr	r3, [pc, #304]	@ (800a4a4 <AHT_Upkeep+0x160>)
 800a374:	18d3      	adds	r3, r2, r3
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800a37a:	4a4b      	ldr	r2, [pc, #300]	@ (800a4a8 <AHT_Upkeep+0x164>)
 800a37c:	4b4b      	ldr	r3, [pc, #300]	@ (800a4ac <AHT_Upkeep+0x168>)
 800a37e:	0019      	movs	r1, r3
 800a380:	2003      	movs	r0, #3
 800a382:	f008 fc61 	bl	8012c48 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800a386:	f009 f99d 	bl	80136c4 <HAL_GetTick>
 800a38a:	0003      	movs	r3, r0
 800a38c:	4a48      	ldr	r2, [pc, #288]	@ (800a4b0 <AHT_Upkeep+0x16c>)
 800a38e:	189a      	adds	r2, r3, r2
 800a390:	4b42      	ldr	r3, [pc, #264]	@ (800a49c <AHT_Upkeep+0x158>)
 800a392:	601a      	str	r2, [r3, #0]
    break;
 800a394:	e07b      	b.n	800a48e <AHT_Upkeep+0x14a>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800a396:	f002 fd21 	bl	800cddc <getSensorLock>
 800a39a:	1e03      	subs	r3, r0, #0
 800a39c:	d000      	beq.n	800a3a0 <AHT_Upkeep+0x5c>
 800a39e:	e071      	b.n	800a484 <AHT_Upkeep+0x140>
      break;
    }
    setSensorLock(AHT20);
 800a3a0:	2002      	movs	r0, #2
 800a3a2:	f002 fd07 	bl	800cdb4 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800a3a6:	f7ff fe5f 	bl	800a068 <AHT20_StartMeasurement>
 800a3aa:	0003      	movs	r3, r0
 800a3ac:	001a      	movs	r2, r3
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	4053      	eors	r3, r2
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <AHT_Upkeep+0x7c>
      AHTState = AHT20_ERROR;
 800a3b8:	4b39      	ldr	r3, [pc, #228]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a3ba:	22ff      	movs	r2, #255	@ 0xff
 800a3bc:	701a      	strb	r2, [r3, #0]
 800a3be:	e002      	b.n	800a3c6 <AHT_Upkeep+0x82>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800a3c0:	4b37      	ldr	r3, [pc, #220]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800a3c6:	200a      	movs	r0, #10
 800a3c8:	f009 f986 	bl	80136d8 <HAL_Delay>
    break;
 800a3cc:	e05f      	b.n	800a48e <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800a3ce:	f7ff fe79 	bl	800a0c4 <AHT20_GetMeasurementValues>
 800a3d2:	1e03      	subs	r3, r0, #0
 800a3d4:	d058      	beq.n	800a488 <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800a3d6:	200a      	movs	r0, #10
 800a3d8:	f009 f97e 	bl	80136d8 <HAL_Delay>
      setSensorLock(FREE);
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f002 fce9 	bl	800cdb4 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800a3e2:	4b2f      	ldr	r3, [pc, #188]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a3e4:	2203      	movs	r2, #3
 800a3e6:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800a3e8:	e04e      	b.n	800a488 <AHT_Upkeep+0x144>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800a3ea:	003a      	movs	r2, r7
 800a3ec:	1d3b      	adds	r3, r7, #4
 800a3ee:	0011      	movs	r1, r2
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f7ff fed5 	bl	800a1a0 <AHT20_Calculate>
 800a3f6:	0003      	movs	r3, r0
 800a3f8:	001a      	movs	r2, r3
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4053      	eors	r3, r2
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <AHT_Upkeep+0xcc>
      AHTState = AHT20_ERROR;
 800a404:	4b26      	ldr	r3, [pc, #152]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a406:	22ff      	movs	r2, #255	@ 0xff
 800a408:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800a40a:	4b25      	ldr	r3, [pc, #148]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	e040      	b.n	800a492 <AHT_Upkeep+0x14e>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	1c11      	adds	r1, r2, #0
 800a416:	1c18      	adds	r0, r3, #0
 800a418:	f7fa f91c 	bl	8004654 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	1c11      	adds	r1, r2, #0
 800a422:	1c18      	adds	r0, r3, #0
 800a424:	f7f9 fdcc 	bl	8003fc0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800a428:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a42a:	2205      	movs	r2, #5
 800a42c:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800a42e:	f009 f949 	bl	80136c4 <HAL_GetTick>
 800a432:	0003      	movs	r3, r0
 800a434:	4a1f      	ldr	r2, [pc, #124]	@ (800a4b4 <AHT_Upkeep+0x170>)
 800a436:	189a      	adds	r2, r3, r2
 800a438:	4b18      	ldr	r3, [pc, #96]	@ (800a49c <AHT_Upkeep+0x158>)
 800a43a:	601a      	str	r2, [r3, #0]
    break;
 800a43c:	e027      	b.n	800a48e <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a43e:	4b18      	ldr	r3, [pc, #96]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a440:	2201      	movs	r2, #1
 800a442:	701a      	strb	r2, [r3, #0]
  break;
 800a444:	e023      	b.n	800a48e <AHT_Upkeep+0x14a>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a446:	4b16      	ldr	r3, [pc, #88]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a448:	2201      	movs	r2, #1
 800a44a:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800a44c:	f002 fcc6 	bl	800cddc <getSensorLock>
 800a450:	0003      	movs	r3, r0
 800a452:	2b02      	cmp	r3, #2
 800a454:	d102      	bne.n	800a45c <AHT_Upkeep+0x118>
      setSensorLock(FREE);
 800a456:	2000      	movs	r0, #0
 800a458:	f002 fcac 	bl	800cdb4 <setSensorLock>
    }
    AHTerrors++;
 800a45c:	4b16      	ldr	r3, [pc, #88]	@ (800a4b8 <AHT_Upkeep+0x174>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	3301      	adds	r3, #1
 800a462:	b2da      	uxtb	r2, r3
 800a464:	4b14      	ldr	r3, [pc, #80]	@ (800a4b8 <AHT_Upkeep+0x174>)
 800a466:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800a468:	4b13      	ldr	r3, [pc, #76]	@ (800a4b8 <AHT_Upkeep+0x174>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b19      	cmp	r3, #25
 800a46e:	d90d      	bls.n	800a48c <AHT_Upkeep+0x148>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800a470:	4a12      	ldr	r2, [pc, #72]	@ (800a4bc <AHT_Upkeep+0x178>)
 800a472:	4b13      	ldr	r3, [pc, #76]	@ (800a4c0 <AHT_Upkeep+0x17c>)
 800a474:	0019      	movs	r1, r3
 800a476:	2001      	movs	r0, #1
 800a478:	f008 fbe6 	bl	8012c48 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800a47c:	4b08      	ldr	r3, [pc, #32]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a482:	e003      	b.n	800a48c <AHT_Upkeep+0x148>
      break;
 800a484:	46c0      	nop			@ (mov r8, r8)
 800a486:	e002      	b.n	800a48e <AHT_Upkeep+0x14a>
    break;
 800a488:	46c0      	nop			@ (mov r8, r8)
 800a48a:	e000      	b.n	800a48e <AHT_Upkeep+0x14a>
    break;
 800a48c:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800a48e:	4b04      	ldr	r3, [pc, #16]	@ (800a4a0 <AHT_Upkeep+0x15c>)
 800a490:	781b      	ldrb	r3, [r3, #0]
}
 800a492:	0018      	movs	r0, r3
 800a494:	46bd      	mov	sp, r7
 800a496:	b002      	add	sp, #8
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	46c0      	nop			@ (mov r8, r8)
 800a49c:	20000bfc 	.word	0x20000bfc
 800a4a0:	20000093 	.word	0x20000093
 800a4a4:	0802d33c 	.word	0x0802d33c
 800a4a8:	0802b458 	.word	0x0802b458
 800a4ac:	0802b280 	.word	0x0802b280
 800a4b0:	000dbba0 	.word	0x000dbba0
 800a4b4:	0000ea60 	.word	0x0000ea60
 800a4b8:	20000c13 	.word	0x20000c13
 800a4bc:	0802b480 	.word	0x0802b480
 800a4c0:	0802b2e4 	.word	0x0802b2e4

0800a4c4 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af02      	add	r7, sp, #8
 800a4ca:	0004      	movs	r4, r0
 800a4cc:	0008      	movs	r0, r1
 800a4ce:	60ba      	str	r2, [r7, #8]
 800a4d0:	0019      	movs	r1, r3
 800a4d2:	260e      	movs	r6, #14
 800a4d4:	19bb      	adds	r3, r7, r6
 800a4d6:	1c22      	adds	r2, r4, #0
 800a4d8:	801a      	strh	r2, [r3, #0]
 800a4da:	230c      	movs	r3, #12
 800a4dc:	18fb      	adds	r3, r7, r3
 800a4de:	1c02      	adds	r2, r0, #0
 800a4e0:	801a      	strh	r2, [r3, #0]
 800a4e2:	1dbb      	adds	r3, r7, #6
 800a4e4:	1c0a      	adds	r2, r1, #0
 800a4e6:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a51c <WriteMemRegister+0x58>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d010      	beq.n	800a512 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <WriteMemRegister+0x58>)
 800a4f2:	681c      	ldr	r4, [r3, #0]
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a520 <WriteMemRegister+0x5c>)
 800a4f6:	7818      	ldrb	r0, [r3, #0]
 800a4f8:	68bd      	ldr	r5, [r7, #8]
 800a4fa:	230c      	movs	r3, #12
 800a4fc:	18fb      	adds	r3, r7, r3
 800a4fe:	881a      	ldrh	r2, [r3, #0]
 800a500:	19bb      	adds	r3, r7, r6
 800a502:	8819      	ldrh	r1, [r3, #0]
 800a504:	1dbb      	adds	r3, r7, #6
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	002b      	movs	r3, r5
 800a50c:	47a0      	blx	r4
 800a50e:	0003      	movs	r3, r0
 800a510:	e000      	b.n	800a514 <WriteMemRegister+0x50>
  }
  return false;
 800a512:	2300      	movs	r3, #0
}
 800a514:	0018      	movs	r0, r3
 800a516:	46bd      	mov	sp, r7
 800a518:	b005      	add	sp, #20
 800a51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a51c:	20000c14 	.word	0x20000c14
 800a520:	20000094 	.word	0x20000094

0800a524 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a526:	b087      	sub	sp, #28
 800a528:	af02      	add	r7, sp, #8
 800a52a:	0004      	movs	r4, r0
 800a52c:	0008      	movs	r0, r1
 800a52e:	60ba      	str	r2, [r7, #8]
 800a530:	0019      	movs	r1, r3
 800a532:	260e      	movs	r6, #14
 800a534:	19bb      	adds	r3, r7, r6
 800a536:	1c22      	adds	r2, r4, #0
 800a538:	801a      	strh	r2, [r3, #0]
 800a53a:	230c      	movs	r3, #12
 800a53c:	18fb      	adds	r3, r7, r3
 800a53e:	1c02      	adds	r2, r0, #0
 800a540:	801a      	strh	r2, [r3, #0]
 800a542:	1dbb      	adds	r3, r7, #6
 800a544:	1c0a      	adds	r2, r1, #0
 800a546:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800a548:	4b0c      	ldr	r3, [pc, #48]	@ (800a57c <ReadMemRegister+0x58>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d010      	beq.n	800a572 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <ReadMemRegister+0x58>)
 800a552:	681c      	ldr	r4, [r3, #0]
 800a554:	4b0a      	ldr	r3, [pc, #40]	@ (800a580 <ReadMemRegister+0x5c>)
 800a556:	7818      	ldrb	r0, [r3, #0]
 800a558:	68bd      	ldr	r5, [r7, #8]
 800a55a:	230c      	movs	r3, #12
 800a55c:	18fb      	adds	r3, r7, r3
 800a55e:	881a      	ldrh	r2, [r3, #0]
 800a560:	19bb      	adds	r3, r7, r6
 800a562:	8819      	ldrh	r1, [r3, #0]
 800a564:	1dbb      	adds	r3, r7, #6
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	002b      	movs	r3, r5
 800a56c:	47a0      	blx	r4
 800a56e:	0003      	movs	r3, r0
 800a570:	e000      	b.n	800a574 <ReadMemRegister+0x50>
  }
  return false;
 800a572:	2300      	movs	r3, #0
}
 800a574:	0018      	movs	r0, r3
 800a576:	46bd      	mov	sp, r7
 800a578:	b005      	add	sp, #20
 800a57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a57c:	20000c18 	.word	0x20000c18
 800a580:	20000094 	.word	0x20000094

0800a584 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800a58c:	f009 f89a 	bl	80136c4 <HAL_GetTick>
 800a590:	0002      	movs	r2, r0
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	18d2      	adds	r2, r2, r3
 800a596:	4b03      	ldr	r3, [pc, #12]	@ (800a5a4 <setBMP280TimeStamp+0x20>)
 800a598:	601a      	str	r2, [r3, #0]
}
 800a59a:	46c0      	nop			@ (mov r8, r8)
 800a59c:	46bd      	mov	sp, r7
 800a59e:	b002      	add	sp, #8
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	46c0      	nop			@ (mov r8, r8)
 800a5a4:	20000c40 	.word	0x20000c40

0800a5a8 <BMP280_reset>:

static void BMP280_reset() {
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800a5ae:	1dfb      	adds	r3, r7, #7
 800a5b0:	22b6      	movs	r2, #182	@ 0xb6
 800a5b2:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800a5b4:	1dfa      	adds	r2, r7, #7
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	20e0      	movs	r0, #224	@ 0xe0
 800a5bc:	f7ff ff82 	bl	800a4c4 <WriteMemRegister>
  Info("BMP280 has been reset");
 800a5c0:	4a06      	ldr	r2, [pc, #24]	@ (800a5dc <BMP280_reset+0x34>)
 800a5c2:	4b07      	ldr	r3, [pc, #28]	@ (800a5e0 <BMP280_reset+0x38>)
 800a5c4:	0019      	movs	r1, r3
 800a5c6:	2002      	movs	r0, #2
 800a5c8:	f008 fb3e 	bl	8012c48 <CreateLine>
  HAL_Delay(100);
 800a5cc:	2064      	movs	r0, #100	@ 0x64
 800a5ce:	f009 f883 	bl	80136d8 <HAL_Delay>
}
 800a5d2:	46c0      	nop			@ (mov r8, r8)
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b002      	add	sp, #8
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	46c0      	nop			@ (mov r8, r8)
 800a5dc:	0802b4c4 	.word	0x0802b4c4
 800a5e0:	0802b4dc 	.word	0x0802b4dc

0800a5e4 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800a5e4:	b590      	push	{r4, r7, lr}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800a5ea:	4aae      	ldr	r2, [pc, #696]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a5ec:	231a      	movs	r3, #26
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	2088      	movs	r0, #136	@ 0x88
 800a5f2:	f7ff ff97 	bl	800a524 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800a5f6:	4bab      	ldr	r3, [pc, #684]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	4aa9      	ldr	r2, [pc, #676]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a600:	7812      	ldrb	r2, [r2, #0]
 800a602:	189b      	adds	r3, r3, r2
 800a604:	b29a      	uxth	r2, r3
 800a606:	4ba8      	ldr	r3, [pc, #672]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a608:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800a60a:	4ba6      	ldr	r3, [pc, #664]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a60c:	78db      	ldrb	r3, [r3, #3]
 800a60e:	021b      	lsls	r3, r3, #8
 800a610:	b29b      	uxth	r3, r3
 800a612:	4aa4      	ldr	r2, [pc, #656]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a614:	7892      	ldrb	r2, [r2, #2]
 800a616:	189b      	adds	r3, r3, r2
 800a618:	b29b      	uxth	r3, r3
 800a61a:	b21a      	sxth	r2, r3
 800a61c:	4ba2      	ldr	r3, [pc, #648]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a61e:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800a620:	4ba0      	ldr	r3, [pc, #640]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a622:	795b      	ldrb	r3, [r3, #5]
 800a624:	021b      	lsls	r3, r3, #8
 800a626:	b29b      	uxth	r3, r3
 800a628:	4a9e      	ldr	r2, [pc, #632]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a62a:	7912      	ldrb	r2, [r2, #4]
 800a62c:	189b      	adds	r3, r3, r2
 800a62e:	b29b      	uxth	r3, r3
 800a630:	b21a      	sxth	r2, r3
 800a632:	4b9d      	ldr	r3, [pc, #628]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a634:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800a636:	4b9b      	ldr	r3, [pc, #620]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a638:	79db      	ldrb	r3, [r3, #7]
 800a63a:	021b      	lsls	r3, r3, #8
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	4a99      	ldr	r2, [pc, #612]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a640:	7992      	ldrb	r2, [r2, #6]
 800a642:	189b      	adds	r3, r3, r2
 800a644:	b29a      	uxth	r2, r3
 800a646:	4b98      	ldr	r3, [pc, #608]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a648:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800a64a:	4b96      	ldr	r3, [pc, #600]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a64c:	7a5b      	ldrb	r3, [r3, #9]
 800a64e:	021b      	lsls	r3, r3, #8
 800a650:	b29b      	uxth	r3, r3
 800a652:	4a94      	ldr	r2, [pc, #592]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a654:	7a12      	ldrb	r2, [r2, #8]
 800a656:	189b      	adds	r3, r3, r2
 800a658:	b29b      	uxth	r3, r3
 800a65a:	b21a      	sxth	r2, r3
 800a65c:	4b92      	ldr	r3, [pc, #584]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a65e:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800a660:	4b90      	ldr	r3, [pc, #576]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a662:	7adb      	ldrb	r3, [r3, #11]
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	b29b      	uxth	r3, r3
 800a668:	4a8e      	ldr	r2, [pc, #568]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a66a:	7a92      	ldrb	r2, [r2, #10]
 800a66c:	189b      	adds	r3, r3, r2
 800a66e:	b29b      	uxth	r3, r3
 800a670:	b21a      	sxth	r2, r3
 800a672:	4b8d      	ldr	r3, [pc, #564]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a674:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800a676:	4b8b      	ldr	r3, [pc, #556]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a678:	7b5b      	ldrb	r3, [r3, #13]
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	4a89      	ldr	r2, [pc, #548]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a680:	7b12      	ldrb	r2, [r2, #12]
 800a682:	189b      	adds	r3, r3, r2
 800a684:	b29b      	uxth	r3, r3
 800a686:	b21a      	sxth	r2, r3
 800a688:	4b87      	ldr	r3, [pc, #540]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a68a:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800a68c:	4b85      	ldr	r3, [pc, #532]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a68e:	7bdb      	ldrb	r3, [r3, #15]
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	b29b      	uxth	r3, r3
 800a694:	4a83      	ldr	r2, [pc, #524]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a696:	7b92      	ldrb	r2, [r2, #14]
 800a698:	189b      	adds	r3, r3, r2
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	b21a      	sxth	r2, r3
 800a69e:	4b82      	ldr	r3, [pc, #520]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a6a0:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800a6a2:	4b80      	ldr	r3, [pc, #512]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6a4:	7c5b      	ldrb	r3, [r3, #17]
 800a6a6:	021b      	lsls	r3, r3, #8
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4a7e      	ldr	r2, [pc, #504]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6ac:	7c12      	ldrb	r2, [r2, #16]
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	b21a      	sxth	r2, r3
 800a6b4:	4b7c      	ldr	r3, [pc, #496]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a6b6:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800a6b8:	4b7a      	ldr	r3, [pc, #488]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6ba:	7cdb      	ldrb	r3, [r3, #19]
 800a6bc:	021b      	lsls	r3, r3, #8
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	4a78      	ldr	r2, [pc, #480]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6c2:	7c92      	ldrb	r2, [r2, #18]
 800a6c4:	189b      	adds	r3, r3, r2
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	b21a      	sxth	r2, r3
 800a6ca:	4b77      	ldr	r3, [pc, #476]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a6cc:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800a6ce:	4b75      	ldr	r3, [pc, #468]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6d0:	7d5b      	ldrb	r3, [r3, #21]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4a73      	ldr	r2, [pc, #460]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6d8:	7d12      	ldrb	r2, [r2, #20]
 800a6da:	189b      	adds	r3, r3, r2
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	b21a      	sxth	r2, r3
 800a6e0:	4b71      	ldr	r3, [pc, #452]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a6e2:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800a6e4:	4b6f      	ldr	r3, [pc, #444]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6e6:	7ddb      	ldrb	r3, [r3, #23]
 800a6e8:	021b      	lsls	r3, r3, #8
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	4a6d      	ldr	r2, [pc, #436]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a6ee:	7d92      	ldrb	r2, [r2, #22]
 800a6f0:	189b      	adds	r3, r3, r2
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	b21a      	sxth	r2, r3
 800a6f6:	4b6c      	ldr	r3, [pc, #432]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a6f8:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800a6fa:	4a6c      	ldr	r2, [pc, #432]	@ (800a8ac <BMP280_get_calibration+0x2c8>)
 800a6fc:	4b6c      	ldr	r3, [pc, #432]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a6fe:	0019      	movs	r1, r3
 800a700:	2003      	movs	r0, #3
 800a702:	f008 faa1 	bl	8012c48 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800a706:	4b67      	ldr	r3, [pc, #412]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	001c      	movs	r4, r3
 800a70c:	4b65      	ldr	r3, [pc, #404]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	0018      	movs	r0, r3
 800a712:	4b65      	ldr	r3, [pc, #404]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	4a67      	ldr	r2, [pc, #412]	@ (800a8b4 <BMP280_get_calibration+0x2d0>)
 800a718:	4965      	ldr	r1, [pc, #404]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	9000      	str	r0, [sp, #0]
 800a71e:	0023      	movs	r3, r4
 800a720:	2003      	movs	r0, #3
 800a722:	f008 fa91 	bl	8012c48 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800a726:	4b5f      	ldr	r3, [pc, #380]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a728:	78db      	ldrb	r3, [r3, #3]
 800a72a:	001c      	movs	r4, r3
 800a72c:	4b5d      	ldr	r3, [pc, #372]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a72e:	789b      	ldrb	r3, [r3, #2]
 800a730:	0018      	movs	r0, r3
 800a732:	4b5d      	ldr	r3, [pc, #372]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a734:	2202      	movs	r2, #2
 800a736:	5e9b      	ldrsh	r3, [r3, r2]
 800a738:	4a5f      	ldr	r2, [pc, #380]	@ (800a8b8 <BMP280_get_calibration+0x2d4>)
 800a73a:	495d      	ldr	r1, [pc, #372]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	9000      	str	r0, [sp, #0]
 800a740:	0023      	movs	r3, r4
 800a742:	2003      	movs	r0, #3
 800a744:	f008 fa80 	bl	8012c48 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800a748:	4b56      	ldr	r3, [pc, #344]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a74a:	795b      	ldrb	r3, [r3, #5]
 800a74c:	001c      	movs	r4, r3
 800a74e:	4b55      	ldr	r3, [pc, #340]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a750:	791b      	ldrb	r3, [r3, #4]
 800a752:	0018      	movs	r0, r3
 800a754:	4b54      	ldr	r3, [pc, #336]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a756:	2204      	movs	r2, #4
 800a758:	5e9b      	ldrsh	r3, [r3, r2]
 800a75a:	4a58      	ldr	r2, [pc, #352]	@ (800a8bc <BMP280_get_calibration+0x2d8>)
 800a75c:	4954      	ldr	r1, [pc, #336]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	9000      	str	r0, [sp, #0]
 800a762:	0023      	movs	r3, r4
 800a764:	2003      	movs	r0, #3
 800a766:	f008 fa6f 	bl	8012c48 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800a76a:	4b4e      	ldr	r3, [pc, #312]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a76c:	79db      	ldrb	r3, [r3, #7]
 800a76e:	001c      	movs	r4, r3
 800a770:	4b4c      	ldr	r3, [pc, #304]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a772:	799b      	ldrb	r3, [r3, #6]
 800a774:	0018      	movs	r0, r3
 800a776:	4b4c      	ldr	r3, [pc, #304]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a778:	88db      	ldrh	r3, [r3, #6]
 800a77a:	4a51      	ldr	r2, [pc, #324]	@ (800a8c0 <BMP280_get_calibration+0x2dc>)
 800a77c:	494c      	ldr	r1, [pc, #304]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	9000      	str	r0, [sp, #0]
 800a782:	0023      	movs	r3, r4
 800a784:	2003      	movs	r0, #3
 800a786:	f008 fa5f 	bl	8012c48 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800a78a:	4b46      	ldr	r3, [pc, #280]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a78c:	7a5b      	ldrb	r3, [r3, #9]
 800a78e:	001c      	movs	r4, r3
 800a790:	4b44      	ldr	r3, [pc, #272]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a792:	7a1b      	ldrb	r3, [r3, #8]
 800a794:	0018      	movs	r0, r3
 800a796:	4b44      	ldr	r3, [pc, #272]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a798:	2208      	movs	r2, #8
 800a79a:	5e9b      	ldrsh	r3, [r3, r2]
 800a79c:	4a49      	ldr	r2, [pc, #292]	@ (800a8c4 <BMP280_get_calibration+0x2e0>)
 800a79e:	4944      	ldr	r1, [pc, #272]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	9000      	str	r0, [sp, #0]
 800a7a4:	0023      	movs	r3, r4
 800a7a6:	2003      	movs	r0, #3
 800a7a8:	f008 fa4e 	bl	8012c48 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800a7ac:	4b3d      	ldr	r3, [pc, #244]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a7ae:	7adb      	ldrb	r3, [r3, #11]
 800a7b0:	001c      	movs	r4, r3
 800a7b2:	4b3c      	ldr	r3, [pc, #240]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a7b4:	7a9b      	ldrb	r3, [r3, #10]
 800a7b6:	0018      	movs	r0, r3
 800a7b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a7ba:	220a      	movs	r2, #10
 800a7bc:	5e9b      	ldrsh	r3, [r3, r2]
 800a7be:	4a42      	ldr	r2, [pc, #264]	@ (800a8c8 <BMP280_get_calibration+0x2e4>)
 800a7c0:	493b      	ldr	r1, [pc, #236]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	9000      	str	r0, [sp, #0]
 800a7c6:	0023      	movs	r3, r4
 800a7c8:	2003      	movs	r0, #3
 800a7ca:	f008 fa3d 	bl	8012c48 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800a7ce:	4b35      	ldr	r3, [pc, #212]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a7d0:	7b5b      	ldrb	r3, [r3, #13]
 800a7d2:	001c      	movs	r4, r3
 800a7d4:	4b33      	ldr	r3, [pc, #204]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a7d6:	7b1b      	ldrb	r3, [r3, #12]
 800a7d8:	0018      	movs	r0, r3
 800a7da:	4b33      	ldr	r3, [pc, #204]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a7dc:	220c      	movs	r2, #12
 800a7de:	5e9b      	ldrsh	r3, [r3, r2]
 800a7e0:	4a3a      	ldr	r2, [pc, #232]	@ (800a8cc <BMP280_get_calibration+0x2e8>)
 800a7e2:	4933      	ldr	r1, [pc, #204]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	9000      	str	r0, [sp, #0]
 800a7e8:	0023      	movs	r3, r4
 800a7ea:	2003      	movs	r0, #3
 800a7ec:	f008 fa2c 	bl	8012c48 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800a7f0:	4b2c      	ldr	r3, [pc, #176]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a7f2:	7bdb      	ldrb	r3, [r3, #15]
 800a7f4:	001c      	movs	r4, r3
 800a7f6:	4b2b      	ldr	r3, [pc, #172]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a7f8:	7b9b      	ldrb	r3, [r3, #14]
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a7fe:	220e      	movs	r2, #14
 800a800:	5e9b      	ldrsh	r3, [r3, r2]
 800a802:	4a33      	ldr	r2, [pc, #204]	@ (800a8d0 <BMP280_get_calibration+0x2ec>)
 800a804:	492a      	ldr	r1, [pc, #168]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	9000      	str	r0, [sp, #0]
 800a80a:	0023      	movs	r3, r4
 800a80c:	2003      	movs	r0, #3
 800a80e:	f008 fa1b 	bl	8012c48 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800a812:	4b24      	ldr	r3, [pc, #144]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a814:	7c5b      	ldrb	r3, [r3, #17]
 800a816:	001c      	movs	r4, r3
 800a818:	4b22      	ldr	r3, [pc, #136]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a81a:	7c1b      	ldrb	r3, [r3, #16]
 800a81c:	0018      	movs	r0, r3
 800a81e:	4b22      	ldr	r3, [pc, #136]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a820:	2210      	movs	r2, #16
 800a822:	5e9b      	ldrsh	r3, [r3, r2]
 800a824:	4a2b      	ldr	r2, [pc, #172]	@ (800a8d4 <BMP280_get_calibration+0x2f0>)
 800a826:	4922      	ldr	r1, [pc, #136]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	9000      	str	r0, [sp, #0]
 800a82c:	0023      	movs	r3, r4
 800a82e:	2003      	movs	r0, #3
 800a830:	f008 fa0a 	bl	8012c48 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800a834:	4b1b      	ldr	r3, [pc, #108]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a836:	7cdb      	ldrb	r3, [r3, #19]
 800a838:	001c      	movs	r4, r3
 800a83a:	4b1a      	ldr	r3, [pc, #104]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a83c:	7c9b      	ldrb	r3, [r3, #18]
 800a83e:	0018      	movs	r0, r3
 800a840:	4b19      	ldr	r3, [pc, #100]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a842:	2212      	movs	r2, #18
 800a844:	5e9b      	ldrsh	r3, [r3, r2]
 800a846:	4a24      	ldr	r2, [pc, #144]	@ (800a8d8 <BMP280_get_calibration+0x2f4>)
 800a848:	4919      	ldr	r1, [pc, #100]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a84a:	9301      	str	r3, [sp, #4]
 800a84c:	9000      	str	r0, [sp, #0]
 800a84e:	0023      	movs	r3, r4
 800a850:	2003      	movs	r0, #3
 800a852:	f008 f9f9 	bl	8012c48 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800a856:	4b13      	ldr	r3, [pc, #76]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a858:	7d5b      	ldrb	r3, [r3, #21]
 800a85a:	001c      	movs	r4, r3
 800a85c:	4b11      	ldr	r3, [pc, #68]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a85e:	7d1b      	ldrb	r3, [r3, #20]
 800a860:	0018      	movs	r0, r3
 800a862:	4b11      	ldr	r3, [pc, #68]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a864:	2214      	movs	r2, #20
 800a866:	5e9b      	ldrsh	r3, [r3, r2]
 800a868:	4a1c      	ldr	r2, [pc, #112]	@ (800a8dc <BMP280_get_calibration+0x2f8>)
 800a86a:	4911      	ldr	r1, [pc, #68]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	9000      	str	r0, [sp, #0]
 800a870:	0023      	movs	r3, r4
 800a872:	2003      	movs	r0, #3
 800a874:	f008 f9e8 	bl	8012c48 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800a878:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a87a:	7ddb      	ldrb	r3, [r3, #23]
 800a87c:	001c      	movs	r4, r3
 800a87e:	4b09      	ldr	r3, [pc, #36]	@ (800a8a4 <BMP280_get_calibration+0x2c0>)
 800a880:	7d9b      	ldrb	r3, [r3, #22]
 800a882:	0018      	movs	r0, r3
 800a884:	4b08      	ldr	r3, [pc, #32]	@ (800a8a8 <BMP280_get_calibration+0x2c4>)
 800a886:	2216      	movs	r2, #22
 800a888:	5e9b      	ldrsh	r3, [r3, r2]
 800a88a:	4a15      	ldr	r2, [pc, #84]	@ (800a8e0 <BMP280_get_calibration+0x2fc>)
 800a88c:	4908      	ldr	r1, [pc, #32]	@ (800a8b0 <BMP280_get_calibration+0x2cc>)
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	9000      	str	r0, [sp, #0]
 800a892:	0023      	movs	r3, r4
 800a894:	2003      	movs	r0, #3
 800a896:	f008 f9d7 	bl	8012c48 <CreateLine>
}
 800a89a:	46c0      	nop			@ (mov r8, r8)
 800a89c:	46bd      	mov	sp, r7
 800a89e:	b001      	add	sp, #4
 800a8a0:	bd90      	pop	{r4, r7, pc}
 800a8a2:	46c0      	nop			@ (mov r8, r8)
 800a8a4:	20000c44 	.word	0x20000c44
 800a8a8:	20000c1c 	.word	0x20000c1c
 800a8ac:	0802b4e0 	.word	0x0802b4e0
 800a8b0:	0802b4fc 	.word	0x0802b4fc
 800a8b4:	0802b500 	.word	0x0802b500
 800a8b8:	0802b534 	.word	0x0802b534
 800a8bc:	0802b568 	.word	0x0802b568
 800a8c0:	0802b59c 	.word	0x0802b59c
 800a8c4:	0802b5d0 	.word	0x0802b5d0
 800a8c8:	0802b604 	.word	0x0802b604
 800a8cc:	0802b638 	.word	0x0802b638
 800a8d0:	0802b66c 	.word	0x0802b66c
 800a8d4:	0802b6a0 	.word	0x0802b6a0
 800a8d8:	0802b6d4 	.word	0x0802b6d4
 800a8dc:	0802b708 	.word	0x0802b708
 800a8e0:	0802b73c 	.word	0x0802b73c

0800a8e4 <BMP280_probe>:

static bool BMP280_probe() {
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800a8ea:	4b34      	ldr	r3, [pc, #208]	@ (800a9bc <BMP280_probe+0xd8>)
 800a8ec:	2276      	movs	r2, #118	@ 0x76
 800a8ee:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800a8f0:	1dba      	adds	r2, r7, #6
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	20d0      	movs	r0, #208	@ 0xd0
 800a8f8:	f7ff fe14 	bl	800a524 <ReadMemRegister>
 800a8fc:	0003      	movs	r3, r0
 800a8fe:	001a      	movs	r2, r3
 800a900:	1dfb      	adds	r3, r7, #7
 800a902:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800a904:	1dfb      	adds	r3, r7, #7
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00a      	beq.n	800a924 <BMP280_probe+0x40>
 800a90e:	1dbb      	adds	r3, r7, #6
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d006      	beq.n	800a924 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800a916:	1dbb      	adds	r3, r7, #6
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	4a29      	ldr	r2, [pc, #164]	@ (800a9c0 <BMP280_probe+0xdc>)
 800a91c:	4929      	ldr	r1, [pc, #164]	@ (800a9c4 <BMP280_probe+0xe0>)
 800a91e:	2003      	movs	r0, #3
 800a920:	f008 f992 	bl	8012c48 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800a924:	1dbb      	adds	r3, r7, #6
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b58      	cmp	r3, #88	@ 0x58
 800a92a:	d01f      	beq.n	800a96c <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800a92c:	4b23      	ldr	r3, [pc, #140]	@ (800a9bc <BMP280_probe+0xd8>)
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	3301      	adds	r3, #1
 800a932:	b2da      	uxtb	r2, r3
 800a934:	4b21      	ldr	r3, [pc, #132]	@ (800a9bc <BMP280_probe+0xd8>)
 800a936:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800a938:	1dba      	adds	r2, r7, #6
 800a93a:	2301      	movs	r3, #1
 800a93c:	2101      	movs	r1, #1
 800a93e:	20d0      	movs	r0, #208	@ 0xd0
 800a940:	f7ff fdf0 	bl	800a524 <ReadMemRegister>
 800a944:	0003      	movs	r3, r0
 800a946:	001a      	movs	r2, r3
 800a948:	1dfb      	adds	r3, r7, #7
 800a94a:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800a94c:	1dfb      	adds	r3, r7, #7
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	b25b      	sxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <BMP280_probe+0x88>
 800a956:	1dbb      	adds	r3, r7, #6
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d006      	beq.n	800a96c <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800a95e:	1dbb      	adds	r3, r7, #6
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	4a17      	ldr	r2, [pc, #92]	@ (800a9c0 <BMP280_probe+0xdc>)
 800a964:	4917      	ldr	r1, [pc, #92]	@ (800a9c4 <BMP280_probe+0xe0>)
 800a966:	2003      	movs	r0, #3
 800a968:	f008 f96e 	bl	8012c48 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800a96c:	1dbb      	adds	r3, r7, #6
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b58      	cmp	r3, #88	@ 0x58
 800a972:	d110      	bne.n	800a996 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800a974:	1dbb      	adds	r3, r7, #6
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	0018      	movs	r0, r3
 800a97a:	4b10      	ldr	r3, [pc, #64]	@ (800a9bc <BMP280_probe+0xd8>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	4a12      	ldr	r2, [pc, #72]	@ (800a9c8 <BMP280_probe+0xe4>)
 800a980:	4912      	ldr	r1, [pc, #72]	@ (800a9cc <BMP280_probe+0xe8>)
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	0003      	movs	r3, r0
 800a986:	2002      	movs	r0, #2
 800a988:	f008 f95e 	bl	8012c48 <CreateLine>
      BMP280_reset(); // get an initial state
 800a98c:	f7ff fe0c 	bl	800a5a8 <BMP280_reset>
      BMP280_get_calibration();
 800a990:	f7ff fe28 	bl	800a5e4 <BMP280_get_calibration>
 800a994:	e008      	b.n	800a9a8 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800a996:	4b09      	ldr	r3, [pc, #36]	@ (800a9bc <BMP280_probe+0xd8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800a99c:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d0 <BMP280_probe+0xec>)
 800a99e:	4b0d      	ldr	r3, [pc, #52]	@ (800a9d4 <BMP280_probe+0xf0>)
 800a9a0:	0019      	movs	r1, r3
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	f008 f950 	bl	8012c48 <CreateLine>
    }
    return bmp280I2Caddr;
 800a9a8:	4b04      	ldr	r3, [pc, #16]	@ (800a9bc <BMP280_probe+0xd8>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	1e5a      	subs	r2, r3, #1
 800a9ae:	4193      	sbcs	r3, r2
 800a9b0:	b2db      	uxtb	r3, r3
}
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	b002      	add	sp, #8
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	46c0      	nop			@ (mov r8, r8)
 800a9bc:	20000094 	.word	0x20000094
 800a9c0:	0802b770 	.word	0x0802b770
 800a9c4:	0802b4fc 	.word	0x0802b4fc
 800a9c8:	0802b7a0 	.word	0x0802b7a0
 800a9cc:	0802b4dc 	.word	0x0802b4dc
 800a9d0:	0802b7d8 	.word	0x0802b7d8
 800a9d4:	0802b7ec 	.word	0x0802b7ec

0800a9d8 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800a9dc:	f7ff ff82 	bl	800a8e4 <BMP280_probe>
 800a9e0:	0003      	movs	r3, r0
}
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800a9f2:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <BMP_Init+0x20>)
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800a9f8:	4b04      	ldr	r3, [pc, #16]	@ (800aa0c <BMP_Init+0x24>)
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	601a      	str	r2, [r3, #0]
}
 800a9fe:	46c0      	nop			@ (mov r8, r8)
 800aa00:	46bd      	mov	sp, r7
 800aa02:	b002      	add	sp, #8
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	46c0      	nop			@ (mov r8, r8)
 800aa08:	20000c18 	.word	0x20000c18
 800aa0c:	20000c14 	.word	0x20000c14

0800aa10 <BMP280_set_config>:


static bool BMP280_set_config() {
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800aa16:	1dbb      	adds	r3, r7, #6
 800aa18:	228c      	movs	r2, #140	@ 0x8c
 800aa1a:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800aa1c:	1dba      	adds	r2, r7, #6
 800aa1e:	2301      	movs	r3, #1
 800aa20:	2101      	movs	r1, #1
 800aa22:	20f5      	movs	r0, #245	@ 0xf5
 800aa24:	f7ff fd4e 	bl	800a4c4 <WriteMemRegister>
 800aa28:	0003      	movs	r3, r0
 800aa2a:	001a      	movs	r2, r3
 800aa2c:	1dfb      	adds	r3, r7, #7
 800aa2e:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800aa30:	f008 fe48 	bl	80136c4 <HAL_GetTick>
 800aa34:	0003      	movs	r3, r0
 800aa36:	330a      	adds	r3, #10
 800aa38:	001a      	movs	r2, r3
 800aa3a:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <BMP280_set_config+0x44>)
 800aa3c:	601a      	str	r2, [r3, #0]
  return rslt;
 800aa3e:	1dfb      	adds	r3, r7, #7
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	1e5a      	subs	r2, r3, #1
 800aa46:	4193      	sbcs	r3, r2
 800aa48:	b2db      	uxtb	r3, r3
}
 800aa4a:	0018      	movs	r0, r3
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	b002      	add	sp, #8
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	46c0      	nop			@ (mov r8, r8)
 800aa54:	20000c40 	.word	0x20000c40

0800aa58 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800aa5e:	1dbb      	adds	r3, r7, #6
 800aa60:	2208      	movs	r2, #8
 800aa62:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800aa64:	4b22      	ldr	r3, [pc, #136]	@ (800aaf0 <BMP280_set_mode+0x98>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	224c      	movs	r2, #76	@ 0x4c
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	1d7b      	adds	r3, r7, #5
 800aa70:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800aa72:	1d7a      	adds	r2, r7, #5
 800aa74:	2301      	movs	r3, #1
 800aa76:	2101      	movs	r1, #1
 800aa78:	20f4      	movs	r0, #244	@ 0xf4
 800aa7a:	f7ff fd23 	bl	800a4c4 <WriteMemRegister>
 800aa7e:	0003      	movs	r3, r0
 800aa80:	001a      	movs	r2, r3
 800aa82:	1dfb      	adds	r3, r7, #7
 800aa84:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800aa86:	f008 fe1d 	bl	80136c4 <HAL_GetTick>
 800aa8a:	0003      	movs	r3, r0
 800aa8c:	22fa      	movs	r2, #250	@ 0xfa
 800aa8e:	0092      	lsls	r2, r2, #2
 800aa90:	189a      	adds	r2, r3, r2
 800aa92:	4b18      	ldr	r3, [pc, #96]	@ (800aaf4 <BMP280_set_mode+0x9c>)
 800aa94:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800aa96:	e016      	b.n	800aac6 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800aa98:	1dba      	adds	r2, r7, #6
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	2101      	movs	r1, #1
 800aa9e:	20f3      	movs	r0, #243	@ 0xf3
 800aaa0:	f7ff fd40 	bl	800a524 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800aaa4:	4b13      	ldr	r3, [pc, #76]	@ (800aaf4 <BMP280_set_mode+0x9c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	0018      	movs	r0, r3
 800aaaa:	f008 f877 	bl	8012b9c <TimestampIsReached>
 800aaae:	1e03      	subs	r3, r0, #0
 800aab0:	d006      	beq.n	800aac0 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800aab2:	4a11      	ldr	r2, [pc, #68]	@ (800aaf8 <BMP280_set_mode+0xa0>)
 800aab4:	4b11      	ldr	r3, [pc, #68]	@ (800aafc <BMP280_set_mode+0xa4>)
 800aab6:	0019      	movs	r1, r3
 800aab8:	2001      	movs	r0, #1
 800aaba:	f008 f8c5 	bl	8012c48 <CreateLine>
      break;
 800aabe:	e008      	b.n	800aad2 <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800aac0:	2001      	movs	r0, #1
 800aac2:	f008 fe09 	bl	80136d8 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800aac6:	1dbb      	adds	r3, r7, #6
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	001a      	movs	r2, r3
 800aacc:	2308      	movs	r3, #8
 800aace:	4013      	ands	r3, r2
 800aad0:	d1e2      	bne.n	800aa98 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800aad2:	f008 fdf7 	bl	80136c4 <HAL_GetTick>
 800aad6:	0002      	movs	r2, r0
 800aad8:	4b06      	ldr	r3, [pc, #24]	@ (800aaf4 <BMP280_set_mode+0x9c>)
 800aada:	601a      	str	r2, [r3, #0]
  return rslt;
 800aadc:	1dfb      	adds	r3, r7, #7
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	b25b      	sxtb	r3, r3
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	4193      	sbcs	r3, r2
 800aae6:	b2db      	uxtb	r3, r3
}
 800aae8:	0018      	movs	r0, r3
 800aaea:	46bd      	mov	sp, r7
 800aaec:	b002      	add	sp, #8
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	20000095 	.word	0x20000095
 800aaf4:	20000c40 	.word	0x20000c40
 800aaf8:	0802b7f0 	.word	0x0802b7f0
 800aafc:	0802b7ec 	.word	0x0802b7ec

0800ab00 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800ab06:	1dba      	adds	r2, r7, #6
 800ab08:	2301      	movs	r3, #1
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	20f4      	movs	r0, #244	@ 0xf4
 800ab0e:	f7ff fd09 	bl	800a524 <ReadMemRegister>
 800ab12:	0003      	movs	r3, r0
 800ab14:	001a      	movs	r2, r3
 800ab16:	1dfb      	adds	r3, r7, #7
 800ab18:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800ab1a:	1dbb      	adds	r3, r7, #6
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2203      	movs	r2, #3
 800ab20:	4013      	ands	r3, r2
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	1dbb      	adds	r3, r7, #6
 800ab26:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800ab28:	f008 fdcc 	bl	80136c4 <HAL_GetTick>
 800ab2c:	0003      	movs	r3, r0
 800ab2e:	330a      	adds	r3, #10
 800ab30:	001a      	movs	r2, r3
 800ab32:	4b08      	ldr	r3, [pc, #32]	@ (800ab54 <BMP280_get_mode+0x54>)
 800ab34:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800ab36:	1dfb      	adds	r3, r7, #7
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	b25b      	sxtb	r3, r3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d102      	bne.n	800ab46 <BMP280_get_mode+0x46>
    bmpData = 255;
 800ab40:	1dbb      	adds	r3, r7, #6
 800ab42:	22ff      	movs	r2, #255	@ 0xff
 800ab44:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800ab46:	1dbb      	adds	r3, r7, #6
 800ab48:	781b      	ldrb	r3, [r3, #0]
}
 800ab4a:	0018      	movs	r0, r3
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	b002      	add	sp, #8
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	46c0      	nop			@ (mov r8, r8)
 800ab54:	20000c40 	.word	0x20000c40

0800ab58 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800ab58:	b5b0      	push	{r4, r5, r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800ab5e:	1d3a      	adds	r2, r7, #4
 800ab60:	2306      	movs	r3, #6
 800ab62:	2101      	movs	r1, #1
 800ab64:	20f7      	movs	r0, #247	@ 0xf7
 800ab66:	f7ff fcdd 	bl	800a524 <ReadMemRegister>
 800ab6a:	0003      	movs	r3, r0
 800ab6c:	001a      	movs	r2, r3
 800ab6e:	230f      	movs	r3, #15
 800ab70:	18fb      	adds	r3, r7, r3
 800ab72:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800ab74:	1d3b      	adds	r3, r7, #4
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b80      	cmp	r3, #128	@ 0x80
 800ab7a:	d00f      	beq.n	800ab9c <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800ab7c:	1d3b      	adds	r3, r7, #4
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	031a      	lsls	r2, r3, #12
 800ab82:	1d3b      	adds	r3, r7, #4
 800ab84:	785b      	ldrb	r3, [r3, #1]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	18d3      	adds	r3, r2, r3
 800ab8a:	1d3a      	adds	r2, r7, #4
 800ab8c:	7892      	ldrb	r2, [r2, #2]
 800ab8e:	0912      	lsrs	r2, r2, #4
 800ab90:	b2d2      	uxtb	r2, r2
 800ab92:	189b      	adds	r3, r3, r2
 800ab94:	001a      	movs	r2, r3
 800ab96:	4b2d      	ldr	r3, [pc, #180]	@ (800ac4c <BMP280_get_measurement_values+0xf4>)
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	e01b      	b.n	800abd4 <BMP280_get_measurement_values+0x7c>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 800ab9c:	4a2c      	ldr	r2, [pc, #176]	@ (800ac50 <BMP280_get_measurement_values+0xf8>)
 800ab9e:	4b2d      	ldr	r3, [pc, #180]	@ (800ac54 <BMP280_get_measurement_values+0xfc>)
 800aba0:	0019      	movs	r1, r3
 800aba2:	2001      	movs	r0, #1
 800aba4:	f008 f850 	bl	8012c48 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800aba8:	1d3b      	adds	r3, r7, #4
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	001d      	movs	r5, r3
 800abae:	1d3b      	adds	r3, r7, #4
 800abb0:	785b      	ldrb	r3, [r3, #1]
 800abb2:	0018      	movs	r0, r3
 800abb4:	1d3b      	adds	r3, r7, #4
 800abb6:	789b      	ldrb	r3, [r3, #2]
 800abb8:	001c      	movs	r4, r3
 800abba:	4b24      	ldr	r3, [pc, #144]	@ (800ac4c <BMP280_get_measurement_values+0xf4>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a26      	ldr	r2, [pc, #152]	@ (800ac58 <BMP280_get_measurement_values+0x100>)
 800abc0:	4926      	ldr	r1, [pc, #152]	@ (800ac5c <BMP280_get_measurement_values+0x104>)
 800abc2:	9302      	str	r3, [sp, #8]
 800abc4:	9401      	str	r4, [sp, #4]
 800abc6:	9000      	str	r0, [sp, #0]
 800abc8:	002b      	movs	r3, r5
 800abca:	2003      	movs	r0, #3
 800abcc:	f008 f83c 	bl	8012c48 <CreateLine>
    SetAllBlueLED();
 800abd0:	f006 ff7e 	bl	8011ad0 <SetAllBlueLED>
  }
  if (bmpData[3] != 0x80) {
 800abd4:	1d3b      	adds	r3, r7, #4
 800abd6:	78db      	ldrb	r3, [r3, #3]
 800abd8:	2b80      	cmp	r3, #128	@ 0x80
 800abda:	d00f      	beq.n	800abfc <BMP280_get_measurement_values+0xa4>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800abdc:	1d3b      	adds	r3, r7, #4
 800abde:	78db      	ldrb	r3, [r3, #3]
 800abe0:	031a      	lsls	r2, r3, #12
 800abe2:	1d3b      	adds	r3, r7, #4
 800abe4:	791b      	ldrb	r3, [r3, #4]
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	18d3      	adds	r3, r2, r3
 800abea:	1d3a      	adds	r2, r7, #4
 800abec:	7952      	ldrb	r2, [r2, #5]
 800abee:	0912      	lsrs	r2, r2, #4
 800abf0:	b2d2      	uxtb	r2, r2
 800abf2:	189b      	adds	r3, r3, r2
 800abf4:	001a      	movs	r2, r3
 800abf6:	4b1a      	ldr	r3, [pc, #104]	@ (800ac60 <BMP280_get_measurement_values+0x108>)
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	e01b      	b.n	800ac34 <BMP280_get_measurement_values+0xdc>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 800abfc:	4a19      	ldr	r2, [pc, #100]	@ (800ac64 <BMP280_get_measurement_values+0x10c>)
 800abfe:	4b15      	ldr	r3, [pc, #84]	@ (800ac54 <BMP280_get_measurement_values+0xfc>)
 800ac00:	0019      	movs	r1, r3
 800ac02:	2001      	movs	r0, #1
 800ac04:	f008 f820 	bl	8012c48 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800ac08:	1d3b      	adds	r3, r7, #4
 800ac0a:	78db      	ldrb	r3, [r3, #3]
 800ac0c:	001d      	movs	r5, r3
 800ac0e:	1d3b      	adds	r3, r7, #4
 800ac10:	791b      	ldrb	r3, [r3, #4]
 800ac12:	0018      	movs	r0, r3
 800ac14:	1d3b      	adds	r3, r7, #4
 800ac16:	795b      	ldrb	r3, [r3, #5]
 800ac18:	001c      	movs	r4, r3
 800ac1a:	4b11      	ldr	r3, [pc, #68]	@ (800ac60 <BMP280_get_measurement_values+0x108>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a12      	ldr	r2, [pc, #72]	@ (800ac68 <BMP280_get_measurement_values+0x110>)
 800ac20:	490e      	ldr	r1, [pc, #56]	@ (800ac5c <BMP280_get_measurement_values+0x104>)
 800ac22:	9302      	str	r3, [sp, #8]
 800ac24:	9401      	str	r4, [sp, #4]
 800ac26:	9000      	str	r0, [sp, #0]
 800ac28:	002b      	movs	r3, r5
 800ac2a:	2003      	movs	r0, #3
 800ac2c:	f008 f80c 	bl	8012c48 <CreateLine>
    SetAllBlueLED();
 800ac30:	f006 ff4e 	bl	8011ad0 <SetAllBlueLED>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800ac34:	230f      	movs	r3, #15
 800ac36:	18fb      	adds	r3, r7, r3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b25b      	sxtb	r3, r3
 800ac3c:	1e5a      	subs	r2, r3, #1
 800ac3e:	4193      	sbcs	r3, r2
 800ac40:	b2db      	uxtb	r3, r3
}
 800ac42:	0018      	movs	r0, r3
 800ac44:	46bd      	mov	sp, r7
 800ac46:	b004      	add	sp, #16
 800ac48:	bdb0      	pop	{r4, r5, r7, pc}
 800ac4a:	46c0      	nop			@ (mov r8, r8)
 800ac4c:	20000c3c 	.word	0x20000c3c
 800ac50:	0802b81c 	.word	0x0802b81c
 800ac54:	0802b7ec 	.word	0x0802b7ec
 800ac58:	0802b860 	.word	0x0802b860
 800ac5c:	0802b4fc 	.word	0x0802b4fc
 800ac60:	20000c38 	.word	0x20000c38
 800ac64:	0802b8a8 	.word	0x0802b8a8
 800ac68:	0802b8e4 	.word	0x0802b8e4

0800ac6c <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800ac72:	4b1e      	ldr	r3, [pc, #120]	@ (800acec <BMP280_calc_temperature+0x80>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	10da      	asrs	r2, r3, #3
 800ac7c:	4b1c      	ldr	r3, [pc, #112]	@ (800acf0 <BMP280_calc_temperature+0x84>)
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	1ad3      	subs	r3, r2, r3
 800ac84:	4a1a      	ldr	r2, [pc, #104]	@ (800acf0 <BMP280_calc_temperature+0x84>)
 800ac86:	2102      	movs	r1, #2
 800ac88:	5e52      	ldrsh	r2, [r2, r1]
 800ac8a:	4353      	muls	r3, r2
 800ac8c:	12db      	asrs	r3, r3, #11
 800ac8e:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	111b      	asrs	r3, r3, #4
 800ac94:	4a16      	ldr	r2, [pc, #88]	@ (800acf0 <BMP280_calc_temperature+0x84>)
 800ac96:	8812      	ldrh	r2, [r2, #0]
 800ac98:	1a9b      	subs	r3, r3, r2
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	1112      	asrs	r2, r2, #4
 800ac9e:	4914      	ldr	r1, [pc, #80]	@ (800acf0 <BMP280_calc_temperature+0x84>)
 800aca0:	8809      	ldrh	r1, [r1, #0]
 800aca2:	1a52      	subs	r2, r2, r1
 800aca4:	4353      	muls	r3, r2
 800aca6:	131b      	asrs	r3, r3, #12
 800aca8:	4a11      	ldr	r2, [pc, #68]	@ (800acf0 <BMP280_calc_temperature+0x84>)
 800acaa:	2104      	movs	r1, #4
 800acac:	5e52      	ldrsh	r2, [r2, r1]
 800acae:	4353      	muls	r3, r2
 800acb0:	139b      	asrs	r3, r3, #14
 800acb2:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	18d2      	adds	r2, r2, r3
 800acba:	4b0e      	ldr	r3, [pc, #56]	@ (800acf4 <BMP280_calc_temperature+0x88>)
 800acbc:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800acbe:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <BMP280_calc_temperature+0x88>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	0013      	movs	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	189b      	adds	r3, r3, r2
 800acc8:	3380      	adds	r3, #128	@ 0x80
 800acca:	121b      	asrs	r3, r3, #8
 800accc:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800acce:	68b8      	ldr	r0, [r7, #8]
 800acd0:	f7f6 fc7e 	bl	80015d0 <__aeabi_i2f>
 800acd4:	1c03      	adds	r3, r0, #0
 800acd6:	4908      	ldr	r1, [pc, #32]	@ (800acf8 <BMP280_calc_temperature+0x8c>)
 800acd8:	1c18      	adds	r0, r3, #0
 800acda:	f7f5 ff7b 	bl	8000bd4 <__aeabi_fdiv>
 800acde:	1c03      	adds	r3, r0, #0
 800ace0:	607b      	str	r3, [r7, #4]
  return airTemp;
 800ace2:	687b      	ldr	r3, [r7, #4]
}
 800ace4:	1c18      	adds	r0, r3, #0
 800ace6:	46bd      	mov	sp, r7
 800ace8:	b006      	add	sp, #24
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20000c38 	.word	0x20000c38
 800acf0:	20000c1c 	.word	0x20000c1c
 800acf4:	20000c34 	.word	0x20000c34
 800acf8:	42c80000 	.word	0x42c80000

0800acfc <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800ad02:	4b4e      	ldr	r3, [pc, #312]	@ (800ae3c <BMP280_calc_pressure+0x140>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800ad08:	4b4d      	ldr	r3, [pc, #308]	@ (800ae40 <BMP280_calc_pressure+0x144>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	105b      	asrs	r3, r3, #1
 800ad0e:	4a4d      	ldr	r2, [pc, #308]	@ (800ae44 <BMP280_calc_pressure+0x148>)
 800ad10:	4694      	mov	ip, r2
 800ad12:	4463      	add	r3, ip
 800ad14:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	109b      	asrs	r3, r3, #2
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	1092      	asrs	r2, r2, #2
 800ad1e:	4353      	muls	r3, r2
 800ad20:	12db      	asrs	r3, r3, #11
 800ad22:	4a49      	ldr	r2, [pc, #292]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800ad24:	2110      	movs	r1, #16
 800ad26:	5e52      	ldrsh	r2, [r2, r1]
 800ad28:	4353      	muls	r3, r2
 800ad2a:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800ad2c:	4b46      	ldr	r3, [pc, #280]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800ad2e:	220e      	movs	r2, #14
 800ad30:	5e9b      	ldrsh	r3, [r3, r2]
 800ad32:	001a      	movs	r2, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4353      	muls	r3, r2
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	18d3      	adds	r3, r2, r3
 800ad3e:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	109a      	asrs	r2, r3, #2
 800ad44:	4b40      	ldr	r3, [pc, #256]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800ad46:	210c      	movs	r1, #12
 800ad48:	5e5b      	ldrsh	r3, [r3, r1]
 800ad4a:	041b      	lsls	r3, r3, #16
 800ad4c:	18d3      	adds	r3, r2, r3
 800ad4e:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800ad50:	4b3d      	ldr	r3, [pc, #244]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800ad52:	220a      	movs	r2, #10
 800ad54:	5e9b      	ldrsh	r3, [r3, r2]
 800ad56:	0019      	movs	r1, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	109b      	asrs	r3, r3, #2
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	1092      	asrs	r2, r2, #2
 800ad60:	4353      	muls	r3, r2
 800ad62:	135b      	asrs	r3, r3, #13
 800ad64:	434b      	muls	r3, r1
 800ad66:	10da      	asrs	r2, r3, #3
 800ad68:	4b37      	ldr	r3, [pc, #220]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800ad6a:	2108      	movs	r1, #8
 800ad6c:	5e5b      	ldrsh	r3, [r3, r1]
 800ad6e:	0019      	movs	r1, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	434b      	muls	r3, r1
 800ad74:	105b      	asrs	r3, r3, #1
 800ad76:	18d3      	adds	r3, r2, r3
 800ad78:	149b      	asrs	r3, r3, #18
 800ad7a:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2280      	movs	r2, #128	@ 0x80
 800ad80:	0212      	lsls	r2, r2, #8
 800ad82:	4694      	mov	ip, r2
 800ad84:	4463      	add	r3, ip
 800ad86:	4a30      	ldr	r2, [pc, #192]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800ad88:	88d2      	ldrh	r2, [r2, #6]
 800ad8a:	4353      	muls	r3, r2
 800ad8c:	13db      	asrs	r3, r3, #15
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <BMP280_calc_pressure+0x9e>
    return 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	e04b      	b.n	800ae32 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2280      	movs	r2, #128	@ 0x80
 800ad9e:	0352      	lsls	r2, r2, #13
 800ada0:	1ad2      	subs	r2, r2, r3
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	131b      	asrs	r3, r3, #12
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	001a      	movs	r2, r3
 800adaa:	4b28      	ldr	r3, [pc, #160]	@ (800ae4c <BMP280_calc_pressure+0x150>)
 800adac:	4353      	muls	r3, r2
 800adae:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	db09      	blt.n	800adca <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	0011      	movs	r1, r2
 800adbe:	0018      	movs	r0, r3
 800adc0:	f7f5 f9f0 	bl	80001a4 <__udivsi3>
 800adc4:	0003      	movs	r3, r0
 800adc6:	617b      	str	r3, [r7, #20]
 800adc8:	e007      	b.n	800adda <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	0019      	movs	r1, r3
 800adce:	6978      	ldr	r0, [r7, #20]
 800add0:	f7f5 f9e8 	bl	80001a4 <__udivsi3>
 800add4:	0003      	movs	r3, r0
 800add6:	005b      	lsls	r3, r3, #1
 800add8:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800adda:	4b1b      	ldr	r3, [pc, #108]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800addc:	2216      	movs	r2, #22
 800adde:	5e9b      	ldrsh	r3, [r3, r2]
 800ade0:	0019      	movs	r1, r3
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	08db      	lsrs	r3, r3, #3
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	08d2      	lsrs	r2, r2, #3
 800adea:	4353      	muls	r3, r2
 800adec:	0b5b      	lsrs	r3, r3, #13
 800adee:	434b      	muls	r3, r1
 800adf0:	131b      	asrs	r3, r3, #12
 800adf2:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	089b      	lsrs	r3, r3, #2
 800adf8:	001a      	movs	r2, r3
 800adfa:	4b13      	ldr	r3, [pc, #76]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800adfc:	2114      	movs	r1, #20
 800adfe:	5e5b      	ldrsh	r3, [r3, r1]
 800ae00:	4353      	muls	r3, r2
 800ae02:	135b      	asrs	r3, r3, #13
 800ae04:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	18d3      	adds	r3, r2, r3
 800ae0c:	4a0e      	ldr	r2, [pc, #56]	@ (800ae48 <BMP280_calc_pressure+0x14c>)
 800ae0e:	2112      	movs	r1, #18
 800ae10:	5e52      	ldrsh	r2, [r2, r1]
 800ae12:	189b      	adds	r3, r3, r2
 800ae14:	111a      	asrs	r2, r3, #4
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	18d3      	adds	r3, r2, r3
 800ae1a:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	f7f6 fc23 	bl	8001668 <__aeabi_ui2f>
 800ae22:	1c03      	adds	r3, r0, #0
 800ae24:	490a      	ldr	r1, [pc, #40]	@ (800ae50 <BMP280_calc_pressure+0x154>)
 800ae26:	1c18      	adds	r0, r3, #0
 800ae28:	f7f5 fed4 	bl	8000bd4 <__aeabi_fdiv>
 800ae2c:	1c03      	adds	r3, r0, #0
 800ae2e:	607b      	str	r3, [r7, #4]
  return airhPa;
 800ae30:	687b      	ldr	r3, [r7, #4]
}
 800ae32:	1c18      	adds	r0, r3, #0
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b006      	add	sp, #24
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	20000c3c 	.word	0x20000c3c
 800ae40:	20000c34 	.word	0x20000c34
 800ae44:	ffff0600 	.word	0xffff0600
 800ae48:	20000c1c 	.word	0x20000c1c
 800ae4c:	00000c35 	.word	0x00000c35
 800ae50:	42c80000 	.word	0x42c80000

0800ae54 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800ae54:	b5b0      	push	{r4, r5, r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800ae5a:	4bba      	ldr	r3, [pc, #744]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f007 fe9c 	bl	8012b9c <TimestampIsReached>
 800ae64:	0003      	movs	r3, r0
 800ae66:	001a      	movs	r2, r3
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4053      	eors	r3, r2
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <BMP_Upkeep+0x24>
    return BMPState;
 800ae72:	4bb5      	ldr	r3, [pc, #724]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	e161      	b.n	800b13c <BMP_Upkeep+0x2e8>
  }
  switch(BMPState) {
 800ae78:	4bb3      	ldr	r3, [pc, #716]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b09      	cmp	r3, #9
 800ae7e:	d900      	bls.n	800ae82 <BMP_Upkeep+0x2e>
 800ae80:	e145      	b.n	800b10e <BMP_Upkeep+0x2ba>
 800ae82:	009a      	lsls	r2, r3, #2
 800ae84:	4bb1      	ldr	r3, [pc, #708]	@ (800b14c <BMP_Upkeep+0x2f8>)
 800ae86:	18d3      	adds	r3, r2, r3
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800ae8c:	4ab0      	ldr	r2, [pc, #704]	@ (800b150 <BMP_Upkeep+0x2fc>)
 800ae8e:	4bb1      	ldr	r3, [pc, #708]	@ (800b154 <BMP_Upkeep+0x300>)
 800ae90:	0019      	movs	r1, r3
 800ae92:	2003      	movs	r0, #3
 800ae94:	f007 fed8 	bl	8012c48 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800ae98:	f008 fc14 	bl	80136c4 <HAL_GetTick>
 800ae9c:	0003      	movs	r3, r0
 800ae9e:	4aae      	ldr	r2, [pc, #696]	@ (800b158 <BMP_Upkeep+0x304>)
 800aea0:	189a      	adds	r2, r3, r2
 800aea2:	4ba8      	ldr	r3, [pc, #672]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800aea4:	601a      	str	r2, [r3, #0]
    break;
 800aea6:	e147      	b.n	800b138 <BMP_Upkeep+0x2e4>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800aea8:	f001 ff98 	bl	800cddc <getSensorLock>
 800aeac:	1e03      	subs	r3, r0, #0
 800aeae:	d000      	beq.n	800aeb2 <BMP_Upkeep+0x5e>
 800aeb0:	e139      	b.n	800b126 <BMP_Upkeep+0x2d2>
      break;
    }
    setSensorLock(BMP280);
 800aeb2:	2003      	movs	r0, #3
 800aeb4:	f001 ff7e 	bl	800cdb4 <setSensorLock>
    BMP280_reset();
 800aeb8:	f7ff fb76 	bl	800a5a8 <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800aebc:	200a      	movs	r0, #10
 800aebe:	f008 fc0b 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 800aec2:	2000      	movs	r0, #0
 800aec4:	f001 ff76 	bl	800cdb4 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800aec8:	4b9f      	ldr	r3, [pc, #636]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800aeca:	2201      	movs	r2, #1
 800aecc:	701a      	strb	r2, [r3, #0]
    break;
 800aece:	e133      	b.n	800b138 <BMP_Upkeep+0x2e4>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800aed0:	f001 ff84 	bl	800cddc <getSensorLock>
 800aed4:	1e03      	subs	r3, r0, #0
 800aed6:	d000      	beq.n	800aeda <BMP_Upkeep+0x86>
 800aed8:	e127      	b.n	800b12a <BMP_Upkeep+0x2d6>
      break;
    }
    setSensorLock(BMP280);
 800aeda:	2003      	movs	r0, #3
 800aedc:	f001 ff6a 	bl	800cdb4 <setSensorLock>
    if (BMP280_set_config()) {
 800aee0:	f7ff fd96 	bl	800aa10 <BMP280_set_config>
 800aee4:	1e03      	subs	r3, r0, #0
 800aee6:	d003      	beq.n	800aef0 <BMP_Upkeep+0x9c>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800aee8:	4b97      	ldr	r3, [pc, #604]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800aeea:	2202      	movs	r2, #2
 800aeec:	701a      	strb	r2, [r3, #0]
 800aeee:	e00f      	b.n	800af10 <BMP_Upkeep+0xbc>
    }
    else {
      Error("Error while configuring BMP280");
 800aef0:	4a9a      	ldr	r2, [pc, #616]	@ (800b15c <BMP_Upkeep+0x308>)
 800aef2:	4b9b      	ldr	r3, [pc, #620]	@ (800b160 <BMP_Upkeep+0x30c>)
 800aef4:	0019      	movs	r1, r3
 800aef6:	2001      	movs	r0, #1
 800aef8:	f007 fea6 	bl	8012c48 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800aefc:	f008 fbe2 	bl	80136c4 <HAL_GetTick>
 800af00:	0003      	movs	r3, r0
 800af02:	4a98      	ldr	r2, [pc, #608]	@ (800b164 <BMP_Upkeep+0x310>)
 800af04:	189a      	adds	r2, r3, r2
 800af06:	4b8f      	ldr	r3, [pc, #572]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800af08:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800af0a:	4b8f      	ldr	r3, [pc, #572]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800af0c:	2208      	movs	r2, #8
 800af0e:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800af10:	200a      	movs	r0, #10
 800af12:	f008 fbe1 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 800af16:	2000      	movs	r0, #0
 800af18:	f001 ff4c 	bl	800cdb4 <setSensorLock>
  break;
 800af1c:	e10c      	b.n	800b138 <BMP_Upkeep+0x2e4>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800af1e:	f001 ff5d 	bl	800cddc <getSensorLock>
 800af22:	1e03      	subs	r3, r0, #0
 800af24:	d030      	beq.n	800af88 <BMP_Upkeep+0x134>
      uint8_t locktype = getSensorLock();
 800af26:	1dfc      	adds	r4, r7, #7
 800af28:	f001 ff58 	bl	800cddc <getSensorLock>
 800af2c:	0003      	movs	r3, r0
 800af2e:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800af30:	1dfb      	adds	r3, r7, #7
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d019      	beq.n	800af6c <BMP_Upkeep+0x118>
 800af38:	1dfb      	adds	r3, r7, #7
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d013      	beq.n	800af68 <BMP_Upkeep+0x114>
 800af40:	1dfb      	adds	r3, r7, #7
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b05      	cmp	r3, #5
 800af46:	d00d      	beq.n	800af64 <BMP_Upkeep+0x110>
 800af48:	1dfb      	adds	r3, r7, #7
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d007      	beq.n	800af60 <BMP_Upkeep+0x10c>
 800af50:	1dfb      	adds	r3, r7, #7
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b03      	cmp	r3, #3
 800af56:	d101      	bne.n	800af5c <BMP_Upkeep+0x108>
 800af58:	4b83      	ldr	r3, [pc, #524]	@ (800b168 <BMP_Upkeep+0x314>)
 800af5a:	e008      	b.n	800af6e <BMP_Upkeep+0x11a>
 800af5c:	4b83      	ldr	r3, [pc, #524]	@ (800b16c <BMP_Upkeep+0x318>)
 800af5e:	e006      	b.n	800af6e <BMP_Upkeep+0x11a>
 800af60:	4b83      	ldr	r3, [pc, #524]	@ (800b170 <BMP_Upkeep+0x31c>)
 800af62:	e004      	b.n	800af6e <BMP_Upkeep+0x11a>
 800af64:	4b83      	ldr	r3, [pc, #524]	@ (800b174 <BMP_Upkeep+0x320>)
 800af66:	e002      	b.n	800af6e <BMP_Upkeep+0x11a>
 800af68:	4b83      	ldr	r3, [pc, #524]	@ (800b178 <BMP_Upkeep+0x324>)
 800af6a:	e000      	b.n	800af6e <BMP_Upkeep+0x11a>
 800af6c:	4b83      	ldr	r3, [pc, #524]	@ (800b17c <BMP_Upkeep+0x328>)
 800af6e:	4a84      	ldr	r2, [pc, #528]	@ (800b180 <BMP_Upkeep+0x32c>)
 800af70:	4978      	ldr	r1, [pc, #480]	@ (800b154 <BMP_Upkeep+0x300>)
 800af72:	2003      	movs	r0, #3
 800af74:	f007 fe68 	bl	8012c48 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800af78:	f008 fba4 	bl	80136c4 <HAL_GetTick>
 800af7c:	0003      	movs	r3, r0
 800af7e:	3361      	adds	r3, #97	@ 0x61
 800af80:	001a      	movs	r2, r3
 800af82:	4b70      	ldr	r3, [pc, #448]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800af84:	601a      	str	r2, [r3, #0]
      break;
 800af86:	e0d7      	b.n	800b138 <BMP_Upkeep+0x2e4>
    }
    if (getSensorLock() == FREE) {
 800af88:	f001 ff28 	bl	800cddc <getSensorLock>
 800af8c:	1e03      	subs	r3, r0, #0
 800af8e:	d105      	bne.n	800af9c <BMP_Upkeep+0x148>
      HAL_Delay(10);
 800af90:	200a      	movs	r0, #10
 800af92:	f008 fba1 	bl	80136d8 <HAL_Delay>
      setSensorLock(BMP280);
 800af96:	2003      	movs	r0, #3
 800af98:	f001 ff0c 	bl	800cdb4 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800af9c:	f7ff fd5c 	bl	800aa58 <BMP280_set_mode>
 800afa0:	1e03      	subs	r3, r0, #0
 800afa2:	d003      	beq.n	800afac <BMP_Upkeep+0x158>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800afa4:	4b68      	ldr	r3, [pc, #416]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800afa6:	2205      	movs	r2, #5
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	e00f      	b.n	800afcc <BMP_Upkeep+0x178>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800afac:	4a75      	ldr	r2, [pc, #468]	@ (800b184 <BMP_Upkeep+0x330>)
 800afae:	4b6c      	ldr	r3, [pc, #432]	@ (800b160 <BMP_Upkeep+0x30c>)
 800afb0:	0019      	movs	r1, r3
 800afb2:	2001      	movs	r0, #1
 800afb4:	f007 fe48 	bl	8012c48 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800afb8:	f008 fb84 	bl	80136c4 <HAL_GetTick>
 800afbc:	0003      	movs	r3, r0
 800afbe:	4a69      	ldr	r2, [pc, #420]	@ (800b164 <BMP_Upkeep+0x310>)
 800afc0:	189a      	adds	r2, r3, r2
 800afc2:	4b60      	ldr	r3, [pc, #384]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800afc4:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800afc6:	4b60      	ldr	r3, [pc, #384]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800afc8:	2208      	movs	r2, #8
 800afca:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800afcc:	200a      	movs	r0, #10
 800afce:	f008 fb83 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 800afd2:	2000      	movs	r0, #0
 800afd4:	f001 feee 	bl	800cdb4 <setSensorLock>
    break;
 800afd8:	e0ae      	b.n	800b138 <BMP_Upkeep+0x2e4>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800afda:	f001 feff 	bl	800cddc <getSensorLock>
 800afde:	1e03      	subs	r3, r0, #0
 800afe0:	d000      	beq.n	800afe4 <BMP_Upkeep+0x190>
 800afe2:	e0a4      	b.n	800b12e <BMP_Upkeep+0x2da>
      break;
    }
    HAL_Delay(10);
 800afe4:	200a      	movs	r0, #10
 800afe6:	f008 fb77 	bl	80136d8 <HAL_Delay>
    setSensorLock(BMP280);
 800afea:	2003      	movs	r0, #3
 800afec:	f001 fee2 	bl	800cdb4 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800aff0:	f7ff fdb2 	bl	800ab58 <BMP280_get_measurement_values>
 800aff4:	1e03      	subs	r3, r0, #0
 800aff6:	d003      	beq.n	800b000 <BMP_Upkeep+0x1ac>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800aff8:	4b53      	ldr	r3, [pc, #332]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800affa:	2203      	movs	r2, #3
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	e00f      	b.n	800b020 <BMP_Upkeep+0x1cc>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800b000:	4a61      	ldr	r2, [pc, #388]	@ (800b188 <BMP_Upkeep+0x334>)
 800b002:	4b57      	ldr	r3, [pc, #348]	@ (800b160 <BMP_Upkeep+0x30c>)
 800b004:	0019      	movs	r1, r3
 800b006:	2001      	movs	r0, #1
 800b008:	f007 fe1e 	bl	8012c48 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b00c:	f008 fb5a 	bl	80136c4 <HAL_GetTick>
 800b010:	0003      	movs	r3, r0
 800b012:	4a54      	ldr	r2, [pc, #336]	@ (800b164 <BMP_Upkeep+0x310>)
 800b014:	189a      	adds	r2, r3, r2
 800b016:	4b4b      	ldr	r3, [pc, #300]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800b018:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b01a:	4b4b      	ldr	r3, [pc, #300]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800b01c:	2208      	movs	r2, #8
 800b01e:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b020:	200a      	movs	r0, #10
 800b022:	f008 fb59 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 800b026:	2000      	movs	r0, #0
 800b028:	f001 fec4 	bl	800cdb4 <setSensorLock>
  break;
 800b02c:	e084      	b.n	800b138 <BMP_Upkeep+0x2e4>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800b02e:	f7ff fe1d 	bl	800ac6c <BMP280_calc_temperature>
 800b032:	1c03      	adds	r3, r0, #0
 800b034:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800b036:	f7ff fe61 	bl	800acfc <BMP280_calc_pressure>
 800b03a:	1c03      	adds	r3, r0, #0
 800b03c:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800b03e:	4953      	ldr	r1, [pc, #332]	@ (800b18c <BMP_Upkeep+0x338>)
 800b040:	68b8      	ldr	r0, [r7, #8]
 800b042:	f7f5 fa89 	bl	8000558 <__aeabi_fcmpgt>
 800b046:	1e03      	subs	r3, r0, #0
 800b048:	d02b      	beq.n	800b0a2 <BMP_Upkeep+0x24e>
 800b04a:	4951      	ldr	r1, [pc, #324]	@ (800b190 <BMP_Upkeep+0x33c>)
 800b04c:	68b8      	ldr	r0, [r7, #8]
 800b04e:	f7f5 fa6f 	bl	8000530 <__aeabi_fcmplt>
 800b052:	1e03      	subs	r3, r0, #0
 800b054:	d025      	beq.n	800b0a2 <BMP_Upkeep+0x24e>
      sethPa(airhpa);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	1c18      	adds	r0, r3, #0
 800b05a:	f7f9 fb87 	bl	800476c <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f7f8 fa00 	bl	8003464 <__aeabi_f2d>
 800b064:	0004      	movs	r4, r0
 800b066:	000d      	movs	r5, r1
 800b068:	68b8      	ldr	r0, [r7, #8]
 800b06a:	f7f8 f9fb 	bl	8003464 <__aeabi_f2d>
 800b06e:	0002      	movs	r2, r0
 800b070:	000b      	movs	r3, r1
 800b072:	4848      	ldr	r0, [pc, #288]	@ (800b194 <BMP_Upkeep+0x340>)
 800b074:	4948      	ldr	r1, [pc, #288]	@ (800b198 <BMP_Upkeep+0x344>)
 800b076:	9202      	str	r2, [sp, #8]
 800b078:	9303      	str	r3, [sp, #12]
 800b07a:	9400      	str	r4, [sp, #0]
 800b07c:	9501      	str	r5, [sp, #4]
 800b07e:	0002      	movs	r2, r0
 800b080:	2002      	movs	r0, #2
 800b082:	f007 fde1 	bl	8012c48 <CreateLine>
      setBMP280(airtemp, airhpa);
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	1c11      	adds	r1, r2, #0
 800b08c:	1c18      	adds	r0, r3, #0
 800b08e:	f7f9 fb09 	bl	80046a4 <setBMP280>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 800b092:	f008 fb17 	bl	80136c4 <HAL_GetTick>
 800b096:	0003      	movs	r3, r0
 800b098:	4a40      	ldr	r2, [pc, #256]	@ (800b19c <BMP_Upkeep+0x348>)
 800b09a:	189a      	adds	r2, r3, r2
 800b09c:	4b29      	ldr	r3, [pc, #164]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	e00c      	b.n	800b0bc <BMP_Upkeep+0x268>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800b0a2:	4a3f      	ldr	r2, [pc, #252]	@ (800b1a0 <BMP_Upkeep+0x34c>)
 800b0a4:	4b2e      	ldr	r3, [pc, #184]	@ (800b160 <BMP_Upkeep+0x30c>)
 800b0a6:	0019      	movs	r1, r3
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	f007 fdcd 	bl	8012c48 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b0ae:	f008 fb09 	bl	80136c4 <HAL_GetTick>
 800b0b2:	0003      	movs	r3, r0
 800b0b4:	4a2b      	ldr	r2, [pc, #172]	@ (800b164 <BMP_Upkeep+0x310>)
 800b0b6:	189a      	adds	r2, r3, r2
 800b0b8:	4b22      	ldr	r3, [pc, #136]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800b0ba:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800b0bc:	4b22      	ldr	r3, [pc, #136]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800b0be:	2208      	movs	r2, #8
 800b0c0:	701a      	strb	r2, [r3, #0]
    break;
 800b0c2:	e039      	b.n	800b138 <BMP_Upkeep+0x2e4>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800b0c4:	4b20      	ldr	r3, [pc, #128]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800b0c6:	2209      	movs	r2, #9
 800b0c8:	701a      	strb	r2, [r3, #0]
    break;
 800b0ca:	e035      	b.n	800b138 <BMP_Upkeep+0x2e4>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800b0cc:	f001 fe86 	bl	800cddc <getSensorLock>
 800b0d0:	1e03      	subs	r3, r0, #0
 800b0d2:	d12e      	bne.n	800b132 <BMP_Upkeep+0x2de>
      break;
    }
    setSensorLock(BMP280);
 800b0d4:	2003      	movs	r0, #3
 800b0d6:	f001 fe6d 	bl	800cdb4 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800b0da:	f7ff fd11 	bl	800ab00 <BMP280_get_mode>
 800b0de:	0003      	movs	r3, r0
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d103      	bne.n	800b0ec <BMP_Upkeep+0x298>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b0e4:	4b18      	ldr	r3, [pc, #96]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800b0e6:	2205      	movs	r2, #5
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	e002      	b.n	800b0f2 <BMP_Upkeep+0x29e>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b0ec:	4b16      	ldr	r3, [pc, #88]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b0f2:	200a      	movs	r0, #10
 800b0f4:	f008 faf0 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	f001 fe5b 	bl	800cdb4 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800b0fe:	f008 fae1 	bl	80136c4 <HAL_GetTick>
 800b102:	0003      	movs	r3, r0
 800b104:	3317      	adds	r3, #23
 800b106:	001a      	movs	r2, r3
 800b108:	4b0e      	ldr	r3, [pc, #56]	@ (800b144 <BMP_Upkeep+0x2f0>)
 800b10a:	601a      	str	r2, [r3, #0]
    break;
 800b10c:	e014      	b.n	800b138 <BMP_Upkeep+0x2e4>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800b10e:	4b0e      	ldr	r3, [pc, #56]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800b110:	2200      	movs	r2, #0
 800b112:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800b114:	f001 fe62 	bl	800cddc <getSensorLock>
 800b118:	0003      	movs	r3, r0
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d10b      	bne.n	800b136 <BMP_Upkeep+0x2e2>
      setSensorLock(FREE);
 800b11e:	2000      	movs	r0, #0
 800b120:	f001 fe48 	bl	800cdb4 <setSensorLock>
    }
    break;
 800b124:	e007      	b.n	800b136 <BMP_Upkeep+0x2e2>
      break;
 800b126:	46c0      	nop			@ (mov r8, r8)
 800b128:	e006      	b.n	800b138 <BMP_Upkeep+0x2e4>
      break;
 800b12a:	46c0      	nop			@ (mov r8, r8)
 800b12c:	e004      	b.n	800b138 <BMP_Upkeep+0x2e4>
      break;
 800b12e:	46c0      	nop			@ (mov r8, r8)
 800b130:	e002      	b.n	800b138 <BMP_Upkeep+0x2e4>
      break;
 800b132:	46c0      	nop			@ (mov r8, r8)
 800b134:	e000      	b.n	800b138 <BMP_Upkeep+0x2e4>
    break;
 800b136:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800b138:	4b03      	ldr	r3, [pc, #12]	@ (800b148 <BMP_Upkeep+0x2f4>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
}
 800b13c:	0018      	movs	r0, r3
 800b13e:	46bd      	mov	sp, r7
 800b140:	b004      	add	sp, #16
 800b142:	bdb0      	pop	{r4, r5, r7, pc}
 800b144:	20000c40 	.word	0x20000c40
 800b148:	20000096 	.word	0x20000096
 800b14c:	0802d354 	.word	0x0802d354
 800b150:	0802b92c 	.word	0x0802b92c
 800b154:	0802b4fc 	.word	0x0802b4fc
 800b158:	002f9b80 	.word	0x002f9b80
 800b15c:	0802b968 	.word	0x0802b968
 800b160:	0802b7ec 	.word	0x0802b7ec
 800b164:	00002710 	.word	0x00002710
 800b168:	0802b988 	.word	0x0802b988
 800b16c:	0802b990 	.word	0x0802b990
 800b170:	0802b998 	.word	0x0802b998
 800b174:	0802b9a0 	.word	0x0802b9a0
 800b178:	0802b9a8 	.word	0x0802b9a8
 800b17c:	0802b9b0 	.word	0x0802b9b0
 800b180:	0802b9b8 	.word	0x0802b9b8
 800b184:	0802b9e0 	.word	0x0802b9e0
 800b188:	0802ba0c 	.word	0x0802ba0c
 800b18c:	44548000 	.word	0x44548000
 800b190:	44898000 	.word	0x44898000
 800b194:	0802ba44 	.word	0x0802ba44
 800b198:	0802b4dc 	.word	0x0802b4dc
 800b19c:	0000ea60 	.word	0x0000ea60
 800b1a0:	0802ba7c 	.word	0x0802ba7c

0800b1a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b1aa:	4b10      	ldr	r3, [pc, #64]	@ (800b1ec <MX_DMA_Init+0x48>)
 800b1ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b1ec <MX_DMA_Init+0x48>)
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1ec <MX_DMA_Init+0x48>)
 800b1b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	4013      	ands	r3, r2
 800b1be:	607b      	str	r3, [r7, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	200a      	movs	r0, #10
 800b1c8:	f008 ff20 	bl	801400c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800b1cc:	200a      	movs	r0, #10
 800b1ce:	f008 ff32 	bl	8014036 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2103      	movs	r1, #3
 800b1d6:	200b      	movs	r0, #11
 800b1d8:	f008 ff18 	bl	801400c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800b1dc:	200b      	movs	r0, #11
 800b1de:	f008 ff2a 	bl	8014036 <HAL_NVIC_EnableIRQ>

}
 800b1e2:	46c0      	nop			@ (mov r8, r8)
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	b002      	add	sp, #8
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	40021000 	.word	0x40021000

0800b1f0 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	1dbb      	adds	r3, r7, #6
 800b1fc:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800b1fe:	4b17      	ldr	r3, [pc, #92]	@ (800b25c <WriteUint8ArrayEeprom+0x6c>)
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b204:	f009 fa94 	bl	8014730 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800b208:	2316      	movs	r3, #22
 800b20a:	18fb      	adds	r3, r7, r3
 800b20c:	2200      	movs	r2, #0
 800b20e:	801a      	strh	r2, [r3, #0]
 800b210:	e015      	b.n	800b23e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800b212:	4b12      	ldr	r3, [pc, #72]	@ (800b25c <WriteUint8ArrayEeprom+0x6c>)
 800b214:	6819      	ldr	r1, [r3, #0]
 800b216:	2416      	movs	r4, #22
 800b218:	193b      	adds	r3, r7, r4
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	18d3      	adds	r3, r2, r3
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	001a      	movs	r2, r3
 800b224:	2000      	movs	r0, #0
 800b226:	f009 faeb 	bl	8014800 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800b22a:	4b0c      	ldr	r3, [pc, #48]	@ (800b25c <WriteUint8ArrayEeprom+0x6c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	4b0a      	ldr	r3, [pc, #40]	@ (800b25c <WriteUint8ArrayEeprom+0x6c>)
 800b232:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b234:	193b      	adds	r3, r7, r4
 800b236:	881a      	ldrh	r2, [r3, #0]
 800b238:	193b      	adds	r3, r7, r4
 800b23a:	3201      	adds	r2, #1
 800b23c:	801a      	strh	r2, [r3, #0]
 800b23e:	2316      	movs	r3, #22
 800b240:	18fa      	adds	r2, r7, r3
 800b242:	1dbb      	adds	r3, r7, #6
 800b244:	8812      	ldrh	r2, [r2, #0]
 800b246:	881b      	ldrh	r3, [r3, #0]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d3e2      	bcc.n	800b212 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b24c:	f009 fa9e 	bl	801478c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800b250:	4b02      	ldr	r3, [pc, #8]	@ (800b25c <WriteUint8ArrayEeprom+0x6c>)
 800b252:	681b      	ldr	r3, [r3, #0]
}
 800b254:	0018      	movs	r0, r3
 800b256:	46bd      	mov	sp, r7
 800b258:	b007      	add	sp, #28
 800b25a:	bd90      	pop	{r4, r7, pc}
 800b25c:	20000c64 	.word	0x20000c64

0800b260 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	0019      	movs	r1, r3
 800b26c:	1dbb      	adds	r3, r7, #6
 800b26e:	801a      	strh	r2, [r3, #0]
 800b270:	1d3b      	adds	r3, r7, #4
 800b272:	1c0a      	adds	r2, r1, #0
 800b274:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800b276:	1dba      	adds	r2, r7, #6
 800b278:	1d3b      	adds	r3, r7, #4
 800b27a:	8812      	ldrh	r2, [r2, #0]
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d806      	bhi.n	800b290 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800b282:	1dbb      	adds	r3, r7, #6
 800b284:	881a      	ldrh	r2, [r3, #0]
 800b286:	68b9      	ldr	r1, [r7, #8]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	0018      	movs	r0, r3
 800b28c:	f7ff ffb0 	bl	800b1f0 <WriteUint8ArrayEeprom>
    }
}
 800b290:	46c0      	nop			@ (mov r8, r8)
 800b292:	46bd      	mov	sp, r7
 800b294:	b004      	add	sp, #16
 800b296:	bd80      	pop	{r7, pc}

0800b298 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	1dbb      	adds	r3, r7, #6
 800b2a4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b2a6:	2316      	movs	r3, #22
 800b2a8:	18fb      	adds	r3, r7, r3
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	801a      	strh	r2, [r3, #0]
 800b2ae:	e010      	b.n	800b2d2 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800b2b0:	2016      	movs	r0, #22
 800b2b2:	183b      	adds	r3, r7, r0
 800b2b4:	881a      	ldrh	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	18d3      	adds	r3, r2, r3
 800b2ba:	0019      	movs	r1, r3
 800b2bc:	183b      	adds	r3, r7, r0
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	18d3      	adds	r3, r2, r3
 800b2c4:	780a      	ldrb	r2, [r1, #0]
 800b2c6:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b2c8:	183b      	adds	r3, r7, r0
 800b2ca:	881a      	ldrh	r2, [r3, #0]
 800b2cc:	183b      	adds	r3, r7, r0
 800b2ce:	3201      	adds	r2, #1
 800b2d0:	801a      	strh	r2, [r3, #0]
 800b2d2:	2316      	movs	r3, #22
 800b2d4:	18fa      	adds	r2, r7, r3
 800b2d6:	1dbb      	adds	r3, r7, #6
 800b2d8:	8812      	ldrh	r2, [r2, #0]
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d3e7      	bcc.n	800b2b0 <ReadUint8ArrayEEprom+0x18>
    }
}
 800b2e0:	46c0      	nop			@ (mov r8, r8)
 800b2e2:	46c0      	nop			@ (mov r8, r8)
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	b006      	add	sp, #24
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800b2ea:	b590      	push	{r4, r7, lr}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	000a      	movs	r2, r1
 800b2f4:	1cbb      	adds	r3, r7, #2
 800b2f6:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b2f8:	f009 fa1a 	bl	8014730 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800b2fc:	230e      	movs	r3, #14
 800b2fe:	18fb      	adds	r3, r7, r3
 800b300:	2200      	movs	r2, #0
 800b302:	801a      	strh	r2, [r3, #0]
 800b304:	e00c      	b.n	800b320 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800b306:	240e      	movs	r4, #14
 800b308:	193b      	adds	r3, r7, r4
 800b30a:	881a      	ldrh	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	18d3      	adds	r3, r2, r3
 800b310:	0018      	movs	r0, r3
 800b312:	f009 fa49 	bl	80147a8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800b316:	193b      	adds	r3, r7, r4
 800b318:	193a      	adds	r2, r7, r4
 800b31a:	8812      	ldrh	r2, [r2, #0]
 800b31c:	3204      	adds	r2, #4
 800b31e:	801a      	strh	r2, [r3, #0]
 800b320:	230e      	movs	r3, #14
 800b322:	18fa      	adds	r2, r7, r3
 800b324:	1cbb      	adds	r3, r7, #2
 800b326:	8812      	ldrh	r2, [r2, #0]
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d3eb      	bcc.n	800b306 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b32e:	f009 fa2d 	bl	801478c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b332:	46c0      	nop			@ (mov r8, r8)
 800b334:	46bd      	mov	sp, r7
 800b336:	b005      	add	sp, #20
 800b338:	bd90      	pop	{r4, r7, pc}
	...

0800b33c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b34c:	d901      	bls.n	800b352 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800b34e:	237f      	movs	r3, #127	@ 0x7f
 800b350:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800b352:	2017      	movs	r0, #23
 800b354:	183b      	adds	r3, r7, r0
 800b356:	490d      	ldr	r1, [pc, #52]	@ (800b38c <accessLUT10log10+0x50>)
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	188a      	adds	r2, r1, r2
 800b35c:	7812      	ldrb	r2, [r2, #0]
 800b35e:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800b360:	0001      	movs	r1, r0
 800b362:	187b      	adds	r3, r7, r1
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	2206      	movs	r2, #6
 800b368:	4113      	asrs	r3, r2
 800b36a:	001a      	movs	r2, r3
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800b370:	187b      	adds	r3, r7, r1
 800b372:	781a      	ldrb	r2, [r3, #0]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2106      	movs	r1, #6
 800b37a:	408b      	lsls	r3, r1
 800b37c:	1ad2      	subs	r2, r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]
}
 800b382:	46c0      	nop			@ (mov r8, r8)
 800b384:	46bd      	mov	sp, r7
 800b386:	b006      	add	sp, #24
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	46c0      	nop			@ (mov r8, r8)
 800b38c:	0802d37c 	.word	0x0802d37c

0800b390 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800b390:	b5b0      	push	{r4, r5, r7, lr}
 800b392:	b090      	sub	sp, #64	@ 0x40
 800b394:	af00      	add	r7, sp, #0
 800b396:	6138      	str	r0, [r7, #16]
 800b398:	6179      	str	r1, [r7, #20]
 800b39a:	60fa      	str	r2, [r7, #12]
 800b39c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800b39e:	2308      	movs	r3, #8
 800b3a0:	001a      	movs	r2, r3
 800b3a2:	3a20      	subs	r2, #32
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	db03      	blt.n	800b3b0 <efficient10log10+0x20>
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	4091      	lsls	r1, r2
 800b3ac:	000d      	movs	r5, r1
 800b3ae:	e008      	b.n	800b3c2 <efficient10log10+0x32>
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	1ad2      	subs	r2, r2, r3
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	40d1      	lsrs	r1, r2
 800b3b8:	000a      	movs	r2, r1
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	4099      	lsls	r1, r3
 800b3be:	000d      	movs	r5, r1
 800b3c0:	4315      	orrs	r5, r2
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	409a      	lsls	r2, r3
 800b3c6:	0014      	movs	r4, r2
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	4252      	negs	r2, r2
 800b3cc:	17d3      	asrs	r3, r2, #31
 800b3ce:	1912      	adds	r2, r2, r4
 800b3d0:	416b      	adcs	r3, r5
 800b3d2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3d4:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800b3d6:	2336      	movs	r3, #54	@ 0x36
 800b3d8:	2208      	movs	r2, #8
 800b3da:	189b      	adds	r3, r3, r2
 800b3dc:	19db      	adds	r3, r3, r7
 800b3de:	2200      	movs	r2, #0
 800b3e0:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b3e2:	e017      	b.n	800b414 <efficient10log10+0x84>
    {
        P = P >> 1;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	07db      	lsls	r3, r3, #31
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	0852      	lsrs	r2, r2, #1
 800b3ec:	603a      	str	r2, [r7, #0]
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	431a      	orrs	r2, r3
 800b3f2:	603a      	str	r2, [r7, #0]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	085b      	lsrs	r3, r3, #1
 800b3f8:	607b      	str	r3, [r7, #4]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	687c      	ldr	r4, [r7, #4]
 800b3fe:	613b      	str	r3, [r7, #16]
 800b400:	617c      	str	r4, [r7, #20]
        bShift++;
 800b402:	2136      	movs	r1, #54	@ 0x36
 800b404:	2008      	movs	r0, #8
 800b406:	180b      	adds	r3, r1, r0
 800b408:	19db      	adds	r3, r3, r7
 800b40a:	881a      	ldrh	r2, [r3, #0]
 800b40c:	180b      	adds	r3, r1, r0
 800b40e:	19db      	adds	r3, r3, r7
 800b410:	3201      	adds	r2, #1
 800b412:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b418:	429a      	cmp	r2, r3
 800b41a:	d8e3      	bhi.n	800b3e4 <efficient10log10+0x54>
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b420:	429a      	cmp	r2, r3
 800b422:	d103      	bne.n	800b42c <efficient10log10+0x9c>
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	429a      	cmp	r2, r3
 800b42a:	d8db      	bhi.n	800b3e4 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	2308      	movs	r3, #8
 800b430:	3b01      	subs	r3, #1
 800b432:	2101      	movs	r1, #1
 800b434:	4099      	lsls	r1, r3
 800b436:	000b      	movs	r3, r1
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800b444:	231c      	movs	r3, #28
 800b446:	2408      	movs	r4, #8
 800b448:	191b      	adds	r3, r3, r4
 800b44a:	19da      	adds	r2, r3, r7
 800b44c:	2320      	movs	r3, #32
 800b44e:	191b      	adds	r3, r3, r4
 800b450:	19d9      	adds	r1, r3, r7
 800b452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b454:	0018      	movs	r0, r3
 800b456:	f7ff ff71 	bl	800b33c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b45a:	2215      	movs	r2, #21
 800b45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b45e:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800b460:	2036      	movs	r0, #54	@ 0x36
 800b462:	1902      	adds	r2, r0, r4
 800b464:	19d2      	adds	r2, r2, r7
 800b466:	8812      	ldrh	r2, [r2, #0]
 800b468:	2103      	movs	r1, #3
 800b46a:	434a      	muls	r2, r1
 800b46c:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b46e:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800b470:	0021      	movs	r1, r4
 800b472:	1843      	adds	r3, r0, r1
 800b474:	19db      	adds	r3, r3, r7
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	2201      	movs	r2, #1
 800b47a:	4353      	muls	r3, r2
 800b47c:	2203      	movs	r2, #3
 800b47e:	4113      	asrs	r3, r2
 800b480:	001a      	movs	r2, r3
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800b486:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800b488:	2314      	movs	r3, #20
 800b48a:	185b      	adds	r3, r3, r1
 800b48c:	19da      	adds	r2, r3, r7
 800b48e:	2318      	movs	r3, #24
 800b490:	185b      	adds	r3, r3, r1
 800b492:	19db      	adds	r3, r3, r7
 800b494:	0011      	movs	r1, r2
 800b496:	0018      	movs	r0, r3
 800b498:	f000 f80a 	bl	800b4b0 <correctIntFracNumber>
    integerPart[0] = intPart;
 800b49c:	6a3a      	ldr	r2, [r7, #32]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800b4a2:	69fa      	ldr	r2, [r7, #28]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	601a      	str	r2, [r3, #0]
}
 800b4a8:	46c0      	nop			@ (mov r8, r8)
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	b010      	add	sp, #64	@ 0x40
 800b4ae:	bdb0      	pop	{r4, r5, r7, pc}

0800b4b0 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800b4ba:	e00a      	b.n	800b4d2 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3b0a      	subs	r3, #10
 800b4cc:	001a      	movs	r2, r3
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b09      	cmp	r3, #9
 800b4d8:	dcf0      	bgt.n	800b4bc <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800b4da:	e00a      	b.n	800b4f2 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	1e5a      	subs	r2, r3, #1
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	330a      	adds	r3, #10
 800b4ec:	001a      	movs	r2, r3
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3309      	adds	r3, #9
 800b4f8:	dbf0      	blt.n	800b4dc <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	da0f      	bge.n	800b522 <correctIntFracNumber+0x72>
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	dd0b      	ble.n	800b522 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3b0a      	subs	r3, #10
 800b51a:	001a      	movs	r2, r3
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800b520:	e012      	b.n	800b548 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	dd0e      	ble.n	800b548 <correctIntFracNumber+0x98>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	da0a      	bge.n	800b548 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	1e5a      	subs	r2, r3, #1
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330a      	adds	r3, #10
 800b542:	001a      	movs	r2, r3
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	601a      	str	r2, [r3, #0]
}
 800b548:	46c0      	nop			@ (mov r8, r8)
 800b54a:	46bd      	mov	sp, r7
 800b54c:	b002      	add	sp, #8
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b550:	b590      	push	{r4, r7, lr}
 800b552:	b08b      	sub	sp, #44	@ 0x2c
 800b554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b556:	2414      	movs	r4, #20
 800b558:	193b      	adds	r3, r7, r4
 800b55a:	0018      	movs	r0, r3
 800b55c:	2314      	movs	r3, #20
 800b55e:	001a      	movs	r2, r3
 800b560:	2100      	movs	r1, #0
 800b562:	f019 fdc1 	bl	80250e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b566:	4b8a      	ldr	r3, [pc, #552]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b56a:	4b89      	ldr	r3, [pc, #548]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b56c:	2104      	movs	r1, #4
 800b56e:	430a      	orrs	r2, r1
 800b570:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b572:	4b87      	ldr	r3, [pc, #540]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b576:	2204      	movs	r2, #4
 800b578:	4013      	ands	r3, r2
 800b57a:	613b      	str	r3, [r7, #16]
 800b57c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b57e:	4b84      	ldr	r3, [pc, #528]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b582:	4b83      	ldr	r3, [pc, #524]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b584:	2180      	movs	r1, #128	@ 0x80
 800b586:	430a      	orrs	r2, r1
 800b588:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b58a:	4b81      	ldr	r3, [pc, #516]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58e:	2280      	movs	r2, #128	@ 0x80
 800b590:	4013      	ands	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b596:	4b7e      	ldr	r3, [pc, #504]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b59a:	4b7d      	ldr	r3, [pc, #500]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b59c:	2101      	movs	r1, #1
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b5a2:	4b7b      	ldr	r3, [pc, #492]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	60bb      	str	r3, [r7, #8]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5ae:	4b78      	ldr	r3, [pc, #480]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b2:	4b77      	ldr	r3, [pc, #476]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b5b4:	2102      	movs	r1, #2
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b5ba:	4b75      	ldr	r3, [pc, #468]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5be:	2202      	movs	r2, #2
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	607b      	str	r3, [r7, #4]
 800b5c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5c6:	4b72      	ldr	r3, [pc, #456]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ca:	4b71      	ldr	r3, [pc, #452]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b5cc:	2108      	movs	r1, #8
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b5d2:	4b6f      	ldr	r3, [pc, #444]	@ (800b790 <MX_GPIO_Init+0x240>)
 800b5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d6:	2208      	movs	r2, #8
 800b5d8:	4013      	ands	r3, r2
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800b5de:	4b6d      	ldr	r3, [pc, #436]	@ (800b794 <MX_GPIO_Init+0x244>)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	0018      	movs	r0, r3
 800b5e6:	f009 fafe 	bl	8014be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800b5ea:	4b6a      	ldr	r3, [pc, #424]	@ (800b794 <MX_GPIO_Init+0x244>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	2102      	movs	r1, #2
 800b5f0:	0018      	movs	r0, r3
 800b5f2:	f009 faf8 	bl	8014be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800b5f6:	4968      	ldr	r1, [pc, #416]	@ (800b798 <MX_GPIO_Init+0x248>)
 800b5f8:	4b68      	ldr	r3, [pc, #416]	@ (800b79c <MX_GPIO_Init+0x24c>)
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	f009 faf2 	bl	8014be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800b602:	2380      	movs	r3, #128	@ 0x80
 800b604:	011b      	lsls	r3, r3, #4
 800b606:	4866      	ldr	r0, [pc, #408]	@ (800b7a0 <MX_GPIO_Init+0x250>)
 800b608:	2201      	movs	r2, #1
 800b60a:	0019      	movs	r1, r3
 800b60c:	f009 faeb 	bl	8014be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800b610:	2380      	movs	r3, #128	@ 0x80
 800b612:	015b      	lsls	r3, r3, #5
 800b614:	4862      	ldr	r0, [pc, #392]	@ (800b7a0 <MX_GPIO_Init+0x250>)
 800b616:	2200      	movs	r2, #0
 800b618:	0019      	movs	r1, r3
 800b61a:	f009 fae4 	bl	8014be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800b61e:	193b      	adds	r3, r7, r4
 800b620:	4a60      	ldr	r2, [pc, #384]	@ (800b7a4 <MX_GPIO_Init+0x254>)
 800b622:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b624:	193b      	adds	r3, r7, r4
 800b626:	2203      	movs	r2, #3
 800b628:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b62a:	193b      	adds	r3, r7, r4
 800b62c:	2200      	movs	r2, #0
 800b62e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b630:	193b      	adds	r3, r7, r4
 800b632:	4a5b      	ldr	r2, [pc, #364]	@ (800b7a0 <MX_GPIO_Init+0x250>)
 800b634:	0019      	movs	r1, r3
 800b636:	0010      	movs	r0, r2
 800b638:	f009 f93a 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800b63c:	193b      	adds	r3, r7, r4
 800b63e:	2203      	movs	r2, #3
 800b640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b642:	193b      	adds	r3, r7, r4
 800b644:	2201      	movs	r2, #1
 800b646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b648:	193b      	adds	r3, r7, r4
 800b64a:	2200      	movs	r2, #0
 800b64c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b64e:	193b      	adds	r3, r7, r4
 800b650:	2200      	movs	r2, #0
 800b652:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b654:	193b      	adds	r3, r7, r4
 800b656:	4a4f      	ldr	r2, [pc, #316]	@ (800b794 <MX_GPIO_Init+0x244>)
 800b658:	0019      	movs	r1, r3
 800b65a:	0010      	movs	r0, r2
 800b65c:	f009 f928 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800b660:	193b      	adds	r3, r7, r4
 800b662:	2270      	movs	r2, #112	@ 0x70
 800b664:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b666:	193b      	adds	r3, r7, r4
 800b668:	2203      	movs	r2, #3
 800b66a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b66c:	193b      	adds	r3, r7, r4
 800b66e:	2200      	movs	r2, #0
 800b670:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b672:	193a      	adds	r2, r7, r4
 800b674:	23a0      	movs	r3, #160	@ 0xa0
 800b676:	05db      	lsls	r3, r3, #23
 800b678:	0011      	movs	r1, r2
 800b67a:	0018      	movs	r0, r3
 800b67c:	f009 f918 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800b680:	193b      	adds	r3, r7, r4
 800b682:	22c0      	movs	r2, #192	@ 0xc0
 800b684:	0052      	lsls	r2, r2, #1
 800b686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b688:	193b      	adds	r3, r7, r4
 800b68a:	2200      	movs	r2, #0
 800b68c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b68e:	193b      	adds	r3, r7, r4
 800b690:	2200      	movs	r2, #0
 800b692:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b694:	193a      	adds	r2, r7, r4
 800b696:	23a0      	movs	r3, #160	@ 0xa0
 800b698:	05db      	lsls	r3, r3, #23
 800b69a:	0011      	movs	r1, r2
 800b69c:	0018      	movs	r0, r3
 800b69e:	f009 f907 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800b6a2:	193b      	adds	r3, r7, r4
 800b6a4:	4a3c      	ldr	r2, [pc, #240]	@ (800b798 <MX_GPIO_Init+0x248>)
 800b6a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b6a8:	193b      	adds	r3, r7, r4
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ae:	193b      	adds	r3, r7, r4
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6b4:	193b      	adds	r3, r7, r4
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6ba:	193b      	adds	r3, r7, r4
 800b6bc:	4a37      	ldr	r2, [pc, #220]	@ (800b79c <MX_GPIO_Init+0x24c>)
 800b6be:	0019      	movs	r1, r3
 800b6c0:	0010      	movs	r0, r2
 800b6c2:	f009 f8f5 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800b6c6:	193b      	adds	r3, r7, r4
 800b6c8:	4a37      	ldr	r2, [pc, #220]	@ (800b7a8 <MX_GPIO_Init+0x258>)
 800b6ca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b6cc:	193b      	adds	r3, r7, r4
 800b6ce:	2203      	movs	r2, #3
 800b6d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d2:	193b      	adds	r3, r7, r4
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6d8:	193b      	adds	r3, r7, r4
 800b6da:	4a30      	ldr	r2, [pc, #192]	@ (800b79c <MX_GPIO_Init+0x24c>)
 800b6dc:	0019      	movs	r1, r3
 800b6de:	0010      	movs	r0, r2
 800b6e0:	f009 f8e6 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800b6e4:	0021      	movs	r1, r4
 800b6e6:	187b      	adds	r3, r7, r1
 800b6e8:	2280      	movs	r2, #128	@ 0x80
 800b6ea:	0092      	lsls	r2, r2, #2
 800b6ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b6ee:	000c      	movs	r4, r1
 800b6f0:	193b      	adds	r3, r7, r4
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6f6:	193b      	adds	r3, r7, r4
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800b6fc:	193b      	adds	r3, r7, r4
 800b6fe:	4a28      	ldr	r2, [pc, #160]	@ (800b7a0 <MX_GPIO_Init+0x250>)
 800b700:	0019      	movs	r1, r3
 800b702:	0010      	movs	r0, r2
 800b704:	f009 f8d4 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800b708:	193b      	adds	r3, r7, r4
 800b70a:	2280      	movs	r2, #128	@ 0x80
 800b70c:	0212      	lsls	r2, r2, #8
 800b70e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b710:	193b      	adds	r3, r7, r4
 800b712:	2288      	movs	r2, #136	@ 0x88
 800b714:	0352      	lsls	r2, r2, #13
 800b716:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b718:	193b      	adds	r3, r7, r4
 800b71a:	2200      	movs	r2, #0
 800b71c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800b71e:	193a      	adds	r2, r7, r4
 800b720:	23a0      	movs	r3, #160	@ 0xa0
 800b722:	05db      	lsls	r3, r3, #23
 800b724:	0011      	movs	r1, r2
 800b726:	0018      	movs	r0, r3
 800b728:	f009 f8c2 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800b72c:	0021      	movs	r1, r4
 800b72e:	187b      	adds	r3, r7, r1
 800b730:	22c0      	movs	r2, #192	@ 0xc0
 800b732:	0152      	lsls	r2, r2, #5
 800b734:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b736:	000c      	movs	r4, r1
 800b738:	193b      	adds	r3, r7, r4
 800b73a:	2201      	movs	r2, #1
 800b73c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b73e:	193b      	adds	r3, r7, r4
 800b740:	2200      	movs	r2, #0
 800b742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b744:	193b      	adds	r3, r7, r4
 800b746:	2200      	movs	r2, #0
 800b748:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b74a:	193b      	adds	r3, r7, r4
 800b74c:	4a14      	ldr	r2, [pc, #80]	@ (800b7a0 <MX_GPIO_Init+0x250>)
 800b74e:	0019      	movs	r1, r3
 800b750:	0010      	movs	r0, r2
 800b752:	f009 f8ad 	bl	80148b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800b756:	0021      	movs	r1, r4
 800b758:	187b      	adds	r3, r7, r1
 800b75a:	2204      	movs	r2, #4
 800b75c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b75e:	187b      	adds	r3, r7, r1
 800b760:	2200      	movs	r2, #0
 800b762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b764:	187b      	adds	r3, r7, r1
 800b766:	2201      	movs	r2, #1
 800b768:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800b76a:	187b      	adds	r3, r7, r1
 800b76c:	4a0f      	ldr	r2, [pc, #60]	@ (800b7ac <MX_GPIO_Init+0x25c>)
 800b76e:	0019      	movs	r1, r3
 800b770:	0010      	movs	r0, r2
 800b772:	f009 f89d 	bl	80148b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800b776:	2200      	movs	r2, #0
 800b778:	2100      	movs	r1, #0
 800b77a:	2007      	movs	r0, #7
 800b77c:	f008 fc46 	bl	801400c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800b780:	2007      	movs	r0, #7
 800b782:	f008 fc58 	bl	8014036 <HAL_NVIC_EnableIRQ>

}
 800b786:	46c0      	nop			@ (mov r8, r8)
 800b788:	46bd      	mov	sp, r7
 800b78a:	b00b      	add	sp, #44	@ 0x2c
 800b78c:	bd90      	pop	{r4, r7, pc}
 800b78e:	46c0      	nop			@ (mov r8, r8)
 800b790:	40021000 	.word	0x40021000
 800b794:	50001c00 	.word	0x50001c00
 800b798:	00000301 	.word	0x00000301
 800b79c:	50000400 	.word	0x50000400
 800b7a0:	50000800 	.word	0x50000800
 800b7a4:	0000200c 	.word	0x0000200c
 800b7a8:	0000403e 	.word	0x0000403e
 800b7ac:	50000c00 	.word	0x50000c00

0800b7b0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2100      	movs	r1, #0
 800b7be:	0018      	movs	r0, r3
 800b7c0:	f010 f884 	bl	801b8cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2108      	movs	r1, #8
 800b7c8:	0018      	movs	r0, r3
 800b7ca:	f010 f87f 	bl	801b8cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	210c      	movs	r1, #12
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	f010 f87a 	bl	801b8cc <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800b7d8:	2380      	movs	r3, #128	@ 0x80
 800b7da:	05db      	lsls	r3, r3, #23
 800b7dc:	22fa      	movs	r2, #250	@ 0xfa
 800b7de:	0112      	lsls	r2, r2, #4
 800b7e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800b7e2:	2380      	movs	r3, #128	@ 0x80
 800b7e4:	05db      	lsls	r3, r3, #23
 800b7e6:	22fa      	movs	r2, #250	@ 0xfa
 800b7e8:	0112      	lsls	r2, r2, #4
 800b7ea:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800b7ec:	2380      	movs	r3, #128	@ 0x80
 800b7ee:	05db      	lsls	r3, r3, #23
 800b7f0:	22fa      	movs	r2, #250	@ 0xfa
 800b7f2:	0112      	lsls	r2, r2, #4
 800b7f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800b7f6:	2380      	movs	r3, #128	@ 0x80
 800b7f8:	05db      	lsls	r3, r3, #23
 800b7fa:	22fa      	movs	r2, #250	@ 0xfa
 800b7fc:	0112      	lsls	r2, r2, #4
 800b7fe:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2100      	movs	r1, #0
 800b804:	0018      	movs	r0, r3
 800b806:	f010 f861 	bl	801b8cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2104      	movs	r1, #4
 800b80e:	0018      	movs	r0, r3
 800b810:	f010 f85c 	bl	801b8cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2108      	movs	r1, #8
 800b818:	0018      	movs	r0, r3
 800b81a:	f010 f857 	bl	801b8cc <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800b81e:	4b0a      	ldr	r3, [pc, #40]	@ (800b848 <GPIO_InitPWMLEDs+0x98>)
 800b820:	22fa      	movs	r2, #250	@ 0xfa
 800b822:	0112      	lsls	r2, r2, #4
 800b824:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800b826:	4b08      	ldr	r3, [pc, #32]	@ (800b848 <GPIO_InitPWMLEDs+0x98>)
 800b828:	22fa      	movs	r2, #250	@ 0xfa
 800b82a:	0112      	lsls	r2, r2, #4
 800b82c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800b82e:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <GPIO_InitPWMLEDs+0x98>)
 800b830:	22fa      	movs	r2, #250	@ 0xfa
 800b832:	0112      	lsls	r2, r2, #4
 800b834:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800b836:	4b04      	ldr	r3, [pc, #16]	@ (800b848 <GPIO_InitPWMLEDs+0x98>)
 800b838:	22fa      	movs	r2, #250	@ 0xfa
 800b83a:	0112      	lsls	r2, r2, #4
 800b83c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800b83e:	46c0      	nop			@ (mov r8, r8)
 800b840:	46bd      	mov	sp, r7
 800b842:	b002      	add	sp, #8
 800b844:	bd80      	pop	{r7, pc}
 800b846:	46c0      	nop			@ (mov r8, r8)
 800b848:	40000400 	.word	0x40000400

0800b84c <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b852:	1d3b      	adds	r3, r7, #4
 800b854:	0018      	movs	r0, r3
 800b856:	2314      	movs	r3, #20
 800b858:	001a      	movs	r2, r3
 800b85a:	2100      	movs	r1, #0
 800b85c:	f019 fc44 	bl	80250e8 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800b860:	1d3b      	adds	r3, r7, #4
 800b862:	2205      	movs	r2, #5
 800b864:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b866:	1d3b      	adds	r3, r7, #4
 800b868:	2203      	movs	r2, #3
 800b86a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b86c:	1d3b      	adds	r3, r7, #4
 800b86e:	2200      	movs	r2, #0
 800b870:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b872:	1d3a      	adds	r2, r7, #4
 800b874:	23a0      	movs	r3, #160	@ 0xa0
 800b876:	05db      	lsls	r3, r3, #23
 800b878:	0011      	movs	r1, r2
 800b87a:	0018      	movs	r0, r3
 800b87c:	f009 f818 	bl	80148b0 <HAL_GPIO_Init>
}
 800b880:	46c0      	nop			@ (mov r8, r8)
 800b882:	46bd      	mov	sp, r7
 800b884:	b006      	add	sp, #24
 800b886:	bd80      	pop	{r7, pc}

0800b888 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800b88c:	4b1b      	ldr	r3, [pc, #108]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b88e:	4a1c      	ldr	r2, [pc, #112]	@ (800b900 <MX_I2C1_Init+0x78>)
 800b890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800b892:	4b1a      	ldr	r3, [pc, #104]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b894:	4a1b      	ldr	r2, [pc, #108]	@ (800b904 <MX_I2C1_Init+0x7c>)
 800b896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800b898:	4b18      	ldr	r3, [pc, #96]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b89e:	4b17      	ldr	r3, [pc, #92]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b8a4:	4b15      	ldr	r3, [pc, #84]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800b8aa:	4b14      	ldr	r3, [pc, #80]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b8b0:	4b12      	ldr	r3, [pc, #72]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b8b6:	4b11      	ldr	r3, [pc, #68]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b8c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f009 f9c7 	bl	8014c58 <HAL_I2C_Init>
 800b8ca:	1e03      	subs	r3, r0, #0
 800b8cc:	d001      	beq.n	800b8d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800b8ce:	f000 fda7 	bl	800c420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	f00c f830 	bl	801793c <HAL_I2CEx_ConfigAnalogFilter>
 800b8dc:	1e03      	subs	r3, r0, #0
 800b8de:	d001      	beq.n	800b8e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800b8e0:	f000 fd9e 	bl	800c420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800b8e4:	4b05      	ldr	r3, [pc, #20]	@ (800b8fc <MX_I2C1_Init+0x74>)
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	f00c f873 	bl	80179d4 <HAL_I2CEx_ConfigDigitalFilter>
 800b8ee:	1e03      	subs	r3, r0, #0
 800b8f0:	d001      	beq.n	800b8f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800b8f2:	f000 fd95 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800b8f6:	46c0      	nop			@ (mov r8, r8)
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20000c68 	.word	0x20000c68
 800b900:	40005400 	.word	0x40005400
 800b904:	00503d58 	.word	0x00503d58

0800b908 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800b90c:	4b1b      	ldr	r3, [pc, #108]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b90e:	4a1c      	ldr	r2, [pc, #112]	@ (800b980 <MX_I2C2_Init+0x78>)
 800b910:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800b912:	4b1a      	ldr	r3, [pc, #104]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b914:	4a1b      	ldr	r2, [pc, #108]	@ (800b984 <MX_I2C2_Init+0x7c>)
 800b916:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800b918:	4b18      	ldr	r3, [pc, #96]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b91e:	4b17      	ldr	r3, [pc, #92]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b920:	2201      	movs	r2, #1
 800b922:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b924:	4b15      	ldr	r3, [pc, #84]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b926:	2200      	movs	r2, #0
 800b928:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800b92a:	4b14      	ldr	r3, [pc, #80]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b930:	4b12      	ldr	r3, [pc, #72]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b932:	2200      	movs	r2, #0
 800b934:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b936:	4b11      	ldr	r3, [pc, #68]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b938:	2200      	movs	r2, #0
 800b93a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b93c:	4b0f      	ldr	r3, [pc, #60]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b93e:	2200      	movs	r2, #0
 800b940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b942:	4b0e      	ldr	r3, [pc, #56]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b944:	0018      	movs	r0, r3
 800b946:	f009 f987 	bl	8014c58 <HAL_I2C_Init>
 800b94a:	1e03      	subs	r3, r0, #0
 800b94c:	d001      	beq.n	800b952 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800b94e:	f000 fd67 	bl	800c420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b952:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b954:	2100      	movs	r1, #0
 800b956:	0018      	movs	r0, r3
 800b958:	f00b fff0 	bl	801793c <HAL_I2CEx_ConfigAnalogFilter>
 800b95c:	1e03      	subs	r3, r0, #0
 800b95e:	d001      	beq.n	800b964 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800b960:	f000 fd5e 	bl	800c420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800b964:	4b05      	ldr	r3, [pc, #20]	@ (800b97c <MX_I2C2_Init+0x74>)
 800b966:	2100      	movs	r1, #0
 800b968:	0018      	movs	r0, r3
 800b96a:	f00c f833 	bl	80179d4 <HAL_I2CEx_ConfigDigitalFilter>
 800b96e:	1e03      	subs	r3, r0, #0
 800b970:	d001      	beq.n	800b976 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800b972:	f000 fd55 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800b976:	46c0      	nop			@ (mov r8, r8)
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	20000cbc 	.word	0x20000cbc
 800b980:	40005800 	.word	0x40005800
 800b984:	00503d58 	.word	0x00503d58

0800b988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b988:	b590      	push	{r4, r7, lr}
 800b98a:	b08b      	sub	sp, #44	@ 0x2c
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b990:	2414      	movs	r4, #20
 800b992:	193b      	adds	r3, r7, r4
 800b994:	0018      	movs	r0, r3
 800b996:	2314      	movs	r3, #20
 800b998:	001a      	movs	r2, r3
 800b99a:	2100      	movs	r1, #0
 800b99c:	f019 fba4 	bl	80250e8 <memset>
  if(i2cHandle->Instance==I2C1)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a5d      	ldr	r2, [pc, #372]	@ (800bb1c <HAL_I2C_MspInit+0x194>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d000      	beq.n	800b9ac <HAL_I2C_MspInit+0x24>
 800b9aa:	e083      	b.n	800bab4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9ac:	4b5c      	ldr	r3, [pc, #368]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800b9ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b0:	4b5b      	ldr	r3, [pc, #364]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800b9b2:	2102      	movs	r1, #2
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9b8:	4b59      	ldr	r3, [pc, #356]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800b9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9bc:	2202      	movs	r2, #2
 800b9be:	4013      	ands	r3, r2
 800b9c0:	613b      	str	r3, [r7, #16]
 800b9c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b9c4:	0021      	movs	r1, r4
 800b9c6:	187b      	adds	r3, r7, r1
 800b9c8:	22c0      	movs	r2, #192	@ 0xc0
 800b9ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b9cc:	187b      	adds	r3, r7, r1
 800b9ce:	2212      	movs	r2, #18
 800b9d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9d2:	187b      	adds	r3, r7, r1
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9d8:	187b      	adds	r3, r7, r1
 800b9da:	2203      	movs	r2, #3
 800b9dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800b9de:	187b      	adds	r3, r7, r1
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b9e4:	187b      	adds	r3, r7, r1
 800b9e6:	4a4f      	ldr	r2, [pc, #316]	@ (800bb24 <HAL_I2C_MspInit+0x19c>)
 800b9e8:	0019      	movs	r1, r3
 800b9ea:	0010      	movs	r0, r2
 800b9ec:	f008 ff60 	bl	80148b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b9f0:	4b4b      	ldr	r3, [pc, #300]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800b9f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9f4:	4b4a      	ldr	r3, [pc, #296]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800b9f6:	2180      	movs	r1, #128	@ 0x80
 800b9f8:	0389      	lsls	r1, r1, #14
 800b9fa:	430a      	orrs	r2, r1
 800b9fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800b9fe:	4b4a      	ldr	r3, [pc, #296]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba00:	4a4a      	ldr	r2, [pc, #296]	@ (800bb2c <HAL_I2C_MspInit+0x1a4>)
 800ba02:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800ba04:	4b48      	ldr	r3, [pc, #288]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba06:	2206      	movs	r2, #6
 800ba08:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba0a:	4b47      	ldr	r3, [pc, #284]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ba10:	4b45      	ldr	r3, [pc, #276]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ba16:	4b44      	ldr	r3, [pc, #272]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba18:	2280      	movs	r2, #128	@ 0x80
 800ba1a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba1c:	4b42      	ldr	r3, [pc, #264]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba22:	4b41      	ldr	r3, [pc, #260]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800ba28:	4b3f      	ldr	r3, [pc, #252]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ba2e:	4b3e      	ldr	r3, [pc, #248]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800ba34:	4b3c      	ldr	r3, [pc, #240]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba36:	0018      	movs	r0, r3
 800ba38:	f008 fb1e 	bl	8014078 <HAL_DMA_Init>
 800ba3c:	1e03      	subs	r3, r0, #0
 800ba3e:	d001      	beq.n	800ba44 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800ba40:	f000 fcee 	bl	800c420 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a38      	ldr	r2, [pc, #224]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba48:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ba4a:	4b37      	ldr	r3, [pc, #220]	@ (800bb28 <HAL_I2C_MspInit+0x1a0>)
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800ba50:	4b37      	ldr	r3, [pc, #220]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba52:	4a38      	ldr	r2, [pc, #224]	@ (800bb34 <HAL_I2C_MspInit+0x1ac>)
 800ba54:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800ba56:	4b36      	ldr	r3, [pc, #216]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba58:	2206      	movs	r2, #6
 800ba5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ba5c:	4b34      	ldr	r3, [pc, #208]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba5e:	2210      	movs	r2, #16
 800ba60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ba62:	4b33      	ldr	r3, [pc, #204]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ba68:	4b31      	ldr	r3, [pc, #196]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba6a:	2280      	movs	r2, #128	@ 0x80
 800ba6c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba6e:	4b30      	ldr	r3, [pc, #192]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba74:	4b2e      	ldr	r3, [pc, #184]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800ba7a:	4b2d      	ldr	r3, [pc, #180]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ba80:	4b2b      	ldr	r3, [pc, #172]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800ba86:	4b2a      	ldr	r3, [pc, #168]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba88:	0018      	movs	r0, r3
 800ba8a:	f008 faf5 	bl	8014078 <HAL_DMA_Init>
 800ba8e:	1e03      	subs	r3, r0, #0
 800ba90:	d001      	beq.n	800ba96 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800ba92:	f000 fcc5 	bl	800c420 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a25      	ldr	r2, [pc, #148]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba9a:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba9c:	4b24      	ldr	r3, [pc, #144]	@ (800bb30 <HAL_I2C_MspInit+0x1a8>)
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800baa2:	2200      	movs	r2, #0
 800baa4:	2100      	movs	r1, #0
 800baa6:	2017      	movs	r0, #23
 800baa8:	f008 fab0 	bl	801400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800baac:	2017      	movs	r0, #23
 800baae:	f008 fac2 	bl	8014036 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800bab2:	e02e      	b.n	800bb12 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a1f      	ldr	r2, [pc, #124]	@ (800bb38 <HAL_I2C_MspInit+0x1b0>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d129      	bne.n	800bb12 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800babe:	4b18      	ldr	r3, [pc, #96]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800bac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac2:	4b17      	ldr	r3, [pc, #92]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800bac4:	2102      	movs	r1, #2
 800bac6:	430a      	orrs	r2, r1
 800bac8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800baca:	4b15      	ldr	r3, [pc, #84]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800bacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bace:	2202      	movs	r2, #2
 800bad0:	4013      	ands	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bad6:	2114      	movs	r1, #20
 800bad8:	187b      	adds	r3, r7, r1
 800bada:	22c0      	movs	r2, #192	@ 0xc0
 800badc:	0112      	lsls	r2, r2, #4
 800bade:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bae0:	187b      	adds	r3, r7, r1
 800bae2:	2212      	movs	r2, #18
 800bae4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae6:	187b      	adds	r3, r7, r1
 800bae8:	2200      	movs	r2, #0
 800baea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baec:	187b      	adds	r3, r7, r1
 800baee:	2203      	movs	r2, #3
 800baf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800baf2:	187b      	adds	r3, r7, r1
 800baf4:	2206      	movs	r2, #6
 800baf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800baf8:	187b      	adds	r3, r7, r1
 800bafa:	4a0a      	ldr	r2, [pc, #40]	@ (800bb24 <HAL_I2C_MspInit+0x19c>)
 800bafc:	0019      	movs	r1, r3
 800bafe:	0010      	movs	r0, r2
 800bb00:	f008 fed6 	bl	80148b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800bb04:	4b06      	ldr	r3, [pc, #24]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800bb06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb08:	4b05      	ldr	r3, [pc, #20]	@ (800bb20 <HAL_I2C_MspInit+0x198>)
 800bb0a:	2180      	movs	r1, #128	@ 0x80
 800bb0c:	03c9      	lsls	r1, r1, #15
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bb12:	46c0      	nop			@ (mov r8, r8)
 800bb14:	46bd      	mov	sp, r7
 800bb16:	b00b      	add	sp, #44	@ 0x2c
 800bb18:	bd90      	pop	{r4, r7, pc}
 800bb1a:	46c0      	nop			@ (mov r8, r8)
 800bb1c:	40005400 	.word	0x40005400
 800bb20:	40021000 	.word	0x40021000
 800bb24:	50000400 	.word	0x50000400
 800bb28:	20000d10 	.word	0x20000d10
 800bb2c:	40020030 	.word	0x40020030
 800bb30:	20000d58 	.word	0x20000d58
 800bb34:	4002001c 	.word	0x4002001c
 800bb38:	40005800 	.word	0x40005800

0800bb3c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800bb40:	4b10      	ldr	r3, [pc, #64]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb42:	4a11      	ldr	r2, [pc, #68]	@ (800bb88 <MX_I2S2_Init+0x4c>)
 800bb44:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800bb46:	4b0f      	ldr	r3, [pc, #60]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb48:	22c0      	movs	r2, #192	@ 0xc0
 800bb4a:	0092      	lsls	r2, r2, #2
 800bb4c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800bb4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb50:	2200      	movs	r2, #0
 800bb52:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800bb54:	4b0b      	ldr	r3, [pc, #44]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb56:	2203      	movs	r2, #3
 800bb58:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800bb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800bb60:	4b08      	ldr	r3, [pc, #32]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb62:	22fa      	movs	r2, #250	@ 0xfa
 800bb64:	0192      	lsls	r2, r2, #6
 800bb66:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800bb68:	4b06      	ldr	r3, [pc, #24]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800bb6e:	4b05      	ldr	r3, [pc, #20]	@ (800bb84 <MX_I2S2_Init+0x48>)
 800bb70:	0018      	movs	r0, r3
 800bb72:	f00b ff7b 	bl	8017a6c <HAL_I2S_Init>
 800bb76:	1e03      	subs	r3, r0, #0
 800bb78:	d001      	beq.n	800bb7e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800bb7a:	f000 fc51 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800bb7e:	46c0      	nop			@ (mov r8, r8)
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20000da0 	.word	0x20000da0
 800bb88:	40003800 	.word	0x40003800

0800bb8c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b089      	sub	sp, #36	@ 0x24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb94:	240c      	movs	r4, #12
 800bb96:	193b      	adds	r3, r7, r4
 800bb98:	0018      	movs	r0, r3
 800bb9a:	2314      	movs	r3, #20
 800bb9c:	001a      	movs	r2, r3
 800bb9e:	2100      	movs	r1, #0
 800bba0:	f019 faa2 	bl	80250e8 <memset>
  if(i2sHandle->Instance==SPI2)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a2d      	ldr	r2, [pc, #180]	@ (800bc60 <HAL_I2S_MspInit+0xd4>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d154      	bne.n	800bc58 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bbae:	4b2d      	ldr	r3, [pc, #180]	@ (800bc64 <HAL_I2S_MspInit+0xd8>)
 800bbb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbb2:	4b2c      	ldr	r3, [pc, #176]	@ (800bc64 <HAL_I2S_MspInit+0xd8>)
 800bbb4:	2180      	movs	r1, #128	@ 0x80
 800bbb6:	01c9      	lsls	r1, r1, #7
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bbbc:	4b29      	ldr	r3, [pc, #164]	@ (800bc64 <HAL_I2S_MspInit+0xd8>)
 800bbbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc0:	4b28      	ldr	r3, [pc, #160]	@ (800bc64 <HAL_I2S_MspInit+0xd8>)
 800bbc2:	2102      	movs	r1, #2
 800bbc4:	430a      	orrs	r2, r1
 800bbc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bbc8:	4b26      	ldr	r3, [pc, #152]	@ (800bc64 <HAL_I2S_MspInit+0xd8>)
 800bbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbcc:	2202      	movs	r2, #2
 800bbce:	4013      	ands	r3, r2
 800bbd0:	60bb      	str	r3, [r7, #8]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800bbd4:	193b      	adds	r3, r7, r4
 800bbd6:	22b0      	movs	r2, #176	@ 0xb0
 800bbd8:	0212      	lsls	r2, r2, #8
 800bbda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbdc:	0021      	movs	r1, r4
 800bbde:	187b      	adds	r3, r7, r1
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbe4:	187b      	adds	r3, r7, r1
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbea:	187b      	adds	r3, r7, r1
 800bbec:	2200      	movs	r2, #0
 800bbee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800bbf0:	187b      	adds	r3, r7, r1
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbf6:	187b      	adds	r3, r7, r1
 800bbf8:	4a1b      	ldr	r2, [pc, #108]	@ (800bc68 <HAL_I2S_MspInit+0xdc>)
 800bbfa:	0019      	movs	r1, r3
 800bbfc:	0010      	movs	r0, r2
 800bbfe:	f008 fe57 	bl	80148b0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800bc02:	4b1a      	ldr	r3, [pc, #104]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc04:	4a1a      	ldr	r2, [pc, #104]	@ (800bc70 <HAL_I2S_MspInit+0xe4>)
 800bc06:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800bc08:	4b18      	ldr	r3, [pc, #96]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bc0e:	4b17      	ldr	r3, [pc, #92]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bc14:	4b15      	ldr	r3, [pc, #84]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bc1a:	4b14      	ldr	r3, [pc, #80]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc1c:	2280      	movs	r2, #128	@ 0x80
 800bc1e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800bc20:	4b12      	ldr	r3, [pc, #72]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc22:	2280      	movs	r2, #128	@ 0x80
 800bc24:	0052      	lsls	r2, r2, #1
 800bc26:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800bc28:	4b10      	ldr	r3, [pc, #64]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc2a:	2280      	movs	r2, #128	@ 0x80
 800bc2c:	00d2      	lsls	r2, r2, #3
 800bc2e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800bc30:	4b0e      	ldr	r3, [pc, #56]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc32:	2220      	movs	r2, #32
 800bc34:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800bc36:	4b0d      	ldr	r3, [pc, #52]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800bc3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc3e:	0018      	movs	r0, r3
 800bc40:	f008 fa1a 	bl	8014078 <HAL_DMA_Init>
 800bc44:	1e03      	subs	r3, r0, #0
 800bc46:	d001      	beq.n	800bc4c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800bc48:	f000 fbea 	bl	800c420 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a07      	ldr	r2, [pc, #28]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc50:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc52:	4b06      	ldr	r3, [pc, #24]	@ (800bc6c <HAL_I2S_MspInit+0xe0>)
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800bc58:	46c0      	nop			@ (mov r8, r8)
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	b009      	add	sp, #36	@ 0x24
 800bc5e:	bd90      	pop	{r4, r7, pc}
 800bc60:	40003800 	.word	0x40003800
 800bc64:	40021000 	.word	0x40021000
 800bc68:	50000400 	.word	0x50000400
 800bc6c:	20000ddc 	.word	0x20000ddc
 800bc70:	40020044 	.word	0x40020044

0800bc74 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800bc74:	b580      	push	{r7, lr}
 800bc76:	af00      	add	r7, sp, #0
  testDone = true;
 800bc78:	4b14      	ldr	r3, [pc, #80]	@ (800bccc <SetTestDone+0x58>)
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800bc7e:	23fa      	movs	r3, #250	@ 0xfa
 800bc80:	005b      	lsls	r3, r3, #1
 800bc82:	0018      	movs	r0, r3
 800bc84:	f007 fd28 	bl	80136d8 <HAL_Delay>
  SetDBLED(false, false, true);
 800bc88:	2201      	movs	r2, #1
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	f005 fd3b 	bl	8011708 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800bc92:	4a0f      	ldr	r2, [pc, #60]	@ (800bcd0 <SetTestDone+0x5c>)
 800bc94:	23fa      	movs	r3, #250	@ 0xfa
 800bc96:	0119      	lsls	r1, r3, #4
 800bc98:	23fa      	movs	r3, #250	@ 0xfa
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	f005 fcff 	bl	80116a0 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800bca2:	4a0b      	ldr	r2, [pc, #44]	@ (800bcd0 <SetTestDone+0x5c>)
 800bca4:	23fa      	movs	r3, #250	@ 0xfa
 800bca6:	0119      	lsls	r1, r3, #4
 800bca8:	23fa      	movs	r3, #250	@ 0xfa
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	0018      	movs	r0, r3
 800bcae:	f005 fd75 	bl	801179c <SetVocLED>
  HAL_Delay(500);
 800bcb2:	23fa      	movs	r3, #250	@ 0xfa
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	0018      	movs	r0, r3
 800bcb8:	f007 fd0e 	bl	80136d8 <HAL_Delay>
  SetLEDsOff();
 800bcbc:	f005 feae 	bl	8011a1c <SetLEDsOff>
  InitDone();
 800bcc0:	f005 fc42 	bl	8011548 <InitDone>
}
 800bcc4:	46c0      	nop			@ (mov r8, r8)
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	46c0      	nop			@ (mov r8, r8)
 800bccc:	20000e24 	.word	0x20000e24
 800bcd0:	00000bb8 	.word	0x00000bb8

0800bcd4 <FlashLEDs>:

void FlashLEDs(){
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800bcda:	1dfb      	adds	r3, r7, #7
 800bcdc:	2200      	movs	r2, #0
 800bcde:	701a      	strb	r2, [r3, #0]
 800bce0:	e021      	b.n	800bd26 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800bce2:	2201      	movs	r2, #1
 800bce4:	2101      	movs	r1, #1
 800bce6:	2001      	movs	r0, #1
 800bce8:	f005 fd0e 	bl	8011708 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800bcec:	4a12      	ldr	r2, [pc, #72]	@ (800bd38 <FlashLEDs+0x64>)
 800bcee:	23fa      	movs	r3, #250	@ 0xfa
 800bcf0:	0119      	lsls	r1, r3, #4
 800bcf2:	23fa      	movs	r3, #250	@ 0xfa
 800bcf4:	011b      	lsls	r3, r3, #4
 800bcf6:	0018      	movs	r0, r3
 800bcf8:	f005 fcd2 	bl	80116a0 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800bcfc:	4a0e      	ldr	r2, [pc, #56]	@ (800bd38 <FlashLEDs+0x64>)
 800bcfe:	23fa      	movs	r3, #250	@ 0xfa
 800bd00:	0119      	lsls	r1, r3, #4
 800bd02:	23fa      	movs	r3, #250	@ 0xfa
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	0018      	movs	r0, r3
 800bd08:	f005 fd48 	bl	801179c <SetVocLED>
    HAL_Delay(250);
 800bd0c:	20fa      	movs	r0, #250	@ 0xfa
 800bd0e:	f007 fce3 	bl	80136d8 <HAL_Delay>
    SetLEDsOff();
 800bd12:	f005 fe83 	bl	8011a1c <SetLEDsOff>
    HAL_Delay(250);
 800bd16:	20fa      	movs	r0, #250	@ 0xfa
 800bd18:	f007 fcde 	bl	80136d8 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800bd1c:	1dfb      	adds	r3, r7, #7
 800bd1e:	781a      	ldrb	r2, [r3, #0]
 800bd20:	1dfb      	adds	r3, r7, #7
 800bd22:	3201      	adds	r2, #1
 800bd24:	701a      	strb	r2, [r3, #0]
 800bd26:	1dfb      	adds	r3, r7, #7
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2b04      	cmp	r3, #4
 800bd2c:	d9d9      	bls.n	800bce2 <FlashLEDs+0xe>
  }
}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	46c0      	nop			@ (mov r8, r8)
 800bd32:	46bd      	mov	sp, r7
 800bd34:	b002      	add	sp, #8
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	00000bb8 	.word	0x00000bb8

0800bd3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800bd42:	f007 fc59 	bl	80135f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800bd46:	f000 fa1b 	bl	800c180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800bd4a:	f7ff fc01 	bl	800b550 <MX_GPIO_Init>
  MX_DMA_Init();
 800bd4e:	f7ff fa29 	bl	800b1a4 <MX_DMA_Init>
  MX_I2C1_Init();
 800bd52:	f7ff fd99 	bl	800b888 <MX_I2C1_Init>
  MX_I2S2_Init();
 800bd56:	f7ff fef1 	bl	800bb3c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800bd5a:	f006 fd87 	bl	801286c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800bd5e:	f7ff fdd3 	bl	800b908 <MX_I2C2_Init>
  MX_TIM2_Init();
 800bd62:	f006 fb7b 	bl	801245c <MX_TIM2_Init>
  MX_TIM3_Init();
 800bd66:	f006 fbed 	bl	8012544 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800bd6a:	f006 fdaf 	bl	80128cc <MX_USART4_UART_Init>
  MX_ADC_Init();
 800bd6e:	f7fd fef1 	bl	8009b54 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800bd72:	f015 fea5 	bl	8021ac0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800bd76:	f001 fb59 	bl	800d42c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800bd7a:	f006 fd41 	bl	8012800 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800bd7e:	f006 fc5f 	bl	8012640 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800bd82:	4ac5      	ldr	r2, [pc, #788]	@ (800c098 <main+0x35c>)
 800bd84:	4bc5      	ldr	r3, [pc, #788]	@ (800c09c <main+0x360>)
 800bd86:	0011      	movs	r1, r2
 800bd88:	0018      	movs	r0, r3
 800bd8a:	f7ff fd11 	bl	800b7b0 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800bd8e:	f006 ffdf 	bl	8012d50 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800bd92:	f006 f9eb 	bl	801216c <Battery_Upkeep>
 800bd96:	0003      	movs	r3, r0
 800bd98:	001a      	movs	r2, r3
 800bd9a:	4bc1      	ldr	r3, [pc, #772]	@ (800c0a0 <main+0x364>)
 800bd9c:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800bd9e:	4bc0      	ldr	r3, [pc, #768]	@ (800c0a0 <main+0x364>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d113      	bne.n	800bdce <main+0x92>
    SetAllREDLED();
 800bda6:	f005 fe55 	bl	8011a54 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800bdaa:	f7fc ffd9 	bl	8008d60 <ReadBatteryVoltage>
 800bdae:	1c03      	adds	r3, r0, #0
 800bdb0:	1c18      	adds	r0, r3, #0
 800bdb2:	f7f7 fb57 	bl	8003464 <__aeabi_f2d>
 800bdb6:	0002      	movs	r2, r0
 800bdb8:	000b      	movs	r3, r1
 800bdba:	48ba      	ldr	r0, [pc, #744]	@ (800c0a4 <main+0x368>)
 800bdbc:	49ba      	ldr	r1, [pc, #744]	@ (800c0a8 <main+0x36c>)
 800bdbe:	9200      	str	r2, [sp, #0]
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	0002      	movs	r2, r0
 800bdc4:	2002      	movs	r0, #2
 800bdc6:	f006 ff3f 	bl	8012c48 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800bdca:	f7fd fbef 	bl	80095ac <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800bdce:	f7fd f89d 	bl	8008f0c <UserButton_Pressed>
 800bdd2:	1e03      	subs	r3, r0, #0
 800bdd4:	d004      	beq.n	800bde0 <main+0xa4>
    EnableESPProg();
 800bdd6:	f015 ff43 	bl	8021c60 <EnableESPProg>
    ESP_Programming = true;
 800bdda:	4bb4      	ldr	r3, [pc, #720]	@ (800c0ac <main+0x370>)
 800bddc:	2201      	movs	r2, #1
 800bdde:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800bde0:	2003      	movs	r0, #3
 800bde2:	f006 ff9b 	bl	8012d1c <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800bde6:	49b2      	ldr	r1, [pc, #712]	@ (800c0b0 <main+0x374>)
 800bde8:	4bb2      	ldr	r3, [pc, #712]	@ (800c0b4 <main+0x378>)
 800bdea:	2201      	movs	r2, #1
 800bdec:	0018      	movs	r0, r3
 800bdee:	f010 f9cd 	bl	801c18c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800bdf2:	4bb1      	ldr	r3, [pc, #708]	@ (800c0b8 <main+0x37c>)
 800bdf4:	0018      	movs	r0, r3
 800bdf6:	f7fd fcb3 	bl	8009760 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800bdfa:	4ab0      	ldr	r2, [pc, #704]	@ (800c0bc <main+0x380>)
 800bdfc:	49b0      	ldr	r1, [pc, #704]	@ (800c0c0 <main+0x384>)
 800bdfe:	48b1      	ldr	r0, [pc, #708]	@ (800c0c4 <main+0x388>)
 800be00:	230b      	movs	r3, #11
 800be02:	f004 fd17 	bl	8010834 <soundInit>
 800be06:	0003      	movs	r3, r0
 800be08:	001a      	movs	r2, r3
 800be0a:	2301      	movs	r3, #1
 800be0c:	4053      	eors	r3, r2
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d005      	beq.n	800be20 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800be14:	4aac      	ldr	r2, [pc, #688]	@ (800c0c8 <main+0x38c>)
 800be16:	4bad      	ldr	r3, [pc, #692]	@ (800c0cc <main+0x390>)
 800be18:	21f9      	movs	r1, #249	@ 0xf9
 800be1a:	0018      	movs	r0, r3
 800be1c:	f006 ffcc 	bl	8012db8 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800be20:	4bab      	ldr	r3, [pc, #684]	@ (800c0d0 <main+0x394>)
 800be22:	4aac      	ldr	r2, [pc, #688]	@ (800c0d4 <main+0x398>)
 800be24:	49a6      	ldr	r1, [pc, #664]	@ (800c0c0 <main+0x384>)
 800be26:	48ac      	ldr	r0, [pc, #688]	@ (800c0d8 <main+0x39c>)
 800be28:	f000 fbec 	bl	800c604 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800be2c:	f007 fc4a 	bl	80136c4 <HAL_GetTick>
 800be30:	0003      	movs	r3, r0
 800be32:	4aaa      	ldr	r2, [pc, #680]	@ (800c0dc <main+0x3a0>)
 800be34:	189a      	adds	r2, r3, r2
 800be36:	4baa      	ldr	r3, [pc, #680]	@ (800c0e0 <main+0x3a4>)
 800be38:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800be3a:	f7fd f847 	bl	8008ecc <Check_USB_PowerOn>
 800be3e:	0003      	movs	r3, r0
 800be40:	1e5a      	subs	r2, r3, #1
 800be42:	4193      	sbcs	r3, r2
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2201      	movs	r2, #1
 800be48:	4053      	eors	r3, r2
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	1c1a      	adds	r2, r3, #0
 800be4e:	2301      	movs	r3, #1
 800be50:	4013      	ands	r3, r2
 800be52:	b2da      	uxtb	r2, r3
 800be54:	4ba3      	ldr	r3, [pc, #652]	@ (800c0e4 <main+0x3a8>)
 800be56:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800be58:	f7fd f838 	bl	8008ecc <Check_USB_PowerOn>
 800be5c:	1e03      	subs	r3, r0, #0
 800be5e:	d003      	beq.n	800be68 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800be60:	4ba1      	ldr	r3, [pc, #644]	@ (800c0e8 <main+0x3ac>)
 800be62:	0018      	movs	r0, r3
 800be64:	f7fc f986 	bl	8008174 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800be68:	4ba0      	ldr	r3, [pc, #640]	@ (800c0ec <main+0x3b0>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	0018      	movs	r0, r3
 800be6e:	f006 fe95 	bl	8012b9c <TimestampIsReached>
 800be72:	1e03      	subs	r3, r0, #0
 800be74:	d00e      	beq.n	800be94 <main+0x158>
      charge = Battery_Upkeep();
 800be76:	f006 f979 	bl	801216c <Battery_Upkeep>
 800be7a:	0003      	movs	r3, r0
 800be7c:	001a      	movs	r2, r3
 800be7e:	4b88      	ldr	r3, [pc, #544]	@ (800c0a0 <main+0x364>)
 800be80:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800be82:	f007 fc1f 	bl	80136c4 <HAL_GetTick>
 800be86:	0003      	movs	r3, r0
 800be88:	4a99      	ldr	r2, [pc, #612]	@ (800c0f0 <main+0x3b4>)
 800be8a:	189a      	adds	r2, r3, r2
 800be8c:	4b97      	ldr	r3, [pc, #604]	@ (800c0ec <main+0x3b0>)
 800be8e:	601a      	str	r2, [r3, #0]
      showTime();
 800be90:	f7fd f84c 	bl	8008f2c <showTime>

    }
    configCheck();
 800be94:	f005 ffc6 	bl	8011e24 <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800be98:	4b96      	ldr	r3, [pc, #600]	@ (800c0f4 <main+0x3b8>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800be9e:	4b80      	ldr	r3, [pc, #512]	@ (800c0a0 <main+0x364>)
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d003      	beq.n	800beae <main+0x172>
 800bea6:	4b7e      	ldr	r3, [pc, #504]	@ (800c0a0 <main+0x364>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d104      	bne.n	800beb8 <main+0x17c>
      FlashLEDs();
 800beae:	f7ff ff11 	bl	800bcd4 <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800beb2:	4b91      	ldr	r3, [pc, #580]	@ (800c0f8 <main+0x3bc>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800beb8:	4b79      	ldr	r3, [pc, #484]	@ (800c0a0 <main+0x364>)
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d109      	bne.n	800bed4 <main+0x198>
 800bec0:	4b8e      	ldr	r3, [pc, #568]	@ (800c0fc <main+0x3c0>)
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2b09      	cmp	r3, #9
 800bec6:	d105      	bne.n	800bed4 <main+0x198>
       batteryEmpty = true;
 800bec8:	4b8d      	ldr	r3, [pc, #564]	@ (800c100 <main+0x3c4>)
 800beca:	2201      	movs	r2, #1
 800becc:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800bece:	f7fd fb6d 	bl	80095ac <Enter_Standby_Mode>
 800bed2:	e002      	b.n	800beda <main+0x19e>
    }
    else{
      batteryEmpty = false;
 800bed4:	4b8a      	ldr	r3, [pc, #552]	@ (800c100 <main+0x3c4>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800beda:	4b8a      	ldr	r3, [pc, #552]	@ (800c104 <main+0x3c8>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d100      	bne.n	800bee4 <main+0x1a8>
 800bee2:	e0a2      	b.n	800c02a <main+0x2ee>
 800bee4:	4b71      	ldr	r3, [pc, #452]	@ (800c0ac <main+0x370>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	2201      	movs	r2, #1
 800beea:	4053      	eors	r3, r2
 800beec:	b2db      	uxtb	r3, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d100      	bne.n	800bef4 <main+0x1b8>
 800bef2:	e09a      	b.n	800c02a <main+0x2ee>
 800bef4:	4b82      	ldr	r3, [pc, #520]	@ (800c100 <main+0x3c4>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2201      	movs	r2, #1
 800befa:	4053      	eors	r3, r2
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d100      	bne.n	800bf04 <main+0x1c8>
 800bf02:	e092      	b.n	800c02a <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800bf04:	4b77      	ldr	r3, [pc, #476]	@ (800c0e4 <main+0x3a8>)
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	4b7f      	ldr	r3, [pc, #508]	@ (800c108 <main+0x3cc>)
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d03a      	beq.n	800bf86 <main+0x24a>
        if (IsSGPPresent() && !usbPluggedIn) {
 800bf10:	f000 fb0a 	bl	800c528 <IsSGPPresent>
 800bf14:	1e03      	subs	r3, r0, #0
 800bf16:	d009      	beq.n	800bf2c <main+0x1f0>
 800bf18:	4b7b      	ldr	r3, [pc, #492]	@ (800c108 <main+0x3cc>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	4053      	eors	r3, r2
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d002      	beq.n	800bf2c <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800bf26:	2001      	movs	r0, #1
 800bf28:	f000 fb08 	bl	800c53c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800bf2c:	4b77      	ldr	r3, [pc, #476]	@ (800c10c <main+0x3d0>)
 800bf2e:	791b      	ldrb	r3, [r3, #4]
 800bf30:	2b34      	cmp	r3, #52	@ 0x34
 800bf32:	d003      	beq.n	800bf3c <main+0x200>
 800bf34:	4b75      	ldr	r3, [pc, #468]	@ (800c10c <main+0x3d0>)
 800bf36:	791b      	ldrb	r3, [r3, #4]
 800bf38:	2b35      	cmp	r3, #53	@ 0x35
 800bf3a:	d106      	bne.n	800bf4a <main+0x20e>
 800bf3c:	4b72      	ldr	r3, [pc, #456]	@ (800c108 <main+0x3cc>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800bf44:	2000      	movs	r0, #0
 800bf46:	f000 faf9 	bl	800c53c <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800bf4a:	4b6f      	ldr	r3, [pc, #444]	@ (800c108 <main+0x3cc>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	4053      	eors	r3, r2
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d012      	beq.n	800bf7e <main+0x242>
 800bf58:	f007 fbb4 	bl	80136c4 <HAL_GetTick>
 800bf5c:	0003      	movs	r3, r0
 800bf5e:	4a5f      	ldr	r2, [pc, #380]	@ (800c0dc <main+0x3a0>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d90c      	bls.n	800bf7e <main+0x242>
          Debug("Device time out set in main due to powerstatus shift");
 800bf64:	4a6a      	ldr	r2, [pc, #424]	@ (800c110 <main+0x3d4>)
 800bf66:	4b6b      	ldr	r3, [pc, #428]	@ (800c114 <main+0x3d8>)
 800bf68:	0019      	movs	r1, r3
 800bf6a:	2003      	movs	r0, #3
 800bf6c:	f006 fe6c 	bl	8012c48 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800bf70:	f007 fba8 	bl	80136c4 <HAL_GetTick>
 800bf74:	0003      	movs	r3, r0
 800bf76:	4a68      	ldr	r2, [pc, #416]	@ (800c118 <main+0x3dc>)
 800bf78:	189a      	adds	r2, r3, r2
 800bf7a:	4b59      	ldr	r3, [pc, #356]	@ (800c0e0 <main+0x3a4>)
 800bf7c:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800bf7e:	4b62      	ldr	r3, [pc, #392]	@ (800c108 <main+0x3cc>)
 800bf80:	781a      	ldrb	r2, [r3, #0]
 800bf82:	4b58      	ldr	r3, [pc, #352]	@ (800c0e4 <main+0x3a8>)
 800bf84:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800bf86:	f000 ff33 	bl	800cdf0 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800bf8a:	4b5b      	ldr	r3, [pc, #364]	@ (800c0f8 <main+0x3bc>)
 800bf8c:	78db      	ldrb	r3, [r3, #3]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <main+0x262>
        MICstate = Mic_Upkeep();
 800bf92:	f001 f937 	bl	800d204 <Mic_Upkeep>
 800bf96:	0003      	movs	r3, r0
 800bf98:	001a      	movs	r2, r3
 800bf9a:	4b60      	ldr	r3, [pc, #384]	@ (800c11c <main+0x3e0>)
 800bf9c:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800bf9e:	4b40      	ldr	r3, [pc, #256]	@ (800c0a0 <main+0x364>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d803      	bhi.n	800bfae <main+0x272>
 800bfa6:	4b53      	ldr	r3, [pc, #332]	@ (800c0f4 <main+0x3b8>)
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d016      	beq.n	800bfdc <main+0x2a0>
 800bfae:	4b52      	ldr	r3, [pc, #328]	@ (800c0f8 <main+0x3bc>)
 800bfb0:	789b      	ldrb	r3, [r3, #2]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d012      	beq.n	800bfdc <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800bfb6:	f001 fac7 	bl	800d548 <sen5x_Get_sen5x_enable_state>
 800bfba:	0003      	movs	r3, r0
 800bfbc:	001a      	movs	r2, r3
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	4053      	eors	r3, r2
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d006      	beq.n	800bfd6 <main+0x29a>
 800bfc8:	4b4f      	ldr	r3, [pc, #316]	@ (800c108 <main+0x3cc>)
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d002      	beq.n	800bfd6 <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	f001 faf5 	bl	800d5c0 <sen5x_enable>
        }
        sen5x_statemachine();
 800bfd6:	f002 f865 	bl	800e0a4 <sen5x_statemachine>
 800bfda:	e020      	b.n	800c01e <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800bfdc:	4b30      	ldr	r3, [pc, #192]	@ (800c0a0 <main+0x364>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d81c      	bhi.n	800c01e <main+0x2e2>
 800bfe4:	4b43      	ldr	r3, [pc, #268]	@ (800c0f4 <main+0x3b8>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	2201      	movs	r2, #1
 800bfea:	4053      	eors	r3, r2
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d015      	beq.n	800c01e <main+0x2e2>
 800bff2:	4b41      	ldr	r3, [pc, #260]	@ (800c0f8 <main+0x3bc>)
 800bff4:	789b      	ldrb	r3, [r3, #2]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d011      	beq.n	800c01e <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 800bffa:	4a49      	ldr	r2, [pc, #292]	@ (800c120 <main+0x3e4>)
 800bffc:	4b2a      	ldr	r3, [pc, #168]	@ (800c0a8 <main+0x36c>)
 800bffe:	0019      	movs	r1, r3
 800c000:	2002      	movs	r0, #2
 800c002:	f006 fe21 	bl	8012c48 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800c006:	4b3c      	ldr	r3, [pc, #240]	@ (800c0f8 <main+0x3bc>)
 800c008:	2200      	movs	r2, #0
 800c00a:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800c00c:	4b45      	ldr	r3, [pc, #276]	@ (800c124 <main+0x3e8>)
 800c00e:	2200      	movs	r2, #0
 800c010:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800c012:	4b45      	ldr	r3, [pc, #276]	@ (800c128 <main+0x3ec>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <main+0x2e2>
          sen5x_Power_Off();
 800c01a:	f001 fb5d 	bl	800d6d8 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800c01e:	f7fa ffef 	bl	8007000 <ESP_Upkeep>
 800c022:	0003      	movs	r3, r0
 800c024:	001a      	movs	r2, r3
 800c026:	4b35      	ldr	r3, [pc, #212]	@ (800c0fc <main+0x3c0>)
 800c028:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800c02a:	4b36      	ldr	r3, [pc, #216]	@ (800c104 <main+0x3c8>)
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2201      	movs	r2, #1
 800c030:	4053      	eors	r3, r2
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00f      	beq.n	800c058 <main+0x31c>
 800c038:	4b1c      	ldr	r3, [pc, #112]	@ (800c0ac <main+0x370>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	2201      	movs	r2, #1
 800c03e:	4053      	eors	r3, r2
 800c040:	b2db      	uxtb	r3, r3
 800c042:	2b00      	cmp	r3, #0
 800c044:	d008      	beq.n	800c058 <main+0x31c>
 800c046:	4b2e      	ldr	r3, [pc, #184]	@ (800c100 <main+0x3c4>)
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2201      	movs	r2, #1
 800c04c:	4053      	eors	r3, r2
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <main+0x31c>
      Device_Test();  // for device with startup time
 800c054:	f000 fcae 	bl	800c9b4 <Device_Test>
    }
    if (!usbPluggedIn) {
 800c058:	4b2b      	ldr	r3, [pc, #172]	@ (800c108 <main+0x3cc>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2201      	movs	r2, #1
 800c05e:	4053      	eors	r3, r2
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d06d      	beq.n	800c142 <main+0x406>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800c066:	4b31      	ldr	r3, [pc, #196]	@ (800c12c <main+0x3f0>)
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2201      	movs	r2, #1
 800c06c:	4053      	eors	r3, r2
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b00      	cmp	r3, #0
 800c072:	d066      	beq.n	800c142 <main+0x406>
 800c074:	f000 fd1c 	bl	800cab0 <AllDevicesReady>
 800c078:	1e03      	subs	r3, r0, #0
 800c07a:	d062      	beq.n	800c142 <main+0x406>
 800c07c:	4b2c      	ldr	r3, [pc, #176]	@ (800c130 <main+0x3f4>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d05e      	beq.n	800c142 <main+0x406>
        EnabledConnectedDevices();
 800c084:	f000 fe18 	bl	800ccb8 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800c088:	4b2a      	ldr	r3, [pc, #168]	@ (800c134 <main+0x3f8>)
 800c08a:	795b      	ldrb	r3, [r3, #5]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d053      	beq.n	800c138 <main+0x3fc>
 800c090:	23d7      	movs	r3, #215	@ 0xd7
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	e052      	b.n	800c13c <main+0x400>
 800c096:	46c0      	nop			@ (mov r8, r8)
 800c098:	20001ed4 	.word	0x20001ed4
 800c09c:	20001e94 	.word	0x20001e94
 800c0a0:	20000e40 	.word	0x20000e40
 800c0a4:	0802bab0 	.word	0x0802bab0
 800c0a8:	0802bad4 	.word	0x0802bad4
 800c0ac:	20000e25 	.word	0x20000e25
 800c0b0:	20000e2c 	.word	0x20000e2c
 800c0b4:	2000200c 	.word	0x2000200c
 800c0b8:	20000ec0 	.word	0x20000ec0
 800c0bc:	20001f14 	.word	0x20001f14
 800c0c0:	20000da0 	.word	0x20000da0
 800c0c4:	20000ddc 	.word	0x20000ddc
 800c0c8:	0802bad8 	.word	0x0802bad8
 800c0cc:	0802d44c 	.word	0x0802d44c
 800c0d0:	200020c4 	.word	0x200020c4
 800c0d4:	20000ba0 	.word	0x20000ba0
 800c0d8:	20000c68 	.word	0x20000c68
 800c0dc:	000061a8 	.word	0x000061a8
 800c0e0:	20000e3c 	.word	0x20000e3c
 800c0e4:	20000e27 	.word	0x20000e27
 800c0e8:	0802baec 	.word	0x0802baec
 800c0ec:	20000098 	.word	0x20000098
 800c0f0:	0000c350 	.word	0x0000c350
 800c0f4:	20000097 	.word	0x20000097
 800c0f8:	20000e44 	.word	0x20000e44
 800c0fc:	20000e29 	.word	0x20000e29
 800c100:	20000e26 	.word	0x20000e26
 800c104:	20000e24 	.word	0x20000e24
 800c108:	20001e75 	.word	0x20001e75
 800c10c:	20000ee8 	.word	0x20000ee8
 800c110:	0802bb20 	.word	0x0802bb20
 800c114:	0802bb58 	.word	0x0802bb58
 800c118:	00001194 	.word	0x00001194
 800c11c:	20000e28 	.word	0x20000e28
 800c120:	0802bb5c 	.word	0x0802bb5c
 800c124:	20000ee6 	.word	0x20000ee6
 800c128:	20000ee5 	.word	0x20000ee5
 800c12c:	20001e76 	.word	0x20001e76
 800c130:	200005c0 	.word	0x200005c0
 800c134:	20000e4c 	.word	0x20000e4c
 800c138:	23dc      	movs	r3, #220	@ 0xdc
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	0018      	movs	r0, r3
 800c13e:	f7fd fa55 	bl	80095ec <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800c142:	4b0d      	ldr	r3, [pc, #52]	@ (800c178 <main+0x43c>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <main+0x412>
      check_cli_command();
 800c14a:	f000 f8a3 	bl	800c294 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800c14e:	f7fc febd 	bl	8008ecc <Check_USB_PowerOn>
 800c152:	1e03      	subs	r3, r0, #0
 800c154:	d100      	bne.n	800c158 <main+0x41c>
 800c156:	e687      	b.n	800be68 <main+0x12c>
 800c158:	4b08      	ldr	r3, [pc, #32]	@ (800c17c <main+0x440>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	2201      	movs	r2, #1
 800c15e:	4053      	eors	r3, r2
 800c160:	b2db      	uxtb	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	d100      	bne.n	800c168 <main+0x42c>
 800c166:	e67f      	b.n	800be68 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800c168:	f015 fd84 	bl	8021c74 <GetUsbRxPointer>
 800c16c:	0003      	movs	r3, r0
 800c16e:	0018      	movs	r0, r3
 800c170:	f7fc fc02 	bl	8008978 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800c174:	e678      	b.n	800be68 <main+0x12c>
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	20000e2c 	.word	0x20000e2c
 800c17c:	200005bb 	.word	0x200005bb

0800c180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c180:	b590      	push	{r4, r7, lr}
 800c182:	b09d      	sub	sp, #116	@ 0x74
 800c184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c186:	2438      	movs	r4, #56	@ 0x38
 800c188:	193b      	adds	r3, r7, r4
 800c18a:	0018      	movs	r0, r3
 800c18c:	2338      	movs	r3, #56	@ 0x38
 800c18e:	001a      	movs	r2, r3
 800c190:	2100      	movs	r1, #0
 800c192:	f018 ffa9 	bl	80250e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c196:	2324      	movs	r3, #36	@ 0x24
 800c198:	18fb      	adds	r3, r7, r3
 800c19a:	0018      	movs	r0, r3
 800c19c:	2314      	movs	r3, #20
 800c19e:	001a      	movs	r2, r3
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	f018 ffa1 	bl	80250e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c1a6:	003b      	movs	r3, r7
 800c1a8:	0018      	movs	r0, r3
 800c1aa:	2324      	movs	r3, #36	@ 0x24
 800c1ac:	001a      	movs	r2, r3
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	f018 ff9a 	bl	80250e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1b4:	4b34      	ldr	r3, [pc, #208]	@ (800c288 <SystemClock_Config+0x108>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a34      	ldr	r2, [pc, #208]	@ (800c28c <SystemClock_Config+0x10c>)
 800c1ba:	401a      	ands	r2, r3
 800c1bc:	4b32      	ldr	r3, [pc, #200]	@ (800c288 <SystemClock_Config+0x108>)
 800c1be:	2180      	movs	r1, #128	@ 0x80
 800c1c0:	0109      	lsls	r1, r1, #4
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c1c6:	f00d fdb5 	bl	8019d34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c1ca:	4b31      	ldr	r3, [pc, #196]	@ (800c290 <SystemClock_Config+0x110>)
 800c1cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ce:	4a2f      	ldr	r2, [pc, #188]	@ (800c28c <SystemClock_Config+0x10c>)
 800c1d0:	401a      	ands	r2, r3
 800c1d2:	4b2f      	ldr	r3, [pc, #188]	@ (800c290 <SystemClock_Config+0x110>)
 800c1d4:	2180      	movs	r1, #128	@ 0x80
 800c1d6:	0149      	lsls	r1, r1, #5
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800c1dc:	193b      	adds	r3, r7, r4
 800c1de:	2226      	movs	r2, #38	@ 0x26
 800c1e0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c1e2:	193b      	adds	r3, r7, r4
 800c1e4:	2280      	movs	r2, #128	@ 0x80
 800c1e6:	0052      	lsls	r2, r2, #1
 800c1e8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c1ea:	0021      	movs	r1, r4
 800c1ec:	187b      	adds	r3, r7, r1
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c1f2:	187b      	adds	r3, r7, r1
 800c1f4:	2210      	movs	r2, #16
 800c1f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c1f8:	187b      	adds	r3, r7, r1
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c1fe:	187b      	adds	r3, r7, r1
 800c200:	2200      	movs	r2, #0
 800c202:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c204:	187b      	adds	r3, r7, r1
 800c206:	0018      	movs	r0, r3
 800c208:	f00d fe24 	bl	8019e54 <HAL_RCC_OscConfig>
 800c20c:	1e03      	subs	r3, r0, #0
 800c20e:	d001      	beq.n	800c214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c210:	f000 f906 	bl	800c420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c214:	2124      	movs	r1, #36	@ 0x24
 800c216:	187b      	adds	r3, r7, r1
 800c218:	220f      	movs	r2, #15
 800c21a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c21c:	187b      	adds	r3, r7, r1
 800c21e:	2201      	movs	r2, #1
 800c220:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c222:	187b      	adds	r3, r7, r1
 800c224:	2200      	movs	r2, #0
 800c226:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c228:	187b      	adds	r3, r7, r1
 800c22a:	2200      	movs	r2, #0
 800c22c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c22e:	187b      	adds	r3, r7, r1
 800c230:	2200      	movs	r2, #0
 800c232:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c234:	187b      	adds	r3, r7, r1
 800c236:	2100      	movs	r1, #0
 800c238:	0018      	movs	r0, r3
 800c23a:	f00e f9df 	bl	801a5fc <HAL_RCC_ClockConfig>
 800c23e:	1e03      	subs	r3, r0, #0
 800c240:	d001      	beq.n	800c246 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800c242:	f000 f8ed 	bl	800c420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800c246:	003b      	movs	r3, r7
 800c248:	226d      	movs	r2, #109	@ 0x6d
 800c24a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c24c:	003b      	movs	r3, r7
 800c24e:	2200      	movs	r2, #0
 800c250:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c252:	003b      	movs	r3, r7
 800c254:	2200      	movs	r2, #0
 800c256:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c258:	003b      	movs	r3, r7
 800c25a:	2200      	movs	r2, #0
 800c25c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c25e:	003b      	movs	r3, r7
 800c260:	2280      	movs	r2, #128	@ 0x80
 800c262:	0252      	lsls	r2, r2, #9
 800c264:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c266:	003b      	movs	r3, r7
 800c268:	2280      	movs	r2, #128	@ 0x80
 800c26a:	04d2      	lsls	r2, r2, #19
 800c26c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c26e:	003b      	movs	r3, r7
 800c270:	0018      	movs	r0, r3
 800c272:	f00e fbe7 	bl	801aa44 <HAL_RCCEx_PeriphCLKConfig>
 800c276:	1e03      	subs	r3, r0, #0
 800c278:	d001      	beq.n	800c27e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800c27a:	f000 f8d1 	bl	800c420 <Error_Handler>
  }
}
 800c27e:	46c0      	nop			@ (mov r8, r8)
 800c280:	46bd      	mov	sp, r7
 800c282:	b01d      	add	sp, #116	@ 0x74
 800c284:	bd90      	pop	{r4, r7, pc}
 800c286:	46c0      	nop			@ (mov r8, r8)
 800c288:	40007000 	.word	0x40007000
 800c28c:	ffffe7ff 	.word	0xffffe7ff
 800c290:	40021000 	.word	0x40021000

0800c294 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800c298:	4b34      	ldr	r3, [pc, #208]	@ (800c36c <check_cli_command+0xd8>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	3b61      	subs	r3, #97	@ 0x61
 800c29e:	2b13      	cmp	r3, #19
 800c2a0:	d833      	bhi.n	800c30a <check_cli_command+0x76>
 800c2a2:	009a      	lsls	r2, r3, #2
 800c2a4:	4b32      	ldr	r3, [pc, #200]	@ (800c370 <check_cli_command+0xdc>)
 800c2a6:	18d3      	adds	r3, r2, r3
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800c2ac:	4b31      	ldr	r3, [pc, #196]	@ (800c374 <check_cli_command+0xe0>)
 800c2ae:	0018      	movs	r0, r3
 800c2b0:	f018 fdaa 	bl	8024e08 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800c2b4:	2003      	movs	r0, #3
 800c2b6:	f006 fd31 	bl	8012d1c <SetVerboseLevel>
      break;
 800c2ba:	e051      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800c2bc:	f7fb ff9a 	bl	80081f4 <PC_show_Keys>
    break;
 800c2c0:	e04e      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800c2c2:	f7f8 f8f7 	bl	80044b4 <forceNTPupdate>
    break;
 800c2c6:	e04b      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800c2c8:	4b2b      	ldr	r3, [pc, #172]	@ (800c378 <check_cli_command+0xe4>)
 800c2ca:	0018      	movs	r0, r3
 800c2cc:	f018 fd9c 	bl	8024e08 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800c2d0:	2002      	movs	r0, #2
 800c2d2:	f006 fd23 	bl	8012d1c <SetVerboseLevel>
      break;
 800c2d6:	e043      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800c2d8:	4b28      	ldr	r3, [pc, #160]	@ (800c37c <check_cli_command+0xe8>)
 800c2da:	0018      	movs	r0, r3
 800c2dc:	f018 fd94 	bl	8024e08 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	f006 fd1b 	bl	8012d1c <SetVerboseLevel>
      break;
 800c2e6:	e03b      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800c2e8:	4b25      	ldr	r3, [pc, #148]	@ (800c380 <check_cli_command+0xec>)
 800c2ea:	0018      	movs	r0, r3
 800c2ec:	f018 fd8c 	bl	8024e08 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	f006 fd13 	bl	8012d1c <SetVerboseLevel>
      break;
 800c2f6:	e033      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800c2f8:	f007 f9e4 	bl	80136c4 <HAL_GetTick>
 800c2fc:	0002      	movs	r2, r0
 800c2fe:	4b21      	ldr	r3, [pc, #132]	@ (800c384 <check_cli_command+0xf0>)
 800c300:	601a      	str	r2, [r3, #0]
      break;
 800c302:	e02d      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800c304:	f7fc fe12 	bl	8008f2c <showTime>
      break;
 800c308:	e02a      	b.n	800c360 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800c30a:	4a1f      	ldr	r2, [pc, #124]	@ (800c388 <check_cli_command+0xf4>)
 800c30c:	4b1f      	ldr	r3, [pc, #124]	@ (800c38c <check_cli_command+0xf8>)
 800c30e:	0019      	movs	r1, r3
 800c310:	2001      	movs	r0, #1
 800c312:	f006 fc99 	bl	8012c48 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800c316:	4b1e      	ldr	r3, [pc, #120]	@ (800c390 <check_cli_command+0xfc>)
 800c318:	0018      	movs	r0, r3
 800c31a:	f018 fd75 	bl	8024e08 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800c31e:	4b1d      	ldr	r3, [pc, #116]	@ (800c394 <check_cli_command+0x100>)
 800c320:	0018      	movs	r0, r3
 800c322:	f018 fd71 	bl	8024e08 <puts>
      printf("e - show EEPROM\r\n");
 800c326:	4b1c      	ldr	r3, [pc, #112]	@ (800c398 <check_cli_command+0x104>)
 800c328:	0018      	movs	r0, r3
 800c32a:	f018 fd6d 	bl	8024e08 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800c32e:	4b1b      	ldr	r3, [pc, #108]	@ (800c39c <check_cli_command+0x108>)
 800c330:	0018      	movs	r0, r3
 800c332:	f018 fd69 	bl	8024e08 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800c336:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a0 <check_cli_command+0x10c>)
 800c338:	0018      	movs	r0, r3
 800c33a:	f018 fd65 	bl	8024e08 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800c33e:	4b19      	ldr	r3, [pc, #100]	@ (800c3a4 <check_cli_command+0x110>)
 800c340:	0018      	movs	r0, r3
 800c342:	f018 fd61 	bl	8024e08 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800c346:	4b18      	ldr	r3, [pc, #96]	@ (800c3a8 <check_cli_command+0x114>)
 800c348:	0018      	movs	r0, r3
 800c34a:	f018 fd5d 	bl	8024e08 <puts>
      printf("s - Start particle measurement\r\n");
 800c34e:	4b17      	ldr	r3, [pc, #92]	@ (800c3ac <check_cli_command+0x118>)
 800c350:	0018      	movs	r0, r3
 800c352:	f018 fd59 	bl	8024e08 <puts>
      printf("t - Show actual systemtime\r\n");
 800c356:	4b16      	ldr	r3, [pc, #88]	@ (800c3b0 <check_cli_command+0x11c>)
 800c358:	0018      	movs	r0, r3
 800c35a:	f018 fd55 	bl	8024e08 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800c35e:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800c360:	4b02      	ldr	r3, [pc, #8]	@ (800c36c <check_cli_command+0xd8>)
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
}
 800c366:	46c0      	nop			@ (mov r8, r8)
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	20000e2c 	.word	0x20000e2c
 800c370:	0802d3fc 	.word	0x0802d3fc
 800c374:	0802bb8c 	.word	0x0802bb8c
 800c378:	0802bba8 	.word	0x0802bba8
 800c37c:	0802bbc4 	.word	0x0802bbc4
 800c380:	0802bbe4 	.word	0x0802bbe4
 800c384:	20000ef4 	.word	0x20000ef4
 800c388:	0802bc00 	.word	0x0802bc00
 800c38c:	0802bc30 	.word	0x0802bc30
 800c390:	0802bc34 	.word	0x0802bc34
 800c394:	0802bc4c 	.word	0x0802bc4c
 800c398:	0802bc6c 	.word	0x0802bc6c
 800c39c:	0802bc80 	.word	0x0802bc80
 800c3a0:	0802bca4 	.word	0x0802bca4
 800c3a4:	0802bcc4 	.word	0x0802bcc4
 800c3a8:	0802bce8 	.word	0x0802bce8
 800c3ac:	0802bd08 	.word	0x0802bd08
 800c3b0:	0802bd28 	.word	0x0802bd28

0800c3b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c3bc:	4907      	ldr	r1, [pc, #28]	@ (800c3dc <HAL_UART_RxCpltCallback+0x28>)
 800c3be:	4b08      	ldr	r3, [pc, #32]	@ (800c3e0 <HAL_UART_RxCpltCallback+0x2c>)
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f00f fee2 	bl	801c18c <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800c3c8:	4904      	ldr	r1, [pc, #16]	@ (800c3dc <HAL_UART_RxCpltCallback+0x28>)
 800c3ca:	4b05      	ldr	r3, [pc, #20]	@ (800c3e0 <HAL_UART_RxCpltCallback+0x2c>)
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	f00f fedc 	bl	801c18c <HAL_UART_Receive_IT>
}
 800c3d4:	46c0      	nop			@ (mov r8, r8)
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	b002      	add	sp, #8
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	20000e2c 	.word	0x20000e2c
 800c3e0:	2000200c 	.word	0x2000200c

0800c3e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	0002      	movs	r2, r0
 800c3ec:	1dbb      	adds	r3, r7, #6
 800c3ee:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800c3f0:	1dbb      	adds	r3, r7, #6
 800c3f2:	881a      	ldrh	r2, [r3, #0]
 800c3f4:	2380      	movs	r3, #128	@ 0x80
 800c3f6:	021b      	lsls	r3, r3, #8
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d10b      	bne.n	800c414 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800c3fc:	f005 feca 	bl	8012194 <setuserToggle>
    if (GetPMSensorPresence()) {
 800c400:	f000 f860 	bl	800c4c4 <GetPMSensorPresence>
 800c404:	1e03      	subs	r3, r0, #0
 800c406:	d005      	beq.n	800c414 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800c408:	4b04      	ldr	r3, [pc, #16]	@ (800c41c <HAL_GPIO_EXTI_Callback+0x38>)
 800c40a:	2201      	movs	r2, #1
 800c40c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800c40e:	2000      	movs	r0, #0
 800c410:	f001 f8a4 	bl	800d55c <sen5x_Set_sen5x_state>
    }
  }
}
 800c414:	46c0      	nop			@ (mov r8, r8)
 800c416:	46bd      	mov	sp, r7
 800c418:	b002      	add	sp, #8
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	20000e44 	.word	0x20000e44

0800c420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800c424:	f005 fb16 	bl	8011a54 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c428:	b672      	cpsid	i
}
 800c42a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800c42c:	4a05      	ldr	r2, [pc, #20]	@ (800c444 <Error_Handler+0x24>)
 800c42e:	4b06      	ldr	r3, [pc, #24]	@ (800c448 <Error_Handler+0x28>)
 800c430:	0019      	movs	r1, r3
 800c432:	2001      	movs	r0, #1
 800c434:	f006 fc08 	bl	8012c48 <CreateLine>

    HAL_Delay(2500);
 800c438:	4b04      	ldr	r3, [pc, #16]	@ (800c44c <Error_Handler+0x2c>)
 800c43a:	0018      	movs	r0, r3
 800c43c:	f007 f94c 	bl	80136d8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800c440:	46c0      	nop			@ (mov r8, r8)
 800c442:	e7f3      	b.n	800c42c <Error_Handler+0xc>
 800c444:	0802bd44 	.word	0x0802bd44
 800c448:	0802bc30 	.word	0x0802bc30
 800c44c:	000009c4 	.word	0x000009c4

0800c450 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800c450:	b580      	push	{r7, lr}
 800c452:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800c454:	4b19      	ldr	r3, [pc, #100]	@ (800c4bc <testInit+0x6c>)
 800c456:	2200      	movs	r2, #0
 800c458:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800c45a:	4b18      	ldr	r3, [pc, #96]	@ (800c4bc <testInit+0x6c>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800c460:	4b16      	ldr	r3, [pc, #88]	@ (800c4bc <testInit+0x6c>)
 800c462:	2200      	movs	r2, #0
 800c464:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800c466:	4b15      	ldr	r3, [pc, #84]	@ (800c4bc <testInit+0x6c>)
 800c468:	2200      	movs	r2, #0
 800c46a:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800c46c:	4b13      	ldr	r3, [pc, #76]	@ (800c4bc <testInit+0x6c>)
 800c46e:	2200      	movs	r2, #0
 800c470:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800c472:	4b12      	ldr	r3, [pc, #72]	@ (800c4bc <testInit+0x6c>)
 800c474:	2200      	movs	r2, #0
 800c476:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800c478:	4b10      	ldr	r3, [pc, #64]	@ (800c4bc <testInit+0x6c>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800c47e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4bc <testInit+0x6c>)
 800c480:	2200      	movs	r2, #0
 800c482:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800c484:	4b0d      	ldr	r3, [pc, #52]	@ (800c4bc <testInit+0x6c>)
 800c486:	2200      	movs	r2, #0
 800c488:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800c48a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c0 <testInit+0x70>)
 800c48c:	2201      	movs	r2, #1
 800c48e:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800c490:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c0 <testInit+0x70>)
 800c492:	2201      	movs	r2, #1
 800c494:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800c496:	4b0a      	ldr	r3, [pc, #40]	@ (800c4c0 <testInit+0x70>)
 800c498:	2201      	movs	r2, #1
 800c49a:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800c49c:	4b08      	ldr	r3, [pc, #32]	@ (800c4c0 <testInit+0x70>)
 800c49e:	2201      	movs	r2, #1
 800c4a0:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800c4a2:	4b07      	ldr	r3, [pc, #28]	@ (800c4c0 <testInit+0x70>)
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800c4a8:	4b05      	ldr	r3, [pc, #20]	@ (800c4c0 <testInit+0x70>)
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800c4ae:	4b04      	ldr	r3, [pc, #16]	@ (800c4c0 <testInit+0x70>)
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	719a      	strb	r2, [r3, #6]
}
 800c4b4:	46c0      	nop			@ (mov r8, r8)
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	46c0      	nop			@ (mov r8, r8)
 800c4bc:	20000e4c 	.word	0x20000e4c
 800c4c0:	20000e44 	.word	0x20000e44

0800c4c4 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800c4c8:	4b02      	ldr	r3, [pc, #8]	@ (800c4d4 <GetPMSensorPresence+0x10>)
 800c4ca:	795b      	ldrb	r3, [r3, #5]
}
 800c4cc:	0018      	movs	r0, r3
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	46c0      	nop			@ (mov r8, r8)
 800c4d4:	20000e4c 	.word	0x20000e4c

0800c4d8 <DisablePMSensor>:

void DisablePMSensor() {
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800c4dc:	4b02      	ldr	r3, [pc, #8]	@ (800c4e8 <DisablePMSensor+0x10>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	715a      	strb	r2, [r3, #5]
}
 800c4e2:	46c0      	nop			@ (mov r8, r8)
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	20000e4c 	.word	0x20000e4c

0800c4ec <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800c4f0:	4b02      	ldr	r3, [pc, #8]	@ (800c4fc <IsAHT20SensorPresent+0x10>)
 800c4f2:	789b      	ldrb	r3, [r3, #2]
}
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	46c0      	nop			@ (mov r8, r8)
 800c4fc:	20000e4c 	.word	0x20000e4c

0800c500 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800c504:	4b02      	ldr	r3, [pc, #8]	@ (800c510 <IsBMP280SensorPresent+0x10>)
 800c506:	791b      	ldrb	r3, [r3, #4]
}
 800c508:	0018      	movs	r0, r3
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	46c0      	nop			@ (mov r8, r8)
 800c510:	20000e4c 	.word	0x20000e4c

0800c514 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800c514:	b580      	push	{r7, lr}
 800c516:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800c518:	4b02      	ldr	r3, [pc, #8]	@ (800c524 <IsENS160SensorPresent+0x10>)
 800c51a:	78db      	ldrb	r3, [r3, #3]
}
 800c51c:	0018      	movs	r0, r3
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	46c0      	nop			@ (mov r8, r8)
 800c524:	20000e4c 	.word	0x20000e4c

0800c528 <IsSGPPresent>:

bool IsSGPPresent() {
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800c52c:	4b02      	ldr	r3, [pc, #8]	@ (800c538 <IsSGPPresent+0x10>)
 800c52e:	785b      	ldrb	r3, [r3, #1]
}
 800c530:	0018      	movs	r0, r3
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	46c0      	nop			@ (mov r8, r8)
 800c538:	20000e4c 	.word	0x20000e4c

0800c53c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	0002      	movs	r2, r0
 800c544:	1dfb      	adds	r3, r7, #7
 800c546:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800c548:	4b0b      	ldr	r3, [pc, #44]	@ (800c578 <SetVOCSensorDIS_ENA+0x3c>)
 800c54a:	1dfa      	adds	r2, r7, #7
 800c54c:	7812      	ldrb	r2, [r2, #0]
 800c54e:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800c550:	4b0a      	ldr	r3, [pc, #40]	@ (800c57c <SetVOCSensorDIS_ENA+0x40>)
 800c552:	1dfa      	adds	r2, r7, #7
 800c554:	7812      	ldrb	r2, [r2, #0]
 800c556:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800c558:	1dfb      	adds	r3, r7, #7
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d001      	beq.n	800c564 <SetVOCSensorDIS_ENA+0x28>
 800c560:	4b07      	ldr	r3, [pc, #28]	@ (800c580 <SetVOCSensorDIS_ENA+0x44>)
 800c562:	e000      	b.n	800c566 <SetVOCSensorDIS_ENA+0x2a>
 800c564:	4b07      	ldr	r3, [pc, #28]	@ (800c584 <SetVOCSensorDIS_ENA+0x48>)
 800c566:	4a08      	ldr	r2, [pc, #32]	@ (800c588 <SetVOCSensorDIS_ENA+0x4c>)
 800c568:	4908      	ldr	r1, [pc, #32]	@ (800c58c <SetVOCSensorDIS_ENA+0x50>)
 800c56a:	2003      	movs	r0, #3
 800c56c:	f006 fb6c 	bl	8012c48 <CreateLine>
}
 800c570:	46c0      	nop			@ (mov r8, r8)
 800c572:	46bd      	mov	sp, r7
 800c574:	b002      	add	sp, #8
 800c576:	bd80      	pop	{r7, pc}
 800c578:	20000e4c 	.word	0x20000e4c
 800c57c:	20000e44 	.word	0x20000e44
 800c580:	0802bd70 	.word	0x0802bd70
 800c584:	0802bd78 	.word	0x0802bd78
 800c588:	0802bd84 	.word	0x0802bd84
 800c58c:	0802bd98 	.word	0x0802bd98

0800c590 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800c594:	4b02      	ldr	r3, [pc, #8]	@ (800c5a0 <IsPMSensorEnabled+0x10>)
 800c596:	789b      	ldrb	r3, [r3, #2]
}
 800c598:	0018      	movs	r0, r3
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	46c0      	nop			@ (mov r8, r8)
 800c5a0:	20000e44 	.word	0x20000e44

0800c5a4 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	0002      	movs	r2, r0
 800c5ac:	1dfb      	adds	r3, r7, #7
 800c5ae:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800c5b0:	4b05      	ldr	r3, [pc, #20]	@ (800c5c8 <SetVOCSensorStatus+0x24>)
 800c5b2:	7a1b      	ldrb	r3, [r3, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800c5b8:	4b04      	ldr	r3, [pc, #16]	@ (800c5cc <SetVOCSensorStatus+0x28>)
 800c5ba:	1dfa      	adds	r2, r7, #7
 800c5bc:	7812      	ldrb	r2, [r2, #0]
 800c5be:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800c5c0:	46c0      	nop			@ (mov r8, r8)
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	b002      	add	sp, #8
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20000e4c 	.word	0x20000e4c
 800c5cc:	20000e44 	.word	0x20000e44

0800c5d0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	0002      	movs	r2, r0
 800c5d8:	1dfb      	adds	r3, r7, #7
 800c5da:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800c5dc:	4b03      	ldr	r3, [pc, #12]	@ (800c5ec <SetPMSensorStatus+0x1c>)
 800c5de:	1dfa      	adds	r2, r7, #7
 800c5e0:	7812      	ldrb	r2, [r2, #0]
 800c5e2:	709a      	strb	r2, [r3, #2]
}
 800c5e4:	46c0      	nop			@ (mov r8, r8)
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	b002      	add	sp, #8
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20000e44 	.word	0x20000e44

0800c5f0 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800c5f4:	4b02      	ldr	r3, [pc, #8]	@ (800c600 <SetESPMeasurementDone+0x10>)
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	71da      	strb	r2, [r3, #7]
}
 800c5fa:	46c0      	nop			@ (mov r8, r8)
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	20000e4c 	.word	0x20000e4c

0800c604 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
 800c610:	603b      	str	r3, [r7, #0]
  testInit();
 800c612:	f7ff ff1d 	bl	800c450 <testInit>
  I2CSensors_Init(sensorI2C);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	0018      	movs	r0, r3
 800c61a:	f7fb f9cb 	bl	80079b4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800c61e:	f006 fddd 	bl	80131dc <HIDS_DeviceConnected>
 800c622:	0003      	movs	r3, r0
 800c624:	001a      	movs	r2, r3
 800c626:	2301      	movs	r3, #1
 800c628:	4053      	eors	r3, r2
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00c      	beq.n	800c64a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800c630:	4abf      	ldr	r2, [pc, #764]	@ (800c930 <Device_Init+0x32c>)
 800c632:	4bc0      	ldr	r3, [pc, #768]	@ (800c934 <Device_Init+0x330>)
 800c634:	0019      	movs	r1, r3
 800c636:	2001      	movs	r0, #1
 800c638:	f006 fb06 	bl	8012c48 <CreateLine>
     SensorProbe.HT_Present = false;
 800c63c:	4bbe      	ldr	r3, [pc, #760]	@ (800c938 <Device_Init+0x334>)
 800c63e:	2200      	movs	r2, #0
 800c640:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800c642:	4bbe      	ldr	r3, [pc, #760]	@ (800c93c <Device_Init+0x338>)
 800c644:	2200      	movs	r2, #0
 800c646:	701a      	strb	r2, [r3, #0]
 800c648:	e008      	b.n	800c65c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800c64a:	4bbb      	ldr	r3, [pc, #748]	@ (800c938 <Device_Init+0x334>)
 800c64c:	2201      	movs	r2, #1
 800c64e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800c650:	4abb      	ldr	r2, [pc, #748]	@ (800c940 <Device_Init+0x33c>)
 800c652:	4bbc      	ldr	r3, [pc, #752]	@ (800c944 <Device_Init+0x340>)
 800c654:	0019      	movs	r1, r3
 800c656:	2003      	movs	r0, #3
 800c658:	f006 faf6 	bl	8012c48 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800c65c:	f7fe f9bc 	bl	800a9d8 <BMP280_DeviceConnected>
 800c660:	0003      	movs	r3, r0
 800c662:	001a      	movs	r2, r3
 800c664:	2301      	movs	r3, #1
 800c666:	4053      	eors	r3, r2
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00c      	beq.n	800c688 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800c66e:	4ab6      	ldr	r2, [pc, #728]	@ (800c948 <Device_Init+0x344>)
 800c670:	4bb0      	ldr	r3, [pc, #704]	@ (800c934 <Device_Init+0x330>)
 800c672:	0019      	movs	r1, r3
 800c674:	2001      	movs	r0, #1
 800c676:	f006 fae7 	bl	8012c48 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800c67a:	4baf      	ldr	r3, [pc, #700]	@ (800c938 <Device_Init+0x334>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800c680:	4bae      	ldr	r3, [pc, #696]	@ (800c93c <Device_Init+0x338>)
 800c682:	2200      	movs	r2, #0
 800c684:	715a      	strb	r2, [r3, #5]
 800c686:	e008      	b.n	800c69a <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800c688:	4bab      	ldr	r3, [pc, #684]	@ (800c938 <Device_Init+0x334>)
 800c68a:	2201      	movs	r2, #1
 800c68c:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800c68e:	4aaf      	ldr	r2, [pc, #700]	@ (800c94c <Device_Init+0x348>)
 800c690:	4bac      	ldr	r3, [pc, #688]	@ (800c944 <Device_Init+0x340>)
 800c692:	0019      	movs	r1, r3
 800c694:	2003      	movs	r0, #3
 800c696:	f006 fad7 	bl	8012c48 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800c69a:	f003 fcff 	bl	801009c <SGP_DeviceConnected>
 800c69e:	0003      	movs	r3, r0
 800c6a0:	001a      	movs	r2, r3
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4053      	eors	r3, r2
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00c      	beq.n	800c6c6 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800c6ac:	4ba2      	ldr	r3, [pc, #648]	@ (800c938 <Device_Init+0x334>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800c6b2:	4aa7      	ldr	r2, [pc, #668]	@ (800c950 <Device_Init+0x34c>)
 800c6b4:	4b9f      	ldr	r3, [pc, #636]	@ (800c934 <Device_Init+0x330>)
 800c6b6:	0019      	movs	r1, r3
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	f006 fac5 	bl	8012c48 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800c6be:	4b9f      	ldr	r3, [pc, #636]	@ (800c93c <Device_Init+0x338>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	705a      	strb	r2, [r3, #1]
 800c6c4:	e00b      	b.n	800c6de <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800c6c6:	4b9c      	ldr	r3, [pc, #624]	@ (800c938 <Device_Init+0x334>)
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800c6cc:	4b9a      	ldr	r3, [pc, #616]	@ (800c938 <Device_Init+0x334>)
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800c6d2:	4aa0      	ldr	r2, [pc, #640]	@ (800c954 <Device_Init+0x350>)
 800c6d4:	4b9b      	ldr	r3, [pc, #620]	@ (800c944 <Device_Init+0x340>)
 800c6d6:	0019      	movs	r1, r3
 800c6d8:	2003      	movs	r0, #3
 800c6da:	f006 fab5 	bl	8012c48 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800c6de:	f7f7 f9ad 	bl	8003a3c <ENS_DeviceConnected>
 800c6e2:	0003      	movs	r3, r0
 800c6e4:	001a      	movs	r2, r3
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	4053      	eors	r3, r2
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00c      	beq.n	800c70a <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800c6f0:	4b91      	ldr	r3, [pc, #580]	@ (800c938 <Device_Init+0x334>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800c6f6:	4a98      	ldr	r2, [pc, #608]	@ (800c958 <Device_Init+0x354>)
 800c6f8:	4b8e      	ldr	r3, [pc, #568]	@ (800c934 <Device_Init+0x330>)
 800c6fa:	0019      	movs	r1, r3
 800c6fc:	2001      	movs	r0, #1
 800c6fe:	f006 faa3 	bl	8012c48 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800c702:	4b8e      	ldr	r3, [pc, #568]	@ (800c93c <Device_Init+0x338>)
 800c704:	2200      	movs	r2, #0
 800c706:	719a      	strb	r2, [r3, #6]
 800c708:	e008      	b.n	800c71c <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800c70a:	4b8b      	ldr	r3, [pc, #556]	@ (800c938 <Device_Init+0x334>)
 800c70c:	2201      	movs	r2, #1
 800c70e:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800c710:	4a92      	ldr	r2, [pc, #584]	@ (800c95c <Device_Init+0x358>)
 800c712:	4b8c      	ldr	r3, [pc, #560]	@ (800c944 <Device_Init+0x340>)
 800c714:	0019      	movs	r1, r3
 800c716:	2003      	movs	r0, #3
 800c718:	f006 fa96 	bl	8012c48 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800c71c:	f7fd fc88 	bl	800a030 <AHT20_DeviceConnected>
 800c720:	0003      	movs	r3, r0
 800c722:	001a      	movs	r2, r3
 800c724:	2301      	movs	r3, #1
 800c726:	4053      	eors	r3, r2
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00c      	beq.n	800c748 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800c72e:	4a8c      	ldr	r2, [pc, #560]	@ (800c960 <Device_Init+0x35c>)
 800c730:	4b80      	ldr	r3, [pc, #512]	@ (800c934 <Device_Init+0x330>)
 800c732:	0019      	movs	r1, r3
 800c734:	2001      	movs	r0, #1
 800c736:	f006 fa87 	bl	8012c48 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800c73a:	4b7f      	ldr	r3, [pc, #508]	@ (800c938 <Device_Init+0x334>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800c740:	4b7e      	ldr	r3, [pc, #504]	@ (800c93c <Device_Init+0x338>)
 800c742:	2200      	movs	r2, #0
 800c744:	711a      	strb	r2, [r3, #4]
 800c746:	e008      	b.n	800c75a <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800c748:	4b7b      	ldr	r3, [pc, #492]	@ (800c938 <Device_Init+0x334>)
 800c74a:	2201      	movs	r2, #1
 800c74c:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800c74e:	4a85      	ldr	r2, [pc, #532]	@ (800c964 <Device_Init+0x360>)
 800c750:	4b7c      	ldr	r3, [pc, #496]	@ (800c944 <Device_Init+0x340>)
 800c752:	0019      	movs	r1, r3
 800c754:	2003      	movs	r0, #3
 800c756:	f006 fa77 	bl	8012c48 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800c75a:	4b77      	ldr	r3, [pc, #476]	@ (800c938 <Device_Init+0x334>)
 800c75c:	785b      	ldrb	r3, [r3, #1]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d009      	beq.n	800c776 <Device_Init+0x172>
 800c762:	4b75      	ldr	r3, [pc, #468]	@ (800c938 <Device_Init+0x334>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d005      	beq.n	800c776 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800c76a:	2200      	movs	r2, #0
 800c76c:	2101      	movs	r1, #1
 800c76e:	2000      	movs	r0, #0
 800c770:	f004 ffca 	bl	8011708 <SetDBLED>
 800c774:	e018      	b.n	800c7a8 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800c776:	2200      	movs	r2, #0
 800c778:	2100      	movs	r1, #0
 800c77a:	2001      	movs	r0, #1
 800c77c:	f004 ffc4 	bl	8011708 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800c780:	4b79      	ldr	r3, [pc, #484]	@ (800c968 <Device_Init+0x364>)
 800c782:	2200      	movs	r2, #0
 800c784:	2101      	movs	r1, #1
 800c786:	0018      	movs	r0, r3
 800c788:	f008 fa2d 	bl	8014be6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800c78c:	2380      	movs	r3, #128	@ 0x80
 800c78e:	005b      	lsls	r3, r3, #1
 800c790:	4875      	ldr	r0, [pc, #468]	@ (800c968 <Device_Init+0x364>)
 800c792:	2201      	movs	r2, #1
 800c794:	0019      	movs	r1, r3
 800c796:	f008 fa26 	bl	8014be6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800c79a:	2380      	movs	r3, #128	@ 0x80
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4872      	ldr	r0, [pc, #456]	@ (800c968 <Device_Init+0x364>)
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	0019      	movs	r1, r3
 800c7a4:	f008 fa1f 	bl	8014be6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800c7a8:	4b64      	ldr	r3, [pc, #400]	@ (800c93c <Device_Init+0x338>)
 800c7aa:	78db      	ldrb	r3, [r3, #3]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d028      	beq.n	800c802 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800c7b0:	4a6e      	ldr	r2, [pc, #440]	@ (800c96c <Device_Init+0x368>)
 800c7b2:	4b6f      	ldr	r3, [pc, #444]	@ (800c970 <Device_Init+0x36c>)
 800c7b4:	0019      	movs	r1, r3
 800c7b6:	2002      	movs	r0, #2
 800c7b8:	f006 fa46 	bl	8012c48 <CreateLine>
    if (!enableMicrophone(true)) {
 800c7bc:	2001      	movs	r0, #1
 800c7be:	f004 f8a1 	bl	8010904 <enableMicrophone>
 800c7c2:	0003      	movs	r3, r0
 800c7c4:	001a      	movs	r2, r3
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4053      	eors	r3, r2
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00c      	beq.n	800c7ea <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800c7d0:	4a68      	ldr	r2, [pc, #416]	@ (800c974 <Device_Init+0x370>)
 800c7d2:	4b58      	ldr	r3, [pc, #352]	@ (800c934 <Device_Init+0x330>)
 800c7d4:	0019      	movs	r1, r3
 800c7d6:	2001      	movs	r0, #1
 800c7d8:	f006 fa36 	bl	8012c48 <CreateLine>
      SensorProbe.MIC_Present = false;
 800c7dc:	4b56      	ldr	r3, [pc, #344]	@ (800c938 <Device_Init+0x334>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800c7e2:	4b56      	ldr	r3, [pc, #344]	@ (800c93c <Device_Init+0x338>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	70da      	strb	r2, [r3, #3]
 800c7e8:	e00b      	b.n	800c802 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800c7ea:	4b53      	ldr	r3, [pc, #332]	@ (800c938 <Device_Init+0x334>)
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800c7f0:	4b52      	ldr	r3, [pc, #328]	@ (800c93c <Device_Init+0x338>)
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800c7f6:	4a60      	ldr	r2, [pc, #384]	@ (800c978 <Device_Init+0x374>)
 800c7f8:	4b52      	ldr	r3, [pc, #328]	@ (800c944 <Device_Init+0x340>)
 800c7fa:	0019      	movs	r1, r3
 800c7fc:	2003      	movs	r0, #3
 800c7fe:	f006 fa23 	bl	8012c48 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800c802:	f000 ff9f 	bl	800d744 <probe_sen5x>
 800c806:	1e03      	subs	r3, r0, #0
 800c808:	d122      	bne.n	800c850 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800c80a:	4a5c      	ldr	r2, [pc, #368]	@ (800c97c <Device_Init+0x378>)
 800c80c:	4b4d      	ldr	r3, [pc, #308]	@ (800c944 <Device_Init+0x340>)
 800c80e:	0019      	movs	r1, r3
 800c810:	2003      	movs	r0, #3
 800c812:	f006 fa19 	bl	8012c48 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800c816:	4b48      	ldr	r3, [pc, #288]	@ (800c938 <Device_Init+0x334>)
 800c818:	2201      	movs	r2, #1
 800c81a:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800c81c:	4b47      	ldr	r3, [pc, #284]	@ (800c93c <Device_Init+0x338>)
 800c81e:	2201      	movs	r2, #1
 800c820:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800c822:	4b57      	ldr	r3, [pc, #348]	@ (800c980 <Device_Init+0x37c>)
 800c824:	791b      	ldrb	r3, [r3, #4]
 800c826:	2b34      	cmp	r3, #52	@ 0x34
 800c828:	d003      	beq.n	800c832 <Device_Init+0x22e>
 800c82a:	4b55      	ldr	r3, [pc, #340]	@ (800c980 <Device_Init+0x37c>)
 800c82c:	791b      	ldrb	r3, [r3, #4]
 800c82e:	2b35      	cmp	r3, #53	@ 0x35
 800c830:	d11c      	bne.n	800c86c <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800c832:	4a54      	ldr	r2, [pc, #336]	@ (800c984 <Device_Init+0x380>)
 800c834:	4b4e      	ldr	r3, [pc, #312]	@ (800c970 <Device_Init+0x36c>)
 800c836:	0019      	movs	r1, r3
 800c838:	2002      	movs	r0, #2
 800c83a:	f006 fa05 	bl	8012c48 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800c83e:	4b3f      	ldr	r3, [pc, #252]	@ (800c93c <Device_Init+0x338>)
 800c840:	2200      	movs	r2, #0
 800c842:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800c844:	4b3c      	ldr	r3, [pc, #240]	@ (800c938 <Device_Init+0x334>)
 800c846:	2200      	movs	r2, #0
 800c848:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800c84a:	f003 fe0b 	bl	8010464 <SGP_SoftReset>
 800c84e:	e00d      	b.n	800c86c <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800c850:	f000 ff42 	bl	800d6d8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800c854:	4a4c      	ldr	r2, [pc, #304]	@ (800c988 <Device_Init+0x384>)
 800c856:	4b3b      	ldr	r3, [pc, #236]	@ (800c944 <Device_Init+0x340>)
 800c858:	0019      	movs	r1, r3
 800c85a:	2003      	movs	r0, #3
 800c85c:	f006 f9f4 	bl	8012c48 <CreateLine>
    SensorProbe.PM_Present = false;
 800c860:	4b35      	ldr	r3, [pc, #212]	@ (800c938 <Device_Init+0x334>)
 800c862:	2200      	movs	r2, #0
 800c864:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800c866:	4b35      	ldr	r3, [pc, #212]	@ (800c93c <Device_Init+0x338>)
 800c868:	2200      	movs	r2, #0
 800c86a:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800c86c:	4b32      	ldr	r3, [pc, #200]	@ (800c938 <Device_Init+0x334>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <Device_Init+0x274>
 800c874:	4b45      	ldr	r3, [pc, #276]	@ (800c98c <Device_Init+0x388>)
 800c876:	e000      	b.n	800c87a <Device_Init+0x276>
 800c878:	4b45      	ldr	r3, [pc, #276]	@ (800c990 <Device_Init+0x38c>)
 800c87a:	4a46      	ldr	r2, [pc, #280]	@ (800c994 <Device_Init+0x390>)
 800c87c:	493c      	ldr	r1, [pc, #240]	@ (800c970 <Device_Init+0x36c>)
 800c87e:	2002      	movs	r0, #2
 800c880:	f006 f9e2 	bl	8012c48 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800c884:	4b2c      	ldr	r3, [pc, #176]	@ (800c938 <Device_Init+0x334>)
 800c886:	785b      	ldrb	r3, [r3, #1]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <Device_Init+0x28c>
 800c88c:	4b3f      	ldr	r3, [pc, #252]	@ (800c98c <Device_Init+0x388>)
 800c88e:	e000      	b.n	800c892 <Device_Init+0x28e>
 800c890:	4b3f      	ldr	r3, [pc, #252]	@ (800c990 <Device_Init+0x38c>)
 800c892:	4a41      	ldr	r2, [pc, #260]	@ (800c998 <Device_Init+0x394>)
 800c894:	4936      	ldr	r1, [pc, #216]	@ (800c970 <Device_Init+0x36c>)
 800c896:	2002      	movs	r0, #2
 800c898:	f006 f9d6 	bl	8012c48 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800c89c:	4b26      	ldr	r3, [pc, #152]	@ (800c938 <Device_Init+0x334>)
 800c89e:	789b      	ldrb	r3, [r3, #2]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <Device_Init+0x2a4>
 800c8a4:	4b39      	ldr	r3, [pc, #228]	@ (800c98c <Device_Init+0x388>)
 800c8a6:	e000      	b.n	800c8aa <Device_Init+0x2a6>
 800c8a8:	4b39      	ldr	r3, [pc, #228]	@ (800c990 <Device_Init+0x38c>)
 800c8aa:	4a3c      	ldr	r2, [pc, #240]	@ (800c99c <Device_Init+0x398>)
 800c8ac:	4930      	ldr	r1, [pc, #192]	@ (800c970 <Device_Init+0x36c>)
 800c8ae:	2002      	movs	r0, #2
 800c8b0:	f006 f9ca 	bl	8012c48 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800c8b4:	4b20      	ldr	r3, [pc, #128]	@ (800c938 <Device_Init+0x334>)
 800c8b6:	791b      	ldrb	r3, [r3, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <Device_Init+0x2bc>
 800c8bc:	4b33      	ldr	r3, [pc, #204]	@ (800c98c <Device_Init+0x388>)
 800c8be:	e000      	b.n	800c8c2 <Device_Init+0x2be>
 800c8c0:	4b33      	ldr	r3, [pc, #204]	@ (800c990 <Device_Init+0x38c>)
 800c8c2:	4a37      	ldr	r2, [pc, #220]	@ (800c9a0 <Device_Init+0x39c>)
 800c8c4:	492a      	ldr	r1, [pc, #168]	@ (800c970 <Device_Init+0x36c>)
 800c8c6:	2002      	movs	r0, #2
 800c8c8:	f006 f9be 	bl	8012c48 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800c8cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c938 <Device_Init+0x334>)
 800c8ce:	78db      	ldrb	r3, [r3, #3]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <Device_Init+0x2d4>
 800c8d4:	4b2d      	ldr	r3, [pc, #180]	@ (800c98c <Device_Init+0x388>)
 800c8d6:	e000      	b.n	800c8da <Device_Init+0x2d6>
 800c8d8:	4b2d      	ldr	r3, [pc, #180]	@ (800c990 <Device_Init+0x38c>)
 800c8da:	4a32      	ldr	r2, [pc, #200]	@ (800c9a4 <Device_Init+0x3a0>)
 800c8dc:	4924      	ldr	r1, [pc, #144]	@ (800c970 <Device_Init+0x36c>)
 800c8de:	2002      	movs	r0, #2
 800c8e0:	f006 f9b2 	bl	8012c48 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800c8e4:	4b14      	ldr	r3, [pc, #80]	@ (800c938 <Device_Init+0x334>)
 800c8e6:	795b      	ldrb	r3, [r3, #5]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d001      	beq.n	800c8f0 <Device_Init+0x2ec>
 800c8ec:	4b27      	ldr	r3, [pc, #156]	@ (800c98c <Device_Init+0x388>)
 800c8ee:	e000      	b.n	800c8f2 <Device_Init+0x2ee>
 800c8f0:	4b27      	ldr	r3, [pc, #156]	@ (800c990 <Device_Init+0x38c>)
 800c8f2:	4a2d      	ldr	r2, [pc, #180]	@ (800c9a8 <Device_Init+0x3a4>)
 800c8f4:	491e      	ldr	r1, [pc, #120]	@ (800c970 <Device_Init+0x36c>)
 800c8f6:	2002      	movs	r0, #2
 800c8f8:	f006 f9a6 	bl	8012c48 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800c8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c938 <Device_Init+0x334>)
 800c8fe:	799b      	ldrb	r3, [r3, #6]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <Device_Init+0x304>
 800c904:	4b21      	ldr	r3, [pc, #132]	@ (800c98c <Device_Init+0x388>)
 800c906:	e000      	b.n	800c90a <Device_Init+0x306>
 800c908:	4b21      	ldr	r3, [pc, #132]	@ (800c990 <Device_Init+0x38c>)
 800c90a:	4a28      	ldr	r2, [pc, #160]	@ (800c9ac <Device_Init+0x3a8>)
 800c90c:	4918      	ldr	r1, [pc, #96]	@ (800c970 <Device_Init+0x36c>)
 800c90e:	2002      	movs	r0, #2
 800c910:	f006 f99a 	bl	8012c48 <CreateLine>
  ESP_Init(espUart);
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	0018      	movs	r0, r3
 800c918:	f7f8 f8b8 	bl	8004a8c <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800c91c:	4a24      	ldr	r2, [pc, #144]	@ (800c9b0 <Device_Init+0x3ac>)
 800c91e:	4b09      	ldr	r3, [pc, #36]	@ (800c944 <Device_Init+0x340>)
 800c920:	0019      	movs	r1, r3
 800c922:	2003      	movs	r0, #3
 800c924:	f006 f990 	bl	8012c48 <CreateLine>
}
 800c928:	46c0      	nop			@ (mov r8, r8)
 800c92a:	46bd      	mov	sp, r7
 800c92c:	b004      	add	sp, #16
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	0802bd9c 	.word	0x0802bd9c
 800c934:	0802bdcc 	.word	0x0802bdcc
 800c938:	20000e4c 	.word	0x20000e4c
 800c93c:	20000e44 	.word	0x20000e44
 800c940:	0802bdd0 	.word	0x0802bdd0
 800c944:	0802bd98 	.word	0x0802bd98
 800c948:	0802bdfc 	.word	0x0802bdfc
 800c94c:	0802be30 	.word	0x0802be30
 800c950:	0802be60 	.word	0x0802be60
 800c954:	0802be7c 	.word	0x0802be7c
 800c958:	0802be94 	.word	0x0802be94
 800c95c:	0802beb0 	.word	0x0802beb0
 800c960:	0802bec8 	.word	0x0802bec8
 800c964:	0802befc 	.word	0x0802befc
 800c968:	50000400 	.word	0x50000400
 800c96c:	0802bf30 	.word	0x0802bf30
 800c970:	0802bf54 	.word	0x0802bf54
 800c974:	0802bf58 	.word	0x0802bf58
 800c978:	0802bf84 	.word	0x0802bf84
 800c97c:	0802bfb0 	.word	0x0802bfb0
 800c980:	20000ee8 	.word	0x20000ee8
 800c984:	0802bfc8 	.word	0x0802bfc8
 800c988:	0802c018 	.word	0x0802c018
 800c98c:	0802c03c 	.word	0x0802c03c
 800c990:	0802c040 	.word	0x0802c040
 800c994:	0802c044 	.word	0x0802c044
 800c998:	0802c060 	.word	0x0802c060
 800c99c:	0802c07c 	.word	0x0802c07c
 800c9a0:	0802c09c 	.word	0x0802c09c
 800c9a4:	0802c0bc 	.word	0x0802c0bc
 800c9a8:	0802c0dc 	.word	0x0802c0dc
 800c9ac:	0802c0f8 	.word	0x0802c0f8
 800c9b0:	0802c114 	.word	0x0802c114

0800c9b4 <Device_Test>:

void Device_Test(){
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800c9b8:	4b34      	ldr	r3, [pc, #208]	@ (800ca8c <Device_Test+0xd8>)
 800c9ba:	799b      	ldrb	r3, [r3, #6]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	4053      	eors	r3, r2
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d027      	beq.n	800ca16 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800c9c6:	f000 fbed 	bl	800d1a4 <MIC_TestMeasurementDone>
 800c9ca:	1e03      	subs	r3, r0, #0
 800c9cc:	d011      	beq.n	800c9f2 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800c9ce:	4b2f      	ldr	r3, [pc, #188]	@ (800ca8c <Device_Test+0xd8>)
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800c9d4:	4b2e      	ldr	r3, [pc, #184]	@ (800ca90 <Device_Test+0xdc>)
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800c9da:	f004 fe19 	bl	8011610 <Calculate_LED_ON>
 800c9de:	0003      	movs	r3, r0
 800c9e0:	0019      	movs	r1, r3
 800c9e2:	23fa      	movs	r3, #250	@ 0xfa
 800c9e4:	011a      	lsls	r2, r3, #4
 800c9e6:	23fa      	movs	r3, #250	@ 0xfa
 800c9e8:	011b      	lsls	r3, r3, #4
 800c9ea:	0018      	movs	r0, r3
 800c9ec:	f004 fe58 	bl	80116a0 <SetStatusLED>
 800c9f0:	e011      	b.n	800ca16 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800c9f2:	f003 ff63 	bl	80108bc <micSettlingComplete>
 800c9f6:	1e03      	subs	r3, r0, #0
 800c9f8:	d00d      	beq.n	800ca16 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800c9fa:	4b25      	ldr	r3, [pc, #148]	@ (800ca90 <Device_Test+0xdc>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800ca00:	f004 fe06 	bl	8011610 <Calculate_LED_ON>
 800ca04:	0003      	movs	r3, r0
 800ca06:	0018      	movs	r0, r3
 800ca08:	23fa      	movs	r3, #250	@ 0xfa
 800ca0a:	011a      	lsls	r2, r3, #4
 800ca0c:	23fa      	movs	r3, #250	@ 0xfa
 800ca0e:	011b      	lsls	r3, r3, #4
 800ca10:	0019      	movs	r1, r3
 800ca12:	f004 fe45 	bl	80116a0 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800ca16:	4b1d      	ldr	r3, [pc, #116]	@ (800ca8c <Device_Test+0xd8>)
 800ca18:	79db      	ldrb	r3, [r3, #7]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4053      	eors	r3, r2
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d001      	beq.n	800ca28 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800ca24:	f7fa f9d2 	bl	8006dcc <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800ca28:	4b18      	ldr	r3, [pc, #96]	@ (800ca8c <Device_Test+0xd8>)
 800ca2a:	79db      	ldrb	r3, [r3, #7]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <Device_Test+0x84>
 800ca30:	4b16      	ldr	r3, [pc, #88]	@ (800ca8c <Device_Test+0xd8>)
 800ca32:	799b      	ldrb	r3, [r3, #6]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d106      	bne.n	800ca46 <Device_Test+0x92>
 800ca38:	4b16      	ldr	r3, [pc, #88]	@ (800ca94 <Device_Test+0xe0>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	0018      	movs	r0, r3
 800ca3e:	f006 f8ad 	bl	8012b9c <TimestampIsReached>
 800ca42:	1e03      	subs	r3, r0, #0
 800ca44:	d01f      	beq.n	800ca86 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800ca46:	4b11      	ldr	r3, [pc, #68]	@ (800ca8c <Device_Test+0xd8>)
 800ca48:	79db      	ldrb	r3, [r3, #7]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <Device_Test+0x9e>
 800ca4e:	4b12      	ldr	r3, [pc, #72]	@ (800ca98 <Device_Test+0xe4>)
 800ca50:	e000      	b.n	800ca54 <Device_Test+0xa0>
 800ca52:	4b12      	ldr	r3, [pc, #72]	@ (800ca9c <Device_Test+0xe8>)
 800ca54:	4a12      	ldr	r2, [pc, #72]	@ (800caa0 <Device_Test+0xec>)
 800ca56:	4913      	ldr	r1, [pc, #76]	@ (800caa4 <Device_Test+0xf0>)
 800ca58:	2002      	movs	r0, #2
 800ca5a:	f006 f8f5 	bl	8012c48 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800ca5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca8c <Device_Test+0xd8>)
 800ca60:	799b      	ldrb	r3, [r3, #6]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <Device_Test+0xb6>
 800ca66:	4b0c      	ldr	r3, [pc, #48]	@ (800ca98 <Device_Test+0xe4>)
 800ca68:	e000      	b.n	800ca6c <Device_Test+0xb8>
 800ca6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ca9c <Device_Test+0xe8>)
 800ca6c:	4a0e      	ldr	r2, [pc, #56]	@ (800caa8 <Device_Test+0xf4>)
 800ca6e:	490d      	ldr	r1, [pc, #52]	@ (800caa4 <Device_Test+0xf0>)
 800ca70:	2002      	movs	r0, #2
 800ca72:	f006 f8e9 	bl	8012c48 <CreateLine>
    Info("Test completed");
 800ca76:	4a0d      	ldr	r2, [pc, #52]	@ (800caac <Device_Test+0xf8>)
 800ca78:	4b0a      	ldr	r3, [pc, #40]	@ (800caa4 <Device_Test+0xf0>)
 800ca7a:	0019      	movs	r1, r3
 800ca7c:	2002      	movs	r0, #2
 800ca7e:	f006 f8e3 	bl	8012c48 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800ca82:	f7ff f8f7 	bl	800bc74 <SetTestDone>
  }
}
 800ca86:	46c0      	nop			@ (mov r8, r8)
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	20000e4c 	.word	0x20000e4c
 800ca90:	20000e44 	.word	0x20000e44
 800ca94:	20000e3c 	.word	0x20000e3c
 800ca98:	0802c138 	.word	0x0802c138
 800ca9c:	0802c140 	.word	0x0802c140
 800caa0:	0802c148 	.word	0x0802c148
 800caa4:	0802bf54 	.word	0x0802bf54
 800caa8:	0802c15c 	.word	0x0802c15c
 800caac:	0802c170 	.word	0x0802c170

0800cab0 <AllDevicesReady>:

bool AllDevicesReady() {
 800cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab2:	46de      	mov	lr, fp
 800cab4:	4657      	mov	r7, sl
 800cab6:	464e      	mov	r6, r9
 800cab8:	4645      	mov	r5, r8
 800caba:	b5e0      	push	{r5, r6, r7, lr}
 800cabc:	b08b      	sub	sp, #44	@ 0x2c
 800cabe:	af08      	add	r7, sp, #32
  if (TimestampIsReached(deviceTimeOut)) {
 800cac0:	4b6d      	ldr	r3, [pc, #436]	@ (800cc78 <AllDevicesReady+0x1c8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	0018      	movs	r0, r3
 800cac6:	f006 f869 	bl	8012b9c <TimestampIsReached>
 800caca:	1e03      	subs	r3, r0, #0
 800cacc:	d100      	bne.n	800cad0 <AllDevicesReady+0x20>
 800cace:	e0c8      	b.n	800cc62 <AllDevicesReady+0x1b2>
    if (!sensorsdisablereq) {
 800cad0:	4b6a      	ldr	r3, [pc, #424]	@ (800cc7c <AllDevicesReady+0x1cc>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2201      	movs	r2, #1
 800cad6:	4053      	eors	r3, r2
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d008      	beq.n	800caf0 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800cade:	4a68      	ldr	r2, [pc, #416]	@ (800cc80 <AllDevicesReady+0x1d0>)
 800cae0:	4b68      	ldr	r3, [pc, #416]	@ (800cc84 <AllDevicesReady+0x1d4>)
 800cae2:	0019      	movs	r1, r3
 800cae4:	2003      	movs	r0, #3
 800cae6:	f006 f8af 	bl	8012c48 <CreateLine>
      sensorsdisablereq = true;
 800caea:	4b64      	ldr	r3, [pc, #400]	@ (800cc7c <AllDevicesReady+0x1cc>)
 800caec:	2201      	movs	r2, #1
 800caee:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800caf0:	4b65      	ldr	r3, [pc, #404]	@ (800cc88 <AllDevicesReady+0x1d8>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b06      	cmp	r3, #6
 800caf6:	d102      	bne.n	800cafe <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800caf8:	4b64      	ldr	r3, [pc, #400]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cafa:	2200      	movs	r2, #0
 800cafc:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800cafe:	4b64      	ldr	r3, [pc, #400]	@ (800cc90 <AllDevicesReady+0x1e0>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	d006      	beq.n	800cb14 <AllDevicesReady+0x64>
 800cb06:	4b63      	ldr	r3, [pc, #396]	@ (800cc94 <AllDevicesReady+0x1e4>)
 800cb08:	789b      	ldrb	r3, [r3, #2]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	4053      	eors	r3, r2
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800cb14:	4b5d      	ldr	r3, [pc, #372]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800cb1a:	4b5f      	ldr	r3, [pc, #380]	@ (800cc98 <AllDevicesReady+0x1e8>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	2b08      	cmp	r3, #8
 800cb20:	d006      	beq.n	800cb30 <AllDevicesReady+0x80>
 800cb22:	4b5c      	ldr	r3, [pc, #368]	@ (800cc94 <AllDevicesReady+0x1e4>)
 800cb24:	791b      	ldrb	r3, [r3, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	4053      	eors	r3, r2
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800cb30:	4b56      	ldr	r3, [pc, #344]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800cb36:	4b59      	ldr	r3, [pc, #356]	@ (800cc9c <AllDevicesReady+0x1ec>)
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	2b08      	cmp	r3, #8
 800cb3c:	d006      	beq.n	800cb4c <AllDevicesReady+0x9c>
 800cb3e:	4b55      	ldr	r3, [pc, #340]	@ (800cc94 <AllDevicesReady+0x1e4>)
 800cb40:	78db      	ldrb	r3, [r3, #3]
 800cb42:	2201      	movs	r2, #1
 800cb44:	4053      	eors	r3, r2
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d002      	beq.n	800cb52 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800cb4c:	4b4f      	ldr	r3, [pc, #316]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800cb52:	4b53      	ldr	r3, [pc, #332]	@ (800cca0 <AllDevicesReady+0x1f0>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b07      	cmp	r3, #7
 800cb58:	d006      	beq.n	800cb68 <AllDevicesReady+0xb8>
 800cb5a:	4b4e      	ldr	r3, [pc, #312]	@ (800cc94 <AllDevicesReady+0x1e4>)
 800cb5c:	7a1b      	ldrb	r3, [r3, #8]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	4053      	eors	r3, r2
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d002      	beq.n	800cb6e <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800cb68:	4b48      	ldr	r3, [pc, #288]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800cb6e:	4b4d      	ldr	r3, [pc, #308]	@ (800cca4 <AllDevicesReady+0x1f4>)
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d003      	beq.n	800cb7e <AllDevicesReady+0xce>
 800cb76:	4b4b      	ldr	r3, [pc, #300]	@ (800cca4 <AllDevicesReady+0x1f4>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d102      	bne.n	800cb84 <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800cb7e:	4b43      	ldr	r3, [pc, #268]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800cb84:	4b48      	ldr	r3, [pc, #288]	@ (800cca8 <AllDevicesReady+0x1f8>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b03      	cmp	r3, #3
 800cb8a:	d102      	bne.n	800cb92 <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800cb8c:	4b3f      	ldr	r3, [pc, #252]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800cb92:	4b46      	ldr	r3, [pc, #280]	@ (800ccac <AllDevicesReady+0x1fc>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b09      	cmp	r3, #9
 800cb98:	d003      	beq.n	800cba2 <AllDevicesReady+0xf2>
 800cb9a:	4b44      	ldr	r3, [pc, #272]	@ (800ccac <AllDevicesReady+0x1fc>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d15f      	bne.n	800cc62 <AllDevicesReady+0x1b2>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cba2:	4b3a      	ldr	r3, [pc, #232]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	4b39      	ldr	r3, [pc, #228]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cba8:	785b      	ldrb	r3, [r3, #1]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	b2da      	uxtb	r2, r3
 800cbae:	4b37      	ldr	r3, [pc, #220]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cbb0:	791b      	ldrb	r3, [r3, #4]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	b2da      	uxtb	r2, r3
 800cbb6:	4b35      	ldr	r3, [pc, #212]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cbb8:	795b      	ldrb	r3, [r3, #5]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cbbe:	4b33      	ldr	r3, [pc, #204]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cbc0:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cbc6:	4b31      	ldr	r3, [pc, #196]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cbc8:	789b      	ldrb	r3, [r3, #2]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	4b2f      	ldr	r3, [pc, #188]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cbd0:	78db      	ldrb	r3, [r3, #3]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	1e5a      	subs	r2, r3, #1
 800cbd8:	4193      	sbcs	r3, r2
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	2201      	movs	r2, #1
 800cbde:	4053      	eors	r3, r2
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cbe4:	1dfb      	adds	r3, r7, #7
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	781a      	ldrb	r2, [r3, #0]
 800cbea:	2101      	movs	r1, #1
 800cbec:	400a      	ands	r2, r1
 800cbee:	701a      	strb	r2, [r3, #0]
      if (!status) {
 800cbf0:	1dfb      	adds	r3, r7, #7
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	4053      	eors	r3, r2
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d028      	beq.n	800cc50 <AllDevicesReady+0x1a0>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800cbfe:	4b23      	ldr	r3, [pc, #140]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	469b      	mov	fp, r3
 800cc04:	4b21      	ldr	r3, [pc, #132]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cc06:	791b      	ldrb	r3, [r3, #4]
 800cc08:	001c      	movs	r4, r3
 800cc0a:	4b20      	ldr	r3, [pc, #128]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cc0c:	795b      	ldrb	r3, [r3, #5]
 800cc0e:	001d      	movs	r5, r3
 800cc10:	4b1e      	ldr	r3, [pc, #120]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cc12:	799b      	ldrb	r3, [r3, #6]
 800cc14:	001e      	movs	r6, r3
 800cc16:	4b1d      	ldr	r3, [pc, #116]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cc18:	785b      	ldrb	r3, [r3, #1]
 800cc1a:	4698      	mov	r8, r3
 800cc1c:	4b1b      	ldr	r3, [pc, #108]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cc1e:	789b      	ldrb	r3, [r3, #2]
 800cc20:	4699      	mov	r9, r3
 800cc22:	4b1a      	ldr	r3, [pc, #104]	@ (800cc8c <AllDevicesReady+0x1dc>)
 800cc24:	78db      	ldrb	r3, [r3, #3]
 800cc26:	469a      	mov	sl, r3
 800cc28:	f000 f8d8 	bl	800cddc <getSensorLock>
 800cc2c:	0003      	movs	r3, r0
 800cc2e:	4a20      	ldr	r2, [pc, #128]	@ (800ccb0 <AllDevicesReady+0x200>)
 800cc30:	4914      	ldr	r1, [pc, #80]	@ (800cc84 <AllDevicesReady+0x1d4>)
 800cc32:	9306      	str	r3, [sp, #24]
 800cc34:	4653      	mov	r3, sl
 800cc36:	9305      	str	r3, [sp, #20]
 800cc38:	464b      	mov	r3, r9
 800cc3a:	9304      	str	r3, [sp, #16]
 800cc3c:	4643      	mov	r3, r8
 800cc3e:	9303      	str	r3, [sp, #12]
 800cc40:	9602      	str	r6, [sp, #8]
 800cc42:	9501      	str	r5, [sp, #4]
 800cc44:	9400      	str	r4, [sp, #0]
 800cc46:	465b      	mov	r3, fp
 800cc48:	2003      	movs	r0, #3
 800cc4a:	f005 fffd 	bl	8012c48 <CreateLine>
 800cc4e:	e005      	b.n	800cc5c <AllDevicesReady+0x1ac>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
      }
      else {
        Debug("All sensors in wait");
 800cc50:	4a18      	ldr	r2, [pc, #96]	@ (800ccb4 <AllDevicesReady+0x204>)
 800cc52:	4b0c      	ldr	r3, [pc, #48]	@ (800cc84 <AllDevicesReady+0x1d4>)
 800cc54:	0019      	movs	r1, r3
 800cc56:	2003      	movs	r0, #3
 800cc58:	f005 fff6 	bl	8012c48 <CreateLine>
      }
      return status;
 800cc5c:	1dfb      	adds	r3, r7, #7
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	e000      	b.n	800cc64 <AllDevicesReady+0x1b4>
    }
  }
  return false;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	0018      	movs	r0, r3
 800cc66:	46bd      	mov	sp, r7
 800cc68:	b003      	add	sp, #12
 800cc6a:	bcf0      	pop	{r4, r5, r6, r7}
 800cc6c:	46bb      	mov	fp, r7
 800cc6e:	46b2      	mov	sl, r6
 800cc70:	46a9      	mov	r9, r5
 800cc72:	46a0      	mov	r8, r4
 800cc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc76:	46c0      	nop			@ (mov r8, r8)
 800cc78:	20000e3c 	.word	0x20000e3c
 800cc7c:	20000e5b 	.word	0x20000e5b
 800cc80:	0802c180 	.word	0x0802c180
 800cc84:	0802bd98 	.word	0x0802bd98
 800cc88:	20000e57 	.word	0x20000e57
 800cc8c:	20000e44 	.word	0x20000e44
 800cc90:	20000e58 	.word	0x20000e58
 800cc94:	20000e4c 	.word	0x20000e4c
 800cc98:	20000e59 	.word	0x20000e59
 800cc9c:	20000e5a 	.word	0x20000e5a
 800cca0:	20000e56 	.word	0x20000e56
 800cca4:	2000009d 	.word	0x2000009d
 800cca8:	20000e28 	.word	0x20000e28
 800ccac:	20000e29 	.word	0x20000e29
 800ccb0:	0802c1a0 	.word	0x0802c1a0
 800ccb4:	0802c204 	.word	0x0802c204

0800ccb8 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800ccbc:	4b23      	ldr	r3, [pc, #140]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800ccc4:	4b22      	ldr	r3, [pc, #136]	@ (800cd50 <EnabledConnectedDevices+0x98>)
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800ccca:	4b20      	ldr	r3, [pc, #128]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800cccc:	789b      	ldrb	r3, [r3, #2]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800ccd2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd50 <EnabledConnectedDevices+0x98>)
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800ccd8:	4b1c      	ldr	r3, [pc, #112]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800ccda:	791b      	ldrb	r3, [r3, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800cce0:	4b1b      	ldr	r3, [pc, #108]	@ (800cd50 <EnabledConnectedDevices+0x98>)
 800cce2:	2201      	movs	r2, #1
 800cce4:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800cce6:	4b19      	ldr	r3, [pc, #100]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800cce8:	78db      	ldrb	r3, [r3, #3]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d002      	beq.n	800ccf4 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800ccee:	4b18      	ldr	r3, [pc, #96]	@ (800cd50 <EnabledConnectedDevices+0x98>)
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800ccf4:	4b15      	ldr	r3, [pc, #84]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800ccf6:	785b      	ldrb	r3, [r3, #1]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d006      	beq.n	800cd0a <EnabledConnectedDevices+0x52>
 800ccfc:	4b13      	ldr	r3, [pc, #76]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800ccfe:	7a1b      	ldrb	r3, [r3, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800cd04:	4b12      	ldr	r3, [pc, #72]	@ (800cd50 <EnabledConnectedDevices+0x98>)
 800cd06:	2201      	movs	r2, #1
 800cd08:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800cd0a:	4b10      	ldr	r3, [pc, #64]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800cd0c:	795b      	ldrb	r3, [r3, #5]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800cd12:	4b0f      	ldr	r3, [pc, #60]	@ (800cd50 <EnabledConnectedDevices+0x98>)
 800cd14:	2201      	movs	r2, #1
 800cd16:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800cd18:	4b0c      	ldr	r3, [pc, #48]	@ (800cd4c <EnabledConnectedDevices+0x94>)
 800cd1a:	799b      	ldrb	r3, [r3, #6]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d002      	beq.n	800cd26 <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800cd20:	4b0b      	ldr	r3, [pc, #44]	@ (800cd50 <EnabledConnectedDevices+0x98>)
 800cd22:	2201      	movs	r2, #1
 800cd24:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800cd26:	f006 fccd 	bl	80136c4 <HAL_GetTick>
 800cd2a:	0003      	movs	r3, r0
 800cd2c:	4a09      	ldr	r2, [pc, #36]	@ (800cd54 <EnabledConnectedDevices+0x9c>)
 800cd2e:	189a      	adds	r2, r3, r2
 800cd30:	4b09      	ldr	r3, [pc, #36]	@ (800cd58 <EnabledConnectedDevices+0xa0>)
 800cd32:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800cd34:	4b09      	ldr	r3, [pc, #36]	@ (800cd5c <EnabledConnectedDevices+0xa4>)
 800cd36:	2200      	movs	r2, #0
 800cd38:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800cd3a:	4a09      	ldr	r2, [pc, #36]	@ (800cd60 <EnabledConnectedDevices+0xa8>)
 800cd3c:	4b09      	ldr	r3, [pc, #36]	@ (800cd64 <EnabledConnectedDevices+0xac>)
 800cd3e:	0019      	movs	r1, r3
 800cd40:	2003      	movs	r0, #3
 800cd42:	f005 ff81 	bl	8012c48 <CreateLine>
}
 800cd46:	46c0      	nop			@ (mov r8, r8)
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20000e4c 	.word	0x20000e4c
 800cd50:	20000e44 	.word	0x20000e44
 800cd54:	00124f80 	.word	0x00124f80
 800cd58:	20000e3c 	.word	0x20000e3c
 800cd5c:	20000e5b 	.word	0x20000e5b
 800cd60:	0802c218 	.word	0x0802c218
 800cd64:	0802bd98 	.word	0x0802bd98

0800cd68 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800cd6c:	4b0e      	ldr	r3, [pc, #56]	@ (800cda8 <DisableConnectedDevices+0x40>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800cd72:	4b0d      	ldr	r3, [pc, #52]	@ (800cda8 <DisableConnectedDevices+0x40>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800cd78:	4b0b      	ldr	r3, [pc, #44]	@ (800cda8 <DisableConnectedDevices+0x40>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800cd7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cda8 <DisableConnectedDevices+0x40>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800cd84:	4b08      	ldr	r3, [pc, #32]	@ (800cda8 <DisableConnectedDevices+0x40>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800cd8a:	4b07      	ldr	r3, [pc, #28]	@ (800cda8 <DisableConnectedDevices+0x40>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800cd90:	4b05      	ldr	r3, [pc, #20]	@ (800cda8 <DisableConnectedDevices+0x40>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800cd96:	4a05      	ldr	r2, [pc, #20]	@ (800cdac <DisableConnectedDevices+0x44>)
 800cd98:	4b05      	ldr	r3, [pc, #20]	@ (800cdb0 <DisableConnectedDevices+0x48>)
 800cd9a:	0019      	movs	r1, r3
 800cd9c:	2003      	movs	r0, #3
 800cd9e:	f005 ff53 	bl	8012c48 <CreateLine>
}
 800cda2:	46c0      	nop			@ (mov r8, r8)
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20000e44 	.word	0x20000e44
 800cdac:	0802c228 	.word	0x0802c228
 800cdb0:	0802bd98 	.word	0x0802bd98

0800cdb4 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	0002      	movs	r2, r0
 800cdbc:	1dfb      	adds	r3, r7, #7
 800cdbe:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800cdc0:	4b05      	ldr	r3, [pc, #20]	@ (800cdd8 <setSensorLock+0x24>)
 800cdc2:	1dfa      	adds	r2, r7, #7
 800cdc4:	7812      	ldrb	r2, [r2, #0]
 800cdc6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800cdc8:	200a      	movs	r0, #10
 800cdca:	f006 fc85 	bl	80136d8 <HAL_Delay>
}
 800cdce:	46c0      	nop			@ (mov r8, r8)
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	b002      	add	sp, #8
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	46c0      	nop			@ (mov r8, r8)
 800cdd8:	20000e55 	.word	0x20000e55

0800cddc <getSensorLock>:

uint8_t getSensorLock() {
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800cde0:	4b02      	ldr	r3, [pc, #8]	@ (800cdec <getSensorLock+0x10>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
}
 800cde4:	0018      	movs	r0, r3
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	46c0      	nop			@ (mov r8, r8)
 800cdec:	20000e55 	.word	0x20000e55

0800cdf0 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800cdf4:	4b1a      	ldr	r3, [pc, #104]	@ (800ce60 <UpkeepI2Csensors+0x70>)
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d005      	beq.n	800ce08 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800cdfc:	f006 fae0 	bl	80133c0 <HIDS_Upkeep>
 800ce00:	0003      	movs	r3, r0
 800ce02:	001a      	movs	r2, r3
 800ce04:	4b17      	ldr	r3, [pc, #92]	@ (800ce64 <UpkeepI2Csensors+0x74>)
 800ce06:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800ce08:	4b15      	ldr	r3, [pc, #84]	@ (800ce60 <UpkeepI2Csensors+0x70>)
 800ce0a:	785b      	ldrb	r3, [r3, #1]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d005      	beq.n	800ce1c <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800ce10:	f003 fb4e 	bl	80104b0 <SGP_Upkeep>
 800ce14:	0003      	movs	r3, r0
 800ce16:	001a      	movs	r2, r3
 800ce18:	4b13      	ldr	r3, [pc, #76]	@ (800ce68 <UpkeepI2Csensors+0x78>)
 800ce1a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800ce1c:	4b10      	ldr	r3, [pc, #64]	@ (800ce60 <UpkeepI2Csensors+0x70>)
 800ce1e:	791b      	ldrb	r3, [r3, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800ce24:	f7fd fa8e 	bl	800a344 <AHT_Upkeep>
 800ce28:	0003      	movs	r3, r0
 800ce2a:	001a      	movs	r2, r3
 800ce2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ce6c <UpkeepI2Csensors+0x7c>)
 800ce2e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800ce30:	4b0b      	ldr	r3, [pc, #44]	@ (800ce60 <UpkeepI2Csensors+0x70>)
 800ce32:	795b      	ldrb	r3, [r3, #5]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800ce38:	f7fe f80c 	bl	800ae54 <BMP_Upkeep>
 800ce3c:	0003      	movs	r3, r0
 800ce3e:	001a      	movs	r2, r3
 800ce40:	4b0b      	ldr	r3, [pc, #44]	@ (800ce70 <UpkeepI2Csensors+0x80>)
 800ce42:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800ce44:	4b06      	ldr	r3, [pc, #24]	@ (800ce60 <UpkeepI2Csensors+0x70>)
 800ce46:	799b      	ldrb	r3, [r3, #6]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d005      	beq.n	800ce58 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800ce4c:	f7f7 f8ec 	bl	8004028 <ENS_Upkeep>
 800ce50:	0003      	movs	r3, r0
 800ce52:	001a      	movs	r2, r3
 800ce54:	4b07      	ldr	r3, [pc, #28]	@ (800ce74 <UpkeepI2Csensors+0x84>)
 800ce56:	701a      	strb	r2, [r3, #0]
  }
}
 800ce58:	46c0      	nop			@ (mov r8, r8)
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	46c0      	nop			@ (mov r8, r8)
 800ce60:	20000e44 	.word	0x20000e44
 800ce64:	20000e57 	.word	0x20000e57
 800ce68:	20000e56 	.word	0x20000e56
 800ce6c:	20000e58 	.word	0x20000e58
 800ce70:	20000e59 	.word	0x20000e59
 800ce74:	20000e5a 	.word	0x20000e5a

0800ce78 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800ce7c:	4b02      	ldr	r3, [pc, #8]	@ (800ce88 <ResetdBAmax+0x10>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	601a      	str	r2, [r3, #0]
}
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	20000ea0 	.word	0x20000ea0

0800ce8c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800ce94:	f006 fc16 	bl	80136c4 <HAL_GetTick>
 800ce98:	0002      	movs	r2, r0
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	18d2      	adds	r2, r2, r3
 800ce9e:	4b03      	ldr	r3, [pc, #12]	@ (800ceac <setMICTimeStamp+0x20>)
 800cea0:	601a      	str	r2, [r3, #0]
}
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b002      	add	sp, #8
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	46c0      	nop			@ (mov r8, r8)
 800ceac:	20000ea8 	.word	0x20000ea8

0800ceb0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	af00      	add	r7, sp, #0
  counter = 0;
 800ceb4:	4b05      	ldr	r3, [pc, #20]	@ (800cecc <ResetDBACalculator+0x1c>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800ceba:	4b05      	ldr	r3, [pc, #20]	@ (800ced0 <ResetDBACalculator+0x20>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800cec0:	4b04      	ldr	r3, [pc, #16]	@ (800ced4 <ResetDBACalculator+0x24>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	701a      	strb	r2, [r3, #0]
}
 800cec6:	46c0      	nop			@ (mov r8, r8)
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	20000ea4 	.word	0x20000ea4
 800ced0:	2000009c 	.word	0x2000009c
 800ced4:	20000ea5 	.word	0x20000ea5

0800ced8 <MIC_Print>:

void MIC_Print(void) {
 800ced8:	b5b0      	push	{r4, r5, r7, lr}
 800ceda:	b08a      	sub	sp, #40	@ 0x28
 800cedc:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800cede:	4b9f      	ldr	r3, [pc, #636]	@ (800d15c <MIC_Print+0x284>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	4b9f      	ldr	r3, [pc, #636]	@ (800d160 <MIC_Print+0x288>)
 800cee4:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800cee6:	4b9f      	ldr	r3, [pc, #636]	@ (800d164 <MIC_Print+0x28c>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	001a      	movs	r2, r3
 800ceec:	4b9c      	ldr	r3, [pc, #624]	@ (800d160 <MIC_Print+0x288>)
 800ceee:	6819      	ldr	r1, [r3, #0]
 800cef0:	4b9d      	ldr	r3, [pc, #628]	@ (800d168 <MIC_Print+0x290>)
 800cef2:	0092      	lsls	r2, r2, #2
 800cef4:	50d1      	str	r1, [r2, r3]
  counter++;
 800cef6:	4b9b      	ldr	r3, [pc, #620]	@ (800d164 <MIC_Print+0x28c>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	3301      	adds	r3, #1
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	4b99      	ldr	r3, [pc, #612]	@ (800d164 <MIC_Print+0x28c>)
 800cf00:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800cf02:	4b98      	ldr	r3, [pc, #608]	@ (800d164 <MIC_Print+0x28c>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	2b09      	cmp	r3, #9
 800cf08:	d80b      	bhi.n	800cf22 <MIC_Print+0x4a>
 800cf0a:	4b98      	ldr	r3, [pc, #608]	@ (800d16c <MIC_Print+0x294>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	4053      	eors	r3, r2
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <MIC_Print+0x4a>
    denominator = counter;
 800cf18:	4b92      	ldr	r3, [pc, #584]	@ (800d164 <MIC_Print+0x28c>)
 800cf1a:	781a      	ldrb	r2, [r3, #0]
 800cf1c:	4b94      	ldr	r3, [pc, #592]	@ (800d170 <MIC_Print+0x298>)
 800cf1e:	701a      	strb	r2, [r3, #0]
 800cf20:	e005      	b.n	800cf2e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800cf22:	4b93      	ldr	r3, [pc, #588]	@ (800d170 <MIC_Print+0x298>)
 800cf24:	220a      	movs	r2, #10
 800cf26:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800cf28:	4b90      	ldr	r3, [pc, #576]	@ (800d16c <MIC_Print+0x294>)
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800cf2e:	4b91      	ldr	r3, [pc, #580]	@ (800d174 <MIC_Print+0x29c>)
 800cf30:	2200      	movs	r2, #0
 800cf32:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800cf34:	230f      	movs	r3, #15
 800cf36:	18fb      	adds	r3, r7, r3
 800cf38:	2200      	movs	r2, #0
 800cf3a:	701a      	strb	r2, [r3, #0]
 800cf3c:	e042      	b.n	800cfc4 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800cf3e:	240f      	movs	r4, #15
 800cf40:	193b      	adds	r3, r7, r4
 800cf42:	781a      	ldrb	r2, [r3, #0]
 800cf44:	4b88      	ldr	r3, [pc, #544]	@ (800d168 <MIC_Print+0x290>)
 800cf46:	0092      	lsls	r2, r2, #2
 800cf48:	58d2      	ldr	r2, [r2, r3]
 800cf4a:	4b8a      	ldr	r3, [pc, #552]	@ (800d174 <MIC_Print+0x29c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	1c19      	adds	r1, r3, #0
 800cf50:	1c10      	adds	r0, r2, #0
 800cf52:	f7f3 fcb5 	bl	80008c0 <__aeabi_fadd>
 800cf56:	1c03      	adds	r3, r0, #0
 800cf58:	1c1a      	adds	r2, r3, #0
 800cf5a:	4b86      	ldr	r3, [pc, #536]	@ (800d174 <MIC_Print+0x29c>)
 800cf5c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800cf5e:	193b      	adds	r3, r7, r4
 800cf60:	781a      	ldrb	r2, [r3, #0]
 800cf62:	4b81      	ldr	r3, [pc, #516]	@ (800d168 <MIC_Print+0x290>)
 800cf64:	0092      	lsls	r2, r2, #2
 800cf66:	58d2      	ldr	r2, [r2, r3]
 800cf68:	4b83      	ldr	r3, [pc, #524]	@ (800d178 <MIC_Print+0x2a0>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	1c19      	adds	r1, r3, #0
 800cf6e:	1c10      	adds	r0, r2, #0
 800cf70:	f7f3 faf2 	bl	8000558 <__aeabi_fcmpgt>
 800cf74:	1e03      	subs	r3, r0, #0
 800cf76:	d006      	beq.n	800cf86 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800cf78:	193b      	adds	r3, r7, r4
 800cf7a:	781a      	ldrb	r2, [r3, #0]
 800cf7c:	4b7a      	ldr	r3, [pc, #488]	@ (800d168 <MIC_Print+0x290>)
 800cf7e:	0092      	lsls	r2, r2, #2
 800cf80:	58d2      	ldr	r2, [r2, r3]
 800cf82:	4b7d      	ldr	r3, [pc, #500]	@ (800d178 <MIC_Print+0x2a0>)
 800cf84:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800cf86:	4b7b      	ldr	r3, [pc, #492]	@ (800d174 <MIC_Print+0x29c>)
 800cf88:	681c      	ldr	r4, [r3, #0]
 800cf8a:	4b79      	ldr	r3, [pc, #484]	@ (800d170 <MIC_Print+0x298>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	0018      	movs	r0, r3
 800cf90:	f7f4 fb6a 	bl	8001668 <__aeabi_ui2f>
 800cf94:	1c03      	adds	r3, r0, #0
 800cf96:	1c19      	adds	r1, r3, #0
 800cf98:	1c20      	adds	r0, r4, #0
 800cf9a:	f7f3 fe1b 	bl	8000bd4 <__aeabi_fdiv>
 800cf9e:	1c03      	adds	r3, r0, #0
 800cfa0:	1c1a      	adds	r2, r3, #0
 800cfa2:	4b76      	ldr	r3, [pc, #472]	@ (800d17c <MIC_Print+0x2a4>)
 800cfa4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800cfa6:	4b6e      	ldr	r3, [pc, #440]	@ (800d160 <MIC_Print+0x288>)
 800cfa8:	6818      	ldr	r0, [r3, #0]
 800cfaa:	4b73      	ldr	r3, [pc, #460]	@ (800d178 <MIC_Print+0x2a0>)
 800cfac:	6819      	ldr	r1, [r3, #0]
 800cfae:	4b73      	ldr	r3, [pc, #460]	@ (800d17c <MIC_Print+0x2a4>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	1c1a      	adds	r2, r3, #0
 800cfb4:	f7f7 fbf4 	bl	80047a0 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800cfb8:	210f      	movs	r1, #15
 800cfba:	187b      	adds	r3, r7, r1
 800cfbc:	781a      	ldrb	r2, [r3, #0]
 800cfbe:	187b      	adds	r3, r7, r1
 800cfc0:	3201      	adds	r2, #1
 800cfc2:	701a      	strb	r2, [r3, #0]
 800cfc4:	4b6a      	ldr	r3, [pc, #424]	@ (800d170 <MIC_Print+0x298>)
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	220f      	movs	r2, #15
 800cfca:	18ba      	adds	r2, r7, r2
 800cfcc:	7812      	ldrb	r2, [r2, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d3b5      	bcc.n	800cf3e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800cfd2:	4b63      	ldr	r3, [pc, #396]	@ (800d160 <MIC_Print+0x288>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	1c18      	adds	r0, r3, #0
 800cfd8:	f7f6 fa44 	bl	8003464 <__aeabi_f2d>
 800cfdc:	6038      	str	r0, [r7, #0]
 800cfde:	6079      	str	r1, [r7, #4]
 800cfe0:	4b65      	ldr	r3, [pc, #404]	@ (800d178 <MIC_Print+0x2a0>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	1c18      	adds	r0, r3, #0
 800cfe6:	f7f6 fa3d 	bl	8003464 <__aeabi_f2d>
 800cfea:	0004      	movs	r4, r0
 800cfec:	000d      	movs	r5, r1
 800cfee:	4b63      	ldr	r3, [pc, #396]	@ (800d17c <MIC_Print+0x2a4>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	1c18      	adds	r0, r3, #0
 800cff4:	f7f6 fa36 	bl	8003464 <__aeabi_f2d>
 800cff8:	0002      	movs	r2, r0
 800cffa:	000b      	movs	r3, r1
 800cffc:	4960      	ldr	r1, [pc, #384]	@ (800d180 <MIC_Print+0x2a8>)
 800cffe:	9204      	str	r2, [sp, #16]
 800d000:	9305      	str	r3, [sp, #20]
 800d002:	9402      	str	r4, [sp, #8]
 800d004:	9503      	str	r5, [sp, #12]
 800d006:	4b5f      	ldr	r3, [pc, #380]	@ (800d184 <MIC_Print+0x2ac>)
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	0008      	movs	r0, r1
 800d010:	f017 fe94 	bl	8024d3c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800d014:	4b53      	ldr	r3, [pc, #332]	@ (800d164 <MIC_Print+0x28c>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b0a      	cmp	r3, #10
 800d01a:	d902      	bls.n	800d022 <MIC_Print+0x14a>
    counter = 0;
 800d01c:	4b51      	ldr	r3, [pc, #324]	@ (800d164 <MIC_Print+0x28c>)
 800d01e:	2200      	movs	r2, #0
 800d020:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800d022:	4b4f      	ldr	r3, [pc, #316]	@ (800d160 <MIC_Print+0x288>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4958      	ldr	r1, [pc, #352]	@ (800d188 <MIC_Print+0x2b0>)
 800d028:	1c18      	adds	r0, r3, #0
 800d02a:	f7f3 fa9f 	bl	800056c <__aeabi_fcmpge>
 800d02e:	1e03      	subs	r3, r0, #0
 800d030:	d004      	beq.n	800d03c <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800d032:	2201      	movs	r2, #1
 800d034:	2101      	movs	r1, #1
 800d036:	2001      	movs	r0, #1
 800d038:	f004 fb66 	bl	8011708 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800d03c:	4b48      	ldr	r3, [pc, #288]	@ (800d160 <MIC_Print+0x288>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4952      	ldr	r1, [pc, #328]	@ (800d18c <MIC_Print+0x2b4>)
 800d042:	1c18      	adds	r0, r3, #0
 800d044:	f7f3 fa92 	bl	800056c <__aeabi_fcmpge>
 800d048:	1e03      	subs	r3, r0, #0
 800d04a:	d00c      	beq.n	800d066 <MIC_Print+0x18e>
 800d04c:	4b44      	ldr	r3, [pc, #272]	@ (800d160 <MIC_Print+0x288>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	494d      	ldr	r1, [pc, #308]	@ (800d188 <MIC_Print+0x2b0>)
 800d052:	1c18      	adds	r0, r3, #0
 800d054:	f7f3 fa6c 	bl	8000530 <__aeabi_fcmplt>
 800d058:	1e03      	subs	r3, r0, #0
 800d05a:	d004      	beq.n	800d066 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800d05c:	2200      	movs	r2, #0
 800d05e:	2100      	movs	r1, #0
 800d060:	2001      	movs	r0, #1
 800d062:	f004 fb51 	bl	8011708 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800d066:	4b3e      	ldr	r3, [pc, #248]	@ (800d160 <MIC_Print+0x288>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4949      	ldr	r1, [pc, #292]	@ (800d190 <MIC_Print+0x2b8>)
 800d06c:	1c18      	adds	r0, r3, #0
 800d06e:	f7f3 fa7d 	bl	800056c <__aeabi_fcmpge>
 800d072:	1e03      	subs	r3, r0, #0
 800d074:	d00c      	beq.n	800d090 <MIC_Print+0x1b8>
 800d076:	4b3a      	ldr	r3, [pc, #232]	@ (800d160 <MIC_Print+0x288>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4944      	ldr	r1, [pc, #272]	@ (800d18c <MIC_Print+0x2b4>)
 800d07c:	1c18      	adds	r0, r3, #0
 800d07e:	f7f3 fa57 	bl	8000530 <__aeabi_fcmplt>
 800d082:	1e03      	subs	r3, r0, #0
 800d084:	d004      	beq.n	800d090 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800d086:	2200      	movs	r2, #0
 800d088:	2101      	movs	r1, #1
 800d08a:	2001      	movs	r0, #1
 800d08c:	f004 fb3c 	bl	8011708 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800d090:	4b33      	ldr	r3, [pc, #204]	@ (800d160 <MIC_Print+0x288>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	493f      	ldr	r1, [pc, #252]	@ (800d194 <MIC_Print+0x2bc>)
 800d096:	1c18      	adds	r0, r3, #0
 800d098:	f7f3 fa68 	bl	800056c <__aeabi_fcmpge>
 800d09c:	1e03      	subs	r3, r0, #0
 800d09e:	d00c      	beq.n	800d0ba <MIC_Print+0x1e2>
 800d0a0:	4b2f      	ldr	r3, [pc, #188]	@ (800d160 <MIC_Print+0x288>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	493a      	ldr	r1, [pc, #232]	@ (800d190 <MIC_Print+0x2b8>)
 800d0a6:	1c18      	adds	r0, r3, #0
 800d0a8:	f7f3 fa42 	bl	8000530 <__aeabi_fcmplt>
 800d0ac:	1e03      	subs	r3, r0, #0
 800d0ae:	d004      	beq.n	800d0ba <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	f004 fb27 	bl	8011708 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800d0ba:	4b29      	ldr	r3, [pc, #164]	@ (800d160 <MIC_Print+0x288>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4936      	ldr	r1, [pc, #216]	@ (800d198 <MIC_Print+0x2c0>)
 800d0c0:	1c18      	adds	r0, r3, #0
 800d0c2:	f7f3 fa53 	bl	800056c <__aeabi_fcmpge>
 800d0c6:	1e03      	subs	r3, r0, #0
 800d0c8:	d00c      	beq.n	800d0e4 <MIC_Print+0x20c>
 800d0ca:	4b25      	ldr	r3, [pc, #148]	@ (800d160 <MIC_Print+0x288>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4931      	ldr	r1, [pc, #196]	@ (800d194 <MIC_Print+0x2bc>)
 800d0d0:	1c18      	adds	r0, r3, #0
 800d0d2:	f7f3 fa2d 	bl	8000530 <__aeabi_fcmplt>
 800d0d6:	1e03      	subs	r3, r0, #0
 800d0d8:	d004      	beq.n	800d0e4 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800d0da:	2201      	movs	r2, #1
 800d0dc:	2101      	movs	r1, #1
 800d0de:	2000      	movs	r0, #0
 800d0e0:	f004 fb12 	bl	8011708 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800d0e4:	4b1e      	ldr	r3, [pc, #120]	@ (800d160 <MIC_Print+0x288>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	492c      	ldr	r1, [pc, #176]	@ (800d19c <MIC_Print+0x2c4>)
 800d0ea:	1c18      	adds	r0, r3, #0
 800d0ec:	f7f3 fa3e 	bl	800056c <__aeabi_fcmpge>
 800d0f0:	1e03      	subs	r3, r0, #0
 800d0f2:	d00c      	beq.n	800d10e <MIC_Print+0x236>
 800d0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d160 <MIC_Print+0x288>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4927      	ldr	r1, [pc, #156]	@ (800d198 <MIC_Print+0x2c0>)
 800d0fa:	1c18      	adds	r0, r3, #0
 800d0fc:	f7f3 fa18 	bl	8000530 <__aeabi_fcmplt>
 800d100:	1e03      	subs	r3, r0, #0
 800d102:	d004      	beq.n	800d10e <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800d104:	2201      	movs	r2, #1
 800d106:	2100      	movs	r1, #0
 800d108:	2000      	movs	r0, #0
 800d10a:	f004 fafd 	bl	8011708 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800d10e:	4b14      	ldr	r3, [pc, #80]	@ (800d160 <MIC_Print+0x288>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4923      	ldr	r1, [pc, #140]	@ (800d1a0 <MIC_Print+0x2c8>)
 800d114:	1c18      	adds	r0, r3, #0
 800d116:	f7f3 fa29 	bl	800056c <__aeabi_fcmpge>
 800d11a:	1e03      	subs	r3, r0, #0
 800d11c:	d00c      	beq.n	800d138 <MIC_Print+0x260>
 800d11e:	4b10      	ldr	r3, [pc, #64]	@ (800d160 <MIC_Print+0x288>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	491e      	ldr	r1, [pc, #120]	@ (800d19c <MIC_Print+0x2c4>)
 800d124:	1c18      	adds	r0, r3, #0
 800d126:	f7f3 fa03 	bl	8000530 <__aeabi_fcmplt>
 800d12a:	1e03      	subs	r3, r0, #0
 800d12c:	d004      	beq.n	800d138 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800d12e:	2201      	movs	r2, #1
 800d130:	2100      	movs	r1, #0
 800d132:	2001      	movs	r0, #1
 800d134:	f004 fae8 	bl	8011708 <SetDBLED>
  }
  if(dBA < 35){//off
 800d138:	4b09      	ldr	r3, [pc, #36]	@ (800d160 <MIC_Print+0x288>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4918      	ldr	r1, [pc, #96]	@ (800d1a0 <MIC_Print+0x2c8>)
 800d13e:	1c18      	adds	r0, r3, #0
 800d140:	f7f3 f9f6 	bl	8000530 <__aeabi_fcmplt>
 800d144:	1e03      	subs	r3, r0, #0
 800d146:	d100      	bne.n	800d14a <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800d148:	e004      	b.n	800d154 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800d14a:	2200      	movs	r2, #0
 800d14c:	2100      	movs	r1, #0
 800d14e:	2000      	movs	r0, #0
 800d150:	f004 fada 	bl	8011708 <SetDBLED>
}
 800d154:	46c0      	nop			@ (mov r8, r8)
 800d156:	46bd      	mov	sp, r7
 800d158:	b004      	add	sp, #16
 800d15a:	bdb0      	pop	{r4, r5, r7, pc}
 800d15c:	20000e9c 	.word	0x20000e9c
 800d160:	20000e68 	.word	0x20000e68
 800d164:	20000ea4 	.word	0x20000ea4
 800d168:	20000e6c 	.word	0x20000e6c
 800d16c:	20000ea5 	.word	0x20000ea5
 800d170:	2000009c 	.word	0x2000009c
 800d174:	20000e98 	.word	0x20000e98
 800d178:	20000ea0 	.word	0x20000ea0
 800d17c:	20000e94 	.word	0x20000e94
 800d180:	0802c23c 	.word	0x0802c23c
 800d184:	20000e5c 	.word	0x20000e5c
 800d188:	42b40000 	.word	0x42b40000
 800d18c:	42a00000 	.word	0x42a00000
 800d190:	428c0000 	.word	0x428c0000
 800d194:	42700000 	.word	0x42700000
 800d198:	42480000 	.word	0x42480000
 800d19c:	42200000 	.word	0x42200000
 800d1a0:	420c0000 	.word	0x420c0000

0800d1a4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800d1aa:	4b11      	ldr	r3, [pc, #68]	@ (800d1f0 <MIC_TestMeasurementDone+0x4c>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	4a10      	ldr	r2, [pc, #64]	@ (800d1f4 <MIC_TestMeasurementDone+0x50>)
 800d1b2:	4911      	ldr	r1, [pc, #68]	@ (800d1f8 <MIC_TestMeasurementDone+0x54>)
 800d1b4:	2002      	movs	r0, #2
 800d1b6:	f005 fd47 	bl	8012c48 <CreateLine>
  if(DataReady) {
 800d1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f0 <MIC_TestMeasurementDone+0x4c>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d010      	beq.n	800d1e6 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800d1c4:	1dfb      	adds	r3, r7, #7
 800d1c6:	4a0d      	ldr	r2, [pc, #52]	@ (800d1fc <MIC_TestMeasurementDone+0x58>)
 800d1c8:	7812      	ldrb	r2, [r2, #0]
 800d1ca:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800d1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d1fc <MIC_TestMeasurementDone+0x58>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	4a0b      	ldr	r2, [pc, #44]	@ (800d200 <MIC_TestMeasurementDone+0x5c>)
 800d1d4:	4908      	ldr	r1, [pc, #32]	@ (800d1f8 <MIC_TestMeasurementDone+0x54>)
 800d1d6:	2002      	movs	r0, #2
 800d1d8:	f005 fd36 	bl	8012c48 <CreateLine>
    ResetMICIndicator();
 800d1dc:	f004 fb82 	bl	80118e4 <ResetMICIndicator>
    return Check;
 800d1e0:	1dfb      	adds	r3, r7, #7
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	e000      	b.n	800d1e8 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	0018      	movs	r0, r3
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	b002      	add	sp, #8
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	20000fd9 	.word	0x20000fd9
 800d1f4:	0802c284 	.word	0x0802c284
 800d1f8:	0802c2b0 	.word	0x0802c2b0
 800d1fc:	20000fda 	.word	0x20000fda
 800d200:	0802c2b4 	.word	0x0802c2b4

0800d204 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800d20a:	4b78      	ldr	r3, [pc, #480]	@ (800d3ec <Mic_Upkeep+0x1e8>)
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d100      	bne.n	800d214 <Mic_Upkeep+0x10>
 800d212:	e0b8      	b.n	800d386 <Mic_Upkeep+0x182>
 800d214:	dd00      	ble.n	800d218 <Mic_Upkeep+0x14>
 800d216:	e0d3      	b.n	800d3c0 <Mic_Upkeep+0x1bc>
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d037      	beq.n	800d28c <Mic_Upkeep+0x88>
 800d21c:	dd00      	ble.n	800d220 <Mic_Upkeep+0x1c>
 800d21e:	e0cf      	b.n	800d3c0 <Mic_Upkeep+0x1bc>
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <Mic_Upkeep+0x26>
 800d224:	2b01      	cmp	r3, #1
 800d226:	d014      	beq.n	800d252 <Mic_Upkeep+0x4e>
 800d228:	e0ca      	b.n	800d3c0 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800d22a:	2001      	movs	r0, #1
 800d22c:	f003 fb6a 	bl	8010904 <enableMicrophone>
 800d230:	0003      	movs	r3, r0
 800d232:	001a      	movs	r2, r3
 800d234:	2301      	movs	r3, #1
 800d236:	4053      	eors	r3, r2
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d005      	beq.n	800d24a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800d23e:	4a6c      	ldr	r2, [pc, #432]	@ (800d3f0 <Mic_Upkeep+0x1ec>)
 800d240:	4b6c      	ldr	r3, [pc, #432]	@ (800d3f4 <Mic_Upkeep+0x1f0>)
 800d242:	217f      	movs	r1, #127	@ 0x7f
 800d244:	0018      	movs	r0, r3
 800d246:	f005 fdb7 	bl	8012db8 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800d24a:	4b68      	ldr	r3, [pc, #416]	@ (800d3ec <Mic_Upkeep+0x1e8>)
 800d24c:	2201      	movs	r2, #1
 800d24e:	701a      	strb	r2, [r3, #0]
    break;
 800d250:	e0c5      	b.n	800d3de <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800d252:	f003 fb33 	bl	80108bc <micSettlingComplete>
 800d256:	1e03      	subs	r3, r0, #0
 800d258:	d105      	bne.n	800d266 <Mic_Upkeep+0x62>
 800d25a:	4b67      	ldr	r3, [pc, #412]	@ (800d3f8 <Mic_Upkeep+0x1f4>)
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	2b00      	cmp	r3, #0
 800d262:	d100      	bne.n	800d266 <Mic_Upkeep+0x62>
 800d264:	e0b6      	b.n	800d3d4 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800d266:	f003 fbb7 	bl	80109d8 <startSPLcalculation>
 800d26a:	0003      	movs	r3, r0
 800d26c:	001a      	movs	r2, r3
 800d26e:	2301      	movs	r3, #1
 800d270:	4053      	eors	r3, r2
 800d272:	b2db      	uxtb	r3, r3
 800d274:	2b00      	cmp	r3, #0
 800d276:	d005      	beq.n	800d284 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800d278:	4a5d      	ldr	r2, [pc, #372]	@ (800d3f0 <Mic_Upkeep+0x1ec>)
 800d27a:	4b5e      	ldr	r3, [pc, #376]	@ (800d3f4 <Mic_Upkeep+0x1f0>)
 800d27c:	2188      	movs	r1, #136	@ 0x88
 800d27e:	0018      	movs	r0, r3
 800d280:	f005 fd9a 	bl	8012db8 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800d284:	4b59      	ldr	r3, [pc, #356]	@ (800d3ec <Mic_Upkeep+0x1e8>)
 800d286:	2202      	movs	r2, #2
 800d288:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d28a:	e0a3      	b.n	800d3d4 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800d28c:	4b5b      	ldr	r3, [pc, #364]	@ (800d3fc <Mic_Upkeep+0x1f8>)
 800d28e:	2201      	movs	r2, #1
 800d290:	2101      	movs	r1, #1
 800d292:	0018      	movs	r0, r3
 800d294:	f003 f9f4 	bl	8010680 <getSoundData>
 800d298:	1e03      	subs	r3, r0, #0
 800d29a:	d100      	bne.n	800d29e <Mic_Upkeep+0x9a>
 800d29c:	e09c      	b.n	800d3d8 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800d29e:	f003 faed 	bl	801087c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800d2a2:	4b56      	ldr	r3, [pc, #344]	@ (800d3fc <Mic_Upkeep+0x1f8>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	001a      	movs	r2, r3
 800d2a8:	4b54      	ldr	r3, [pc, #336]	@ (800d3fc <Mic_Upkeep+0x1f8>)
 800d2aa:	785b      	ldrb	r3, [r3, #1]
 800d2ac:	4954      	ldr	r1, [pc, #336]	@ (800d400 <Mic_Upkeep+0x1fc>)
 800d2ae:	0038      	movs	r0, r7
 800d2b0:	f017 fdb4 	bl	8024e1c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800d2b4:	4b51      	ldr	r3, [pc, #324]	@ (800d3fc <Mic_Upkeep+0x1f8>)
 800d2b6:	89db      	ldrh	r3, [r3, #14]
 800d2b8:	001a      	movs	r2, r3
 800d2ba:	4b50      	ldr	r3, [pc, #320]	@ (800d3fc <Mic_Upkeep+0x1f8>)
 800d2bc:	7c1b      	ldrb	r3, [r3, #16]
 800d2be:	4951      	ldr	r1, [pc, #324]	@ (800d404 <Mic_Upkeep+0x200>)
 800d2c0:	4851      	ldr	r0, [pc, #324]	@ (800d408 <Mic_Upkeep+0x204>)
 800d2c2:	f017 fdab 	bl	8024e1c <siprintf>
      dBValue = atof(dBbuffer);
 800d2c6:	003b      	movs	r3, r7
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f016 f957 	bl	802357c <atof>
 800d2ce:	0002      	movs	r2, r0
 800d2d0:	000b      	movs	r3, r1
 800d2d2:	0010      	movs	r0, r2
 800d2d4:	0019      	movs	r1, r3
 800d2d6:	f7f6 f90d 	bl	80034f4 <__aeabi_d2f>
 800d2da:	1c02      	adds	r2, r0, #0
 800d2dc:	4b4b      	ldr	r3, [pc, #300]	@ (800d40c <Mic_Upkeep+0x208>)
 800d2de:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800d2e0:	4b4a      	ldr	r3, [pc, #296]	@ (800d40c <Mic_Upkeep+0x208>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	494a      	ldr	r1, [pc, #296]	@ (800d410 <Mic_Upkeep+0x20c>)
 800d2e6:	1c18      	adds	r0, r3, #0
 800d2e8:	f7f3 fe5a 	bl	8000fa0 <__aeabi_fmul>
 800d2ec:	1c03      	adds	r3, r0, #0
 800d2ee:	1c18      	adds	r0, r3, #0
 800d2f0:	f7f6 f8b8 	bl	8003464 <__aeabi_f2d>
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	4b47      	ldr	r3, [pc, #284]	@ (800d414 <Mic_Upkeep+0x210>)
 800d2f8:	f7f4 f9f8 	bl	80016ec <__aeabi_dadd>
 800d2fc:	0002      	movs	r2, r0
 800d2fe:	000b      	movs	r3, r1
 800d300:	0010      	movs	r0, r2
 800d302:	0019      	movs	r1, r3
 800d304:	f7f6 f820 	bl	8003348 <__aeabi_d2iz>
 800d308:	0003      	movs	r3, r0
 800d30a:	0018      	movs	r0, r3
 800d30c:	f7f6 f858 	bl	80033c0 <__aeabi_i2d>
 800d310:	2200      	movs	r2, #0
 800d312:	4b41      	ldr	r3, [pc, #260]	@ (800d418 <Mic_Upkeep+0x214>)
 800d314:	f7f4 fd4e 	bl	8001db4 <__aeabi_ddiv>
 800d318:	0002      	movs	r2, r0
 800d31a:	000b      	movs	r3, r1
 800d31c:	0010      	movs	r0, r2
 800d31e:	0019      	movs	r1, r3
 800d320:	f7f6 f8e8 	bl	80034f4 <__aeabi_d2f>
 800d324:	1c02      	adds	r2, r0, #0
 800d326:	4b39      	ldr	r3, [pc, #228]	@ (800d40c <Mic_Upkeep+0x208>)
 800d328:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800d32a:	f7ff fdd5 	bl	800ced8 <MIC_Print>
      if (!startSPLcalculation()) {
 800d32e:	f003 fb53 	bl	80109d8 <startSPLcalculation>
 800d332:	0003      	movs	r3, r0
 800d334:	001a      	movs	r2, r3
 800d336:	2301      	movs	r3, #1
 800d338:	4053      	eors	r3, r2
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800d340:	4a2b      	ldr	r2, [pc, #172]	@ (800d3f0 <Mic_Upkeep+0x1ec>)
 800d342:	4b2c      	ldr	r3, [pc, #176]	@ (800d3f4 <Mic_Upkeep+0x1f0>)
 800d344:	2198      	movs	r1, #152	@ 0x98
 800d346:	0018      	movs	r0, r3
 800d348:	f005 fd36 	bl	8012db8 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800d34c:	2000      	movs	r0, #0
 800d34e:	f003 fad9 	bl	8010904 <enableMicrophone>
 800d352:	0003      	movs	r3, r0
 800d354:	001a      	movs	r2, r3
 800d356:	2301      	movs	r3, #1
 800d358:	4053      	eors	r3, r2
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d005      	beq.n	800d36c <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800d360:	4a23      	ldr	r2, [pc, #140]	@ (800d3f0 <Mic_Upkeep+0x1ec>)
 800d362:	4b24      	ldr	r3, [pc, #144]	@ (800d3f4 <Mic_Upkeep+0x1f0>)
 800d364:	219b      	movs	r1, #155	@ 0x9b
 800d366:	0018      	movs	r0, r3
 800d368:	f005 fd26 	bl	8012db8 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800d36c:	f006 f9aa 	bl	80136c4 <HAL_GetTick>
 800d370:	0003      	movs	r3, r0
 800d372:	4a2a      	ldr	r2, [pc, #168]	@ (800d41c <Mic_Upkeep+0x218>)
 800d374:	189a      	adds	r2, r3, r2
 800d376:	4b2a      	ldr	r3, [pc, #168]	@ (800d420 <Mic_Upkeep+0x21c>)
 800d378:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800d37a:	4b1c      	ldr	r3, [pc, #112]	@ (800d3ec <Mic_Upkeep+0x1e8>)
 800d37c:	2203      	movs	r2, #3
 800d37e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800d380:	f004 fab0 	bl	80118e4 <ResetMICIndicator>
    }
    break;
 800d384:	e028      	b.n	800d3d8 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800d386:	4b26      	ldr	r3, [pc, #152]	@ (800d420 <Mic_Upkeep+0x21c>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	0018      	movs	r0, r3
 800d38c:	f005 fc06 	bl	8012b9c <TimestampIsReached>
 800d390:	1e03      	subs	r3, r0, #0
 800d392:	d023      	beq.n	800d3dc <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800d394:	2001      	movs	r0, #1
 800d396:	f003 fab5 	bl	8010904 <enableMicrophone>
 800d39a:	0003      	movs	r3, r0
 800d39c:	001a      	movs	r2, r3
 800d39e:	2301      	movs	r3, #1
 800d3a0:	4053      	eors	r3, r2
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d005      	beq.n	800d3b4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800d3a8:	4a11      	ldr	r2, [pc, #68]	@ (800d3f0 <Mic_Upkeep+0x1ec>)
 800d3aa:	4b12      	ldr	r3, [pc, #72]	@ (800d3f4 <Mic_Upkeep+0x1f0>)
 800d3ac:	21a6      	movs	r1, #166	@ 0xa6
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	f005 fd02 	bl	8012db8 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800d3b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d3ec <Mic_Upkeep+0x1e8>)
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800d3ba:	f004 fa51 	bl	8011860 <SetMICIndicator>
    }
    break;
 800d3be:	e00d      	b.n	800d3dc <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800d3c0:	4a18      	ldr	r2, [pc, #96]	@ (800d424 <Mic_Upkeep+0x220>)
 800d3c2:	4b19      	ldr	r3, [pc, #100]	@ (800d428 <Mic_Upkeep+0x224>)
 800d3c4:	0019      	movs	r1, r3
 800d3c6:	2003      	movs	r0, #3
 800d3c8:	f005 fc3e 	bl	8012c48 <CreateLine>
    MicState = MIC_STATE_INIT;
 800d3cc:	4b07      	ldr	r3, [pc, #28]	@ (800d3ec <Mic_Upkeep+0x1e8>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	701a      	strb	r2, [r3, #0]
    break;
 800d3d2:	e004      	b.n	800d3de <Mic_Upkeep+0x1da>
    break;
 800d3d4:	46c0      	nop			@ (mov r8, r8)
 800d3d6:	e002      	b.n	800d3de <Mic_Upkeep+0x1da>
    break;
 800d3d8:	46c0      	nop			@ (mov r8, r8)
 800d3da:	e000      	b.n	800d3de <Mic_Upkeep+0x1da>
    break;
 800d3dc:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800d3de:	4b03      	ldr	r3, [pc, #12]	@ (800d3ec <Mic_Upkeep+0x1e8>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
}
 800d3e2:	0018      	movs	r0, r3
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	b002      	add	sp, #8
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	46c0      	nop			@ (mov r8, r8)
 800d3ec:	20000ebe 	.word	0x20000ebe
 800d3f0:	0802c2cc 	.word	0x0802c2cc
 800d3f4:	0802d454 	.word	0x0802d454
 800d3f8:	20000fd9 	.word	0x20000fd9
 800d3fc:	20000eac 	.word	0x20000eac
 800d400:	0802c2e8 	.word	0x0802c2e8
 800d404:	0802c2f0 	.word	0x0802c2f0
 800d408:	20000e5c 	.word	0x20000e5c
 800d40c:	20000e9c 	.word	0x20000e9c
 800d410:	42c80000 	.word	0x42c80000
 800d414:	3fe00000 	.word	0x3fe00000
 800d418:	40590000 	.word	0x40590000
 800d41c:	000002f3 	.word	0x000002f3
 800d420:	20000ea8 	.word	0x20000ea8
 800d424:	0802c2f8 	.word	0x0802c2f8
 800d428:	0802c318 	.word	0x0802c318

0800d42c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d432:	1d3b      	adds	r3, r7, #4
 800d434:	0018      	movs	r0, r3
 800d436:	2314      	movs	r3, #20
 800d438:	001a      	movs	r2, r3
 800d43a:	2100      	movs	r1, #0
 800d43c:	f017 fe54 	bl	80250e8 <memset>
  RTC_DateTypeDef sDate = {0};
 800d440:	003b      	movs	r3, r7
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d446:	4b2e      	ldr	r3, [pc, #184]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d448:	4a2e      	ldr	r2, [pc, #184]	@ (800d504 <MX_RTC_Init+0xd8>)
 800d44a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d44c:	4b2c      	ldr	r3, [pc, #176]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d44e:	2200      	movs	r2, #0
 800d450:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d452:	4b2b      	ldr	r3, [pc, #172]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d454:	227f      	movs	r2, #127	@ 0x7f
 800d456:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d458:	4b29      	ldr	r3, [pc, #164]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d45a:	22ff      	movs	r2, #255	@ 0xff
 800d45c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d45e:	4b28      	ldr	r3, [pc, #160]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d460:	2200      	movs	r2, #0
 800d462:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d464:	4b26      	ldr	r3, [pc, #152]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d466:	2200      	movs	r2, #0
 800d468:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d46a:	4b25      	ldr	r3, [pc, #148]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d46c:	2200      	movs	r2, #0
 800d46e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d470:	4b23      	ldr	r3, [pc, #140]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d472:	2200      	movs	r2, #0
 800d474:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d476:	4b22      	ldr	r3, [pc, #136]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d478:	0018      	movs	r0, r3
 800d47a:	f00d fc3f 	bl	801acfc <HAL_RTC_Init>
 800d47e:	1e03      	subs	r3, r0, #0
 800d480:	d001      	beq.n	800d486 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800d482:	f7fe ffcd 	bl	800c420 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800d486:	1d3b      	adds	r3, r7, #4
 800d488:	220d      	movs	r2, #13
 800d48a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800d48c:	1d3b      	adds	r3, r7, #4
 800d48e:	2200      	movs	r2, #0
 800d490:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800d492:	1d3b      	adds	r3, r7, #4
 800d494:	2200      	movs	r2, #0
 800d496:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d498:	1d3b      	adds	r3, r7, #4
 800d49a:	2200      	movs	r2, #0
 800d49c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d49e:	1d3b      	adds	r3, r7, #4
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d4a4:	1d39      	adds	r1, r7, #4
 800d4a6:	4b16      	ldr	r3, [pc, #88]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	f00d fcc2 	bl	801ae34 <HAL_RTC_SetTime>
 800d4b0:	1e03      	subs	r3, r0, #0
 800d4b2:	d001      	beq.n	800d4b8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800d4b4:	f7fe ffb4 	bl	800c420 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800d4b8:	003b      	movs	r3, r7
 800d4ba:	2206      	movs	r2, #6
 800d4bc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800d4be:	003b      	movs	r3, r7
 800d4c0:	2211      	movs	r2, #17
 800d4c2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800d4c4:	003b      	movs	r3, r7
 800d4c6:	2217      	movs	r2, #23
 800d4c8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800d4ca:	003b      	movs	r3, r7
 800d4cc:	2218      	movs	r2, #24
 800d4ce:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d4d0:	0039      	movs	r1, r7
 800d4d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	f00d fdb4 	bl	801b044 <HAL_RTC_SetDate>
 800d4dc:	1e03      	subs	r3, r0, #0
 800d4de:	d001      	beq.n	800d4e4 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800d4e0:	f7fe ff9e 	bl	800c420 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800d4e4:	4b06      	ldr	r3, [pc, #24]	@ (800d500 <MX_RTC_Init+0xd4>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	0018      	movs	r0, r3
 800d4ec:	f00d ff64 	bl	801b3b8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800d4f0:	1e03      	subs	r3, r0, #0
 800d4f2:	d001      	beq.n	800d4f8 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800d4f4:	f7fe ff94 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d4f8:	46c0      	nop			@ (mov r8, r8)
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	b006      	add	sp, #24
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20000ec0 	.word	0x20000ec0
 800d504:	40002800 	.word	0x40002800

0800d508 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a0a      	ldr	r2, [pc, #40]	@ (800d540 <HAL_RTC_MspInit+0x38>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d10e      	bne.n	800d538 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d51a:	4b0a      	ldr	r3, [pc, #40]	@ (800d544 <HAL_RTC_MspInit+0x3c>)
 800d51c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d51e:	4b09      	ldr	r3, [pc, #36]	@ (800d544 <HAL_RTC_MspInit+0x3c>)
 800d520:	2180      	movs	r1, #128	@ 0x80
 800d522:	02c9      	lsls	r1, r1, #11
 800d524:	430a      	orrs	r2, r1
 800d526:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800d528:	2200      	movs	r2, #0
 800d52a:	2100      	movs	r1, #0
 800d52c:	2002      	movs	r0, #2
 800d52e:	f006 fd6d 	bl	801400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800d532:	2002      	movs	r0, #2
 800d534:	f006 fd7f 	bl	8014036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800d538:	46c0      	nop			@ (mov r8, r8)
 800d53a:	46bd      	mov	sp, r7
 800d53c:	b002      	add	sp, #8
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	40002800 	.word	0x40002800
 800d544:	40021000 	.word	0x40021000

0800d548 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800d548:	b580      	push	{r7, lr}
 800d54a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800d54c:	4b02      	ldr	r3, [pc, #8]	@ (800d558 <sen5x_Get_sen5x_enable_state+0x10>)
 800d54e:	781b      	ldrb	r3, [r3, #0]
}
 800d550:	0018      	movs	r0, r3
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	46c0      	nop			@ (mov r8, r8)
 800d558:	20000ee7 	.word	0x20000ee7

0800d55c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	0002      	movs	r2, r0
 800d564:	1dfb      	adds	r3, r7, #7
 800d566:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800d568:	4b03      	ldr	r3, [pc, #12]	@ (800d578 <sen5x_Set_sen5x_state+0x1c>)
 800d56a:	1dfa      	adds	r2, r7, #7
 800d56c:	7812      	ldrb	r2, [r2, #0]
 800d56e:	701a      	strb	r2, [r3, #0]
}
 800d570:	46c0      	nop			@ (mov r8, r8)
 800d572:	46bd      	mov	sp, r7
 800d574:	b002      	add	sp, #8
 800d576:	bd80      	pop	{r7, pc}
 800d578:	20000ee7 	.word	0x20000ee7

0800d57c <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800d584:	f006 f89e 	bl	80136c4 <HAL_GetTick>
 800d588:	0002      	movs	r2, r0
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	18d2      	adds	r2, r2, r3
 800d58e:	4b03      	ldr	r3, [pc, #12]	@ (800d59c <setsen5xReadTimer+0x20>)
 800d590:	601a      	str	r2, [r3, #0]
}
 800d592:	46c0      	nop			@ (mov r8, r8)
 800d594:	46bd      	mov	sp, r7
 800d596:	b002      	add	sp, #8
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	46c0      	nop			@ (mov r8, r8)
 800d59c:	20000ef4 	.word	0x20000ef4

0800d5a0 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	0002      	movs	r2, r0
 800d5a8:	1dfb      	adds	r3, r7, #7
 800d5aa:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800d5ac:	4b03      	ldr	r3, [pc, #12]	@ (800d5bc <setsen5xSamplecounter+0x1c>)
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	701a      	strb	r2, [r3, #0]
}
 800d5b2:	46c0      	nop			@ (mov r8, r8)
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	b002      	add	sp, #8
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	46c0      	nop			@ (mov r8, r8)
 800d5bc:	20000ef0 	.word	0x20000ef0

0800d5c0 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b082      	sub	sp, #8
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800d5c8:	f7fe ffe2 	bl	800c590 <IsPMSensorEnabled>
 800d5cc:	1e03      	subs	r3, r0, #0
 800d5ce:	d035      	beq.n	800d63c <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800d5d0:	f003 ffc4 	bl	801155c <batteryChargeCheck>
 800d5d4:	0003      	movs	r3, r0
 800d5d6:	2b03      	cmp	r3, #3
 800d5d8:	d103      	bne.n	800d5e2 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800d5da:	4b20      	ldr	r3, [pc, #128]	@ (800d65c <sen5x_enable+0x9c>)
 800d5dc:	2201      	movs	r2, #1
 800d5de:	701a      	strb	r2, [r3, #0]
 800d5e0:	e00d      	b.n	800d5fe <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800d5e2:	4b1e      	ldr	r3, [pc, #120]	@ (800d65c <sen5x_enable+0x9c>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	1e5a      	subs	r2, r3, #1
 800d5e8:	4193      	sbcs	r3, r2
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	4053      	eors	r3, r2
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	1c1a      	adds	r2, r3, #0
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	4013      	ands	r3, r2
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	4b18      	ldr	r3, [pc, #96]	@ (800d65c <sen5x_enable+0x9c>)
 800d5fc:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800d5fe:	4b17      	ldr	r3, [pc, #92]	@ (800d65c <sen5x_enable+0x9c>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800d606:	2000      	movs	r0, #0
 800d608:	f7ff ffb8 	bl	800d57c <setsen5xReadTimer>
 800d60c:	e009      	b.n	800d622 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800d60e:	f006 f859 	bl	80136c4 <HAL_GetTick>
 800d612:	0002      	movs	r2, r0
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2164      	movs	r1, #100	@ 0x64
 800d618:	434b      	muls	r3, r1
 800d61a:	18d3      	adds	r3, r2, r3
 800d61c:	0018      	movs	r0, r3
 800d61e:	f7ff ffad 	bl	800d57c <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800d622:	4b0e      	ldr	r3, [pc, #56]	@ (800d65c <sen5x_enable+0x9c>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <sen5x_enable+0x6e>
 800d62a:	4b0d      	ldr	r3, [pc, #52]	@ (800d660 <sen5x_enable+0xa0>)
 800d62c:	e000      	b.n	800d630 <sen5x_enable+0x70>
 800d62e:	4b0d      	ldr	r3, [pc, #52]	@ (800d664 <sen5x_enable+0xa4>)
 800d630:	4a0d      	ldr	r2, [pc, #52]	@ (800d668 <sen5x_enable+0xa8>)
 800d632:	490e      	ldr	r1, [pc, #56]	@ (800d66c <sen5x_enable+0xac>)
 800d634:	2002      	movs	r0, #2
 800d636:	f005 fb07 	bl	8012c48 <CreateLine>
 800d63a:	e005      	b.n	800d648 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800d63c:	4a0c      	ldr	r2, [pc, #48]	@ (800d670 <sen5x_enable+0xb0>)
 800d63e:	4b0b      	ldr	r3, [pc, #44]	@ (800d66c <sen5x_enable+0xac>)
 800d640:	0019      	movs	r1, r3
 800d642:	2002      	movs	r0, #2
 800d644:	f005 fb00 	bl	8012c48 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800d648:	4b0a      	ldr	r3, [pc, #40]	@ (800d674 <sen5x_enable+0xb4>)
 800d64a:	2201      	movs	r2, #1
 800d64c:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800d64e:	4b03      	ldr	r3, [pc, #12]	@ (800d65c <sen5x_enable+0x9c>)
 800d650:	781b      	ldrb	r3, [r3, #0]
}
 800d652:	0018      	movs	r0, r3
 800d654:	46bd      	mov	sp, r7
 800d656:	b002      	add	sp, #8
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	46c0      	nop			@ (mov r8, r8)
 800d65c:	20000ee7 	.word	0x20000ee7
 800d660:	0802c31c 	.word	0x0802c31c
 800d664:	0802c324 	.word	0x0802c324
 800d668:	0802c330 	.word	0x0802c330
 800d66c:	0802c34c 	.word	0x0802c34c
 800d670:	0802c350 	.word	0x0802c350
 800d674:	2000009d 	.word	0x2000009d

0800d678 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800d67c:	2380      	movs	r3, #128	@ 0x80
 800d67e:	015b      	lsls	r3, r3, #5
 800d680:	480f      	ldr	r0, [pc, #60]	@ (800d6c0 <sen5x_Power_On+0x48>)
 800d682:	2201      	movs	r2, #1
 800d684:	0019      	movs	r1, r3
 800d686:	f007 faae 	bl	8014be6 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800d68a:	4a0e      	ldr	r2, [pc, #56]	@ (800d6c4 <sen5x_Power_On+0x4c>)
 800d68c:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c8 <sen5x_Power_On+0x50>)
 800d68e:	0019      	movs	r1, r3
 800d690:	2003      	movs	r0, #3
 800d692:	f005 fad9 	bl	8012c48 <CreateLine>
  HAL_Delay(150);
 800d696:	2096      	movs	r0, #150	@ 0x96
 800d698:	f006 f81e 	bl	80136d8 <HAL_Delay>
  if (sen5x_device_reset()) {
 800d69c:	f001 f9b2 	bl	800ea04 <sen5x_device_reset>
 800d6a0:	1e03      	subs	r3, r0, #0
 800d6a2:	d006      	beq.n	800d6b2 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800d6a4:	4a09      	ldr	r2, [pc, #36]	@ (800d6cc <sen5x_Power_On+0x54>)
 800d6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6d0 <sen5x_Power_On+0x58>)
 800d6a8:	0019      	movs	r1, r3
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	f005 facc 	bl	8012c48 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800d6b0:	e002      	b.n	800d6b8 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800d6b2:	4b08      	ldr	r3, [pc, #32]	@ (800d6d4 <sen5x_Power_On+0x5c>)
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	701a      	strb	r2, [r3, #0]
}
 800d6b8:	46c0      	nop			@ (mov r8, r8)
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	46c0      	nop			@ (mov r8, r8)
 800d6c0:	50000800 	.word	0x50000800
 800d6c4:	0802c370 	.word	0x0802c370
 800d6c8:	0802c38c 	.word	0x0802c38c
 800d6cc:	0802c390 	.word	0x0802c390
 800d6d0:	0802c3b8 	.word	0x0802c3b8
 800d6d4:	20000ee5 	.word	0x20000ee5

0800d6d8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800d6dc:	4b0e      	ldr	r3, [pc, #56]	@ (800d718 <sen5x_Power_Off+0x40>)
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d006      	beq.n	800d6f2 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800d6e4:	4a0d      	ldr	r2, [pc, #52]	@ (800d71c <sen5x_Power_Off+0x44>)
 800d6e6:	4b0e      	ldr	r3, [pc, #56]	@ (800d720 <sen5x_Power_Off+0x48>)
 800d6e8:	0019      	movs	r1, r3
 800d6ea:	2003      	movs	r0, #3
 800d6ec:	f005 faac 	bl	8012c48 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800d6f0:	e00f      	b.n	800d712 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800d6f2:	4a0c      	ldr	r2, [pc, #48]	@ (800d724 <sen5x_Power_Off+0x4c>)
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d720 <sen5x_Power_Off+0x48>)
 800d6f6:	0019      	movs	r1, r3
 800d6f8:	2003      	movs	r0, #3
 800d6fa:	f005 faa5 	bl	8012c48 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800d6fe:	2380      	movs	r3, #128	@ 0x80
 800d700:	015b      	lsls	r3, r3, #5
 800d702:	4809      	ldr	r0, [pc, #36]	@ (800d728 <sen5x_Power_Off+0x50>)
 800d704:	2200      	movs	r2, #0
 800d706:	0019      	movs	r1, r3
 800d708:	f007 fa6d 	bl	8014be6 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800d70c:	4b07      	ldr	r3, [pc, #28]	@ (800d72c <sen5x_Power_Off+0x54>)
 800d70e:	2200      	movs	r2, #0
 800d710:	701a      	strb	r2, [r3, #0]
}
 800d712:	46c0      	nop			@ (mov r8, r8)
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	20000ee6 	.word	0x20000ee6
 800d71c:	0802c3bc 	.word	0x0802c3bc
 800d720:	0802c38c 	.word	0x0802c38c
 800d724:	0802c3ec 	.word	0x0802c3ec
 800d728:	50000800 	.word	0x50000800
 800d72c:	20000ee5 	.word	0x20000ee5

0800d730 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800d730:	b580      	push	{r7, lr}
 800d732:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800d734:	4b02      	ldr	r3, [pc, #8]	@ (800d740 <reset_fanCleaningDone+0x10>)
 800d736:	2200      	movs	r2, #0
 800d738:	701a      	strb	r2, [r3, #0]
}
 800d73a:	46c0      	nop			@ (mov r8, r8)
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	20000ee4 	.word	0x20000ee4

0800d744 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800d744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d746:	b093      	sub	sp, #76	@ 0x4c
 800d748:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800d74a:	2436      	movs	r4, #54	@ 0x36
 800d74c:	193b      	adds	r3, r7, r4
 800d74e:	2200      	movs	r2, #0
 800d750:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800d752:	2335      	movs	r3, #53	@ 0x35
 800d754:	18fb      	adds	r3, r7, r3
 800d756:	2220      	movs	r2, #32
 800d758:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800d75a:	2334      	movs	r3, #52	@ 0x34
 800d75c:	18fb      	adds	r3, r7, r3
 800d75e:	2220      	movs	r2, #32
 800d760:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800d762:	f7ff ff89 	bl	800d678 <sen5x_Power_On>
  error = sen5x_device_reset();
 800d766:	0025      	movs	r5, r4
 800d768:	193c      	adds	r4, r7, r4
 800d76a:	f001 f94b 	bl	800ea04 <sen5x_device_reset>
 800d76e:	0003      	movs	r3, r0
 800d770:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d772:	002c      	movs	r4, r5
 800d774:	193b      	adds	r3, r7, r4
 800d776:	2200      	movs	r2, #0
 800d778:	5e9b      	ldrsh	r3, [r3, r2]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00b      	beq.n	800d796 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800d77e:	193b      	adds	r3, r7, r4
 800d780:	2200      	movs	r2, #0
 800d782:	5e9b      	ldrsh	r3, [r3, r2]
 800d784:	4a75      	ldr	r2, [pc, #468]	@ (800d95c <probe_sen5x+0x218>)
 800d786:	4976      	ldr	r1, [pc, #472]	@ (800d960 <probe_sen5x+0x21c>)
 800d788:	2001      	movs	r0, #1
 800d78a:	f005 fa5d 	bl	8012c48 <CreateLine>
      return error;
 800d78e:	193b      	adds	r3, r7, r4
 800d790:	2200      	movs	r2, #0
 800d792:	5e9b      	ldrsh	r3, [r3, r2]
 800d794:	e0de      	b.n	800d954 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800d796:	2536      	movs	r5, #54	@ 0x36
 800d798:	197c      	adds	r4, r7, r5
 800d79a:	2335      	movs	r3, #53	@ 0x35
 800d79c:	18fb      	adds	r3, r7, r3
 800d79e:	781a      	ldrb	r2, [r3, #0]
 800d7a0:	230c      	movs	r3, #12
 800d7a2:	18fb      	adds	r3, r7, r3
 800d7a4:	0011      	movs	r1, r2
 800d7a6:	0018      	movs	r0, r3
 800d7a8:	f001 f818 	bl	800e7dc <sen5x_get_serial_number>
 800d7ac:	0003      	movs	r3, r0
 800d7ae:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d7b0:	197b      	adds	r3, r7, r5
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	5e9b      	ldrsh	r3, [r3, r2]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00b      	beq.n	800d7d2 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800d7ba:	197b      	adds	r3, r7, r5
 800d7bc:	2200      	movs	r2, #0
 800d7be:	5e9a      	ldrsh	r2, [r3, r2]
 800d7c0:	4b68      	ldr	r3, [pc, #416]	@ (800d964 <probe_sen5x+0x220>)
 800d7c2:	0011      	movs	r1, r2
 800d7c4:	0018      	movs	r0, r3
 800d7c6:	f017 fab9 	bl	8024d3c <iprintf>
      return error;
 800d7ca:	197b      	adds	r3, r7, r5
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	5e9b      	ldrsh	r3, [r3, r2]
 800d7d0:	e0c0      	b.n	800d954 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800d7d2:	230c      	movs	r3, #12
 800d7d4:	18fa      	adds	r2, r7, r3
 800d7d6:	4b64      	ldr	r3, [pc, #400]	@ (800d968 <probe_sen5x+0x224>)
 800d7d8:	0011      	movs	r1, r2
 800d7da:	0018      	movs	r0, r3
 800d7dc:	f017 faae 	bl	8024d3c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800d7e0:	2536      	movs	r5, #54	@ 0x36
 800d7e2:	197c      	adds	r4, r7, r5
 800d7e4:	2334      	movs	r3, #52	@ 0x34
 800d7e6:	18fb      	adds	r3, r7, r3
 800d7e8:	781a      	ldrb	r2, [r3, #0]
 800d7ea:	4b60      	ldr	r3, [pc, #384]	@ (800d96c <probe_sen5x+0x228>)
 800d7ec:	0011      	movs	r1, r2
 800d7ee:	0018      	movs	r0, r3
 800d7f0:	f000 ff9e 	bl	800e730 <sen5x_get_product_name>
 800d7f4:	0003      	movs	r3, r0
 800d7f6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d7f8:	197b      	adds	r3, r7, r5
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	5e9b      	ldrsh	r3, [r3, r2]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00b      	beq.n	800d81a <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800d802:	197b      	adds	r3, r7, r5
 800d804:	2200      	movs	r2, #0
 800d806:	5e9a      	ldrsh	r2, [r3, r2]
 800d808:	4b59      	ldr	r3, [pc, #356]	@ (800d970 <probe_sen5x+0x22c>)
 800d80a:	0011      	movs	r1, r2
 800d80c:	0018      	movs	r0, r3
 800d80e:	f017 fa95 	bl	8024d3c <iprintf>
      return error;
 800d812:	197b      	adds	r3, r7, r5
 800d814:	2200      	movs	r2, #0
 800d816:	5e9b      	ldrsh	r3, [r3, r2]
 800d818:	e09c      	b.n	800d954 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800d81a:	4a54      	ldr	r2, [pc, #336]	@ (800d96c <probe_sen5x+0x228>)
 800d81c:	4b55      	ldr	r3, [pc, #340]	@ (800d974 <probe_sen5x+0x230>)
 800d81e:	0011      	movs	r1, r2
 800d820:	0018      	movs	r0, r3
 800d822:	f017 fa8b 	bl	8024d3c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800d826:	2636      	movs	r6, #54	@ 0x36
 800d828:	19bc      	adds	r4, r7, r6
 800d82a:	2308      	movs	r3, #8
 800d82c:	18fd      	adds	r5, r7, r3
 800d82e:	2309      	movs	r3, #9
 800d830:	18fa      	adds	r2, r7, r3
 800d832:	230a      	movs	r3, #10
 800d834:	18f9      	adds	r1, r7, r3
 800d836:	230b      	movs	r3, #11
 800d838:	18f8      	adds	r0, r7, r3
 800d83a:	1d7b      	adds	r3, r7, #5
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	1dbb      	adds	r3, r7, #6
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	1dfb      	adds	r3, r7, #7
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	002b      	movs	r3, r5
 800d848:	f001 f81e 	bl	800e888 <sen5x_get_version>
 800d84c:	0003      	movs	r3, r0
 800d84e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800d850:	19bb      	adds	r3, r7, r6
 800d852:	2200      	movs	r2, #0
 800d854:	5e9b      	ldrsh	r3, [r3, r2]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00b      	beq.n	800d872 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800d85a:	19bb      	adds	r3, r7, r6
 800d85c:	2200      	movs	r2, #0
 800d85e:	5e9a      	ldrsh	r2, [r3, r2]
 800d860:	4b45      	ldr	r3, [pc, #276]	@ (800d978 <probe_sen5x+0x234>)
 800d862:	0011      	movs	r1, r2
 800d864:	0018      	movs	r0, r3
 800d866:	f017 fa69 	bl	8024d3c <iprintf>
      return error;
 800d86a:	19bb      	adds	r3, r7, r6
 800d86c:	2200      	movs	r2, #0
 800d86e:	5e9b      	ldrsh	r3, [r3, r2]
 800d870:	e070      	b.n	800d954 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800d872:	230b      	movs	r3, #11
 800d874:	18fb      	adds	r3, r7, r3
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	0019      	movs	r1, r3
 800d87a:	230a      	movs	r3, #10
 800d87c:	18fb      	adds	r3, r7, r3
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	001a      	movs	r2, r3
 800d882:	2308      	movs	r3, #8
 800d884:	18fb      	adds	r3, r7, r3
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	001c      	movs	r4, r3
 800d88a:	1dfb      	adds	r3, r7, #7
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	483b      	ldr	r0, [pc, #236]	@ (800d97c <probe_sen5x+0x238>)
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	0023      	movs	r3, r4
 800d894:	f017 fa52 	bl	8024d3c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800d898:	2300      	movs	r3, #0
 800d89a:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800d89c:	262e      	movs	r6, #46	@ 0x2e
 800d89e:	19bb      	adds	r3, r7, r6
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800d8a4:	232c      	movs	r3, #44	@ 0x2c
 800d8a6:	18fb      	adds	r3, r7, r3
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800d8ac:	4934      	ldr	r1, [pc, #208]	@ (800d980 <probe_sen5x+0x23c>)
 800d8ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8b0:	f7f3 fb76 	bl	8000fa0 <__aeabi_fmul>
 800d8b4:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800d8b6:	1c18      	adds	r0, r3, #0
 800d8b8:	f7f3 fe6a 	bl	8001590 <__aeabi_f2iz>
 800d8bc:	0003      	movs	r3, r0
 800d8be:	b218      	sxth	r0, r3
 800d8c0:	2536      	movs	r5, #54	@ 0x36
 800d8c2:	197c      	adds	r4, r7, r5
 800d8c4:	232c      	movs	r3, #44	@ 0x2c
 800d8c6:	18fb      	adds	r3, r7, r3
 800d8c8:	881a      	ldrh	r2, [r3, #0]
 800d8ca:	19bb      	adds	r3, r7, r6
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	5e5b      	ldrsh	r3, [r3, r1]
 800d8d0:	0019      	movs	r1, r3
 800d8d2:	f000 fec9 	bl	800e668 <sen5x_set_temperature_offset_parameters>
 800d8d6:	0003      	movs	r3, r0
 800d8d8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800d8da:	197b      	adds	r3, r7, r5
 800d8dc:	2200      	movs	r2, #0
 800d8de:	5e9b      	ldrsh	r3, [r3, r2]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00b      	beq.n	800d8fc <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800d8e4:	197b      	adds	r3, r7, r5
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	5e9b      	ldrsh	r3, [r3, r2]
 800d8ea:	4a26      	ldr	r2, [pc, #152]	@ (800d984 <probe_sen5x+0x240>)
 800d8ec:	491c      	ldr	r1, [pc, #112]	@ (800d960 <probe_sen5x+0x21c>)
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	f005 f9aa 	bl	8012c48 <CreateLine>
      return error;
 800d8f4:	197b      	adds	r3, r7, r5
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	5e9b      	ldrsh	r3, [r3, r2]
 800d8fa:	e02b      	b.n	800d954 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800d8fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8fe:	f7f5 fdb1 	bl	8003464 <__aeabi_f2d>
 800d902:	0002      	movs	r2, r0
 800d904:	000b      	movs	r3, r1
 800d906:	4820      	ldr	r0, [pc, #128]	@ (800d988 <probe_sen5x+0x244>)
 800d908:	4920      	ldr	r1, [pc, #128]	@ (800d98c <probe_sen5x+0x248>)
 800d90a:	9200      	str	r2, [sp, #0]
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	0002      	movs	r2, r0
 800d910:	2002      	movs	r0, #2
 800d912:	f005 f999 	bl	8012c48 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800d916:	f7fb fad9 	bl	8008ecc <Check_USB_PowerOn>
 800d91a:	0003      	movs	r3, r0
 800d91c:	001a      	movs	r2, r3
 800d91e:	2301      	movs	r3, #1
 800d920:	4053      	eors	r3, r2
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00a      	beq.n	800d93e <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800d928:	f7ff fed6 	bl	800d6d8 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800d92c:	f005 feca 	bl	80136c4 <HAL_GetTick>
 800d930:	0003      	movs	r3, r0
 800d932:	22fa      	movs	r2, #250	@ 0xfa
 800d934:	00d2      	lsls	r2, r2, #3
 800d936:	189a      	adds	r2, r3, r2
 800d938:	4b15      	ldr	r3, [pc, #84]	@ (800d990 <probe_sen5x+0x24c>)
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	e006      	b.n	800d94c <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800d93e:	f005 fec1 	bl	80136c4 <HAL_GetTick>
 800d942:	0003      	movs	r3, r0
 800d944:	4a13      	ldr	r2, [pc, #76]	@ (800d994 <probe_sen5x+0x250>)
 800d946:	189a      	adds	r2, r3, r2
 800d948:	4b11      	ldr	r3, [pc, #68]	@ (800d990 <probe_sen5x+0x24c>)
 800d94a:	601a      	str	r2, [r3, #0]
  }
  return error;
 800d94c:	2336      	movs	r3, #54	@ 0x36
 800d94e:	18fb      	adds	r3, r7, r3
 800d950:	2200      	movs	r2, #0
 800d952:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d954:	0018      	movs	r0, r3
 800d956:	46bd      	mov	sp, r7
 800d958:	b00f      	add	sp, #60	@ 0x3c
 800d95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95c:	0802c408 	.word	0x0802c408
 800d960:	0802c3b8 	.word	0x0802c3b8
 800d964:	0802c434 	.word	0x0802c434
 800d968:	0802c464 	.word	0x0802c464
 800d96c:	20000ee8 	.word	0x20000ee8
 800d970:	0802c478 	.word	0x0802c478
 800d974:	0802c4a8 	.word	0x0802c4a8
 800d978:	0802c4bc 	.word	0x0802c4bc
 800d97c:	0802c4e8 	.word	0x0802c4e8
 800d980:	43480000 	.word	0x43480000
 800d984:	0802c50c 	.word	0x0802c50c
 800d988:	0802c54c 	.word	0x0802c54c
 800d98c:	0802c34c 	.word	0x0802c34c
 800d990:	20000ef4 	.word	0x20000ef4
 800d994:	00006d60 	.word	0x00006d60

0800d998 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800d99e:	1dbb      	adds	r3, r7, #6
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800d9a4:	4b1b      	ldr	r3, [pc, #108]	@ (800da14 <sen5x_lightup_measurement+0x7c>)
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800d9ac:	4a1a      	ldr	r2, [pc, #104]	@ (800da18 <sen5x_lightup_measurement+0x80>)
 800d9ae:	4b1b      	ldr	r3, [pc, #108]	@ (800da1c <sen5x_lightup_measurement+0x84>)
 800d9b0:	0019      	movs	r1, r3
 800d9b2:	2002      	movs	r0, #2
 800d9b4:	f005 f948 	bl	8012c48 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800d9b8:	1dbc      	adds	r4, r7, #6
 800d9ba:	f000 fce1 	bl	800e380 <sen5x_start_measurement_without_pm>
 800d9be:	0003      	movs	r3, r0
 800d9c0:	8023      	strh	r3, [r4, #0]
 800d9c2:	e00a      	b.n	800d9da <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800d9c4:	4a16      	ldr	r2, [pc, #88]	@ (800da20 <sen5x_lightup_measurement+0x88>)
 800d9c6:	4b15      	ldr	r3, [pc, #84]	@ (800da1c <sen5x_lightup_measurement+0x84>)
 800d9c8:	0019      	movs	r1, r3
 800d9ca:	2002      	movs	r0, #2
 800d9cc:	f005 f93c 	bl	8012c48 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800d9d0:	1dbc      	adds	r4, r7, #6
 800d9d2:	f000 fca7 	bl	800e324 <sen5x_start_measurement>
 800d9d6:	0003      	movs	r3, r0
 800d9d8:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800d9da:	1dbb      	adds	r3, r7, #6
 800d9dc:	2200      	movs	r2, #0
 800d9de:	5e9b      	ldrsh	r3, [r3, r2]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d008      	beq.n	800d9f6 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800d9e4:	1dbb      	adds	r3, r7, #6
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	5e9b      	ldrsh	r3, [r3, r2]
 800d9ea:	4a0e      	ldr	r2, [pc, #56]	@ (800da24 <sen5x_lightup_measurement+0x8c>)
 800d9ec:	490e      	ldr	r1, [pc, #56]	@ (800da28 <sen5x_lightup_measurement+0x90>)
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	f005 f92a 	bl	8012c48 <CreateLine>
 800d9f4:	e007      	b.n	800da06 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800d9f6:	f7fb fa99 	bl	8008f2c <showTime>
    Info("sen5x_start_measurement executed");
 800d9fa:	4a0c      	ldr	r2, [pc, #48]	@ (800da2c <sen5x_lightup_measurement+0x94>)
 800d9fc:	4b07      	ldr	r3, [pc, #28]	@ (800da1c <sen5x_lightup_measurement+0x84>)
 800d9fe:	0019      	movs	r1, r3
 800da00:	2002      	movs	r0, #2
 800da02:	f005 f921 	bl	8012c48 <CreateLine>
  }
  return error;
 800da06:	1dbb      	adds	r3, r7, #6
 800da08:	2200      	movs	r2, #0
 800da0a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800da0c:	0018      	movs	r0, r3
 800da0e:	46bd      	mov	sp, r7
 800da10:	b003      	add	sp, #12
 800da12:	bd90      	pop	{r4, r7, pc}
 800da14:	20000ee6 	.word	0x20000ee6
 800da18:	0802c584 	.word	0x0802c584
 800da1c:	0802c34c 	.word	0x0802c34c
 800da20:	0802c5b0 	.word	0x0802c5b0
 800da24:	0802c5d0 	.word	0x0802c5d0
 800da28:	0802c3b8 	.word	0x0802c3b8
 800da2c:	0802c600 	.word	0x0802c600

0800da30 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800da30:	b590      	push	{r4, r7, lr}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800da36:	1dbb      	adds	r3, r7, #6
 800da38:	2200      	movs	r2, #0
 800da3a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800da3c:	4b21      	ldr	r3, [pc, #132]	@ (800dac4 <sen5x_extinguish_measurement+0x94>)
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d01e      	beq.n	800da82 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800da44:	4a20      	ldr	r2, [pc, #128]	@ (800dac8 <sen5x_extinguish_measurement+0x98>)
 800da46:	4b21      	ldr	r3, [pc, #132]	@ (800dacc <sen5x_extinguish_measurement+0x9c>)
 800da48:	0019      	movs	r1, r3
 800da4a:	2002      	movs	r0, #2
 800da4c:	f005 f8fc 	bl	8012c48 <CreateLine>
    Info("PM measurement is disabled");
 800da50:	4a1f      	ldr	r2, [pc, #124]	@ (800dad0 <sen5x_extinguish_measurement+0xa0>)
 800da52:	4b1e      	ldr	r3, [pc, #120]	@ (800dacc <sen5x_extinguish_measurement+0x9c>)
 800da54:	0019      	movs	r1, r3
 800da56:	2002      	movs	r0, #2
 800da58:	f005 f8f6 	bl	8012c48 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800da5c:	1dbc      	adds	r4, r7, #6
 800da5e:	f000 fc8f 	bl	800e380 <sen5x_start_measurement_without_pm>
 800da62:	0003      	movs	r3, r0
 800da64:	8023      	strh	r3, [r4, #0]
    if (error) {
 800da66:	1dbb      	adds	r3, r7, #6
 800da68:	2200      	movs	r2, #0
 800da6a:	5e9b      	ldrsh	r3, [r3, r2]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d022      	beq.n	800dab6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800da70:	1dbb      	adds	r3, r7, #6
 800da72:	2200      	movs	r2, #0
 800da74:	5e9b      	ldrsh	r3, [r3, r2]
 800da76:	4a17      	ldr	r2, [pc, #92]	@ (800dad4 <sen5x_extinguish_measurement+0xa4>)
 800da78:	4917      	ldr	r1, [pc, #92]	@ (800dad8 <sen5x_extinguish_measurement+0xa8>)
 800da7a:	2001      	movs	r0, #1
 800da7c:	f005 f8e4 	bl	8012c48 <CreateLine>
 800da80:	e019      	b.n	800dab6 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800da82:	1dbc      	adds	r4, r7, #6
 800da84:	f000 fcaa 	bl	800e3dc <sen5x_stop_measurement>
 800da88:	0003      	movs	r3, r0
 800da8a:	8023      	strh	r3, [r4, #0]
    showTime();
 800da8c:	f7fb fa4e 	bl	8008f2c <showTime>
    Info("sen5x_stop_measurement executed");
 800da90:	4a12      	ldr	r2, [pc, #72]	@ (800dadc <sen5x_extinguish_measurement+0xac>)
 800da92:	4b0e      	ldr	r3, [pc, #56]	@ (800dacc <sen5x_extinguish_measurement+0x9c>)
 800da94:	0019      	movs	r1, r3
 800da96:	2002      	movs	r0, #2
 800da98:	f005 f8d6 	bl	8012c48 <CreateLine>
    if (error) {
 800da9c:	1dbb      	adds	r3, r7, #6
 800da9e:	2200      	movs	r2, #0
 800daa0:	5e9b      	ldrsh	r3, [r3, r2]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d007      	beq.n	800dab6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800daa6:	1dbb      	adds	r3, r7, #6
 800daa8:	2200      	movs	r2, #0
 800daaa:	5e9b      	ldrsh	r3, [r3, r2]
 800daac:	4a0c      	ldr	r2, [pc, #48]	@ (800dae0 <sen5x_extinguish_measurement+0xb0>)
 800daae:	490a      	ldr	r1, [pc, #40]	@ (800dad8 <sen5x_extinguish_measurement+0xa8>)
 800dab0:	2001      	movs	r0, #1
 800dab2:	f005 f8c9 	bl	8012c48 <CreateLine>
    }
  }
  return error;
 800dab6:	1dbb      	adds	r3, r7, #6
 800dab8:	2200      	movs	r2, #0
 800daba:	5e9b      	ldrsh	r3, [r3, r2]
}
 800dabc:	0018      	movs	r0, r3
 800dabe:	46bd      	mov	sp, r7
 800dac0:	b003      	add	sp, #12
 800dac2:	bd90      	pop	{r4, r7, pc}
 800dac4:	20000ee6 	.word	0x20000ee6
 800dac8:	0802c624 	.word	0x0802c624
 800dacc:	0802c34c 	.word	0x0802c34c
 800dad0:	0802c65c 	.word	0x0802c65c
 800dad4:	0802c678 	.word	0x0802c678
 800dad8:	0802c3b8 	.word	0x0802c3b8
 800dadc:	0802c6b8 	.word	0x0802c6b8
 800dae0:	0802c6d8 	.word	0x0802c6d8

0800dae4 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800dae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dae6:	b08d      	sub	sp, #52	@ 0x34
 800dae8:	af04      	add	r7, sp, #16
 800daea:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800daec:	261e      	movs	r6, #30
 800daee:	19bb      	adds	r3, r7, r6
 800daf0:	2200      	movs	r2, #0
 800daf2:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800daf4:	19bc      	adds	r4, r7, r6
 800daf6:	2316      	movs	r3, #22
 800daf8:	18fd      	adds	r5, r7, r3
 800dafa:	2318      	movs	r3, #24
 800dafc:	18fa      	adds	r2, r7, r3
 800dafe:	231a      	movs	r3, #26
 800db00:	18f9      	adds	r1, r7, r3
 800db02:	231c      	movs	r3, #28
 800db04:	18f8      	adds	r0, r7, r3
 800db06:	230e      	movs	r3, #14
 800db08:	18fb      	adds	r3, r7, r3
 800db0a:	9303      	str	r3, [sp, #12]
 800db0c:	2310      	movs	r3, #16
 800db0e:	18fb      	adds	r3, r7, r3
 800db10:	9302      	str	r3, [sp, #8]
 800db12:	2312      	movs	r3, #18
 800db14:	18fb      	adds	r3, r7, r3
 800db16:	9301      	str	r3, [sp, #4]
 800db18:	2314      	movs	r3, #20
 800db1a:	18fb      	adds	r3, r7, r3
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	002b      	movs	r3, r5
 800db20:	f000 fcde 	bl	800e4e0 <sen5x_read_measured_values>
 800db24:	0003      	movs	r3, r0
 800db26:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800db28:	19bb      	adds	r3, r7, r6
 800db2a:	2200      	movs	r2, #0
 800db2c:	5e9b      	ldrsh	r3, [r3, r2]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <sen5x_read_measurement+0x56>
    return error;
 800db32:	19bb      	adds	r3, r7, r6
 800db34:	2200      	movs	r2, #0
 800db36:	5e9b      	ldrsh	r3, [r3, r2]
 800db38:	e02c      	b.n	800db94 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800db3a:	231c      	movs	r3, #28
 800db3c:	18fb      	adds	r3, r7, r3
 800db3e:	881a      	ldrh	r2, [r3, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800db44:	231a      	movs	r3, #26
 800db46:	18fb      	adds	r3, r7, r3
 800db48:	881a      	ldrh	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800db4e:	2318      	movs	r3, #24
 800db50:	18fb      	adds	r3, r7, r3
 800db52:	881a      	ldrh	r2, [r3, #0]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800db58:	2316      	movs	r3, #22
 800db5a:	18fb      	adds	r3, r7, r3
 800db5c:	881a      	ldrh	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800db62:	2314      	movs	r3, #20
 800db64:	18fb      	adds	r3, r7, r3
 800db66:	2200      	movs	r2, #0
 800db68:	5e9a      	ldrsh	r2, [r3, r2]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800db6e:	2312      	movs	r3, #18
 800db70:	18fb      	adds	r3, r7, r3
 800db72:	2200      	movs	r2, #0
 800db74:	5e9a      	ldrsh	r2, [r3, r2]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800db7a:	2310      	movs	r3, #16
 800db7c:	18fb      	adds	r3, r7, r3
 800db7e:	2200      	movs	r2, #0
 800db80:	5e9a      	ldrsh	r2, [r3, r2]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800db86:	230e      	movs	r3, #14
 800db88:	18fb      	adds	r3, r7, r3
 800db8a:	2200      	movs	r2, #0
 800db8c:	5e9a      	ldrsh	r2, [r3, r2]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	81da      	strh	r2, [r3, #14]
  return 0;
 800db92:	2300      	movs	r3, #0
}
 800db94:	0018      	movs	r0, r3
 800db96:	46bd      	mov	sp, r7
 800db98:	b009      	add	sp, #36	@ 0x24
 800db9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db9c <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800dba0:	4b63      	ldr	r3, [pc, #396]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dba2:	881b      	ldrh	r3, [r3, #0]
 800dba4:	4a63      	ldr	r2, [pc, #396]	@ (800dd34 <sen5x_printvalues+0x198>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d013      	beq.n	800dbd2 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800dbaa:	4b61      	ldr	r3, [pc, #388]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	0018      	movs	r0, r3
 800dbb0:	f7f3 fd0e 	bl	80015d0 <__aeabi_i2f>
 800dbb4:	1c03      	adds	r3, r0, #0
 800dbb6:	4960      	ldr	r1, [pc, #384]	@ (800dd38 <sen5x_printvalues+0x19c>)
 800dbb8:	1c18      	adds	r0, r3, #0
 800dbba:	f7f3 f80b 	bl	8000bd4 <__aeabi_fdiv>
 800dbbe:	1c03      	adds	r3, r0, #0
 800dbc0:	1c18      	adds	r0, r3, #0
 800dbc2:	f7f5 fc4f 	bl	8003464 <__aeabi_f2d>
 800dbc6:	0002      	movs	r2, r0
 800dbc8:	000b      	movs	r3, r1
 800dbca:	495c      	ldr	r1, [pc, #368]	@ (800dd3c <sen5x_printvalues+0x1a0>)
 800dbcc:	0008      	movs	r0, r1
 800dbce:	f017 f8b5 	bl	8024d3c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800dbd2:	4b57      	ldr	r3, [pc, #348]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dbd4:	885b      	ldrh	r3, [r3, #2]
 800dbd6:	4a57      	ldr	r2, [pc, #348]	@ (800dd34 <sen5x_printvalues+0x198>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d013      	beq.n	800dc04 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800dbdc:	4b54      	ldr	r3, [pc, #336]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dbde:	885b      	ldrh	r3, [r3, #2]
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	f7f3 fcf5 	bl	80015d0 <__aeabi_i2f>
 800dbe6:	1c03      	adds	r3, r0, #0
 800dbe8:	4953      	ldr	r1, [pc, #332]	@ (800dd38 <sen5x_printvalues+0x19c>)
 800dbea:	1c18      	adds	r0, r3, #0
 800dbec:	f7f2 fff2 	bl	8000bd4 <__aeabi_fdiv>
 800dbf0:	1c03      	adds	r3, r0, #0
 800dbf2:	1c18      	adds	r0, r3, #0
 800dbf4:	f7f5 fc36 	bl	8003464 <__aeabi_f2d>
 800dbf8:	0002      	movs	r2, r0
 800dbfa:	000b      	movs	r3, r1
 800dbfc:	4950      	ldr	r1, [pc, #320]	@ (800dd40 <sen5x_printvalues+0x1a4>)
 800dbfe:	0008      	movs	r0, r1
 800dc00:	f017 f89c 	bl	8024d3c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800dc04:	4b4a      	ldr	r3, [pc, #296]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dc06:	889b      	ldrh	r3, [r3, #4]
 800dc08:	4a4a      	ldr	r2, [pc, #296]	@ (800dd34 <sen5x_printvalues+0x198>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d013      	beq.n	800dc36 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800dc0e:	4b48      	ldr	r3, [pc, #288]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dc10:	889b      	ldrh	r3, [r3, #4]
 800dc12:	0018      	movs	r0, r3
 800dc14:	f7f3 fcdc 	bl	80015d0 <__aeabi_i2f>
 800dc18:	1c03      	adds	r3, r0, #0
 800dc1a:	4947      	ldr	r1, [pc, #284]	@ (800dd38 <sen5x_printvalues+0x19c>)
 800dc1c:	1c18      	adds	r0, r3, #0
 800dc1e:	f7f2 ffd9 	bl	8000bd4 <__aeabi_fdiv>
 800dc22:	1c03      	adds	r3, r0, #0
 800dc24:	1c18      	adds	r0, r3, #0
 800dc26:	f7f5 fc1d 	bl	8003464 <__aeabi_f2d>
 800dc2a:	0002      	movs	r2, r0
 800dc2c:	000b      	movs	r3, r1
 800dc2e:	4945      	ldr	r1, [pc, #276]	@ (800dd44 <sen5x_printvalues+0x1a8>)
 800dc30:	0008      	movs	r0, r1
 800dc32:	f017 f883 	bl	8024d3c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800dc36:	4b3e      	ldr	r3, [pc, #248]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dc38:	88db      	ldrh	r3, [r3, #6]
 800dc3a:	4a3e      	ldr	r2, [pc, #248]	@ (800dd34 <sen5x_printvalues+0x198>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d013      	beq.n	800dc68 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800dc40:	4b3b      	ldr	r3, [pc, #236]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dc42:	88db      	ldrh	r3, [r3, #6]
 800dc44:	0018      	movs	r0, r3
 800dc46:	f7f3 fcc3 	bl	80015d0 <__aeabi_i2f>
 800dc4a:	1c03      	adds	r3, r0, #0
 800dc4c:	493a      	ldr	r1, [pc, #232]	@ (800dd38 <sen5x_printvalues+0x19c>)
 800dc4e:	1c18      	adds	r0, r3, #0
 800dc50:	f7f2 ffc0 	bl	8000bd4 <__aeabi_fdiv>
 800dc54:	1c03      	adds	r3, r0, #0
 800dc56:	1c18      	adds	r0, r3, #0
 800dc58:	f7f5 fc04 	bl	8003464 <__aeabi_f2d>
 800dc5c:	0002      	movs	r2, r0
 800dc5e:	000b      	movs	r3, r1
 800dc60:	4939      	ldr	r1, [pc, #228]	@ (800dd48 <sen5x_printvalues+0x1ac>)
 800dc62:	0008      	movs	r0, r1
 800dc64:	f017 f86a 	bl	8024d3c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800dc68:	4b31      	ldr	r3, [pc, #196]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dc6a:	2208      	movs	r2, #8
 800dc6c:	5e9b      	ldrsh	r3, [r3, r2]
 800dc6e:	4a37      	ldr	r2, [pc, #220]	@ (800dd4c <sen5x_printvalues+0x1b0>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d014      	beq.n	800dc9e <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800dc74:	4b2e      	ldr	r3, [pc, #184]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dc76:	2208      	movs	r2, #8
 800dc78:	5e9b      	ldrsh	r3, [r3, r2]
 800dc7a:	0018      	movs	r0, r3
 800dc7c:	f7f3 fca8 	bl	80015d0 <__aeabi_i2f>
 800dc80:	1c03      	adds	r3, r0, #0
 800dc82:	4933      	ldr	r1, [pc, #204]	@ (800dd50 <sen5x_printvalues+0x1b4>)
 800dc84:	1c18      	adds	r0, r3, #0
 800dc86:	f7f2 ffa5 	bl	8000bd4 <__aeabi_fdiv>
 800dc8a:	1c03      	adds	r3, r0, #0
 800dc8c:	1c18      	adds	r0, r3, #0
 800dc8e:	f7f5 fbe9 	bl	8003464 <__aeabi_f2d>
 800dc92:	0002      	movs	r2, r0
 800dc94:	000b      	movs	r3, r1
 800dc96:	492f      	ldr	r1, [pc, #188]	@ (800dd54 <sen5x_printvalues+0x1b8>)
 800dc98:	0008      	movs	r0, r1
 800dc9a:	f017 f84f 	bl	8024d3c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800dc9e:	4b24      	ldr	r3, [pc, #144]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dca0:	220a      	movs	r2, #10
 800dca2:	5e9b      	ldrsh	r3, [r3, r2]
 800dca4:	4a29      	ldr	r2, [pc, #164]	@ (800dd4c <sen5x_printvalues+0x1b0>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d014      	beq.n	800dcd4 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800dcaa:	4b21      	ldr	r3, [pc, #132]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dcac:	220a      	movs	r2, #10
 800dcae:	5e9b      	ldrsh	r3, [r3, r2]
 800dcb0:	0018      	movs	r0, r3
 800dcb2:	f7f3 fc8d 	bl	80015d0 <__aeabi_i2f>
 800dcb6:	1c03      	adds	r3, r0, #0
 800dcb8:	4927      	ldr	r1, [pc, #156]	@ (800dd58 <sen5x_printvalues+0x1bc>)
 800dcba:	1c18      	adds	r0, r3, #0
 800dcbc:	f7f2 ff8a 	bl	8000bd4 <__aeabi_fdiv>
 800dcc0:	1c03      	adds	r3, r0, #0
 800dcc2:	1c18      	adds	r0, r3, #0
 800dcc4:	f7f5 fbce 	bl	8003464 <__aeabi_f2d>
 800dcc8:	0002      	movs	r2, r0
 800dcca:	000b      	movs	r3, r1
 800dccc:	4923      	ldr	r1, [pc, #140]	@ (800dd5c <sen5x_printvalues+0x1c0>)
 800dcce:	0008      	movs	r0, r1
 800dcd0:	f017 f834 	bl	8024d3c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800dcd4:	4b16      	ldr	r3, [pc, #88]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dcd6:	220c      	movs	r2, #12
 800dcd8:	5e9b      	ldrsh	r3, [r3, r2]
 800dcda:	4a1c      	ldr	r2, [pc, #112]	@ (800dd4c <sen5x_printvalues+0x1b0>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d00e      	beq.n	800dcfe <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800dce0:	4b13      	ldr	r3, [pc, #76]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dce2:	220c      	movs	r2, #12
 800dce4:	5e9b      	ldrsh	r3, [r3, r2]
 800dce6:	210a      	movs	r1, #10
 800dce8:	0018      	movs	r0, r3
 800dcea:	f7f2 fae5 	bl	80002b8 <__divsi3>
 800dcee:	0003      	movs	r3, r0
 800dcf0:	b21b      	sxth	r3, r3
 800dcf2:	001a      	movs	r2, r3
 800dcf4:	4b1a      	ldr	r3, [pc, #104]	@ (800dd60 <sen5x_printvalues+0x1c4>)
 800dcf6:	0011      	movs	r1, r2
 800dcf8:	0018      	movs	r0, r3
 800dcfa:	f017 f81f 	bl	8024d3c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800dcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dd00:	220e      	movs	r2, #14
 800dd02:	5e9b      	ldrsh	r3, [r3, r2]
 800dd04:	4a11      	ldr	r2, [pc, #68]	@ (800dd4c <sen5x_printvalues+0x1b0>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d00e      	beq.n	800dd28 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800dd0a:	4b09      	ldr	r3, [pc, #36]	@ (800dd30 <sen5x_printvalues+0x194>)
 800dd0c:	220e      	movs	r2, #14
 800dd0e:	5e9b      	ldrsh	r3, [r3, r2]
 800dd10:	210a      	movs	r1, #10
 800dd12:	0018      	movs	r0, r3
 800dd14:	f7f2 fad0 	bl	80002b8 <__divsi3>
 800dd18:	0003      	movs	r3, r0
 800dd1a:	b21b      	sxth	r3, r3
 800dd1c:	001a      	movs	r2, r3
 800dd1e:	4b11      	ldr	r3, [pc, #68]	@ (800dd64 <sen5x_printvalues+0x1c8>)
 800dd20:	0011      	movs	r1, r2
 800dd22:	0018      	movs	r0, r3
 800dd24:	f017 f80a 	bl	8024d3c <iprintf>
  }
}
 800dd28:	46c0      	nop			@ (mov r8, r8)
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	46c0      	nop			@ (mov r8, r8)
 800dd30:	20000ef8 	.word	0x20000ef8
 800dd34:	0000ffff 	.word	0x0000ffff
 800dd38:	41200000 	.word	0x41200000
 800dd3c:	0802c708 	.word	0x0802c708
 800dd40:	0802c734 	.word	0x0802c734
 800dd44:	0802c760 	.word	0x0802c760
 800dd48:	0802c78c 	.word	0x0802c78c
 800dd4c:	00007fff 	.word	0x00007fff
 800dd50:	42c80000 	.word	0x42c80000
 800dd54:	0802c7b8 	.word	0x0802c7b8
 800dd58:	43480000 	.word	0x43480000
 800dd5c:	0802c7dc 	.word	0x0802c7dc
 800dd60:	0802c804 	.word	0x0802c804
 800dd64:	0802c81c 	.word	0x0802c81c

0800dd68 <sen5xStore>:

void sen5xStore() {
 800dd68:	b5b0      	push	{r4, r5, r7, lr}
 800dd6a:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800dd6c:	4b41      	ldr	r3, [pc, #260]	@ (800de74 <sen5xStore+0x10c>)
 800dd6e:	881b      	ldrh	r3, [r3, #0]
 800dd70:	4a41      	ldr	r2, [pc, #260]	@ (800de78 <sen5xStore+0x110>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d004      	beq.n	800dd80 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800dd76:	4b3f      	ldr	r3, [pc, #252]	@ (800de74 <sen5xStore+0x10c>)
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	f7f6 fd26 	bl	80047cc <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800dd80:	4b3c      	ldr	r3, [pc, #240]	@ (800de74 <sen5xStore+0x10c>)
 800dd82:	885b      	ldrh	r3, [r3, #2]
 800dd84:	4a3c      	ldr	r2, [pc, #240]	@ (800de78 <sen5xStore+0x110>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d004      	beq.n	800dd94 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800dd8a:	4b3a      	ldr	r3, [pc, #232]	@ (800de74 <sen5xStore+0x10c>)
 800dd8c:	885b      	ldrh	r3, [r3, #2]
 800dd8e:	0018      	movs	r0, r3
 800dd90:	f7f6 fd48 	bl	8004824 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800dd94:	4b37      	ldr	r3, [pc, #220]	@ (800de74 <sen5xStore+0x10c>)
 800dd96:	889b      	ldrh	r3, [r3, #4]
 800dd98:	4a37      	ldr	r2, [pc, #220]	@ (800de78 <sen5xStore+0x110>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d004      	beq.n	800dda8 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800dd9e:	4b35      	ldr	r3, [pc, #212]	@ (800de74 <sen5xStore+0x10c>)
 800dda0:	889b      	ldrh	r3, [r3, #4]
 800dda2:	0018      	movs	r0, r3
 800dda4:	f7f6 fd6a 	bl	800487c <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800dda8:	4b32      	ldr	r3, [pc, #200]	@ (800de74 <sen5xStore+0x10c>)
 800ddaa:	88db      	ldrh	r3, [r3, #6]
 800ddac:	4a32      	ldr	r2, [pc, #200]	@ (800de78 <sen5xStore+0x110>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d004      	beq.n	800ddbc <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800ddb2:	4b30      	ldr	r3, [pc, #192]	@ (800de74 <sen5xStore+0x10c>)
 800ddb4:	88db      	ldrh	r3, [r3, #6]
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	f7f6 fd8c 	bl	80048d4 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800ddbc:	4b2f      	ldr	r3, [pc, #188]	@ (800de7c <sen5xStore+0x114>)
 800ddbe:	791b      	ldrb	r3, [r3, #4]
 800ddc0:	2b34      	cmp	r3, #52	@ 0x34
 800ddc2:	d003      	beq.n	800ddcc <sen5xStore+0x64>
 800ddc4:	4b2d      	ldr	r3, [pc, #180]	@ (800de7c <sen5xStore+0x114>)
 800ddc6:	791b      	ldrb	r3, [r3, #4]
 800ddc8:	2b35      	cmp	r3, #53	@ 0x35
 800ddca:	d14f      	bne.n	800de6c <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800ddcc:	4b29      	ldr	r3, [pc, #164]	@ (800de74 <sen5xStore+0x10c>)
 800ddce:	220a      	movs	r2, #10
 800ddd0:	5e9b      	ldrsh	r3, [r3, r2]
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	f7f3 fbfc 	bl	80015d0 <__aeabi_i2f>
 800ddd8:	1c04      	adds	r4, r0, #0
 800ddda:	4b26      	ldr	r3, [pc, #152]	@ (800de74 <sen5xStore+0x10c>)
 800dddc:	2208      	movs	r2, #8
 800ddde:	5e9b      	ldrsh	r3, [r3, r2]
 800dde0:	0018      	movs	r0, r3
 800dde2:	f7f3 fbf5 	bl	80015d0 <__aeabi_i2f>
 800dde6:	1c03      	adds	r3, r0, #0
 800dde8:	1c19      	adds	r1, r3, #0
 800ddea:	1c20      	adds	r0, r4, #0
 800ddec:	f7f6 fdbc 	bl	8004968 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800ddf0:	4b23      	ldr	r3, [pc, #140]	@ (800de80 <sen5xStore+0x118>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	4053      	eors	r3, r2
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d103      	bne.n	800de06 <sen5xStore+0x9e>
 800ddfe:	4b21      	ldr	r3, [pc, #132]	@ (800de84 <sen5xStore+0x11c>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d032      	beq.n	800de6c <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800de06:	4b1b      	ldr	r3, [pc, #108]	@ (800de74 <sen5xStore+0x10c>)
 800de08:	220c      	movs	r2, #12
 800de0a:	5e9b      	ldrsh	r3, [r3, r2]
 800de0c:	4a1e      	ldr	r2, [pc, #120]	@ (800de88 <sen5xStore+0x120>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d019      	beq.n	800de46 <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800de12:	4b18      	ldr	r3, [pc, #96]	@ (800de74 <sen5xStore+0x10c>)
 800de14:	220c      	movs	r2, #12
 800de16:	5e9b      	ldrsh	r3, [r3, r2]
 800de18:	210a      	movs	r1, #10
 800de1a:	0018      	movs	r0, r3
 800de1c:	f7f2 fa4c 	bl	80002b8 <__divsi3>
 800de20:	0003      	movs	r3, r0
 800de22:	b21b      	sxth	r3, r3
 800de24:	b29b      	uxth	r3, r3
 800de26:	0018      	movs	r0, r3
 800de28:	f003 fea6 	bl	8011b78 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800de2c:	4b11      	ldr	r3, [pc, #68]	@ (800de74 <sen5xStore+0x10c>)
 800de2e:	220c      	movs	r2, #12
 800de30:	5e9b      	ldrsh	r3, [r3, r2]
 800de32:	210a      	movs	r1, #10
 800de34:	0018      	movs	r0, r3
 800de36:	f7f2 fa3f 	bl	80002b8 <__divsi3>
 800de3a:	0003      	movs	r3, r0
 800de3c:	b21b      	sxth	r3, r3
 800de3e:	b29b      	uxth	r3, r3
 800de40:	0018      	movs	r0, r3
 800de42:	f7f6 fbf5 	bl	8004630 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800de46:	4b0b      	ldr	r3, [pc, #44]	@ (800de74 <sen5xStore+0x10c>)
 800de48:	220e      	movs	r2, #14
 800de4a:	5e9b      	ldrsh	r3, [r3, r2]
 800de4c:	4a0e      	ldr	r2, [pc, #56]	@ (800de88 <sen5xStore+0x120>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d00c      	beq.n	800de6c <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800de52:	4b08      	ldr	r3, [pc, #32]	@ (800de74 <sen5xStore+0x10c>)
 800de54:	220e      	movs	r2, #14
 800de56:	5e9b      	ldrsh	r3, [r3, r2]
 800de58:	210a      	movs	r1, #10
 800de5a:	0018      	movs	r0, r3
 800de5c:	f7f2 fa2c 	bl	80002b8 <__divsi3>
 800de60:	0003      	movs	r3, r0
 800de62:	b21b      	sxth	r3, r3
 800de64:	b29b      	uxth	r3, r3
 800de66:	0018      	movs	r0, r3
 800de68:	f7f6 fd60 	bl	800492c <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800de6c:	46c0      	nop			@ (mov r8, r8)
 800de6e:	46bd      	mov	sp, r7
 800de70:	bdb0      	pop	{r4, r5, r7, pc}
 800de72:	46c0      	nop			@ (mov r8, r8)
 800de74:	20000ef8 	.word	0x20000ef8
 800de78:	0000ffff 	.word	0x0000ffff
 800de7c:	20000ee8 	.word	0x20000ee8
 800de80:	20000ee6 	.word	0x20000ee6
 800de84:	20001e75 	.word	0x20001e75
 800de88:	00007fff 	.word	0x00007fff

0800de8c <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b085      	sub	sp, #20
 800de90:	af02      	add	r7, sp, #8
 800de92:	6039      	str	r1, [r7, #0]
 800de94:	0011      	movs	r1, r2
 800de96:	1dfb      	adds	r3, r7, #7
 800de98:	1c02      	adds	r2, r0, #0
 800de9a:	701a      	strb	r2, [r3, #0]
 800de9c:	1d3b      	adds	r3, r7, #4
 800de9e:	1c0a      	adds	r2, r1, #0
 800dea0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800dea2:	1dfb      	adds	r3, r7, #7
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	18db      	adds	r3, r3, r3
 800deaa:	b299      	uxth	r1, r3
 800deac:	1d3b      	adds	r3, r7, #4
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	4805      	ldr	r0, [pc, #20]	@ (800dec8 <sensirion_i2c_hal_read+0x3c>)
 800deb4:	2464      	movs	r4, #100	@ 0x64
 800deb6:	9400      	str	r4, [sp, #0]
 800deb8:	f007 f86c 	bl	8014f94 <HAL_I2C_Master_Receive>
 800debc:	0003      	movs	r3, r0
 800debe:	b25b      	sxtb	r3, r3
}
 800dec0:	0018      	movs	r0, r3
 800dec2:	46bd      	mov	sp, r7
 800dec4:	b003      	add	sp, #12
 800dec6:	bd90      	pop	{r4, r7, pc}
 800dec8:	20000cbc 	.word	0x20000cbc

0800decc <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800decc:	b590      	push	{r4, r7, lr}
 800dece:	b085      	sub	sp, #20
 800ded0:	af02      	add	r7, sp, #8
 800ded2:	6039      	str	r1, [r7, #0]
 800ded4:	0011      	movs	r1, r2
 800ded6:	1dfb      	adds	r3, r7, #7
 800ded8:	1c02      	adds	r2, r0, #0
 800deda:	701a      	strb	r2, [r3, #0]
 800dedc:	1d3b      	adds	r3, r7, #4
 800dede:	1c0a      	adds	r2, r1, #0
 800dee0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800dee2:	1dfb      	adds	r3, r7, #7
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	18db      	adds	r3, r3, r3
 800deea:	b299      	uxth	r1, r3
 800deec:	1d3b      	adds	r3, r7, #4
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	4805      	ldr	r0, [pc, #20]	@ (800df08 <sensirion_i2c_hal_write+0x3c>)
 800def4:	2464      	movs	r4, #100	@ 0x64
 800def6:	9400      	str	r4, [sp, #0]
 800def8:	f006 ff44 	bl	8014d84 <HAL_I2C_Master_Transmit>
 800defc:	0003      	movs	r3, r0
 800defe:	b25b      	sxtb	r3, r3
}
 800df00:	0018      	movs	r0, r3
 800df02:	46bd      	mov	sp, r7
 800df04:	b003      	add	sp, #12
 800df06:	bd90      	pop	{r4, r7, pc}
 800df08:	20000cbc 	.word	0x20000cbc

0800df0c <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	22fa      	movs	r2, #250	@ 0xfa
 800df18:	0091      	lsls	r1, r2, #2
 800df1a:	0018      	movs	r0, r3
 800df1c:	f7f2 f942 	bl	80001a4 <__udivsi3>
 800df20:	0003      	movs	r3, r0
 800df22:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	22fa      	movs	r2, #250	@ 0xfa
 800df28:	0091      	lsls	r1, r2, #2
 800df2a:	0018      	movs	r0, r3
 800df2c:	f7f2 f9c0 	bl	80002b0 <__aeabi_uidivmod>
 800df30:	1e0b      	subs	r3, r1, #0
 800df32:	d002      	beq.n	800df3a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	3301      	adds	r3, #1
 800df38:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	0018      	movs	r0, r3
 800df3e:	f005 fbcb 	bl	80136d8 <HAL_Delay>
}
 800df42:	46c0      	nop			@ (mov r8, r8)
 800df44:	46bd      	mov	sp, r7
 800df46:	b004      	add	sp, #16
 800df48:	bd80      	pop	{r7, pc}
	...

0800df4c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800df56:	1d3b      	adds	r3, r7, #4
 800df58:	0018      	movs	r0, r3
 800df5a:	f000 fd01 	bl	800e960 <sen5x_read_device_status>
 800df5e:	1e03      	subs	r3, r0, #0
 800df60:	d007      	beq.n	800df72 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800df62:	4a28      	ldr	r2, [pc, #160]	@ (800e004 <sen5x_check_for_errors+0xb8>)
 800df64:	4b28      	ldr	r3, [pc, #160]	@ (800e008 <sen5x_check_for_errors+0xbc>)
 800df66:	0019      	movs	r1, r3
 800df68:	2001      	movs	r0, #1
 800df6a:	f004 fe6d 	bl	8012c48 <CreateLine>
    return true;
 800df6e:	2301      	movs	r3, #1
 800df70:	e043      	b.n	800dffa <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d101      	bne.n	800df7c <sen5x_check_for_errors+0x30>
    return false;
 800df78:	2300      	movs	r3, #0
 800df7a:	e03e      	b.n	800dffa <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	2380      	movs	r3, #128	@ 0x80
 800df80:	039b      	lsls	r3, r3, #14
 800df82:	4013      	ands	r3, r2
 800df84:	d005      	beq.n	800df92 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800df86:	4a21      	ldr	r2, [pc, #132]	@ (800e00c <sen5x_check_for_errors+0xc0>)
 800df88:	4b21      	ldr	r3, [pc, #132]	@ (800e010 <sen5x_check_for_errors+0xc4>)
 800df8a:	0019      	movs	r1, r3
 800df8c:	2003      	movs	r0, #3
 800df8e:	f004 fe5b 	bl	8012c48 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	2380      	movs	r3, #128	@ 0x80
 800df96:	031b      	lsls	r3, r3, #12
 800df98:	4013      	ands	r3, r2
 800df9a:	d005      	beq.n	800dfa8 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800df9c:	4a1d      	ldr	r2, [pc, #116]	@ (800e014 <sen5x_check_for_errors+0xc8>)
 800df9e:	4b1c      	ldr	r3, [pc, #112]	@ (800e010 <sen5x_check_for_errors+0xc4>)
 800dfa0:	0019      	movs	r1, r3
 800dfa2:	2003      	movs	r0, #3
 800dfa4:	f004 fe50 	bl	8012c48 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2280      	movs	r2, #128	@ 0x80
 800dfac:	4013      	ands	r3, r2
 800dfae:	d005      	beq.n	800dfbc <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800dfb0:	4a19      	ldr	r2, [pc, #100]	@ (800e018 <sen5x_check_for_errors+0xcc>)
 800dfb2:	4b17      	ldr	r3, [pc, #92]	@ (800e010 <sen5x_check_for_errors+0xc4>)
 800dfb4:	0019      	movs	r1, r3
 800dfb6:	2003      	movs	r0, #3
 800dfb8:	f004 fe46 	bl	8012c48 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2240      	movs	r2, #64	@ 0x40
 800dfc0:	4013      	ands	r3, r2
 800dfc2:	d005      	beq.n	800dfd0 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800dfc4:	4a15      	ldr	r2, [pc, #84]	@ (800e01c <sen5x_check_for_errors+0xd0>)
 800dfc6:	4b12      	ldr	r3, [pc, #72]	@ (800e010 <sen5x_check_for_errors+0xc4>)
 800dfc8:	0019      	movs	r1, r3
 800dfca:	2003      	movs	r0, #3
 800dfcc:	f004 fe3c 	bl	8012c48 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2220      	movs	r2, #32
 800dfd4:	4013      	ands	r3, r2
 800dfd6:	d005      	beq.n	800dfe4 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800dfd8:	4a11      	ldr	r2, [pc, #68]	@ (800e020 <sen5x_check_for_errors+0xd4>)
 800dfda:	4b0d      	ldr	r3, [pc, #52]	@ (800e010 <sen5x_check_for_errors+0xc4>)
 800dfdc:	0019      	movs	r1, r3
 800dfde:	2003      	movs	r0, #3
 800dfe0:	f004 fe32 	bl	8012c48 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2210      	movs	r2, #16
 800dfe8:	4013      	ands	r3, r2
 800dfea:	d005      	beq.n	800dff8 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800dfec:	4a0d      	ldr	r2, [pc, #52]	@ (800e024 <sen5x_check_for_errors+0xd8>)
 800dfee:	4b08      	ldr	r3, [pc, #32]	@ (800e010 <sen5x_check_for_errors+0xc4>)
 800dff0:	0019      	movs	r1, r3
 800dff2:	2003      	movs	r0, #3
 800dff4:	f004 fe28 	bl	8012c48 <CreateLine>
  }
  return 1;
 800dff8:	2301      	movs	r3, #1
}
 800dffa:	0018      	movs	r0, r3
 800dffc:	46bd      	mov	sp, r7
 800dffe:	b002      	add	sp, #8
 800e000:	bd80      	pop	{r7, pc}
 800e002:	46c0      	nop			@ (mov r8, r8)
 800e004:	0802c834 	.word	0x0802c834
 800e008:	0802c3b8 	.word	0x0802c3b8
 800e00c:	0802c860 	.word	0x0802c860
 800e010:	0802c38c 	.word	0x0802c38c
 800e014:	0802c880 	.word	0x0802c880
 800e018:	0802c89c 	.word	0x0802c89c
 800e01c:	0802c8c0 	.word	0x0802c8c0
 800e020:	0802c8e0 	.word	0x0802c8e0
 800e024:	0802c8f4 	.word	0x0802c8f4

0800e028 <set_light_on_state>:

void set_light_on_state(void) {
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800e02c:	4b15      	ldr	r3, [pc, #84]	@ (800e084 <set_light_on_state+0x5c>)
 800e02e:	781b      	ldrb	r3, [r3, #0]
 800e030:	2201      	movs	r2, #1
 800e032:	4053      	eors	r3, r2
 800e034:	b2db      	uxtb	r3, r3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d008      	beq.n	800e04c <set_light_on_state+0x24>
    sen5x_Power_On();
 800e03a:	f7ff fb1d 	bl	800d678 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800e03e:	4a12      	ldr	r2, [pc, #72]	@ (800e088 <set_light_on_state+0x60>)
 800e040:	4b12      	ldr	r3, [pc, #72]	@ (800e08c <set_light_on_state+0x64>)
 800e042:	0019      	movs	r1, r3
 800e044:	2003      	movs	r0, #3
 800e046:	f004 fdff 	bl	8012c48 <CreateLine>
 800e04a:	e00a      	b.n	800e062 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800e04c:	f005 fb3a 	bl	80136c4 <HAL_GetTick>
 800e050:	0002      	movs	r2, r0
 800e052:	4b0f      	ldr	r3, [pc, #60]	@ (800e090 <set_light_on_state+0x68>)
 800e054:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800e056:	4a0f      	ldr	r2, [pc, #60]	@ (800e094 <set_light_on_state+0x6c>)
 800e058:	4b0c      	ldr	r3, [pc, #48]	@ (800e08c <set_light_on_state+0x64>)
 800e05a:	0019      	movs	r1, r3
 800e05c:	2003      	movs	r0, #3
 800e05e:	f004 fdf3 	bl	8012c48 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800e062:	f7ff fc99 	bl	800d998 <sen5x_lightup_measurement>
 800e066:	1e03      	subs	r3, r0, #0
 800e068:	d005      	beq.n	800e076 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800e06a:	4a0b      	ldr	r2, [pc, #44]	@ (800e098 <set_light_on_state+0x70>)
 800e06c:	4b0b      	ldr	r3, [pc, #44]	@ (800e09c <set_light_on_state+0x74>)
 800e06e:	0019      	movs	r1, r3
 800e070:	2001      	movs	r0, #1
 800e072:	f004 fde9 	bl	8012c48 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800e076:	4b0a      	ldr	r3, [pc, #40]	@ (800e0a0 <set_light_on_state+0x78>)
 800e078:	2203      	movs	r2, #3
 800e07a:	701a      	strb	r2, [r3, #0]
}
 800e07c:	46c0      	nop			@ (mov r8, r8)
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	46c0      	nop			@ (mov r8, r8)
 800e084:	20000ee5 	.word	0x20000ee5
 800e088:	0802c930 	.word	0x0802c930
 800e08c:	0802c38c 	.word	0x0802c38c
 800e090:	20000ef4 	.word	0x20000ef4
 800e094:	0802c950 	.word	0x0802c950
 800e098:	0802c968 	.word	0x0802c968
 800e09c:	0802c3b8 	.word	0x0802c3b8
 800e0a0:	2000009d 	.word	0x2000009d

0800e0a4 <sen5x_statemachine>:

void sen5x_statemachine() {
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800e0aa:	1dfb      	adds	r3, r7, #7
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800e0b0:	4b86      	ldr	r3, [pc, #536]	@ (800e2cc <sen5x_statemachine+0x228>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	0018      	movs	r0, r3
 800e0b6:	f004 fd71 	bl	8012b9c <TimestampIsReached>
 800e0ba:	1e03      	subs	r3, r0, #0
 800e0bc:	d100      	bne.n	800e0c0 <sen5x_statemachine+0x1c>
 800e0be:	e100      	b.n	800e2c2 <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800e0c0:	4b83      	ldr	r3, [pc, #524]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	2b05      	cmp	r3, #5
 800e0c6:	d900      	bls.n	800e0ca <sen5x_statemachine+0x26>
 800e0c8:	e0fb      	b.n	800e2c2 <sen5x_statemachine+0x21e>
 800e0ca:	009a      	lsls	r2, r3, #2
 800e0cc:	4b81      	ldr	r3, [pc, #516]	@ (800e2d4 <sen5x_statemachine+0x230>)
 800e0ce:	18d3      	adds	r3, r2, r3
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800e0d4:	4a80      	ldr	r2, [pc, #512]	@ (800e2d8 <sen5x_statemachine+0x234>)
 800e0d6:	4b81      	ldr	r3, [pc, #516]	@ (800e2dc <sen5x_statemachine+0x238>)
 800e0d8:	0019      	movs	r1, r3
 800e0da:	2001      	movs	r0, #1
 800e0dc:	f004 fdb4 	bl	8012c48 <CreateLine>
      SetPMSensorStatus(false);
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f7fe fa75 	bl	800c5d0 <SetPMSensorStatus>
      DisablePMSensor();
 800e0e6:	f7fe f9f7 	bl	800c4d8 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800e0ea:	f005 faeb 	bl	80136c4 <HAL_GetTick>
 800e0ee:	0003      	movs	r3, r0
 800e0f0:	4a7b      	ldr	r2, [pc, #492]	@ (800e2e0 <sen5x_statemachine+0x23c>)
 800e0f2:	189a      	adds	r2, r3, r2
 800e0f4:	4b75      	ldr	r3, [pc, #468]	@ (800e2cc <sen5x_statemachine+0x228>)
 800e0f6:	601a      	str	r2, [r3, #0]
      break;
 800e0f8:	e0e3      	b.n	800e2c2 <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e0fa:	f005 fae3 	bl	80136c4 <HAL_GetTick>
 800e0fe:	0003      	movs	r3, r0
 800e100:	4a78      	ldr	r2, [pc, #480]	@ (800e2e4 <sen5x_statemachine+0x240>)
 800e102:	189a      	adds	r2, r3, r2
 800e104:	4b71      	ldr	r3, [pc, #452]	@ (800e2cc <sen5x_statemachine+0x228>)
 800e106:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800e108:	f7ff ff8e 	bl	800e028 <set_light_on_state>
      break;
 800e10c:	e0d9      	b.n	800e2c2 <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800e10e:	4b70      	ldr	r3, [pc, #448]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e110:	2202      	movs	r2, #2
 800e112:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800e114:	4b74      	ldr	r3, [pc, #464]	@ (800e2e8 <sen5x_statemachine+0x244>)
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	2b05      	cmp	r3, #5
 800e11a:	d905      	bls.n	800e128 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800e11c:	4b6c      	ldr	r3, [pc, #432]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e11e:	2200      	movs	r2, #0
 800e120:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e122:	f7ff fad9 	bl	800d6d8 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800e126:	e0c9      	b.n	800e2bc <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800e128:	f7ff ff10 	bl	800df4c <sen5x_check_for_errors>
 800e12c:	1e03      	subs	r3, r0, #0
 800e12e:	d01f      	beq.n	800e170 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800e130:	f000 fc68 	bl	800ea04 <sen5x_device_reset>
 800e134:	1e03      	subs	r3, r0, #0
 800e136:	d00f      	beq.n	800e158 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800e138:	4a6c      	ldr	r2, [pc, #432]	@ (800e2ec <sen5x_statemachine+0x248>)
 800e13a:	4b68      	ldr	r3, [pc, #416]	@ (800e2dc <sen5x_statemachine+0x238>)
 800e13c:	0019      	movs	r1, r3
 800e13e:	2001      	movs	r0, #1
 800e140:	f004 fd82 	bl	8012c48 <CreateLine>
            sen5xErrors++;
 800e144:	4b68      	ldr	r3, [pc, #416]	@ (800e2e8 <sen5x_statemachine+0x244>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	3301      	adds	r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	4b66      	ldr	r3, [pc, #408]	@ (800e2e8 <sen5x_statemachine+0x244>)
 800e14e:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800e150:	4b5f      	ldr	r3, [pc, #380]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e152:	2203      	movs	r2, #3
 800e154:	701a      	strb	r2, [r3, #0]
 800e156:	e005      	b.n	800e164 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800e158:	4a65      	ldr	r2, [pc, #404]	@ (800e2f0 <sen5x_statemachine+0x24c>)
 800e15a:	4b66      	ldr	r3, [pc, #408]	@ (800e2f4 <sen5x_statemachine+0x250>)
 800e15c:	0019      	movs	r1, r3
 800e15e:	2002      	movs	r0, #2
 800e160:	f004 fd72 	bl	8012c48 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800e164:	f005 faae 	bl	80136c4 <HAL_GetTick>
 800e168:	0002      	movs	r2, r0
 800e16a:	4b58      	ldr	r3, [pc, #352]	@ (800e2cc <sen5x_statemachine+0x228>)
 800e16c:	601a      	str	r2, [r3, #0]
      break;
 800e16e:	e0a5      	b.n	800e2bc <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800e170:	4b5d      	ldr	r3, [pc, #372]	@ (800e2e8 <sen5x_statemachine+0x244>)
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d100      	bne.n	800e17a <sen5x_statemachine+0xd6>
 800e178:	e0a0      	b.n	800e2bc <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800e17a:	4b5b      	ldr	r3, [pc, #364]	@ (800e2e8 <sen5x_statemachine+0x244>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800e180:	4a5d      	ldr	r2, [pc, #372]	@ (800e2f8 <sen5x_statemachine+0x254>)
 800e182:	4b5e      	ldr	r3, [pc, #376]	@ (800e2fc <sen5x_statemachine+0x258>)
 800e184:	0019      	movs	r1, r3
 800e186:	2003      	movs	r0, #3
 800e188:	f004 fd5e 	bl	8012c48 <CreateLine>
      break;
 800e18c:	e096      	b.n	800e2bc <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800e18e:	1dfb      	adds	r3, r7, #7
 800e190:	0018      	movs	r0, r3
 800e192:	f000 f953 	bl	800e43c <sen5x_read_data_ready>
      if (data_ready) {
 800e196:	1dfb      	adds	r3, r7, #7
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d02c      	beq.n	800e1f8 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800e19e:	f003 fbf7 	bl	8011990 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800e1a2:	4b57      	ldr	r3, [pc, #348]	@ (800e300 <sen5x_statemachine+0x25c>)
 800e1a4:	0018      	movs	r0, r3
 800e1a6:	f7ff fc9d 	bl	800dae4 <sen5x_read_measurement>
 800e1aa:	1e03      	subs	r3, r0, #0
 800e1ac:	d00b      	beq.n	800e1c6 <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800e1ae:	4a55      	ldr	r2, [pc, #340]	@ (800e304 <sen5x_statemachine+0x260>)
 800e1b0:	4b4a      	ldr	r3, [pc, #296]	@ (800e2dc <sen5x_statemachine+0x238>)
 800e1b2:	0019      	movs	r1, r3
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	f004 fd47 	bl	8012c48 <CreateLine>
          sen5xErrors++;
 800e1ba:	4b4b      	ldr	r3, [pc, #300]	@ (800e2e8 <sen5x_statemachine+0x244>)
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	4b49      	ldr	r3, [pc, #292]	@ (800e2e8 <sen5x_statemachine+0x244>)
 800e1c4:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800e1c6:	4b50      	ldr	r3, [pc, #320]	@ (800e308 <sen5x_statemachine+0x264>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	4b4e      	ldr	r3, [pc, #312]	@ (800e308 <sen5x_statemachine+0x264>)
 800e1d0:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800e1d2:	4b4d      	ldr	r3, [pc, #308]	@ (800e308 <sen5x_statemachine+0x264>)
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	2b1f      	cmp	r3, #31
 800e1d8:	d102      	bne.n	800e1e0 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800e1da:	4b4b      	ldr	r3, [pc, #300]	@ (800e308 <sen5x_statemachine+0x264>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800e1e0:	4b49      	ldr	r3, [pc, #292]	@ (800e308 <sen5x_statemachine+0x264>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d901      	bls.n	800e1ec <sen5x_statemachine+0x148>
          sen5xStore();
 800e1e8:	f7ff fdbe 	bl	800dd68 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800e1ec:	4b46      	ldr	r3, [pc, #280]	@ (800e308 <sen5x_statemachine+0x264>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d101      	bne.n	800e1f8 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800e1f4:	f7ff fcd2 	bl	800db9c <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800e1f8:	4b44      	ldr	r3, [pc, #272]	@ (800e30c <sen5x_statemachine+0x268>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d103      	bne.n	800e208 <sen5x_statemachine+0x164>
 800e200:	4b41      	ldr	r3, [pc, #260]	@ (800e308 <sen5x_statemachine+0x264>)
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d95b      	bls.n	800e2c0 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800e208:	4b31      	ldr	r3, [pc, #196]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e20a:	2204      	movs	r2, #4
 800e20c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e20e:	e057      	b.n	800e2c0 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800e210:	f7fb f94c 	bl	80094ac <RTC_GetWeekday>
 800e214:	0003      	movs	r3, r0
 800e216:	2b01      	cmp	r3, #1
 800e218:	d11a      	bne.n	800e250 <sen5x_statemachine+0x1ac>
 800e21a:	4b3d      	ldr	r3, [pc, #244]	@ (800e310 <sen5x_statemachine+0x26c>)
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	2201      	movs	r2, #1
 800e220:	4053      	eors	r3, r2
 800e222:	b2db      	uxtb	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d013      	beq.n	800e250 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800e228:	f000 f9ee 	bl	800e608 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800e22c:	4a39      	ldr	r2, [pc, #228]	@ (800e314 <sen5x_statemachine+0x270>)
 800e22e:	4b31      	ldr	r3, [pc, #196]	@ (800e2f4 <sen5x_statemachine+0x250>)
 800e230:	0019      	movs	r1, r3
 800e232:	2002      	movs	r0, #2
 800e234:	f004 fd08 	bl	8012c48 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800e238:	f005 fa44 	bl	80136c4 <HAL_GetTick>
 800e23c:	0003      	movs	r3, r0
 800e23e:	4a36      	ldr	r2, [pc, #216]	@ (800e318 <sen5x_statemachine+0x274>)
 800e240:	189a      	adds	r2, r3, r2
 800e242:	4b22      	ldr	r3, [pc, #136]	@ (800e2cc <sen5x_statemachine+0x228>)
 800e244:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800e246:	4b32      	ldr	r3, [pc, #200]	@ (800e310 <sen5x_statemachine+0x26c>)
 800e248:	2201      	movs	r2, #1
 800e24a:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800e24c:	f7ff fba4 	bl	800d998 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800e250:	4b1f      	ldr	r3, [pc, #124]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e252:	2205      	movs	r2, #5
 800e254:	701a      	strb	r2, [r3, #0]
      break;
 800e256:	e034      	b.n	800e2c2 <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800e258:	4b2c      	ldr	r3, [pc, #176]	@ (800e30c <sen5x_statemachine+0x268>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2201      	movs	r2, #1
 800e25e:	4053      	eors	r3, r2
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d01c      	beq.n	800e2a0 <sen5x_statemachine+0x1fc>
 800e266:	4b2d      	ldr	r3, [pc, #180]	@ (800e31c <sen5x_statemachine+0x278>)
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	2201      	movs	r2, #1
 800e26c:	4053      	eors	r3, r2
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	d015      	beq.n	800e2a0 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800e274:	f7ff fbdc 	bl	800da30 <sen5x_extinguish_measurement>
 800e278:	1e03      	subs	r3, r0, #0
 800e27a:	d005      	beq.n	800e288 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800e27c:	4a28      	ldr	r2, [pc, #160]	@ (800e320 <sen5x_statemachine+0x27c>)
 800e27e:	4b17      	ldr	r3, [pc, #92]	@ (800e2dc <sen5x_statemachine+0x238>)
 800e280:	0019      	movs	r1, r3
 800e282:	2001      	movs	r0, #1
 800e284:	f004 fce0 	bl	8012c48 <CreateLine>
        }
        sen5xSamples = 0;
 800e288:	4b1f      	ldr	r3, [pc, #124]	@ (800e308 <sen5x_statemachine+0x264>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e28e:	f7ff fa23 	bl	800d6d8 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800e292:	2000      	movs	r0, #0
 800e294:	f7fe f99c 	bl	800c5d0 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800e298:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e29a:	2201      	movs	r2, #1
 800e29c:	701a      	strb	r2, [r3, #0]
 800e29e:	e002      	b.n	800e2a6 <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d0 <sen5x_statemachine+0x22c>)
 800e2a2:	2203      	movs	r2, #3
 800e2a4:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800e2a6:	f003 fb99 	bl	80119dc <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800e2aa:	f005 fa0b 	bl	80136c4 <HAL_GetTick>
 800e2ae:	0003      	movs	r3, r0
 800e2b0:	22fa      	movs	r2, #250	@ 0xfa
 800e2b2:	0092      	lsls	r2, r2, #2
 800e2b4:	189a      	adds	r2, r3, r2
 800e2b6:	4b05      	ldr	r3, [pc, #20]	@ (800e2cc <sen5x_statemachine+0x228>)
 800e2b8:	601a      	str	r2, [r3, #0]
    }
  }
}
 800e2ba:	e002      	b.n	800e2c2 <sen5x_statemachine+0x21e>
      break;
 800e2bc:	46c0      	nop			@ (mov r8, r8)
 800e2be:	e000      	b.n	800e2c2 <sen5x_statemachine+0x21e>
      break;
 800e2c0:	46c0      	nop			@ (mov r8, r8)
}
 800e2c2:	46c0      	nop			@ (mov r8, r8)
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	b002      	add	sp, #8
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	46c0      	nop			@ (mov r8, r8)
 800e2cc:	20000ef4 	.word	0x20000ef4
 800e2d0:	2000009d 	.word	0x2000009d
 800e2d4:	0802d460 	.word	0x0802d460
 800e2d8:	0802c994 	.word	0x0802c994
 800e2dc:	0802c3b8 	.word	0x0802c3b8
 800e2e0:	002fefd8 	.word	0x002fefd8
 800e2e4:	00005910 	.word	0x00005910
 800e2e8:	20000ef1 	.word	0x20000ef1
 800e2ec:	0802c9c4 	.word	0x0802c9c4
 800e2f0:	0802c9dc 	.word	0x0802c9dc
 800e2f4:	0802c34c 	.word	0x0802c34c
 800e2f8:	0802c9f4 	.word	0x0802c9f4
 800e2fc:	0802c38c 	.word	0x0802c38c
 800e300:	20000ef8 	.word	0x20000ef8
 800e304:	0802ca08 	.word	0x0802ca08
 800e308:	20000ef0 	.word	0x20000ef0
 800e30c:	20001e75 	.word	0x20001e75
 800e310:	20000ee4 	.word	0x20000ee4
 800e314:	0802ca38 	.word	0x0802ca38
 800e318:	00002710 	.word	0x00002710
 800e31c:	20001e76 	.word	0x20001e76
 800e320:	0802ca50 	.word	0x0802ca50

0800e324 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800e324:	b590      	push	{r4, r7, lr}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e32a:	1dbb      	adds	r3, r7, #6
 800e32c:	2200      	movs	r2, #0
 800e32e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800e330:	1dbc      	adds	r4, r7, #6
 800e332:	1dbb      	adds	r3, r7, #6
 800e334:	8819      	ldrh	r1, [r3, #0]
 800e336:	003b      	movs	r3, r7
 800e338:	2221      	movs	r2, #33	@ 0x21
 800e33a:	0018      	movs	r0, r3
 800e33c:	f001 fb54 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e340:	0003      	movs	r3, r0
 800e342:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e344:	1d3c      	adds	r4, r7, #4
 800e346:	1dbb      	adds	r3, r7, #6
 800e348:	881a      	ldrh	r2, [r3, #0]
 800e34a:	003b      	movs	r3, r7
 800e34c:	0019      	movs	r1, r3
 800e34e:	2069      	movs	r0, #105	@ 0x69
 800e350:	f001 fbce 	bl	800faf0 <sensirion_i2c_write_data>
 800e354:	0003      	movs	r3, r0
 800e356:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e358:	1d3b      	adds	r3, r7, #4
 800e35a:	2200      	movs	r2, #0
 800e35c:	5e9b      	ldrsh	r3, [r3, r2]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <sen5x_start_measurement+0x46>
        return error;
 800e362:	1d3b      	adds	r3, r7, #4
 800e364:	2200      	movs	r2, #0
 800e366:	5e9b      	ldrsh	r3, [r3, r2]
 800e368:	e004      	b.n	800e374 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e36a:	4b04      	ldr	r3, [pc, #16]	@ (800e37c <sen5x_start_measurement+0x58>)
 800e36c:	0018      	movs	r0, r3
 800e36e:	f7ff fdcd 	bl	800df0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e372:	2300      	movs	r3, #0
}
 800e374:	0018      	movs	r0, r3
 800e376:	46bd      	mov	sp, r7
 800e378:	b003      	add	sp, #12
 800e37a:	bd90      	pop	{r4, r7, pc}
 800e37c:	0000c350 	.word	0x0000c350

0800e380 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800e380:	b590      	push	{r4, r7, lr}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e386:	1dbb      	adds	r3, r7, #6
 800e388:	2200      	movs	r2, #0
 800e38a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800e38c:	1dbc      	adds	r4, r7, #6
 800e38e:	1dbb      	adds	r3, r7, #6
 800e390:	8819      	ldrh	r1, [r3, #0]
 800e392:	003b      	movs	r3, r7
 800e394:	2237      	movs	r2, #55	@ 0x37
 800e396:	0018      	movs	r0, r3
 800e398:	f001 fb26 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e39c:	0003      	movs	r3, r0
 800e39e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e3a0:	1d3c      	adds	r4, r7, #4
 800e3a2:	1dbb      	adds	r3, r7, #6
 800e3a4:	881a      	ldrh	r2, [r3, #0]
 800e3a6:	003b      	movs	r3, r7
 800e3a8:	0019      	movs	r1, r3
 800e3aa:	2069      	movs	r0, #105	@ 0x69
 800e3ac:	f001 fba0 	bl	800faf0 <sensirion_i2c_write_data>
 800e3b0:	0003      	movs	r3, r0
 800e3b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e3b4:	1d3b      	adds	r3, r7, #4
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	5e9b      	ldrsh	r3, [r3, r2]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d003      	beq.n	800e3c6 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800e3be:	1d3b      	adds	r3, r7, #4
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	5e9b      	ldrsh	r3, [r3, r2]
 800e3c4:	e004      	b.n	800e3d0 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e3c6:	4b04      	ldr	r3, [pc, #16]	@ (800e3d8 <sen5x_start_measurement_without_pm+0x58>)
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	f7ff fd9f 	bl	800df0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	0018      	movs	r0, r3
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	b003      	add	sp, #12
 800e3d6:	bd90      	pop	{r4, r7, pc}
 800e3d8:	0000c350 	.word	0x0000c350

0800e3dc <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800e3dc:	b590      	push	{r4, r7, lr}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e3e2:	1dbb      	adds	r3, r7, #6
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800e3e8:	1dbc      	adds	r4, r7, #6
 800e3ea:	2382      	movs	r3, #130	@ 0x82
 800e3ec:	005a      	lsls	r2, r3, #1
 800e3ee:	1dbb      	adds	r3, r7, #6
 800e3f0:	8819      	ldrh	r1, [r3, #0]
 800e3f2:	003b      	movs	r3, r7
 800e3f4:	0018      	movs	r0, r3
 800e3f6:	f001 faf7 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e3fa:	0003      	movs	r3, r0
 800e3fc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e3fe:	1d3c      	adds	r4, r7, #4
 800e400:	1dbb      	adds	r3, r7, #6
 800e402:	881a      	ldrh	r2, [r3, #0]
 800e404:	003b      	movs	r3, r7
 800e406:	0019      	movs	r1, r3
 800e408:	2069      	movs	r0, #105	@ 0x69
 800e40a:	f001 fb71 	bl	800faf0 <sensirion_i2c_write_data>
 800e40e:	0003      	movs	r3, r0
 800e410:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e412:	1d3b      	adds	r3, r7, #4
 800e414:	2200      	movs	r2, #0
 800e416:	5e9b      	ldrsh	r3, [r3, r2]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d003      	beq.n	800e424 <sen5x_stop_measurement+0x48>
        return error;
 800e41c:	1d3b      	adds	r3, r7, #4
 800e41e:	2200      	movs	r2, #0
 800e420:	5e9b      	ldrsh	r3, [r3, r2]
 800e422:	e004      	b.n	800e42e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800e424:	4b04      	ldr	r3, [pc, #16]	@ (800e438 <sen5x_stop_measurement+0x5c>)
 800e426:	0018      	movs	r0, r3
 800e428:	f7ff fd70 	bl	800df0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e42c:	2300      	movs	r3, #0
}
 800e42e:	0018      	movs	r0, r3
 800e430:	46bd      	mov	sp, r7
 800e432:	b003      	add	sp, #12
 800e434:	bd90      	pop	{r4, r7, pc}
 800e436:	46c0      	nop			@ (mov r8, r8)
 800e438:	00030d40 	.word	0x00030d40

0800e43c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800e43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800e444:	250e      	movs	r5, #14
 800e446:	197b      	adds	r3, r7, r5
 800e448:	2200      	movs	r2, #0
 800e44a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800e44c:	197c      	adds	r4, r7, r5
 800e44e:	4a22      	ldr	r2, [pc, #136]	@ (800e4d8 <sen5x_read_data_ready+0x9c>)
 800e450:	197b      	adds	r3, r7, r5
 800e452:	8819      	ldrh	r1, [r3, #0]
 800e454:	2308      	movs	r3, #8
 800e456:	18fb      	adds	r3, r7, r3
 800e458:	0018      	movs	r0, r3
 800e45a:	f001 fac5 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e45e:	0003      	movs	r3, r0
 800e460:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e462:	260c      	movs	r6, #12
 800e464:	19bc      	adds	r4, r7, r6
 800e466:	197b      	adds	r3, r7, r5
 800e468:	881a      	ldrh	r2, [r3, #0]
 800e46a:	2308      	movs	r3, #8
 800e46c:	18fb      	adds	r3, r7, r3
 800e46e:	0019      	movs	r1, r3
 800e470:	2069      	movs	r0, #105	@ 0x69
 800e472:	f001 fb3d 	bl	800faf0 <sensirion_i2c_write_data>
 800e476:	0003      	movs	r3, r0
 800e478:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e47a:	19bb      	adds	r3, r7, r6
 800e47c:	2200      	movs	r2, #0
 800e47e:	5e9b      	ldrsh	r3, [r3, r2]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d003      	beq.n	800e48c <sen5x_read_data_ready+0x50>
        return error;
 800e484:	19bb      	adds	r3, r7, r6
 800e486:	2200      	movs	r2, #0
 800e488:	5e9b      	ldrsh	r3, [r3, r2]
 800e48a:	e020      	b.n	800e4ce <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e48c:	4b13      	ldr	r3, [pc, #76]	@ (800e4dc <sen5x_read_data_ready+0xa0>)
 800e48e:	0018      	movs	r0, r3
 800e490:	f7ff fd3c 	bl	800df0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800e494:	250c      	movs	r5, #12
 800e496:	197c      	adds	r4, r7, r5
 800e498:	2308      	movs	r3, #8
 800e49a:	18fb      	adds	r3, r7, r3
 800e49c:	2202      	movs	r2, #2
 800e49e:	0019      	movs	r1, r3
 800e4a0:	2069      	movs	r0, #105	@ 0x69
 800e4a2:	f001 fb3d 	bl	800fb20 <sensirion_i2c_read_data_inplace>
 800e4a6:	0003      	movs	r3, r0
 800e4a8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e4aa:	197b      	adds	r3, r7, r5
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	5e9b      	ldrsh	r3, [r3, r2]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d003      	beq.n	800e4bc <sen5x_read_data_ready+0x80>
        return error;
 800e4b4:	197b      	adds	r3, r7, r5
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	5e9b      	ldrsh	r3, [r3, r2]
 800e4ba:	e008      	b.n	800e4ce <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800e4bc:	2308      	movs	r3, #8
 800e4be:	18fb      	adds	r3, r7, r3
 800e4c0:	785b      	ldrb	r3, [r3, #1]
 800e4c2:	1e5a      	subs	r2, r3, #1
 800e4c4:	4193      	sbcs	r3, r2
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e4cc:	2300      	movs	r3, #0
}
 800e4ce:	0018      	movs	r0, r3
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	b005      	add	sp, #20
 800e4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4d6:	46c0      	nop			@ (mov r8, r8)
 800e4d8:	00000202 	.word	0x00000202
 800e4dc:	00004e20 	.word	0x00004e20

0800e4e0 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4e2:	b08d      	sub	sp, #52	@ 0x34
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
 800e4ec:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800e4ee:	252e      	movs	r5, #46	@ 0x2e
 800e4f0:	197b      	adds	r3, r7, r5
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800e4f6:	197c      	adds	r4, r7, r5
 800e4f8:	23f1      	movs	r3, #241	@ 0xf1
 800e4fa:	009a      	lsls	r2, r3, #2
 800e4fc:	197b      	adds	r3, r7, r5
 800e4fe:	8819      	ldrh	r1, [r3, #0]
 800e500:	2314      	movs	r3, #20
 800e502:	18fb      	adds	r3, r7, r3
 800e504:	0018      	movs	r0, r3
 800e506:	f001 fa6f 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e50a:	0003      	movs	r3, r0
 800e50c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e50e:	262c      	movs	r6, #44	@ 0x2c
 800e510:	19bc      	adds	r4, r7, r6
 800e512:	197b      	adds	r3, r7, r5
 800e514:	881a      	ldrh	r2, [r3, #0]
 800e516:	2314      	movs	r3, #20
 800e518:	18fb      	adds	r3, r7, r3
 800e51a:	0019      	movs	r1, r3
 800e51c:	2069      	movs	r0, #105	@ 0x69
 800e51e:	f001 fae7 	bl	800faf0 <sensirion_i2c_write_data>
 800e522:	0003      	movs	r3, r0
 800e524:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e526:	19bb      	adds	r3, r7, r6
 800e528:	2200      	movs	r2, #0
 800e52a:	5e9b      	ldrsh	r3, [r3, r2]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d003      	beq.n	800e538 <sen5x_read_measured_values+0x58>
        return error;
 800e530:	19bb      	adds	r3, r7, r6
 800e532:	2200      	movs	r2, #0
 800e534:	5e9b      	ldrsh	r3, [r3, r2]
 800e536:	e060      	b.n	800e5fa <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e538:	4b32      	ldr	r3, [pc, #200]	@ (800e604 <sen5x_read_measured_values+0x124>)
 800e53a:	0018      	movs	r0, r3
 800e53c:	f7ff fce6 	bl	800df0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800e540:	252c      	movs	r5, #44	@ 0x2c
 800e542:	197c      	adds	r4, r7, r5
 800e544:	2314      	movs	r3, #20
 800e546:	18fb      	adds	r3, r7, r3
 800e548:	2210      	movs	r2, #16
 800e54a:	0019      	movs	r1, r3
 800e54c:	2069      	movs	r0, #105	@ 0x69
 800e54e:	f001 fae7 	bl	800fb20 <sensirion_i2c_read_data_inplace>
 800e552:	0003      	movs	r3, r0
 800e554:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e556:	197b      	adds	r3, r7, r5
 800e558:	2200      	movs	r2, #0
 800e55a:	5e9b      	ldrsh	r3, [r3, r2]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d003      	beq.n	800e568 <sen5x_read_measured_values+0x88>
        return error;
 800e560:	197b      	adds	r3, r7, r5
 800e562:	2200      	movs	r2, #0
 800e564:	5e9b      	ldrsh	r3, [r3, r2]
 800e566:	e048      	b.n	800e5fa <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800e568:	2414      	movs	r4, #20
 800e56a:	193b      	adds	r3, r7, r4
 800e56c:	0018      	movs	r0, r3
 800e56e:	f000 fa79 	bl	800ea64 <sensirion_common_bytes_to_uint16_t>
 800e572:	0003      	movs	r3, r0
 800e574:	001a      	movs	r2, r3
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800e57a:	193b      	adds	r3, r7, r4
 800e57c:	3302      	adds	r3, #2
 800e57e:	0018      	movs	r0, r3
 800e580:	f000 fa70 	bl	800ea64 <sensirion_common_bytes_to_uint16_t>
 800e584:	0003      	movs	r3, r0
 800e586:	001a      	movs	r2, r3
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800e58c:	193b      	adds	r3, r7, r4
 800e58e:	3304      	adds	r3, #4
 800e590:	0018      	movs	r0, r3
 800e592:	f000 fa67 	bl	800ea64 <sensirion_common_bytes_to_uint16_t>
 800e596:	0003      	movs	r3, r0
 800e598:	001a      	movs	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800e59e:	193b      	adds	r3, r7, r4
 800e5a0:	3306      	adds	r3, #6
 800e5a2:	0018      	movs	r0, r3
 800e5a4:	f000 fa5e 	bl	800ea64 <sensirion_common_bytes_to_uint16_t>
 800e5a8:	0003      	movs	r3, r0
 800e5aa:	001a      	movs	r2, r3
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800e5b0:	193b      	adds	r3, r7, r4
 800e5b2:	3308      	adds	r3, #8
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f000 fa81 	bl	800eabc <sensirion_common_bytes_to_int16_t>
 800e5ba:	0003      	movs	r3, r0
 800e5bc:	001a      	movs	r2, r3
 800e5be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5c0:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800e5c2:	193b      	adds	r3, r7, r4
 800e5c4:	330a      	adds	r3, #10
 800e5c6:	0018      	movs	r0, r3
 800e5c8:	f000 fa78 	bl	800eabc <sensirion_common_bytes_to_int16_t>
 800e5cc:	0003      	movs	r3, r0
 800e5ce:	001a      	movs	r2, r3
 800e5d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5d2:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800e5d4:	193b      	adds	r3, r7, r4
 800e5d6:	330c      	adds	r3, #12
 800e5d8:	0018      	movs	r0, r3
 800e5da:	f000 fa6f 	bl	800eabc <sensirion_common_bytes_to_int16_t>
 800e5de:	0003      	movs	r3, r0
 800e5e0:	001a      	movs	r2, r3
 800e5e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5e4:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800e5e6:	193b      	adds	r3, r7, r4
 800e5e8:	330e      	adds	r3, #14
 800e5ea:	0018      	movs	r0, r3
 800e5ec:	f000 fa66 	bl	800eabc <sensirion_common_bytes_to_int16_t>
 800e5f0:	0003      	movs	r3, r0
 800e5f2:	001a      	movs	r2, r3
 800e5f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5f6:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	0018      	movs	r0, r3
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	b00d      	add	sp, #52	@ 0x34
 800e600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e602:	46c0      	nop			@ (mov r8, r8)
 800e604:	00004e20 	.word	0x00004e20

0800e608 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800e608:	b590      	push	{r4, r7, lr}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e60e:	1dbb      	adds	r3, r7, #6
 800e610:	2200      	movs	r2, #0
 800e612:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800e614:	1dbc      	adds	r4, r7, #6
 800e616:	4a12      	ldr	r2, [pc, #72]	@ (800e660 <sen5x_start_fan_cleaning+0x58>)
 800e618:	1dbb      	adds	r3, r7, #6
 800e61a:	8819      	ldrh	r1, [r3, #0]
 800e61c:	003b      	movs	r3, r7
 800e61e:	0018      	movs	r0, r3
 800e620:	f001 f9e2 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e624:	0003      	movs	r3, r0
 800e626:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e628:	1d3c      	adds	r4, r7, #4
 800e62a:	1dbb      	adds	r3, r7, #6
 800e62c:	881a      	ldrh	r2, [r3, #0]
 800e62e:	003b      	movs	r3, r7
 800e630:	0019      	movs	r1, r3
 800e632:	2069      	movs	r0, #105	@ 0x69
 800e634:	f001 fa5c 	bl	800faf0 <sensirion_i2c_write_data>
 800e638:	0003      	movs	r3, r0
 800e63a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e63c:	1d3b      	adds	r3, r7, #4
 800e63e:	2200      	movs	r2, #0
 800e640:	5e9b      	ldrsh	r3, [r3, r2]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <sen5x_start_fan_cleaning+0x46>
        return error;
 800e646:	1d3b      	adds	r3, r7, #4
 800e648:	2200      	movs	r2, #0
 800e64a:	5e9b      	ldrsh	r3, [r3, r2]
 800e64c:	e004      	b.n	800e658 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800e64e:	4b05      	ldr	r3, [pc, #20]	@ (800e664 <sen5x_start_fan_cleaning+0x5c>)
 800e650:	0018      	movs	r0, r3
 800e652:	f7ff fc5b 	bl	800df0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e656:	2300      	movs	r3, #0
}
 800e658:	0018      	movs	r0, r3
 800e65a:	46bd      	mov	sp, r7
 800e65c:	b003      	add	sp, #12
 800e65e:	bd90      	pop	{r4, r7, pc}
 800e660:	00005607 	.word	0x00005607
 800e664:	00004e20 	.word	0x00004e20

0800e668 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800e668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e66a:	b087      	sub	sp, #28
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	0004      	movs	r4, r0
 800e670:	0008      	movs	r0, r1
 800e672:	0011      	movs	r1, r2
 800e674:	1dbb      	adds	r3, r7, #6
 800e676:	1c22      	adds	r2, r4, #0
 800e678:	801a      	strh	r2, [r3, #0]
 800e67a:	1d3b      	adds	r3, r7, #4
 800e67c:	1c02      	adds	r2, r0, #0
 800e67e:	801a      	strh	r2, [r3, #0]
 800e680:	1cbb      	adds	r3, r7, #2
 800e682:	1c0a      	adds	r2, r1, #0
 800e684:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800e686:	2516      	movs	r5, #22
 800e688:	197b      	adds	r3, r7, r5
 800e68a:	2200      	movs	r2, #0
 800e68c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800e68e:	197c      	adds	r4, r7, r5
 800e690:	4a25      	ldr	r2, [pc, #148]	@ (800e728 <sen5x_set_temperature_offset_parameters+0xc0>)
 800e692:	197b      	adds	r3, r7, r5
 800e694:	8819      	ldrh	r1, [r3, #0]
 800e696:	2608      	movs	r6, #8
 800e698:	19bb      	adds	r3, r7, r6
 800e69a:	0018      	movs	r0, r3
 800e69c:	f001 f9a4 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e6a0:	0003      	movs	r3, r0
 800e6a2:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800e6a4:	197c      	adds	r4, r7, r5
 800e6a6:	1dbb      	adds	r3, r7, #6
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	5e9a      	ldrsh	r2, [r3, r2]
 800e6ac:	197b      	adds	r3, r7, r5
 800e6ae:	8819      	ldrh	r1, [r3, #0]
 800e6b0:	19bb      	adds	r3, r7, r6
 800e6b2:	0018      	movs	r0, r3
 800e6b4:	f001 fa03 	bl	800fabe <sensirion_i2c_add_int16_t_to_buffer>
 800e6b8:	0003      	movs	r3, r0
 800e6ba:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800e6bc:	197c      	adds	r4, r7, r5
 800e6be:	1d3b      	adds	r3, r7, #4
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	5e9a      	ldrsh	r2, [r3, r2]
 800e6c4:	197b      	adds	r3, r7, r5
 800e6c6:	8819      	ldrh	r1, [r3, #0]
 800e6c8:	19bb      	adds	r3, r7, r6
 800e6ca:	0018      	movs	r0, r3
 800e6cc:	f001 f9f7 	bl	800fabe <sensirion_i2c_add_int16_t_to_buffer>
 800e6d0:	0003      	movs	r3, r0
 800e6d2:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800e6d4:	197c      	adds	r4, r7, r5
 800e6d6:	1cbb      	adds	r3, r7, #2
 800e6d8:	881a      	ldrh	r2, [r3, #0]
 800e6da:	197b      	adds	r3, r7, r5
 800e6dc:	8819      	ldrh	r1, [r3, #0]
 800e6de:	19bb      	adds	r3, r7, r6
 800e6e0:	0018      	movs	r0, r3
 800e6e2:	f001 f9ad 	bl	800fa40 <sensirion_i2c_add_uint16_t_to_buffer>
 800e6e6:	0003      	movs	r3, r0
 800e6e8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e6ea:	2214      	movs	r2, #20
 800e6ec:	18bc      	adds	r4, r7, r2
 800e6ee:	197b      	adds	r3, r7, r5
 800e6f0:	881a      	ldrh	r2, [r3, #0]
 800e6f2:	19bb      	adds	r3, r7, r6
 800e6f4:	0019      	movs	r1, r3
 800e6f6:	2069      	movs	r0, #105	@ 0x69
 800e6f8:	f001 f9fa 	bl	800faf0 <sensirion_i2c_write_data>
 800e6fc:	0003      	movs	r3, r0
 800e6fe:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e700:	2214      	movs	r2, #20
 800e702:	18bb      	adds	r3, r7, r2
 800e704:	2100      	movs	r1, #0
 800e706:	5e5b      	ldrsh	r3, [r3, r1]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d003      	beq.n	800e714 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800e70c:	18bb      	adds	r3, r7, r2
 800e70e:	2200      	movs	r2, #0
 800e710:	5e9b      	ldrsh	r3, [r3, r2]
 800e712:	e004      	b.n	800e71e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800e714:	4b05      	ldr	r3, [pc, #20]	@ (800e72c <sen5x_set_temperature_offset_parameters+0xc4>)
 800e716:	0018      	movs	r0, r3
 800e718:	f7ff fbf8 	bl	800df0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	0018      	movs	r0, r3
 800e720:	46bd      	mov	sp, r7
 800e722:	b007      	add	sp, #28
 800e724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e726:	46c0      	nop			@ (mov r8, r8)
 800e728:	000060b2 	.word	0x000060b2
 800e72c:	00004e20 	.word	0x00004e20

0800e730 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800e730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e732:	b091      	sub	sp, #68	@ 0x44
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	000a      	movs	r2, r1
 800e73a:	1cfb      	adds	r3, r7, #3
 800e73c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800e73e:	253e      	movs	r5, #62	@ 0x3e
 800e740:	197b      	adds	r3, r7, r5
 800e742:	2200      	movs	r2, #0
 800e744:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800e746:	197c      	adds	r4, r7, r5
 800e748:	4a22      	ldr	r2, [pc, #136]	@ (800e7d4 <sen5x_get_product_name+0xa4>)
 800e74a:	197b      	adds	r3, r7, r5
 800e74c:	8819      	ldrh	r1, [r3, #0]
 800e74e:	230c      	movs	r3, #12
 800e750:	18fb      	adds	r3, r7, r3
 800e752:	0018      	movs	r0, r3
 800e754:	f001 f948 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e758:	0003      	movs	r3, r0
 800e75a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e75c:	263c      	movs	r6, #60	@ 0x3c
 800e75e:	19bc      	adds	r4, r7, r6
 800e760:	197b      	adds	r3, r7, r5
 800e762:	881a      	ldrh	r2, [r3, #0]
 800e764:	230c      	movs	r3, #12
 800e766:	18fb      	adds	r3, r7, r3
 800e768:	0019      	movs	r1, r3
 800e76a:	2069      	movs	r0, #105	@ 0x69
 800e76c:	f001 f9c0 	bl	800faf0 <sensirion_i2c_write_data>
 800e770:	0003      	movs	r3, r0
 800e772:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e774:	19bb      	adds	r3, r7, r6
 800e776:	2200      	movs	r2, #0
 800e778:	5e9b      	ldrsh	r3, [r3, r2]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <sen5x_get_product_name+0x56>
        return error;
 800e77e:	19bb      	adds	r3, r7, r6
 800e780:	2200      	movs	r2, #0
 800e782:	5e9b      	ldrsh	r3, [r3, r2]
 800e784:	e021      	b.n	800e7ca <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800e786:	4b14      	ldr	r3, [pc, #80]	@ (800e7d8 <sen5x_get_product_name+0xa8>)
 800e788:	0018      	movs	r0, r3
 800e78a:	f7ff fbbf 	bl	800df0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800e78e:	253c      	movs	r5, #60	@ 0x3c
 800e790:	197c      	adds	r4, r7, r5
 800e792:	230c      	movs	r3, #12
 800e794:	18fb      	adds	r3, r7, r3
 800e796:	2220      	movs	r2, #32
 800e798:	0019      	movs	r1, r3
 800e79a:	2069      	movs	r0, #105	@ 0x69
 800e79c:	f001 f9c0 	bl	800fb20 <sensirion_i2c_read_data_inplace>
 800e7a0:	0003      	movs	r3, r0
 800e7a2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e7a4:	197b      	adds	r3, r7, r5
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	5e9b      	ldrsh	r3, [r3, r2]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d003      	beq.n	800e7b6 <sen5x_get_product_name+0x86>
        return error;
 800e7ae:	197b      	adds	r3, r7, r5
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	5e9b      	ldrsh	r3, [r3, r2]
 800e7b4:	e009      	b.n	800e7ca <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800e7b6:	1cfb      	adds	r3, r7, #3
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	6879      	ldr	r1, [r7, #4]
 800e7be:	230c      	movs	r3, #12
 800e7c0:	18fb      	adds	r3, r7, r3
 800e7c2:	0018      	movs	r0, r3
 800e7c4:	f000 f988 	bl	800ead8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	0018      	movs	r0, r3
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	b011      	add	sp, #68	@ 0x44
 800e7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d2:	46c0      	nop			@ (mov r8, r8)
 800e7d4:	0000d014 	.word	0x0000d014
 800e7d8:	0000c350 	.word	0x0000c350

0800e7dc <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800e7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7de:	b091      	sub	sp, #68	@ 0x44
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	000a      	movs	r2, r1
 800e7e6:	1cfb      	adds	r3, r7, #3
 800e7e8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800e7ea:	253e      	movs	r5, #62	@ 0x3e
 800e7ec:	197b      	adds	r3, r7, r5
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800e7f2:	197c      	adds	r4, r7, r5
 800e7f4:	4a22      	ldr	r2, [pc, #136]	@ (800e880 <sen5x_get_serial_number+0xa4>)
 800e7f6:	197b      	adds	r3, r7, r5
 800e7f8:	8819      	ldrh	r1, [r3, #0]
 800e7fa:	230c      	movs	r3, #12
 800e7fc:	18fb      	adds	r3, r7, r3
 800e7fe:	0018      	movs	r0, r3
 800e800:	f001 f8f2 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e804:	0003      	movs	r3, r0
 800e806:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e808:	263c      	movs	r6, #60	@ 0x3c
 800e80a:	19bc      	adds	r4, r7, r6
 800e80c:	197b      	adds	r3, r7, r5
 800e80e:	881a      	ldrh	r2, [r3, #0]
 800e810:	230c      	movs	r3, #12
 800e812:	18fb      	adds	r3, r7, r3
 800e814:	0019      	movs	r1, r3
 800e816:	2069      	movs	r0, #105	@ 0x69
 800e818:	f001 f96a 	bl	800faf0 <sensirion_i2c_write_data>
 800e81c:	0003      	movs	r3, r0
 800e81e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e820:	19bb      	adds	r3, r7, r6
 800e822:	2200      	movs	r2, #0
 800e824:	5e9b      	ldrsh	r3, [r3, r2]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d003      	beq.n	800e832 <sen5x_get_serial_number+0x56>
        return error;
 800e82a:	19bb      	adds	r3, r7, r6
 800e82c:	2200      	movs	r2, #0
 800e82e:	5e9b      	ldrsh	r3, [r3, r2]
 800e830:	e021      	b.n	800e876 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800e832:	4b14      	ldr	r3, [pc, #80]	@ (800e884 <sen5x_get_serial_number+0xa8>)
 800e834:	0018      	movs	r0, r3
 800e836:	f7ff fb69 	bl	800df0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800e83a:	253c      	movs	r5, #60	@ 0x3c
 800e83c:	197c      	adds	r4, r7, r5
 800e83e:	230c      	movs	r3, #12
 800e840:	18fb      	adds	r3, r7, r3
 800e842:	2220      	movs	r2, #32
 800e844:	0019      	movs	r1, r3
 800e846:	2069      	movs	r0, #105	@ 0x69
 800e848:	f001 f96a 	bl	800fb20 <sensirion_i2c_read_data_inplace>
 800e84c:	0003      	movs	r3, r0
 800e84e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e850:	197b      	adds	r3, r7, r5
 800e852:	2200      	movs	r2, #0
 800e854:	5e9b      	ldrsh	r3, [r3, r2]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d003      	beq.n	800e862 <sen5x_get_serial_number+0x86>
        return error;
 800e85a:	197b      	adds	r3, r7, r5
 800e85c:	2200      	movs	r2, #0
 800e85e:	5e9b      	ldrsh	r3, [r3, r2]
 800e860:	e009      	b.n	800e876 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800e862:	1cfb      	adds	r3, r7, #3
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	b29a      	uxth	r2, r3
 800e868:	6879      	ldr	r1, [r7, #4]
 800e86a:	230c      	movs	r3, #12
 800e86c:	18fb      	adds	r3, r7, r3
 800e86e:	0018      	movs	r0, r3
 800e870:	f000 f932 	bl	800ead8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800e874:	2300      	movs	r3, #0
}
 800e876:	0018      	movs	r0, r3
 800e878:	46bd      	mov	sp, r7
 800e87a:	b011      	add	sp, #68	@ 0x44
 800e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e87e:	46c0      	nop			@ (mov r8, r8)
 800e880:	0000d033 	.word	0x0000d033
 800e884:	0000c350 	.word	0x0000c350

0800e888 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800e888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e88a:	b089      	sub	sp, #36	@ 0x24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800e896:	251e      	movs	r5, #30
 800e898:	197b      	adds	r3, r7, r5
 800e89a:	2200      	movs	r2, #0
 800e89c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800e89e:	197c      	adds	r4, r7, r5
 800e8a0:	23d1      	movs	r3, #209	@ 0xd1
 800e8a2:	021a      	lsls	r2, r3, #8
 800e8a4:	197b      	adds	r3, r7, r5
 800e8a6:	8819      	ldrh	r1, [r3, #0]
 800e8a8:	2310      	movs	r3, #16
 800e8aa:	18fb      	adds	r3, r7, r3
 800e8ac:	0018      	movs	r0, r3
 800e8ae:	f001 f89b 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e8b2:	0003      	movs	r3, r0
 800e8b4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e8b6:	261c      	movs	r6, #28
 800e8b8:	19bc      	adds	r4, r7, r6
 800e8ba:	197b      	adds	r3, r7, r5
 800e8bc:	881a      	ldrh	r2, [r3, #0]
 800e8be:	2310      	movs	r3, #16
 800e8c0:	18fb      	adds	r3, r7, r3
 800e8c2:	0019      	movs	r1, r3
 800e8c4:	2069      	movs	r0, #105	@ 0x69
 800e8c6:	f001 f913 	bl	800faf0 <sensirion_i2c_write_data>
 800e8ca:	0003      	movs	r3, r0
 800e8cc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e8ce:	19bb      	adds	r3, r7, r6
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	5e9b      	ldrsh	r3, [r3, r2]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <sen5x_get_version+0x58>
        return error;
 800e8d8:	19bb      	adds	r3, r7, r6
 800e8da:	2200      	movs	r2, #0
 800e8dc:	5e9b      	ldrsh	r3, [r3, r2]
 800e8de:	e038      	b.n	800e952 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e8e0:	4b1e      	ldr	r3, [pc, #120]	@ (800e95c <sen5x_get_version+0xd4>)
 800e8e2:	0018      	movs	r0, r3
 800e8e4:	f7ff fb12 	bl	800df0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800e8e8:	251c      	movs	r5, #28
 800e8ea:	197c      	adds	r4, r7, r5
 800e8ec:	2310      	movs	r3, #16
 800e8ee:	18fb      	adds	r3, r7, r3
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	0019      	movs	r1, r3
 800e8f4:	2069      	movs	r0, #105	@ 0x69
 800e8f6:	f001 f913 	bl	800fb20 <sensirion_i2c_read_data_inplace>
 800e8fa:	0003      	movs	r3, r0
 800e8fc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e8fe:	197b      	adds	r3, r7, r5
 800e900:	2200      	movs	r2, #0
 800e902:	5e9b      	ldrsh	r3, [r3, r2]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d003      	beq.n	800e910 <sen5x_get_version+0x88>
        return error;
 800e908:	197b      	adds	r3, r7, r5
 800e90a:	2200      	movs	r2, #0
 800e90c:	5e9b      	ldrsh	r3, [r3, r2]
 800e90e:	e020      	b.n	800e952 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800e910:	2110      	movs	r1, #16
 800e912:	187b      	adds	r3, r7, r1
 800e914:	781a      	ldrb	r2, [r3, #0]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800e91a:	187b      	adds	r3, r7, r1
 800e91c:	785a      	ldrb	r2, [r3, #1]
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800e922:	187b      	adds	r3, r7, r1
 800e924:	789b      	ldrb	r3, [r3, #2]
 800e926:	1e5a      	subs	r2, r3, #1
 800e928:	4193      	sbcs	r3, r2
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800e930:	187b      	adds	r3, r7, r1
 800e932:	78da      	ldrb	r2, [r3, #3]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800e938:	187b      	adds	r3, r7, r1
 800e93a:	791a      	ldrb	r2, [r3, #4]
 800e93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e93e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800e940:	187b      	adds	r3, r7, r1
 800e942:	795a      	ldrb	r2, [r3, #5]
 800e944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e946:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800e948:	187b      	adds	r3, r7, r1
 800e94a:	799a      	ldrb	r2, [r3, #6]
 800e94c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e94e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e950:	2300      	movs	r3, #0
}
 800e952:	0018      	movs	r0, r3
 800e954:	46bd      	mov	sp, r7
 800e956:	b009      	add	sp, #36	@ 0x24
 800e958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e95a:	46c0      	nop			@ (mov r8, r8)
 800e95c:	00004e20 	.word	0x00004e20

0800e960 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800e960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e962:	b087      	sub	sp, #28
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800e968:	2516      	movs	r5, #22
 800e96a:	197b      	adds	r3, r7, r5
 800e96c:	2200      	movs	r2, #0
 800e96e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800e970:	197c      	adds	r4, r7, r5
 800e972:	4a22      	ldr	r2, [pc, #136]	@ (800e9fc <sen5x_read_device_status+0x9c>)
 800e974:	197b      	adds	r3, r7, r5
 800e976:	8819      	ldrh	r1, [r3, #0]
 800e978:	230c      	movs	r3, #12
 800e97a:	18fb      	adds	r3, r7, r3
 800e97c:	0018      	movs	r0, r3
 800e97e:	f001 f833 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800e982:	0003      	movs	r3, r0
 800e984:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e986:	2614      	movs	r6, #20
 800e988:	19bc      	adds	r4, r7, r6
 800e98a:	197b      	adds	r3, r7, r5
 800e98c:	881a      	ldrh	r2, [r3, #0]
 800e98e:	230c      	movs	r3, #12
 800e990:	18fb      	adds	r3, r7, r3
 800e992:	0019      	movs	r1, r3
 800e994:	2069      	movs	r0, #105	@ 0x69
 800e996:	f001 f8ab 	bl	800faf0 <sensirion_i2c_write_data>
 800e99a:	0003      	movs	r3, r0
 800e99c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e99e:	19bb      	adds	r3, r7, r6
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	5e9b      	ldrsh	r3, [r3, r2]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d003      	beq.n	800e9b0 <sen5x_read_device_status+0x50>
        return error;
 800e9a8:	19bb      	adds	r3, r7, r6
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	5e9b      	ldrsh	r3, [r3, r2]
 800e9ae:	e020      	b.n	800e9f2 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e9b0:	4b13      	ldr	r3, [pc, #76]	@ (800ea00 <sen5x_read_device_status+0xa0>)
 800e9b2:	0018      	movs	r0, r3
 800e9b4:	f7ff faaa 	bl	800df0c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800e9b8:	2514      	movs	r5, #20
 800e9ba:	197c      	adds	r4, r7, r5
 800e9bc:	230c      	movs	r3, #12
 800e9be:	18fb      	adds	r3, r7, r3
 800e9c0:	2204      	movs	r2, #4
 800e9c2:	0019      	movs	r1, r3
 800e9c4:	2069      	movs	r0, #105	@ 0x69
 800e9c6:	f001 f8ab 	bl	800fb20 <sensirion_i2c_read_data_inplace>
 800e9ca:	0003      	movs	r3, r0
 800e9cc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e9ce:	197b      	adds	r3, r7, r5
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	5e9b      	ldrsh	r3, [r3, r2]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d003      	beq.n	800e9e0 <sen5x_read_device_status+0x80>
        return error;
 800e9d8:	197b      	adds	r3, r7, r5
 800e9da:	2200      	movs	r2, #0
 800e9dc:	5e9b      	ldrsh	r3, [r3, r2]
 800e9de:	e008      	b.n	800e9f2 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800e9e0:	230c      	movs	r3, #12
 800e9e2:	18fb      	adds	r3, r7, r3
 800e9e4:	0018      	movs	r0, r3
 800e9e6:	f000 f850 	bl	800ea8a <sensirion_common_bytes_to_uint32_t>
 800e9ea:	0002      	movs	r2, r0
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	b007      	add	sp, #28
 800e9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9fa:	46c0      	nop			@ (mov r8, r8)
 800e9fc:	0000d206 	.word	0x0000d206
 800ea00:	00004e20 	.word	0x00004e20

0800ea04 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800ea04:	b590      	push	{r4, r7, lr}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ea0a:	1dbb      	adds	r3, r7, #6
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800ea10:	1dbc      	adds	r4, r7, #6
 800ea12:	4a12      	ldr	r2, [pc, #72]	@ (800ea5c <sen5x_device_reset+0x58>)
 800ea14:	1dbb      	adds	r3, r7, #6
 800ea16:	8819      	ldrh	r1, [r3, #0]
 800ea18:	003b      	movs	r3, r7
 800ea1a:	0018      	movs	r0, r3
 800ea1c:	f000 ffe4 	bl	800f9e8 <sensirion_i2c_add_command_to_buffer>
 800ea20:	0003      	movs	r3, r0
 800ea22:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ea24:	1d3c      	adds	r4, r7, #4
 800ea26:	1dbb      	adds	r3, r7, #6
 800ea28:	881a      	ldrh	r2, [r3, #0]
 800ea2a:	003b      	movs	r3, r7
 800ea2c:	0019      	movs	r1, r3
 800ea2e:	2069      	movs	r0, #105	@ 0x69
 800ea30:	f001 f85e 	bl	800faf0 <sensirion_i2c_write_data>
 800ea34:	0003      	movs	r3, r0
 800ea36:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea38:	1d3b      	adds	r3, r7, #4
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	5e9b      	ldrsh	r3, [r3, r2]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d003      	beq.n	800ea4a <sen5x_device_reset+0x46>
        return error;
 800ea42:	1d3b      	adds	r3, r7, #4
 800ea44:	2200      	movs	r2, #0
 800ea46:	5e9b      	ldrsh	r3, [r3, r2]
 800ea48:	e004      	b.n	800ea54 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800ea4a:	4b05      	ldr	r3, [pc, #20]	@ (800ea60 <sen5x_device_reset+0x5c>)
 800ea4c:	0018      	movs	r0, r3
 800ea4e:	f7ff fa5d 	bl	800df0c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	0018      	movs	r0, r3
 800ea56:	46bd      	mov	sp, r7
 800ea58:	b003      	add	sp, #12
 800ea5a:	bd90      	pop	{r4, r7, pc}
 800ea5c:	0000d304 	.word	0x0000d304
 800ea60:	00030d40 	.word	0x00030d40

0800ea64 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	021b      	lsls	r3, r3, #8
 800ea72:	b21a      	sxth	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	3301      	adds	r3, #1
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	b21b      	sxth	r3, r3
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	b21b      	sxth	r3, r3
 800ea80:	b29b      	uxth	r3, r3
}
 800ea82:	0018      	movs	r0, r3
 800ea84:	46bd      	mov	sp, r7
 800ea86:	b002      	add	sp, #8
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	061a      	lsls	r2, r3, #24
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	041b      	lsls	r3, r3, #16
 800eaa0:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	3302      	adds	r3, #2
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800eaaa:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	3203      	adds	r2, #3
 800eab0:	7812      	ldrb	r2, [r2, #0]
 800eab2:	4313      	orrs	r3, r2
}
 800eab4:	0018      	movs	r0, r3
 800eab6:	46bd      	mov	sp, r7
 800eab8:	b002      	add	sp, #8
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	0018      	movs	r0, r3
 800eac8:	f7ff ffcc 	bl	800ea64 <sensirion_common_bytes_to_uint16_t>
 800eacc:	0003      	movs	r3, r0
 800eace:	b21b      	sxth	r3, r3
}
 800ead0:	0018      	movs	r0, r3
 800ead2:	46bd      	mov	sp, r7
 800ead4:	b002      	add	sp, #8
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	1dbb      	adds	r3, r7, #6
 800eae4:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800eae6:	2316      	movs	r3, #22
 800eae8:	18fb      	adds	r3, r7, r3
 800eaea:	2200      	movs	r2, #0
 800eaec:	801a      	strh	r2, [r3, #0]
 800eaee:	e00f      	b.n	800eb10 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800eaf0:	2016      	movs	r0, #22
 800eaf2:	183b      	adds	r3, r7, r0
 800eaf4:	881b      	ldrh	r3, [r3, #0]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	18d2      	adds	r2, r2, r3
 800eafa:	183b      	adds	r3, r7, r0
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	68b9      	ldr	r1, [r7, #8]
 800eb00:	18cb      	adds	r3, r1, r3
 800eb02:	7812      	ldrb	r2, [r2, #0]
 800eb04:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800eb06:	183b      	adds	r3, r7, r0
 800eb08:	881a      	ldrh	r2, [r3, #0]
 800eb0a:	183b      	adds	r3, r7, r0
 800eb0c:	3201      	adds	r2, #1
 800eb0e:	801a      	strh	r2, [r3, #0]
 800eb10:	2316      	movs	r3, #22
 800eb12:	18fa      	adds	r2, r7, r3
 800eb14:	1dbb      	adds	r3, r7, #6
 800eb16:	8812      	ldrh	r2, [r2, #0]
 800eb18:	881b      	ldrh	r3, [r3, #0]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d3e8      	bcc.n	800eaf0 <sensirion_common_copy_bytes+0x18>
    }
}
 800eb1e:	46c0      	nop			@ (mov r8, r8)
 800eb20:	46c0      	nop			@ (mov r8, r8)
 800eb22:	46bd      	mov	sp, r7
 800eb24:	b006      	add	sp, #24
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	68ba      	ldr	r2, [r7, #8]
 800eb38:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d113      	bne.n	800eb6e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	22fe      	movs	r2, #254	@ 0xfe
 800eb4a:	0592      	lsls	r2, r2, #22
 800eb4c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	4a1a      	ldr	r2, [pc, #104]	@ (800ebbc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800eb52:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	4a1a      	ldr	r2, [pc, #104]	@ (800ebc0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800eb58:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	4a19      	ldr	r2, [pc, #100]	@ (800ebc4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800eb5e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	4a19      	ldr	r2, [pc, #100]	@ (800ebc8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800eb64:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4a18      	ldr	r2, [pc, #96]	@ (800ebcc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800eb6a:	61da      	str	r2, [r3, #28]
 800eb6c:	e011      	b.n	800eb92 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	4a17      	ldr	r2, [pc, #92]	@ (800ebd0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800eb72:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4a17      	ldr	r2, [pc, #92]	@ (800ebd4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800eb78:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	4a16      	ldr	r2, [pc, #88]	@ (800ebd8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800eb7e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	4a16      	ldr	r2, [pc, #88]	@ (800ebdc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800eb84:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	4a15      	ldr	r2, [pc, #84]	@ (800ebe0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800eb8a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	4a15      	ldr	r2, [pc, #84]	@ (800ebe4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800eb90:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	4a14      	ldr	r2, [pc, #80]	@ (800ebe8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800eb96:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	4a14      	ldr	r2, [pc, #80]	@ (800ebec <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800eb9c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	4a12      	ldr	r2, [pc, #72]	@ (800ebec <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800eba2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	4a12      	ldr	r2, [pc, #72]	@ (800ebf0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800eba8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	0018      	movs	r0, r3
 800ebae:	f000 f831 	bl	800ec14 <GasIndexAlgorithm_reset>
}
 800ebb2:	46c0      	nop			@ (mov r8, r8)
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	b004      	add	sp, #16
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	46c0      	nop			@ (mov r8, r8)
 800ebbc:	00002710 	.word	0x00002710
 800ebc0:	44340000 	.word	0x44340000
 800ebc4:	46859800 	.word	0x46859800
 800ebc8:	46a05000 	.word	0x46a05000
 800ebcc:	41f00000 	.word	0x41f00000
 800ebd0:	42c80000 	.word	0x42c80000
 800ebd4:	00004e20 	.word	0x00004e20
 800ebd8:	43340000 	.word	0x43340000
 800ebdc:	4528c000 	.word	0x4528c000
 800ebe0:	45a32000 	.word	0x45a32000
 800ebe4:	43aa0000 	.word	0x43aa0000
 800ebe8:	43660000 	.word	0x43660000
 800ebec:	41400000 	.word	0x41400000
 800ebf0:	42480000 	.word	0x42480000

0800ebf4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800ebfe:	22fe      	movs	r2, #254	@ 0xfe
 800ec00:	0592      	lsls	r2, r2, #22
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	0018      	movs	r0, r3
 800ec08:	f7ff ff8e 	bl	800eb28 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800ec0c:	46c0      	nop			@ (mov r8, r8)
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	b002      	add	sp, #8
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	0018      	movs	r0, r3
 800ec32:	f000 f805 	bl	800ec40 <GasIndexAlgorithm__init_instances>
}
 800ec36:	46c0      	nop			@ (mov r8, r8)
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	b002      	add	sp, #8
 800ec3c:	bd80      	pop	{r7, pc}
	...

0800ec40 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800ec40:	b590      	push	{r4, r7, lr}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	0018      	movs	r0, r3
 800ec4c:	f000 f8e8 	bl	800ee20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	0018      	movs	r0, r3
 800ec54:	f000 f9a6 	bl	800efa4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ec58:	1c04      	adds	r4, r0, #0
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	0018      	movs	r0, r3
 800ec5e:	f000 f9ab 	bl	800efb8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ec62:	1c02      	adds	r2, r0, #0
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	1c21      	adds	r1, r4, #0
 800ec68:	0018      	movs	r0, r3
 800ec6a:	f000 fc3b 	bl	800f4e4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d107      	bne.n	800ec86 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800ec76:	23fe      	movs	r3, #254	@ 0xfe
 800ec78:	059b      	lsls	r3, r3, #22
 800ec7a:	4a0a      	ldr	r2, [pc, #40]	@ (800eca4 <GasIndexAlgorithm__init_instances+0x64>)
 800ec7c:	490a      	ldr	r1, [pc, #40]	@ (800eca8 <GasIndexAlgorithm__init_instances+0x68>)
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 fc86 	bl	800f590 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800ec84:	e005      	b.n	800ec92 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800ec86:	4b09      	ldr	r3, [pc, #36]	@ (800ecac <GasIndexAlgorithm__init_instances+0x6c>)
 800ec88:	4a09      	ldr	r2, [pc, #36]	@ (800ecb0 <GasIndexAlgorithm__init_instances+0x70>)
 800ec8a:	490a      	ldr	r1, [pc, #40]	@ (800ecb4 <GasIndexAlgorithm__init_instances+0x74>)
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fc7f 	bl	800f590 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	0018      	movs	r0, r3
 800ec96:	f000 fd35 	bl	800f704 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800ec9a:	46c0      	nop			@ (mov r8, r8)
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	b003      	add	sp, #12
 800eca0:	bd90      	pop	{r4, r7, pc}
 800eca2:	46c0      	nop			@ (mov r8, r8)
 800eca4:	bc257a78 	.word	0xbc257a78
 800eca8:	44198000 	.word	0x44198000
 800ecac:	42c80000 	.word	0x42c80000
 800ecb0:	bbd4fdf4 	.word	0xbbd4fdf4
 800ecb4:	43550000 	.word	0x43550000

0800ecb8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800ecb8:	b590      	push	{r4, r7, lr}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecc8:	4952      	ldr	r1, [pc, #328]	@ (800ee14 <GasIndexAlgorithm_process+0x15c>)
 800ecca:	1c18      	adds	r0, r3, #0
 800eccc:	f7f1 fc3a 	bl	8000544 <__aeabi_fcmple>
 800ecd0:	1e03      	subs	r3, r0, #0
 800ecd2:	d00c      	beq.n	800ecee <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	1c19      	adds	r1, r3, #0
 800ecde:	1c10      	adds	r0, r2, #0
 800ece0:	f7f1 fdee 	bl	80008c0 <__aeabi_fadd>
 800ece4:	1c03      	adds	r3, r0, #0
 800ece6:	1c1a      	adds	r2, r3, #0
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	631a      	str	r2, [r3, #48]	@ 0x30
 800ecec:	e080      	b.n	800edf0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	dd25      	ble.n	800ed40 <GasIndexAlgorithm_process+0x88>
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	4a48      	ldr	r2, [pc, #288]	@ (800ee18 <GasIndexAlgorithm_process+0x160>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	dc21      	bgt.n	800ed40 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	68ba      	ldr	r2, [r7, #8]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	dc04      	bgt.n	800ed10 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	60bb      	str	r3, [r7, #8]
 800ed0e:	e00d      	b.n	800ed2c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	68db      	ldr	r3, [r3, #12]
 800ed14:	4a41      	ldr	r2, [pc, #260]	@ (800ee1c <GasIndexAlgorithm_process+0x164>)
 800ed16:	4694      	mov	ip, r2
 800ed18:	4463      	add	r3, ip
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	dd05      	ble.n	800ed2c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	4a3d      	ldr	r2, [pc, #244]	@ (800ee1c <GasIndexAlgorithm_process+0x164>)
 800ed26:	4694      	mov	ip, r2
 800ed28:	4463      	add	r3, ip
 800ed2a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	68ba      	ldr	r2, [r7, #8]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	0018      	movs	r0, r3
 800ed36:	f7f2 fc4b 	bl	80015d0 <__aeabi_i2f>
 800ed3a:	1c02      	adds	r2, r0, #0
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d005      	beq.n	800ed54 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	0018      	movs	r0, r3
 800ed4c:	f000 f945 	bl	800efda <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800ed50:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800ed52:	d014      	beq.n	800ed7e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	1c11      	adds	r1, r2, #0
 800ed5c:	0018      	movs	r0, r3
 800ed5e:	f000 fbd1 	bl	800f504 <GasIndexAlgorithm__mox_model__process>
 800ed62:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	1c11      	adds	r1, r2, #0
 800ed70:	0018      	movs	r0, r3
 800ed72:	f000 fc25 	bl	800f5c0 <GasIndexAlgorithm__sigmoid_scaled__process>
 800ed76:	1c02      	adds	r2, r0, #0
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	639a      	str	r2, [r3, #56]	@ 0x38
 800ed7c:	e003      	b.n	800ed86 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	689a      	ldr	r2, [r3, #8]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	1c11      	adds	r1, r2, #0
 800ed8e:	0018      	movs	r0, r3
 800ed90:	f000 fcec 	bl	800f76c <GasIndexAlgorithm__adaptive_lowpass__process>
 800ed94:	1c02      	adds	r2, r0, #0
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed9e:	21fc      	movs	r1, #252	@ 0xfc
 800eda0:	0589      	lsls	r1, r1, #22
 800eda2:	1c18      	adds	r0, r3, #0
 800eda4:	f7f1 fbc4 	bl	8000530 <__aeabi_fcmplt>
 800eda8:	1e03      	subs	r3, r0, #0
 800edaa:	d003      	beq.n	800edb4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	22fc      	movs	r2, #252	@ 0xfc
 800edb0:	0592      	lsls	r2, r2, #22
 800edb2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edb8:	2100      	movs	r1, #0
 800edba:	1c18      	adds	r0, r3, #0
 800edbc:	f7f1 fbcc 	bl	8000558 <__aeabi_fcmpgt>
 800edc0:	1e03      	subs	r3, r0, #0
 800edc2:	d015      	beq.n	800edf0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	1c11      	adds	r1, r2, #0
 800edcc:	0018      	movs	r0, r3
 800edce:	f000 fa4f 	bl	800f270 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	0018      	movs	r0, r3
 800edd6:	f000 f8e5 	bl	800efa4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800edda:	1c04      	adds	r4, r0, #0
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	0018      	movs	r0, r3
 800ede0:	f000 f8ea 	bl	800efb8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ede4:	1c02      	adds	r2, r0, #0
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	1c21      	adds	r1, r4, #0
 800edea:	0018      	movs	r0, r3
 800edec:	f000 fb7a 	bl	800f4e4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edf4:	21fc      	movs	r1, #252	@ 0xfc
 800edf6:	0589      	lsls	r1, r1, #22
 800edf8:	1c18      	adds	r0, r3, #0
 800edfa:	f7f1 fd61 	bl	80008c0 <__aeabi_fadd>
 800edfe:	1c03      	adds	r3, r0, #0
 800ee00:	1c18      	adds	r0, r3, #0
 800ee02:	f7f2 fbc5 	bl	8001590 <__aeabi_f2iz>
 800ee06:	0002      	movs	r2, r0
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	601a      	str	r2, [r3, #0]
    return;
 800ee0c:	46c0      	nop			@ (mov r8, r8)
}
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	b005      	add	sp, #20
 800ee12:	bd90      	pop	{r4, r7, pc}
 800ee14:	42340000 	.word	0x42340000
 800ee18:	0000fde7 	.word	0x0000fde7
 800ee1c:	00007fff 	.word	0x00007fff

0800ee20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ee20:	b5b0      	push	{r4, r5, r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	223c      	movs	r2, #60	@ 0x3c
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	4952      	ldr	r1, [pc, #328]	@ (800ef94 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ee4a:	1c18      	adds	r0, r3, #0
 800ee4c:	f7f1 fec2 	bl	8000bd4 <__aeabi_fdiv>
 800ee50:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ee52:	2188      	movs	r1, #136	@ 0x88
 800ee54:	05c9      	lsls	r1, r1, #23
 800ee56:	1c18      	adds	r0, r3, #0
 800ee58:	f7f2 f8a2 	bl	8000fa0 <__aeabi_fmul>
 800ee5c:	1c03      	adds	r3, r0, #0
 800ee5e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	494a      	ldr	r1, [pc, #296]	@ (800ef94 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ee6a:	1c18      	adds	r0, r3, #0
 800ee6c:	f7f1 feb2 	bl	8000bd4 <__aeabi_fdiv>
 800ee70:	1c03      	adds	r3, r0, #0
 800ee72:	1c19      	adds	r1, r3, #0
 800ee74:	1c20      	adds	r0, r4, #0
 800ee76:	f7f1 fd23 	bl	80008c0 <__aeabi_fadd>
 800ee7a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ee7c:	1c19      	adds	r1, r3, #0
 800ee7e:	1c28      	adds	r0, r5, #0
 800ee80:	f7f1 fea8 	bl	8000bd4 <__aeabi_fdiv>
 800ee84:	1c03      	adds	r3, r0, #0
 800ee86:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	4940      	ldr	r1, [pc, #256]	@ (800ef94 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ee92:	1c18      	adds	r0, r3, #0
 800ee94:	f7f1 fe9e 	bl	8000bd4 <__aeabi_fdiv>
 800ee98:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ee9a:	2185      	movs	r1, #133	@ 0x85
 800ee9c:	05c9      	lsls	r1, r1, #23
 800ee9e:	1c18      	adds	r0, r3, #0
 800eea0:	f7f2 f87e 	bl	8000fa0 <__aeabi_fmul>
 800eea4:	1c03      	adds	r3, r0, #0
 800eea6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	4938      	ldr	r1, [pc, #224]	@ (800ef94 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800eeb2:	1c18      	adds	r0, r3, #0
 800eeb4:	f7f1 fe8e 	bl	8000bd4 <__aeabi_fdiv>
 800eeb8:	1c03      	adds	r3, r0, #0
 800eeba:	1c19      	adds	r1, r3, #0
 800eebc:	1c20      	adds	r0, r4, #0
 800eebe:	f7f1 fcff 	bl	80008c0 <__aeabi_fadd>
 800eec2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800eec4:	1c19      	adds	r1, r3, #0
 800eec6:	1c28      	adds	r0, r5, #0
 800eec8:	f7f1 fe84 	bl	8000bd4 <__aeabi_fdiv>
 800eecc:	1c03      	adds	r3, r0, #0
 800eece:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d118      	bne.n	800ef0e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800eee0:	2188      	movs	r1, #136	@ 0x88
 800eee2:	05c9      	lsls	r1, r1, #23
 800eee4:	1c18      	adds	r0, r3, #0
 800eee6:	f7f2 f85b 	bl	8000fa0 <__aeabi_fmul>
 800eeea:	1c03      	adds	r3, r0, #0
 800eeec:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800eef2:	4929      	ldr	r1, [pc, #164]	@ (800ef98 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800eef4:	1c18      	adds	r0, r3, #0
 800eef6:	f7f1 fce3 	bl	80008c0 <__aeabi_fadd>
 800eefa:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800eefc:	1c19      	adds	r1, r3, #0
 800eefe:	1c20      	adds	r0, r4, #0
 800ef00:	f7f1 fe68 	bl	8000bd4 <__aeabi_fdiv>
 800ef04:	1c03      	adds	r3, r0, #0
 800ef06:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	655a      	str	r2, [r3, #84]	@ 0x54
 800ef0c:	e017      	b.n	800ef3e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ef12:	2188      	movs	r1, #136	@ 0x88
 800ef14:	05c9      	lsls	r1, r1, #23
 800ef16:	1c18      	adds	r0, r3, #0
 800ef18:	f7f2 f842 	bl	8000fa0 <__aeabi_fmul>
 800ef1c:	1c03      	adds	r3, r0, #0
 800ef1e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ef24:	491d      	ldr	r1, [pc, #116]	@ (800ef9c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ef26:	1c18      	adds	r0, r3, #0
 800ef28:	f7f1 fcca 	bl	80008c0 <__aeabi_fadd>
 800ef2c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ef2e:	1c19      	adds	r1, r3, #0
 800ef30:	1c20      	adds	r0, r4, #0
 800ef32:	f7f1 fe4f 	bl	8000bd4 <__aeabi_fdiv>
 800ef36:	1c03      	adds	r3, r0, #0
 800ef38:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ef42:	2185      	movs	r1, #133	@ 0x85
 800ef44:	05c9      	lsls	r1, r1, #23
 800ef46:	1c18      	adds	r0, r3, #0
 800ef48:	f7f2 f82a 	bl	8000fa0 <__aeabi_fmul>
 800ef4c:	1c03      	adds	r3, r0, #0
 800ef4e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	4912      	ldr	r1, [pc, #72]	@ (800efa0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800ef56:	1c18      	adds	r0, r3, #0
 800ef58:	f7f1 fcb2 	bl	80008c0 <__aeabi_fadd>
 800ef5c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800ef5e:	1c19      	adds	r1, r3, #0
 800ef60:	1c20      	adds	r0, r4, #0
 800ef62:	f7f1 fe37 	bl	8000bd4 <__aeabi_fdiv>
 800ef66:	1c03      	adds	r3, r0, #0
 800ef68:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800ef8c:	46c0      	nop			@ (mov r8, r8)
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	b002      	add	sp, #8
 800ef92:	bdb0      	pop	{r4, r5, r7, pc}
 800ef94:	45610000 	.word	0x45610000
 800ef98:	44960000 	.word	0x44960000
 800ef9c:	41a00000 	.word	0x41a00000
 800efa0:	451c4000 	.word	0x451c4000

0800efa4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800efb0:	1c18      	adds	r0, r3, #0
 800efb2:	46bd      	mov	sp, r7
 800efb4:	b002      	add	sp, #8
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800efc8:	1c19      	adds	r1, r3, #0
 800efca:	1c10      	adds	r0, r2, #0
 800efcc:	f7f1 fc78 	bl	80008c0 <__aeabi_fadd>
 800efd0:	1c03      	adds	r3, r0, #0
}
 800efd2:	1c18      	adds	r0, r3, #0
 800efd4:	46bd      	mov	sp, r7
 800efd6:	b002      	add	sp, #8
 800efd8:	bd80      	pop	{r7, pc}

0800efda <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	223c      	movs	r2, #60	@ 0x3c
 800efe6:	5c9b      	ldrb	r3, [r3, r2]
}
 800efe8:	0018      	movs	r0, r3
 800efea:	46bd      	mov	sp, r7
 800efec:	b002      	add	sp, #8
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800eff0:	b5b0      	push	{r4, r5, r7, lr}
 800eff2:	b08c      	sub	sp, #48	@ 0x30
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800effc:	1c19      	adds	r1, r3, #0
 800effe:	4895      	ldr	r0, [pc, #596]	@ (800f254 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800f000:	f7f2 f90c 	bl	800121c <__aeabi_fsub>
 800f004:	1c03      	adds	r3, r0, #0
 800f006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f00c:	1c19      	adds	r1, r3, #0
 800f00e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f010:	f7f1 faa2 	bl	8000558 <__aeabi_fcmpgt>
 800f014:	1e03      	subs	r3, r0, #0
 800f016:	d00b      	beq.n	800f030 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f020:	1c19      	adds	r1, r3, #0
 800f022:	1c10      	adds	r0, r2, #0
 800f024:	f7f1 fc4c 	bl	80008c0 <__aeabi_fadd>
 800f028:	1c03      	adds	r3, r0, #0
 800f02a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f034:	1c19      	adds	r1, r3, #0
 800f036:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f038:	f7f1 fa8e 	bl	8000558 <__aeabi_fcmpgt>
 800f03c:	1e03      	subs	r3, r0, #0
 800f03e:	d00b      	beq.n	800f058 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f048:	1c19      	adds	r1, r3, #0
 800f04a:	1c10      	adds	r0, r2, #0
 800f04c:	f7f1 fc38 	bl	80008c0 <__aeabi_fadd>
 800f050:	1c03      	adds	r3, r0, #0
 800f052:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6959      	ldr	r1, [r3, #20]
 800f05c:	4a7e      	ldr	r2, [pc, #504]	@ (800f258 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	0018      	movs	r0, r3
 800f062:	f000 f9f1 	bl	800f448 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	1c11      	adds	r1, r2, #0
 800f06e:	0018      	movs	r0, r3
 800f070:	f000 f9fa 	bl	800f468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f074:	1c03      	adds	r3, r0, #0
 800f076:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f084:	1c19      	adds	r1, r3, #0
 800f086:	1c10      	adds	r0, r2, #0
 800f088:	f7f2 f8c8 	bl	800121c <__aeabi_fsub>
 800f08c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f08e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f090:	1c18      	adds	r0, r3, #0
 800f092:	f7f1 ff85 	bl	8000fa0 <__aeabi_fmul>
 800f096:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f098:	1c19      	adds	r1, r3, #0
 800f09a:	1c20      	adds	r0, r4, #0
 800f09c:	f7f1 fc10 	bl	80008c0 <__aeabi_fadd>
 800f0a0:	1c03      	adds	r3, r0, #0
 800f0a2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f0ac:	1c19      	adds	r1, r3, #0
 800f0ae:	486b      	ldr	r0, [pc, #428]	@ (800f25c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f0b0:	f7f2 f8b4 	bl	800121c <__aeabi_fsub>
 800f0b4:	1c03      	adds	r3, r0, #0
 800f0b6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	1c11      	adds	r1, r2, #0
 800f0c0:	0018      	movs	r0, r3
 800f0c2:	f000 f9d1 	bl	800f468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f0c6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f0c8:	1c19      	adds	r1, r3, #0
 800f0ca:	1c28      	adds	r0, r5, #0
 800f0cc:	f7f1 ff68 	bl	8000fa0 <__aeabi_fmul>
 800f0d0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800f0d2:	1c19      	adds	r1, r3, #0
 800f0d4:	1c20      	adds	r0, r4, #0
 800f0d6:	f7f1 fbf3 	bl	80008c0 <__aeabi_fadd>
 800f0da:	1c03      	adds	r3, r0, #0
 800f0dc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f0de:	4a60      	ldr	r2, [pc, #384]	@ (800f260 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f0e0:	6a39      	ldr	r1, [r7, #32]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	0018      	movs	r0, r3
 800f0e6:	f000 f9af 	bl	800f448 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	1c11      	adds	r1, r2, #0
 800f0f2:	0018      	movs	r0, r3
 800f0f4:	f000 f9b8 	bl	800f468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f0f8:	1c03      	adds	r3, r0, #0
 800f0fa:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800f0fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f0fe:	69f8      	ldr	r0, [r7, #28]
 800f100:	f7f1 ff4e 	bl	8000fa0 <__aeabi_fmul>
 800f104:	1c03      	adds	r3, r0, #0
 800f106:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6999      	ldr	r1, [r3, #24]
 800f110:	4a51      	ldr	r2, [pc, #324]	@ (800f258 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	0018      	movs	r0, r3
 800f116:	f000 f997 	bl	800f448 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	1c11      	adds	r1, r2, #0
 800f122:	0018      	movs	r0, r3
 800f124:	f000 f9a0 	bl	800f468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f128:	1c03      	adds	r3, r0, #0
 800f12a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f138:	1c19      	adds	r1, r3, #0
 800f13a:	1c10      	adds	r0, r2, #0
 800f13c:	f7f2 f86e 	bl	800121c <__aeabi_fsub>
 800f140:	1c03      	adds	r3, r0, #0
 800f142:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800f144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f146:	69b8      	ldr	r0, [r7, #24]
 800f148:	f7f2 f868 	bl	800121c <__aeabi_fsub>
 800f14c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f14e:	1c19      	adds	r1, r3, #0
 800f150:	1c28      	adds	r0, r5, #0
 800f152:	f7f1 ff25 	bl	8000fa0 <__aeabi_fmul>
 800f156:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800f158:	1c19      	adds	r1, r3, #0
 800f15a:	1c20      	adds	r0, r4, #0
 800f15c:	f7f1 fbb0 	bl	80008c0 <__aeabi_fadd>
 800f160:	1c03      	adds	r3, r0, #0
 800f162:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f16c:	1c19      	adds	r1, r3, #0
 800f16e:	483b      	ldr	r0, [pc, #236]	@ (800f25c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f170:	f7f2 f854 	bl	800121c <__aeabi_fsub>
 800f174:	1c03      	adds	r3, r0, #0
 800f176:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	1c11      	adds	r1, r2, #0
 800f180:	0018      	movs	r0, r3
 800f182:	f000 f971 	bl	800f468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f186:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f188:	1c19      	adds	r1, r3, #0
 800f18a:	1c28      	adds	r0, r5, #0
 800f18c:	f7f1 ff08 	bl	8000fa0 <__aeabi_fmul>
 800f190:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800f192:	1c19      	adds	r1, r3, #0
 800f194:	1c20      	adds	r0, r4, #0
 800f196:	f7f1 fb93 	bl	80008c0 <__aeabi_fadd>
 800f19a:	1c03      	adds	r3, r0, #0
 800f19c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f19e:	4a30      	ldr	r2, [pc, #192]	@ (800f260 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f1a0:	6939      	ldr	r1, [r7, #16]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	0018      	movs	r0, r3
 800f1a6:	f000 f94f 	bl	800f448 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	1c11      	adds	r1, r2, #0
 800f1b2:	0018      	movs	r0, r3
 800f1b4:	f000 f958 	bl	800f468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f1b8:	1c03      	adds	r3, r0, #0
 800f1ba:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800f1bc:	6979      	ldr	r1, [r7, #20]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7f1 feee 	bl	8000fa0 <__aeabi_fmul>
 800f1c4:	1c03      	adds	r3, r0, #0
 800f1c6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	4923      	ldr	r1, [pc, #140]	@ (800f264 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800f1d6:	1c18      	adds	r0, r3, #0
 800f1d8:	f7f1 fcfc 	bl	8000bd4 <__aeabi_fdiv>
 800f1dc:	1c03      	adds	r3, r0, #0
 800f1de:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800f1e0:	69f9      	ldr	r1, [r7, #28]
 800f1e2:	20fe      	movs	r0, #254	@ 0xfe
 800f1e4:	0580      	lsls	r0, r0, #22
 800f1e6:	f7f2 f819 	bl	800121c <__aeabi_fsub>
 800f1ea:	1c03      	adds	r3, r0, #0
 800f1ec:	491e      	ldr	r1, [pc, #120]	@ (800f268 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800f1ee:	1c18      	adds	r0, r3, #0
 800f1f0:	f7f1 fed6 	bl	8000fa0 <__aeabi_fmul>
 800f1f4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800f1f6:	491d      	ldr	r1, [pc, #116]	@ (800f26c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800f1f8:	1c18      	adds	r0, r3, #0
 800f1fa:	f7f2 f80f 	bl	800121c <__aeabi_fsub>
 800f1fe:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800f200:	1c19      	adds	r1, r3, #0
 800f202:	1c28      	adds	r0, r5, #0
 800f204:	f7f1 fecc 	bl	8000fa0 <__aeabi_fmul>
 800f208:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f20a:	1c19      	adds	r1, r3, #0
 800f20c:	1c20      	adds	r0, r4, #0
 800f20e:	f7f1 fb57 	bl	80008c0 <__aeabi_fadd>
 800f212:	1c03      	adds	r3, r0, #0
 800f214:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f21e:	2100      	movs	r1, #0
 800f220:	1c18      	adds	r0, r3, #0
 800f222:	f7f1 f985 	bl	8000530 <__aeabi_fcmplt>
 800f226:	1e03      	subs	r3, r0, #0
 800f228:	d002      	beq.n	800f230 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f238:	1c19      	adds	r1, r3, #0
 800f23a:	1c10      	adds	r0, r2, #0
 800f23c:	f7f1 f98c 	bl	8000558 <__aeabi_fcmpgt>
 800f240:	1e03      	subs	r3, r0, #0
 800f242:	d100      	bne.n	800f246 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800f244:	e002      	b.n	800f24c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2200      	movs	r2, #0
 800f24a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f24c:	46c0      	nop			@ (mov r8, r8)
 800f24e:	46bd      	mov	sp, r7
 800f250:	b00c      	add	sp, #48	@ 0x30
 800f252:	bdb0      	pop	{r4, r5, r7, pc}
 800f254:	46fffe00 	.word	0x46fffe00
 800f258:	3c23d70a 	.word	0x3c23d70a
 800f25c:	43ff0000 	.word	0x43ff0000
 800f260:	3db851ec 	.word	0x3db851ec
 800f264:	42700000 	.word	0x42700000
 800f268:	3fa66666 	.word	0x3fa66666
 800f26c:	3e99999a 	.word	0x3e99999a

0800f270 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800f270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f272:	b087      	sub	sp, #28
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	223c      	movs	r2, #60	@ 0x3c
 800f27e:	5c9b      	ldrb	r3, [r3, r2]
 800f280:	2201      	movs	r2, #1
 800f282:	4053      	eors	r3, r2
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00a      	beq.n	800f2a0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	223c      	movs	r2, #60	@ 0x3c
 800f28e:	2101      	movs	r1, #1
 800f290:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	683a      	ldr	r2, [r7, #0]
 800f296:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800f29e:	e0c8      	b.n	800f432 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2a4:	4965      	ldr	r1, [pc, #404]	@ (800f43c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800f2a6:	1c18      	adds	r0, r3, #0
 800f2a8:	f7f1 f960 	bl	800056c <__aeabi_fcmpge>
 800f2ac:	1e03      	subs	r3, r0, #0
 800f2ae:	d107      	bne.n	800f2c0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f2b4:	4962      	ldr	r1, [pc, #392]	@ (800f440 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800f2b6:	1c18      	adds	r0, r3, #0
 800f2b8:	f7f1 f944 	bl	8000544 <__aeabi_fcmple>
 800f2bc:	1e03      	subs	r3, r0, #0
 800f2be:	d00e      	beq.n	800f2de <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f2c8:	1c19      	adds	r1, r3, #0
 800f2ca:	1c10      	adds	r0, r2, #0
 800f2cc:	f7f1 faf8 	bl	80008c0 <__aeabi_fadd>
 800f2d0:	1c03      	adds	r3, r0, #0
 800f2d2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2e2:	1c19      	adds	r1, r3, #0
 800f2e4:	6838      	ldr	r0, [r7, #0]
 800f2e6:	f7f1 ff99 	bl	800121c <__aeabi_fsub>
 800f2ea:	1c03      	adds	r3, r0, #0
 800f2ec:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	0018      	movs	r0, r3
 800f2f2:	f7ff fe7d 	bl	800eff0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2fa:	1c19      	adds	r1, r3, #0
 800f2fc:	6838      	ldr	r0, [r7, #0]
 800f2fe:	f7f1 ff8d 	bl	800121c <__aeabi_fsub>
 800f302:	1c03      	adds	r3, r0, #0
 800f304:	2185      	movs	r1, #133	@ 0x85
 800f306:	05c9      	lsls	r1, r1, #23
 800f308:	1c18      	adds	r0, r3, #0
 800f30a:	f7f1 fc63 	bl	8000bd4 <__aeabi_fdiv>
 800f30e:	1c03      	adds	r3, r0, #0
 800f310:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800f312:	2100      	movs	r1, #0
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7f1 f90b 	bl	8000530 <__aeabi_fcmplt>
 800f31a:	1e03      	subs	r3, r0, #0
 800f31c:	d008      	beq.n	800f330 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f322:	68f9      	ldr	r1, [r7, #12]
 800f324:	1c18      	adds	r0, r3, #0
 800f326:	f7f1 ff79 	bl	800121c <__aeabi_fsub>
 800f32a:	1c03      	adds	r3, r0, #0
 800f32c:	617b      	str	r3, [r7, #20]
 800f32e:	e007      	b.n	800f340 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f334:	1c19      	adds	r1, r3, #0
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f7f1 fac2 	bl	80008c0 <__aeabi_fadd>
 800f33c:	1c03      	adds	r3, r0, #0
 800f33e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800f340:	23fe      	movs	r3, #254	@ 0xfe
 800f342:	059b      	lsls	r3, r3, #22
 800f344:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800f346:	493f      	ldr	r1, [pc, #252]	@ (800f444 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f348:	6978      	ldr	r0, [r7, #20]
 800f34a:	f7f1 f905 	bl	8000558 <__aeabi_fcmpgt>
 800f34e:	1e03      	subs	r3, r0, #0
 800f350:	d010      	beq.n	800f374 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800f352:	493c      	ldr	r1, [pc, #240]	@ (800f444 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f354:	6978      	ldr	r0, [r7, #20]
 800f356:	f7f1 fc3d 	bl	8000bd4 <__aeabi_fdiv>
 800f35a:	1c03      	adds	r3, r0, #0
 800f35c:	1c1c      	adds	r4, r3, #0
 800f35e:	4939      	ldr	r1, [pc, #228]	@ (800f444 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f360:	6978      	ldr	r0, [r7, #20]
 800f362:	f7f1 fc37 	bl	8000bd4 <__aeabi_fdiv>
 800f366:	1c03      	adds	r3, r0, #0
 800f368:	1c19      	adds	r1, r3, #0
 800f36a:	1c20      	adds	r0, r4, #0
 800f36c:	f7f1 fe18 	bl	8000fa0 <__aeabi_fmul>
 800f370:	1c03      	adds	r3, r0, #0
 800f372:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800f378:	1c19      	adds	r1, r3, #0
 800f37a:	2085      	movs	r0, #133	@ 0x85
 800f37c:	05c0      	lsls	r0, r0, #23
 800f37e:	f7f1 ff4d 	bl	800121c <__aeabi_fsub>
 800f382:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800f384:	6939      	ldr	r1, [r7, #16]
 800f386:	1c18      	adds	r0, r3, #0
 800f388:	f7f1 fe0a 	bl	8000fa0 <__aeabi_fmul>
 800f38c:	1c03      	adds	r3, r0, #0
 800f38e:	1c18      	adds	r0, r3, #0
 800f390:	f018 fd18 	bl	8027dc4 <sqrtf>
 800f394:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f39e:	2185      	movs	r1, #133	@ 0x85
 800f3a0:	05c9      	lsls	r1, r1, #23
 800f3a2:	6938      	ldr	r0, [r7, #16]
 800f3a4:	f7f1 fdfc 	bl	8000fa0 <__aeabi_fmul>
 800f3a8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800f3aa:	1c19      	adds	r1, r3, #0
 800f3ac:	1c28      	adds	r0, r5, #0
 800f3ae:	f7f1 fc11 	bl	8000bd4 <__aeabi_fdiv>
 800f3b2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f3b4:	1c19      	adds	r1, r3, #0
 800f3b6:	1c20      	adds	r0, r4, #0
 800f3b8:	f7f1 fdf2 	bl	8000fa0 <__aeabi_fmul>
 800f3bc:	1c03      	adds	r3, r0, #0
 800f3be:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3c4:	68f9      	ldr	r1, [r7, #12]
 800f3c6:	1c18      	adds	r0, r3, #0
 800f3c8:	f7f1 fdea 	bl	8000fa0 <__aeabi_fmul>
 800f3cc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800f3ce:	6939      	ldr	r1, [r7, #16]
 800f3d0:	1c18      	adds	r0, r3, #0
 800f3d2:	f7f1 fbff 	bl	8000bd4 <__aeabi_fdiv>
 800f3d6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800f3d8:	68f9      	ldr	r1, [r7, #12]
 800f3da:	1c18      	adds	r0, r3, #0
 800f3dc:	f7f1 fde0 	bl	8000fa0 <__aeabi_fmul>
 800f3e0:	1c03      	adds	r3, r0, #0
             sqrtf(
 800f3e2:	1c19      	adds	r1, r3, #0
 800f3e4:	1c20      	adds	r0, r4, #0
 800f3e6:	f7f1 fa6b 	bl	80008c0 <__aeabi_fadd>
 800f3ea:	1c03      	adds	r3, r0, #0
 800f3ec:	1c18      	adds	r0, r3, #0
 800f3ee:	f018 fce9 	bl	8027dc4 <sqrtf>
 800f3f2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f3f4:	1c19      	adds	r1, r3, #0
 800f3f6:	1c30      	adds	r0, r6, #0
 800f3f8:	f7f1 fdd2 	bl	8000fa0 <__aeabi_fmul>
 800f3fc:	1c03      	adds	r3, r0, #0
 800f3fe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f40c:	68f9      	ldr	r1, [r7, #12]
 800f40e:	1c18      	adds	r0, r3, #0
 800f410:	f7f1 fdc6 	bl	8000fa0 <__aeabi_fmul>
 800f414:	1c03      	adds	r3, r0, #0
 800f416:	2182      	movs	r1, #130	@ 0x82
 800f418:	05c9      	lsls	r1, r1, #23
 800f41a:	1c18      	adds	r0, r3, #0
 800f41c:	f7f1 fbda 	bl	8000bd4 <__aeabi_fdiv>
 800f420:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800f422:	1c19      	adds	r1, r3, #0
 800f424:	1c20      	adds	r0, r4, #0
 800f426:	f7f1 fa4b 	bl	80008c0 <__aeabi_fadd>
 800f42a:	1c03      	adds	r3, r0, #0
 800f42c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f432:	46c0      	nop			@ (mov r8, r8)
 800f434:	46bd      	mov	sp, r7
 800f436:	b007      	add	sp, #28
 800f438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f43a:	46c0      	nop			@ (mov r8, r8)
 800f43c:	42c80000 	.word	0x42c80000
 800f440:	c2c80000 	.word	0xc2c80000
 800f444:	44b40000 	.word	0x44b40000

0800f448 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	68ba      	ldr	r2, [r7, #8]
 800f45e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f460:	46c0      	nop			@ (mov r8, r8)
 800f462:	46bd      	mov	sp, r7
 800f464:	b004      	add	sp, #16
 800f466:	bd80      	pop	{r7, pc}

0800f468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800f468:	b590      	push	{r4, r7, lr}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f47a:	1c19      	adds	r1, r3, #0
 800f47c:	6838      	ldr	r0, [r7, #0]
 800f47e:	f7f1 fecd 	bl	800121c <__aeabi_fsub>
 800f482:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f484:	1c19      	adds	r1, r3, #0
 800f486:	1c20      	adds	r0, r4, #0
 800f488:	f7f1 fd8a 	bl	8000fa0 <__aeabi_fmul>
 800f48c:	1c03      	adds	r3, r0, #0
 800f48e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800f490:	4912      	ldr	r1, [pc, #72]	@ (800f4dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800f492:	68f8      	ldr	r0, [r7, #12]
 800f494:	f7f1 f84c 	bl	8000530 <__aeabi_fcmplt>
 800f498:	1e03      	subs	r3, r0, #0
 800f49a:	d002      	beq.n	800f4a2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800f49c:	23fe      	movs	r3, #254	@ 0xfe
 800f49e:	059b      	lsls	r3, r3, #22
 800f4a0:	e018      	b.n	800f4d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800f4a2:	490f      	ldr	r1, [pc, #60]	@ (800f4e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800f4a4:	68f8      	ldr	r0, [r7, #12]
 800f4a6:	f7f1 f857 	bl	8000558 <__aeabi_fcmpgt>
 800f4aa:	1e03      	subs	r3, r0, #0
 800f4ac:	d001      	beq.n	800f4b2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	e010      	b.n	800f4d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	1c18      	adds	r0, r3, #0
 800f4b6:	f018 fc5d 	bl	8027d74 <expf>
 800f4ba:	1c03      	adds	r3, r0, #0
 800f4bc:	21fe      	movs	r1, #254	@ 0xfe
 800f4be:	0589      	lsls	r1, r1, #22
 800f4c0:	1c18      	adds	r0, r3, #0
 800f4c2:	f7f1 f9fd 	bl	80008c0 <__aeabi_fadd>
 800f4c6:	1c03      	adds	r3, r0, #0
 800f4c8:	1c19      	adds	r1, r3, #0
 800f4ca:	20fe      	movs	r0, #254	@ 0xfe
 800f4cc:	0580      	lsls	r0, r0, #22
 800f4ce:	f7f1 fb81 	bl	8000bd4 <__aeabi_fdiv>
 800f4d2:	1c03      	adds	r3, r0, #0
    }
}
 800f4d4:	1c18      	adds	r0, r3, #0
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	b005      	add	sp, #20
 800f4da:	bd90      	pop	{r4, r7, pc}
 800f4dc:	c2480000 	.word	0xc2480000
 800f4e0:	42480000 	.word	0x42480000

0800f4e4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f4fc:	46c0      	nop			@ (mov r8, r8)
 800f4fe:	46bd      	mov	sp, r7
 800f500:	b004      	add	sp, #16
 800f502:	bd80      	pop	{r7, pc}

0800f504 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800f504:	b590      	push	{r4, r7, lr}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b01      	cmp	r3, #1
 800f514:	d114      	bne.n	800f540 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f51a:	1c19      	adds	r1, r3, #0
 800f51c:	6838      	ldr	r0, [r7, #0]
 800f51e:	f7f1 fe7d 	bl	800121c <__aeabi_fsub>
 800f522:	1c03      	adds	r3, r0, #0
 800f524:	4918      	ldr	r1, [pc, #96]	@ (800f588 <GasIndexAlgorithm__mox_model__process+0x84>)
 800f526:	1c18      	adds	r0, r3, #0
 800f528:	f7f1 fb54 	bl	8000bd4 <__aeabi_fdiv>
 800f52c:	1c03      	adds	r3, r0, #0
 800f52e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800f534:	1c19      	adds	r1, r3, #0
 800f536:	1c10      	adds	r0, r2, #0
 800f538:	f7f1 fd32 	bl	8000fa0 <__aeabi_fmul>
 800f53c:	1c03      	adds	r3, r0, #0
 800f53e:	e01f      	b.n	800f580 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f544:	1c19      	adds	r1, r3, #0
 800f546:	6838      	ldr	r0, [r7, #0]
 800f548:	f7f1 fe68 	bl	800121c <__aeabi_fsub>
 800f54c:	1c03      	adds	r3, r0, #0
 800f54e:	1c1a      	adds	r2, r3, #0
 800f550:	2380      	movs	r3, #128	@ 0x80
 800f552:	061b      	lsls	r3, r3, #24
 800f554:	4053      	eors	r3, r2
 800f556:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f55c:	490b      	ldr	r1, [pc, #44]	@ (800f58c <GasIndexAlgorithm__mox_model__process+0x88>)
 800f55e:	1c18      	adds	r0, r3, #0
 800f560:	f7f1 f9ae 	bl	80008c0 <__aeabi_fadd>
 800f564:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f566:	1c19      	adds	r1, r3, #0
 800f568:	1c20      	adds	r0, r4, #0
 800f56a:	f7f1 fb33 	bl	8000bd4 <__aeabi_fdiv>
 800f56e:	1c03      	adds	r3, r0, #0
 800f570:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800f576:	1c19      	adds	r1, r3, #0
 800f578:	1c10      	adds	r0, r2, #0
 800f57a:	f7f1 fd11 	bl	8000fa0 <__aeabi_fmul>
 800f57e:	1c03      	adds	r3, r0, #0
    }
}
 800f580:	1c18      	adds	r0, r3, #0
 800f582:	46bd      	mov	sp, r7
 800f584:	b003      	add	sp, #12
 800f586:	bd90      	pop	{r4, r7, pc}
 800f588:	44fa0000 	.word	0x44fa0000
 800f58c:	435c0000 	.word	0x435c0000

0800f590 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2180      	movs	r1, #128	@ 0x80
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2184      	movs	r1, #132	@ 0x84
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2188      	movs	r1, #136	@ 0x88
 800f5b2:	683a      	ldr	r2, [r7, #0]
 800f5b4:	505a      	str	r2, [r3, r1]
}
 800f5b6:	46c0      	nop			@ (mov r8, r8)
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	b004      	add	sp, #16
 800f5bc:	bd80      	pop	{r7, pc}
	...

0800f5c0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800f5c0:	b590      	push	{r4, r7, lr}
 800f5c2:	b085      	sub	sp, #20
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2280      	movs	r2, #128	@ 0x80
 800f5ce:	589c      	ldr	r4, [r3, r2]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2284      	movs	r2, #132	@ 0x84
 800f5d4:	589b      	ldr	r3, [r3, r2]
 800f5d6:	1c19      	adds	r1, r3, #0
 800f5d8:	6838      	ldr	r0, [r7, #0]
 800f5da:	f7f1 fe1f 	bl	800121c <__aeabi_fsub>
 800f5de:	1c03      	adds	r3, r0, #0
 800f5e0:	1c19      	adds	r1, r3, #0
 800f5e2:	1c20      	adds	r0, r4, #0
 800f5e4:	f7f1 fcdc 	bl	8000fa0 <__aeabi_fmul>
 800f5e8:	1c03      	adds	r3, r0, #0
 800f5ea:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800f5ec:	4940      	ldr	r1, [pc, #256]	@ (800f6f0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800f5ee:	68b8      	ldr	r0, [r7, #8]
 800f5f0:	f7f0 ff9e 	bl	8000530 <__aeabi_fcmplt>
 800f5f4:	1e03      	subs	r3, r0, #0
 800f5f6:	d001      	beq.n	800f5fc <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800f5f8:	4b3e      	ldr	r3, [pc, #248]	@ (800f6f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f5fa:	e075      	b.n	800f6e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800f5fc:	493e      	ldr	r1, [pc, #248]	@ (800f6f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800f5fe:	68b8      	ldr	r0, [r7, #8]
 800f600:	f7f0 ffaa 	bl	8000558 <__aeabi_fcmpgt>
 800f604:	1e03      	subs	r3, r0, #0
 800f606:	d001      	beq.n	800f60c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800f608:	2300      	movs	r3, #0
 800f60a:	e06d      	b.n	800f6e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800f60c:	2100      	movs	r1, #0
 800f60e:	6838      	ldr	r0, [r7, #0]
 800f610:	f7f0 ffac 	bl	800056c <__aeabi_fcmpge>
 800f614:	1e03      	subs	r3, r0, #0
 800f616:	d047      	beq.n	800f6a8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2288      	movs	r2, #136	@ 0x88
 800f61c:	589b      	ldr	r3, [r3, r2]
 800f61e:	21fe      	movs	r1, #254	@ 0xfe
 800f620:	0589      	lsls	r1, r1, #22
 800f622:	1c18      	adds	r0, r3, #0
 800f624:	f7f0 ff7e 	bl	8000524 <__aeabi_fcmpeq>
 800f628:	1e03      	subs	r3, r0, #0
 800f62a:	d00e      	beq.n	800f64a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	1c19      	adds	r1, r3, #0
 800f632:	20fe      	movs	r0, #254	@ 0xfe
 800f634:	0580      	lsls	r0, r0, #22
 800f636:	f7f1 fdf1 	bl	800121c <__aeabi_fsub>
 800f63a:	1c03      	adds	r3, r0, #0
 800f63c:	492f      	ldr	r1, [pc, #188]	@ (800f6fc <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800f63e:	1c18      	adds	r0, r3, #0
 800f640:	f7f1 fcae 	bl	8000fa0 <__aeabi_fmul>
 800f644:	1c03      	adds	r3, r0, #0
 800f646:	60fb      	str	r3, [r7, #12]
 800f648:	e012      	b.n	800f670 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	492c      	ldr	r1, [pc, #176]	@ (800f700 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800f650:	1c18      	adds	r0, r3, #0
 800f652:	f7f1 fca5 	bl	8000fa0 <__aeabi_fmul>
 800f656:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800f658:	1c19      	adds	r1, r3, #0
 800f65a:	4826      	ldr	r0, [pc, #152]	@ (800f6f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f65c:	f7f1 fdde 	bl	800121c <__aeabi_fsub>
 800f660:	1c03      	adds	r3, r0, #0
 800f662:	2181      	movs	r1, #129	@ 0x81
 800f664:	05c9      	lsls	r1, r1, #23
 800f666:	1c18      	adds	r0, r3, #0
 800f668:	f7f1 fab4 	bl	8000bd4 <__aeabi_fdiv>
 800f66c:	1c03      	adds	r3, r0, #0
 800f66e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800f670:	4920      	ldr	r1, [pc, #128]	@ (800f6f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f7f1 f924 	bl	80008c0 <__aeabi_fadd>
 800f678:	1c03      	adds	r3, r0, #0
 800f67a:	1c1c      	adds	r4, r3, #0
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	1c18      	adds	r0, r3, #0
 800f680:	f018 fb78 	bl	8027d74 <expf>
 800f684:	1c03      	adds	r3, r0, #0
 800f686:	21fe      	movs	r1, #254	@ 0xfe
 800f688:	0589      	lsls	r1, r1, #22
 800f68a:	1c18      	adds	r0, r3, #0
 800f68c:	f7f1 f918 	bl	80008c0 <__aeabi_fadd>
 800f690:	1c03      	adds	r3, r0, #0
 800f692:	1c19      	adds	r1, r3, #0
 800f694:	1c20      	adds	r0, r4, #0
 800f696:	f7f1 fa9d 	bl	8000bd4 <__aeabi_fdiv>
 800f69a:	1c03      	adds	r3, r0, #0
 800f69c:	68f9      	ldr	r1, [r7, #12]
 800f69e:	1c18      	adds	r0, r3, #0
 800f6a0:	f7f1 fdbc 	bl	800121c <__aeabi_fsub>
 800f6a4:	1c03      	adds	r3, r0, #0
 800f6a6:	e01f      	b.n	800f6e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2188      	movs	r1, #136	@ 0x88
 800f6b0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800f6b2:	1c19      	adds	r1, r3, #0
 800f6b4:	1c10      	adds	r0, r2, #0
 800f6b6:	f7f1 fa8d 	bl	8000bd4 <__aeabi_fdiv>
 800f6ba:	1c03      	adds	r3, r0, #0
 800f6bc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	1c18      	adds	r0, r3, #0
 800f6c2:	f018 fb57 	bl	8027d74 <expf>
 800f6c6:	1c03      	adds	r3, r0, #0
 800f6c8:	21fe      	movs	r1, #254	@ 0xfe
 800f6ca:	0589      	lsls	r1, r1, #22
 800f6cc:	1c18      	adds	r0, r3, #0
 800f6ce:	f7f1 f8f7 	bl	80008c0 <__aeabi_fadd>
 800f6d2:	1c03      	adds	r3, r0, #0
 800f6d4:	1c19      	adds	r1, r3, #0
 800f6d6:	4807      	ldr	r0, [pc, #28]	@ (800f6f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800f6d8:	f7f1 fa7c 	bl	8000bd4 <__aeabi_fdiv>
 800f6dc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800f6de:	1c19      	adds	r1, r3, #0
 800f6e0:	1c20      	adds	r0, r4, #0
 800f6e2:	f7f1 fc5d 	bl	8000fa0 <__aeabi_fmul>
 800f6e6:	1c03      	adds	r3, r0, #0
        }
    }
}
 800f6e8:	1c18      	adds	r0, r3, #0
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	b005      	add	sp, #20
 800f6ee:	bd90      	pop	{r4, r7, pc}
 800f6f0:	c2480000 	.word	0xc2480000
 800f6f4:	43fa0000 	.word	0x43fa0000
 800f6f8:	42480000 	.word	0x42480000
 800f6fc:	3f8041ab 	.word	0x3f8041ab
 800f700:	40a00000 	.word	0x40a00000

0800f704 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f704:	b590      	push	{r4, r7, lr}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4913      	ldr	r1, [pc, #76]	@ (800f764 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800f716:	1c18      	adds	r0, r3, #0
 800f718:	f7f1 f8d2 	bl	80008c0 <__aeabi_fadd>
 800f71c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800f71e:	1c19      	adds	r1, r3, #0
 800f720:	1c20      	adds	r0, r4, #0
 800f722:	f7f1 fa57 	bl	8000bd4 <__aeabi_fdiv>
 800f726:	1c03      	adds	r3, r0, #0
 800f728:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	228c      	movs	r2, #140	@ 0x8c
 800f72e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	490b      	ldr	r1, [pc, #44]	@ (800f768 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800f73a:	1c18      	adds	r0, r3, #0
 800f73c:	f7f1 f8c0 	bl	80008c0 <__aeabi_fadd>
 800f740:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800f742:	1c19      	adds	r1, r3, #0
 800f744:	1c20      	adds	r0, r4, #0
 800f746:	f7f1 fa45 	bl	8000bd4 <__aeabi_fdiv>
 800f74a:	1c03      	adds	r3, r0, #0
 800f74c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2290      	movs	r2, #144	@ 0x90
 800f752:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2294      	movs	r2, #148	@ 0x94
 800f758:	2100      	movs	r1, #0
 800f75a:	5499      	strb	r1, [r3, r2]
}
 800f75c:	46c0      	nop			@ (mov r8, r8)
 800f75e:	46bd      	mov	sp, r7
 800f760:	b003      	add	sp, #12
 800f762:	bd90      	pop	{r4, r7, pc}
 800f764:	41a00000 	.word	0x41a00000
 800f768:	43fa0000 	.word	0x43fa0000

0800f76c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800f76c:	b590      	push	{r4, r7, lr}
 800f76e:	b087      	sub	sp, #28
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2294      	movs	r2, #148	@ 0x94
 800f77a:	5c9b      	ldrb	r3, [r3, r2]
 800f77c:	2201      	movs	r2, #1
 800f77e:	4053      	eors	r3, r2
 800f780:	b2db      	uxtb	r3, r3
 800f782:	2b00      	cmp	r3, #0
 800f784:	d00f      	beq.n	800f7a6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2198      	movs	r1, #152	@ 0x98
 800f78a:	683a      	ldr	r2, [r7, #0]
 800f78c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	219c      	movs	r1, #156	@ 0x9c
 800f792:	683a      	ldr	r2, [r7, #0]
 800f794:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	21a0      	movs	r1, #160	@ 0xa0
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2294      	movs	r2, #148	@ 0x94
 800f7a2:	2101      	movs	r1, #1
 800f7a4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	228c      	movs	r2, #140	@ 0x8c
 800f7aa:	589b      	ldr	r3, [r3, r2]
 800f7ac:	1c19      	adds	r1, r3, #0
 800f7ae:	20fe      	movs	r0, #254	@ 0xfe
 800f7b0:	0580      	lsls	r0, r0, #22
 800f7b2:	f7f1 fd33 	bl	800121c <__aeabi_fsub>
 800f7b6:	1c03      	adds	r3, r0, #0
 800f7b8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2298      	movs	r2, #152	@ 0x98
 800f7be:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800f7c0:	1c19      	adds	r1, r3, #0
 800f7c2:	f7f1 fbed 	bl	8000fa0 <__aeabi_fmul>
 800f7c6:	1c03      	adds	r3, r0, #0
 800f7c8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	228c      	movs	r2, #140	@ 0x8c
 800f7ce:	589b      	ldr	r3, [r3, r2]
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	1c18      	adds	r0, r3, #0
 800f7d4:	f7f1 fbe4 	bl	8000fa0 <__aeabi_fmul>
 800f7d8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800f7da:	1c19      	adds	r1, r3, #0
 800f7dc:	1c20      	adds	r0, r4, #0
 800f7de:	f7f1 f86f 	bl	80008c0 <__aeabi_fadd>
 800f7e2:	1c03      	adds	r3, r0, #0
 800f7e4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2298      	movs	r2, #152	@ 0x98
 800f7ea:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2290      	movs	r2, #144	@ 0x90
 800f7f0:	589b      	ldr	r3, [r3, r2]
 800f7f2:	1c19      	adds	r1, r3, #0
 800f7f4:	20fe      	movs	r0, #254	@ 0xfe
 800f7f6:	0580      	lsls	r0, r0, #22
 800f7f8:	f7f1 fd10 	bl	800121c <__aeabi_fsub>
 800f7fc:	1c03      	adds	r3, r0, #0
 800f7fe:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	229c      	movs	r2, #156	@ 0x9c
 800f804:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800f806:	1c19      	adds	r1, r3, #0
 800f808:	f7f1 fbca 	bl	8000fa0 <__aeabi_fmul>
 800f80c:	1c03      	adds	r3, r0, #0
 800f80e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2290      	movs	r2, #144	@ 0x90
 800f814:	589b      	ldr	r3, [r3, r2]
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	1c18      	adds	r0, r3, #0
 800f81a:	f7f1 fbc1 	bl	8000fa0 <__aeabi_fmul>
 800f81e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800f820:	1c19      	adds	r1, r3, #0
 800f822:	1c20      	adds	r0, r4, #0
 800f824:	f7f1 f84c 	bl	80008c0 <__aeabi_fadd>
 800f828:	1c03      	adds	r3, r0, #0
 800f82a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	229c      	movs	r2, #156	@ 0x9c
 800f830:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2298      	movs	r2, #152	@ 0x98
 800f836:	589a      	ldr	r2, [r3, r2]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	219c      	movs	r1, #156	@ 0x9c
 800f83c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800f83e:	1c19      	adds	r1, r3, #0
 800f840:	1c10      	adds	r0, r2, #0
 800f842:	f7f1 fceb 	bl	800121c <__aeabi_fsub>
 800f846:	1c03      	adds	r3, r0, #0
 800f848:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800f84a:	2100      	movs	r1, #0
 800f84c:	6978      	ldr	r0, [r7, #20]
 800f84e:	f7f0 fe6f 	bl	8000530 <__aeabi_fcmplt>
 800f852:	1e03      	subs	r3, r0, #0
 800f854:	d004      	beq.n	800f860 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	2280      	movs	r2, #128	@ 0x80
 800f85a:	0612      	lsls	r2, r2, #24
 800f85c:	4053      	eors	r3, r2
 800f85e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800f860:	4923      	ldr	r1, [pc, #140]	@ (800f8f0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800f862:	6978      	ldr	r0, [r7, #20]
 800f864:	f7f1 fb9c 	bl	8000fa0 <__aeabi_fmul>
 800f868:	1c03      	adds	r3, r0, #0
 800f86a:	1c18      	adds	r0, r3, #0
 800f86c:	f018 fa82 	bl	8027d74 <expf>
 800f870:	1c03      	adds	r3, r0, #0
 800f872:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800f874:	491f      	ldr	r1, [pc, #124]	@ (800f8f4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800f876:	6938      	ldr	r0, [r7, #16]
 800f878:	f7f1 fb92 	bl	8000fa0 <__aeabi_fmul>
 800f87c:	1c03      	adds	r3, r0, #0
 800f87e:	491e      	ldr	r1, [pc, #120]	@ (800f8f8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800f880:	1c18      	adds	r0, r3, #0
 800f882:	f7f1 f81d 	bl	80008c0 <__aeabi_fadd>
 800f886:	1c03      	adds	r3, r0, #0
 800f888:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	685c      	ldr	r4, [r3, #4]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	68f9      	ldr	r1, [r7, #12]
 800f894:	1c18      	adds	r0, r3, #0
 800f896:	f7f1 f813 	bl	80008c0 <__aeabi_fadd>
 800f89a:	1c03      	adds	r3, r0, #0
 800f89c:	1c19      	adds	r1, r3, #0
 800f89e:	1c20      	adds	r0, r4, #0
 800f8a0:	f7f1 f998 	bl	8000bd4 <__aeabi_fdiv>
 800f8a4:	1c03      	adds	r3, r0, #0
 800f8a6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800f8a8:	68b9      	ldr	r1, [r7, #8]
 800f8aa:	20fe      	movs	r0, #254	@ 0xfe
 800f8ac:	0580      	lsls	r0, r0, #22
 800f8ae:	f7f1 fcb5 	bl	800121c <__aeabi_fsub>
 800f8b2:	1c03      	adds	r3, r0, #0
 800f8b4:	1c18      	adds	r0, r3, #0
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	22a0      	movs	r2, #160	@ 0xa0
 800f8ba:	589b      	ldr	r3, [r3, r2]
 800f8bc:	1c19      	adds	r1, r3, #0
 800f8be:	f7f1 fb6f 	bl	8000fa0 <__aeabi_fmul>
 800f8c2:	1c03      	adds	r3, r0, #0
 800f8c4:	1c1c      	adds	r4, r3, #0
 800f8c6:	6839      	ldr	r1, [r7, #0]
 800f8c8:	68b8      	ldr	r0, [r7, #8]
 800f8ca:	f7f1 fb69 	bl	8000fa0 <__aeabi_fmul>
 800f8ce:	1c03      	adds	r3, r0, #0
 800f8d0:	1c19      	adds	r1, r3, #0
 800f8d2:	1c20      	adds	r0, r4, #0
 800f8d4:	f7f0 fff4 	bl	80008c0 <__aeabi_fadd>
 800f8d8:	1c03      	adds	r3, r0, #0
 800f8da:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	22a0      	movs	r2, #160	@ 0xa0
 800f8e0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	22a0      	movs	r2, #160	@ 0xa0
 800f8e6:	589b      	ldr	r3, [r3, r2]
}
 800f8e8:	1c18      	adds	r0, r3, #0
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	b007      	add	sp, #28
 800f8ee:	bd90      	pop	{r4, r7, pc}
 800f8f0:	be4ccccd 	.word	0xbe4ccccd
 800f8f4:	43f00000 	.word	0x43f00000
 800f8f8:	41a00000 	.word	0x41a00000

0800f8fc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	000a      	movs	r2, r1
 800f906:	1cbb      	adds	r3, r7, #2
 800f908:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800f90a:	230d      	movs	r3, #13
 800f90c:	18fb      	adds	r3, r7, r3
 800f90e:	22ff      	movs	r2, #255	@ 0xff
 800f910:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800f912:	230e      	movs	r3, #14
 800f914:	18fb      	adds	r3, r7, r3
 800f916:	2200      	movs	r2, #0
 800f918:	801a      	strh	r2, [r3, #0]
 800f91a:	e037      	b.n	800f98c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800f91c:	230e      	movs	r3, #14
 800f91e:	18fb      	adds	r3, r7, r3
 800f920:	881b      	ldrh	r3, [r3, #0]
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	18d3      	adds	r3, r2, r3
 800f926:	7819      	ldrb	r1, [r3, #0]
 800f928:	220d      	movs	r2, #13
 800f92a:	18bb      	adds	r3, r7, r2
 800f92c:	18ba      	adds	r2, r7, r2
 800f92e:	7812      	ldrb	r2, [r2, #0]
 800f930:	404a      	eors	r2, r1
 800f932:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800f934:	230c      	movs	r3, #12
 800f936:	18fb      	adds	r3, r7, r3
 800f938:	2208      	movs	r2, #8
 800f93a:	701a      	strb	r2, [r3, #0]
 800f93c:	e01b      	b.n	800f976 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800f93e:	210d      	movs	r1, #13
 800f940:	187b      	adds	r3, r7, r1
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	b25b      	sxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	da09      	bge.n	800f95e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800f94a:	187b      	adds	r3, r7, r1
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	005b      	lsls	r3, r3, #1
 800f950:	b25b      	sxtb	r3, r3
 800f952:	2231      	movs	r2, #49	@ 0x31
 800f954:	4053      	eors	r3, r2
 800f956:	b25a      	sxtb	r2, r3
 800f958:	187b      	adds	r3, r7, r1
 800f95a:	701a      	strb	r2, [r3, #0]
 800f95c:	e005      	b.n	800f96a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800f95e:	230d      	movs	r3, #13
 800f960:	18fa      	adds	r2, r7, r3
 800f962:	18fb      	adds	r3, r7, r3
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	18db      	adds	r3, r3, r3
 800f968:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800f96a:	220c      	movs	r2, #12
 800f96c:	18bb      	adds	r3, r7, r2
 800f96e:	18ba      	adds	r2, r7, r2
 800f970:	7812      	ldrb	r2, [r2, #0]
 800f972:	3a01      	subs	r2, #1
 800f974:	701a      	strb	r2, [r3, #0]
 800f976:	230c      	movs	r3, #12
 800f978:	18fb      	adds	r3, r7, r3
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d1de      	bne.n	800f93e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800f980:	220e      	movs	r2, #14
 800f982:	18bb      	adds	r3, r7, r2
 800f984:	18ba      	adds	r2, r7, r2
 800f986:	8812      	ldrh	r2, [r2, #0]
 800f988:	3201      	adds	r2, #1
 800f98a:	801a      	strh	r2, [r3, #0]
 800f98c:	230e      	movs	r3, #14
 800f98e:	18fa      	adds	r2, r7, r3
 800f990:	1cbb      	adds	r3, r7, #2
 800f992:	8812      	ldrh	r2, [r2, #0]
 800f994:	881b      	ldrh	r3, [r3, #0]
 800f996:	429a      	cmp	r2, r3
 800f998:	d3c0      	bcc.n	800f91c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800f99a:	230d      	movs	r3, #13
 800f99c:	18fb      	adds	r3, r7, r3
 800f99e:	781b      	ldrb	r3, [r3, #0]
}
 800f9a0:	0018      	movs	r0, r3
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	b004      	add	sp, #16
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	0008      	movs	r0, r1
 800f9b2:	0011      	movs	r1, r2
 800f9b4:	1cbb      	adds	r3, r7, #2
 800f9b6:	1c02      	adds	r2, r0, #0
 800f9b8:	801a      	strh	r2, [r3, #0]
 800f9ba:	1c7b      	adds	r3, r7, #1
 800f9bc:	1c0a      	adds	r2, r1, #0
 800f9be:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800f9c0:	1cbb      	adds	r3, r7, #2
 800f9c2:	881a      	ldrh	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	0011      	movs	r1, r2
 800f9c8:	0018      	movs	r0, r3
 800f9ca:	f7ff ff97 	bl	800f8fc <sensirion_i2c_generate_crc>
 800f9ce:	0003      	movs	r3, r0
 800f9d0:	001a      	movs	r2, r3
 800f9d2:	1c7b      	adds	r3, r7, #1
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d001      	beq.n	800f9de <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800f9da:	2301      	movs	r3, #1
 800f9dc:	e000      	b.n	800f9e0 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	0018      	movs	r0, r3
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	b002      	add	sp, #8
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	0008      	movs	r0, r1
 800f9f2:	0011      	movs	r1, r2
 800f9f4:	1cbb      	adds	r3, r7, #2
 800f9f6:	1c02      	adds	r2, r0, #0
 800f9f8:	801a      	strh	r2, [r3, #0]
 800f9fa:	003b      	movs	r3, r7
 800f9fc:	1c0a      	adds	r2, r1, #0
 800f9fe:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800fa00:	003b      	movs	r3, r7
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	0a1b      	lsrs	r3, r3, #8
 800fa06:	b299      	uxth	r1, r3
 800fa08:	1cbb      	adds	r3, r7, #2
 800fa0a:	881b      	ldrh	r3, [r3, #0]
 800fa0c:	1cba      	adds	r2, r7, #2
 800fa0e:	1c58      	adds	r0, r3, #1
 800fa10:	8010      	strh	r0, [r2, #0]
 800fa12:	001a      	movs	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	189b      	adds	r3, r3, r2
 800fa18:	b2ca      	uxtb	r2, r1
 800fa1a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800fa1c:	1cbb      	adds	r3, r7, #2
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	1cba      	adds	r2, r7, #2
 800fa22:	1c59      	adds	r1, r3, #1
 800fa24:	8011      	strh	r1, [r2, #0]
 800fa26:	001a      	movs	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	189b      	adds	r3, r3, r2
 800fa2c:	003a      	movs	r2, r7
 800fa2e:	8812      	ldrh	r2, [r2, #0]
 800fa30:	b2d2      	uxtb	r2, r2
 800fa32:	701a      	strb	r2, [r3, #0]
    return offset;
 800fa34:	1cbb      	adds	r3, r7, #2
 800fa36:	881b      	ldrh	r3, [r3, #0]
}
 800fa38:	0018      	movs	r0, r3
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	b002      	add	sp, #8
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800fa40:	b590      	push	{r4, r7, lr}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	0008      	movs	r0, r1
 800fa4a:	0011      	movs	r1, r2
 800fa4c:	1cbb      	adds	r3, r7, #2
 800fa4e:	1c02      	adds	r2, r0, #0
 800fa50:	801a      	strh	r2, [r3, #0]
 800fa52:	003b      	movs	r3, r7
 800fa54:	1c0a      	adds	r2, r1, #0
 800fa56:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800fa58:	003b      	movs	r3, r7
 800fa5a:	881b      	ldrh	r3, [r3, #0]
 800fa5c:	0a1b      	lsrs	r3, r3, #8
 800fa5e:	b299      	uxth	r1, r3
 800fa60:	1cbb      	adds	r3, r7, #2
 800fa62:	881b      	ldrh	r3, [r3, #0]
 800fa64:	1cba      	adds	r2, r7, #2
 800fa66:	1c58      	adds	r0, r3, #1
 800fa68:	8010      	strh	r0, [r2, #0]
 800fa6a:	001a      	movs	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	189b      	adds	r3, r3, r2
 800fa70:	b2ca      	uxtb	r2, r1
 800fa72:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800fa74:	1cbb      	adds	r3, r7, #2
 800fa76:	881b      	ldrh	r3, [r3, #0]
 800fa78:	1cba      	adds	r2, r7, #2
 800fa7a:	1c59      	adds	r1, r3, #1
 800fa7c:	8011      	strh	r1, [r2, #0]
 800fa7e:	001a      	movs	r2, r3
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	189b      	adds	r3, r3, r2
 800fa84:	003a      	movs	r2, r7
 800fa86:	8812      	ldrh	r2, [r2, #0]
 800fa88:	b2d2      	uxtb	r2, r2
 800fa8a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800fa8c:	1cbb      	adds	r3, r7, #2
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	3b02      	subs	r3, #2
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800fa96:	1cbb      	adds	r3, r7, #2
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	18d4      	adds	r4, r2, r3
 800fa9e:	2102      	movs	r1, #2
 800faa0:	f7ff ff2c 	bl	800f8fc <sensirion_i2c_generate_crc>
 800faa4:	0003      	movs	r3, r0
 800faa6:	7023      	strb	r3, [r4, #0]
    offset++;
 800faa8:	1cbb      	adds	r3, r7, #2
 800faaa:	881a      	ldrh	r2, [r3, #0]
 800faac:	1cbb      	adds	r3, r7, #2
 800faae:	3201      	adds	r2, #1
 800fab0:	801a      	strh	r2, [r3, #0]

    return offset;
 800fab2:	1cbb      	adds	r3, r7, #2
 800fab4:	881b      	ldrh	r3, [r3, #0]
}
 800fab6:	0018      	movs	r0, r3
 800fab8:	46bd      	mov	sp, r7
 800faba:	b003      	add	sp, #12
 800fabc:	bd90      	pop	{r4, r7, pc}

0800fabe <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b082      	sub	sp, #8
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
 800fac6:	0008      	movs	r0, r1
 800fac8:	0011      	movs	r1, r2
 800faca:	1cbb      	adds	r3, r7, #2
 800facc:	1c02      	adds	r2, r0, #0
 800face:	801a      	strh	r2, [r3, #0]
 800fad0:	003b      	movs	r3, r7
 800fad2:	1c0a      	adds	r2, r1, #0
 800fad4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800fad6:	003b      	movs	r3, r7
 800fad8:	881a      	ldrh	r2, [r3, #0]
 800fada:	1cbb      	adds	r3, r7, #2
 800fadc:	8819      	ldrh	r1, [r3, #0]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	0018      	movs	r0, r3
 800fae2:	f7ff ffad 	bl	800fa40 <sensirion_i2c_add_uint16_t_to_buffer>
 800fae6:	0003      	movs	r3, r0
}
 800fae8:	0018      	movs	r0, r3
 800faea:	46bd      	mov	sp, r7
 800faec:	b002      	add	sp, #8
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6039      	str	r1, [r7, #0]
 800faf8:	0011      	movs	r1, r2
 800fafa:	1dfb      	adds	r3, r7, #7
 800fafc:	1c02      	adds	r2, r0, #0
 800fafe:	701a      	strb	r2, [r3, #0]
 800fb00:	1d3b      	adds	r3, r7, #4
 800fb02:	1c0a      	adds	r2, r1, #0
 800fb04:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800fb06:	1d3b      	adds	r3, r7, #4
 800fb08:	881a      	ldrh	r2, [r3, #0]
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	1dfb      	adds	r3, r7, #7
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	0018      	movs	r0, r3
 800fb12:	f7fe f9db 	bl	800decc <sensirion_i2c_hal_write>
 800fb16:	0003      	movs	r3, r0
}
 800fb18:	0018      	movs	r0, r3
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	b002      	add	sp, #8
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800fb20:	b5b0      	push	{r4, r5, r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6039      	str	r1, [r7, #0]
 800fb28:	0011      	movs	r1, r2
 800fb2a:	1dfb      	adds	r3, r7, #7
 800fb2c:	1c02      	adds	r2, r0, #0
 800fb2e:	701a      	strb	r2, [r3, #0]
 800fb30:	1d3b      	adds	r3, r7, #4
 800fb32:	1c0a      	adds	r2, r1, #0
 800fb34:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800fb36:	1d3b      	adds	r3, r7, #4
 800fb38:	881b      	ldrh	r3, [r3, #0]
 800fb3a:	085b      	lsrs	r3, r3, #1
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	220a      	movs	r2, #10
 800fb40:	18ba      	adds	r2, r7, r2
 800fb42:	1c19      	adds	r1, r3, #0
 800fb44:	1c0b      	adds	r3, r1, #0
 800fb46:	18db      	adds	r3, r3, r3
 800fb48:	185b      	adds	r3, r3, r1
 800fb4a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800fb4c:	1d3b      	adds	r3, r7, #4
 800fb4e:	881b      	ldrh	r3, [r3, #0]
 800fb50:	2201      	movs	r2, #1
 800fb52:	4013      	ands	r3, r2
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d001      	beq.n	800fb5e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800fb5a:	2304      	movs	r3, #4
 800fb5c:	e06b      	b.n	800fc36 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800fb5e:	230a      	movs	r3, #10
 800fb60:	18fb      	adds	r3, r7, r3
 800fb62:	881a      	ldrh	r2, [r3, #0]
 800fb64:	6839      	ldr	r1, [r7, #0]
 800fb66:	1dfb      	adds	r3, r7, #7
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	f7fe f98e 	bl	800de8c <sensirion_i2c_hal_read>
 800fb70:	0003      	movs	r3, r0
 800fb72:	001a      	movs	r2, r3
 800fb74:	2108      	movs	r1, #8
 800fb76:	187b      	adds	r3, r7, r1
 800fb78:	801a      	strh	r2, [r3, #0]
    if (error) {
 800fb7a:	000a      	movs	r2, r1
 800fb7c:	18bb      	adds	r3, r7, r2
 800fb7e:	2100      	movs	r1, #0
 800fb80:	5e5b      	ldrsh	r3, [r3, r1]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d003      	beq.n	800fb8e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800fb86:	18bb      	adds	r3, r7, r2
 800fb88:	2200      	movs	r2, #0
 800fb8a:	5e9b      	ldrsh	r3, [r3, r2]
 800fb8c:	e053      	b.n	800fc36 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800fb8e:	230e      	movs	r3, #14
 800fb90:	18fb      	adds	r3, r7, r3
 800fb92:	2200      	movs	r2, #0
 800fb94:	801a      	strh	r2, [r3, #0]
 800fb96:	230c      	movs	r3, #12
 800fb98:	18fb      	adds	r3, r7, r3
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	801a      	strh	r2, [r3, #0]
 800fb9e:	e041      	b.n	800fc24 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800fba0:	210e      	movs	r1, #14
 800fba2:	187b      	adds	r3, r7, r1
 800fba4:	881b      	ldrh	r3, [r3, #0]
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800fbaa:	187b      	adds	r3, r7, r1
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	3302      	adds	r3, #2
 800fbb0:	683a      	ldr	r2, [r7, #0]
 800fbb2:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	001a      	movs	r2, r3
 800fbb8:	2102      	movs	r1, #2
 800fbba:	f7ff fef5 	bl	800f9a8 <sensirion_i2c_check_crc>
 800fbbe:	0003      	movs	r3, r0
 800fbc0:	001a      	movs	r2, r3
 800fbc2:	2108      	movs	r1, #8
 800fbc4:	187b      	adds	r3, r7, r1
 800fbc6:	801a      	strh	r2, [r3, #0]
        if (error) {
 800fbc8:	000a      	movs	r2, r1
 800fbca:	18bb      	adds	r3, r7, r2
 800fbcc:	2100      	movs	r1, #0
 800fbce:	5e5b      	ldrsh	r3, [r3, r1]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d003      	beq.n	800fbdc <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800fbd4:	18bb      	adds	r3, r7, r2
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	5e9b      	ldrsh	r3, [r3, r2]
 800fbda:	e02c      	b.n	800fc36 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800fbdc:	240e      	movs	r4, #14
 800fbde:	193b      	adds	r3, r7, r4
 800fbe0:	881b      	ldrh	r3, [r3, #0]
 800fbe2:	683a      	ldr	r2, [r7, #0]
 800fbe4:	18d2      	adds	r2, r2, r3
 800fbe6:	250c      	movs	r5, #12
 800fbe8:	197b      	adds	r3, r7, r5
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	1979      	adds	r1, r7, r5
 800fbee:	1c58      	adds	r0, r3, #1
 800fbf0:	8008      	strh	r0, [r1, #0]
 800fbf2:	0019      	movs	r1, r3
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	185b      	adds	r3, r3, r1
 800fbf8:	7812      	ldrb	r2, [r2, #0]
 800fbfa:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800fbfc:	193b      	adds	r3, r7, r4
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	3301      	adds	r3, #1
 800fc02:	683a      	ldr	r2, [r7, #0]
 800fc04:	18d2      	adds	r2, r2, r3
 800fc06:	197b      	adds	r3, r7, r5
 800fc08:	881b      	ldrh	r3, [r3, #0]
 800fc0a:	1979      	adds	r1, r7, r5
 800fc0c:	1c58      	adds	r0, r3, #1
 800fc0e:	8008      	strh	r0, [r1, #0]
 800fc10:	0019      	movs	r1, r3
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	185b      	adds	r3, r3, r1
 800fc16:	7812      	ldrb	r2, [r2, #0]
 800fc18:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800fc1a:	193b      	adds	r3, r7, r4
 800fc1c:	193a      	adds	r2, r7, r4
 800fc1e:	8812      	ldrh	r2, [r2, #0]
 800fc20:	3203      	adds	r2, #3
 800fc22:	801a      	strh	r2, [r3, #0]
 800fc24:	230e      	movs	r3, #14
 800fc26:	18fa      	adds	r2, r7, r3
 800fc28:	230a      	movs	r3, #10
 800fc2a:	18fb      	adds	r3, r7, r3
 800fc2c:	8812      	ldrh	r2, [r2, #0]
 800fc2e:	881b      	ldrh	r3, [r3, #0]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d3b5      	bcc.n	800fba0 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	0018      	movs	r0, r3
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	b004      	add	sp, #16
 800fc3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800fc40 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800fc40:	b590      	push	{r4, r7, lr}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6039      	str	r1, [r7, #0]
 800fc48:	0011      	movs	r1, r2
 800fc4a:	1dfb      	adds	r3, r7, #7
 800fc4c:	1c02      	adds	r2, r0, #0
 800fc4e:	701a      	strb	r2, [r3, #0]
 800fc50:	1dbb      	adds	r3, r7, #6
 800fc52:	1c0a      	adds	r2, r1, #0
 800fc54:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800fc56:	4b08      	ldr	r3, [pc, #32]	@ (800fc78 <ReadRegister+0x38>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d008      	beq.n	800fc70 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800fc5e:	4b06      	ldr	r3, [pc, #24]	@ (800fc78 <ReadRegister+0x38>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	1dba      	adds	r2, r7, #6
 800fc64:	7814      	ldrb	r4, [r2, #0]
 800fc66:	6839      	ldr	r1, [r7, #0]
 800fc68:	1dfa      	adds	r2, r7, #7
 800fc6a:	7810      	ldrb	r0, [r2, #0]
 800fc6c:	0022      	movs	r2, r4
 800fc6e:	4798      	blx	r3
  }
}
 800fc70:	46c0      	nop			@ (mov r8, r8)
 800fc72:	46bd      	mov	sp, r7
 800fc74:	b003      	add	sp, #12
 800fc76:	bd90      	pop	{r4, r7, pc}
 800fc78:	20000f0c 	.word	0x20000f0c

0800fc7c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800fc7c:	b590      	push	{r4, r7, lr}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6039      	str	r1, [r7, #0]
 800fc84:	0011      	movs	r1, r2
 800fc86:	1dfb      	adds	r3, r7, #7
 800fc88:	1c02      	adds	r2, r0, #0
 800fc8a:	701a      	strb	r2, [r3, #0]
 800fc8c:	1dbb      	adds	r3, r7, #6
 800fc8e:	1c0a      	adds	r2, r1, #0
 800fc90:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800fc92:	4b08      	ldr	r3, [pc, #32]	@ (800fcb4 <WriteRegister+0x38>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d008      	beq.n	800fcac <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800fc9a:	4b06      	ldr	r3, [pc, #24]	@ (800fcb4 <WriteRegister+0x38>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	1dba      	adds	r2, r7, #6
 800fca0:	7814      	ldrb	r4, [r2, #0]
 800fca2:	6839      	ldr	r1, [r7, #0]
 800fca4:	1dfa      	adds	r2, r7, #7
 800fca6:	7810      	ldrb	r0, [r2, #0]
 800fca8:	0022      	movs	r2, r4
 800fcaa:	4798      	blx	r3
  }
}
 800fcac:	46c0      	nop			@ (mov r8, r8)
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	b003      	add	sp, #12
 800fcb2:	bd90      	pop	{r4, r7, pc}
 800fcb4:	20000f10 	.word	0x20000f10

0800fcb8 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800fcc0:	f003 fd00 	bl	80136c4 <HAL_GetTick>
 800fcc4:	0002      	movs	r2, r0
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	18d2      	adds	r2, r2, r3
 800fcca:	4b03      	ldr	r3, [pc, #12]	@ (800fcd8 <setSGP40TimeStamp+0x20>)
 800fccc:	601a      	str	r2, [r3, #0]
}
 800fcce:	46c0      	nop			@ (mov r8, r8)
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	b002      	add	sp, #8
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	46c0      	nop			@ (mov r8, r8)
 800fcd8:	20000f20 	.word	0x20000f20

0800fcdc <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800fce0:	4b02      	ldr	r3, [pc, #8]	@ (800fcec <ResetSGP40samplecounter+0x10>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	701a      	strb	r2, [r3, #0]
}
 800fce6:	46c0      	nop			@ (mov r8, r8)
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	20000f1e 	.word	0x20000f1e

0800fcf0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800fcfa:	4b07      	ldr	r3, [pc, #28]	@ (800fd18 <SGP_Init+0x28>)
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800fd00:	4b06      	ldr	r3, [pc, #24]	@ (800fd1c <SGP_Init+0x2c>)
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800fd06:	4b06      	ldr	r3, [pc, #24]	@ (800fd20 <SGP_Init+0x30>)
 800fd08:	2100      	movs	r1, #0
 800fd0a:	0018      	movs	r0, r3
 800fd0c:	f7fe ff72 	bl	800ebf4 <GasIndexAlgorithm_init>
}
 800fd10:	46c0      	nop			@ (mov r8, r8)
 800fd12:	46bd      	mov	sp, r7
 800fd14:	b002      	add	sp, #8
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	20000f0c 	.word	0x20000f0c
 800fd1c:	20000f10 	.word	0x20000f10
 800fd20:	20000f28 	.word	0x20000f28

0800fd24 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800fd24:	b580      	push	{r7, lr}
 800fd26:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800fd28:	4b07      	ldr	r3, [pc, #28]	@ (800fd48 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d004      	beq.n	800fd3a <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800fd30:	4b06      	ldr	r3, [pc, #24]	@ (800fd4c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800fd32:	22fe      	movs	r2, #254	@ 0xfe
 800fd34:	0592      	lsls	r2, r2, #22
 800fd36:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 800fd38:	e002      	b.n	800fd40 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800fd3a:	4b04      	ldr	r3, [pc, #16]	@ (800fd4c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800fd3c:	4a04      	ldr	r2, [pc, #16]	@ (800fd50 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800fd3e:	605a      	str	r2, [r3, #4]
}
 800fd40:	46c0      	nop			@ (mov r8, r8)
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	46c0      	nop			@ (mov r8, r8)
 800fd48:	20001e75 	.word	0x20001e75
 800fd4c:	20000f28 	.word	0x20000f28
 800fd50:	44610000 	.word	0x44610000

0800fd54 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800fd54:	b580      	push	{r7, lr}
 800fd56:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800fd58:	4b13      	ldr	r3, [pc, #76]	@ (800fda8 <SGP_StartMeasurement+0x54>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00d      	beq.n	800fd7c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fd60:	4b12      	ldr	r3, [pc, #72]	@ (800fdac <SGP_StartMeasurement+0x58>)
 800fd62:	2208      	movs	r2, #8
 800fd64:	0019      	movs	r1, r3
 800fd66:	2059      	movs	r0, #89	@ 0x59
 800fd68:	f7ff ff88 	bl	800fc7c <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800fd6c:	f003 fcaa 	bl	80136c4 <HAL_GetTick>
 800fd70:	0003      	movs	r3, r0
 800fd72:	331e      	adds	r3, #30
 800fd74:	001a      	movs	r2, r3
 800fd76:	4b0e      	ldr	r3, [pc, #56]	@ (800fdb0 <SGP_StartMeasurement+0x5c>)
 800fd78:	601a      	str	r2, [r3, #0]
 800fd7a:	e00c      	b.n	800fd96 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fdb4 <SGP_StartMeasurement+0x60>)
 800fd7e:	2208      	movs	r2, #8
 800fd80:	0019      	movs	r1, r3
 800fd82:	2059      	movs	r0, #89	@ 0x59
 800fd84:	f7ff ff7a 	bl	800fc7c <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800fd88:	f003 fc9c 	bl	80136c4 <HAL_GetTick>
 800fd8c:	0003      	movs	r3, r0
 800fd8e:	33aa      	adds	r3, #170	@ 0xaa
 800fd90:	001a      	movs	r2, r3
 800fd92:	4b09      	ldr	r3, [pc, #36]	@ (800fdb8 <SGP_StartMeasurement+0x64>)
 800fd94:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800fd96:	4b09      	ldr	r3, [pc, #36]	@ (800fdbc <SGP_StartMeasurement+0x68>)
 800fd98:	2200      	movs	r2, #0
 800fd9a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800fd9c:	4b08      	ldr	r3, [pc, #32]	@ (800fdc0 <SGP_StartMeasurement+0x6c>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	701a      	strb	r2, [r3, #0]
}
 800fda2:	46c0      	nop			@ (mov r8, r8)
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	20000fd0 	.word	0x20000fd0
 800fdac:	200000b0 	.word	0x200000b0
 800fdb0:	200000c4 	.word	0x200000c4
 800fdb4:	200000a8 	.word	0x200000a8
 800fdb8:	200000bc 	.word	0x200000bc
 800fdbc:	20000f24 	.word	0x20000f24
 800fdc0:	20000f25 	.word	0x20000f25

0800fdc4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800fdc8:	4b04      	ldr	r3, [pc, #16]	@ (800fddc <SGP_HeatedUp+0x18>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	0018      	movs	r0, r3
 800fdce:	f002 fee5 	bl	8012b9c <TimestampIsReached>
 800fdd2:	0003      	movs	r3, r0
}
 800fdd4:	0018      	movs	r0, r3
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd80      	pop	{r7, pc}
 800fdda:	46c0      	nop			@ (mov r8, r8)
 800fddc:	200000bc 	.word	0x200000bc

0800fde0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800fde0:	b580      	push	{r7, lr}
 800fde2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800fde4:	4b04      	ldr	r3, [pc, #16]	@ (800fdf8 <SGP_MeasurementReady+0x18>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	0018      	movs	r0, r3
 800fdea:	f002 fed7 	bl	8012b9c <TimestampIsReached>
 800fdee:	0003      	movs	r3, r0
}
 800fdf0:	0018      	movs	r0, r3
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	46c0      	nop			@ (mov r8, r8)
 800fdf8:	200000c4 	.word	0x200000c4

0800fdfc <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800fe00:	4b04      	ldr	r3, [pc, #16]	@ (800fe14 <SGP_MeasurementDone+0x18>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	0018      	movs	r0, r3
 800fe06:	f002 fec9 	bl	8012b9c <TimestampIsReached>
 800fe0a:	0003      	movs	r3, r0
}
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	46c0      	nop			@ (mov r8, r8)
 800fe14:	200000c0 	.word	0x200000c0

0800fe18 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800fe1c:	4b04      	ldr	r3, [pc, #16]	@ (800fe30 <SGP_TurnHeaterOff+0x18>)
 800fe1e:	2202      	movs	r2, #2
 800fe20:	0019      	movs	r1, r3
 800fe22:	2059      	movs	r0, #89	@ 0x59
 800fe24:	f7ff ff2a 	bl	800fc7c <WriteRegister>
}
 800fe28:	46c0      	nop			@ (mov r8, r8)
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	46c0      	nop			@ (mov r8, r8)
 800fe30:	200000a0 	.word	0x200000a0

0800fe34 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800fe34:	b590      	push	{r4, r7, lr}
 800fe36:	b087      	sub	sp, #28
 800fe38:	af02      	add	r7, sp, #8
 800fe3a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800fe3c:	f7ff ffc2 	bl	800fdc4 <SGP_HeatedUp>
 800fe40:	1e03      	subs	r3, r0, #0
 800fe42:	d032      	beq.n	800feaa <SGP_GetMeasurementValues+0x76>
 800fe44:	4b7f      	ldr	r3, [pc, #508]	@ (8010044 <SGP_GetMeasurementValues+0x210>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	4053      	eors	r3, r2
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d02b      	beq.n	800feaa <SGP_GetMeasurementValues+0x76>
 800fe52:	4b7d      	ldr	r3, [pc, #500]	@ (8010048 <SGP_GetMeasurementValues+0x214>)
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	2201      	movs	r2, #1
 800fe58:	4053      	eors	r3, r2
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d024      	beq.n	800feaa <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800fe60:	4b78      	ldr	r3, [pc, #480]	@ (8010044 <SGP_GetMeasurementValues+0x210>)
 800fe62:	2201      	movs	r2, #1
 800fe64:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800fe66:	4b79      	ldr	r3, [pc, #484]	@ (801004c <SGP_GetMeasurementValues+0x218>)
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00d      	beq.n	800fe8a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fe6e:	4b78      	ldr	r3, [pc, #480]	@ (8010050 <SGP_GetMeasurementValues+0x21c>)
 800fe70:	2208      	movs	r2, #8
 800fe72:	0019      	movs	r1, r3
 800fe74:	2059      	movs	r0, #89	@ 0x59
 800fe76:	f7ff ff01 	bl	800fc7c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800fe7a:	f003 fc23 	bl	80136c4 <HAL_GetTick>
 800fe7e:	0003      	movs	r3, r0
 800fe80:	331e      	adds	r3, #30
 800fe82:	001a      	movs	r2, r3
 800fe84:	4b73      	ldr	r3, [pc, #460]	@ (8010054 <SGP_GetMeasurementValues+0x220>)
 800fe86:	601a      	str	r2, [r3, #0]
 800fe88:	e00c      	b.n	800fea4 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800fe8a:	4b73      	ldr	r3, [pc, #460]	@ (8010058 <SGP_GetMeasurementValues+0x224>)
 800fe8c:	2208      	movs	r2, #8
 800fe8e:	0019      	movs	r1, r3
 800fe90:	2059      	movs	r0, #89	@ 0x59
 800fe92:	f7ff fef3 	bl	800fc7c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800fe96:	f003 fc15 	bl	80136c4 <HAL_GetTick>
 800fe9a:	0003      	movs	r3, r0
 800fe9c:	331e      	adds	r3, #30
 800fe9e:	001a      	movs	r2, r3
 800fea0:	4b6c      	ldr	r3, [pc, #432]	@ (8010054 <SGP_GetMeasurementValues+0x220>)
 800fea2:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800fea4:	4b68      	ldr	r3, [pc, #416]	@ (8010048 <SGP_GetMeasurementValues+0x214>)
 800fea6:	2201      	movs	r2, #1
 800fea8:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800feaa:	4b66      	ldr	r3, [pc, #408]	@ (8010044 <SGP_GetMeasurementValues+0x210>)
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d100      	bne.n	800feb4 <SGP_GetMeasurementValues+0x80>
 800feb2:	e0ab      	b.n	801000c <SGP_GetMeasurementValues+0x1d8>
 800feb4:	f7ff ff94 	bl	800fde0 <SGP_MeasurementReady>
 800feb8:	1e03      	subs	r3, r0, #0
 800feba:	d100      	bne.n	800febe <SGP_GetMeasurementValues+0x8a>
 800febc:	e0a6      	b.n	801000c <SGP_GetMeasurementValues+0x1d8>
 800febe:	4b67      	ldr	r3, [pc, #412]	@ (801005c <SGP_GetMeasurementValues+0x228>)
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2201      	movs	r2, #1
 800fec4:	4053      	eors	r3, r2
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d100      	bne.n	800fece <SGP_GetMeasurementValues+0x9a>
 800fecc:	e09e      	b.n	801000c <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800fece:	4b63      	ldr	r3, [pc, #396]	@ (801005c <SGP_GetMeasurementValues+0x228>)
 800fed0:	2201      	movs	r2, #1
 800fed2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800fed4:	4b62      	ldr	r3, [pc, #392]	@ (8010060 <SGP_GetMeasurementValues+0x22c>)
 800fed6:	2203      	movs	r2, #3
 800fed8:	0019      	movs	r1, r3
 800feda:	2059      	movs	r0, #89	@ 0x59
 800fedc:	f7ff feb0 	bl	800fc40 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800fee0:	4b5f      	ldr	r3, [pc, #380]	@ (8010060 <SGP_GetMeasurementValues+0x22c>)
 800fee2:	2203      	movs	r2, #3
 800fee4:	2103      	movs	r1, #3
 800fee6:	0018      	movs	r0, r3
 800fee8:	f000 f918 	bl	801011c <CheckCRC>
 800feec:	0003      	movs	r3, r0
 800feee:	001a      	movs	r2, r3
 800fef0:	2301      	movs	r3, #1
 800fef2:	4053      	eors	r3, r2
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d02a      	beq.n	800ff50 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800fefa:	4a5a      	ldr	r2, [pc, #360]	@ (8010064 <SGP_GetMeasurementValues+0x230>)
 800fefc:	4b5a      	ldr	r3, [pc, #360]	@ (8010068 <SGP_GetMeasurementValues+0x234>)
 800fefe:	0019      	movs	r1, r3
 800ff00:	2001      	movs	r0, #1
 800ff02:	f002 fea1 	bl	8012c48 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800ff06:	4a59      	ldr	r2, [pc, #356]	@ (801006c <SGP_GetMeasurementValues+0x238>)
 800ff08:	4b59      	ldr	r3, [pc, #356]	@ (8010070 <SGP_GetMeasurementValues+0x23c>)
 800ff0a:	0019      	movs	r1, r3
 800ff0c:	2002      	movs	r0, #2
 800ff0e:	f002 fe9b 	bl	8012c48 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ff12:	230f      	movs	r3, #15
 800ff14:	18fb      	adds	r3, r7, r3
 800ff16:	2200      	movs	r2, #0
 800ff18:	701a      	strb	r2, [r3, #0]
 800ff1a:	e012      	b.n	800ff42 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ff1c:	240f      	movs	r4, #15
 800ff1e:	193b      	adds	r3, r7, r4
 800ff20:	7818      	ldrb	r0, [r3, #0]
 800ff22:	193b      	adds	r3, r7, r4
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	4a4e      	ldr	r2, [pc, #312]	@ (8010060 <SGP_GetMeasurementValues+0x22c>)
 800ff28:	5cd3      	ldrb	r3, [r2, r3]
 800ff2a:	4a52      	ldr	r2, [pc, #328]	@ (8010074 <SGP_GetMeasurementValues+0x240>)
 800ff2c:	4952      	ldr	r1, [pc, #328]	@ (8010078 <SGP_GetMeasurementValues+0x244>)
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	0003      	movs	r3, r0
 800ff32:	2003      	movs	r0, #3
 800ff34:	f002 fe88 	bl	8012c48 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ff38:	193b      	adds	r3, r7, r4
 800ff3a:	781a      	ldrb	r2, [r3, #0]
 800ff3c:	193b      	adds	r3, r7, r4
 800ff3e:	3201      	adds	r2, #1
 800ff40:	701a      	strb	r2, [r3, #0]
 800ff42:	230f      	movs	r3, #15
 800ff44:	18fb      	adds	r3, r7, r3
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	2b02      	cmp	r3, #2
 800ff4a:	d9e7      	bls.n	800ff1c <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e075      	b.n	801003c <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800ff50:	f003 fbb8 	bl	80136c4 <HAL_GetTick>
 800ff54:	0003      	movs	r3, r0
 800ff56:	22fa      	movs	r2, #250	@ 0xfa
 800ff58:	0092      	lsls	r2, r2, #2
 800ff5a:	189a      	adds	r2, r3, r2
 800ff5c:	4b47      	ldr	r3, [pc, #284]	@ (801007c <SGP_GetMeasurementValues+0x248>)
 800ff5e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800ff60:	f7ff ff5a 	bl	800fe18 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800ff64:	4b46      	ldr	r3, [pc, #280]	@ (8010080 <SGP_GetMeasurementValues+0x24c>)
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	4b44      	ldr	r3, [pc, #272]	@ (8010080 <SGP_GetMeasurementValues+0x24c>)
 800ff6e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800ff70:	4b43      	ldr	r3, [pc, #268]	@ (8010080 <SGP_GetMeasurementValues+0x24c>)
 800ff72:	781a      	ldrb	r2, [r3, #0]
 800ff74:	4b43      	ldr	r3, [pc, #268]	@ (8010084 <SGP_GetMeasurementValues+0x250>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d347      	bcc.n	801000c <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800ff7c:	4b38      	ldr	r3, [pc, #224]	@ (8010060 <SGP_GetMeasurementValues+0x22c>)
 800ff7e:	785b      	ldrb	r3, [r3, #1]
 800ff80:	021b      	lsls	r3, r3, #8
 800ff82:	b21a      	sxth	r2, r3
 800ff84:	4b36      	ldr	r3, [pc, #216]	@ (8010060 <SGP_GetMeasurementValues+0x22c>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	b21b      	sxth	r3, r3
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	b21a      	sxth	r2, r3
 800ff8e:	240c      	movs	r4, #12
 800ff90:	193b      	adds	r3, r7, r4
 800ff92:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800ff98:	193b      	adds	r3, r7, r4
 800ff9a:	8819      	ldrh	r1, [r3, #0]
 800ff9c:	2308      	movs	r3, #8
 800ff9e:	18fa      	adds	r2, r7, r3
 800ffa0:	4b39      	ldr	r3, [pc, #228]	@ (8010088 <SGP_GetMeasurementValues+0x254>)
 800ffa2:	0018      	movs	r0, r3
 800ffa4:	f7fe fe88 	bl	800ecb8 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800ffa8:	68ba      	ldr	r2, [r7, #8]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800ffae:	4b37      	ldr	r3, [pc, #220]	@ (801008c <SGP_GetMeasurementValues+0x258>)
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	4b35      	ldr	r3, [pc, #212]	@ (801008c <SGP_GetMeasurementValues+0x258>)
 800ffb8:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800ffba:	4b34      	ldr	r3, [pc, #208]	@ (801008c <SGP_GetMeasurementValues+0x258>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d10d      	bne.n	800ffde <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800ffc2:	193b      	adds	r3, r7, r4
 800ffc4:	881b      	ldrh	r3, [r3, #0]
 800ffc6:	4a32      	ldr	r2, [pc, #200]	@ (8010090 <SGP_GetMeasurementValues+0x25c>)
 800ffc8:	492b      	ldr	r1, [pc, #172]	@ (8010078 <SGP_GetMeasurementValues+0x244>)
 800ffca:	2003      	movs	r0, #3
 800ffcc:	f002 fe3c 	bl	8012c48 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	4a30      	ldr	r2, [pc, #192]	@ (8010094 <SGP_GetMeasurementValues+0x260>)
 800ffd4:	4928      	ldr	r1, [pc, #160]	@ (8010078 <SGP_GetMeasurementValues+0x244>)
 800ffd6:	2003      	movs	r0, #3
 800ffd8:	f002 fe36 	bl	8012c48 <CreateLine>
 800ffdc:	e006      	b.n	800ffec <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800ffde:	4b2b      	ldr	r3, [pc, #172]	@ (801008c <SGP_GetMeasurementValues+0x258>)
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	2b0b      	cmp	r3, #11
 800ffe4:	d102      	bne.n	800ffec <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800ffe6:	4b29      	ldr	r3, [pc, #164]	@ (801008c <SGP_GetMeasurementValues+0x258>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	b29b      	uxth	r3, r3
 800fff0:	0018      	movs	r0, r3
 800fff2:	f001 fdc1 	bl	8011b78 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800fff6:	4b22      	ldr	r3, [pc, #136]	@ (8010080 <SGP_GetMeasurementValues+0x24c>)
 800fff8:	2200      	movs	r2, #0
 800fffa:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800fffc:	4b13      	ldr	r3, [pc, #76]	@ (801004c <SGP_GetMeasurementValues+0x218>)
 800fffe:	2200      	movs	r2, #0
 8010000:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8010002:	4b11      	ldr	r3, [pc, #68]	@ (8010048 <SGP_GetMeasurementValues+0x214>)
 8010004:	2200      	movs	r2, #0
 8010006:	701a      	strb	r2, [r3, #0]
      return true;
 8010008:	2301      	movs	r3, #1
 801000a:	e017      	b.n	801003c <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 801000c:	f7ff fef6 	bl	800fdfc <SGP_MeasurementDone>
 8010010:	1e03      	subs	r3, r0, #0
 8010012:	d012      	beq.n	801003a <SGP_GetMeasurementValues+0x206>
 8010014:	4b0b      	ldr	r3, [pc, #44]	@ (8010044 <SGP_GetMeasurementValues+0x210>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00e      	beq.n	801003a <SGP_GetMeasurementValues+0x206>
 801001c:	4b0f      	ldr	r3, [pc, #60]	@ (801005c <SGP_GetMeasurementValues+0x228>)
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00a      	beq.n	801003a <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8010024:	4a1c      	ldr	r2, [pc, #112]	@ (8010098 <SGP_GetMeasurementValues+0x264>)
 8010026:	4b14      	ldr	r3, [pc, #80]	@ (8010078 <SGP_GetMeasurementValues+0x244>)
 8010028:	0019      	movs	r1, r3
 801002a:	2003      	movs	r0, #3
 801002c:	f002 fe0c 	bl	8012c48 <CreateLine>
    SGP_StartMeasurement();
 8010030:	f7ff fe90 	bl	800fd54 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8010034:	4b04      	ldr	r3, [pc, #16]	@ (8010048 <SGP_GetMeasurementValues+0x214>)
 8010036:	2200      	movs	r2, #0
 8010038:	701a      	strb	r2, [r3, #0]
  }
  return false;
 801003a:	2300      	movs	r3, #0
}
 801003c:	0018      	movs	r0, r3
 801003e:	46bd      	mov	sp, r7
 8010040:	b005      	add	sp, #20
 8010042:	bd90      	pop	{r4, r7, pc}
 8010044:	20000f24 	.word	0x20000f24
 8010048:	20000fd1 	.word	0x20000fd1
 801004c:	20000fd0 	.word	0x20000fd0
 8010050:	200000b0 	.word	0x200000b0
 8010054:	200000c4 	.word	0x200000c4
 8010058:	200000a8 	.word	0x200000a8
 801005c:	20000f25 	.word	0x20000f25
 8010060:	20000f14 	.word	0x20000f14
 8010064:	0802ca80 	.word	0x0802ca80
 8010068:	0802caa8 	.word	0x0802caa8
 801006c:	0802caac 	.word	0x0802caac
 8010070:	0802cacc 	.word	0x0802cacc
 8010074:	0802cad0 	.word	0x0802cad0
 8010078:	0802caf0 	.word	0x0802caf0
 801007c:	200000c0 	.word	0x200000c0
 8010080:	20000f1d 	.word	0x20000f1d
 8010084:	200000ba 	.word	0x200000ba
 8010088:	20000f28 	.word	0x20000f28
 801008c:	20000f1e 	.word	0x20000f1e
 8010090:	0802caf4 	.word	0x0802caf4
 8010094:	0802cb10 	.word	0x0802cb10
 8010098:	0802cb2c 	.word	0x0802cb2c

0801009c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80100a2:	4b1a      	ldr	r3, [pc, #104]	@ (801010c <SGP_DeviceConnected+0x70>)
 80100a4:	2202      	movs	r2, #2
 80100a6:	0019      	movs	r1, r3
 80100a8:	2059      	movs	r0, #89	@ 0x59
 80100aa:	f7ff fde7 	bl	800fc7c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80100ae:	2001      	movs	r0, #1
 80100b0:	f003 fb12 	bl	80136d8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80100b4:	4b16      	ldr	r3, [pc, #88]	@ (8010110 <SGP_DeviceConnected+0x74>)
 80100b6:	2209      	movs	r2, #9
 80100b8:	0019      	movs	r1, r3
 80100ba:	2059      	movs	r0, #89	@ 0x59
 80100bc:	f7ff fdc0 	bl	800fc40 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80100c0:	1dfb      	adds	r3, r7, #7
 80100c2:	2200      	movs	r2, #0
 80100c4:	701a      	strb	r2, [r3, #0]
 80100c6:	e011      	b.n	80100ec <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80100c8:	1dfb      	adds	r3, r7, #7
 80100ca:	7818      	ldrb	r0, [r3, #0]
 80100cc:	1dfb      	adds	r3, r7, #7
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	4a0f      	ldr	r2, [pc, #60]	@ (8010110 <SGP_DeviceConnected+0x74>)
 80100d2:	5cd3      	ldrb	r3, [r2, r3]
 80100d4:	4a0f      	ldr	r2, [pc, #60]	@ (8010114 <SGP_DeviceConnected+0x78>)
 80100d6:	4910      	ldr	r1, [pc, #64]	@ (8010118 <SGP_DeviceConnected+0x7c>)
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	0003      	movs	r3, r0
 80100dc:	2002      	movs	r0, #2
 80100de:	f002 fdb3 	bl	8012c48 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80100e2:	1dfb      	adds	r3, r7, #7
 80100e4:	781a      	ldrb	r2, [r3, #0]
 80100e6:	1dfb      	adds	r3, r7, #7
 80100e8:	3201      	adds	r2, #1
 80100ea:	701a      	strb	r2, [r3, #0]
 80100ec:	1dfb      	adds	r3, r7, #7
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	2b08      	cmp	r3, #8
 80100f2:	d9e9      	bls.n	80100c8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80100f4:	4b06      	ldr	r3, [pc, #24]	@ (8010110 <SGP_DeviceConnected+0x74>)
 80100f6:	2203      	movs	r2, #3
 80100f8:	2109      	movs	r1, #9
 80100fa:	0018      	movs	r0, r3
 80100fc:	f000 f80e 	bl	801011c <CheckCRC>
 8010100:	0003      	movs	r3, r0
}
 8010102:	0018      	movs	r0, r3
 8010104:	46bd      	mov	sp, r7
 8010106:	b002      	add	sp, #8
 8010108:	bd80      	pop	{r7, pc}
 801010a:	46c0      	nop			@ (mov r8, r8)
 801010c:	200000a4 	.word	0x200000a4
 8010110:	20000f14 	.word	0x20000f14
 8010114:	0802cb4c 	.word	0x0802cb4c
 8010118:	0802cacc 	.word	0x0802cacc

0801011c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 801011c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801011e:	b08f      	sub	sp, #60	@ 0x3c
 8010120:	af00      	add	r7, sp, #0
 8010122:	6278      	str	r0, [r7, #36]	@ 0x24
 8010124:	0008      	movs	r0, r1
 8010126:	0011      	movs	r1, r2
 8010128:	2323      	movs	r3, #35	@ 0x23
 801012a:	18fb      	adds	r3, r7, r3
 801012c:	1c02      	adds	r2, r0, #0
 801012e:	701a      	strb	r2, [r3, #0]
 8010130:	2322      	movs	r3, #34	@ 0x22
 8010132:	18fb      	adds	r3, r7, r3
 8010134:	1c0a      	adds	r2, r1, #0
 8010136:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010138:	2317      	movs	r3, #23
 801013a:	2220      	movs	r2, #32
 801013c:	189b      	adds	r3, r3, r2
 801013e:	19db      	adds	r3, r3, r7
 8010140:	2200      	movs	r2, #0
 8010142:	701a      	strb	r2, [r3, #0]
 8010144:	e09f      	b.n	8010286 <CheckCRC+0x16a>
 8010146:	466b      	mov	r3, sp
 8010148:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 801014a:	2322      	movs	r3, #34	@ 0x22
 801014c:	18fb      	adds	r3, r7, r3
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	001a      	movs	r2, r3
 8010152:	3a01      	subs	r2, #1
 8010154:	633a      	str	r2, [r7, #48]	@ 0x30
 8010156:	60bb      	str	r3, [r7, #8]
 8010158:	2200      	movs	r2, #0
 801015a:	60fa      	str	r2, [r7, #12]
 801015c:	68b8      	ldr	r0, [r7, #8]
 801015e:	68f9      	ldr	r1, [r7, #12]
 8010160:	0002      	movs	r2, r0
 8010162:	0f52      	lsrs	r2, r2, #29
 8010164:	000c      	movs	r4, r1
 8010166:	00e4      	lsls	r4, r4, #3
 8010168:	61fc      	str	r4, [r7, #28]
 801016a:	69fc      	ldr	r4, [r7, #28]
 801016c:	4314      	orrs	r4, r2
 801016e:	61fc      	str	r4, [r7, #28]
 8010170:	0002      	movs	r2, r0
 8010172:	00d2      	lsls	r2, r2, #3
 8010174:	61ba      	str	r2, [r7, #24]
 8010176:	603b      	str	r3, [r7, #0]
 8010178:	2200      	movs	r2, #0
 801017a:	607a      	str	r2, [r7, #4]
 801017c:	6838      	ldr	r0, [r7, #0]
 801017e:	6879      	ldr	r1, [r7, #4]
 8010180:	0002      	movs	r2, r0
 8010182:	0f52      	lsrs	r2, r2, #29
 8010184:	000c      	movs	r4, r1
 8010186:	00e4      	lsls	r4, r4, #3
 8010188:	617c      	str	r4, [r7, #20]
 801018a:	697c      	ldr	r4, [r7, #20]
 801018c:	4314      	orrs	r4, r2
 801018e:	617c      	str	r4, [r7, #20]
 8010190:	0002      	movs	r2, r0
 8010192:	00d2      	lsls	r2, r2, #3
 8010194:	613a      	str	r2, [r7, #16]
 8010196:	3307      	adds	r3, #7
 8010198:	08db      	lsrs	r3, r3, #3
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	466a      	mov	r2, sp
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	469d      	mov	sp, r3
 80101a2:	466b      	mov	r3, sp
 80101a4:	3300      	adds	r3, #0
 80101a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80101a8:	2316      	movs	r3, #22
 80101aa:	2220      	movs	r2, #32
 80101ac:	189b      	adds	r3, r3, r2
 80101ae:	19db      	adds	r3, r3, r7
 80101b0:	2200      	movs	r2, #0
 80101b2:	701a      	strb	r2, [r3, #0]
 80101b4:	e01e      	b.n	80101f4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80101b6:	2317      	movs	r3, #23
 80101b8:	2220      	movs	r2, #32
 80101ba:	189b      	adds	r3, r3, r2
 80101bc:	19db      	adds	r3, r3, r7
 80101be:	781a      	ldrb	r2, [r3, #0]
 80101c0:	2116      	movs	r1, #22
 80101c2:	2320      	movs	r3, #32
 80101c4:	18cb      	adds	r3, r1, r3
 80101c6:	19db      	adds	r3, r3, r7
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	18d3      	adds	r3, r2, r3
 80101cc:	001a      	movs	r2, r3
 80101ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d0:	189a      	adds	r2, r3, r2
 80101d2:	0008      	movs	r0, r1
 80101d4:	2320      	movs	r3, #32
 80101d6:	18cb      	adds	r3, r1, r3
 80101d8:	19db      	adds	r3, r3, r7
 80101da:	781b      	ldrb	r3, [r3, #0]
 80101dc:	7811      	ldrb	r1, [r2, #0]
 80101de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101e0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80101e2:	2320      	movs	r3, #32
 80101e4:	18c3      	adds	r3, r0, r3
 80101e6:	19db      	adds	r3, r3, r7
 80101e8:	781a      	ldrb	r2, [r3, #0]
 80101ea:	2320      	movs	r3, #32
 80101ec:	18c3      	adds	r3, r0, r3
 80101ee:	19db      	adds	r3, r3, r7
 80101f0:	3201      	adds	r2, #1
 80101f2:	701a      	strb	r2, [r3, #0]
 80101f4:	2316      	movs	r3, #22
 80101f6:	2220      	movs	r2, #32
 80101f8:	189b      	adds	r3, r3, r2
 80101fa:	19da      	adds	r2, r3, r7
 80101fc:	2322      	movs	r3, #34	@ 0x22
 80101fe:	18fb      	adds	r3, r7, r3
 8010200:	7812      	ldrb	r2, [r2, #0]
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	429a      	cmp	r2, r3
 8010206:	d3d6      	bcc.n	80101b6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8010208:	2417      	movs	r4, #23
 801020a:	2320      	movs	r3, #32
 801020c:	18e3      	adds	r3, r4, r3
 801020e:	19db      	adds	r3, r3, r7
 8010210:	781a      	ldrb	r2, [r3, #0]
 8010212:	2322      	movs	r3, #34	@ 0x22
 8010214:	18fb      	adds	r3, r7, r3
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	18d3      	adds	r3, r2, r3
 801021a:	3b01      	subs	r3, #1
 801021c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801021e:	18d2      	adds	r2, r2, r3
 8010220:	250b      	movs	r5, #11
 8010222:	2320      	movs	r3, #32
 8010224:	18eb      	adds	r3, r5, r3
 8010226:	19db      	adds	r3, r3, r7
 8010228:	7812      	ldrb	r2, [r2, #0]
 801022a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 801022c:	2322      	movs	r3, #34	@ 0x22
 801022e:	18fb      	adds	r3, r7, r3
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	3b01      	subs	r3, #1
 8010234:	b2da      	uxtb	r2, r3
 8010236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010238:	0011      	movs	r1, r2
 801023a:	0018      	movs	r0, r3
 801023c:	f000 f838 	bl	80102b0 <CalculateCRC>
 8010240:	0003      	movs	r3, r0
 8010242:	001a      	movs	r2, r3
 8010244:	2320      	movs	r3, #32
 8010246:	18eb      	adds	r3, r5, r3
 8010248:	19db      	adds	r3, r3, r7
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	4293      	cmp	r3, r2
 801024e:	d00c      	beq.n	801026a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8010250:	2320      	movs	r3, #32
 8010252:	18e3      	adds	r3, r4, r3
 8010254:	19db      	adds	r3, r3, r7
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	3301      	adds	r3, #1
 801025a:	4a13      	ldr	r2, [pc, #76]	@ (80102a8 <CheckCRC+0x18c>)
 801025c:	4913      	ldr	r1, [pc, #76]	@ (80102ac <CheckCRC+0x190>)
 801025e:	2001      	movs	r0, #1
 8010260:	f002 fcf2 	bl	8012c48 <CreateLine>
      return false;
 8010264:	2300      	movs	r3, #0
 8010266:	46b5      	mov	sp, r6
 8010268:	e019      	b.n	801029e <CheckCRC+0x182>
 801026a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 801026c:	2217      	movs	r2, #23
 801026e:	2320      	movs	r3, #32
 8010270:	18d3      	adds	r3, r2, r3
 8010272:	19db      	adds	r3, r3, r7
 8010274:	2120      	movs	r1, #32
 8010276:	1852      	adds	r2, r2, r1
 8010278:	19d1      	adds	r1, r2, r7
 801027a:	2222      	movs	r2, #34	@ 0x22
 801027c:	18ba      	adds	r2, r7, r2
 801027e:	7809      	ldrb	r1, [r1, #0]
 8010280:	7812      	ldrb	r2, [r2, #0]
 8010282:	188a      	adds	r2, r1, r2
 8010284:	701a      	strb	r2, [r3, #0]
 8010286:	2317      	movs	r3, #23
 8010288:	2220      	movs	r2, #32
 801028a:	189b      	adds	r3, r3, r2
 801028c:	19da      	adds	r2, r3, r7
 801028e:	2323      	movs	r3, #35	@ 0x23
 8010290:	18fb      	adds	r3, r7, r3
 8010292:	7812      	ldrb	r2, [r2, #0]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	429a      	cmp	r2, r3
 8010298:	d200      	bcs.n	801029c <CheckCRC+0x180>
 801029a:	e754      	b.n	8010146 <CheckCRC+0x2a>
    }
  }
  return true;
 801029c:	2301      	movs	r3, #1
}
 801029e:	0018      	movs	r0, r3
 80102a0:	46bd      	mov	sp, r7
 80102a2:	b00f      	add	sp, #60	@ 0x3c
 80102a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a6:	46c0      	nop			@ (mov r8, r8)
 80102a8:	0802cb6c 	.word	0x0802cb6c
 80102ac:	0802caa8 	.word	0x0802caa8

080102b0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	000a      	movs	r2, r1
 80102ba:	1cfb      	adds	r3, r7, #3
 80102bc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80102be:	230f      	movs	r3, #15
 80102c0:	18fb      	adds	r3, r7, r3
 80102c2:	22ff      	movs	r2, #255	@ 0xff
 80102c4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80102c6:	230e      	movs	r3, #14
 80102c8:	18fb      	adds	r3, r7, r3
 80102ca:	2200      	movs	r2, #0
 80102cc:	701a      	strb	r2, [r3, #0]
 80102ce:	e037      	b.n	8010340 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80102d0:	230e      	movs	r3, #14
 80102d2:	18fb      	adds	r3, r7, r3
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	18d3      	adds	r3, r2, r3
 80102da:	7819      	ldrb	r1, [r3, #0]
 80102dc:	220f      	movs	r2, #15
 80102de:	18bb      	adds	r3, r7, r2
 80102e0:	18ba      	adds	r2, r7, r2
 80102e2:	7812      	ldrb	r2, [r2, #0]
 80102e4:	404a      	eors	r2, r1
 80102e6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80102e8:	230d      	movs	r3, #13
 80102ea:	18fb      	adds	r3, r7, r3
 80102ec:	2200      	movs	r2, #0
 80102ee:	701a      	strb	r2, [r3, #0]
 80102f0:	e01b      	b.n	801032a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80102f2:	210f      	movs	r1, #15
 80102f4:	187b      	adds	r3, r7, r1
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	b25b      	sxtb	r3, r3
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	da09      	bge.n	8010312 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80102fe:	187b      	adds	r3, r7, r1
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	b25b      	sxtb	r3, r3
 8010306:	2231      	movs	r2, #49	@ 0x31
 8010308:	4053      	eors	r3, r2
 801030a:	b25a      	sxtb	r2, r3
 801030c:	187b      	adds	r3, r7, r1
 801030e:	701a      	strb	r2, [r3, #0]
 8010310:	e005      	b.n	801031e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8010312:	230f      	movs	r3, #15
 8010314:	18fa      	adds	r2, r7, r3
 8010316:	18fb      	adds	r3, r7, r3
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	18db      	adds	r3, r3, r3
 801031c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 801031e:	210d      	movs	r1, #13
 8010320:	187b      	adds	r3, r7, r1
 8010322:	781a      	ldrb	r2, [r3, #0]
 8010324:	187b      	adds	r3, r7, r1
 8010326:	3201      	adds	r2, #1
 8010328:	701a      	strb	r2, [r3, #0]
 801032a:	230d      	movs	r3, #13
 801032c:	18fb      	adds	r3, r7, r3
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	2b07      	cmp	r3, #7
 8010332:	d9de      	bls.n	80102f2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8010334:	210e      	movs	r1, #14
 8010336:	187b      	adds	r3, r7, r1
 8010338:	781a      	ldrb	r2, [r3, #0]
 801033a:	187b      	adds	r3, r7, r1
 801033c:	3201      	adds	r2, #1
 801033e:	701a      	strb	r2, [r3, #0]
 8010340:	230e      	movs	r3, #14
 8010342:	18fa      	adds	r2, r7, r3
 8010344:	1cfb      	adds	r3, r7, #3
 8010346:	7812      	ldrb	r2, [r2, #0]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	429a      	cmp	r2, r3
 801034c:	d3c0      	bcc.n	80102d0 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 801034e:	230f      	movs	r3, #15
 8010350:	18fb      	adds	r3, r7, r3
 8010352:	781b      	ldrb	r3, [r3, #0]
}
 8010354:	0018      	movs	r0, r3
 8010356:	46bd      	mov	sp, r7
 8010358:	b004      	add	sp, #16
 801035a:	bd80      	pop	{r7, pc}

0801035c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
 8010364:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4936      	ldr	r1, [pc, #216]	@ (8010444 <SGP_SetHT+0xe8>)
 801036c:	1c18      	adds	r0, r3, #0
 801036e:	f7f0 faa7 	bl	80008c0 <__aeabi_fadd>
 8010372:	1c03      	adds	r3, r0, #0
 8010374:	4934      	ldr	r1, [pc, #208]	@ (8010448 <SGP_SetHT+0xec>)
 8010376:	1c18      	adds	r0, r3, #0
 8010378:	f7f0 fc2c 	bl	8000bd4 <__aeabi_fdiv>
 801037c:	1c03      	adds	r3, r0, #0
 801037e:	4933      	ldr	r1, [pc, #204]	@ (801044c <SGP_SetHT+0xf0>)
 8010380:	1c18      	adds	r0, r3, #0
 8010382:	f7f0 fe0d 	bl	8000fa0 <__aeabi_fmul>
 8010386:	1c03      	adds	r3, r0, #0
 8010388:	1c18      	adds	r0, r3, #0
 801038a:	f7f0 f947 	bl	800061c <__aeabi_f2uiz>
 801038e:	0003      	movs	r3, r0
 8010390:	b29a      	uxth	r2, r3
 8010392:	4b2f      	ldr	r3, [pc, #188]	@ (8010450 <SGP_SetHT+0xf4>)
 8010394:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	492e      	ldr	r1, [pc, #184]	@ (8010454 <SGP_SetHT+0xf8>)
 801039c:	1c18      	adds	r0, r3, #0
 801039e:	f7f0 fc19 	bl	8000bd4 <__aeabi_fdiv>
 80103a2:	1c03      	adds	r3, r0, #0
 80103a4:	4929      	ldr	r1, [pc, #164]	@ (801044c <SGP_SetHT+0xf0>)
 80103a6:	1c18      	adds	r0, r3, #0
 80103a8:	f7f0 fdfa 	bl	8000fa0 <__aeabi_fmul>
 80103ac:	1c03      	adds	r3, r0, #0
 80103ae:	1c18      	adds	r0, r3, #0
 80103b0:	f7f0 f934 	bl	800061c <__aeabi_f2uiz>
 80103b4:	0003      	movs	r3, r0
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	4b27      	ldr	r3, [pc, #156]	@ (8010458 <SGP_SetHT+0xfc>)
 80103ba:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80103bc:	4b26      	ldr	r3, [pc, #152]	@ (8010458 <SGP_SetHT+0xfc>)
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	0a1b      	lsrs	r3, r3, #8
 80103c2:	b29b      	uxth	r3, r3
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	4b25      	ldr	r3, [pc, #148]	@ (801045c <SGP_SetHT+0x100>)
 80103c8:	709a      	strb	r2, [r3, #2]
 80103ca:	4b24      	ldr	r3, [pc, #144]	@ (801045c <SGP_SetHT+0x100>)
 80103cc:	789a      	ldrb	r2, [r3, #2]
 80103ce:	210c      	movs	r1, #12
 80103d0:	187b      	adds	r3, r7, r1
 80103d2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 80103d4:	4b20      	ldr	r3, [pc, #128]	@ (8010458 <SGP_SetHT+0xfc>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	4b20      	ldr	r3, [pc, #128]	@ (801045c <SGP_SetHT+0x100>)
 80103dc:	70da      	strb	r2, [r3, #3]
 80103de:	4b1f      	ldr	r3, [pc, #124]	@ (801045c <SGP_SetHT+0x100>)
 80103e0:	78da      	ldrb	r2, [r3, #3]
 80103e2:	187b      	adds	r3, r7, r1
 80103e4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80103e6:	187b      	adds	r3, r7, r1
 80103e8:	2102      	movs	r1, #2
 80103ea:	0018      	movs	r0, r3
 80103ec:	f7ff ff60 	bl	80102b0 <CalculateCRC>
 80103f0:	0003      	movs	r3, r0
 80103f2:	001a      	movs	r2, r3
 80103f4:	4b19      	ldr	r3, [pc, #100]	@ (801045c <SGP_SetHT+0x100>)
 80103f6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80103f8:	4b15      	ldr	r3, [pc, #84]	@ (8010450 <SGP_SetHT+0xf4>)
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	0a1b      	lsrs	r3, r3, #8
 80103fe:	b29b      	uxth	r3, r3
 8010400:	b2da      	uxtb	r2, r3
 8010402:	4b16      	ldr	r3, [pc, #88]	@ (801045c <SGP_SetHT+0x100>)
 8010404:	715a      	strb	r2, [r3, #5]
 8010406:	4b15      	ldr	r3, [pc, #84]	@ (801045c <SGP_SetHT+0x100>)
 8010408:	795a      	ldrb	r2, [r3, #5]
 801040a:	2108      	movs	r1, #8
 801040c:	187b      	adds	r3, r7, r1
 801040e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8010410:	4b0f      	ldr	r3, [pc, #60]	@ (8010450 <SGP_SetHT+0xf4>)
 8010412:	881b      	ldrh	r3, [r3, #0]
 8010414:	b2da      	uxtb	r2, r3
 8010416:	4b11      	ldr	r3, [pc, #68]	@ (801045c <SGP_SetHT+0x100>)
 8010418:	719a      	strb	r2, [r3, #6]
 801041a:	4b10      	ldr	r3, [pc, #64]	@ (801045c <SGP_SetHT+0x100>)
 801041c:	799a      	ldrb	r2, [r3, #6]
 801041e:	187b      	adds	r3, r7, r1
 8010420:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8010422:	187b      	adds	r3, r7, r1
 8010424:	2102      	movs	r1, #2
 8010426:	0018      	movs	r0, r3
 8010428:	f7ff ff42 	bl	80102b0 <CalculateCRC>
 801042c:	0003      	movs	r3, r0
 801042e:	001a      	movs	r2, r3
 8010430:	4b0a      	ldr	r3, [pc, #40]	@ (801045c <SGP_SetHT+0x100>)
 8010432:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8010434:	4b0a      	ldr	r3, [pc, #40]	@ (8010460 <SGP_SetHT+0x104>)
 8010436:	2201      	movs	r2, #1
 8010438:	701a      	strb	r2, [r3, #0]
}
 801043a:	46c0      	nop			@ (mov r8, r8)
 801043c:	46bd      	mov	sp, r7
 801043e:	b004      	add	sp, #16
 8010440:	bd80      	pop	{r7, pc}
 8010442:	46c0      	nop			@ (mov r8, r8)
 8010444:	42340000 	.word	0x42340000
 8010448:	432f0000 	.word	0x432f0000
 801044c:	477fff00 	.word	0x477fff00
 8010450:	20000fce 	.word	0x20000fce
 8010454:	42c80000 	.word	0x42c80000
 8010458:	20000fcc 	.word	0x20000fcc
 801045c:	200000b0 	.word	0x200000b0
 8010460:	20000fd0 	.word	0x20000fd0

08010464 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8010464:	b580      	push	{r7, lr}
 8010466:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8010468:	4a09      	ldr	r2, [pc, #36]	@ (8010490 <SGP_SoftReset+0x2c>)
 801046a:	4b0a      	ldr	r3, [pc, #40]	@ (8010494 <SGP_SoftReset+0x30>)
 801046c:	0019      	movs	r1, r3
 801046e:	2003      	movs	r0, #3
 8010470:	f002 fbea 	bl	8012c48 <CreateLine>
  SGP_TurnHeaterOff();
 8010474:	f7ff fcd0 	bl	800fe18 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8010478:	200a      	movs	r0, #10
 801047a:	f003 f92d 	bl	80136d8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801047e:	4b06      	ldr	r3, [pc, #24]	@ (8010498 <SGP_SoftReset+0x34>)
 8010480:	2202      	movs	r2, #2
 8010482:	0019      	movs	r1, r3
 8010484:	2059      	movs	r0, #89	@ 0x59
 8010486:	f7ff fbf9 	bl	800fc7c <WriteRegister>
}
 801048a:	46c0      	nop			@ (mov r8, r8)
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}
 8010490:	0802cc14 	.word	0x0802cc14
 8010494:	0802caf0 	.word	0x0802caf0
 8010498:	200000b8 	.word	0x200000b8

0801049c <ResetVOCresult>:

void ResetVOCresult(void) {
 801049c:	b580      	push	{r7, lr}
 801049e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 80104a0:	4b02      	ldr	r3, [pc, #8]	@ (80104ac <ResetVOCresult+0x10>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	601a      	str	r2, [r3, #0]
}
 80104a6:	46c0      	nop			@ (mov r8, r8)
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	20000fd4 	.word	0x20000fd4

080104b0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 80104b0:	b580      	push	{r7, lr}
 80104b2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 80104b4:	4b4b      	ldr	r3, [pc, #300]	@ (80105e4 <SGP_Upkeep+0x134>)
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	2b07      	cmp	r3, #7
 80104ba:	d900      	bls.n	80104be <SGP_Upkeep+0xe>
 80104bc:	e07a      	b.n	80105b4 <SGP_Upkeep+0x104>
 80104be:	009a      	lsls	r2, r3, #2
 80104c0:	4b49      	ldr	r3, [pc, #292]	@ (80105e8 <SGP_Upkeep+0x138>)
 80104c2:	18d3      	adds	r3, r2, r3
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 80104c8:	4a48      	ldr	r2, [pc, #288]	@ (80105ec <SGP_Upkeep+0x13c>)
 80104ca:	4b49      	ldr	r3, [pc, #292]	@ (80105f0 <SGP_Upkeep+0x140>)
 80104cc:	0019      	movs	r1, r3
 80104ce:	2003      	movs	r0, #3
 80104d0:	f002 fbba 	bl	8012c48 <CreateLine>
    break;
 80104d4:	e081      	b.n	80105da <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 80104d6:	f7ff ffe1 	bl	801049c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 80104da:	4b42      	ldr	r3, [pc, #264]	@ (80105e4 <SGP_Upkeep+0x134>)
 80104dc:	2201      	movs	r2, #1
 80104de:	701a      	strb	r2, [r3, #0]
    break;
 80104e0:	e07b      	b.n	80105da <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 80104e2:	f7fc fc7b 	bl	800cddc <getSensorLock>
 80104e6:	1e03      	subs	r3, r0, #0
 80104e8:	d000      	beq.n	80104ec <SGP_Upkeep+0x3c>
 80104ea:	e06f      	b.n	80105cc <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 80104ec:	2005      	movs	r0, #5
 80104ee:	f7fc fc61 	bl	800cdb4 <setSensorLock>
    SetMeasurementIndicator();
 80104f2:	f001 f987 	bl	8011804 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 80104f6:	f7ff fc2d 	bl	800fd54 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 80104fa:	200a      	movs	r0, #10
 80104fc:	f003 f8ec 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 8010500:	2000      	movs	r0, #0
 8010502:	f7fc fc57 	bl	800cdb4 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 8010506:	4b37      	ldr	r3, [pc, #220]	@ (80105e4 <SGP_Upkeep+0x134>)
 8010508:	2202      	movs	r2, #2
 801050a:	701a      	strb	r2, [r3, #0]
    break;
 801050c:	e065      	b.n	80105da <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 801050e:	f7fc fc65 	bl	800cddc <getSensorLock>
 8010512:	1e03      	subs	r3, r0, #0
 8010514:	d15c      	bne.n	80105d0 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 8010516:	2005      	movs	r0, #5
 8010518:	f7fc fc4c 	bl	800cdb4 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 801051c:	4b35      	ldr	r3, [pc, #212]	@ (80105f4 <SGP_Upkeep+0x144>)
 801051e:	0018      	movs	r0, r3
 8010520:	f7ff fc88 	bl	800fe34 <SGP_GetMeasurementValues>
 8010524:	1e03      	subs	r3, r0, #0
 8010526:	d002      	beq.n	801052e <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 8010528:	4b2e      	ldr	r3, [pc, #184]	@ (80105e4 <SGP_Upkeep+0x134>)
 801052a:	2203      	movs	r2, #3
 801052c:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 801052e:	200a      	movs	r0, #10
 8010530:	f003 f8d2 	bl	80136d8 <HAL_Delay>
    setSensorLock(FREE);
 8010534:	2000      	movs	r0, #0
 8010536:	f7fc fc3d 	bl	800cdb4 <setSensorLock>
    break;
 801053a:	e04e      	b.n	80105da <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 801053c:	4b2d      	ldr	r3, [pc, #180]	@ (80105f4 <SGP_Upkeep+0x144>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	b29b      	uxth	r3, r3
 8010542:	0018      	movs	r0, r3
 8010544:	f7f4 f874 	bl	8004630 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 8010548:	4b26      	ldr	r3, [pc, #152]	@ (80105e4 <SGP_Upkeep+0x134>)
 801054a:	2206      	movs	r2, #6
 801054c:	701a      	strb	r2, [r3, #0]
    break;
 801054e:	e044      	b.n	80105da <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8010550:	4b24      	ldr	r3, [pc, #144]	@ (80105e4 <SGP_Upkeep+0x134>)
 8010552:	2207      	movs	r2, #7
 8010554:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8010556:	4b28      	ldr	r3, [pc, #160]	@ (80105f8 <SGP_Upkeep+0x148>)
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	2b03      	cmp	r3, #3
 801055c:	d912      	bls.n	8010584 <SGP_Upkeep+0xd4>
 801055e:	4b27      	ldr	r3, [pc, #156]	@ (80105fc <SGP_Upkeep+0x14c>)
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	2201      	movs	r2, #1
 8010564:	4053      	eors	r3, r2
 8010566:	b2db      	uxtb	r3, r3
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00b      	beq.n	8010584 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 801056c:	4b24      	ldr	r3, [pc, #144]	@ (8010600 <SGP_Upkeep+0x150>)
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d004      	beq.n	801057e <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8010574:	f7ff ff76 	bl	8010464 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8010578:	2000      	movs	r0, #0
 801057a:	f7fc f813 	bl	800c5a4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 801057e:	4b20      	ldr	r3, [pc, #128]	@ (8010600 <SGP_Upkeep+0x150>)
 8010580:	2201      	movs	r2, #1
 8010582:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8010584:	f003 f89e 	bl	80136c4 <HAL_GetTick>
 8010588:	0003      	movs	r3, r0
 801058a:	22c8      	movs	r2, #200	@ 0xc8
 801058c:	0092      	lsls	r2, r2, #2
 801058e:	189a      	adds	r2, r3, r2
 8010590:	4b1c      	ldr	r3, [pc, #112]	@ (8010604 <SGP_Upkeep+0x154>)
 8010592:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8010594:	f001 f94e 	bl	8011834 <ResetMeasurementIndicator>
  break;
 8010598:	e01f      	b.n	80105da <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 801059a:	4b1a      	ldr	r3, [pc, #104]	@ (8010604 <SGP_Upkeep+0x154>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	0018      	movs	r0, r3
 80105a0:	f002 fafc 	bl	8012b9c <TimestampIsReached>
 80105a4:	1e03      	subs	r3, r0, #0
 80105a6:	d015      	beq.n	80105d4 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 80105a8:	f7ff fbbc 	bl	800fd24 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 80105ac:	4b0d      	ldr	r3, [pc, #52]	@ (80105e4 <SGP_Upkeep+0x134>)
 80105ae:	2200      	movs	r2, #0
 80105b0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80105b2:	e00f      	b.n	80105d4 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 80105b4:	4b0b      	ldr	r3, [pc, #44]	@ (80105e4 <SGP_Upkeep+0x134>)
 80105b6:	2200      	movs	r2, #0
 80105b8:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 80105ba:	f7fc fc0f 	bl	800cddc <getSensorLock>
 80105be:	0003      	movs	r3, r0
 80105c0:	2b05      	cmp	r3, #5
 80105c2:	d109      	bne.n	80105d8 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 80105c4:	2000      	movs	r0, #0
 80105c6:	f7fc fbf5 	bl	800cdb4 <setSensorLock>
    }
    break;
 80105ca:	e005      	b.n	80105d8 <SGP_Upkeep+0x128>
      break;
 80105cc:	46c0      	nop			@ (mov r8, r8)
 80105ce:	e004      	b.n	80105da <SGP_Upkeep+0x12a>
      break;
 80105d0:	46c0      	nop			@ (mov r8, r8)
 80105d2:	e002      	b.n	80105da <SGP_Upkeep+0x12a>
    break;
 80105d4:	46c0      	nop			@ (mov r8, r8)
 80105d6:	e000      	b.n	80105da <SGP_Upkeep+0x12a>
    break;
 80105d8:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 80105da:	4b02      	ldr	r3, [pc, #8]	@ (80105e4 <SGP_Upkeep+0x134>)
 80105dc:	781b      	ldrb	r3, [r3, #0]
}
 80105de:	0018      	movs	r0, r3
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}
 80105e4:	20000fd8 	.word	0x20000fd8
 80105e8:	0802d478 	.word	0x0802d478
 80105ec:	0802cc2c 	.word	0x0802cc2c
 80105f0:	0802caf0 	.word	0x0802caf0
 80105f4:	20000fd4 	.word	0x20000fd4
 80105f8:	20000f1e 	.word	0x20000f1e
 80105fc:	20001e75 	.word	0x20001e75
 8010600:	20000f08 	.word	0x20000f08
 8010604:	20000f20 	.word	0x20000f20

08010608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	0002      	movs	r2, r0
 8010610:	1dfb      	adds	r3, r7, #7
 8010612:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010614:	1dfb      	adds	r3, r7, #7
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	2b7f      	cmp	r3, #127	@ 0x7f
 801061a:	d809      	bhi.n	8010630 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801061c:	1dfb      	adds	r3, r7, #7
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	001a      	movs	r2, r3
 8010622:	231f      	movs	r3, #31
 8010624:	401a      	ands	r2, r3
 8010626:	4b04      	ldr	r3, [pc, #16]	@ (8010638 <__NVIC_EnableIRQ+0x30>)
 8010628:	2101      	movs	r1, #1
 801062a:	4091      	lsls	r1, r2
 801062c:	000a      	movs	r2, r1
 801062e:	601a      	str	r2, [r3, #0]
  }
}
 8010630:	46c0      	nop			@ (mov r8, r8)
 8010632:	46bd      	mov	sp, r7
 8010634:	b002      	add	sp, #8
 8010636:	bd80      	pop	{r7, pc}
 8010638:	e000e100 	.word	0xe000e100

0801063c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	0002      	movs	r2, r0
 8010644:	1dfb      	adds	r3, r7, #7
 8010646:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010648:	1dfb      	adds	r3, r7, #7
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	2b7f      	cmp	r3, #127	@ 0x7f
 801064e:	d810      	bhi.n	8010672 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010650:	1dfb      	adds	r3, r7, #7
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	001a      	movs	r2, r3
 8010656:	231f      	movs	r3, #31
 8010658:	4013      	ands	r3, r2
 801065a:	4908      	ldr	r1, [pc, #32]	@ (801067c <__NVIC_DisableIRQ+0x40>)
 801065c:	2201      	movs	r2, #1
 801065e:	409a      	lsls	r2, r3
 8010660:	0013      	movs	r3, r2
 8010662:	2280      	movs	r2, #128	@ 0x80
 8010664:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010666:	f3bf 8f4f 	dsb	sy
}
 801066a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 801066c:	f3bf 8f6f 	isb	sy
}
 8010670:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8010672:	46c0      	nop			@ (mov r8, r8)
 8010674:	46bd      	mov	sp, r7
 8010676:	b002      	add	sp, #8
 8010678:	bd80      	pop	{r7, pc}
 801067a:	46c0      	nop			@ (mov r8, r8)
 801067c:	e000e100 	.word	0xe000e100

08010680 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010680:	b5b0      	push	{r4, r5, r7, lr}
 8010682:	b088      	sub	sp, #32
 8010684:	af02      	add	r7, sp, #8
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	0008      	movs	r0, r1
 801068a:	0011      	movs	r1, r2
 801068c:	1cfb      	adds	r3, r7, #3
 801068e:	1c02      	adds	r2, r0, #0
 8010690:	701a      	strb	r2, [r3, #0]
 8010692:	1cbb      	adds	r3, r7, #2
 8010694:	1c0a      	adds	r2, r1, #0
 8010696:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010698:	4b5b      	ldr	r3, [pc, #364]	@ (8010808 <getSoundData+0x188>)
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2201      	movs	r2, #1
 80106a0:	4053      	eors	r3, r2
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d107      	bne.n	80106b8 <getSoundData+0x38>
 80106a8:	4b58      	ldr	r3, [pc, #352]	@ (801080c <getSoundData+0x18c>)
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	2201      	movs	r2, #1
 80106b0:	4053      	eors	r3, r2
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d001      	beq.n	80106bc <getSoundData+0x3c>
    {
        return false;
 80106b8:	2300      	movs	r3, #0
 80106ba:	e0a0      	b.n	80107fe <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 80106bc:	4b54      	ldr	r3, [pc, #336]	@ (8010810 <getSoundData+0x190>)
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d005      	beq.n	80106d2 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80106c6:	4b53      	ldr	r3, [pc, #332]	@ (8010814 <getSoundData+0x194>)
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	b25b      	sxtb	r3, r3
 80106cc:	0018      	movs	r0, r3
 80106ce:	f7ff ffb5 	bl	801063c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80106d2:	f3bf 8f4f 	dsb	sy
}
 80106d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80106d8:	f3bf 8f6f 	isb	sy
}
 80106dc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 80106de:	1cfb      	adds	r3, r7, #3
 80106e0:	781b      	ldrb	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d04c      	beq.n	8010780 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 80106e6:	4b4c      	ldr	r3, [pc, #304]	@ (8010818 <getSoundData+0x198>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d11b      	bne.n	8010726 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2200      	movs	r2, #0
 80106f8:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80106fa:	2300      	movs	r3, #0
 80106fc:	617b      	str	r3, [r7, #20]
 80106fe:	e00e      	b.n	801071e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	18d3      	adds	r3, r2, r3
 8010706:	3302      	adds	r3, #2
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	18d3      	adds	r3, r2, r3
 8010712:	3308      	adds	r3, #8
 8010714:	2200      	movs	r2, #0
 8010716:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	3301      	adds	r3, #1
 801071c:	617b      	str	r3, [r7, #20]
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b05      	cmp	r3, #5
 8010722:	d9ed      	bls.n	8010700 <getSoundData+0x80>
 8010724:	e02c      	b.n	8010780 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	1c59      	adds	r1, r3, #1
 801072c:	4b3b      	ldr	r3, [pc, #236]	@ (801081c <getSoundData+0x19c>)
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	4b3b      	ldr	r3, [pc, #236]	@ (8010820 <getSoundData+0x1a0>)
 8010732:	681c      	ldr	r4, [r3, #0]
 8010734:	4b38      	ldr	r3, [pc, #224]	@ (8010818 <getSoundData+0x198>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	0023      	movs	r3, r4
 801073c:	f000 fde8 	bl	8011310 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010740:	2300      	movs	r3, #0
 8010742:	613b      	str	r3, [r7, #16]
 8010744:	e019      	b.n	801077a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	18d3      	adds	r3, r2, r3
 801074c:	1c98      	adds	r0, r3, #2
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	3308      	adds	r3, #8
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8010756:	4b33      	ldr	r3, [pc, #204]	@ (8010824 <getSoundData+0x1a4>)
 8010758:	693a      	ldr	r2, [r7, #16]
 801075a:	0092      	lsls	r2, r2, #2
 801075c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 801075e:	4b32      	ldr	r3, [pc, #200]	@ (8010828 <getSoundData+0x1a8>)
 8010760:	693a      	ldr	r2, [r7, #16]
 8010762:	0092      	lsls	r2, r2, #2
 8010764:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010766:	4b2c      	ldr	r3, [pc, #176]	@ (8010818 <getSoundData+0x198>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	0013      	movs	r3, r2
 801076e:	0022      	movs	r2, r4
 8010770:	f000 fdce 	bl	8011310 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	3301      	adds	r3, #1
 8010778:	613b      	str	r3, [r7, #16]
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	2b05      	cmp	r3, #5
 801077e:	d9e2      	bls.n	8010746 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010780:	1cbb      	adds	r3, r7, #2
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d028      	beq.n	80107da <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010788:	240e      	movs	r4, #14
 801078a:	193b      	adds	r3, r7, r4
 801078c:	2200      	movs	r2, #0
 801078e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010790:	250d      	movs	r5, #13
 8010792:	197b      	adds	r3, r7, r5
 8010794:	2200      	movs	r2, #0
 8010796:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010798:	4b24      	ldr	r3, [pc, #144]	@ (801082c <getSoundData+0x1ac>)
 801079a:	6818      	ldr	r0, [r3, #0]
 801079c:	4924      	ldr	r1, [pc, #144]	@ (8010830 <getSoundData+0x1b0>)
 801079e:	197b      	adds	r3, r7, r5
 80107a0:	193a      	adds	r2, r7, r4
 80107a2:	f000 fe59 	bl	8011458 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 80107a6:	193b      	adds	r3, r7, r4
 80107a8:	881a      	ldrh	r2, [r3, #0]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	21ff      	movs	r1, #255	@ 0xff
 80107ae:	4011      	ands	r1, r2
 80107b0:	000c      	movs	r4, r1
 80107b2:	7b99      	ldrb	r1, [r3, #14]
 80107b4:	2000      	movs	r0, #0
 80107b6:	4001      	ands	r1, r0
 80107b8:	1c08      	adds	r0, r1, #0
 80107ba:	1c21      	adds	r1, r4, #0
 80107bc:	4301      	orrs	r1, r0
 80107be:	7399      	strb	r1, [r3, #14]
 80107c0:	0a12      	lsrs	r2, r2, #8
 80107c2:	b290      	uxth	r0, r2
 80107c4:	7bda      	ldrb	r2, [r3, #15]
 80107c6:	2100      	movs	r1, #0
 80107c8:	400a      	ands	r2, r1
 80107ca:	1c11      	adds	r1, r2, #0
 80107cc:	1c02      	adds	r2, r0, #0
 80107ce:	430a      	orrs	r2, r1
 80107d0:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 80107d2:	197b      	adds	r3, r7, r5
 80107d4:	781a      	ldrb	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 80107da:	f000 f86f 	bl	80108bc <micSettlingComplete>
 80107de:	0003      	movs	r3, r0
 80107e0:	001a      	movs	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 80107e6:	4b0a      	ldr	r3, [pc, #40]	@ (8010810 <getSoundData+0x190>)
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d005      	beq.n	80107fc <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80107f0:	4b08      	ldr	r3, [pc, #32]	@ (8010814 <getSoundData+0x194>)
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	b25b      	sxtb	r3, r3
 80107f6:	0018      	movs	r0, r3
 80107f8:	f7ff ff06 	bl	8010608 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 80107fc:	2301      	movs	r3, #1
}
 80107fe:	0018      	movs	r0, r3
 8010800:	46bd      	mov	sp, r7
 8010802:	b006      	add	sp, #24
 8010804:	bdb0      	pop	{r4, r5, r7, pc}
 8010806:	46c0      	nop			@ (mov r8, r8)
 8010808:	20000fda 	.word	0x20000fda
 801080c:	20000fdd 	.word	0x20000fdd
 8010810:	20000fdc 	.word	0x20000fdc
 8010814:	20001a2c 	.word	0x20001a2c
 8010818:	20001a68 	.word	0x20001a68
 801081c:	20001a30 	.word	0x20001a30
 8010820:	20001a34 	.word	0x20001a34
 8010824:	20001a38 	.word	0x20001a38
 8010828:	20001a50 	.word	0x20001a50
 801082c:	20000fe4 	.word	0x20000fe4
 8010830:	3b5c7333 	.word	0x3b5c7333

08010834 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	607a      	str	r2, [r7, #4]
 8010840:	001a      	movs	r2, r3
 8010842:	1cfb      	adds	r3, r7, #3
 8010844:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8010846:	4b09      	ldr	r3, [pc, #36]	@ (801086c <soundInit+0x38>)
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 801084c:	4b08      	ldr	r3, [pc, #32]	@ (8010870 <soundInit+0x3c>)
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8010852:	4b08      	ldr	r3, [pc, #32]	@ (8010874 <soundInit+0x40>)
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8010858:	4b07      	ldr	r3, [pc, #28]	@ (8010878 <soundInit+0x44>)
 801085a:	2200      	movs	r2, #0
 801085c:	569a      	ldrsb	r2, [r3, r2]
 801085e:	4b06      	ldr	r3, [pc, #24]	@ (8010878 <soundInit+0x44>)
 8010860:	701a      	strb	r2, [r3, #0]

    return true;
 8010862:	2301      	movs	r3, #1
}
 8010864:	0018      	movs	r0, r3
 8010866:	46bd      	mov	sp, r7
 8010868:	b004      	add	sp, #16
 801086a:	bd80      	pop	{r7, pc}
 801086c:	20001a24 	.word	0x20001a24
 8010870:	20001a20 	.word	0x20001a20
 8010874:	20001a28 	.word	0x20001a28
 8010878:	20001a2c 	.word	0x20001a2c

0801087c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8010880:	4b02      	ldr	r3, [pc, #8]	@ (801088c <clearMaximumAmplitude+0x10>)
 8010882:	2200      	movs	r2, #0
 8010884:	601a      	str	r2, [r3, #0]
}
 8010886:	46c0      	nop			@ (mov r8, r8)
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	20000fe4 	.word	0x20000fe4

08010890 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8010894:	4b08      	ldr	r3, [pc, #32]	@ (80108b8 <startMicSettlingPeriod+0x28>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2200      	movs	r2, #0
 801089c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 801089e:	4b06      	ldr	r3, [pc, #24]	@ (80108b8 <startMicSettlingPeriod+0x28>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	0018      	movs	r0, r3
 80108a4:	f00a ff6a 	bl	801b77c <HAL_TIM_Base_Start>
 80108a8:	1e03      	subs	r3, r0, #0
 80108aa:	d001      	beq.n	80108b0 <startMicSettlingPeriod+0x20>
    {
        return false;
 80108ac:	2300      	movs	r3, #0
 80108ae:	e000      	b.n	80108b2 <startMicSettlingPeriod+0x22>
    }
    return true;
 80108b0:	2301      	movs	r3, #1
}
 80108b2:	0018      	movs	r0, r3
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}
 80108b8:	20001a20 	.word	0x20001a20

080108bc <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 80108c2:	4b0e      	ldr	r3, [pc, #56]	@ (80108fc <micSettlingComplete+0x40>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	691b      	ldr	r3, [r3, #16]
 80108ca:	2201      	movs	r2, #1
 80108cc:	401a      	ands	r2, r3
 80108ce:	1dfb      	adds	r3, r7, #7
 80108d0:	3a01      	subs	r2, #1
 80108d2:	4251      	negs	r1, r2
 80108d4:	414a      	adcs	r2, r1
 80108d6:	701a      	strb	r2, [r3, #0]
    if (complete)
 80108d8:	1dfb      	adds	r3, r7, #7
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d007      	beq.n	80108f0 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 80108e0:	4b06      	ldr	r3, [pc, #24]	@ (80108fc <micSettlingComplete+0x40>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	0018      	movs	r0, r3
 80108e6:	f00a ff93 	bl	801b810 <HAL_TIM_Base_Stop>
      DataReady = true;
 80108ea:	4b05      	ldr	r3, [pc, #20]	@ (8010900 <micSettlingComplete+0x44>)
 80108ec:	2201      	movs	r2, #1
 80108ee:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 80108f0:	1dfb      	adds	r3, r7, #7
 80108f2:	781b      	ldrb	r3, [r3, #0]
}
 80108f4:	0018      	movs	r0, r3
 80108f6:	46bd      	mov	sp, r7
 80108f8:	b002      	add	sp, #8
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	20001a20 	.word	0x20001a20
 8010900:	20000fd9 	.word	0x20000fd9

08010904 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	0002      	movs	r2, r0
 801090c:	1dfb      	adds	r3, r7, #7
 801090e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8010910:	4b29      	ldr	r3, [pc, #164]	@ (80109b8 <enableMicrophone+0xb4>)
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	b2db      	uxtb	r3, r3
 8010916:	1dfa      	adds	r2, r7, #7
 8010918:	7812      	ldrb	r2, [r2, #0]
 801091a:	429a      	cmp	r2, r3
 801091c:	d101      	bne.n	8010922 <enableMicrophone+0x1e>
    {
        return true;
 801091e:	2301      	movs	r3, #1
 8010920:	e045      	b.n	80109ae <enableMicrophone+0xaa>
    }
    if (bEnable)
 8010922:	1dfb      	adds	r3, r7, #7
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d025      	beq.n	8010976 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 801092a:	f7ff ffb1 	bl	8010890 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 801092e:	4b23      	ldr	r3, [pc, #140]	@ (80109bc <enableMicrophone+0xb8>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	2280      	movs	r2, #128	@ 0x80
 8010934:	0092      	lsls	r2, r2, #2
 8010936:	4922      	ldr	r1, [pc, #136]	@ (80109c0 <enableMicrophone+0xbc>)
 8010938:	0018      	movs	r0, r3
 801093a:	f007 f989 	bl	8017c50 <HAL_I2S_Receive_DMA>
 801093e:	1e03      	subs	r3, r0, #0
 8010940:	d001      	beq.n	8010946 <enableMicrophone+0x42>
        {
            return false;
 8010942:	2300      	movs	r3, #0
 8010944:	e033      	b.n	80109ae <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8010946:	f7ff ff99 	bl	801087c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 801094a:	4b1e      	ldr	r3, [pc, #120]	@ (80109c4 <enableMicrophone+0xc0>)
 801094c:	2200      	movs	r2, #0
 801094e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010950:	4b1d      	ldr	r3, [pc, #116]	@ (80109c8 <enableMicrophone+0xc4>)
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	b25b      	sxtb	r3, r3
 8010956:	0018      	movs	r0, r3
 8010958:	f7ff fe56 	bl	8010608 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 801095c:	4b1b      	ldr	r3, [pc, #108]	@ (80109cc <enableMicrophone+0xc8>)
 801095e:	2201      	movs	r2, #1
 8010960:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8010962:	4b15      	ldr	r3, [pc, #84]	@ (80109b8 <enableMicrophone+0xb4>)
 8010964:	2201      	movs	r2, #1
 8010966:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010968:	4b19      	ldr	r3, [pc, #100]	@ (80109d0 <enableMicrophone+0xcc>)
 801096a:	2200      	movs	r2, #0
 801096c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 801096e:	4b19      	ldr	r3, [pc, #100]	@ (80109d4 <enableMicrophone+0xd0>)
 8010970:	2200      	movs	r2, #0
 8010972:	701a      	strb	r2, [r3, #0]
 8010974:	e01a      	b.n	80109ac <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010976:	4b14      	ldr	r3, [pc, #80]	@ (80109c8 <enableMicrophone+0xc4>)
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	b25b      	sxtb	r3, r3
 801097c:	0018      	movs	r0, r3
 801097e:	f7ff fe5d 	bl	801063c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8010982:	4b12      	ldr	r3, [pc, #72]	@ (80109cc <enableMicrophone+0xc8>)
 8010984:	2200      	movs	r2, #0
 8010986:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010988:	4b11      	ldr	r3, [pc, #68]	@ (80109d0 <enableMicrophone+0xcc>)
 801098a:	2200      	movs	r2, #0
 801098c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 801098e:	4b11      	ldr	r3, [pc, #68]	@ (80109d4 <enableMicrophone+0xd0>)
 8010990:	2200      	movs	r2, #0
 8010992:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8010994:	4b09      	ldr	r3, [pc, #36]	@ (80109bc <enableMicrophone+0xb8>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	0018      	movs	r0, r3
 801099a:	f007 fa1b 	bl	8017dd4 <HAL_I2S_DMAStop>
 801099e:	1e03      	subs	r3, r0, #0
 80109a0:	d001      	beq.n	80109a6 <enableMicrophone+0xa2>
        {
            return false;
 80109a2:	2300      	movs	r3, #0
 80109a4:	e003      	b.n	80109ae <enableMicrophone+0xaa>
        }
        micEnabled = false;
 80109a6:	4b04      	ldr	r3, [pc, #16]	@ (80109b8 <enableMicrophone+0xb4>)
 80109a8:	2200      	movs	r2, #0
 80109aa:	701a      	strb	r2, [r3, #0]
    }
    return true;
 80109ac:	2301      	movs	r3, #1
}
 80109ae:	0018      	movs	r0, r3
 80109b0:	46bd      	mov	sp, r7
 80109b2:	b002      	add	sp, #8
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	46c0      	nop			@ (mov r8, r8)
 80109b8:	20000fda 	.word	0x20000fda
 80109bc:	20001a24 	.word	0x20001a24
 80109c0:	20001020 	.word	0x20001020
 80109c4:	20000fe0 	.word	0x20000fe0
 80109c8:	20001a2c 	.word	0x20001a2c
 80109cc:	20000fdc 	.word	0x20000fdc
 80109d0:	20000fdb 	.word	0x20000fdb
 80109d4:	20000fdd 	.word	0x20000fdd

080109d8 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	af00      	add	r7, sp, #0
    if (!micEnabled)
 80109dc:	4b0c      	ldr	r3, [pc, #48]	@ (8010a10 <startSPLcalculation+0x38>)
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	2201      	movs	r2, #1
 80109e4:	4053      	eors	r3, r2
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <startSPLcalculation+0x18>
    {
        return false;
 80109ec:	2300      	movs	r3, #0
 80109ee:	e00c      	b.n	8010a0a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 80109f0:	4b08      	ldr	r3, [pc, #32]	@ (8010a14 <startSPLcalculation+0x3c>)
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	b2db      	uxtb	r3, r3
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d001      	beq.n	80109fe <startSPLcalculation+0x26>
    {
        return true;
 80109fa:	2301      	movs	r3, #1
 80109fc:	e005      	b.n	8010a0a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 80109fe:	f000 fb63 	bl	80110c8 <resetSPLstate>
    SPLcalcEnabled = true;
 8010a02:	4b04      	ldr	r3, [pc, #16]	@ (8010a14 <startSPLcalculation+0x3c>)
 8010a04:	2201      	movs	r2, #1
 8010a06:	701a      	strb	r2, [r3, #0]
    return true;
 8010a08:	2301      	movs	r3, #1
}
 8010a0a:	0018      	movs	r0, r3
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	20000fda 	.word	0x20000fda
 8010a14:	20000fdb 	.word	0x20000fdb

08010a18 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010a20:	4b05      	ldr	r3, [pc, #20]	@ (8010a38 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d102      	bne.n	8010a30 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	f000 f81a 	bl	8010a64 <processHalfDMAbuffer>
  }
}
 8010a30:	46c0      	nop			@ (mov r8, r8)
 8010a32:	46bd      	mov	sp, r7
 8010a34:	b002      	add	sp, #8
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	20001a24 	.word	0x20001a24

08010a3c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010a44:	4b06      	ldr	r3, [pc, #24]	@ (8010a60 <HAL_I2S_RxCpltCallback+0x24>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d104      	bne.n	8010a58 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8010a4e:	2380      	movs	r3, #128	@ 0x80
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	0018      	movs	r0, r3
 8010a54:	f000 f806 	bl	8010a64 <processHalfDMAbuffer>
  }
}
 8010a58:	46c0      	nop			@ (mov r8, r8)
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	b002      	add	sp, #8
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	20001a24 	.word	0x20001a24

08010a64 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	005a      	lsls	r2, r3, #1
 8010a70:	4b15      	ldr	r3, [pc, #84]	@ (8010ac8 <processHalfDMAbuffer+0x64>)
 8010a72:	18d3      	adds	r3, r2, r3
 8010a74:	4a15      	ldr	r2, [pc, #84]	@ (8010acc <processHalfDMAbuffer+0x68>)
 8010a76:	2180      	movs	r1, #128	@ 0x80
 8010a78:	0089      	lsls	r1, r1, #2
 8010a7a:	0018      	movs	r0, r3
 8010a7c:	f000 fd35 	bl	80114ea <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8010a80:	4b13      	ldr	r3, [pc, #76]	@ (8010ad0 <processHalfDMAbuffer+0x6c>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	425a      	negs	r2, r3
 8010a86:	4153      	adcs	r3, r2
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	4b11      	ldr	r3, [pc, #68]	@ (8010ad0 <processHalfDMAbuffer+0x6c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2109      	movs	r1, #9
 8010a90:	4299      	cmp	r1, r3
 8010a92:	419b      	sbcs	r3, r3
 8010a94:	425b      	negs	r3, r3
 8010a96:	b2db      	uxtb	r3, r3
 8010a98:	480c      	ldr	r0, [pc, #48]	@ (8010acc <processHalfDMAbuffer+0x68>)
 8010a9a:	2180      	movs	r1, #128	@ 0x80
 8010a9c:	f000 fb46 	bl	801112c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8010aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8010ad0 <processHalfDMAbuffer+0x6c>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b09      	cmp	r3, #9
 8010aa6:	d804      	bhi.n	8010ab2 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8010aa8:	4b09      	ldr	r3, [pc, #36]	@ (8010ad0 <processHalfDMAbuffer+0x6c>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	1c5a      	adds	r2, r3, #1
 8010aae:	4b08      	ldr	r3, [pc, #32]	@ (8010ad0 <processHalfDMAbuffer+0x6c>)
 8010ab0:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8010ab2:	4b08      	ldr	r3, [pc, #32]	@ (8010ad4 <processHalfDMAbuffer+0x70>)
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8010abc:	f000 f826 	bl	8010b0c <calculateSPLQ31>
    }
}
 8010ac0:	46c0      	nop			@ (mov r8, r8)
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	b002      	add	sp, #8
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	20001020 	.word	0x20001020
 8010acc:	20001820 	.word	0x20001820
 8010ad0:	20000fe0 	.word	0x20000fe0
 8010ad4:	20000fdb 	.word	0x20000fdb

08010ad8 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010ae0:	4b07      	ldr	r3, [pc, #28]	@ (8010b00 <HAL_I2S_ErrorCallback+0x28>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d106      	bne.n	8010af8 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8010aea:	4a06      	ldr	r2, [pc, #24]	@ (8010b04 <HAL_I2S_ErrorCallback+0x2c>)
 8010aec:	239e      	movs	r3, #158	@ 0x9e
 8010aee:	0059      	lsls	r1, r3, #1
 8010af0:	4b05      	ldr	r3, [pc, #20]	@ (8010b08 <HAL_I2S_ErrorCallback+0x30>)
 8010af2:	0018      	movs	r0, r3
 8010af4:	f002 f960 	bl	8012db8 <errorHandler>
  }
}
 8010af8:	46c0      	nop			@ (mov r8, r8)
 8010afa:	46bd      	mov	sp, r7
 8010afc:	b002      	add	sp, #8
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	20001a24 	.word	0x20001a24
 8010b04:	0802cc54 	.word	0x0802cc54
 8010b08:	0802d568 	.word	0x0802d568

08010b0c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8010b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b0e:	b0b3      	sub	sp, #204	@ 0xcc
 8010b10:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8010b12:	4ae2      	ldr	r2, [pc, #904]	@ (8010e9c <calculateSPLQ31+0x390>)
 8010b14:	2338      	movs	r3, #56	@ 0x38
 8010b16:	2030      	movs	r0, #48	@ 0x30
 8010b18:	181b      	adds	r3, r3, r0
 8010b1a:	19d9      	adds	r1, r3, r7
 8010b1c:	2334      	movs	r3, #52	@ 0x34
 8010b1e:	181b      	adds	r3, r3, r0
 8010b20:	19d8      	adds	r0, r3, r7
 8010b22:	2380      	movs	r3, #128	@ 0x80
 8010b24:	f000 fc36 	bl	8011394 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8010b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	da00      	bge.n	8010b30 <calculateSPLQ31+0x24>
 8010b2e:	3301      	adds	r3, #1
 8010b30:	105b      	asrs	r3, r3, #1
 8010b32:	001a      	movs	r2, r3
 8010b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	da00      	bge.n	8010b3c <calculateSPLQ31+0x30>
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	105b      	asrs	r3, r3, #1
 8010b3e:	18d3      	adds	r3, r2, r3
 8010b40:	2188      	movs	r1, #136	@ 0x88
 8010b42:	187a      	adds	r2, r7, r1
 8010b44:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8010b46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010b48:	187b      	adds	r3, r7, r1
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	1ad3      	subs	r3, r2, r3
 8010b4e:	3304      	adds	r3, #4
 8010b50:	2284      	movs	r2, #132	@ 0x84
 8010b52:	18b9      	adds	r1, r7, r2
 8010b54:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8010b56:	18bb      	adds	r3, r7, r2
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4ad1      	ldr	r2, [pc, #836]	@ (8010ea0 <calculateSPLQ31+0x394>)
 8010b5c:	0019      	movs	r1, r3
 8010b5e:	0010      	movs	r0, r2
 8010b60:	f000 fc58 	bl	8011414 <getPo2factor>
 8010b64:	0003      	movs	r3, r0
 8010b66:	2280      	movs	r2, #128	@ 0x80
 8010b68:	18ba      	adds	r2, r7, r2
 8010b6a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	2284      	movs	r2, #132	@ 0x84
 8010b70:	2130      	movs	r1, #48	@ 0x30
 8010b72:	1852      	adds	r2, r2, r1
 8010b74:	19d2      	adds	r2, r2, r7
 8010b76:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8010b78:	2300      	movs	r3, #0
 8010b7a:	2280      	movs	r2, #128	@ 0x80
 8010b7c:	1852      	adds	r2, r2, r1
 8010b7e:	19d2      	adds	r2, r2, r7
 8010b80:	6013      	str	r3, [r2, #0]
 8010b82:	e032      	b.n	8010bea <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8010b84:	4ac5      	ldr	r2, [pc, #788]	@ (8010e9c <calculateSPLQ31+0x390>)
 8010b86:	2680      	movs	r6, #128	@ 0x80
 8010b88:	2330      	movs	r3, #48	@ 0x30
 8010b8a:	18f1      	adds	r1, r6, r3
 8010b8c:	19cb      	adds	r3, r1, r7
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	589a      	ldr	r2, [r3, r2]
 8010b94:	2188      	movs	r1, #136	@ 0x88
 8010b96:	1879      	adds	r1, r7, r1
 8010b98:	680b      	ldr	r3, [r1, #0]
 8010b9a:	1ad2      	subs	r2, r2, r3
 8010b9c:	2180      	movs	r1, #128	@ 0x80
 8010b9e:	1879      	adds	r1, r7, r1
 8010ba0:	680b      	ldr	r3, [r1, #0]
 8010ba2:	409a      	lsls	r2, r3
 8010ba4:	0011      	movs	r1, r2
 8010ba6:	4abf      	ldr	r2, [pc, #764]	@ (8010ea4 <calculateSPLQ31+0x398>)
 8010ba8:	2084      	movs	r0, #132	@ 0x84
 8010baa:	2330      	movs	r3, #48	@ 0x30
 8010bac:	18c3      	adds	r3, r0, r3
 8010bae:	19db      	adds	r3, r3, r7
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8010bb6:	2230      	movs	r2, #48	@ 0x30
 8010bb8:	1883      	adds	r3, r0, r2
 8010bba:	19db      	adds	r3, r3, r7
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	49b8      	ldr	r1, [pc, #736]	@ (8010ea4 <calculateSPLQ31+0x398>)
 8010bc2:	009a      	lsls	r2, r3, #2
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	5053      	str	r3, [r2, r1]
        count += 2;
 8010bc8:	2230      	movs	r2, #48	@ 0x30
 8010bca:	1883      	adds	r3, r0, r2
 8010bcc:	19db      	adds	r3, r3, r7
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	3302      	adds	r3, #2
 8010bd2:	0011      	movs	r1, r2
 8010bd4:	1882      	adds	r2, r0, r2
 8010bd6:	19d2      	adds	r2, r2, r7
 8010bd8:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8010bda:	000a      	movs	r2, r1
 8010bdc:	18b3      	adds	r3, r6, r2
 8010bde:	19db      	adds	r3, r3, r7
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3301      	adds	r3, #1
 8010be4:	18b2      	adds	r2, r6, r2
 8010be6:	19d2      	adds	r2, r2, r7
 8010be8:	6013      	str	r3, [r2, #0]
 8010bea:	2380      	movs	r3, #128	@ 0x80
 8010bec:	2630      	movs	r6, #48	@ 0x30
 8010bee:	199b      	adds	r3, r3, r6
 8010bf0:	19db      	adds	r3, r3, r7
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8010bf6:	d9c5      	bls.n	8010b84 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8010bf8:	4bab      	ldr	r3, [pc, #684]	@ (8010ea8 <calculateSPLQ31+0x39c>)
 8010bfa:	6818      	ldr	r0, [r3, #0]
 8010bfc:	49a9      	ldr	r1, [pc, #676]	@ (8010ea4 <calculateSPLQ31+0x398>)
 8010bfe:	2301      	movs	r3, #1
 8010c00:	2200      	movs	r2, #0
 8010c02:	f011 fe81 	bl	8022908 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8010c06:	4aa9      	ldr	r2, [pc, #676]	@ (8010eac <calculateSPLQ31+0x3a0>)
 8010c08:	2338      	movs	r3, #56	@ 0x38
 8010c0a:	199b      	adds	r3, r3, r6
 8010c0c:	19d9      	adds	r1, r3, r7
 8010c0e:	2334      	movs	r3, #52	@ 0x34
 8010c10:	199b      	adds	r3, r3, r6
 8010c12:	19d8      	adds	r0, r3, r7
 8010c14:	237e      	movs	r3, #126	@ 0x7e
 8010c16:	f000 fbbd 	bl	8011394 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8010c1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010c1c:	2380      	movs	r3, #128	@ 0x80
 8010c1e:	061b      	lsls	r3, r3, #24
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d101      	bne.n	8010c28 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8010c24:	4b9e      	ldr	r3, [pc, #632]	@ (8010ea0 <calculateSPLQ31+0x394>)
 8010c26:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8010c28:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010c2a:	2380      	movs	r3, #128	@ 0x80
 8010c2c:	061b      	lsls	r3, r3, #24
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d101      	bne.n	8010c36 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8010c32:	4b9b      	ldr	r3, [pc, #620]	@ (8010ea0 <calculateSPLQ31+0x394>)
 8010c34:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8010c36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c38:	17da      	asrs	r2, r3, #31
 8010c3a:	189b      	adds	r3, r3, r2
 8010c3c:	4053      	eors	r3, r2
 8010c3e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8010c40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c42:	17da      	asrs	r2, r3, #31
 8010c44:	189b      	adds	r3, r3, r2
 8010c46:	4053      	eors	r3, r2
 8010c48:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8010c4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	dd01      	ble.n	8010c56 <calculateSPLQ31+0x14a>
    {
        max = min;
 8010c52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c54:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8010c56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c58:	3304      	adds	r3, #4
 8010c5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8010c5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010c5e:	4a90      	ldr	r2, [pc, #576]	@ (8010ea0 <calculateSPLQ31+0x394>)
 8010c60:	0019      	movs	r1, r3
 8010c62:	0010      	movs	r0, r2
 8010c64:	f000 fbd6 	bl	8011414 <getPo2factor>
 8010c68:	0003      	movs	r3, r0
 8010c6a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8010c6c:	2302      	movs	r3, #2
 8010c6e:	22ac      	movs	r2, #172	@ 0xac
 8010c70:	18ba      	adds	r2, r7, r2
 8010c72:	6013      	str	r3, [r2, #0]
 8010c74:	e012      	b.n	8010c9c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8010c76:	4a8b      	ldr	r2, [pc, #556]	@ (8010ea4 <calculateSPLQ31+0x398>)
 8010c78:	20ac      	movs	r0, #172	@ 0xac
 8010c7a:	183b      	adds	r3, r7, r0
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	009b      	lsls	r3, r3, #2
 8010c80:	589a      	ldr	r2, [r3, r2]
 8010c82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010c84:	409a      	lsls	r2, r3
 8010c86:	0011      	movs	r1, r2
 8010c88:	4a86      	ldr	r2, [pc, #536]	@ (8010ea4 <calculateSPLQ31+0x398>)
 8010c8a:	183b      	adds	r3, r7, r0
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8010c92:	183b      	adds	r3, r7, r0
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	3301      	adds	r3, #1
 8010c98:	183a      	adds	r2, r7, r0
 8010c9a:	6013      	str	r3, [r2, #0]
 8010c9c:	23ac      	movs	r3, #172	@ 0xac
 8010c9e:	18fb      	adds	r3, r7, r3
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ca4:	d9e7      	bls.n	8010c76 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8010ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8010e9c <calculateSPLQ31+0x390>)
 8010ca8:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8010caa:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8010cac:	4b7d      	ldr	r3, [pc, #500]	@ (8010ea4 <calculateSPLQ31+0x398>)
 8010cae:	2240      	movs	r2, #64	@ 0x40
 8010cb0:	0018      	movs	r0, r3
 8010cb2:	f012 fbd3 	bl	802345c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8010cb6:	2330      	movs	r3, #48	@ 0x30
 8010cb8:	18fb      	adds	r3, r7, r3
 8010cba:	0018      	movs	r0, r3
 8010cbc:	2330      	movs	r3, #48	@ 0x30
 8010cbe:	001a      	movs	r2, r3
 8010cc0:	2100      	movs	r1, #0
 8010cc2:	f014 fa11 	bl	80250e8 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	2300      	movs	r3, #0
 8010cca:	21a0      	movs	r1, #160	@ 0xa0
 8010ccc:	1879      	adds	r1, r7, r1
 8010cce:	600a      	str	r2, [r1, #0]
 8010cd0:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	229c      	movs	r2, #156	@ 0x9c
 8010cd6:	18ba      	adds	r2, r7, r2
 8010cd8:	6013      	str	r3, [r2, #0]
 8010cda:	e05b      	b.n	8010d94 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8010cdc:	269c      	movs	r6, #156	@ 0x9c
 8010cde:	19bb      	adds	r3, r7, r6
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	009a      	lsls	r2, r3, #2
 8010ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010ce6:	189b      	adds	r3, r3, r2
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	613b      	str	r3, [r7, #16]
 8010cec:	17db      	asrs	r3, r3, #31
 8010cee:	617b      	str	r3, [r7, #20]
 8010cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8010eb0 <calculateSPLQ31+0x3a4>)
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	19bb      	adds	r3, r7, r6
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	18d3      	adds	r3, r2, r3
 8010cfc:	881b      	ldrh	r3, [r3, #0]
 8010cfe:	60bb      	str	r3, [r7, #8]
 8010d00:	2300      	movs	r3, #0
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	68ba      	ldr	r2, [r7, #8]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	6938      	ldr	r0, [r7, #16]
 8010d0a:	6979      	ldr	r1, [r7, #20]
 8010d0c:	f7ef fc58 	bl	80005c0 <__aeabi_lmul>
 8010d10:	0002      	movs	r2, r0
 8010d12:	000b      	movs	r3, r1
 8010d14:	0010      	movs	r0, r2
 8010d16:	0019      	movs	r1, r3
 8010d18:	23a0      	movs	r3, #160	@ 0xa0
 8010d1a:	18fa      	adds	r2, r7, r3
 8010d1c:	6853      	ldr	r3, [r2, #4]
 8010d1e:	6812      	ldr	r2, [r2, #0]
 8010d20:	1812      	adds	r2, r2, r0
 8010d22:	414b      	adcs	r3, r1
 8010d24:	21a0      	movs	r1, #160	@ 0xa0
 8010d26:	1879      	adds	r1, r7, r1
 8010d28:	600a      	str	r2, [r1, #0]
 8010d2a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8010d2c:	4b61      	ldr	r3, [pc, #388]	@ (8010eb4 <calculateSPLQ31+0x3a8>)
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	19bb      	adds	r3, r7, r6
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	18d3      	adds	r3, r2, r3
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	2b06      	cmp	r3, #6
 8010d3a:	d025      	beq.n	8010d88 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8010d3c:	4b5d      	ldr	r3, [pc, #372]	@ (8010eb4 <calculateSPLQ31+0x3a8>)
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	19bb      	adds	r3, r7, r6
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	18d3      	adds	r3, r2, r3
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2230      	movs	r2, #48	@ 0x30
 8010d4a:	18ba      	adds	r2, r7, r2
 8010d4c:	00db      	lsls	r3, r3, #3
 8010d4e:	18d3      	adds	r3, r2, r3
 8010d50:	6818      	ldr	r0, [r3, #0]
 8010d52:	6859      	ldr	r1, [r3, #4]
 8010d54:	19bb      	adds	r3, r7, r6
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	009a      	lsls	r2, r3, #2
 8010d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010d5c:	189b      	adds	r3, r3, r2
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	603b      	str	r3, [r7, #0]
 8010d62:	17db      	asrs	r3, r3, #31
 8010d64:	607b      	str	r3, [r7, #4]
 8010d66:	4b53      	ldr	r3, [pc, #332]	@ (8010eb4 <calculateSPLQ31+0x3a8>)
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	19be      	adds	r6, r7, r6
 8010d6c:	6833      	ldr	r3, [r6, #0]
 8010d6e:	18d3      	adds	r3, r2, r3
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	001e      	movs	r6, r3
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	1880      	adds	r0, r0, r2
 8010d7a:	4159      	adcs	r1, r3
 8010d7c:	2330      	movs	r3, #48	@ 0x30
 8010d7e:	18fa      	adds	r2, r7, r3
 8010d80:	00f3      	lsls	r3, r6, #3
 8010d82:	18d3      	adds	r3, r2, r3
 8010d84:	6018      	str	r0, [r3, #0]
 8010d86:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8010d88:	229c      	movs	r2, #156	@ 0x9c
 8010d8a:	18bb      	adds	r3, r7, r2
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	18ba      	adds	r2, r7, r2
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	239c      	movs	r3, #156	@ 0x9c
 8010d96:	18fb      	adds	r3, r7, r3
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8010d9c:	d99e      	bls.n	8010cdc <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8010d9e:	2380      	movs	r3, #128	@ 0x80
 8010da0:	18fb      	adds	r3, r7, r3
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	001a      	movs	r2, r3
 8010da8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	18d3      	adds	r3, r2, r3
 8010dae:	3b22      	subs	r3, #34	@ 0x22
 8010db0:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8010db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010db4:	17da      	asrs	r2, r3, #31
 8010db6:	189b      	adds	r3, r3, r2
 8010db8:	4053      	eors	r3, r2
 8010dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8010dbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	da62      	bge.n	8010e88 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8010dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dc4:	3b20      	subs	r3, #32
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	db05      	blt.n	8010dd6 <calculateSPLQ31+0x2ca>
 8010dca:	22a0      	movs	r2, #160	@ 0xa0
 8010dcc:	18ba      	adds	r2, r7, r2
 8010dce:	6812      	ldr	r2, [r2, #0]
 8010dd0:	409a      	lsls	r2, r3
 8010dd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8010dd4:	e010      	b.n	8010df8 <calculateSPLQ31+0x2ec>
 8010dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dd8:	2220      	movs	r2, #32
 8010dda:	1ad3      	subs	r3, r2, r3
 8010ddc:	22a0      	movs	r2, #160	@ 0xa0
 8010dde:	18ba      	adds	r2, r7, r2
 8010de0:	6812      	ldr	r2, [r2, #0]
 8010de2:	40da      	lsrs	r2, r3
 8010de4:	0013      	movs	r3, r2
 8010de6:	22a4      	movs	r2, #164	@ 0xa4
 8010de8:	18ba      	adds	r2, r7, r2
 8010dea:	6811      	ldr	r1, [r2, #0]
 8010dec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010dee:	4091      	lsls	r1, r2
 8010df0:	6279      	str	r1, [r7, #36]	@ 0x24
 8010df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010df4:	431a      	orrs	r2, r3
 8010df6:	627a      	str	r2, [r7, #36]	@ 0x24
 8010df8:	21a0      	movs	r1, #160	@ 0xa0
 8010dfa:	187b      	adds	r3, r7, r1
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e00:	409a      	lsls	r2, r3
 8010e02:	623a      	str	r2, [r7, #32]
 8010e04:	6a3b      	ldr	r3, [r7, #32]
 8010e06:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8010e08:	187a      	adds	r2, r7, r1
 8010e0a:	6013      	str	r3, [r2, #0]
 8010e0c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010e0e:	2300      	movs	r3, #0
 8010e10:	2298      	movs	r2, #152	@ 0x98
 8010e12:	18ba      	adds	r2, r7, r2
 8010e14:	6013      	str	r3, [r2, #0]
 8010e16:	e031      	b.n	8010e7c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 8010e18:	2330      	movs	r3, #48	@ 0x30
 8010e1a:	18fa      	adds	r2, r7, r3
 8010e1c:	2398      	movs	r3, #152	@ 0x98
 8010e1e:	18fb      	adds	r3, r7, r3
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	00db      	lsls	r3, r3, #3
 8010e24:	18d3      	adds	r3, r2, r3
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010e2c:	3920      	subs	r1, #32
 8010e2e:	2900      	cmp	r1, #0
 8010e30:	db03      	blt.n	8010e3a <calculateSPLQ31+0x32e>
 8010e32:	0010      	movs	r0, r2
 8010e34:	4088      	lsls	r0, r1
 8010e36:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010e38:	e00c      	b.n	8010e54 <calculateSPLQ31+0x348>
 8010e3a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010e3c:	2020      	movs	r0, #32
 8010e3e:	1a41      	subs	r1, r0, r1
 8010e40:	0010      	movs	r0, r2
 8010e42:	40c8      	lsrs	r0, r1
 8010e44:	0001      	movs	r1, r0
 8010e46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010e48:	001c      	movs	r4, r3
 8010e4a:	4084      	lsls	r4, r0
 8010e4c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8010e4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010e50:	4308      	orrs	r0, r1
 8010e52:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010e54:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010e56:	0013      	movs	r3, r2
 8010e58:	408b      	lsls	r3, r1
 8010e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e5c:	2330      	movs	r3, #48	@ 0x30
 8010e5e:	18fa      	adds	r2, r7, r3
 8010e60:	2098      	movs	r0, #152	@ 0x98
 8010e62:	183b      	adds	r3, r7, r0
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	00db      	lsls	r3, r3, #3
 8010e68:	18d3      	adds	r3, r2, r3
 8010e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e6e:	6019      	str	r1, [r3, #0]
 8010e70:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010e72:	183b      	adds	r3, r7, r0
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3301      	adds	r3, #1
 8010e78:	183a      	adds	r2, r7, r0
 8010e7a:	6013      	str	r3, [r2, #0]
 8010e7c:	2398      	movs	r3, #152	@ 0x98
 8010e7e:	18fb      	adds	r3, r7, r3
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	2b05      	cmp	r3, #5
 8010e84:	d9c8      	bls.n	8010e18 <calculateSPLQ31+0x30c>
 8010e86:	e06b      	b.n	8010f60 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8010e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e8a:	3b20      	subs	r3, #32
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	db13      	blt.n	8010eb8 <calculateSPLQ31+0x3ac>
 8010e90:	22a4      	movs	r2, #164	@ 0xa4
 8010e92:	18ba      	adds	r2, r7, r2
 8010e94:	6812      	ldr	r2, [r2, #0]
 8010e96:	40da      	lsrs	r2, r3
 8010e98:	61ba      	str	r2, [r7, #24]
 8010e9a:	e01e      	b.n	8010eda <calculateSPLQ31+0x3ce>
 8010e9c:	20001820 	.word	0x20001820
 8010ea0:	7fffffff 	.word	0x7fffffff
 8010ea4:	20001a6c 	.word	0x20001a6c
 8010ea8:	200000c8 	.word	0x200000c8
 8010eac:	20001a74 	.word	0x20001a74
 8010eb0:	200000cc 	.word	0x200000cc
 8010eb4:	200000d8 	.word	0x200000d8
 8010eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010eba:	2220      	movs	r2, #32
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	22a4      	movs	r2, #164	@ 0xa4
 8010ec0:	18ba      	adds	r2, r7, r2
 8010ec2:	6812      	ldr	r2, [r2, #0]
 8010ec4:	409a      	lsls	r2, r3
 8010ec6:	0013      	movs	r3, r2
 8010ec8:	22a0      	movs	r2, #160	@ 0xa0
 8010eca:	18ba      	adds	r2, r7, r2
 8010ecc:	6811      	ldr	r1, [r2, #0]
 8010ece:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010ed0:	40d1      	lsrs	r1, r2
 8010ed2:	61b9      	str	r1, [r7, #24]
 8010ed4:	69ba      	ldr	r2, [r7, #24]
 8010ed6:	431a      	orrs	r2, r3
 8010ed8:	61ba      	str	r2, [r7, #24]
 8010eda:	23a4      	movs	r3, #164	@ 0xa4
 8010edc:	18fb      	adds	r3, r7, r3
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ee2:	40da      	lsrs	r2, r3
 8010ee4:	61fa      	str	r2, [r7, #28]
 8010ee6:	69ba      	ldr	r2, [r7, #24]
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	21a0      	movs	r1, #160	@ 0xa0
 8010eec:	1879      	adds	r1, r7, r1
 8010eee:	600a      	str	r2, [r1, #0]
 8010ef0:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	2294      	movs	r2, #148	@ 0x94
 8010ef6:	18ba      	adds	r2, r7, r2
 8010ef8:	6013      	str	r3, [r2, #0]
 8010efa:	e02c      	b.n	8010f56 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8010efc:	2330      	movs	r3, #48	@ 0x30
 8010efe:	18fa      	adds	r2, r7, r3
 8010f00:	2394      	movs	r3, #148	@ 0x94
 8010f02:	18fb      	adds	r3, r7, r3
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	18d3      	adds	r3, r2, r3
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010f10:	3920      	subs	r1, #32
 8010f12:	2900      	cmp	r1, #0
 8010f14:	db03      	blt.n	8010f1e <calculateSPLQ31+0x412>
 8010f16:	0018      	movs	r0, r3
 8010f18:	40c8      	lsrs	r0, r1
 8010f1a:	0004      	movs	r4, r0
 8010f1c:	e00a      	b.n	8010f34 <calculateSPLQ31+0x428>
 8010f1e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010f20:	2020      	movs	r0, #32
 8010f22:	1a41      	subs	r1, r0, r1
 8010f24:	0018      	movs	r0, r3
 8010f26:	4088      	lsls	r0, r1
 8010f28:	0001      	movs	r1, r0
 8010f2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010f2c:	0016      	movs	r6, r2
 8010f2e:	40c6      	lsrs	r6, r0
 8010f30:	0034      	movs	r4, r6
 8010f32:	430c      	orrs	r4, r1
 8010f34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010f36:	40cb      	lsrs	r3, r1
 8010f38:	001d      	movs	r5, r3
 8010f3a:	2330      	movs	r3, #48	@ 0x30
 8010f3c:	18fa      	adds	r2, r7, r3
 8010f3e:	2194      	movs	r1, #148	@ 0x94
 8010f40:	187b      	adds	r3, r7, r1
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	18d3      	adds	r3, r2, r3
 8010f48:	601c      	str	r4, [r3, #0]
 8010f4a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010f4c:	187b      	adds	r3, r7, r1
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	3301      	adds	r3, #1
 8010f52:	187a      	adds	r2, r7, r1
 8010f54:	6013      	str	r3, [r2, #0]
 8010f56:	2394      	movs	r3, #148	@ 0x94
 8010f58:	18fb      	adds	r3, r7, r3
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b05      	cmp	r3, #5
 8010f5e:	d9cd      	bls.n	8010efc <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8010f60:	230f      	movs	r3, #15
 8010f62:	425d      	negs	r5, r3
 8010f64:	2305      	movs	r3, #5
 8010f66:	425e      	negs	r6, r3
 8010f68:	4b4a      	ldr	r3, [pc, #296]	@ (8011094 <calculateSPLQ31+0x588>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8011098 <calculateSPLQ31+0x58c>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	21a0      	movs	r1, #160	@ 0xa0
 8010f76:	1879      	adds	r1, r7, r1
 8010f78:	6808      	ldr	r0, [r1, #0]
 8010f7a:	6849      	ldr	r1, [r1, #4]
 8010f7c:	4c47      	ldr	r4, [pc, #284]	@ (801109c <calculateSPLQ31+0x590>)
 8010f7e:	9403      	str	r4, [sp, #12]
 8010f80:	4c47      	ldr	r4, [pc, #284]	@ (80110a0 <calculateSPLQ31+0x594>)
 8010f82:	9402      	str	r4, [sp, #8]
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	9200      	str	r2, [sp, #0]
 8010f88:	0033      	movs	r3, r6
 8010f8a:	002a      	movs	r2, r5
 8010f8c:	f000 fa86 	bl	801149c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010f90:	2300      	movs	r3, #0
 8010f92:	2290      	movs	r2, #144	@ 0x90
 8010f94:	18ba      	adds	r2, r7, r2
 8010f96:	6013      	str	r3, [r2, #0]
 8010f98:	e026      	b.n	8010fe8 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8010f9a:	2330      	movs	r3, #48	@ 0x30
 8010f9c:	18fa      	adds	r2, r7, r3
 8010f9e:	2490      	movs	r4, #144	@ 0x90
 8010fa0:	193b      	adds	r3, r7, r4
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	00db      	lsls	r3, r3, #3
 8010fa6:	18d3      	adds	r3, r2, r3
 8010fa8:	6818      	ldr	r0, [r3, #0]
 8010faa:	6859      	ldr	r1, [r3, #4]
 8010fac:	230f      	movs	r3, #15
 8010fae:	425d      	negs	r5, r3
 8010fb0:	2305      	movs	r3, #5
 8010fb2:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8010fb4:	193b      	adds	r3, r7, r4
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	009a      	lsls	r2, r3, #2
 8010fba:	4b3a      	ldr	r3, [pc, #232]	@ (80110a4 <calculateSPLQ31+0x598>)
 8010fbc:	18d3      	adds	r3, r2, r3
 8010fbe:	193a      	adds	r2, r7, r4
 8010fc0:	6812      	ldr	r2, [r2, #0]
 8010fc2:	0094      	lsls	r4, r2, #2
 8010fc4:	4a38      	ldr	r2, [pc, #224]	@ (80110a8 <calculateSPLQ31+0x59c>)
 8010fc6:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8010fc8:	9203      	str	r2, [sp, #12]
 8010fca:	9302      	str	r3, [sp, #8]
 8010fcc:	2300      	movs	r3, #0
 8010fce:	9301      	str	r3, [sp, #4]
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	9300      	str	r3, [sp, #0]
 8010fd4:	0033      	movs	r3, r6
 8010fd6:	002a      	movs	r2, r5
 8010fd8:	f000 fa60 	bl	801149c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8010fdc:	2490      	movs	r4, #144	@ 0x90
 8010fde:	193b      	adds	r3, r7, r4
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	193a      	adds	r2, r7, r4
 8010fe6:	6013      	str	r3, [r2, #0]
 8010fe8:	2390      	movs	r3, #144	@ 0x90
 8010fea:	18fb      	adds	r3, r7, r3
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b05      	cmp	r3, #5
 8010ff0:	d9d3      	bls.n	8010f9a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8010ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80110a0 <calculateSPLQ31+0x594>)
 8010ff4:	681a      	ldr	r2, [r3, #0]
 8010ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80110ac <calculateSPLQ31+0x5a0>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	18d2      	adds	r2, r2, r3
 8010ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80110ac <calculateSPLQ31+0x5a0>)
 8010ffe:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8011000:	4b26      	ldr	r3, [pc, #152]	@ (801109c <calculateSPLQ31+0x590>)
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	4b2a      	ldr	r3, [pc, #168]	@ (80110b0 <calculateSPLQ31+0x5a4>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	18d2      	adds	r2, r2, r3
 801100a:	4b29      	ldr	r3, [pc, #164]	@ (80110b0 <calculateSPLQ31+0x5a4>)
 801100c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801100e:	2300      	movs	r3, #0
 8011010:	228c      	movs	r2, #140	@ 0x8c
 8011012:	18ba      	adds	r2, r7, r2
 8011014:	6013      	str	r3, [r2, #0]
 8011016:	e025      	b.n	8011064 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 8011018:	4b22      	ldr	r3, [pc, #136]	@ (80110a4 <calculateSPLQ31+0x598>)
 801101a:	208c      	movs	r0, #140	@ 0x8c
 801101c:	183a      	adds	r2, r7, r0
 801101e:	6812      	ldr	r2, [r2, #0]
 8011020:	0092      	lsls	r2, r2, #2
 8011022:	58d2      	ldr	r2, [r2, r3]
 8011024:	4b23      	ldr	r3, [pc, #140]	@ (80110b4 <calculateSPLQ31+0x5a8>)
 8011026:	1839      	adds	r1, r7, r0
 8011028:	6809      	ldr	r1, [r1, #0]
 801102a:	0089      	lsls	r1, r1, #2
 801102c:	58cb      	ldr	r3, [r1, r3]
 801102e:	18d1      	adds	r1, r2, r3
 8011030:	4b20      	ldr	r3, [pc, #128]	@ (80110b4 <calculateSPLQ31+0x5a8>)
 8011032:	183a      	adds	r2, r7, r0
 8011034:	6812      	ldr	r2, [r2, #0]
 8011036:	0092      	lsls	r2, r2, #2
 8011038:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 801103a:	4b1b      	ldr	r3, [pc, #108]	@ (80110a8 <calculateSPLQ31+0x59c>)
 801103c:	183a      	adds	r2, r7, r0
 801103e:	6812      	ldr	r2, [r2, #0]
 8011040:	0092      	lsls	r2, r2, #2
 8011042:	58d2      	ldr	r2, [r2, r3]
 8011044:	4b1c      	ldr	r3, [pc, #112]	@ (80110b8 <calculateSPLQ31+0x5ac>)
 8011046:	1839      	adds	r1, r7, r0
 8011048:	6809      	ldr	r1, [r1, #0]
 801104a:	0089      	lsls	r1, r1, #2
 801104c:	58cb      	ldr	r3, [r1, r3]
 801104e:	18d1      	adds	r1, r2, r3
 8011050:	4b19      	ldr	r3, [pc, #100]	@ (80110b8 <calculateSPLQ31+0x5ac>)
 8011052:	183a      	adds	r2, r7, r0
 8011054:	6812      	ldr	r2, [r2, #0]
 8011056:	0092      	lsls	r2, r2, #2
 8011058:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801105a:	183b      	adds	r3, r7, r0
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	3301      	adds	r3, #1
 8011060:	183a      	adds	r2, r7, r0
 8011062:	6013      	str	r3, [r2, #0]
 8011064:	238c      	movs	r3, #140	@ 0x8c
 8011066:	18fb      	adds	r3, r7, r3
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b05      	cmp	r3, #5
 801106c:	d9d4      	bls.n	8011018 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 801106e:	4b13      	ldr	r3, [pc, #76]	@ (80110bc <calculateSPLQ31+0x5b0>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	1c5a      	adds	r2, r3, #1
 8011074:	4b11      	ldr	r3, [pc, #68]	@ (80110bc <calculateSPLQ31+0x5b0>)
 8011076:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8011078:	4b10      	ldr	r3, [pc, #64]	@ (80110bc <calculateSPLQ31+0x5b0>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b0f      	cmp	r3, #15
 801107e:	d905      	bls.n	801108c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8011080:	4b0f      	ldr	r3, [pc, #60]	@ (80110c0 <calculateSPLQ31+0x5b4>)
 8011082:	2201      	movs	r2, #1
 8011084:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011086:	4b0f      	ldr	r3, [pc, #60]	@ (80110c4 <calculateSPLQ31+0x5b8>)
 8011088:	2200      	movs	r2, #0
 801108a:	701a      	strb	r2, [r3, #0]
    }
}
 801108c:	46c0      	nop			@ (mov r8, r8)
 801108e:	46bd      	mov	sp, r7
 8011090:	b02f      	add	sp, #188	@ 0xbc
 8011092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011094:	200000d0 	.word	0x200000d0
 8011098:	200000d4 	.word	0x200000d4
 801109c:	20000fec 	.word	0x20000fec
 80110a0:	20000fe8 	.word	0x20000fe8
 80110a4:	20000ff0 	.word	0x20000ff0
 80110a8:	20001008 	.word	0x20001008
 80110ac:	20001a30 	.word	0x20001a30
 80110b0:	20001a34 	.word	0x20001a34
 80110b4:	20001a38 	.word	0x20001a38
 80110b8:	20001a50 	.word	0x20001a50
 80110bc:	20001a68 	.word	0x20001a68
 80110c0:	20000fdd 	.word	0x20000fdd
 80110c4:	20000fdb 	.word	0x20000fdb

080110c8 <resetSPLstate>:

static void resetSPLstate(void)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 80110ce:	4b11      	ldr	r3, [pc, #68]	@ (8011114 <resetSPLstate+0x4c>)
 80110d0:	2200      	movs	r2, #0
 80110d2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 80110d4:	4b10      	ldr	r3, [pc, #64]	@ (8011118 <resetSPLstate+0x50>)
 80110d6:	2200      	movs	r2, #0
 80110d8:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 80110da:	4b10      	ldr	r3, [pc, #64]	@ (801111c <resetSPLstate+0x54>)
 80110dc:	2200      	movs	r2, #0
 80110de:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80110e0:	2300      	movs	r3, #0
 80110e2:	607b      	str	r3, [r7, #4]
 80110e4:	e00c      	b.n	8011100 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 80110e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011120 <resetSPLstate+0x58>)
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	0092      	lsls	r2, r2, #2
 80110ec:	2100      	movs	r1, #0
 80110ee:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80110f0:	4b0c      	ldr	r3, [pc, #48]	@ (8011124 <resetSPLstate+0x5c>)
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	0092      	lsls	r2, r2, #2
 80110f6:	2100      	movs	r1, #0
 80110f8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3301      	adds	r3, #1
 80110fe:	607b      	str	r3, [r7, #4]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b05      	cmp	r3, #5
 8011104:	d9ef      	bls.n	80110e6 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 8011106:	4b08      	ldr	r3, [pc, #32]	@ (8011128 <resetSPLstate+0x60>)
 8011108:	2200      	movs	r2, #0
 801110a:	701a      	strb	r2, [r3, #0]
}
 801110c:	46c0      	nop			@ (mov r8, r8)
 801110e:	46bd      	mov	sp, r7
 8011110:	b002      	add	sp, #8
 8011112:	bd80      	pop	{r7, pc}
 8011114:	20001a30 	.word	0x20001a30
 8011118:	20001a34 	.word	0x20001a34
 801111c:	20001a68 	.word	0x20001a68
 8011120:	20001a38 	.word	0x20001a38
 8011124:	20001a50 	.word	0x20001a50
 8011128:	20000fdd 	.word	0x20000fdd

0801112c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 801112c:	b5b0      	push	{r4, r5, r7, lr}
 801112e:	b090      	sub	sp, #64	@ 0x40
 8011130:	af00      	add	r7, sp, #0
 8011132:	60f8      	str	r0, [r7, #12]
 8011134:	60b9      	str	r1, [r7, #8]
 8011136:	0019      	movs	r1, r3
 8011138:	1dfb      	adds	r3, r7, #7
 801113a:	701a      	strb	r2, [r3, #0]
 801113c:	1dbb      	adds	r3, r7, #6
 801113e:	1c0a      	adds	r2, r1, #0
 8011140:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8011142:	1dfb      	adds	r3, r7, #7
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d005      	beq.n	8011156 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 801114a:	4b3b      	ldr	r3, [pc, #236]	@ (8011238 <getFilteredMaxAmplitudeQ31+0x10c>)
 801114c:	2200      	movs	r2, #0
 801114e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8011150:	4b3a      	ldr	r3, [pc, #232]	@ (801123c <getFilteredMaxAmplitudeQ31+0x110>)
 8011152:	2200      	movs	r2, #0
 8011154:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 801115e:	2305      	movs	r3, #5
 8011160:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8011162:	2300      	movs	r3, #0
 8011164:	637b      	str	r3, [r7, #52]	@ 0x34
 8011166:	e040      	b.n	80111ea <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8011168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	18d3      	adds	r3, r2, r3
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011174:	409a      	lsls	r2, r3
 8011176:	0013      	movs	r3, r2
 8011178:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 801117a:	4b30      	ldr	r3, [pc, #192]	@ (801123c <getFilteredMaxAmplitudeQ31+0x110>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	425a      	negs	r2, r3
 8011180:	4b2e      	ldr	r3, [pc, #184]	@ (801123c <getFilteredMaxAmplitudeQ31+0x110>)
 8011182:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8011184:	2418      	movs	r4, #24
 8011186:	193a      	adds	r2, r7, r4
 8011188:	492c      	ldr	r1, [pc, #176]	@ (801123c <getFilteredMaxAmplitudeQ31+0x110>)
 801118a:	231c      	movs	r3, #28
 801118c:	18f8      	adds	r0, r7, r3
 801118e:	2301      	movs	r3, #1
 8011190:	f012 f9bc 	bl	802350c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8011194:	2514      	movs	r5, #20
 8011196:	197a      	adds	r2, r7, r5
 8011198:	1939      	adds	r1, r7, r4
 801119a:	4829      	ldr	r0, [pc, #164]	@ (8011240 <getFilteredMaxAmplitudeQ31+0x114>)
 801119c:	2301      	movs	r3, #1
 801119e:	f012 f983 	bl	80234a8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 80111a2:	2410      	movs	r4, #16
 80111a4:	193a      	adds	r2, r7, r4
 80111a6:	4924      	ldr	r1, [pc, #144]	@ (8011238 <getFilteredMaxAmplitudeQ31+0x10c>)
 80111a8:	4826      	ldr	r0, [pc, #152]	@ (8011244 <getFilteredMaxAmplitudeQ31+0x118>)
 80111aa:	2301      	movs	r3, #1
 80111ac:	f012 f97c 	bl	80234a8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 80111b0:	4a21      	ldr	r2, [pc, #132]	@ (8011238 <getFilteredMaxAmplitudeQ31+0x10c>)
 80111b2:	1939      	adds	r1, r7, r4
 80111b4:	1978      	adds	r0, r7, r5
 80111b6:	2301      	movs	r3, #1
 80111b8:	f012 f9a8 	bl	802350c <arm_add_q31>

        lastData = fx;
 80111bc:	69fa      	ldr	r2, [r7, #28]
 80111be:	4b1f      	ldr	r3, [pc, #124]	@ (801123c <getFilteredMaxAmplitudeQ31+0x110>)
 80111c0:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 80111c2:	4b1d      	ldr	r3, [pc, #116]	@ (8011238 <getFilteredMaxAmplitudeQ31+0x10c>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80111c8:	429a      	cmp	r2, r3
 80111ca:	da03      	bge.n	80111d4 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 80111cc:	4b1a      	ldr	r3, [pc, #104]	@ (8011238 <getFilteredMaxAmplitudeQ31+0x10c>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80111d2:	e007      	b.n	80111e4 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 80111d4:	4b18      	ldr	r3, [pc, #96]	@ (8011238 <getFilteredMaxAmplitudeQ31+0x10c>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80111da:	429a      	cmp	r2, r3
 80111dc:	dd02      	ble.n	80111e4 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 80111de:	4b16      	ldr	r3, [pc, #88]	@ (8011238 <getFilteredMaxAmplitudeQ31+0x10c>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 80111e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111e6:	3301      	adds	r3, #1
 80111e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d3ba      	bcc.n	8011168 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80111f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f4:	17da      	asrs	r2, r3, #31
 80111f6:	189b      	adds	r3, r3, r2
 80111f8:	4053      	eors	r3, r2
 80111fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80111fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8011200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011204:	4293      	cmp	r3, r2
 8011206:	d200      	bcs.n	801120a <getFilteredMaxAmplitudeQ31+0xde>
 8011208:	0013      	movs	r3, r2
 801120a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 801120c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801120e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011210:	40da      	lsrs	r2, r3
 8011212:	0013      	movs	r3, r2
 8011214:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 8011216:	1dbb      	adds	r3, r7, #6
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d007      	beq.n	801122e <getFilteredMaxAmplitudeQ31+0x102>
 801121e:	4b0a      	ldr	r3, [pc, #40]	@ (8011248 <getFilteredMaxAmplitudeQ31+0x11c>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	6a3a      	ldr	r2, [r7, #32]
 8011224:	429a      	cmp	r2, r3
 8011226:	d902      	bls.n	801122e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 8011228:	4b07      	ldr	r3, [pc, #28]	@ (8011248 <getFilteredMaxAmplitudeQ31+0x11c>)
 801122a:	6a3a      	ldr	r2, [r7, #32]
 801122c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 801122e:	6a3b      	ldr	r3, [r7, #32]
}
 8011230:	0018      	movs	r0, r3
 8011232:	46bd      	mov	sp, r7
 8011234:	b010      	add	sp, #64	@ 0x40
 8011236:	bdb0      	pop	{r4, r5, r7, pc}
 8011238:	20001e6c 	.word	0x20001e6c
 801123c:	20001e70 	.word	0x20001e70
 8011240:	0802d560 	.word	0x0802d560
 8011244:	0802d564 	.word	0x0802d564
 8011248:	20000fe4 	.word	0x20000fe4

0801124c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b086      	sub	sp, #24
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8011258:	4913      	ldr	r1, [pc, #76]	@ (80112a8 <floatToIntAndFrac2dp+0x5c>)
 801125a:	68f8      	ldr	r0, [r7, #12]
 801125c:	f7ef fea0 	bl	8000fa0 <__aeabi_fmul>
 8011260:	1c03      	adds	r3, r0, #0
 8011262:	1c18      	adds	r0, r3, #0
 8011264:	f016 fe54 	bl	8027f10 <roundf>
 8011268:	1c03      	adds	r3, r0, #0
 801126a:	1c18      	adds	r0, r3, #0
 801126c:	f7ef f9d6 	bl	800061c <__aeabi_f2uiz>
 8011270:	0003      	movs	r3, r0
 8011272:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	2164      	movs	r1, #100	@ 0x64
 8011278:	0018      	movs	r0, r3
 801127a:	f7ee ff93 	bl	80001a4 <__udivsi3>
 801127e:	0003      	movs	r3, r0
 8011280:	001a      	movs	r2, r3
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	b2da      	uxtb	r2, r3
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	b2db      	uxtb	r3, r3
 8011290:	2164      	movs	r1, #100	@ 0x64
 8011292:	434b      	muls	r3, r1
 8011294:	b2db      	uxtb	r3, r3
 8011296:	1ad3      	subs	r3, r2, r3
 8011298:	b2da      	uxtb	r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	701a      	strb	r2, [r3, #0]
}
 801129e:	46c0      	nop			@ (mov r8, r8)
 80112a0:	46bd      	mov	sp, r7
 80112a2:	b006      	add	sp, #24
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	46c0      	nop			@ (mov r8, r8)
 80112a8:	42c80000 	.word	0x42c80000

080112ac <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 80112b8:	4914      	ldr	r1, [pc, #80]	@ (801130c <floatToIntAndFrac1dp+0x60>)
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f7ef fe70 	bl	8000fa0 <__aeabi_fmul>
 80112c0:	1c03      	adds	r3, r0, #0
 80112c2:	1c18      	adds	r0, r3, #0
 80112c4:	f016 fe24 	bl	8027f10 <roundf>
 80112c8:	1c03      	adds	r3, r0, #0
 80112ca:	1c18      	adds	r0, r3, #0
 80112cc:	f7ef f9a6 	bl	800061c <__aeabi_f2uiz>
 80112d0:	0003      	movs	r3, r0
 80112d2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	210a      	movs	r1, #10
 80112d8:	0018      	movs	r0, r3
 80112da:	f7ee ff63 	bl	80001a4 <__udivsi3>
 80112de:	0003      	movs	r3, r0
 80112e0:	001a      	movs	r2, r3
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	b2da      	uxtb	r2, r3
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	1c19      	adds	r1, r3, #0
 80112f2:	0089      	lsls	r1, r1, #2
 80112f4:	18cb      	adds	r3, r1, r3
 80112f6:	18db      	adds	r3, r3, r3
 80112f8:	b2db      	uxtb	r3, r3
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	b2da      	uxtb	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	701a      	strb	r2, [r3, #0]
}
 8011302:	46c0      	nop			@ (mov r8, r8)
 8011304:	46bd      	mov	sp, r7
 8011306:	b006      	add	sp, #24
 8011308:	bd80      	pop	{r7, pc}
 801130a:	46c0      	nop			@ (mov r8, r8)
 801130c:	41200000 	.word	0x41200000

08011310 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8011310:	b590      	push	{r4, r7, lr}
 8011312:	b087      	sub	sp, #28
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
 801131c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7f0 f956 	bl	80015d0 <__aeabi_i2f>
 8011324:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8011326:	6838      	ldr	r0, [r7, #0]
 8011328:	f7f0 f952 	bl	80015d0 <__aeabi_i2f>
 801132c:	1c03      	adds	r3, r0, #0
 801132e:	4918      	ldr	r1, [pc, #96]	@ (8011390 <sumToIntAverage+0x80>)
 8011330:	1c18      	adds	r0, r3, #0
 8011332:	f7ef fc4f 	bl	8000bd4 <__aeabi_fdiv>
 8011336:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8011338:	1c19      	adds	r1, r3, #0
 801133a:	1c20      	adds	r0, r4, #0
 801133c:	f7ef fac0 	bl	80008c0 <__aeabi_fadd>
 8011340:	1c03      	adds	r3, r0, #0
 8011342:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8011344:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011346:	f7f0 f98f 	bl	8001668 <__aeabi_ui2f>
 801134a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 801134c:	1c19      	adds	r1, r3, #0
 801134e:	1c20      	adds	r0, r4, #0
 8011350:	f7ef fc40 	bl	8000bd4 <__aeabi_fdiv>
 8011354:	1c03      	adds	r3, r0, #0
 8011356:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8011358:	2300      	movs	r3, #0
 801135a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 801135c:	68ba      	ldr	r2, [r7, #8]
 801135e:	2310      	movs	r3, #16
 8011360:	18f9      	adds	r1, r7, r3
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	1c18      	adds	r0, r3, #0
 8011366:	f7ff ffa1 	bl	80112ac <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	2bff      	cmp	r3, #255	@ 0xff
 801136e:	d906      	bls.n	801137e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	22ff      	movs	r2, #255	@ 0xff
 8011374:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	2209      	movs	r2, #9
 801137a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 801137c:	e003      	b.n	8011386 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	b2da      	uxtb	r2, r3
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	701a      	strb	r2, [r3, #0]
}
 8011386:	46c0      	nop			@ (mov r8, r8)
 8011388:	46bd      	mov	sp, r7
 801138a:	b007      	add	sp, #28
 801138c:	bd90      	pop	{r4, r7, pc}
 801138e:	46c0      	nop			@ (mov r8, r8)
 8011390:	41200000 	.word	0x41200000

08011394 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b086      	sub	sp, #24
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
 80113a0:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	2280      	movs	r2, #128	@ 0x80
 80113a6:	0612      	lsls	r2, r2, #24
 80113a8:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	4a18      	ldr	r2, [pc, #96]	@ (8011410 <findMinMax+0x7c>)
 80113ae:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80113b0:	2300      	movs	r3, #0
 80113b2:	617b      	str	r3, [r7, #20]
 80113b4:	e022      	b.n	80113fc <findMinMax+0x68>
    {
        if (array[i] < min[0])
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	18d3      	adds	r3, r2, r3
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	da06      	bge.n	80113d6 <findMinMax+0x42>
        {
            min[0] = array[i];
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	18d3      	adds	r3, r2, r3
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	687a      	ldr	r2, [r7, #4]
 80113dc:	18d3      	adds	r3, r2, r3
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	dd06      	ble.n	80113f6 <findMinMax+0x62>
        {
            max[0] = array[i];
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	687a      	ldr	r2, [r7, #4]
 80113ee:	18d3      	adds	r3, r2, r3
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	3301      	adds	r3, #1
 80113fa:	617b      	str	r3, [r7, #20]
 80113fc:	697a      	ldr	r2, [r7, #20]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	429a      	cmp	r2, r3
 8011402:	d3d8      	bcc.n	80113b6 <findMinMax+0x22>
        }
    }
}
 8011404:	46c0      	nop			@ (mov r8, r8)
 8011406:	46c0      	nop			@ (mov r8, r8)
 8011408:	46bd      	mov	sp, r7
 801140a:	b006      	add	sp, #24
 801140c:	bd80      	pop	{r7, pc}
 801140e:	46c0      	nop			@ (mov r8, r8)
 8011410:	7fffffff 	.word	0x7fffffff

08011414 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 801141e:	2300      	movs	r3, #0
 8011420:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	429a      	cmp	r2, r3
 8011428:	d302      	bcc.n	8011430 <getPo2factor+0x1c>
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d107      	bne.n	8011440 <getPo2factor+0x2c>
    {
        return 0;
 8011430:	2300      	movs	r3, #0
 8011432:	e00d      	b.n	8011450 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	085b      	lsrs	r3, r3, #1
 8011438:	607b      	str	r3, [r7, #4]
        bitShift++;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	3301      	adds	r3, #1
 801143e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	429a      	cmp	r2, r3
 8011446:	d2f5      	bcs.n	8011434 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	3b01      	subs	r3, #1
 801144c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 801144e:	68fb      	ldr	r3, [r7, #12]
}
 8011450:	0018      	movs	r0, r3
 8011452:	46bd      	mov	sp, r7
 8011454:	b004      	add	sp, #16
 8011456:	bd80      	pop	{r7, pc}

08011458 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b086      	sub	sp, #24
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
 8011464:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8011466:	68f8      	ldr	r0, [r7, #12]
 8011468:	f7f0 f8fe 	bl	8001668 <__aeabi_ui2f>
 801146c:	1c03      	adds	r3, r0, #0
 801146e:	1c19      	adds	r1, r3, #0
 8011470:	68b8      	ldr	r0, [r7, #8]
 8011472:	f7ef fd95 	bl	8000fa0 <__aeabi_fmul>
 8011476:	1c03      	adds	r3, r0, #0
 8011478:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	2310      	movs	r3, #16
 8011482:	18f9      	adds	r1, r7, r3
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	1c18      	adds	r0, r3, #0
 8011488:	f7ff fee0 	bl	801124c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	b29a      	uxth	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	801a      	strh	r2, [r3, #0]
}
 8011494:	46c0      	nop			@ (mov r8, r8)
 8011496:	46bd      	mov	sp, r7
 8011498:	b006      	add	sp, #24
 801149a:	bd80      	pop	{r7, pc}

0801149c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60b8      	str	r0, [r7, #8]
 80114a4:	60f9      	str	r1, [r7, #12]
 80114a6:	607a      	str	r2, [r7, #4]
 80114a8:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 80114aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ac:	6a3a      	ldr	r2, [r7, #32]
 80114ae:	68b8      	ldr	r0, [r7, #8]
 80114b0:	68f9      	ldr	r1, [r7, #12]
 80114b2:	f7f9 ff6d 	bl	800b390 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	18d2      	adds	r2, r2, r3
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	18d2      	adds	r2, r2, r3
 80114c2:	6a3b      	ldr	r3, [r7, #32]
 80114c4:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 80114c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	18d2      	adds	r2, r2, r3
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	18d2      	adds	r2, r2, r3
 80114d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d4:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 80114d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114d8:	6a3b      	ldr	r3, [r7, #32]
 80114da:	0011      	movs	r1, r2
 80114dc:	0018      	movs	r0, r3
 80114de:	f7f9 ffe7 	bl	800b4b0 <correctIntFracNumber>
}
 80114e2:	46c0      	nop			@ (mov r8, r8)
 80114e4:	46bd      	mov	sp, r7
 80114e6:	b004      	add	sp, #16
 80114e8:	bd80      	pop	{r7, pc}

080114ea <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 80114ea:	b580      	push	{r7, lr}
 80114ec:	b086      	sub	sp, #24
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	60f8      	str	r0, [r7, #12]
 80114f2:	60b9      	str	r1, [r7, #8]
 80114f4:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80114fa:	2300      	movs	r3, #0
 80114fc:	613b      	str	r3, [r7, #16]
 80114fe:	e019      	b.n	8011534 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	005b      	lsls	r3, r3, #1
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	18d3      	adds	r3, r2, r3
 8011508:	881b      	ldrh	r3, [r3, #0]
 801150a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 801150c:	693a      	ldr	r2, [r7, #16]
 801150e:	3201      	adds	r2, #1
 8011510:	0052      	lsls	r2, r2, #1
 8011512:	68f9      	ldr	r1, [r7, #12]
 8011514:	188a      	adds	r2, r1, r2
 8011516:	8812      	ldrh	r2, [r2, #0]
 8011518:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801151a:	0019      	movs	r1, r3
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	009b      	lsls	r3, r3, #2
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011524:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011526:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	3301      	adds	r3, #1
 801152c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	3304      	adds	r3, #4
 8011532:	613b      	str	r3, [r7, #16]
 8011534:	693a      	ldr	r2, [r7, #16]
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	429a      	cmp	r2, r3
 801153a:	d3e1      	bcc.n	8011500 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 801153c:	46c0      	nop			@ (mov r8, r8)
 801153e:	46c0      	nop			@ (mov r8, r8)
 8011540:	46bd      	mov	sp, r7
 8011542:	b006      	add	sp, #24
 8011544:	bd80      	pop	{r7, pc}
	...

08011548 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 8011548:	b580      	push	{r7, lr}
 801154a:	af00      	add	r7, sp, #0
  init = false;
 801154c:	4b02      	ldr	r3, [pc, #8]	@ (8011558 <InitDone+0x10>)
 801154e:	2200      	movs	r2, #0
 8011550:	701a      	strb	r2, [r3, #0]
}
 8011552:	46c0      	nop			@ (mov r8, r8)
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	200000dc 	.word	0x200000dc

0801155c <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8011562:	f7f7 fbfd 	bl	8008d60 <ReadBatteryVoltage>
 8011566:	1c02      	adds	r2, r0, #0
 8011568:	4b25      	ldr	r3, [pc, #148]	@ (8011600 <batteryChargeCheck+0xa4>)
 801156a:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 801156c:	4b24      	ldr	r3, [pc, #144]	@ (8011600 <batteryChargeCheck+0xa4>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	4924      	ldr	r1, [pc, #144]	@ (8011604 <batteryChargeCheck+0xa8>)
 8011572:	1c18      	adds	r0, r3, #0
 8011574:	f7ee ffdc 	bl	8000530 <__aeabi_fcmplt>
 8011578:	1e03      	subs	r3, r0, #0
 801157a:	d002      	beq.n	8011582 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 801157c:	1dfb      	adds	r3, r7, #7
 801157e:	2200      	movs	r2, #0
 8011580:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 8011582:	4b1f      	ldr	r3, [pc, #124]	@ (8011600 <batteryChargeCheck+0xa4>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	491f      	ldr	r1, [pc, #124]	@ (8011604 <batteryChargeCheck+0xa8>)
 8011588:	1c18      	adds	r0, r3, #0
 801158a:	f7ee ffef 	bl	800056c <__aeabi_fcmpge>
 801158e:	1e03      	subs	r3, r0, #0
 8011590:	d00d      	beq.n	80115ae <batteryChargeCheck+0x52>
 8011592:	4b1b      	ldr	r3, [pc, #108]	@ (8011600 <batteryChargeCheck+0xa4>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	1c18      	adds	r0, r3, #0
 8011598:	f7f1 ff64 	bl	8003464 <__aeabi_f2d>
 801159c:	4a1a      	ldr	r2, [pc, #104]	@ (8011608 <batteryChargeCheck+0xac>)
 801159e:	4b1b      	ldr	r3, [pc, #108]	@ (801160c <batteryChargeCheck+0xb0>)
 80115a0:	f7ee ff8c 	bl	80004bc <__aeabi_dcmplt>
 80115a4:	1e03      	subs	r3, r0, #0
 80115a6:	d002      	beq.n	80115ae <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 80115a8:	1dfb      	adds	r3, r7, #7
 80115aa:	2201      	movs	r2, #1
 80115ac:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 80115ae:	4b14      	ldr	r3, [pc, #80]	@ (8011600 <batteryChargeCheck+0xa4>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	1c18      	adds	r0, r3, #0
 80115b4:	f7f1 ff56 	bl	8003464 <__aeabi_f2d>
 80115b8:	4a13      	ldr	r2, [pc, #76]	@ (8011608 <batteryChargeCheck+0xac>)
 80115ba:	4b14      	ldr	r3, [pc, #80]	@ (801160c <batteryChargeCheck+0xb0>)
 80115bc:	f7ee ff9c 	bl	80004f8 <__aeabi_dcmpge>
 80115c0:	1e03      	subs	r3, r0, #0
 80115c2:	d00b      	beq.n	80115dc <batteryChargeCheck+0x80>
 80115c4:	4b0e      	ldr	r3, [pc, #56]	@ (8011600 <batteryChargeCheck+0xa4>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	2181      	movs	r1, #129	@ 0x81
 80115ca:	05c9      	lsls	r1, r1, #23
 80115cc:	1c18      	adds	r0, r3, #0
 80115ce:	f7ee ffaf 	bl	8000530 <__aeabi_fcmplt>
 80115d2:	1e03      	subs	r3, r0, #0
 80115d4:	d002      	beq.n	80115dc <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 80115d6:	1dfb      	adds	r3, r7, #7
 80115d8:	2202      	movs	r2, #2
 80115da:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 80115dc:	4b08      	ldr	r3, [pc, #32]	@ (8011600 <batteryChargeCheck+0xa4>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	2181      	movs	r1, #129	@ 0x81
 80115e2:	05c9      	lsls	r1, r1, #23
 80115e4:	1c18      	adds	r0, r3, #0
 80115e6:	f7ee ffc1 	bl	800056c <__aeabi_fcmpge>
 80115ea:	1e03      	subs	r3, r0, #0
 80115ec:	d002      	beq.n	80115f4 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 80115ee:	1dfb      	adds	r3, r7, #7
 80115f0:	2203      	movs	r2, #3
 80115f2:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 80115f4:	1dfb      	adds	r3, r7, #7
 80115f6:	781b      	ldrb	r3, [r3, #0]
}
 80115f8:	0018      	movs	r0, r3
 80115fa:	46bd      	mov	sp, r7
 80115fc:	b002      	add	sp, #8
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	20001e84 	.word	0x20001e84
 8011604:	40600000 	.word	0x40600000
 8011608:	9999999a 	.word	0x9999999a
 801160c:	400d9999 	.word	0x400d9999

08011610 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8011610:	b5b0      	push	{r4, r5, r7, lr}
 8011612:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8011614:	f7f7 fc06 	bl	8008e24 <ReadSolarVoltage>
 8011618:	0003      	movs	r3, r0
 801161a:	001a      	movs	r2, r3
 801161c:	4b1a      	ldr	r3, [pc, #104]	@ (8011688 <Calculate_LED_ON+0x78>)
 801161e:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8011620:	4b19      	ldr	r3, [pc, #100]	@ (8011688 <Calculate_LED_ON+0x78>)
 8011622:	881b      	ldrh	r3, [r3, #0]
 8011624:	4a19      	ldr	r2, [pc, #100]	@ (801168c <Calculate_LED_ON+0x7c>)
 8011626:	4293      	cmp	r3, r2
 8011628:	d802      	bhi.n	8011630 <Calculate_LED_ON+0x20>
    solmV = 2900;
 801162a:	4b17      	ldr	r3, [pc, #92]	@ (8011688 <Calculate_LED_ON+0x78>)
 801162c:	4a18      	ldr	r2, [pc, #96]	@ (8011690 <Calculate_LED_ON+0x80>)
 801162e:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8011630:	4b15      	ldr	r3, [pc, #84]	@ (8011688 <Calculate_LED_ON+0x78>)
 8011632:	881b      	ldrh	r3, [r3, #0]
 8011634:	4a17      	ldr	r2, [pc, #92]	@ (8011694 <Calculate_LED_ON+0x84>)
 8011636:	4293      	cmp	r3, r2
 8011638:	d902      	bls.n	8011640 <Calculate_LED_ON+0x30>
    solmV = 4700;
 801163a:	4b13      	ldr	r3, [pc, #76]	@ (8011688 <Calculate_LED_ON+0x78>)
 801163c:	4a15      	ldr	r2, [pc, #84]	@ (8011694 <Calculate_LED_ON+0x84>)
 801163e:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8011640:	4b11      	ldr	r3, [pc, #68]	@ (8011688 <Calculate_LED_ON+0x78>)
 8011642:	881b      	ldrh	r3, [r3, #0]
 8011644:	0018      	movs	r0, r3
 8011646:	f7f1 febb 	bl	80033c0 <__aeabi_i2d>
 801164a:	0004      	movs	r4, r0
 801164c:	000d      	movs	r5, r1
 801164e:	4b0e      	ldr	r3, [pc, #56]	@ (8011688 <Calculate_LED_ON+0x78>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	001a      	movs	r2, r3
 8011654:	4b10      	ldr	r3, [pc, #64]	@ (8011698 <Calculate_LED_ON+0x88>)
 8011656:	1a9b      	subs	r3, r3, r2
 8011658:	0018      	movs	r0, r3
 801165a:	f7f1 feb1 	bl	80033c0 <__aeabi_i2d>
 801165e:	2200      	movs	r2, #0
 8011660:	4b0e      	ldr	r3, [pc, #56]	@ (801169c <Calculate_LED_ON+0x8c>)
 8011662:	f7f0 ffeb 	bl	800263c <__aeabi_dmul>
 8011666:	0002      	movs	r2, r0
 8011668:	000b      	movs	r3, r1
 801166a:	0020      	movs	r0, r4
 801166c:	0029      	movs	r1, r5
 801166e:	f7f0 f83d 	bl	80016ec <__aeabi_dadd>
 8011672:	0002      	movs	r2, r0
 8011674:	000b      	movs	r3, r1
 8011676:	0010      	movs	r0, r2
 8011678:	0019      	movs	r1, r3
 801167a:	f7ee ffe7 	bl	800064c <__aeabi_d2uiz>
 801167e:	0003      	movs	r3, r0
 8011680:	b29b      	uxth	r3, r3
}
 8011682:	0018      	movs	r0, r3
 8011684:	46bd      	mov	sp, r7
 8011686:	bdb0      	pop	{r4, r5, r7, pc}
 8011688:	20001e88 	.word	0x20001e88
 801168c:	00000b53 	.word	0x00000b53
 8011690:	00000b54 	.word	0x00000b54
 8011694:	0000125c 	.word	0x0000125c
 8011698:	00000dee 	.word	0x00000dee
 801169c:	3ff80000 	.word	0x3ff80000

080116a0 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 80116a0:	b590      	push	{r4, r7, lr}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	0004      	movs	r4, r0
 80116a8:	0008      	movs	r0, r1
 80116aa:	0011      	movs	r1, r2
 80116ac:	1dbb      	adds	r3, r7, #6
 80116ae:	1c22      	adds	r2, r4, #0
 80116b0:	801a      	strh	r2, [r3, #0]
 80116b2:	1d3b      	adds	r3, r7, #4
 80116b4:	1c02      	adds	r2, r0, #0
 80116b6:	801a      	strh	r2, [r3, #0]
 80116b8:	1cbb      	adds	r3, r7, #2
 80116ba:	1c0a      	adds	r2, r1, #0
 80116bc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80116be:	4b0f      	ldr	r3, [pc, #60]	@ (80116fc <SetStatusLED+0x5c>)
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d107      	bne.n	80116d6 <SetStatusLED+0x36>
 80116c6:	4b0e      	ldr	r3, [pc, #56]	@ (8011700 <SetStatusLED+0x60>)
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d103      	bne.n	80116d6 <SetStatusLED+0x36>
 80116ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011704 <SetStatusLED+0x64>)
 80116d0:	781b      	ldrb	r3, [r3, #0]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00e      	beq.n	80116f4 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 80116d6:	2380      	movs	r3, #128	@ 0x80
 80116d8:	05db      	lsls	r3, r3, #23
 80116da:	1dba      	adds	r2, r7, #6
 80116dc:	8812      	ldrh	r2, [r2, #0]
 80116de:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80116e0:	2380      	movs	r3, #128	@ 0x80
 80116e2:	05db      	lsls	r3, r3, #23
 80116e4:	1d3a      	adds	r2, r7, #4
 80116e6:	8812      	ldrh	r2, [r2, #0]
 80116e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80116ea:	2380      	movs	r3, #128	@ 0x80
 80116ec:	05db      	lsls	r3, r3, #23
 80116ee:	1cba      	adds	r2, r7, #2
 80116f0:	8812      	ldrh	r2, [r2, #0]
 80116f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80116f4:	46c0      	nop			@ (mov r8, r8)
 80116f6:	46bd      	mov	sp, r7
 80116f8:	b003      	add	sp, #12
 80116fa:	bd90      	pop	{r4, r7, pc}
 80116fc:	20001e75 	.word	0x20001e75
 8011700:	200000dc 	.word	0x200000dc
 8011704:	20001e76 	.word	0x20001e76

08011708 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8011708:	b590      	push	{r4, r7, lr}
 801170a:	b083      	sub	sp, #12
 801170c:	af00      	add	r7, sp, #0
 801170e:	0004      	movs	r4, r0
 8011710:	0008      	movs	r0, r1
 8011712:	0011      	movs	r1, r2
 8011714:	1dfb      	adds	r3, r7, #7
 8011716:	1c22      	adds	r2, r4, #0
 8011718:	701a      	strb	r2, [r3, #0]
 801171a:	1dbb      	adds	r3, r7, #6
 801171c:	1c02      	adds	r2, r0, #0
 801171e:	701a      	strb	r2, [r3, #0]
 8011720:	1d7b      	adds	r3, r7, #5
 8011722:	1c0a      	adds	r2, r1, #0
 8011724:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8011726:	4b19      	ldr	r3, [pc, #100]	@ (801178c <SetDBLED+0x84>)
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d107      	bne.n	801173e <SetDBLED+0x36>
 801172e:	4b18      	ldr	r3, [pc, #96]	@ (8011790 <SetDBLED+0x88>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d103      	bne.n	801173e <SetDBLED+0x36>
 8011736:	4b17      	ldr	r3, [pc, #92]	@ (8011794 <SetDBLED+0x8c>)
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d022      	beq.n	8011784 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 801173e:	1dfb      	adds	r3, r7, #7
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	2201      	movs	r2, #1
 8011744:	4053      	eors	r3, r2
 8011746:	b2db      	uxtb	r3, r3
 8011748:	001a      	movs	r2, r3
 801174a:	4b13      	ldr	r3, [pc, #76]	@ (8011798 <SetDBLED+0x90>)
 801174c:	2101      	movs	r1, #1
 801174e:	0018      	movs	r0, r3
 8011750:	f003 fa49 	bl	8014be6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8011754:	1dbb      	adds	r3, r7, #6
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	2201      	movs	r2, #1
 801175a:	4053      	eors	r3, r2
 801175c:	b2db      	uxtb	r3, r3
 801175e:	001a      	movs	r2, r3
 8011760:	2380      	movs	r3, #128	@ 0x80
 8011762:	005b      	lsls	r3, r3, #1
 8011764:	480c      	ldr	r0, [pc, #48]	@ (8011798 <SetDBLED+0x90>)
 8011766:	0019      	movs	r1, r3
 8011768:	f003 fa3d 	bl	8014be6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 801176c:	1d7b      	adds	r3, r7, #5
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	2201      	movs	r2, #1
 8011772:	4053      	eors	r3, r2
 8011774:	b2db      	uxtb	r3, r3
 8011776:	001a      	movs	r2, r3
 8011778:	2380      	movs	r3, #128	@ 0x80
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4806      	ldr	r0, [pc, #24]	@ (8011798 <SetDBLED+0x90>)
 801177e:	0019      	movs	r1, r3
 8011780:	f003 fa31 	bl	8014be6 <HAL_GPIO_WritePin>
  }
}
 8011784:	46c0      	nop			@ (mov r8, r8)
 8011786:	46bd      	mov	sp, r7
 8011788:	b003      	add	sp, #12
 801178a:	bd90      	pop	{r4, r7, pc}
 801178c:	20001e75 	.word	0x20001e75
 8011790:	200000dc 	.word	0x200000dc
 8011794:	20001e76 	.word	0x20001e76
 8011798:	50000400 	.word	0x50000400

0801179c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 801179c:	b590      	push	{r4, r7, lr}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	0004      	movs	r4, r0
 80117a4:	0008      	movs	r0, r1
 80117a6:	0011      	movs	r1, r2
 80117a8:	1dbb      	adds	r3, r7, #6
 80117aa:	1c22      	adds	r2, r4, #0
 80117ac:	801a      	strh	r2, [r3, #0]
 80117ae:	1d3b      	adds	r3, r7, #4
 80117b0:	1c02      	adds	r2, r0, #0
 80117b2:	801a      	strh	r2, [r3, #0]
 80117b4:	1cbb      	adds	r3, r7, #2
 80117b6:	1c0a      	adds	r2, r1, #0
 80117b8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80117ba:	4b0e      	ldr	r3, [pc, #56]	@ (80117f4 <SetVocLED+0x58>)
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d107      	bne.n	80117d2 <SetVocLED+0x36>
 80117c2:	4b0d      	ldr	r3, [pc, #52]	@ (80117f8 <SetVocLED+0x5c>)
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d103      	bne.n	80117d2 <SetVocLED+0x36>
 80117ca:	4b0c      	ldr	r3, [pc, #48]	@ (80117fc <SetVocLED+0x60>)
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00b      	beq.n	80117ea <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 80117d2:	4b0b      	ldr	r3, [pc, #44]	@ (8011800 <SetVocLED+0x64>)
 80117d4:	1dba      	adds	r2, r7, #6
 80117d6:	8812      	ldrh	r2, [r2, #0]
 80117d8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 80117da:	4b09      	ldr	r3, [pc, #36]	@ (8011800 <SetVocLED+0x64>)
 80117dc:	1d3a      	adds	r2, r7, #4
 80117de:	8812      	ldrh	r2, [r2, #0]
 80117e0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 80117e2:	4b07      	ldr	r3, [pc, #28]	@ (8011800 <SetVocLED+0x64>)
 80117e4:	1cba      	adds	r2, r7, #2
 80117e6:	8812      	ldrh	r2, [r2, #0]
 80117e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80117ea:	46c0      	nop			@ (mov r8, r8)
 80117ec:	46bd      	mov	sp, r7
 80117ee:	b003      	add	sp, #12
 80117f0:	bd90      	pop	{r4, r7, pc}
 80117f2:	46c0      	nop			@ (mov r8, r8)
 80117f4:	20001e75 	.word	0x20001e75
 80117f8:	200000dc 	.word	0x200000dc
 80117fc:	20001e76 	.word	0x20001e76
 8011800:	40000400 	.word	0x40000400

08011804 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8011804:	b580      	push	{r7, lr}
 8011806:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011808:	4b08      	ldr	r3, [pc, #32]	@ (801182c <SetMeasurementIndicator+0x28>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d103      	bne.n	8011818 <SetMeasurementIndicator+0x14>
 8011810:	4b07      	ldr	r3, [pc, #28]	@ (8011830 <SetMeasurementIndicator+0x2c>)
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d006      	beq.n	8011826 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011818:	f7ff fefa 	bl	8011610 <Calculate_LED_ON>
 801181c:	0003      	movs	r3, r0
 801181e:	001a      	movs	r2, r3
 8011820:	2380      	movs	r3, #128	@ 0x80
 8011822:	05db      	lsls	r3, r3, #23
 8011824:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011826:	46c0      	nop			@ (mov r8, r8)
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	20001e75 	.word	0x20001e75
 8011830:	20001e76 	.word	0x20001e76

08011834 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8011834:	b580      	push	{r7, lr}
 8011836:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011838:	4b07      	ldr	r3, [pc, #28]	@ (8011858 <ResetMeasurementIndicator+0x24>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d103      	bne.n	8011848 <ResetMeasurementIndicator+0x14>
 8011840:	4b06      	ldr	r3, [pc, #24]	@ (801185c <ResetMeasurementIndicator+0x28>)
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d004      	beq.n	8011852 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8011848:	2380      	movs	r3, #128	@ 0x80
 801184a:	05db      	lsls	r3, r3, #23
 801184c:	22fa      	movs	r2, #250	@ 0xfa
 801184e:	0112      	lsls	r2, r2, #4
 8011850:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011852:	46c0      	nop			@ (mov r8, r8)
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	20001e75 	.word	0x20001e75
 801185c:	20001e76 	.word	0x20001e76

08011860 <SetMICIndicator>:
void SetMICIndicator(){
 8011860:	b580      	push	{r7, lr}
 8011862:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011864:	4b19      	ldr	r3, [pc, #100]	@ (80118cc <SetMICIndicator+0x6c>)
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d103      	bne.n	8011874 <SetMICIndicator+0x14>
 801186c:	4b18      	ldr	r3, [pc, #96]	@ (80118d0 <SetMICIndicator+0x70>)
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d007      	beq.n	8011884 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011874:	f7ff fecc 	bl	8011610 <Calculate_LED_ON>
 8011878:	0003      	movs	r3, r0
 801187a:	001a      	movs	r2, r3
 801187c:	2380      	movs	r3, #128	@ 0x80
 801187e:	05db      	lsls	r3, r3, #23
 8011880:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8011882:	e01f      	b.n	80118c4 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8011884:	4b13      	ldr	r3, [pc, #76]	@ (80118d4 <SetMICIndicator+0x74>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	1c18      	adds	r0, r3, #0
 801188a:	f7f1 fdeb 	bl	8003464 <__aeabi_f2d>
 801188e:	4a12      	ldr	r2, [pc, #72]	@ (80118d8 <SetMICIndicator+0x78>)
 8011890:	4b12      	ldr	r3, [pc, #72]	@ (80118dc <SetMICIndicator+0x7c>)
 8011892:	f7ee fe27 	bl	80004e4 <__aeabi_dcmpgt>
 8011896:	1e03      	subs	r3, r0, #0
 8011898:	d00a      	beq.n	80118b0 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 801189a:	f7ff feb9 	bl	8011610 <Calculate_LED_ON>
 801189e:	0003      	movs	r3, r0
 80118a0:	001a      	movs	r2, r3
 80118a2:	2380      	movs	r3, #128	@ 0x80
 80118a4:	05db      	lsls	r3, r3, #23
 80118a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 80118a8:	4b0d      	ldr	r3, [pc, #52]	@ (80118e0 <SetMICIndicator+0x80>)
 80118aa:	2202      	movs	r2, #2
 80118ac:	701a      	strb	r2, [r3, #0]
}
 80118ae:	e009      	b.n	80118c4 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 80118b0:	f7ff feae 	bl	8011610 <Calculate_LED_ON>
 80118b4:	0003      	movs	r3, r0
 80118b6:	001a      	movs	r2, r3
 80118b8:	2380      	movs	r3, #128	@ 0x80
 80118ba:	05db      	lsls	r3, r3, #23
 80118bc:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 80118be:	4b08      	ldr	r3, [pc, #32]	@ (80118e0 <SetMICIndicator+0x80>)
 80118c0:	2201      	movs	r2, #1
 80118c2:	701a      	strb	r2, [r3, #0]
}
 80118c4:	46c0      	nop			@ (mov r8, r8)
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	46c0      	nop			@ (mov r8, r8)
 80118cc:	20001e75 	.word	0x20001e75
 80118d0:	20001e76 	.word	0x20001e76
 80118d4:	20001e84 	.word	0x20001e84
 80118d8:	9999999a 	.word	0x9999999a
 80118dc:	400d9999 	.word	0x400d9999
 80118e0:	20001e78 	.word	0x20001e78

080118e4 <ResetMICIndicator>:
void ResetMICIndicator(){
 80118e4:	b580      	push	{r7, lr}
 80118e6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80118e8:	4b0f      	ldr	r3, [pc, #60]	@ (8011928 <ResetMICIndicator+0x44>)
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d103      	bne.n	80118f8 <ResetMICIndicator+0x14>
 80118f0:	4b0e      	ldr	r3, [pc, #56]	@ (801192c <ResetMICIndicator+0x48>)
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d005      	beq.n	8011904 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 80118f8:	2380      	movs	r3, #128	@ 0x80
 80118fa:	05db      	lsls	r3, r3, #23
 80118fc:	22fa      	movs	r2, #250	@ 0xfa
 80118fe:	0112      	lsls	r2, r2, #4
 8011900:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8011902:	e00e      	b.n	8011922 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8011904:	4b0a      	ldr	r3, [pc, #40]	@ (8011930 <ResetMICIndicator+0x4c>)
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	2b02      	cmp	r3, #2
 801190a:	d105      	bne.n	8011918 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 801190c:	2380      	movs	r3, #128	@ 0x80
 801190e:	05db      	lsls	r3, r3, #23
 8011910:	22fa      	movs	r2, #250	@ 0xfa
 8011912:	0112      	lsls	r2, r2, #4
 8011914:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8011916:	e004      	b.n	8011922 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8011918:	2380      	movs	r3, #128	@ 0x80
 801191a:	05db      	lsls	r3, r3, #23
 801191c:	22fa      	movs	r2, #250	@ 0xfa
 801191e:	0112      	lsls	r2, r2, #4
 8011920:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8011922:	46c0      	nop			@ (mov r8, r8)
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	20001e75 	.word	0x20001e75
 801192c:	20001e76 	.word	0x20001e76
 8011930:	20001e78 	.word	0x20001e78

08011934 <SetESPIndicator>:
void SetESPIndicator(){
 8011934:	b580      	push	{r7, lr}
 8011936:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011938:	4b08      	ldr	r3, [pc, #32]	@ (801195c <SetESPIndicator+0x28>)
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d103      	bne.n	8011948 <SetESPIndicator+0x14>
 8011940:	4b07      	ldr	r3, [pc, #28]	@ (8011960 <SetESPIndicator+0x2c>)
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d006      	beq.n	8011956 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011948:	f7ff fe62 	bl	8011610 <Calculate_LED_ON>
 801194c:	0003      	movs	r3, r0
 801194e:	001a      	movs	r2, r3
 8011950:	2380      	movs	r3, #128	@ 0x80
 8011952:	05db      	lsls	r3, r3, #23
 8011954:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011956:	46c0      	nop			@ (mov r8, r8)
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}
 801195c:	20001e75 	.word	0x20001e75
 8011960:	20001e76 	.word	0x20001e76

08011964 <ResetESPIndicator>:
void ResetESPIndicator(){
 8011964:	b580      	push	{r7, lr}
 8011966:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011968:	4b07      	ldr	r3, [pc, #28]	@ (8011988 <ResetESPIndicator+0x24>)
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d103      	bne.n	8011978 <ResetESPIndicator+0x14>
 8011970:	4b06      	ldr	r3, [pc, #24]	@ (801198c <ResetESPIndicator+0x28>)
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d004      	beq.n	8011982 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8011978:	2380      	movs	r3, #128	@ 0x80
 801197a:	05db      	lsls	r3, r3, #23
 801197c:	22fa      	movs	r2, #250	@ 0xfa
 801197e:	0112      	lsls	r2, r2, #4
 8011980:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011982:	46c0      	nop			@ (mov r8, r8)
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20001e75 	.word	0x20001e75
 801198c:	20001e76 	.word	0x20001e76

08011990 <SetPMIndicator>:

void SetPMIndicator() {
 8011990:	b580      	push	{r7, lr}
 8011992:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011994:	4b0f      	ldr	r3, [pc, #60]	@ (80119d4 <SetPMIndicator+0x44>)
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d103      	bne.n	80119a4 <SetPMIndicator+0x14>
 801199c:	4b0e      	ldr	r3, [pc, #56]	@ (80119d8 <SetPMIndicator+0x48>)
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d014      	beq.n	80119ce <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 80119a4:	f7ff fe34 	bl	8011610 <Calculate_LED_ON>
 80119a8:	0003      	movs	r3, r0
 80119aa:	001a      	movs	r2, r3
 80119ac:	2380      	movs	r3, #128	@ 0x80
 80119ae:	05db      	lsls	r3, r3, #23
 80119b0:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 80119b2:	f7ff fe2d 	bl	8011610 <Calculate_LED_ON>
 80119b6:	0003      	movs	r3, r0
 80119b8:	001a      	movs	r2, r3
 80119ba:	2380      	movs	r3, #128	@ 0x80
 80119bc:	05db      	lsls	r3, r3, #23
 80119be:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 80119c0:	f7ff fe26 	bl	8011610 <Calculate_LED_ON>
 80119c4:	0003      	movs	r3, r0
 80119c6:	001a      	movs	r2, r3
 80119c8:	2380      	movs	r3, #128	@ 0x80
 80119ca:	05db      	lsls	r3, r3, #23
 80119cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80119ce:	46c0      	nop			@ (mov r8, r8)
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	20001e75 	.word	0x20001e75
 80119d8:	20001e76 	.word	0x20001e76

080119dc <ResetPMIndicator>:

void ResetPMIndicator() {
 80119dc:	b580      	push	{r7, lr}
 80119de:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80119e0:	4b0c      	ldr	r3, [pc, #48]	@ (8011a14 <ResetPMIndicator+0x38>)
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d103      	bne.n	80119f0 <ResetPMIndicator+0x14>
 80119e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011a18 <ResetPMIndicator+0x3c>)
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00e      	beq.n	8011a0e <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 80119f0:	2380      	movs	r3, #128	@ 0x80
 80119f2:	05db      	lsls	r3, r3, #23
 80119f4:	22fa      	movs	r2, #250	@ 0xfa
 80119f6:	0112      	lsls	r2, r2, #4
 80119f8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 80119fa:	2380      	movs	r3, #128	@ 0x80
 80119fc:	05db      	lsls	r3, r3, #23
 80119fe:	22fa      	movs	r2, #250	@ 0xfa
 8011a00:	0112      	lsls	r2, r2, #4
 8011a02:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011a04:	2380      	movs	r3, #128	@ 0x80
 8011a06:	05db      	lsls	r3, r3, #23
 8011a08:	22fa      	movs	r2, #250	@ 0xfa
 8011a0a:	0112      	lsls	r2, r2, #4
 8011a0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011a0e:	46c0      	nop			@ (mov r8, r8)
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	20001e75 	.word	0x20001e75
 8011a18:	20001e76 	.word	0x20001e76

08011a1c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8011a20:	23fa      	movs	r3, #250	@ 0xfa
 8011a22:	011a      	lsls	r2, r3, #4
 8011a24:	23fa      	movs	r3, #250	@ 0xfa
 8011a26:	0119      	lsls	r1, r3, #4
 8011a28:	23fa      	movs	r3, #250	@ 0xfa
 8011a2a:	011b      	lsls	r3, r3, #4
 8011a2c:	0018      	movs	r0, r3
 8011a2e:	f7ff fe37 	bl	80116a0 <SetStatusLED>
  SetDBLED(false,false,false);
 8011a32:	2200      	movs	r2, #0
 8011a34:	2100      	movs	r1, #0
 8011a36:	2000      	movs	r0, #0
 8011a38:	f7ff fe66 	bl	8011708 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8011a3c:	23fa      	movs	r3, #250	@ 0xfa
 8011a3e:	011a      	lsls	r2, r3, #4
 8011a40:	23fa      	movs	r3, #250	@ 0xfa
 8011a42:	0119      	lsls	r1, r3, #4
 8011a44:	23fa      	movs	r3, #250	@ 0xfa
 8011a46:	011b      	lsls	r3, r3, #4
 8011a48:	0018      	movs	r0, r3
 8011a4a:	f7ff fea7 	bl	801179c <SetVocLED>
return;
 8011a4e:	46c0      	nop			@ (mov r8, r8)
}
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <SetAllREDLED>:

void SetAllREDLED() {
 8011a54:	b580      	push	{r7, lr}
 8011a56:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8011a58:	2380      	movs	r3, #128	@ 0x80
 8011a5a:	05db      	lsls	r3, r3, #23
 8011a5c:	4a19      	ldr	r2, [pc, #100]	@ (8011ac4 <SetAllREDLED+0x70>)
 8011a5e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8011a60:	2380      	movs	r3, #128	@ 0x80
 8011a62:	05db      	lsls	r3, r3, #23
 8011a64:	22fa      	movs	r2, #250	@ 0xfa
 8011a66:	0112      	lsls	r2, r2, #4
 8011a68:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8011a6a:	2380      	movs	r3, #128	@ 0x80
 8011a6c:	05db      	lsls	r3, r3, #23
 8011a6e:	22fa      	movs	r2, #250	@ 0xfa
 8011a70:	0112      	lsls	r2, r2, #4
 8011a72:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8011a74:	4b14      	ldr	r3, [pc, #80]	@ (8011ac8 <SetAllREDLED+0x74>)
 8011a76:	4a13      	ldr	r2, [pc, #76]	@ (8011ac4 <SetAllREDLED+0x70>)
 8011a78:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8011a7a:	4b13      	ldr	r3, [pc, #76]	@ (8011ac8 <SetAllREDLED+0x74>)
 8011a7c:	22fa      	movs	r2, #250	@ 0xfa
 8011a7e:	0112      	lsls	r2, r2, #4
 8011a80:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8011a82:	4b11      	ldr	r3, [pc, #68]	@ (8011ac8 <SetAllREDLED+0x74>)
 8011a84:	22fa      	movs	r2, #250	@ 0xfa
 8011a86:	0112      	lsls	r2, r2, #4
 8011a88:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8011a8a:	4b10      	ldr	r3, [pc, #64]	@ (8011acc <SetAllREDLED+0x78>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	2101      	movs	r1, #1
 8011a90:	0018      	movs	r0, r3
 8011a92:	f003 f8a8 	bl	8014be6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8011a96:	2380      	movs	r3, #128	@ 0x80
 8011a98:	005b      	lsls	r3, r3, #1
 8011a9a:	480c      	ldr	r0, [pc, #48]	@ (8011acc <SetAllREDLED+0x78>)
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	0019      	movs	r1, r3
 8011aa0:	f003 f8a1 	bl	8014be6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8011aa4:	2380      	movs	r3, #128	@ 0x80
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	4808      	ldr	r0, [pc, #32]	@ (8011acc <SetAllREDLED+0x78>)
 8011aaa:	2201      	movs	r2, #1
 8011aac:	0019      	movs	r1, r3
 8011aae:	f003 f89a 	bl	8014be6 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8011ab2:	23fa      	movs	r3, #250	@ 0xfa
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	0018      	movs	r0, r3
 8011ab8:	f001 fe0e 	bl	80136d8 <HAL_Delay>
}
 8011abc:	46c0      	nop			@ (mov r8, r8)
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	46c0      	nop			@ (mov r8, r8)
 8011ac4:	00000bb8 	.word	0x00000bb8
 8011ac8:	40000400 	.word	0x40000400
 8011acc:	50000400 	.word	0x50000400

08011ad0 <SetAllBlueLED>:

void SetAllBlueLED() {
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8011ad6:	1dfb      	adds	r3, r7, #7
 8011ad8:	2200      	movs	r2, #0
 8011ada:	701a      	strb	r2, [r3, #0]
 8011adc:	e03d      	b.n	8011b5a <SetAllBlueLED+0x8a>
    TIM2 -> CCR1 = LED_OFF;
 8011ade:	2380      	movs	r3, #128	@ 0x80
 8011ae0:	05db      	lsls	r3, r3, #23
 8011ae2:	22fa      	movs	r2, #250	@ 0xfa
 8011ae4:	0112      	lsls	r2, r2, #4
 8011ae6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011ae8:	2380      	movs	r3, #128	@ 0x80
 8011aea:	05db      	lsls	r3, r3, #23
 8011aec:	22fa      	movs	r2, #250	@ 0xfa
 8011aee:	0112      	lsls	r2, r2, #4
 8011af0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8011af2:	2380      	movs	r3, #128	@ 0x80
 8011af4:	05db      	lsls	r3, r3, #23
 8011af6:	4a1d      	ldr	r2, [pc, #116]	@ (8011b6c <SetAllBlueLED+0x9c>)
 8011af8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8011afa:	4b1d      	ldr	r3, [pc, #116]	@ (8011b70 <SetAllBlueLED+0xa0>)
 8011afc:	22fa      	movs	r2, #250	@ 0xfa
 8011afe:	0112      	lsls	r2, r2, #4
 8011b00:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8011b02:	4b1b      	ldr	r3, [pc, #108]	@ (8011b70 <SetAllBlueLED+0xa0>)
 8011b04:	22fa      	movs	r2, #250	@ 0xfa
 8011b06:	0112      	lsls	r2, r2, #4
 8011b08:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8011b0a:	4b19      	ldr	r3, [pc, #100]	@ (8011b70 <SetAllBlueLED+0xa0>)
 8011b0c:	4a17      	ldr	r2, [pc, #92]	@ (8011b6c <SetAllBlueLED+0x9c>)
 8011b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8011b10:	4b18      	ldr	r3, [pc, #96]	@ (8011b74 <SetAllBlueLED+0xa4>)
 8011b12:	2201      	movs	r2, #1
 8011b14:	2101      	movs	r1, #1
 8011b16:	0018      	movs	r0, r3
 8011b18:	f003 f865 	bl	8014be6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8011b1c:	2380      	movs	r3, #128	@ 0x80
 8011b1e:	005b      	lsls	r3, r3, #1
 8011b20:	4814      	ldr	r0, [pc, #80]	@ (8011b74 <SetAllBlueLED+0xa4>)
 8011b22:	2201      	movs	r2, #1
 8011b24:	0019      	movs	r1, r3
 8011b26:	f003 f85e 	bl	8014be6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8011b2a:	2380      	movs	r3, #128	@ 0x80
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	4811      	ldr	r0, [pc, #68]	@ (8011b74 <SetAllBlueLED+0xa4>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	0019      	movs	r1, r3
 8011b34:	f003 f857 	bl	8014be6 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8011b38:	23fa      	movs	r3, #250	@ 0xfa
 8011b3a:	009b      	lsls	r3, r3, #2
 8011b3c:	0018      	movs	r0, r3
 8011b3e:	f001 fdcb 	bl	80136d8 <HAL_Delay>
    SetLEDsOff();
 8011b42:	f7ff ff6b 	bl	8011a1c <SetLEDsOff>
    HAL_Delay(500);
 8011b46:	23fa      	movs	r3, #250	@ 0xfa
 8011b48:	005b      	lsls	r3, r3, #1
 8011b4a:	0018      	movs	r0, r3
 8011b4c:	f001 fdc4 	bl	80136d8 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8011b50:	1dfb      	adds	r3, r7, #7
 8011b52:	781a      	ldrb	r2, [r3, #0]
 8011b54:	1dfb      	adds	r3, r7, #7
 8011b56:	3201      	adds	r2, #1
 8011b58:	701a      	strb	r2, [r3, #0]
 8011b5a:	1dfb      	adds	r3, r7, #7
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	d9bd      	bls.n	8011ade <SetAllBlueLED+0xe>
  }
}
 8011b62:	46c0      	nop			@ (mov r8, r8)
 8011b64:	46c0      	nop			@ (mov r8, r8)
 8011b66:	46bd      	mov	sp, r7
 8011b68:	b002      	add	sp, #8
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	00000bb8 	.word	0x00000bb8
 8011b70:	40000400 	.word	0x40000400
 8011b74:	50000400 	.word	0x50000400

08011b78 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8011b78:	b5b0      	push	{r4, r5, r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	0002      	movs	r2, r0
 8011b80:	1dbb      	adds	r3, r7, #6
 8011b82:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8011b84:	1dbb      	adds	r3, r7, #6
 8011b86:	881b      	ldrh	r3, [r3, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d05a      	beq.n	8011c42 <SetVOCindicator+0xca>
 8011b8c:	1dbb      	adds	r3, r7, #6
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	2b64      	cmp	r3, #100	@ 0x64
 8011b92:	d856      	bhi.n	8011c42 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8011b94:	1dbb      	adds	r3, r7, #6
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	0018      	movs	r0, r3
 8011b9a:	f7f1 fc11 	bl	80033c0 <__aeabi_i2d>
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8011d20 <SetVOCindicator+0x1a8>)
 8011ba2:	f7f0 f907 	bl	8001db4 <__aeabi_ddiv>
 8011ba6:	0002      	movs	r2, r0
 8011ba8:	000b      	movs	r3, r1
 8011baa:	2000      	movs	r0, #0
 8011bac:	495d      	ldr	r1, [pc, #372]	@ (8011d24 <SetVOCindicator+0x1ac>)
 8011bae:	f7f1 f80d 	bl	8002bcc <__aeabi_dsub>
 8011bb2:	0002      	movs	r2, r0
 8011bb4:	000b      	movs	r3, r1
 8011bb6:	0014      	movs	r4, r2
 8011bb8:	001d      	movs	r5, r3
 8011bba:	4b5b      	ldr	r3, [pc, #364]	@ (8011d28 <SetVOCindicator+0x1b0>)
 8011bbc:	881b      	ldrh	r3, [r3, #0]
 8011bbe:	0018      	movs	r0, r3
 8011bc0:	f7f1 fbfe 	bl	80033c0 <__aeabi_i2d>
 8011bc4:	0002      	movs	r2, r0
 8011bc6:	000b      	movs	r3, r1
 8011bc8:	0020      	movs	r0, r4
 8011bca:	0029      	movs	r1, r5
 8011bcc:	f7f0 fd36 	bl	800263c <__aeabi_dmul>
 8011bd0:	0002      	movs	r2, r0
 8011bd2:	000b      	movs	r3, r1
 8011bd4:	0010      	movs	r0, r2
 8011bd6:	0019      	movs	r1, r3
 8011bd8:	f7ee fd38 	bl	800064c <__aeabi_d2uiz>
 8011bdc:	0003      	movs	r3, r0
 8011bde:	b29a      	uxth	r2, r3
 8011be0:	4b52      	ldr	r3, [pc, #328]	@ (8011d2c <SetVOCindicator+0x1b4>)
 8011be2:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8011be4:	1dbb      	adds	r3, r7, #6
 8011be6:	881b      	ldrh	r3, [r3, #0]
 8011be8:	0018      	movs	r0, r3
 8011bea:	f7f1 fbe9 	bl	80033c0 <__aeabi_i2d>
 8011bee:	2200      	movs	r2, #0
 8011bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8011d20 <SetVOCindicator+0x1a8>)
 8011bf2:	f7f0 f8df 	bl	8001db4 <__aeabi_ddiv>
 8011bf6:	0002      	movs	r2, r0
 8011bf8:	000b      	movs	r3, r1
 8011bfa:	0014      	movs	r4, r2
 8011bfc:	001d      	movs	r5, r3
 8011bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8011d28 <SetVOCindicator+0x1b0>)
 8011c00:	881b      	ldrh	r3, [r3, #0]
 8011c02:	0018      	movs	r0, r3
 8011c04:	f7f1 fbdc 	bl	80033c0 <__aeabi_i2d>
 8011c08:	0002      	movs	r2, r0
 8011c0a:	000b      	movs	r3, r1
 8011c0c:	0020      	movs	r0, r4
 8011c0e:	0029      	movs	r1, r5
 8011c10:	f7f0 fd14 	bl	800263c <__aeabi_dmul>
 8011c14:	0002      	movs	r2, r0
 8011c16:	000b      	movs	r3, r1
 8011c18:	0010      	movs	r0, r2
 8011c1a:	0019      	movs	r1, r3
 8011c1c:	f7ee fd16 	bl	800064c <__aeabi_d2uiz>
 8011c20:	0003      	movs	r3, r0
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	4b42      	ldr	r3, [pc, #264]	@ (8011d30 <SetVOCindicator+0x1b8>)
 8011c26:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8011c28:	4b3f      	ldr	r3, [pc, #252]	@ (8011d28 <SetVOCindicator+0x1b0>)
 8011c2a:	881a      	ldrh	r2, [r3, #0]
 8011c2c:	4b41      	ldr	r3, [pc, #260]	@ (8011d34 <SetVOCindicator+0x1bc>)
 8011c2e:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8011c30:	4b40      	ldr	r3, [pc, #256]	@ (8011d34 <SetVOCindicator+0x1bc>)
 8011c32:	8818      	ldrh	r0, [r3, #0]
 8011c34:	4b3d      	ldr	r3, [pc, #244]	@ (8011d2c <SetVOCindicator+0x1b4>)
 8011c36:	8819      	ldrh	r1, [r3, #0]
 8011c38:	4b3d      	ldr	r3, [pc, #244]	@ (8011d30 <SetVOCindicator+0x1b8>)
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	001a      	movs	r2, r3
 8011c3e:	f7ff fdad 	bl	801179c <SetVocLED>
  }
  if(VOCi > 100){
 8011c42:	1dbb      	adds	r3, r7, #6
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	2b64      	cmp	r3, #100	@ 0x64
 8011c48:	d966      	bls.n	8011d18 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8011c4a:	1dbb      	adds	r3, r7, #6
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	0018      	movs	r0, r3
 8011c50:	f7f1 fbb6 	bl	80033c0 <__aeabi_i2d>
 8011c54:	2200      	movs	r2, #0
 8011c56:	4b32      	ldr	r3, [pc, #200]	@ (8011d20 <SetVOCindicator+0x1a8>)
 8011c58:	f7f0 ffb8 	bl	8002bcc <__aeabi_dsub>
 8011c5c:	0002      	movs	r2, r0
 8011c5e:	000b      	movs	r3, r1
 8011c60:	0010      	movs	r0, r2
 8011c62:	0019      	movs	r1, r3
 8011c64:	2200      	movs	r2, #0
 8011c66:	4b34      	ldr	r3, [pc, #208]	@ (8011d38 <SetVOCindicator+0x1c0>)
 8011c68:	f7f0 f8a4 	bl	8001db4 <__aeabi_ddiv>
 8011c6c:	0002      	movs	r2, r0
 8011c6e:	000b      	movs	r3, r1
 8011c70:	0014      	movs	r4, r2
 8011c72:	001d      	movs	r5, r3
 8011c74:	4b2c      	ldr	r3, [pc, #176]	@ (8011d28 <SetVOCindicator+0x1b0>)
 8011c76:	881b      	ldrh	r3, [r3, #0]
 8011c78:	0018      	movs	r0, r3
 8011c7a:	f7f1 fba1 	bl	80033c0 <__aeabi_i2d>
 8011c7e:	0002      	movs	r2, r0
 8011c80:	000b      	movs	r3, r1
 8011c82:	0020      	movs	r0, r4
 8011c84:	0029      	movs	r1, r5
 8011c86:	f7f0 fcd9 	bl	800263c <__aeabi_dmul>
 8011c8a:	0002      	movs	r2, r0
 8011c8c:	000b      	movs	r3, r1
 8011c8e:	0010      	movs	r0, r2
 8011c90:	0019      	movs	r1, r3
 8011c92:	f7ee fcdb 	bl	800064c <__aeabi_d2uiz>
 8011c96:	0003      	movs	r3, r0
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	4b24      	ldr	r3, [pc, #144]	@ (8011d2c <SetVOCindicator+0x1b4>)
 8011c9c:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 8011c9e:	1dbb      	adds	r3, r7, #6
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	0018      	movs	r0, r3
 8011ca4:	f7f1 fb8c 	bl	80033c0 <__aeabi_i2d>
 8011ca8:	2200      	movs	r2, #0
 8011caa:	4b1d      	ldr	r3, [pc, #116]	@ (8011d20 <SetVOCindicator+0x1a8>)
 8011cac:	f7f0 ff8e 	bl	8002bcc <__aeabi_dsub>
 8011cb0:	0002      	movs	r2, r0
 8011cb2:	000b      	movs	r3, r1
 8011cb4:	0010      	movs	r0, r2
 8011cb6:	0019      	movs	r1, r3
 8011cb8:	2200      	movs	r2, #0
 8011cba:	4b1f      	ldr	r3, [pc, #124]	@ (8011d38 <SetVOCindicator+0x1c0>)
 8011cbc:	f7f0 f87a 	bl	8001db4 <__aeabi_ddiv>
 8011cc0:	0002      	movs	r2, r0
 8011cc2:	000b      	movs	r3, r1
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	4917      	ldr	r1, [pc, #92]	@ (8011d24 <SetVOCindicator+0x1ac>)
 8011cc8:	f7f0 ff80 	bl	8002bcc <__aeabi_dsub>
 8011ccc:	0002      	movs	r2, r0
 8011cce:	000b      	movs	r3, r1
 8011cd0:	0014      	movs	r4, r2
 8011cd2:	001d      	movs	r5, r3
 8011cd4:	4b14      	ldr	r3, [pc, #80]	@ (8011d28 <SetVOCindicator+0x1b0>)
 8011cd6:	881b      	ldrh	r3, [r3, #0]
 8011cd8:	0018      	movs	r0, r3
 8011cda:	f7f1 fb71 	bl	80033c0 <__aeabi_i2d>
 8011cde:	0002      	movs	r2, r0
 8011ce0:	000b      	movs	r3, r1
 8011ce2:	0020      	movs	r0, r4
 8011ce4:	0029      	movs	r1, r5
 8011ce6:	f7f0 fca9 	bl	800263c <__aeabi_dmul>
 8011cea:	0002      	movs	r2, r0
 8011cec:	000b      	movs	r3, r1
 8011cee:	0010      	movs	r0, r2
 8011cf0:	0019      	movs	r1, r3
 8011cf2:	f7ee fcab 	bl	800064c <__aeabi_d2uiz>
 8011cf6:	0003      	movs	r3, r0
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8011d34 <SetVOCindicator+0x1bc>)
 8011cfc:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8011cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8011d28 <SetVOCindicator+0x1b0>)
 8011d00:	881a      	ldrh	r2, [r3, #0]
 8011d02:	4b0b      	ldr	r3, [pc, #44]	@ (8011d30 <SetVOCindicator+0x1b8>)
 8011d04:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8011d06:	4b0b      	ldr	r3, [pc, #44]	@ (8011d34 <SetVOCindicator+0x1bc>)
 8011d08:	8818      	ldrh	r0, [r3, #0]
 8011d0a:	4b08      	ldr	r3, [pc, #32]	@ (8011d2c <SetVOCindicator+0x1b4>)
 8011d0c:	8819      	ldrh	r1, [r3, #0]
 8011d0e:	4b08      	ldr	r3, [pc, #32]	@ (8011d30 <SetVOCindicator+0x1b8>)
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	001a      	movs	r2, r3
 8011d14:	f7ff fd42 	bl	801179c <SetVocLED>
  }

}
 8011d18:	46c0      	nop			@ (mov r8, r8)
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	b002      	add	sp, #8
 8011d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8011d20:	40590000 	.word	0x40590000
 8011d24:	3ff00000 	.word	0x3ff00000
 8011d28:	200000de 	.word	0x200000de
 8011d2c:	20001e8a 	.word	0x20001e8a
 8011d30:	20001e8c 	.word	0x20001e8c
 8011d34:	20001e8e 	.word	0x20001e8e
 8011d38:	40790000 	.word	0x40790000

08011d3c <powerCheck>:

Battery_Status powerCheck(){
 8011d3c:	b590      	push	{r4, r7, lr}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8011d42:	f7f7 f8c3 	bl	8008ecc <Check_USB_PowerOn>
 8011d46:	0003      	movs	r3, r0
 8011d48:	001a      	movs	r2, r3
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	4053      	eors	r3, r2
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d005      	beq.n	8011d60 <powerCheck+0x24>
    status = batteryChargeCheck();
 8011d54:	1dfc      	adds	r4, r7, #7
 8011d56:	f7ff fc01 	bl	801155c <batteryChargeCheck>
 8011d5a:	0003      	movs	r3, r0
 8011d5c:	7023      	strb	r3, [r4, #0]
 8011d5e:	e002      	b.n	8011d66 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8011d60:	1dfb      	adds	r3, r7, #7
 8011d62:	2204      	movs	r2, #4
 8011d64:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8011d66:	1dfb      	adds	r3, r7, #7
 8011d68:	781b      	ldrb	r3, [r3, #0]
}
 8011d6a:	0018      	movs	r0, r3
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	b003      	add	sp, #12
 8011d70:	bd90      	pop	{r4, r7, pc}
	...

08011d74 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8011d74:	b5b0      	push	{r4, r5, r7, lr}
 8011d76:	b086      	sub	sp, #24
 8011d78:	af04      	add	r7, sp, #16
 8011d7a:	0002      	movs	r2, r0
 8011d7c:	1dfb      	adds	r3, r7, #7
 8011d7e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8011d80:	1dfb      	adds	r3, r7, #7
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	2b04      	cmp	r3, #4
 8011d86:	d114      	bne.n	8011db2 <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar &dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8011d88:	f7f6 ffea 	bl	8008d60 <ReadBatteryVoltage>
 8011d8c:	1c03      	adds	r3, r0, #0
 8011d8e:	1c18      	adds	r0, r3, #0
 8011d90:	f7f1 fb68 	bl	8003464 <__aeabi_f2d>
 8011d94:	0004      	movs	r4, r0
 8011d96:	000d      	movs	r5, r1
 8011d98:	f7f7 f844 	bl	8008e24 <ReadSolarVoltage>
 8011d9c:	0003      	movs	r3, r0
 8011d9e:	0019      	movs	r1, r3
 8011da0:	4a1a      	ldr	r2, [pc, #104]	@ (8011e0c <powerDisplay+0x98>)
 8011da2:	4b1b      	ldr	r3, [pc, #108]	@ (8011e10 <powerDisplay+0x9c>)
 8011da4:	9102      	str	r1, [sp, #8]
 8011da6:	9400      	str	r4, [sp, #0]
 8011da8:	9501      	str	r5, [sp, #4]
 8011daa:	0019      	movs	r1, r3
 8011dac:	2003      	movs	r0, #3
 8011dae:	f000 ff4b 	bl	8012c48 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8011db2:	1dfb      	adds	r3, r7, #7
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	2b03      	cmp	r3, #3
 8011db8:	d105      	bne.n	8011dc6 <powerDisplay+0x52>
    Debug("Battery fully charged");
 8011dba:	4a16      	ldr	r2, [pc, #88]	@ (8011e14 <powerDisplay+0xa0>)
 8011dbc:	4b14      	ldr	r3, [pc, #80]	@ (8011e10 <powerDisplay+0x9c>)
 8011dbe:	0019      	movs	r1, r3
 8011dc0:	2003      	movs	r0, #3
 8011dc2:	f000 ff41 	bl	8012c48 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8011dc6:	1dfb      	adds	r3, r7, #7
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	2b02      	cmp	r3, #2
 8011dcc:	d105      	bne.n	8011dda <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 8011dce:	4a12      	ldr	r2, [pc, #72]	@ (8011e18 <powerDisplay+0xa4>)
 8011dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8011e10 <powerDisplay+0x9c>)
 8011dd2:	0019      	movs	r1, r3
 8011dd4:	2003      	movs	r0, #3
 8011dd6:	f000 ff37 	bl	8012c48 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8011dda:	1dfb      	adds	r3, r7, #7
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d105      	bne.n	8011dee <powerDisplay+0x7a>
    Debug("Battery is getting low");
 8011de2:	4a0e      	ldr	r2, [pc, #56]	@ (8011e1c <powerDisplay+0xa8>)
 8011de4:	4b0a      	ldr	r3, [pc, #40]	@ (8011e10 <powerDisplay+0x9c>)
 8011de6:	0019      	movs	r1, r3
 8011de8:	2003      	movs	r0, #3
 8011dea:	f000 ff2d 	bl	8012c48 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8011dee:	1dfb      	adds	r3, r7, #7
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d105      	bne.n	8011e02 <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 8011df6:	4a0a      	ldr	r2, [pc, #40]	@ (8011e20 <powerDisplay+0xac>)
 8011df8:	4b05      	ldr	r3, [pc, #20]	@ (8011e10 <powerDisplay+0x9c>)
 8011dfa:	0019      	movs	r1, r3
 8011dfc:	2003      	movs	r0, #3
 8011dfe:	f000 ff23 	bl	8012c48 <CreateLine>
  }
}
 8011e02:	46c0      	nop			@ (mov r8, r8)
 8011e04:	46bd      	mov	sp, r7
 8011e06:	b002      	add	sp, #8
 8011e08:	bdb0      	pop	{r4, r5, r7, pc}
 8011e0a:	46c0      	nop			@ (mov r8, r8)
 8011e0c:	0802cc74 	.word	0x0802cc74
 8011e10:	0802ccb4 	.word	0x0802ccb4
 8011e14:	0802ccb8 	.word	0x0802ccb8
 8011e18:	0802ccd0 	.word	0x0802ccd0
 8011e1c:	0802ccf0 	.word	0x0802ccf0
 8011e20:	0802cd08 	.word	0x0802cd08

08011e24 <configCheck>:

void configCheck(){
 8011e24:	b590      	push	{r4, r7, lr}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8011e2a:	f7f7 f85e 	bl	8008eea <BootButton_Pressed>
 8011e2e:	1e03      	subs	r3, r0, #0
 8011e30:	d007      	beq.n	8011e42 <configCheck+0x1e>
 8011e32:	f7f7 f86b 	bl	8008f0c <UserButton_Pressed>
 8011e36:	1e03      	subs	r3, r0, #0
 8011e38:	d003      	beq.n	8011e42 <configCheck+0x1e>
    configSet = true;
 8011e3a:	4bb5      	ldr	r3, [pc, #724]	@ (8012110 <configCheck+0x2ec>)
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	701a      	strb	r2, [r3, #0]
 8011e40:	e00a      	b.n	8011e58 <configCheck+0x34>
  }
  else{
    configSet = false;
 8011e42:	4bb3      	ldr	r3, [pc, #716]	@ (8012110 <configCheck+0x2ec>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8011e48:	f001 fc3c 	bl	80136c4 <HAL_GetTick>
 8011e4c:	0003      	movs	r3, r0
 8011e4e:	22fa      	movs	r2, #250	@ 0xfa
 8011e50:	00d2      	lsls	r2, r2, #3
 8011e52:	189a      	adds	r2, r3, r2
 8011e54:	4baf      	ldr	r3, [pc, #700]	@ (8012114 <configCheck+0x2f0>)
 8011e56:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8011e58:	4bad      	ldr	r3, [pc, #692]	@ (8012110 <configCheck+0x2ec>)
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00d      	beq.n	8011e7c <configCheck+0x58>
 8011e60:	4bac      	ldr	r3, [pc, #688]	@ (8012114 <configCheck+0x2f0>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	0018      	movs	r0, r3
 8011e66:	f000 fe99 	bl	8012b9c <TimestampIsReached>
 8011e6a:	1e03      	subs	r3, r0, #0
 8011e6c:	d006      	beq.n	8011e7c <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8011e6e:	f7f2 fdcd 	bl	8004a0c <SetConfigMode>
    SetDBLED(true, true, true);
 8011e72:	2201      	movs	r2, #1
 8011e74:	2101      	movs	r1, #1
 8011e76:	2001      	movs	r0, #1
 8011e78:	f7ff fc46 	bl	8011708 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8011e7c:	f7f7 f835 	bl	8008eea <BootButton_Pressed>
 8011e80:	0003      	movs	r3, r0
 8011e82:	001a      	movs	r2, r3
 8011e84:	2301      	movs	r3, #1
 8011e86:	4053      	eors	r3, r2
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d05a      	beq.n	8011f44 <configCheck+0x120>
 8011e8e:	f7f7 f83d 	bl	8008f0c <UserButton_Pressed>
 8011e92:	1e03      	subs	r3, r0, #0
 8011e94:	d056      	beq.n	8011f44 <configCheck+0x120>
 8011e96:	4ba0      	ldr	r3, [pc, #640]	@ (8012118 <configCheck+0x2f4>)
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	4053      	eors	r3, r2
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d04f      	beq.n	8011f44 <configCheck+0x120>
 8011ea4:	f7f2 fdd2 	bl	8004a4c <GetReconfigMode>
 8011ea8:	0003      	movs	r3, r0
 8011eaa:	001a      	movs	r2, r3
 8011eac:	2301      	movs	r3, #1
 8011eae:	4053      	eors	r3, r2
 8011eb0:	b2db      	uxtb	r3, r3
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d046      	beq.n	8011f44 <configCheck+0x120>
    SetLEDsOff();
 8011eb6:	f7ff fdb1 	bl	8011a1c <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8011eba:	4a98      	ldr	r2, [pc, #608]	@ (801211c <configCheck+0x2f8>)
 8011ebc:	4997      	ldr	r1, [pc, #604]	@ (801211c <configCheck+0x2f8>)
 8011ebe:	4b97      	ldr	r3, [pc, #604]	@ (801211c <configCheck+0x2f8>)
 8011ec0:	0018      	movs	r0, r3
 8011ec2:	f7ff fc6b 	bl	801179c <SetVocLED>
    HAL_Delay(1500);
 8011ec6:	4b96      	ldr	r3, [pc, #600]	@ (8012120 <configCheck+0x2fc>)
 8011ec8:	0018      	movs	r0, r3
 8011eca:	f001 fc05 	bl	80136d8 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8011ece:	23fa      	movs	r3, #250	@ 0xfa
 8011ed0:	011a      	lsls	r2, r3, #4
 8011ed2:	23fa      	movs	r3, #250	@ 0xfa
 8011ed4:	0119      	lsls	r1, r3, #4
 8011ed6:	23fa      	movs	r3, #250	@ 0xfa
 8011ed8:	011b      	lsls	r3, r3, #4
 8011eda:	0018      	movs	r0, r3
 8011edc:	f7ff fc5e 	bl	801179c <SetVocLED>
    userToggle = !userToggle;
 8011ee0:	4b90      	ldr	r3, [pc, #576]	@ (8012124 <configCheck+0x300>)
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	1e5a      	subs	r2, r3, #1
 8011ee6:	4193      	sbcs	r3, r2
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	2201      	movs	r2, #1
 8011eec:	4053      	eors	r3, r2
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	1c1a      	adds	r2, r3, #0
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	4013      	ands	r3, r2
 8011ef6:	b2da      	uxtb	r2, r3
 8011ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8012124 <configCheck+0x300>)
 8011efa:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8011efc:	4b89      	ldr	r3, [pc, #548]	@ (8012124 <configCheck+0x300>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d002      	beq.n	8011f0a <configCheck+0xe6>
      EnabledConnectedDevices();
 8011f04:	f7fa fed8 	bl	800ccb8 <EnabledConnectedDevices>
 8011f08:	e004      	b.n	8011f14 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8011f0a:	f001 fbdb 	bl	80136c4 <HAL_GetTick>
 8011f0e:	0002      	movs	r2, r0
 8011f10:	4b85      	ldr	r3, [pc, #532]	@ (8012128 <configCheck+0x304>)
 8011f12:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8011f14:	4b83      	ldr	r3, [pc, #524]	@ (8012124 <configCheck+0x300>)
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d001      	beq.n	8011f20 <configCheck+0xfc>
 8011f1c:	4b83      	ldr	r3, [pc, #524]	@ (801212c <configCheck+0x308>)
 8011f1e:	e000      	b.n	8011f22 <configCheck+0xfe>
 8011f20:	4b83      	ldr	r3, [pc, #524]	@ (8012130 <configCheck+0x30c>)
 8011f22:	4a84      	ldr	r2, [pc, #528]	@ (8012134 <configCheck+0x310>)
 8011f24:	4984      	ldr	r1, [pc, #528]	@ (8012138 <configCheck+0x314>)
 8011f26:	2003      	movs	r0, #3
 8011f28:	f000 fe8e 	bl	8012c48 <CreateLine>
    userbuttonHeld = true;
 8011f2c:	4b7a      	ldr	r3, [pc, #488]	@ (8012118 <configCheck+0x2f4>)
 8011f2e:	2201      	movs	r2, #1
 8011f30:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8011f32:	f001 fbc7 	bl	80136c4 <HAL_GetTick>
 8011f36:	0003      	movs	r3, r0
 8011f38:	22fa      	movs	r2, #250	@ 0xfa
 8011f3a:	00d2      	lsls	r2, r2, #3
 8011f3c:	189a      	adds	r2, r3, r2
 8011f3e:	4b7f      	ldr	r3, [pc, #508]	@ (801213c <configCheck+0x318>)
 8011f40:	601a      	str	r2, [r3, #0]
 8011f42:	e002      	b.n	8011f4a <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8011f44:	4b74      	ldr	r3, [pc, #464]	@ (8012118 <configCheck+0x2f4>)
 8011f46:	2200      	movs	r2, #0
 8011f48:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8011f4a:	f7f6 ffce 	bl	8008eea <BootButton_Pressed>
 8011f4e:	0003      	movs	r3, r0
 8011f50:	001a      	movs	r2, r3
 8011f52:	2301      	movs	r3, #1
 8011f54:	4053      	eors	r3, r2
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d100      	bne.n	8011f5e <configCheck+0x13a>
 8011f5c:	e0a4      	b.n	80120a8 <configCheck+0x284>
 8011f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8012118 <configCheck+0x2f4>)
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d100      	bne.n	8011f68 <configCheck+0x144>
 8011f66:	e09f      	b.n	80120a8 <configCheck+0x284>
 8011f68:	4b74      	ldr	r3, [pc, #464]	@ (801213c <configCheck+0x318>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	0018      	movs	r0, r3
 8011f6e:	f000 fe15 	bl	8012b9c <TimestampIsReached>
 8011f72:	1e03      	subs	r3, r0, #0
 8011f74:	d100      	bne.n	8011f78 <configCheck+0x154>
 8011f76:	e097      	b.n	80120a8 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8011f78:	f7fa faa4 	bl	800c4c4 <GetPMSensorPresence>
 8011f7c:	1e03      	subs	r3, r0, #0
 8011f7e:	d100      	bne.n	8011f82 <configCheck+0x15e>
 8011f80:	e082      	b.n	8012088 <configCheck+0x264>
 8011f82:	4b6f      	ldr	r3, [pc, #444]	@ (8012140 <configCheck+0x31c>)
 8011f84:	791b      	ldrb	r3, [r3, #4]
 8011f86:	2b34      	cmp	r3, #52	@ 0x34
 8011f88:	d004      	beq.n	8011f94 <configCheck+0x170>
 8011f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8012140 <configCheck+0x31c>)
 8011f8c:	791b      	ldrb	r3, [r3, #4]
 8011f8e:	2b35      	cmp	r3, #53	@ 0x35
 8011f90:	d000      	beq.n	8011f94 <configCheck+0x170>
 8011f92:	e079      	b.n	8012088 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8011f94:	4b6b      	ldr	r3, [pc, #428]	@ (8012144 <configCheck+0x320>)
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	1e5a      	subs	r2, r3, #1
 8011f9a:	4193      	sbcs	r3, r2
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	4053      	eors	r3, r2
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	1c1a      	adds	r2, r3, #0
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	4013      	ands	r3, r2
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	4b65      	ldr	r3, [pc, #404]	@ (8012144 <configCheck+0x320>)
 8011fae:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8011fb0:	4b64      	ldr	r3, [pc, #400]	@ (8012144 <configCheck+0x320>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d005      	beq.n	8011fc4 <configCheck+0x1a0>
 8011fb8:	1dbc      	adds	r4, r7, #6
 8011fba:	f7ff fb29 	bl	8011610 <Calculate_LED_ON>
 8011fbe:	0003      	movs	r3, r0
 8011fc0:	8023      	strh	r3, [r4, #0]
 8011fc2:	e003      	b.n	8011fcc <configCheck+0x1a8>
        else color = 4000;
 8011fc4:	1dbb      	adds	r3, r7, #6
 8011fc6:	22fa      	movs	r2, #250	@ 0xfa
 8011fc8:	0112      	lsls	r2, r2, #4
 8011fca:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8011fcc:	4b5d      	ldr	r3, [pc, #372]	@ (8012144 <configCheck+0x320>)
 8011fce:	781b      	ldrb	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d001      	beq.n	8011fd8 <configCheck+0x1b4>
 8011fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8012148 <configCheck+0x324>)
 8011fd6:	e000      	b.n	8011fda <configCheck+0x1b6>
 8011fd8:	4b5c      	ldr	r3, [pc, #368]	@ (801214c <configCheck+0x328>)
 8011fda:	4a5d      	ldr	r2, [pc, #372]	@ (8012150 <configCheck+0x32c>)
 8011fdc:	495d      	ldr	r1, [pc, #372]	@ (8012154 <configCheck+0x330>)
 8011fde:	2002      	movs	r0, #2
 8011fe0:	f000 fe32 	bl	8012c48 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8011fe4:	1d7b      	adds	r3, r7, #5
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	e028      	b.n	801203e <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8011fec:	f7ff fb10 	bl	8011610 <Calculate_LED_ON>
 8011ff0:	0003      	movs	r3, r0
 8011ff2:	001a      	movs	r2, r3
 8011ff4:	4b58      	ldr	r3, [pc, #352]	@ (8012158 <configCheck+0x334>)
 8011ff6:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8011ff8:	4b57      	ldr	r3, [pc, #348]	@ (8012158 <configCheck+0x334>)
 8011ffa:	1dba      	adds	r2, r7, #6
 8011ffc:	8812      	ldrh	r2, [r2, #0]
 8011ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8012000:	4b55      	ldr	r3, [pc, #340]	@ (8012158 <configCheck+0x334>)
 8012002:	1dba      	adds	r2, r7, #6
 8012004:	8812      	ldrh	r2, [r2, #0]
 8012006:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8012008:	23c8      	movs	r3, #200	@ 0xc8
 801200a:	005b      	lsls	r3, r3, #1
 801200c:	0018      	movs	r0, r3
 801200e:	f001 fb63 	bl	80136d8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8012012:	4b51      	ldr	r3, [pc, #324]	@ (8012158 <configCheck+0x334>)
 8012014:	22fa      	movs	r2, #250	@ 0xfa
 8012016:	0112      	lsls	r2, r2, #4
 8012018:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 801201a:	4b4f      	ldr	r3, [pc, #316]	@ (8012158 <configCheck+0x334>)
 801201c:	22fa      	movs	r2, #250	@ 0xfa
 801201e:	0112      	lsls	r2, r2, #4
 8012020:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8012022:	4b4d      	ldr	r3, [pc, #308]	@ (8012158 <configCheck+0x334>)
 8012024:	22fa      	movs	r2, #250	@ 0xfa
 8012026:	0112      	lsls	r2, r2, #4
 8012028:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801202a:	23c8      	movs	r3, #200	@ 0xc8
 801202c:	005b      	lsls	r3, r3, #1
 801202e:	0018      	movs	r0, r3
 8012030:	f001 fb52 	bl	80136d8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8012034:	1d7b      	adds	r3, r7, #5
 8012036:	781a      	ldrb	r2, [r3, #0]
 8012038:	1d7b      	adds	r3, r7, #5
 801203a:	3201      	adds	r2, #1
 801203c:	701a      	strb	r2, [r3, #0]
 801203e:	1d7b      	adds	r3, r7, #5
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	2b01      	cmp	r3, #1
 8012044:	d9d2      	bls.n	8011fec <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8012046:	4b37      	ldr	r3, [pc, #220]	@ (8012124 <configCheck+0x300>)
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	1e5a      	subs	r2, r3, #1
 801204c:	4193      	sbcs	r3, r2
 801204e:	b2db      	uxtb	r3, r3
 8012050:	2201      	movs	r2, #1
 8012052:	4053      	eors	r3, r2
 8012054:	b2db      	uxtb	r3, r3
 8012056:	1c1a      	adds	r2, r3, #0
 8012058:	2301      	movs	r3, #1
 801205a:	4013      	ands	r3, r2
 801205c:	b2da      	uxtb	r2, r3
 801205e:	4b31      	ldr	r3, [pc, #196]	@ (8012124 <configCheck+0x300>)
 8012060:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8012062:	4b30      	ldr	r3, [pc, #192]	@ (8012124 <configCheck+0x300>)
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d001      	beq.n	801206e <configCheck+0x24a>
 801206a:	4b37      	ldr	r3, [pc, #220]	@ (8012148 <configCheck+0x324>)
 801206c:	e000      	b.n	8012070 <configCheck+0x24c>
 801206e:	4b37      	ldr	r3, [pc, #220]	@ (801214c <configCheck+0x328>)
 8012070:	4a3a      	ldr	r2, [pc, #232]	@ (801215c <configCheck+0x338>)
 8012072:	4938      	ldr	r1, [pc, #224]	@ (8012154 <configCheck+0x330>)
 8012074:	2002      	movs	r0, #2
 8012076:	f000 fde7 	bl	8012c48 <CreateLine>
      if (usbPluggedIn) {
 801207a:	4b39      	ldr	r3, [pc, #228]	@ (8012160 <configCheck+0x33c>)
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d009      	beq.n	8012096 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8012082:	f7fb ffd1 	bl	800e028 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012086:	e006      	b.n	8012096 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8012088:	4a36      	ldr	r2, [pc, #216]	@ (8012164 <configCheck+0x340>)
 801208a:	4b32      	ldr	r3, [pc, #200]	@ (8012154 <configCheck+0x330>)
 801208c:	0019      	movs	r1, r3
 801208e:	2002      	movs	r0, #2
 8012090:	f000 fdda 	bl	8012c48 <CreateLine>
 8012094:	e000      	b.n	8012098 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012096:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8012098:	46c0      	nop			@ (mov r8, r8)
 801209a:	f7f6 ff37 	bl	8008f0c <UserButton_Pressed>
 801209e:	1e03      	subs	r3, r0, #0
 80120a0:	d1fb      	bne.n	801209a <configCheck+0x276>
    }
    userbuttonHeld = false;
 80120a2:	4b1d      	ldr	r3, [pc, #116]	@ (8012118 <configCheck+0x2f4>)
 80120a4:	2200      	movs	r2, #0
 80120a6:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80120a8:	f7f6 ff1f 	bl	8008eea <BootButton_Pressed>
 80120ac:	0003      	movs	r3, r0
 80120ae:	001a      	movs	r2, r3
 80120b0:	2301      	movs	r3, #1
 80120b2:	4053      	eors	r3, r2
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d00b      	beq.n	80120d2 <configCheck+0x2ae>
 80120ba:	f7f6 ff27 	bl	8008f0c <UserButton_Pressed>
 80120be:	0003      	movs	r3, r0
 80120c0:	001a      	movs	r2, r3
 80120c2:	2301      	movs	r3, #1
 80120c4:	4053      	eors	r3, r2
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d002      	beq.n	80120d2 <configCheck+0x2ae>
    userbuttonHeld = false;
 80120cc:	4b12      	ldr	r3, [pc, #72]	@ (8012118 <configCheck+0x2f4>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80120d2:	f7f6 fefb 	bl	8008ecc <Check_USB_PowerOn>
 80120d6:	1e03      	subs	r3, r0, #0
 80120d8:	d003      	beq.n	80120e2 <configCheck+0x2be>
    usbPluggedIn = true;
 80120da:	4b21      	ldr	r3, [pc, #132]	@ (8012160 <configCheck+0x33c>)
 80120dc:	2201      	movs	r2, #1
 80120de:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 80120e0:	e012      	b.n	8012108 <configCheck+0x2e4>
    if(!userToggle && !init){
 80120e2:	4b10      	ldr	r3, [pc, #64]	@ (8012124 <configCheck+0x300>)
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	2201      	movs	r2, #1
 80120e8:	4053      	eors	r3, r2
 80120ea:	b2db      	uxtb	r3, r3
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d008      	beq.n	8012102 <configCheck+0x2de>
 80120f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012168 <configCheck+0x344>)
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2201      	movs	r2, #1
 80120f6:	4053      	eors	r3, r2
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <configCheck+0x2de>
      SetLEDsOff();
 80120fe:	f7ff fc8d 	bl	8011a1c <SetLEDsOff>
    usbPluggedIn = false;
 8012102:	4b17      	ldr	r3, [pc, #92]	@ (8012160 <configCheck+0x33c>)
 8012104:	2200      	movs	r2, #0
 8012106:	701a      	strb	r2, [r3, #0]
}
 8012108:	46c0      	nop			@ (mov r8, r8)
 801210a:	46bd      	mov	sp, r7
 801210c:	b003      	add	sp, #12
 801210e:	bd90      	pop	{r4, r7, pc}
 8012110:	20001e74 	.word	0x20001e74
 8012114:	20001e7c 	.word	0x20001e7c
 8012118:	20001e77 	.word	0x20001e77
 801211c:	00000bb8 	.word	0x00000bb8
 8012120:	000005dc 	.word	0x000005dc
 8012124:	20001e76 	.word	0x20001e76
 8012128:	20000e3c 	.word	0x20000e3c
 801212c:	0802cd2c 	.word	0x0802cd2c
 8012130:	0802cd30 	.word	0x0802cd30
 8012134:	0802cd34 	.word	0x0802cd34
 8012138:	0802ccb4 	.word	0x0802ccb4
 801213c:	20001e80 	.word	0x20001e80
 8012140:	20000ee8 	.word	0x20000ee8
 8012144:	20000ee6 	.word	0x20000ee6
 8012148:	0802cd54 	.word	0x0802cd54
 801214c:	0802cd5c 	.word	0x0802cd5c
 8012150:	0802cd68 	.word	0x0802cd68
 8012154:	0802cd88 	.word	0x0802cd88
 8012158:	40000400 	.word	0x40000400
 801215c:	0802cd8c 	.word	0x0802cd8c
 8012160:	20001e75 	.word	0x20001e75
 8012164:	0802cda4 	.word	0x0802cda4
 8012168:	200000dc 	.word	0x200000dc

0801216c <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 801216c:	b590      	push	{r4, r7, lr}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8012172:	1dfc      	adds	r4, r7, #7
 8012174:	f7ff fde2 	bl	8011d3c <powerCheck>
 8012178:	0003      	movs	r3, r0
 801217a:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 801217c:	1dfb      	adds	r3, r7, #7
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	0018      	movs	r0, r3
 8012182:	f7ff fdf7 	bl	8011d74 <powerDisplay>
  return status;
 8012186:	1dfb      	adds	r3, r7, #7
 8012188:	781b      	ldrb	r3, [r3, #0]
}
 801218a:	0018      	movs	r0, r3
 801218c:	46bd      	mov	sp, r7
 801218e:	b003      	add	sp, #12
 8012190:	bd90      	pop	{r4, r7, pc}
	...

08012194 <setuserToggle>:

void setuserToggle(void) {
 8012194:	b580      	push	{r7, lr}
 8012196:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8012198:	f7ff fdd0 	bl	8011d3c <powerCheck>
 801219c:	0003      	movs	r3, r0
 801219e:	2b04      	cmp	r3, #4
 80121a0:	d004      	beq.n	80121ac <setuserToggle+0x18>
    userToggle = true;
 80121a2:	4b04      	ldr	r3, [pc, #16]	@ (80121b4 <setuserToggle+0x20>)
 80121a4:	2201      	movs	r2, #1
 80121a6:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80121a8:	f7fa fd86 	bl	800ccb8 <EnabledConnectedDevices>
  }
}
 80121ac:	46c0      	nop			@ (mov r8, r8)
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	46c0      	nop			@ (mov r8, r8)
 80121b4:	20001e76 	.word	0x20001e76

080121b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80121bc:	4b07      	ldr	r3, [pc, #28]	@ (80121dc <HAL_MspInit+0x24>)
 80121be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80121c0:	4b06      	ldr	r3, [pc, #24]	@ (80121dc <HAL_MspInit+0x24>)
 80121c2:	2101      	movs	r1, #1
 80121c4:	430a      	orrs	r2, r1
 80121c6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80121c8:	4b04      	ldr	r3, [pc, #16]	@ (80121dc <HAL_MspInit+0x24>)
 80121ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80121cc:	4b03      	ldr	r3, [pc, #12]	@ (80121dc <HAL_MspInit+0x24>)
 80121ce:	2180      	movs	r1, #128	@ 0x80
 80121d0:	0549      	lsls	r1, r1, #21
 80121d2:	430a      	orrs	r2, r1
 80121d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80121d6:	46c0      	nop			@ (mov r8, r8)
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	40021000 	.word	0x40021000

080121e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80121e4:	46c0      	nop			@ (mov r8, r8)
 80121e6:	e7fd      	b.n	80121e4 <NMI_Handler+0x4>

080121e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80121ec:	46c0      	nop			@ (mov r8, r8)
 80121ee:	e7fd      	b.n	80121ec <HardFault_Handler+0x4>

080121f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80121f4:	46c0      	nop			@ (mov r8, r8)
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}

080121fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80121fa:	b580      	push	{r7, lr}
 80121fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80121fe:	46c0      	nop			@ (mov r8, r8)
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012208:	f001 fa4a 	bl	80136a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 801220c:	46c0      	nop			@ (mov r8, r8)
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
	...

08012214 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012218:	4b03      	ldr	r3, [pc, #12]	@ (8012228 <RTC_IRQHandler+0x14>)
 801221a:	0018      	movs	r0, r3
 801221c:	f009 fa08 	bl	801b630 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8012220:	46c0      	nop			@ (mov r8, r8)
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	46c0      	nop			@ (mov r8, r8)
 8012228:	20000ec0 	.word	0x20000ec0

0801222c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8012230:	2380      	movs	r3, #128	@ 0x80
 8012232:	021b      	lsls	r3, r3, #8
 8012234:	0018      	movs	r0, r3
 8012236:	f002 fcf3 	bl	8014c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 801223a:	46c0      	nop			@ (mov r8, r8)
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8012244:	4b05      	ldr	r3, [pc, #20]	@ (801225c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8012246:	0018      	movs	r0, r3
 8012248:	f002 f87b 	bl	8014342 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 801224c:	4b04      	ldr	r3, [pc, #16]	@ (8012260 <DMA1_Channel2_3_IRQHandler+0x20>)
 801224e:	0018      	movs	r0, r3
 8012250:	f002 f877 	bl	8014342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8012254:	46c0      	nop			@ (mov r8, r8)
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	46c0      	nop			@ (mov r8, r8)
 801225c:	20000d58 	.word	0x20000d58
 8012260:	20000d10 	.word	0x20000d10

08012264 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8012268:	4b07      	ldr	r3, [pc, #28]	@ (8012288 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 801226a:	0018      	movs	r0, r3
 801226c:	f002 f869 	bl	8014342 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8012270:	4b06      	ldr	r3, [pc, #24]	@ (801228c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8012272:	0018      	movs	r0, r3
 8012274:	f002 f865 	bl	8014342 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8012278:	4b05      	ldr	r3, [pc, #20]	@ (8012290 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 801227a:	0018      	movs	r0, r3
 801227c:	f002 f861 	bl	8014342 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8012280:	46c0      	nop			@ (mov r8, r8)
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	46c0      	nop			@ (mov r8, r8)
 8012288:	20000ddc 	.word	0x20000ddc
 801228c:	2000217c 	.word	0x2000217c
 8012290:	200021c4 	.word	0x200021c4

08012294 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8012298:	4b03      	ldr	r3, [pc, #12]	@ (80122a8 <USART4_5_IRQHandler+0x14>)
 801229a:	0018      	movs	r0, r3
 801229c:	f00a f8c2 	bl	801c424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80122a0:	46c0      	nop			@ (mov r8, r8)
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	46c0      	nop			@ (mov r8, r8)
 80122a8:	200020c4 	.word	0x200020c4

080122ac <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80122b0:	4b09      	ldr	r3, [pc, #36]	@ (80122d8 <I2C1_IRQHandler+0x2c>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	699a      	ldr	r2, [r3, #24]
 80122b6:	23e0      	movs	r3, #224	@ 0xe0
 80122b8:	00db      	lsls	r3, r3, #3
 80122ba:	4013      	ands	r3, r2
 80122bc:	d004      	beq.n	80122c8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80122be:	4b06      	ldr	r3, [pc, #24]	@ (80122d8 <I2C1_IRQHandler+0x2c>)
 80122c0:	0018      	movs	r0, r3
 80122c2:	f003 fbcb 	bl	8015a5c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80122c6:	e003      	b.n	80122d0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80122c8:	4b03      	ldr	r3, [pc, #12]	@ (80122d8 <I2C1_IRQHandler+0x2c>)
 80122ca:	0018      	movs	r0, r3
 80122cc:	f003 fbac 	bl	8015a28 <HAL_I2C_EV_IRQHandler>
}
 80122d0:	46c0      	nop			@ (mov r8, r8)
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	46c0      	nop			@ (mov r8, r8)
 80122d8:	20000c68 	.word	0x20000c68

080122dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80122e0:	4b03      	ldr	r3, [pc, #12]	@ (80122f0 <USART1_IRQHandler+0x14>)
 80122e2:	0018      	movs	r0, r3
 80122e4:	f00a f89e 	bl	801c424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80122e8:	46c0      	nop			@ (mov r8, r8)
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	46c0      	nop			@ (mov r8, r8)
 80122f0:	2000200c 	.word	0x2000200c

080122f4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80122f8:	4b03      	ldr	r3, [pc, #12]	@ (8012308 <USB_IRQHandler+0x14>)
 80122fa:	0018      	movs	r0, r3
 80122fc:	f005 ffee 	bl	80182dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8012300:	46c0      	nop			@ (mov r8, r8)
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	46c0      	nop			@ (mov r8, r8)
 8012308:	20002fe0 	.word	0x20002fe0

0801230c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	af00      	add	r7, sp, #0
  return 1;
 8012310:	2301      	movs	r3, #1
}
 8012312:	0018      	movs	r0, r3
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <_kill>:

int _kill(int pid, int sig)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012322:	f012 ff85 	bl	8025230 <__errno>
 8012326:	0003      	movs	r3, r0
 8012328:	2216      	movs	r2, #22
 801232a:	601a      	str	r2, [r3, #0]
  return -1;
 801232c:	2301      	movs	r3, #1
 801232e:	425b      	negs	r3, r3
}
 8012330:	0018      	movs	r0, r3
 8012332:	46bd      	mov	sp, r7
 8012334:	b002      	add	sp, #8
 8012336:	bd80      	pop	{r7, pc}

08012338 <_exit>:

void _exit (int status)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012340:	2301      	movs	r3, #1
 8012342:	425a      	negs	r2, r3
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	0011      	movs	r1, r2
 8012348:	0018      	movs	r0, r3
 801234a:	f7ff ffe5 	bl	8012318 <_kill>
  while (1) {}    /* Make sure we hang here */
 801234e:	46c0      	nop			@ (mov r8, r8)
 8012350:	e7fd      	b.n	801234e <_exit+0x16>

08012352 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012352:	b580      	push	{r7, lr}
 8012354:	b086      	sub	sp, #24
 8012356:	af00      	add	r7, sp, #0
 8012358:	60f8      	str	r0, [r7, #12]
 801235a:	60b9      	str	r1, [r7, #8]
 801235c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801235e:	2300      	movs	r3, #0
 8012360:	617b      	str	r3, [r7, #20]
 8012362:	e00a      	b.n	801237a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012364:	e000      	b.n	8012368 <_read+0x16>
 8012366:	bf00      	nop
 8012368:	0001      	movs	r1, r0
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	1c5a      	adds	r2, r3, #1
 801236e:	60ba      	str	r2, [r7, #8]
 8012370:	b2ca      	uxtb	r2, r1
 8012372:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	3301      	adds	r3, #1
 8012378:	617b      	str	r3, [r7, #20]
 801237a:	697a      	ldr	r2, [r7, #20]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	429a      	cmp	r2, r3
 8012380:	dbf0      	blt.n	8012364 <_read+0x12>
  }

  return len;
 8012382:	687b      	ldr	r3, [r7, #4]
}
 8012384:	0018      	movs	r0, r3
 8012386:	46bd      	mov	sp, r7
 8012388:	b006      	add	sp, #24
 801238a:	bd80      	pop	{r7, pc}

0801238c <_close>:
  }
  return len;
}

int _close(int file)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012394:	2301      	movs	r3, #1
 8012396:	425b      	negs	r3, r3
}
 8012398:	0018      	movs	r0, r3
 801239a:	46bd      	mov	sp, r7
 801239c:	b002      	add	sp, #8
 801239e:	bd80      	pop	{r7, pc}

080123a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	2280      	movs	r2, #128	@ 0x80
 80123ae:	0192      	lsls	r2, r2, #6
 80123b0:	605a      	str	r2, [r3, #4]
  return 0;
 80123b2:	2300      	movs	r3, #0
}
 80123b4:	0018      	movs	r0, r3
 80123b6:	46bd      	mov	sp, r7
 80123b8:	b002      	add	sp, #8
 80123ba:	bd80      	pop	{r7, pc}

080123bc <_isatty>:

int _isatty(int file)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80123c4:	2301      	movs	r3, #1
}
 80123c6:	0018      	movs	r0, r3
 80123c8:	46bd      	mov	sp, r7
 80123ca:	b002      	add	sp, #8
 80123cc:	bd80      	pop	{r7, pc}

080123ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80123ce:	b580      	push	{r7, lr}
 80123d0:	b084      	sub	sp, #16
 80123d2:	af00      	add	r7, sp, #0
 80123d4:	60f8      	str	r0, [r7, #12]
 80123d6:	60b9      	str	r1, [r7, #8]
 80123d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80123da:	2300      	movs	r3, #0
}
 80123dc:	0018      	movs	r0, r3
 80123de:	46bd      	mov	sp, r7
 80123e0:	b004      	add	sp, #16
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b086      	sub	sp, #24
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80123ec:	4a14      	ldr	r2, [pc, #80]	@ (8012440 <_sbrk+0x5c>)
 80123ee:	4b15      	ldr	r3, [pc, #84]	@ (8012444 <_sbrk+0x60>)
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80123f8:	4b13      	ldr	r3, [pc, #76]	@ (8012448 <_sbrk+0x64>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d102      	bne.n	8012406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012400:	4b11      	ldr	r3, [pc, #68]	@ (8012448 <_sbrk+0x64>)
 8012402:	4a12      	ldr	r2, [pc, #72]	@ (801244c <_sbrk+0x68>)
 8012404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012406:	4b10      	ldr	r3, [pc, #64]	@ (8012448 <_sbrk+0x64>)
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	18d3      	adds	r3, r2, r3
 801240e:	693a      	ldr	r2, [r7, #16]
 8012410:	429a      	cmp	r2, r3
 8012412:	d207      	bcs.n	8012424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012414:	f012 ff0c 	bl	8025230 <__errno>
 8012418:	0003      	movs	r3, r0
 801241a:	220c      	movs	r2, #12
 801241c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801241e:	2301      	movs	r3, #1
 8012420:	425b      	negs	r3, r3
 8012422:	e009      	b.n	8012438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012424:	4b08      	ldr	r3, [pc, #32]	@ (8012448 <_sbrk+0x64>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801242a:	4b07      	ldr	r3, [pc, #28]	@ (8012448 <_sbrk+0x64>)
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	18d2      	adds	r2, r2, r3
 8012432:	4b05      	ldr	r3, [pc, #20]	@ (8012448 <_sbrk+0x64>)
 8012434:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012436:	68fb      	ldr	r3, [r7, #12]
}
 8012438:	0018      	movs	r0, r3
 801243a:	46bd      	mov	sp, r7
 801243c:	b006      	add	sp, #24
 801243e:	bd80      	pop	{r7, pc}
 8012440:	20005000 	.word	0x20005000
 8012444:	00000400 	.word	0x00000400
 8012448:	20001e90 	.word	0x20001e90
 801244c:	20003640 	.word	0x20003640

08012450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012454:	46c0      	nop			@ (mov r8, r8)
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
	...

0801245c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b086      	sub	sp, #24
 8012460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012462:	2310      	movs	r3, #16
 8012464:	18fb      	adds	r3, r7, r3
 8012466:	0018      	movs	r0, r3
 8012468:	2308      	movs	r3, #8
 801246a:	001a      	movs	r2, r3
 801246c:	2100      	movs	r1, #0
 801246e:	f012 fe3b 	bl	80250e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012472:	003b      	movs	r3, r7
 8012474:	0018      	movs	r0, r3
 8012476:	2310      	movs	r3, #16
 8012478:	001a      	movs	r2, r3
 801247a:	2100      	movs	r1, #0
 801247c:	f012 fe34 	bl	80250e8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8012480:	4b2e      	ldr	r3, [pc, #184]	@ (801253c <MX_TIM2_Init+0xe0>)
 8012482:	2280      	movs	r2, #128	@ 0x80
 8012484:	05d2      	lsls	r2, r2, #23
 8012486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8012488:	4b2c      	ldr	r3, [pc, #176]	@ (801253c <MX_TIM2_Init+0xe0>)
 801248a:	2200      	movs	r2, #0
 801248c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801248e:	4b2b      	ldr	r3, [pc, #172]	@ (801253c <MX_TIM2_Init+0xe0>)
 8012490:	2200      	movs	r2, #0
 8012492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8012494:	4b29      	ldr	r3, [pc, #164]	@ (801253c <MX_TIM2_Init+0xe0>)
 8012496:	4a2a      	ldr	r2, [pc, #168]	@ (8012540 <MX_TIM2_Init+0xe4>)
 8012498:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801249a:	4b28      	ldr	r3, [pc, #160]	@ (801253c <MX_TIM2_Init+0xe0>)
 801249c:	2200      	movs	r2, #0
 801249e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80124a0:	4b26      	ldr	r3, [pc, #152]	@ (801253c <MX_TIM2_Init+0xe0>)
 80124a2:	2200      	movs	r2, #0
 80124a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80124a6:	4b25      	ldr	r3, [pc, #148]	@ (801253c <MX_TIM2_Init+0xe0>)
 80124a8:	0018      	movs	r0, r3
 80124aa:	f009 f9cf 	bl	801b84c <HAL_TIM_PWM_Init>
 80124ae:	1e03      	subs	r3, r0, #0
 80124b0:	d001      	beq.n	80124b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80124b2:	f7f9 ffb5 	bl	800c420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80124b6:	2110      	movs	r1, #16
 80124b8:	187b      	adds	r3, r7, r1
 80124ba:	2200      	movs	r2, #0
 80124bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80124be:	187b      	adds	r3, r7, r1
 80124c0:	2200      	movs	r2, #0
 80124c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80124c4:	187a      	adds	r2, r7, r1
 80124c6:	4b1d      	ldr	r3, [pc, #116]	@ (801253c <MX_TIM2_Init+0xe0>)
 80124c8:	0011      	movs	r1, r2
 80124ca:	0018      	movs	r0, r3
 80124cc:	f009 fcdc 	bl	801be88 <HAL_TIMEx_MasterConfigSynchronization>
 80124d0:	1e03      	subs	r3, r0, #0
 80124d2:	d001      	beq.n	80124d8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80124d4:	f7f9 ffa4 	bl	800c420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80124d8:	003b      	movs	r3, r7
 80124da:	2260      	movs	r2, #96	@ 0x60
 80124dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80124de:	003b      	movs	r3, r7
 80124e0:	2200      	movs	r2, #0
 80124e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80124e4:	003b      	movs	r3, r7
 80124e6:	2200      	movs	r2, #0
 80124e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80124ea:	003b      	movs	r3, r7
 80124ec:	2200      	movs	r2, #0
 80124ee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80124f0:	0039      	movs	r1, r7
 80124f2:	4b12      	ldr	r3, [pc, #72]	@ (801253c <MX_TIM2_Init+0xe0>)
 80124f4:	2200      	movs	r2, #0
 80124f6:	0018      	movs	r0, r3
 80124f8:	f009 fa7a 	bl	801b9f0 <HAL_TIM_PWM_ConfigChannel>
 80124fc:	1e03      	subs	r3, r0, #0
 80124fe:	d001      	beq.n	8012504 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8012500:	f7f9 ff8e 	bl	800c420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012504:	0039      	movs	r1, r7
 8012506:	4b0d      	ldr	r3, [pc, #52]	@ (801253c <MX_TIM2_Init+0xe0>)
 8012508:	2208      	movs	r2, #8
 801250a:	0018      	movs	r0, r3
 801250c:	f009 fa70 	bl	801b9f0 <HAL_TIM_PWM_ConfigChannel>
 8012510:	1e03      	subs	r3, r0, #0
 8012512:	d001      	beq.n	8012518 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8012514:	f7f9 ff84 	bl	800c420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012518:	0039      	movs	r1, r7
 801251a:	4b08      	ldr	r3, [pc, #32]	@ (801253c <MX_TIM2_Init+0xe0>)
 801251c:	220c      	movs	r2, #12
 801251e:	0018      	movs	r0, r3
 8012520:	f009 fa66 	bl	801b9f0 <HAL_TIM_PWM_ConfigChannel>
 8012524:	1e03      	subs	r3, r0, #0
 8012526:	d001      	beq.n	801252c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8012528:	f7f9 ff7a 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 801252c:	4b03      	ldr	r3, [pc, #12]	@ (801253c <MX_TIM2_Init+0xe0>)
 801252e:	0018      	movs	r0, r3
 8012530:	f000 f8fe 	bl	8012730 <HAL_TIM_MspPostInit>

}
 8012534:	46c0      	nop			@ (mov r8, r8)
 8012536:	46bd      	mov	sp, r7
 8012538:	b006      	add	sp, #24
 801253a:	bd80      	pop	{r7, pc}
 801253c:	20001e94 	.word	0x20001e94
 8012540:	0000ffff 	.word	0x0000ffff

08012544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801254a:	2310      	movs	r3, #16
 801254c:	18fb      	adds	r3, r7, r3
 801254e:	0018      	movs	r0, r3
 8012550:	2308      	movs	r3, #8
 8012552:	001a      	movs	r2, r3
 8012554:	2100      	movs	r1, #0
 8012556:	f012 fdc7 	bl	80250e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801255a:	003b      	movs	r3, r7
 801255c:	0018      	movs	r0, r3
 801255e:	2310      	movs	r3, #16
 8012560:	001a      	movs	r2, r3
 8012562:	2100      	movs	r1, #0
 8012564:	f012 fdc0 	bl	80250e8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012568:	4b32      	ldr	r3, [pc, #200]	@ (8012634 <MX_TIM3_Init+0xf0>)
 801256a:	4a33      	ldr	r2, [pc, #204]	@ (8012638 <MX_TIM3_Init+0xf4>)
 801256c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801256e:	4b31      	ldr	r3, [pc, #196]	@ (8012634 <MX_TIM3_Init+0xf0>)
 8012570:	2200      	movs	r2, #0
 8012572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012574:	4b2f      	ldr	r3, [pc, #188]	@ (8012634 <MX_TIM3_Init+0xf0>)
 8012576:	2200      	movs	r2, #0
 8012578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801257a:	4b2e      	ldr	r3, [pc, #184]	@ (8012634 <MX_TIM3_Init+0xf0>)
 801257c:	4a2f      	ldr	r2, [pc, #188]	@ (801263c <MX_TIM3_Init+0xf8>)
 801257e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012580:	4b2c      	ldr	r3, [pc, #176]	@ (8012634 <MX_TIM3_Init+0xf0>)
 8012582:	2200      	movs	r2, #0
 8012584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012586:	4b2b      	ldr	r3, [pc, #172]	@ (8012634 <MX_TIM3_Init+0xf0>)
 8012588:	2200      	movs	r2, #0
 801258a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801258c:	4b29      	ldr	r3, [pc, #164]	@ (8012634 <MX_TIM3_Init+0xf0>)
 801258e:	0018      	movs	r0, r3
 8012590:	f009 f95c 	bl	801b84c <HAL_TIM_PWM_Init>
 8012594:	1e03      	subs	r3, r0, #0
 8012596:	d001      	beq.n	801259c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8012598:	f7f9 ff42 	bl	800c420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801259c:	2110      	movs	r1, #16
 801259e:	187b      	adds	r3, r7, r1
 80125a0:	2200      	movs	r2, #0
 80125a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80125a4:	187b      	adds	r3, r7, r1
 80125a6:	2200      	movs	r2, #0
 80125a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80125aa:	187a      	adds	r2, r7, r1
 80125ac:	4b21      	ldr	r3, [pc, #132]	@ (8012634 <MX_TIM3_Init+0xf0>)
 80125ae:	0011      	movs	r1, r2
 80125b0:	0018      	movs	r0, r3
 80125b2:	f009 fc69 	bl	801be88 <HAL_TIMEx_MasterConfigSynchronization>
 80125b6:	1e03      	subs	r3, r0, #0
 80125b8:	d001      	beq.n	80125be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80125ba:	f7f9 ff31 	bl	800c420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80125be:	003b      	movs	r3, r7
 80125c0:	2260      	movs	r2, #96	@ 0x60
 80125c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80125c4:	003b      	movs	r3, r7
 80125c6:	2200      	movs	r2, #0
 80125c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80125ca:	003b      	movs	r3, r7
 80125cc:	2200      	movs	r2, #0
 80125ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80125d0:	003b      	movs	r3, r7
 80125d2:	2200      	movs	r2, #0
 80125d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80125d6:	0039      	movs	r1, r7
 80125d8:	4b16      	ldr	r3, [pc, #88]	@ (8012634 <MX_TIM3_Init+0xf0>)
 80125da:	2200      	movs	r2, #0
 80125dc:	0018      	movs	r0, r3
 80125de:	f009 fa07 	bl	801b9f0 <HAL_TIM_PWM_ConfigChannel>
 80125e2:	1e03      	subs	r3, r0, #0
 80125e4:	d001      	beq.n	80125ea <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80125e6:	f7f9 ff1b 	bl	800c420 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80125ea:	4b12      	ldr	r3, [pc, #72]	@ (8012634 <MX_TIM3_Init+0xf0>)
 80125ec:	2104      	movs	r1, #4
 80125ee:	0018      	movs	r0, r3
 80125f0:	f009 fca8 	bl	801bf44 <HAL_TIMEx_RemapConfig>
 80125f4:	1e03      	subs	r3, r0, #0
 80125f6:	d001      	beq.n	80125fc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80125f8:	f7f9 ff12 	bl	800c420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80125fc:	0039      	movs	r1, r7
 80125fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012634 <MX_TIM3_Init+0xf0>)
 8012600:	2204      	movs	r2, #4
 8012602:	0018      	movs	r0, r3
 8012604:	f009 f9f4 	bl	801b9f0 <HAL_TIM_PWM_ConfigChannel>
 8012608:	1e03      	subs	r3, r0, #0
 801260a:	d001      	beq.n	8012610 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 801260c:	f7f9 ff08 	bl	800c420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012610:	0039      	movs	r1, r7
 8012612:	4b08      	ldr	r3, [pc, #32]	@ (8012634 <MX_TIM3_Init+0xf0>)
 8012614:	2208      	movs	r2, #8
 8012616:	0018      	movs	r0, r3
 8012618:	f009 f9ea 	bl	801b9f0 <HAL_TIM_PWM_ConfigChannel>
 801261c:	1e03      	subs	r3, r0, #0
 801261e:	d001      	beq.n	8012624 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012620:	f7f9 fefe 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8012624:	4b03      	ldr	r3, [pc, #12]	@ (8012634 <MX_TIM3_Init+0xf0>)
 8012626:	0018      	movs	r0, r3
 8012628:	f000 f882 	bl	8012730 <HAL_TIM_MspPostInit>

}
 801262c:	46c0      	nop			@ (mov r8, r8)
 801262e:	46bd      	mov	sp, r7
 8012630:	b006      	add	sp, #24
 8012632:	bd80      	pop	{r7, pc}
 8012634:	20001ed4 	.word	0x20001ed4
 8012638:	40000400 	.word	0x40000400
 801263c:	0000ffff 	.word	0x0000ffff

08012640 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012646:	003b      	movs	r3, r7
 8012648:	0018      	movs	r0, r3
 801264a:	2308      	movs	r3, #8
 801264c:	001a      	movs	r2, r3
 801264e:	2100      	movs	r1, #0
 8012650:	f012 fd4a 	bl	80250e8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012654:	4b15      	ldr	r3, [pc, #84]	@ (80126ac <MX_TIM6_Init+0x6c>)
 8012656:	4a16      	ldr	r2, [pc, #88]	@ (80126b0 <MX_TIM6_Init+0x70>)
 8012658:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 801265a:	4b14      	ldr	r3, [pc, #80]	@ (80126ac <MX_TIM6_Init+0x6c>)
 801265c:	220a      	movs	r2, #10
 801265e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012660:	4b12      	ldr	r3, [pc, #72]	@ (80126ac <MX_TIM6_Init+0x6c>)
 8012662:	2200      	movs	r2, #0
 8012664:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012666:	4b11      	ldr	r3, [pc, #68]	@ (80126ac <MX_TIM6_Init+0x6c>)
 8012668:	4a12      	ldr	r2, [pc, #72]	@ (80126b4 <MX_TIM6_Init+0x74>)
 801266a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801266c:	4b0f      	ldr	r3, [pc, #60]	@ (80126ac <MX_TIM6_Init+0x6c>)
 801266e:	2200      	movs	r2, #0
 8012670:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012672:	4b0e      	ldr	r3, [pc, #56]	@ (80126ac <MX_TIM6_Init+0x6c>)
 8012674:	0018      	movs	r0, r3
 8012676:	f009 f841 	bl	801b6fc <HAL_TIM_Base_Init>
 801267a:	1e03      	subs	r3, r0, #0
 801267c:	d001      	beq.n	8012682 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 801267e:	f7f9 fecf 	bl	800c420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012682:	003b      	movs	r3, r7
 8012684:	2200      	movs	r2, #0
 8012686:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012688:	003b      	movs	r3, r7
 801268a:	2200      	movs	r2, #0
 801268c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801268e:	003a      	movs	r2, r7
 8012690:	4b06      	ldr	r3, [pc, #24]	@ (80126ac <MX_TIM6_Init+0x6c>)
 8012692:	0011      	movs	r1, r2
 8012694:	0018      	movs	r0, r3
 8012696:	f009 fbf7 	bl	801be88 <HAL_TIMEx_MasterConfigSynchronization>
 801269a:	1e03      	subs	r3, r0, #0
 801269c:	d001      	beq.n	80126a2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 801269e:	f7f9 febf 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80126a2:	46c0      	nop			@ (mov r8, r8)
 80126a4:	46bd      	mov	sp, r7
 80126a6:	b002      	add	sp, #8
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	46c0      	nop			@ (mov r8, r8)
 80126ac:	20001f14 	.word	0x20001f14
 80126b0:	40001000 	.word	0x40001000
 80126b4:	0000ffff 	.word	0x0000ffff

080126b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	2380      	movs	r3, #128	@ 0x80
 80126c6:	05db      	lsls	r3, r3, #23
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d106      	bne.n	80126da <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80126cc:	4b0a      	ldr	r3, [pc, #40]	@ (80126f8 <HAL_TIM_PWM_MspInit+0x40>)
 80126ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80126d0:	4b09      	ldr	r3, [pc, #36]	@ (80126f8 <HAL_TIM_PWM_MspInit+0x40>)
 80126d2:	2101      	movs	r1, #1
 80126d4:	430a      	orrs	r2, r1
 80126d6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80126d8:	e00a      	b.n	80126f0 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	4a07      	ldr	r2, [pc, #28]	@ (80126fc <HAL_TIM_PWM_MspInit+0x44>)
 80126e0:	4293      	cmp	r3, r2
 80126e2:	d105      	bne.n	80126f0 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80126e4:	4b04      	ldr	r3, [pc, #16]	@ (80126f8 <HAL_TIM_PWM_MspInit+0x40>)
 80126e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80126e8:	4b03      	ldr	r3, [pc, #12]	@ (80126f8 <HAL_TIM_PWM_MspInit+0x40>)
 80126ea:	2102      	movs	r1, #2
 80126ec:	430a      	orrs	r2, r1
 80126ee:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80126f0:	46c0      	nop			@ (mov r8, r8)
 80126f2:	46bd      	mov	sp, r7
 80126f4:	b002      	add	sp, #8
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	40021000 	.word	0x40021000
 80126fc:	40000400 	.word	0x40000400

08012700 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a06      	ldr	r2, [pc, #24]	@ (8012728 <HAL_TIM_Base_MspInit+0x28>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d105      	bne.n	801271e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012712:	4b06      	ldr	r3, [pc, #24]	@ (801272c <HAL_TIM_Base_MspInit+0x2c>)
 8012714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012716:	4b05      	ldr	r3, [pc, #20]	@ (801272c <HAL_TIM_Base_MspInit+0x2c>)
 8012718:	2110      	movs	r1, #16
 801271a:	430a      	orrs	r2, r1
 801271c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 801271e:	46c0      	nop			@ (mov r8, r8)
 8012720:	46bd      	mov	sp, r7
 8012722:	b002      	add	sp, #8
 8012724:	bd80      	pop	{r7, pc}
 8012726:	46c0      	nop			@ (mov r8, r8)
 8012728:	40001000 	.word	0x40001000
 801272c:	40021000 	.word	0x40021000

08012730 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012730:	b590      	push	{r4, r7, lr}
 8012732:	b08b      	sub	sp, #44	@ 0x2c
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012738:	2414      	movs	r4, #20
 801273a:	193b      	adds	r3, r7, r4
 801273c:	0018      	movs	r0, r3
 801273e:	2314      	movs	r3, #20
 8012740:	001a      	movs	r2, r3
 8012742:	2100      	movs	r1, #0
 8012744:	f012 fcd0 	bl	80250e8 <memset>
  if(timHandle->Instance==TIM2)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	2380      	movs	r3, #128	@ 0x80
 801274e:	05db      	lsls	r3, r3, #23
 8012750:	429a      	cmp	r2, r3
 8012752:	d123      	bne.n	801279c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012754:	4b27      	ldr	r3, [pc, #156]	@ (80127f4 <HAL_TIM_MspPostInit+0xc4>)
 8012756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012758:	4b26      	ldr	r3, [pc, #152]	@ (80127f4 <HAL_TIM_MspPostInit+0xc4>)
 801275a:	2101      	movs	r1, #1
 801275c:	430a      	orrs	r2, r1
 801275e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012760:	4b24      	ldr	r3, [pc, #144]	@ (80127f4 <HAL_TIM_MspPostInit+0xc4>)
 8012762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012764:	2201      	movs	r2, #1
 8012766:	4013      	ands	r3, r2
 8012768:	613b      	str	r3, [r7, #16]
 801276a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 801276c:	0021      	movs	r1, r4
 801276e:	187b      	adds	r3, r7, r1
 8012770:	220d      	movs	r2, #13
 8012772:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012774:	187b      	adds	r3, r7, r1
 8012776:	2202      	movs	r2, #2
 8012778:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801277a:	187b      	adds	r3, r7, r1
 801277c:	2200      	movs	r2, #0
 801277e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012780:	187b      	adds	r3, r7, r1
 8012782:	2200      	movs	r2, #0
 8012784:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8012786:	187b      	adds	r3, r7, r1
 8012788:	2202      	movs	r2, #2
 801278a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801278c:	187a      	adds	r2, r7, r1
 801278e:	23a0      	movs	r3, #160	@ 0xa0
 8012790:	05db      	lsls	r3, r3, #23
 8012792:	0011      	movs	r1, r2
 8012794:	0018      	movs	r0, r3
 8012796:	f002 f88b 	bl	80148b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801279a:	e027      	b.n	80127ec <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4a15      	ldr	r2, [pc, #84]	@ (80127f8 <HAL_TIM_MspPostInit+0xc8>)
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d122      	bne.n	80127ec <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80127a6:	4b13      	ldr	r3, [pc, #76]	@ (80127f4 <HAL_TIM_MspPostInit+0xc4>)
 80127a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127aa:	4b12      	ldr	r3, [pc, #72]	@ (80127f4 <HAL_TIM_MspPostInit+0xc4>)
 80127ac:	2104      	movs	r1, #4
 80127ae:	430a      	orrs	r2, r1
 80127b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80127b2:	4b10      	ldr	r3, [pc, #64]	@ (80127f4 <HAL_TIM_MspPostInit+0xc4>)
 80127b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b6:	2204      	movs	r2, #4
 80127b8:	4013      	ands	r3, r2
 80127ba:	60fb      	str	r3, [r7, #12]
 80127bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80127be:	2114      	movs	r1, #20
 80127c0:	187b      	adds	r3, r7, r1
 80127c2:	22e0      	movs	r2, #224	@ 0xe0
 80127c4:	0052      	lsls	r2, r2, #1
 80127c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127c8:	187b      	adds	r3, r7, r1
 80127ca:	2202      	movs	r2, #2
 80127cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127ce:	187b      	adds	r3, r7, r1
 80127d0:	2200      	movs	r2, #0
 80127d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80127d4:	187b      	adds	r3, r7, r1
 80127d6:	2200      	movs	r2, #0
 80127d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80127da:	187b      	adds	r3, r7, r1
 80127dc:	2202      	movs	r2, #2
 80127de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80127e0:	187b      	adds	r3, r7, r1
 80127e2:	4a06      	ldr	r2, [pc, #24]	@ (80127fc <HAL_TIM_MspPostInit+0xcc>)
 80127e4:	0019      	movs	r1, r3
 80127e6:	0010      	movs	r0, r2
 80127e8:	f002 f862 	bl	80148b0 <HAL_GPIO_Init>
}
 80127ec:	46c0      	nop			@ (mov r8, r8)
 80127ee:	46bd      	mov	sp, r7
 80127f0:	b00b      	add	sp, #44	@ 0x2c
 80127f2:	bd90      	pop	{r4, r7, pc}
 80127f4:	40021000 	.word	0x40021000
 80127f8:	40000400 	.word	0x40000400
 80127fc:	50000800 	.word	0x50000800

08012800 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012804:	4b17      	ldr	r3, [pc, #92]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 8012806:	4a18      	ldr	r2, [pc, #96]	@ (8012868 <MX_LPUART1_UART_Init+0x68>)
 8012808:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 801280a:	4b16      	ldr	r3, [pc, #88]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 801280c:	22e1      	movs	r2, #225	@ 0xe1
 801280e:	0252      	lsls	r2, r2, #9
 8012810:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012812:	4b14      	ldr	r3, [pc, #80]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 8012814:	2200      	movs	r2, #0
 8012816:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012818:	4b12      	ldr	r3, [pc, #72]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 801281a:	2200      	movs	r2, #0
 801281c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801281e:	4b11      	ldr	r3, [pc, #68]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 8012820:	2200      	movs	r2, #0
 8012822:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8012824:	4b0f      	ldr	r3, [pc, #60]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 8012826:	220c      	movs	r2, #12
 8012828:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801282a:	4b0e      	ldr	r3, [pc, #56]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 801282c:	2200      	movs	r2, #0
 801282e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012830:	4b0c      	ldr	r3, [pc, #48]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 8012832:	2200      	movs	r2, #0
 8012834:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8012836:	4b0b      	ldr	r3, [pc, #44]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 8012838:	2218      	movs	r2, #24
 801283a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 801283c:	4b09      	ldr	r3, [pc, #36]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 801283e:	2280      	movs	r2, #128	@ 0x80
 8012840:	0212      	lsls	r2, r2, #8
 8012842:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8012844:	4b07      	ldr	r3, [pc, #28]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 8012846:	2280      	movs	r2, #128	@ 0x80
 8012848:	0152      	lsls	r2, r2, #5
 801284a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801284c:	4b05      	ldr	r3, [pc, #20]	@ (8012864 <MX_LPUART1_UART_Init+0x64>)
 801284e:	0018      	movs	r0, r3
 8012850:	f009 fb96 	bl	801bf80 <HAL_UART_Init>
 8012854:	1e03      	subs	r3, r0, #0
 8012856:	d001      	beq.n	801285c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8012858:	f7f9 fde2 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 801285c:	46c0      	nop			@ (mov r8, r8)
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	46c0      	nop			@ (mov r8, r8)
 8012864:	20001f54 	.word	0x20001f54
 8012868:	40004800 	.word	0x40004800

0801286c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012870:	4b14      	ldr	r3, [pc, #80]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 8012872:	4a15      	ldr	r2, [pc, #84]	@ (80128c8 <MX_USART1_UART_Init+0x5c>)
 8012874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012876:	4b13      	ldr	r3, [pc, #76]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 8012878:	22e1      	movs	r2, #225	@ 0xe1
 801287a:	0252      	lsls	r2, r2, #9
 801287c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801287e:	4b11      	ldr	r3, [pc, #68]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 8012880:	2200      	movs	r2, #0
 8012882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012884:	4b0f      	ldr	r3, [pc, #60]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 8012886:	2200      	movs	r2, #0
 8012888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801288a:	4b0e      	ldr	r3, [pc, #56]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 801288c:	2200      	movs	r2, #0
 801288e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012890:	4b0c      	ldr	r3, [pc, #48]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 8012892:	220c      	movs	r2, #12
 8012894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012896:	4b0b      	ldr	r3, [pc, #44]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 8012898:	2200      	movs	r2, #0
 801289a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801289c:	4b09      	ldr	r3, [pc, #36]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 801289e:	2200      	movs	r2, #0
 80128a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80128a2:	4b08      	ldr	r3, [pc, #32]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 80128a4:	2200      	movs	r2, #0
 80128a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80128a8:	4b06      	ldr	r3, [pc, #24]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80128ae:	4b05      	ldr	r3, [pc, #20]	@ (80128c4 <MX_USART1_UART_Init+0x58>)
 80128b0:	0018      	movs	r0, r3
 80128b2:	f009 fb65 	bl	801bf80 <HAL_UART_Init>
 80128b6:	1e03      	subs	r3, r0, #0
 80128b8:	d001      	beq.n	80128be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80128ba:	f7f9 fdb1 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80128be:	46c0      	nop			@ (mov r8, r8)
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	2000200c 	.word	0x2000200c
 80128c8:	40013800 	.word	0x40013800

080128cc <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80128d0:	4b14      	ldr	r3, [pc, #80]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128d2:	4a15      	ldr	r2, [pc, #84]	@ (8012928 <MX_USART4_UART_Init+0x5c>)
 80128d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80128d6:	4b13      	ldr	r3, [pc, #76]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128d8:	22e1      	movs	r2, #225	@ 0xe1
 80128da:	0252      	lsls	r2, r2, #9
 80128dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80128de:	4b11      	ldr	r3, [pc, #68]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80128e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128e6:	2200      	movs	r2, #0
 80128e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80128ea:	4b0e      	ldr	r3, [pc, #56]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128ec:	2200      	movs	r2, #0
 80128ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80128f0:	4b0c      	ldr	r3, [pc, #48]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128f2:	220c      	movs	r2, #12
 80128f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80128f6:	4b0b      	ldr	r3, [pc, #44]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128f8:	2200      	movs	r2, #0
 80128fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80128fc:	4b09      	ldr	r3, [pc, #36]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 80128fe:	2200      	movs	r2, #0
 8012900:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012902:	4b08      	ldr	r3, [pc, #32]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 8012904:	2200      	movs	r2, #0
 8012906:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012908:	4b06      	ldr	r3, [pc, #24]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 801290a:	2200      	movs	r2, #0
 801290c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801290e:	4b05      	ldr	r3, [pc, #20]	@ (8012924 <MX_USART4_UART_Init+0x58>)
 8012910:	0018      	movs	r0, r3
 8012912:	f009 fb35 	bl	801bf80 <HAL_UART_Init>
 8012916:	1e03      	subs	r3, r0, #0
 8012918:	d001      	beq.n	801291e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 801291a:	f7f9 fd81 	bl	800c420 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 801291e:	46c0      	nop			@ (mov r8, r8)
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}
 8012924:	200020c4 	.word	0x200020c4
 8012928:	40004c00 	.word	0x40004c00

0801292c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801292c:	b590      	push	{r4, r7, lr}
 801292e:	b08d      	sub	sp, #52	@ 0x34
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012934:	241c      	movs	r4, #28
 8012936:	193b      	adds	r3, r7, r4
 8012938:	0018      	movs	r0, r3
 801293a:	2314      	movs	r3, #20
 801293c:	001a      	movs	r2, r3
 801293e:	2100      	movs	r1, #0
 8012940:	f012 fbd2 	bl	80250e8 <memset>
  if(uartHandle->Instance==LPUART1)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4a8b      	ldr	r2, [pc, #556]	@ (8012b78 <HAL_UART_MspInit+0x24c>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d129      	bne.n	80129a2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801294e:	4b8b      	ldr	r3, [pc, #556]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012952:	4b8a      	ldr	r3, [pc, #552]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012954:	2180      	movs	r1, #128	@ 0x80
 8012956:	02c9      	lsls	r1, r1, #11
 8012958:	430a      	orrs	r2, r1
 801295a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801295c:	4b87      	ldr	r3, [pc, #540]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 801295e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012960:	4b86      	ldr	r3, [pc, #536]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012962:	2104      	movs	r1, #4
 8012964:	430a      	orrs	r2, r1
 8012966:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012968:	4b84      	ldr	r3, [pc, #528]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 801296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801296c:	2204      	movs	r2, #4
 801296e:	4013      	ands	r3, r2
 8012970:	61bb      	str	r3, [r7, #24]
 8012972:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012974:	0021      	movs	r1, r4
 8012976:	187b      	adds	r3, r7, r1
 8012978:	2203      	movs	r2, #3
 801297a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801297c:	187b      	adds	r3, r7, r1
 801297e:	2202      	movs	r2, #2
 8012980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012982:	187b      	adds	r3, r7, r1
 8012984:	2200      	movs	r2, #0
 8012986:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012988:	187b      	adds	r3, r7, r1
 801298a:	2203      	movs	r2, #3
 801298c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 801298e:	187b      	adds	r3, r7, r1
 8012990:	2206      	movs	r2, #6
 8012992:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012994:	187b      	adds	r3, r7, r1
 8012996:	4a7a      	ldr	r2, [pc, #488]	@ (8012b80 <HAL_UART_MspInit+0x254>)
 8012998:	0019      	movs	r1, r3
 801299a:	0010      	movs	r0, r2
 801299c:	f001 ff88 	bl	80148b0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80129a0:	e0e5      	b.n	8012b6e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	4a77      	ldr	r2, [pc, #476]	@ (8012b84 <HAL_UART_MspInit+0x258>)
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d133      	bne.n	8012a14 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80129ac:	4b73      	ldr	r3, [pc, #460]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 80129ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80129b0:	4b72      	ldr	r3, [pc, #456]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 80129b2:	2180      	movs	r1, #128	@ 0x80
 80129b4:	01c9      	lsls	r1, r1, #7
 80129b6:	430a      	orrs	r2, r1
 80129b8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80129ba:	4b70      	ldr	r3, [pc, #448]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 80129bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129be:	4b6f      	ldr	r3, [pc, #444]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 80129c0:	2101      	movs	r1, #1
 80129c2:	430a      	orrs	r2, r1
 80129c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80129c6:	4b6d      	ldr	r3, [pc, #436]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 80129c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129ca:	2201      	movs	r2, #1
 80129cc:	4013      	ands	r3, r2
 80129ce:	617b      	str	r3, [r7, #20]
 80129d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80129d2:	211c      	movs	r1, #28
 80129d4:	187b      	adds	r3, r7, r1
 80129d6:	22c0      	movs	r2, #192	@ 0xc0
 80129d8:	00d2      	lsls	r2, r2, #3
 80129da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129dc:	187b      	adds	r3, r7, r1
 80129de:	2202      	movs	r2, #2
 80129e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129e2:	187b      	adds	r3, r7, r1
 80129e4:	2200      	movs	r2, #0
 80129e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129e8:	187b      	adds	r3, r7, r1
 80129ea:	2203      	movs	r2, #3
 80129ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80129ee:	187b      	adds	r3, r7, r1
 80129f0:	2204      	movs	r2, #4
 80129f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129f4:	187a      	adds	r2, r7, r1
 80129f6:	23a0      	movs	r3, #160	@ 0xa0
 80129f8:	05db      	lsls	r3, r3, #23
 80129fa:	0011      	movs	r1, r2
 80129fc:	0018      	movs	r0, r3
 80129fe:	f001 ff57 	bl	80148b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8012a02:	2200      	movs	r2, #0
 8012a04:	2100      	movs	r1, #0
 8012a06:	201b      	movs	r0, #27
 8012a08:	f001 fb00 	bl	801400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012a0c:	201b      	movs	r0, #27
 8012a0e:	f001 fb12 	bl	8014036 <HAL_NVIC_EnableIRQ>
}
 8012a12:	e0ac      	b.n	8012b6e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4a5b      	ldr	r2, [pc, #364]	@ (8012b88 <HAL_UART_MspInit+0x25c>)
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d000      	beq.n	8012a20 <HAL_UART_MspInit+0xf4>
 8012a1e:	e0a6      	b.n	8012b6e <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8012a20:	4b56      	ldr	r3, [pc, #344]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a24:	4b55      	ldr	r3, [pc, #340]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a26:	2180      	movs	r1, #128	@ 0x80
 8012a28:	0309      	lsls	r1, r1, #12
 8012a2a:	430a      	orrs	r2, r1
 8012a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a2e:	4b53      	ldr	r3, [pc, #332]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a32:	4b52      	ldr	r3, [pc, #328]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a34:	2101      	movs	r1, #1
 8012a36:	430a      	orrs	r2, r1
 8012a38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012a3a:	4b50      	ldr	r3, [pc, #320]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a3e:	2201      	movs	r2, #1
 8012a40:	4013      	ands	r3, r2
 8012a42:	613b      	str	r3, [r7, #16]
 8012a44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012a46:	4b4d      	ldr	r3, [pc, #308]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a4c:	2104      	movs	r1, #4
 8012a4e:	430a      	orrs	r2, r1
 8012a50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012a52:	4b4a      	ldr	r3, [pc, #296]	@ (8012b7c <HAL_UART_MspInit+0x250>)
 8012a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a56:	2204      	movs	r2, #4
 8012a58:	4013      	ands	r3, r2
 8012a5a:	60fb      	str	r3, [r7, #12]
 8012a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8012a5e:	241c      	movs	r4, #28
 8012a60:	193b      	adds	r3, r7, r4
 8012a62:	2202      	movs	r2, #2
 8012a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a66:	193b      	adds	r3, r7, r4
 8012a68:	2202      	movs	r2, #2
 8012a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a6c:	193b      	adds	r3, r7, r4
 8012a6e:	2200      	movs	r2, #0
 8012a70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a72:	193b      	adds	r3, r7, r4
 8012a74:	2203      	movs	r2, #3
 8012a76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012a78:	193b      	adds	r3, r7, r4
 8012a7a:	2206      	movs	r2, #6
 8012a7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a7e:	193a      	adds	r2, r7, r4
 8012a80:	23a0      	movs	r3, #160	@ 0xa0
 8012a82:	05db      	lsls	r3, r3, #23
 8012a84:	0011      	movs	r1, r2
 8012a86:	0018      	movs	r0, r3
 8012a88:	f001 ff12 	bl	80148b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012a8c:	0021      	movs	r1, r4
 8012a8e:	187b      	adds	r3, r7, r1
 8012a90:	2280      	movs	r2, #128	@ 0x80
 8012a92:	00d2      	lsls	r2, r2, #3
 8012a94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a96:	187b      	adds	r3, r7, r1
 8012a98:	2202      	movs	r2, #2
 8012a9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a9c:	187b      	adds	r3, r7, r1
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012aa2:	187b      	adds	r3, r7, r1
 8012aa4:	2203      	movs	r2, #3
 8012aa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012aa8:	187b      	adds	r3, r7, r1
 8012aaa:	2206      	movs	r2, #6
 8012aac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012aae:	187b      	adds	r3, r7, r1
 8012ab0:	4a33      	ldr	r2, [pc, #204]	@ (8012b80 <HAL_UART_MspInit+0x254>)
 8012ab2:	0019      	movs	r1, r3
 8012ab4:	0010      	movs	r0, r2
 8012ab6:	f001 fefb 	bl	80148b0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8012aba:	4b34      	ldr	r3, [pc, #208]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012abc:	4a34      	ldr	r2, [pc, #208]	@ (8012b90 <HAL_UART_MspInit+0x264>)
 8012abe:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8012ac0:	4b32      	ldr	r3, [pc, #200]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012ac2:	220c      	movs	r2, #12
 8012ac4:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012ac6:	4b31      	ldr	r3, [pc, #196]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012ac8:	2200      	movs	r2, #0
 8012aca:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012acc:	4b2f      	ldr	r3, [pc, #188]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012ad4:	2280      	movs	r2, #128	@ 0x80
 8012ad6:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012ade:	4b2b      	ldr	r3, [pc, #172]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8012ae4:	4b29      	ldr	r3, [pc, #164]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012ae6:	2220      	movs	r2, #32
 8012ae8:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012aea:	4b28      	ldr	r3, [pc, #160]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8012af0:	4b26      	ldr	r3, [pc, #152]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012af2:	0018      	movs	r0, r3
 8012af4:	f001 fac0 	bl	8014078 <HAL_DMA_Init>
 8012af8:	1e03      	subs	r3, r0, #0
 8012afa:	d001      	beq.n	8012b00 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8012afc:	f7f9 fc90 	bl	800c420 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4a22      	ldr	r2, [pc, #136]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012b04:	675a      	str	r2, [r3, #116]	@ 0x74
 8012b06:	4b21      	ldr	r3, [pc, #132]	@ (8012b8c <HAL_UART_MspInit+0x260>)
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8012b0c:	4b21      	ldr	r3, [pc, #132]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b0e:	4a22      	ldr	r2, [pc, #136]	@ (8012b98 <HAL_UART_MspInit+0x26c>)
 8012b10:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8012b12:	4b20      	ldr	r3, [pc, #128]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b14:	220c      	movs	r2, #12
 8012b16:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012b18:	4b1e      	ldr	r3, [pc, #120]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b1a:	2210      	movs	r2, #16
 8012b1c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b20:	2200      	movs	r2, #0
 8012b22:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8012b24:	4b1b      	ldr	r3, [pc, #108]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b26:	2280      	movs	r2, #128	@ 0x80
 8012b28:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012b30:	4b18      	ldr	r3, [pc, #96]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b32:	2200      	movs	r2, #0
 8012b34:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8012b36:	4b17      	ldr	r3, [pc, #92]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b38:	2200      	movs	r2, #0
 8012b3a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8012b3c:	4b15      	ldr	r3, [pc, #84]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b3e:	2200      	movs	r2, #0
 8012b40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8012b42:	4b14      	ldr	r3, [pc, #80]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b44:	0018      	movs	r0, r3
 8012b46:	f001 fa97 	bl	8014078 <HAL_DMA_Init>
 8012b4a:	1e03      	subs	r3, r0, #0
 8012b4c:	d001      	beq.n	8012b52 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8012b4e:	f7f9 fc67 	bl	800c420 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	4a0f      	ldr	r2, [pc, #60]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b56:	671a      	str	r2, [r3, #112]	@ 0x70
 8012b58:	4b0e      	ldr	r3, [pc, #56]	@ (8012b94 <HAL_UART_MspInit+0x268>)
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8012b5e:	2200      	movs	r2, #0
 8012b60:	2100      	movs	r1, #0
 8012b62:	200e      	movs	r0, #14
 8012b64:	f001 fa52 	bl	801400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8012b68:	200e      	movs	r0, #14
 8012b6a:	f001 fa64 	bl	8014036 <HAL_NVIC_EnableIRQ>
}
 8012b6e:	46c0      	nop			@ (mov r8, r8)
 8012b70:	46bd      	mov	sp, r7
 8012b72:	b00d      	add	sp, #52	@ 0x34
 8012b74:	bd90      	pop	{r4, r7, pc}
 8012b76:	46c0      	nop			@ (mov r8, r8)
 8012b78:	40004800 	.word	0x40004800
 8012b7c:	40021000 	.word	0x40021000
 8012b80:	50000800 	.word	0x50000800
 8012b84:	40013800 	.word	0x40013800
 8012b88:	40004c00 	.word	0x40004c00
 8012b8c:	2000217c 	.word	0x2000217c
 8012b90:	4002006c 	.word	0x4002006c
 8012b94:	200021c4 	.word	0x200021c4
 8012b98:	40020080 	.word	0x40020080

08012b9c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b086      	sub	sp, #24
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8012ba4:	f000 fd8e 	bl	80136c4 <HAL_GetTick>
 8012ba8:	0003      	movs	r3, r0
 8012baa:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8012bac:	4b1c      	ldr	r3, [pc, #112]	@ (8012c20 <TimestampIsReached+0x84>)
 8012bae:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8012bb0:	697a      	ldr	r2, [r7, #20]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d307      	bcc.n	8012bc8 <TimestampIsReached+0x2c>
 8012bb8:	697a      	ldr	r2, [r7, #20]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	1ad3      	subs	r3, r2, r3
 8012bbe:	693a      	ldr	r2, [r7, #16]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d901      	bls.n	8012bc8 <TimestampIsReached+0x2c>
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	e000      	b.n	8012bca <TimestampIsReached+0x2e>
 8012bc8:	2200      	movs	r2, #0
 8012bca:	230f      	movs	r3, #15
 8012bcc:	18fb      	adds	r3, r7, r3
 8012bce:	701a      	strb	r2, [r3, #0]
 8012bd0:	781a      	ldrb	r2, [r3, #0]
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	400a      	ands	r2, r1
 8012bd6:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8012bd8:	697a      	ldr	r2, [r7, #20]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d207      	bcs.n	8012bf0 <TimestampIsReached+0x54>
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	1ad3      	subs	r3, r2, r3
 8012be6:	693a      	ldr	r2, [r7, #16]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d201      	bcs.n	8012bf0 <TimestampIsReached+0x54>
 8012bec:	2201      	movs	r2, #1
 8012bee:	e000      	b.n	8012bf2 <TimestampIsReached+0x56>
 8012bf0:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8012bf2:	200e      	movs	r0, #14
 8012bf4:	183b      	adds	r3, r7, r0
 8012bf6:	701a      	strb	r2, [r3, #0]
 8012bf8:	781a      	ldrb	r2, [r3, #0]
 8012bfa:	2101      	movs	r1, #1
 8012bfc:	400a      	ands	r2, r1
 8012bfe:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8012c00:	230f      	movs	r3, #15
 8012c02:	18fb      	adds	r3, r7, r3
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d103      	bne.n	8012c12 <TimestampIsReached+0x76>
 8012c0a:	183b      	adds	r3, r7, r0
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d001      	beq.n	8012c16 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8012c12:	2301      	movs	r3, #1
 8012c14:	e000      	b.n	8012c18 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8012c16:	2300      	movs	r3, #0
}
 8012c18:	0018      	movs	r0, r3
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	b006      	add	sp, #24
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	7fffffff 	.word	0x7fffffff

08012c24 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8012c2c:	f000 fd4a 	bl	80136c4 <HAL_GetTick>
 8012c30:	0002      	movs	r2, r0
 8012c32:	4904      	ldr	r1, [pc, #16]	@ (8012c44 <AddTimestamp+0x20>)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	0018      	movs	r0, r3
 8012c38:	f012 f8f0 	bl	8024e1c <siprintf>
}
 8012c3c:	46c0      	nop			@ (mov r8, r8)
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	b002      	add	sp, #8
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	0802cdd8 	.word	0x0802cdd8

08012c48 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8012c48:	b40c      	push	{r2, r3}
 8012c4a:	b5b0      	push	{r4, r5, r7, lr}
 8012c4c:	b0a4      	sub	sp, #144	@ 0x90
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	0002      	movs	r2, r0
 8012c52:	6039      	str	r1, [r7, #0]
 8012c54:	1dfb      	adds	r3, r7, #7
 8012c56:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8012c58:	4b23      	ldr	r3, [pc, #140]	@ (8012ce8 <CreateLine+0xa0>)
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	1dfa      	adds	r2, r7, #7
 8012c5e:	7812      	ldrb	r2, [r2, #0]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d839      	bhi.n	8012cd8 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8012c64:	683a      	ldr	r2, [r7, #0]
 8012c66:	4921      	ldr	r1, [pc, #132]	@ (8012cec <CreateLine+0xa4>)
 8012c68:	240c      	movs	r4, #12
 8012c6a:	193b      	adds	r3, r7, r4
 8012c6c:	0018      	movs	r0, r3
 8012c6e:	f012 f8d5 	bl	8024e1c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8012c72:	4b1d      	ldr	r3, [pc, #116]	@ (8012ce8 <CreateLine+0xa0>)
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d909      	bls.n	8012c8e <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8012c7a:	193b      	adds	r3, r7, r4
 8012c7c:	0018      	movs	r0, r3
 8012c7e:	f7ed fa75 	bl	800016c <strlen>
 8012c82:	0002      	movs	r2, r0
 8012c84:	193b      	adds	r3, r7, r4
 8012c86:	189b      	adds	r3, r3, r2
 8012c88:	0018      	movs	r0, r3
 8012c8a:	f7ff ffcb 	bl	8012c24 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8012c8e:	240c      	movs	r4, #12
 8012c90:	193b      	adds	r3, r7, r4
 8012c92:	0018      	movs	r0, r3
 8012c94:	f7ed fa6a 	bl	800016c <strlen>
 8012c98:	0003      	movs	r3, r0
 8012c9a:	218c      	movs	r1, #140	@ 0x8c
 8012c9c:	187a      	adds	r2, r7, r1
 8012c9e:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8012ca0:	239c      	movs	r3, #156	@ 0x9c
 8012ca2:	2508      	movs	r5, #8
 8012ca4:	195b      	adds	r3, r3, r5
 8012ca6:	19db      	adds	r3, r3, r7
 8012ca8:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8012caa:	193a      	adds	r2, r7, r4
 8012cac:	187b      	adds	r3, r7, r1
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	18d0      	adds	r0, r2, r3
 8012cb2:	187b      	adds	r3, r7, r1
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2280      	movs	r2, #128	@ 0x80
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	0019      	movs	r1, r3
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	2298      	movs	r2, #152	@ 0x98
 8012cc0:	1952      	adds	r2, r2, r5
 8012cc2:	19d2      	adds	r2, r2, r7
 8012cc4:	6812      	ldr	r2, [r2, #0]
 8012cc6:	f012 f941 	bl	8024f4c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8012cca:	193a      	adds	r2, r7, r4
 8012ccc:	4b08      	ldr	r3, [pc, #32]	@ (8012cf0 <CreateLine+0xa8>)
 8012cce:	0011      	movs	r1, r2
 8012cd0:	0018      	movs	r0, r3
 8012cd2:	f012 f833 	bl	8024d3c <iprintf>
 8012cd6:	e000      	b.n	8012cda <CreateLine+0x92>
    return;
 8012cd8:	46c0      	nop			@ (mov r8, r8)
}
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	b024      	add	sp, #144	@ 0x90
 8012cde:	bcb0      	pop	{r4, r5, r7}
 8012ce0:	bc08      	pop	{r3}
 8012ce2:	b002      	add	sp, #8
 8012ce4:	4718      	bx	r3
 8012ce6:	46c0      	nop			@ (mov r8, r8)
 8012ce8:	200000e4 	.word	0x200000e4
 8012cec:	0802cde4 	.word	0x0802cde4
 8012cf0:	0802cde8 	.word	0x0802cde8

08012cf4 <_write>:

int _write(int fd, void *buf, size_t count) {
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	b29a      	uxth	r2, r3
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	4804      	ldr	r0, [pc, #16]	@ (8012d18 <_write+0x24>)
 8012d08:	2364      	movs	r3, #100	@ 0x64
 8012d0a:	f009 f99f 	bl	801c04c <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8012d0e:	687b      	ldr	r3, [r7, #4]
}
 8012d10:	0018      	movs	r0, r3
 8012d12:	46bd      	mov	sp, r7
 8012d14:	b004      	add	sp, #16
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	2000200c 	.word	0x2000200c

08012d1c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b082      	sub	sp, #8
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	0002      	movs	r2, r0
 8012d24:	1dfb      	adds	r3, r7, #7
 8012d26:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8012d28:	4b03      	ldr	r3, [pc, #12]	@ (8012d38 <SetVerboseLevel+0x1c>)
 8012d2a:	1dfa      	adds	r2, r7, #7
 8012d2c:	7812      	ldrb	r2, [r2, #0]
 8012d2e:	701a      	strb	r2, [r3, #0]
}
 8012d30:	46c0      	nop			@ (mov r8, r8)
 8012d32:	46bd      	mov	sp, r7
 8012d34:	b002      	add	sp, #8
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	200000e4 	.word	0x200000e4

08012d3c <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8012d40:	4b02      	ldr	r3, [pc, #8]	@ (8012d4c <GetVerboseLevel+0x10>)
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	0018      	movs	r0, r3
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	46c0      	nop			@ (mov r8, r8)
 8012d4c:	200000e4 	.word	0x200000e4

08012d50 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8012d56:	4a0f      	ldr	r2, [pc, #60]	@ (8012d94 <BinaryReleaseInfo+0x44>)
 8012d58:	4b0f      	ldr	r3, [pc, #60]	@ (8012d98 <BinaryReleaseInfo+0x48>)
 8012d5a:	0019      	movs	r1, r3
 8012d5c:	2002      	movs	r0, #2
 8012d5e:	f7ff ff73 	bl	8012c48 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8012d62:	480e      	ldr	r0, [pc, #56]	@ (8012d9c <BinaryReleaseInfo+0x4c>)
 8012d64:	4a0e      	ldr	r2, [pc, #56]	@ (8012da0 <BinaryReleaseInfo+0x50>)
 8012d66:	490c      	ldr	r1, [pc, #48]	@ (8012d98 <BinaryReleaseInfo+0x48>)
 8012d68:	4b0e      	ldr	r3, [pc, #56]	@ (8012da4 <BinaryReleaseInfo+0x54>)
 8012d6a:	9300      	str	r3, [sp, #0]
 8012d6c:	0003      	movs	r3, r0
 8012d6e:	2002      	movs	r0, #2
 8012d70:	f7ff ff6a 	bl	8012c48 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8012d74:	4b0c      	ldr	r3, [pc, #48]	@ (8012da8 <BinaryReleaseInfo+0x58>)
 8012d76:	4a0d      	ldr	r2, [pc, #52]	@ (8012dac <BinaryReleaseInfo+0x5c>)
 8012d78:	4907      	ldr	r1, [pc, #28]	@ (8012d98 <BinaryReleaseInfo+0x48>)
 8012d7a:	2002      	movs	r0, #2
 8012d7c:	f7ff ff64 	bl	8012c48 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8012d80:	4b0b      	ldr	r3, [pc, #44]	@ (8012db0 <BinaryReleaseInfo+0x60>)
 8012d82:	4a0c      	ldr	r2, [pc, #48]	@ (8012db4 <BinaryReleaseInfo+0x64>)
 8012d84:	4904      	ldr	r1, [pc, #16]	@ (8012d98 <BinaryReleaseInfo+0x48>)
 8012d86:	2002      	movs	r0, #2
 8012d88:	f7ff ff5e 	bl	8012c48 <CreateLine>
}
 8012d8c:	46c0      	nop			@ (mov r8, r8)
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	46c0      	nop			@ (mov r8, r8)
 8012d94:	0802cdf0 	.word	0x0802cdf0
 8012d98:	0802ce1c 	.word	0x0802ce1c
 8012d9c:	0802ce20 	.word	0x0802ce20
 8012da0:	0802ce2c 	.word	0x0802ce2c
 8012da4:	0802ce40 	.word	0x0802ce40
 8012da8:	0802ce4c 	.word	0x0802ce4c
 8012dac:	0802ce58 	.word	0x0802ce58
 8012db0:	0802ce60 	.word	0x0802ce60
 8012db4:	0802ce68 	.word	0x0802ce68

08012db8 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	60b9      	str	r1, [r7, #8]
 8012dc2:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	68ba      	ldr	r2, [r7, #8]
 8012dc8:	68f9      	ldr	r1, [r7, #12]
 8012dca:	4803      	ldr	r0, [pc, #12]	@ (8012dd8 <errorHandler+0x20>)
 8012dcc:	f011 ffb6 	bl	8024d3c <iprintf>
//    while (true)
//    {
//    }
}
 8012dd0:	46c0      	nop			@ (mov r8, r8)
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	b004      	add	sp, #16
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	0802ce80 	.word	0x0802ce80

08012ddc <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8012ddc:	b590      	push	{r4, r7, lr}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6039      	str	r1, [r7, #0]
 8012de4:	0011      	movs	r1, r2
 8012de6:	1dfb      	adds	r3, r7, #7
 8012de8:	1c02      	adds	r2, r0, #0
 8012dea:	701a      	strb	r2, [r3, #0]
 8012dec:	1dbb      	adds	r3, r7, #6
 8012dee:	1c0a      	adds	r2, r1, #0
 8012df0:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8012df2:	4b0a      	ldr	r3, [pc, #40]	@ (8012e1c <ReadRegister+0x40>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d00a      	beq.n	8012e10 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8012dfa:	4b08      	ldr	r3, [pc, #32]	@ (8012e1c <ReadRegister+0x40>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	1dba      	adds	r2, r7, #6
 8012e00:	7814      	ldrb	r4, [r2, #0]
 8012e02:	6839      	ldr	r1, [r7, #0]
 8012e04:	1dfa      	adds	r2, r7, #7
 8012e06:	7810      	ldrb	r0, [r2, #0]
 8012e08:	0022      	movs	r2, r4
 8012e0a:	4798      	blx	r3
 8012e0c:	0003      	movs	r3, r0
 8012e0e:	e000      	b.n	8012e12 <ReadRegister+0x36>
	}
	return false;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	0018      	movs	r0, r3
 8012e14:	46bd      	mov	sp, r7
 8012e16:	b003      	add	sp, #12
 8012e18:	bd90      	pop	{r4, r7, pc}
 8012e1a:	46c0      	nop			@ (mov r8, r8)
 8012e1c:	20002214 	.word	0x20002214

08012e20 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8012e20:	b590      	push	{r4, r7, lr}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6039      	str	r1, [r7, #0]
 8012e28:	0011      	movs	r1, r2
 8012e2a:	1dfb      	adds	r3, r7, #7
 8012e2c:	1c02      	adds	r2, r0, #0
 8012e2e:	701a      	strb	r2, [r3, #0]
 8012e30:	1dbb      	adds	r3, r7, #6
 8012e32:	1c0a      	adds	r2, r1, #0
 8012e34:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8012e36:	4b0a      	ldr	r3, [pc, #40]	@ (8012e60 <WriteRegister+0x40>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d00a      	beq.n	8012e54 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8012e3e:	4b08      	ldr	r3, [pc, #32]	@ (8012e60 <WriteRegister+0x40>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	1dba      	adds	r2, r7, #6
 8012e44:	7814      	ldrb	r4, [r2, #0]
 8012e46:	6839      	ldr	r1, [r7, #0]
 8012e48:	1dfa      	adds	r2, r7, #7
 8012e4a:	7810      	ldrb	r0, [r2, #0]
 8012e4c:	0022      	movs	r2, r4
 8012e4e:	4798      	blx	r3
 8012e50:	0003      	movs	r3, r0
 8012e52:	e000      	b.n	8012e56 <WriteRegister+0x36>
  }
  return false;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	0018      	movs	r0, r3
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	b003      	add	sp, #12
 8012e5c:	bd90      	pop	{r4, r7, pc}
 8012e5e:	46c0      	nop			@ (mov r8, r8)
 8012e60:	20002218 	.word	0x20002218

08012e64 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	000a      	movs	r2, r1
 8012e6e:	1cfb      	adds	r3, r7, #3
 8012e70:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8012e72:	230f      	movs	r3, #15
 8012e74:	18fb      	adds	r3, r7, r3
 8012e76:	22ff      	movs	r2, #255	@ 0xff
 8012e78:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8012e7a:	230e      	movs	r3, #14
 8012e7c:	18fb      	adds	r3, r7, r3
 8012e7e:	2200      	movs	r2, #0
 8012e80:	701a      	strb	r2, [r3, #0]
 8012e82:	e037      	b.n	8012ef4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8012e84:	230e      	movs	r3, #14
 8012e86:	18fb      	adds	r3, r7, r3
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	18d3      	adds	r3, r2, r3
 8012e8e:	7819      	ldrb	r1, [r3, #0]
 8012e90:	220f      	movs	r2, #15
 8012e92:	18bb      	adds	r3, r7, r2
 8012e94:	18ba      	adds	r2, r7, r2
 8012e96:	7812      	ldrb	r2, [r2, #0]
 8012e98:	404a      	eors	r2, r1
 8012e9a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8012e9c:	230d      	movs	r3, #13
 8012e9e:	18fb      	adds	r3, r7, r3
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	701a      	strb	r2, [r3, #0]
 8012ea4:	e01b      	b.n	8012ede <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8012ea6:	210f      	movs	r1, #15
 8012ea8:	187b      	adds	r3, r7, r1
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	da09      	bge.n	8012ec6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8012eb2:	187b      	adds	r3, r7, r1
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	005b      	lsls	r3, r3, #1
 8012eb8:	b25b      	sxtb	r3, r3
 8012eba:	2231      	movs	r2, #49	@ 0x31
 8012ebc:	4053      	eors	r3, r2
 8012ebe:	b25a      	sxtb	r2, r3
 8012ec0:	187b      	adds	r3, r7, r1
 8012ec2:	701a      	strb	r2, [r3, #0]
 8012ec4:	e005      	b.n	8012ed2 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8012ec6:	230f      	movs	r3, #15
 8012ec8:	18fa      	adds	r2, r7, r3
 8012eca:	18fb      	adds	r3, r7, r3
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	18db      	adds	r3, r3, r3
 8012ed0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8012ed2:	210d      	movs	r1, #13
 8012ed4:	187b      	adds	r3, r7, r1
 8012ed6:	781a      	ldrb	r2, [r3, #0]
 8012ed8:	187b      	adds	r3, r7, r1
 8012eda:	3201      	adds	r2, #1
 8012edc:	701a      	strb	r2, [r3, #0]
 8012ede:	230d      	movs	r3, #13
 8012ee0:	18fb      	adds	r3, r7, r3
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	2b07      	cmp	r3, #7
 8012ee6:	d9de      	bls.n	8012ea6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8012ee8:	210e      	movs	r1, #14
 8012eea:	187b      	adds	r3, r7, r1
 8012eec:	781a      	ldrb	r2, [r3, #0]
 8012eee:	187b      	adds	r3, r7, r1
 8012ef0:	3201      	adds	r2, #1
 8012ef2:	701a      	strb	r2, [r3, #0]
 8012ef4:	230e      	movs	r3, #14
 8012ef6:	18fa      	adds	r2, r7, r3
 8012ef8:	1cfb      	adds	r3, r7, #3
 8012efa:	7812      	ldrb	r2, [r2, #0]
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d3c0      	bcc.n	8012e84 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8012f02:	230f      	movs	r3, #15
 8012f04:	18fb      	adds	r3, r7, r3
 8012f06:	781b      	ldrb	r3, [r3, #0]
}
 8012f08:	0018      	movs	r0, r3
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	b004      	add	sp, #16
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8012f10:	b5b0      	push	{r4, r5, r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	1c18      	adds	r0, r3, #0
 8012f20:	f7f0 faa0 	bl	8003464 <__aeabi_f2d>
 8012f24:	4a2e      	ldr	r2, [pc, #184]	@ (8012fe0 <HIDS_DewPointCalculation+0xd0>)
 8012f26:	4b2f      	ldr	r3, [pc, #188]	@ (8012fe4 <HIDS_DewPointCalculation+0xd4>)
 8012f28:	f7ef fb88 	bl	800263c <__aeabi_dmul>
 8012f2c:	0002      	movs	r2, r0
 8012f2e:	000b      	movs	r3, r1
 8012f30:	0014      	movs	r4, r2
 8012f32:	001d      	movs	r5, r3
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	1c18      	adds	r0, r3, #0
 8012f3a:	f7f0 fa93 	bl	8003464 <__aeabi_f2d>
 8012f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8012fe8 <HIDS_DewPointCalculation+0xd8>)
 8012f40:	4b2a      	ldr	r3, [pc, #168]	@ (8012fec <HIDS_DewPointCalculation+0xdc>)
 8012f42:	f7ee fbd3 	bl	80016ec <__aeabi_dadd>
 8012f46:	0002      	movs	r2, r0
 8012f48:	000b      	movs	r3, r1
 8012f4a:	0020      	movs	r0, r4
 8012f4c:	0029      	movs	r1, r5
 8012f4e:	f7ee ff31 	bl	8001db4 <__aeabi_ddiv>
 8012f52:	0002      	movs	r2, r0
 8012f54:	000b      	movs	r3, r1
 8012f56:	0014      	movs	r4, r2
 8012f58:	001d      	movs	r5, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	1c18      	adds	r0, r3, #0
 8012f60:	f7f0 fa80 	bl	8003464 <__aeabi_f2d>
 8012f64:	2200      	movs	r2, #0
 8012f66:	4b22      	ldr	r3, [pc, #136]	@ (8012ff0 <HIDS_DewPointCalculation+0xe0>)
 8012f68:	f7ee ff24 	bl	8001db4 <__aeabi_ddiv>
 8012f6c:	0002      	movs	r2, r0
 8012f6e:	000b      	movs	r3, r1
 8012f70:	0010      	movs	r0, r2
 8012f72:	0019      	movs	r1, r3
 8012f74:	f014 fe5a 	bl	8027c2c <log>
 8012f78:	0002      	movs	r2, r0
 8012f7a:	000b      	movs	r3, r1
 8012f7c:	0020      	movs	r0, r4
 8012f7e:	0029      	movs	r1, r5
 8012f80:	f7ee fbb4 	bl	80016ec <__aeabi_dadd>
 8012f84:	0002      	movs	r2, r0
 8012f86:	000b      	movs	r3, r1
 8012f88:	0010      	movs	r0, r2
 8012f8a:	0019      	movs	r1, r3
 8012f8c:	f7f0 fab2 	bl	80034f4 <__aeabi_d2f>
 8012f90:	1c03      	adds	r3, r0, #0
 8012f92:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8012f94:	68f8      	ldr	r0, [r7, #12]
 8012f96:	f7f0 fa65 	bl	8003464 <__aeabi_f2d>
 8012f9a:	4a13      	ldr	r2, [pc, #76]	@ (8012fe8 <HIDS_DewPointCalculation+0xd8>)
 8012f9c:	4b13      	ldr	r3, [pc, #76]	@ (8012fec <HIDS_DewPointCalculation+0xdc>)
 8012f9e:	f7ef fb4d 	bl	800263c <__aeabi_dmul>
 8012fa2:	0002      	movs	r2, r0
 8012fa4:	000b      	movs	r3, r1
 8012fa6:	0014      	movs	r4, r2
 8012fa8:	001d      	movs	r5, r3
 8012faa:	68f8      	ldr	r0, [r7, #12]
 8012fac:	f7f0 fa5a 	bl	8003464 <__aeabi_f2d>
 8012fb0:	0002      	movs	r2, r0
 8012fb2:	000b      	movs	r3, r1
 8012fb4:	480a      	ldr	r0, [pc, #40]	@ (8012fe0 <HIDS_DewPointCalculation+0xd0>)
 8012fb6:	490b      	ldr	r1, [pc, #44]	@ (8012fe4 <HIDS_DewPointCalculation+0xd4>)
 8012fb8:	f7ef fe08 	bl	8002bcc <__aeabi_dsub>
 8012fbc:	0002      	movs	r2, r0
 8012fbe:	000b      	movs	r3, r1
 8012fc0:	0020      	movs	r0, r4
 8012fc2:	0029      	movs	r1, r5
 8012fc4:	f7ee fef6 	bl	8001db4 <__aeabi_ddiv>
 8012fc8:	0002      	movs	r2, r0
 8012fca:	000b      	movs	r3, r1
 8012fcc:	0010      	movs	r0, r2
 8012fce:	0019      	movs	r1, r3
 8012fd0:	f7f0 fa90 	bl	80034f4 <__aeabi_d2f>
 8012fd4:	1c03      	adds	r3, r0, #0
}
 8012fd6:	1c18      	adds	r0, r3, #0
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	b004      	add	sp, #16
 8012fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8012fde:	46c0      	nop			@ (mov r8, r8)
 8012fe0:	b851eb85 	.word	0xb851eb85
 8012fe4:	4031451e 	.word	0x4031451e
 8012fe8:	66666666 	.word	0x66666666
 8012fec:	406db666 	.word	0x406db666
 8012ff0:	40590000 	.word	0x40590000

08012ff4 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 8012ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8013030 <HIDS_EnableHeater+0x3c>)
 8012ffc:	781a      	ldrb	r2, [r3, #0]
 8012ffe:	1dfb      	adds	r3, r7, #7
 8013000:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8013002:	1dfb      	adds	r3, r7, #7
 8013004:	2201      	movs	r2, #1
 8013006:	0019      	movs	r1, r3
 8013008:	2044      	movs	r0, #68	@ 0x44
 801300a:	f7ff ff09 	bl	8012e20 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 801300e:	1dfb      	adds	r3, r7, #7
 8013010:	781b      	ldrb	r3, [r3, #0]
 8013012:	4a08      	ldr	r2, [pc, #32]	@ (8013034 <HIDS_EnableHeater+0x40>)
 8013014:	4908      	ldr	r1, [pc, #32]	@ (8013038 <HIDS_EnableHeater+0x44>)
 8013016:	2002      	movs	r0, #2
 8013018:	f7ff fe16 	bl	8012c48 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 801301c:	f7f6 fa55 	bl	80094ca <getPosixTime>
 8013020:	0002      	movs	r2, r0
 8013022:	4b06      	ldr	r3, [pc, #24]	@ (801303c <HIDS_EnableHeater+0x48>)
 8013024:	601a      	str	r2, [r3, #0]
}
 8013026:	46c0      	nop			@ (mov r8, r8)
 8013028:	46bd      	mov	sp, r7
 801302a:	b002      	add	sp, #8
 801302c:	bd80      	pop	{r7, pc}
 801302e:	46c0      	nop			@ (mov r8, r8)
 8013030:	200000e5 	.word	0x200000e5
 8013034:	0802cea8 	.word	0x0802cea8
 8013038:	0802cec8 	.word	0x0802cec8
 801303c:	2000222c 	.word	0x2000222c

08013040 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8013040:	b580      	push	{r7, lr}
 8013042:	b082      	sub	sp, #8
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801304a:	4b0a      	ldr	r3, [pc, #40]	@ (8013074 <HIDS_Init+0x34>)
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8013050:	4b09      	ldr	r3, [pc, #36]	@ (8013078 <HIDS_Init+0x38>)
 8013052:	683a      	ldr	r2, [r7, #0]
 8013054:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8013056:	4b09      	ldr	r3, [pc, #36]	@ (801307c <HIDS_Init+0x3c>)
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	0018      	movs	r0, r3
 801305c:	f000 f840 	bl	80130e0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8013060:	4b07      	ldr	r3, [pc, #28]	@ (8013080 <HIDS_Init+0x40>)
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	0018      	movs	r0, r3
 8013066:	f000 f82b 	bl	80130c0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801306a:	46c0      	nop			@ (mov r8, r8)
 801306c:	46bd      	mov	sp, r7
 801306e:	b002      	add	sp, #8
 8013070:	bd80      	pop	{r7, pc}
 8013072:	46c0      	nop			@ (mov r8, r8)
 8013074:	20002214 	.word	0x20002214
 8013078:	20002218 	.word	0x20002218
 801307c:	200000e6 	.word	0x200000e6
 8013080:	200000e5 	.word	0x200000e5

08013084 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8013084:	b580      	push	{r7, lr}
 8013086:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8013088:	f000 fb1c 	bl	80136c4 <HAL_GetTick>
 801308c:	0002      	movs	r2, r0
 801308e:	4b08      	ldr	r3, [pc, #32]	@ (80130b0 <HIDS_StartMeasurement+0x2c>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	18d2      	adds	r2, r2, r3
 8013094:	4b07      	ldr	r3, [pc, #28]	@ (80130b4 <HIDS_StartMeasurement+0x30>)
 8013096:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8013098:	4b07      	ldr	r3, [pc, #28]	@ (80130b8 <HIDS_StartMeasurement+0x34>)
 801309a:	2201      	movs	r2, #1
 801309c:	0019      	movs	r1, r3
 801309e:	2044      	movs	r0, #68	@ 0x44
 80130a0:	f7ff febe 	bl	8012e20 <WriteRegister>
  MeasurementDone = false;
 80130a4:	4b05      	ldr	r3, [pc, #20]	@ (80130bc <HIDS_StartMeasurement+0x38>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	701a      	strb	r2, [r3, #0]
}
 80130aa:	46c0      	nop			@ (mov r8, r8)
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	200000ec 	.word	0x200000ec
 80130b4:	200000e8 	.word	0x200000e8
 80130b8:	200000e6 	.word	0x200000e6
 80130bc:	20002230 	.word	0x20002230

080130c0 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	0002      	movs	r2, r0
 80130c8:	1dfb      	adds	r3, r7, #7
 80130ca:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80130cc:	4b03      	ldr	r3, [pc, #12]	@ (80130dc <HIDS_SetHeaterMode+0x1c>)
 80130ce:	1dfa      	adds	r2, r7, #7
 80130d0:	7812      	ldrb	r2, [r2, #0]
 80130d2:	701a      	strb	r2, [r3, #0]
}
 80130d4:	46c0      	nop			@ (mov r8, r8)
 80130d6:	46bd      	mov	sp, r7
 80130d8:	b002      	add	sp, #8
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	200000e5 	.word	0x200000e5

080130e0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b082      	sub	sp, #8
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	0002      	movs	r2, r0
 80130e8:	1dfb      	adds	r3, r7, #7
 80130ea:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80130ec:	4b03      	ldr	r3, [pc, #12]	@ (80130fc <HIDS_SetMeasurementMode+0x1c>)
 80130ee:	1dfa      	adds	r2, r7, #7
 80130f0:	7812      	ldrb	r2, [r2, #0]
 80130f2:	701a      	strb	r2, [r3, #0]
}
 80130f4:	46c0      	nop			@ (mov r8, r8)
 80130f6:	46bd      	mov	sp, r7
 80130f8:	b002      	add	sp, #8
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	200000e6 	.word	0x200000e6

08013100 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8013108:	f000 fadc 	bl	80136c4 <HAL_GetTick>
 801310c:	0002      	movs	r2, r0
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	18d2      	adds	r2, r2, r3
 8013112:	4b03      	ldr	r3, [pc, #12]	@ (8013120 <setHIDSTimeStamp+0x20>)
 8013114:	601a      	str	r2, [r3, #0]
}
 8013116:	46c0      	nop			@ (mov r8, r8)
 8013118:	46bd      	mov	sp, r7
 801311a:	b002      	add	sp, #8
 801311c:	bd80      	pop	{r7, pc}
 801311e:	46c0      	nop			@ (mov r8, r8)
 8013120:	20002234 	.word	0x20002234

08013124 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8013124:	b590      	push	{r4, r7, lr}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	781a      	ldrb	r2, [r3, #0]
 8013130:	210c      	movs	r1, #12
 8013132:	187b      	adds	r3, r7, r1
 8013134:	701a      	strb	r2, [r3, #0]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	785a      	ldrb	r2, [r3, #1]
 801313a:	187b      	adds	r3, r7, r1
 801313c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 801313e:	240f      	movs	r4, #15
 8013140:	193b      	adds	r3, r7, r4
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	7892      	ldrb	r2, [r2, #2]
 8013146:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8013148:	187b      	adds	r3, r7, r1
 801314a:	2102      	movs	r1, #2
 801314c:	0018      	movs	r0, r3
 801314e:	f7ff fe89 	bl	8012e64 <CalculateCRC>
 8013152:	0003      	movs	r3, r0
 8013154:	001a      	movs	r2, r3
 8013156:	193b      	adds	r3, r7, r4
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	4293      	cmp	r3, r2
 801315c:	d007      	beq.n	801316e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 801315e:	4a1a      	ldr	r2, [pc, #104]	@ (80131c8 <CheckCRC+0xa4>)
 8013160:	4b1a      	ldr	r3, [pc, #104]	@ (80131cc <CheckCRC+0xa8>)
 8013162:	0019      	movs	r1, r3
 8013164:	2001      	movs	r0, #1
 8013166:	f7ff fd6f 	bl	8012c48 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 801316a:	2300      	movs	r3, #0
 801316c:	e027      	b.n	80131be <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	78da      	ldrb	r2, [r3, #3]
 8013172:	2108      	movs	r1, #8
 8013174:	187b      	adds	r3, r7, r1
 8013176:	701a      	strb	r2, [r3, #0]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	791a      	ldrb	r2, [r3, #4]
 801317c:	187b      	adds	r3, r7, r1
 801317e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8013180:	240e      	movs	r4, #14
 8013182:	193b      	adds	r3, r7, r4
 8013184:	687a      	ldr	r2, [r7, #4]
 8013186:	7952      	ldrb	r2, [r2, #5]
 8013188:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801318a:	187b      	adds	r3, r7, r1
 801318c:	2102      	movs	r1, #2
 801318e:	0018      	movs	r0, r3
 8013190:	f7ff fe68 	bl	8012e64 <CalculateCRC>
 8013194:	0003      	movs	r3, r0
 8013196:	001a      	movs	r2, r3
 8013198:	193b      	adds	r3, r7, r4
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	4293      	cmp	r3, r2
 801319e:	d00d      	beq.n	80131bc <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 80131a0:	4a0b      	ldr	r2, [pc, #44]	@ (80131d0 <CheckCRC+0xac>)
 80131a2:	4b0a      	ldr	r3, [pc, #40]	@ (80131cc <CheckCRC+0xa8>)
 80131a4:	0019      	movs	r1, r3
 80131a6:	2001      	movs	r0, #1
 80131a8:	f7ff fd4e 	bl	8012c48 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 80131ac:	4a09      	ldr	r2, [pc, #36]	@ (80131d4 <CheckCRC+0xb0>)
 80131ae:	4b0a      	ldr	r3, [pc, #40]	@ (80131d8 <CheckCRC+0xb4>)
 80131b0:	2185      	movs	r1, #133	@ 0x85
 80131b2:	0018      	movs	r0, r3
 80131b4:	f7ff fe00 	bl	8012db8 <errorHandler>
		return false;
 80131b8:	2300      	movs	r3, #0
 80131ba:	e000      	b.n	80131be <CheckCRC+0x9a>
	}
	return true;
 80131bc:	2301      	movs	r3, #1
}
 80131be:	0018      	movs	r0, r3
 80131c0:	46bd      	mov	sp, r7
 80131c2:	b005      	add	sp, #20
 80131c4:	bd90      	pop	{r4, r7, pc}
 80131c6:	46c0      	nop			@ (mov r8, r8)
 80131c8:	0802cecc 	.word	0x0802cecc
 80131cc:	0802cef4 	.word	0x0802cef4
 80131d0:	0802cef8 	.word	0x0802cef8
 80131d4:	0802cf24 	.word	0x0802cf24
 80131d8:	0802d5c0 	.word	0x0802d5c0

080131dc <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80131dc:	b580      	push	{r7, lr}
 80131de:	b084      	sub	sp, #16
 80131e0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80131e2:	1dbb      	adds	r3, r7, #6
 80131e4:	2289      	movs	r2, #137	@ 0x89
 80131e6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80131e8:	1dbb      	adds	r3, r7, #6
 80131ea:	2201      	movs	r2, #1
 80131ec:	0019      	movs	r1, r3
 80131ee:	2044      	movs	r0, #68	@ 0x44
 80131f0:	f7ff fe16 	bl	8012e20 <WriteRegister>
	HAL_Delay(30);
 80131f4:	201e      	movs	r0, #30
 80131f6:	f000 fa6f 	bl	80136d8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80131fa:	4b14      	ldr	r3, [pc, #80]	@ (801324c <HIDS_DeviceConnected+0x70>)
 80131fc:	2206      	movs	r2, #6
 80131fe:	0019      	movs	r1, r3
 8013200:	2044      	movs	r0, #68	@ 0x44
 8013202:	f7ff fdeb 	bl	8012ddc <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8013206:	1dfb      	adds	r3, r7, #7
 8013208:	2200      	movs	r2, #0
 801320a:	701a      	strb	r2, [r3, #0]
 801320c:	e011      	b.n	8013232 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 801320e:	1dfb      	adds	r3, r7, #7
 8013210:	7818      	ldrb	r0, [r3, #0]
 8013212:	1dfb      	adds	r3, r7, #7
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	4a0d      	ldr	r2, [pc, #52]	@ (801324c <HIDS_DeviceConnected+0x70>)
 8013218:	5cd3      	ldrb	r3, [r2, r3]
 801321a:	4a0d      	ldr	r2, [pc, #52]	@ (8013250 <HIDS_DeviceConnected+0x74>)
 801321c:	490d      	ldr	r1, [pc, #52]	@ (8013254 <HIDS_DeviceConnected+0x78>)
 801321e:	9300      	str	r3, [sp, #0]
 8013220:	0003      	movs	r3, r0
 8013222:	2002      	movs	r0, #2
 8013224:	f7ff fd10 	bl	8012c48 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8013228:	1dfb      	adds	r3, r7, #7
 801322a:	781a      	ldrb	r2, [r3, #0]
 801322c:	1dfb      	adds	r3, r7, #7
 801322e:	3201      	adds	r2, #1
 8013230:	701a      	strb	r2, [r3, #0]
 8013232:	1dfb      	adds	r3, r7, #7
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2b05      	cmp	r3, #5
 8013238:	d9e9      	bls.n	801320e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801323a:	4b04      	ldr	r3, [pc, #16]	@ (801324c <HIDS_DeviceConnected+0x70>)
 801323c:	0018      	movs	r0, r3
 801323e:	f7ff ff71 	bl	8013124 <CheckCRC>
 8013242:	0003      	movs	r3, r0
}
 8013244:	0018      	movs	r0, r3
 8013246:	46bd      	mov	sp, r7
 8013248:	b002      	add	sp, #8
 801324a:	bd80      	pop	{r7, pc}
 801324c:	2000221c 	.word	0x2000221c
 8013250:	0802cf3c 	.word	0x0802cf3c
 8013254:	0802cec8 	.word	0x0802cec8

08013258 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8013258:	b580      	push	{r7, lr}
 801325a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 801325c:	4b04      	ldr	r3, [pc, #16]	@ (8013270 <HIDS_MeasurementReady+0x18>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	0018      	movs	r0, r3
 8013262:	f7ff fc9b 	bl	8012b9c <TimestampIsReached>
 8013266:	0003      	movs	r3, r0
}
 8013268:	0018      	movs	r0, r3
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
 801326e:	46c0      	nop			@ (mov r8, r8)
 8013270:	200000e8 	.word	0x200000e8

08013274 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 801327e:	4b41      	ldr	r3, [pc, #260]	@ (8013384 <HIDS_GetMeasurementValues+0x110>)
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d001      	beq.n	801328a <HIDS_GetMeasurementValues+0x16>
 8013286:	2301      	movs	r3, #1
 8013288:	e077      	b.n	801337a <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 801328a:	f7ff ffe5 	bl	8013258 <HIDS_MeasurementReady>
 801328e:	0003      	movs	r3, r0
 8013290:	001a      	movs	r2, r3
 8013292:	2301      	movs	r3, #1
 8013294:	4053      	eors	r3, r2
 8013296:	b2db      	uxtb	r3, r3
 8013298:	2b00      	cmp	r3, #0
 801329a:	d001      	beq.n	80132a0 <HIDS_GetMeasurementValues+0x2c>
 801329c:	2300      	movs	r3, #0
 801329e:	e06c      	b.n	801337a <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 80132a0:	4b39      	ldr	r3, [pc, #228]	@ (8013388 <HIDS_GetMeasurementValues+0x114>)
 80132a2:	2206      	movs	r2, #6
 80132a4:	0019      	movs	r1, r3
 80132a6:	2044      	movs	r0, #68	@ 0x44
 80132a8:	f7ff fd98 	bl	8012ddc <ReadRegister>
 80132ac:	0003      	movs	r3, r0
 80132ae:	001a      	movs	r2, r3
 80132b0:	2301      	movs	r3, #1
 80132b2:	4053      	eors	r3, r2
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d005      	beq.n	80132c6 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 80132ba:	4a34      	ldr	r2, [pc, #208]	@ (801338c <HIDS_GetMeasurementValues+0x118>)
 80132bc:	4b34      	ldr	r3, [pc, #208]	@ (8013390 <HIDS_GetMeasurementValues+0x11c>)
 80132be:	0019      	movs	r1, r3
 80132c0:	2001      	movs	r0, #1
 80132c2:	f7ff fcc1 	bl	8012c48 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 80132c6:	4b30      	ldr	r3, [pc, #192]	@ (8013388 <HIDS_GetMeasurementValues+0x114>)
 80132c8:	0018      	movs	r0, r3
 80132ca:	f7ff ff2b 	bl	8013124 <CheckCRC>
 80132ce:	0003      	movs	r3, r0
 80132d0:	001a      	movs	r2, r3
 80132d2:	2301      	movs	r3, #1
 80132d4:	4053      	eors	r3, r2
 80132d6:	b2db      	uxtb	r3, r3
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d001      	beq.n	80132e0 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80132dc:	2300      	movs	r3, #0
 80132de:	e04c      	b.n	801337a <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80132e0:	4b29      	ldr	r3, [pc, #164]	@ (8013388 <HIDS_GetMeasurementValues+0x114>)
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	021b      	lsls	r3, r3, #8
 80132e6:	4a28      	ldr	r2, [pc, #160]	@ (8013388 <HIDS_GetMeasurementValues+0x114>)
 80132e8:	7852      	ldrb	r2, [r2, #1]
 80132ea:	4313      	orrs	r3, r2
 80132ec:	22af      	movs	r2, #175	@ 0xaf
 80132ee:	4353      	muls	r3, r2
 80132f0:	0018      	movs	r0, r3
 80132f2:	f7f0 f865 	bl	80033c0 <__aeabi_i2d>
 80132f6:	2200      	movs	r2, #0
 80132f8:	4b26      	ldr	r3, [pc, #152]	@ (8013394 <HIDS_GetMeasurementValues+0x120>)
 80132fa:	f7ee fd5b 	bl	8001db4 <__aeabi_ddiv>
 80132fe:	0002      	movs	r2, r0
 8013300:	000b      	movs	r3, r1
 8013302:	0010      	movs	r0, r2
 8013304:	0019      	movs	r1, r3
 8013306:	f7f0 f8f5 	bl	80034f4 <__aeabi_d2f>
 801330a:	1c03      	adds	r3, r0, #0
 801330c:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 801330e:	4922      	ldr	r1, [pc, #136]	@ (8013398 <HIDS_GetMeasurementValues+0x124>)
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f7ed ff83 	bl	800121c <__aeabi_fsub>
 8013316:	1c03      	adds	r3, r0, #0
 8013318:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 801331a:	4b1b      	ldr	r3, [pc, #108]	@ (8013388 <HIDS_GetMeasurementValues+0x114>)
 801331c:	78db      	ldrb	r3, [r3, #3]
 801331e:	021b      	lsls	r3, r3, #8
 8013320:	4a19      	ldr	r2, [pc, #100]	@ (8013388 <HIDS_GetMeasurementValues+0x114>)
 8013322:	7912      	ldrb	r2, [r2, #4]
 8013324:	431a      	orrs	r2, r3
 8013326:	0013      	movs	r3, r2
 8013328:	015b      	lsls	r3, r3, #5
 801332a:	1a9b      	subs	r3, r3, r2
 801332c:	009b      	lsls	r3, r3, #2
 801332e:	189b      	adds	r3, r3, r2
 8013330:	0018      	movs	r0, r3
 8013332:	f7f0 f845 	bl	80033c0 <__aeabi_i2d>
 8013336:	2200      	movs	r2, #0
 8013338:	4b16      	ldr	r3, [pc, #88]	@ (8013394 <HIDS_GetMeasurementValues+0x120>)
 801333a:	f7ee fd3b 	bl	8001db4 <__aeabi_ddiv>
 801333e:	0002      	movs	r2, r0
 8013340:	000b      	movs	r3, r1
 8013342:	0010      	movs	r0, r2
 8013344:	0019      	movs	r1, r3
 8013346:	f7f0 f8d5 	bl	80034f4 <__aeabi_d2f>
 801334a:	1c03      	adds	r3, r0, #0
 801334c:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 801334e:	4913      	ldr	r1, [pc, #76]	@ (801339c <HIDS_GetMeasurementValues+0x128>)
 8013350:	68b8      	ldr	r0, [r7, #8]
 8013352:	f7ed ff63 	bl	800121c <__aeabi_fsub>
 8013356:	1c03      	adds	r3, r0, #0
 8013358:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	68fa      	ldr	r2, [r7, #12]
 801335e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	68ba      	ldr	r2, [r7, #8]
 8013364:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8013366:	687a      	ldr	r2, [r7, #4]
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	0011      	movs	r1, r2
 801336c:	0018      	movs	r0, r3
 801336e:	f7fc fff5 	bl	801035c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8013372:	4b04      	ldr	r3, [pc, #16]	@ (8013384 <HIDS_GetMeasurementValues+0x110>)
 8013374:	2201      	movs	r2, #1
 8013376:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8013378:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 801337a:	0018      	movs	r0, r3
 801337c:	46bd      	mov	sp, r7
 801337e:	b004      	add	sp, #16
 8013380:	bd80      	pop	{r7, pc}
 8013382:	46c0      	nop			@ (mov r8, r8)
 8013384:	20002230 	.word	0x20002230
 8013388:	20002224 	.word	0x20002224
 801338c:	0802cf5c 	.word	0x0802cf5c
 8013390:	0802cef4 	.word	0x0802cef4
 8013394:	40efffe0 	.word	0x40efffe0
 8013398:	42340000 	.word	0x42340000
 801339c:	40c00000 	.word	0x40c00000

080133a0 <ResetHIDSresults>:

void ResetHIDSresults() {
 80133a0:	b580      	push	{r7, lr}
 80133a2:	af00      	add	r7, sp, #0
  humid = 0.0;
 80133a4:	4b04      	ldr	r3, [pc, #16]	@ (80133b8 <ResetHIDSresults+0x18>)
 80133a6:	2200      	movs	r2, #0
 80133a8:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 80133aa:	4b04      	ldr	r3, [pc, #16]	@ (80133bc <ResetHIDSresults+0x1c>)
 80133ac:	2200      	movs	r2, #0
 80133ae:	601a      	str	r2, [r3, #0]
}
 80133b0:	46c0      	nop			@ (mov r8, r8)
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	46c0      	nop			@ (mov r8, r8)
 80133b8:	2000220c 	.word	0x2000220c
 80133bc:	20002210 	.word	0x20002210

080133c0 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 80133c0:	b5b0      	push	{r4, r5, r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 80133c6:	4b69      	ldr	r3, [pc, #420]	@ (801356c <HIDS_Upkeep+0x1ac>)
 80133c8:	781b      	ldrb	r3, [r3, #0]
 80133ca:	2b06      	cmp	r3, #6
 80133cc:	d900      	bls.n	80133d0 <HIDS_Upkeep+0x10>
 80133ce:	e0bd      	b.n	801354c <HIDS_Upkeep+0x18c>
 80133d0:	009a      	lsls	r2, r3, #2
 80133d2:	4b67      	ldr	r3, [pc, #412]	@ (8013570 <HIDS_Upkeep+0x1b0>)
 80133d4:	18d3      	adds	r3, r2, r3
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 80133da:	4a66      	ldr	r2, [pc, #408]	@ (8013574 <HIDS_Upkeep+0x1b4>)
 80133dc:	4b66      	ldr	r3, [pc, #408]	@ (8013578 <HIDS_Upkeep+0x1b8>)
 80133de:	0019      	movs	r1, r3
 80133e0:	2003      	movs	r0, #3
 80133e2:	f7ff fc31 	bl	8012c48 <CreateLine>
      break;
 80133e6:	e0bc      	b.n	8013562 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 80133e8:	f7ff ffda 	bl	80133a0 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 80133ec:	4b5f      	ldr	r3, [pc, #380]	@ (801356c <HIDS_Upkeep+0x1ac>)
 80133ee:	2201      	movs	r2, #1
 80133f0:	701a      	strb	r2, [r3, #0]
      break;
 80133f2:	e0b6      	b.n	8013562 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 80133f4:	f7f9 fcf2 	bl	800cddc <getSensorLock>
 80133f8:	1e03      	subs	r3, r0, #0
 80133fa:	d000      	beq.n	80133fe <HIDS_Upkeep+0x3e>
 80133fc:	e0aa      	b.n	8013554 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 80133fe:	2001      	movs	r0, #1
 8013400:	f7f9 fcd8 	bl	800cdb4 <setSensorLock>
      SetMeasurementIndicator();
 8013404:	f7fe f9fe 	bl	8011804 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8013408:	f7ff fe3c 	bl	8013084 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 801340c:	200a      	movs	r0, #10
 801340e:	f000 f963 	bl	80136d8 <HAL_Delay>
      setSensorLock(FREE);
 8013412:	2000      	movs	r0, #0
 8013414:	f7f9 fcce 	bl	800cdb4 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8013418:	4b54      	ldr	r3, [pc, #336]	@ (801356c <HIDS_Upkeep+0x1ac>)
 801341a:	2202      	movs	r2, #2
 801341c:	701a      	strb	r2, [r3, #0]
      break;
 801341e:	e0a0      	b.n	8013562 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8013420:	f7f9 fcdc 	bl	800cddc <getSensorLock>
 8013424:	1e03      	subs	r3, r0, #0
 8013426:	d000      	beq.n	801342a <HIDS_Upkeep+0x6a>
 8013428:	e096      	b.n	8013558 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 801342a:	2001      	movs	r0, #1
 801342c:	f7f9 fcc2 	bl	800cdb4 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8013430:	4a52      	ldr	r2, [pc, #328]	@ (801357c <HIDS_Upkeep+0x1bc>)
 8013432:	4b53      	ldr	r3, [pc, #332]	@ (8013580 <HIDS_Upkeep+0x1c0>)
 8013434:	0011      	movs	r1, r2
 8013436:	0018      	movs	r0, r3
 8013438:	f7ff ff1c 	bl	8013274 <HIDS_GetMeasurementValues>
 801343c:	1e03      	subs	r3, r0, #0
 801343e:	d002      	beq.n	8013446 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8013440:	4b4a      	ldr	r3, [pc, #296]	@ (801356c <HIDS_Upkeep+0x1ac>)
 8013442:	2203      	movs	r2, #3
 8013444:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8013446:	200a      	movs	r0, #10
 8013448:	f000 f946 	bl	80136d8 <HAL_Delay>
      setSensorLock(FREE);
 801344c:	2000      	movs	r0, #0
 801344e:	f7f9 fcb1 	bl	800cdb4 <setSensorLock>
      break;
 8013452:	e086      	b.n	8013562 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8013454:	4b4a      	ldr	r3, [pc, #296]	@ (8013580 <HIDS_Upkeep+0x1c0>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	1c18      	adds	r0, r3, #0
 801345a:	f7f0 f803 	bl	8003464 <__aeabi_f2d>
 801345e:	0004      	movs	r4, r0
 8013460:	000d      	movs	r5, r1
 8013462:	4b46      	ldr	r3, [pc, #280]	@ (801357c <HIDS_Upkeep+0x1bc>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	1c18      	adds	r0, r3, #0
 8013468:	f7ef fffc 	bl	8003464 <__aeabi_f2d>
 801346c:	0002      	movs	r2, r0
 801346e:	000b      	movs	r3, r1
 8013470:	4844      	ldr	r0, [pc, #272]	@ (8013584 <HIDS_Upkeep+0x1c4>)
 8013472:	4941      	ldr	r1, [pc, #260]	@ (8013578 <HIDS_Upkeep+0x1b8>)
 8013474:	9202      	str	r2, [sp, #8]
 8013476:	9303      	str	r3, [sp, #12]
 8013478:	9400      	str	r4, [sp, #0]
 801347a:	9501      	str	r5, [sp, #4]
 801347c:	0002      	movs	r2, r0
 801347e:	2003      	movs	r0, #3
 8013480:	f7ff fbe2 	bl	8012c48 <CreateLine>
      setHIDS(temp, humid);
 8013484:	4b3d      	ldr	r3, [pc, #244]	@ (801357c <HIDS_Upkeep+0x1bc>)
 8013486:	681a      	ldr	r2, [r3, #0]
 8013488:	4b3d      	ldr	r3, [pc, #244]	@ (8013580 <HIDS_Upkeep+0x1c0>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	1c19      	adds	r1, r3, #0
 801348e:	1c10      	adds	r0, r2, #0
 8013490:	f7f1 f8bc 	bl	800460c <setHIDS>
      ResetMeasurementIndicator();
 8013494:	f7fe f9ce 	bl	8011834 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8013498:	4b38      	ldr	r3, [pc, #224]	@ (801357c <HIDS_Upkeep+0x1bc>)
 801349a:	681c      	ldr	r4, [r3, #0]
 801349c:	4a37      	ldr	r2, [pc, #220]	@ (801357c <HIDS_Upkeep+0x1bc>)
 801349e:	4b38      	ldr	r3, [pc, #224]	@ (8013580 <HIDS_Upkeep+0x1c0>)
 80134a0:	0011      	movs	r1, r2
 80134a2:	0018      	movs	r0, r3
 80134a4:	f7ff fd34 	bl	8012f10 <HIDS_DewPointCalculation>
 80134a8:	1c03      	adds	r3, r0, #0
 80134aa:	1c19      	adds	r1, r3, #0
 80134ac:	1c20      	adds	r0, r4, #0
 80134ae:	f7ed feb5 	bl	800121c <__aeabi_fsub>
 80134b2:	1c03      	adds	r3, r0, #0
 80134b4:	21fe      	movs	r1, #254	@ 0xfe
 80134b6:	0589      	lsls	r1, r1, #22
 80134b8:	1c18      	adds	r0, r3, #0
 80134ba:	f7ed f839 	bl	8000530 <__aeabi_fcmplt>
 80134be:	1e03      	subs	r3, r0, #0
 80134c0:	d023      	beq.n	801350a <HIDS_Upkeep+0x14a>
 80134c2:	f7f6 f802 	bl	80094ca <getPosixTime>
 80134c6:	0002      	movs	r2, r0
 80134c8:	4b2f      	ldr	r3, [pc, #188]	@ (8013588 <HIDS_Upkeep+0x1c8>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	1ad2      	subs	r2, r2, r3
 80134ce:	23e1      	movs	r3, #225	@ 0xe1
 80134d0:	009b      	lsls	r3, r3, #2
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d919      	bls.n	801350a <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 80134d6:	4a2d      	ldr	r2, [pc, #180]	@ (801358c <HIDS_Upkeep+0x1cc>)
 80134d8:	4b2d      	ldr	r3, [pc, #180]	@ (8013590 <HIDS_Upkeep+0x1d0>)
 80134da:	0019      	movs	r1, r3
 80134dc:	2002      	movs	r0, #2
 80134de:	f7ff fbb3 	bl	8012c48 <CreateLine>
        if (getSensorLock() != FREE) {
 80134e2:	f7f9 fc7b 	bl	800cddc <getSensorLock>
 80134e6:	1e03      	subs	r3, r0, #0
 80134e8:	d138      	bne.n	801355c <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 80134ea:	f7ff fd83 	bl	8012ff4 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 80134ee:	200a      	movs	r0, #10
 80134f0:	f000 f8f2 	bl	80136d8 <HAL_Delay>
        setSensorLock(FREE);
 80134f4:	2000      	movs	r0, #0
 80134f6:	f7f9 fc5d 	bl	800cdb4 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 80134fa:	f000 f8e3 	bl	80136c4 <HAL_GetTick>
 80134fe:	0003      	movs	r3, r0
 8013500:	4a24      	ldr	r2, [pc, #144]	@ (8013594 <HIDS_Upkeep+0x1d4>)
 8013502:	189a      	adds	r2, r3, r2
 8013504:	4b24      	ldr	r3, [pc, #144]	@ (8013598 <HIDS_Upkeep+0x1d8>)
 8013506:	601a      	str	r2, [r3, #0]
 8013508:	e011      	b.n	801352e <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 801350a:	f000 f8db 	bl	80136c4 <HAL_GetTick>
 801350e:	0004      	movs	r4, r0
 8013510:	f7f5 fcdc 	bl	8008ecc <Check_USB_PowerOn>
 8013514:	1e03      	subs	r3, r0, #0
 8013516:	d103      	bne.n	8013520 <HIDS_Upkeep+0x160>
 8013518:	4b20      	ldr	r3, [pc, #128]	@ (801359c <HIDS_Upkeep+0x1dc>)
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d001      	beq.n	8013524 <HIDS_Upkeep+0x164>
 8013520:	4b1f      	ldr	r3, [pc, #124]	@ (80135a0 <HIDS_Upkeep+0x1e0>)
 8013522:	e001      	b.n	8013528 <HIDS_Upkeep+0x168>
 8013524:	23fa      	movs	r3, #250	@ 0xfa
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	191a      	adds	r2, r3, r4
 801352a:	4b1b      	ldr	r3, [pc, #108]	@ (8013598 <HIDS_Upkeep+0x1d8>)
 801352c:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 801352e:	4b0f      	ldr	r3, [pc, #60]	@ (801356c <HIDS_Upkeep+0x1ac>)
 8013530:	2206      	movs	r2, #6
 8013532:	701a      	strb	r2, [r3, #0]
      break;
 8013534:	e015      	b.n	8013562 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8013536:	4b18      	ldr	r3, [pc, #96]	@ (8013598 <HIDS_Upkeep+0x1d8>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	0018      	movs	r0, r3
 801353c:	f7ff fb2e 	bl	8012b9c <TimestampIsReached>
 8013540:	1e03      	subs	r3, r0, #0
 8013542:	d00d      	beq.n	8013560 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8013544:	4b09      	ldr	r3, [pc, #36]	@ (801356c <HIDS_Upkeep+0x1ac>)
 8013546:	2200      	movs	r2, #0
 8013548:	701a      	strb	r2, [r3, #0]
      }
      break;
 801354a:	e009      	b.n	8013560 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 801354c:	4b07      	ldr	r3, [pc, #28]	@ (801356c <HIDS_Upkeep+0x1ac>)
 801354e:	2200      	movs	r2, #0
 8013550:	701a      	strb	r2, [r3, #0]
      break;
 8013552:	e006      	b.n	8013562 <HIDS_Upkeep+0x1a2>
        break;
 8013554:	46c0      	nop			@ (mov r8, r8)
 8013556:	e004      	b.n	8013562 <HIDS_Upkeep+0x1a2>
        break;
 8013558:	46c0      	nop			@ (mov r8, r8)
 801355a:	e002      	b.n	8013562 <HIDS_Upkeep+0x1a2>
          break;
 801355c:	46c0      	nop			@ (mov r8, r8)
 801355e:	e000      	b.n	8013562 <HIDS_Upkeep+0x1a2>
      break;
 8013560:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8013562:	4b02      	ldr	r3, [pc, #8]	@ (801356c <HIDS_Upkeep+0x1ac>)
 8013564:	781b      	ldrb	r3, [r3, #0]
}
 8013566:	0018      	movs	r0, r3
 8013568:	46bd      	mov	sp, r7
 801356a:	bdb0      	pop	{r4, r5, r7, pc}
 801356c:	20002238 	.word	0x20002238
 8013570:	0802d5a4 	.word	0x0802d5a4
 8013574:	0802cf90 	.word	0x0802cf90
 8013578:	0802cfc4 	.word	0x0802cfc4
 801357c:	20002210 	.word	0x20002210
 8013580:	2000220c 	.word	0x2000220c
 8013584:	0802cfc8 	.word	0x0802cfc8
 8013588:	2000222c 	.word	0x2000222c
 801358c:	0802cffc 	.word	0x0802cffc
 8013590:	0802cec8 	.word	0x0802cec8
 8013594:	00002ee0 	.word	0x00002ee0
 8013598:	20002234 	.word	0x20002234
 801359c:	20001e76 	.word	0x20001e76
 80135a0:	00002710 	.word	0x00002710

080135a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80135a4:	480d      	ldr	r0, [pc, #52]	@ (80135dc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80135a6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80135a8:	f7fe ff52 	bl	8012450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80135ac:	480c      	ldr	r0, [pc, #48]	@ (80135e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80135ae:	490d      	ldr	r1, [pc, #52]	@ (80135e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80135b0:	4a0d      	ldr	r2, [pc, #52]	@ (80135e8 <LoopForever+0xe>)
  movs r3, #0
 80135b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80135b4:	e002      	b.n	80135bc <LoopCopyDataInit>

080135b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80135b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80135b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80135ba:	3304      	adds	r3, #4

080135bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80135bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80135be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80135c0:	d3f9      	bcc.n	80135b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80135c2:	4a0a      	ldr	r2, [pc, #40]	@ (80135ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80135c4:	4c0a      	ldr	r4, [pc, #40]	@ (80135f0 <LoopForever+0x16>)
  movs r3, #0
 80135c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80135c8:	e001      	b.n	80135ce <LoopFillZerobss>

080135ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80135ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80135cc:	3204      	adds	r2, #4

080135ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80135ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80135d0:	d3fb      	bcc.n	80135ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80135d2:	f011 fe33 	bl	802523c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80135d6:	f7f8 fbb1 	bl	800bd3c <main>

080135da <LoopForever>:

LoopForever:
    b LoopForever
 80135da:	e7fe      	b.n	80135da <LoopForever>
   ldr   r0, =_estack
 80135dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80135e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80135e4:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 80135e8:	0802df70 	.word	0x0802df70
  ldr r2, =_sbss
 80135ec:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 80135f0:	20003640 	.word	0x20003640

080135f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80135f4:	e7fe      	b.n	80135f4 <ADC1_COMP_IRQHandler>
	...

080135f8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80135fe:	1dfb      	adds	r3, r7, #7
 8013600:	2200      	movs	r2, #0
 8013602:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8013604:	4b0b      	ldr	r3, [pc, #44]	@ (8013634 <HAL_Init+0x3c>)
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	4b0a      	ldr	r3, [pc, #40]	@ (8013634 <HAL_Init+0x3c>)
 801360a:	2140      	movs	r1, #64	@ 0x40
 801360c:	430a      	orrs	r2, r1
 801360e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013610:	2003      	movs	r0, #3
 8013612:	f000 f811 	bl	8013638 <HAL_InitTick>
 8013616:	1e03      	subs	r3, r0, #0
 8013618:	d003      	beq.n	8013622 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 801361a:	1dfb      	adds	r3, r7, #7
 801361c:	2201      	movs	r2, #1
 801361e:	701a      	strb	r2, [r3, #0]
 8013620:	e001      	b.n	8013626 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8013622:	f7fe fdc9 	bl	80121b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8013626:	1dfb      	adds	r3, r7, #7
 8013628:	781b      	ldrb	r3, [r3, #0]
}
 801362a:	0018      	movs	r0, r3
 801362c:	46bd      	mov	sp, r7
 801362e:	b002      	add	sp, #8
 8013630:	bd80      	pop	{r7, pc}
 8013632:	46c0      	nop			@ (mov r8, r8)
 8013634:	40022000 	.word	0x40022000

08013638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013638:	b590      	push	{r4, r7, lr}
 801363a:	b083      	sub	sp, #12
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013640:	4b14      	ldr	r3, [pc, #80]	@ (8013694 <HAL_InitTick+0x5c>)
 8013642:	681c      	ldr	r4, [r3, #0]
 8013644:	4b14      	ldr	r3, [pc, #80]	@ (8013698 <HAL_InitTick+0x60>)
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	0019      	movs	r1, r3
 801364a:	23fa      	movs	r3, #250	@ 0xfa
 801364c:	0098      	lsls	r0, r3, #2
 801364e:	f7ec fda9 	bl	80001a4 <__udivsi3>
 8013652:	0003      	movs	r3, r0
 8013654:	0019      	movs	r1, r3
 8013656:	0020      	movs	r0, r4
 8013658:	f7ec fda4 	bl	80001a4 <__udivsi3>
 801365c:	0003      	movs	r3, r0
 801365e:	0018      	movs	r0, r3
 8013660:	f000 fcfd 	bl	801405e <HAL_SYSTICK_Config>
 8013664:	1e03      	subs	r3, r0, #0
 8013666:	d001      	beq.n	801366c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8013668:	2301      	movs	r3, #1
 801366a:	e00f      	b.n	801368c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b03      	cmp	r3, #3
 8013670:	d80b      	bhi.n	801368a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013672:	6879      	ldr	r1, [r7, #4]
 8013674:	2301      	movs	r3, #1
 8013676:	425b      	negs	r3, r3
 8013678:	2200      	movs	r2, #0
 801367a:	0018      	movs	r0, r3
 801367c:	f000 fcc6 	bl	801400c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013680:	4b06      	ldr	r3, [pc, #24]	@ (801369c <HAL_InitTick+0x64>)
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013686:	2300      	movs	r3, #0
 8013688:	e000      	b.n	801368c <HAL_InitTick+0x54>
    return HAL_ERROR;
 801368a:	2301      	movs	r3, #1
}
 801368c:	0018      	movs	r0, r3
 801368e:	46bd      	mov	sp, r7
 8013690:	b003      	add	sp, #12
 8013692:	bd90      	pop	{r4, r7, pc}
 8013694:	200000e0 	.word	0x200000e0
 8013698:	200000f4 	.word	0x200000f4
 801369c:	200000f0 	.word	0x200000f0

080136a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80136a4:	4b05      	ldr	r3, [pc, #20]	@ (80136bc <HAL_IncTick+0x1c>)
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	001a      	movs	r2, r3
 80136aa:	4b05      	ldr	r3, [pc, #20]	@ (80136c0 <HAL_IncTick+0x20>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	18d2      	adds	r2, r2, r3
 80136b0:	4b03      	ldr	r3, [pc, #12]	@ (80136c0 <HAL_IncTick+0x20>)
 80136b2:	601a      	str	r2, [r3, #0]
}
 80136b4:	46c0      	nop			@ (mov r8, r8)
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}
 80136ba:	46c0      	nop			@ (mov r8, r8)
 80136bc:	200000f4 	.word	0x200000f4
 80136c0:	2000223c 	.word	0x2000223c

080136c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	af00      	add	r7, sp, #0
  return uwTick;
 80136c8:	4b02      	ldr	r3, [pc, #8]	@ (80136d4 <HAL_GetTick+0x10>)
 80136ca:	681b      	ldr	r3, [r3, #0]
}
 80136cc:	0018      	movs	r0, r3
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}
 80136d2:	46c0      	nop			@ (mov r8, r8)
 80136d4:	2000223c 	.word	0x2000223c

080136d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b084      	sub	sp, #16
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80136e0:	f7ff fff0 	bl	80136c4 <HAL_GetTick>
 80136e4:	0003      	movs	r3, r0
 80136e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	3301      	adds	r3, #1
 80136f0:	d005      	beq.n	80136fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80136f2:	4b0a      	ldr	r3, [pc, #40]	@ (801371c <HAL_Delay+0x44>)
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	001a      	movs	r2, r3
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	189b      	adds	r3, r3, r2
 80136fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80136fe:	46c0      	nop			@ (mov r8, r8)
 8013700:	f7ff ffe0 	bl	80136c4 <HAL_GetTick>
 8013704:	0002      	movs	r2, r0
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	1ad3      	subs	r3, r2, r3
 801370a:	68fa      	ldr	r2, [r7, #12]
 801370c:	429a      	cmp	r2, r3
 801370e:	d8f7      	bhi.n	8013700 <HAL_Delay+0x28>
  {
  }
}
 8013710:	46c0      	nop			@ (mov r8, r8)
 8013712:	46c0      	nop			@ (mov r8, r8)
 8013714:	46bd      	mov	sp, r7
 8013716:	b004      	add	sp, #16
 8013718:	bd80      	pop	{r7, pc}
 801371a:	46c0      	nop			@ (mov r8, r8)
 801371c:	200000f4 	.word	0x200000f4

08013720 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8013724:	4b04      	ldr	r3, [pc, #16]	@ (8013738 <HAL_SuspendTick+0x18>)
 8013726:	681a      	ldr	r2, [r3, #0]
 8013728:	4b03      	ldr	r3, [pc, #12]	@ (8013738 <HAL_SuspendTick+0x18>)
 801372a:	2102      	movs	r1, #2
 801372c:	438a      	bics	r2, r1
 801372e:	601a      	str	r2, [r3, #0]
}
 8013730:	46c0      	nop			@ (mov r8, r8)
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	46c0      	nop			@ (mov r8, r8)
 8013738:	e000e010 	.word	0xe000e010

0801373c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8013740:	4b04      	ldr	r3, [pc, #16]	@ (8013754 <HAL_ResumeTick+0x18>)
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	4b03      	ldr	r3, [pc, #12]	@ (8013754 <HAL_ResumeTick+0x18>)
 8013746:	2102      	movs	r1, #2
 8013748:	430a      	orrs	r2, r1
 801374a:	601a      	str	r2, [r3, #0]
}
 801374c:	46c0      	nop			@ (mov r8, r8)
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
 8013752:	46c0      	nop			@ (mov r8, r8)
 8013754:	e000e010 	.word	0xe000e010

08013758 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 801375c:	4b02      	ldr	r3, [pc, #8]	@ (8013768 <HAL_GetUIDw0+0x10>)
 801375e:	681b      	ldr	r3, [r3, #0]
}
 8013760:	0018      	movs	r0, r3
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	46c0      	nop			@ (mov r8, r8)
 8013768:	1ff80050 	.word	0x1ff80050

0801376c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8013770:	4b02      	ldr	r3, [pc, #8]	@ (801377c <HAL_GetUIDw1+0x10>)
 8013772:	681b      	ldr	r3, [r3, #0]
}
 8013774:	0018      	movs	r0, r3
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	46c0      	nop			@ (mov r8, r8)
 801377c:	1ff80054 	.word	0x1ff80054

08013780 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8013784:	4b02      	ldr	r3, [pc, #8]	@ (8013790 <HAL_GetUIDw2+0x10>)
 8013786:	681b      	ldr	r3, [r3, #0]
}
 8013788:	0018      	movs	r0, r3
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	46c0      	nop			@ (mov r8, r8)
 8013790:	1ff80064 	.word	0x1ff80064

08013794 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d101      	bne.n	80137a6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80137a2:	2301      	movs	r3, #1
 80137a4:	e159      	b.n	8013a5a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d10a      	bne.n	80137c4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2200      	movs	r2, #0
 80137b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2250      	movs	r2, #80	@ 0x50
 80137b8:	2100      	movs	r1, #0
 80137ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	0018      	movs	r0, r3
 80137c0:	f7f6 fa3c 	bl	8009c3c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137c8:	2210      	movs	r2, #16
 80137ca:	4013      	ands	r3, r2
 80137cc:	2b10      	cmp	r3, #16
 80137ce:	d005      	beq.n	80137dc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	2204      	movs	r2, #4
 80137d8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80137da:	d00b      	beq.n	80137f4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137e0:	2210      	movs	r2, #16
 80137e2:	431a      	orrs	r2, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2250      	movs	r2, #80	@ 0x50
 80137ec:	2100      	movs	r1, #0
 80137ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80137f0:	2301      	movs	r3, #1
 80137f2:	e132      	b.n	8013a5a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137f8:	4a9a      	ldr	r2, [pc, #616]	@ (8013a64 <HAL_ADC_Init+0x2d0>)
 80137fa:	4013      	ands	r3, r2
 80137fc:	2202      	movs	r2, #2
 80137fe:	431a      	orrs	r2, r3
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	689b      	ldr	r3, [r3, #8]
 801380a:	2203      	movs	r2, #3
 801380c:	4013      	ands	r3, r2
 801380e:	2b01      	cmp	r3, #1
 8013810:	d108      	bne.n	8013824 <HAL_ADC_Init+0x90>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	2201      	movs	r2, #1
 801381a:	4013      	ands	r3, r2
 801381c:	2b01      	cmp	r3, #1
 801381e:	d101      	bne.n	8013824 <HAL_ADC_Init+0x90>
 8013820:	2301      	movs	r3, #1
 8013822:	e000      	b.n	8013826 <HAL_ADC_Init+0x92>
 8013824:	2300      	movs	r3, #0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d149      	bne.n	80138be <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	685a      	ldr	r2, [r3, #4]
 801382e:	23c0      	movs	r3, #192	@ 0xc0
 8013830:	061b      	lsls	r3, r3, #24
 8013832:	429a      	cmp	r2, r3
 8013834:	d00b      	beq.n	801384e <HAL_ADC_Init+0xba>
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	685a      	ldr	r2, [r3, #4]
 801383a:	2380      	movs	r3, #128	@ 0x80
 801383c:	05db      	lsls	r3, r3, #23
 801383e:	429a      	cmp	r2, r3
 8013840:	d005      	beq.n	801384e <HAL_ADC_Init+0xba>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	685a      	ldr	r2, [r3, #4]
 8013846:	2380      	movs	r3, #128	@ 0x80
 8013848:	061b      	lsls	r3, r3, #24
 801384a:	429a      	cmp	r2, r3
 801384c:	d111      	bne.n	8013872 <HAL_ADC_Init+0xde>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	691a      	ldr	r2, [r3, #16]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	0092      	lsls	r2, r2, #2
 801385a:	0892      	lsrs	r2, r2, #2
 801385c:	611a      	str	r2, [r3, #16]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	6919      	ldr	r1, [r3, #16]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	685a      	ldr	r2, [r3, #4]
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	430a      	orrs	r2, r1
 801386e:	611a      	str	r2, [r3, #16]
 8013870:	e014      	b.n	801389c <HAL_ADC_Init+0x108>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	691a      	ldr	r2, [r3, #16]
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	0092      	lsls	r2, r2, #2
 801387e:	0892      	lsrs	r2, r2, #2
 8013880:	611a      	str	r2, [r3, #16]
 8013882:	4b79      	ldr	r3, [pc, #484]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	4b78      	ldr	r3, [pc, #480]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 8013888:	4978      	ldr	r1, [pc, #480]	@ (8013a6c <HAL_ADC_Init+0x2d8>)
 801388a:	400a      	ands	r2, r1
 801388c:	601a      	str	r2, [r3, #0]
 801388e:	4b76      	ldr	r3, [pc, #472]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 8013890:	6819      	ldr	r1, [r3, #0]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	685a      	ldr	r2, [r3, #4]
 8013896:	4b74      	ldr	r3, [pc, #464]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 8013898:	430a      	orrs	r2, r1
 801389a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	68da      	ldr	r2, [r3, #12]
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2118      	movs	r1, #24
 80138a8:	438a      	bics	r2, r1
 80138aa:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	68d9      	ldr	r1, [r3, #12]
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	689a      	ldr	r2, [r3, #8]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	430a      	orrs	r2, r1
 80138bc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80138be:	4b6a      	ldr	r3, [pc, #424]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 80138c0:	681a      	ldr	r2, [r3, #0]
 80138c2:	4b69      	ldr	r3, [pc, #420]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 80138c4:	496a      	ldr	r1, [pc, #424]	@ (8013a70 <HAL_ADC_Init+0x2dc>)
 80138c6:	400a      	ands	r2, r1
 80138c8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80138ca:	4b67      	ldr	r3, [pc, #412]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 80138cc:	6819      	ldr	r1, [r3, #0]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80138d2:	065a      	lsls	r2, r3, #25
 80138d4:	4b64      	ldr	r3, [pc, #400]	@ (8013a68 <HAL_ADC_Init+0x2d4>)
 80138d6:	430a      	orrs	r2, r1
 80138d8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	689a      	ldr	r2, [r3, #8]
 80138e0:	2380      	movs	r3, #128	@ 0x80
 80138e2:	055b      	lsls	r3, r3, #21
 80138e4:	4013      	ands	r3, r2
 80138e6:	d108      	bne.n	80138fa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	689a      	ldr	r2, [r3, #8]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	2180      	movs	r1, #128	@ 0x80
 80138f4:	0549      	lsls	r1, r1, #21
 80138f6:	430a      	orrs	r2, r1
 80138f8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	68da      	ldr	r2, [r3, #12]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	495b      	ldr	r1, [pc, #364]	@ (8013a74 <HAL_ADC_Init+0x2e0>)
 8013906:	400a      	ands	r2, r1
 8013908:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	68d9      	ldr	r1, [r3, #12]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	691b      	ldr	r3, [r3, #16]
 8013918:	2b02      	cmp	r3, #2
 801391a:	d101      	bne.n	8013920 <HAL_ADC_Init+0x18c>
 801391c:	2304      	movs	r3, #4
 801391e:	e000      	b.n	8013922 <HAL_ADC_Init+0x18e>
 8013920:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013922:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2020      	movs	r0, #32
 8013928:	5c1b      	ldrb	r3, [r3, r0]
 801392a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801392c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	202c      	movs	r0, #44	@ 0x2c
 8013932:	5c1b      	ldrb	r3, [r3, r0]
 8013934:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013936:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801393c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	699b      	ldr	r3, [r3, #24]
 8013942:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8013944:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	69db      	ldr	r3, [r3, #28]
 801394a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801394c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	430a      	orrs	r2, r1
 8013954:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801395a:	23c2      	movs	r3, #194	@ 0xc2
 801395c:	33ff      	adds	r3, #255	@ 0xff
 801395e:	429a      	cmp	r2, r3
 8013960:	d00b      	beq.n	801397a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	68d9      	ldr	r1, [r3, #12]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013970:	431a      	orrs	r2, r3
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	430a      	orrs	r2, r1
 8013978:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2221      	movs	r2, #33	@ 0x21
 801397e:	5c9b      	ldrb	r3, [r3, r2]
 8013980:	2b01      	cmp	r3, #1
 8013982:	d11a      	bne.n	80139ba <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2220      	movs	r2, #32
 8013988:	5c9b      	ldrb	r3, [r3, r2]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d109      	bne.n	80139a2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	68da      	ldr	r2, [r3, #12]
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2180      	movs	r1, #128	@ 0x80
 801399a:	0249      	lsls	r1, r1, #9
 801399c:	430a      	orrs	r2, r1
 801399e:	60da      	str	r2, [r3, #12]
 80139a0:	e00b      	b.n	80139ba <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80139a6:	2220      	movs	r2, #32
 80139a8:	431a      	orrs	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80139b2:	2201      	movs	r2, #1
 80139b4:	431a      	orrs	r2, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139be:	2b01      	cmp	r3, #1
 80139c0:	d11f      	bne.n	8013a02 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	691a      	ldr	r2, [r3, #16]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	492a      	ldr	r1, [pc, #168]	@ (8013a78 <HAL_ADC_Init+0x2e4>)
 80139ce:	400a      	ands	r2, r1
 80139d0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	6919      	ldr	r1, [r3, #16]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80139e0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80139e6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	430a      	orrs	r2, r1
 80139ee:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	691a      	ldr	r2, [r3, #16]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	2101      	movs	r1, #1
 80139fc:	430a      	orrs	r2, r1
 80139fe:	611a      	str	r2, [r3, #16]
 8013a00:	e00e      	b.n	8013a20 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	691b      	ldr	r3, [r3, #16]
 8013a08:	2201      	movs	r2, #1
 8013a0a:	4013      	ands	r3, r2
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	d107      	bne.n	8013a20 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	691a      	ldr	r2, [r3, #16]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2101      	movs	r1, #1
 8013a1c:	438a      	bics	r2, r1
 8013a1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	695a      	ldr	r2, [r3, #20]
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	2107      	movs	r1, #7
 8013a2c:	438a      	bics	r2, r1
 8013a2e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	6959      	ldr	r1, [r3, #20]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	430a      	orrs	r2, r1
 8013a40:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	2200      	movs	r2, #0
 8013a46:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a4c:	2203      	movs	r2, #3
 8013a4e:	4393      	bics	r3, r2
 8013a50:	2201      	movs	r2, #1
 8013a52:	431a      	orrs	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8013a58:	2300      	movs	r3, #0
}
 8013a5a:	0018      	movs	r0, r3
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	b002      	add	sp, #8
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	46c0      	nop			@ (mov r8, r8)
 8013a64:	fffffefd 	.word	0xfffffefd
 8013a68:	40012708 	.word	0x40012708
 8013a6c:	ffc3ffff 	.word	0xffc3ffff
 8013a70:	fdffffff 	.word	0xfdffffff
 8013a74:	fffe0219 	.word	0xfffe0219
 8013a78:	fffffc03 	.word	0xfffffc03

08013a7c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8013a7c:	b590      	push	{r4, r7, lr}
 8013a7e:	b085      	sub	sp, #20
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013a84:	230f      	movs	r3, #15
 8013a86:	18fb      	adds	r3, r7, r3
 8013a88:	2200      	movs	r2, #0
 8013a8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	689b      	ldr	r3, [r3, #8]
 8013a92:	2204      	movs	r2, #4
 8013a94:	4013      	ands	r3, r2
 8013a96:	d138      	bne.n	8013b0a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2250      	movs	r2, #80	@ 0x50
 8013a9c:	5c9b      	ldrb	r3, [r3, r2]
 8013a9e:	2b01      	cmp	r3, #1
 8013aa0:	d101      	bne.n	8013aa6 <HAL_ADC_Start+0x2a>
 8013aa2:	2302      	movs	r3, #2
 8013aa4:	e038      	b.n	8013b18 <HAL_ADC_Start+0x9c>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2250      	movs	r2, #80	@ 0x50
 8013aaa:	2101      	movs	r1, #1
 8013aac:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	69db      	ldr	r3, [r3, #28]
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d007      	beq.n	8013ac6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8013ab6:	230f      	movs	r3, #15
 8013ab8:	18fc      	adds	r4, r7, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	0018      	movs	r0, r3
 8013abe:	f000 f95f 	bl	8013d80 <ADC_Enable>
 8013ac2:	0003      	movs	r3, r0
 8013ac4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8013ac6:	230f      	movs	r3, #15
 8013ac8:	18fb      	adds	r3, r7, r3
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d120      	bne.n	8013b12 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ad4:	4a12      	ldr	r2, [pc, #72]	@ (8013b20 <HAL_ADC_Start+0xa4>)
 8013ad6:	4013      	ands	r3, r2
 8013ad8:	2280      	movs	r2, #128	@ 0x80
 8013ada:	0052      	lsls	r2, r2, #1
 8013adc:	431a      	orrs	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2250      	movs	r2, #80	@ 0x50
 8013aec:	2100      	movs	r1, #0
 8013aee:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	221c      	movs	r2, #28
 8013af6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	689a      	ldr	r2, [r3, #8]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2104      	movs	r1, #4
 8013b04:	430a      	orrs	r2, r1
 8013b06:	609a      	str	r2, [r3, #8]
 8013b08:	e003      	b.n	8013b12 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013b0a:	230f      	movs	r3, #15
 8013b0c:	18fb      	adds	r3, r7, r3
 8013b0e:	2202      	movs	r2, #2
 8013b10:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8013b12:	230f      	movs	r3, #15
 8013b14:	18fb      	adds	r3, r7, r3
 8013b16:	781b      	ldrb	r3, [r3, #0]
}
 8013b18:	0018      	movs	r0, r3
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	b005      	add	sp, #20
 8013b1e:	bd90      	pop	{r4, r7, pc}
 8013b20:	fffff0fe 	.word	0xfffff0fe

08013b24 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8013b32:	2300      	movs	r3, #0
 8013b34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	2b08      	cmp	r3, #8
 8013b3c:	d102      	bne.n	8013b44 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8013b3e:	2308      	movs	r3, #8
 8013b40:	60fb      	str	r3, [r7, #12]
 8013b42:	e014      	b.n	8013b6e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	4013      	ands	r3, r2
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d10b      	bne.n	8013b6a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013b56:	2220      	movs	r2, #32
 8013b58:	431a      	orrs	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2250      	movs	r2, #80	@ 0x50
 8013b62:	2100      	movs	r1, #0
 8013b64:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8013b66:	2301      	movs	r3, #1
 8013b68:	e072      	b.n	8013c50 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8013b6a:	230c      	movs	r3, #12
 8013b6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8013b6e:	f7ff fda9 	bl	80136c4 <HAL_GetTick>
 8013b72:	0003      	movs	r3, r0
 8013b74:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8013b76:	e01f      	b.n	8013bb8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	d01c      	beq.n	8013bb8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d007      	beq.n	8013b94 <HAL_ADC_PollForConversion+0x70>
 8013b84:	f7ff fd9e 	bl	80136c4 <HAL_GetTick>
 8013b88:	0002      	movs	r2, r0
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	683a      	ldr	r2, [r7, #0]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d211      	bcs.n	8013bb8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	4013      	ands	r3, r2
 8013b9e:	d10b      	bne.n	8013bb8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ba4:	2204      	movs	r2, #4
 8013ba6:	431a      	orrs	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2250      	movs	r2, #80	@ 0x50
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8013bb4:	2303      	movs	r3, #3
 8013bb6:	e04b      	b.n	8013c50 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	68fa      	ldr	r2, [r7, #12]
 8013bc0:	4013      	ands	r3, r2
 8013bc2:	d0d9      	beq.n	8013b78 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013bc8:	2280      	movs	r2, #128	@ 0x80
 8013bca:	0092      	lsls	r2, r2, #2
 8013bcc:	431a      	orrs	r2, r3
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	68da      	ldr	r2, [r3, #12]
 8013bd8:	23c0      	movs	r3, #192	@ 0xc0
 8013bda:	011b      	lsls	r3, r3, #4
 8013bdc:	4013      	ands	r3, r2
 8013bde:	d12e      	bne.n	8013c3e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2220      	movs	r2, #32
 8013be4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d129      	bne.n	8013c3e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2208      	movs	r2, #8
 8013bf2:	4013      	ands	r3, r2
 8013bf4:	2b08      	cmp	r3, #8
 8013bf6:	d122      	bne.n	8013c3e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	689b      	ldr	r3, [r3, #8]
 8013bfe:	2204      	movs	r2, #4
 8013c00:	4013      	ands	r3, r2
 8013c02:	d110      	bne.n	8013c26 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	685a      	ldr	r2, [r3, #4]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	210c      	movs	r1, #12
 8013c10:	438a      	bics	r2, r1
 8013c12:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c18:	4a0f      	ldr	r2, [pc, #60]	@ (8013c58 <HAL_ADC_PollForConversion+0x134>)
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	431a      	orrs	r2, r3
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	655a      	str	r2, [r3, #84]	@ 0x54
 8013c24:	e00b      	b.n	8013c3e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c2a:	2220      	movs	r2, #32
 8013c2c:	431a      	orrs	r2, r3
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013c36:	2201      	movs	r2, #1
 8013c38:	431a      	orrs	r2, r3
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	699b      	ldr	r3, [r3, #24]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d103      	bne.n	8013c4e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	220c      	movs	r2, #12
 8013c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013c4e:	2300      	movs	r3, #0
}
 8013c50:	0018      	movs	r0, r3
 8013c52:	46bd      	mov	sp, r7
 8013c54:	b004      	add	sp, #16
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	fffffefe 	.word	0xfffffefe

08013c5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8013c6a:	0018      	movs	r0, r3
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	b002      	add	sp, #8
 8013c70:	bd80      	pop	{r7, pc}
	...

08013c74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2250      	movs	r2, #80	@ 0x50
 8013c82:	5c9b      	ldrb	r3, [r3, r2]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d101      	bne.n	8013c8c <HAL_ADC_ConfigChannel+0x18>
 8013c88:	2302      	movs	r3, #2
 8013c8a:	e06c      	b.n	8013d66 <HAL_ADC_ConfigChannel+0xf2>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2250      	movs	r2, #80	@ 0x50
 8013c90:	2101      	movs	r1, #1
 8013c92:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	689b      	ldr	r3, [r3, #8]
 8013c9a:	2204      	movs	r2, #4
 8013c9c:	4013      	ands	r3, r2
 8013c9e:	d00b      	beq.n	8013cb8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ca4:	2220      	movs	r2, #32
 8013ca6:	431a      	orrs	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2250      	movs	r2, #80	@ 0x50
 8013cb0:	2100      	movs	r1, #0
 8013cb2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	e056      	b.n	8013d66 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8013d70 <HAL_ADC_ConfigChannel+0xfc>)
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d028      	beq.n	8013d14 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	035b      	lsls	r3, r3, #13
 8013cce:	0b5a      	lsrs	r2, r3, #13
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	430a      	orrs	r2, r1
 8013cd6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	2380      	movs	r3, #128	@ 0x80
 8013cde:	02db      	lsls	r3, r3, #11
 8013ce0:	4013      	ands	r3, r2
 8013ce2:	d009      	beq.n	8013cf8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8013ce4:	4b23      	ldr	r3, [pc, #140]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013ce6:	681a      	ldr	r2, [r3, #0]
 8013ce8:	4b22      	ldr	r3, [pc, #136]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013cea:	2180      	movs	r1, #128	@ 0x80
 8013cec:	0409      	lsls	r1, r1, #16
 8013cee:	430a      	orrs	r2, r1
 8013cf0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8013cf2:	200a      	movs	r0, #10
 8013cf4:	f000 f8ac 	bl	8013e50 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	2380      	movs	r3, #128	@ 0x80
 8013cfe:	029b      	lsls	r3, r3, #10
 8013d00:	4013      	ands	r3, r2
 8013d02:	d02b      	beq.n	8013d5c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8013d04:	4b1b      	ldr	r3, [pc, #108]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013d06:	681a      	ldr	r2, [r3, #0]
 8013d08:	4b1a      	ldr	r3, [pc, #104]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013d0a:	2180      	movs	r1, #128	@ 0x80
 8013d0c:	03c9      	lsls	r1, r1, #15
 8013d0e:	430a      	orrs	r2, r1
 8013d10:	601a      	str	r2, [r3, #0]
 8013d12:	e023      	b.n	8013d5c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	035b      	lsls	r3, r3, #13
 8013d20:	0b5b      	lsrs	r3, r3, #13
 8013d22:	43d9      	mvns	r1, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	400a      	ands	r2, r1
 8013d2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	2380      	movs	r3, #128	@ 0x80
 8013d32:	02db      	lsls	r3, r3, #11
 8013d34:	4013      	ands	r3, r2
 8013d36:	d005      	beq.n	8013d44 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8013d38:	4b0e      	ldr	r3, [pc, #56]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013d3e:	490e      	ldr	r1, [pc, #56]	@ (8013d78 <HAL_ADC_ConfigChannel+0x104>)
 8013d40:	400a      	ands	r2, r1
 8013d42:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	681a      	ldr	r2, [r3, #0]
 8013d48:	2380      	movs	r3, #128	@ 0x80
 8013d4a:	029b      	lsls	r3, r3, #10
 8013d4c:	4013      	ands	r3, r2
 8013d4e:	d005      	beq.n	8013d5c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8013d50:	4b08      	ldr	r3, [pc, #32]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	4b07      	ldr	r3, [pc, #28]	@ (8013d74 <HAL_ADC_ConfigChannel+0x100>)
 8013d56:	4909      	ldr	r1, [pc, #36]	@ (8013d7c <HAL_ADC_ConfigChannel+0x108>)
 8013d58:	400a      	ands	r2, r1
 8013d5a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2250      	movs	r2, #80	@ 0x50
 8013d60:	2100      	movs	r1, #0
 8013d62:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8013d64:	2300      	movs	r3, #0
}
 8013d66:	0018      	movs	r0, r3
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	b002      	add	sp, #8
 8013d6c:	bd80      	pop	{r7, pc}
 8013d6e:	46c0      	nop			@ (mov r8, r8)
 8013d70:	00001001 	.word	0x00001001
 8013d74:	40012708 	.word	0x40012708
 8013d78:	ff7fffff 	.word	0xff7fffff
 8013d7c:	ffbfffff 	.word	0xffbfffff

08013d80 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	689b      	ldr	r3, [r3, #8]
 8013d92:	2203      	movs	r2, #3
 8013d94:	4013      	ands	r3, r2
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	d108      	bne.n	8013dac <ADC_Enable+0x2c>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2201      	movs	r2, #1
 8013da2:	4013      	ands	r3, r2
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d101      	bne.n	8013dac <ADC_Enable+0x2c>
 8013da8:	2301      	movs	r3, #1
 8013daa:	e000      	b.n	8013dae <ADC_Enable+0x2e>
 8013dac:	2300      	movs	r3, #0
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d146      	bne.n	8013e40 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	4a24      	ldr	r2, [pc, #144]	@ (8013e4c <ADC_Enable+0xcc>)
 8013dba:	4013      	ands	r3, r2
 8013dbc:	d00d      	beq.n	8013dda <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013dc2:	2210      	movs	r2, #16
 8013dc4:	431a      	orrs	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013dce:	2201      	movs	r2, #1
 8013dd0:	431a      	orrs	r2, r3
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e033      	b.n	8013e42 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	689a      	ldr	r2, [r3, #8]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2101      	movs	r1, #1
 8013de6:	430a      	orrs	r2, r1
 8013de8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8013dea:	2001      	movs	r0, #1
 8013dec:	f000 f830 	bl	8013e50 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8013df0:	f7ff fc68 	bl	80136c4 <HAL_GetTick>
 8013df4:	0003      	movs	r3, r0
 8013df6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013df8:	e01b      	b.n	8013e32 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8013dfa:	f7ff fc63 	bl	80136c4 <HAL_GetTick>
 8013dfe:	0002      	movs	r2, r0
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	1ad3      	subs	r3, r2, r3
 8013e04:	2b0a      	cmp	r3, #10
 8013e06:	d914      	bls.n	8013e32 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	2201      	movs	r2, #1
 8013e10:	4013      	ands	r3, r2
 8013e12:	2b01      	cmp	r3, #1
 8013e14:	d00d      	beq.n	8013e32 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e1a:	2210      	movs	r2, #16
 8013e1c:	431a      	orrs	r2, r3
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e26:	2201      	movs	r2, #1
 8013e28:	431a      	orrs	r2, r3
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8013e2e:	2301      	movs	r3, #1
 8013e30:	e007      	b.n	8013e42 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	2201      	movs	r2, #1
 8013e3a:	4013      	ands	r3, r2
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d1dc      	bne.n	8013dfa <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8013e40:	2300      	movs	r3, #0
}
 8013e42:	0018      	movs	r0, r3
 8013e44:	46bd      	mov	sp, r7
 8013e46:	b004      	add	sp, #16
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	46c0      	nop			@ (mov r8, r8)
 8013e4c:	80000017 	.word	0x80000017

08013e50 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b084      	sub	sp, #16
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8013e58:	4b0b      	ldr	r3, [pc, #44]	@ (8013e88 <ADC_DelayMicroSecond+0x38>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	490b      	ldr	r1, [pc, #44]	@ (8013e8c <ADC_DelayMicroSecond+0x3c>)
 8013e5e:	0018      	movs	r0, r3
 8013e60:	f7ec f9a0 	bl	80001a4 <__udivsi3>
 8013e64:	0003      	movs	r3, r0
 8013e66:	001a      	movs	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	4353      	muls	r3, r2
 8013e6c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8013e6e:	e002      	b.n	8013e76 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	3b01      	subs	r3, #1
 8013e74:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d1f9      	bne.n	8013e70 <ADC_DelayMicroSecond+0x20>
  }
}
 8013e7c:	46c0      	nop			@ (mov r8, r8)
 8013e7e:	46c0      	nop			@ (mov r8, r8)
 8013e80:	46bd      	mov	sp, r7
 8013e82:	b004      	add	sp, #16
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	46c0      	nop			@ (mov r8, r8)
 8013e88:	200000e0 	.word	0x200000e0
 8013e8c:	000f4240 	.word	0x000f4240

08013e90 <__NVIC_EnableIRQ>:
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	0002      	movs	r2, r0
 8013e98:	1dfb      	adds	r3, r7, #7
 8013e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013e9c:	1dfb      	adds	r3, r7, #7
 8013e9e:	781b      	ldrb	r3, [r3, #0]
 8013ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ea2:	d809      	bhi.n	8013eb8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013ea4:	1dfb      	adds	r3, r7, #7
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	001a      	movs	r2, r3
 8013eaa:	231f      	movs	r3, #31
 8013eac:	401a      	ands	r2, r3
 8013eae:	4b04      	ldr	r3, [pc, #16]	@ (8013ec0 <__NVIC_EnableIRQ+0x30>)
 8013eb0:	2101      	movs	r1, #1
 8013eb2:	4091      	lsls	r1, r2
 8013eb4:	000a      	movs	r2, r1
 8013eb6:	601a      	str	r2, [r3, #0]
}
 8013eb8:	46c0      	nop			@ (mov r8, r8)
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	b002      	add	sp, #8
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	e000e100 	.word	0xe000e100

08013ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013ec4:	b590      	push	{r4, r7, lr}
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	0002      	movs	r2, r0
 8013ecc:	6039      	str	r1, [r7, #0]
 8013ece:	1dfb      	adds	r3, r7, #7
 8013ed0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8013ed2:	1dfb      	adds	r3, r7, #7
 8013ed4:	781b      	ldrb	r3, [r3, #0]
 8013ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ed8:	d828      	bhi.n	8013f2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013eda:	4a2f      	ldr	r2, [pc, #188]	@ (8013f98 <__NVIC_SetPriority+0xd4>)
 8013edc:	1dfb      	adds	r3, r7, #7
 8013ede:	781b      	ldrb	r3, [r3, #0]
 8013ee0:	b25b      	sxtb	r3, r3
 8013ee2:	089b      	lsrs	r3, r3, #2
 8013ee4:	33c0      	adds	r3, #192	@ 0xc0
 8013ee6:	009b      	lsls	r3, r3, #2
 8013ee8:	589b      	ldr	r3, [r3, r2]
 8013eea:	1dfa      	adds	r2, r7, #7
 8013eec:	7812      	ldrb	r2, [r2, #0]
 8013eee:	0011      	movs	r1, r2
 8013ef0:	2203      	movs	r2, #3
 8013ef2:	400a      	ands	r2, r1
 8013ef4:	00d2      	lsls	r2, r2, #3
 8013ef6:	21ff      	movs	r1, #255	@ 0xff
 8013ef8:	4091      	lsls	r1, r2
 8013efa:	000a      	movs	r2, r1
 8013efc:	43d2      	mvns	r2, r2
 8013efe:	401a      	ands	r2, r3
 8013f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	019b      	lsls	r3, r3, #6
 8013f06:	22ff      	movs	r2, #255	@ 0xff
 8013f08:	401a      	ands	r2, r3
 8013f0a:	1dfb      	adds	r3, r7, #7
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	0018      	movs	r0, r3
 8013f10:	2303      	movs	r3, #3
 8013f12:	4003      	ands	r3, r0
 8013f14:	00db      	lsls	r3, r3, #3
 8013f16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013f18:	481f      	ldr	r0, [pc, #124]	@ (8013f98 <__NVIC_SetPriority+0xd4>)
 8013f1a:	1dfb      	adds	r3, r7, #7
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	b25b      	sxtb	r3, r3
 8013f20:	089b      	lsrs	r3, r3, #2
 8013f22:	430a      	orrs	r2, r1
 8013f24:	33c0      	adds	r3, #192	@ 0xc0
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8013f2a:	e031      	b.n	8013f90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8013f9c <__NVIC_SetPriority+0xd8>)
 8013f2e:	1dfb      	adds	r3, r7, #7
 8013f30:	781b      	ldrb	r3, [r3, #0]
 8013f32:	0019      	movs	r1, r3
 8013f34:	230f      	movs	r3, #15
 8013f36:	400b      	ands	r3, r1
 8013f38:	3b08      	subs	r3, #8
 8013f3a:	089b      	lsrs	r3, r3, #2
 8013f3c:	3306      	adds	r3, #6
 8013f3e:	009b      	lsls	r3, r3, #2
 8013f40:	18d3      	adds	r3, r2, r3
 8013f42:	3304      	adds	r3, #4
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	1dfa      	adds	r2, r7, #7
 8013f48:	7812      	ldrb	r2, [r2, #0]
 8013f4a:	0011      	movs	r1, r2
 8013f4c:	2203      	movs	r2, #3
 8013f4e:	400a      	ands	r2, r1
 8013f50:	00d2      	lsls	r2, r2, #3
 8013f52:	21ff      	movs	r1, #255	@ 0xff
 8013f54:	4091      	lsls	r1, r2
 8013f56:	000a      	movs	r2, r1
 8013f58:	43d2      	mvns	r2, r2
 8013f5a:	401a      	ands	r2, r3
 8013f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	019b      	lsls	r3, r3, #6
 8013f62:	22ff      	movs	r2, #255	@ 0xff
 8013f64:	401a      	ands	r2, r3
 8013f66:	1dfb      	adds	r3, r7, #7
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	0018      	movs	r0, r3
 8013f6c:	2303      	movs	r3, #3
 8013f6e:	4003      	ands	r3, r0
 8013f70:	00db      	lsls	r3, r3, #3
 8013f72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013f74:	4809      	ldr	r0, [pc, #36]	@ (8013f9c <__NVIC_SetPriority+0xd8>)
 8013f76:	1dfb      	adds	r3, r7, #7
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	001c      	movs	r4, r3
 8013f7c:	230f      	movs	r3, #15
 8013f7e:	4023      	ands	r3, r4
 8013f80:	3b08      	subs	r3, #8
 8013f82:	089b      	lsrs	r3, r3, #2
 8013f84:	430a      	orrs	r2, r1
 8013f86:	3306      	adds	r3, #6
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	18c3      	adds	r3, r0, r3
 8013f8c:	3304      	adds	r3, #4
 8013f8e:	601a      	str	r2, [r3, #0]
}
 8013f90:	46c0      	nop			@ (mov r8, r8)
 8013f92:	46bd      	mov	sp, r7
 8013f94:	b003      	add	sp, #12
 8013f96:	bd90      	pop	{r4, r7, pc}
 8013f98:	e000e100 	.word	0xe000e100
 8013f9c:	e000ed00 	.word	0xe000ed00

08013fa0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013fa4:	f3bf 8f4f 	dsb	sy
}
 8013fa8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013faa:	4b04      	ldr	r3, [pc, #16]	@ (8013fbc <__NVIC_SystemReset+0x1c>)
 8013fac:	4a04      	ldr	r2, [pc, #16]	@ (8013fc0 <__NVIC_SystemReset+0x20>)
 8013fae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013fb0:	f3bf 8f4f 	dsb	sy
}
 8013fb4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8013fb6:	46c0      	nop			@ (mov r8, r8)
 8013fb8:	e7fd      	b.n	8013fb6 <__NVIC_SystemReset+0x16>
 8013fba:	46c0      	nop			@ (mov r8, r8)
 8013fbc:	e000ed00 	.word	0xe000ed00
 8013fc0:	05fa0004 	.word	0x05fa0004

08013fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	1e5a      	subs	r2, r3, #1
 8013fd0:	2380      	movs	r3, #128	@ 0x80
 8013fd2:	045b      	lsls	r3, r3, #17
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d301      	bcc.n	8013fdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8013fd8:	2301      	movs	r3, #1
 8013fda:	e010      	b.n	8013ffe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8013fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8014008 <SysTick_Config+0x44>)
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	3a01      	subs	r2, #1
 8013fe2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	425b      	negs	r3, r3
 8013fe8:	2103      	movs	r1, #3
 8013fea:	0018      	movs	r0, r3
 8013fec:	f7ff ff6a 	bl	8013ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8013ff0:	4b05      	ldr	r3, [pc, #20]	@ (8014008 <SysTick_Config+0x44>)
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013ff6:	4b04      	ldr	r3, [pc, #16]	@ (8014008 <SysTick_Config+0x44>)
 8013ff8:	2207      	movs	r2, #7
 8013ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013ffc:	2300      	movs	r3, #0
}
 8013ffe:	0018      	movs	r0, r3
 8014000:	46bd      	mov	sp, r7
 8014002:	b002      	add	sp, #8
 8014004:	bd80      	pop	{r7, pc}
 8014006:	46c0      	nop			@ (mov r8, r8)
 8014008:	e000e010 	.word	0xe000e010

0801400c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801400c:	b580      	push	{r7, lr}
 801400e:	b084      	sub	sp, #16
 8014010:	af00      	add	r7, sp, #0
 8014012:	60b9      	str	r1, [r7, #8]
 8014014:	607a      	str	r2, [r7, #4]
 8014016:	210f      	movs	r1, #15
 8014018:	187b      	adds	r3, r7, r1
 801401a:	1c02      	adds	r2, r0, #0
 801401c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801401e:	68ba      	ldr	r2, [r7, #8]
 8014020:	187b      	adds	r3, r7, r1
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	b25b      	sxtb	r3, r3
 8014026:	0011      	movs	r1, r2
 8014028:	0018      	movs	r0, r3
 801402a:	f7ff ff4b 	bl	8013ec4 <__NVIC_SetPriority>
}
 801402e:	46c0      	nop			@ (mov r8, r8)
 8014030:	46bd      	mov	sp, r7
 8014032:	b004      	add	sp, #16
 8014034:	bd80      	pop	{r7, pc}

08014036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014036:	b580      	push	{r7, lr}
 8014038:	b082      	sub	sp, #8
 801403a:	af00      	add	r7, sp, #0
 801403c:	0002      	movs	r2, r0
 801403e:	1dfb      	adds	r3, r7, #7
 8014040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014042:	1dfb      	adds	r3, r7, #7
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	b25b      	sxtb	r3, r3
 8014048:	0018      	movs	r0, r3
 801404a:	f7ff ff21 	bl	8013e90 <__NVIC_EnableIRQ>
}
 801404e:	46c0      	nop			@ (mov r8, r8)
 8014050:	46bd      	mov	sp, r7
 8014052:	b002      	add	sp, #8
 8014054:	bd80      	pop	{r7, pc}

08014056 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8014056:	b580      	push	{r7, lr}
 8014058:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801405a:	f7ff ffa1 	bl	8013fa0 <__NVIC_SystemReset>

0801405e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801405e:	b580      	push	{r7, lr}
 8014060:	b082      	sub	sp, #8
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	0018      	movs	r0, r3
 801406a:	f7ff ffab 	bl	8013fc4 <SysTick_Config>
 801406e:	0003      	movs	r3, r0
}
 8014070:	0018      	movs	r0, r3
 8014072:	46bd      	mov	sp, r7
 8014074:	b002      	add	sp, #8
 8014076:	bd80      	pop	{r7, pc}

08014078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b084      	sub	sp, #16
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d101      	bne.n	801408a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8014086:	2301      	movs	r3, #1
 8014088:	e061      	b.n	801414e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	4a32      	ldr	r2, [pc, #200]	@ (8014158 <HAL_DMA_Init+0xe0>)
 8014090:	4694      	mov	ip, r2
 8014092:	4463      	add	r3, ip
 8014094:	2114      	movs	r1, #20
 8014096:	0018      	movs	r0, r3
 8014098:	f7ec f884 	bl	80001a4 <__udivsi3>
 801409c:	0003      	movs	r3, r0
 801409e:	009a      	lsls	r2, r3, #2
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	4a2d      	ldr	r2, [pc, #180]	@ (801415c <HAL_DMA_Init+0xe4>)
 80140a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2225      	movs	r2, #37	@ 0x25
 80140ae:	2102      	movs	r1, #2
 80140b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	4a28      	ldr	r2, [pc, #160]	@ (8014160 <HAL_DMA_Init+0xe8>)
 80140be:	4013      	ands	r3, r2
 80140c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80140ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	691b      	ldr	r3, [r3, #16]
 80140d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80140d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	699b      	ldr	r3, [r3, #24]
 80140dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80140e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6a1b      	ldr	r3, [r3, #32]
 80140e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80140ea:	68fa      	ldr	r2, [r7, #12]
 80140ec:	4313      	orrs	r3, r2
 80140ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	68fa      	ldr	r2, [r7, #12]
 80140f6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	689a      	ldr	r2, [r3, #8]
 80140fc:	2380      	movs	r3, #128	@ 0x80
 80140fe:	01db      	lsls	r3, r3, #7
 8014100:	429a      	cmp	r2, r3
 8014102:	d018      	beq.n	8014136 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8014104:	4b17      	ldr	r3, [pc, #92]	@ (8014164 <HAL_DMA_Init+0xec>)
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801410c:	211c      	movs	r1, #28
 801410e:	400b      	ands	r3, r1
 8014110:	210f      	movs	r1, #15
 8014112:	4099      	lsls	r1, r3
 8014114:	000b      	movs	r3, r1
 8014116:	43d9      	mvns	r1, r3
 8014118:	4b12      	ldr	r3, [pc, #72]	@ (8014164 <HAL_DMA_Init+0xec>)
 801411a:	400a      	ands	r2, r1
 801411c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 801411e:	4b11      	ldr	r3, [pc, #68]	@ (8014164 <HAL_DMA_Init+0xec>)
 8014120:	6819      	ldr	r1, [r3, #0]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	685a      	ldr	r2, [r3, #4]
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801412a:	201c      	movs	r0, #28
 801412c:	4003      	ands	r3, r0
 801412e:	409a      	lsls	r2, r3
 8014130:	4b0c      	ldr	r3, [pc, #48]	@ (8014164 <HAL_DMA_Init+0xec>)
 8014132:	430a      	orrs	r2, r1
 8014134:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2200      	movs	r2, #0
 801413a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2225      	movs	r2, #37	@ 0x25
 8014140:	2101      	movs	r1, #1
 8014142:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2224      	movs	r2, #36	@ 0x24
 8014148:	2100      	movs	r1, #0
 801414a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801414c:	2300      	movs	r3, #0
}
 801414e:	0018      	movs	r0, r3
 8014150:	46bd      	mov	sp, r7
 8014152:	b004      	add	sp, #16
 8014154:	bd80      	pop	{r7, pc}
 8014156:	46c0      	nop			@ (mov r8, r8)
 8014158:	bffdfff8 	.word	0xbffdfff8
 801415c:	40020000 	.word	0x40020000
 8014160:	ffff800f 	.word	0xffff800f
 8014164:	400200a8 	.word	0x400200a8

08014168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b086      	sub	sp, #24
 801416c:	af00      	add	r7, sp, #0
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
 8014174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014176:	2317      	movs	r3, #23
 8014178:	18fb      	adds	r3, r7, r3
 801417a:	2200      	movs	r2, #0
 801417c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2224      	movs	r2, #36	@ 0x24
 8014182:	5c9b      	ldrb	r3, [r3, r2]
 8014184:	2b01      	cmp	r3, #1
 8014186:	d101      	bne.n	801418c <HAL_DMA_Start_IT+0x24>
 8014188:	2302      	movs	r3, #2
 801418a:	e04f      	b.n	801422c <HAL_DMA_Start_IT+0xc4>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2224      	movs	r2, #36	@ 0x24
 8014190:	2101      	movs	r1, #1
 8014192:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	2225      	movs	r2, #37	@ 0x25
 8014198:	5c9b      	ldrb	r3, [r3, r2]
 801419a:	b2db      	uxtb	r3, r3
 801419c:	2b01      	cmp	r3, #1
 801419e:	d13a      	bne.n	8014216 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2225      	movs	r2, #37	@ 0x25
 80141a4:	2102      	movs	r1, #2
 80141a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2200      	movs	r2, #0
 80141ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	681a      	ldr	r2, [r3, #0]
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	2101      	movs	r1, #1
 80141ba:	438a      	bics	r2, r1
 80141bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	68b9      	ldr	r1, [r7, #8]
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f000 f976 	bl	80144b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d008      	beq.n	80141e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	210e      	movs	r1, #14
 80141de:	430a      	orrs	r2, r1
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	e00f      	b.n	8014204 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2104      	movs	r1, #4
 80141f0:	438a      	bics	r2, r1
 80141f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	681a      	ldr	r2, [r3, #0]
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	210a      	movs	r1, #10
 8014200:	430a      	orrs	r2, r1
 8014202:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	2101      	movs	r1, #1
 8014210:	430a      	orrs	r2, r1
 8014212:	601a      	str	r2, [r3, #0]
 8014214:	e007      	b.n	8014226 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	2224      	movs	r2, #36	@ 0x24
 801421a:	2100      	movs	r1, #0
 801421c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 801421e:	2317      	movs	r3, #23
 8014220:	18fb      	adds	r3, r7, r3
 8014222:	2202      	movs	r2, #2
 8014224:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8014226:	2317      	movs	r3, #23
 8014228:	18fb      	adds	r3, r7, r3
 801422a:	781b      	ldrb	r3, [r3, #0]
}
 801422c:	0018      	movs	r0, r3
 801422e:	46bd      	mov	sp, r7
 8014230:	b006      	add	sp, #24
 8014232:	bd80      	pop	{r7, pc}

08014234 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b084      	sub	sp, #16
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801423c:	230f      	movs	r3, #15
 801423e:	18fb      	adds	r3, r7, r3
 8014240:	2200      	movs	r2, #0
 8014242:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2225      	movs	r2, #37	@ 0x25
 8014248:	5c9b      	ldrb	r3, [r3, r2]
 801424a:	b2db      	uxtb	r3, r3
 801424c:	2b02      	cmp	r3, #2
 801424e:	d008      	beq.n	8014262 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2204      	movs	r2, #4
 8014254:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2224      	movs	r2, #36	@ 0x24
 801425a:	2100      	movs	r1, #0
 801425c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801425e:	2301      	movs	r3, #1
 8014260:	e024      	b.n	80142ac <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	210e      	movs	r1, #14
 801426e:	438a      	bics	r2, r1
 8014270:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	2101      	movs	r1, #1
 801427e:	438a      	bics	r2, r1
 8014280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014286:	221c      	movs	r2, #28
 8014288:	401a      	ands	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801428e:	2101      	movs	r1, #1
 8014290:	4091      	lsls	r1, r2
 8014292:	000a      	movs	r2, r1
 8014294:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2225      	movs	r2, #37	@ 0x25
 801429a:	2101      	movs	r1, #1
 801429c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2224      	movs	r2, #36	@ 0x24
 80142a2:	2100      	movs	r1, #0
 80142a4:	5499      	strb	r1, [r3, r2]

    return status;
 80142a6:	230f      	movs	r3, #15
 80142a8:	18fb      	adds	r3, r7, r3
 80142aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80142ac:	0018      	movs	r0, r3
 80142ae:	46bd      	mov	sp, r7
 80142b0:	b004      	add	sp, #16
 80142b2:	bd80      	pop	{r7, pc}

080142b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b084      	sub	sp, #16
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80142bc:	210f      	movs	r1, #15
 80142be:	187b      	adds	r3, r7, r1
 80142c0:	2200      	movs	r2, #0
 80142c2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2225      	movs	r2, #37	@ 0x25
 80142c8:	5c9b      	ldrb	r3, [r3, r2]
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	2b02      	cmp	r3, #2
 80142ce:	d006      	beq.n	80142de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2204      	movs	r2, #4
 80142d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80142d6:	187b      	adds	r3, r7, r1
 80142d8:	2201      	movs	r2, #1
 80142da:	701a      	strb	r2, [r3, #0]
 80142dc:	e02a      	b.n	8014334 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	681a      	ldr	r2, [r3, #0]
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	210e      	movs	r1, #14
 80142ea:	438a      	bics	r2, r1
 80142ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	2101      	movs	r1, #1
 80142fa:	438a      	bics	r2, r1
 80142fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014302:	221c      	movs	r2, #28
 8014304:	401a      	ands	r2, r3
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801430a:	2101      	movs	r1, #1
 801430c:	4091      	lsls	r1, r2
 801430e:	000a      	movs	r2, r1
 8014310:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2225      	movs	r2, #37	@ 0x25
 8014316:	2101      	movs	r1, #1
 8014318:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2224      	movs	r2, #36	@ 0x24
 801431e:	2100      	movs	r1, #0
 8014320:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014326:	2b00      	cmp	r3, #0
 8014328:	d004      	beq.n	8014334 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	0010      	movs	r0, r2
 8014332:	4798      	blx	r3
    }
  }
  return status;
 8014334:	230f      	movs	r3, #15
 8014336:	18fb      	adds	r3, r7, r3
 8014338:	781b      	ldrb	r3, [r3, #0]
}
 801433a:	0018      	movs	r0, r3
 801433c:	46bd      	mov	sp, r7
 801433e:	b004      	add	sp, #16
 8014340:	bd80      	pop	{r7, pc}

08014342 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8014342:	b580      	push	{r7, lr}
 8014344:	b084      	sub	sp, #16
 8014346:	af00      	add	r7, sp, #0
 8014348:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801435e:	221c      	movs	r2, #28
 8014360:	4013      	ands	r3, r2
 8014362:	2204      	movs	r2, #4
 8014364:	409a      	lsls	r2, r3
 8014366:	0013      	movs	r3, r2
 8014368:	68fa      	ldr	r2, [r7, #12]
 801436a:	4013      	ands	r3, r2
 801436c:	d026      	beq.n	80143bc <HAL_DMA_IRQHandler+0x7a>
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	2204      	movs	r2, #4
 8014372:	4013      	ands	r3, r2
 8014374:	d022      	beq.n	80143bc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	2220      	movs	r2, #32
 801437e:	4013      	ands	r3, r2
 8014380:	d107      	bne.n	8014392 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2104      	movs	r1, #4
 801438e:	438a      	bics	r2, r1
 8014390:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014396:	221c      	movs	r2, #28
 8014398:	401a      	ands	r2, r3
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801439e:	2104      	movs	r1, #4
 80143a0:	4091      	lsls	r1, r2
 80143a2:	000a      	movs	r2, r1
 80143a4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d100      	bne.n	80143b0 <HAL_DMA_IRQHandler+0x6e>
 80143ae:	e071      	b.n	8014494 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	0010      	movs	r0, r2
 80143b8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80143ba:	e06b      	b.n	8014494 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143c0:	221c      	movs	r2, #28
 80143c2:	4013      	ands	r3, r2
 80143c4:	2202      	movs	r2, #2
 80143c6:	409a      	lsls	r2, r3
 80143c8:	0013      	movs	r3, r2
 80143ca:	68fa      	ldr	r2, [r7, #12]
 80143cc:	4013      	ands	r3, r2
 80143ce:	d02d      	beq.n	801442c <HAL_DMA_IRQHandler+0xea>
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	2202      	movs	r2, #2
 80143d4:	4013      	ands	r3, r2
 80143d6:	d029      	beq.n	801442c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2220      	movs	r2, #32
 80143e0:	4013      	ands	r3, r2
 80143e2:	d10b      	bne.n	80143fc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	681a      	ldr	r2, [r3, #0]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	210a      	movs	r1, #10
 80143f0:	438a      	bics	r2, r1
 80143f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2225      	movs	r2, #37	@ 0x25
 80143f8:	2101      	movs	r1, #1
 80143fa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014400:	221c      	movs	r2, #28
 8014402:	401a      	ands	r2, r3
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014408:	2102      	movs	r1, #2
 801440a:	4091      	lsls	r1, r2
 801440c:	000a      	movs	r2, r1
 801440e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2224      	movs	r2, #36	@ 0x24
 8014414:	2100      	movs	r1, #0
 8014416:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801441c:	2b00      	cmp	r3, #0
 801441e:	d039      	beq.n	8014494 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	0010      	movs	r0, r2
 8014428:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 801442a:	e033      	b.n	8014494 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014430:	221c      	movs	r2, #28
 8014432:	4013      	ands	r3, r2
 8014434:	2208      	movs	r2, #8
 8014436:	409a      	lsls	r2, r3
 8014438:	0013      	movs	r3, r2
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	4013      	ands	r3, r2
 801443e:	d02a      	beq.n	8014496 <HAL_DMA_IRQHandler+0x154>
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	2208      	movs	r2, #8
 8014444:	4013      	ands	r3, r2
 8014446:	d026      	beq.n	8014496 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	210e      	movs	r1, #14
 8014454:	438a      	bics	r2, r1
 8014456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801445c:	221c      	movs	r2, #28
 801445e:	401a      	ands	r2, r3
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014464:	2101      	movs	r1, #1
 8014466:	4091      	lsls	r1, r2
 8014468:	000a      	movs	r2, r1
 801446a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2201      	movs	r2, #1
 8014470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2225      	movs	r2, #37	@ 0x25
 8014476:	2101      	movs	r1, #1
 8014478:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2224      	movs	r2, #36	@ 0x24
 801447e:	2100      	movs	r1, #0
 8014480:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014486:	2b00      	cmp	r3, #0
 8014488:	d005      	beq.n	8014496 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	0010      	movs	r0, r2
 8014492:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8014494:	46c0      	nop			@ (mov r8, r8)
 8014496:	46c0      	nop			@ (mov r8, r8)
}
 8014498:	46bd      	mov	sp, r7
 801449a:	b004      	add	sp, #16
 801449c:	bd80      	pop	{r7, pc}

0801449e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801449e:	b580      	push	{r7, lr}
 80144a0:	b082      	sub	sp, #8
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2225      	movs	r2, #37	@ 0x25
 80144aa:	5c9b      	ldrb	r3, [r3, r2]
 80144ac:	b2db      	uxtb	r3, r3
}
 80144ae:	0018      	movs	r0, r3
 80144b0:	46bd      	mov	sp, r7
 80144b2:	b002      	add	sp, #8
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b084      	sub	sp, #16
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	60f8      	str	r0, [r7, #12]
 80144be:	60b9      	str	r1, [r7, #8]
 80144c0:	607a      	str	r2, [r7, #4]
 80144c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144c8:	221c      	movs	r2, #28
 80144ca:	401a      	ands	r2, r3
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80144d0:	2101      	movs	r1, #1
 80144d2:	4091      	lsls	r1, r2
 80144d4:	000a      	movs	r2, r1
 80144d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	683a      	ldr	r2, [r7, #0]
 80144de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	689b      	ldr	r3, [r3, #8]
 80144e4:	2b10      	cmp	r3, #16
 80144e6:	d108      	bne.n	80144fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	68ba      	ldr	r2, [r7, #8]
 80144f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80144f8:	e007      	b.n	801450a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	68ba      	ldr	r2, [r7, #8]
 8014500:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	60da      	str	r2, [r3, #12]
}
 801450a:	46c0      	nop			@ (mov r8, r8)
 801450c:	46bd      	mov	sp, r7
 801450e:	b004      	add	sp, #16
 8014510:	bd80      	pop	{r7, pc}
	...

08014514 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 801451c:	f7ff f8d2 	bl	80136c4 <HAL_GetTick>
 8014520:	0003      	movs	r3, r0
 8014522:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014524:	e00f      	b.n	8014546 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	3301      	adds	r3, #1
 801452a:	d00c      	beq.n	8014546 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d007      	beq.n	8014542 <FLASH_WaitForLastOperation+0x2e>
 8014532:	f7ff f8c7 	bl	80136c4 <HAL_GetTick>
 8014536:	0002      	movs	r2, r0
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	1ad3      	subs	r3, r2, r3
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	429a      	cmp	r2, r3
 8014540:	d201      	bcs.n	8014546 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8014542:	2303      	movs	r3, #3
 8014544:	e052      	b.n	80145ec <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014546:	4b2b      	ldr	r3, [pc, #172]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 8014548:	699b      	ldr	r3, [r3, #24]
 801454a:	2201      	movs	r2, #1
 801454c:	4013      	ands	r3, r2
 801454e:	2b01      	cmp	r3, #1
 8014550:	d0e9      	beq.n	8014526 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8014552:	4b28      	ldr	r3, [pc, #160]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 8014554:	699b      	ldr	r3, [r3, #24]
 8014556:	2202      	movs	r2, #2
 8014558:	4013      	ands	r3, r2
 801455a:	2b02      	cmp	r3, #2
 801455c:	d102      	bne.n	8014564 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801455e:	4b25      	ldr	r3, [pc, #148]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 8014560:	2202      	movs	r2, #2
 8014562:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014564:	4b23      	ldr	r3, [pc, #140]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 8014566:	699a      	ldr	r2, [r3, #24]
 8014568:	2380      	movs	r3, #128	@ 0x80
 801456a:	005b      	lsls	r3, r3, #1
 801456c:	401a      	ands	r2, r3
 801456e:	2380      	movs	r3, #128	@ 0x80
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	429a      	cmp	r2, r3
 8014574:	d035      	beq.n	80145e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014576:	4b1f      	ldr	r3, [pc, #124]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 8014578:	699a      	ldr	r2, [r3, #24]
 801457a:	2380      	movs	r3, #128	@ 0x80
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014580:	2380      	movs	r3, #128	@ 0x80
 8014582:	009b      	lsls	r3, r3, #2
 8014584:	429a      	cmp	r2, r3
 8014586:	d02c      	beq.n	80145e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014588:	4b1a      	ldr	r3, [pc, #104]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 801458a:	699a      	ldr	r2, [r3, #24]
 801458c:	2380      	movs	r3, #128	@ 0x80
 801458e:	00db      	lsls	r3, r3, #3
 8014590:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014592:	2380      	movs	r3, #128	@ 0x80
 8014594:	00db      	lsls	r3, r3, #3
 8014596:	429a      	cmp	r2, r3
 8014598:	d023      	beq.n	80145e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801459a:	4b16      	ldr	r3, [pc, #88]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 801459c:	699a      	ldr	r2, [r3, #24]
 801459e:	2380      	movs	r3, #128	@ 0x80
 80145a0:	011b      	lsls	r3, r3, #4
 80145a2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80145a4:	2380      	movs	r3, #128	@ 0x80
 80145a6:	011b      	lsls	r3, r3, #4
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d01a      	beq.n	80145e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80145ac:	4b11      	ldr	r3, [pc, #68]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 80145ae:	699a      	ldr	r2, [r3, #24]
 80145b0:	2380      	movs	r3, #128	@ 0x80
 80145b2:	019b      	lsls	r3, r3, #6
 80145b4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80145b6:	2380      	movs	r3, #128	@ 0x80
 80145b8:	019b      	lsls	r3, r3, #6
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d011      	beq.n	80145e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80145be:	4b0d      	ldr	r3, [pc, #52]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 80145c0:	699a      	ldr	r2, [r3, #24]
 80145c2:	2380      	movs	r3, #128	@ 0x80
 80145c4:	029b      	lsls	r3, r3, #10
 80145c6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80145c8:	2380      	movs	r3, #128	@ 0x80
 80145ca:	029b      	lsls	r3, r3, #10
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d008      	beq.n	80145e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80145d0:	4b08      	ldr	r3, [pc, #32]	@ (80145f4 <FLASH_WaitForLastOperation+0xe0>)
 80145d2:	699a      	ldr	r2, [r3, #24]
 80145d4:	2380      	movs	r3, #128	@ 0x80
 80145d6:	025b      	lsls	r3, r3, #9
 80145d8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80145da:	2380      	movs	r3, #128	@ 0x80
 80145dc:	025b      	lsls	r3, r3, #9
 80145de:	429a      	cmp	r2, r3
 80145e0:	d103      	bne.n	80145ea <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80145e2:	f000 f809 	bl	80145f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80145e6:	2301      	movs	r3, #1
 80145e8:	e000      	b.n	80145ec <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80145ea:	2300      	movs	r3, #0
}
 80145ec:	0018      	movs	r0, r3
 80145ee:	46bd      	mov	sp, r7
 80145f0:	b004      	add	sp, #16
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	40022000 	.word	0x40022000

080145f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b082      	sub	sp, #8
 80145fc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80145fe:	2300      	movs	r3, #0
 8014600:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8014602:	4b49      	ldr	r3, [pc, #292]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 8014604:	699a      	ldr	r2, [r3, #24]
 8014606:	2380      	movs	r3, #128	@ 0x80
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	401a      	ands	r2, r3
 801460c:	2380      	movs	r3, #128	@ 0x80
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	429a      	cmp	r2, r3
 8014612:	d10a      	bne.n	801462a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8014614:	4b45      	ldr	r3, [pc, #276]	@ (801472c <FLASH_SetErrorCode+0x134>)
 8014616:	695b      	ldr	r3, [r3, #20]
 8014618:	2202      	movs	r2, #2
 801461a:	431a      	orrs	r2, r3
 801461c:	4b43      	ldr	r3, [pc, #268]	@ (801472c <FLASH_SetErrorCode+0x134>)
 801461e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2280      	movs	r2, #128	@ 0x80
 8014624:	0052      	lsls	r2, r2, #1
 8014626:	4313      	orrs	r3, r2
 8014628:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 801462a:	4b3f      	ldr	r3, [pc, #252]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 801462c:	699a      	ldr	r2, [r3, #24]
 801462e:	2380      	movs	r3, #128	@ 0x80
 8014630:	009b      	lsls	r3, r3, #2
 8014632:	401a      	ands	r2, r3
 8014634:	2380      	movs	r3, #128	@ 0x80
 8014636:	009b      	lsls	r3, r3, #2
 8014638:	429a      	cmp	r2, r3
 801463a:	d10a      	bne.n	8014652 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801463c:	4b3b      	ldr	r3, [pc, #236]	@ (801472c <FLASH_SetErrorCode+0x134>)
 801463e:	695b      	ldr	r3, [r3, #20]
 8014640:	2201      	movs	r2, #1
 8014642:	431a      	orrs	r2, r3
 8014644:	4b39      	ldr	r3, [pc, #228]	@ (801472c <FLASH_SetErrorCode+0x134>)
 8014646:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2280      	movs	r2, #128	@ 0x80
 801464c:	0092      	lsls	r2, r2, #2
 801464e:	4313      	orrs	r3, r2
 8014650:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8014652:	4b35      	ldr	r3, [pc, #212]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 8014654:	699a      	ldr	r2, [r3, #24]
 8014656:	2380      	movs	r3, #128	@ 0x80
 8014658:	00db      	lsls	r3, r3, #3
 801465a:	401a      	ands	r2, r3
 801465c:	2380      	movs	r3, #128	@ 0x80
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	429a      	cmp	r2, r3
 8014662:	d10a      	bne.n	801467a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8014664:	4b31      	ldr	r3, [pc, #196]	@ (801472c <FLASH_SetErrorCode+0x134>)
 8014666:	695b      	ldr	r3, [r3, #20]
 8014668:	2208      	movs	r2, #8
 801466a:	431a      	orrs	r2, r3
 801466c:	4b2f      	ldr	r3, [pc, #188]	@ (801472c <FLASH_SetErrorCode+0x134>)
 801466e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	2280      	movs	r2, #128	@ 0x80
 8014674:	00d2      	lsls	r2, r2, #3
 8014676:	4313      	orrs	r3, r2
 8014678:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 801467a:	4b2b      	ldr	r3, [pc, #172]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 801467c:	699a      	ldr	r2, [r3, #24]
 801467e:	2380      	movs	r3, #128	@ 0x80
 8014680:	011b      	lsls	r3, r3, #4
 8014682:	401a      	ands	r2, r3
 8014684:	2380      	movs	r3, #128	@ 0x80
 8014686:	011b      	lsls	r3, r3, #4
 8014688:	429a      	cmp	r2, r3
 801468a:	d10a      	bne.n	80146a2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 801468c:	4b27      	ldr	r3, [pc, #156]	@ (801472c <FLASH_SetErrorCode+0x134>)
 801468e:	695b      	ldr	r3, [r3, #20]
 8014690:	2204      	movs	r2, #4
 8014692:	431a      	orrs	r2, r3
 8014694:	4b25      	ldr	r3, [pc, #148]	@ (801472c <FLASH_SetErrorCode+0x134>)
 8014696:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2280      	movs	r2, #128	@ 0x80
 801469c:	0112      	lsls	r2, r2, #4
 801469e:	4313      	orrs	r3, r2
 80146a0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80146a2:	4b21      	ldr	r3, [pc, #132]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 80146a4:	699a      	ldr	r2, [r3, #24]
 80146a6:	2380      	movs	r3, #128	@ 0x80
 80146a8:	019b      	lsls	r3, r3, #6
 80146aa:	401a      	ands	r2, r3
 80146ac:	2380      	movs	r3, #128	@ 0x80
 80146ae:	019b      	lsls	r3, r3, #6
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d10a      	bne.n	80146ca <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80146b4:	4b1d      	ldr	r3, [pc, #116]	@ (801472c <FLASH_SetErrorCode+0x134>)
 80146b6:	695b      	ldr	r3, [r3, #20]
 80146b8:	2210      	movs	r2, #16
 80146ba:	431a      	orrs	r2, r3
 80146bc:	4b1b      	ldr	r3, [pc, #108]	@ (801472c <FLASH_SetErrorCode+0x134>)
 80146be:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2280      	movs	r2, #128	@ 0x80
 80146c4:	0192      	lsls	r2, r2, #6
 80146c6:	4313      	orrs	r3, r2
 80146c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80146ca:	4b17      	ldr	r3, [pc, #92]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 80146cc:	699a      	ldr	r2, [r3, #24]
 80146ce:	2380      	movs	r3, #128	@ 0x80
 80146d0:	029b      	lsls	r3, r3, #10
 80146d2:	401a      	ands	r2, r3
 80146d4:	2380      	movs	r3, #128	@ 0x80
 80146d6:	029b      	lsls	r3, r3, #10
 80146d8:	429a      	cmp	r2, r3
 80146da:	d109      	bne.n	80146f0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80146dc:	4b13      	ldr	r3, [pc, #76]	@ (801472c <FLASH_SetErrorCode+0x134>)
 80146de:	695b      	ldr	r3, [r3, #20]
 80146e0:	2220      	movs	r2, #32
 80146e2:	431a      	orrs	r2, r3
 80146e4:	4b11      	ldr	r3, [pc, #68]	@ (801472c <FLASH_SetErrorCode+0x134>)
 80146e6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2220      	movs	r2, #32
 80146ec:	4313      	orrs	r3, r2
 80146ee:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80146f0:	4b0d      	ldr	r3, [pc, #52]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 80146f2:	699a      	ldr	r2, [r3, #24]
 80146f4:	2380      	movs	r3, #128	@ 0x80
 80146f6:	025b      	lsls	r3, r3, #9
 80146f8:	401a      	ands	r2, r3
 80146fa:	2380      	movs	r3, #128	@ 0x80
 80146fc:	025b      	lsls	r3, r3, #9
 80146fe:	429a      	cmp	r2, r3
 8014700:	d10a      	bne.n	8014718 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8014702:	4b0a      	ldr	r3, [pc, #40]	@ (801472c <FLASH_SetErrorCode+0x134>)
 8014704:	695b      	ldr	r3, [r3, #20]
 8014706:	2240      	movs	r2, #64	@ 0x40
 8014708:	431a      	orrs	r2, r3
 801470a:	4b08      	ldr	r3, [pc, #32]	@ (801472c <FLASH_SetErrorCode+0x134>)
 801470c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2280      	movs	r2, #128	@ 0x80
 8014712:	0252      	lsls	r2, r2, #9
 8014714:	4313      	orrs	r3, r2
 8014716:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014718:	4b03      	ldr	r3, [pc, #12]	@ (8014728 <FLASH_SetErrorCode+0x130>)
 801471a:	687a      	ldr	r2, [r7, #4]
 801471c:	619a      	str	r2, [r3, #24]
}  
 801471e:	46c0      	nop			@ (mov r8, r8)
 8014720:	46bd      	mov	sp, r7
 8014722:	b002      	add	sp, #8
 8014724:	bd80      	pop	{r7, pc}
 8014726:	46c0      	nop			@ (mov r8, r8)
 8014728:	40022000 	.word	0x40022000
 801472c:	20002240 	.word	0x20002240

08014730 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014736:	4b12      	ldr	r3, [pc, #72]	@ (8014780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	2201      	movs	r2, #1
 801473c:	4013      	ands	r3, r2
 801473e:	d019      	beq.n	8014774 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014740:	f3ef 8310 	mrs	r3, PRIMASK
 8014744:	607b      	str	r3, [r7, #4]
  return(result);
 8014746:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8014748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801474a:	b672      	cpsid	i
}
 801474c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 801474e:	4b0c      	ldr	r3, [pc, #48]	@ (8014780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014750:	4a0c      	ldr	r2, [pc, #48]	@ (8014784 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8014752:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8014754:	4b0a      	ldr	r3, [pc, #40]	@ (8014780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014756:	4a0c      	ldr	r2, [pc, #48]	@ (8014788 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8014758:	60da      	str	r2, [r3, #12]
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	f383 8810 	msr	PRIMASK, r3
}
 8014764:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014766:	4b06      	ldr	r3, [pc, #24]	@ (8014780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	2201      	movs	r2, #1
 801476c:	4013      	ands	r3, r2
 801476e:	d001      	beq.n	8014774 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8014770:	2301      	movs	r3, #1
 8014772:	e000      	b.n	8014776 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8014774:	2300      	movs	r3, #0
}
 8014776:	0018      	movs	r0, r3
 8014778:	46bd      	mov	sp, r7
 801477a:	b004      	add	sp, #16
 801477c:	bd80      	pop	{r7, pc}
 801477e:	46c0      	nop			@ (mov r8, r8)
 8014780:	40022000 	.word	0x40022000
 8014784:	89abcdef 	.word	0x89abcdef
 8014788:	02030405 	.word	0x02030405

0801478c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8014790:	4b04      	ldr	r3, [pc, #16]	@ (80147a4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014792:	685a      	ldr	r2, [r3, #4]
 8014794:	4b03      	ldr	r3, [pc, #12]	@ (80147a4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014796:	2101      	movs	r1, #1
 8014798:	430a      	orrs	r2, r1
 801479a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 801479c:	2300      	movs	r3, #0
}
 801479e:	0018      	movs	r0, r3
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	40022000 	.word	0x40022000

080147a8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80147a8:	b5b0      	push	{r4, r5, r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80147b0:	250f      	movs	r5, #15
 80147b2:	197b      	adds	r3, r7, r5
 80147b4:	2200      	movs	r2, #0
 80147b6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80147b8:	197c      	adds	r4, r7, r5
 80147ba:	4b0f      	ldr	r3, [pc, #60]	@ (80147f8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80147bc:	0018      	movs	r0, r3
 80147be:	f7ff fea9 	bl	8014514 <FLASH_WaitForLastOperation>
 80147c2:	0003      	movs	r3, r0
 80147c4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80147c6:	0029      	movs	r1, r5
 80147c8:	187b      	adds	r3, r7, r1
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d10c      	bne.n	80147ea <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80147d0:	4b0a      	ldr	r3, [pc, #40]	@ (80147fc <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80147d2:	2200      	movs	r2, #0
 80147d4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2200      	movs	r2, #0
 80147da:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80147dc:	187c      	adds	r4, r7, r1
 80147de:	4b06      	ldr	r3, [pc, #24]	@ (80147f8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80147e0:	0018      	movs	r0, r3
 80147e2:	f7ff fe97 	bl	8014514 <FLASH_WaitForLastOperation>
 80147e6:	0003      	movs	r3, r0
 80147e8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80147ea:	230f      	movs	r3, #15
 80147ec:	18fb      	adds	r3, r7, r3
 80147ee:	781b      	ldrb	r3, [r3, #0]
}  
 80147f0:	0018      	movs	r0, r3
 80147f2:	46bd      	mov	sp, r7
 80147f4:	b004      	add	sp, #16
 80147f6:	bdb0      	pop	{r4, r5, r7, pc}
 80147f8:	0000c350 	.word	0x0000c350
 80147fc:	20002240 	.word	0x20002240

08014800 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8014800:	b5b0      	push	{r4, r5, r7, lr}
 8014802:	b086      	sub	sp, #24
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801480c:	2317      	movs	r3, #23
 801480e:	18fb      	adds	r3, r7, r3
 8014810:	2201      	movs	r2, #1
 8014812:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8014814:	4b24      	ldr	r3, [pc, #144]	@ (80148a8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014816:	7c1b      	ldrb	r3, [r3, #16]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d101      	bne.n	8014820 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 801481c:	2302      	movs	r3, #2
 801481e:	e03e      	b.n	801489e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8014820:	4b21      	ldr	r3, [pc, #132]	@ (80148a8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014822:	2201      	movs	r2, #1
 8014824:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014826:	2517      	movs	r5, #23
 8014828:	197c      	adds	r4, r7, r5
 801482a:	4b20      	ldr	r3, [pc, #128]	@ (80148ac <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 801482c:	0018      	movs	r0, r3
 801482e:	f7ff fe71 	bl	8014514 <FLASH_WaitForLastOperation>
 8014832:	0003      	movs	r3, r0
 8014834:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014836:	197b      	adds	r3, r7, r5
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d129      	bne.n	8014892 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801483e:	4b1a      	ldr	r3, [pc, #104]	@ (80148a8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014840:	2200      	movs	r2, #0
 8014842:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2b02      	cmp	r3, #2
 8014848:	d103      	bne.n	8014852 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	601a      	str	r2, [r3, #0]
 8014850:	e013      	b.n	801487a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	2b01      	cmp	r3, #1
 8014856:	d104      	bne.n	8014862 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8014858:	68bb      	ldr	r3, [r7, #8]
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	b292      	uxth	r2, r2
 801485e:	801a      	strh	r2, [r3, #0]
 8014860:	e00b      	b.n	801487a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d104      	bne.n	8014872 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	687a      	ldr	r2, [r7, #4]
 801486c:	b2d2      	uxtb	r2, r2
 801486e:	701a      	strb	r2, [r3, #0]
 8014870:	e003      	b.n	801487a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8014872:	2317      	movs	r3, #23
 8014874:	18fb      	adds	r3, r7, r3
 8014876:	2201      	movs	r2, #1
 8014878:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 801487a:	2217      	movs	r2, #23
 801487c:	18bb      	adds	r3, r7, r2
 801487e:	781b      	ldrb	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d106      	bne.n	8014892 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014884:	18bc      	adds	r4, r7, r2
 8014886:	4b09      	ldr	r3, [pc, #36]	@ (80148ac <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014888:	0018      	movs	r0, r3
 801488a:	f7ff fe43 	bl	8014514 <FLASH_WaitForLastOperation>
 801488e:	0003      	movs	r3, r0
 8014890:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8014892:	4b05      	ldr	r3, [pc, #20]	@ (80148a8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014894:	2200      	movs	r2, #0
 8014896:	741a      	strb	r2, [r3, #16]

  return status;
 8014898:	2317      	movs	r3, #23
 801489a:	18fb      	adds	r3, r7, r3
 801489c:	781b      	ldrb	r3, [r3, #0]
}
 801489e:	0018      	movs	r0, r3
 80148a0:	46bd      	mov	sp, r7
 80148a2:	b006      	add	sp, #24
 80148a4:	bdb0      	pop	{r4, r5, r7, pc}
 80148a6:	46c0      	nop			@ (mov r8, r8)
 80148a8:	20002240 	.word	0x20002240
 80148ac:	0000c350 	.word	0x0000c350

080148b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b086      	sub	sp, #24
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80148ba:	2300      	movs	r3, #0
 80148bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80148be:	2300      	movs	r3, #0
 80148c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80148c2:	2300      	movs	r3, #0
 80148c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80148c6:	e155      	b.n	8014b74 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	2101      	movs	r1, #1
 80148ce:	697a      	ldr	r2, [r7, #20]
 80148d0:	4091      	lsls	r1, r2
 80148d2:	000a      	movs	r2, r1
 80148d4:	4013      	ands	r3, r2
 80148d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d100      	bne.n	80148e0 <HAL_GPIO_Init+0x30>
 80148de:	e146      	b.n	8014b6e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	2203      	movs	r2, #3
 80148e6:	4013      	ands	r3, r2
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d005      	beq.n	80148f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	2203      	movs	r2, #3
 80148f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80148f4:	2b02      	cmp	r3, #2
 80148f6:	d130      	bne.n	801495a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	689b      	ldr	r3, [r3, #8]
 80148fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	005b      	lsls	r3, r3, #1
 8014902:	2203      	movs	r2, #3
 8014904:	409a      	lsls	r2, r3
 8014906:	0013      	movs	r3, r2
 8014908:	43da      	mvns	r2, r3
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	4013      	ands	r3, r2
 801490e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	68da      	ldr	r2, [r3, #12]
 8014914:	697b      	ldr	r3, [r7, #20]
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	409a      	lsls	r2, r3
 801491a:	0013      	movs	r3, r2
 801491c:	693a      	ldr	r2, [r7, #16]
 801491e:	4313      	orrs	r3, r2
 8014920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	693a      	ldr	r2, [r7, #16]
 8014926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	685b      	ldr	r3, [r3, #4]
 801492c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801492e:	2201      	movs	r2, #1
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	409a      	lsls	r2, r3
 8014934:	0013      	movs	r3, r2
 8014936:	43da      	mvns	r2, r3
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	4013      	ands	r3, r2
 801493c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	685b      	ldr	r3, [r3, #4]
 8014942:	091b      	lsrs	r3, r3, #4
 8014944:	2201      	movs	r2, #1
 8014946:	401a      	ands	r2, r3
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	409a      	lsls	r2, r3
 801494c:	0013      	movs	r3, r2
 801494e:	693a      	ldr	r2, [r7, #16]
 8014950:	4313      	orrs	r3, r2
 8014952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	693a      	ldr	r2, [r7, #16]
 8014958:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	2203      	movs	r2, #3
 8014960:	4013      	ands	r3, r2
 8014962:	2b03      	cmp	r3, #3
 8014964:	d017      	beq.n	8014996 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	2203      	movs	r2, #3
 8014972:	409a      	lsls	r2, r3
 8014974:	0013      	movs	r3, r2
 8014976:	43da      	mvns	r2, r3
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	4013      	ands	r3, r2
 801497c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	689a      	ldr	r2, [r3, #8]
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	409a      	lsls	r2, r3
 8014988:	0013      	movs	r3, r2
 801498a:	693a      	ldr	r2, [r7, #16]
 801498c:	4313      	orrs	r3, r2
 801498e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	693a      	ldr	r2, [r7, #16]
 8014994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	2203      	movs	r2, #3
 801499c:	4013      	ands	r3, r2
 801499e:	2b02      	cmp	r3, #2
 80149a0:	d123      	bne.n	80149ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	08da      	lsrs	r2, r3, #3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	3208      	adds	r2, #8
 80149aa:	0092      	lsls	r2, r2, #2
 80149ac:	58d3      	ldr	r3, [r2, r3]
 80149ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	2207      	movs	r2, #7
 80149b4:	4013      	ands	r3, r2
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	220f      	movs	r2, #15
 80149ba:	409a      	lsls	r2, r3
 80149bc:	0013      	movs	r3, r2
 80149be:	43da      	mvns	r2, r3
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	4013      	ands	r3, r2
 80149c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	691a      	ldr	r2, [r3, #16]
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	2107      	movs	r1, #7
 80149ce:	400b      	ands	r3, r1
 80149d0:	009b      	lsls	r3, r3, #2
 80149d2:	409a      	lsls	r2, r3
 80149d4:	0013      	movs	r3, r2
 80149d6:	693a      	ldr	r2, [r7, #16]
 80149d8:	4313      	orrs	r3, r2
 80149da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	08da      	lsrs	r2, r3, #3
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	3208      	adds	r2, #8
 80149e4:	0092      	lsls	r2, r2, #2
 80149e6:	6939      	ldr	r1, [r7, #16]
 80149e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	005b      	lsls	r3, r3, #1
 80149f4:	2203      	movs	r2, #3
 80149f6:	409a      	lsls	r2, r3
 80149f8:	0013      	movs	r3, r2
 80149fa:	43da      	mvns	r2, r3
 80149fc:	693b      	ldr	r3, [r7, #16]
 80149fe:	4013      	ands	r3, r2
 8014a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014a02:	683b      	ldr	r3, [r7, #0]
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	2203      	movs	r2, #3
 8014a08:	401a      	ands	r2, r3
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	005b      	lsls	r3, r3, #1
 8014a0e:	409a      	lsls	r2, r3
 8014a10:	0013      	movs	r3, r2
 8014a12:	693a      	ldr	r2, [r7, #16]
 8014a14:	4313      	orrs	r3, r2
 8014a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	693a      	ldr	r2, [r7, #16]
 8014a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	685a      	ldr	r2, [r3, #4]
 8014a22:	23c0      	movs	r3, #192	@ 0xc0
 8014a24:	029b      	lsls	r3, r3, #10
 8014a26:	4013      	ands	r3, r2
 8014a28:	d100      	bne.n	8014a2c <HAL_GPIO_Init+0x17c>
 8014a2a:	e0a0      	b.n	8014b6e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014a2c:	4b57      	ldr	r3, [pc, #348]	@ (8014b8c <HAL_GPIO_Init+0x2dc>)
 8014a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014a30:	4b56      	ldr	r3, [pc, #344]	@ (8014b8c <HAL_GPIO_Init+0x2dc>)
 8014a32:	2101      	movs	r1, #1
 8014a34:	430a      	orrs	r2, r1
 8014a36:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8014a38:	4a55      	ldr	r2, [pc, #340]	@ (8014b90 <HAL_GPIO_Init+0x2e0>)
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	089b      	lsrs	r3, r3, #2
 8014a3e:	3302      	adds	r3, #2
 8014a40:	009b      	lsls	r3, r3, #2
 8014a42:	589b      	ldr	r3, [r3, r2]
 8014a44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	2203      	movs	r2, #3
 8014a4a:	4013      	ands	r3, r2
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	220f      	movs	r2, #15
 8014a50:	409a      	lsls	r2, r3
 8014a52:	0013      	movs	r3, r2
 8014a54:	43da      	mvns	r2, r3
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	4013      	ands	r3, r2
 8014a5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8014a5c:	687a      	ldr	r2, [r7, #4]
 8014a5e:	23a0      	movs	r3, #160	@ 0xa0
 8014a60:	05db      	lsls	r3, r3, #23
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d01f      	beq.n	8014aa6 <HAL_GPIO_Init+0x1f6>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	4a4a      	ldr	r2, [pc, #296]	@ (8014b94 <HAL_GPIO_Init+0x2e4>)
 8014a6a:	4293      	cmp	r3, r2
 8014a6c:	d019      	beq.n	8014aa2 <HAL_GPIO_Init+0x1f2>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	4a49      	ldr	r2, [pc, #292]	@ (8014b98 <HAL_GPIO_Init+0x2e8>)
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d013      	beq.n	8014a9e <HAL_GPIO_Init+0x1ee>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	4a48      	ldr	r2, [pc, #288]	@ (8014b9c <HAL_GPIO_Init+0x2ec>)
 8014a7a:	4293      	cmp	r3, r2
 8014a7c:	d00d      	beq.n	8014a9a <HAL_GPIO_Init+0x1ea>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4a47      	ldr	r2, [pc, #284]	@ (8014ba0 <HAL_GPIO_Init+0x2f0>)
 8014a82:	4293      	cmp	r3, r2
 8014a84:	d007      	beq.n	8014a96 <HAL_GPIO_Init+0x1e6>
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4a46      	ldr	r2, [pc, #280]	@ (8014ba4 <HAL_GPIO_Init+0x2f4>)
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d101      	bne.n	8014a92 <HAL_GPIO_Init+0x1e2>
 8014a8e:	2305      	movs	r3, #5
 8014a90:	e00a      	b.n	8014aa8 <HAL_GPIO_Init+0x1f8>
 8014a92:	2306      	movs	r3, #6
 8014a94:	e008      	b.n	8014aa8 <HAL_GPIO_Init+0x1f8>
 8014a96:	2304      	movs	r3, #4
 8014a98:	e006      	b.n	8014aa8 <HAL_GPIO_Init+0x1f8>
 8014a9a:	2303      	movs	r3, #3
 8014a9c:	e004      	b.n	8014aa8 <HAL_GPIO_Init+0x1f8>
 8014a9e:	2302      	movs	r3, #2
 8014aa0:	e002      	b.n	8014aa8 <HAL_GPIO_Init+0x1f8>
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	e000      	b.n	8014aa8 <HAL_GPIO_Init+0x1f8>
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	697a      	ldr	r2, [r7, #20]
 8014aaa:	2103      	movs	r1, #3
 8014aac:	400a      	ands	r2, r1
 8014aae:	0092      	lsls	r2, r2, #2
 8014ab0:	4093      	lsls	r3, r2
 8014ab2:	693a      	ldr	r2, [r7, #16]
 8014ab4:	4313      	orrs	r3, r2
 8014ab6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014ab8:	4935      	ldr	r1, [pc, #212]	@ (8014b90 <HAL_GPIO_Init+0x2e0>)
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	089b      	lsrs	r3, r3, #2
 8014abe:	3302      	adds	r3, #2
 8014ac0:	009b      	lsls	r3, r3, #2
 8014ac2:	693a      	ldr	r2, [r7, #16]
 8014ac4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014ac6:	4b38      	ldr	r3, [pc, #224]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014ac8:	689b      	ldr	r3, [r3, #8]
 8014aca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	43da      	mvns	r2, r3
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	685a      	ldr	r2, [r3, #4]
 8014ada:	2380      	movs	r3, #128	@ 0x80
 8014adc:	035b      	lsls	r3, r3, #13
 8014ade:	4013      	ands	r3, r2
 8014ae0:	d003      	beq.n	8014aea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8014ae2:	693a      	ldr	r2, [r7, #16]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	4313      	orrs	r3, r2
 8014ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8014aea:	4b2f      	ldr	r3, [pc, #188]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014aec:	693a      	ldr	r2, [r7, #16]
 8014aee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8014af0:	4b2d      	ldr	r3, [pc, #180]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	43da      	mvns	r2, r3
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	4013      	ands	r3, r2
 8014afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	685a      	ldr	r2, [r3, #4]
 8014b04:	2380      	movs	r3, #128	@ 0x80
 8014b06:	039b      	lsls	r3, r3, #14
 8014b08:	4013      	ands	r3, r2
 8014b0a:	d003      	beq.n	8014b14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8014b0c:	693a      	ldr	r2, [r7, #16]
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	4313      	orrs	r3, r2
 8014b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8014b14:	4b24      	ldr	r3, [pc, #144]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014b16:	693a      	ldr	r2, [r7, #16]
 8014b18:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8014b1a:	4b23      	ldr	r3, [pc, #140]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	43da      	mvns	r2, r3
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	4013      	ands	r3, r2
 8014b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	685a      	ldr	r2, [r3, #4]
 8014b2e:	2380      	movs	r3, #128	@ 0x80
 8014b30:	029b      	lsls	r3, r3, #10
 8014b32:	4013      	ands	r3, r2
 8014b34:	d003      	beq.n	8014b3e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8014b36:	693a      	ldr	r2, [r7, #16]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	4313      	orrs	r3, r2
 8014b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8014b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014b40:	693a      	ldr	r2, [r7, #16]
 8014b42:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8014b44:	4b18      	ldr	r3, [pc, #96]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	43da      	mvns	r2, r3
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	4013      	ands	r3, r2
 8014b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	685a      	ldr	r2, [r3, #4]
 8014b58:	2380      	movs	r3, #128	@ 0x80
 8014b5a:	025b      	lsls	r3, r3, #9
 8014b5c:	4013      	ands	r3, r2
 8014b5e:	d003      	beq.n	8014b68 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8014b60:	693a      	ldr	r2, [r7, #16]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	4313      	orrs	r3, r2
 8014b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8014b68:	4b0f      	ldr	r3, [pc, #60]	@ (8014ba8 <HAL_GPIO_Init+0x2f8>)
 8014b6a:	693a      	ldr	r2, [r7, #16]
 8014b6c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	3301      	adds	r3, #1
 8014b72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	40da      	lsrs	r2, r3
 8014b7c:	1e13      	subs	r3, r2, #0
 8014b7e:	d000      	beq.n	8014b82 <HAL_GPIO_Init+0x2d2>
 8014b80:	e6a2      	b.n	80148c8 <HAL_GPIO_Init+0x18>
  }
}
 8014b82:	46c0      	nop			@ (mov r8, r8)
 8014b84:	46c0      	nop			@ (mov r8, r8)
 8014b86:	46bd      	mov	sp, r7
 8014b88:	b006      	add	sp, #24
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	40021000 	.word	0x40021000
 8014b90:	40010000 	.word	0x40010000
 8014b94:	50000400 	.word	0x50000400
 8014b98:	50000800 	.word	0x50000800
 8014b9c:	50000c00 	.word	0x50000c00
 8014ba0:	50001000 	.word	0x50001000
 8014ba4:	50001c00 	.word	0x50001c00
 8014ba8:	40010400 	.word	0x40010400

08014bac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b084      	sub	sp, #16
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	000a      	movs	r2, r1
 8014bb6:	1cbb      	adds	r3, r7, #2
 8014bb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	691b      	ldr	r3, [r3, #16]
 8014bbe:	1cba      	adds	r2, r7, #2
 8014bc0:	8812      	ldrh	r2, [r2, #0]
 8014bc2:	4013      	ands	r3, r2
 8014bc4:	d004      	beq.n	8014bd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8014bc6:	230f      	movs	r3, #15
 8014bc8:	18fb      	adds	r3, r7, r3
 8014bca:	2201      	movs	r2, #1
 8014bcc:	701a      	strb	r2, [r3, #0]
 8014bce:	e003      	b.n	8014bd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8014bd0:	230f      	movs	r3, #15
 8014bd2:	18fb      	adds	r3, r7, r3
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8014bd8:	230f      	movs	r3, #15
 8014bda:	18fb      	adds	r3, r7, r3
 8014bdc:	781b      	ldrb	r3, [r3, #0]
}
 8014bde:	0018      	movs	r0, r3
 8014be0:	46bd      	mov	sp, r7
 8014be2:	b004      	add	sp, #16
 8014be4:	bd80      	pop	{r7, pc}

08014be6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014be6:	b580      	push	{r7, lr}
 8014be8:	b082      	sub	sp, #8
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	6078      	str	r0, [r7, #4]
 8014bee:	0008      	movs	r0, r1
 8014bf0:	0011      	movs	r1, r2
 8014bf2:	1cbb      	adds	r3, r7, #2
 8014bf4:	1c02      	adds	r2, r0, #0
 8014bf6:	801a      	strh	r2, [r3, #0]
 8014bf8:	1c7b      	adds	r3, r7, #1
 8014bfa:	1c0a      	adds	r2, r1, #0
 8014bfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014bfe:	1c7b      	adds	r3, r7, #1
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d004      	beq.n	8014c10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8014c06:	1cbb      	adds	r3, r7, #2
 8014c08:	881a      	ldrh	r2, [r3, #0]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8014c0e:	e003      	b.n	8014c18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8014c10:	1cbb      	adds	r3, r7, #2
 8014c12:	881a      	ldrh	r2, [r3, #0]
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8014c18:	46c0      	nop			@ (mov r8, r8)
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	b002      	add	sp, #8
 8014c1e:	bd80      	pop	{r7, pc}

08014c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	0002      	movs	r2, r0
 8014c28:	1dbb      	adds	r3, r7, #6
 8014c2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8014c2c:	4b09      	ldr	r3, [pc, #36]	@ (8014c54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8014c2e:	695b      	ldr	r3, [r3, #20]
 8014c30:	1dba      	adds	r2, r7, #6
 8014c32:	8812      	ldrh	r2, [r2, #0]
 8014c34:	4013      	ands	r3, r2
 8014c36:	d008      	beq.n	8014c4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8014c38:	4b06      	ldr	r3, [pc, #24]	@ (8014c54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8014c3a:	1dba      	adds	r2, r7, #6
 8014c3c:	8812      	ldrh	r2, [r2, #0]
 8014c3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8014c40:	1dbb      	adds	r3, r7, #6
 8014c42:	881b      	ldrh	r3, [r3, #0]
 8014c44:	0018      	movs	r0, r3
 8014c46:	f7f7 fbcd 	bl	800c3e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8014c4a:	46c0      	nop			@ (mov r8, r8)
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	b002      	add	sp, #8
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	46c0      	nop			@ (mov r8, r8)
 8014c54:	40010400 	.word	0x40010400

08014c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d101      	bne.n	8014c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014c66:	2301      	movs	r3, #1
 8014c68:	e082      	b.n	8014d70 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2241      	movs	r2, #65	@ 0x41
 8014c6e:	5c9b      	ldrb	r3, [r3, r2]
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d107      	bne.n	8014c86 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2240      	movs	r2, #64	@ 0x40
 8014c7a:	2100      	movs	r1, #0
 8014c7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	0018      	movs	r0, r3
 8014c82:	f7f6 fe81 	bl	800b988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2241      	movs	r2, #65	@ 0x41
 8014c8a:	2124      	movs	r1, #36	@ 0x24
 8014c8c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2101      	movs	r1, #1
 8014c9a:	438a      	bics	r2, r1
 8014c9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	685a      	ldr	r2, [r3, #4]
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	4934      	ldr	r1, [pc, #208]	@ (8014d78 <HAL_I2C_Init+0x120>)
 8014ca8:	400a      	ands	r2, r1
 8014caa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	689a      	ldr	r2, [r3, #8]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	4931      	ldr	r1, [pc, #196]	@ (8014d7c <HAL_I2C_Init+0x124>)
 8014cb8:	400a      	ands	r2, r1
 8014cba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	68db      	ldr	r3, [r3, #12]
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d108      	bne.n	8014cd6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	689a      	ldr	r2, [r3, #8]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2180      	movs	r1, #128	@ 0x80
 8014cce:	0209      	lsls	r1, r1, #8
 8014cd0:	430a      	orrs	r2, r1
 8014cd2:	609a      	str	r2, [r3, #8]
 8014cd4:	e007      	b.n	8014ce6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	689a      	ldr	r2, [r3, #8]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	2184      	movs	r1, #132	@ 0x84
 8014ce0:	0209      	lsls	r1, r1, #8
 8014ce2:	430a      	orrs	r2, r1
 8014ce4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	2b02      	cmp	r3, #2
 8014cec:	d104      	bne.n	8014cf8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	2280      	movs	r2, #128	@ 0x80
 8014cf4:	0112      	lsls	r2, r2, #4
 8014cf6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	685a      	ldr	r2, [r3, #4]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	491f      	ldr	r1, [pc, #124]	@ (8014d80 <HAL_I2C_Init+0x128>)
 8014d04:	430a      	orrs	r2, r1
 8014d06:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	68da      	ldr	r2, [r3, #12]
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	491a      	ldr	r1, [pc, #104]	@ (8014d7c <HAL_I2C_Init+0x124>)
 8014d14:	400a      	ands	r2, r1
 8014d16:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	691a      	ldr	r2, [r3, #16]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	695b      	ldr	r3, [r3, #20]
 8014d20:	431a      	orrs	r2, r3
 8014d22:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	699b      	ldr	r3, [r3, #24]
 8014d28:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	430a      	orrs	r2, r1
 8014d30:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	69d9      	ldr	r1, [r3, #28]
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	6a1a      	ldr	r2, [r3, #32]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	430a      	orrs	r2, r1
 8014d40:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	681a      	ldr	r2, [r3, #0]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	2101      	movs	r1, #1
 8014d4e:	430a      	orrs	r2, r1
 8014d50:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2200      	movs	r2, #0
 8014d56:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2241      	movs	r2, #65	@ 0x41
 8014d5c:	2120      	movs	r1, #32
 8014d5e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2200      	movs	r2, #0
 8014d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2242      	movs	r2, #66	@ 0x42
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014d6e:	2300      	movs	r3, #0
}
 8014d70:	0018      	movs	r0, r3
 8014d72:	46bd      	mov	sp, r7
 8014d74:	b002      	add	sp, #8
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	f0ffffff 	.word	0xf0ffffff
 8014d7c:	ffff7fff 	.word	0xffff7fff
 8014d80:	02008000 	.word	0x02008000

08014d84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014d84:	b590      	push	{r4, r7, lr}
 8014d86:	b089      	sub	sp, #36	@ 0x24
 8014d88:	af02      	add	r7, sp, #8
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	0008      	movs	r0, r1
 8014d8e:	607a      	str	r2, [r7, #4]
 8014d90:	0019      	movs	r1, r3
 8014d92:	230a      	movs	r3, #10
 8014d94:	18fb      	adds	r3, r7, r3
 8014d96:	1c02      	adds	r2, r0, #0
 8014d98:	801a      	strh	r2, [r3, #0]
 8014d9a:	2308      	movs	r3, #8
 8014d9c:	18fb      	adds	r3, r7, r3
 8014d9e:	1c0a      	adds	r2, r1, #0
 8014da0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	2241      	movs	r2, #65	@ 0x41
 8014da6:	5c9b      	ldrb	r3, [r3, r2]
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	2b20      	cmp	r3, #32
 8014dac:	d000      	beq.n	8014db0 <HAL_I2C_Master_Transmit+0x2c>
 8014dae:	e0e7      	b.n	8014f80 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	2240      	movs	r2, #64	@ 0x40
 8014db4:	5c9b      	ldrb	r3, [r3, r2]
 8014db6:	2b01      	cmp	r3, #1
 8014db8:	d101      	bne.n	8014dbe <HAL_I2C_Master_Transmit+0x3a>
 8014dba:	2302      	movs	r3, #2
 8014dbc:	e0e1      	b.n	8014f82 <HAL_I2C_Master_Transmit+0x1fe>
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2240      	movs	r2, #64	@ 0x40
 8014dc2:	2101      	movs	r1, #1
 8014dc4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014dc6:	f7fe fc7d 	bl	80136c4 <HAL_GetTick>
 8014dca:	0003      	movs	r3, r0
 8014dcc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014dce:	2380      	movs	r3, #128	@ 0x80
 8014dd0:	0219      	lsls	r1, r3, #8
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	697b      	ldr	r3, [r7, #20]
 8014dd6:	9300      	str	r3, [sp, #0]
 8014dd8:	2319      	movs	r3, #25
 8014dda:	2201      	movs	r2, #1
 8014ddc:	f002 fa30 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 8014de0:	1e03      	subs	r3, r0, #0
 8014de2:	d001      	beq.n	8014de8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8014de4:	2301      	movs	r3, #1
 8014de6:	e0cc      	b.n	8014f82 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2241      	movs	r2, #65	@ 0x41
 8014dec:	2121      	movs	r1, #33	@ 0x21
 8014dee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2242      	movs	r2, #66	@ 0x42
 8014df4:	2110      	movs	r1, #16
 8014df6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2208      	movs	r2, #8
 8014e08:	18ba      	adds	r2, r7, r2
 8014e0a:	8812      	ldrh	r2, [r2, #0]
 8014e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2200      	movs	r2, #0
 8014e12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	2bff      	cmp	r3, #255	@ 0xff
 8014e1c:	d911      	bls.n	8014e42 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	22ff      	movs	r2, #255	@ 0xff
 8014e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e28:	b2da      	uxtb	r2, r3
 8014e2a:	2380      	movs	r3, #128	@ 0x80
 8014e2c:	045c      	lsls	r4, r3, #17
 8014e2e:	230a      	movs	r3, #10
 8014e30:	18fb      	adds	r3, r7, r3
 8014e32:	8819      	ldrh	r1, [r3, #0]
 8014e34:	68f8      	ldr	r0, [r7, #12]
 8014e36:	4b55      	ldr	r3, [pc, #340]	@ (8014f8c <HAL_I2C_Master_Transmit+0x208>)
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	0023      	movs	r3, r4
 8014e3c:	f002 fc52 	bl	80176e4 <I2C_TransferConfig>
 8014e40:	e075      	b.n	8014f2e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	2380      	movs	r3, #128	@ 0x80
 8014e54:	049c      	lsls	r4, r3, #18
 8014e56:	230a      	movs	r3, #10
 8014e58:	18fb      	adds	r3, r7, r3
 8014e5a:	8819      	ldrh	r1, [r3, #0]
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	4b4b      	ldr	r3, [pc, #300]	@ (8014f8c <HAL_I2C_Master_Transmit+0x208>)
 8014e60:	9300      	str	r3, [sp, #0]
 8014e62:	0023      	movs	r3, r4
 8014e64:	f002 fc3e 	bl	80176e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8014e68:	e061      	b.n	8014f2e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014e6a:	697a      	ldr	r2, [r7, #20]
 8014e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	0018      	movs	r0, r3
 8014e72:	f002 fa33 	bl	80172dc <I2C_WaitOnTXISFlagUntilTimeout>
 8014e76:	1e03      	subs	r3, r0, #0
 8014e78:	d001      	beq.n	8014e7e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e081      	b.n	8014f82 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e82:	781a      	ldrb	r2, [r3, #0]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e8e:	1c5a      	adds	r2, r3, #1
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	3b01      	subs	r3, #1
 8014e9c:	b29a      	uxth	r2, r3
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d03a      	beq.n	8014f2e <HAL_I2C_Master_Transmit+0x1aa>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d136      	bne.n	8014f2e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ec2:	68f8      	ldr	r0, [r7, #12]
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	0013      	movs	r3, r2
 8014eca:	2200      	movs	r2, #0
 8014ecc:	2180      	movs	r1, #128	@ 0x80
 8014ece:	f002 f9b7 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 8014ed2:	1e03      	subs	r3, r0, #0
 8014ed4:	d001      	beq.n	8014eda <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8014ed6:	2301      	movs	r3, #1
 8014ed8:	e053      	b.n	8014f82 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	2bff      	cmp	r3, #255	@ 0xff
 8014ee2:	d911      	bls.n	8014f08 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	22ff      	movs	r2, #255	@ 0xff
 8014ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014eee:	b2da      	uxtb	r2, r3
 8014ef0:	2380      	movs	r3, #128	@ 0x80
 8014ef2:	045c      	lsls	r4, r3, #17
 8014ef4:	230a      	movs	r3, #10
 8014ef6:	18fb      	adds	r3, r7, r3
 8014ef8:	8819      	ldrh	r1, [r3, #0]
 8014efa:	68f8      	ldr	r0, [r7, #12]
 8014efc:	2300      	movs	r3, #0
 8014efe:	9300      	str	r3, [sp, #0]
 8014f00:	0023      	movs	r3, r4
 8014f02:	f002 fbef 	bl	80176e4 <I2C_TransferConfig>
 8014f06:	e012      	b.n	8014f2e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f16:	b2da      	uxtb	r2, r3
 8014f18:	2380      	movs	r3, #128	@ 0x80
 8014f1a:	049c      	lsls	r4, r3, #18
 8014f1c:	230a      	movs	r3, #10
 8014f1e:	18fb      	adds	r3, r7, r3
 8014f20:	8819      	ldrh	r1, [r3, #0]
 8014f22:	68f8      	ldr	r0, [r7, #12]
 8014f24:	2300      	movs	r3, #0
 8014f26:	9300      	str	r3, [sp, #0]
 8014f28:	0023      	movs	r3, r4
 8014f2a:	f002 fbdb 	bl	80176e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014f32:	b29b      	uxth	r3, r3
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d198      	bne.n	8014e6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014f38:	697a      	ldr	r2, [r7, #20]
 8014f3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	0018      	movs	r0, r3
 8014f40:	f002 fa12 	bl	8017368 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014f44:	1e03      	subs	r3, r0, #0
 8014f46:	d001      	beq.n	8014f4c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8014f48:	2301      	movs	r3, #1
 8014f4a:	e01a      	b.n	8014f82 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	2220      	movs	r2, #32
 8014f52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	685a      	ldr	r2, [r3, #4]
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	490c      	ldr	r1, [pc, #48]	@ (8014f90 <HAL_I2C_Master_Transmit+0x20c>)
 8014f60:	400a      	ands	r2, r1
 8014f62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	2241      	movs	r2, #65	@ 0x41
 8014f68:	2120      	movs	r1, #32
 8014f6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2242      	movs	r2, #66	@ 0x42
 8014f70:	2100      	movs	r1, #0
 8014f72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2240      	movs	r2, #64	@ 0x40
 8014f78:	2100      	movs	r1, #0
 8014f7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	e000      	b.n	8014f82 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8014f80:	2302      	movs	r3, #2
  }
}
 8014f82:	0018      	movs	r0, r3
 8014f84:	46bd      	mov	sp, r7
 8014f86:	b007      	add	sp, #28
 8014f88:	bd90      	pop	{r4, r7, pc}
 8014f8a:	46c0      	nop			@ (mov r8, r8)
 8014f8c:	80002000 	.word	0x80002000
 8014f90:	fe00e800 	.word	0xfe00e800

08014f94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8014f94:	b590      	push	{r4, r7, lr}
 8014f96:	b089      	sub	sp, #36	@ 0x24
 8014f98:	af02      	add	r7, sp, #8
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	0008      	movs	r0, r1
 8014f9e:	607a      	str	r2, [r7, #4]
 8014fa0:	0019      	movs	r1, r3
 8014fa2:	230a      	movs	r3, #10
 8014fa4:	18fb      	adds	r3, r7, r3
 8014fa6:	1c02      	adds	r2, r0, #0
 8014fa8:	801a      	strh	r2, [r3, #0]
 8014faa:	2308      	movs	r3, #8
 8014fac:	18fb      	adds	r3, r7, r3
 8014fae:	1c0a      	adds	r2, r1, #0
 8014fb0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2241      	movs	r2, #65	@ 0x41
 8014fb6:	5c9b      	ldrb	r3, [r3, r2]
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	2b20      	cmp	r3, #32
 8014fbc:	d000      	beq.n	8014fc0 <HAL_I2C_Master_Receive+0x2c>
 8014fbe:	e0e8      	b.n	8015192 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	2240      	movs	r2, #64	@ 0x40
 8014fc4:	5c9b      	ldrb	r3, [r3, r2]
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d101      	bne.n	8014fce <HAL_I2C_Master_Receive+0x3a>
 8014fca:	2302      	movs	r3, #2
 8014fcc:	e0e2      	b.n	8015194 <HAL_I2C_Master_Receive+0x200>
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2240      	movs	r2, #64	@ 0x40
 8014fd2:	2101      	movs	r1, #1
 8014fd4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014fd6:	f7fe fb75 	bl	80136c4 <HAL_GetTick>
 8014fda:	0003      	movs	r3, r0
 8014fdc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014fde:	2380      	movs	r3, #128	@ 0x80
 8014fe0:	0219      	lsls	r1, r3, #8
 8014fe2:	68f8      	ldr	r0, [r7, #12]
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	2319      	movs	r3, #25
 8014fea:	2201      	movs	r2, #1
 8014fec:	f002 f928 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 8014ff0:	1e03      	subs	r3, r0, #0
 8014ff2:	d001      	beq.n	8014ff8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e0cd      	b.n	8015194 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2241      	movs	r2, #65	@ 0x41
 8014ffc:	2122      	movs	r1, #34	@ 0x22
 8014ffe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	2242      	movs	r2, #66	@ 0x42
 8015004:	2110      	movs	r1, #16
 8015006:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2200      	movs	r2, #0
 801500c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	687a      	ldr	r2, [r7, #4]
 8015012:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	2208      	movs	r2, #8
 8015018:	18ba      	adds	r2, r7, r2
 801501a:	8812      	ldrh	r2, [r2, #0]
 801501c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	2200      	movs	r2, #0
 8015022:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015028:	b29b      	uxth	r3, r3
 801502a:	2bff      	cmp	r3, #255	@ 0xff
 801502c:	d911      	bls.n	8015052 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	22ff      	movs	r2, #255	@ 0xff
 8015032:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015038:	b2da      	uxtb	r2, r3
 801503a:	2380      	movs	r3, #128	@ 0x80
 801503c:	045c      	lsls	r4, r3, #17
 801503e:	230a      	movs	r3, #10
 8015040:	18fb      	adds	r3, r7, r3
 8015042:	8819      	ldrh	r1, [r3, #0]
 8015044:	68f8      	ldr	r0, [r7, #12]
 8015046:	4b55      	ldr	r3, [pc, #340]	@ (801519c <HAL_I2C_Master_Receive+0x208>)
 8015048:	9300      	str	r3, [sp, #0]
 801504a:	0023      	movs	r3, r4
 801504c:	f002 fb4a 	bl	80176e4 <I2C_TransferConfig>
 8015050:	e076      	b.n	8015140 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015056:	b29a      	uxth	r2, r3
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015060:	b2da      	uxtb	r2, r3
 8015062:	2380      	movs	r3, #128	@ 0x80
 8015064:	049c      	lsls	r4, r3, #18
 8015066:	230a      	movs	r3, #10
 8015068:	18fb      	adds	r3, r7, r3
 801506a:	8819      	ldrh	r1, [r3, #0]
 801506c:	68f8      	ldr	r0, [r7, #12]
 801506e:	4b4b      	ldr	r3, [pc, #300]	@ (801519c <HAL_I2C_Master_Receive+0x208>)
 8015070:	9300      	str	r3, [sp, #0]
 8015072:	0023      	movs	r3, r4
 8015074:	f002 fb36 	bl	80176e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015078:	e062      	b.n	8015140 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801507a:	697a      	ldr	r2, [r7, #20]
 801507c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	0018      	movs	r0, r3
 8015082:	f002 f9b5 	bl	80173f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015086:	1e03      	subs	r3, r0, #0
 8015088:	d001      	beq.n	801508e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801508a:	2301      	movs	r3, #1
 801508c:	e082      	b.n	8015194 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015098:	b2d2      	uxtb	r2, r2
 801509a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150a0:	1c5a      	adds	r2, r3, #1
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80150aa:	3b01      	subs	r3, #1
 80150ac:	b29a      	uxth	r2, r3
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	3b01      	subs	r3, #1
 80150ba:	b29a      	uxth	r2, r3
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d03a      	beq.n	8015140 <HAL_I2C_Master_Receive+0x1ac>
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d136      	bne.n	8015140 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80150d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80150d4:	68f8      	ldr	r0, [r7, #12]
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	9300      	str	r3, [sp, #0]
 80150da:	0013      	movs	r3, r2
 80150dc:	2200      	movs	r2, #0
 80150de:	2180      	movs	r1, #128	@ 0x80
 80150e0:	f002 f8ae 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 80150e4:	1e03      	subs	r3, r0, #0
 80150e6:	d001      	beq.n	80150ec <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80150e8:	2301      	movs	r3, #1
 80150ea:	e053      	b.n	8015194 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	2bff      	cmp	r3, #255	@ 0xff
 80150f4:	d911      	bls.n	801511a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	22ff      	movs	r2, #255	@ 0xff
 80150fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015100:	b2da      	uxtb	r2, r3
 8015102:	2380      	movs	r3, #128	@ 0x80
 8015104:	045c      	lsls	r4, r3, #17
 8015106:	230a      	movs	r3, #10
 8015108:	18fb      	adds	r3, r7, r3
 801510a:	8819      	ldrh	r1, [r3, #0]
 801510c:	68f8      	ldr	r0, [r7, #12]
 801510e:	2300      	movs	r3, #0
 8015110:	9300      	str	r3, [sp, #0]
 8015112:	0023      	movs	r3, r4
 8015114:	f002 fae6 	bl	80176e4 <I2C_TransferConfig>
 8015118:	e012      	b.n	8015140 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801511e:	b29a      	uxth	r2, r3
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015128:	b2da      	uxtb	r2, r3
 801512a:	2380      	movs	r3, #128	@ 0x80
 801512c:	049c      	lsls	r4, r3, #18
 801512e:	230a      	movs	r3, #10
 8015130:	18fb      	adds	r3, r7, r3
 8015132:	8819      	ldrh	r1, [r3, #0]
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	2300      	movs	r3, #0
 8015138:	9300      	str	r3, [sp, #0]
 801513a:	0023      	movs	r3, r4
 801513c:	f002 fad2 	bl	80176e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015144:	b29b      	uxth	r3, r3
 8015146:	2b00      	cmp	r3, #0
 8015148:	d197      	bne.n	801507a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801514a:	697a      	ldr	r2, [r7, #20]
 801514c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	0018      	movs	r0, r3
 8015152:	f002 f909 	bl	8017368 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015156:	1e03      	subs	r3, r0, #0
 8015158:	d001      	beq.n	801515e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801515a:	2301      	movs	r3, #1
 801515c:	e01a      	b.n	8015194 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	2220      	movs	r2, #32
 8015164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	685a      	ldr	r2, [r3, #4]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	490b      	ldr	r1, [pc, #44]	@ (80151a0 <HAL_I2C_Master_Receive+0x20c>)
 8015172:	400a      	ands	r2, r1
 8015174:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2241      	movs	r2, #65	@ 0x41
 801517a:	2120      	movs	r1, #32
 801517c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2242      	movs	r2, #66	@ 0x42
 8015182:	2100      	movs	r1, #0
 8015184:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	2240      	movs	r2, #64	@ 0x40
 801518a:	2100      	movs	r1, #0
 801518c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801518e:	2300      	movs	r3, #0
 8015190:	e000      	b.n	8015194 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8015192:	2302      	movs	r3, #2
  }
}
 8015194:	0018      	movs	r0, r3
 8015196:	46bd      	mov	sp, r7
 8015198:	b007      	add	sp, #28
 801519a:	bd90      	pop	{r4, r7, pc}
 801519c:	80002400 	.word	0x80002400
 80151a0:	fe00e800 	.word	0xfe00e800

080151a4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80151a4:	b5b0      	push	{r4, r5, r7, lr}
 80151a6:	b088      	sub	sp, #32
 80151a8:	af02      	add	r7, sp, #8
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	0008      	movs	r0, r1
 80151ae:	607a      	str	r2, [r7, #4]
 80151b0:	0019      	movs	r1, r3
 80151b2:	230a      	movs	r3, #10
 80151b4:	18fb      	adds	r3, r7, r3
 80151b6:	1c02      	adds	r2, r0, #0
 80151b8:	801a      	strh	r2, [r3, #0]
 80151ba:	2308      	movs	r3, #8
 80151bc:	18fb      	adds	r3, r7, r3
 80151be:	1c0a      	adds	r2, r1, #0
 80151c0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	2241      	movs	r2, #65	@ 0x41
 80151c6:	5c9b      	ldrb	r3, [r3, r2]
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	2b20      	cmp	r3, #32
 80151cc:	d000      	beq.n	80151d0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80151ce:	e0dd      	b.n	801538c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	699a      	ldr	r2, [r3, #24]
 80151d6:	2380      	movs	r3, #128	@ 0x80
 80151d8:	021b      	lsls	r3, r3, #8
 80151da:	401a      	ands	r2, r3
 80151dc:	2380      	movs	r3, #128	@ 0x80
 80151de:	021b      	lsls	r3, r3, #8
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d101      	bne.n	80151e8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80151e4:	2302      	movs	r3, #2
 80151e6:	e0d2      	b.n	801538e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	2240      	movs	r2, #64	@ 0x40
 80151ec:	5c9b      	ldrb	r3, [r3, r2]
 80151ee:	2b01      	cmp	r3, #1
 80151f0:	d101      	bne.n	80151f6 <HAL_I2C_Master_Transmit_DMA+0x52>
 80151f2:	2302      	movs	r3, #2
 80151f4:	e0cb      	b.n	801538e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	2240      	movs	r2, #64	@ 0x40
 80151fa:	2101      	movs	r1, #1
 80151fc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2241      	movs	r2, #65	@ 0x41
 8015202:	2121      	movs	r1, #33	@ 0x21
 8015204:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2242      	movs	r2, #66	@ 0x42
 801520a:	2110      	movs	r1, #16
 801520c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2200      	movs	r2, #0
 8015212:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	687a      	ldr	r2, [r7, #4]
 8015218:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2208      	movs	r2, #8
 801521e:	18ba      	adds	r2, r7, r2
 8015220:	8812      	ldrh	r2, [r2, #0]
 8015222:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	4a5c      	ldr	r2, [pc, #368]	@ (8015398 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8015228:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	4a5b      	ldr	r2, [pc, #364]	@ (801539c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801522e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015234:	b29b      	uxth	r3, r3
 8015236:	2bff      	cmp	r3, #255	@ 0xff
 8015238:	d906      	bls.n	8015248 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	22ff      	movs	r2, #255	@ 0xff
 801523e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8015240:	2380      	movs	r3, #128	@ 0x80
 8015242:	045b      	lsls	r3, r3, #17
 8015244:	617b      	str	r3, [r7, #20]
 8015246:	e007      	b.n	8015258 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801524c:	b29a      	uxth	r2, r3
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8015252:	2380      	movs	r3, #128	@ 0x80
 8015254:	049b      	lsls	r3, r3, #18
 8015256:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801525c:	2b00      	cmp	r3, #0
 801525e:	d100      	bne.n	8015262 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8015260:	e078      	b.n	8015354 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015266:	2b00      	cmp	r3, #0
 8015268:	d023      	beq.n	80152b2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801526e:	4a4c      	ldr	r2, [pc, #304]	@ (80153a0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8015270:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015276:	4a4b      	ldr	r2, [pc, #300]	@ (80153a4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8015278:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801527e:	2200      	movs	r2, #0
 8015280:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015286:	2200      	movs	r2, #0
 8015288:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801528e:	6879      	ldr	r1, [r7, #4]
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	3328      	adds	r3, #40	@ 0x28
 8015296:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801529c:	2513      	movs	r5, #19
 801529e:	197c      	adds	r4, r7, r5
 80152a0:	f7fe ff62 	bl	8014168 <HAL_DMA_Start_IT>
 80152a4:	0003      	movs	r3, r0
 80152a6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80152a8:	197b      	adds	r3, r7, r5
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d13d      	bne.n	801532c <HAL_I2C_Master_Transmit_DMA+0x188>
 80152b0:	e013      	b.n	80152da <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2241      	movs	r2, #65	@ 0x41
 80152b6:	2120      	movs	r1, #32
 80152b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	2242      	movs	r2, #66	@ 0x42
 80152be:	2100      	movs	r1, #0
 80152c0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152c6:	2280      	movs	r2, #128	@ 0x80
 80152c8:	431a      	orrs	r2, r3
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2240      	movs	r2, #64	@ 0x40
 80152d2:	2100      	movs	r1, #0
 80152d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80152d6:	2301      	movs	r3, #1
 80152d8:	e059      	b.n	801538e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152de:	b2da      	uxtb	r2, r3
 80152e0:	697c      	ldr	r4, [r7, #20]
 80152e2:	230a      	movs	r3, #10
 80152e4:	18fb      	adds	r3, r7, r3
 80152e6:	8819      	ldrh	r1, [r3, #0]
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	4b2f      	ldr	r3, [pc, #188]	@ (80153a8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	0023      	movs	r3, r4
 80152f0:	f002 f9f8 	bl	80176e4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152f8:	b29a      	uxth	r2, r3
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152fe:	1ad3      	subs	r3, r2, r3
 8015300:	b29a      	uxth	r2, r3
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2240      	movs	r2, #64	@ 0x40
 801530a:	2100      	movs	r1, #0
 801530c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2110      	movs	r1, #16
 8015312:	0018      	movs	r0, r3
 8015314:	f002 fa20 	bl	8017758 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	681a      	ldr	r2, [r3, #0]
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2180      	movs	r1, #128	@ 0x80
 8015324:	01c9      	lsls	r1, r1, #7
 8015326:	430a      	orrs	r2, r1
 8015328:	601a      	str	r2, [r3, #0]
 801532a:	e02d      	b.n	8015388 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2241      	movs	r2, #65	@ 0x41
 8015330:	2120      	movs	r1, #32
 8015332:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2242      	movs	r2, #66	@ 0x42
 8015338:	2100      	movs	r1, #0
 801533a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015340:	2210      	movs	r2, #16
 8015342:	431a      	orrs	r2, r3
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	2240      	movs	r2, #64	@ 0x40
 801534c:	2100      	movs	r1, #0
 801534e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015350:	2301      	movs	r3, #1
 8015352:	e01c      	b.n	801538e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	4a15      	ldr	r2, [pc, #84]	@ (80153ac <HAL_I2C_Master_Transmit_DMA+0x208>)
 8015358:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801535e:	b2da      	uxtb	r2, r3
 8015360:	2380      	movs	r3, #128	@ 0x80
 8015362:	049c      	lsls	r4, r3, #18
 8015364:	230a      	movs	r3, #10
 8015366:	18fb      	adds	r3, r7, r3
 8015368:	8819      	ldrh	r1, [r3, #0]
 801536a:	68f8      	ldr	r0, [r7, #12]
 801536c:	4b0e      	ldr	r3, [pc, #56]	@ (80153a8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	0023      	movs	r3, r4
 8015372:	f002 f9b7 	bl	80176e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2240      	movs	r2, #64	@ 0x40
 801537a:	2100      	movs	r1, #0
 801537c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2101      	movs	r1, #1
 8015382:	0018      	movs	r0, r3
 8015384:	f002 f9e8 	bl	8017758 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015388:	2300      	movs	r3, #0
 801538a:	e000      	b.n	801538e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801538c:	2302      	movs	r3, #2
  }
}
 801538e:	0018      	movs	r0, r3
 8015390:	46bd      	mov	sp, r7
 8015392:	b006      	add	sp, #24
 8015394:	bdb0      	pop	{r4, r5, r7, pc}
 8015396:	46c0      	nop			@ (mov r8, r8)
 8015398:	ffff0000 	.word	0xffff0000
 801539c:	08016015 	.word	0x08016015
 80153a0:	08017091 	.word	0x08017091
 80153a4:	080171d1 	.word	0x080171d1
 80153a8:	80002000 	.word	0x80002000
 80153ac:	08015bc1 	.word	0x08015bc1

080153b0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80153b0:	b5b0      	push	{r4, r5, r7, lr}
 80153b2:	b088      	sub	sp, #32
 80153b4:	af02      	add	r7, sp, #8
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	0008      	movs	r0, r1
 80153ba:	607a      	str	r2, [r7, #4]
 80153bc:	0019      	movs	r1, r3
 80153be:	230a      	movs	r3, #10
 80153c0:	18fb      	adds	r3, r7, r3
 80153c2:	1c02      	adds	r2, r0, #0
 80153c4:	801a      	strh	r2, [r3, #0]
 80153c6:	2308      	movs	r3, #8
 80153c8:	18fb      	adds	r3, r7, r3
 80153ca:	1c0a      	adds	r2, r1, #0
 80153cc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2241      	movs	r2, #65	@ 0x41
 80153d2:	5c9b      	ldrb	r3, [r3, r2]
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	2b20      	cmp	r3, #32
 80153d8:	d000      	beq.n	80153dc <HAL_I2C_Master_Receive_DMA+0x2c>
 80153da:	e0dd      	b.n	8015598 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	699a      	ldr	r2, [r3, #24]
 80153e2:	2380      	movs	r3, #128	@ 0x80
 80153e4:	021b      	lsls	r3, r3, #8
 80153e6:	401a      	ands	r2, r3
 80153e8:	2380      	movs	r3, #128	@ 0x80
 80153ea:	021b      	lsls	r3, r3, #8
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d101      	bne.n	80153f4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80153f0:	2302      	movs	r3, #2
 80153f2:	e0d2      	b.n	801559a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	2240      	movs	r2, #64	@ 0x40
 80153f8:	5c9b      	ldrb	r3, [r3, r2]
 80153fa:	2b01      	cmp	r3, #1
 80153fc:	d101      	bne.n	8015402 <HAL_I2C_Master_Receive_DMA+0x52>
 80153fe:	2302      	movs	r3, #2
 8015400:	e0cb      	b.n	801559a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	2240      	movs	r2, #64	@ 0x40
 8015406:	2101      	movs	r1, #1
 8015408:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	2241      	movs	r2, #65	@ 0x41
 801540e:	2122      	movs	r1, #34	@ 0x22
 8015410:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	2242      	movs	r2, #66	@ 0x42
 8015416:	2110      	movs	r1, #16
 8015418:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	2200      	movs	r2, #0
 801541e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	2208      	movs	r2, #8
 801542a:	18ba      	adds	r2, r7, r2
 801542c:	8812      	ldrh	r2, [r2, #0]
 801542e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	4a5c      	ldr	r2, [pc, #368]	@ (80155a4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8015434:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	4a5b      	ldr	r2, [pc, #364]	@ (80155a8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 801543a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015440:	b29b      	uxth	r3, r3
 8015442:	2bff      	cmp	r3, #255	@ 0xff
 8015444:	d906      	bls.n	8015454 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	22ff      	movs	r2, #255	@ 0xff
 801544a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801544c:	2380      	movs	r3, #128	@ 0x80
 801544e:	045b      	lsls	r3, r3, #17
 8015450:	617b      	str	r3, [r7, #20]
 8015452:	e007      	b.n	8015464 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015458:	b29a      	uxth	r2, r3
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801545e:	2380      	movs	r3, #128	@ 0x80
 8015460:	049b      	lsls	r3, r3, #18
 8015462:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015468:	2b00      	cmp	r3, #0
 801546a:	d100      	bne.n	801546e <HAL_I2C_Master_Receive_DMA+0xbe>
 801546c:	e078      	b.n	8015560 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015472:	2b00      	cmp	r3, #0
 8015474:	d023      	beq.n	80154be <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801547a:	4a4c      	ldr	r2, [pc, #304]	@ (80155ac <HAL_I2C_Master_Receive_DMA+0x1fc>)
 801547c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015482:	4a4b      	ldr	r2, [pc, #300]	@ (80155b0 <HAL_I2C_Master_Receive_DMA+0x200>)
 8015484:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801548a:	2200      	movs	r2, #0
 801548c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015492:	2200      	movs	r2, #0
 8015494:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	3324      	adds	r3, #36	@ 0x24
 80154a0:	0019      	movs	r1, r3
 80154a2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80154a8:	2513      	movs	r5, #19
 80154aa:	197c      	adds	r4, r7, r5
 80154ac:	f7fe fe5c 	bl	8014168 <HAL_DMA_Start_IT>
 80154b0:	0003      	movs	r3, r0
 80154b2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80154b4:	197b      	adds	r3, r7, r5
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d13d      	bne.n	8015538 <HAL_I2C_Master_Receive_DMA+0x188>
 80154bc:	e013      	b.n	80154e6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2241      	movs	r2, #65	@ 0x41
 80154c2:	2120      	movs	r1, #32
 80154c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2242      	movs	r2, #66	@ 0x42
 80154ca:	2100      	movs	r1, #0
 80154cc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154d2:	2280      	movs	r2, #128	@ 0x80
 80154d4:	431a      	orrs	r2, r3
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2240      	movs	r2, #64	@ 0x40
 80154de:	2100      	movs	r1, #0
 80154e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80154e2:	2301      	movs	r3, #1
 80154e4:	e059      	b.n	801559a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80154ea:	b2da      	uxtb	r2, r3
 80154ec:	697c      	ldr	r4, [r7, #20]
 80154ee:	230a      	movs	r3, #10
 80154f0:	18fb      	adds	r3, r7, r3
 80154f2:	8819      	ldrh	r1, [r3, #0]
 80154f4:	68f8      	ldr	r0, [r7, #12]
 80154f6:	4b2f      	ldr	r3, [pc, #188]	@ (80155b4 <HAL_I2C_Master_Receive_DMA+0x204>)
 80154f8:	9300      	str	r3, [sp, #0]
 80154fa:	0023      	movs	r3, r4
 80154fc:	f002 f8f2 	bl	80176e4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015504:	b29a      	uxth	r2, r3
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801550a:	1ad3      	subs	r3, r2, r3
 801550c:	b29a      	uxth	r2, r3
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	2240      	movs	r2, #64	@ 0x40
 8015516:	2100      	movs	r1, #0
 8015518:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	2110      	movs	r1, #16
 801551e:	0018      	movs	r0, r3
 8015520:	f002 f91a 	bl	8017758 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	2180      	movs	r1, #128	@ 0x80
 8015530:	0209      	lsls	r1, r1, #8
 8015532:	430a      	orrs	r2, r1
 8015534:	601a      	str	r2, [r3, #0]
 8015536:	e02d      	b.n	8015594 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	2241      	movs	r2, #65	@ 0x41
 801553c:	2120      	movs	r1, #32
 801553e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	2242      	movs	r2, #66	@ 0x42
 8015544:	2100      	movs	r1, #0
 8015546:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801554c:	2210      	movs	r2, #16
 801554e:	431a      	orrs	r2, r3
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	2240      	movs	r2, #64	@ 0x40
 8015558:	2100      	movs	r1, #0
 801555a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801555c:	2301      	movs	r3, #1
 801555e:	e01c      	b.n	801559a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	4a15      	ldr	r2, [pc, #84]	@ (80155b8 <HAL_I2C_Master_Receive_DMA+0x208>)
 8015564:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801556a:	b2da      	uxtb	r2, r3
 801556c:	2380      	movs	r3, #128	@ 0x80
 801556e:	049c      	lsls	r4, r3, #18
 8015570:	230a      	movs	r3, #10
 8015572:	18fb      	adds	r3, r7, r3
 8015574:	8819      	ldrh	r1, [r3, #0]
 8015576:	68f8      	ldr	r0, [r7, #12]
 8015578:	4b0e      	ldr	r3, [pc, #56]	@ (80155b4 <HAL_I2C_Master_Receive_DMA+0x204>)
 801557a:	9300      	str	r3, [sp, #0]
 801557c:	0023      	movs	r3, r4
 801557e:	f002 f8b1 	bl	80176e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2240      	movs	r2, #64	@ 0x40
 8015586:	2100      	movs	r1, #0
 8015588:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2101      	movs	r1, #1
 801558e:	0018      	movs	r0, r3
 8015590:	f002 f8e2 	bl	8017758 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015594:	2300      	movs	r3, #0
 8015596:	e000      	b.n	801559a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015598:	2302      	movs	r3, #2
  }
}
 801559a:	0018      	movs	r0, r3
 801559c:	46bd      	mov	sp, r7
 801559e:	b006      	add	sp, #24
 80155a0:	bdb0      	pop	{r4, r5, r7, pc}
 80155a2:	46c0      	nop			@ (mov r8, r8)
 80155a4:	ffff0000 	.word	0xffff0000
 80155a8:	08016015 	.word	0x08016015
 80155ac:	08017131 	.word	0x08017131
 80155b0:	080171d1 	.word	0x080171d1
 80155b4:	80002400 	.word	0x80002400
 80155b8:	08015bc1 	.word	0x08015bc1

080155bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80155bc:	b590      	push	{r4, r7, lr}
 80155be:	b089      	sub	sp, #36	@ 0x24
 80155c0:	af02      	add	r7, sp, #8
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	000c      	movs	r4, r1
 80155c6:	0010      	movs	r0, r2
 80155c8:	0019      	movs	r1, r3
 80155ca:	230a      	movs	r3, #10
 80155cc:	18fb      	adds	r3, r7, r3
 80155ce:	1c22      	adds	r2, r4, #0
 80155d0:	801a      	strh	r2, [r3, #0]
 80155d2:	2308      	movs	r3, #8
 80155d4:	18fb      	adds	r3, r7, r3
 80155d6:	1c02      	adds	r2, r0, #0
 80155d8:	801a      	strh	r2, [r3, #0]
 80155da:	1dbb      	adds	r3, r7, #6
 80155dc:	1c0a      	adds	r2, r1, #0
 80155de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	2241      	movs	r2, #65	@ 0x41
 80155e4:	5c9b      	ldrb	r3, [r3, r2]
 80155e6:	b2db      	uxtb	r3, r3
 80155e8:	2b20      	cmp	r3, #32
 80155ea:	d000      	beq.n	80155ee <HAL_I2C_Mem_Read+0x32>
 80155ec:	e110      	b.n	8015810 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80155ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d004      	beq.n	80155fe <HAL_I2C_Mem_Read+0x42>
 80155f4:	232c      	movs	r3, #44	@ 0x2c
 80155f6:	18fb      	adds	r3, r7, r3
 80155f8:	881b      	ldrh	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d105      	bne.n	801560a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2280      	movs	r2, #128	@ 0x80
 8015602:	0092      	lsls	r2, r2, #2
 8015604:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015606:	2301      	movs	r3, #1
 8015608:	e103      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	2240      	movs	r2, #64	@ 0x40
 801560e:	5c9b      	ldrb	r3, [r3, r2]
 8015610:	2b01      	cmp	r3, #1
 8015612:	d101      	bne.n	8015618 <HAL_I2C_Mem_Read+0x5c>
 8015614:	2302      	movs	r3, #2
 8015616:	e0fc      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2240      	movs	r2, #64	@ 0x40
 801561c:	2101      	movs	r1, #1
 801561e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015620:	f7fe f850 	bl	80136c4 <HAL_GetTick>
 8015624:	0003      	movs	r3, r0
 8015626:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015628:	2380      	movs	r3, #128	@ 0x80
 801562a:	0219      	lsls	r1, r3, #8
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	9300      	str	r3, [sp, #0]
 8015632:	2319      	movs	r3, #25
 8015634:	2201      	movs	r2, #1
 8015636:	f001 fe03 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 801563a:	1e03      	subs	r3, r0, #0
 801563c:	d001      	beq.n	8015642 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 801563e:	2301      	movs	r3, #1
 8015640:	e0e7      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2241      	movs	r2, #65	@ 0x41
 8015646:	2122      	movs	r1, #34	@ 0x22
 8015648:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	2242      	movs	r2, #66	@ 0x42
 801564e:	2140      	movs	r1, #64	@ 0x40
 8015650:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	2200      	movs	r2, #0
 8015656:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801565c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	222c      	movs	r2, #44	@ 0x2c
 8015662:	18ba      	adds	r2, r7, r2
 8015664:	8812      	ldrh	r2, [r2, #0]
 8015666:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	2200      	movs	r2, #0
 801566c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801566e:	1dbb      	adds	r3, r7, #6
 8015670:	881c      	ldrh	r4, [r3, #0]
 8015672:	2308      	movs	r3, #8
 8015674:	18fb      	adds	r3, r7, r3
 8015676:	881a      	ldrh	r2, [r3, #0]
 8015678:	230a      	movs	r3, #10
 801567a:	18fb      	adds	r3, r7, r3
 801567c:	8819      	ldrh	r1, [r3, #0]
 801567e:	68f8      	ldr	r0, [r7, #12]
 8015680:	697b      	ldr	r3, [r7, #20]
 8015682:	9301      	str	r3, [sp, #4]
 8015684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	0023      	movs	r3, r4
 801568a:	f000 ffc1 	bl	8016610 <I2C_RequestMemoryRead>
 801568e:	1e03      	subs	r3, r0, #0
 8015690:	d005      	beq.n	801569e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2240      	movs	r2, #64	@ 0x40
 8015696:	2100      	movs	r1, #0
 8015698:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801569a:	2301      	movs	r3, #1
 801569c:	e0b9      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	2bff      	cmp	r3, #255	@ 0xff
 80156a6:	d911      	bls.n	80156cc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	22ff      	movs	r2, #255	@ 0xff
 80156ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156b2:	b2da      	uxtb	r2, r3
 80156b4:	2380      	movs	r3, #128	@ 0x80
 80156b6:	045c      	lsls	r4, r3, #17
 80156b8:	230a      	movs	r3, #10
 80156ba:	18fb      	adds	r3, r7, r3
 80156bc:	8819      	ldrh	r1, [r3, #0]
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	4b56      	ldr	r3, [pc, #344]	@ (801581c <HAL_I2C_Mem_Read+0x260>)
 80156c2:	9300      	str	r3, [sp, #0]
 80156c4:	0023      	movs	r3, r4
 80156c6:	f002 f80d 	bl	80176e4 <I2C_TransferConfig>
 80156ca:	e012      	b.n	80156f2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156d0:	b29a      	uxth	r2, r3
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156da:	b2da      	uxtb	r2, r3
 80156dc:	2380      	movs	r3, #128	@ 0x80
 80156de:	049c      	lsls	r4, r3, #18
 80156e0:	230a      	movs	r3, #10
 80156e2:	18fb      	adds	r3, r7, r3
 80156e4:	8819      	ldrh	r1, [r3, #0]
 80156e6:	68f8      	ldr	r0, [r7, #12]
 80156e8:	4b4c      	ldr	r3, [pc, #304]	@ (801581c <HAL_I2C_Mem_Read+0x260>)
 80156ea:	9300      	str	r3, [sp, #0]
 80156ec:	0023      	movs	r3, r4
 80156ee:	f001 fff9 	bl	80176e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80156f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156f4:	68f8      	ldr	r0, [r7, #12]
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	9300      	str	r3, [sp, #0]
 80156fa:	0013      	movs	r3, r2
 80156fc:	2200      	movs	r2, #0
 80156fe:	2104      	movs	r1, #4
 8015700:	f001 fd9e 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 8015704:	1e03      	subs	r3, r0, #0
 8015706:	d001      	beq.n	801570c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015708:	2301      	movs	r3, #1
 801570a:	e082      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015716:	b2d2      	uxtb	r2, r2
 8015718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801571e:	1c5a      	adds	r2, r3, #1
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015728:	3b01      	subs	r3, #1
 801572a:	b29a      	uxth	r2, r3
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015734:	b29b      	uxth	r3, r3
 8015736:	3b01      	subs	r3, #1
 8015738:	b29a      	uxth	r2, r3
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015742:	b29b      	uxth	r3, r3
 8015744:	2b00      	cmp	r3, #0
 8015746:	d03a      	beq.n	80157be <HAL_I2C_Mem_Read+0x202>
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801574c:	2b00      	cmp	r3, #0
 801574e:	d136      	bne.n	80157be <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015752:	68f8      	ldr	r0, [r7, #12]
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	9300      	str	r3, [sp, #0]
 8015758:	0013      	movs	r3, r2
 801575a:	2200      	movs	r2, #0
 801575c:	2180      	movs	r1, #128	@ 0x80
 801575e:	f001 fd6f 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 8015762:	1e03      	subs	r3, r0, #0
 8015764:	d001      	beq.n	801576a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8015766:	2301      	movs	r3, #1
 8015768:	e053      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801576e:	b29b      	uxth	r3, r3
 8015770:	2bff      	cmp	r3, #255	@ 0xff
 8015772:	d911      	bls.n	8015798 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	22ff      	movs	r2, #255	@ 0xff
 8015778:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801577e:	b2da      	uxtb	r2, r3
 8015780:	2380      	movs	r3, #128	@ 0x80
 8015782:	045c      	lsls	r4, r3, #17
 8015784:	230a      	movs	r3, #10
 8015786:	18fb      	adds	r3, r7, r3
 8015788:	8819      	ldrh	r1, [r3, #0]
 801578a:	68f8      	ldr	r0, [r7, #12]
 801578c:	2300      	movs	r3, #0
 801578e:	9300      	str	r3, [sp, #0]
 8015790:	0023      	movs	r3, r4
 8015792:	f001 ffa7 	bl	80176e4 <I2C_TransferConfig>
 8015796:	e012      	b.n	80157be <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801579c:	b29a      	uxth	r2, r3
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157a6:	b2da      	uxtb	r2, r3
 80157a8:	2380      	movs	r3, #128	@ 0x80
 80157aa:	049c      	lsls	r4, r3, #18
 80157ac:	230a      	movs	r3, #10
 80157ae:	18fb      	adds	r3, r7, r3
 80157b0:	8819      	ldrh	r1, [r3, #0]
 80157b2:	68f8      	ldr	r0, [r7, #12]
 80157b4:	2300      	movs	r3, #0
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	0023      	movs	r3, r4
 80157ba:	f001 ff93 	bl	80176e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157c2:	b29b      	uxth	r3, r3
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d194      	bne.n	80156f2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80157c8:	697a      	ldr	r2, [r7, #20]
 80157ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	0018      	movs	r0, r3
 80157d0:	f001 fdca 	bl	8017368 <I2C_WaitOnSTOPFlagUntilTimeout>
 80157d4:	1e03      	subs	r3, r0, #0
 80157d6:	d001      	beq.n	80157dc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80157d8:	2301      	movs	r3, #1
 80157da:	e01a      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	2220      	movs	r2, #32
 80157e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	685a      	ldr	r2, [r3, #4]
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	490c      	ldr	r1, [pc, #48]	@ (8015820 <HAL_I2C_Mem_Read+0x264>)
 80157f0:	400a      	ands	r2, r1
 80157f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	2241      	movs	r2, #65	@ 0x41
 80157f8:	2120      	movs	r1, #32
 80157fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	2242      	movs	r2, #66	@ 0x42
 8015800:	2100      	movs	r1, #0
 8015802:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2240      	movs	r2, #64	@ 0x40
 8015808:	2100      	movs	r1, #0
 801580a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801580c:	2300      	movs	r3, #0
 801580e:	e000      	b.n	8015812 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8015810:	2302      	movs	r3, #2
  }
}
 8015812:	0018      	movs	r0, r3
 8015814:	46bd      	mov	sp, r7
 8015816:	b007      	add	sp, #28
 8015818:	bd90      	pop	{r4, r7, pc}
 801581a:	46c0      	nop			@ (mov r8, r8)
 801581c:	80002400 	.word	0x80002400
 8015820:	fe00e800 	.word	0xfe00e800

08015824 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8015824:	b5b0      	push	{r4, r5, r7, lr}
 8015826:	b088      	sub	sp, #32
 8015828:	af02      	add	r7, sp, #8
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	000c      	movs	r4, r1
 801582e:	0010      	movs	r0, r2
 8015830:	0019      	movs	r1, r3
 8015832:	230a      	movs	r3, #10
 8015834:	18fb      	adds	r3, r7, r3
 8015836:	1c22      	adds	r2, r4, #0
 8015838:	801a      	strh	r2, [r3, #0]
 801583a:	2308      	movs	r3, #8
 801583c:	18fb      	adds	r3, r7, r3
 801583e:	1c02      	adds	r2, r0, #0
 8015840:	801a      	strh	r2, [r3, #0]
 8015842:	1dbb      	adds	r3, r7, #6
 8015844:	1c0a      	adds	r2, r1, #0
 8015846:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2241      	movs	r2, #65	@ 0x41
 801584c:	5c9b      	ldrb	r3, [r3, r2]
 801584e:	b2db      	uxtb	r3, r3
 8015850:	2b20      	cmp	r3, #32
 8015852:	d000      	beq.n	8015856 <HAL_I2C_Mem_Write_DMA+0x32>
 8015854:	e0d8      	b.n	8015a08 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8015856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015858:	2b00      	cmp	r3, #0
 801585a:	d004      	beq.n	8015866 <HAL_I2C_Mem_Write_DMA+0x42>
 801585c:	232c      	movs	r3, #44	@ 0x2c
 801585e:	18fb      	adds	r3, r7, r3
 8015860:	881b      	ldrh	r3, [r3, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d105      	bne.n	8015872 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2280      	movs	r2, #128	@ 0x80
 801586a:	0092      	lsls	r2, r2, #2
 801586c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801586e:	2301      	movs	r3, #1
 8015870:	e0cb      	b.n	8015a0a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	699a      	ldr	r2, [r3, #24]
 8015878:	2380      	movs	r3, #128	@ 0x80
 801587a:	021b      	lsls	r3, r3, #8
 801587c:	401a      	ands	r2, r3
 801587e:	2380      	movs	r3, #128	@ 0x80
 8015880:	021b      	lsls	r3, r3, #8
 8015882:	429a      	cmp	r2, r3
 8015884:	d101      	bne.n	801588a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8015886:	2302      	movs	r3, #2
 8015888:	e0bf      	b.n	8015a0a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	2240      	movs	r2, #64	@ 0x40
 801588e:	5c9b      	ldrb	r3, [r3, r2]
 8015890:	2b01      	cmp	r3, #1
 8015892:	d101      	bne.n	8015898 <HAL_I2C_Mem_Write_DMA+0x74>
 8015894:	2302      	movs	r3, #2
 8015896:	e0b8      	b.n	8015a0a <HAL_I2C_Mem_Write_DMA+0x1e6>
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2240      	movs	r2, #64	@ 0x40
 801589c:	2101      	movs	r1, #1
 801589e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	2241      	movs	r2, #65	@ 0x41
 80158a4:	2121      	movs	r1, #33	@ 0x21
 80158a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2242      	movs	r2, #66	@ 0x42
 80158ac:	2140      	movs	r1, #64	@ 0x40
 80158ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2200      	movs	r2, #0
 80158b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80158ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	222c      	movs	r2, #44	@ 0x2c
 80158c0:	18ba      	adds	r2, r7, r2
 80158c2:	8812      	ldrh	r2, [r2, #0]
 80158c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	4a52      	ldr	r2, [pc, #328]	@ (8015a14 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 80158ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	4a52      	ldr	r2, [pc, #328]	@ (8015a18 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 80158d0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80158d2:	230a      	movs	r3, #10
 80158d4:	18fb      	adds	r3, r7, r3
 80158d6:	881a      	ldrh	r2, [r3, #0]
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	2bff      	cmp	r3, #255	@ 0xff
 80158e4:	d903      	bls.n	80158ee <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	22ff      	movs	r2, #255	@ 0xff
 80158ea:	851a      	strh	r2, [r3, #40]	@ 0x28
 80158ec:	e004      	b.n	80158f8 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80158f2:	b29a      	uxth	r2, r3
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80158f8:	1dbb      	adds	r3, r7, #6
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	d10b      	bne.n	8015918 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015900:	2308      	movs	r3, #8
 8015902:	18fb      	adds	r3, r7, r3
 8015904:	881b      	ldrh	r3, [r3, #0]
 8015906:	b2da      	uxtb	r2, r3
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2201      	movs	r2, #1
 8015912:	4252      	negs	r2, r2
 8015914:	651a      	str	r2, [r3, #80]	@ 0x50
 8015916:	e00e      	b.n	8015936 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015918:	2108      	movs	r1, #8
 801591a:	187b      	adds	r3, r7, r1
 801591c:	881b      	ldrh	r3, [r3, #0]
 801591e:	0a1b      	lsrs	r3, r3, #8
 8015920:	b29b      	uxth	r3, r3
 8015922:	b2da      	uxtb	r2, r3
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 801592a:	187b      	adds	r3, r7, r1
 801592c:	881b      	ldrh	r3, [r3, #0]
 801592e:	b2db      	uxtb	r3, r3
 8015930:	001a      	movs	r2, r3
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801593a:	2b00      	cmp	r3, #0
 801593c:	d023      	beq.n	8015986 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015942:	4a36      	ldr	r2, [pc, #216]	@ (8015a1c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8015944:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801594a:	4a35      	ldr	r2, [pc, #212]	@ (8015a20 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 801594c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015952:	2200      	movs	r2, #0
 8015954:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801595a:	2200      	movs	r2, #0
 801595c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	3328      	adds	r3, #40	@ 0x28
 801596a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015970:	2517      	movs	r5, #23
 8015972:	197c      	adds	r4, r7, r5
 8015974:	f7fe fbf8 	bl	8014168 <HAL_DMA_Start_IT>
 8015978:	0003      	movs	r3, r0
 801597a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 801597c:	197b      	adds	r3, r7, r5
 801597e:	781b      	ldrb	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d12d      	bne.n	80159e0 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8015984:	e013      	b.n	80159ae <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2241      	movs	r2, #65	@ 0x41
 801598a:	2120      	movs	r1, #32
 801598c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2242      	movs	r2, #66	@ 0x42
 8015992:	2100      	movs	r1, #0
 8015994:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801599a:	2280      	movs	r2, #128	@ 0x80
 801599c:	431a      	orrs	r2, r3
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2240      	movs	r2, #64	@ 0x40
 80159a6:	2100      	movs	r1, #0
 80159a8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80159aa:	2301      	movs	r3, #1
 80159ac:	e02d      	b.n	8015a0a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80159ae:	1dbb      	adds	r3, r7, #6
 80159b0:	881b      	ldrh	r3, [r3, #0]
 80159b2:	b2da      	uxtb	r2, r3
 80159b4:	2380      	movs	r3, #128	@ 0x80
 80159b6:	045c      	lsls	r4, r3, #17
 80159b8:	230a      	movs	r3, #10
 80159ba:	18fb      	adds	r3, r7, r3
 80159bc:	8819      	ldrh	r1, [r3, #0]
 80159be:	68f8      	ldr	r0, [r7, #12]
 80159c0:	4b18      	ldr	r3, [pc, #96]	@ (8015a24 <HAL_I2C_Mem_Write_DMA+0x200>)
 80159c2:	9300      	str	r3, [sp, #0]
 80159c4:	0023      	movs	r3, r4
 80159c6:	f001 fe8d 	bl	80176e4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2240      	movs	r2, #64	@ 0x40
 80159ce:	2100      	movs	r1, #0
 80159d0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	2101      	movs	r1, #1
 80159d6:	0018      	movs	r0, r3
 80159d8:	f001 febe 	bl	8017758 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80159dc:	2300      	movs	r3, #0
 80159de:	e014      	b.n	8015a0a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2241      	movs	r2, #65	@ 0x41
 80159e4:	2120      	movs	r1, #32
 80159e6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2242      	movs	r2, #66	@ 0x42
 80159ec:	2100      	movs	r1, #0
 80159ee:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159f4:	2210      	movs	r2, #16
 80159f6:	431a      	orrs	r2, r3
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2240      	movs	r2, #64	@ 0x40
 8015a00:	2100      	movs	r1, #0
 8015a02:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015a04:	2301      	movs	r3, #1
 8015a06:	e000      	b.n	8015a0a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8015a08:	2302      	movs	r3, #2
  }
}
 8015a0a:	0018      	movs	r0, r3
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	b006      	add	sp, #24
 8015a10:	bdb0      	pop	{r4, r5, r7, pc}
 8015a12:	46c0      	nop			@ (mov r8, r8)
 8015a14:	ffff0000 	.word	0xffff0000
 8015a18:	0801620d 	.word	0x0801620d
 8015a1c:	08017091 	.word	0x08017091
 8015a20:	080171d1 	.word	0x080171d1
 8015a24:	80002000 	.word	0x80002000

08015a28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b084      	sub	sp, #16
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	699b      	ldr	r3, [r3, #24]
 8015a36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d005      	beq.n	8015a54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a4c:	68ba      	ldr	r2, [r7, #8]
 8015a4e:	68f9      	ldr	r1, [r7, #12]
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	4798      	blx	r3
  }
}
 8015a54:	46c0      	nop			@ (mov r8, r8)
 8015a56:	46bd      	mov	sp, r7
 8015a58:	b004      	add	sp, #16
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b086      	sub	sp, #24
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	699b      	ldr	r3, [r3, #24]
 8015a6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015a74:	697a      	ldr	r2, [r7, #20]
 8015a76:	2380      	movs	r3, #128	@ 0x80
 8015a78:	005b      	lsls	r3, r3, #1
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	d00e      	beq.n	8015a9c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	2280      	movs	r2, #128	@ 0x80
 8015a82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015a84:	d00a      	beq.n	8015a9c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a8a:	2201      	movs	r2, #1
 8015a8c:	431a      	orrs	r2, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	2280      	movs	r2, #128	@ 0x80
 8015a98:	0052      	lsls	r2, r2, #1
 8015a9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015a9c:	697a      	ldr	r2, [r7, #20]
 8015a9e:	2380      	movs	r3, #128	@ 0x80
 8015aa0:	00db      	lsls	r3, r3, #3
 8015aa2:	4013      	ands	r3, r2
 8015aa4:	d00e      	beq.n	8015ac4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	2280      	movs	r2, #128	@ 0x80
 8015aaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015aac:	d00a      	beq.n	8015ac4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ab2:	2208      	movs	r2, #8
 8015ab4:	431a      	orrs	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2280      	movs	r2, #128	@ 0x80
 8015ac0:	00d2      	lsls	r2, r2, #3
 8015ac2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015ac4:	697a      	ldr	r2, [r7, #20]
 8015ac6:	2380      	movs	r3, #128	@ 0x80
 8015ac8:	009b      	lsls	r3, r3, #2
 8015aca:	4013      	ands	r3, r2
 8015acc:	d00e      	beq.n	8015aec <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	2280      	movs	r2, #128	@ 0x80
 8015ad2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015ad4:	d00a      	beq.n	8015aec <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ada:	2202      	movs	r2, #2
 8015adc:	431a      	orrs	r2, r3
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	2280      	movs	r2, #128	@ 0x80
 8015ae8:	0092      	lsls	r2, r2, #2
 8015aea:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015af0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	220b      	movs	r2, #11
 8015af6:	4013      	ands	r3, r2
 8015af8:	d005      	beq.n	8015b06 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8015afa:	68fa      	ldr	r2, [r7, #12]
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	0011      	movs	r1, r2
 8015b00:	0018      	movs	r0, r3
 8015b02:	f001 f977 	bl	8016df4 <I2C_ITError>
  }
}
 8015b06:	46c0      	nop			@ (mov r8, r8)
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	b006      	add	sp, #24
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b082      	sub	sp, #8
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8015b16:	46c0      	nop			@ (mov r8, r8)
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	b002      	add	sp, #8
 8015b1c:	bd80      	pop	{r7, pc}

08015b1e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015b1e:	b580      	push	{r7, lr}
 8015b20:	b082      	sub	sp, #8
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8015b26:	46c0      	nop			@ (mov r8, r8)
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	b002      	add	sp, #8
 8015b2c:	bd80      	pop	{r7, pc}

08015b2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015b2e:	b580      	push	{r7, lr}
 8015b30:	b082      	sub	sp, #8
 8015b32:	af00      	add	r7, sp, #0
 8015b34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8015b36:	46c0      	nop			@ (mov r8, r8)
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	b002      	add	sp, #8
 8015b3c:	bd80      	pop	{r7, pc}

08015b3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015b3e:	b580      	push	{r7, lr}
 8015b40:	b082      	sub	sp, #8
 8015b42:	af00      	add	r7, sp, #0
 8015b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8015b46:	46c0      	nop			@ (mov r8, r8)
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	b002      	add	sp, #8
 8015b4c:	bd80      	pop	{r7, pc}

08015b4e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8015b4e:	b580      	push	{r7, lr}
 8015b50:	b082      	sub	sp, #8
 8015b52:	af00      	add	r7, sp, #0
 8015b54:	6078      	str	r0, [r7, #4]
 8015b56:	0008      	movs	r0, r1
 8015b58:	0011      	movs	r1, r2
 8015b5a:	1cfb      	adds	r3, r7, #3
 8015b5c:	1c02      	adds	r2, r0, #0
 8015b5e:	701a      	strb	r2, [r3, #0]
 8015b60:	003b      	movs	r3, r7
 8015b62:	1c0a      	adds	r2, r1, #0
 8015b64:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8015b66:	46c0      	nop			@ (mov r8, r8)
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	b002      	add	sp, #8
 8015b6c:	bd80      	pop	{r7, pc}

08015b6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015b6e:	b580      	push	{r7, lr}
 8015b70:	b082      	sub	sp, #8
 8015b72:	af00      	add	r7, sp, #0
 8015b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8015b76:	46c0      	nop			@ (mov r8, r8)
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	b002      	add	sp, #8
 8015b7c:	bd80      	pop	{r7, pc}

08015b7e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015b7e:	b580      	push	{r7, lr}
 8015b80:	b082      	sub	sp, #8
 8015b82:	af00      	add	r7, sp, #0
 8015b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8015b86:	46c0      	nop			@ (mov r8, r8)
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	b002      	add	sp, #8
 8015b8c:	bd80      	pop	{r7, pc}

08015b8e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015b8e:	b580      	push	{r7, lr}
 8015b90:	b082      	sub	sp, #8
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8015b96:	46c0      	nop			@ (mov r8, r8)
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	b002      	add	sp, #8
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8015b9e:	b580      	push	{r7, lr}
 8015ba0:	b082      	sub	sp, #8
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8015ba6:	46c0      	nop			@ (mov r8, r8)
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	b002      	add	sp, #8
 8015bac:	bd80      	pop	{r7, pc}

08015bae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015bae:	b580      	push	{r7, lr}
 8015bb0:	b082      	sub	sp, #8
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8015bb6:	46c0      	nop			@ (mov r8, r8)
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	b002      	add	sp, #8
 8015bbc:	bd80      	pop	{r7, pc}
	...

08015bc0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8015bc0:	b590      	push	{r4, r7, lr}
 8015bc2:	b089      	sub	sp, #36	@ 0x24
 8015bc4:	af02      	add	r7, sp, #8
 8015bc6:	60f8      	str	r0, [r7, #12]
 8015bc8:	60b9      	str	r1, [r7, #8]
 8015bca:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	2240      	movs	r2, #64	@ 0x40
 8015bd4:	5c9b      	ldrb	r3, [r3, r2]
 8015bd6:	2b01      	cmp	r3, #1
 8015bd8:	d101      	bne.n	8015bde <I2C_Master_ISR_IT+0x1e>
 8015bda:	2302      	movs	r3, #2
 8015bdc:	e113      	b.n	8015e06 <I2C_Master_ISR_IT+0x246>
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2240      	movs	r2, #64	@ 0x40
 8015be2:	2101      	movs	r1, #1
 8015be4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015be6:	697b      	ldr	r3, [r7, #20]
 8015be8:	2210      	movs	r2, #16
 8015bea:	4013      	ands	r3, r2
 8015bec:	d012      	beq.n	8015c14 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2210      	movs	r2, #16
 8015bf2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015bf4:	d00e      	beq.n	8015c14 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	2210      	movs	r2, #16
 8015bfc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c02:	2204      	movs	r2, #4
 8015c04:	431a      	orrs	r2, r3
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	0018      	movs	r0, r3
 8015c0e:	f001 fa1c 	bl	801704a <I2C_Flush_TXDR>
 8015c12:	e0e5      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015c14:	697b      	ldr	r3, [r7, #20]
 8015c16:	2204      	movs	r2, #4
 8015c18:	4013      	ands	r3, r2
 8015c1a:	d021      	beq.n	8015c60 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2204      	movs	r2, #4
 8015c20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015c22:	d01d      	beq.n	8015c60 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	2204      	movs	r2, #4
 8015c28:	4393      	bics	r3, r2
 8015c2a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c36:	b2d2      	uxtb	r2, r2
 8015c38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c3e:	1c5a      	adds	r2, r3, #1
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c48:	3b01      	subs	r3, #1
 8015c4a:	b29a      	uxth	r2, r3
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c54:	b29b      	uxth	r3, r3
 8015c56:	3b01      	subs	r3, #1
 8015c58:	b29a      	uxth	r2, r3
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015c5e:	e0bf      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	2202      	movs	r2, #2
 8015c64:	4013      	ands	r3, r2
 8015c66:	d01c      	beq.n	8015ca2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2202      	movs	r2, #2
 8015c6c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015c6e:	d018      	beq.n	8015ca2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c74:	781a      	ldrb	r2, [r3, #0]
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c80:	1c5a      	adds	r2, r3, #1
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c8a:	3b01      	subs	r3, #1
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	3b01      	subs	r3, #1
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015ca0:	e09e      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	2280      	movs	r2, #128	@ 0x80
 8015ca6:	4013      	ands	r3, r2
 8015ca8:	d100      	bne.n	8015cac <I2C_Master_ISR_IT+0xec>
 8015caa:	e069      	b.n	8015d80 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2240      	movs	r2, #64	@ 0x40
 8015cb0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8015cb2:	d065      	beq.n	8015d80 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d04a      	beq.n	8015d54 <I2C_Master_ISR_IT+0x194>
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d146      	bne.n	8015d54 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	685b      	ldr	r3, [r3, #4]
 8015ccc:	b29a      	uxth	r2, r3
 8015cce:	2112      	movs	r1, #18
 8015cd0:	187b      	adds	r3, r7, r1
 8015cd2:	0592      	lsls	r2, r2, #22
 8015cd4:	0d92      	lsrs	r2, r2, #22
 8015cd6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	2bff      	cmp	r3, #255	@ 0xff
 8015ce0:	d910      	bls.n	8015d04 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	22ff      	movs	r2, #255	@ 0xff
 8015ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cec:	b2da      	uxtb	r2, r3
 8015cee:	2380      	movs	r3, #128	@ 0x80
 8015cf0:	045c      	lsls	r4, r3, #17
 8015cf2:	187b      	adds	r3, r7, r1
 8015cf4:	8819      	ldrh	r1, [r3, #0]
 8015cf6:	68f8      	ldr	r0, [r7, #12]
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	9300      	str	r3, [sp, #0]
 8015cfc:	0023      	movs	r3, r4
 8015cfe:	f001 fcf1 	bl	80176e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d02:	e03c      	b.n	8015d7e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d08:	b29a      	uxth	r2, r3
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d12:	4a3f      	ldr	r2, [pc, #252]	@ (8015e10 <I2C_Master_ISR_IT+0x250>)
 8015d14:	4293      	cmp	r3, r2
 8015d16:	d00e      	beq.n	8015d36 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d1c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015d22:	2312      	movs	r3, #18
 8015d24:	18fb      	adds	r3, r7, r3
 8015d26:	8819      	ldrh	r1, [r3, #0]
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	9300      	str	r3, [sp, #0]
 8015d2e:	0023      	movs	r3, r4
 8015d30:	f001 fcd8 	bl	80176e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d34:	e023      	b.n	8015d7e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d3a:	b2da      	uxtb	r2, r3
 8015d3c:	2380      	movs	r3, #128	@ 0x80
 8015d3e:	049c      	lsls	r4, r3, #18
 8015d40:	2312      	movs	r3, #18
 8015d42:	18fb      	adds	r3, r7, r3
 8015d44:	8819      	ldrh	r1, [r3, #0]
 8015d46:	68f8      	ldr	r0, [r7, #12]
 8015d48:	2300      	movs	r3, #0
 8015d4a:	9300      	str	r3, [sp, #0]
 8015d4c:	0023      	movs	r3, r4
 8015d4e:	f001 fcc9 	bl	80176e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d52:	e014      	b.n	8015d7e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	685a      	ldr	r2, [r3, #4]
 8015d5a:	2380      	movs	r3, #128	@ 0x80
 8015d5c:	049b      	lsls	r3, r3, #18
 8015d5e:	401a      	ands	r2, r3
 8015d60:	2380      	movs	r3, #128	@ 0x80
 8015d62:	049b      	lsls	r3, r3, #18
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d004      	beq.n	8015d72 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	0018      	movs	r0, r3
 8015d6c:	f000 fd56 	bl	801681c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015d70:	e036      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2140      	movs	r1, #64	@ 0x40
 8015d76:	0018      	movs	r0, r3
 8015d78:	f001 f83c 	bl	8016df4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015d7c:	e030      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
 8015d7e:	e02f      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	2240      	movs	r2, #64	@ 0x40
 8015d84:	4013      	ands	r3, r2
 8015d86:	d02b      	beq.n	8015de0 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2240      	movs	r2, #64	@ 0x40
 8015d8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8015d8e:	d027      	beq.n	8015de0 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d94:	b29b      	uxth	r3, r3
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d11d      	bne.n	8015dd6 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	685a      	ldr	r2, [r3, #4]
 8015da0:	2380      	movs	r3, #128	@ 0x80
 8015da2:	049b      	lsls	r3, r3, #18
 8015da4:	401a      	ands	r2, r3
 8015da6:	2380      	movs	r3, #128	@ 0x80
 8015da8:	049b      	lsls	r3, r3, #18
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d018      	beq.n	8015de0 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015db2:	4a17      	ldr	r2, [pc, #92]	@ (8015e10 <I2C_Master_ISR_IT+0x250>)
 8015db4:	4293      	cmp	r3, r2
 8015db6:	d109      	bne.n	8015dcc <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	685a      	ldr	r2, [r3, #4]
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	2180      	movs	r1, #128	@ 0x80
 8015dc4:	01c9      	lsls	r1, r1, #7
 8015dc6:	430a      	orrs	r2, r1
 8015dc8:	605a      	str	r2, [r3, #4]
 8015dca:	e009      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	0018      	movs	r0, r3
 8015dd0:	f000 fd24 	bl	801681c <I2C_ITMasterSeqCplt>
 8015dd4:	e004      	b.n	8015de0 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	2140      	movs	r1, #64	@ 0x40
 8015dda:	0018      	movs	r0, r3
 8015ddc:	f001 f80a 	bl	8016df4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	2220      	movs	r2, #32
 8015de4:	4013      	ands	r3, r2
 8015de6:	d009      	beq.n	8015dfc <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2220      	movs	r2, #32
 8015dec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015dee:	d005      	beq.n	8015dfc <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8015df0:	697a      	ldr	r2, [r7, #20]
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	0011      	movs	r1, r2
 8015df6:	0018      	movs	r0, r3
 8015df8:	f000 fdb6 	bl	8016968 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2240      	movs	r2, #64	@ 0x40
 8015e00:	2100      	movs	r1, #0
 8015e02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e04:	2300      	movs	r3, #0
}
 8015e06:	0018      	movs	r0, r3
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	b007      	add	sp, #28
 8015e0c:	bd90      	pop	{r4, r7, pc}
 8015e0e:	46c0      	nop			@ (mov r8, r8)
 8015e10:	ffff0000 	.word	0xffff0000

08015e14 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b086      	sub	sp, #24
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	60f8      	str	r0, [r7, #12]
 8015e1c:	60b9      	str	r1, [r7, #8]
 8015e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	2240      	movs	r2, #64	@ 0x40
 8015e2e:	5c9b      	ldrb	r3, [r3, r2]
 8015e30:	2b01      	cmp	r3, #1
 8015e32:	d101      	bne.n	8015e38 <I2C_Slave_ISR_IT+0x24>
 8015e34:	2302      	movs	r3, #2
 8015e36:	e0e6      	b.n	8016006 <I2C_Slave_ISR_IT+0x1f2>
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2240      	movs	r2, #64	@ 0x40
 8015e3c:	2101      	movs	r1, #1
 8015e3e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	2220      	movs	r2, #32
 8015e44:	4013      	ands	r3, r2
 8015e46:	d009      	beq.n	8015e5c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2220      	movs	r2, #32
 8015e4c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8015e4e:	d005      	beq.n	8015e5c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8015e50:	693a      	ldr	r2, [r7, #16]
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	0011      	movs	r1, r2
 8015e56:	0018      	movs	r0, r3
 8015e58:	f000 fe54 	bl	8016b04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015e5c:	693b      	ldr	r3, [r7, #16]
 8015e5e:	2210      	movs	r2, #16
 8015e60:	4013      	ands	r3, r2
 8015e62:	d052      	beq.n	8015f0a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2210      	movs	r2, #16
 8015e68:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8015e6a:	d04e      	beq.n	8015f0a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015e70:	b29b      	uxth	r3, r3
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d12d      	bne.n	8015ed2 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	2241      	movs	r2, #65	@ 0x41
 8015e7a:	5c9b      	ldrb	r3, [r3, r2]
 8015e7c:	b2db      	uxtb	r3, r3
 8015e7e:	2b28      	cmp	r3, #40	@ 0x28
 8015e80:	d10b      	bne.n	8015e9a <I2C_Slave_ISR_IT+0x86>
 8015e82:	697a      	ldr	r2, [r7, #20]
 8015e84:	2380      	movs	r3, #128	@ 0x80
 8015e86:	049b      	lsls	r3, r3, #18
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d106      	bne.n	8015e9a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8015e8c:	693a      	ldr	r2, [r7, #16]
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	0011      	movs	r1, r2
 8015e92:	0018      	movs	r0, r3
 8015e94:	f000 ff56 	bl	8016d44 <I2C_ITListenCplt>
 8015e98:	e036      	b.n	8015f08 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2241      	movs	r2, #65	@ 0x41
 8015e9e:	5c9b      	ldrb	r3, [r3, r2]
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	2b29      	cmp	r3, #41	@ 0x29
 8015ea4:	d110      	bne.n	8015ec8 <I2C_Slave_ISR_IT+0xb4>
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	4a59      	ldr	r2, [pc, #356]	@ (8016010 <I2C_Slave_ISR_IT+0x1fc>)
 8015eaa:	4293      	cmp	r3, r2
 8015eac:	d00c      	beq.n	8015ec8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2210      	movs	r2, #16
 8015eb4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	0018      	movs	r0, r3
 8015eba:	f001 f8c6 	bl	801704a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	0018      	movs	r0, r3
 8015ec2:	f000 fced 	bl	80168a0 <I2C_ITSlaveSeqCplt>
 8015ec6:	e01f      	b.n	8015f08 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2210      	movs	r2, #16
 8015ece:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8015ed0:	e091      	b.n	8015ff6 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	2210      	movs	r2, #16
 8015ed8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ede:	2204      	movs	r2, #4
 8015ee0:	431a      	orrs	r2, r3
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8015ee6:	697b      	ldr	r3, [r7, #20]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d005      	beq.n	8015ef8 <I2C_Slave_ISR_IT+0xe4>
 8015eec:	697a      	ldr	r2, [r7, #20]
 8015eee:	2380      	movs	r3, #128	@ 0x80
 8015ef0:	045b      	lsls	r3, r3, #17
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d000      	beq.n	8015ef8 <I2C_Slave_ISR_IT+0xe4>
 8015ef6:	e07e      	b.n	8015ff6 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	0011      	movs	r1, r2
 8015f00:	0018      	movs	r0, r3
 8015f02:	f000 ff77 	bl	8016df4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8015f06:	e076      	b.n	8015ff6 <I2C_Slave_ISR_IT+0x1e2>
 8015f08:	e075      	b.n	8015ff6 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015f0a:	693b      	ldr	r3, [r7, #16]
 8015f0c:	2204      	movs	r2, #4
 8015f0e:	4013      	ands	r3, r2
 8015f10:	d02f      	beq.n	8015f72 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2204      	movs	r2, #4
 8015f16:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8015f18:	d02b      	beq.n	8015f72 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f1e:	b29b      	uxth	r3, r3
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d018      	beq.n	8015f56 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f2e:	b2d2      	uxtb	r2, r2
 8015f30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f36:	1c5a      	adds	r2, r3, #1
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015f40:	3b01      	subs	r3, #1
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	3b01      	subs	r3, #1
 8015f50:	b29a      	uxth	r2, r3
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d14c      	bne.n	8015ffa <I2C_Slave_ISR_IT+0x1e6>
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	4a2b      	ldr	r2, [pc, #172]	@ (8016010 <I2C_Slave_ISR_IT+0x1fc>)
 8015f64:	4293      	cmp	r3, r2
 8015f66:	d048      	beq.n	8015ffa <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	0018      	movs	r0, r3
 8015f6c:	f000 fc98 	bl	80168a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8015f70:	e043      	b.n	8015ffa <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	2208      	movs	r2, #8
 8015f76:	4013      	ands	r3, r2
 8015f78:	d00a      	beq.n	8015f90 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2208      	movs	r2, #8
 8015f7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015f80:	d006      	beq.n	8015f90 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8015f82:	693a      	ldr	r2, [r7, #16]
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	0011      	movs	r1, r2
 8015f88:	0018      	movs	r0, r3
 8015f8a:	f000 fba3 	bl	80166d4 <I2C_ITAddrCplt>
 8015f8e:	e035      	b.n	8015ffc <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	2202      	movs	r2, #2
 8015f94:	4013      	ands	r3, r2
 8015f96:	d031      	beq.n	8015ffc <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2202      	movs	r2, #2
 8015f9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8015f9e:	d02d      	beq.n	8015ffc <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d018      	beq.n	8015fdc <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fae:	781a      	ldrb	r2, [r3, #0]
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fba:	1c5a      	adds	r2, r3, #1
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	3b01      	subs	r3, #1
 8015fc8:	b29a      	uxth	r2, r3
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015fd2:	3b01      	subs	r3, #1
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015fda:	e00f      	b.n	8015ffc <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8015fdc:	697a      	ldr	r2, [r7, #20]
 8015fde:	2380      	movs	r3, #128	@ 0x80
 8015fe0:	045b      	lsls	r3, r3, #17
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d002      	beq.n	8015fec <I2C_Slave_ISR_IT+0x1d8>
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d107      	bne.n	8015ffc <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	0018      	movs	r0, r3
 8015ff0:	f000 fc56 	bl	80168a0 <I2C_ITSlaveSeqCplt>
 8015ff4:	e002      	b.n	8015ffc <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8015ff6:	46c0      	nop			@ (mov r8, r8)
 8015ff8:	e000      	b.n	8015ffc <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8015ffa:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2240      	movs	r2, #64	@ 0x40
 8016000:	2100      	movs	r1, #0
 8016002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016004:	2300      	movs	r3, #0
}
 8016006:	0018      	movs	r0, r3
 8016008:	46bd      	mov	sp, r7
 801600a:	b006      	add	sp, #24
 801600c:	bd80      	pop	{r7, pc}
 801600e:	46c0      	nop			@ (mov r8, r8)
 8016010:	ffff0000 	.word	0xffff0000

08016014 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8016014:	b590      	push	{r4, r7, lr}
 8016016:	b089      	sub	sp, #36	@ 0x24
 8016018:	af02      	add	r7, sp, #8
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	2240      	movs	r2, #64	@ 0x40
 8016024:	5c9b      	ldrb	r3, [r3, r2]
 8016026:	2b01      	cmp	r3, #1
 8016028:	d101      	bne.n	801602e <I2C_Master_ISR_DMA+0x1a>
 801602a:	2302      	movs	r3, #2
 801602c:	e0e7      	b.n	80161fe <I2C_Master_ISR_DMA+0x1ea>
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2240      	movs	r2, #64	@ 0x40
 8016032:	2101      	movs	r1, #1
 8016034:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016036:	68bb      	ldr	r3, [r7, #8]
 8016038:	2210      	movs	r2, #16
 801603a:	4013      	ands	r3, r2
 801603c:	d017      	beq.n	801606e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2210      	movs	r2, #16
 8016042:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016044:	d013      	beq.n	801606e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	2210      	movs	r2, #16
 801604c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016052:	2204      	movs	r2, #4
 8016054:	431a      	orrs	r2, r3
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	2120      	movs	r1, #32
 801605e:	0018      	movs	r0, r3
 8016060:	f001 fb7a 	bl	8017758 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	0018      	movs	r0, r3
 8016068:	f000 ffef 	bl	801704a <I2C_Flush_TXDR>
 801606c:	e0c2      	b.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801606e:	68bb      	ldr	r3, [r7, #8]
 8016070:	2280      	movs	r2, #128	@ 0x80
 8016072:	4013      	ands	r3, r2
 8016074:	d100      	bne.n	8016078 <I2C_Master_ISR_DMA+0x64>
 8016076:	e07c      	b.n	8016172 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	2240      	movs	r2, #64	@ 0x40
 801607c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801607e:	d100      	bne.n	8016082 <I2C_Master_ISR_DMA+0x6e>
 8016080:	e077      	b.n	8016172 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	681a      	ldr	r2, [r3, #0]
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	2140      	movs	r1, #64	@ 0x40
 801608e:	438a      	bics	r2, r1
 8016090:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016096:	b29b      	uxth	r3, r3
 8016098:	2b00      	cmp	r3, #0
 801609a:	d055      	beq.n	8016148 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	b29a      	uxth	r2, r3
 80160a4:	2312      	movs	r3, #18
 80160a6:	18fb      	adds	r3, r7, r3
 80160a8:	0592      	lsls	r2, r2, #22
 80160aa:	0d92      	lsrs	r2, r2, #22
 80160ac:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160b2:	b29b      	uxth	r3, r3
 80160b4:	2bff      	cmp	r3, #255	@ 0xff
 80160b6:	d906      	bls.n	80160c6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	22ff      	movs	r2, #255	@ 0xff
 80160bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80160be:	2380      	movs	r3, #128	@ 0x80
 80160c0:	045b      	lsls	r3, r3, #17
 80160c2:	617b      	str	r3, [r7, #20]
 80160c4:	e010      	b.n	80160e8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160ca:	b29a      	uxth	r2, r3
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160d4:	4a4c      	ldr	r2, [pc, #304]	@ (8016208 <I2C_Master_ISR_DMA+0x1f4>)
 80160d6:	4293      	cmp	r3, r2
 80160d8:	d003      	beq.n	80160e2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160de:	617b      	str	r3, [r7, #20]
 80160e0:	e002      	b.n	80160e8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80160e2:	2380      	movs	r3, #128	@ 0x80
 80160e4:	049b      	lsls	r3, r3, #18
 80160e6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160ec:	b2da      	uxtb	r2, r3
 80160ee:	697c      	ldr	r4, [r7, #20]
 80160f0:	2312      	movs	r3, #18
 80160f2:	18fb      	adds	r3, r7, r3
 80160f4:	8819      	ldrh	r1, [r3, #0]
 80160f6:	68f8      	ldr	r0, [r7, #12]
 80160f8:	2300      	movs	r3, #0
 80160fa:	9300      	str	r3, [sp, #0]
 80160fc:	0023      	movs	r3, r4
 80160fe:	f001 faf1 	bl	80176e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016106:	b29a      	uxth	r2, r3
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801610c:	1ad3      	subs	r3, r2, r3
 801610e:	b29a      	uxth	r2, r3
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	2241      	movs	r2, #65	@ 0x41
 8016118:	5c9b      	ldrb	r3, [r3, r2]
 801611a:	b2db      	uxtb	r3, r3
 801611c:	2b22      	cmp	r3, #34	@ 0x22
 801611e:	d109      	bne.n	8016134 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	681a      	ldr	r2, [r3, #0]
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	2180      	movs	r1, #128	@ 0x80
 801612c:	0209      	lsls	r1, r1, #8
 801612e:	430a      	orrs	r2, r1
 8016130:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016132:	e05f      	b.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	681a      	ldr	r2, [r3, #0]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	2180      	movs	r1, #128	@ 0x80
 8016140:	01c9      	lsls	r1, r1, #7
 8016142:	430a      	orrs	r2, r1
 8016144:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016146:	e055      	b.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	685a      	ldr	r2, [r3, #4]
 801614e:	2380      	movs	r3, #128	@ 0x80
 8016150:	049b      	lsls	r3, r3, #18
 8016152:	401a      	ands	r2, r3
 8016154:	2380      	movs	r3, #128	@ 0x80
 8016156:	049b      	lsls	r3, r3, #18
 8016158:	429a      	cmp	r2, r3
 801615a:	d004      	beq.n	8016166 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	0018      	movs	r0, r3
 8016160:	f000 fb5c 	bl	801681c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8016164:	e046      	b.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2140      	movs	r1, #64	@ 0x40
 801616a:	0018      	movs	r0, r3
 801616c:	f000 fe42 	bl	8016df4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016170:	e040      	b.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016172:	68bb      	ldr	r3, [r7, #8]
 8016174:	2240      	movs	r2, #64	@ 0x40
 8016176:	4013      	ands	r3, r2
 8016178:	d02c      	beq.n	80161d4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	2240      	movs	r2, #64	@ 0x40
 801617e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016180:	d028      	beq.n	80161d4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016186:	b29b      	uxth	r3, r3
 8016188:	2b00      	cmp	r3, #0
 801618a:	d11d      	bne.n	80161c8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	685a      	ldr	r2, [r3, #4]
 8016192:	2380      	movs	r3, #128	@ 0x80
 8016194:	049b      	lsls	r3, r3, #18
 8016196:	401a      	ands	r2, r3
 8016198:	2380      	movs	r3, #128	@ 0x80
 801619a:	049b      	lsls	r3, r3, #18
 801619c:	429a      	cmp	r2, r3
 801619e:	d028      	beq.n	80161f2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161a4:	4a18      	ldr	r2, [pc, #96]	@ (8016208 <I2C_Master_ISR_DMA+0x1f4>)
 80161a6:	4293      	cmp	r3, r2
 80161a8:	d109      	bne.n	80161be <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	685a      	ldr	r2, [r3, #4]
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	2180      	movs	r1, #128	@ 0x80
 80161b6:	01c9      	lsls	r1, r1, #7
 80161b8:	430a      	orrs	r2, r1
 80161ba:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80161bc:	e019      	b.n	80161f2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	0018      	movs	r0, r3
 80161c2:	f000 fb2b 	bl	801681c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80161c6:	e014      	b.n	80161f2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	2140      	movs	r1, #64	@ 0x40
 80161cc:	0018      	movs	r0, r3
 80161ce:	f000 fe11 	bl	8016df4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80161d2:	e00e      	b.n	80161f2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	2220      	movs	r2, #32
 80161d8:	4013      	ands	r3, r2
 80161da:	d00b      	beq.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2220      	movs	r2, #32
 80161e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80161e2:	d007      	beq.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80161e4:	68ba      	ldr	r2, [r7, #8]
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	0011      	movs	r1, r2
 80161ea:	0018      	movs	r0, r3
 80161ec:	f000 fbbc 	bl	8016968 <I2C_ITMasterCplt>
 80161f0:	e000      	b.n	80161f4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80161f2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2240      	movs	r2, #64	@ 0x40
 80161f8:	2100      	movs	r1, #0
 80161fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80161fc:	2300      	movs	r3, #0
}
 80161fe:	0018      	movs	r0, r3
 8016200:	46bd      	mov	sp, r7
 8016202:	b007      	add	sp, #28
 8016204:	bd90      	pop	{r4, r7, pc}
 8016206:	46c0      	nop			@ (mov r8, r8)
 8016208:	ffff0000 	.word	0xffff0000

0801620c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 801620c:	b590      	push	{r4, r7, lr}
 801620e:	b089      	sub	sp, #36	@ 0x24
 8016210:	af02      	add	r7, sp, #8
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8016218:	4b88      	ldr	r3, [pc, #544]	@ (801643c <I2C_Mem_ISR_DMA+0x230>)
 801621a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	2240      	movs	r2, #64	@ 0x40
 8016220:	5c9b      	ldrb	r3, [r3, r2]
 8016222:	2b01      	cmp	r3, #1
 8016224:	d101      	bne.n	801622a <I2C_Mem_ISR_DMA+0x1e>
 8016226:	2302      	movs	r3, #2
 8016228:	e104      	b.n	8016434 <I2C_Mem_ISR_DMA+0x228>
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	2240      	movs	r2, #64	@ 0x40
 801622e:	2101      	movs	r1, #1
 8016230:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	2210      	movs	r2, #16
 8016236:	4013      	ands	r3, r2
 8016238:	d017      	beq.n	801626a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2210      	movs	r2, #16
 801623e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016240:	d013      	beq.n	801626a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2210      	movs	r2, #16
 8016248:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801624e:	2204      	movs	r2, #4
 8016250:	431a      	orrs	r2, r3
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2120      	movs	r1, #32
 801625a:	0018      	movs	r0, r3
 801625c:	f001 fa7c 	bl	8017758 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	0018      	movs	r0, r3
 8016264:	f000 fef1 	bl	801704a <I2C_Flush_TXDR>
 8016268:	e0df      	b.n	801642a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	2202      	movs	r2, #2
 801626e:	4013      	ands	r3, r2
 8016270:	d00d      	beq.n	801628e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2202      	movs	r2, #2
 8016276:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016278:	d009      	beq.n	801628e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	68fa      	ldr	r2, [r7, #12]
 8016280:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016282:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2201      	movs	r2, #1
 8016288:	4252      	negs	r2, r2
 801628a:	651a      	str	r2, [r3, #80]	@ 0x50
 801628c:	e0cd      	b.n	801642a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	2280      	movs	r2, #128	@ 0x80
 8016292:	4013      	ands	r3, r2
 8016294:	d05e      	beq.n	8016354 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2240      	movs	r2, #64	@ 0x40
 801629a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801629c:	d05a      	beq.n	8016354 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2110      	movs	r1, #16
 80162a2:	0018      	movs	r0, r3
 80162a4:	f001 fa58 	bl	8017758 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d04a      	beq.n	8016348 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	2bff      	cmp	r3, #255	@ 0xff
 80162ba:	d910      	bls.n	80162de <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	22ff      	movs	r2, #255	@ 0xff
 80162c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162c6:	b299      	uxth	r1, r3
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162cc:	b2da      	uxtb	r2, r3
 80162ce:	2380      	movs	r3, #128	@ 0x80
 80162d0:	045b      	lsls	r3, r3, #17
 80162d2:	68f8      	ldr	r0, [r7, #12]
 80162d4:	2400      	movs	r4, #0
 80162d6:	9400      	str	r4, [sp, #0]
 80162d8:	f001 fa04 	bl	80176e4 <I2C_TransferConfig>
 80162dc:	e011      	b.n	8016302 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162e2:	b29a      	uxth	r2, r3
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80162ec:	b299      	uxth	r1, r3
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162f2:	b2da      	uxtb	r2, r3
 80162f4:	2380      	movs	r3, #128	@ 0x80
 80162f6:	049b      	lsls	r3, r3, #18
 80162f8:	68f8      	ldr	r0, [r7, #12]
 80162fa:	2400      	movs	r4, #0
 80162fc:	9400      	str	r4, [sp, #0]
 80162fe:	f001 f9f1 	bl	80176e4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016306:	b29a      	uxth	r2, r3
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801630c:	1ad3      	subs	r3, r2, r3
 801630e:	b29a      	uxth	r2, r3
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2241      	movs	r2, #65	@ 0x41
 8016318:	5c9b      	ldrb	r3, [r3, r2]
 801631a:	b2db      	uxtb	r3, r3
 801631c:	2b22      	cmp	r3, #34	@ 0x22
 801631e:	d109      	bne.n	8016334 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	681a      	ldr	r2, [r3, #0]
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	2180      	movs	r1, #128	@ 0x80
 801632c:	0209      	lsls	r1, r1, #8
 801632e:	430a      	orrs	r2, r1
 8016330:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016332:	e07a      	b.n	801642a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2180      	movs	r1, #128	@ 0x80
 8016340:	01c9      	lsls	r1, r1, #7
 8016342:	430a      	orrs	r2, r1
 8016344:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016346:	e070      	b.n	801642a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2140      	movs	r1, #64	@ 0x40
 801634c:	0018      	movs	r0, r3
 801634e:	f000 fd51 	bl	8016df4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016352:	e06a      	b.n	801642a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	2240      	movs	r2, #64	@ 0x40
 8016358:	4013      	ands	r3, r2
 801635a:	d058      	beq.n	801640e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2240      	movs	r2, #64	@ 0x40
 8016360:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016362:	d054      	beq.n	801640e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	2241      	movs	r2, #65	@ 0x41
 8016368:	5c9b      	ldrb	r3, [r3, r2]
 801636a:	b2db      	uxtb	r3, r3
 801636c:	2b22      	cmp	r3, #34	@ 0x22
 801636e:	d101      	bne.n	8016374 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8016370:	4b33      	ldr	r3, [pc, #204]	@ (8016440 <I2C_Mem_ISR_DMA+0x234>)
 8016372:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016378:	b29b      	uxth	r3, r3
 801637a:	2bff      	cmp	r3, #255	@ 0xff
 801637c:	d911      	bls.n	80163a2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	22ff      	movs	r2, #255	@ 0xff
 8016382:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016388:	b299      	uxth	r1, r3
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801638e:	b2da      	uxtb	r2, r3
 8016390:	2380      	movs	r3, #128	@ 0x80
 8016392:	045c      	lsls	r4, r3, #17
 8016394:	68f8      	ldr	r0, [r7, #12]
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	9300      	str	r3, [sp, #0]
 801639a:	0023      	movs	r3, r4
 801639c:	f001 f9a2 	bl	80176e4 <I2C_TransferConfig>
 80163a0:	e012      	b.n	80163c8 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163a6:	b29a      	uxth	r2, r3
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80163b0:	b299      	uxth	r1, r3
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163b6:	b2da      	uxtb	r2, r3
 80163b8:	2380      	movs	r3, #128	@ 0x80
 80163ba:	049c      	lsls	r4, r3, #18
 80163bc:	68f8      	ldr	r0, [r7, #12]
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	9300      	str	r3, [sp, #0]
 80163c2:	0023      	movs	r3, r4
 80163c4:	f001 f98e 	bl	80176e4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163cc:	b29a      	uxth	r2, r3
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163d2:	1ad3      	subs	r3, r2, r3
 80163d4:	b29a      	uxth	r2, r3
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2241      	movs	r2, #65	@ 0x41
 80163de:	5c9b      	ldrb	r3, [r3, r2]
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	2b22      	cmp	r3, #34	@ 0x22
 80163e4:	d109      	bne.n	80163fa <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	681a      	ldr	r2, [r3, #0]
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2180      	movs	r1, #128	@ 0x80
 80163f2:	0209      	lsls	r1, r1, #8
 80163f4:	430a      	orrs	r2, r1
 80163f6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80163f8:	e017      	b.n	801642a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	681a      	ldr	r2, [r3, #0]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	2180      	movs	r1, #128	@ 0x80
 8016406:	01c9      	lsls	r1, r1, #7
 8016408:	430a      	orrs	r2, r1
 801640a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801640c:	e00d      	b.n	801642a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	2220      	movs	r2, #32
 8016412:	4013      	ands	r3, r2
 8016414:	d009      	beq.n	801642a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2220      	movs	r2, #32
 801641a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801641c:	d005      	beq.n	801642a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801641e:	68ba      	ldr	r2, [r7, #8]
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	0011      	movs	r1, r2
 8016424:	0018      	movs	r0, r3
 8016426:	f000 fa9f 	bl	8016968 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	2240      	movs	r2, #64	@ 0x40
 801642e:	2100      	movs	r1, #0
 8016430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016432:	2300      	movs	r3, #0
}
 8016434:	0018      	movs	r0, r3
 8016436:	46bd      	mov	sp, r7
 8016438:	b007      	add	sp, #28
 801643a:	bd90      	pop	{r4, r7, pc}
 801643c:	80002000 	.word	0x80002000
 8016440:	80002400 	.word	0x80002400

08016444 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b088      	sub	sp, #32
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016454:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8016456:	2300      	movs	r3, #0
 8016458:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	2240      	movs	r2, #64	@ 0x40
 801645e:	5c9b      	ldrb	r3, [r3, r2]
 8016460:	2b01      	cmp	r3, #1
 8016462:	d101      	bne.n	8016468 <I2C_Slave_ISR_DMA+0x24>
 8016464:	2302      	movs	r3, #2
 8016466:	e0cd      	b.n	8016604 <I2C_Slave_ISR_DMA+0x1c0>
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	2240      	movs	r2, #64	@ 0x40
 801646c:	2101      	movs	r1, #1
 801646e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016470:	68bb      	ldr	r3, [r7, #8]
 8016472:	2220      	movs	r2, #32
 8016474:	4013      	ands	r3, r2
 8016476:	d009      	beq.n	801648c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	2220      	movs	r2, #32
 801647c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801647e:	d005      	beq.n	801648c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8016480:	68ba      	ldr	r2, [r7, #8]
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	0011      	movs	r1, r2
 8016486:	0018      	movs	r0, r3
 8016488:	f000 fb3c 	bl	8016b04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	2210      	movs	r2, #16
 8016490:	4013      	ands	r3, r2
 8016492:	d100      	bne.n	8016496 <I2C_Slave_ISR_DMA+0x52>
 8016494:	e0a3      	b.n	80165de <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	2210      	movs	r2, #16
 801649a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801649c:	d100      	bne.n	80164a0 <I2C_Slave_ISR_DMA+0x5c>
 801649e:	e09e      	b.n	80165de <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	2380      	movs	r3, #128	@ 0x80
 80164a4:	01db      	lsls	r3, r3, #7
 80164a6:	4013      	ands	r3, r2
 80164a8:	d105      	bne.n	80164b6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80164aa:	687a      	ldr	r2, [r7, #4]
 80164ac:	2380      	movs	r3, #128	@ 0x80
 80164ae:	021b      	lsls	r3, r3, #8
 80164b0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80164b2:	d100      	bne.n	80164b6 <I2C_Slave_ISR_DMA+0x72>
 80164b4:	e08c      	b.n	80165d0 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d00c      	beq.n	80164d8 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	2380      	movs	r3, #128	@ 0x80
 80164c2:	021b      	lsls	r3, r3, #8
 80164c4:	4013      	ands	r3, r2
 80164c6:	d007      	beq.n	80164d8 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	685b      	ldr	r3, [r3, #4]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d101      	bne.n	80164d8 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80164d4:	2301      	movs	r3, #1
 80164d6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d00c      	beq.n	80164fa <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80164e0:	687a      	ldr	r2, [r7, #4]
 80164e2:	2380      	movs	r3, #128	@ 0x80
 80164e4:	01db      	lsls	r3, r3, #7
 80164e6:	4013      	ands	r3, r2
 80164e8:	d007      	beq.n	80164fa <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d101      	bne.n	80164fa <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 80164f6:	2301      	movs	r3, #1
 80164f8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80164fa:	69fb      	ldr	r3, [r7, #28]
 80164fc:	2b01      	cmp	r3, #1
 80164fe:	d12d      	bne.n	801655c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	2241      	movs	r2, #65	@ 0x41
 8016504:	5c9b      	ldrb	r3, [r3, r2]
 8016506:	b2db      	uxtb	r3, r3
 8016508:	2b28      	cmp	r3, #40	@ 0x28
 801650a:	d10b      	bne.n	8016524 <I2C_Slave_ISR_DMA+0xe0>
 801650c:	69ba      	ldr	r2, [r7, #24]
 801650e:	2380      	movs	r3, #128	@ 0x80
 8016510:	049b      	lsls	r3, r3, #18
 8016512:	429a      	cmp	r2, r3
 8016514:	d106      	bne.n	8016524 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8016516:	68ba      	ldr	r2, [r7, #8]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	0011      	movs	r1, r2
 801651c:	0018      	movs	r0, r3
 801651e:	f000 fc11 	bl	8016d44 <I2C_ITListenCplt>
 8016522:	e054      	b.n	80165ce <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	2241      	movs	r2, #65	@ 0x41
 8016528:	5c9b      	ldrb	r3, [r3, r2]
 801652a:	b2db      	uxtb	r3, r3
 801652c:	2b29      	cmp	r3, #41	@ 0x29
 801652e:	d110      	bne.n	8016552 <I2C_Slave_ISR_DMA+0x10e>
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	4a36      	ldr	r2, [pc, #216]	@ (801660c <I2C_Slave_ISR_DMA+0x1c8>)
 8016534:	4293      	cmp	r3, r2
 8016536:	d00c      	beq.n	8016552 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2210      	movs	r2, #16
 801653e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	0018      	movs	r0, r3
 8016544:	f000 fd81 	bl	801704a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	0018      	movs	r0, r3
 801654c:	f000 f9a8 	bl	80168a0 <I2C_ITSlaveSeqCplt>
 8016550:	e03d      	b.n	80165ce <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	2210      	movs	r2, #16
 8016558:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801655a:	e03e      	b.n	80165da <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	2210      	movs	r2, #16
 8016562:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016568:	2204      	movs	r2, #4
 801656a:	431a      	orrs	r2, r3
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8016570:	2317      	movs	r3, #23
 8016572:	18fb      	adds	r3, r7, r3
 8016574:	68fa      	ldr	r2, [r7, #12]
 8016576:	2141      	movs	r1, #65	@ 0x41
 8016578:	5c52      	ldrb	r2, [r2, r1]
 801657a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d004      	beq.n	801658c <I2C_Slave_ISR_DMA+0x148>
 8016582:	69ba      	ldr	r2, [r7, #24]
 8016584:	2380      	movs	r3, #128	@ 0x80
 8016586:	045b      	lsls	r3, r3, #17
 8016588:	429a      	cmp	r2, r3
 801658a:	d126      	bne.n	80165da <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801658c:	2217      	movs	r2, #23
 801658e:	18bb      	adds	r3, r7, r2
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	2b21      	cmp	r3, #33	@ 0x21
 8016594:	d003      	beq.n	801659e <I2C_Slave_ISR_DMA+0x15a>
 8016596:	18bb      	adds	r3, r7, r2
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	2b29      	cmp	r3, #41	@ 0x29
 801659c:	d103      	bne.n	80165a6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	2221      	movs	r2, #33	@ 0x21
 80165a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80165a4:	e00b      	b.n	80165be <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80165a6:	2217      	movs	r2, #23
 80165a8:	18bb      	adds	r3, r7, r2
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	2b22      	cmp	r3, #34	@ 0x22
 80165ae:	d003      	beq.n	80165b8 <I2C_Slave_ISR_DMA+0x174>
 80165b0:	18bb      	adds	r3, r7, r2
 80165b2:	781b      	ldrb	r3, [r3, #0]
 80165b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80165b6:	d102      	bne.n	80165be <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	2222      	movs	r2, #34	@ 0x22
 80165bc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	0011      	movs	r1, r2
 80165c6:	0018      	movs	r0, r3
 80165c8:	f000 fc14 	bl	8016df4 <I2C_ITError>
      if (treatdmanack == 1U)
 80165cc:	e005      	b.n	80165da <I2C_Slave_ISR_DMA+0x196>
 80165ce:	e004      	b.n	80165da <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	2210      	movs	r2, #16
 80165d6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80165d8:	e00f      	b.n	80165fa <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80165da:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80165dc:	e00d      	b.n	80165fa <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80165de:	68bb      	ldr	r3, [r7, #8]
 80165e0:	2208      	movs	r2, #8
 80165e2:	4013      	ands	r3, r2
 80165e4:	d009      	beq.n	80165fa <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	2208      	movs	r2, #8
 80165ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80165ec:	d005      	beq.n	80165fa <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80165ee:	68ba      	ldr	r2, [r7, #8]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	0011      	movs	r1, r2
 80165f4:	0018      	movs	r0, r3
 80165f6:	f000 f86d 	bl	80166d4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	2240      	movs	r2, #64	@ 0x40
 80165fe:	2100      	movs	r1, #0
 8016600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016602:	2300      	movs	r3, #0
}
 8016604:	0018      	movs	r0, r3
 8016606:	46bd      	mov	sp, r7
 8016608:	b008      	add	sp, #32
 801660a:	bd80      	pop	{r7, pc}
 801660c:	ffff0000 	.word	0xffff0000

08016610 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016610:	b5b0      	push	{r4, r5, r7, lr}
 8016612:	b086      	sub	sp, #24
 8016614:	af02      	add	r7, sp, #8
 8016616:	60f8      	str	r0, [r7, #12]
 8016618:	000c      	movs	r4, r1
 801661a:	0010      	movs	r0, r2
 801661c:	0019      	movs	r1, r3
 801661e:	250a      	movs	r5, #10
 8016620:	197b      	adds	r3, r7, r5
 8016622:	1c22      	adds	r2, r4, #0
 8016624:	801a      	strh	r2, [r3, #0]
 8016626:	2308      	movs	r3, #8
 8016628:	18fb      	adds	r3, r7, r3
 801662a:	1c02      	adds	r2, r0, #0
 801662c:	801a      	strh	r2, [r3, #0]
 801662e:	1dbb      	adds	r3, r7, #6
 8016630:	1c0a      	adds	r2, r1, #0
 8016632:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8016634:	1dbb      	adds	r3, r7, #6
 8016636:	881b      	ldrh	r3, [r3, #0]
 8016638:	b2da      	uxtb	r2, r3
 801663a:	197b      	adds	r3, r7, r5
 801663c:	8819      	ldrh	r1, [r3, #0]
 801663e:	68f8      	ldr	r0, [r7, #12]
 8016640:	4b23      	ldr	r3, [pc, #140]	@ (80166d0 <I2C_RequestMemoryRead+0xc0>)
 8016642:	9300      	str	r3, [sp, #0]
 8016644:	2300      	movs	r3, #0
 8016646:	f001 f84d 	bl	80176e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801664a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801664c:	6a39      	ldr	r1, [r7, #32]
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	0018      	movs	r0, r3
 8016652:	f000 fe43 	bl	80172dc <I2C_WaitOnTXISFlagUntilTimeout>
 8016656:	1e03      	subs	r3, r0, #0
 8016658:	d001      	beq.n	801665e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 801665a:	2301      	movs	r3, #1
 801665c:	e033      	b.n	80166c6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801665e:	1dbb      	adds	r3, r7, #6
 8016660:	881b      	ldrh	r3, [r3, #0]
 8016662:	2b01      	cmp	r3, #1
 8016664:	d107      	bne.n	8016676 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016666:	2308      	movs	r3, #8
 8016668:	18fb      	adds	r3, r7, r3
 801666a:	881b      	ldrh	r3, [r3, #0]
 801666c:	b2da      	uxtb	r2, r3
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	629a      	str	r2, [r3, #40]	@ 0x28
 8016674:	e019      	b.n	80166aa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016676:	2308      	movs	r3, #8
 8016678:	18fb      	adds	r3, r7, r3
 801667a:	881b      	ldrh	r3, [r3, #0]
 801667c:	0a1b      	lsrs	r3, r3, #8
 801667e:	b29b      	uxth	r3, r3
 8016680:	b2da      	uxtb	r2, r3
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801668a:	6a39      	ldr	r1, [r7, #32]
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	0018      	movs	r0, r3
 8016690:	f000 fe24 	bl	80172dc <I2C_WaitOnTXISFlagUntilTimeout>
 8016694:	1e03      	subs	r3, r0, #0
 8016696:	d001      	beq.n	801669c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8016698:	2301      	movs	r3, #1
 801669a:	e014      	b.n	80166c6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801669c:	2308      	movs	r3, #8
 801669e:	18fb      	adds	r3, r7, r3
 80166a0:	881b      	ldrh	r3, [r3, #0]
 80166a2:	b2da      	uxtb	r2, r3
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80166aa:	6a3a      	ldr	r2, [r7, #32]
 80166ac:	68f8      	ldr	r0, [r7, #12]
 80166ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b0:	9300      	str	r3, [sp, #0]
 80166b2:	0013      	movs	r3, r2
 80166b4:	2200      	movs	r2, #0
 80166b6:	2140      	movs	r1, #64	@ 0x40
 80166b8:	f000 fdc2 	bl	8017240 <I2C_WaitOnFlagUntilTimeout>
 80166bc:	1e03      	subs	r3, r0, #0
 80166be:	d001      	beq.n	80166c4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80166c0:	2301      	movs	r3, #1
 80166c2:	e000      	b.n	80166c6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80166c4:	2300      	movs	r3, #0
}
 80166c6:	0018      	movs	r0, r3
 80166c8:	46bd      	mov	sp, r7
 80166ca:	b004      	add	sp, #16
 80166cc:	bdb0      	pop	{r4, r5, r7, pc}
 80166ce:	46c0      	nop			@ (mov r8, r8)
 80166d0:	80002000 	.word	0x80002000

080166d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80166d4:	b5b0      	push	{r4, r5, r7, lr}
 80166d6:	b084      	sub	sp, #16
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2241      	movs	r2, #65	@ 0x41
 80166e2:	5c9b      	ldrb	r3, [r3, r2]
 80166e4:	b2db      	uxtb	r3, r3
 80166e6:	001a      	movs	r2, r3
 80166e8:	2328      	movs	r3, #40	@ 0x28
 80166ea:	4013      	ands	r3, r2
 80166ec:	2b28      	cmp	r3, #40	@ 0x28
 80166ee:	d000      	beq.n	80166f2 <I2C_ITAddrCplt+0x1e>
 80166f0:	e088      	b.n	8016804 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	699b      	ldr	r3, [r3, #24]
 80166f8:	0c1b      	lsrs	r3, r3, #16
 80166fa:	b2da      	uxtb	r2, r3
 80166fc:	250f      	movs	r5, #15
 80166fe:	197b      	adds	r3, r7, r5
 8016700:	2101      	movs	r1, #1
 8016702:	400a      	ands	r2, r1
 8016704:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	699b      	ldr	r3, [r3, #24]
 801670c:	0c1b      	lsrs	r3, r3, #16
 801670e:	b29a      	uxth	r2, r3
 8016710:	200c      	movs	r0, #12
 8016712:	183b      	adds	r3, r7, r0
 8016714:	21fe      	movs	r1, #254	@ 0xfe
 8016716:	400a      	ands	r2, r1
 8016718:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	689b      	ldr	r3, [r3, #8]
 8016720:	b29a      	uxth	r2, r3
 8016722:	240a      	movs	r4, #10
 8016724:	193b      	adds	r3, r7, r4
 8016726:	0592      	lsls	r2, r2, #22
 8016728:	0d92      	lsrs	r2, r2, #22
 801672a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	68db      	ldr	r3, [r3, #12]
 8016732:	b29a      	uxth	r2, r3
 8016734:	2308      	movs	r3, #8
 8016736:	18fb      	adds	r3, r7, r3
 8016738:	21fe      	movs	r1, #254	@ 0xfe
 801673a:	400a      	ands	r2, r1
 801673c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	68db      	ldr	r3, [r3, #12]
 8016742:	2b02      	cmp	r3, #2
 8016744:	d148      	bne.n	80167d8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8016746:	0021      	movs	r1, r4
 8016748:	187b      	adds	r3, r7, r1
 801674a:	881b      	ldrh	r3, [r3, #0]
 801674c:	09db      	lsrs	r3, r3, #7
 801674e:	b29a      	uxth	r2, r3
 8016750:	183b      	adds	r3, r7, r0
 8016752:	881b      	ldrh	r3, [r3, #0]
 8016754:	4053      	eors	r3, r2
 8016756:	b29b      	uxth	r3, r3
 8016758:	001a      	movs	r2, r3
 801675a:	2306      	movs	r3, #6
 801675c:	4013      	ands	r3, r2
 801675e:	d120      	bne.n	80167a2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8016760:	183b      	adds	r3, r7, r0
 8016762:	187a      	adds	r2, r7, r1
 8016764:	8812      	ldrh	r2, [r2, #0]
 8016766:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801676c:	1c5a      	adds	r2, r3, #1
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016776:	2b02      	cmp	r3, #2
 8016778:	d14c      	bne.n	8016814 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	2200      	movs	r2, #0
 801677e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	2208      	movs	r2, #8
 8016786:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2240      	movs	r2, #64	@ 0x40
 801678c:	2100      	movs	r1, #0
 801678e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016790:	183b      	adds	r3, r7, r0
 8016792:	881a      	ldrh	r2, [r3, #0]
 8016794:	197b      	adds	r3, r7, r5
 8016796:	7819      	ldrb	r1, [r3, #0]
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	0018      	movs	r0, r3
 801679c:	f7ff f9d7 	bl	8015b4e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80167a0:	e038      	b.n	8016814 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80167a2:	240c      	movs	r4, #12
 80167a4:	193b      	adds	r3, r7, r4
 80167a6:	2208      	movs	r2, #8
 80167a8:	18ba      	adds	r2, r7, r2
 80167aa:	8812      	ldrh	r2, [r2, #0]
 80167ac:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80167ae:	2380      	movs	r3, #128	@ 0x80
 80167b0:	021a      	lsls	r2, r3, #8
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	0011      	movs	r1, r2
 80167b6:	0018      	movs	r0, r3
 80167b8:	f001 f85c 	bl	8017874 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2240      	movs	r2, #64	@ 0x40
 80167c0:	2100      	movs	r1, #0
 80167c2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80167c4:	193b      	adds	r3, r7, r4
 80167c6:	881a      	ldrh	r2, [r3, #0]
 80167c8:	230f      	movs	r3, #15
 80167ca:	18fb      	adds	r3, r7, r3
 80167cc:	7819      	ldrb	r1, [r3, #0]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	0018      	movs	r0, r3
 80167d2:	f7ff f9bc 	bl	8015b4e <HAL_I2C_AddrCallback>
}
 80167d6:	e01d      	b.n	8016814 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80167d8:	2380      	movs	r3, #128	@ 0x80
 80167da:	021a      	lsls	r2, r3, #8
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	0011      	movs	r1, r2
 80167e0:	0018      	movs	r0, r3
 80167e2:	f001 f847 	bl	8017874 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2240      	movs	r2, #64	@ 0x40
 80167ea:	2100      	movs	r1, #0
 80167ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80167ee:	230c      	movs	r3, #12
 80167f0:	18fb      	adds	r3, r7, r3
 80167f2:	881a      	ldrh	r2, [r3, #0]
 80167f4:	230f      	movs	r3, #15
 80167f6:	18fb      	adds	r3, r7, r3
 80167f8:	7819      	ldrb	r1, [r3, #0]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	0018      	movs	r0, r3
 80167fe:	f7ff f9a6 	bl	8015b4e <HAL_I2C_AddrCallback>
}
 8016802:	e007      	b.n	8016814 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	2208      	movs	r2, #8
 801680a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	2240      	movs	r2, #64	@ 0x40
 8016810:	2100      	movs	r1, #0
 8016812:	5499      	strb	r1, [r3, r2]
}
 8016814:	46c0      	nop			@ (mov r8, r8)
 8016816:	46bd      	mov	sp, r7
 8016818:	b004      	add	sp, #16
 801681a:	bdb0      	pop	{r4, r5, r7, pc}

0801681c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2242      	movs	r2, #66	@ 0x42
 8016828:	2100      	movs	r1, #0
 801682a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2241      	movs	r2, #65	@ 0x41
 8016830:	5c9b      	ldrb	r3, [r3, r2]
 8016832:	b2db      	uxtb	r3, r3
 8016834:	2b21      	cmp	r3, #33	@ 0x21
 8016836:	d117      	bne.n	8016868 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	2241      	movs	r2, #65	@ 0x41
 801683c:	2120      	movs	r1, #32
 801683e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2211      	movs	r2, #17
 8016844:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2200      	movs	r2, #0
 801684a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2101      	movs	r1, #1
 8016850:	0018      	movs	r0, r3
 8016852:	f001 f80f 	bl	8017874 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2240      	movs	r2, #64	@ 0x40
 801685a:	2100      	movs	r1, #0
 801685c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	0018      	movs	r0, r3
 8016862:	f7ff f954 	bl	8015b0e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016866:	e016      	b.n	8016896 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2241      	movs	r2, #65	@ 0x41
 801686c:	2120      	movs	r1, #32
 801686e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2212      	movs	r2, #18
 8016874:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	2200      	movs	r2, #0
 801687a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2102      	movs	r1, #2
 8016880:	0018      	movs	r0, r3
 8016882:	f000 fff7 	bl	8017874 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2240      	movs	r2, #64	@ 0x40
 801688a:	2100      	movs	r1, #0
 801688c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	0018      	movs	r0, r3
 8016892:	f7ff f944 	bl	8015b1e <HAL_I2C_MasterRxCpltCallback>
}
 8016896:	46c0      	nop			@ (mov r8, r8)
 8016898:	46bd      	mov	sp, r7
 801689a:	b002      	add	sp, #8
 801689c:	bd80      	pop	{r7, pc}
	...

080168a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2242      	movs	r2, #66	@ 0x42
 80168b4:	2100      	movs	r1, #0
 80168b6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80168b8:	68fa      	ldr	r2, [r7, #12]
 80168ba:	2380      	movs	r3, #128	@ 0x80
 80168bc:	01db      	lsls	r3, r3, #7
 80168be:	4013      	ands	r3, r2
 80168c0:	d008      	beq.n	80168d4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	681a      	ldr	r2, [r3, #0]
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	4924      	ldr	r1, [pc, #144]	@ (8016960 <I2C_ITSlaveSeqCplt+0xc0>)
 80168ce:	400a      	ands	r2, r1
 80168d0:	601a      	str	r2, [r3, #0]
 80168d2:	e00c      	b.n	80168ee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80168d4:	68fa      	ldr	r2, [r7, #12]
 80168d6:	2380      	movs	r3, #128	@ 0x80
 80168d8:	021b      	lsls	r3, r3, #8
 80168da:	4013      	ands	r3, r2
 80168dc:	d007      	beq.n	80168ee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	681a      	ldr	r2, [r3, #0]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	491e      	ldr	r1, [pc, #120]	@ (8016964 <I2C_ITSlaveSeqCplt+0xc4>)
 80168ea:	400a      	ands	r2, r1
 80168ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2241      	movs	r2, #65	@ 0x41
 80168f2:	5c9b      	ldrb	r3, [r3, r2]
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	2b29      	cmp	r3, #41	@ 0x29
 80168f8:	d114      	bne.n	8016924 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2241      	movs	r2, #65	@ 0x41
 80168fe:	2128      	movs	r1, #40	@ 0x28
 8016900:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2221      	movs	r2, #33	@ 0x21
 8016906:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2101      	movs	r1, #1
 801690c:	0018      	movs	r0, r3
 801690e:	f000 ffb1 	bl	8017874 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2240      	movs	r2, #64	@ 0x40
 8016916:	2100      	movs	r1, #0
 8016918:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	0018      	movs	r0, r3
 801691e:	f7ff f906 	bl	8015b2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016922:	e019      	b.n	8016958 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2241      	movs	r2, #65	@ 0x41
 8016928:	5c9b      	ldrb	r3, [r3, r2]
 801692a:	b2db      	uxtb	r3, r3
 801692c:	2b2a      	cmp	r3, #42	@ 0x2a
 801692e:	d113      	bne.n	8016958 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2241      	movs	r2, #65	@ 0x41
 8016934:	2128      	movs	r1, #40	@ 0x28
 8016936:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2222      	movs	r2, #34	@ 0x22
 801693c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	2102      	movs	r1, #2
 8016942:	0018      	movs	r0, r3
 8016944:	f000 ff96 	bl	8017874 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2240      	movs	r2, #64	@ 0x40
 801694c:	2100      	movs	r1, #0
 801694e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	0018      	movs	r0, r3
 8016954:	f7ff f8f3 	bl	8015b3e <HAL_I2C_SlaveRxCpltCallback>
}
 8016958:	46c0      	nop			@ (mov r8, r8)
 801695a:	46bd      	mov	sp, r7
 801695c:	b004      	add	sp, #16
 801695e:	bd80      	pop	{r7, pc}
 8016960:	ffffbfff 	.word	0xffffbfff
 8016964:	ffff7fff 	.word	0xffff7fff

08016968 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b086      	sub	sp, #24
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	2220      	movs	r2, #32
 801697c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2241      	movs	r2, #65	@ 0x41
 8016982:	5c9b      	ldrb	r3, [r3, r2]
 8016984:	b2db      	uxtb	r3, r3
 8016986:	2b21      	cmp	r3, #33	@ 0x21
 8016988:	d108      	bne.n	801699c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2101      	movs	r1, #1
 801698e:	0018      	movs	r0, r3
 8016990:	f000 ff70 	bl	8017874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2211      	movs	r2, #17
 8016998:	631a      	str	r2, [r3, #48]	@ 0x30
 801699a:	e00d      	b.n	80169b8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2241      	movs	r2, #65	@ 0x41
 80169a0:	5c9b      	ldrb	r3, [r3, r2]
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	2b22      	cmp	r3, #34	@ 0x22
 80169a6:	d107      	bne.n	80169b8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2102      	movs	r1, #2
 80169ac:	0018      	movs	r0, r3
 80169ae:	f000 ff61 	bl	8017874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2212      	movs	r2, #18
 80169b6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	685a      	ldr	r2, [r3, #4]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	494e      	ldr	r1, [pc, #312]	@ (8016afc <I2C_ITMasterCplt+0x194>)
 80169c4:	400a      	ands	r2, r1
 80169c6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2200      	movs	r2, #0
 80169cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	4a4b      	ldr	r2, [pc, #300]	@ (8016b00 <I2C_ITMasterCplt+0x198>)
 80169d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80169d4:	697b      	ldr	r3, [r7, #20]
 80169d6:	2210      	movs	r2, #16
 80169d8:	4013      	ands	r3, r2
 80169da:	d009      	beq.n	80169f0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	2210      	movs	r2, #16
 80169e2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169e8:	2204      	movs	r2, #4
 80169ea:	431a      	orrs	r2, r3
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2241      	movs	r2, #65	@ 0x41
 80169f4:	5c9b      	ldrb	r3, [r3, r2]
 80169f6:	b2db      	uxtb	r3, r3
 80169f8:	2b60      	cmp	r3, #96	@ 0x60
 80169fa:	d109      	bne.n	8016a10 <I2C_ITMasterCplt+0xa8>
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	2204      	movs	r2, #4
 8016a00:	4013      	ands	r3, r2
 8016a02:	d005      	beq.n	8016a10 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a0a:	b2db      	uxtb	r3, r3
 8016a0c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8016a0e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	0018      	movs	r0, r3
 8016a14:	f000 fb19 	bl	801704a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a1c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2241      	movs	r2, #65	@ 0x41
 8016a22:	5c9b      	ldrb	r3, [r3, r2]
 8016a24:	b2db      	uxtb	r3, r3
 8016a26:	2b60      	cmp	r3, #96	@ 0x60
 8016a28:	d002      	beq.n	8016a30 <I2C_ITMasterCplt+0xc8>
 8016a2a:	693b      	ldr	r3, [r7, #16]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d007      	beq.n	8016a40 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	0011      	movs	r1, r2
 8016a38:	0018      	movs	r0, r3
 8016a3a:	f000 f9db 	bl	8016df4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016a3e:	e058      	b.n	8016af2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2241      	movs	r2, #65	@ 0x41
 8016a44:	5c9b      	ldrb	r3, [r3, r2]
 8016a46:	b2db      	uxtb	r3, r3
 8016a48:	2b21      	cmp	r3, #33	@ 0x21
 8016a4a:	d126      	bne.n	8016a9a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2241      	movs	r2, #65	@ 0x41
 8016a50:	2120      	movs	r1, #32
 8016a52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2200      	movs	r2, #0
 8016a58:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2242      	movs	r2, #66	@ 0x42
 8016a5e:	5c9b      	ldrb	r3, [r3, r2]
 8016a60:	b2db      	uxtb	r3, r3
 8016a62:	2b40      	cmp	r3, #64	@ 0x40
 8016a64:	d10c      	bne.n	8016a80 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2242      	movs	r2, #66	@ 0x42
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2240      	movs	r2, #64	@ 0x40
 8016a72:	2100      	movs	r1, #0
 8016a74:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	0018      	movs	r0, r3
 8016a7a:	f7ff f880 	bl	8015b7e <HAL_I2C_MemTxCpltCallback>
}
 8016a7e:	e038      	b.n	8016af2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2242      	movs	r2, #66	@ 0x42
 8016a84:	2100      	movs	r1, #0
 8016a86:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2240      	movs	r2, #64	@ 0x40
 8016a8c:	2100      	movs	r1, #0
 8016a8e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	0018      	movs	r0, r3
 8016a94:	f7ff f83b 	bl	8015b0e <HAL_I2C_MasterTxCpltCallback>
}
 8016a98:	e02b      	b.n	8016af2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2241      	movs	r2, #65	@ 0x41
 8016a9e:	5c9b      	ldrb	r3, [r3, r2]
 8016aa0:	b2db      	uxtb	r3, r3
 8016aa2:	2b22      	cmp	r3, #34	@ 0x22
 8016aa4:	d125      	bne.n	8016af2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2241      	movs	r2, #65	@ 0x41
 8016aaa:	2120      	movs	r1, #32
 8016aac:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2242      	movs	r2, #66	@ 0x42
 8016ab8:	5c9b      	ldrb	r3, [r3, r2]
 8016aba:	b2db      	uxtb	r3, r3
 8016abc:	2b40      	cmp	r3, #64	@ 0x40
 8016abe:	d10c      	bne.n	8016ada <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2242      	movs	r2, #66	@ 0x42
 8016ac4:	2100      	movs	r1, #0
 8016ac6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2240      	movs	r2, #64	@ 0x40
 8016acc:	2100      	movs	r1, #0
 8016ace:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	0018      	movs	r0, r3
 8016ad4:	f7ff f85b 	bl	8015b8e <HAL_I2C_MemRxCpltCallback>
}
 8016ad8:	e00b      	b.n	8016af2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2242      	movs	r2, #66	@ 0x42
 8016ade:	2100      	movs	r1, #0
 8016ae0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	2240      	movs	r2, #64	@ 0x40
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	0018      	movs	r0, r3
 8016aee:	f7ff f816 	bl	8015b1e <HAL_I2C_MasterRxCpltCallback>
}
 8016af2:	46c0      	nop			@ (mov r8, r8)
 8016af4:	46bd      	mov	sp, r7
 8016af6:	b006      	add	sp, #24
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	46c0      	nop			@ (mov r8, r8)
 8016afc:	fe00e800 	.word	0xfe00e800
 8016b00:	ffff0000 	.word	0xffff0000

08016b04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b086      	sub	sp, #24
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
 8016b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8016b16:	683b      	ldr	r3, [r7, #0]
 8016b18:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016b1a:	200f      	movs	r0, #15
 8016b1c:	183b      	adds	r3, r7, r0
 8016b1e:	687a      	ldr	r2, [r7, #4]
 8016b20:	2141      	movs	r1, #65	@ 0x41
 8016b22:	5c52      	ldrb	r2, [r2, r1]
 8016b24:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	2220      	movs	r2, #32
 8016b2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016b2e:	183b      	adds	r3, r7, r0
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	2b21      	cmp	r3, #33	@ 0x21
 8016b34:	d003      	beq.n	8016b3e <I2C_ITSlaveCplt+0x3a>
 8016b36:	183b      	adds	r3, r7, r0
 8016b38:	781b      	ldrb	r3, [r3, #0]
 8016b3a:	2b29      	cmp	r3, #41	@ 0x29
 8016b3c:	d109      	bne.n	8016b52 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8016b3e:	4a7b      	ldr	r2, [pc, #492]	@ (8016d2c <I2C_ITSlaveCplt+0x228>)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	0011      	movs	r1, r2
 8016b44:	0018      	movs	r0, r3
 8016b46:	f000 fe95 	bl	8017874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2221      	movs	r2, #33	@ 0x21
 8016b4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8016b50:	e011      	b.n	8016b76 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8016b52:	220f      	movs	r2, #15
 8016b54:	18bb      	adds	r3, r7, r2
 8016b56:	781b      	ldrb	r3, [r3, #0]
 8016b58:	2b22      	cmp	r3, #34	@ 0x22
 8016b5a:	d003      	beq.n	8016b64 <I2C_ITSlaveCplt+0x60>
 8016b5c:	18bb      	adds	r3, r7, r2
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b62:	d108      	bne.n	8016b76 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8016b64:	4a72      	ldr	r2, [pc, #456]	@ (8016d30 <I2C_ITSlaveCplt+0x22c>)
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	0011      	movs	r1, r2
 8016b6a:	0018      	movs	r0, r3
 8016b6c:	f000 fe82 	bl	8017874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	2222      	movs	r2, #34	@ 0x22
 8016b74:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	685a      	ldr	r2, [r3, #4]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2180      	movs	r1, #128	@ 0x80
 8016b82:	0209      	lsls	r1, r1, #8
 8016b84:	430a      	orrs	r2, r1
 8016b86:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	685a      	ldr	r2, [r3, #4]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	4968      	ldr	r1, [pc, #416]	@ (8016d34 <I2C_ITSlaveCplt+0x230>)
 8016b94:	400a      	ands	r2, r1
 8016b96:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	0018      	movs	r0, r3
 8016b9c:	f000 fa55 	bl	801704a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016ba0:	693a      	ldr	r2, [r7, #16]
 8016ba2:	2380      	movs	r3, #128	@ 0x80
 8016ba4:	01db      	lsls	r3, r3, #7
 8016ba6:	4013      	ands	r3, r2
 8016ba8:	d013      	beq.n	8016bd2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	681a      	ldr	r2, [r3, #0]
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	4960      	ldr	r1, [pc, #384]	@ (8016d38 <I2C_ITSlaveCplt+0x234>)
 8016bb6:	400a      	ands	r2, r1
 8016bb8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d01f      	beq.n	8016c02 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	685b      	ldr	r3, [r3, #4]
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016bd0:	e017      	b.n	8016c02 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8016bd2:	693a      	ldr	r2, [r7, #16]
 8016bd4:	2380      	movs	r3, #128	@ 0x80
 8016bd6:	021b      	lsls	r3, r3, #8
 8016bd8:	4013      	ands	r3, r2
 8016bda:	d012      	beq.n	8016c02 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	681a      	ldr	r2, [r3, #0]
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	4955      	ldr	r1, [pc, #340]	@ (8016d3c <I2C_ITSlaveCplt+0x238>)
 8016be8:	400a      	ands	r2, r1
 8016bea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d006      	beq.n	8016c02 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	b29a      	uxth	r2, r3
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8016c02:	697b      	ldr	r3, [r7, #20]
 8016c04:	2204      	movs	r2, #4
 8016c06:	4013      	ands	r3, r2
 8016c08:	d020      	beq.n	8016c4c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	2204      	movs	r2, #4
 8016c0e:	4393      	bics	r3, r2
 8016c10:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c1c:	b2d2      	uxtb	r2, r2
 8016c1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c24:	1c5a      	adds	r2, r3, #1
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d00c      	beq.n	8016c4c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c36:	3b01      	subs	r3, #1
 8016c38:	b29a      	uxth	r2, r3
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	3b01      	subs	r3, #1
 8016c46:	b29a      	uxth	r2, r3
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d005      	beq.n	8016c62 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c5a:	2204      	movs	r2, #4
 8016c5c:	431a      	orrs	r2, r3
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2242      	movs	r2, #66	@ 0x42
 8016c66:	2100      	movs	r1, #0
 8016c68:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d013      	beq.n	8016ca0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	0011      	movs	r1, r2
 8016c80:	0018      	movs	r0, r3
 8016c82:	f000 f8b7 	bl	8016df4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	2241      	movs	r2, #65	@ 0x41
 8016c8a:	5c9b      	ldrb	r3, [r3, r2]
 8016c8c:	b2db      	uxtb	r3, r3
 8016c8e:	2b28      	cmp	r3, #40	@ 0x28
 8016c90:	d147      	bne.n	8016d22 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8016c92:	697a      	ldr	r2, [r7, #20]
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	0011      	movs	r1, r2
 8016c98:	0018      	movs	r0, r3
 8016c9a:	f000 f853 	bl	8016d44 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016c9e:	e040      	b.n	8016d22 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ca4:	4a26      	ldr	r2, [pc, #152]	@ (8016d40 <I2C_ITSlaveCplt+0x23c>)
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d016      	beq.n	8016cd8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	0018      	movs	r0, r3
 8016cae:	f7ff fdf7 	bl	80168a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	4a22      	ldr	r2, [pc, #136]	@ (8016d40 <I2C_ITSlaveCplt+0x23c>)
 8016cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	2241      	movs	r2, #65	@ 0x41
 8016cbc:	2120      	movs	r1, #32
 8016cbe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2240      	movs	r2, #64	@ 0x40
 8016cca:	2100      	movs	r1, #0
 8016ccc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	0018      	movs	r0, r3
 8016cd2:	f7fe ff4c 	bl	8015b6e <HAL_I2C_ListenCpltCallback>
}
 8016cd6:	e024      	b.n	8016d22 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2241      	movs	r2, #65	@ 0x41
 8016cdc:	5c9b      	ldrb	r3, [r3, r2]
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	2b22      	cmp	r3, #34	@ 0x22
 8016ce2:	d10f      	bne.n	8016d04 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2241      	movs	r2, #65	@ 0x41
 8016ce8:	2120      	movs	r1, #32
 8016cea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2240      	movs	r2, #64	@ 0x40
 8016cf6:	2100      	movs	r1, #0
 8016cf8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	0018      	movs	r0, r3
 8016cfe:	f7fe ff1e 	bl	8015b3e <HAL_I2C_SlaveRxCpltCallback>
}
 8016d02:	e00e      	b.n	8016d22 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2241      	movs	r2, #65	@ 0x41
 8016d08:	2120      	movs	r1, #32
 8016d0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	2240      	movs	r2, #64	@ 0x40
 8016d16:	2100      	movs	r1, #0
 8016d18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	0018      	movs	r0, r3
 8016d1e:	f7fe ff06 	bl	8015b2e <HAL_I2C_SlaveTxCpltCallback>
}
 8016d22:	46c0      	nop			@ (mov r8, r8)
 8016d24:	46bd      	mov	sp, r7
 8016d26:	b006      	add	sp, #24
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	46c0      	nop			@ (mov r8, r8)
 8016d2c:	00008001 	.word	0x00008001
 8016d30:	00008002 	.word	0x00008002
 8016d34:	fe00e800 	.word	0xfe00e800
 8016d38:	ffffbfff 	.word	0xffffbfff
 8016d3c:	ffff7fff 	.word	0xffff7fff
 8016d40:	ffff0000 	.word	0xffff0000

08016d44 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b082      	sub	sp, #8
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
 8016d4c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	4a26      	ldr	r2, [pc, #152]	@ (8016dec <I2C_ITListenCplt+0xa8>)
 8016d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2200      	movs	r2, #0
 8016d58:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2241      	movs	r2, #65	@ 0x41
 8016d5e:	2120      	movs	r1, #32
 8016d60:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	2242      	movs	r2, #66	@ 0x42
 8016d66:	2100      	movs	r1, #0
 8016d68:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	2204      	movs	r2, #4
 8016d74:	4013      	ands	r3, r2
 8016d76:	d022      	beq.n	8016dbe <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d82:	b2d2      	uxtb	r2, r2
 8016d84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d8a:	1c5a      	adds	r2, r3, #1
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d012      	beq.n	8016dbe <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d9c:	3b01      	subs	r3, #1
 8016d9e:	b29a      	uxth	r2, r3
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016da8:	b29b      	uxth	r3, r3
 8016daa:	3b01      	subs	r3, #1
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016db6:	2204      	movs	r2, #4
 8016db8:	431a      	orrs	r2, r3
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8016df0 <I2C_ITListenCplt+0xac>)
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	0011      	movs	r1, r2
 8016dc4:	0018      	movs	r0, r3
 8016dc6:	f000 fd55 	bl	8017874 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	2210      	movs	r2, #16
 8016dd0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2240      	movs	r2, #64	@ 0x40
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	0018      	movs	r0, r3
 8016dde:	f7fe fec6 	bl	8015b6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8016de2:	46c0      	nop			@ (mov r8, r8)
 8016de4:	46bd      	mov	sp, r7
 8016de6:	b002      	add	sp, #8
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	46c0      	nop			@ (mov r8, r8)
 8016dec:	ffff0000 	.word	0xffff0000
 8016df0:	00008003 	.word	0x00008003

08016df4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8016df4:	b580      	push	{r7, lr}
 8016df6:	b084      	sub	sp, #16
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
 8016dfc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8016dfe:	200f      	movs	r0, #15
 8016e00:	183b      	adds	r3, r7, r0
 8016e02:	687a      	ldr	r2, [r7, #4]
 8016e04:	2141      	movs	r1, #65	@ 0x41
 8016e06:	5c52      	ldrb	r2, [r2, r1]
 8016e08:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	2242      	movs	r2, #66	@ 0x42
 8016e0e:	2100      	movs	r1, #0
 8016e10:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	4a72      	ldr	r2, [pc, #456]	@ (8016fe0 <I2C_ITError+0x1ec>)
 8016e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	431a      	orrs	r2, r3
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8016e2a:	183b      	adds	r3, r7, r0
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	2b28      	cmp	r3, #40	@ 0x28
 8016e30:	d007      	beq.n	8016e42 <I2C_ITError+0x4e>
 8016e32:	183b      	adds	r3, r7, r0
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	2b29      	cmp	r3, #41	@ 0x29
 8016e38:	d003      	beq.n	8016e42 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8016e3a:	183b      	adds	r3, r7, r0
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e40:	d10c      	bne.n	8016e5c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2103      	movs	r1, #3
 8016e46:	0018      	movs	r0, r3
 8016e48:	f000 fd14 	bl	8017874 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2241      	movs	r2, #65	@ 0x41
 8016e50:	2128      	movs	r1, #40	@ 0x28
 8016e52:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	4a63      	ldr	r2, [pc, #396]	@ (8016fe4 <I2C_ITError+0x1f0>)
 8016e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8016e5a:	e032      	b.n	8016ec2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8016e5c:	4a62      	ldr	r2, [pc, #392]	@ (8016fe8 <I2C_ITError+0x1f4>)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	0011      	movs	r1, r2
 8016e62:	0018      	movs	r0, r3
 8016e64:	f000 fd06 	bl	8017874 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	0018      	movs	r0, r3
 8016e6c:	f000 f8ed 	bl	801704a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2241      	movs	r2, #65	@ 0x41
 8016e74:	5c9b      	ldrb	r3, [r3, r2]
 8016e76:	b2db      	uxtb	r3, r3
 8016e78:	2b60      	cmp	r3, #96	@ 0x60
 8016e7a:	d01f      	beq.n	8016ebc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2241      	movs	r2, #65	@ 0x41
 8016e80:	2120      	movs	r1, #32
 8016e82:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	699b      	ldr	r3, [r3, #24]
 8016e8a:	2220      	movs	r2, #32
 8016e8c:	4013      	ands	r3, r2
 8016e8e:	2b20      	cmp	r3, #32
 8016e90:	d114      	bne.n	8016ebc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	699b      	ldr	r3, [r3, #24]
 8016e98:	2210      	movs	r2, #16
 8016e9a:	4013      	ands	r3, r2
 8016e9c:	2b10      	cmp	r3, #16
 8016e9e:	d109      	bne.n	8016eb4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	2210      	movs	r2, #16
 8016ea6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016eac:	2204      	movs	r2, #4
 8016eae:	431a      	orrs	r2, r3
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	2220      	movs	r2, #32
 8016eba:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ec6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d03b      	beq.n	8016f48 <I2C_ITError+0x154>
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	2b11      	cmp	r3, #17
 8016ed4:	d002      	beq.n	8016edc <I2C_ITError+0xe8>
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	2b21      	cmp	r3, #33	@ 0x21
 8016eda:	d135      	bne.n	8016f48 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	681a      	ldr	r2, [r3, #0]
 8016ee2:	2380      	movs	r3, #128	@ 0x80
 8016ee4:	01db      	lsls	r3, r3, #7
 8016ee6:	401a      	ands	r2, r3
 8016ee8:	2380      	movs	r3, #128	@ 0x80
 8016eea:	01db      	lsls	r3, r3, #7
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d107      	bne.n	8016f00 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	681a      	ldr	r2, [r3, #0]
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	493c      	ldr	r1, [pc, #240]	@ (8016fec <I2C_ITError+0x1f8>)
 8016efc:	400a      	ands	r2, r1
 8016efe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f04:	0018      	movs	r0, r3
 8016f06:	f7fd faca 	bl	801449e <HAL_DMA_GetState>
 8016f0a:	0003      	movs	r3, r0
 8016f0c:	2b01      	cmp	r3, #1
 8016f0e:	d016      	beq.n	8016f3e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f14:	4a36      	ldr	r2, [pc, #216]	@ (8016ff0 <I2C_ITError+0x1fc>)
 8016f16:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	2240      	movs	r2, #64	@ 0x40
 8016f1c:	2100      	movs	r1, #0
 8016f1e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f24:	0018      	movs	r0, r3
 8016f26:	f7fd f9c5 	bl	80142b4 <HAL_DMA_Abort_IT>
 8016f2a:	1e03      	subs	r3, r0, #0
 8016f2c:	d051      	beq.n	8016fd2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016f38:	0018      	movs	r0, r3
 8016f3a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016f3c:	e049      	b.n	8016fd2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	0018      	movs	r0, r3
 8016f42:	f000 f859 	bl	8016ff8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016f46:	e044      	b.n	8016fd2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d03b      	beq.n	8016fc8 <I2C_ITError+0x1d4>
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	2b12      	cmp	r3, #18
 8016f54:	d002      	beq.n	8016f5c <I2C_ITError+0x168>
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	2b22      	cmp	r3, #34	@ 0x22
 8016f5a:	d135      	bne.n	8016fc8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	681a      	ldr	r2, [r3, #0]
 8016f62:	2380      	movs	r3, #128	@ 0x80
 8016f64:	021b      	lsls	r3, r3, #8
 8016f66:	401a      	ands	r2, r3
 8016f68:	2380      	movs	r3, #128	@ 0x80
 8016f6a:	021b      	lsls	r3, r3, #8
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	d107      	bne.n	8016f80 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	681a      	ldr	r2, [r3, #0]
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	491e      	ldr	r1, [pc, #120]	@ (8016ff4 <I2C_ITError+0x200>)
 8016f7c:	400a      	ands	r2, r1
 8016f7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f84:	0018      	movs	r0, r3
 8016f86:	f7fd fa8a 	bl	801449e <HAL_DMA_GetState>
 8016f8a:	0003      	movs	r3, r0
 8016f8c:	2b01      	cmp	r3, #1
 8016f8e:	d016      	beq.n	8016fbe <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f94:	4a16      	ldr	r2, [pc, #88]	@ (8016ff0 <I2C_ITError+0x1fc>)
 8016f96:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2240      	movs	r2, #64	@ 0x40
 8016f9c:	2100      	movs	r1, #0
 8016f9e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016fa4:	0018      	movs	r0, r3
 8016fa6:	f7fd f985 	bl	80142b4 <HAL_DMA_Abort_IT>
 8016faa:	1e03      	subs	r3, r0, #0
 8016fac:	d013      	beq.n	8016fd6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016fb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016fb8:	0018      	movs	r0, r3
 8016fba:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016fbc:	e00b      	b.n	8016fd6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	0018      	movs	r0, r3
 8016fc2:	f000 f819 	bl	8016ff8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016fc6:	e006      	b.n	8016fd6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	0018      	movs	r0, r3
 8016fcc:	f000 f814 	bl	8016ff8 <I2C_TreatErrorCallback>
  }
}
 8016fd0:	e002      	b.n	8016fd8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8016fd2:	46c0      	nop			@ (mov r8, r8)
 8016fd4:	e000      	b.n	8016fd8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8016fd6:	46c0      	nop			@ (mov r8, r8)
}
 8016fd8:	46c0      	nop			@ (mov r8, r8)
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	b004      	add	sp, #16
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	ffff0000 	.word	0xffff0000
 8016fe4:	08015e15 	.word	0x08015e15
 8016fe8:	00008003 	.word	0x00008003
 8016fec:	ffffbfff 	.word	0xffffbfff
 8016ff0:	08017203 	.word	0x08017203
 8016ff4:	ffff7fff 	.word	0xffff7fff

08016ff8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b082      	sub	sp, #8
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2241      	movs	r2, #65	@ 0x41
 8017004:	5c9b      	ldrb	r3, [r3, r2]
 8017006:	b2db      	uxtb	r3, r3
 8017008:	2b60      	cmp	r3, #96	@ 0x60
 801700a:	d10f      	bne.n	801702c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2241      	movs	r2, #65	@ 0x41
 8017010:	2120      	movs	r1, #32
 8017012:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	2200      	movs	r2, #0
 8017018:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	2240      	movs	r2, #64	@ 0x40
 801701e:	2100      	movs	r1, #0
 8017020:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	0018      	movs	r0, r3
 8017026:	f7fe fdc2 	bl	8015bae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801702a:	e00a      	b.n	8017042 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2200      	movs	r2, #0
 8017030:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	2240      	movs	r2, #64	@ 0x40
 8017036:	2100      	movs	r1, #0
 8017038:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	0018      	movs	r0, r3
 801703e:	f7fe fdae 	bl	8015b9e <HAL_I2C_ErrorCallback>
}
 8017042:	46c0      	nop			@ (mov r8, r8)
 8017044:	46bd      	mov	sp, r7
 8017046:	b002      	add	sp, #8
 8017048:	bd80      	pop	{r7, pc}

0801704a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801704a:	b580      	push	{r7, lr}
 801704c:	b082      	sub	sp, #8
 801704e:	af00      	add	r7, sp, #0
 8017050:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	699b      	ldr	r3, [r3, #24]
 8017058:	2202      	movs	r2, #2
 801705a:	4013      	ands	r3, r2
 801705c:	2b02      	cmp	r3, #2
 801705e:	d103      	bne.n	8017068 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	2200      	movs	r2, #0
 8017066:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	699b      	ldr	r3, [r3, #24]
 801706e:	2201      	movs	r2, #1
 8017070:	4013      	ands	r3, r2
 8017072:	2b01      	cmp	r3, #1
 8017074:	d007      	beq.n	8017086 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	699a      	ldr	r2, [r3, #24]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	2101      	movs	r1, #1
 8017082:	430a      	orrs	r2, r1
 8017084:	619a      	str	r2, [r3, #24]
  }
}
 8017086:	46c0      	nop			@ (mov r8, r8)
 8017088:	46bd      	mov	sp, r7
 801708a:	b002      	add	sp, #8
 801708c:	bd80      	pop	{r7, pc}
	...

08017090 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b084      	sub	sp, #16
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801709c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	4920      	ldr	r1, [pc, #128]	@ (801712c <I2C_DMAMasterTransmitCplt+0x9c>)
 80170aa:	400a      	ands	r2, r1
 80170ac:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170b2:	b29b      	uxth	r3, r3
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d105      	bne.n	80170c4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	2120      	movs	r1, #32
 80170bc:	0018      	movs	r0, r3
 80170be:	f000 fb4b 	bl	8017758 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80170c2:	e02e      	b.n	8017122 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170c8:	68fa      	ldr	r2, [r7, #12]
 80170ca:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80170cc:	189a      	adds	r2, r3, r2
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	2bff      	cmp	r3, #255	@ 0xff
 80170da:	d903      	bls.n	80170e4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	22ff      	movs	r2, #255	@ 0xff
 80170e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80170e2:	e004      	b.n	80170ee <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170e8:	b29a      	uxth	r2, r3
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170f6:	0019      	movs	r1, r3
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	3328      	adds	r3, #40	@ 0x28
 80170fe:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8017104:	f7fd f830 	bl	8014168 <HAL_DMA_Start_IT>
 8017108:	1e03      	subs	r3, r0, #0
 801710a:	d005      	beq.n	8017118 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	2110      	movs	r1, #16
 8017110:	0018      	movs	r0, r3
 8017112:	f7ff fe6f 	bl	8016df4 <I2C_ITError>
}
 8017116:	e004      	b.n	8017122 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	2140      	movs	r1, #64	@ 0x40
 801711c:	0018      	movs	r0, r3
 801711e:	f000 fb1b 	bl	8017758 <I2C_Enable_IRQ>
}
 8017122:	46c0      	nop			@ (mov r8, r8)
 8017124:	46bd      	mov	sp, r7
 8017126:	b004      	add	sp, #16
 8017128:	bd80      	pop	{r7, pc}
 801712a:	46c0      	nop			@ (mov r8, r8)
 801712c:	ffffbfff 	.word	0xffffbfff

08017130 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801713c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	681a      	ldr	r2, [r3, #0]
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	4920      	ldr	r1, [pc, #128]	@ (80171cc <I2C_DMAMasterReceiveCplt+0x9c>)
 801714a:	400a      	ands	r2, r1
 801714c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017152:	b29b      	uxth	r3, r3
 8017154:	2b00      	cmp	r3, #0
 8017156:	d105      	bne.n	8017164 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2120      	movs	r1, #32
 801715c:	0018      	movs	r0, r3
 801715e:	f000 fafb 	bl	8017758 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8017162:	e02e      	b.n	80171c2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017168:	68fa      	ldr	r2, [r7, #12]
 801716a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801716c:	189a      	adds	r2, r3, r2
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017176:	b29b      	uxth	r3, r3
 8017178:	2bff      	cmp	r3, #255	@ 0xff
 801717a:	d903      	bls.n	8017184 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	22ff      	movs	r2, #255	@ 0xff
 8017180:	851a      	strh	r2, [r3, #40]	@ 0x28
 8017182:	e004      	b.n	801718e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017188:	b29a      	uxth	r2, r3
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	3324      	adds	r3, #36	@ 0x24
 8017198:	0019      	movs	r1, r3
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801719e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80171a4:	f7fc ffe0 	bl	8014168 <HAL_DMA_Start_IT>
 80171a8:	1e03      	subs	r3, r0, #0
 80171aa:	d005      	beq.n	80171b8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	2110      	movs	r1, #16
 80171b0:	0018      	movs	r0, r3
 80171b2:	f7ff fe1f 	bl	8016df4 <I2C_ITError>
}
 80171b6:	e004      	b.n	80171c2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	2140      	movs	r1, #64	@ 0x40
 80171bc:	0018      	movs	r0, r3
 80171be:	f000 facb 	bl	8017758 <I2C_Enable_IRQ>
}
 80171c2:	46c0      	nop			@ (mov r8, r8)
 80171c4:	46bd      	mov	sp, r7
 80171c6:	b004      	add	sp, #16
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	46c0      	nop			@ (mov r8, r8)
 80171cc:	ffff7fff 	.word	0xffff7fff

080171d0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b084      	sub	sp, #16
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171dc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	685a      	ldr	r2, [r3, #4]
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	2180      	movs	r1, #128	@ 0x80
 80171ea:	0209      	lsls	r1, r1, #8
 80171ec:	430a      	orrs	r2, r1
 80171ee:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2110      	movs	r1, #16
 80171f4:	0018      	movs	r0, r3
 80171f6:	f7ff fdfd 	bl	8016df4 <I2C_ITError>
}
 80171fa:	46c0      	nop			@ (mov r8, r8)
 80171fc:	46bd      	mov	sp, r7
 80171fe:	b004      	add	sp, #16
 8017200:	bd80      	pop	{r7, pc}

08017202 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8017202:	b580      	push	{r7, lr}
 8017204:	b084      	sub	sp, #16
 8017206:	af00      	add	r7, sp, #0
 8017208:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801720e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017214:	2b00      	cmp	r3, #0
 8017216:	d003      	beq.n	8017220 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801721c:	2200      	movs	r2, #0
 801721e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017224:	2b00      	cmp	r3, #0
 8017226:	d003      	beq.n	8017230 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801722c:	2200      	movs	r2, #0
 801722e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	0018      	movs	r0, r3
 8017234:	f7ff fee0 	bl	8016ff8 <I2C_TreatErrorCallback>
}
 8017238:	46c0      	nop			@ (mov r8, r8)
 801723a:	46bd      	mov	sp, r7
 801723c:	b004      	add	sp, #16
 801723e:	bd80      	pop	{r7, pc}

08017240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b084      	sub	sp, #16
 8017244:	af00      	add	r7, sp, #0
 8017246:	60f8      	str	r0, [r7, #12]
 8017248:	60b9      	str	r1, [r7, #8]
 801724a:	603b      	str	r3, [r7, #0]
 801724c:	1dfb      	adds	r3, r7, #7
 801724e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017250:	e030      	b.n	80172b4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	3301      	adds	r3, #1
 8017256:	d02d      	beq.n	80172b4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017258:	f7fc fa34 	bl	80136c4 <HAL_GetTick>
 801725c:	0002      	movs	r2, r0
 801725e:	69bb      	ldr	r3, [r7, #24]
 8017260:	1ad3      	subs	r3, r2, r3
 8017262:	683a      	ldr	r2, [r7, #0]
 8017264:	429a      	cmp	r2, r3
 8017266:	d302      	bcc.n	801726e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d122      	bne.n	80172b4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	699b      	ldr	r3, [r3, #24]
 8017274:	68ba      	ldr	r2, [r7, #8]
 8017276:	4013      	ands	r3, r2
 8017278:	68ba      	ldr	r2, [r7, #8]
 801727a:	1ad3      	subs	r3, r2, r3
 801727c:	425a      	negs	r2, r3
 801727e:	4153      	adcs	r3, r2
 8017280:	b2db      	uxtb	r3, r3
 8017282:	001a      	movs	r2, r3
 8017284:	1dfb      	adds	r3, r7, #7
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	429a      	cmp	r2, r3
 801728a:	d113      	bne.n	80172b4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017290:	2220      	movs	r2, #32
 8017292:	431a      	orrs	r2, r3
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	2241      	movs	r2, #65	@ 0x41
 801729c:	2120      	movs	r1, #32
 801729e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2242      	movs	r2, #66	@ 0x42
 80172a4:	2100      	movs	r1, #0
 80172a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	2240      	movs	r2, #64	@ 0x40
 80172ac:	2100      	movs	r1, #0
 80172ae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80172b0:	2301      	movs	r3, #1
 80172b2:	e00f      	b.n	80172d4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	699b      	ldr	r3, [r3, #24]
 80172ba:	68ba      	ldr	r2, [r7, #8]
 80172bc:	4013      	ands	r3, r2
 80172be:	68ba      	ldr	r2, [r7, #8]
 80172c0:	1ad3      	subs	r3, r2, r3
 80172c2:	425a      	negs	r2, r3
 80172c4:	4153      	adcs	r3, r2
 80172c6:	b2db      	uxtb	r3, r3
 80172c8:	001a      	movs	r2, r3
 80172ca:	1dfb      	adds	r3, r7, #7
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d0bf      	beq.n	8017252 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80172d2:	2300      	movs	r3, #0
}
 80172d4:	0018      	movs	r0, r3
 80172d6:	46bd      	mov	sp, r7
 80172d8:	b004      	add	sp, #16
 80172da:	bd80      	pop	{r7, pc}

080172dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	60f8      	str	r0, [r7, #12]
 80172e4:	60b9      	str	r1, [r7, #8]
 80172e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80172e8:	e032      	b.n	8017350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80172ea:	687a      	ldr	r2, [r7, #4]
 80172ec:	68b9      	ldr	r1, [r7, #8]
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	0018      	movs	r0, r3
 80172f2:	f000 f8ff 	bl	80174f4 <I2C_IsErrorOccurred>
 80172f6:	1e03      	subs	r3, r0, #0
 80172f8:	d001      	beq.n	80172fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80172fa:	2301      	movs	r3, #1
 80172fc:	e030      	b.n	8017360 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	3301      	adds	r3, #1
 8017302:	d025      	beq.n	8017350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017304:	f7fc f9de 	bl	80136c4 <HAL_GetTick>
 8017308:	0002      	movs	r2, r0
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	1ad3      	subs	r3, r2, r3
 801730e:	68ba      	ldr	r2, [r7, #8]
 8017310:	429a      	cmp	r2, r3
 8017312:	d302      	bcc.n	801731a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d11a      	bne.n	8017350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	699b      	ldr	r3, [r3, #24]
 8017320:	2202      	movs	r2, #2
 8017322:	4013      	ands	r3, r2
 8017324:	2b02      	cmp	r3, #2
 8017326:	d013      	beq.n	8017350 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801732c:	2220      	movs	r2, #32
 801732e:	431a      	orrs	r2, r3
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	2241      	movs	r2, #65	@ 0x41
 8017338:	2120      	movs	r1, #32
 801733a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	2242      	movs	r2, #66	@ 0x42
 8017340:	2100      	movs	r1, #0
 8017342:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	2240      	movs	r2, #64	@ 0x40
 8017348:	2100      	movs	r1, #0
 801734a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801734c:	2301      	movs	r3, #1
 801734e:	e007      	b.n	8017360 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	699b      	ldr	r3, [r3, #24]
 8017356:	2202      	movs	r2, #2
 8017358:	4013      	ands	r3, r2
 801735a:	2b02      	cmp	r3, #2
 801735c:	d1c5      	bne.n	80172ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801735e:	2300      	movs	r3, #0
}
 8017360:	0018      	movs	r0, r3
 8017362:	46bd      	mov	sp, r7
 8017364:	b004      	add	sp, #16
 8017366:	bd80      	pop	{r7, pc}

08017368 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b084      	sub	sp, #16
 801736c:	af00      	add	r7, sp, #0
 801736e:	60f8      	str	r0, [r7, #12]
 8017370:	60b9      	str	r1, [r7, #8]
 8017372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017374:	e02f      	b.n	80173d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017376:	687a      	ldr	r2, [r7, #4]
 8017378:	68b9      	ldr	r1, [r7, #8]
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	0018      	movs	r0, r3
 801737e:	f000 f8b9 	bl	80174f4 <I2C_IsErrorOccurred>
 8017382:	1e03      	subs	r3, r0, #0
 8017384:	d001      	beq.n	801738a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017386:	2301      	movs	r3, #1
 8017388:	e02d      	b.n	80173e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801738a:	f7fc f99b 	bl	80136c4 <HAL_GetTick>
 801738e:	0002      	movs	r2, r0
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	68ba      	ldr	r2, [r7, #8]
 8017396:	429a      	cmp	r2, r3
 8017398:	d302      	bcc.n	80173a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801739a:	68bb      	ldr	r3, [r7, #8]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d11a      	bne.n	80173d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	699b      	ldr	r3, [r3, #24]
 80173a6:	2220      	movs	r2, #32
 80173a8:	4013      	ands	r3, r2
 80173aa:	2b20      	cmp	r3, #32
 80173ac:	d013      	beq.n	80173d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173b2:	2220      	movs	r2, #32
 80173b4:	431a      	orrs	r2, r3
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	2241      	movs	r2, #65	@ 0x41
 80173be:	2120      	movs	r1, #32
 80173c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	2242      	movs	r2, #66	@ 0x42
 80173c6:	2100      	movs	r1, #0
 80173c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2240      	movs	r2, #64	@ 0x40
 80173ce:	2100      	movs	r1, #0
 80173d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80173d2:	2301      	movs	r3, #1
 80173d4:	e007      	b.n	80173e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	699b      	ldr	r3, [r3, #24]
 80173dc:	2220      	movs	r2, #32
 80173de:	4013      	ands	r3, r2
 80173e0:	2b20      	cmp	r3, #32
 80173e2:	d1c8      	bne.n	8017376 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80173e4:	2300      	movs	r3, #0
}
 80173e6:	0018      	movs	r0, r3
 80173e8:	46bd      	mov	sp, r7
 80173ea:	b004      	add	sp, #16
 80173ec:	bd80      	pop	{r7, pc}
	...

080173f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	60f8      	str	r0, [r7, #12]
 80173f8:	60b9      	str	r1, [r7, #8]
 80173fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80173fc:	e06b      	b.n	80174d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	68b9      	ldr	r1, [r7, #8]
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	0018      	movs	r0, r3
 8017406:	f000 f875 	bl	80174f4 <I2C_IsErrorOccurred>
 801740a:	1e03      	subs	r3, r0, #0
 801740c:	d001      	beq.n	8017412 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801740e:	2301      	movs	r3, #1
 8017410:	e069      	b.n	80174e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	699b      	ldr	r3, [r3, #24]
 8017418:	2220      	movs	r2, #32
 801741a:	4013      	ands	r3, r2
 801741c:	2b20      	cmp	r3, #32
 801741e:	d138      	bne.n	8017492 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	699b      	ldr	r3, [r3, #24]
 8017426:	2204      	movs	r2, #4
 8017428:	4013      	ands	r3, r2
 801742a:	2b04      	cmp	r3, #4
 801742c:	d105      	bne.n	801743a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017432:	2b00      	cmp	r3, #0
 8017434:	d001      	beq.n	801743a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8017436:	2300      	movs	r3, #0
 8017438:	e055      	b.n	80174e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	699b      	ldr	r3, [r3, #24]
 8017440:	2210      	movs	r2, #16
 8017442:	4013      	ands	r3, r2
 8017444:	2b10      	cmp	r3, #16
 8017446:	d107      	bne.n	8017458 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2210      	movs	r2, #16
 801744e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2204      	movs	r2, #4
 8017454:	645a      	str	r2, [r3, #68]	@ 0x44
 8017456:	e002      	b.n	801745e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	2200      	movs	r2, #0
 801745c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2220      	movs	r2, #32
 8017464:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	685a      	ldr	r2, [r3, #4]
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	491f      	ldr	r1, [pc, #124]	@ (80174f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8017472:	400a      	ands	r2, r1
 8017474:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	2241      	movs	r2, #65	@ 0x41
 801747a:	2120      	movs	r1, #32
 801747c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2242      	movs	r2, #66	@ 0x42
 8017482:	2100      	movs	r1, #0
 8017484:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	2240      	movs	r2, #64	@ 0x40
 801748a:	2100      	movs	r1, #0
 801748c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801748e:	2301      	movs	r3, #1
 8017490:	e029      	b.n	80174e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017492:	f7fc f917 	bl	80136c4 <HAL_GetTick>
 8017496:	0002      	movs	r2, r0
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	1ad3      	subs	r3, r2, r3
 801749c:	68ba      	ldr	r2, [r7, #8]
 801749e:	429a      	cmp	r2, r3
 80174a0:	d302      	bcc.n	80174a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d116      	bne.n	80174d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	699b      	ldr	r3, [r3, #24]
 80174ae:	2204      	movs	r2, #4
 80174b0:	4013      	ands	r3, r2
 80174b2:	2b04      	cmp	r3, #4
 80174b4:	d00f      	beq.n	80174d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80174ba:	2220      	movs	r2, #32
 80174bc:	431a      	orrs	r2, r3
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	2241      	movs	r2, #65	@ 0x41
 80174c6:	2120      	movs	r1, #32
 80174c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	2240      	movs	r2, #64	@ 0x40
 80174ce:	2100      	movs	r1, #0
 80174d0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80174d2:	2301      	movs	r3, #1
 80174d4:	e007      	b.n	80174e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	699b      	ldr	r3, [r3, #24]
 80174dc:	2204      	movs	r2, #4
 80174de:	4013      	ands	r3, r2
 80174e0:	2b04      	cmp	r3, #4
 80174e2:	d18c      	bne.n	80173fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80174e4:	2300      	movs	r3, #0
}
 80174e6:	0018      	movs	r0, r3
 80174e8:	46bd      	mov	sp, r7
 80174ea:	b004      	add	sp, #16
 80174ec:	bd80      	pop	{r7, pc}
 80174ee:	46c0      	nop			@ (mov r8, r8)
 80174f0:	fe00e800 	.word	0xfe00e800

080174f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b08a      	sub	sp, #40	@ 0x28
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	60f8      	str	r0, [r7, #12]
 80174fc:	60b9      	str	r1, [r7, #8]
 80174fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017500:	2327      	movs	r3, #39	@ 0x27
 8017502:	18fb      	adds	r3, r7, r3
 8017504:	2200      	movs	r2, #0
 8017506:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	699b      	ldr	r3, [r3, #24]
 801750e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017510:	2300      	movs	r3, #0
 8017512:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017518:	69bb      	ldr	r3, [r7, #24]
 801751a:	2210      	movs	r2, #16
 801751c:	4013      	ands	r3, r2
 801751e:	d100      	bne.n	8017522 <I2C_IsErrorOccurred+0x2e>
 8017520:	e079      	b.n	8017616 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	2210      	movs	r2, #16
 8017528:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801752a:	e057      	b.n	80175dc <I2C_IsErrorOccurred+0xe8>
 801752c:	2227      	movs	r2, #39	@ 0x27
 801752e:	18bb      	adds	r3, r7, r2
 8017530:	18ba      	adds	r2, r7, r2
 8017532:	7812      	ldrb	r2, [r2, #0]
 8017534:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	3301      	adds	r3, #1
 801753a:	d04f      	beq.n	80175dc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801753c:	f7fc f8c2 	bl	80136c4 <HAL_GetTick>
 8017540:	0002      	movs	r2, r0
 8017542:	69fb      	ldr	r3, [r7, #28]
 8017544:	1ad3      	subs	r3, r2, r3
 8017546:	68ba      	ldr	r2, [r7, #8]
 8017548:	429a      	cmp	r2, r3
 801754a:	d302      	bcc.n	8017552 <I2C_IsErrorOccurred+0x5e>
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d144      	bne.n	80175dc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	685a      	ldr	r2, [r3, #4]
 8017558:	2380      	movs	r3, #128	@ 0x80
 801755a:	01db      	lsls	r3, r3, #7
 801755c:	4013      	ands	r3, r2
 801755e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017560:	2013      	movs	r0, #19
 8017562:	183b      	adds	r3, r7, r0
 8017564:	68fa      	ldr	r2, [r7, #12]
 8017566:	2142      	movs	r1, #66	@ 0x42
 8017568:	5c52      	ldrb	r2, [r2, r1]
 801756a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	699a      	ldr	r2, [r3, #24]
 8017572:	2380      	movs	r3, #128	@ 0x80
 8017574:	021b      	lsls	r3, r3, #8
 8017576:	401a      	ands	r2, r3
 8017578:	2380      	movs	r3, #128	@ 0x80
 801757a:	021b      	lsls	r3, r3, #8
 801757c:	429a      	cmp	r2, r3
 801757e:	d126      	bne.n	80175ce <I2C_IsErrorOccurred+0xda>
 8017580:	697a      	ldr	r2, [r7, #20]
 8017582:	2380      	movs	r3, #128	@ 0x80
 8017584:	01db      	lsls	r3, r3, #7
 8017586:	429a      	cmp	r2, r3
 8017588:	d021      	beq.n	80175ce <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 801758a:	183b      	adds	r3, r7, r0
 801758c:	781b      	ldrb	r3, [r3, #0]
 801758e:	2b20      	cmp	r3, #32
 8017590:	d01d      	beq.n	80175ce <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	685a      	ldr	r2, [r3, #4]
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	2180      	movs	r1, #128	@ 0x80
 801759e:	01c9      	lsls	r1, r1, #7
 80175a0:	430a      	orrs	r2, r1
 80175a2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80175a4:	f7fc f88e 	bl	80136c4 <HAL_GetTick>
 80175a8:	0003      	movs	r3, r0
 80175aa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80175ac:	e00f      	b.n	80175ce <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80175ae:	f7fc f889 	bl	80136c4 <HAL_GetTick>
 80175b2:	0002      	movs	r2, r0
 80175b4:	69fb      	ldr	r3, [r7, #28]
 80175b6:	1ad3      	subs	r3, r2, r3
 80175b8:	2b19      	cmp	r3, #25
 80175ba:	d908      	bls.n	80175ce <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80175bc:	6a3b      	ldr	r3, [r7, #32]
 80175be:	2220      	movs	r2, #32
 80175c0:	4313      	orrs	r3, r2
 80175c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80175c4:	2327      	movs	r3, #39	@ 0x27
 80175c6:	18fb      	adds	r3, r7, r3
 80175c8:	2201      	movs	r2, #1
 80175ca:	701a      	strb	r2, [r3, #0]

              break;
 80175cc:	e006      	b.n	80175dc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	699b      	ldr	r3, [r3, #24]
 80175d4:	2220      	movs	r2, #32
 80175d6:	4013      	ands	r3, r2
 80175d8:	2b20      	cmp	r3, #32
 80175da:	d1e8      	bne.n	80175ae <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	699b      	ldr	r3, [r3, #24]
 80175e2:	2220      	movs	r2, #32
 80175e4:	4013      	ands	r3, r2
 80175e6:	2b20      	cmp	r3, #32
 80175e8:	d004      	beq.n	80175f4 <I2C_IsErrorOccurred+0x100>
 80175ea:	2327      	movs	r3, #39	@ 0x27
 80175ec:	18fb      	adds	r3, r7, r3
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d09b      	beq.n	801752c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80175f4:	2327      	movs	r3, #39	@ 0x27
 80175f6:	18fb      	adds	r3, r7, r3
 80175f8:	781b      	ldrb	r3, [r3, #0]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d103      	bne.n	8017606 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	2220      	movs	r2, #32
 8017604:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017606:	6a3b      	ldr	r3, [r7, #32]
 8017608:	2204      	movs	r2, #4
 801760a:	4313      	orrs	r3, r2
 801760c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801760e:	2327      	movs	r3, #39	@ 0x27
 8017610:	18fb      	adds	r3, r7, r3
 8017612:	2201      	movs	r2, #1
 8017614:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	699b      	ldr	r3, [r3, #24]
 801761c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801761e:	69ba      	ldr	r2, [r7, #24]
 8017620:	2380      	movs	r3, #128	@ 0x80
 8017622:	005b      	lsls	r3, r3, #1
 8017624:	4013      	ands	r3, r2
 8017626:	d00c      	beq.n	8017642 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017628:	6a3b      	ldr	r3, [r7, #32]
 801762a:	2201      	movs	r2, #1
 801762c:	4313      	orrs	r3, r2
 801762e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	2280      	movs	r2, #128	@ 0x80
 8017636:	0052      	lsls	r2, r2, #1
 8017638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801763a:	2327      	movs	r3, #39	@ 0x27
 801763c:	18fb      	adds	r3, r7, r3
 801763e:	2201      	movs	r2, #1
 8017640:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017642:	69ba      	ldr	r2, [r7, #24]
 8017644:	2380      	movs	r3, #128	@ 0x80
 8017646:	00db      	lsls	r3, r3, #3
 8017648:	4013      	ands	r3, r2
 801764a:	d00c      	beq.n	8017666 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801764c:	6a3b      	ldr	r3, [r7, #32]
 801764e:	2208      	movs	r2, #8
 8017650:	4313      	orrs	r3, r2
 8017652:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	2280      	movs	r2, #128	@ 0x80
 801765a:	00d2      	lsls	r2, r2, #3
 801765c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801765e:	2327      	movs	r3, #39	@ 0x27
 8017660:	18fb      	adds	r3, r7, r3
 8017662:	2201      	movs	r2, #1
 8017664:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017666:	69ba      	ldr	r2, [r7, #24]
 8017668:	2380      	movs	r3, #128	@ 0x80
 801766a:	009b      	lsls	r3, r3, #2
 801766c:	4013      	ands	r3, r2
 801766e:	d00c      	beq.n	801768a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017670:	6a3b      	ldr	r3, [r7, #32]
 8017672:	2202      	movs	r2, #2
 8017674:	4313      	orrs	r3, r2
 8017676:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	2280      	movs	r2, #128	@ 0x80
 801767e:	0092      	lsls	r2, r2, #2
 8017680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017682:	2327      	movs	r3, #39	@ 0x27
 8017684:	18fb      	adds	r3, r7, r3
 8017686:	2201      	movs	r2, #1
 8017688:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 801768a:	2327      	movs	r3, #39	@ 0x27
 801768c:	18fb      	adds	r3, r7, r3
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d01d      	beq.n	80176d0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	0018      	movs	r0, r3
 8017698:	f7ff fcd7 	bl	801704a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	685a      	ldr	r2, [r3, #4]
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	490e      	ldr	r1, [pc, #56]	@ (80176e0 <I2C_IsErrorOccurred+0x1ec>)
 80176a8:	400a      	ands	r2, r1
 80176aa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80176b0:	6a3b      	ldr	r3, [r7, #32]
 80176b2:	431a      	orrs	r2, r3
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	2241      	movs	r2, #65	@ 0x41
 80176bc:	2120      	movs	r1, #32
 80176be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	2242      	movs	r2, #66	@ 0x42
 80176c4:	2100      	movs	r1, #0
 80176c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2240      	movs	r2, #64	@ 0x40
 80176cc:	2100      	movs	r1, #0
 80176ce:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80176d0:	2327      	movs	r3, #39	@ 0x27
 80176d2:	18fb      	adds	r3, r7, r3
 80176d4:	781b      	ldrb	r3, [r3, #0]
}
 80176d6:	0018      	movs	r0, r3
 80176d8:	46bd      	mov	sp, r7
 80176da:	b00a      	add	sp, #40	@ 0x28
 80176dc:	bd80      	pop	{r7, pc}
 80176de:	46c0      	nop			@ (mov r8, r8)
 80176e0:	fe00e800 	.word	0xfe00e800

080176e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80176e4:	b590      	push	{r4, r7, lr}
 80176e6:	b087      	sub	sp, #28
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	60f8      	str	r0, [r7, #12]
 80176ec:	0008      	movs	r0, r1
 80176ee:	0011      	movs	r1, r2
 80176f0:	607b      	str	r3, [r7, #4]
 80176f2:	240a      	movs	r4, #10
 80176f4:	193b      	adds	r3, r7, r4
 80176f6:	1c02      	adds	r2, r0, #0
 80176f8:	801a      	strh	r2, [r3, #0]
 80176fa:	2009      	movs	r0, #9
 80176fc:	183b      	adds	r3, r7, r0
 80176fe:	1c0a      	adds	r2, r1, #0
 8017700:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017702:	193b      	adds	r3, r7, r4
 8017704:	881b      	ldrh	r3, [r3, #0]
 8017706:	059b      	lsls	r3, r3, #22
 8017708:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801770a:	183b      	adds	r3, r7, r0
 801770c:	781b      	ldrb	r3, [r3, #0]
 801770e:	0419      	lsls	r1, r3, #16
 8017710:	23ff      	movs	r3, #255	@ 0xff
 8017712:	041b      	lsls	r3, r3, #16
 8017714:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017716:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801771e:	4313      	orrs	r3, r2
 8017720:	005b      	lsls	r3, r3, #1
 8017722:	085b      	lsrs	r3, r3, #1
 8017724:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	685b      	ldr	r3, [r3, #4]
 801772c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801772e:	0d51      	lsrs	r1, r2, #21
 8017730:	2280      	movs	r2, #128	@ 0x80
 8017732:	00d2      	lsls	r2, r2, #3
 8017734:	400a      	ands	r2, r1
 8017736:	4907      	ldr	r1, [pc, #28]	@ (8017754 <I2C_TransferConfig+0x70>)
 8017738:	430a      	orrs	r2, r1
 801773a:	43d2      	mvns	r2, r2
 801773c:	401a      	ands	r2, r3
 801773e:	0011      	movs	r1, r2
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	697a      	ldr	r2, [r7, #20]
 8017746:	430a      	orrs	r2, r1
 8017748:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801774a:	46c0      	nop			@ (mov r8, r8)
 801774c:	46bd      	mov	sp, r7
 801774e:	b007      	add	sp, #28
 8017750:	bd90      	pop	{r4, r7, pc}
 8017752:	46c0      	nop			@ (mov r8, r8)
 8017754:	03ff63ff 	.word	0x03ff63ff

08017758 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b084      	sub	sp, #16
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	000a      	movs	r2, r1
 8017762:	1cbb      	adds	r3, r7, #2
 8017764:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017766:	2300      	movs	r3, #0
 8017768:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801776e:	4b3e      	ldr	r3, [pc, #248]	@ (8017868 <I2C_Enable_IRQ+0x110>)
 8017770:	429a      	cmp	r2, r3
 8017772:	d035      	beq.n	80177e0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017778:	4b3c      	ldr	r3, [pc, #240]	@ (801786c <I2C_Enable_IRQ+0x114>)
 801777a:	429a      	cmp	r2, r3
 801777c:	d030      	beq.n	80177e0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017782:	4b3b      	ldr	r3, [pc, #236]	@ (8017870 <I2C_Enable_IRQ+0x118>)
 8017784:	429a      	cmp	r2, r3
 8017786:	d02b      	beq.n	80177e0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017788:	1cbb      	adds	r3, r7, #2
 801778a:	2200      	movs	r2, #0
 801778c:	5e9b      	ldrsh	r3, [r3, r2]
 801778e:	2b00      	cmp	r3, #0
 8017790:	da03      	bge.n	801779a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	22b8      	movs	r2, #184	@ 0xb8
 8017796:	4313      	orrs	r3, r2
 8017798:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801779a:	1cbb      	adds	r3, r7, #2
 801779c:	881b      	ldrh	r3, [r3, #0]
 801779e:	2201      	movs	r2, #1
 80177a0:	4013      	ands	r3, r2
 80177a2:	d003      	beq.n	80177ac <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	22f2      	movs	r2, #242	@ 0xf2
 80177a8:	4313      	orrs	r3, r2
 80177aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80177ac:	1cbb      	adds	r3, r7, #2
 80177ae:	881b      	ldrh	r3, [r3, #0]
 80177b0:	2202      	movs	r2, #2
 80177b2:	4013      	ands	r3, r2
 80177b4:	d003      	beq.n	80177be <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	22f4      	movs	r2, #244	@ 0xf4
 80177ba:	4313      	orrs	r3, r2
 80177bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80177be:	1cbb      	adds	r3, r7, #2
 80177c0:	881b      	ldrh	r3, [r3, #0]
 80177c2:	2b10      	cmp	r3, #16
 80177c4:	d103      	bne.n	80177ce <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	2290      	movs	r2, #144	@ 0x90
 80177ca:	4313      	orrs	r3, r2
 80177cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80177ce:	1cbb      	adds	r3, r7, #2
 80177d0:	881b      	ldrh	r3, [r3, #0]
 80177d2:	2b20      	cmp	r3, #32
 80177d4:	d13c      	bne.n	8017850 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	2220      	movs	r2, #32
 80177da:	4313      	orrs	r3, r2
 80177dc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80177de:	e037      	b.n	8017850 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80177e0:	1cbb      	adds	r3, r7, #2
 80177e2:	2200      	movs	r2, #0
 80177e4:	5e9b      	ldrsh	r3, [r3, r2]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	da03      	bge.n	80177f2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	22b8      	movs	r2, #184	@ 0xb8
 80177ee:	4313      	orrs	r3, r2
 80177f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80177f2:	1cbb      	adds	r3, r7, #2
 80177f4:	881b      	ldrh	r3, [r3, #0]
 80177f6:	2201      	movs	r2, #1
 80177f8:	4013      	ands	r3, r2
 80177fa:	d003      	beq.n	8017804 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	22f2      	movs	r2, #242	@ 0xf2
 8017800:	4313      	orrs	r3, r2
 8017802:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017804:	1cbb      	adds	r3, r7, #2
 8017806:	881b      	ldrh	r3, [r3, #0]
 8017808:	2202      	movs	r2, #2
 801780a:	4013      	ands	r3, r2
 801780c:	d003      	beq.n	8017816 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	22f4      	movs	r2, #244	@ 0xf4
 8017812:	4313      	orrs	r3, r2
 8017814:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017816:	1cbb      	adds	r3, r7, #2
 8017818:	881b      	ldrh	r3, [r3, #0]
 801781a:	2b10      	cmp	r3, #16
 801781c:	d103      	bne.n	8017826 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	2290      	movs	r2, #144	@ 0x90
 8017822:	4313      	orrs	r3, r2
 8017824:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017826:	1cbb      	adds	r3, r7, #2
 8017828:	881b      	ldrh	r3, [r3, #0]
 801782a:	2b20      	cmp	r3, #32
 801782c:	d103      	bne.n	8017836 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	2260      	movs	r2, #96	@ 0x60
 8017832:	4313      	orrs	r3, r2
 8017834:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801783a:	4b0d      	ldr	r3, [pc, #52]	@ (8017870 <I2C_Enable_IRQ+0x118>)
 801783c:	429a      	cmp	r2, r3
 801783e:	d007      	beq.n	8017850 <I2C_Enable_IRQ+0xf8>
 8017840:	1cbb      	adds	r3, r7, #2
 8017842:	881b      	ldrh	r3, [r3, #0]
 8017844:	2b40      	cmp	r3, #64	@ 0x40
 8017846:	d103      	bne.n	8017850 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	2240      	movs	r2, #64	@ 0x40
 801784c:	4313      	orrs	r3, r2
 801784e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	6819      	ldr	r1, [r3, #0]
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	68fa      	ldr	r2, [r7, #12]
 801785c:	430a      	orrs	r2, r1
 801785e:	601a      	str	r2, [r3, #0]
}
 8017860:	46c0      	nop			@ (mov r8, r8)
 8017862:	46bd      	mov	sp, r7
 8017864:	b004      	add	sp, #16
 8017866:	bd80      	pop	{r7, pc}
 8017868:	08016015 	.word	0x08016015
 801786c:	08016445 	.word	0x08016445
 8017870:	0801620d 	.word	0x0801620d

08017874 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b084      	sub	sp, #16
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	000a      	movs	r2, r1
 801787e:	1cbb      	adds	r3, r7, #2
 8017880:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017882:	2300      	movs	r3, #0
 8017884:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017886:	1cbb      	adds	r3, r7, #2
 8017888:	881b      	ldrh	r3, [r3, #0]
 801788a:	2201      	movs	r2, #1
 801788c:	4013      	ands	r3, r2
 801788e:	d010      	beq.n	80178b2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	2242      	movs	r2, #66	@ 0x42
 8017894:	4313      	orrs	r3, r2
 8017896:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2241      	movs	r2, #65	@ 0x41
 801789c:	5c9b      	ldrb	r3, [r3, r2]
 801789e:	b2db      	uxtb	r3, r3
 80178a0:	001a      	movs	r2, r3
 80178a2:	2328      	movs	r3, #40	@ 0x28
 80178a4:	4013      	ands	r3, r2
 80178a6:	2b28      	cmp	r3, #40	@ 0x28
 80178a8:	d003      	beq.n	80178b2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	22b0      	movs	r2, #176	@ 0xb0
 80178ae:	4313      	orrs	r3, r2
 80178b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80178b2:	1cbb      	adds	r3, r7, #2
 80178b4:	881b      	ldrh	r3, [r3, #0]
 80178b6:	2202      	movs	r2, #2
 80178b8:	4013      	ands	r3, r2
 80178ba:	d010      	beq.n	80178de <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	2244      	movs	r2, #68	@ 0x44
 80178c0:	4313      	orrs	r3, r2
 80178c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2241      	movs	r2, #65	@ 0x41
 80178c8:	5c9b      	ldrb	r3, [r3, r2]
 80178ca:	b2db      	uxtb	r3, r3
 80178cc:	001a      	movs	r2, r3
 80178ce:	2328      	movs	r3, #40	@ 0x28
 80178d0:	4013      	ands	r3, r2
 80178d2:	2b28      	cmp	r3, #40	@ 0x28
 80178d4:	d003      	beq.n	80178de <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	22b0      	movs	r2, #176	@ 0xb0
 80178da:	4313      	orrs	r3, r2
 80178dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80178de:	1cbb      	adds	r3, r7, #2
 80178e0:	2200      	movs	r2, #0
 80178e2:	5e9b      	ldrsh	r3, [r3, r2]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	da03      	bge.n	80178f0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	22b8      	movs	r2, #184	@ 0xb8
 80178ec:	4313      	orrs	r3, r2
 80178ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80178f0:	1cbb      	adds	r3, r7, #2
 80178f2:	881b      	ldrh	r3, [r3, #0]
 80178f4:	2b10      	cmp	r3, #16
 80178f6:	d103      	bne.n	8017900 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	2290      	movs	r2, #144	@ 0x90
 80178fc:	4313      	orrs	r3, r2
 80178fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017900:	1cbb      	adds	r3, r7, #2
 8017902:	881b      	ldrh	r3, [r3, #0]
 8017904:	2b20      	cmp	r3, #32
 8017906:	d103      	bne.n	8017910 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	2220      	movs	r2, #32
 801790c:	4313      	orrs	r3, r2
 801790e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8017910:	1cbb      	adds	r3, r7, #2
 8017912:	881b      	ldrh	r3, [r3, #0]
 8017914:	2b40      	cmp	r3, #64	@ 0x40
 8017916:	d103      	bne.n	8017920 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	2240      	movs	r2, #64	@ 0x40
 801791c:	4313      	orrs	r3, r2
 801791e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	43d9      	mvns	r1, r3
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	400a      	ands	r2, r1
 8017930:	601a      	str	r2, [r3, #0]
}
 8017932:	46c0      	nop			@ (mov r8, r8)
 8017934:	46bd      	mov	sp, r7
 8017936:	b004      	add	sp, #16
 8017938:	bd80      	pop	{r7, pc}
	...

0801793c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b082      	sub	sp, #8
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
 8017944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2241      	movs	r2, #65	@ 0x41
 801794a:	5c9b      	ldrb	r3, [r3, r2]
 801794c:	b2db      	uxtb	r3, r3
 801794e:	2b20      	cmp	r3, #32
 8017950:	d138      	bne.n	80179c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2240      	movs	r2, #64	@ 0x40
 8017956:	5c9b      	ldrb	r3, [r3, r2]
 8017958:	2b01      	cmp	r3, #1
 801795a:	d101      	bne.n	8017960 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801795c:	2302      	movs	r3, #2
 801795e:	e032      	b.n	80179c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2240      	movs	r2, #64	@ 0x40
 8017964:	2101      	movs	r1, #1
 8017966:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2241      	movs	r2, #65	@ 0x41
 801796c:	2124      	movs	r1, #36	@ 0x24
 801796e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	681a      	ldr	r2, [r3, #0]
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	2101      	movs	r1, #1
 801797c:	438a      	bics	r2, r1
 801797e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	681a      	ldr	r2, [r3, #0]
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	4911      	ldr	r1, [pc, #68]	@ (80179d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 801798c:	400a      	ands	r2, r1
 801798e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	6819      	ldr	r1, [r3, #0]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	683a      	ldr	r2, [r7, #0]
 801799c:	430a      	orrs	r2, r1
 801799e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	681a      	ldr	r2, [r3, #0]
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	2101      	movs	r1, #1
 80179ac:	430a      	orrs	r2, r1
 80179ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2241      	movs	r2, #65	@ 0x41
 80179b4:	2120      	movs	r1, #32
 80179b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2240      	movs	r2, #64	@ 0x40
 80179bc:	2100      	movs	r1, #0
 80179be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80179c0:	2300      	movs	r3, #0
 80179c2:	e000      	b.n	80179c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80179c4:	2302      	movs	r3, #2
  }
}
 80179c6:	0018      	movs	r0, r3
 80179c8:	46bd      	mov	sp, r7
 80179ca:	b002      	add	sp, #8
 80179cc:	bd80      	pop	{r7, pc}
 80179ce:	46c0      	nop			@ (mov r8, r8)
 80179d0:	ffffefff 	.word	0xffffefff

080179d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b084      	sub	sp, #16
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
 80179dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	2241      	movs	r2, #65	@ 0x41
 80179e2:	5c9b      	ldrb	r3, [r3, r2]
 80179e4:	b2db      	uxtb	r3, r3
 80179e6:	2b20      	cmp	r3, #32
 80179e8:	d139      	bne.n	8017a5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2240      	movs	r2, #64	@ 0x40
 80179ee:	5c9b      	ldrb	r3, [r3, r2]
 80179f0:	2b01      	cmp	r3, #1
 80179f2:	d101      	bne.n	80179f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80179f4:	2302      	movs	r3, #2
 80179f6:	e033      	b.n	8017a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2240      	movs	r2, #64	@ 0x40
 80179fc:	2101      	movs	r1, #1
 80179fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	2241      	movs	r2, #65	@ 0x41
 8017a04:	2124      	movs	r1, #36	@ 0x24
 8017a06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	681a      	ldr	r2, [r3, #0]
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	2101      	movs	r1, #1
 8017a14:	438a      	bics	r2, r1
 8017a16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	4a11      	ldr	r2, [pc, #68]	@ (8017a68 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8017a24:	4013      	ands	r3, r2
 8017a26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	021b      	lsls	r3, r3, #8
 8017a2c:	68fa      	ldr	r2, [r7, #12]
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	68fa      	ldr	r2, [r7, #12]
 8017a38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2101      	movs	r1, #1
 8017a46:	430a      	orrs	r2, r1
 8017a48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2241      	movs	r2, #65	@ 0x41
 8017a4e:	2120      	movs	r1, #32
 8017a50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	2240      	movs	r2, #64	@ 0x40
 8017a56:	2100      	movs	r1, #0
 8017a58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	e000      	b.n	8017a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8017a5e:	2302      	movs	r3, #2
  }
}
 8017a60:	0018      	movs	r0, r3
 8017a62:	46bd      	mov	sp, r7
 8017a64:	b004      	add	sp, #16
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	fffff0ff 	.word	0xfffff0ff

08017a6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b088      	sub	sp, #32
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d101      	bne.n	8017a7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	e0e1      	b.n	8017c42 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	2235      	movs	r2, #53	@ 0x35
 8017a82:	5c9b      	ldrb	r3, [r3, r2]
 8017a84:	b2db      	uxtb	r3, r3
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d107      	bne.n	8017a9a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	2234      	movs	r2, #52	@ 0x34
 8017a8e:	2100      	movs	r1, #0
 8017a90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	0018      	movs	r0, r3
 8017a96:	f7f4 f879 	bl	800bb8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2235      	movs	r2, #53	@ 0x35
 8017a9e:	2102      	movs	r1, #2
 8017aa0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	69da      	ldr	r2, [r3, #28]
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	4967      	ldr	r1, [pc, #412]	@ (8017c4c <HAL_I2S_Init+0x1e0>)
 8017aae:	400a      	ands	r2, r1
 8017ab0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	2202      	movs	r2, #2
 8017ab8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	695b      	ldr	r3, [r3, #20]
 8017abe:	2b02      	cmp	r3, #2
 8017ac0:	d073      	beq.n	8017baa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	68db      	ldr	r3, [r3, #12]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d102      	bne.n	8017ad0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8017aca:	2310      	movs	r3, #16
 8017acc:	617b      	str	r3, [r7, #20]
 8017ace:	e001      	b.n	8017ad4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8017ad0:	2320      	movs	r3, #32
 8017ad2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	689b      	ldr	r3, [r3, #8]
 8017ad8:	2b20      	cmp	r3, #32
 8017ada:	d802      	bhi.n	8017ae2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8017adc:	697b      	ldr	r3, [r7, #20]
 8017ade:	005b      	lsls	r3, r3, #1
 8017ae0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8017ae2:	f002 fed3 	bl	801a88c <HAL_RCC_GetSysClockFreq>
 8017ae6:	0003      	movs	r3, r0
 8017ae8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	691a      	ldr	r2, [r3, #16]
 8017aee:	2380      	movs	r3, #128	@ 0x80
 8017af0:	009b      	lsls	r3, r3, #2
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d131      	bne.n	8017b5a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	68db      	ldr	r3, [r3, #12]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d016      	beq.n	8017b2c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	009b      	lsls	r3, r3, #2
 8017b02:	0019      	movs	r1, r3
 8017b04:	68f8      	ldr	r0, [r7, #12]
 8017b06:	f7e8 fb4d 	bl	80001a4 <__udivsi3>
 8017b0a:	0003      	movs	r3, r0
 8017b0c:	001a      	movs	r2, r3
 8017b0e:	0013      	movs	r3, r2
 8017b10:	009b      	lsls	r3, r3, #2
 8017b12:	189b      	adds	r3, r3, r2
 8017b14:	005b      	lsls	r3, r3, #1
 8017b16:	001a      	movs	r2, r3
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	695b      	ldr	r3, [r3, #20]
 8017b1c:	0019      	movs	r1, r3
 8017b1e:	0010      	movs	r0, r2
 8017b20:	f7e8 fb40 	bl	80001a4 <__udivsi3>
 8017b24:	0003      	movs	r3, r0
 8017b26:	3305      	adds	r3, #5
 8017b28:	613b      	str	r3, [r7, #16]
 8017b2a:	e02a      	b.n	8017b82 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8017b2c:	697b      	ldr	r3, [r7, #20]
 8017b2e:	00db      	lsls	r3, r3, #3
 8017b30:	0019      	movs	r1, r3
 8017b32:	68f8      	ldr	r0, [r7, #12]
 8017b34:	f7e8 fb36 	bl	80001a4 <__udivsi3>
 8017b38:	0003      	movs	r3, r0
 8017b3a:	001a      	movs	r2, r3
 8017b3c:	0013      	movs	r3, r2
 8017b3e:	009b      	lsls	r3, r3, #2
 8017b40:	189b      	adds	r3, r3, r2
 8017b42:	005b      	lsls	r3, r3, #1
 8017b44:	001a      	movs	r2, r3
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	695b      	ldr	r3, [r3, #20]
 8017b4a:	0019      	movs	r1, r3
 8017b4c:	0010      	movs	r0, r2
 8017b4e:	f7e8 fb29 	bl	80001a4 <__udivsi3>
 8017b52:	0003      	movs	r3, r0
 8017b54:	3305      	adds	r3, #5
 8017b56:	613b      	str	r3, [r7, #16]
 8017b58:	e013      	b.n	8017b82 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8017b5a:	6979      	ldr	r1, [r7, #20]
 8017b5c:	68f8      	ldr	r0, [r7, #12]
 8017b5e:	f7e8 fb21 	bl	80001a4 <__udivsi3>
 8017b62:	0003      	movs	r3, r0
 8017b64:	001a      	movs	r2, r3
 8017b66:	0013      	movs	r3, r2
 8017b68:	009b      	lsls	r3, r3, #2
 8017b6a:	189b      	adds	r3, r3, r2
 8017b6c:	005b      	lsls	r3, r3, #1
 8017b6e:	001a      	movs	r2, r3
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	695b      	ldr	r3, [r3, #20]
 8017b74:	0019      	movs	r1, r3
 8017b76:	0010      	movs	r0, r2
 8017b78:	f7e8 fb14 	bl	80001a4 <__udivsi3>
 8017b7c:	0003      	movs	r3, r0
 8017b7e:	3305      	adds	r3, #5
 8017b80:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	210a      	movs	r1, #10
 8017b86:	0018      	movs	r0, r3
 8017b88:	f7e8 fb0c 	bl	80001a4 <__udivsi3>
 8017b8c:	0003      	movs	r3, r0
 8017b8e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	2201      	movs	r2, #1
 8017b94:	4013      	ands	r3, r2
 8017b96:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8017b98:	693a      	ldr	r2, [r7, #16]
 8017b9a:	69bb      	ldr	r3, [r7, #24]
 8017b9c:	1ad3      	subs	r3, r2, r3
 8017b9e:	085b      	lsrs	r3, r3, #1
 8017ba0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8017ba2:	69bb      	ldr	r3, [r7, #24]
 8017ba4:	021b      	lsls	r3, r3, #8
 8017ba6:	61bb      	str	r3, [r7, #24]
 8017ba8:	e003      	b.n	8017bb2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8017baa:	2302      	movs	r3, #2
 8017bac:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	d902      	bls.n	8017bbe <HAL_I2S_Init+0x152>
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	2bff      	cmp	r3, #255	@ 0xff
 8017bbc:	d907      	bls.n	8017bce <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bc2:	2210      	movs	r2, #16
 8017bc4:	431a      	orrs	r2, r3
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8017bca:	2301      	movs	r3, #1
 8017bcc:	e039      	b.n	8017c42 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	691a      	ldr	r2, [r3, #16]
 8017bd2:	69bb      	ldr	r3, [r7, #24]
 8017bd4:	431a      	orrs	r2, r3
 8017bd6:	0011      	movs	r1, r2
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	69fa      	ldr	r2, [r7, #28]
 8017bde:	430a      	orrs	r2, r1
 8017be0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	69db      	ldr	r3, [r3, #28]
 8017be8:	4a18      	ldr	r2, [pc, #96]	@ (8017c4c <HAL_I2S_Init+0x1e0>)
 8017bea:	401a      	ands	r2, r3
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	6859      	ldr	r1, [r3, #4]
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	689b      	ldr	r3, [r3, #8]
 8017bf4:	4319      	orrs	r1, r3
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	68db      	ldr	r3, [r3, #12]
 8017bfa:	4319      	orrs	r1, r3
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	699b      	ldr	r3, [r3, #24]
 8017c00:	430b      	orrs	r3, r1
 8017c02:	431a      	orrs	r2, r3
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	2180      	movs	r1, #128	@ 0x80
 8017c0a:	0109      	lsls	r1, r1, #4
 8017c0c:	430a      	orrs	r2, r1
 8017c0e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	689b      	ldr	r3, [r3, #8]
 8017c14:	2b30      	cmp	r3, #48	@ 0x30
 8017c16:	d003      	beq.n	8017c20 <HAL_I2S_Init+0x1b4>
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	689b      	ldr	r3, [r3, #8]
 8017c1c:	2bb0      	cmp	r3, #176	@ 0xb0
 8017c1e:	d108      	bne.n	8017c32 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	69da      	ldr	r2, [r3, #28]
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	2180      	movs	r1, #128	@ 0x80
 8017c2c:	0149      	lsls	r1, r1, #5
 8017c2e:	430a      	orrs	r2, r1
 8017c30:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2200      	movs	r2, #0
 8017c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2235      	movs	r2, #53	@ 0x35
 8017c3c:	2101      	movs	r1, #1
 8017c3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017c40:	2300      	movs	r3, #0
}
 8017c42:	0018      	movs	r0, r3
 8017c44:	46bd      	mov	sp, r7
 8017c46:	b008      	add	sp, #32
 8017c48:	bd80      	pop	{r7, pc}
 8017c4a:	46c0      	nop			@ (mov r8, r8)
 8017c4c:	fffff040 	.word	0xfffff040

08017c50 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b086      	sub	sp, #24
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	60f8      	str	r0, [r7, #12]
 8017c58:	60b9      	str	r1, [r7, #8]
 8017c5a:	1dbb      	adds	r3, r7, #6
 8017c5c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d003      	beq.n	8017c6c <HAL_I2S_Receive_DMA+0x1c>
 8017c64:	1dbb      	adds	r3, r7, #6
 8017c66:	881b      	ldrh	r3, [r3, #0]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d101      	bne.n	8017c70 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	e0a6      	b.n	8017dbe <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2234      	movs	r2, #52	@ 0x34
 8017c74:	5c9b      	ldrb	r3, [r3, r2]
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	2b01      	cmp	r3, #1
 8017c7a:	d101      	bne.n	8017c80 <HAL_I2S_Receive_DMA+0x30>
 8017c7c:	2302      	movs	r3, #2
 8017c7e:	e09e      	b.n	8017dbe <HAL_I2S_Receive_DMA+0x16e>
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2234      	movs	r2, #52	@ 0x34
 8017c84:	2101      	movs	r1, #1
 8017c86:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	2235      	movs	r2, #53	@ 0x35
 8017c8c:	5c9b      	ldrb	r3, [r3, r2]
 8017c8e:	b2db      	uxtb	r3, r3
 8017c90:	2b01      	cmp	r3, #1
 8017c92:	d005      	beq.n	8017ca0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	2234      	movs	r2, #52	@ 0x34
 8017c98:	2100      	movs	r1, #0
 8017c9a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8017c9c:	2302      	movs	r3, #2
 8017c9e:	e08e      	b.n	8017dbe <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	2235      	movs	r2, #53	@ 0x35
 8017ca4:	2104      	movs	r1, #4
 8017ca6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	2200      	movs	r2, #0
 8017cac:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	68ba      	ldr	r2, [r7, #8]
 8017cb2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	69db      	ldr	r3, [r3, #28]
 8017cba:	2207      	movs	r2, #7
 8017cbc:	4013      	ands	r3, r2
 8017cbe:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8017cc0:	697b      	ldr	r3, [r7, #20]
 8017cc2:	2b03      	cmp	r3, #3
 8017cc4:	d002      	beq.n	8017ccc <HAL_I2S_Receive_DMA+0x7c>
 8017cc6:	697b      	ldr	r3, [r7, #20]
 8017cc8:	2b05      	cmp	r3, #5
 8017cca:	d10c      	bne.n	8017ce6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8017ccc:	1dbb      	adds	r3, r7, #6
 8017cce:	881b      	ldrh	r3, [r3, #0]
 8017cd0:	18db      	adds	r3, r3, r3
 8017cd2:	b29a      	uxth	r2, r3
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8017cd8:	1dbb      	adds	r3, r7, #6
 8017cda:	881b      	ldrh	r3, [r3, #0]
 8017cdc:	18db      	adds	r3, r3, r3
 8017cde:	b29a      	uxth	r2, r3
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017ce4:	e007      	b.n	8017cf6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	1dba      	adds	r2, r7, #6
 8017cea:	8812      	ldrh	r2, [r2, #0]
 8017cec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	1dba      	adds	r2, r7, #6
 8017cf2:	8812      	ldrh	r2, [r2, #0]
 8017cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017cfa:	4a33      	ldr	r2, [pc, #204]	@ (8017dc8 <HAL_I2S_Receive_DMA+0x178>)
 8017cfc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d02:	4a32      	ldr	r2, [pc, #200]	@ (8017dcc <HAL_I2S_Receive_DMA+0x17c>)
 8017d04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d0a:	4a31      	ldr	r2, [pc, #196]	@ (8017dd0 <HAL_I2S_Receive_DMA+0x180>)
 8017d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	69da      	ldr	r2, [r3, #28]
 8017d14:	23c0      	movs	r3, #192	@ 0xc0
 8017d16:	009b      	lsls	r3, r3, #2
 8017d18:	401a      	ands	r2, r3
 8017d1a:	23c0      	movs	r3, #192	@ 0xc0
 8017d1c:	009b      	lsls	r3, r3, #2
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d10a      	bne.n	8017d38 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8017d22:	2300      	movs	r3, #0
 8017d24:	613b      	str	r3, [r7, #16]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	68db      	ldr	r3, [r3, #12]
 8017d2c:	613b      	str	r3, [r7, #16]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	689b      	ldr	r3, [r3, #8]
 8017d34:	613b      	str	r3, [r7, #16]
 8017d36:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	330c      	adds	r3, #12
 8017d42:	0019      	movs	r1, r3
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d48:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017d4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8017d50:	f7fc fa0a 	bl	8014168 <HAL_DMA_Start_IT>
 8017d54:	1e03      	subs	r3, r0, #0
 8017d56:	d00f      	beq.n	8017d78 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017d5c:	2208      	movs	r2, #8
 8017d5e:	431a      	orrs	r2, r3
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	2235      	movs	r2, #53	@ 0x35
 8017d68:	2101      	movs	r1, #1
 8017d6a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	2234      	movs	r2, #52	@ 0x34
 8017d70:	2100      	movs	r1, #0
 8017d72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8017d74:	2301      	movs	r3, #1
 8017d76:	e022      	b.n	8017dbe <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	69da      	ldr	r2, [r3, #28]
 8017d7e:	2380      	movs	r3, #128	@ 0x80
 8017d80:	00db      	lsls	r3, r3, #3
 8017d82:	4013      	ands	r3, r2
 8017d84:	d108      	bne.n	8017d98 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	69da      	ldr	r2, [r3, #28]
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	2180      	movs	r1, #128	@ 0x80
 8017d92:	00c9      	lsls	r1, r1, #3
 8017d94:	430a      	orrs	r2, r1
 8017d96:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	685b      	ldr	r3, [r3, #4]
 8017d9e:	2201      	movs	r2, #1
 8017da0:	4013      	ands	r3, r2
 8017da2:	d107      	bne.n	8017db4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	685a      	ldr	r2, [r3, #4]
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2101      	movs	r1, #1
 8017db0:	430a      	orrs	r2, r1
 8017db2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	2234      	movs	r2, #52	@ 0x34
 8017db8:	2100      	movs	r1, #0
 8017dba:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8017dbc:	2300      	movs	r3, #0
}
 8017dbe:	0018      	movs	r0, r3
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	b006      	add	sp, #24
 8017dc4:	bd80      	pop	{r7, pc}
 8017dc6:	46c0      	nop			@ (mov r8, r8)
 8017dc8:	08017fb1 	.word	0x08017fb1
 8017dcc:	08017f6d 	.word	0x08017f6d
 8017dd0:	08017fcf 	.word	0x08017fcf

08017dd4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b086      	sub	sp, #24
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8017ddc:	2317      	movs	r3, #23
 8017dde:	18fb      	adds	r3, r7, r3
 8017de0:	2200      	movs	r2, #0
 8017de2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	685a      	ldr	r2, [r3, #4]
 8017de8:	2380      	movs	r3, #128	@ 0x80
 8017dea:	009b      	lsls	r3, r3, #2
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d003      	beq.n	8017df8 <HAL_I2S_DMAStop+0x24>
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	685b      	ldr	r3, [r3, #4]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d158      	bne.n	8017eaa <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d010      	beq.n	8017e22 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e04:	0018      	movs	r0, r3
 8017e06:	f7fc fa15 	bl	8014234 <HAL_DMA_Abort>
 8017e0a:	1e03      	subs	r3, r0, #0
 8017e0c:	d009      	beq.n	8017e22 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e12:	2208      	movs	r2, #8
 8017e14:	431a      	orrs	r2, r3
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8017e1a:	2317      	movs	r3, #23
 8017e1c:	18fb      	adds	r3, r7, r3
 8017e1e:	2201      	movs	r2, #1
 8017e20:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8017e22:	6878      	ldr	r0, [r7, #4]
 8017e24:	2364      	movs	r3, #100	@ 0x64
 8017e26:	2201      	movs	r2, #1
 8017e28:	2102      	movs	r1, #2
 8017e2a:	f000 f8f7 	bl	801801c <I2S_WaitFlagStateUntilTimeout>
 8017e2e:	1e03      	subs	r3, r0, #0
 8017e30:	d00d      	beq.n	8017e4e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e36:	2201      	movs	r2, #1
 8017e38:	431a      	orrs	r2, r3
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	2235      	movs	r2, #53	@ 0x35
 8017e42:	2101      	movs	r1, #1
 8017e44:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8017e46:	2317      	movs	r3, #23
 8017e48:	18fb      	adds	r3, r7, r3
 8017e4a:	2201      	movs	r2, #1
 8017e4c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8017e4e:	6878      	ldr	r0, [r7, #4]
 8017e50:	2364      	movs	r3, #100	@ 0x64
 8017e52:	2200      	movs	r2, #0
 8017e54:	2180      	movs	r1, #128	@ 0x80
 8017e56:	f000 f8e1 	bl	801801c <I2S_WaitFlagStateUntilTimeout>
 8017e5a:	1e03      	subs	r3, r0, #0
 8017e5c:	d00d      	beq.n	8017e7a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017e62:	2201      	movs	r2, #1
 8017e64:	431a      	orrs	r2, r3
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2235      	movs	r2, #53	@ 0x35
 8017e6e:	2101      	movs	r1, #1
 8017e70:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8017e72:	2317      	movs	r3, #23
 8017e74:	18fb      	adds	r3, r7, r3
 8017e76:	2201      	movs	r2, #1
 8017e78:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	69da      	ldr	r2, [r3, #28]
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4938      	ldr	r1, [pc, #224]	@ (8017f68 <HAL_I2S_DMAStop+0x194>)
 8017e86:	400a      	ands	r2, r1
 8017e88:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	613b      	str	r3, [r7, #16]
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	689b      	ldr	r3, [r3, #8]
 8017e94:	613b      	str	r3, [r7, #16]
 8017e96:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	685a      	ldr	r2, [r3, #4]
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	2102      	movs	r1, #2
 8017ea4:	438a      	bics	r2, r1
 8017ea6:	605a      	str	r2, [r3, #4]
 8017ea8:	e053      	b.n	8017f52 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	685a      	ldr	r2, [r3, #4]
 8017eae:	23c0      	movs	r3, #192	@ 0xc0
 8017eb0:	009b      	lsls	r3, r3, #2
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	d005      	beq.n	8017ec2 <HAL_I2S_DMAStop+0xee>
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	685a      	ldr	r2, [r3, #4]
 8017eba:	2380      	movs	r3, #128	@ 0x80
 8017ebc:	005b      	lsls	r3, r3, #1
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d147      	bne.n	8017f52 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d010      	beq.n	8017eec <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ece:	0018      	movs	r0, r3
 8017ed0:	f7fc f9b0 	bl	8014234 <HAL_DMA_Abort>
 8017ed4:	1e03      	subs	r3, r0, #0
 8017ed6:	d009      	beq.n	8017eec <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017edc:	2208      	movs	r2, #8
 8017ede:	431a      	orrs	r2, r3
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8017ee4:	2317      	movs	r3, #23
 8017ee6:	18fb      	adds	r3, r7, r3
 8017ee8:	2201      	movs	r2, #1
 8017eea:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	69da      	ldr	r2, [r3, #28]
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	491c      	ldr	r1, [pc, #112]	@ (8017f68 <HAL_I2S_DMAStop+0x194>)
 8017ef8:	400a      	ands	r2, r1
 8017efa:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8017efc:	2300      	movs	r3, #0
 8017efe:	60fb      	str	r3, [r7, #12]
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	68db      	ldr	r3, [r3, #12]
 8017f06:	60fb      	str	r3, [r7, #12]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	689b      	ldr	r3, [r3, #8]
 8017f0e:	60fb      	str	r3, [r7, #12]
 8017f10:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	685a      	ldr	r2, [r3, #4]
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	2101      	movs	r1, #1
 8017f1e:	438a      	bics	r2, r1
 8017f20:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	685a      	ldr	r2, [r3, #4]
 8017f26:	2380      	movs	r3, #128	@ 0x80
 8017f28:	005b      	lsls	r3, r3, #1
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d10e      	bne.n	8017f4c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f32:	2240      	movs	r2, #64	@ 0x40
 8017f34:	431a      	orrs	r2, r3
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	2235      	movs	r2, #53	@ 0x35
 8017f3e:	2101      	movs	r1, #1
 8017f40:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8017f42:	2317      	movs	r3, #23
 8017f44:	18fb      	adds	r3, r7, r3
 8017f46:	2201      	movs	r2, #1
 8017f48:	701a      	strb	r2, [r3, #0]
 8017f4a:	e002      	b.n	8017f52 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2235      	movs	r2, #53	@ 0x35
 8017f56:	2101      	movs	r1, #1
 8017f58:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8017f5a:	2317      	movs	r3, #23
 8017f5c:	18fb      	adds	r3, r7, r3
 8017f5e:	781b      	ldrb	r3, [r3, #0]
}
 8017f60:	0018      	movs	r0, r3
 8017f62:	46bd      	mov	sp, r7
 8017f64:	b006      	add	sp, #24
 8017f66:	bd80      	pop	{r7, pc}
 8017f68:	fffffbff 	.word	0xfffffbff

08017f6c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b084      	sub	sp, #16
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f78:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	69db      	ldr	r3, [r3, #28]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d10e      	bne.n	8017fa0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	685a      	ldr	r2, [r3, #4]
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	2101      	movs	r1, #1
 8017f8e:	438a      	bics	r2, r1
 8017f90:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	2200      	movs	r2, #0
 8017f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	2235      	movs	r2, #53	@ 0x35
 8017f9c:	2101      	movs	r1, #1
 8017f9e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	0018      	movs	r0, r3
 8017fa4:	f7f8 fd4a 	bl	8010a3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017fa8:	46c0      	nop			@ (mov r8, r8)
 8017faa:	46bd      	mov	sp, r7
 8017fac:	b004      	add	sp, #16
 8017fae:	bd80      	pop	{r7, pc}

08017fb0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b084      	sub	sp, #16
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017fbc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	0018      	movs	r0, r3
 8017fc2:	f7f8 fd29 	bl	8010a18 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8017fc6:	46c0      	nop			@ (mov r8, r8)
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	b004      	add	sp, #16
 8017fcc:	bd80      	pop	{r7, pc}

08017fce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8017fce:	b580      	push	{r7, lr}
 8017fd0:	b084      	sub	sp, #16
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017fda:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	685a      	ldr	r2, [r3, #4]
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	2103      	movs	r1, #3
 8017fe8:	438a      	bics	r2, r1
 8017fea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	2200      	movs	r2, #0
 8017ff0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	2235      	movs	r2, #53	@ 0x35
 8017ffc:	2101      	movs	r1, #1
 8017ffe:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018004:	2208      	movs	r2, #8
 8018006:	431a      	orrs	r2, r3
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	0018      	movs	r0, r3
 8018010:	f7f8 fd62 	bl	8010ad8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018014:	46c0      	nop			@ (mov r8, r8)
 8018016:	46bd      	mov	sp, r7
 8018018:	b004      	add	sp, #16
 801801a:	bd80      	pop	{r7, pc}

0801801c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b086      	sub	sp, #24
 8018020:	af00      	add	r7, sp, #0
 8018022:	60f8      	str	r0, [r7, #12]
 8018024:	60b9      	str	r1, [r7, #8]
 8018026:	603b      	str	r3, [r7, #0]
 8018028:	1dfb      	adds	r3, r7, #7
 801802a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801802c:	f7fb fb4a 	bl	80136c4 <HAL_GetTick>
 8018030:	0003      	movs	r3, r0
 8018032:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8018034:	e017      	b.n	8018066 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	3301      	adds	r3, #1
 801803a:	d014      	beq.n	8018066 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801803c:	f7fb fb42 	bl	80136c4 <HAL_GetTick>
 8018040:	0002      	movs	r2, r0
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	1ad3      	subs	r3, r2, r3
 8018046:	683a      	ldr	r2, [r7, #0]
 8018048:	429a      	cmp	r2, r3
 801804a:	d902      	bls.n	8018052 <I2S_WaitFlagStateUntilTimeout+0x36>
 801804c:	683b      	ldr	r3, [r7, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d109      	bne.n	8018066 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	2235      	movs	r2, #53	@ 0x35
 8018056:	2101      	movs	r1, #1
 8018058:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	2234      	movs	r2, #52	@ 0x34
 801805e:	2100      	movs	r1, #0
 8018060:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018062:	2303      	movs	r3, #3
 8018064:	e00f      	b.n	8018086 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	689b      	ldr	r3, [r3, #8]
 801806c:	68ba      	ldr	r2, [r7, #8]
 801806e:	4013      	ands	r3, r2
 8018070:	68ba      	ldr	r2, [r7, #8]
 8018072:	1ad3      	subs	r3, r2, r3
 8018074:	425a      	negs	r2, r3
 8018076:	4153      	adcs	r3, r2
 8018078:	b2db      	uxtb	r3, r3
 801807a:	001a      	movs	r2, r3
 801807c:	1dfb      	adds	r3, r7, #7
 801807e:	781b      	ldrb	r3, [r3, #0]
 8018080:	429a      	cmp	r2, r3
 8018082:	d1d8      	bne.n	8018036 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8018084:	2300      	movs	r3, #0
}
 8018086:	0018      	movs	r0, r3
 8018088:	46bd      	mov	sp, r7
 801808a:	b006      	add	sp, #24
 801808c:	bd80      	pop	{r7, pc}
	...

08018090 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8018090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018092:	b08b      	sub	sp, #44	@ 0x2c
 8018094:	af06      	add	r7, sp, #24
 8018096:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d101      	bne.n	80180a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801809e:	2301      	movs	r3, #1
 80180a0:	e0f0      	b.n	8018284 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	4a79      	ldr	r2, [pc, #484]	@ (801828c <HAL_PCD_Init+0x1fc>)
 80180a6:	5c9b      	ldrb	r3, [r3, r2]
 80180a8:	b2db      	uxtb	r3, r3
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d108      	bne.n	80180c0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80180ae:	687a      	ldr	r2, [r7, #4]
 80180b0:	23aa      	movs	r3, #170	@ 0xaa
 80180b2:	009b      	lsls	r3, r3, #2
 80180b4:	2100      	movs	r1, #0
 80180b6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	0018      	movs	r0, r3
 80180bc:	f009 ff4a 	bl	8021f54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	4a72      	ldr	r2, [pc, #456]	@ (801828c <HAL_PCD_Init+0x1fc>)
 80180c4:	2103      	movs	r1, #3
 80180c6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	0018      	movs	r0, r3
 80180ce:	f005 fefd 	bl	801decc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80180d2:	230f      	movs	r3, #15
 80180d4:	18fb      	adds	r3, r7, r3
 80180d6:	2200      	movs	r2, #0
 80180d8:	701a      	strb	r2, [r3, #0]
 80180da:	e049      	b.n	8018170 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80180dc:	200f      	movs	r0, #15
 80180de:	183b      	adds	r3, r7, r0
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	6879      	ldr	r1, [r7, #4]
 80180e4:	1c5a      	adds	r2, r3, #1
 80180e6:	0013      	movs	r3, r2
 80180e8:	009b      	lsls	r3, r3, #2
 80180ea:	189b      	adds	r3, r3, r2
 80180ec:	00db      	lsls	r3, r3, #3
 80180ee:	18cb      	adds	r3, r1, r3
 80180f0:	3301      	adds	r3, #1
 80180f2:	2201      	movs	r2, #1
 80180f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80180f6:	183b      	adds	r3, r7, r0
 80180f8:	781b      	ldrb	r3, [r3, #0]
 80180fa:	6879      	ldr	r1, [r7, #4]
 80180fc:	1c5a      	adds	r2, r3, #1
 80180fe:	0013      	movs	r3, r2
 8018100:	009b      	lsls	r3, r3, #2
 8018102:	189b      	adds	r3, r3, r2
 8018104:	00db      	lsls	r3, r3, #3
 8018106:	183a      	adds	r2, r7, r0
 8018108:	7812      	ldrb	r2, [r2, #0]
 801810a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801810c:	183b      	adds	r3, r7, r0
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	6879      	ldr	r1, [r7, #4]
 8018112:	1c5a      	adds	r2, r3, #1
 8018114:	0013      	movs	r3, r2
 8018116:	009b      	lsls	r3, r3, #2
 8018118:	189b      	adds	r3, r3, r2
 801811a:	00db      	lsls	r3, r3, #3
 801811c:	18cb      	adds	r3, r1, r3
 801811e:	3303      	adds	r3, #3
 8018120:	2200      	movs	r2, #0
 8018122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8018124:	183b      	adds	r3, r7, r0
 8018126:	781a      	ldrb	r2, [r3, #0]
 8018128:	6879      	ldr	r1, [r7, #4]
 801812a:	0013      	movs	r3, r2
 801812c:	009b      	lsls	r3, r3, #2
 801812e:	189b      	adds	r3, r3, r2
 8018130:	00db      	lsls	r3, r3, #3
 8018132:	18cb      	adds	r3, r1, r3
 8018134:	3338      	adds	r3, #56	@ 0x38
 8018136:	2200      	movs	r2, #0
 8018138:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801813a:	183b      	adds	r3, r7, r0
 801813c:	781a      	ldrb	r2, [r3, #0]
 801813e:	6879      	ldr	r1, [r7, #4]
 8018140:	0013      	movs	r3, r2
 8018142:	009b      	lsls	r3, r3, #2
 8018144:	189b      	adds	r3, r3, r2
 8018146:	00db      	lsls	r3, r3, #3
 8018148:	18cb      	adds	r3, r1, r3
 801814a:	333c      	adds	r3, #60	@ 0x3c
 801814c:	2200      	movs	r2, #0
 801814e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8018150:	183b      	adds	r3, r7, r0
 8018152:	781a      	ldrb	r2, [r3, #0]
 8018154:	6879      	ldr	r1, [r7, #4]
 8018156:	0013      	movs	r3, r2
 8018158:	009b      	lsls	r3, r3, #2
 801815a:	189b      	adds	r3, r3, r2
 801815c:	00db      	lsls	r3, r3, #3
 801815e:	18cb      	adds	r3, r1, r3
 8018160:	3340      	adds	r3, #64	@ 0x40
 8018162:	2200      	movs	r2, #0
 8018164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018166:	183b      	adds	r3, r7, r0
 8018168:	781a      	ldrb	r2, [r3, #0]
 801816a:	183b      	adds	r3, r7, r0
 801816c:	3201      	adds	r2, #1
 801816e:	701a      	strb	r2, [r3, #0]
 8018170:	210f      	movs	r1, #15
 8018172:	187b      	adds	r3, r7, r1
 8018174:	781a      	ldrb	r2, [r3, #0]
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	685b      	ldr	r3, [r3, #4]
 801817a:	429a      	cmp	r2, r3
 801817c:	d3ae      	bcc.n	80180dc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801817e:	187b      	adds	r3, r7, r1
 8018180:	2200      	movs	r2, #0
 8018182:	701a      	strb	r2, [r3, #0]
 8018184:	e056      	b.n	8018234 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8018186:	240f      	movs	r4, #15
 8018188:	193b      	adds	r3, r7, r4
 801818a:	781a      	ldrb	r2, [r3, #0]
 801818c:	6878      	ldr	r0, [r7, #4]
 801818e:	236a      	movs	r3, #106	@ 0x6a
 8018190:	33ff      	adds	r3, #255	@ 0xff
 8018192:	0019      	movs	r1, r3
 8018194:	0013      	movs	r3, r2
 8018196:	009b      	lsls	r3, r3, #2
 8018198:	189b      	adds	r3, r3, r2
 801819a:	00db      	lsls	r3, r3, #3
 801819c:	18c3      	adds	r3, r0, r3
 801819e:	185b      	adds	r3, r3, r1
 80181a0:	2200      	movs	r2, #0
 80181a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80181a4:	193b      	adds	r3, r7, r4
 80181a6:	781a      	ldrb	r2, [r3, #0]
 80181a8:	6878      	ldr	r0, [r7, #4]
 80181aa:	23b4      	movs	r3, #180	@ 0xb4
 80181ac:	0059      	lsls	r1, r3, #1
 80181ae:	0013      	movs	r3, r2
 80181b0:	009b      	lsls	r3, r3, #2
 80181b2:	189b      	adds	r3, r3, r2
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	18c3      	adds	r3, r0, r3
 80181b8:	185b      	adds	r3, r3, r1
 80181ba:	193a      	adds	r2, r7, r4
 80181bc:	7812      	ldrb	r2, [r2, #0]
 80181be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80181c0:	193b      	adds	r3, r7, r4
 80181c2:	781a      	ldrb	r2, [r3, #0]
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	236c      	movs	r3, #108	@ 0x6c
 80181c8:	33ff      	adds	r3, #255	@ 0xff
 80181ca:	0019      	movs	r1, r3
 80181cc:	0013      	movs	r3, r2
 80181ce:	009b      	lsls	r3, r3, #2
 80181d0:	189b      	adds	r3, r3, r2
 80181d2:	00db      	lsls	r3, r3, #3
 80181d4:	18c3      	adds	r3, r0, r3
 80181d6:	185b      	adds	r3, r3, r1
 80181d8:	2200      	movs	r2, #0
 80181da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80181dc:	193b      	adds	r3, r7, r4
 80181de:	781a      	ldrb	r2, [r3, #0]
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	23bc      	movs	r3, #188	@ 0xbc
 80181e4:	0059      	lsls	r1, r3, #1
 80181e6:	0013      	movs	r3, r2
 80181e8:	009b      	lsls	r3, r3, #2
 80181ea:	189b      	adds	r3, r3, r2
 80181ec:	00db      	lsls	r3, r3, #3
 80181ee:	18c3      	adds	r3, r0, r3
 80181f0:	185b      	adds	r3, r3, r1
 80181f2:	2200      	movs	r2, #0
 80181f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80181f6:	193b      	adds	r3, r7, r4
 80181f8:	781a      	ldrb	r2, [r3, #0]
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	23be      	movs	r3, #190	@ 0xbe
 80181fe:	0059      	lsls	r1, r3, #1
 8018200:	0013      	movs	r3, r2
 8018202:	009b      	lsls	r3, r3, #2
 8018204:	189b      	adds	r3, r3, r2
 8018206:	00db      	lsls	r3, r3, #3
 8018208:	18c3      	adds	r3, r0, r3
 801820a:	185b      	adds	r3, r3, r1
 801820c:	2200      	movs	r2, #0
 801820e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8018210:	193b      	adds	r3, r7, r4
 8018212:	781a      	ldrb	r2, [r3, #0]
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	23c0      	movs	r3, #192	@ 0xc0
 8018218:	0059      	lsls	r1, r3, #1
 801821a:	0013      	movs	r3, r2
 801821c:	009b      	lsls	r3, r3, #2
 801821e:	189b      	adds	r3, r3, r2
 8018220:	00db      	lsls	r3, r3, #3
 8018222:	18c3      	adds	r3, r0, r3
 8018224:	185b      	adds	r3, r3, r1
 8018226:	2200      	movs	r2, #0
 8018228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801822a:	193b      	adds	r3, r7, r4
 801822c:	781a      	ldrb	r2, [r3, #0]
 801822e:	193b      	adds	r3, r7, r4
 8018230:	3201      	adds	r2, #1
 8018232:	701a      	strb	r2, [r3, #0]
 8018234:	230f      	movs	r3, #15
 8018236:	18fb      	adds	r3, r7, r3
 8018238:	781a      	ldrb	r2, [r3, #0]
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	685b      	ldr	r3, [r3, #4]
 801823e:	429a      	cmp	r2, r3
 8018240:	d3a1      	bcc.n	8018186 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	6818      	ldr	r0, [r3, #0]
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	466a      	mov	r2, sp
 801824a:	0011      	movs	r1, r2
 801824c:	001a      	movs	r2, r3
 801824e:	3210      	adds	r2, #16
 8018250:	ca70      	ldmia	r2!, {r4, r5, r6}
 8018252:	c170      	stmia	r1!, {r4, r5, r6}
 8018254:	ca30      	ldmia	r2!, {r4, r5}
 8018256:	c130      	stmia	r1!, {r4, r5}
 8018258:	6859      	ldr	r1, [r3, #4]
 801825a:	689a      	ldr	r2, [r3, #8]
 801825c:	68db      	ldr	r3, [r3, #12]
 801825e:	f005 fe4f 	bl	801df00 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2224      	movs	r2, #36	@ 0x24
 8018266:	2100      	movs	r1, #0
 8018268:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	4a07      	ldr	r2, [pc, #28]	@ (801828c <HAL_PCD_Init+0x1fc>)
 801826e:	2101      	movs	r1, #1
 8018270:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	69db      	ldr	r3, [r3, #28]
 8018276:	2b01      	cmp	r3, #1
 8018278:	d103      	bne.n	8018282 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	0018      	movs	r0, r3
 801827e:	f001 fd23 	bl	8019cc8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8018282:	2300      	movs	r3, #0
}
 8018284:	0018      	movs	r0, r3
 8018286:	46bd      	mov	sp, r7
 8018288:	b005      	add	sp, #20
 801828a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801828c:	000002a9 	.word	0x000002a9

08018290 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8018298:	687a      	ldr	r2, [r7, #4]
 801829a:	23aa      	movs	r3, #170	@ 0xaa
 801829c:	009b      	lsls	r3, r3, #2
 801829e:	5cd3      	ldrb	r3, [r2, r3]
 80182a0:	2b01      	cmp	r3, #1
 80182a2:	d101      	bne.n	80182a8 <HAL_PCD_Start+0x18>
 80182a4:	2302      	movs	r3, #2
 80182a6:	e014      	b.n	80182d2 <HAL_PCD_Start+0x42>
 80182a8:	687a      	ldr	r2, [r7, #4]
 80182aa:	23aa      	movs	r3, #170	@ 0xaa
 80182ac:	009b      	lsls	r3, r3, #2
 80182ae:	2101      	movs	r1, #1
 80182b0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	0018      	movs	r0, r3
 80182b8:	f005 fdf2 	bl	801dea0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	0018      	movs	r0, r3
 80182c2:	f007 fdf5 	bl	801feb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80182c6:	687a      	ldr	r2, [r7, #4]
 80182c8:	23aa      	movs	r3, #170	@ 0xaa
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	2100      	movs	r1, #0
 80182ce:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80182d0:	2300      	movs	r3, #0
}
 80182d2:	0018      	movs	r0, r3
 80182d4:	46bd      	mov	sp, r7
 80182d6:	b002      	add	sp, #8
 80182d8:	bd80      	pop	{r7, pc}
	...

080182dc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	0018      	movs	r0, r3
 80182ea:	f007 fdf7 	bl	801fedc <USB_ReadInterrupts>
 80182ee:	0003      	movs	r3, r0
 80182f0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80182f2:	68fa      	ldr	r2, [r7, #12]
 80182f4:	2380      	movs	r3, #128	@ 0x80
 80182f6:	021b      	lsls	r3, r3, #8
 80182f8:	4013      	ands	r3, r2
 80182fa:	d004      	beq.n	8018306 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	0018      	movs	r0, r3
 8018300:	f000 fb62 	bl	80189c8 <PCD_EP_ISR_Handler>

    return;
 8018304:	e11d      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8018306:	68fa      	ldr	r2, [r7, #12]
 8018308:	2380      	movs	r3, #128	@ 0x80
 801830a:	00db      	lsls	r3, r3, #3
 801830c:	4013      	ands	r3, r2
 801830e:	d015      	beq.n	801833c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	2244      	movs	r2, #68	@ 0x44
 8018316:	5a9b      	ldrh	r3, [r3, r2]
 8018318:	b29a      	uxth	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	498a      	ldr	r1, [pc, #552]	@ (8018548 <HAL_PCD_IRQHandler+0x26c>)
 8018320:	400a      	ands	r2, r1
 8018322:	b291      	uxth	r1, r2
 8018324:	2244      	movs	r2, #68	@ 0x44
 8018326:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	0018      	movs	r0, r3
 801832c:	f009 fe95 	bl	802205a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	2100      	movs	r1, #0
 8018334:	0018      	movs	r0, r3
 8018336:	f000 f915 	bl	8018564 <HAL_PCD_SetAddress>

    return;
 801833a:	e102      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801833c:	68fa      	ldr	r2, [r7, #12]
 801833e:	2380      	movs	r3, #128	@ 0x80
 8018340:	01db      	lsls	r3, r3, #7
 8018342:	4013      	ands	r3, r2
 8018344:	d00c      	beq.n	8018360 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	2244      	movs	r2, #68	@ 0x44
 801834c:	5a9b      	ldrh	r3, [r3, r2]
 801834e:	b29a      	uxth	r2, r3
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	497d      	ldr	r1, [pc, #500]	@ (801854c <HAL_PCD_IRQHandler+0x270>)
 8018356:	400a      	ands	r2, r1
 8018358:	b291      	uxth	r1, r2
 801835a:	2244      	movs	r2, #68	@ 0x44
 801835c:	5299      	strh	r1, [r3, r2]

    return;
 801835e:	e0f0      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8018360:	68fa      	ldr	r2, [r7, #12]
 8018362:	2380      	movs	r3, #128	@ 0x80
 8018364:	019b      	lsls	r3, r3, #6
 8018366:	4013      	ands	r3, r2
 8018368:	d00c      	beq.n	8018384 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2244      	movs	r2, #68	@ 0x44
 8018370:	5a9b      	ldrh	r3, [r3, r2]
 8018372:	b29a      	uxth	r2, r3
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	4975      	ldr	r1, [pc, #468]	@ (8018550 <HAL_PCD_IRQHandler+0x274>)
 801837a:	400a      	ands	r2, r1
 801837c:	b291      	uxth	r1, r2
 801837e:	2244      	movs	r2, #68	@ 0x44
 8018380:	5299      	strh	r1, [r3, r2]

    return;
 8018382:	e0de      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8018384:	68fa      	ldr	r2, [r7, #12]
 8018386:	2380      	movs	r3, #128	@ 0x80
 8018388:	015b      	lsls	r3, r3, #5
 801838a:	4013      	ands	r3, r2
 801838c:	d038      	beq.n	8018400 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	681b      	ldr	r3, [r3, #0]
 8018392:	2240      	movs	r2, #64	@ 0x40
 8018394:	5a9b      	ldrh	r3, [r3, r2]
 8018396:	b29a      	uxth	r2, r3
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	2104      	movs	r1, #4
 801839e:	438a      	bics	r2, r1
 80183a0:	b291      	uxth	r1, r2
 80183a2:	2240      	movs	r2, #64	@ 0x40
 80183a4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	2240      	movs	r2, #64	@ 0x40
 80183ac:	5a9b      	ldrh	r3, [r3, r2]
 80183ae:	b29a      	uxth	r2, r3
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	2108      	movs	r1, #8
 80183b6:	438a      	bics	r2, r1
 80183b8:	b291      	uxth	r1, r2
 80183ba:	2240      	movs	r2, #64	@ 0x40
 80183bc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80183be:	687a      	ldr	r2, [r7, #4]
 80183c0:	23b8      	movs	r3, #184	@ 0xb8
 80183c2:	009b      	lsls	r3, r3, #2
 80183c4:	5cd3      	ldrb	r3, [r2, r3]
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	d109      	bne.n	80183de <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80183ca:	687a      	ldr	r2, [r7, #4]
 80183cc:	23b8      	movs	r3, #184	@ 0xb8
 80183ce:	009b      	lsls	r3, r3, #2
 80183d0:	2100      	movs	r1, #0
 80183d2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2100      	movs	r1, #0
 80183d8:	0018      	movs	r0, r3
 80183da:	f001 fc9f 	bl	8019d1c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	0018      	movs	r0, r3
 80183e2:	f009 fe7b 	bl	80220dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	2244      	movs	r2, #68	@ 0x44
 80183ec:	5a9b      	ldrh	r3, [r3, r2]
 80183ee:	b29a      	uxth	r2, r3
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	4957      	ldr	r1, [pc, #348]	@ (8018554 <HAL_PCD_IRQHandler+0x278>)
 80183f6:	400a      	ands	r2, r1
 80183f8:	b291      	uxth	r1, r2
 80183fa:	2244      	movs	r2, #68	@ 0x44
 80183fc:	5299      	strh	r1, [r3, r2]

    return;
 80183fe:	e0a0      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8018400:	68fa      	ldr	r2, [r7, #12]
 8018402:	2380      	movs	r3, #128	@ 0x80
 8018404:	011b      	lsls	r3, r3, #4
 8018406:	4013      	ands	r3, r2
 8018408:	d028      	beq.n	801845c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	2240      	movs	r2, #64	@ 0x40
 8018410:	5a9b      	ldrh	r3, [r3, r2]
 8018412:	b29a      	uxth	r2, r3
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2108      	movs	r1, #8
 801841a:	430a      	orrs	r2, r1
 801841c:	b291      	uxth	r1, r2
 801841e:	2240      	movs	r2, #64	@ 0x40
 8018420:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	2244      	movs	r2, #68	@ 0x44
 8018428:	5a9b      	ldrh	r3, [r3, r2]
 801842a:	b29a      	uxth	r2, r3
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	4949      	ldr	r1, [pc, #292]	@ (8018558 <HAL_PCD_IRQHandler+0x27c>)
 8018432:	400a      	ands	r2, r1
 8018434:	b291      	uxth	r1, r2
 8018436:	2244      	movs	r2, #68	@ 0x44
 8018438:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	2240      	movs	r2, #64	@ 0x40
 8018440:	5a9b      	ldrh	r3, [r3, r2]
 8018442:	b29a      	uxth	r2, r3
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	2104      	movs	r1, #4
 801844a:	430a      	orrs	r2, r1
 801844c:	b291      	uxth	r1, r2
 801844e:	2240      	movs	r2, #64	@ 0x40
 8018450:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	0018      	movs	r0, r3
 8018456:	f009 fe25 	bl	80220a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801845a:	e072      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	2280      	movs	r2, #128	@ 0x80
 8018460:	4013      	ands	r3, r2
 8018462:	d046      	beq.n	80184f2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2244      	movs	r2, #68	@ 0x44
 801846a:	5a9b      	ldrh	r3, [r3, r2]
 801846c:	b29a      	uxth	r2, r3
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	2180      	movs	r1, #128	@ 0x80
 8018474:	438a      	bics	r2, r1
 8018476:	b291      	uxth	r1, r2
 8018478:	2244      	movs	r2, #68	@ 0x44
 801847a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 801847c:	687a      	ldr	r2, [r7, #4]
 801847e:	23b8      	movs	r3, #184	@ 0xb8
 8018480:	009b      	lsls	r3, r3, #2
 8018482:	5cd3      	ldrb	r3, [r2, r3]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d12f      	bne.n	80184e8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	2240      	movs	r2, #64	@ 0x40
 801848e:	5a9b      	ldrh	r3, [r3, r2]
 8018490:	b29a      	uxth	r2, r3
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	2104      	movs	r1, #4
 8018498:	430a      	orrs	r2, r1
 801849a:	b291      	uxth	r1, r2
 801849c:	2240      	movs	r2, #64	@ 0x40
 801849e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	2240      	movs	r2, #64	@ 0x40
 80184a6:	5a9b      	ldrh	r3, [r3, r2]
 80184a8:	b29a      	uxth	r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	2108      	movs	r1, #8
 80184b0:	430a      	orrs	r2, r1
 80184b2:	b291      	uxth	r1, r2
 80184b4:	2240      	movs	r2, #64	@ 0x40
 80184b6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80184b8:	687a      	ldr	r2, [r7, #4]
 80184ba:	23b8      	movs	r3, #184	@ 0xb8
 80184bc:	009b      	lsls	r3, r3, #2
 80184be:	2101      	movs	r1, #1
 80184c0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	2254      	movs	r2, #84	@ 0x54
 80184c8:	5a9b      	ldrh	r3, [r3, r2]
 80184ca:	b29b      	uxth	r3, r3
 80184cc:	089b      	lsrs	r3, r3, #2
 80184ce:	223c      	movs	r2, #60	@ 0x3c
 80184d0:	4013      	ands	r3, r2
 80184d2:	0019      	movs	r1, r3
 80184d4:	687a      	ldr	r2, [r7, #4]
 80184d6:	23b9      	movs	r3, #185	@ 0xb9
 80184d8:	009b      	lsls	r3, r3, #2
 80184da:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	2101      	movs	r1, #1
 80184e0:	0018      	movs	r0, r3
 80184e2:	f001 fc1b 	bl	8019d1c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80184e6:	e02c      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	0018      	movs	r0, r3
 80184ec:	f009 fdda 	bl	80220a4 <HAL_PCD_SuspendCallback>
    return;
 80184f0:	e027      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80184f2:	68fa      	ldr	r2, [r7, #12]
 80184f4:	2380      	movs	r3, #128	@ 0x80
 80184f6:	009b      	lsls	r3, r3, #2
 80184f8:	4013      	ands	r3, r2
 80184fa:	d010      	beq.n	801851e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	2244      	movs	r2, #68	@ 0x44
 8018502:	5a9b      	ldrh	r3, [r3, r2]
 8018504:	b29a      	uxth	r2, r3
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	4914      	ldr	r1, [pc, #80]	@ (801855c <HAL_PCD_IRQHandler+0x280>)
 801850c:	400a      	ands	r2, r1
 801850e:	b291      	uxth	r1, r2
 8018510:	2244      	movs	r2, #68	@ 0x44
 8018512:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	0018      	movs	r0, r3
 8018518:	f009 fd90 	bl	802203c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801851c:	e011      	b.n	8018542 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801851e:	68fa      	ldr	r2, [r7, #12]
 8018520:	2380      	movs	r3, #128	@ 0x80
 8018522:	005b      	lsls	r3, r3, #1
 8018524:	4013      	ands	r3, r2
 8018526:	d00c      	beq.n	8018542 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	2244      	movs	r2, #68	@ 0x44
 801852e:	5a9b      	ldrh	r3, [r3, r2]
 8018530:	b29a      	uxth	r2, r3
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	490a      	ldr	r1, [pc, #40]	@ (8018560 <HAL_PCD_IRQHandler+0x284>)
 8018538:	400a      	ands	r2, r1
 801853a:	b291      	uxth	r1, r2
 801853c:	2244      	movs	r2, #68	@ 0x44
 801853e:	5299      	strh	r1, [r3, r2]

    return;
 8018540:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018542:	46bd      	mov	sp, r7
 8018544:	b004      	add	sp, #16
 8018546:	bd80      	pop	{r7, pc}
 8018548:	fffffbff 	.word	0xfffffbff
 801854c:	ffffbfff 	.word	0xffffbfff
 8018550:	ffffdfff 	.word	0xffffdfff
 8018554:	ffffefff 	.word	0xffffefff
 8018558:	fffff7ff 	.word	0xfffff7ff
 801855c:	fffffdff 	.word	0xfffffdff
 8018560:	fffffeff 	.word	0xfffffeff

08018564 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b082      	sub	sp, #8
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
 801856c:	000a      	movs	r2, r1
 801856e:	1cfb      	adds	r3, r7, #3
 8018570:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8018572:	687a      	ldr	r2, [r7, #4]
 8018574:	23aa      	movs	r3, #170	@ 0xaa
 8018576:	009b      	lsls	r3, r3, #2
 8018578:	5cd3      	ldrb	r3, [r2, r3]
 801857a:	2b01      	cmp	r3, #1
 801857c:	d101      	bne.n	8018582 <HAL_PCD_SetAddress+0x1e>
 801857e:	2302      	movs	r3, #2
 8018580:	e017      	b.n	80185b2 <HAL_PCD_SetAddress+0x4e>
 8018582:	687a      	ldr	r2, [r7, #4]
 8018584:	23aa      	movs	r3, #170	@ 0xaa
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	2101      	movs	r1, #1
 801858a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	1cfa      	adds	r2, r7, #3
 8018590:	2124      	movs	r1, #36	@ 0x24
 8018592:	7812      	ldrb	r2, [r2, #0]
 8018594:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	681a      	ldr	r2, [r3, #0]
 801859a:	1cfb      	adds	r3, r7, #3
 801859c:	781b      	ldrb	r3, [r3, #0]
 801859e:	0019      	movs	r1, r3
 80185a0:	0010      	movs	r0, r2
 80185a2:	f007 fc71 	bl	801fe88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	23aa      	movs	r3, #170	@ 0xaa
 80185aa:	009b      	lsls	r3, r3, #2
 80185ac:	2100      	movs	r1, #0
 80185ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80185b0:	2300      	movs	r3, #0
}
 80185b2:	0018      	movs	r0, r3
 80185b4:	46bd      	mov	sp, r7
 80185b6:	b002      	add	sp, #8
 80185b8:	bd80      	pop	{r7, pc}

080185ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80185ba:	b590      	push	{r4, r7, lr}
 80185bc:	b085      	sub	sp, #20
 80185be:	af00      	add	r7, sp, #0
 80185c0:	6078      	str	r0, [r7, #4]
 80185c2:	000c      	movs	r4, r1
 80185c4:	0010      	movs	r0, r2
 80185c6:	0019      	movs	r1, r3
 80185c8:	1cfb      	adds	r3, r7, #3
 80185ca:	1c22      	adds	r2, r4, #0
 80185cc:	701a      	strb	r2, [r3, #0]
 80185ce:	003b      	movs	r3, r7
 80185d0:	1c02      	adds	r2, r0, #0
 80185d2:	801a      	strh	r2, [r3, #0]
 80185d4:	1cbb      	adds	r3, r7, #2
 80185d6:	1c0a      	adds	r2, r1, #0
 80185d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80185da:	230b      	movs	r3, #11
 80185dc:	18fb      	adds	r3, r7, r3
 80185de:	2200      	movs	r2, #0
 80185e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80185e2:	1cfb      	adds	r3, r7, #3
 80185e4:	781b      	ldrb	r3, [r3, #0]
 80185e6:	b25b      	sxtb	r3, r3
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	da0f      	bge.n	801860c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80185ec:	1cfb      	adds	r3, r7, #3
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	2207      	movs	r2, #7
 80185f2:	4013      	ands	r3, r2
 80185f4:	1c5a      	adds	r2, r3, #1
 80185f6:	0013      	movs	r3, r2
 80185f8:	009b      	lsls	r3, r3, #2
 80185fa:	189b      	adds	r3, r3, r2
 80185fc:	00db      	lsls	r3, r3, #3
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	18d3      	adds	r3, r2, r3
 8018602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	2201      	movs	r2, #1
 8018608:	705a      	strb	r2, [r3, #1]
 801860a:	e00f      	b.n	801862c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801860c:	1cfb      	adds	r3, r7, #3
 801860e:	781b      	ldrb	r3, [r3, #0]
 8018610:	2207      	movs	r2, #7
 8018612:	401a      	ands	r2, r3
 8018614:	0013      	movs	r3, r2
 8018616:	009b      	lsls	r3, r3, #2
 8018618:	189b      	adds	r3, r3, r2
 801861a:	00db      	lsls	r3, r3, #3
 801861c:	3369      	adds	r3, #105	@ 0x69
 801861e:	33ff      	adds	r3, #255	@ 0xff
 8018620:	687a      	ldr	r2, [r7, #4]
 8018622:	18d3      	adds	r3, r2, r3
 8018624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018626:	68fb      	ldr	r3, [r7, #12]
 8018628:	2200      	movs	r2, #0
 801862a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801862c:	1cfb      	adds	r3, r7, #3
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	2207      	movs	r2, #7
 8018632:	4013      	ands	r3, r2
 8018634:	b2da      	uxtb	r2, r3
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801863a:	003b      	movs	r3, r7
 801863c:	881a      	ldrh	r2, [r3, #0]
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	1cba      	adds	r2, r7, #2
 8018646:	7812      	ldrb	r2, [r2, #0]
 8018648:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801864a:	1cbb      	adds	r3, r7, #2
 801864c:	781b      	ldrb	r3, [r3, #0]
 801864e:	2b02      	cmp	r3, #2
 8018650:	d102      	bne.n	8018658 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	2200      	movs	r2, #0
 8018656:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	23aa      	movs	r3, #170	@ 0xaa
 801865c:	009b      	lsls	r3, r3, #2
 801865e:	5cd3      	ldrb	r3, [r2, r3]
 8018660:	2b01      	cmp	r3, #1
 8018662:	d101      	bne.n	8018668 <HAL_PCD_EP_Open+0xae>
 8018664:	2302      	movs	r3, #2
 8018666:	e013      	b.n	8018690 <HAL_PCD_EP_Open+0xd6>
 8018668:	687a      	ldr	r2, [r7, #4]
 801866a:	23aa      	movs	r3, #170	@ 0xaa
 801866c:	009b      	lsls	r3, r3, #2
 801866e:	2101      	movs	r1, #1
 8018670:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	68fa      	ldr	r2, [r7, #12]
 8018678:	0011      	movs	r1, r2
 801867a:	0018      	movs	r0, r3
 801867c:	f005 fc68 	bl	801df50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018680:	687a      	ldr	r2, [r7, #4]
 8018682:	23aa      	movs	r3, #170	@ 0xaa
 8018684:	009b      	lsls	r3, r3, #2
 8018686:	2100      	movs	r1, #0
 8018688:	54d1      	strb	r1, [r2, r3]

  return ret;
 801868a:	230b      	movs	r3, #11
 801868c:	18fb      	adds	r3, r7, r3
 801868e:	781b      	ldrb	r3, [r3, #0]
}
 8018690:	0018      	movs	r0, r3
 8018692:	46bd      	mov	sp, r7
 8018694:	b005      	add	sp, #20
 8018696:	bd90      	pop	{r4, r7, pc}

08018698 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b084      	sub	sp, #16
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
 80186a0:	000a      	movs	r2, r1
 80186a2:	1cfb      	adds	r3, r7, #3
 80186a4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80186a6:	1cfb      	adds	r3, r7, #3
 80186a8:	781b      	ldrb	r3, [r3, #0]
 80186aa:	b25b      	sxtb	r3, r3
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	da0f      	bge.n	80186d0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80186b0:	1cfb      	adds	r3, r7, #3
 80186b2:	781b      	ldrb	r3, [r3, #0]
 80186b4:	2207      	movs	r2, #7
 80186b6:	4013      	ands	r3, r2
 80186b8:	1c5a      	adds	r2, r3, #1
 80186ba:	0013      	movs	r3, r2
 80186bc:	009b      	lsls	r3, r3, #2
 80186be:	189b      	adds	r3, r3, r2
 80186c0:	00db      	lsls	r3, r3, #3
 80186c2:	687a      	ldr	r2, [r7, #4]
 80186c4:	18d3      	adds	r3, r2, r3
 80186c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	2201      	movs	r2, #1
 80186cc:	705a      	strb	r2, [r3, #1]
 80186ce:	e00f      	b.n	80186f0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80186d0:	1cfb      	adds	r3, r7, #3
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	2207      	movs	r2, #7
 80186d6:	401a      	ands	r2, r3
 80186d8:	0013      	movs	r3, r2
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	189b      	adds	r3, r3, r2
 80186de:	00db      	lsls	r3, r3, #3
 80186e0:	3369      	adds	r3, #105	@ 0x69
 80186e2:	33ff      	adds	r3, #255	@ 0xff
 80186e4:	687a      	ldr	r2, [r7, #4]
 80186e6:	18d3      	adds	r3, r2, r3
 80186e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	2200      	movs	r2, #0
 80186ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80186f0:	1cfb      	adds	r3, r7, #3
 80186f2:	781b      	ldrb	r3, [r3, #0]
 80186f4:	2207      	movs	r2, #7
 80186f6:	4013      	ands	r3, r2
 80186f8:	b2da      	uxtb	r2, r3
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80186fe:	687a      	ldr	r2, [r7, #4]
 8018700:	23aa      	movs	r3, #170	@ 0xaa
 8018702:	009b      	lsls	r3, r3, #2
 8018704:	5cd3      	ldrb	r3, [r2, r3]
 8018706:	2b01      	cmp	r3, #1
 8018708:	d101      	bne.n	801870e <HAL_PCD_EP_Close+0x76>
 801870a:	2302      	movs	r3, #2
 801870c:	e011      	b.n	8018732 <HAL_PCD_EP_Close+0x9a>
 801870e:	687a      	ldr	r2, [r7, #4]
 8018710:	23aa      	movs	r3, #170	@ 0xaa
 8018712:	009b      	lsls	r3, r3, #2
 8018714:	2101      	movs	r1, #1
 8018716:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	68fa      	ldr	r2, [r7, #12]
 801871e:	0011      	movs	r1, r2
 8018720:	0018      	movs	r0, r3
 8018722:	f005 ffb7 	bl	801e694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	23aa      	movs	r3, #170	@ 0xaa
 801872a:	009b      	lsls	r3, r3, #2
 801872c:	2100      	movs	r1, #0
 801872e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8018730:	2300      	movs	r3, #0
}
 8018732:	0018      	movs	r0, r3
 8018734:	46bd      	mov	sp, r7
 8018736:	b004      	add	sp, #16
 8018738:	bd80      	pop	{r7, pc}

0801873a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801873a:	b580      	push	{r7, lr}
 801873c:	b086      	sub	sp, #24
 801873e:	af00      	add	r7, sp, #0
 8018740:	60f8      	str	r0, [r7, #12]
 8018742:	607a      	str	r2, [r7, #4]
 8018744:	603b      	str	r3, [r7, #0]
 8018746:	200b      	movs	r0, #11
 8018748:	183b      	adds	r3, r7, r0
 801874a:	1c0a      	adds	r2, r1, #0
 801874c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801874e:	0001      	movs	r1, r0
 8018750:	187b      	adds	r3, r7, r1
 8018752:	781b      	ldrb	r3, [r3, #0]
 8018754:	2207      	movs	r2, #7
 8018756:	401a      	ands	r2, r3
 8018758:	0013      	movs	r3, r2
 801875a:	009b      	lsls	r3, r3, #2
 801875c:	189b      	adds	r3, r3, r2
 801875e:	00db      	lsls	r3, r3, #3
 8018760:	3369      	adds	r3, #105	@ 0x69
 8018762:	33ff      	adds	r3, #255	@ 0xff
 8018764:	68fa      	ldr	r2, [r7, #12]
 8018766:	18d3      	adds	r3, r2, r3
 8018768:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801876a:	697b      	ldr	r3, [r7, #20]
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	683a      	ldr	r2, [r7, #0]
 8018774:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	2200      	movs	r2, #0
 801877a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	2200      	movs	r2, #0
 8018780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018782:	187b      	adds	r3, r7, r1
 8018784:	781b      	ldrb	r3, [r3, #0]
 8018786:	2207      	movs	r2, #7
 8018788:	4013      	ands	r3, r2
 801878a:	b2da      	uxtb	r2, r3
 801878c:	697b      	ldr	r3, [r7, #20]
 801878e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	697a      	ldr	r2, [r7, #20]
 8018796:	0011      	movs	r1, r2
 8018798:	0018      	movs	r0, r3
 801879a:	f006 f93b 	bl	801ea14 <USB_EPStartXfer>

  return HAL_OK;
 801879e:	2300      	movs	r3, #0
}
 80187a0:	0018      	movs	r0, r3
 80187a2:	46bd      	mov	sp, r7
 80187a4:	b006      	add	sp, #24
 80187a6:	bd80      	pop	{r7, pc}

080187a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
 80187b0:	000a      	movs	r2, r1
 80187b2:	1cfb      	adds	r3, r7, #3
 80187b4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80187b6:	1cfb      	adds	r3, r7, #3
 80187b8:	781b      	ldrb	r3, [r3, #0]
 80187ba:	2207      	movs	r2, #7
 80187bc:	401a      	ands	r2, r3
 80187be:	6878      	ldr	r0, [r7, #4]
 80187c0:	23c2      	movs	r3, #194	@ 0xc2
 80187c2:	0059      	lsls	r1, r3, #1
 80187c4:	0013      	movs	r3, r2
 80187c6:	009b      	lsls	r3, r3, #2
 80187c8:	189b      	adds	r3, r3, r2
 80187ca:	00db      	lsls	r3, r3, #3
 80187cc:	18c3      	adds	r3, r0, r3
 80187ce:	185b      	adds	r3, r3, r1
 80187d0:	681b      	ldr	r3, [r3, #0]
}
 80187d2:	0018      	movs	r0, r3
 80187d4:	46bd      	mov	sp, r7
 80187d6:	b002      	add	sp, #8
 80187d8:	bd80      	pop	{r7, pc}

080187da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80187da:	b580      	push	{r7, lr}
 80187dc:	b086      	sub	sp, #24
 80187de:	af00      	add	r7, sp, #0
 80187e0:	60f8      	str	r0, [r7, #12]
 80187e2:	607a      	str	r2, [r7, #4]
 80187e4:	603b      	str	r3, [r7, #0]
 80187e6:	200b      	movs	r0, #11
 80187e8:	183b      	adds	r3, r7, r0
 80187ea:	1c0a      	adds	r2, r1, #0
 80187ec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80187ee:	183b      	adds	r3, r7, r0
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	2207      	movs	r2, #7
 80187f4:	4013      	ands	r3, r2
 80187f6:	1c5a      	adds	r2, r3, #1
 80187f8:	0013      	movs	r3, r2
 80187fa:	009b      	lsls	r3, r3, #2
 80187fc:	189b      	adds	r3, r3, r2
 80187fe:	00db      	lsls	r3, r3, #3
 8018800:	68fa      	ldr	r2, [r7, #12]
 8018802:	18d3      	adds	r3, r2, r3
 8018804:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018806:	697b      	ldr	r3, [r7, #20]
 8018808:	687a      	ldr	r2, [r7, #4]
 801880a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801880c:	697b      	ldr	r3, [r7, #20]
 801880e:	683a      	ldr	r2, [r7, #0]
 8018810:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8018812:	697b      	ldr	r3, [r7, #20]
 8018814:	2224      	movs	r2, #36	@ 0x24
 8018816:	2101      	movs	r1, #1
 8018818:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801881a:	697b      	ldr	r3, [r7, #20]
 801881c:	683a      	ldr	r2, [r7, #0]
 801881e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8018820:	697b      	ldr	r3, [r7, #20]
 8018822:	2200      	movs	r2, #0
 8018824:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8018826:	697b      	ldr	r3, [r7, #20]
 8018828:	2201      	movs	r2, #1
 801882a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801882c:	183b      	adds	r3, r7, r0
 801882e:	781b      	ldrb	r3, [r3, #0]
 8018830:	2207      	movs	r2, #7
 8018832:	4013      	ands	r3, r2
 8018834:	b2da      	uxtb	r2, r3
 8018836:	697b      	ldr	r3, [r7, #20]
 8018838:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	697a      	ldr	r2, [r7, #20]
 8018840:	0011      	movs	r1, r2
 8018842:	0018      	movs	r0, r3
 8018844:	f006 f8e6 	bl	801ea14 <USB_EPStartXfer>

  return HAL_OK;
 8018848:	2300      	movs	r3, #0
}
 801884a:	0018      	movs	r0, r3
 801884c:	46bd      	mov	sp, r7
 801884e:	b006      	add	sp, #24
 8018850:	bd80      	pop	{r7, pc}

08018852 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018852:	b580      	push	{r7, lr}
 8018854:	b084      	sub	sp, #16
 8018856:	af00      	add	r7, sp, #0
 8018858:	6078      	str	r0, [r7, #4]
 801885a:	000a      	movs	r2, r1
 801885c:	1cfb      	adds	r3, r7, #3
 801885e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8018860:	1cfb      	adds	r3, r7, #3
 8018862:	781b      	ldrb	r3, [r3, #0]
 8018864:	2207      	movs	r2, #7
 8018866:	401a      	ands	r2, r3
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	429a      	cmp	r2, r3
 801886e:	d901      	bls.n	8018874 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8018870:	2301      	movs	r3, #1
 8018872:	e046      	b.n	8018902 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018874:	1cfb      	adds	r3, r7, #3
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	b25b      	sxtb	r3, r3
 801887a:	2b00      	cmp	r3, #0
 801887c:	da0f      	bge.n	801889e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801887e:	1cfb      	adds	r3, r7, #3
 8018880:	781b      	ldrb	r3, [r3, #0]
 8018882:	2207      	movs	r2, #7
 8018884:	4013      	ands	r3, r2
 8018886:	1c5a      	adds	r2, r3, #1
 8018888:	0013      	movs	r3, r2
 801888a:	009b      	lsls	r3, r3, #2
 801888c:	189b      	adds	r3, r3, r2
 801888e:	00db      	lsls	r3, r3, #3
 8018890:	687a      	ldr	r2, [r7, #4]
 8018892:	18d3      	adds	r3, r2, r3
 8018894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	2201      	movs	r2, #1
 801889a:	705a      	strb	r2, [r3, #1]
 801889c:	e00d      	b.n	80188ba <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801889e:	1cfb      	adds	r3, r7, #3
 80188a0:	781a      	ldrb	r2, [r3, #0]
 80188a2:	0013      	movs	r3, r2
 80188a4:	009b      	lsls	r3, r3, #2
 80188a6:	189b      	adds	r3, r3, r2
 80188a8:	00db      	lsls	r3, r3, #3
 80188aa:	3369      	adds	r3, #105	@ 0x69
 80188ac:	33ff      	adds	r3, #255	@ 0xff
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	18d3      	adds	r3, r2, r3
 80188b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	2200      	movs	r2, #0
 80188b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80188ba:	68fb      	ldr	r3, [r7, #12]
 80188bc:	2201      	movs	r2, #1
 80188be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80188c0:	1cfb      	adds	r3, r7, #3
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	2207      	movs	r2, #7
 80188c6:	4013      	ands	r3, r2
 80188c8:	b2da      	uxtb	r2, r3
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80188ce:	687a      	ldr	r2, [r7, #4]
 80188d0:	23aa      	movs	r3, #170	@ 0xaa
 80188d2:	009b      	lsls	r3, r3, #2
 80188d4:	5cd3      	ldrb	r3, [r2, r3]
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	d101      	bne.n	80188de <HAL_PCD_EP_SetStall+0x8c>
 80188da:	2302      	movs	r3, #2
 80188dc:	e011      	b.n	8018902 <HAL_PCD_EP_SetStall+0xb0>
 80188de:	687a      	ldr	r2, [r7, #4]
 80188e0:	23aa      	movs	r3, #170	@ 0xaa
 80188e2:	009b      	lsls	r3, r3, #2
 80188e4:	2101      	movs	r1, #1
 80188e6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	68fa      	ldr	r2, [r7, #12]
 80188ee:	0011      	movs	r1, r2
 80188f0:	0018      	movs	r0, r3
 80188f2:	f007 f9c7 	bl	801fc84 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80188f6:	687a      	ldr	r2, [r7, #4]
 80188f8:	23aa      	movs	r3, #170	@ 0xaa
 80188fa:	009b      	lsls	r3, r3, #2
 80188fc:	2100      	movs	r1, #0
 80188fe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018900:	2300      	movs	r3, #0
}
 8018902:	0018      	movs	r0, r3
 8018904:	46bd      	mov	sp, r7
 8018906:	b004      	add	sp, #16
 8018908:	bd80      	pop	{r7, pc}

0801890a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801890a:	b580      	push	{r7, lr}
 801890c:	b084      	sub	sp, #16
 801890e:	af00      	add	r7, sp, #0
 8018910:	6078      	str	r0, [r7, #4]
 8018912:	000a      	movs	r2, r1
 8018914:	1cfb      	adds	r3, r7, #3
 8018916:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018918:	1cfb      	adds	r3, r7, #3
 801891a:	781b      	ldrb	r3, [r3, #0]
 801891c:	220f      	movs	r2, #15
 801891e:	401a      	ands	r2, r3
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	685b      	ldr	r3, [r3, #4]
 8018924:	429a      	cmp	r2, r3
 8018926:	d901      	bls.n	801892c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8018928:	2301      	movs	r3, #1
 801892a:	e048      	b.n	80189be <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801892c:	1cfb      	adds	r3, r7, #3
 801892e:	781b      	ldrb	r3, [r3, #0]
 8018930:	b25b      	sxtb	r3, r3
 8018932:	2b00      	cmp	r3, #0
 8018934:	da0f      	bge.n	8018956 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018936:	1cfb      	adds	r3, r7, #3
 8018938:	781b      	ldrb	r3, [r3, #0]
 801893a:	2207      	movs	r2, #7
 801893c:	4013      	ands	r3, r2
 801893e:	1c5a      	adds	r2, r3, #1
 8018940:	0013      	movs	r3, r2
 8018942:	009b      	lsls	r3, r3, #2
 8018944:	189b      	adds	r3, r3, r2
 8018946:	00db      	lsls	r3, r3, #3
 8018948:	687a      	ldr	r2, [r7, #4]
 801894a:	18d3      	adds	r3, r2, r3
 801894c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801894e:	68fb      	ldr	r3, [r7, #12]
 8018950:	2201      	movs	r2, #1
 8018952:	705a      	strb	r2, [r3, #1]
 8018954:	e00f      	b.n	8018976 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018956:	1cfb      	adds	r3, r7, #3
 8018958:	781b      	ldrb	r3, [r3, #0]
 801895a:	2207      	movs	r2, #7
 801895c:	401a      	ands	r2, r3
 801895e:	0013      	movs	r3, r2
 8018960:	009b      	lsls	r3, r3, #2
 8018962:	189b      	adds	r3, r3, r2
 8018964:	00db      	lsls	r3, r3, #3
 8018966:	3369      	adds	r3, #105	@ 0x69
 8018968:	33ff      	adds	r3, #255	@ 0xff
 801896a:	687a      	ldr	r2, [r7, #4]
 801896c:	18d3      	adds	r3, r2, r3
 801896e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	2200      	movs	r2, #0
 8018974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	2200      	movs	r2, #0
 801897a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801897c:	1cfb      	adds	r3, r7, #3
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	2207      	movs	r2, #7
 8018982:	4013      	ands	r3, r2
 8018984:	b2da      	uxtb	r2, r3
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801898a:	687a      	ldr	r2, [r7, #4]
 801898c:	23aa      	movs	r3, #170	@ 0xaa
 801898e:	009b      	lsls	r3, r3, #2
 8018990:	5cd3      	ldrb	r3, [r2, r3]
 8018992:	2b01      	cmp	r3, #1
 8018994:	d101      	bne.n	801899a <HAL_PCD_EP_ClrStall+0x90>
 8018996:	2302      	movs	r3, #2
 8018998:	e011      	b.n	80189be <HAL_PCD_EP_ClrStall+0xb4>
 801899a:	687a      	ldr	r2, [r7, #4]
 801899c:	23aa      	movs	r3, #170	@ 0xaa
 801899e:	009b      	lsls	r3, r3, #2
 80189a0:	2101      	movs	r1, #1
 80189a2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	68fa      	ldr	r2, [r7, #12]
 80189aa:	0011      	movs	r1, r2
 80189ac:	0018      	movs	r0, r3
 80189ae:	f007 f9b9 	bl	801fd24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80189b2:	687a      	ldr	r2, [r7, #4]
 80189b4:	23aa      	movs	r3, #170	@ 0xaa
 80189b6:	009b      	lsls	r3, r3, #2
 80189b8:	2100      	movs	r1, #0
 80189ba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80189bc:	2300      	movs	r3, #0
}
 80189be:	0018      	movs	r0, r3
 80189c0:	46bd      	mov	sp, r7
 80189c2:	b004      	add	sp, #16
 80189c4:	bd80      	pop	{r7, pc}
	...

080189c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80189c8:	b5b0      	push	{r4, r5, r7, lr}
 80189ca:	b096      	sub	sp, #88	@ 0x58
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80189d0:	f000 fbec 	bl	80191ac <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681a      	ldr	r2, [r3, #0]
 80189d8:	204e      	movs	r0, #78	@ 0x4e
 80189da:	183b      	adds	r3, r7, r0
 80189dc:	2144      	movs	r1, #68	@ 0x44
 80189de:	5a52      	ldrh	r2, [r2, r1]
 80189e0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80189e2:	183b      	adds	r3, r7, r0
 80189e4:	881b      	ldrh	r3, [r3, #0]
 80189e6:	b2da      	uxtb	r2, r3
 80189e8:	244d      	movs	r4, #77	@ 0x4d
 80189ea:	193b      	adds	r3, r7, r4
 80189ec:	210f      	movs	r1, #15
 80189ee:	400a      	ands	r2, r1
 80189f0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80189f2:	193b      	adds	r3, r7, r4
 80189f4:	781b      	ldrb	r3, [r3, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d000      	beq.n	80189fc <PCD_EP_ISR_Handler+0x34>
 80189fa:	e18f      	b.n	8018d1c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80189fc:	183b      	adds	r3, r7, r0
 80189fe:	881b      	ldrh	r3, [r3, #0]
 8018a00:	2210      	movs	r2, #16
 8018a02:	4013      	ands	r3, r2
 8018a04:	d155      	bne.n	8018ab2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	881b      	ldrh	r3, [r3, #0]
 8018a0c:	b29a      	uxth	r2, r3
 8018a0e:	200e      	movs	r0, #14
 8018a10:	183b      	adds	r3, r7, r0
 8018a12:	49bb      	ldr	r1, [pc, #748]	@ (8018d00 <PCD_EP_ISR_Handler+0x338>)
 8018a14:	400a      	ands	r2, r1
 8018a16:	801a      	strh	r2, [r3, #0]
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	183a      	adds	r2, r7, r0
 8018a1e:	8812      	ldrh	r2, [r2, #0]
 8018a20:	49b8      	ldr	r1, [pc, #736]	@ (8018d04 <PCD_EP_ISR_Handler+0x33c>)
 8018a22:	430a      	orrs	r2, r1
 8018a24:	b292      	uxth	r2, r2
 8018a26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	3328      	adds	r3, #40	@ 0x28
 8018a2c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	2250      	movs	r2, #80	@ 0x50
 8018a34:	5a9b      	ldrh	r3, [r3, r2]
 8018a36:	b29b      	uxth	r3, r3
 8018a38:	001a      	movs	r2, r3
 8018a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	00db      	lsls	r3, r3, #3
 8018a40:	18d2      	adds	r2, r2, r3
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	18d3      	adds	r3, r2, r3
 8018a48:	4aaf      	ldr	r2, [pc, #700]	@ (8018d08 <PCD_EP_ISR_Handler+0x340>)
 8018a4a:	4694      	mov	ip, r2
 8018a4c:	4463      	add	r3, ip
 8018a4e:	881b      	ldrh	r3, [r3, #0]
 8018a50:	059b      	lsls	r3, r3, #22
 8018a52:	0d9a      	lsrs	r2, r3, #22
 8018a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8018a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a5a:	695a      	ldr	r2, [r3, #20]
 8018a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a5e:	69db      	ldr	r3, [r3, #28]
 8018a60:	18d2      	adds	r2, r2, r3
 8018a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a64:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	2100      	movs	r1, #0
 8018a6a:	0018      	movs	r0, r3
 8018a6c:	f009 fac8 	bl	8022000 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	2224      	movs	r2, #36	@ 0x24
 8018a74:	5c9b      	ldrb	r3, [r3, r2]
 8018a76:	b2db      	uxtb	r3, r3
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d101      	bne.n	8018a80 <PCD_EP_ISR_Handler+0xb8>
 8018a7c:	f000 fb96 	bl	80191ac <PCD_EP_ISR_Handler+0x7e4>
 8018a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018a82:	699b      	ldr	r3, [r3, #24]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d001      	beq.n	8018a8c <PCD_EP_ISR_Handler+0xc4>
 8018a88:	f000 fb90 	bl	80191ac <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	2224      	movs	r2, #36	@ 0x24
 8018a90:	5c9b      	ldrb	r3, [r3, r2]
 8018a92:	b2db      	uxtb	r3, r3
 8018a94:	2280      	movs	r2, #128	@ 0x80
 8018a96:	4252      	negs	r2, r2
 8018a98:	4313      	orrs	r3, r2
 8018a9a:	b2da      	uxtb	r2, r3
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	0011      	movs	r1, r2
 8018aa2:	224c      	movs	r2, #76	@ 0x4c
 8018aa4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	2224      	movs	r2, #36	@ 0x24
 8018aaa:	2100      	movs	r1, #0
 8018aac:	5499      	strb	r1, [r3, r2]
 8018aae:	f000 fb7d 	bl	80191ac <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	3369      	adds	r3, #105	@ 0x69
 8018ab6:	33ff      	adds	r3, #255	@ 0xff
 8018ab8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681a      	ldr	r2, [r3, #0]
 8018abe:	214a      	movs	r1, #74	@ 0x4a
 8018ac0:	187b      	adds	r3, r7, r1
 8018ac2:	8812      	ldrh	r2, [r2, #0]
 8018ac4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8018ac6:	187b      	adds	r3, r7, r1
 8018ac8:	881a      	ldrh	r2, [r3, #0]
 8018aca:	2380      	movs	r3, #128	@ 0x80
 8018acc:	011b      	lsls	r3, r3, #4
 8018ace:	4013      	ands	r3, r2
 8018ad0:	d037      	beq.n	8018b42 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	2250      	movs	r2, #80	@ 0x50
 8018ad8:	5a9b      	ldrh	r3, [r3, r2]
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	001a      	movs	r2, r3
 8018ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ae0:	781b      	ldrb	r3, [r3, #0]
 8018ae2:	00db      	lsls	r3, r3, #3
 8018ae4:	18d2      	adds	r2, r2, r3
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	18d3      	adds	r3, r2, r3
 8018aec:	4a87      	ldr	r2, [pc, #540]	@ (8018d0c <PCD_EP_ISR_Handler+0x344>)
 8018aee:	4694      	mov	ip, r2
 8018af0:	4463      	add	r3, ip
 8018af2:	881b      	ldrh	r3, [r3, #0]
 8018af4:	059b      	lsls	r3, r3, #22
 8018af6:	0d9a      	lsrs	r2, r3, #22
 8018af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018afa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6818      	ldr	r0, [r3, #0]
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	22ac      	movs	r2, #172	@ 0xac
 8018b04:	0092      	lsls	r2, r2, #2
 8018b06:	1899      	adds	r1, r3, r2
 8018b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b0a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8018b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b0e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	f007 fa3a 	bl	801ff8a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	881b      	ldrh	r3, [r3, #0]
 8018b1c:	b29a      	uxth	r2, r3
 8018b1e:	2010      	movs	r0, #16
 8018b20:	183b      	adds	r3, r7, r0
 8018b22:	497b      	ldr	r1, [pc, #492]	@ (8018d10 <PCD_EP_ISR_Handler+0x348>)
 8018b24:	400a      	ands	r2, r1
 8018b26:	801a      	strh	r2, [r3, #0]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	183a      	adds	r2, r7, r0
 8018b2e:	8812      	ldrh	r2, [r2, #0]
 8018b30:	2180      	movs	r1, #128	@ 0x80
 8018b32:	430a      	orrs	r2, r1
 8018b34:	b292      	uxth	r2, r2
 8018b36:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	0018      	movs	r0, r3
 8018b3c:	f009 fa2a 	bl	8021f94 <HAL_PCD_SetupStageCallback>
 8018b40:	e334      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8018b42:	234a      	movs	r3, #74	@ 0x4a
 8018b44:	18fb      	adds	r3, r7, r3
 8018b46:	2200      	movs	r2, #0
 8018b48:	5e9b      	ldrsh	r3, [r3, r2]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	db00      	blt.n	8018b50 <PCD_EP_ISR_Handler+0x188>
 8018b4e:	e32d      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	881b      	ldrh	r3, [r3, #0]
 8018b56:	b29a      	uxth	r2, r3
 8018b58:	201e      	movs	r0, #30
 8018b5a:	183b      	adds	r3, r7, r0
 8018b5c:	496c      	ldr	r1, [pc, #432]	@ (8018d10 <PCD_EP_ISR_Handler+0x348>)
 8018b5e:	400a      	ands	r2, r1
 8018b60:	801a      	strh	r2, [r3, #0]
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	183a      	adds	r2, r7, r0
 8018b68:	8812      	ldrh	r2, [r2, #0]
 8018b6a:	2180      	movs	r1, #128	@ 0x80
 8018b6c:	430a      	orrs	r2, r1
 8018b6e:	b292      	uxth	r2, r2
 8018b70:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	2250      	movs	r2, #80	@ 0x50
 8018b78:	5a9b      	ldrh	r3, [r3, r2]
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	001a      	movs	r2, r3
 8018b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	00db      	lsls	r3, r3, #3
 8018b84:	18d2      	adds	r2, r2, r3
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	18d3      	adds	r3, r2, r3
 8018b8c:	4a5f      	ldr	r2, [pc, #380]	@ (8018d0c <PCD_EP_ISR_Handler+0x344>)
 8018b8e:	4694      	mov	ip, r2
 8018b90:	4463      	add	r3, ip
 8018b92:	881b      	ldrh	r3, [r3, #0]
 8018b94:	059b      	lsls	r3, r3, #22
 8018b96:	0d9a      	lsrs	r2, r3, #22
 8018b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b9a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8018b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b9e:	69db      	ldr	r3, [r3, #28]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d01a      	beq.n	8018bda <PCD_EP_ISR_Handler+0x212>
 8018ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ba6:	695b      	ldr	r3, [r3, #20]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d016      	beq.n	8018bda <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	6818      	ldr	r0, [r3, #0]
 8018bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bb2:	6959      	ldr	r1, [r3, #20]
 8018bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bb6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8018bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	f007 f9e4 	bl	801ff8a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8018bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bc4:	695a      	ldr	r2, [r3, #20]
 8018bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bc8:	69db      	ldr	r3, [r3, #28]
 8018bca:	18d2      	adds	r2, r2, r3
 8018bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018bce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	2100      	movs	r1, #0
 8018bd4:	0018      	movs	r0, r3
 8018bd6:	f009 f9f2 	bl	8021fbe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681a      	ldr	r2, [r3, #0]
 8018bde:	214a      	movs	r1, #74	@ 0x4a
 8018be0:	187b      	adds	r3, r7, r1
 8018be2:	8812      	ldrh	r2, [r2, #0]
 8018be4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8018be6:	187b      	adds	r3, r7, r1
 8018be8:	881a      	ldrh	r2, [r3, #0]
 8018bea:	2380      	movs	r3, #128	@ 0x80
 8018bec:	011b      	lsls	r3, r3, #4
 8018bee:	4013      	ands	r3, r2
 8018bf0:	d000      	beq.n	8018bf4 <PCD_EP_ISR_Handler+0x22c>
 8018bf2:	e2db      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
 8018bf4:	187b      	adds	r3, r7, r1
 8018bf6:	881a      	ldrh	r2, [r3, #0]
 8018bf8:	23c0      	movs	r3, #192	@ 0xc0
 8018bfa:	019b      	lsls	r3, r3, #6
 8018bfc:	401a      	ands	r2, r3
 8018bfe:	23c0      	movs	r3, #192	@ 0xc0
 8018c00:	019b      	lsls	r3, r3, #6
 8018c02:	429a      	cmp	r2, r3
 8018c04:	d100      	bne.n	8018c08 <PCD_EP_ISR_Handler+0x240>
 8018c06:	e2d1      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	61bb      	str	r3, [r7, #24]
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	2250      	movs	r2, #80	@ 0x50
 8018c14:	5a9b      	ldrh	r3, [r3, r2]
 8018c16:	b29b      	uxth	r3, r3
 8018c18:	001a      	movs	r2, r3
 8018c1a:	69bb      	ldr	r3, [r7, #24]
 8018c1c:	189b      	adds	r3, r3, r2
 8018c1e:	61bb      	str	r3, [r7, #24]
 8018c20:	69bb      	ldr	r3, [r7, #24]
 8018c22:	4a3a      	ldr	r2, [pc, #232]	@ (8018d0c <PCD_EP_ISR_Handler+0x344>)
 8018c24:	4694      	mov	ip, r2
 8018c26:	4463      	add	r3, ip
 8018c28:	617b      	str	r3, [r7, #20]
 8018c2a:	697b      	ldr	r3, [r7, #20]
 8018c2c:	881b      	ldrh	r3, [r3, #0]
 8018c2e:	b29b      	uxth	r3, r3
 8018c30:	059b      	lsls	r3, r3, #22
 8018c32:	0d9b      	lsrs	r3, r3, #22
 8018c34:	b29a      	uxth	r2, r3
 8018c36:	697b      	ldr	r3, [r7, #20]
 8018c38:	801a      	strh	r2, [r3, #0]
 8018c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c3c:	691b      	ldr	r3, [r3, #16]
 8018c3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8018c40:	d91a      	bls.n	8018c78 <PCD_EP_ISR_Handler+0x2b0>
 8018c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c44:	691b      	ldr	r3, [r3, #16]
 8018c46:	095b      	lsrs	r3, r3, #5
 8018c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8018c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c4c:	691b      	ldr	r3, [r3, #16]
 8018c4e:	221f      	movs	r2, #31
 8018c50:	4013      	ands	r3, r2
 8018c52:	d102      	bne.n	8018c5a <PCD_EP_ISR_Handler+0x292>
 8018c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c56:	3b01      	subs	r3, #1
 8018c58:	647b      	str	r3, [r7, #68]	@ 0x44
 8018c5a:	697b      	ldr	r3, [r7, #20]
 8018c5c:	881b      	ldrh	r3, [r3, #0]
 8018c5e:	b29a      	uxth	r2, r3
 8018c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c62:	b29b      	uxth	r3, r3
 8018c64:	029b      	lsls	r3, r3, #10
 8018c66:	b29b      	uxth	r3, r3
 8018c68:	4313      	orrs	r3, r2
 8018c6a:	b29b      	uxth	r3, r3
 8018c6c:	4a25      	ldr	r2, [pc, #148]	@ (8018d04 <PCD_EP_ISR_Handler+0x33c>)
 8018c6e:	4313      	orrs	r3, r2
 8018c70:	b29a      	uxth	r2, r3
 8018c72:	697b      	ldr	r3, [r7, #20]
 8018c74:	801a      	strh	r2, [r3, #0]
 8018c76:	e023      	b.n	8018cc0 <PCD_EP_ISR_Handler+0x2f8>
 8018c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c7a:	691b      	ldr	r3, [r3, #16]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d108      	bne.n	8018c92 <PCD_EP_ISR_Handler+0x2ca>
 8018c80:	697b      	ldr	r3, [r7, #20]
 8018c82:	881b      	ldrh	r3, [r3, #0]
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	4a1f      	ldr	r2, [pc, #124]	@ (8018d04 <PCD_EP_ISR_Handler+0x33c>)
 8018c88:	4313      	orrs	r3, r2
 8018c8a:	b29a      	uxth	r2, r3
 8018c8c:	697b      	ldr	r3, [r7, #20]
 8018c8e:	801a      	strh	r2, [r3, #0]
 8018c90:	e016      	b.n	8018cc0 <PCD_EP_ISR_Handler+0x2f8>
 8018c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c94:	691b      	ldr	r3, [r3, #16]
 8018c96:	085b      	lsrs	r3, r3, #1
 8018c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8018c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018c9c:	691b      	ldr	r3, [r3, #16]
 8018c9e:	2201      	movs	r2, #1
 8018ca0:	4013      	ands	r3, r2
 8018ca2:	d002      	beq.n	8018caa <PCD_EP_ISR_Handler+0x2e2>
 8018ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ca6:	3301      	adds	r3, #1
 8018ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	881b      	ldrh	r3, [r3, #0]
 8018cae:	b29a      	uxth	r2, r3
 8018cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018cb2:	b29b      	uxth	r3, r3
 8018cb4:	029b      	lsls	r3, r3, #10
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	4313      	orrs	r3, r2
 8018cba:	b29a      	uxth	r2, r3
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	881b      	ldrh	r3, [r3, #0]
 8018cc6:	b29a      	uxth	r2, r3
 8018cc8:	2012      	movs	r0, #18
 8018cca:	183b      	adds	r3, r7, r0
 8018ccc:	4911      	ldr	r1, [pc, #68]	@ (8018d14 <PCD_EP_ISR_Handler+0x34c>)
 8018cce:	400a      	ands	r2, r1
 8018cd0:	801a      	strh	r2, [r3, #0]
 8018cd2:	183b      	adds	r3, r7, r0
 8018cd4:	183a      	adds	r2, r7, r0
 8018cd6:	8812      	ldrh	r2, [r2, #0]
 8018cd8:	2180      	movs	r1, #128	@ 0x80
 8018cda:	0149      	lsls	r1, r1, #5
 8018cdc:	404a      	eors	r2, r1
 8018cde:	801a      	strh	r2, [r3, #0]
 8018ce0:	183b      	adds	r3, r7, r0
 8018ce2:	183a      	adds	r2, r7, r0
 8018ce4:	8812      	ldrh	r2, [r2, #0]
 8018ce6:	2180      	movs	r1, #128	@ 0x80
 8018ce8:	0189      	lsls	r1, r1, #6
 8018cea:	404a      	eors	r2, r1
 8018cec:	801a      	strh	r2, [r3, #0]
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	183a      	adds	r2, r7, r0
 8018cf4:	8812      	ldrh	r2, [r2, #0]
 8018cf6:	4908      	ldr	r1, [pc, #32]	@ (8018d18 <PCD_EP_ISR_Handler+0x350>)
 8018cf8:	430a      	orrs	r2, r1
 8018cfa:	b292      	uxth	r2, r2
 8018cfc:	801a      	strh	r2, [r3, #0]
 8018cfe:	e255      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
 8018d00:	ffff8f0f 	.word	0xffff8f0f
 8018d04:	ffff8000 	.word	0xffff8000
 8018d08:	00000402 	.word	0x00000402
 8018d0c:	00000406 	.word	0x00000406
 8018d10:	00000f8f 	.word	0x00000f8f
 8018d14:	ffffbf8f 	.word	0xffffbf8f
 8018d18:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	001a      	movs	r2, r3
 8018d22:	204d      	movs	r0, #77	@ 0x4d
 8018d24:	183b      	adds	r3, r7, r0
 8018d26:	781b      	ldrb	r3, [r3, #0]
 8018d28:	009b      	lsls	r3, r3, #2
 8018d2a:	18d2      	adds	r2, r2, r3
 8018d2c:	214a      	movs	r1, #74	@ 0x4a
 8018d2e:	187b      	adds	r3, r7, r1
 8018d30:	8812      	ldrh	r2, [r2, #0]
 8018d32:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8018d34:	187b      	adds	r3, r7, r1
 8018d36:	2200      	movs	r2, #0
 8018d38:	5e9b      	ldrsh	r3, [r3, r2]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	db00      	blt.n	8018d40 <PCD_EP_ISR_Handler+0x378>
 8018d3e:	e0fa      	b.n	8018f36 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	001a      	movs	r2, r3
 8018d46:	183b      	adds	r3, r7, r0
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	009b      	lsls	r3, r3, #2
 8018d4c:	18d3      	adds	r3, r2, r3
 8018d4e:	881b      	ldrh	r3, [r3, #0]
 8018d50:	b29a      	uxth	r2, r3
 8018d52:	2448      	movs	r4, #72	@ 0x48
 8018d54:	193b      	adds	r3, r7, r4
 8018d56:	49d1      	ldr	r1, [pc, #836]	@ (801909c <PCD_EP_ISR_Handler+0x6d4>)
 8018d58:	400a      	ands	r2, r1
 8018d5a:	801a      	strh	r2, [r3, #0]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	001a      	movs	r2, r3
 8018d62:	183b      	adds	r3, r7, r0
 8018d64:	781b      	ldrb	r3, [r3, #0]
 8018d66:	009b      	lsls	r3, r3, #2
 8018d68:	18d3      	adds	r3, r2, r3
 8018d6a:	193a      	adds	r2, r7, r4
 8018d6c:	8812      	ldrh	r2, [r2, #0]
 8018d6e:	2180      	movs	r1, #128	@ 0x80
 8018d70:	430a      	orrs	r2, r1
 8018d72:	b292      	uxth	r2, r2
 8018d74:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8018d76:	183b      	adds	r3, r7, r0
 8018d78:	781a      	ldrb	r2, [r3, #0]
 8018d7a:	0013      	movs	r3, r2
 8018d7c:	009b      	lsls	r3, r3, #2
 8018d7e:	189b      	adds	r3, r3, r2
 8018d80:	00db      	lsls	r3, r3, #3
 8018d82:	3369      	adds	r3, #105	@ 0x69
 8018d84:	33ff      	adds	r3, #255	@ 0xff
 8018d86:	687a      	ldr	r2, [r7, #4]
 8018d88:	18d3      	adds	r3, r2, r3
 8018d8a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8018d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018d8e:	7b1b      	ldrb	r3, [r3, #12]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d125      	bne.n	8018de0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	2250      	movs	r2, #80	@ 0x50
 8018d9a:	5a9b      	ldrh	r3, [r3, r2]
 8018d9c:	b29b      	uxth	r3, r3
 8018d9e:	001a      	movs	r2, r3
 8018da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	00db      	lsls	r3, r3, #3
 8018da6:	18d2      	adds	r2, r2, r3
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	18d3      	adds	r3, r2, r3
 8018dae:	4abc      	ldr	r2, [pc, #752]	@ (80190a0 <PCD_EP_ISR_Handler+0x6d8>)
 8018db0:	4694      	mov	ip, r2
 8018db2:	4463      	add	r3, ip
 8018db4:	881a      	ldrh	r2, [r3, #0]
 8018db6:	2450      	movs	r4, #80	@ 0x50
 8018db8:	193b      	adds	r3, r7, r4
 8018dba:	0592      	lsls	r2, r2, #22
 8018dbc:	0d92      	lsrs	r2, r2, #22
 8018dbe:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8018dc0:	193b      	adds	r3, r7, r4
 8018dc2:	881b      	ldrh	r3, [r3, #0]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d100      	bne.n	8018dca <PCD_EP_ISR_Handler+0x402>
 8018dc8:	e08d      	b.n	8018ee6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	6818      	ldr	r0, [r3, #0]
 8018dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dd0:	6959      	ldr	r1, [r3, #20]
 8018dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dd4:	88da      	ldrh	r2, [r3, #6]
 8018dd6:	193b      	adds	r3, r7, r4
 8018dd8:	881b      	ldrh	r3, [r3, #0]
 8018dda:	f007 f8d6 	bl	801ff8a <USB_ReadPMA>
 8018dde:	e082      	b.n	8018ee6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8018de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018de2:	78db      	ldrb	r3, [r3, #3]
 8018de4:	2b02      	cmp	r3, #2
 8018de6:	d10c      	bne.n	8018e02 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8018de8:	2350      	movs	r3, #80	@ 0x50
 8018dea:	18fc      	adds	r4, r7, r3
 8018dec:	234a      	movs	r3, #74	@ 0x4a
 8018dee:	18fb      	adds	r3, r7, r3
 8018df0:	881a      	ldrh	r2, [r3, #0]
 8018df2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	0018      	movs	r0, r3
 8018df8:	f000 f9ec 	bl	80191d4 <HAL_PCD_EP_DB_Receive>
 8018dfc:	0003      	movs	r3, r0
 8018dfe:	8023      	strh	r3, [r4, #0]
 8018e00:	e071      	b.n	8018ee6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	001a      	movs	r2, r3
 8018e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e0a:	781b      	ldrb	r3, [r3, #0]
 8018e0c:	009b      	lsls	r3, r3, #2
 8018e0e:	18d3      	adds	r3, r2, r3
 8018e10:	881b      	ldrh	r3, [r3, #0]
 8018e12:	b29a      	uxth	r2, r3
 8018e14:	2052      	movs	r0, #82	@ 0x52
 8018e16:	183b      	adds	r3, r7, r0
 8018e18:	49a2      	ldr	r1, [pc, #648]	@ (80190a4 <PCD_EP_ISR_Handler+0x6dc>)
 8018e1a:	400a      	ands	r2, r1
 8018e1c:	801a      	strh	r2, [r3, #0]
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	001a      	movs	r2, r3
 8018e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	009b      	lsls	r3, r3, #2
 8018e2a:	18d3      	adds	r3, r2, r3
 8018e2c:	183a      	adds	r2, r7, r0
 8018e2e:	8812      	ldrh	r2, [r2, #0]
 8018e30:	499d      	ldr	r1, [pc, #628]	@ (80190a8 <PCD_EP_ISR_Handler+0x6e0>)
 8018e32:	430a      	orrs	r2, r1
 8018e34:	b292      	uxth	r2, r2
 8018e36:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	001a      	movs	r2, r3
 8018e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e40:	781b      	ldrb	r3, [r3, #0]
 8018e42:	009b      	lsls	r3, r3, #2
 8018e44:	18d3      	adds	r3, r2, r3
 8018e46:	881b      	ldrh	r3, [r3, #0]
 8018e48:	b29b      	uxth	r3, r3
 8018e4a:	001a      	movs	r2, r3
 8018e4c:	2380      	movs	r3, #128	@ 0x80
 8018e4e:	01db      	lsls	r3, r3, #7
 8018e50:	4013      	ands	r3, r2
 8018e52:	d024      	beq.n	8018e9e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	2250      	movs	r2, #80	@ 0x50
 8018e5a:	5a9b      	ldrh	r3, [r3, r2]
 8018e5c:	b29b      	uxth	r3, r3
 8018e5e:	001a      	movs	r2, r3
 8018e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	00db      	lsls	r3, r3, #3
 8018e66:	18d2      	adds	r2, r2, r3
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	18d3      	adds	r3, r2, r3
 8018e6e:	4a8f      	ldr	r2, [pc, #572]	@ (80190ac <PCD_EP_ISR_Handler+0x6e4>)
 8018e70:	4694      	mov	ip, r2
 8018e72:	4463      	add	r3, ip
 8018e74:	881a      	ldrh	r2, [r3, #0]
 8018e76:	2450      	movs	r4, #80	@ 0x50
 8018e78:	193b      	adds	r3, r7, r4
 8018e7a:	0592      	lsls	r2, r2, #22
 8018e7c:	0d92      	lsrs	r2, r2, #22
 8018e7e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8018e80:	193b      	adds	r3, r7, r4
 8018e82:	881b      	ldrh	r3, [r3, #0]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d02e      	beq.n	8018ee6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6818      	ldr	r0, [r3, #0]
 8018e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e8e:	6959      	ldr	r1, [r3, #20]
 8018e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018e92:	891a      	ldrh	r2, [r3, #8]
 8018e94:	193b      	adds	r3, r7, r4
 8018e96:	881b      	ldrh	r3, [r3, #0]
 8018e98:	f007 f877 	bl	801ff8a <USB_ReadPMA>
 8018e9c:	e023      	b.n	8018ee6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	2250      	movs	r2, #80	@ 0x50
 8018ea4:	5a9b      	ldrh	r3, [r3, r2]
 8018ea6:	b29b      	uxth	r3, r3
 8018ea8:	001a      	movs	r2, r3
 8018eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018eac:	781b      	ldrb	r3, [r3, #0]
 8018eae:	00db      	lsls	r3, r3, #3
 8018eb0:	18d2      	adds	r2, r2, r3
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	18d3      	adds	r3, r2, r3
 8018eb8:	4a79      	ldr	r2, [pc, #484]	@ (80190a0 <PCD_EP_ISR_Handler+0x6d8>)
 8018eba:	4694      	mov	ip, r2
 8018ebc:	4463      	add	r3, ip
 8018ebe:	881a      	ldrh	r2, [r3, #0]
 8018ec0:	2450      	movs	r4, #80	@ 0x50
 8018ec2:	193b      	adds	r3, r7, r4
 8018ec4:	0592      	lsls	r2, r2, #22
 8018ec6:	0d92      	lsrs	r2, r2, #22
 8018ec8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8018eca:	193b      	adds	r3, r7, r4
 8018ecc:	881b      	ldrh	r3, [r3, #0]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d009      	beq.n	8018ee6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	6818      	ldr	r0, [r3, #0]
 8018ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ed8:	6959      	ldr	r1, [r3, #20]
 8018eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018edc:	895a      	ldrh	r2, [r3, #10]
 8018ede:	193b      	adds	r3, r7, r4
 8018ee0:	881b      	ldrh	r3, [r3, #0]
 8018ee2:	f007 f852 	bl	801ff8a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8018ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ee8:	69da      	ldr	r2, [r3, #28]
 8018eea:	2150      	movs	r1, #80	@ 0x50
 8018eec:	187b      	adds	r3, r7, r1
 8018eee:	881b      	ldrh	r3, [r3, #0]
 8018ef0:	18d2      	adds	r2, r2, r3
 8018ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ef4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8018ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ef8:	695a      	ldr	r2, [r3, #20]
 8018efa:	187b      	adds	r3, r7, r1
 8018efc:	881b      	ldrh	r3, [r3, #0]
 8018efe:	18d2      	adds	r2, r2, r3
 8018f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8018f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f06:	699b      	ldr	r3, [r3, #24]
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d005      	beq.n	8018f18 <PCD_EP_ISR_Handler+0x550>
 8018f0c:	187b      	adds	r3, r7, r1
 8018f0e:	881a      	ldrh	r2, [r3, #0]
 8018f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f12:	691b      	ldr	r3, [r3, #16]
 8018f14:	429a      	cmp	r2, r3
 8018f16:	d207      	bcs.n	8018f28 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8018f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f1a:	781a      	ldrb	r2, [r3, #0]
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	0011      	movs	r1, r2
 8018f20:	0018      	movs	r0, r3
 8018f22:	f009 f84c 	bl	8021fbe <HAL_PCD_DataOutStageCallback>
 8018f26:	e006      	b.n	8018f36 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018f2e:	0011      	movs	r1, r2
 8018f30:	0018      	movs	r0, r3
 8018f32:	f005 fd6f 	bl	801ea14 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8018f36:	244a      	movs	r4, #74	@ 0x4a
 8018f38:	193b      	adds	r3, r7, r4
 8018f3a:	881b      	ldrh	r3, [r3, #0]
 8018f3c:	2280      	movs	r2, #128	@ 0x80
 8018f3e:	4013      	ands	r3, r2
 8018f40:	d100      	bne.n	8018f44 <PCD_EP_ISR_Handler+0x57c>
 8018f42:	e133      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8018f44:	204d      	movs	r0, #77	@ 0x4d
 8018f46:	183b      	adds	r3, r7, r0
 8018f48:	781b      	ldrb	r3, [r3, #0]
 8018f4a:	1c5a      	adds	r2, r3, #1
 8018f4c:	0013      	movs	r3, r2
 8018f4e:	009b      	lsls	r3, r3, #2
 8018f50:	189b      	adds	r3, r3, r2
 8018f52:	00db      	lsls	r3, r3, #3
 8018f54:	687a      	ldr	r2, [r7, #4]
 8018f56:	18d3      	adds	r3, r2, r3
 8018f58:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	001a      	movs	r2, r3
 8018f60:	183b      	adds	r3, r7, r0
 8018f62:	781b      	ldrb	r3, [r3, #0]
 8018f64:	009b      	lsls	r3, r3, #2
 8018f66:	18d3      	adds	r3, r2, r3
 8018f68:	881b      	ldrh	r3, [r3, #0]
 8018f6a:	b29a      	uxth	r2, r3
 8018f6c:	2542      	movs	r5, #66	@ 0x42
 8018f6e:	197b      	adds	r3, r7, r5
 8018f70:	494f      	ldr	r1, [pc, #316]	@ (80190b0 <PCD_EP_ISR_Handler+0x6e8>)
 8018f72:	400a      	ands	r2, r1
 8018f74:	801a      	strh	r2, [r3, #0]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	001a      	movs	r2, r3
 8018f7c:	183b      	adds	r3, r7, r0
 8018f7e:	781b      	ldrb	r3, [r3, #0]
 8018f80:	009b      	lsls	r3, r3, #2
 8018f82:	18d3      	adds	r3, r2, r3
 8018f84:	197a      	adds	r2, r7, r5
 8018f86:	8812      	ldrh	r2, [r2, #0]
 8018f88:	494a      	ldr	r1, [pc, #296]	@ (80190b4 <PCD_EP_ISR_Handler+0x6ec>)
 8018f8a:	430a      	orrs	r2, r1
 8018f8c:	b292      	uxth	r2, r2
 8018f8e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8018f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f92:	78db      	ldrb	r3, [r3, #3]
 8018f94:	2b01      	cmp	r3, #1
 8018f96:	d000      	beq.n	8018f9a <PCD_EP_ISR_Handler+0x5d2>
 8018f98:	e0af      	b.n	80190fa <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8018f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8018fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fa2:	7b1b      	ldrb	r3, [r3, #12]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d100      	bne.n	8018faa <PCD_EP_ISR_Handler+0x5e2>
 8018fa8:	e09f      	b.n	80190ea <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8018faa:	193b      	adds	r3, r7, r4
 8018fac:	881b      	ldrh	r3, [r3, #0]
 8018fae:	2240      	movs	r2, #64	@ 0x40
 8018fb0:	4013      	ands	r3, r2
 8018fb2:	d046      	beq.n	8019042 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fb6:	785b      	ldrb	r3, [r3, #1]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d125      	bne.n	8019008 <PCD_EP_ISR_Handler+0x640>
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	2250      	movs	r2, #80	@ 0x50
 8018fc8:	5a9b      	ldrh	r3, [r3, r2]
 8018fca:	b29b      	uxth	r3, r3
 8018fcc:	001a      	movs	r2, r3
 8018fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fd0:	189b      	adds	r3, r3, r2
 8018fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fd6:	781b      	ldrb	r3, [r3, #0]
 8018fd8:	00da      	lsls	r2, r3, #3
 8018fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fdc:	18d3      	adds	r3, r2, r3
 8018fde:	4a33      	ldr	r2, [pc, #204]	@ (80190ac <PCD_EP_ISR_Handler+0x6e4>)
 8018fe0:	4694      	mov	ip, r2
 8018fe2:	4463      	add	r3, ip
 8018fe4:	623b      	str	r3, [r7, #32]
 8018fe6:	6a3b      	ldr	r3, [r7, #32]
 8018fe8:	881b      	ldrh	r3, [r3, #0]
 8018fea:	b29b      	uxth	r3, r3
 8018fec:	059b      	lsls	r3, r3, #22
 8018fee:	0d9b      	lsrs	r3, r3, #22
 8018ff0:	b29a      	uxth	r2, r3
 8018ff2:	6a3b      	ldr	r3, [r7, #32]
 8018ff4:	801a      	strh	r2, [r3, #0]
 8018ff6:	6a3b      	ldr	r3, [r7, #32]
 8018ff8:	881b      	ldrh	r3, [r3, #0]
 8018ffa:	b29b      	uxth	r3, r3
 8018ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80190b4 <PCD_EP_ISR_Handler+0x6ec>)
 8018ffe:	4313      	orrs	r3, r2
 8019000:	b29a      	uxth	r2, r3
 8019002:	6a3b      	ldr	r3, [r7, #32]
 8019004:	801a      	strh	r2, [r3, #0]
 8019006:	e070      	b.n	80190ea <PCD_EP_ISR_Handler+0x722>
 8019008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801900a:	785b      	ldrb	r3, [r3, #1]
 801900c:	2b01      	cmp	r3, #1
 801900e:	d16c      	bne.n	80190ea <PCD_EP_ISR_Handler+0x722>
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	2250      	movs	r2, #80	@ 0x50
 801901c:	5a9b      	ldrh	r3, [r3, r2]
 801901e:	b29b      	uxth	r3, r3
 8019020:	001a      	movs	r2, r3
 8019022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019024:	189b      	adds	r3, r3, r2
 8019026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801902a:	781b      	ldrb	r3, [r3, #0]
 801902c:	00da      	lsls	r2, r3, #3
 801902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019030:	18d3      	adds	r3, r2, r3
 8019032:	4a1e      	ldr	r2, [pc, #120]	@ (80190ac <PCD_EP_ISR_Handler+0x6e4>)
 8019034:	4694      	mov	ip, r2
 8019036:	4463      	add	r3, ip
 8019038:	62bb      	str	r3, [r7, #40]	@ 0x28
 801903a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801903c:	2200      	movs	r2, #0
 801903e:	801a      	strh	r2, [r3, #0]
 8019040:	e053      	b.n	80190ea <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801904a:	785b      	ldrb	r3, [r3, #1]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d133      	bne.n	80190b8 <PCD_EP_ISR_Handler+0x6f0>
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	637b      	str	r3, [r7, #52]	@ 0x34
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	2250      	movs	r2, #80	@ 0x50
 801905c:	5a9b      	ldrh	r3, [r3, r2]
 801905e:	b29b      	uxth	r3, r3
 8019060:	001a      	movs	r2, r3
 8019062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019064:	189b      	adds	r3, r3, r2
 8019066:	637b      	str	r3, [r7, #52]	@ 0x34
 8019068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801906a:	781b      	ldrb	r3, [r3, #0]
 801906c:	00da      	lsls	r2, r3, #3
 801906e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019070:	18d3      	adds	r3, r2, r3
 8019072:	4a0b      	ldr	r2, [pc, #44]	@ (80190a0 <PCD_EP_ISR_Handler+0x6d8>)
 8019074:	4694      	mov	ip, r2
 8019076:	4463      	add	r3, ip
 8019078:	633b      	str	r3, [r7, #48]	@ 0x30
 801907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801907c:	881b      	ldrh	r3, [r3, #0]
 801907e:	b29b      	uxth	r3, r3
 8019080:	059b      	lsls	r3, r3, #22
 8019082:	0d9b      	lsrs	r3, r3, #22
 8019084:	b29a      	uxth	r2, r3
 8019086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019088:	801a      	strh	r2, [r3, #0]
 801908a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801908c:	881b      	ldrh	r3, [r3, #0]
 801908e:	b29b      	uxth	r3, r3
 8019090:	4a08      	ldr	r2, [pc, #32]	@ (80190b4 <PCD_EP_ISR_Handler+0x6ec>)
 8019092:	4313      	orrs	r3, r2
 8019094:	b29a      	uxth	r2, r3
 8019096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019098:	801a      	strh	r2, [r3, #0]
 801909a:	e026      	b.n	80190ea <PCD_EP_ISR_Handler+0x722>
 801909c:	00000f8f 	.word	0x00000f8f
 80190a0:	00000406 	.word	0x00000406
 80190a4:	ffff8f8f 	.word	0xffff8f8f
 80190a8:	ffff80c0 	.word	0xffff80c0
 80190ac:	00000402 	.word	0x00000402
 80190b0:	ffff8f0f 	.word	0xffff8f0f
 80190b4:	ffff8000 	.word	0xffff8000
 80190b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190ba:	785b      	ldrb	r3, [r3, #1]
 80190bc:	2b01      	cmp	r3, #1
 80190be:	d114      	bne.n	80190ea <PCD_EP_ISR_Handler+0x722>
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	2250      	movs	r2, #80	@ 0x50
 80190c6:	5a9b      	ldrh	r3, [r3, r2]
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	001a      	movs	r2, r3
 80190cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190ce:	189b      	adds	r3, r3, r2
 80190d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80190d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190d4:	781b      	ldrb	r3, [r3, #0]
 80190d6:	00da      	lsls	r2, r3, #3
 80190d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190da:	18d3      	adds	r3, r2, r3
 80190dc:	4a3b      	ldr	r2, [pc, #236]	@ (80191cc <PCD_EP_ISR_Handler+0x804>)
 80190de:	4694      	mov	ip, r2
 80190e0:	4463      	add	r3, ip
 80190e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80190e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190e6:	2200      	movs	r2, #0
 80190e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80190ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190ec:	781a      	ldrb	r2, [r3, #0]
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	0011      	movs	r1, r2
 80190f2:	0018      	movs	r0, r3
 80190f4:	f008 ff84 	bl	8022000 <HAL_PCD_DataInStageCallback>
 80190f8:	e058      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80190fa:	234a      	movs	r3, #74	@ 0x4a
 80190fc:	18fb      	adds	r3, r7, r3
 80190fe:	881a      	ldrh	r2, [r3, #0]
 8019100:	2380      	movs	r3, #128	@ 0x80
 8019102:	005b      	lsls	r3, r3, #1
 8019104:	4013      	ands	r3, r2
 8019106:	d149      	bne.n	801919c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	2250      	movs	r2, #80	@ 0x50
 801910e:	5a9b      	ldrh	r3, [r3, r2]
 8019110:	b29b      	uxth	r3, r3
 8019112:	001a      	movs	r2, r3
 8019114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019116:	781b      	ldrb	r3, [r3, #0]
 8019118:	00db      	lsls	r3, r3, #3
 801911a:	18d2      	adds	r2, r2, r3
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	18d3      	adds	r3, r2, r3
 8019122:	4a2b      	ldr	r2, [pc, #172]	@ (80191d0 <PCD_EP_ISR_Handler+0x808>)
 8019124:	4694      	mov	ip, r2
 8019126:	4463      	add	r3, ip
 8019128:	881a      	ldrh	r2, [r3, #0]
 801912a:	2140      	movs	r1, #64	@ 0x40
 801912c:	187b      	adds	r3, r7, r1
 801912e:	0592      	lsls	r2, r2, #22
 8019130:	0d92      	lsrs	r2, r2, #22
 8019132:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8019134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019136:	699a      	ldr	r2, [r3, #24]
 8019138:	187b      	adds	r3, r7, r1
 801913a:	881b      	ldrh	r3, [r3, #0]
 801913c:	429a      	cmp	r2, r3
 801913e:	d907      	bls.n	8019150 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8019140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019142:	699a      	ldr	r2, [r3, #24]
 8019144:	187b      	adds	r3, r7, r1
 8019146:	881b      	ldrh	r3, [r3, #0]
 8019148:	1ad2      	subs	r2, r2, r3
 801914a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801914c:	619a      	str	r2, [r3, #24]
 801914e:	e002      	b.n	8019156 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8019150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019152:	2200      	movs	r2, #0
 8019154:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8019156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019158:	699b      	ldr	r3, [r3, #24]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d107      	bne.n	801916e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801915e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019160:	781a      	ldrb	r2, [r3, #0]
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	0011      	movs	r1, r2
 8019166:	0018      	movs	r0, r3
 8019168:	f008 ff4a 	bl	8022000 <HAL_PCD_DataInStageCallback>
 801916c:	e01e      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801916e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019170:	695a      	ldr	r2, [r3, #20]
 8019172:	2140      	movs	r1, #64	@ 0x40
 8019174:	187b      	adds	r3, r7, r1
 8019176:	881b      	ldrh	r3, [r3, #0]
 8019178:	18d2      	adds	r2, r2, r3
 801917a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801917c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801917e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019180:	69da      	ldr	r2, [r3, #28]
 8019182:	187b      	adds	r3, r7, r1
 8019184:	881b      	ldrh	r3, [r3, #0]
 8019186:	18d2      	adds	r2, r2, r3
 8019188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801918a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019192:	0011      	movs	r1, r2
 8019194:	0018      	movs	r0, r3
 8019196:	f005 fc3d 	bl	801ea14 <USB_EPStartXfer>
 801919a:	e007      	b.n	80191ac <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801919c:	234a      	movs	r3, #74	@ 0x4a
 801919e:	18fb      	adds	r3, r7, r3
 80191a0:	881a      	ldrh	r2, [r3, #0]
 80191a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80191a4:	687b      	ldr	r3, [r7, #4]
 80191a6:	0018      	movs	r0, r3
 80191a8:	f000 f930 	bl	801940c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2244      	movs	r2, #68	@ 0x44
 80191b2:	5a9b      	ldrh	r3, [r3, r2]
 80191b4:	b29b      	uxth	r3, r3
 80191b6:	b21b      	sxth	r3, r3
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	da01      	bge.n	80191c0 <PCD_EP_ISR_Handler+0x7f8>
 80191bc:	f7ff fc0a 	bl	80189d4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80191c0:	2300      	movs	r3, #0
}
 80191c2:	0018      	movs	r0, r3
 80191c4:	46bd      	mov	sp, r7
 80191c6:	b016      	add	sp, #88	@ 0x58
 80191c8:	bdb0      	pop	{r4, r5, r7, pc}
 80191ca:	46c0      	nop			@ (mov r8, r8)
 80191cc:	00000406 	.word	0x00000406
 80191d0:	00000402 	.word	0x00000402

080191d4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80191d4:	b590      	push	{r4, r7, lr}
 80191d6:	b089      	sub	sp, #36	@ 0x24
 80191d8:	af00      	add	r7, sp, #0
 80191da:	60f8      	str	r0, [r7, #12]
 80191dc:	60b9      	str	r1, [r7, #8]
 80191de:	1dbb      	adds	r3, r7, #6
 80191e0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80191e2:	1dbb      	adds	r3, r7, #6
 80191e4:	881a      	ldrh	r2, [r3, #0]
 80191e6:	2380      	movs	r3, #128	@ 0x80
 80191e8:	01db      	lsls	r3, r3, #7
 80191ea:	4013      	ands	r3, r2
 80191ec:	d100      	bne.n	80191f0 <HAL_PCD_EP_DB_Receive+0x1c>
 80191ee:	e07d      	b.n	80192ec <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	2250      	movs	r2, #80	@ 0x50
 80191f6:	5a9b      	ldrh	r3, [r3, r2]
 80191f8:	b29b      	uxth	r3, r3
 80191fa:	001a      	movs	r2, r3
 80191fc:	68bb      	ldr	r3, [r7, #8]
 80191fe:	781b      	ldrb	r3, [r3, #0]
 8019200:	00db      	lsls	r3, r3, #3
 8019202:	18d2      	adds	r2, r2, r3
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	18d3      	adds	r3, r2, r3
 801920a:	4a7a      	ldr	r2, [pc, #488]	@ (80193f4 <HAL_PCD_EP_DB_Receive+0x220>)
 801920c:	4694      	mov	ip, r2
 801920e:	4463      	add	r3, ip
 8019210:	881a      	ldrh	r2, [r3, #0]
 8019212:	211a      	movs	r1, #26
 8019214:	187b      	adds	r3, r7, r1
 8019216:	0592      	lsls	r2, r2, #22
 8019218:	0d92      	lsrs	r2, r2, #22
 801921a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801921c:	68bb      	ldr	r3, [r7, #8]
 801921e:	699a      	ldr	r2, [r3, #24]
 8019220:	187b      	adds	r3, r7, r1
 8019222:	881b      	ldrh	r3, [r3, #0]
 8019224:	429a      	cmp	r2, r3
 8019226:	d307      	bcc.n	8019238 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8019228:	68bb      	ldr	r3, [r7, #8]
 801922a:	699a      	ldr	r2, [r3, #24]
 801922c:	187b      	adds	r3, r7, r1
 801922e:	881b      	ldrh	r3, [r3, #0]
 8019230:	1ad2      	subs	r2, r2, r3
 8019232:	68bb      	ldr	r3, [r7, #8]
 8019234:	619a      	str	r2, [r3, #24]
 8019236:	e002      	b.n	801923e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8019238:	68bb      	ldr	r3, [r7, #8]
 801923a:	2200      	movs	r2, #0
 801923c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	699b      	ldr	r3, [r3, #24]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d121      	bne.n	801928a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	001a      	movs	r2, r3
 801924c:	68bb      	ldr	r3, [r7, #8]
 801924e:	781b      	ldrb	r3, [r3, #0]
 8019250:	009b      	lsls	r3, r3, #2
 8019252:	18d3      	adds	r3, r2, r3
 8019254:	881b      	ldrh	r3, [r3, #0]
 8019256:	b29a      	uxth	r2, r3
 8019258:	2018      	movs	r0, #24
 801925a:	183b      	adds	r3, r7, r0
 801925c:	4966      	ldr	r1, [pc, #408]	@ (80193f8 <HAL_PCD_EP_DB_Receive+0x224>)
 801925e:	400a      	ands	r2, r1
 8019260:	801a      	strh	r2, [r3, #0]
 8019262:	183b      	adds	r3, r7, r0
 8019264:	183a      	adds	r2, r7, r0
 8019266:	8812      	ldrh	r2, [r2, #0]
 8019268:	2180      	movs	r1, #128	@ 0x80
 801926a:	0189      	lsls	r1, r1, #6
 801926c:	404a      	eors	r2, r1
 801926e:	801a      	strh	r2, [r3, #0]
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	001a      	movs	r2, r3
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	009b      	lsls	r3, r3, #2
 801927c:	18d3      	adds	r3, r2, r3
 801927e:	183a      	adds	r2, r7, r0
 8019280:	8812      	ldrh	r2, [r2, #0]
 8019282:	495e      	ldr	r1, [pc, #376]	@ (80193fc <HAL_PCD_EP_DB_Receive+0x228>)
 8019284:	430a      	orrs	r2, r1
 8019286:	b292      	uxth	r2, r2
 8019288:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801928a:	1dbb      	adds	r3, r7, #6
 801928c:	881b      	ldrh	r3, [r3, #0]
 801928e:	2240      	movs	r2, #64	@ 0x40
 8019290:	4013      	ands	r3, r2
 8019292:	d01a      	beq.n	80192ca <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	001a      	movs	r2, r3
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	18d3      	adds	r3, r2, r3
 80192a2:	881b      	ldrh	r3, [r3, #0]
 80192a4:	b29a      	uxth	r2, r3
 80192a6:	2016      	movs	r0, #22
 80192a8:	183b      	adds	r3, r7, r0
 80192aa:	4955      	ldr	r1, [pc, #340]	@ (8019400 <HAL_PCD_EP_DB_Receive+0x22c>)
 80192ac:	400a      	ands	r2, r1
 80192ae:	801a      	strh	r2, [r3, #0]
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	001a      	movs	r2, r3
 80192b6:	68bb      	ldr	r3, [r7, #8]
 80192b8:	781b      	ldrb	r3, [r3, #0]
 80192ba:	009b      	lsls	r3, r3, #2
 80192bc:	18d3      	adds	r3, r2, r3
 80192be:	183a      	adds	r2, r7, r0
 80192c0:	8812      	ldrh	r2, [r2, #0]
 80192c2:	4950      	ldr	r1, [pc, #320]	@ (8019404 <HAL_PCD_EP_DB_Receive+0x230>)
 80192c4:	430a      	orrs	r2, r1
 80192c6:	b292      	uxth	r2, r2
 80192c8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80192ca:	241a      	movs	r4, #26
 80192cc:	193b      	adds	r3, r7, r4
 80192ce:	881b      	ldrh	r3, [r3, #0]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d100      	bne.n	80192d6 <HAL_PCD_EP_DB_Receive+0x102>
 80192d4:	e086      	b.n	80193e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	6818      	ldr	r0, [r3, #0]
 80192da:	68bb      	ldr	r3, [r7, #8]
 80192dc:	6959      	ldr	r1, [r3, #20]
 80192de:	68bb      	ldr	r3, [r7, #8]
 80192e0:	891a      	ldrh	r2, [r3, #8]
 80192e2:	193b      	adds	r3, r7, r4
 80192e4:	881b      	ldrh	r3, [r3, #0]
 80192e6:	f006 fe50 	bl	801ff8a <USB_ReadPMA>
 80192ea:	e07b      	b.n	80193e4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	2250      	movs	r2, #80	@ 0x50
 80192f2:	5a9b      	ldrh	r3, [r3, r2]
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	001a      	movs	r2, r3
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	781b      	ldrb	r3, [r3, #0]
 80192fc:	00db      	lsls	r3, r3, #3
 80192fe:	18d2      	adds	r2, r2, r3
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	18d3      	adds	r3, r2, r3
 8019306:	4a40      	ldr	r2, [pc, #256]	@ (8019408 <HAL_PCD_EP_DB_Receive+0x234>)
 8019308:	4694      	mov	ip, r2
 801930a:	4463      	add	r3, ip
 801930c:	881a      	ldrh	r2, [r3, #0]
 801930e:	211a      	movs	r1, #26
 8019310:	187b      	adds	r3, r7, r1
 8019312:	0592      	lsls	r2, r2, #22
 8019314:	0d92      	lsrs	r2, r2, #22
 8019316:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019318:	68bb      	ldr	r3, [r7, #8]
 801931a:	699a      	ldr	r2, [r3, #24]
 801931c:	187b      	adds	r3, r7, r1
 801931e:	881b      	ldrh	r3, [r3, #0]
 8019320:	429a      	cmp	r2, r3
 8019322:	d307      	bcc.n	8019334 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	699a      	ldr	r2, [r3, #24]
 8019328:	187b      	adds	r3, r7, r1
 801932a:	881b      	ldrh	r3, [r3, #0]
 801932c:	1ad2      	subs	r2, r2, r3
 801932e:	68bb      	ldr	r3, [r7, #8]
 8019330:	619a      	str	r2, [r3, #24]
 8019332:	e002      	b.n	801933a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8019334:	68bb      	ldr	r3, [r7, #8]
 8019336:	2200      	movs	r2, #0
 8019338:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801933a:	68bb      	ldr	r3, [r7, #8]
 801933c:	699b      	ldr	r3, [r3, #24]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d121      	bne.n	8019386 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	001a      	movs	r2, r3
 8019348:	68bb      	ldr	r3, [r7, #8]
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	009b      	lsls	r3, r3, #2
 801934e:	18d3      	adds	r3, r2, r3
 8019350:	881b      	ldrh	r3, [r3, #0]
 8019352:	b29a      	uxth	r2, r3
 8019354:	201e      	movs	r0, #30
 8019356:	183b      	adds	r3, r7, r0
 8019358:	4927      	ldr	r1, [pc, #156]	@ (80193f8 <HAL_PCD_EP_DB_Receive+0x224>)
 801935a:	400a      	ands	r2, r1
 801935c:	801a      	strh	r2, [r3, #0]
 801935e:	183b      	adds	r3, r7, r0
 8019360:	183a      	adds	r2, r7, r0
 8019362:	8812      	ldrh	r2, [r2, #0]
 8019364:	2180      	movs	r1, #128	@ 0x80
 8019366:	0189      	lsls	r1, r1, #6
 8019368:	404a      	eors	r2, r1
 801936a:	801a      	strh	r2, [r3, #0]
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	001a      	movs	r2, r3
 8019372:	68bb      	ldr	r3, [r7, #8]
 8019374:	781b      	ldrb	r3, [r3, #0]
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	18d3      	adds	r3, r2, r3
 801937a:	183a      	adds	r2, r7, r0
 801937c:	8812      	ldrh	r2, [r2, #0]
 801937e:	491f      	ldr	r1, [pc, #124]	@ (80193fc <HAL_PCD_EP_DB_Receive+0x228>)
 8019380:	430a      	orrs	r2, r1
 8019382:	b292      	uxth	r2, r2
 8019384:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8019386:	1dbb      	adds	r3, r7, #6
 8019388:	881b      	ldrh	r3, [r3, #0]
 801938a:	2240      	movs	r2, #64	@ 0x40
 801938c:	4013      	ands	r3, r2
 801938e:	d11a      	bne.n	80193c6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	001a      	movs	r2, r3
 8019396:	68bb      	ldr	r3, [r7, #8]
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	18d3      	adds	r3, r2, r3
 801939e:	881b      	ldrh	r3, [r3, #0]
 80193a0:	b29a      	uxth	r2, r3
 80193a2:	201c      	movs	r0, #28
 80193a4:	183b      	adds	r3, r7, r0
 80193a6:	4916      	ldr	r1, [pc, #88]	@ (8019400 <HAL_PCD_EP_DB_Receive+0x22c>)
 80193a8:	400a      	ands	r2, r1
 80193aa:	801a      	strh	r2, [r3, #0]
 80193ac:	68fb      	ldr	r3, [r7, #12]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	001a      	movs	r2, r3
 80193b2:	68bb      	ldr	r3, [r7, #8]
 80193b4:	781b      	ldrb	r3, [r3, #0]
 80193b6:	009b      	lsls	r3, r3, #2
 80193b8:	18d3      	adds	r3, r2, r3
 80193ba:	183a      	adds	r2, r7, r0
 80193bc:	8812      	ldrh	r2, [r2, #0]
 80193be:	4911      	ldr	r1, [pc, #68]	@ (8019404 <HAL_PCD_EP_DB_Receive+0x230>)
 80193c0:	430a      	orrs	r2, r1
 80193c2:	b292      	uxth	r2, r2
 80193c4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80193c6:	241a      	movs	r4, #26
 80193c8:	193b      	adds	r3, r7, r4
 80193ca:	881b      	ldrh	r3, [r3, #0]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d009      	beq.n	80193e4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	6818      	ldr	r0, [r3, #0]
 80193d4:	68bb      	ldr	r3, [r7, #8]
 80193d6:	6959      	ldr	r1, [r3, #20]
 80193d8:	68bb      	ldr	r3, [r7, #8]
 80193da:	895a      	ldrh	r2, [r3, #10]
 80193dc:	193b      	adds	r3, r7, r4
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	f006 fdd3 	bl	801ff8a <USB_ReadPMA>
    }
  }

  return count;
 80193e4:	231a      	movs	r3, #26
 80193e6:	18fb      	adds	r3, r7, r3
 80193e8:	881b      	ldrh	r3, [r3, #0]
}
 80193ea:	0018      	movs	r0, r3
 80193ec:	46bd      	mov	sp, r7
 80193ee:	b009      	add	sp, #36	@ 0x24
 80193f0:	bd90      	pop	{r4, r7, pc}
 80193f2:	46c0      	nop			@ (mov r8, r8)
 80193f4:	00000402 	.word	0x00000402
 80193f8:	ffffbf8f 	.word	0xffffbf8f
 80193fc:	ffff8080 	.word	0xffff8080
 8019400:	ffff8f8f 	.word	0xffff8f8f
 8019404:	ffff80c0 	.word	0xffff80c0
 8019408:	00000406 	.word	0x00000406

0801940c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b0a4      	sub	sp, #144	@ 0x90
 8019410:	af00      	add	r7, sp, #0
 8019412:	60f8      	str	r0, [r7, #12]
 8019414:	60b9      	str	r1, [r7, #8]
 8019416:	1dbb      	adds	r3, r7, #6
 8019418:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801941a:	1dbb      	adds	r3, r7, #6
 801941c:	881b      	ldrh	r3, [r3, #0]
 801941e:	2240      	movs	r2, #64	@ 0x40
 8019420:	4013      	ands	r3, r2
 8019422:	d100      	bne.n	8019426 <HAL_PCD_EP_DB_Transmit+0x1a>
 8019424:	e1e4      	b.n	80197f0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	2250      	movs	r2, #80	@ 0x50
 801942c:	5a9b      	ldrh	r3, [r3, r2]
 801942e:	b29b      	uxth	r3, r3
 8019430:	001a      	movs	r2, r3
 8019432:	68bb      	ldr	r3, [r7, #8]
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	00db      	lsls	r3, r3, #3
 8019438:	18d2      	adds	r2, r2, r3
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	18d3      	adds	r3, r2, r3
 8019440:	4ad0      	ldr	r2, [pc, #832]	@ (8019784 <HAL_PCD_EP_DB_Transmit+0x378>)
 8019442:	4694      	mov	ip, r2
 8019444:	4463      	add	r3, ip
 8019446:	881a      	ldrh	r2, [r3, #0]
 8019448:	2186      	movs	r1, #134	@ 0x86
 801944a:	187b      	adds	r3, r7, r1
 801944c:	0592      	lsls	r2, r2, #22
 801944e:	0d92      	lsrs	r2, r2, #22
 8019450:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8019452:	68bb      	ldr	r3, [r7, #8]
 8019454:	699a      	ldr	r2, [r3, #24]
 8019456:	187b      	adds	r3, r7, r1
 8019458:	881b      	ldrh	r3, [r3, #0]
 801945a:	429a      	cmp	r2, r3
 801945c:	d907      	bls.n	801946e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801945e:	68bb      	ldr	r3, [r7, #8]
 8019460:	699a      	ldr	r2, [r3, #24]
 8019462:	187b      	adds	r3, r7, r1
 8019464:	881b      	ldrh	r3, [r3, #0]
 8019466:	1ad2      	subs	r2, r2, r3
 8019468:	68bb      	ldr	r3, [r7, #8]
 801946a:	619a      	str	r2, [r3, #24]
 801946c:	e002      	b.n	8019474 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	2200      	movs	r2, #0
 8019472:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019474:	68bb      	ldr	r3, [r7, #8]
 8019476:	699b      	ldr	r3, [r3, #24]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d000      	beq.n	801947e <HAL_PCD_EP_DB_Transmit+0x72>
 801947c:	e0b5      	b.n	80195ea <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801947e:	68bb      	ldr	r3, [r7, #8]
 8019480:	785b      	ldrb	r3, [r3, #1]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d125      	bne.n	80194d2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801948c:	68fb      	ldr	r3, [r7, #12]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	2250      	movs	r2, #80	@ 0x50
 8019492:	5a9b      	ldrh	r3, [r3, r2]
 8019494:	b29b      	uxth	r3, r3
 8019496:	001a      	movs	r2, r3
 8019498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801949a:	189b      	adds	r3, r3, r2
 801949c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	781b      	ldrb	r3, [r3, #0]
 80194a2:	00da      	lsls	r2, r3, #3
 80194a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194a6:	18d3      	adds	r3, r2, r3
 80194a8:	4ab6      	ldr	r2, [pc, #728]	@ (8019784 <HAL_PCD_EP_DB_Transmit+0x378>)
 80194aa:	4694      	mov	ip, r2
 80194ac:	4463      	add	r3, ip
 80194ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80194b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194b2:	881b      	ldrh	r3, [r3, #0]
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	059b      	lsls	r3, r3, #22
 80194b8:	0d9b      	lsrs	r3, r3, #22
 80194ba:	b29a      	uxth	r2, r3
 80194bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194be:	801a      	strh	r2, [r3, #0]
 80194c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194c2:	881b      	ldrh	r3, [r3, #0]
 80194c4:	b29b      	uxth	r3, r3
 80194c6:	4ab0      	ldr	r2, [pc, #704]	@ (8019788 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80194c8:	4313      	orrs	r3, r2
 80194ca:	b29a      	uxth	r2, r3
 80194cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80194ce:	801a      	strh	r2, [r3, #0]
 80194d0:	e01b      	b.n	801950a <HAL_PCD_EP_DB_Transmit+0xfe>
 80194d2:	68bb      	ldr	r3, [r7, #8]
 80194d4:	785b      	ldrb	r3, [r3, #1]
 80194d6:	2b01      	cmp	r3, #1
 80194d8:	d117      	bne.n	801950a <HAL_PCD_EP_DB_Transmit+0xfe>
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	637b      	str	r3, [r7, #52]	@ 0x34
 80194e0:	68fb      	ldr	r3, [r7, #12]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	2250      	movs	r2, #80	@ 0x50
 80194e6:	5a9b      	ldrh	r3, [r3, r2]
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	001a      	movs	r2, r3
 80194ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194ee:	189b      	adds	r3, r3, r2
 80194f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80194f2:	68bb      	ldr	r3, [r7, #8]
 80194f4:	781b      	ldrb	r3, [r3, #0]
 80194f6:	00da      	lsls	r2, r3, #3
 80194f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194fa:	18d3      	adds	r3, r2, r3
 80194fc:	4aa1      	ldr	r2, [pc, #644]	@ (8019784 <HAL_PCD_EP_DB_Transmit+0x378>)
 80194fe:	4694      	mov	ip, r2
 8019500:	4463      	add	r3, ip
 8019502:	633b      	str	r3, [r7, #48]	@ 0x30
 8019504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019506:	2200      	movs	r2, #0
 8019508:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019510:	68bb      	ldr	r3, [r7, #8]
 8019512:	785b      	ldrb	r3, [r3, #1]
 8019514:	2b00      	cmp	r3, #0
 8019516:	d125      	bne.n	8019564 <HAL_PCD_EP_DB_Transmit+0x158>
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	61fb      	str	r3, [r7, #28]
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	2250      	movs	r2, #80	@ 0x50
 8019524:	5a9b      	ldrh	r3, [r3, r2]
 8019526:	b29b      	uxth	r3, r3
 8019528:	001a      	movs	r2, r3
 801952a:	69fb      	ldr	r3, [r7, #28]
 801952c:	189b      	adds	r3, r3, r2
 801952e:	61fb      	str	r3, [r7, #28]
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	781b      	ldrb	r3, [r3, #0]
 8019534:	00da      	lsls	r2, r3, #3
 8019536:	69fb      	ldr	r3, [r7, #28]
 8019538:	18d3      	adds	r3, r2, r3
 801953a:	4a94      	ldr	r2, [pc, #592]	@ (801978c <HAL_PCD_EP_DB_Transmit+0x380>)
 801953c:	4694      	mov	ip, r2
 801953e:	4463      	add	r3, ip
 8019540:	61bb      	str	r3, [r7, #24]
 8019542:	69bb      	ldr	r3, [r7, #24]
 8019544:	881b      	ldrh	r3, [r3, #0]
 8019546:	b29b      	uxth	r3, r3
 8019548:	059b      	lsls	r3, r3, #22
 801954a:	0d9b      	lsrs	r3, r3, #22
 801954c:	b29a      	uxth	r2, r3
 801954e:	69bb      	ldr	r3, [r7, #24]
 8019550:	801a      	strh	r2, [r3, #0]
 8019552:	69bb      	ldr	r3, [r7, #24]
 8019554:	881b      	ldrh	r3, [r3, #0]
 8019556:	b29b      	uxth	r3, r3
 8019558:	4a8b      	ldr	r2, [pc, #556]	@ (8019788 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801955a:	4313      	orrs	r3, r2
 801955c:	b29a      	uxth	r2, r3
 801955e:	69bb      	ldr	r3, [r7, #24]
 8019560:	801a      	strh	r2, [r3, #0]
 8019562:	e018      	b.n	8019596 <HAL_PCD_EP_DB_Transmit+0x18a>
 8019564:	68bb      	ldr	r3, [r7, #8]
 8019566:	785b      	ldrb	r3, [r3, #1]
 8019568:	2b01      	cmp	r3, #1
 801956a:	d114      	bne.n	8019596 <HAL_PCD_EP_DB_Transmit+0x18a>
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	2250      	movs	r2, #80	@ 0x50
 8019572:	5a9b      	ldrh	r3, [r3, r2]
 8019574:	b29b      	uxth	r3, r3
 8019576:	001a      	movs	r2, r3
 8019578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801957a:	189b      	adds	r3, r3, r2
 801957c:	627b      	str	r3, [r7, #36]	@ 0x24
 801957e:	68bb      	ldr	r3, [r7, #8]
 8019580:	781b      	ldrb	r3, [r3, #0]
 8019582:	00da      	lsls	r2, r3, #3
 8019584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019586:	18d3      	adds	r3, r2, r3
 8019588:	4a80      	ldr	r2, [pc, #512]	@ (801978c <HAL_PCD_EP_DB_Transmit+0x380>)
 801958a:	4694      	mov	ip, r2
 801958c:	4463      	add	r3, ip
 801958e:	623b      	str	r3, [r7, #32]
 8019590:	6a3b      	ldr	r3, [r7, #32]
 8019592:	2200      	movs	r2, #0
 8019594:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019596:	68bb      	ldr	r3, [r7, #8]
 8019598:	781a      	ldrb	r2, [r3, #0]
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	0011      	movs	r1, r2
 801959e:	0018      	movs	r0, r3
 80195a0:	f008 fd2e 	bl	8022000 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80195a4:	1dbb      	adds	r3, r7, #6
 80195a6:	881a      	ldrh	r2, [r3, #0]
 80195a8:	2380      	movs	r3, #128	@ 0x80
 80195aa:	01db      	lsls	r3, r3, #7
 80195ac:	4013      	ands	r3, r2
 80195ae:	d100      	bne.n	80195b2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80195b0:	e309      	b.n	8019bc6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	001a      	movs	r2, r3
 80195b8:	68bb      	ldr	r3, [r7, #8]
 80195ba:	781b      	ldrb	r3, [r3, #0]
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	18d3      	adds	r3, r2, r3
 80195c0:	881b      	ldrh	r3, [r3, #0]
 80195c2:	b29a      	uxth	r2, r3
 80195c4:	2016      	movs	r0, #22
 80195c6:	183b      	adds	r3, r7, r0
 80195c8:	4971      	ldr	r1, [pc, #452]	@ (8019790 <HAL_PCD_EP_DB_Transmit+0x384>)
 80195ca:	400a      	ands	r2, r1
 80195cc:	801a      	strh	r2, [r3, #0]
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	001a      	movs	r2, r3
 80195d4:	68bb      	ldr	r3, [r7, #8]
 80195d6:	781b      	ldrb	r3, [r3, #0]
 80195d8:	009b      	lsls	r3, r3, #2
 80195da:	18d3      	adds	r3, r2, r3
 80195dc:	183a      	adds	r2, r7, r0
 80195de:	8812      	ldrh	r2, [r2, #0]
 80195e0:	496c      	ldr	r1, [pc, #432]	@ (8019794 <HAL_PCD_EP_DB_Transmit+0x388>)
 80195e2:	430a      	orrs	r2, r1
 80195e4:	b292      	uxth	r2, r2
 80195e6:	801a      	strh	r2, [r3, #0]
 80195e8:	e2ed      	b.n	8019bc6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80195ea:	1dbb      	adds	r3, r7, #6
 80195ec:	881a      	ldrh	r2, [r3, #0]
 80195ee:	2380      	movs	r3, #128	@ 0x80
 80195f0:	01db      	lsls	r3, r3, #7
 80195f2:	4013      	ands	r3, r2
 80195f4:	d01a      	beq.n	801962c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	001a      	movs	r2, r3
 80195fc:	68bb      	ldr	r3, [r7, #8]
 80195fe:	781b      	ldrb	r3, [r3, #0]
 8019600:	009b      	lsls	r3, r3, #2
 8019602:	18d3      	adds	r3, r2, r3
 8019604:	881b      	ldrh	r3, [r3, #0]
 8019606:	b29a      	uxth	r2, r3
 8019608:	208a      	movs	r0, #138	@ 0x8a
 801960a:	183b      	adds	r3, r7, r0
 801960c:	4960      	ldr	r1, [pc, #384]	@ (8019790 <HAL_PCD_EP_DB_Transmit+0x384>)
 801960e:	400a      	ands	r2, r1
 8019610:	801a      	strh	r2, [r3, #0]
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	001a      	movs	r2, r3
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	781b      	ldrb	r3, [r3, #0]
 801961c:	009b      	lsls	r3, r3, #2
 801961e:	18d3      	adds	r3, r2, r3
 8019620:	183a      	adds	r2, r7, r0
 8019622:	8812      	ldrh	r2, [r2, #0]
 8019624:	495b      	ldr	r1, [pc, #364]	@ (8019794 <HAL_PCD_EP_DB_Transmit+0x388>)
 8019626:	430a      	orrs	r2, r1
 8019628:	b292      	uxth	r2, r2
 801962a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801962c:	68bb      	ldr	r3, [r7, #8]
 801962e:	2224      	movs	r2, #36	@ 0x24
 8019630:	5c9b      	ldrb	r3, [r3, r2]
 8019632:	2b01      	cmp	r3, #1
 8019634:	d000      	beq.n	8019638 <HAL_PCD_EP_DB_Transmit+0x22c>
 8019636:	e2c6      	b.n	8019bc6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	695a      	ldr	r2, [r3, #20]
 801963c:	2186      	movs	r1, #134	@ 0x86
 801963e:	187b      	adds	r3, r7, r1
 8019640:	881b      	ldrh	r3, [r3, #0]
 8019642:	18d2      	adds	r2, r2, r3
 8019644:	68bb      	ldr	r3, [r7, #8]
 8019646:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019648:	68bb      	ldr	r3, [r7, #8]
 801964a:	69da      	ldr	r2, [r3, #28]
 801964c:	187b      	adds	r3, r7, r1
 801964e:	881b      	ldrh	r3, [r3, #0]
 8019650:	18d2      	adds	r2, r2, r3
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	6a1a      	ldr	r2, [r3, #32]
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	691b      	ldr	r3, [r3, #16]
 801965e:	429a      	cmp	r2, r3
 8019660:	d30c      	bcc.n	801967c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	691b      	ldr	r3, [r3, #16]
 8019666:	218c      	movs	r1, #140	@ 0x8c
 8019668:	187a      	adds	r2, r7, r1
 801966a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801966c:	68bb      	ldr	r3, [r7, #8]
 801966e:	6a1a      	ldr	r2, [r3, #32]
 8019670:	187b      	adds	r3, r7, r1
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	1ad2      	subs	r2, r2, r3
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	621a      	str	r2, [r3, #32]
 801967a:	e01a      	b.n	80196b2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801967c:	68bb      	ldr	r3, [r7, #8]
 801967e:	6a1b      	ldr	r3, [r3, #32]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d10a      	bne.n	801969a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8019684:	2386      	movs	r3, #134	@ 0x86
 8019686:	18fb      	adds	r3, r7, r3
 8019688:	881b      	ldrh	r3, [r3, #0]
 801968a:	228c      	movs	r2, #140	@ 0x8c
 801968c:	18ba      	adds	r2, r7, r2
 801968e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	2224      	movs	r2, #36	@ 0x24
 8019694:	2100      	movs	r1, #0
 8019696:	5499      	strb	r1, [r3, r2]
 8019698:	e00b      	b.n	80196b2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	2224      	movs	r2, #36	@ 0x24
 801969e:	2100      	movs	r1, #0
 80196a0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80196a2:	68bb      	ldr	r3, [r7, #8]
 80196a4:	6a1b      	ldr	r3, [r3, #32]
 80196a6:	228c      	movs	r2, #140	@ 0x8c
 80196a8:	18ba      	adds	r2, r7, r2
 80196aa:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	2200      	movs	r2, #0
 80196b0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80196b2:	68bb      	ldr	r3, [r7, #8]
 80196b4:	785b      	ldrb	r3, [r3, #1]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d000      	beq.n	80196bc <HAL_PCD_EP_DB_Transmit+0x2b0>
 80196ba:	e06d      	b.n	8019798 <HAL_PCD_EP_DB_Transmit+0x38c>
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	2250      	movs	r2, #80	@ 0x50
 80196c8:	5a9b      	ldrh	r3, [r3, r2]
 80196ca:	b29b      	uxth	r3, r3
 80196cc:	001a      	movs	r2, r3
 80196ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196d0:	189b      	adds	r3, r3, r2
 80196d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80196d4:	68bb      	ldr	r3, [r7, #8]
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	00da      	lsls	r2, r3, #3
 80196da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80196dc:	18d3      	adds	r3, r2, r3
 80196de:	4a29      	ldr	r2, [pc, #164]	@ (8019784 <HAL_PCD_EP_DB_Transmit+0x378>)
 80196e0:	4694      	mov	ip, r2
 80196e2:	4463      	add	r3, ip
 80196e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80196e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196e8:	881b      	ldrh	r3, [r3, #0]
 80196ea:	b29b      	uxth	r3, r3
 80196ec:	059b      	lsls	r3, r3, #22
 80196ee:	0d9b      	lsrs	r3, r3, #22
 80196f0:	b29a      	uxth	r2, r3
 80196f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196f4:	801a      	strh	r2, [r3, #0]
 80196f6:	228c      	movs	r2, #140	@ 0x8c
 80196f8:	18bb      	adds	r3, r7, r2
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80196fe:	d91a      	bls.n	8019736 <HAL_PCD_EP_DB_Transmit+0x32a>
 8019700:	18bb      	adds	r3, r7, r2
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	095b      	lsrs	r3, r3, #5
 8019706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019708:	18bb      	adds	r3, r7, r2
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	221f      	movs	r2, #31
 801970e:	4013      	ands	r3, r2
 8019710:	d102      	bne.n	8019718 <HAL_PCD_EP_DB_Transmit+0x30c>
 8019712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019714:	3b01      	subs	r3, #1
 8019716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801971a:	881b      	ldrh	r3, [r3, #0]
 801971c:	b29a      	uxth	r2, r3
 801971e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019720:	b29b      	uxth	r3, r3
 8019722:	029b      	lsls	r3, r3, #10
 8019724:	b29b      	uxth	r3, r3
 8019726:	4313      	orrs	r3, r2
 8019728:	b29b      	uxth	r3, r3
 801972a:	4a17      	ldr	r2, [pc, #92]	@ (8019788 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801972c:	4313      	orrs	r3, r2
 801972e:	b29a      	uxth	r2, r3
 8019730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019732:	801a      	strh	r2, [r3, #0]
 8019734:	e04f      	b.n	80197d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019736:	238c      	movs	r3, #140	@ 0x8c
 8019738:	18fb      	adds	r3, r7, r3
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d108      	bne.n	8019752 <HAL_PCD_EP_DB_Transmit+0x346>
 8019740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019742:	881b      	ldrh	r3, [r3, #0]
 8019744:	b29b      	uxth	r3, r3
 8019746:	4a10      	ldr	r2, [pc, #64]	@ (8019788 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019748:	4313      	orrs	r3, r2
 801974a:	b29a      	uxth	r2, r3
 801974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801974e:	801a      	strh	r2, [r3, #0]
 8019750:	e041      	b.n	80197d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019752:	228c      	movs	r2, #140	@ 0x8c
 8019754:	18bb      	adds	r3, r7, r2
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	085b      	lsrs	r3, r3, #1
 801975a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801975c:	18bb      	adds	r3, r7, r2
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	2201      	movs	r2, #1
 8019762:	4013      	ands	r3, r2
 8019764:	d002      	beq.n	801976c <HAL_PCD_EP_DB_Transmit+0x360>
 8019766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019768:	3301      	adds	r3, #1
 801976a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801976c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801976e:	881b      	ldrh	r3, [r3, #0]
 8019770:	b29a      	uxth	r2, r3
 8019772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019774:	b29b      	uxth	r3, r3
 8019776:	029b      	lsls	r3, r3, #10
 8019778:	b29b      	uxth	r3, r3
 801977a:	4313      	orrs	r3, r2
 801977c:	b29a      	uxth	r2, r3
 801977e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019780:	801a      	strh	r2, [r3, #0]
 8019782:	e028      	b.n	80197d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019784:	00000402 	.word	0x00000402
 8019788:	ffff8000 	.word	0xffff8000
 801978c:	00000406 	.word	0x00000406
 8019790:	ffff8f8f 	.word	0xffff8f8f
 8019794:	ffffc080 	.word	0xffffc080
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	785b      	ldrb	r3, [r3, #1]
 801979c:	2b01      	cmp	r3, #1
 801979e:	d11a      	bne.n	80197d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	2250      	movs	r2, #80	@ 0x50
 80197ac:	5a9b      	ldrh	r3, [r3, r2]
 80197ae:	b29b      	uxth	r3, r3
 80197b0:	001a      	movs	r2, r3
 80197b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197b4:	189b      	adds	r3, r3, r2
 80197b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80197b8:	68bb      	ldr	r3, [r7, #8]
 80197ba:	781b      	ldrb	r3, [r3, #0]
 80197bc:	00da      	lsls	r2, r3, #3
 80197be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80197c0:	18d3      	adds	r3, r2, r3
 80197c2:	4adb      	ldr	r2, [pc, #876]	@ (8019b30 <HAL_PCD_EP_DB_Transmit+0x724>)
 80197c4:	4694      	mov	ip, r2
 80197c6:	4463      	add	r3, ip
 80197c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80197ca:	238c      	movs	r3, #140	@ 0x8c
 80197cc:	18fb      	adds	r3, r7, r3
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	b29a      	uxth	r2, r3
 80197d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	6818      	ldr	r0, [r3, #0]
 80197da:	68bb      	ldr	r3, [r7, #8]
 80197dc:	6959      	ldr	r1, [r3, #20]
 80197de:	68bb      	ldr	r3, [r7, #8]
 80197e0:	891a      	ldrh	r2, [r3, #8]
 80197e2:	238c      	movs	r3, #140	@ 0x8c
 80197e4:	18fb      	adds	r3, r7, r3
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	b29b      	uxth	r3, r3
 80197ea:	f006 fb85 	bl	801fef8 <USB_WritePMA>
 80197ee:	e1ea      	b.n	8019bc6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	2250      	movs	r2, #80	@ 0x50
 80197f6:	5a9b      	ldrh	r3, [r3, r2]
 80197f8:	b29b      	uxth	r3, r3
 80197fa:	001a      	movs	r2, r3
 80197fc:	68bb      	ldr	r3, [r7, #8]
 80197fe:	781b      	ldrb	r3, [r3, #0]
 8019800:	00db      	lsls	r3, r3, #3
 8019802:	18d2      	adds	r2, r2, r3
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	18d3      	adds	r3, r2, r3
 801980a:	4aca      	ldr	r2, [pc, #808]	@ (8019b34 <HAL_PCD_EP_DB_Transmit+0x728>)
 801980c:	4694      	mov	ip, r2
 801980e:	4463      	add	r3, ip
 8019810:	881a      	ldrh	r2, [r3, #0]
 8019812:	2186      	movs	r1, #134	@ 0x86
 8019814:	187b      	adds	r3, r7, r1
 8019816:	0592      	lsls	r2, r2, #22
 8019818:	0d92      	lsrs	r2, r2, #22
 801981a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801981c:	68bb      	ldr	r3, [r7, #8]
 801981e:	699a      	ldr	r2, [r3, #24]
 8019820:	187b      	adds	r3, r7, r1
 8019822:	881b      	ldrh	r3, [r3, #0]
 8019824:	429a      	cmp	r2, r3
 8019826:	d307      	bcc.n	8019838 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	699a      	ldr	r2, [r3, #24]
 801982c:	187b      	adds	r3, r7, r1
 801982e:	881b      	ldrh	r3, [r3, #0]
 8019830:	1ad2      	subs	r2, r2, r3
 8019832:	68bb      	ldr	r3, [r7, #8]
 8019834:	619a      	str	r2, [r3, #24]
 8019836:	e002      	b.n	801983e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	2200      	movs	r2, #0
 801983c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801983e:	68bb      	ldr	r3, [r7, #8]
 8019840:	699b      	ldr	r3, [r3, #24]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d000      	beq.n	8019848 <HAL_PCD_EP_DB_Transmit+0x43c>
 8019846:	e0bb      	b.n	80199c0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019848:	68bb      	ldr	r3, [r7, #8]
 801984a:	785b      	ldrb	r3, [r3, #1]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d125      	bne.n	801989c <HAL_PCD_EP_DB_Transmit+0x490>
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	2250      	movs	r2, #80	@ 0x50
 801985c:	5a9b      	ldrh	r3, [r3, r2]
 801985e:	b29b      	uxth	r3, r3
 8019860:	001a      	movs	r2, r3
 8019862:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019864:	189b      	adds	r3, r3, r2
 8019866:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019868:	68bb      	ldr	r3, [r7, #8]
 801986a:	781b      	ldrb	r3, [r3, #0]
 801986c:	00da      	lsls	r2, r3, #3
 801986e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019870:	18d3      	adds	r3, r2, r3
 8019872:	4aaf      	ldr	r2, [pc, #700]	@ (8019b30 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019874:	4694      	mov	ip, r2
 8019876:	4463      	add	r3, ip
 8019878:	67bb      	str	r3, [r7, #120]	@ 0x78
 801987a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801987c:	881b      	ldrh	r3, [r3, #0]
 801987e:	b29b      	uxth	r3, r3
 8019880:	059b      	lsls	r3, r3, #22
 8019882:	0d9b      	lsrs	r3, r3, #22
 8019884:	b29a      	uxth	r2, r3
 8019886:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019888:	801a      	strh	r2, [r3, #0]
 801988a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801988c:	881b      	ldrh	r3, [r3, #0]
 801988e:	b29b      	uxth	r3, r3
 8019890:	4aa9      	ldr	r2, [pc, #676]	@ (8019b38 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019892:	4313      	orrs	r3, r2
 8019894:	b29a      	uxth	r2, r3
 8019896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019898:	801a      	strh	r2, [r3, #0]
 801989a:	e01b      	b.n	80198d4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801989c:	68bb      	ldr	r3, [r7, #8]
 801989e:	785b      	ldrb	r3, [r3, #1]
 80198a0:	2b01      	cmp	r3, #1
 80198a2:	d117      	bne.n	80198d4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80198aa:	68fb      	ldr	r3, [r7, #12]
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	2250      	movs	r2, #80	@ 0x50
 80198b0:	5a9b      	ldrh	r3, [r3, r2]
 80198b2:	b29b      	uxth	r3, r3
 80198b4:	001a      	movs	r2, r3
 80198b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198b8:	189b      	adds	r3, r3, r2
 80198ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80198bc:	68bb      	ldr	r3, [r7, #8]
 80198be:	781b      	ldrb	r3, [r3, #0]
 80198c0:	00da      	lsls	r2, r3, #3
 80198c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198c4:	18d3      	adds	r3, r2, r3
 80198c6:	4a9a      	ldr	r2, [pc, #616]	@ (8019b30 <HAL_PCD_EP_DB_Transmit+0x724>)
 80198c8:	4694      	mov	ip, r2
 80198ca:	4463      	add	r3, ip
 80198cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80198ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80198d0:	2200      	movs	r2, #0
 80198d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	785b      	ldrb	r3, [r3, #1]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d12b      	bne.n	801993a <HAL_PCD_EP_DB_Transmit+0x52e>
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	2250      	movs	r2, #80	@ 0x50
 80198ee:	5a9b      	ldrh	r3, [r3, r2]
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	001a      	movs	r2, r3
 80198f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80198f6:	189b      	adds	r3, r3, r2
 80198f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80198fa:	68bb      	ldr	r3, [r7, #8]
 80198fc:	781b      	ldrb	r3, [r3, #0]
 80198fe:	00da      	lsls	r2, r3, #3
 8019900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019902:	18d3      	adds	r3, r2, r3
 8019904:	4a8b      	ldr	r2, [pc, #556]	@ (8019b34 <HAL_PCD_EP_DB_Transmit+0x728>)
 8019906:	4694      	mov	ip, r2
 8019908:	4463      	add	r3, ip
 801990a:	2180      	movs	r1, #128	@ 0x80
 801990c:	187a      	adds	r2, r7, r1
 801990e:	6013      	str	r3, [r2, #0]
 8019910:	187b      	adds	r3, r7, r1
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	881b      	ldrh	r3, [r3, #0]
 8019916:	b29b      	uxth	r3, r3
 8019918:	059b      	lsls	r3, r3, #22
 801991a:	0d9b      	lsrs	r3, r3, #22
 801991c:	b29a      	uxth	r2, r3
 801991e:	187b      	adds	r3, r7, r1
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	801a      	strh	r2, [r3, #0]
 8019924:	187b      	adds	r3, r7, r1
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	881b      	ldrh	r3, [r3, #0]
 801992a:	b29b      	uxth	r3, r3
 801992c:	4a82      	ldr	r2, [pc, #520]	@ (8019b38 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801992e:	4313      	orrs	r3, r2
 8019930:	b29a      	uxth	r2, r3
 8019932:	187b      	adds	r3, r7, r1
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	801a      	strh	r2, [r3, #0]
 8019938:	e018      	b.n	801996c <HAL_PCD_EP_DB_Transmit+0x560>
 801993a:	68bb      	ldr	r3, [r7, #8]
 801993c:	785b      	ldrb	r3, [r3, #1]
 801993e:	2b01      	cmp	r3, #1
 8019940:	d114      	bne.n	801996c <HAL_PCD_EP_DB_Transmit+0x560>
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	2250      	movs	r2, #80	@ 0x50
 8019948:	5a9b      	ldrh	r3, [r3, r2]
 801994a:	b29b      	uxth	r3, r3
 801994c:	001a      	movs	r2, r3
 801994e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019950:	189b      	adds	r3, r3, r2
 8019952:	677b      	str	r3, [r7, #116]	@ 0x74
 8019954:	68bb      	ldr	r3, [r7, #8]
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	00da      	lsls	r2, r3, #3
 801995a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801995c:	18d3      	adds	r3, r2, r3
 801995e:	4a75      	ldr	r2, [pc, #468]	@ (8019b34 <HAL_PCD_EP_DB_Transmit+0x728>)
 8019960:	4694      	mov	ip, r2
 8019962:	4463      	add	r3, ip
 8019964:	673b      	str	r3, [r7, #112]	@ 0x70
 8019966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019968:	2200      	movs	r2, #0
 801996a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	781a      	ldrb	r2, [r3, #0]
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	0011      	movs	r1, r2
 8019974:	0018      	movs	r0, r3
 8019976:	f008 fb43 	bl	8022000 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801997a:	1dbb      	adds	r3, r7, #6
 801997c:	881a      	ldrh	r2, [r3, #0]
 801997e:	2380      	movs	r3, #128	@ 0x80
 8019980:	01db      	lsls	r3, r3, #7
 8019982:	4013      	ands	r3, r2
 8019984:	d000      	beq.n	8019988 <HAL_PCD_EP_DB_Transmit+0x57c>
 8019986:	e11e      	b.n	8019bc6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	001a      	movs	r2, r3
 801998e:	68bb      	ldr	r3, [r7, #8]
 8019990:	781b      	ldrb	r3, [r3, #0]
 8019992:	009b      	lsls	r3, r3, #2
 8019994:	18d3      	adds	r3, r2, r3
 8019996:	881b      	ldrh	r3, [r3, #0]
 8019998:	b29a      	uxth	r2, r3
 801999a:	2088      	movs	r0, #136	@ 0x88
 801999c:	183b      	adds	r3, r7, r0
 801999e:	4967      	ldr	r1, [pc, #412]	@ (8019b3c <HAL_PCD_EP_DB_Transmit+0x730>)
 80199a0:	400a      	ands	r2, r1
 80199a2:	801a      	strh	r2, [r3, #0]
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	001a      	movs	r2, r3
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	009b      	lsls	r3, r3, #2
 80199b0:	18d3      	adds	r3, r2, r3
 80199b2:	183a      	adds	r2, r7, r0
 80199b4:	8812      	ldrh	r2, [r2, #0]
 80199b6:	4962      	ldr	r1, [pc, #392]	@ (8019b40 <HAL_PCD_EP_DB_Transmit+0x734>)
 80199b8:	430a      	orrs	r2, r1
 80199ba:	b292      	uxth	r2, r2
 80199bc:	801a      	strh	r2, [r3, #0]
 80199be:	e102      	b.n	8019bc6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80199c0:	1dbb      	adds	r3, r7, #6
 80199c2:	881a      	ldrh	r2, [r3, #0]
 80199c4:	2380      	movs	r3, #128	@ 0x80
 80199c6:	01db      	lsls	r3, r3, #7
 80199c8:	4013      	ands	r3, r2
 80199ca:	d11a      	bne.n	8019a02 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	001a      	movs	r2, r3
 80199d2:	68bb      	ldr	r3, [r7, #8]
 80199d4:	781b      	ldrb	r3, [r3, #0]
 80199d6:	009b      	lsls	r3, r3, #2
 80199d8:	18d3      	adds	r3, r2, r3
 80199da:	881b      	ldrh	r3, [r3, #0]
 80199dc:	b29a      	uxth	r2, r3
 80199de:	204e      	movs	r0, #78	@ 0x4e
 80199e0:	183b      	adds	r3, r7, r0
 80199e2:	4956      	ldr	r1, [pc, #344]	@ (8019b3c <HAL_PCD_EP_DB_Transmit+0x730>)
 80199e4:	400a      	ands	r2, r1
 80199e6:	801a      	strh	r2, [r3, #0]
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	001a      	movs	r2, r3
 80199ee:	68bb      	ldr	r3, [r7, #8]
 80199f0:	781b      	ldrb	r3, [r3, #0]
 80199f2:	009b      	lsls	r3, r3, #2
 80199f4:	18d3      	adds	r3, r2, r3
 80199f6:	183a      	adds	r2, r7, r0
 80199f8:	8812      	ldrh	r2, [r2, #0]
 80199fa:	4951      	ldr	r1, [pc, #324]	@ (8019b40 <HAL_PCD_EP_DB_Transmit+0x734>)
 80199fc:	430a      	orrs	r2, r1
 80199fe:	b292      	uxth	r2, r2
 8019a00:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019a02:	68bb      	ldr	r3, [r7, #8]
 8019a04:	2224      	movs	r2, #36	@ 0x24
 8019a06:	5c9b      	ldrb	r3, [r3, r2]
 8019a08:	2b01      	cmp	r3, #1
 8019a0a:	d000      	beq.n	8019a0e <HAL_PCD_EP_DB_Transmit+0x602>
 8019a0c:	e0db      	b.n	8019bc6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019a0e:	68bb      	ldr	r3, [r7, #8]
 8019a10:	695a      	ldr	r2, [r3, #20]
 8019a12:	2186      	movs	r1, #134	@ 0x86
 8019a14:	187b      	adds	r3, r7, r1
 8019a16:	881b      	ldrh	r3, [r3, #0]
 8019a18:	18d2      	adds	r2, r2, r3
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	69da      	ldr	r2, [r3, #28]
 8019a22:	187b      	adds	r3, r7, r1
 8019a24:	881b      	ldrh	r3, [r3, #0]
 8019a26:	18d2      	adds	r2, r2, r3
 8019a28:	68bb      	ldr	r3, [r7, #8]
 8019a2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	6a1a      	ldr	r2, [r3, #32]
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	691b      	ldr	r3, [r3, #16]
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d30c      	bcc.n	8019a52 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8019a38:	68bb      	ldr	r3, [r7, #8]
 8019a3a:	691b      	ldr	r3, [r3, #16]
 8019a3c:	218c      	movs	r1, #140	@ 0x8c
 8019a3e:	187a      	adds	r2, r7, r1
 8019a40:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8019a42:	68bb      	ldr	r3, [r7, #8]
 8019a44:	6a1a      	ldr	r2, [r3, #32]
 8019a46:	187b      	adds	r3, r7, r1
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	1ad2      	subs	r2, r2, r3
 8019a4c:	68bb      	ldr	r3, [r7, #8]
 8019a4e:	621a      	str	r2, [r3, #32]
 8019a50:	e01a      	b.n	8019a88 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8019a52:	68bb      	ldr	r3, [r7, #8]
 8019a54:	6a1b      	ldr	r3, [r3, #32]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d10a      	bne.n	8019a70 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8019a5a:	2386      	movs	r3, #134	@ 0x86
 8019a5c:	18fb      	adds	r3, r7, r3
 8019a5e:	881b      	ldrh	r3, [r3, #0]
 8019a60:	228c      	movs	r2, #140	@ 0x8c
 8019a62:	18ba      	adds	r2, r7, r2
 8019a64:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8019a66:	68bb      	ldr	r3, [r7, #8]
 8019a68:	2224      	movs	r2, #36	@ 0x24
 8019a6a:	2100      	movs	r1, #0
 8019a6c:	5499      	strb	r1, [r3, r2]
 8019a6e:	e00b      	b.n	8019a88 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	6a1b      	ldr	r3, [r3, #32]
 8019a74:	228c      	movs	r2, #140	@ 0x8c
 8019a76:	18ba      	adds	r2, r7, r2
 8019a78:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019a7a:	68bb      	ldr	r3, [r7, #8]
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8019a80:	68bb      	ldr	r3, [r7, #8]
 8019a82:	2224      	movs	r2, #36	@ 0x24
 8019a84:	2100      	movs	r1, #0
 8019a86:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8019a8e:	68bb      	ldr	r3, [r7, #8]
 8019a90:	785b      	ldrb	r3, [r3, #1]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d000      	beq.n	8019a98 <HAL_PCD_EP_DB_Transmit+0x68c>
 8019a96:	e06e      	b.n	8019b76 <HAL_PCD_EP_DB_Transmit+0x76a>
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	2250      	movs	r2, #80	@ 0x50
 8019aa4:	5a9b      	ldrh	r3, [r3, r2]
 8019aa6:	b29b      	uxth	r3, r3
 8019aa8:	001a      	movs	r2, r3
 8019aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019aac:	189b      	adds	r3, r3, r2
 8019aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	00da      	lsls	r2, r3, #3
 8019ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ab8:	18d3      	adds	r3, r2, r3
 8019aba:	4a1e      	ldr	r2, [pc, #120]	@ (8019b34 <HAL_PCD_EP_DB_Transmit+0x728>)
 8019abc:	4694      	mov	ip, r2
 8019abe:	4463      	add	r3, ip
 8019ac0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019ac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019ac4:	881b      	ldrh	r3, [r3, #0]
 8019ac6:	b29b      	uxth	r3, r3
 8019ac8:	059b      	lsls	r3, r3, #22
 8019aca:	0d9b      	lsrs	r3, r3, #22
 8019acc:	b29a      	uxth	r2, r3
 8019ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019ad0:	801a      	strh	r2, [r3, #0]
 8019ad2:	228c      	movs	r2, #140	@ 0x8c
 8019ad4:	18bb      	adds	r3, r7, r2
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	2b3e      	cmp	r3, #62	@ 0x3e
 8019ada:	d91a      	bls.n	8019b12 <HAL_PCD_EP_DB_Transmit+0x706>
 8019adc:	18bb      	adds	r3, r7, r2
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	095b      	lsrs	r3, r3, #5
 8019ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019ae4:	18bb      	adds	r3, r7, r2
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	221f      	movs	r2, #31
 8019aea:	4013      	ands	r3, r2
 8019aec:	d102      	bne.n	8019af4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8019aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019af0:	3b01      	subs	r3, #1
 8019af2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019af6:	881b      	ldrh	r3, [r3, #0]
 8019af8:	b29a      	uxth	r2, r3
 8019afa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019afc:	b29b      	uxth	r3, r3
 8019afe:	029b      	lsls	r3, r3, #10
 8019b00:	b29b      	uxth	r3, r3
 8019b02:	4313      	orrs	r3, r2
 8019b04:	b29b      	uxth	r3, r3
 8019b06:	4a0c      	ldr	r2, [pc, #48]	@ (8019b38 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019b08:	4313      	orrs	r3, r2
 8019b0a:	b29a      	uxth	r2, r3
 8019b0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b0e:	801a      	strh	r2, [r3, #0]
 8019b10:	e04d      	b.n	8019bae <HAL_PCD_EP_DB_Transmit+0x7a2>
 8019b12:	238c      	movs	r3, #140	@ 0x8c
 8019b14:	18fb      	adds	r3, r7, r3
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d113      	bne.n	8019b44 <HAL_PCD_EP_DB_Transmit+0x738>
 8019b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b1e:	881b      	ldrh	r3, [r3, #0]
 8019b20:	b29b      	uxth	r3, r3
 8019b22:	4a05      	ldr	r2, [pc, #20]	@ (8019b38 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019b24:	4313      	orrs	r3, r2
 8019b26:	b29a      	uxth	r2, r3
 8019b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b2a:	801a      	strh	r2, [r3, #0]
 8019b2c:	e03f      	b.n	8019bae <HAL_PCD_EP_DB_Transmit+0x7a2>
 8019b2e:	46c0      	nop			@ (mov r8, r8)
 8019b30:	00000402 	.word	0x00000402
 8019b34:	00000406 	.word	0x00000406
 8019b38:	ffff8000 	.word	0xffff8000
 8019b3c:	ffff8f8f 	.word	0xffff8f8f
 8019b40:	ffffc080 	.word	0xffffc080
 8019b44:	228c      	movs	r2, #140	@ 0x8c
 8019b46:	18bb      	adds	r3, r7, r2
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	085b      	lsrs	r3, r3, #1
 8019b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019b4e:	18bb      	adds	r3, r7, r2
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	2201      	movs	r2, #1
 8019b54:	4013      	ands	r3, r2
 8019b56:	d002      	beq.n	8019b5e <HAL_PCD_EP_DB_Transmit+0x752>
 8019b58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b5a:	3301      	adds	r3, #1
 8019b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b60:	881b      	ldrh	r3, [r3, #0]
 8019b62:	b29a      	uxth	r2, r3
 8019b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b66:	b29b      	uxth	r3, r3
 8019b68:	029b      	lsls	r3, r3, #10
 8019b6a:	b29b      	uxth	r3, r3
 8019b6c:	4313      	orrs	r3, r2
 8019b6e:	b29a      	uxth	r2, r3
 8019b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019b72:	801a      	strh	r2, [r3, #0]
 8019b74:	e01b      	b.n	8019bae <HAL_PCD_EP_DB_Transmit+0x7a2>
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	785b      	ldrb	r3, [r3, #1]
 8019b7a:	2b01      	cmp	r3, #1
 8019b7c:	d117      	bne.n	8019bae <HAL_PCD_EP_DB_Transmit+0x7a2>
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2250      	movs	r2, #80	@ 0x50
 8019b84:	5a9b      	ldrh	r3, [r3, r2]
 8019b86:	b29b      	uxth	r3, r3
 8019b88:	001a      	movs	r2, r3
 8019b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b8c:	189b      	adds	r3, r3, r2
 8019b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	781b      	ldrb	r3, [r3, #0]
 8019b94:	00da      	lsls	r2, r3, #3
 8019b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b98:	18d3      	adds	r3, r2, r3
 8019b9a:	4a21      	ldr	r2, [pc, #132]	@ (8019c20 <HAL_PCD_EP_DB_Transmit+0x814>)
 8019b9c:	4694      	mov	ip, r2
 8019b9e:	4463      	add	r3, ip
 8019ba0:	653b      	str	r3, [r7, #80]	@ 0x50
 8019ba2:	238c      	movs	r3, #140	@ 0x8c
 8019ba4:	18fb      	adds	r3, r7, r3
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019bac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	6818      	ldr	r0, [r3, #0]
 8019bb2:	68bb      	ldr	r3, [r7, #8]
 8019bb4:	6959      	ldr	r1, [r3, #20]
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	895a      	ldrh	r2, [r3, #10]
 8019bba:	238c      	movs	r3, #140	@ 0x8c
 8019bbc:	18fb      	adds	r3, r7, r3
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	b29b      	uxth	r3, r3
 8019bc2:	f006 f999 	bl	801fef8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	001a      	movs	r2, r3
 8019bcc:	68bb      	ldr	r3, [r7, #8]
 8019bce:	781b      	ldrb	r3, [r3, #0]
 8019bd0:	009b      	lsls	r3, r3, #2
 8019bd2:	18d3      	adds	r3, r2, r3
 8019bd4:	881b      	ldrh	r3, [r3, #0]
 8019bd6:	b29a      	uxth	r2, r3
 8019bd8:	2014      	movs	r0, #20
 8019bda:	183b      	adds	r3, r7, r0
 8019bdc:	4911      	ldr	r1, [pc, #68]	@ (8019c24 <HAL_PCD_EP_DB_Transmit+0x818>)
 8019bde:	400a      	ands	r2, r1
 8019be0:	801a      	strh	r2, [r3, #0]
 8019be2:	183b      	adds	r3, r7, r0
 8019be4:	183a      	adds	r2, r7, r0
 8019be6:	8812      	ldrh	r2, [r2, #0]
 8019be8:	2110      	movs	r1, #16
 8019bea:	404a      	eors	r2, r1
 8019bec:	801a      	strh	r2, [r3, #0]
 8019bee:	183b      	adds	r3, r7, r0
 8019bf0:	183a      	adds	r2, r7, r0
 8019bf2:	8812      	ldrh	r2, [r2, #0]
 8019bf4:	2120      	movs	r1, #32
 8019bf6:	404a      	eors	r2, r1
 8019bf8:	801a      	strh	r2, [r3, #0]
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	001a      	movs	r2, r3
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	781b      	ldrb	r3, [r3, #0]
 8019c04:	009b      	lsls	r3, r3, #2
 8019c06:	18d3      	adds	r3, r2, r3
 8019c08:	183a      	adds	r2, r7, r0
 8019c0a:	8812      	ldrh	r2, [r2, #0]
 8019c0c:	4906      	ldr	r1, [pc, #24]	@ (8019c28 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8019c0e:	430a      	orrs	r2, r1
 8019c10:	b292      	uxth	r2, r2
 8019c12:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8019c14:	2300      	movs	r3, #0
}
 8019c16:	0018      	movs	r0, r3
 8019c18:	46bd      	mov	sp, r7
 8019c1a:	b024      	add	sp, #144	@ 0x90
 8019c1c:	bd80      	pop	{r7, pc}
 8019c1e:	46c0      	nop			@ (mov r8, r8)
 8019c20:	00000406 	.word	0x00000406
 8019c24:	ffff8fbf 	.word	0xffff8fbf
 8019c28:	ffff8080 	.word	0xffff8080

08019c2c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8019c2c:	b590      	push	{r4, r7, lr}
 8019c2e:	b087      	sub	sp, #28
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	60f8      	str	r0, [r7, #12]
 8019c34:	0008      	movs	r0, r1
 8019c36:	0011      	movs	r1, r2
 8019c38:	607b      	str	r3, [r7, #4]
 8019c3a:	240a      	movs	r4, #10
 8019c3c:	193b      	adds	r3, r7, r4
 8019c3e:	1c02      	adds	r2, r0, #0
 8019c40:	801a      	strh	r2, [r3, #0]
 8019c42:	2308      	movs	r3, #8
 8019c44:	18fb      	adds	r3, r7, r3
 8019c46:	1c0a      	adds	r2, r1, #0
 8019c48:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8019c4a:	0021      	movs	r1, r4
 8019c4c:	187b      	adds	r3, r7, r1
 8019c4e:	881b      	ldrh	r3, [r3, #0]
 8019c50:	2280      	movs	r2, #128	@ 0x80
 8019c52:	4013      	ands	r3, r2
 8019c54:	b29b      	uxth	r3, r3
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d00c      	beq.n	8019c74 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c5a:	187b      	adds	r3, r7, r1
 8019c5c:	881b      	ldrh	r3, [r3, #0]
 8019c5e:	2207      	movs	r2, #7
 8019c60:	4013      	ands	r3, r2
 8019c62:	1c5a      	adds	r2, r3, #1
 8019c64:	0013      	movs	r3, r2
 8019c66:	009b      	lsls	r3, r3, #2
 8019c68:	189b      	adds	r3, r3, r2
 8019c6a:	00db      	lsls	r3, r3, #3
 8019c6c:	68fa      	ldr	r2, [r7, #12]
 8019c6e:	18d3      	adds	r3, r2, r3
 8019c70:	617b      	str	r3, [r7, #20]
 8019c72:	e00b      	b.n	8019c8c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019c74:	230a      	movs	r3, #10
 8019c76:	18fb      	adds	r3, r7, r3
 8019c78:	881a      	ldrh	r2, [r3, #0]
 8019c7a:	0013      	movs	r3, r2
 8019c7c:	009b      	lsls	r3, r3, #2
 8019c7e:	189b      	adds	r3, r3, r2
 8019c80:	00db      	lsls	r3, r3, #3
 8019c82:	3369      	adds	r3, #105	@ 0x69
 8019c84:	33ff      	adds	r3, #255	@ 0xff
 8019c86:	68fa      	ldr	r2, [r7, #12]
 8019c88:	18d3      	adds	r3, r2, r3
 8019c8a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8019c8c:	2308      	movs	r3, #8
 8019c8e:	18fb      	adds	r3, r7, r3
 8019c90:	881b      	ldrh	r3, [r3, #0]
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d107      	bne.n	8019ca6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	2200      	movs	r2, #0
 8019c9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	b29a      	uxth	r2, r3
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	80da      	strh	r2, [r3, #6]
 8019ca4:	e00b      	b.n	8019cbe <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	2201      	movs	r2, #1
 8019caa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	b29a      	uxth	r2, r3
 8019cb0:	697b      	ldr	r3, [r7, #20]
 8019cb2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	0c1b      	lsrs	r3, r3, #16
 8019cb8:	b29a      	uxth	r2, r3
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019cbe:	2300      	movs	r3, #0
}
 8019cc0:	0018      	movs	r0, r3
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	b007      	add	sp, #28
 8019cc6:	bd90      	pop	{r4, r7, pc}

08019cc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8019cc8:	b580      	push	{r7, lr}
 8019cca:	b084      	sub	sp, #16
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8019cd6:	687a      	ldr	r2, [r7, #4]
 8019cd8:	23ba      	movs	r3, #186	@ 0xba
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	2101      	movs	r1, #1
 8019cde:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8019ce0:	687a      	ldr	r2, [r7, #4]
 8019ce2:	23b8      	movs	r3, #184	@ 0xb8
 8019ce4:	009b      	lsls	r3, r3, #2
 8019ce6:	2100      	movs	r1, #0
 8019ce8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	2254      	movs	r2, #84	@ 0x54
 8019cee:	5a9b      	ldrh	r3, [r3, r2]
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	2201      	movs	r2, #1
 8019cf4:	4313      	orrs	r3, r2
 8019cf6:	b299      	uxth	r1, r3
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	2254      	movs	r2, #84	@ 0x54
 8019cfc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	2254      	movs	r2, #84	@ 0x54
 8019d02:	5a9b      	ldrh	r3, [r3, r2]
 8019d04:	b29b      	uxth	r3, r3
 8019d06:	2202      	movs	r2, #2
 8019d08:	4313      	orrs	r3, r2
 8019d0a:	b299      	uxth	r1, r3
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	2254      	movs	r2, #84	@ 0x54
 8019d10:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019d12:	2300      	movs	r3, #0
}
 8019d14:	0018      	movs	r0, r3
 8019d16:	46bd      	mov	sp, r7
 8019d18:	b004      	add	sp, #16
 8019d1a:	bd80      	pop	{r7, pc}

08019d1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	000a      	movs	r2, r1
 8019d26:	1cfb      	adds	r3, r7, #3
 8019d28:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8019d2a:	46c0      	nop			@ (mov r8, r8)
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	b002      	add	sp, #8
 8019d30:	bd80      	pop	{r7, pc}
	...

08019d34 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8019d38:	4b04      	ldr	r3, [pc, #16]	@ (8019d4c <HAL_PWR_EnableBkUpAccess+0x18>)
 8019d3a:	681a      	ldr	r2, [r3, #0]
 8019d3c:	4b03      	ldr	r3, [pc, #12]	@ (8019d4c <HAL_PWR_EnableBkUpAccess+0x18>)
 8019d3e:	2180      	movs	r1, #128	@ 0x80
 8019d40:	0049      	lsls	r1, r1, #1
 8019d42:	430a      	orrs	r2, r1
 8019d44:	601a      	str	r2, [r3, #0]
}
 8019d46:	46c0      	nop			@ (mov r8, r8)
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	bd80      	pop	{r7, pc}
 8019d4c:	40007000 	.word	0x40007000

08019d50 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8019d54:	4b04      	ldr	r3, [pc, #16]	@ (8019d68 <HAL_PWR_DisableBkUpAccess+0x18>)
 8019d56:	681a      	ldr	r2, [r3, #0]
 8019d58:	4b03      	ldr	r3, [pc, #12]	@ (8019d68 <HAL_PWR_DisableBkUpAccess+0x18>)
 8019d5a:	4904      	ldr	r1, [pc, #16]	@ (8019d6c <HAL_PWR_DisableBkUpAccess+0x1c>)
 8019d5c:	400a      	ands	r2, r1
 8019d5e:	601a      	str	r2, [r3, #0]
}
 8019d60:	46c0      	nop			@ (mov r8, r8)
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}
 8019d66:	46c0      	nop			@ (mov r8, r8)
 8019d68:	40007000 	.word	0x40007000
 8019d6c:	fffffeff 	.word	0xfffffeff

08019d70 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b086      	sub	sp, #24
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]
 8019d78:	000a      	movs	r2, r1
 8019d7a:	1cfb      	adds	r3, r7, #3
 8019d7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8019d7e:	2300      	movs	r3, #0
 8019d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8019d82:	4b25      	ldr	r3, [pc, #148]	@ (8019e18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019d84:	681a      	ldr	r2, [r3, #0]
 8019d86:	2380      	movs	r3, #128	@ 0x80
 8019d88:	009b      	lsls	r3, r3, #2
 8019d8a:	4013      	ands	r3, r2
 8019d8c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8019d8e:	4b23      	ldr	r3, [pc, #140]	@ (8019e1c <HAL_PWR_EnterSTOPMode+0xac>)
 8019d90:	6a1b      	ldr	r3, [r3, #32]
 8019d92:	2201      	movs	r2, #1
 8019d94:	4013      	ands	r3, r2
 8019d96:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8019d98:	693b      	ldr	r3, [r7, #16]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d008      	beq.n	8019db0 <HAL_PWR_EnterSTOPMode+0x40>
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d005      	beq.n	8019db0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8019da4:	4b1c      	ldr	r3, [pc, #112]	@ (8019e18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019da6:	681a      	ldr	r2, [r3, #0]
 8019da8:	4b1b      	ldr	r3, [pc, #108]	@ (8019e18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019daa:	491d      	ldr	r1, [pc, #116]	@ (8019e20 <HAL_PWR_EnterSTOPMode+0xb0>)
 8019dac:	400a      	ands	r2, r1
 8019dae:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8019db0:	4b19      	ldr	r3, [pc, #100]	@ (8019e18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8019db6:	697b      	ldr	r3, [r7, #20]
 8019db8:	2203      	movs	r2, #3
 8019dba:	4393      	bics	r3, r2
 8019dbc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8019dbe:	697a      	ldr	r2, [r7, #20]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	4313      	orrs	r3, r2
 8019dc4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8019dc6:	4b14      	ldr	r3, [pc, #80]	@ (8019e18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019dc8:	697a      	ldr	r2, [r7, #20]
 8019dca:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019dcc:	4b15      	ldr	r3, [pc, #84]	@ (8019e24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8019dce:	691a      	ldr	r2, [r3, #16]
 8019dd0:	4b14      	ldr	r3, [pc, #80]	@ (8019e24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8019dd2:	2104      	movs	r1, #4
 8019dd4:	430a      	orrs	r2, r1
 8019dd6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8019dd8:	1cfb      	adds	r3, r7, #3
 8019dda:	781b      	ldrb	r3, [r3, #0]
 8019ddc:	2b01      	cmp	r3, #1
 8019dde:	d101      	bne.n	8019de4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8019de0:	bf30      	wfi
 8019de2:	e002      	b.n	8019dea <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8019de4:	bf40      	sev
    __WFE();
 8019de6:	bf20      	wfe
    __WFE();
 8019de8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019dea:	4b0e      	ldr	r3, [pc, #56]	@ (8019e24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8019dec:	691a      	ldr	r2, [r3, #16]
 8019dee:	4b0d      	ldr	r3, [pc, #52]	@ (8019e24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8019df0:	2104      	movs	r1, #4
 8019df2:	438a      	bics	r2, r1
 8019df4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8019df6:	693b      	ldr	r3, [r7, #16]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d009      	beq.n	8019e10 <HAL_PWR_EnterSTOPMode+0xa0>
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d006      	beq.n	8019e10 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8019e02:	4b05      	ldr	r3, [pc, #20]	@ (8019e18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019e04:	681a      	ldr	r2, [r3, #0]
 8019e06:	4b04      	ldr	r3, [pc, #16]	@ (8019e18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8019e08:	2180      	movs	r1, #128	@ 0x80
 8019e0a:	0089      	lsls	r1, r1, #2
 8019e0c:	430a      	orrs	r2, r1
 8019e0e:	601a      	str	r2, [r3, #0]
  }
}
 8019e10:	46c0      	nop			@ (mov r8, r8)
 8019e12:	46bd      	mov	sp, r7
 8019e14:	b006      	add	sp, #24
 8019e16:	bd80      	pop	{r7, pc}
 8019e18:	40007000 	.word	0x40007000
 8019e1c:	40010000 	.word	0x40010000
 8019e20:	fffffdff 	.word	0xfffffdff
 8019e24:	e000ed00 	.word	0xe000ed00

08019e28 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8019e2c:	4b07      	ldr	r3, [pc, #28]	@ (8019e4c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8019e2e:	681a      	ldr	r2, [r3, #0]
 8019e30:	4b06      	ldr	r3, [pc, #24]	@ (8019e4c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8019e32:	2102      	movs	r1, #2
 8019e34:	430a      	orrs	r2, r1
 8019e36:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8019e38:	4b05      	ldr	r3, [pc, #20]	@ (8019e50 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8019e3a:	691a      	ldr	r2, [r3, #16]
 8019e3c:	4b04      	ldr	r3, [pc, #16]	@ (8019e50 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8019e3e:	2104      	movs	r1, #4
 8019e40:	430a      	orrs	r2, r1
 8019e42:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8019e44:	bf30      	wfi
}
 8019e46:	46c0      	nop			@ (mov r8, r8)
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	bd80      	pop	{r7, pc}
 8019e4c:	40007000 	.word	0x40007000
 8019e50:	e000ed00 	.word	0xe000ed00

08019e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019e54:	b5b0      	push	{r4, r5, r7, lr}
 8019e56:	b08a      	sub	sp, #40	@ 0x28
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d102      	bne.n	8019e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8019e62:	2301      	movs	r3, #1
 8019e64:	f000 fbbf 	bl	801a5e6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8019e68:	4bc9      	ldr	r3, [pc, #804]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019e6a:	68db      	ldr	r3, [r3, #12]
 8019e6c:	220c      	movs	r2, #12
 8019e6e:	4013      	ands	r3, r2
 8019e70:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8019e72:	4bc7      	ldr	r3, [pc, #796]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019e74:	68da      	ldr	r2, [r3, #12]
 8019e76:	2380      	movs	r3, #128	@ 0x80
 8019e78:	025b      	lsls	r3, r3, #9
 8019e7a:	4013      	ands	r3, r2
 8019e7c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	2201      	movs	r2, #1
 8019e84:	4013      	ands	r3, r2
 8019e86:	d100      	bne.n	8019e8a <HAL_RCC_OscConfig+0x36>
 8019e88:	e07e      	b.n	8019f88 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8019e8a:	69fb      	ldr	r3, [r7, #28]
 8019e8c:	2b08      	cmp	r3, #8
 8019e8e:	d007      	beq.n	8019ea0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8019e90:	69fb      	ldr	r3, [r7, #28]
 8019e92:	2b0c      	cmp	r3, #12
 8019e94:	d112      	bne.n	8019ebc <HAL_RCC_OscConfig+0x68>
 8019e96:	69ba      	ldr	r2, [r7, #24]
 8019e98:	2380      	movs	r3, #128	@ 0x80
 8019e9a:	025b      	lsls	r3, r3, #9
 8019e9c:	429a      	cmp	r2, r3
 8019e9e:	d10d      	bne.n	8019ebc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019ea0:	4bbb      	ldr	r3, [pc, #748]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019ea2:	681a      	ldr	r2, [r3, #0]
 8019ea4:	2380      	movs	r3, #128	@ 0x80
 8019ea6:	029b      	lsls	r3, r3, #10
 8019ea8:	4013      	ands	r3, r2
 8019eaa:	d100      	bne.n	8019eae <HAL_RCC_OscConfig+0x5a>
 8019eac:	e06b      	b.n	8019f86 <HAL_RCC_OscConfig+0x132>
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d167      	bne.n	8019f86 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	f000 fb95 	bl	801a5e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	685a      	ldr	r2, [r3, #4]
 8019ec0:	2380      	movs	r3, #128	@ 0x80
 8019ec2:	025b      	lsls	r3, r3, #9
 8019ec4:	429a      	cmp	r2, r3
 8019ec6:	d107      	bne.n	8019ed8 <HAL_RCC_OscConfig+0x84>
 8019ec8:	4bb1      	ldr	r3, [pc, #708]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019eca:	681a      	ldr	r2, [r3, #0]
 8019ecc:	4bb0      	ldr	r3, [pc, #704]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019ece:	2180      	movs	r1, #128	@ 0x80
 8019ed0:	0249      	lsls	r1, r1, #9
 8019ed2:	430a      	orrs	r2, r1
 8019ed4:	601a      	str	r2, [r3, #0]
 8019ed6:	e027      	b.n	8019f28 <HAL_RCC_OscConfig+0xd4>
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	685a      	ldr	r2, [r3, #4]
 8019edc:	23a0      	movs	r3, #160	@ 0xa0
 8019ede:	02db      	lsls	r3, r3, #11
 8019ee0:	429a      	cmp	r2, r3
 8019ee2:	d10e      	bne.n	8019f02 <HAL_RCC_OscConfig+0xae>
 8019ee4:	4baa      	ldr	r3, [pc, #680]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019ee6:	681a      	ldr	r2, [r3, #0]
 8019ee8:	4ba9      	ldr	r3, [pc, #676]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019eea:	2180      	movs	r1, #128	@ 0x80
 8019eec:	02c9      	lsls	r1, r1, #11
 8019eee:	430a      	orrs	r2, r1
 8019ef0:	601a      	str	r2, [r3, #0]
 8019ef2:	4ba7      	ldr	r3, [pc, #668]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019ef4:	681a      	ldr	r2, [r3, #0]
 8019ef6:	4ba6      	ldr	r3, [pc, #664]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019ef8:	2180      	movs	r1, #128	@ 0x80
 8019efa:	0249      	lsls	r1, r1, #9
 8019efc:	430a      	orrs	r2, r1
 8019efe:	601a      	str	r2, [r3, #0]
 8019f00:	e012      	b.n	8019f28 <HAL_RCC_OscConfig+0xd4>
 8019f02:	4ba3      	ldr	r3, [pc, #652]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019f04:	681a      	ldr	r2, [r3, #0]
 8019f06:	4ba2      	ldr	r3, [pc, #648]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019f08:	49a2      	ldr	r1, [pc, #648]	@ (801a194 <HAL_RCC_OscConfig+0x340>)
 8019f0a:	400a      	ands	r2, r1
 8019f0c:	601a      	str	r2, [r3, #0]
 8019f0e:	4ba0      	ldr	r3, [pc, #640]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019f10:	681a      	ldr	r2, [r3, #0]
 8019f12:	2380      	movs	r3, #128	@ 0x80
 8019f14:	025b      	lsls	r3, r3, #9
 8019f16:	4013      	ands	r3, r2
 8019f18:	60fb      	str	r3, [r7, #12]
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	4b9c      	ldr	r3, [pc, #624]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019f1e:	681a      	ldr	r2, [r3, #0]
 8019f20:	4b9b      	ldr	r3, [pc, #620]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019f22:	499d      	ldr	r1, [pc, #628]	@ (801a198 <HAL_RCC_OscConfig+0x344>)
 8019f24:	400a      	ands	r2, r1
 8019f26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	685b      	ldr	r3, [r3, #4]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d015      	beq.n	8019f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f30:	f7f9 fbc8 	bl	80136c4 <HAL_GetTick>
 8019f34:	0003      	movs	r3, r0
 8019f36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019f38:	e009      	b.n	8019f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019f3a:	f7f9 fbc3 	bl	80136c4 <HAL_GetTick>
 8019f3e:	0002      	movs	r2, r0
 8019f40:	697b      	ldr	r3, [r7, #20]
 8019f42:	1ad3      	subs	r3, r2, r3
 8019f44:	2b64      	cmp	r3, #100	@ 0x64
 8019f46:	d902      	bls.n	8019f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019f48:	2303      	movs	r3, #3
 8019f4a:	f000 fb4c 	bl	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8019f4e:	4b90      	ldr	r3, [pc, #576]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019f50:	681a      	ldr	r2, [r3, #0]
 8019f52:	2380      	movs	r3, #128	@ 0x80
 8019f54:	029b      	lsls	r3, r3, #10
 8019f56:	4013      	ands	r3, r2
 8019f58:	d0ef      	beq.n	8019f3a <HAL_RCC_OscConfig+0xe6>
 8019f5a:	e015      	b.n	8019f88 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019f5c:	f7f9 fbb2 	bl	80136c4 <HAL_GetTick>
 8019f60:	0003      	movs	r3, r0
 8019f62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8019f64:	e008      	b.n	8019f78 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019f66:	f7f9 fbad 	bl	80136c4 <HAL_GetTick>
 8019f6a:	0002      	movs	r2, r0
 8019f6c:	697b      	ldr	r3, [r7, #20]
 8019f6e:	1ad3      	subs	r3, r2, r3
 8019f70:	2b64      	cmp	r3, #100	@ 0x64
 8019f72:	d901      	bls.n	8019f78 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8019f74:	2303      	movs	r3, #3
 8019f76:	e336      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8019f78:	4b85      	ldr	r3, [pc, #532]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019f7a:	681a      	ldr	r2, [r3, #0]
 8019f7c:	2380      	movs	r3, #128	@ 0x80
 8019f7e:	029b      	lsls	r3, r3, #10
 8019f80:	4013      	ands	r3, r2
 8019f82:	d1f0      	bne.n	8019f66 <HAL_RCC_OscConfig+0x112>
 8019f84:	e000      	b.n	8019f88 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019f86:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	2202      	movs	r2, #2
 8019f8e:	4013      	ands	r3, r2
 8019f90:	d100      	bne.n	8019f94 <HAL_RCC_OscConfig+0x140>
 8019f92:	e099      	b.n	801a0c8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	68db      	ldr	r3, [r3, #12]
 8019f98:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8019f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f9c:	2220      	movs	r2, #32
 8019f9e:	4013      	ands	r3, r2
 8019fa0:	d009      	beq.n	8019fb6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8019fa2:	4b7b      	ldr	r3, [pc, #492]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019fa4:	681a      	ldr	r2, [r3, #0]
 8019fa6:	4b7a      	ldr	r3, [pc, #488]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019fa8:	2120      	movs	r1, #32
 8019faa:	430a      	orrs	r2, r1
 8019fac:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8019fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fb0:	2220      	movs	r2, #32
 8019fb2:	4393      	bics	r3, r2
 8019fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019fb6:	69fb      	ldr	r3, [r7, #28]
 8019fb8:	2b04      	cmp	r3, #4
 8019fba:	d005      	beq.n	8019fc8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8019fbc:	69fb      	ldr	r3, [r7, #28]
 8019fbe:	2b0c      	cmp	r3, #12
 8019fc0:	d13e      	bne.n	801a040 <HAL_RCC_OscConfig+0x1ec>
 8019fc2:	69bb      	ldr	r3, [r7, #24]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d13b      	bne.n	801a040 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8019fc8:	4b71      	ldr	r3, [pc, #452]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	2204      	movs	r2, #4
 8019fce:	4013      	ands	r3, r2
 8019fd0:	d004      	beq.n	8019fdc <HAL_RCC_OscConfig+0x188>
 8019fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d101      	bne.n	8019fdc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8019fd8:	2301      	movs	r3, #1
 8019fda:	e304      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019fdc:	4b6c      	ldr	r3, [pc, #432]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019fde:	685b      	ldr	r3, [r3, #4]
 8019fe0:	4a6e      	ldr	r2, [pc, #440]	@ (801a19c <HAL_RCC_OscConfig+0x348>)
 8019fe2:	4013      	ands	r3, r2
 8019fe4:	0019      	movs	r1, r3
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	691b      	ldr	r3, [r3, #16]
 8019fea:	021a      	lsls	r2, r3, #8
 8019fec:	4b68      	ldr	r3, [pc, #416]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019fee:	430a      	orrs	r2, r1
 8019ff0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8019ff2:	4b67      	ldr	r3, [pc, #412]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	2209      	movs	r2, #9
 8019ff8:	4393      	bics	r3, r2
 8019ffa:	0019      	movs	r1, r3
 8019ffc:	4b64      	ldr	r3, [pc, #400]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 8019ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a000:	430a      	orrs	r2, r1
 801a002:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a004:	f000 fc42 	bl	801a88c <HAL_RCC_GetSysClockFreq>
 801a008:	0001      	movs	r1, r0
 801a00a:	4b61      	ldr	r3, [pc, #388]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a00c:	68db      	ldr	r3, [r3, #12]
 801a00e:	091b      	lsrs	r3, r3, #4
 801a010:	220f      	movs	r2, #15
 801a012:	4013      	ands	r3, r2
 801a014:	4a62      	ldr	r2, [pc, #392]	@ (801a1a0 <HAL_RCC_OscConfig+0x34c>)
 801a016:	5cd3      	ldrb	r3, [r2, r3]
 801a018:	000a      	movs	r2, r1
 801a01a:	40da      	lsrs	r2, r3
 801a01c:	4b61      	ldr	r3, [pc, #388]	@ (801a1a4 <HAL_RCC_OscConfig+0x350>)
 801a01e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801a020:	4b61      	ldr	r3, [pc, #388]	@ (801a1a8 <HAL_RCC_OscConfig+0x354>)
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	2513      	movs	r5, #19
 801a026:	197c      	adds	r4, r7, r5
 801a028:	0018      	movs	r0, r3
 801a02a:	f7f9 fb05 	bl	8013638 <HAL_InitTick>
 801a02e:	0003      	movs	r3, r0
 801a030:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801a032:	197b      	adds	r3, r7, r5
 801a034:	781b      	ldrb	r3, [r3, #0]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d046      	beq.n	801a0c8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801a03a:	197b      	adds	r3, r7, r5
 801a03c:	781b      	ldrb	r3, [r3, #0]
 801a03e:	e2d2      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a042:	2b00      	cmp	r3, #0
 801a044:	d027      	beq.n	801a096 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a046:	4b52      	ldr	r3, [pc, #328]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	2209      	movs	r2, #9
 801a04c:	4393      	bics	r3, r2
 801a04e:	0019      	movs	r1, r3
 801a050:	4b4f      	ldr	r3, [pc, #316]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a054:	430a      	orrs	r2, r1
 801a056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a058:	f7f9 fb34 	bl	80136c4 <HAL_GetTick>
 801a05c:	0003      	movs	r3, r0
 801a05e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a060:	e008      	b.n	801a074 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a062:	f7f9 fb2f 	bl	80136c4 <HAL_GetTick>
 801a066:	0002      	movs	r2, r0
 801a068:	697b      	ldr	r3, [r7, #20]
 801a06a:	1ad3      	subs	r3, r2, r3
 801a06c:	2b02      	cmp	r3, #2
 801a06e:	d901      	bls.n	801a074 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801a070:	2303      	movs	r3, #3
 801a072:	e2b8      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a074:	4b46      	ldr	r3, [pc, #280]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	2204      	movs	r2, #4
 801a07a:	4013      	ands	r3, r2
 801a07c:	d0f1      	beq.n	801a062 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a07e:	4b44      	ldr	r3, [pc, #272]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a080:	685b      	ldr	r3, [r3, #4]
 801a082:	4a46      	ldr	r2, [pc, #280]	@ (801a19c <HAL_RCC_OscConfig+0x348>)
 801a084:	4013      	ands	r3, r2
 801a086:	0019      	movs	r1, r3
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	691b      	ldr	r3, [r3, #16]
 801a08c:	021a      	lsls	r2, r3, #8
 801a08e:	4b40      	ldr	r3, [pc, #256]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a090:	430a      	orrs	r2, r1
 801a092:	605a      	str	r2, [r3, #4]
 801a094:	e018      	b.n	801a0c8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a096:	4b3e      	ldr	r3, [pc, #248]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a098:	681a      	ldr	r2, [r3, #0]
 801a09a:	4b3d      	ldr	r3, [pc, #244]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a09c:	2101      	movs	r1, #1
 801a09e:	438a      	bics	r2, r1
 801a0a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a0a2:	f7f9 fb0f 	bl	80136c4 <HAL_GetTick>
 801a0a6:	0003      	movs	r3, r0
 801a0a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a0aa:	e008      	b.n	801a0be <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a0ac:	f7f9 fb0a 	bl	80136c4 <HAL_GetTick>
 801a0b0:	0002      	movs	r2, r0
 801a0b2:	697b      	ldr	r3, [r7, #20]
 801a0b4:	1ad3      	subs	r3, r2, r3
 801a0b6:	2b02      	cmp	r3, #2
 801a0b8:	d901      	bls.n	801a0be <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801a0ba:	2303      	movs	r3, #3
 801a0bc:	e293      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a0be:	4b34      	ldr	r3, [pc, #208]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	2204      	movs	r2, #4
 801a0c4:	4013      	ands	r3, r2
 801a0c6:	d1f1      	bne.n	801a0ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	2210      	movs	r2, #16
 801a0ce:	4013      	ands	r3, r2
 801a0d0:	d100      	bne.n	801a0d4 <HAL_RCC_OscConfig+0x280>
 801a0d2:	e0a2      	b.n	801a21a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801a0d4:	69fb      	ldr	r3, [r7, #28]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d140      	bne.n	801a15c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801a0da:	4b2d      	ldr	r3, [pc, #180]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a0dc:	681a      	ldr	r2, [r3, #0]
 801a0de:	2380      	movs	r3, #128	@ 0x80
 801a0e0:	009b      	lsls	r3, r3, #2
 801a0e2:	4013      	ands	r3, r2
 801a0e4:	d005      	beq.n	801a0f2 <HAL_RCC_OscConfig+0x29e>
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	69db      	ldr	r3, [r3, #28]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d101      	bne.n	801a0f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801a0ee:	2301      	movs	r3, #1
 801a0f0:	e279      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a0f2:	4b27      	ldr	r3, [pc, #156]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a0f4:	685b      	ldr	r3, [r3, #4]
 801a0f6:	4a2d      	ldr	r2, [pc, #180]	@ (801a1ac <HAL_RCC_OscConfig+0x358>)
 801a0f8:	4013      	ands	r3, r2
 801a0fa:	0019      	movs	r1, r3
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a100:	4b23      	ldr	r3, [pc, #140]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a102:	430a      	orrs	r2, r1
 801a104:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a106:	4b22      	ldr	r3, [pc, #136]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a108:	685b      	ldr	r3, [r3, #4]
 801a10a:	021b      	lsls	r3, r3, #8
 801a10c:	0a19      	lsrs	r1, r3, #8
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	6a1b      	ldr	r3, [r3, #32]
 801a112:	061a      	lsls	r2, r3, #24
 801a114:	4b1e      	ldr	r3, [pc, #120]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a116:	430a      	orrs	r2, r1
 801a118:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a11e:	0b5b      	lsrs	r3, r3, #13
 801a120:	3301      	adds	r3, #1
 801a122:	2280      	movs	r2, #128	@ 0x80
 801a124:	0212      	lsls	r2, r2, #8
 801a126:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801a128:	4b19      	ldr	r3, [pc, #100]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a12a:	68db      	ldr	r3, [r3, #12]
 801a12c:	091b      	lsrs	r3, r3, #4
 801a12e:	210f      	movs	r1, #15
 801a130:	400b      	ands	r3, r1
 801a132:	491b      	ldr	r1, [pc, #108]	@ (801a1a0 <HAL_RCC_OscConfig+0x34c>)
 801a134:	5ccb      	ldrb	r3, [r1, r3]
 801a136:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a138:	4b1a      	ldr	r3, [pc, #104]	@ (801a1a4 <HAL_RCC_OscConfig+0x350>)
 801a13a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801a13c:	4b1a      	ldr	r3, [pc, #104]	@ (801a1a8 <HAL_RCC_OscConfig+0x354>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2513      	movs	r5, #19
 801a142:	197c      	adds	r4, r7, r5
 801a144:	0018      	movs	r0, r3
 801a146:	f7f9 fa77 	bl	8013638 <HAL_InitTick>
 801a14a:	0003      	movs	r3, r0
 801a14c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801a14e:	197b      	adds	r3, r7, r5
 801a150:	781b      	ldrb	r3, [r3, #0]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d061      	beq.n	801a21a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801a156:	197b      	adds	r3, r7, r5
 801a158:	781b      	ldrb	r3, [r3, #0]
 801a15a:	e244      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	69db      	ldr	r3, [r3, #28]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d040      	beq.n	801a1e6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801a164:	4b0a      	ldr	r3, [pc, #40]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a166:	681a      	ldr	r2, [r3, #0]
 801a168:	4b09      	ldr	r3, [pc, #36]	@ (801a190 <HAL_RCC_OscConfig+0x33c>)
 801a16a:	2180      	movs	r1, #128	@ 0x80
 801a16c:	0049      	lsls	r1, r1, #1
 801a16e:	430a      	orrs	r2, r1
 801a170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a172:	f7f9 faa7 	bl	80136c4 <HAL_GetTick>
 801a176:	0003      	movs	r3, r0
 801a178:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a17a:	e019      	b.n	801a1b0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a17c:	f7f9 faa2 	bl	80136c4 <HAL_GetTick>
 801a180:	0002      	movs	r2, r0
 801a182:	697b      	ldr	r3, [r7, #20]
 801a184:	1ad3      	subs	r3, r2, r3
 801a186:	2b02      	cmp	r3, #2
 801a188:	d912      	bls.n	801a1b0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801a18a:	2303      	movs	r3, #3
 801a18c:	e22b      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
 801a18e:	46c0      	nop			@ (mov r8, r8)
 801a190:	40021000 	.word	0x40021000
 801a194:	fffeffff 	.word	0xfffeffff
 801a198:	fffbffff 	.word	0xfffbffff
 801a19c:	ffffe0ff 	.word	0xffffe0ff
 801a1a0:	0802d580 	.word	0x0802d580
 801a1a4:	200000e0 	.word	0x200000e0
 801a1a8:	200000f0 	.word	0x200000f0
 801a1ac:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a1b0:	4bca      	ldr	r3, [pc, #808]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a1b2:	681a      	ldr	r2, [r3, #0]
 801a1b4:	2380      	movs	r3, #128	@ 0x80
 801a1b6:	009b      	lsls	r3, r3, #2
 801a1b8:	4013      	ands	r3, r2
 801a1ba:	d0df      	beq.n	801a17c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a1bc:	4bc7      	ldr	r3, [pc, #796]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a1be:	685b      	ldr	r3, [r3, #4]
 801a1c0:	4ac7      	ldr	r2, [pc, #796]	@ (801a4e0 <HAL_RCC_OscConfig+0x68c>)
 801a1c2:	4013      	ands	r3, r2
 801a1c4:	0019      	movs	r1, r3
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a1ca:	4bc4      	ldr	r3, [pc, #784]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a1cc:	430a      	orrs	r2, r1
 801a1ce:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a1d0:	4bc2      	ldr	r3, [pc, #776]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a1d2:	685b      	ldr	r3, [r3, #4]
 801a1d4:	021b      	lsls	r3, r3, #8
 801a1d6:	0a19      	lsrs	r1, r3, #8
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6a1b      	ldr	r3, [r3, #32]
 801a1dc:	061a      	lsls	r2, r3, #24
 801a1de:	4bbf      	ldr	r3, [pc, #764]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a1e0:	430a      	orrs	r2, r1
 801a1e2:	605a      	str	r2, [r3, #4]
 801a1e4:	e019      	b.n	801a21a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a1e6:	4bbd      	ldr	r3, [pc, #756]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a1e8:	681a      	ldr	r2, [r3, #0]
 801a1ea:	4bbc      	ldr	r3, [pc, #752]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a1ec:	49bd      	ldr	r1, [pc, #756]	@ (801a4e4 <HAL_RCC_OscConfig+0x690>)
 801a1ee:	400a      	ands	r2, r1
 801a1f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a1f2:	f7f9 fa67 	bl	80136c4 <HAL_GetTick>
 801a1f6:	0003      	movs	r3, r0
 801a1f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a1fa:	e008      	b.n	801a20e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a1fc:	f7f9 fa62 	bl	80136c4 <HAL_GetTick>
 801a200:	0002      	movs	r2, r0
 801a202:	697b      	ldr	r3, [r7, #20]
 801a204:	1ad3      	subs	r3, r2, r3
 801a206:	2b02      	cmp	r3, #2
 801a208:	d901      	bls.n	801a20e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801a20a:	2303      	movs	r3, #3
 801a20c:	e1eb      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a20e:	4bb3      	ldr	r3, [pc, #716]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a210:	681a      	ldr	r2, [r3, #0]
 801a212:	2380      	movs	r3, #128	@ 0x80
 801a214:	009b      	lsls	r3, r3, #2
 801a216:	4013      	ands	r3, r2
 801a218:	d1f0      	bne.n	801a1fc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2208      	movs	r2, #8
 801a220:	4013      	ands	r3, r2
 801a222:	d036      	beq.n	801a292 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	695b      	ldr	r3, [r3, #20]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d019      	beq.n	801a260 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a22c:	4bab      	ldr	r3, [pc, #684]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a22e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a230:	4baa      	ldr	r3, [pc, #680]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a232:	2101      	movs	r1, #1
 801a234:	430a      	orrs	r2, r1
 801a236:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a238:	f7f9 fa44 	bl	80136c4 <HAL_GetTick>
 801a23c:	0003      	movs	r3, r0
 801a23e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a240:	e008      	b.n	801a254 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a242:	f7f9 fa3f 	bl	80136c4 <HAL_GetTick>
 801a246:	0002      	movs	r2, r0
 801a248:	697b      	ldr	r3, [r7, #20]
 801a24a:	1ad3      	subs	r3, r2, r3
 801a24c:	2b02      	cmp	r3, #2
 801a24e:	d901      	bls.n	801a254 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801a250:	2303      	movs	r3, #3
 801a252:	e1c8      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a254:	4ba1      	ldr	r3, [pc, #644]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a258:	2202      	movs	r2, #2
 801a25a:	4013      	ands	r3, r2
 801a25c:	d0f1      	beq.n	801a242 <HAL_RCC_OscConfig+0x3ee>
 801a25e:	e018      	b.n	801a292 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a260:	4b9e      	ldr	r3, [pc, #632]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a262:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a264:	4b9d      	ldr	r3, [pc, #628]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a266:	2101      	movs	r1, #1
 801a268:	438a      	bics	r2, r1
 801a26a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a26c:	f7f9 fa2a 	bl	80136c4 <HAL_GetTick>
 801a270:	0003      	movs	r3, r0
 801a272:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a274:	e008      	b.n	801a288 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a276:	f7f9 fa25 	bl	80136c4 <HAL_GetTick>
 801a27a:	0002      	movs	r2, r0
 801a27c:	697b      	ldr	r3, [r7, #20]
 801a27e:	1ad3      	subs	r3, r2, r3
 801a280:	2b02      	cmp	r3, #2
 801a282:	d901      	bls.n	801a288 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801a284:	2303      	movs	r3, #3
 801a286:	e1ae      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a288:	4b94      	ldr	r3, [pc, #592]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a28a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a28c:	2202      	movs	r2, #2
 801a28e:	4013      	ands	r3, r2
 801a290:	d1f1      	bne.n	801a276 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	2204      	movs	r2, #4
 801a298:	4013      	ands	r3, r2
 801a29a:	d100      	bne.n	801a29e <HAL_RCC_OscConfig+0x44a>
 801a29c:	e0ae      	b.n	801a3fc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a29e:	2023      	movs	r0, #35	@ 0x23
 801a2a0:	183b      	adds	r3, r7, r0
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a2a6:	4b8d      	ldr	r3, [pc, #564]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a2a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a2aa:	2380      	movs	r3, #128	@ 0x80
 801a2ac:	055b      	lsls	r3, r3, #21
 801a2ae:	4013      	ands	r3, r2
 801a2b0:	d109      	bne.n	801a2c6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a2b2:	4b8a      	ldr	r3, [pc, #552]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a2b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a2b6:	4b89      	ldr	r3, [pc, #548]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a2b8:	2180      	movs	r1, #128	@ 0x80
 801a2ba:	0549      	lsls	r1, r1, #21
 801a2bc:	430a      	orrs	r2, r1
 801a2be:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801a2c0:	183b      	adds	r3, r7, r0
 801a2c2:	2201      	movs	r2, #1
 801a2c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a2c6:	4b88      	ldr	r3, [pc, #544]	@ (801a4e8 <HAL_RCC_OscConfig+0x694>)
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	2380      	movs	r3, #128	@ 0x80
 801a2cc:	005b      	lsls	r3, r3, #1
 801a2ce:	4013      	ands	r3, r2
 801a2d0:	d11a      	bne.n	801a308 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a2d2:	4b85      	ldr	r3, [pc, #532]	@ (801a4e8 <HAL_RCC_OscConfig+0x694>)
 801a2d4:	681a      	ldr	r2, [r3, #0]
 801a2d6:	4b84      	ldr	r3, [pc, #528]	@ (801a4e8 <HAL_RCC_OscConfig+0x694>)
 801a2d8:	2180      	movs	r1, #128	@ 0x80
 801a2da:	0049      	lsls	r1, r1, #1
 801a2dc:	430a      	orrs	r2, r1
 801a2de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a2e0:	f7f9 f9f0 	bl	80136c4 <HAL_GetTick>
 801a2e4:	0003      	movs	r3, r0
 801a2e6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a2e8:	e008      	b.n	801a2fc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a2ea:	f7f9 f9eb 	bl	80136c4 <HAL_GetTick>
 801a2ee:	0002      	movs	r2, r0
 801a2f0:	697b      	ldr	r3, [r7, #20]
 801a2f2:	1ad3      	subs	r3, r2, r3
 801a2f4:	2b64      	cmp	r3, #100	@ 0x64
 801a2f6:	d901      	bls.n	801a2fc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801a2f8:	2303      	movs	r3, #3
 801a2fa:	e174      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a2fc:	4b7a      	ldr	r3, [pc, #488]	@ (801a4e8 <HAL_RCC_OscConfig+0x694>)
 801a2fe:	681a      	ldr	r2, [r3, #0]
 801a300:	2380      	movs	r3, #128	@ 0x80
 801a302:	005b      	lsls	r3, r3, #1
 801a304:	4013      	ands	r3, r2
 801a306:	d0f0      	beq.n	801a2ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	689a      	ldr	r2, [r3, #8]
 801a30c:	2380      	movs	r3, #128	@ 0x80
 801a30e:	005b      	lsls	r3, r3, #1
 801a310:	429a      	cmp	r2, r3
 801a312:	d107      	bne.n	801a324 <HAL_RCC_OscConfig+0x4d0>
 801a314:	4b71      	ldr	r3, [pc, #452]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a318:	4b70      	ldr	r3, [pc, #448]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a31a:	2180      	movs	r1, #128	@ 0x80
 801a31c:	0049      	lsls	r1, r1, #1
 801a31e:	430a      	orrs	r2, r1
 801a320:	651a      	str	r2, [r3, #80]	@ 0x50
 801a322:	e031      	b.n	801a388 <HAL_RCC_OscConfig+0x534>
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	689b      	ldr	r3, [r3, #8]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d10c      	bne.n	801a346 <HAL_RCC_OscConfig+0x4f2>
 801a32c:	4b6b      	ldr	r3, [pc, #428]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a32e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a330:	4b6a      	ldr	r3, [pc, #424]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a332:	496c      	ldr	r1, [pc, #432]	@ (801a4e4 <HAL_RCC_OscConfig+0x690>)
 801a334:	400a      	ands	r2, r1
 801a336:	651a      	str	r2, [r3, #80]	@ 0x50
 801a338:	4b68      	ldr	r3, [pc, #416]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a33a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a33c:	4b67      	ldr	r3, [pc, #412]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a33e:	496b      	ldr	r1, [pc, #428]	@ (801a4ec <HAL_RCC_OscConfig+0x698>)
 801a340:	400a      	ands	r2, r1
 801a342:	651a      	str	r2, [r3, #80]	@ 0x50
 801a344:	e020      	b.n	801a388 <HAL_RCC_OscConfig+0x534>
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	689a      	ldr	r2, [r3, #8]
 801a34a:	23a0      	movs	r3, #160	@ 0xa0
 801a34c:	00db      	lsls	r3, r3, #3
 801a34e:	429a      	cmp	r2, r3
 801a350:	d10e      	bne.n	801a370 <HAL_RCC_OscConfig+0x51c>
 801a352:	4b62      	ldr	r3, [pc, #392]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a354:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a356:	4b61      	ldr	r3, [pc, #388]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a358:	2180      	movs	r1, #128	@ 0x80
 801a35a:	00c9      	lsls	r1, r1, #3
 801a35c:	430a      	orrs	r2, r1
 801a35e:	651a      	str	r2, [r3, #80]	@ 0x50
 801a360:	4b5e      	ldr	r3, [pc, #376]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a362:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a364:	4b5d      	ldr	r3, [pc, #372]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a366:	2180      	movs	r1, #128	@ 0x80
 801a368:	0049      	lsls	r1, r1, #1
 801a36a:	430a      	orrs	r2, r1
 801a36c:	651a      	str	r2, [r3, #80]	@ 0x50
 801a36e:	e00b      	b.n	801a388 <HAL_RCC_OscConfig+0x534>
 801a370:	4b5a      	ldr	r3, [pc, #360]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a372:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a374:	4b59      	ldr	r3, [pc, #356]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a376:	495b      	ldr	r1, [pc, #364]	@ (801a4e4 <HAL_RCC_OscConfig+0x690>)
 801a378:	400a      	ands	r2, r1
 801a37a:	651a      	str	r2, [r3, #80]	@ 0x50
 801a37c:	4b57      	ldr	r3, [pc, #348]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a37e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a380:	4b56      	ldr	r3, [pc, #344]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a382:	495a      	ldr	r1, [pc, #360]	@ (801a4ec <HAL_RCC_OscConfig+0x698>)
 801a384:	400a      	ands	r2, r1
 801a386:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	689b      	ldr	r3, [r3, #8]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d015      	beq.n	801a3bc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a390:	f7f9 f998 	bl	80136c4 <HAL_GetTick>
 801a394:	0003      	movs	r3, r0
 801a396:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a398:	e009      	b.n	801a3ae <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a39a:	f7f9 f993 	bl	80136c4 <HAL_GetTick>
 801a39e:	0002      	movs	r2, r0
 801a3a0:	697b      	ldr	r3, [r7, #20]
 801a3a2:	1ad3      	subs	r3, r2, r3
 801a3a4:	4a52      	ldr	r2, [pc, #328]	@ (801a4f0 <HAL_RCC_OscConfig+0x69c>)
 801a3a6:	4293      	cmp	r3, r2
 801a3a8:	d901      	bls.n	801a3ae <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801a3aa:	2303      	movs	r3, #3
 801a3ac:	e11b      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a3ae:	4b4b      	ldr	r3, [pc, #300]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a3b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a3b2:	2380      	movs	r3, #128	@ 0x80
 801a3b4:	009b      	lsls	r3, r3, #2
 801a3b6:	4013      	ands	r3, r2
 801a3b8:	d0ef      	beq.n	801a39a <HAL_RCC_OscConfig+0x546>
 801a3ba:	e014      	b.n	801a3e6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a3bc:	f7f9 f982 	bl	80136c4 <HAL_GetTick>
 801a3c0:	0003      	movs	r3, r0
 801a3c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a3c4:	e009      	b.n	801a3da <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a3c6:	f7f9 f97d 	bl	80136c4 <HAL_GetTick>
 801a3ca:	0002      	movs	r2, r0
 801a3cc:	697b      	ldr	r3, [r7, #20]
 801a3ce:	1ad3      	subs	r3, r2, r3
 801a3d0:	4a47      	ldr	r2, [pc, #284]	@ (801a4f0 <HAL_RCC_OscConfig+0x69c>)
 801a3d2:	4293      	cmp	r3, r2
 801a3d4:	d901      	bls.n	801a3da <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801a3d6:	2303      	movs	r3, #3
 801a3d8:	e105      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a3da:	4b40      	ldr	r3, [pc, #256]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a3dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a3de:	2380      	movs	r3, #128	@ 0x80
 801a3e0:	009b      	lsls	r3, r3, #2
 801a3e2:	4013      	ands	r3, r2
 801a3e4:	d1ef      	bne.n	801a3c6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801a3e6:	2323      	movs	r3, #35	@ 0x23
 801a3e8:	18fb      	adds	r3, r7, r3
 801a3ea:	781b      	ldrb	r3, [r3, #0]
 801a3ec:	2b01      	cmp	r3, #1
 801a3ee:	d105      	bne.n	801a3fc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a3f0:	4b3a      	ldr	r3, [pc, #232]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a3f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a3f4:	4b39      	ldr	r3, [pc, #228]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a3f6:	493f      	ldr	r1, [pc, #252]	@ (801a4f4 <HAL_RCC_OscConfig+0x6a0>)
 801a3f8:	400a      	ands	r2, r1
 801a3fa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	2220      	movs	r2, #32
 801a402:	4013      	ands	r3, r2
 801a404:	d049      	beq.n	801a49a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	699b      	ldr	r3, [r3, #24]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d026      	beq.n	801a45c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801a40e:	4b33      	ldr	r3, [pc, #204]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a410:	689a      	ldr	r2, [r3, #8]
 801a412:	4b32      	ldr	r3, [pc, #200]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a414:	2101      	movs	r1, #1
 801a416:	430a      	orrs	r2, r1
 801a418:	609a      	str	r2, [r3, #8]
 801a41a:	4b30      	ldr	r3, [pc, #192]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a41c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a41e:	4b2f      	ldr	r3, [pc, #188]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a420:	2101      	movs	r1, #1
 801a422:	430a      	orrs	r2, r1
 801a424:	635a      	str	r2, [r3, #52]	@ 0x34
 801a426:	4b34      	ldr	r3, [pc, #208]	@ (801a4f8 <HAL_RCC_OscConfig+0x6a4>)
 801a428:	6a1a      	ldr	r2, [r3, #32]
 801a42a:	4b33      	ldr	r3, [pc, #204]	@ (801a4f8 <HAL_RCC_OscConfig+0x6a4>)
 801a42c:	2180      	movs	r1, #128	@ 0x80
 801a42e:	0189      	lsls	r1, r1, #6
 801a430:	430a      	orrs	r2, r1
 801a432:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a434:	f7f9 f946 	bl	80136c4 <HAL_GetTick>
 801a438:	0003      	movs	r3, r0
 801a43a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a43c:	e008      	b.n	801a450 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a43e:	f7f9 f941 	bl	80136c4 <HAL_GetTick>
 801a442:	0002      	movs	r2, r0
 801a444:	697b      	ldr	r3, [r7, #20]
 801a446:	1ad3      	subs	r3, r2, r3
 801a448:	2b02      	cmp	r3, #2
 801a44a:	d901      	bls.n	801a450 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801a44c:	2303      	movs	r3, #3
 801a44e:	e0ca      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a450:	4b22      	ldr	r3, [pc, #136]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a452:	689b      	ldr	r3, [r3, #8]
 801a454:	2202      	movs	r2, #2
 801a456:	4013      	ands	r3, r2
 801a458:	d0f1      	beq.n	801a43e <HAL_RCC_OscConfig+0x5ea>
 801a45a:	e01e      	b.n	801a49a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801a45c:	4b1f      	ldr	r3, [pc, #124]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a45e:	689a      	ldr	r2, [r3, #8]
 801a460:	4b1e      	ldr	r3, [pc, #120]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a462:	2101      	movs	r1, #1
 801a464:	438a      	bics	r2, r1
 801a466:	609a      	str	r2, [r3, #8]
 801a468:	4b23      	ldr	r3, [pc, #140]	@ (801a4f8 <HAL_RCC_OscConfig+0x6a4>)
 801a46a:	6a1a      	ldr	r2, [r3, #32]
 801a46c:	4b22      	ldr	r3, [pc, #136]	@ (801a4f8 <HAL_RCC_OscConfig+0x6a4>)
 801a46e:	4923      	ldr	r1, [pc, #140]	@ (801a4fc <HAL_RCC_OscConfig+0x6a8>)
 801a470:	400a      	ands	r2, r1
 801a472:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a474:	f7f9 f926 	bl	80136c4 <HAL_GetTick>
 801a478:	0003      	movs	r3, r0
 801a47a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a47c:	e008      	b.n	801a490 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a47e:	f7f9 f921 	bl	80136c4 <HAL_GetTick>
 801a482:	0002      	movs	r2, r0
 801a484:	697b      	ldr	r3, [r7, #20]
 801a486:	1ad3      	subs	r3, r2, r3
 801a488:	2b02      	cmp	r3, #2
 801a48a:	d901      	bls.n	801a490 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801a48c:	2303      	movs	r3, #3
 801a48e:	e0aa      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a490:	4b12      	ldr	r3, [pc, #72]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a492:	689b      	ldr	r3, [r3, #8]
 801a494:	2202      	movs	r2, #2
 801a496:	4013      	ands	r3, r2
 801a498:	d1f1      	bne.n	801a47e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d100      	bne.n	801a4a4 <HAL_RCC_OscConfig+0x650>
 801a4a2:	e09f      	b.n	801a5e4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a4a4:	69fb      	ldr	r3, [r7, #28]
 801a4a6:	2b0c      	cmp	r3, #12
 801a4a8:	d100      	bne.n	801a4ac <HAL_RCC_OscConfig+0x658>
 801a4aa:	e078      	b.n	801a59e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a4b0:	2b02      	cmp	r3, #2
 801a4b2:	d159      	bne.n	801a568 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a4b4:	4b09      	ldr	r3, [pc, #36]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a4b6:	681a      	ldr	r2, [r3, #0]
 801a4b8:	4b08      	ldr	r3, [pc, #32]	@ (801a4dc <HAL_RCC_OscConfig+0x688>)
 801a4ba:	4911      	ldr	r1, [pc, #68]	@ (801a500 <HAL_RCC_OscConfig+0x6ac>)
 801a4bc:	400a      	ands	r2, r1
 801a4be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a4c0:	f7f9 f900 	bl	80136c4 <HAL_GetTick>
 801a4c4:	0003      	movs	r3, r0
 801a4c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a4c8:	e01c      	b.n	801a504 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a4ca:	f7f9 f8fb 	bl	80136c4 <HAL_GetTick>
 801a4ce:	0002      	movs	r2, r0
 801a4d0:	697b      	ldr	r3, [r7, #20]
 801a4d2:	1ad3      	subs	r3, r2, r3
 801a4d4:	2b02      	cmp	r3, #2
 801a4d6:	d915      	bls.n	801a504 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801a4d8:	2303      	movs	r3, #3
 801a4da:	e084      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
 801a4dc:	40021000 	.word	0x40021000
 801a4e0:	ffff1fff 	.word	0xffff1fff
 801a4e4:	fffffeff 	.word	0xfffffeff
 801a4e8:	40007000 	.word	0x40007000
 801a4ec:	fffffbff 	.word	0xfffffbff
 801a4f0:	00001388 	.word	0x00001388
 801a4f4:	efffffff 	.word	0xefffffff
 801a4f8:	40010000 	.word	0x40010000
 801a4fc:	ffffdfff 	.word	0xffffdfff
 801a500:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a504:	4b3a      	ldr	r3, [pc, #232]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a506:	681a      	ldr	r2, [r3, #0]
 801a508:	2380      	movs	r3, #128	@ 0x80
 801a50a:	049b      	lsls	r3, r3, #18
 801a50c:	4013      	ands	r3, r2
 801a50e:	d1dc      	bne.n	801a4ca <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801a510:	4b37      	ldr	r3, [pc, #220]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a512:	68db      	ldr	r3, [r3, #12]
 801a514:	4a37      	ldr	r2, [pc, #220]	@ (801a5f4 <HAL_RCC_OscConfig+0x7a0>)
 801a516:	4013      	ands	r3, r2
 801a518:	0019      	movs	r1, r3
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a522:	431a      	orrs	r2, r3
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a528:	431a      	orrs	r2, r3
 801a52a:	4b31      	ldr	r3, [pc, #196]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a52c:	430a      	orrs	r2, r1
 801a52e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a530:	4b2f      	ldr	r3, [pc, #188]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a532:	681a      	ldr	r2, [r3, #0]
 801a534:	4b2e      	ldr	r3, [pc, #184]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a536:	2180      	movs	r1, #128	@ 0x80
 801a538:	0449      	lsls	r1, r1, #17
 801a53a:	430a      	orrs	r2, r1
 801a53c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a53e:	f7f9 f8c1 	bl	80136c4 <HAL_GetTick>
 801a542:	0003      	movs	r3, r0
 801a544:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801a546:	e008      	b.n	801a55a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a548:	f7f9 f8bc 	bl	80136c4 <HAL_GetTick>
 801a54c:	0002      	movs	r2, r0
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	1ad3      	subs	r3, r2, r3
 801a552:	2b02      	cmp	r3, #2
 801a554:	d901      	bls.n	801a55a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801a556:	2303      	movs	r3, #3
 801a558:	e045      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801a55a:	4b25      	ldr	r3, [pc, #148]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a55c:	681a      	ldr	r2, [r3, #0]
 801a55e:	2380      	movs	r3, #128	@ 0x80
 801a560:	049b      	lsls	r3, r3, #18
 801a562:	4013      	ands	r3, r2
 801a564:	d0f0      	beq.n	801a548 <HAL_RCC_OscConfig+0x6f4>
 801a566:	e03d      	b.n	801a5e4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a568:	4b21      	ldr	r3, [pc, #132]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a56a:	681a      	ldr	r2, [r3, #0]
 801a56c:	4b20      	ldr	r3, [pc, #128]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a56e:	4922      	ldr	r1, [pc, #136]	@ (801a5f8 <HAL_RCC_OscConfig+0x7a4>)
 801a570:	400a      	ands	r2, r1
 801a572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a574:	f7f9 f8a6 	bl	80136c4 <HAL_GetTick>
 801a578:	0003      	movs	r3, r0
 801a57a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a57c:	e008      	b.n	801a590 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a57e:	f7f9 f8a1 	bl	80136c4 <HAL_GetTick>
 801a582:	0002      	movs	r2, r0
 801a584:	697b      	ldr	r3, [r7, #20]
 801a586:	1ad3      	subs	r3, r2, r3
 801a588:	2b02      	cmp	r3, #2
 801a58a:	d901      	bls.n	801a590 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801a58c:	2303      	movs	r3, #3
 801a58e:	e02a      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801a590:	4b17      	ldr	r3, [pc, #92]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a592:	681a      	ldr	r2, [r3, #0]
 801a594:	2380      	movs	r3, #128	@ 0x80
 801a596:	049b      	lsls	r3, r3, #18
 801a598:	4013      	ands	r3, r2
 801a59a:	d1f0      	bne.n	801a57e <HAL_RCC_OscConfig+0x72a>
 801a59c:	e022      	b.n	801a5e4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a5a2:	2b01      	cmp	r3, #1
 801a5a4:	d101      	bne.n	801a5aa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801a5a6:	2301      	movs	r3, #1
 801a5a8:	e01d      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801a5aa:	4b11      	ldr	r3, [pc, #68]	@ (801a5f0 <HAL_RCC_OscConfig+0x79c>)
 801a5ac:	68db      	ldr	r3, [r3, #12]
 801a5ae:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a5b0:	69ba      	ldr	r2, [r7, #24]
 801a5b2:	2380      	movs	r3, #128	@ 0x80
 801a5b4:	025b      	lsls	r3, r3, #9
 801a5b6:	401a      	ands	r2, r3
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5bc:	429a      	cmp	r2, r3
 801a5be:	d10f      	bne.n	801a5e0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801a5c0:	69ba      	ldr	r2, [r7, #24]
 801a5c2:	23f0      	movs	r3, #240	@ 0xf0
 801a5c4:	039b      	lsls	r3, r3, #14
 801a5c6:	401a      	ands	r2, r3
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a5cc:	429a      	cmp	r2, r3
 801a5ce:	d107      	bne.n	801a5e0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801a5d0:	69ba      	ldr	r2, [r7, #24]
 801a5d2:	23c0      	movs	r3, #192	@ 0xc0
 801a5d4:	041b      	lsls	r3, r3, #16
 801a5d6:	401a      	ands	r2, r3
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	d001      	beq.n	801a5e4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801a5e0:	2301      	movs	r3, #1
 801a5e2:	e000      	b.n	801a5e6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801a5e4:	2300      	movs	r3, #0
}
 801a5e6:	0018      	movs	r0, r3
 801a5e8:	46bd      	mov	sp, r7
 801a5ea:	b00a      	add	sp, #40	@ 0x28
 801a5ec:	bdb0      	pop	{r4, r5, r7, pc}
 801a5ee:	46c0      	nop			@ (mov r8, r8)
 801a5f0:	40021000 	.word	0x40021000
 801a5f4:	ff02ffff 	.word	0xff02ffff
 801a5f8:	feffffff 	.word	0xfeffffff

0801a5fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a5fc:	b5b0      	push	{r4, r5, r7, lr}
 801a5fe:	b084      	sub	sp, #16
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
 801a604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d101      	bne.n	801a610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a60c:	2301      	movs	r3, #1
 801a60e:	e128      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a610:	4b96      	ldr	r3, [pc, #600]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	2201      	movs	r2, #1
 801a616:	4013      	ands	r3, r2
 801a618:	683a      	ldr	r2, [r7, #0]
 801a61a:	429a      	cmp	r2, r3
 801a61c:	d91e      	bls.n	801a65c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a61e:	4b93      	ldr	r3, [pc, #588]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	2201      	movs	r2, #1
 801a624:	4393      	bics	r3, r2
 801a626:	0019      	movs	r1, r3
 801a628:	4b90      	ldr	r3, [pc, #576]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a62a:	683a      	ldr	r2, [r7, #0]
 801a62c:	430a      	orrs	r2, r1
 801a62e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801a630:	f7f9 f848 	bl	80136c4 <HAL_GetTick>
 801a634:	0003      	movs	r3, r0
 801a636:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a638:	e009      	b.n	801a64e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a63a:	f7f9 f843 	bl	80136c4 <HAL_GetTick>
 801a63e:	0002      	movs	r2, r0
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	1ad3      	subs	r3, r2, r3
 801a644:	4a8a      	ldr	r2, [pc, #552]	@ (801a870 <HAL_RCC_ClockConfig+0x274>)
 801a646:	4293      	cmp	r3, r2
 801a648:	d901      	bls.n	801a64e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801a64a:	2303      	movs	r3, #3
 801a64c:	e109      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a64e:	4b87      	ldr	r3, [pc, #540]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	2201      	movs	r2, #1
 801a654:	4013      	ands	r3, r2
 801a656:	683a      	ldr	r2, [r7, #0]
 801a658:	429a      	cmp	r2, r3
 801a65a:	d1ee      	bne.n	801a63a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	2202      	movs	r2, #2
 801a662:	4013      	ands	r3, r2
 801a664:	d009      	beq.n	801a67a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a666:	4b83      	ldr	r3, [pc, #524]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a668:	68db      	ldr	r3, [r3, #12]
 801a66a:	22f0      	movs	r2, #240	@ 0xf0
 801a66c:	4393      	bics	r3, r2
 801a66e:	0019      	movs	r1, r3
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	689a      	ldr	r2, [r3, #8]
 801a674:	4b7f      	ldr	r3, [pc, #508]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a676:	430a      	orrs	r2, r1
 801a678:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	2201      	movs	r2, #1
 801a680:	4013      	ands	r3, r2
 801a682:	d100      	bne.n	801a686 <HAL_RCC_ClockConfig+0x8a>
 801a684:	e089      	b.n	801a79a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	685b      	ldr	r3, [r3, #4]
 801a68a:	2b02      	cmp	r3, #2
 801a68c:	d107      	bne.n	801a69e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a68e:	4b79      	ldr	r3, [pc, #484]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a690:	681a      	ldr	r2, [r3, #0]
 801a692:	2380      	movs	r3, #128	@ 0x80
 801a694:	029b      	lsls	r3, r3, #10
 801a696:	4013      	ands	r3, r2
 801a698:	d120      	bne.n	801a6dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a69a:	2301      	movs	r3, #1
 801a69c:	e0e1      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	2b03      	cmp	r3, #3
 801a6a4:	d107      	bne.n	801a6b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801a6a6:	4b73      	ldr	r3, [pc, #460]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a6a8:	681a      	ldr	r2, [r3, #0]
 801a6aa:	2380      	movs	r3, #128	@ 0x80
 801a6ac:	049b      	lsls	r3, r3, #18
 801a6ae:	4013      	ands	r3, r2
 801a6b0:	d114      	bne.n	801a6dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a6b2:	2301      	movs	r3, #1
 801a6b4:	e0d5      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	685b      	ldr	r3, [r3, #4]
 801a6ba:	2b01      	cmp	r3, #1
 801a6bc:	d106      	bne.n	801a6cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a6be:	4b6d      	ldr	r3, [pc, #436]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	2204      	movs	r2, #4
 801a6c4:	4013      	ands	r3, r2
 801a6c6:	d109      	bne.n	801a6dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a6c8:	2301      	movs	r3, #1
 801a6ca:	e0ca      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a6cc:	4b69      	ldr	r3, [pc, #420]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a6ce:	681a      	ldr	r2, [r3, #0]
 801a6d0:	2380      	movs	r3, #128	@ 0x80
 801a6d2:	009b      	lsls	r3, r3, #2
 801a6d4:	4013      	ands	r3, r2
 801a6d6:	d101      	bne.n	801a6dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801a6d8:	2301      	movs	r3, #1
 801a6da:	e0c2      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a6dc:	4b65      	ldr	r3, [pc, #404]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a6de:	68db      	ldr	r3, [r3, #12]
 801a6e0:	2203      	movs	r2, #3
 801a6e2:	4393      	bics	r3, r2
 801a6e4:	0019      	movs	r1, r3
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	685a      	ldr	r2, [r3, #4]
 801a6ea:	4b62      	ldr	r3, [pc, #392]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a6ec:	430a      	orrs	r2, r1
 801a6ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801a6f0:	f7f8 ffe8 	bl	80136c4 <HAL_GetTick>
 801a6f4:	0003      	movs	r3, r0
 801a6f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	685b      	ldr	r3, [r3, #4]
 801a6fc:	2b02      	cmp	r3, #2
 801a6fe:	d111      	bne.n	801a724 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801a700:	e009      	b.n	801a716 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a702:	f7f8 ffdf 	bl	80136c4 <HAL_GetTick>
 801a706:	0002      	movs	r2, r0
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	1ad3      	subs	r3, r2, r3
 801a70c:	4a58      	ldr	r2, [pc, #352]	@ (801a870 <HAL_RCC_ClockConfig+0x274>)
 801a70e:	4293      	cmp	r3, r2
 801a710:	d901      	bls.n	801a716 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801a712:	2303      	movs	r3, #3
 801a714:	e0a5      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801a716:	4b57      	ldr	r3, [pc, #348]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a718:	68db      	ldr	r3, [r3, #12]
 801a71a:	220c      	movs	r2, #12
 801a71c:	4013      	ands	r3, r2
 801a71e:	2b08      	cmp	r3, #8
 801a720:	d1ef      	bne.n	801a702 <HAL_RCC_ClockConfig+0x106>
 801a722:	e03a      	b.n	801a79a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	685b      	ldr	r3, [r3, #4]
 801a728:	2b03      	cmp	r3, #3
 801a72a:	d111      	bne.n	801a750 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a72c:	e009      	b.n	801a742 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a72e:	f7f8 ffc9 	bl	80136c4 <HAL_GetTick>
 801a732:	0002      	movs	r2, r0
 801a734:	68fb      	ldr	r3, [r7, #12]
 801a736:	1ad3      	subs	r3, r2, r3
 801a738:	4a4d      	ldr	r2, [pc, #308]	@ (801a870 <HAL_RCC_ClockConfig+0x274>)
 801a73a:	4293      	cmp	r3, r2
 801a73c:	d901      	bls.n	801a742 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801a73e:	2303      	movs	r3, #3
 801a740:	e08f      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a742:	4b4c      	ldr	r3, [pc, #304]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a744:	68db      	ldr	r3, [r3, #12]
 801a746:	220c      	movs	r2, #12
 801a748:	4013      	ands	r3, r2
 801a74a:	2b0c      	cmp	r3, #12
 801a74c:	d1ef      	bne.n	801a72e <HAL_RCC_ClockConfig+0x132>
 801a74e:	e024      	b.n	801a79a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	685b      	ldr	r3, [r3, #4]
 801a754:	2b01      	cmp	r3, #1
 801a756:	d11b      	bne.n	801a790 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801a758:	e009      	b.n	801a76e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a75a:	f7f8 ffb3 	bl	80136c4 <HAL_GetTick>
 801a75e:	0002      	movs	r2, r0
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	1ad3      	subs	r3, r2, r3
 801a764:	4a42      	ldr	r2, [pc, #264]	@ (801a870 <HAL_RCC_ClockConfig+0x274>)
 801a766:	4293      	cmp	r3, r2
 801a768:	d901      	bls.n	801a76e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801a76a:	2303      	movs	r3, #3
 801a76c:	e079      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801a76e:	4b41      	ldr	r3, [pc, #260]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a770:	68db      	ldr	r3, [r3, #12]
 801a772:	220c      	movs	r2, #12
 801a774:	4013      	ands	r3, r2
 801a776:	2b04      	cmp	r3, #4
 801a778:	d1ef      	bne.n	801a75a <HAL_RCC_ClockConfig+0x15e>
 801a77a:	e00e      	b.n	801a79a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a77c:	f7f8 ffa2 	bl	80136c4 <HAL_GetTick>
 801a780:	0002      	movs	r2, r0
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	1ad3      	subs	r3, r2, r3
 801a786:	4a3a      	ldr	r2, [pc, #232]	@ (801a870 <HAL_RCC_ClockConfig+0x274>)
 801a788:	4293      	cmp	r3, r2
 801a78a:	d901      	bls.n	801a790 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801a78c:	2303      	movs	r3, #3
 801a78e:	e068      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801a790:	4b38      	ldr	r3, [pc, #224]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a792:	68db      	ldr	r3, [r3, #12]
 801a794:	220c      	movs	r2, #12
 801a796:	4013      	ands	r3, r2
 801a798:	d1f0      	bne.n	801a77c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801a79a:	4b34      	ldr	r3, [pc, #208]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	2201      	movs	r2, #1
 801a7a0:	4013      	ands	r3, r2
 801a7a2:	683a      	ldr	r2, [r7, #0]
 801a7a4:	429a      	cmp	r2, r3
 801a7a6:	d21e      	bcs.n	801a7e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a7a8:	4b30      	ldr	r3, [pc, #192]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	2201      	movs	r2, #1
 801a7ae:	4393      	bics	r3, r2
 801a7b0:	0019      	movs	r1, r3
 801a7b2:	4b2e      	ldr	r3, [pc, #184]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a7b4:	683a      	ldr	r2, [r7, #0]
 801a7b6:	430a      	orrs	r2, r1
 801a7b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801a7ba:	f7f8 ff83 	bl	80136c4 <HAL_GetTick>
 801a7be:	0003      	movs	r3, r0
 801a7c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a7c2:	e009      	b.n	801a7d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801a7c4:	f7f8 ff7e 	bl	80136c4 <HAL_GetTick>
 801a7c8:	0002      	movs	r2, r0
 801a7ca:	68fb      	ldr	r3, [r7, #12]
 801a7cc:	1ad3      	subs	r3, r2, r3
 801a7ce:	4a28      	ldr	r2, [pc, #160]	@ (801a870 <HAL_RCC_ClockConfig+0x274>)
 801a7d0:	4293      	cmp	r3, r2
 801a7d2:	d901      	bls.n	801a7d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801a7d4:	2303      	movs	r3, #3
 801a7d6:	e044      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801a7d8:	4b24      	ldr	r3, [pc, #144]	@ (801a86c <HAL_RCC_ClockConfig+0x270>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	2201      	movs	r2, #1
 801a7de:	4013      	ands	r3, r2
 801a7e0:	683a      	ldr	r2, [r7, #0]
 801a7e2:	429a      	cmp	r2, r3
 801a7e4:	d1ee      	bne.n	801a7c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	2204      	movs	r2, #4
 801a7ec:	4013      	ands	r3, r2
 801a7ee:	d009      	beq.n	801a804 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801a7f0:	4b20      	ldr	r3, [pc, #128]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a7f2:	68db      	ldr	r3, [r3, #12]
 801a7f4:	4a20      	ldr	r2, [pc, #128]	@ (801a878 <HAL_RCC_ClockConfig+0x27c>)
 801a7f6:	4013      	ands	r3, r2
 801a7f8:	0019      	movs	r1, r3
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	68da      	ldr	r2, [r3, #12]
 801a7fe:	4b1d      	ldr	r3, [pc, #116]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a800:	430a      	orrs	r2, r1
 801a802:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2208      	movs	r2, #8
 801a80a:	4013      	ands	r3, r2
 801a80c:	d00a      	beq.n	801a824 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801a80e:	4b19      	ldr	r3, [pc, #100]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a810:	68db      	ldr	r3, [r3, #12]
 801a812:	4a1a      	ldr	r2, [pc, #104]	@ (801a87c <HAL_RCC_ClockConfig+0x280>)
 801a814:	4013      	ands	r3, r2
 801a816:	0019      	movs	r1, r3
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	691b      	ldr	r3, [r3, #16]
 801a81c:	00da      	lsls	r2, r3, #3
 801a81e:	4b15      	ldr	r3, [pc, #84]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a820:	430a      	orrs	r2, r1
 801a822:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a824:	f000 f832 	bl	801a88c <HAL_RCC_GetSysClockFreq>
 801a828:	0001      	movs	r1, r0
 801a82a:	4b12      	ldr	r3, [pc, #72]	@ (801a874 <HAL_RCC_ClockConfig+0x278>)
 801a82c:	68db      	ldr	r3, [r3, #12]
 801a82e:	091b      	lsrs	r3, r3, #4
 801a830:	220f      	movs	r2, #15
 801a832:	4013      	ands	r3, r2
 801a834:	4a12      	ldr	r2, [pc, #72]	@ (801a880 <HAL_RCC_ClockConfig+0x284>)
 801a836:	5cd3      	ldrb	r3, [r2, r3]
 801a838:	000a      	movs	r2, r1
 801a83a:	40da      	lsrs	r2, r3
 801a83c:	4b11      	ldr	r3, [pc, #68]	@ (801a884 <HAL_RCC_ClockConfig+0x288>)
 801a83e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801a840:	4b11      	ldr	r3, [pc, #68]	@ (801a888 <HAL_RCC_ClockConfig+0x28c>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	250b      	movs	r5, #11
 801a846:	197c      	adds	r4, r7, r5
 801a848:	0018      	movs	r0, r3
 801a84a:	f7f8 fef5 	bl	8013638 <HAL_InitTick>
 801a84e:	0003      	movs	r3, r0
 801a850:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801a852:	197b      	adds	r3, r7, r5
 801a854:	781b      	ldrb	r3, [r3, #0]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d002      	beq.n	801a860 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801a85a:	197b      	adds	r3, r7, r5
 801a85c:	781b      	ldrb	r3, [r3, #0]
 801a85e:	e000      	b.n	801a862 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801a860:	2300      	movs	r3, #0
}
 801a862:	0018      	movs	r0, r3
 801a864:	46bd      	mov	sp, r7
 801a866:	b004      	add	sp, #16
 801a868:	bdb0      	pop	{r4, r5, r7, pc}
 801a86a:	46c0      	nop			@ (mov r8, r8)
 801a86c:	40022000 	.word	0x40022000
 801a870:	00001388 	.word	0x00001388
 801a874:	40021000 	.word	0x40021000
 801a878:	fffff8ff 	.word	0xfffff8ff
 801a87c:	ffffc7ff 	.word	0xffffc7ff
 801a880:	0802d580 	.word	0x0802d580
 801a884:	200000e0 	.word	0x200000e0
 801a888:	200000f0 	.word	0x200000f0

0801a88c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a88c:	b5b0      	push	{r4, r5, r7, lr}
 801a88e:	b08e      	sub	sp, #56	@ 0x38
 801a890:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801a892:	4b4c      	ldr	r3, [pc, #304]	@ (801a9c4 <HAL_RCC_GetSysClockFreq+0x138>)
 801a894:	68db      	ldr	r3, [r3, #12]
 801a896:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801a898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a89a:	230c      	movs	r3, #12
 801a89c:	4013      	ands	r3, r2
 801a89e:	2b0c      	cmp	r3, #12
 801a8a0:	d014      	beq.n	801a8cc <HAL_RCC_GetSysClockFreq+0x40>
 801a8a2:	d900      	bls.n	801a8a6 <HAL_RCC_GetSysClockFreq+0x1a>
 801a8a4:	e07b      	b.n	801a99e <HAL_RCC_GetSysClockFreq+0x112>
 801a8a6:	2b04      	cmp	r3, #4
 801a8a8:	d002      	beq.n	801a8b0 <HAL_RCC_GetSysClockFreq+0x24>
 801a8aa:	2b08      	cmp	r3, #8
 801a8ac:	d00b      	beq.n	801a8c6 <HAL_RCC_GetSysClockFreq+0x3a>
 801a8ae:	e076      	b.n	801a99e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801a8b0:	4b44      	ldr	r3, [pc, #272]	@ (801a9c4 <HAL_RCC_GetSysClockFreq+0x138>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	2210      	movs	r2, #16
 801a8b6:	4013      	ands	r3, r2
 801a8b8:	d002      	beq.n	801a8c0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801a8ba:	4b43      	ldr	r3, [pc, #268]	@ (801a9c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801a8bc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801a8be:	e07c      	b.n	801a9ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801a8c0:	4b42      	ldr	r3, [pc, #264]	@ (801a9cc <HAL_RCC_GetSysClockFreq+0x140>)
 801a8c2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a8c4:	e079      	b.n	801a9ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801a8c6:	4b42      	ldr	r3, [pc, #264]	@ (801a9d0 <HAL_RCC_GetSysClockFreq+0x144>)
 801a8c8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a8ca:	e076      	b.n	801a9ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8ce:	0c9a      	lsrs	r2, r3, #18
 801a8d0:	230f      	movs	r3, #15
 801a8d2:	401a      	ands	r2, r3
 801a8d4:	4b3f      	ldr	r3, [pc, #252]	@ (801a9d4 <HAL_RCC_GetSysClockFreq+0x148>)
 801a8d6:	5c9b      	ldrb	r3, [r3, r2]
 801a8d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801a8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8dc:	0d9a      	lsrs	r2, r3, #22
 801a8de:	2303      	movs	r3, #3
 801a8e0:	4013      	ands	r3, r2
 801a8e2:	3301      	adds	r3, #1
 801a8e4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a8e6:	4b37      	ldr	r3, [pc, #220]	@ (801a9c4 <HAL_RCC_GetSysClockFreq+0x138>)
 801a8e8:	68da      	ldr	r2, [r3, #12]
 801a8ea:	2380      	movs	r3, #128	@ 0x80
 801a8ec:	025b      	lsls	r3, r3, #9
 801a8ee:	4013      	ands	r3, r2
 801a8f0:	d01a      	beq.n	801a928 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801a8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8f4:	61bb      	str	r3, [r7, #24]
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	61fb      	str	r3, [r7, #28]
 801a8fa:	4a35      	ldr	r2, [pc, #212]	@ (801a9d0 <HAL_RCC_GetSysClockFreq+0x144>)
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	69b8      	ldr	r0, [r7, #24]
 801a900:	69f9      	ldr	r1, [r7, #28]
 801a902:	f7e5 fe5d 	bl	80005c0 <__aeabi_lmul>
 801a906:	0002      	movs	r2, r0
 801a908:	000b      	movs	r3, r1
 801a90a:	0010      	movs	r0, r2
 801a90c:	0019      	movs	r1, r3
 801a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a910:	613b      	str	r3, [r7, #16]
 801a912:	2300      	movs	r3, #0
 801a914:	617b      	str	r3, [r7, #20]
 801a916:	693a      	ldr	r2, [r7, #16]
 801a918:	697b      	ldr	r3, [r7, #20]
 801a91a:	f7e5 fe31 	bl	8000580 <__aeabi_uldivmod>
 801a91e:	0002      	movs	r2, r0
 801a920:	000b      	movs	r3, r1
 801a922:	0013      	movs	r3, r2
 801a924:	637b      	str	r3, [r7, #52]	@ 0x34
 801a926:	e037      	b.n	801a998 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801a928:	4b26      	ldr	r3, [pc, #152]	@ (801a9c4 <HAL_RCC_GetSysClockFreq+0x138>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	2210      	movs	r2, #16
 801a92e:	4013      	ands	r3, r2
 801a930:	d01a      	beq.n	801a968 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801a932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a934:	60bb      	str	r3, [r7, #8]
 801a936:	2300      	movs	r3, #0
 801a938:	60fb      	str	r3, [r7, #12]
 801a93a:	4a23      	ldr	r2, [pc, #140]	@ (801a9c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801a93c:	2300      	movs	r3, #0
 801a93e:	68b8      	ldr	r0, [r7, #8]
 801a940:	68f9      	ldr	r1, [r7, #12]
 801a942:	f7e5 fe3d 	bl	80005c0 <__aeabi_lmul>
 801a946:	0002      	movs	r2, r0
 801a948:	000b      	movs	r3, r1
 801a94a:	0010      	movs	r0, r2
 801a94c:	0019      	movs	r1, r3
 801a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a950:	603b      	str	r3, [r7, #0]
 801a952:	2300      	movs	r3, #0
 801a954:	607b      	str	r3, [r7, #4]
 801a956:	683a      	ldr	r2, [r7, #0]
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	f7e5 fe11 	bl	8000580 <__aeabi_uldivmod>
 801a95e:	0002      	movs	r2, r0
 801a960:	000b      	movs	r3, r1
 801a962:	0013      	movs	r3, r2
 801a964:	637b      	str	r3, [r7, #52]	@ 0x34
 801a966:	e017      	b.n	801a998 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801a968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a96a:	0018      	movs	r0, r3
 801a96c:	2300      	movs	r3, #0
 801a96e:	0019      	movs	r1, r3
 801a970:	4a16      	ldr	r2, [pc, #88]	@ (801a9cc <HAL_RCC_GetSysClockFreq+0x140>)
 801a972:	2300      	movs	r3, #0
 801a974:	f7e5 fe24 	bl	80005c0 <__aeabi_lmul>
 801a978:	0002      	movs	r2, r0
 801a97a:	000b      	movs	r3, r1
 801a97c:	0010      	movs	r0, r2
 801a97e:	0019      	movs	r1, r3
 801a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a982:	001c      	movs	r4, r3
 801a984:	2300      	movs	r3, #0
 801a986:	001d      	movs	r5, r3
 801a988:	0022      	movs	r2, r4
 801a98a:	002b      	movs	r3, r5
 801a98c:	f7e5 fdf8 	bl	8000580 <__aeabi_uldivmod>
 801a990:	0002      	movs	r2, r0
 801a992:	000b      	movs	r3, r1
 801a994:	0013      	movs	r3, r2
 801a996:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801a998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a99a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a99c:	e00d      	b.n	801a9ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801a99e:	4b09      	ldr	r3, [pc, #36]	@ (801a9c4 <HAL_RCC_GetSysClockFreq+0x138>)
 801a9a0:	685b      	ldr	r3, [r3, #4]
 801a9a2:	0b5b      	lsrs	r3, r3, #13
 801a9a4:	2207      	movs	r2, #7
 801a9a6:	4013      	ands	r3, r2
 801a9a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801a9aa:	6a3b      	ldr	r3, [r7, #32]
 801a9ac:	3301      	adds	r3, #1
 801a9ae:	2280      	movs	r2, #128	@ 0x80
 801a9b0:	0212      	lsls	r2, r2, #8
 801a9b2:	409a      	lsls	r2, r3
 801a9b4:	0013      	movs	r3, r2
 801a9b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801a9b8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801a9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801a9bc:	0018      	movs	r0, r3
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	b00e      	add	sp, #56	@ 0x38
 801a9c2:	bdb0      	pop	{r4, r5, r7, pc}
 801a9c4:	40021000 	.word	0x40021000
 801a9c8:	003d0900 	.word	0x003d0900
 801a9cc:	00f42400 	.word	0x00f42400
 801a9d0:	007a1200 	.word	0x007a1200
 801a9d4:	0802d598 	.word	0x0802d598

0801a9d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a9dc:	4b02      	ldr	r3, [pc, #8]	@ (801a9e8 <HAL_RCC_GetHCLKFreq+0x10>)
 801a9de:	681b      	ldr	r3, [r3, #0]
}
 801a9e0:	0018      	movs	r0, r3
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	46c0      	nop			@ (mov r8, r8)
 801a9e8:	200000e0 	.word	0x200000e0

0801a9ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a9ec:	b580      	push	{r7, lr}
 801a9ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801a9f0:	f7ff fff2 	bl	801a9d8 <HAL_RCC_GetHCLKFreq>
 801a9f4:	0001      	movs	r1, r0
 801a9f6:	4b06      	ldr	r3, [pc, #24]	@ (801aa10 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a9f8:	68db      	ldr	r3, [r3, #12]
 801a9fa:	0a1b      	lsrs	r3, r3, #8
 801a9fc:	2207      	movs	r2, #7
 801a9fe:	4013      	ands	r3, r2
 801aa00:	4a04      	ldr	r2, [pc, #16]	@ (801aa14 <HAL_RCC_GetPCLK1Freq+0x28>)
 801aa02:	5cd3      	ldrb	r3, [r2, r3]
 801aa04:	40d9      	lsrs	r1, r3
 801aa06:	000b      	movs	r3, r1
}
 801aa08:	0018      	movs	r0, r3
 801aa0a:	46bd      	mov	sp, r7
 801aa0c:	bd80      	pop	{r7, pc}
 801aa0e:	46c0      	nop			@ (mov r8, r8)
 801aa10:	40021000 	.word	0x40021000
 801aa14:	0802d590 	.word	0x0802d590

0801aa18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801aa1c:	f7ff ffdc 	bl	801a9d8 <HAL_RCC_GetHCLKFreq>
 801aa20:	0001      	movs	r1, r0
 801aa22:	4b06      	ldr	r3, [pc, #24]	@ (801aa3c <HAL_RCC_GetPCLK2Freq+0x24>)
 801aa24:	68db      	ldr	r3, [r3, #12]
 801aa26:	0adb      	lsrs	r3, r3, #11
 801aa28:	2207      	movs	r2, #7
 801aa2a:	4013      	ands	r3, r2
 801aa2c:	4a04      	ldr	r2, [pc, #16]	@ (801aa40 <HAL_RCC_GetPCLK2Freq+0x28>)
 801aa2e:	5cd3      	ldrb	r3, [r2, r3]
 801aa30:	40d9      	lsrs	r1, r3
 801aa32:	000b      	movs	r3, r1
}
 801aa34:	0018      	movs	r0, r3
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	46c0      	nop			@ (mov r8, r8)
 801aa3c:	40021000 	.word	0x40021000
 801aa40:	0802d590 	.word	0x0802d590

0801aa44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b086      	sub	sp, #24
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801aa4c:	2017      	movs	r0, #23
 801aa4e:	183b      	adds	r3, r7, r0
 801aa50:	2200      	movs	r2, #0
 801aa52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	2220      	movs	r2, #32
 801aa5a:	4013      	ands	r3, r2
 801aa5c:	d100      	bne.n	801aa60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801aa5e:	e0c7      	b.n	801abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801aa60:	4b9b      	ldr	r3, [pc, #620]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aa64:	2380      	movs	r3, #128	@ 0x80
 801aa66:	055b      	lsls	r3, r3, #21
 801aa68:	4013      	ands	r3, r2
 801aa6a:	d109      	bne.n	801aa80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801aa6c:	4b98      	ldr	r3, [pc, #608]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aa70:	4b97      	ldr	r3, [pc, #604]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aa72:	2180      	movs	r1, #128	@ 0x80
 801aa74:	0549      	lsls	r1, r1, #21
 801aa76:	430a      	orrs	r2, r1
 801aa78:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801aa7a:	183b      	adds	r3, r7, r0
 801aa7c:	2201      	movs	r2, #1
 801aa7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801aa80:	4b94      	ldr	r3, [pc, #592]	@ (801acd4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801aa82:	681a      	ldr	r2, [r3, #0]
 801aa84:	2380      	movs	r3, #128	@ 0x80
 801aa86:	005b      	lsls	r3, r3, #1
 801aa88:	4013      	ands	r3, r2
 801aa8a:	d11a      	bne.n	801aac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801aa8c:	4b91      	ldr	r3, [pc, #580]	@ (801acd4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801aa8e:	681a      	ldr	r2, [r3, #0]
 801aa90:	4b90      	ldr	r3, [pc, #576]	@ (801acd4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801aa92:	2180      	movs	r1, #128	@ 0x80
 801aa94:	0049      	lsls	r1, r1, #1
 801aa96:	430a      	orrs	r2, r1
 801aa98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801aa9a:	f7f8 fe13 	bl	80136c4 <HAL_GetTick>
 801aa9e:	0003      	movs	r3, r0
 801aaa0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801aaa2:	e008      	b.n	801aab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801aaa4:	f7f8 fe0e 	bl	80136c4 <HAL_GetTick>
 801aaa8:	0002      	movs	r2, r0
 801aaaa:	693b      	ldr	r3, [r7, #16]
 801aaac:	1ad3      	subs	r3, r2, r3
 801aaae:	2b64      	cmp	r3, #100	@ 0x64
 801aab0:	d901      	bls.n	801aab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801aab2:	2303      	movs	r3, #3
 801aab4:	e107      	b.n	801acc6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801aab6:	4b87      	ldr	r3, [pc, #540]	@ (801acd4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	2380      	movs	r3, #128	@ 0x80
 801aabc:	005b      	lsls	r3, r3, #1
 801aabe:	4013      	ands	r3, r2
 801aac0:	d0f0      	beq.n	801aaa4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801aac2:	4b83      	ldr	r3, [pc, #524]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aac4:	681a      	ldr	r2, [r3, #0]
 801aac6:	23c0      	movs	r3, #192	@ 0xc0
 801aac8:	039b      	lsls	r3, r3, #14
 801aaca:	4013      	ands	r3, r2
 801aacc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	685a      	ldr	r2, [r3, #4]
 801aad2:	23c0      	movs	r3, #192	@ 0xc0
 801aad4:	039b      	lsls	r3, r3, #14
 801aad6:	4013      	ands	r3, r2
 801aad8:	68fa      	ldr	r2, [r7, #12]
 801aada:	429a      	cmp	r2, r3
 801aadc:	d013      	beq.n	801ab06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	685a      	ldr	r2, [r3, #4]
 801aae2:	23c0      	movs	r3, #192	@ 0xc0
 801aae4:	029b      	lsls	r3, r3, #10
 801aae6:	401a      	ands	r2, r3
 801aae8:	23c0      	movs	r3, #192	@ 0xc0
 801aaea:	029b      	lsls	r3, r3, #10
 801aaec:	429a      	cmp	r2, r3
 801aaee:	d10a      	bne.n	801ab06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801aaf0:	4b77      	ldr	r3, [pc, #476]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aaf2:	681a      	ldr	r2, [r3, #0]
 801aaf4:	2380      	movs	r3, #128	@ 0x80
 801aaf6:	029b      	lsls	r3, r3, #10
 801aaf8:	401a      	ands	r2, r3
 801aafa:	2380      	movs	r3, #128	@ 0x80
 801aafc:	029b      	lsls	r3, r3, #10
 801aafe:	429a      	cmp	r2, r3
 801ab00:	d101      	bne.n	801ab06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801ab02:	2301      	movs	r3, #1
 801ab04:	e0df      	b.n	801acc6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801ab06:	4b72      	ldr	r3, [pc, #456]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab0a:	23c0      	movs	r3, #192	@ 0xc0
 801ab0c:	029b      	lsls	r3, r3, #10
 801ab0e:	4013      	ands	r3, r2
 801ab10:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d03b      	beq.n	801ab90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	685a      	ldr	r2, [r3, #4]
 801ab1c:	23c0      	movs	r3, #192	@ 0xc0
 801ab1e:	029b      	lsls	r3, r3, #10
 801ab20:	4013      	ands	r3, r2
 801ab22:	68fa      	ldr	r2, [r7, #12]
 801ab24:	429a      	cmp	r2, r3
 801ab26:	d033      	beq.n	801ab90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	2220      	movs	r2, #32
 801ab2e:	4013      	ands	r3, r2
 801ab30:	d02e      	beq.n	801ab90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801ab32:	4b67      	ldr	r3, [pc, #412]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ab36:	4a68      	ldr	r2, [pc, #416]	@ (801acd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801ab38:	4013      	ands	r3, r2
 801ab3a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801ab3c:	4b64      	ldr	r3, [pc, #400]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab40:	4b63      	ldr	r3, [pc, #396]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab42:	2180      	movs	r1, #128	@ 0x80
 801ab44:	0309      	lsls	r1, r1, #12
 801ab46:	430a      	orrs	r2, r1
 801ab48:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801ab4a:	4b61      	ldr	r3, [pc, #388]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab4e:	4b60      	ldr	r3, [pc, #384]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab50:	4962      	ldr	r1, [pc, #392]	@ (801acdc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801ab52:	400a      	ands	r2, r1
 801ab54:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801ab56:	4b5e      	ldr	r3, [pc, #376]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab58:	68fa      	ldr	r2, [r7, #12]
 801ab5a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801ab5c:	68fa      	ldr	r2, [r7, #12]
 801ab5e:	2380      	movs	r3, #128	@ 0x80
 801ab60:	005b      	lsls	r3, r3, #1
 801ab62:	4013      	ands	r3, r2
 801ab64:	d014      	beq.n	801ab90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ab66:	f7f8 fdad 	bl	80136c4 <HAL_GetTick>
 801ab6a:	0003      	movs	r3, r0
 801ab6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ab6e:	e009      	b.n	801ab84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801ab70:	f7f8 fda8 	bl	80136c4 <HAL_GetTick>
 801ab74:	0002      	movs	r2, r0
 801ab76:	693b      	ldr	r3, [r7, #16]
 801ab78:	1ad3      	subs	r3, r2, r3
 801ab7a:	4a59      	ldr	r2, [pc, #356]	@ (801ace0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801ab7c:	4293      	cmp	r3, r2
 801ab7e:	d901      	bls.n	801ab84 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801ab80:	2303      	movs	r3, #3
 801ab82:	e0a0      	b.n	801acc6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ab84:	4b52      	ldr	r3, [pc, #328]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ab86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ab88:	2380      	movs	r3, #128	@ 0x80
 801ab8a:	009b      	lsls	r3, r3, #2
 801ab8c:	4013      	ands	r3, r2
 801ab8e:	d0ef      	beq.n	801ab70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	2220      	movs	r2, #32
 801ab96:	4013      	ands	r3, r2
 801ab98:	d01f      	beq.n	801abda <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	685a      	ldr	r2, [r3, #4]
 801ab9e:	23c0      	movs	r3, #192	@ 0xc0
 801aba0:	029b      	lsls	r3, r3, #10
 801aba2:	401a      	ands	r2, r3
 801aba4:	23c0      	movs	r3, #192	@ 0xc0
 801aba6:	029b      	lsls	r3, r3, #10
 801aba8:	429a      	cmp	r2, r3
 801abaa:	d10c      	bne.n	801abc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801abac:	4b48      	ldr	r3, [pc, #288]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	4a4c      	ldr	r2, [pc, #304]	@ (801ace4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801abb2:	4013      	ands	r3, r2
 801abb4:	0019      	movs	r1, r3
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	685a      	ldr	r2, [r3, #4]
 801abba:	23c0      	movs	r3, #192	@ 0xc0
 801abbc:	039b      	lsls	r3, r3, #14
 801abbe:	401a      	ands	r2, r3
 801abc0:	4b43      	ldr	r3, [pc, #268]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801abc2:	430a      	orrs	r2, r1
 801abc4:	601a      	str	r2, [r3, #0]
 801abc6:	4b42      	ldr	r3, [pc, #264]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801abc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	685a      	ldr	r2, [r3, #4]
 801abce:	23c0      	movs	r3, #192	@ 0xc0
 801abd0:	029b      	lsls	r3, r3, #10
 801abd2:	401a      	ands	r2, r3
 801abd4:	4b3e      	ldr	r3, [pc, #248]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801abd6:	430a      	orrs	r2, r1
 801abd8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801abda:	2317      	movs	r3, #23
 801abdc:	18fb      	adds	r3, r7, r3
 801abde:	781b      	ldrb	r3, [r3, #0]
 801abe0:	2b01      	cmp	r3, #1
 801abe2:	d105      	bne.n	801abf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801abe4:	4b3a      	ldr	r3, [pc, #232]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801abe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801abe8:	4b39      	ldr	r3, [pc, #228]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801abea:	493f      	ldr	r1, [pc, #252]	@ (801ace8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801abec:	400a      	ands	r2, r1
 801abee:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	2201      	movs	r2, #1
 801abf6:	4013      	ands	r3, r2
 801abf8:	d009      	beq.n	801ac0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801abfa:	4b35      	ldr	r3, [pc, #212]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801abfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801abfe:	2203      	movs	r2, #3
 801ac00:	4393      	bics	r3, r2
 801ac02:	0019      	movs	r1, r3
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	689a      	ldr	r2, [r3, #8]
 801ac08:	4b31      	ldr	r3, [pc, #196]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac0a:	430a      	orrs	r2, r1
 801ac0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	2202      	movs	r2, #2
 801ac14:	4013      	ands	r3, r2
 801ac16:	d009      	beq.n	801ac2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ac18:	4b2d      	ldr	r3, [pc, #180]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ac1c:	220c      	movs	r2, #12
 801ac1e:	4393      	bics	r3, r2
 801ac20:	0019      	movs	r1, r3
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	68da      	ldr	r2, [r3, #12]
 801ac26:	4b2a      	ldr	r3, [pc, #168]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac28:	430a      	orrs	r2, r1
 801ac2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	2204      	movs	r2, #4
 801ac32:	4013      	ands	r3, r2
 801ac34:	d009      	beq.n	801ac4a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801ac36:	4b26      	ldr	r3, [pc, #152]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ac3a:	4a2c      	ldr	r2, [pc, #176]	@ (801acec <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801ac3c:	4013      	ands	r3, r2
 801ac3e:	0019      	movs	r1, r3
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	691a      	ldr	r2, [r3, #16]
 801ac44:	4b22      	ldr	r3, [pc, #136]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac46:	430a      	orrs	r2, r1
 801ac48:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	2208      	movs	r2, #8
 801ac50:	4013      	ands	r3, r2
 801ac52:	d009      	beq.n	801ac68 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801ac54:	4b1e      	ldr	r3, [pc, #120]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ac58:	4a25      	ldr	r2, [pc, #148]	@ (801acf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801ac5a:	4013      	ands	r3, r2
 801ac5c:	0019      	movs	r1, r3
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	695a      	ldr	r2, [r3, #20]
 801ac62:	4b1b      	ldr	r3, [pc, #108]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac64:	430a      	orrs	r2, r1
 801ac66:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	681a      	ldr	r2, [r3, #0]
 801ac6c:	2380      	movs	r3, #128	@ 0x80
 801ac6e:	005b      	lsls	r3, r3, #1
 801ac70:	4013      	ands	r3, r2
 801ac72:	d009      	beq.n	801ac88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801ac74:	4b16      	ldr	r3, [pc, #88]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ac78:	4a17      	ldr	r2, [pc, #92]	@ (801acd8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801ac7a:	4013      	ands	r3, r2
 801ac7c:	0019      	movs	r1, r3
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	699a      	ldr	r2, [r3, #24]
 801ac82:	4b13      	ldr	r3, [pc, #76]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac84:	430a      	orrs	r2, r1
 801ac86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	2240      	movs	r2, #64	@ 0x40
 801ac8e:	4013      	ands	r3, r2
 801ac90:	d009      	beq.n	801aca6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ac92:	4b0f      	ldr	r3, [pc, #60]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801ac94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ac96:	4a17      	ldr	r2, [pc, #92]	@ (801acf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801ac98:	4013      	ands	r3, r2
 801ac9a:	0019      	movs	r1, r3
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	6a1a      	ldr	r2, [r3, #32]
 801aca0:	4b0b      	ldr	r3, [pc, #44]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801aca2:	430a      	orrs	r2, r1
 801aca4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	2280      	movs	r2, #128	@ 0x80
 801acac:	4013      	ands	r3, r2
 801acae:	d009      	beq.n	801acc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801acb0:	4b07      	ldr	r3, [pc, #28]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801acb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801acb4:	4a10      	ldr	r2, [pc, #64]	@ (801acf8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801acb6:	4013      	ands	r3, r2
 801acb8:	0019      	movs	r1, r3
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	69da      	ldr	r2, [r3, #28]
 801acbe:	4b04      	ldr	r3, [pc, #16]	@ (801acd0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801acc0:	430a      	orrs	r2, r1
 801acc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801acc4:	2300      	movs	r3, #0
}
 801acc6:	0018      	movs	r0, r3
 801acc8:	46bd      	mov	sp, r7
 801acca:	b006      	add	sp, #24
 801accc:	bd80      	pop	{r7, pc}
 801acce:	46c0      	nop			@ (mov r8, r8)
 801acd0:	40021000 	.word	0x40021000
 801acd4:	40007000 	.word	0x40007000
 801acd8:	fffcffff 	.word	0xfffcffff
 801acdc:	fff7ffff 	.word	0xfff7ffff
 801ace0:	00001388 	.word	0x00001388
 801ace4:	ffcfffff 	.word	0xffcfffff
 801ace8:	efffffff 	.word	0xefffffff
 801acec:	fffff3ff 	.word	0xfffff3ff
 801acf0:	ffffcfff 	.word	0xffffcfff
 801acf4:	fbffffff 	.word	0xfbffffff
 801acf8:	fff3ffff 	.word	0xfff3ffff

0801acfc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801acfc:	b5b0      	push	{r4, r5, r7, lr}
 801acfe:	b084      	sub	sp, #16
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801ad04:	230f      	movs	r3, #15
 801ad06:	18fb      	adds	r3, r7, r3
 801ad08:	2201      	movs	r2, #1
 801ad0a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d101      	bne.n	801ad16 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801ad12:	2301      	movs	r3, #1
 801ad14:	e088      	b.n	801ae28 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	2221      	movs	r2, #33	@ 0x21
 801ad1a:	5c9b      	ldrb	r3, [r3, r2]
 801ad1c:	b2db      	uxtb	r3, r3
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d107      	bne.n	801ad32 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2220      	movs	r2, #32
 801ad26:	2100      	movs	r1, #0
 801ad28:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	0018      	movs	r0, r3
 801ad2e:	f7f2 fbeb 	bl	800d508 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	2221      	movs	r2, #33	@ 0x21
 801ad36:	2102      	movs	r1, #2
 801ad38:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	68db      	ldr	r3, [r3, #12]
 801ad40:	2210      	movs	r2, #16
 801ad42:	4013      	ands	r3, r2
 801ad44:	2b10      	cmp	r3, #16
 801ad46:	d05f      	beq.n	801ae08 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	22ca      	movs	r2, #202	@ 0xca
 801ad4e:	625a      	str	r2, [r3, #36]	@ 0x24
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2253      	movs	r2, #83	@ 0x53
 801ad56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801ad58:	250f      	movs	r5, #15
 801ad5a:	197c      	adds	r4, r7, r5
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	0018      	movs	r0, r3
 801ad60:	f000 fa7c 	bl	801b25c <RTC_EnterInitMode>
 801ad64:	0003      	movs	r3, r0
 801ad66:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801ad68:	0028      	movs	r0, r5
 801ad6a:	183b      	adds	r3, r7, r0
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d12c      	bne.n	801adcc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	689a      	ldr	r2, [r3, #8]
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	492c      	ldr	r1, [pc, #176]	@ (801ae30 <HAL_RTC_Init+0x134>)
 801ad7e:	400a      	ands	r2, r1
 801ad80:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	6899      	ldr	r1, [r3, #8]
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	685a      	ldr	r2, [r3, #4]
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	691b      	ldr	r3, [r3, #16]
 801ad90:	431a      	orrs	r2, r3
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	699b      	ldr	r3, [r3, #24]
 801ad96:	431a      	orrs	r2, r3
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	430a      	orrs	r2, r1
 801ad9e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	68d2      	ldr	r2, [r2, #12]
 801ada8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	6919      	ldr	r1, [r3, #16]
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	689b      	ldr	r3, [r3, #8]
 801adb4:	041a      	lsls	r2, r3, #16
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	430a      	orrs	r2, r1
 801adbc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801adbe:	183c      	adds	r4, r7, r0
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	0018      	movs	r0, r3
 801adc4:	f000 fa8e 	bl	801b2e4 <RTC_ExitInitMode>
 801adc8:	0003      	movs	r3, r0
 801adca:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801adcc:	230f      	movs	r3, #15
 801adce:	18fb      	adds	r3, r7, r3
 801add0:	781b      	ldrb	r3, [r3, #0]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d113      	bne.n	801adfe <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	2103      	movs	r1, #3
 801ade2:	438a      	bics	r2, r1
 801ade4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	69da      	ldr	r2, [r3, #28]
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	695b      	ldr	r3, [r3, #20]
 801adf4:	431a      	orrs	r2, r3
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	430a      	orrs	r2, r1
 801adfc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	22ff      	movs	r2, #255	@ 0xff
 801ae04:	625a      	str	r2, [r3, #36]	@ 0x24
 801ae06:	e003      	b.n	801ae10 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801ae08:	230f      	movs	r3, #15
 801ae0a:	18fb      	adds	r3, r7, r3
 801ae0c:	2200      	movs	r2, #0
 801ae0e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801ae10:	230f      	movs	r3, #15
 801ae12:	18fb      	adds	r3, r7, r3
 801ae14:	781b      	ldrb	r3, [r3, #0]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d103      	bne.n	801ae22 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	2221      	movs	r2, #33	@ 0x21
 801ae1e:	2101      	movs	r1, #1
 801ae20:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801ae22:	230f      	movs	r3, #15
 801ae24:	18fb      	adds	r3, r7, r3
 801ae26:	781b      	ldrb	r3, [r3, #0]
}
 801ae28:	0018      	movs	r0, r3
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	b004      	add	sp, #16
 801ae2e:	bdb0      	pop	{r4, r5, r7, pc}
 801ae30:	ff8fffbf 	.word	0xff8fffbf

0801ae34 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801ae34:	b5b0      	push	{r4, r5, r7, lr}
 801ae36:	b086      	sub	sp, #24
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	60f8      	str	r0, [r7, #12]
 801ae3c:	60b9      	str	r1, [r7, #8]
 801ae3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801ae40:	2300      	movs	r3, #0
 801ae42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	2220      	movs	r2, #32
 801ae48:	5c9b      	ldrb	r3, [r3, r2]
 801ae4a:	2b01      	cmp	r3, #1
 801ae4c:	d101      	bne.n	801ae52 <HAL_RTC_SetTime+0x1e>
 801ae4e:	2302      	movs	r3, #2
 801ae50:	e092      	b.n	801af78 <HAL_RTC_SetTime+0x144>
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	2220      	movs	r2, #32
 801ae56:	2101      	movs	r1, #1
 801ae58:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	2221      	movs	r2, #33	@ 0x21
 801ae5e:	2102      	movs	r1, #2
 801ae60:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	d125      	bne.n	801aeb4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	689b      	ldr	r3, [r3, #8]
 801ae6e:	2240      	movs	r2, #64	@ 0x40
 801ae70:	4013      	ands	r3, r2
 801ae72:	d102      	bne.n	801ae7a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801ae74:	68bb      	ldr	r3, [r7, #8]
 801ae76:	2200      	movs	r2, #0
 801ae78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801ae7a:	68bb      	ldr	r3, [r7, #8]
 801ae7c:	781b      	ldrb	r3, [r3, #0]
 801ae7e:	0018      	movs	r0, r3
 801ae80:	f000 fa5a 	bl	801b338 <RTC_ByteToBcd2>
 801ae84:	0003      	movs	r3, r0
 801ae86:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801ae88:	68bb      	ldr	r3, [r7, #8]
 801ae8a:	785b      	ldrb	r3, [r3, #1]
 801ae8c:	0018      	movs	r0, r3
 801ae8e:	f000 fa53 	bl	801b338 <RTC_ByteToBcd2>
 801ae92:	0003      	movs	r3, r0
 801ae94:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801ae96:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801ae98:	68bb      	ldr	r3, [r7, #8]
 801ae9a:	789b      	ldrb	r3, [r3, #2]
 801ae9c:	0018      	movs	r0, r3
 801ae9e:	f000 fa4b 	bl	801b338 <RTC_ByteToBcd2>
 801aea2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801aea4:	0022      	movs	r2, r4
 801aea6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	78db      	ldrb	r3, [r3, #3]
 801aeac:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801aeae:	4313      	orrs	r3, r2
 801aeb0:	617b      	str	r3, [r7, #20]
 801aeb2:	e017      	b.n	801aee4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	689b      	ldr	r3, [r3, #8]
 801aeba:	2240      	movs	r2, #64	@ 0x40
 801aebc:	4013      	ands	r3, r2
 801aebe:	d102      	bne.n	801aec6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801aec0:	68bb      	ldr	r3, [r7, #8]
 801aec2:	2200      	movs	r2, #0
 801aec4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801aec6:	68bb      	ldr	r3, [r7, #8]
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801aecc:	68bb      	ldr	r3, [r7, #8]
 801aece:	785b      	ldrb	r3, [r3, #1]
 801aed0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801aed2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801aed4:	68ba      	ldr	r2, [r7, #8]
 801aed6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801aed8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801aeda:	68bb      	ldr	r3, [r7, #8]
 801aedc:	78db      	ldrb	r3, [r3, #3]
 801aede:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801aee0:	4313      	orrs	r3, r2
 801aee2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	22ca      	movs	r2, #202	@ 0xca
 801aeea:	625a      	str	r2, [r3, #36]	@ 0x24
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	2253      	movs	r2, #83	@ 0x53
 801aef2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801aef4:	2513      	movs	r5, #19
 801aef6:	197c      	adds	r4, r7, r5
 801aef8:	68fb      	ldr	r3, [r7, #12]
 801aefa:	0018      	movs	r0, r3
 801aefc:	f000 f9ae 	bl	801b25c <RTC_EnterInitMode>
 801af00:	0003      	movs	r3, r0
 801af02:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801af04:	0028      	movs	r0, r5
 801af06:	183b      	adds	r3, r7, r0
 801af08:	781b      	ldrb	r3, [r3, #0]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d120      	bne.n	801af50 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	697a      	ldr	r2, [r7, #20]
 801af14:	491a      	ldr	r1, [pc, #104]	@ (801af80 <HAL_RTC_SetTime+0x14c>)
 801af16:	400a      	ands	r2, r1
 801af18:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	689a      	ldr	r2, [r3, #8]
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	4917      	ldr	r1, [pc, #92]	@ (801af84 <HAL_RTC_SetTime+0x150>)
 801af26:	400a      	ands	r2, r1
 801af28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	6899      	ldr	r1, [r3, #8]
 801af30:	68bb      	ldr	r3, [r7, #8]
 801af32:	68da      	ldr	r2, [r3, #12]
 801af34:	68bb      	ldr	r3, [r7, #8]
 801af36:	691b      	ldr	r3, [r3, #16]
 801af38:	431a      	orrs	r2, r3
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	430a      	orrs	r2, r1
 801af40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801af42:	183c      	adds	r4, r7, r0
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	0018      	movs	r0, r3
 801af48:	f000 f9cc 	bl	801b2e4 <RTC_ExitInitMode>
 801af4c:	0003      	movs	r3, r0
 801af4e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801af50:	2313      	movs	r3, #19
 801af52:	18fb      	adds	r3, r7, r3
 801af54:	781b      	ldrb	r3, [r3, #0]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d103      	bne.n	801af62 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	2221      	movs	r2, #33	@ 0x21
 801af5e:	2101      	movs	r1, #1
 801af60:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801af62:	68fb      	ldr	r3, [r7, #12]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	22ff      	movs	r2, #255	@ 0xff
 801af68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	2220      	movs	r2, #32
 801af6e:	2100      	movs	r1, #0
 801af70:	5499      	strb	r1, [r3, r2]

  return status;
 801af72:	2313      	movs	r3, #19
 801af74:	18fb      	adds	r3, r7, r3
 801af76:	781b      	ldrb	r3, [r3, #0]
}
 801af78:	0018      	movs	r0, r3
 801af7a:	46bd      	mov	sp, r7
 801af7c:	b006      	add	sp, #24
 801af7e:	bdb0      	pop	{r4, r5, r7, pc}
 801af80:	007f7f7f 	.word	0x007f7f7f
 801af84:	fffbffff 	.word	0xfffbffff

0801af88 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801af88:	b580      	push	{r7, lr}
 801af8a:	b086      	sub	sp, #24
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	60f8      	str	r0, [r7, #12]
 801af90:	60b9      	str	r1, [r7, #8]
 801af92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801af94:	2300      	movs	r3, #0
 801af96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801af9e:	68bb      	ldr	r3, [r7, #8]
 801afa0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	691b      	ldr	r3, [r3, #16]
 801afa8:	045b      	lsls	r3, r3, #17
 801afaa:	0c5a      	lsrs	r2, r3, #17
 801afac:	68bb      	ldr	r3, [r7, #8]
 801afae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	4a22      	ldr	r2, [pc, #136]	@ (801b040 <HAL_RTC_GetTime+0xb8>)
 801afb8:	4013      	ands	r3, r2
 801afba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801afbc:	697b      	ldr	r3, [r7, #20]
 801afbe:	0c1b      	lsrs	r3, r3, #16
 801afc0:	b2db      	uxtb	r3, r3
 801afc2:	223f      	movs	r2, #63	@ 0x3f
 801afc4:	4013      	ands	r3, r2
 801afc6:	b2da      	uxtb	r2, r3
 801afc8:	68bb      	ldr	r3, [r7, #8]
 801afca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801afcc:	697b      	ldr	r3, [r7, #20]
 801afce:	0a1b      	lsrs	r3, r3, #8
 801afd0:	b2db      	uxtb	r3, r3
 801afd2:	227f      	movs	r2, #127	@ 0x7f
 801afd4:	4013      	ands	r3, r2
 801afd6:	b2da      	uxtb	r2, r3
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801afdc:	697b      	ldr	r3, [r7, #20]
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	227f      	movs	r2, #127	@ 0x7f
 801afe2:	4013      	ands	r3, r2
 801afe4:	b2da      	uxtb	r2, r3
 801afe6:	68bb      	ldr	r3, [r7, #8]
 801afe8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801afea:	697b      	ldr	r3, [r7, #20]
 801afec:	0d9b      	lsrs	r3, r3, #22
 801afee:	b2db      	uxtb	r3, r3
 801aff0:	2201      	movs	r2, #1
 801aff2:	4013      	ands	r3, r2
 801aff4:	b2da      	uxtb	r2, r3
 801aff6:	68bb      	ldr	r3, [r7, #8]
 801aff8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d11a      	bne.n	801b036 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801b000:	68bb      	ldr	r3, [r7, #8]
 801b002:	781b      	ldrb	r3, [r3, #0]
 801b004:	0018      	movs	r0, r3
 801b006:	f000 f9b8 	bl	801b37a <RTC_Bcd2ToByte>
 801b00a:	0003      	movs	r3, r0
 801b00c:	001a      	movs	r2, r3
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801b012:	68bb      	ldr	r3, [r7, #8]
 801b014:	785b      	ldrb	r3, [r3, #1]
 801b016:	0018      	movs	r0, r3
 801b018:	f000 f9af 	bl	801b37a <RTC_Bcd2ToByte>
 801b01c:	0003      	movs	r3, r0
 801b01e:	001a      	movs	r2, r3
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	789b      	ldrb	r3, [r3, #2]
 801b028:	0018      	movs	r0, r3
 801b02a:	f000 f9a6 	bl	801b37a <RTC_Bcd2ToByte>
 801b02e:	0003      	movs	r3, r0
 801b030:	001a      	movs	r2, r3
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801b036:	2300      	movs	r3, #0
}
 801b038:	0018      	movs	r0, r3
 801b03a:	46bd      	mov	sp, r7
 801b03c:	b006      	add	sp, #24
 801b03e:	bd80      	pop	{r7, pc}
 801b040:	007f7f7f 	.word	0x007f7f7f

0801b044 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b044:	b5b0      	push	{r4, r5, r7, lr}
 801b046:	b086      	sub	sp, #24
 801b048:	af00      	add	r7, sp, #0
 801b04a:	60f8      	str	r0, [r7, #12]
 801b04c:	60b9      	str	r1, [r7, #8]
 801b04e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b050:	2300      	movs	r3, #0
 801b052:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b054:	68fb      	ldr	r3, [r7, #12]
 801b056:	2220      	movs	r2, #32
 801b058:	5c9b      	ldrb	r3, [r3, r2]
 801b05a:	2b01      	cmp	r3, #1
 801b05c:	d101      	bne.n	801b062 <HAL_RTC_SetDate+0x1e>
 801b05e:	2302      	movs	r3, #2
 801b060:	e07e      	b.n	801b160 <HAL_RTC_SetDate+0x11c>
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	2220      	movs	r2, #32
 801b066:	2101      	movs	r1, #1
 801b068:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b06a:	68fb      	ldr	r3, [r7, #12]
 801b06c:	2221      	movs	r2, #33	@ 0x21
 801b06e:	2102      	movs	r1, #2
 801b070:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d10e      	bne.n	801b096 <HAL_RTC_SetDate+0x52>
 801b078:	68bb      	ldr	r3, [r7, #8]
 801b07a:	785b      	ldrb	r3, [r3, #1]
 801b07c:	001a      	movs	r2, r3
 801b07e:	2310      	movs	r3, #16
 801b080:	4013      	ands	r3, r2
 801b082:	d008      	beq.n	801b096 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801b084:	68bb      	ldr	r3, [r7, #8]
 801b086:	785b      	ldrb	r3, [r3, #1]
 801b088:	2210      	movs	r2, #16
 801b08a:	4393      	bics	r3, r2
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	330a      	adds	r3, #10
 801b090:	b2da      	uxtb	r2, r3
 801b092:	68bb      	ldr	r3, [r7, #8]
 801b094:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d11c      	bne.n	801b0d6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b09c:	68bb      	ldr	r3, [r7, #8]
 801b09e:	78db      	ldrb	r3, [r3, #3]
 801b0a0:	0018      	movs	r0, r3
 801b0a2:	f000 f949 	bl	801b338 <RTC_ByteToBcd2>
 801b0a6:	0003      	movs	r3, r0
 801b0a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b0aa:	68bb      	ldr	r3, [r7, #8]
 801b0ac:	785b      	ldrb	r3, [r3, #1]
 801b0ae:	0018      	movs	r0, r3
 801b0b0:	f000 f942 	bl	801b338 <RTC_ByteToBcd2>
 801b0b4:	0003      	movs	r3, r0
 801b0b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b0b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	789b      	ldrb	r3, [r3, #2]
 801b0be:	0018      	movs	r0, r3
 801b0c0:	f000 f93a 	bl	801b338 <RTC_ByteToBcd2>
 801b0c4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b0c6:	0022      	movs	r2, r4
 801b0c8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801b0ca:	68bb      	ldr	r3, [r7, #8]
 801b0cc:	781b      	ldrb	r3, [r3, #0]
 801b0ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b0d0:	4313      	orrs	r3, r2
 801b0d2:	617b      	str	r3, [r7, #20]
 801b0d4:	e00e      	b.n	801b0f4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b0d6:	68bb      	ldr	r3, [r7, #8]
 801b0d8:	78db      	ldrb	r3, [r3, #3]
 801b0da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b0dc:	68bb      	ldr	r3, [r7, #8]
 801b0de:	785b      	ldrb	r3, [r3, #1]
 801b0e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b0e2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801b0e4:	68ba      	ldr	r2, [r7, #8]
 801b0e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b0e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801b0ea:	68bb      	ldr	r3, [r7, #8]
 801b0ec:	781b      	ldrb	r3, [r3, #0]
 801b0ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b0f0:	4313      	orrs	r3, r2
 801b0f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	22ca      	movs	r2, #202	@ 0xca
 801b0fa:	625a      	str	r2, [r3, #36]	@ 0x24
 801b0fc:	68fb      	ldr	r3, [r7, #12]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	2253      	movs	r2, #83	@ 0x53
 801b102:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b104:	2513      	movs	r5, #19
 801b106:	197c      	adds	r4, r7, r5
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	0018      	movs	r0, r3
 801b10c:	f000 f8a6 	bl	801b25c <RTC_EnterInitMode>
 801b110:	0003      	movs	r3, r0
 801b112:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b114:	0028      	movs	r0, r5
 801b116:	183b      	adds	r3, r7, r0
 801b118:	781b      	ldrb	r3, [r3, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d10c      	bne.n	801b138 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	697a      	ldr	r2, [r7, #20]
 801b124:	4910      	ldr	r1, [pc, #64]	@ (801b168 <HAL_RTC_SetDate+0x124>)
 801b126:	400a      	ands	r2, r1
 801b128:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b12a:	183c      	adds	r4, r7, r0
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	0018      	movs	r0, r3
 801b130:	f000 f8d8 	bl	801b2e4 <RTC_ExitInitMode>
 801b134:	0003      	movs	r3, r0
 801b136:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b138:	2313      	movs	r3, #19
 801b13a:	18fb      	adds	r3, r7, r3
 801b13c:	781b      	ldrb	r3, [r3, #0]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d103      	bne.n	801b14a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	2221      	movs	r2, #33	@ 0x21
 801b146:	2101      	movs	r1, #1
 801b148:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	22ff      	movs	r2, #255	@ 0xff
 801b150:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	2220      	movs	r2, #32
 801b156:	2100      	movs	r1, #0
 801b158:	5499      	strb	r1, [r3, r2]

  return status;
 801b15a:	2313      	movs	r3, #19
 801b15c:	18fb      	adds	r3, r7, r3
 801b15e:	781b      	ldrb	r3, [r3, #0]
}
 801b160:	0018      	movs	r0, r3
 801b162:	46bd      	mov	sp, r7
 801b164:	b006      	add	sp, #24
 801b166:	bdb0      	pop	{r4, r5, r7, pc}
 801b168:	00ffff3f 	.word	0x00ffff3f

0801b16c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b086      	sub	sp, #24
 801b170:	af00      	add	r7, sp, #0
 801b172:	60f8      	str	r0, [r7, #12]
 801b174:	60b9      	str	r1, [r7, #8]
 801b176:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b178:	2300      	movs	r3, #0
 801b17a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	685b      	ldr	r3, [r3, #4]
 801b182:	4a21      	ldr	r2, [pc, #132]	@ (801b208 <HAL_RTC_GetDate+0x9c>)
 801b184:	4013      	ands	r3, r2
 801b186:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801b188:	697b      	ldr	r3, [r7, #20]
 801b18a:	0c1b      	lsrs	r3, r3, #16
 801b18c:	b2da      	uxtb	r2, r3
 801b18e:	68bb      	ldr	r3, [r7, #8]
 801b190:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801b192:	697b      	ldr	r3, [r7, #20]
 801b194:	0a1b      	lsrs	r3, r3, #8
 801b196:	b2db      	uxtb	r3, r3
 801b198:	221f      	movs	r2, #31
 801b19a:	4013      	ands	r3, r2
 801b19c:	b2da      	uxtb	r2, r3
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801b1a2:	697b      	ldr	r3, [r7, #20]
 801b1a4:	b2db      	uxtb	r3, r3
 801b1a6:	223f      	movs	r2, #63	@ 0x3f
 801b1a8:	4013      	ands	r3, r2
 801b1aa:	b2da      	uxtb	r2, r3
 801b1ac:	68bb      	ldr	r3, [r7, #8]
 801b1ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801b1b0:	697b      	ldr	r3, [r7, #20]
 801b1b2:	0b5b      	lsrs	r3, r3, #13
 801b1b4:	b2db      	uxtb	r3, r3
 801b1b6:	2207      	movs	r2, #7
 801b1b8:	4013      	ands	r3, r2
 801b1ba:	b2da      	uxtb	r2, r3
 801b1bc:	68bb      	ldr	r3, [r7, #8]
 801b1be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d11a      	bne.n	801b1fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801b1c6:	68bb      	ldr	r3, [r7, #8]
 801b1c8:	78db      	ldrb	r3, [r3, #3]
 801b1ca:	0018      	movs	r0, r3
 801b1cc:	f000 f8d5 	bl	801b37a <RTC_Bcd2ToByte>
 801b1d0:	0003      	movs	r3, r0
 801b1d2:	001a      	movs	r2, r3
 801b1d4:	68bb      	ldr	r3, [r7, #8]
 801b1d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	785b      	ldrb	r3, [r3, #1]
 801b1dc:	0018      	movs	r0, r3
 801b1de:	f000 f8cc 	bl	801b37a <RTC_Bcd2ToByte>
 801b1e2:	0003      	movs	r3, r0
 801b1e4:	001a      	movs	r2, r3
 801b1e6:	68bb      	ldr	r3, [r7, #8]
 801b1e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801b1ea:	68bb      	ldr	r3, [r7, #8]
 801b1ec:	789b      	ldrb	r3, [r3, #2]
 801b1ee:	0018      	movs	r0, r3
 801b1f0:	f000 f8c3 	bl	801b37a <RTC_Bcd2ToByte>
 801b1f4:	0003      	movs	r3, r0
 801b1f6:	001a      	movs	r2, r3
 801b1f8:	68bb      	ldr	r3, [r7, #8]
 801b1fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801b1fc:	2300      	movs	r3, #0
}
 801b1fe:	0018      	movs	r0, r3
 801b200:	46bd      	mov	sp, r7
 801b202:	b006      	add	sp, #24
 801b204:	bd80      	pop	{r7, pc}
 801b206:	46c0      	nop			@ (mov r8, r8)
 801b208:	00ffff3f 	.word	0x00ffff3f

0801b20c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801b20c:	b580      	push	{r7, lr}
 801b20e:	b084      	sub	sp, #16
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b214:	2300      	movs	r3, #0
 801b216:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	4a0e      	ldr	r2, [pc, #56]	@ (801b258 <HAL_RTC_WaitForSynchro+0x4c>)
 801b21e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b220:	f7f8 fa50 	bl	80136c4 <HAL_GetTick>
 801b224:	0003      	movs	r3, r0
 801b226:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b228:	e00a      	b.n	801b240 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b22a:	f7f8 fa4b 	bl	80136c4 <HAL_GetTick>
 801b22e:	0002      	movs	r2, r0
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	1ad2      	subs	r2, r2, r3
 801b234:	23fa      	movs	r3, #250	@ 0xfa
 801b236:	009b      	lsls	r3, r3, #2
 801b238:	429a      	cmp	r2, r3
 801b23a:	d901      	bls.n	801b240 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801b23c:	2303      	movs	r3, #3
 801b23e:	e006      	b.n	801b24e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	68db      	ldr	r3, [r3, #12]
 801b246:	2220      	movs	r2, #32
 801b248:	4013      	ands	r3, r2
 801b24a:	d0ee      	beq.n	801b22a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801b24c:	2300      	movs	r3, #0
}
 801b24e:	0018      	movs	r0, r3
 801b250:	46bd      	mov	sp, r7
 801b252:	b004      	add	sp, #16
 801b254:	bd80      	pop	{r7, pc}
 801b256:	46c0      	nop			@ (mov r8, r8)
 801b258:	0001ff5f 	.word	0x0001ff5f

0801b25c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b084      	sub	sp, #16
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b264:	2300      	movs	r3, #0
 801b266:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801b268:	230f      	movs	r3, #15
 801b26a:	18fb      	adds	r3, r7, r3
 801b26c:	2200      	movs	r2, #0
 801b26e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	68db      	ldr	r3, [r3, #12]
 801b276:	2240      	movs	r2, #64	@ 0x40
 801b278:	4013      	ands	r3, r2
 801b27a:	d12c      	bne.n	801b2d6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	68da      	ldr	r2, [r3, #12]
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	2180      	movs	r1, #128	@ 0x80
 801b288:	430a      	orrs	r2, r1
 801b28a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b28c:	f7f8 fa1a 	bl	80136c4 <HAL_GetTick>
 801b290:	0003      	movs	r3, r0
 801b292:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b294:	e014      	b.n	801b2c0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b296:	f7f8 fa15 	bl	80136c4 <HAL_GetTick>
 801b29a:	0002      	movs	r2, r0
 801b29c:	68bb      	ldr	r3, [r7, #8]
 801b29e:	1ad2      	subs	r2, r2, r3
 801b2a0:	200f      	movs	r0, #15
 801b2a2:	183b      	adds	r3, r7, r0
 801b2a4:	1839      	adds	r1, r7, r0
 801b2a6:	7809      	ldrb	r1, [r1, #0]
 801b2a8:	7019      	strb	r1, [r3, #0]
 801b2aa:	23fa      	movs	r3, #250	@ 0xfa
 801b2ac:	009b      	lsls	r3, r3, #2
 801b2ae:	429a      	cmp	r2, r3
 801b2b0:	d906      	bls.n	801b2c0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	2221      	movs	r2, #33	@ 0x21
 801b2b6:	2104      	movs	r1, #4
 801b2b8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801b2ba:	183b      	adds	r3, r7, r0
 801b2bc:	2201      	movs	r2, #1
 801b2be:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	68db      	ldr	r3, [r3, #12]
 801b2c6:	2240      	movs	r2, #64	@ 0x40
 801b2c8:	4013      	ands	r3, r2
 801b2ca:	d104      	bne.n	801b2d6 <RTC_EnterInitMode+0x7a>
 801b2cc:	230f      	movs	r3, #15
 801b2ce:	18fb      	adds	r3, r7, r3
 801b2d0:	781b      	ldrb	r3, [r3, #0]
 801b2d2:	2b01      	cmp	r3, #1
 801b2d4:	d1df      	bne.n	801b296 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801b2d6:	230f      	movs	r3, #15
 801b2d8:	18fb      	adds	r3, r7, r3
 801b2da:	781b      	ldrb	r3, [r3, #0]
}
 801b2dc:	0018      	movs	r0, r3
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	b004      	add	sp, #16
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801b2e4:	b590      	push	{r4, r7, lr}
 801b2e6:	b085      	sub	sp, #20
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b2ec:	240f      	movs	r4, #15
 801b2ee:	193b      	adds	r3, r7, r4
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	68da      	ldr	r2, [r3, #12]
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	2180      	movs	r1, #128	@ 0x80
 801b300:	438a      	bics	r2, r1
 801b302:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	689b      	ldr	r3, [r3, #8]
 801b30a:	2220      	movs	r2, #32
 801b30c:	4013      	ands	r3, r2
 801b30e:	d10c      	bne.n	801b32a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	0018      	movs	r0, r3
 801b314:	f7ff ff7a 	bl	801b20c <HAL_RTC_WaitForSynchro>
 801b318:	1e03      	subs	r3, r0, #0
 801b31a:	d006      	beq.n	801b32a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	2221      	movs	r2, #33	@ 0x21
 801b320:	2104      	movs	r1, #4
 801b322:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801b324:	193b      	adds	r3, r7, r4
 801b326:	2201      	movs	r2, #1
 801b328:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801b32a:	230f      	movs	r3, #15
 801b32c:	18fb      	adds	r3, r7, r3
 801b32e:	781b      	ldrb	r3, [r3, #0]
}
 801b330:	0018      	movs	r0, r3
 801b332:	46bd      	mov	sp, r7
 801b334:	b005      	add	sp, #20
 801b336:	bd90      	pop	{r4, r7, pc}

0801b338 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b084      	sub	sp, #16
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	0002      	movs	r2, r0
 801b340:	1dfb      	adds	r3, r7, #7
 801b342:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801b344:	2300      	movs	r3, #0
 801b346:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801b348:	e007      	b.n	801b35a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	3301      	adds	r3, #1
 801b34e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801b350:	1dfb      	adds	r3, r7, #7
 801b352:	1dfa      	adds	r2, r7, #7
 801b354:	7812      	ldrb	r2, [r2, #0]
 801b356:	3a0a      	subs	r2, #10
 801b358:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801b35a:	1dfb      	adds	r3, r7, #7
 801b35c:	781b      	ldrb	r3, [r3, #0]
 801b35e:	2b09      	cmp	r3, #9
 801b360:	d8f3      	bhi.n	801b34a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	b2db      	uxtb	r3, r3
 801b366:	011b      	lsls	r3, r3, #4
 801b368:	b2da      	uxtb	r2, r3
 801b36a:	1dfb      	adds	r3, r7, #7
 801b36c:	781b      	ldrb	r3, [r3, #0]
 801b36e:	4313      	orrs	r3, r2
 801b370:	b2db      	uxtb	r3, r3
}
 801b372:	0018      	movs	r0, r3
 801b374:	46bd      	mov	sp, r7
 801b376:	b004      	add	sp, #16
 801b378:	bd80      	pop	{r7, pc}

0801b37a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801b37a:	b580      	push	{r7, lr}
 801b37c:	b084      	sub	sp, #16
 801b37e:	af00      	add	r7, sp, #0
 801b380:	0002      	movs	r2, r0
 801b382:	1dfb      	adds	r3, r7, #7
 801b384:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801b386:	2300      	movs	r3, #0
 801b388:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801b38a:	1dfb      	adds	r3, r7, #7
 801b38c:	781b      	ldrb	r3, [r3, #0]
 801b38e:	091b      	lsrs	r3, r3, #4
 801b390:	b2db      	uxtb	r3, r3
 801b392:	001a      	movs	r2, r3
 801b394:	0013      	movs	r3, r2
 801b396:	009b      	lsls	r3, r3, #2
 801b398:	189b      	adds	r3, r3, r2
 801b39a:	005b      	lsls	r3, r3, #1
 801b39c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	b2da      	uxtb	r2, r3
 801b3a2:	1dfb      	adds	r3, r7, #7
 801b3a4:	781b      	ldrb	r3, [r3, #0]
 801b3a6:	210f      	movs	r1, #15
 801b3a8:	400b      	ands	r3, r1
 801b3aa:	b2db      	uxtb	r3, r3
 801b3ac:	18d3      	adds	r3, r2, r3
 801b3ae:	b2db      	uxtb	r3, r3
}
 801b3b0:	0018      	movs	r0, r3
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	b004      	add	sp, #16
 801b3b6:	bd80      	pop	{r7, pc}

0801b3b8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b086      	sub	sp, #24
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	60f8      	str	r0, [r7, #12]
 801b3c0:	60b9      	str	r1, [r7, #8]
 801b3c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801b3c4:	4b64      	ldr	r3, [pc, #400]	@ (801b558 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	22fa      	movs	r2, #250	@ 0xfa
 801b3ca:	01d1      	lsls	r1, r2, #7
 801b3cc:	0018      	movs	r0, r3
 801b3ce:	f7e4 fee9 	bl	80001a4 <__udivsi3>
 801b3d2:	0003      	movs	r3, r0
 801b3d4:	001a      	movs	r2, r3
 801b3d6:	0013      	movs	r3, r2
 801b3d8:	015b      	lsls	r3, r3, #5
 801b3da:	1a9b      	subs	r3, r3, r2
 801b3dc:	009b      	lsls	r3, r3, #2
 801b3de:	189b      	adds	r3, r3, r2
 801b3e0:	00db      	lsls	r3, r3, #3
 801b3e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	2220      	movs	r2, #32
 801b3e8:	5c9b      	ldrb	r3, [r3, r2]
 801b3ea:	2b01      	cmp	r3, #1
 801b3ec:	d101      	bne.n	801b3f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801b3ee:	2302      	movs	r3, #2
 801b3f0:	e0ad      	b.n	801b54e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	2220      	movs	r2, #32
 801b3f6:	2101      	movs	r1, #1
 801b3f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	2221      	movs	r2, #33	@ 0x21
 801b3fe:	2102      	movs	r1, #2
 801b400:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	22ca      	movs	r2, #202	@ 0xca
 801b408:	625a      	str	r2, [r3, #36]	@ 0x24
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	2253      	movs	r2, #83	@ 0x53
 801b410:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	689a      	ldr	r2, [r3, #8]
 801b418:	2380      	movs	r3, #128	@ 0x80
 801b41a:	00db      	lsls	r3, r3, #3
 801b41c:	4013      	ands	r3, r2
 801b41e:	d019      	beq.n	801b454 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801b420:	697b      	ldr	r3, [r7, #20]
 801b422:	3b01      	subs	r3, #1
 801b424:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801b426:	697b      	ldr	r3, [r7, #20]
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d10d      	bne.n	801b448 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	22ff      	movs	r2, #255	@ 0xff
 801b432:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	2221      	movs	r2, #33	@ 0x21
 801b438:	2103      	movs	r1, #3
 801b43a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	2220      	movs	r2, #32
 801b440:	2100      	movs	r1, #0
 801b442:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801b444:	2303      	movs	r3, #3
 801b446:	e082      	b.n	801b54e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	68db      	ldr	r3, [r3, #12]
 801b44e:	2204      	movs	r2, #4
 801b450:	4013      	ands	r3, r2
 801b452:	d1e5      	bne.n	801b420 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	689a      	ldr	r2, [r3, #8]
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	493f      	ldr	r1, [pc, #252]	@ (801b55c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801b460:	400a      	ands	r2, r1
 801b462:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	68db      	ldr	r3, [r3, #12]
 801b46a:	22ff      	movs	r2, #255	@ 0xff
 801b46c:	401a      	ands	r2, r3
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	493b      	ldr	r1, [pc, #236]	@ (801b560 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801b474:	430a      	orrs	r2, r1
 801b476:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801b478:	4b37      	ldr	r3, [pc, #220]	@ (801b558 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	22fa      	movs	r2, #250	@ 0xfa
 801b47e:	01d1      	lsls	r1, r2, #7
 801b480:	0018      	movs	r0, r3
 801b482:	f7e4 fe8f 	bl	80001a4 <__udivsi3>
 801b486:	0003      	movs	r3, r0
 801b488:	001a      	movs	r2, r3
 801b48a:	0013      	movs	r3, r2
 801b48c:	015b      	lsls	r3, r3, #5
 801b48e:	1a9b      	subs	r3, r3, r2
 801b490:	009b      	lsls	r3, r3, #2
 801b492:	189b      	adds	r3, r3, r2
 801b494:	00db      	lsls	r3, r3, #3
 801b496:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801b498:	697b      	ldr	r3, [r7, #20]
 801b49a:	3b01      	subs	r3, #1
 801b49c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801b49e:	697b      	ldr	r3, [r7, #20]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d10d      	bne.n	801b4c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	22ff      	movs	r2, #255	@ 0xff
 801b4aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	2221      	movs	r2, #33	@ 0x21
 801b4b0:	2103      	movs	r1, #3
 801b4b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	2220      	movs	r2, #32
 801b4b8:	2100      	movs	r1, #0
 801b4ba:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801b4bc:	2303      	movs	r3, #3
 801b4be:	e046      	b.n	801b54e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	68db      	ldr	r3, [r3, #12]
 801b4c6:	2204      	movs	r2, #4
 801b4c8:	4013      	ands	r3, r2
 801b4ca:	d0e5      	beq.n	801b498 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	689a      	ldr	r2, [r3, #8]
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	2107      	movs	r1, #7
 801b4d8:	438a      	bics	r2, r1
 801b4da:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	6899      	ldr	r1, [r3, #8]
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	687a      	ldr	r2, [r7, #4]
 801b4e8:	430a      	orrs	r2, r1
 801b4ea:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	68ba      	ldr	r2, [r7, #8]
 801b4f2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801b4f4:	4b1b      	ldr	r3, [pc, #108]	@ (801b564 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b4f6:	681a      	ldr	r2, [r3, #0]
 801b4f8:	4b1a      	ldr	r3, [pc, #104]	@ (801b564 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b4fa:	2180      	movs	r1, #128	@ 0x80
 801b4fc:	0349      	lsls	r1, r1, #13
 801b4fe:	430a      	orrs	r2, r1
 801b500:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801b502:	4b18      	ldr	r3, [pc, #96]	@ (801b564 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b504:	689a      	ldr	r2, [r3, #8]
 801b506:	4b17      	ldr	r3, [pc, #92]	@ (801b564 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801b508:	2180      	movs	r1, #128	@ 0x80
 801b50a:	0349      	lsls	r1, r1, #13
 801b50c:	430a      	orrs	r2, r1
 801b50e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	689a      	ldr	r2, [r3, #8]
 801b516:	68fb      	ldr	r3, [r7, #12]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	2180      	movs	r1, #128	@ 0x80
 801b51c:	01c9      	lsls	r1, r1, #7
 801b51e:	430a      	orrs	r2, r1
 801b520:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	689a      	ldr	r2, [r3, #8]
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	2180      	movs	r1, #128	@ 0x80
 801b52e:	00c9      	lsls	r1, r1, #3
 801b530:	430a      	orrs	r2, r1
 801b532:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	22ff      	movs	r2, #255	@ 0xff
 801b53a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	2221      	movs	r2, #33	@ 0x21
 801b540:	2101      	movs	r1, #1
 801b542:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	2220      	movs	r2, #32
 801b548:	2100      	movs	r1, #0
 801b54a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b54c:	2300      	movs	r3, #0
}
 801b54e:	0018      	movs	r0, r3
 801b550:	46bd      	mov	sp, r7
 801b552:	b006      	add	sp, #24
 801b554:	bd80      	pop	{r7, pc}
 801b556:	46c0      	nop			@ (mov r8, r8)
 801b558:	200000e0 	.word	0x200000e0
 801b55c:	fffffbff 	.word	0xfffffbff
 801b560:	fffffb7f 	.word	0xfffffb7f
 801b564:	40010400 	.word	0x40010400

0801b568 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b084      	sub	sp, #16
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b570:	2300      	movs	r3, #0
 801b572:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	2220      	movs	r2, #32
 801b578:	5c9b      	ldrb	r3, [r3, r2]
 801b57a:	2b01      	cmp	r3, #1
 801b57c:	d101      	bne.n	801b582 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801b57e:	2302      	movs	r3, #2
 801b580:	e04e      	b.n	801b620 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	2220      	movs	r2, #32
 801b586:	2101      	movs	r1, #1
 801b588:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	2221      	movs	r2, #33	@ 0x21
 801b58e:	2102      	movs	r1, #2
 801b590:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	22ca      	movs	r2, #202	@ 0xca
 801b598:	625a      	str	r2, [r3, #36]	@ 0x24
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	2253      	movs	r2, #83	@ 0x53
 801b5a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	689a      	ldr	r2, [r3, #8]
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	491e      	ldr	r1, [pc, #120]	@ (801b628 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801b5ae:	400a      	ands	r2, r1
 801b5b0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	689a      	ldr	r2, [r3, #8]
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	491b      	ldr	r1, [pc, #108]	@ (801b62c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801b5be:	400a      	ands	r2, r1
 801b5c0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b5c2:	f7f8 f87f 	bl	80136c4 <HAL_GetTick>
 801b5c6:	0003      	movs	r3, r0
 801b5c8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801b5ca:	e016      	b.n	801b5fa <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b5cc:	f7f8 f87a 	bl	80136c4 <HAL_GetTick>
 801b5d0:	0002      	movs	r2, r0
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	1ad2      	subs	r2, r2, r3
 801b5d6:	23fa      	movs	r3, #250	@ 0xfa
 801b5d8:	009b      	lsls	r3, r3, #2
 801b5da:	429a      	cmp	r2, r3
 801b5dc:	d90d      	bls.n	801b5fa <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	22ff      	movs	r2, #255	@ 0xff
 801b5e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	2221      	movs	r2, #33	@ 0x21
 801b5ea:	2103      	movs	r1, #3
 801b5ec:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	2220      	movs	r2, #32
 801b5f2:	2100      	movs	r1, #0
 801b5f4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801b5f6:	2303      	movs	r3, #3
 801b5f8:	e012      	b.n	801b620 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	68db      	ldr	r3, [r3, #12]
 801b600:	2204      	movs	r2, #4
 801b602:	4013      	ands	r3, r2
 801b604:	d0e2      	beq.n	801b5cc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	22ff      	movs	r2, #255	@ 0xff
 801b60c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	2221      	movs	r2, #33	@ 0x21
 801b612:	2101      	movs	r1, #1
 801b614:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2220      	movs	r2, #32
 801b61a:	2100      	movs	r1, #0
 801b61c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b61e:	2300      	movs	r3, #0
}
 801b620:	0018      	movs	r0, r3
 801b622:	46bd      	mov	sp, r7
 801b624:	b004      	add	sp, #16
 801b626:	bd80      	pop	{r7, pc}
 801b628:	fffffbff 	.word	0xfffffbff
 801b62c:	ffffbfff 	.word	0xffffbfff

0801b630 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801b630:	b580      	push	{r7, lr}
 801b632:	b082      	sub	sp, #8
 801b634:	af00      	add	r7, sp, #0
 801b636:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801b638:	4b13      	ldr	r3, [pc, #76]	@ (801b688 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801b63a:	2280      	movs	r2, #128	@ 0x80
 801b63c:	0352      	lsls	r2, r2, #13
 801b63e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	689a      	ldr	r2, [r3, #8]
 801b646:	2380      	movs	r3, #128	@ 0x80
 801b648:	01db      	lsls	r3, r3, #7
 801b64a:	4013      	ands	r3, r2
 801b64c:	d014      	beq.n	801b678 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	68da      	ldr	r2, [r3, #12]
 801b654:	2380      	movs	r3, #128	@ 0x80
 801b656:	00db      	lsls	r3, r3, #3
 801b658:	4013      	ands	r3, r2
 801b65a:	d00d      	beq.n	801b678 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	68db      	ldr	r3, [r3, #12]
 801b662:	22ff      	movs	r2, #255	@ 0xff
 801b664:	401a      	ands	r2, r3
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	4908      	ldr	r1, [pc, #32]	@ (801b68c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801b66c:	430a      	orrs	r2, r1
 801b66e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	0018      	movs	r0, r3
 801b674:	f000 f80c 	bl	801b690 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	2221      	movs	r2, #33	@ 0x21
 801b67c:	2101      	movs	r1, #1
 801b67e:	5499      	strb	r1, [r3, r2]
}
 801b680:	46c0      	nop			@ (mov r8, r8)
 801b682:	46bd      	mov	sp, r7
 801b684:	b002      	add	sp, #8
 801b686:	bd80      	pop	{r7, pc}
 801b688:	40010400 	.word	0x40010400
 801b68c:	fffffb7f 	.word	0xfffffb7f

0801b690 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801b690:	b580      	push	{r7, lr}
 801b692:	b082      	sub	sp, #8
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801b698:	46c0      	nop			@ (mov r8, r8)
 801b69a:	46bd      	mov	sp, r7
 801b69c:	b002      	add	sp, #8
 801b69e:	bd80      	pop	{r7, pc}

0801b6a0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801b6a0:	b580      	push	{r7, lr}
 801b6a2:	b086      	sub	sp, #24
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	60f8      	str	r0, [r7, #12]
 801b6a8:	60b9      	str	r1, [r7, #8]
 801b6aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801b6ac:	2300      	movs	r3, #0
 801b6ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	3350      	adds	r3, #80	@ 0x50
 801b6b6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	009b      	lsls	r3, r3, #2
 801b6bc:	697a      	ldr	r2, [r7, #20]
 801b6be:	18d3      	adds	r3, r2, r3
 801b6c0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801b6c2:	697b      	ldr	r3, [r7, #20]
 801b6c4:	687a      	ldr	r2, [r7, #4]
 801b6c6:	601a      	str	r2, [r3, #0]
}
 801b6c8:	46c0      	nop			@ (mov r8, r8)
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	b006      	add	sp, #24
 801b6ce:	bd80      	pop	{r7, pc}

0801b6d0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801b6d0:	b580      	push	{r7, lr}
 801b6d2:	b084      	sub	sp, #16
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	6078      	str	r0, [r7, #4]
 801b6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801b6da:	2300      	movs	r3, #0
 801b6dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	3350      	adds	r3, #80	@ 0x50
 801b6e4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801b6e6:	683b      	ldr	r3, [r7, #0]
 801b6e8:	009b      	lsls	r3, r3, #2
 801b6ea:	68fa      	ldr	r2, [r7, #12]
 801b6ec:	18d3      	adds	r3, r2, r3
 801b6ee:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	681b      	ldr	r3, [r3, #0]
}
 801b6f4:	0018      	movs	r0, r3
 801b6f6:	46bd      	mov	sp, r7
 801b6f8:	b004      	add	sp, #16
 801b6fa:	bd80      	pop	{r7, pc}

0801b6fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b082      	sub	sp, #8
 801b700:	af00      	add	r7, sp, #0
 801b702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d101      	bne.n	801b70e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801b70a:	2301      	movs	r3, #1
 801b70c:	e032      	b.n	801b774 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	2239      	movs	r2, #57	@ 0x39
 801b712:	5c9b      	ldrb	r3, [r3, r2]
 801b714:	b2db      	uxtb	r3, r3
 801b716:	2b00      	cmp	r3, #0
 801b718:	d107      	bne.n	801b72a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	2238      	movs	r2, #56	@ 0x38
 801b71e:	2100      	movs	r1, #0
 801b720:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	0018      	movs	r0, r3
 801b726:	f7f6 ffeb 	bl	8012700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	2239      	movs	r2, #57	@ 0x39
 801b72e:	2102      	movs	r1, #2
 801b730:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681a      	ldr	r2, [r3, #0]
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	3304      	adds	r3, #4
 801b73a:	0019      	movs	r1, r3
 801b73c:	0010      	movs	r0, r2
 801b73e:	f000 fa1d 	bl	801bb7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	223e      	movs	r2, #62	@ 0x3e
 801b746:	2101      	movs	r1, #1
 801b748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	223a      	movs	r2, #58	@ 0x3a
 801b74e:	2101      	movs	r1, #1
 801b750:	5499      	strb	r1, [r3, r2]
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	223b      	movs	r2, #59	@ 0x3b
 801b756:	2101      	movs	r1, #1
 801b758:	5499      	strb	r1, [r3, r2]
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	223c      	movs	r2, #60	@ 0x3c
 801b75e:	2101      	movs	r1, #1
 801b760:	5499      	strb	r1, [r3, r2]
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	223d      	movs	r2, #61	@ 0x3d
 801b766:	2101      	movs	r1, #1
 801b768:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	2239      	movs	r2, #57	@ 0x39
 801b76e:	2101      	movs	r1, #1
 801b770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b772:	2300      	movs	r3, #0
}
 801b774:	0018      	movs	r0, r3
 801b776:	46bd      	mov	sp, r7
 801b778:	b002      	add	sp, #8
 801b77a:	bd80      	pop	{r7, pc}

0801b77c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b084      	sub	sp, #16
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	2239      	movs	r2, #57	@ 0x39
 801b788:	5c9b      	ldrb	r3, [r3, r2]
 801b78a:	b2db      	uxtb	r3, r3
 801b78c:	2b01      	cmp	r3, #1
 801b78e:	d001      	beq.n	801b794 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801b790:	2301      	movs	r3, #1
 801b792:	e033      	b.n	801b7fc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	2239      	movs	r2, #57	@ 0x39
 801b798:	2102      	movs	r1, #2
 801b79a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	681a      	ldr	r2, [r3, #0]
 801b7a0:	2380      	movs	r3, #128	@ 0x80
 801b7a2:	05db      	lsls	r3, r3, #23
 801b7a4:	429a      	cmp	r2, r3
 801b7a6:	d00e      	beq.n	801b7c6 <HAL_TIM_Base_Start+0x4a>
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	4a15      	ldr	r2, [pc, #84]	@ (801b804 <HAL_TIM_Base_Start+0x88>)
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d009      	beq.n	801b7c6 <HAL_TIM_Base_Start+0x4a>
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	4a14      	ldr	r2, [pc, #80]	@ (801b808 <HAL_TIM_Base_Start+0x8c>)
 801b7b8:	4293      	cmp	r3, r2
 801b7ba:	d004      	beq.n	801b7c6 <HAL_TIM_Base_Start+0x4a>
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	4a12      	ldr	r2, [pc, #72]	@ (801b80c <HAL_TIM_Base_Start+0x90>)
 801b7c2:	4293      	cmp	r3, r2
 801b7c4:	d111      	bne.n	801b7ea <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	689b      	ldr	r3, [r3, #8]
 801b7cc:	2207      	movs	r2, #7
 801b7ce:	4013      	ands	r3, r2
 801b7d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	2b06      	cmp	r3, #6
 801b7d6:	d010      	beq.n	801b7fa <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	681a      	ldr	r2, [r3, #0]
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	2101      	movs	r1, #1
 801b7e4:	430a      	orrs	r2, r1
 801b7e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b7e8:	e007      	b.n	801b7fa <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	681b      	ldr	r3, [r3, #0]
 801b7ee:	681a      	ldr	r2, [r3, #0]
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	2101      	movs	r1, #1
 801b7f6:	430a      	orrs	r2, r1
 801b7f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b7fa:	2300      	movs	r3, #0
}
 801b7fc:	0018      	movs	r0, r3
 801b7fe:	46bd      	mov	sp, r7
 801b800:	b004      	add	sp, #16
 801b802:	bd80      	pop	{r7, pc}
 801b804:	40000400 	.word	0x40000400
 801b808:	40010800 	.word	0x40010800
 801b80c:	40011400 	.word	0x40011400

0801b810 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801b810:	b580      	push	{r7, lr}
 801b812:	b082      	sub	sp, #8
 801b814:	af00      	add	r7, sp, #0
 801b816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	6a1b      	ldr	r3, [r3, #32]
 801b81e:	4a0a      	ldr	r2, [pc, #40]	@ (801b848 <HAL_TIM_Base_Stop+0x38>)
 801b820:	4013      	ands	r3, r2
 801b822:	d107      	bne.n	801b834 <HAL_TIM_Base_Stop+0x24>
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	681a      	ldr	r2, [r3, #0]
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	2101      	movs	r1, #1
 801b830:	438a      	bics	r2, r1
 801b832:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	2239      	movs	r2, #57	@ 0x39
 801b838:	2101      	movs	r1, #1
 801b83a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801b83c:	2300      	movs	r3, #0
}
 801b83e:	0018      	movs	r0, r3
 801b840:	46bd      	mov	sp, r7
 801b842:	b002      	add	sp, #8
 801b844:	bd80      	pop	{r7, pc}
 801b846:	46c0      	nop			@ (mov r8, r8)
 801b848:	00001111 	.word	0x00001111

0801b84c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801b84c:	b580      	push	{r7, lr}
 801b84e:	b082      	sub	sp, #8
 801b850:	af00      	add	r7, sp, #0
 801b852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d101      	bne.n	801b85e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801b85a:	2301      	movs	r3, #1
 801b85c:	e032      	b.n	801b8c4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	2239      	movs	r2, #57	@ 0x39
 801b862:	5c9b      	ldrb	r3, [r3, r2]
 801b864:	b2db      	uxtb	r3, r3
 801b866:	2b00      	cmp	r3, #0
 801b868:	d107      	bne.n	801b87a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	2238      	movs	r2, #56	@ 0x38
 801b86e:	2100      	movs	r1, #0
 801b870:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	0018      	movs	r0, r3
 801b876:	f7f6 ff1f 	bl	80126b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	2239      	movs	r2, #57	@ 0x39
 801b87e:	2102      	movs	r1, #2
 801b880:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	681a      	ldr	r2, [r3, #0]
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	3304      	adds	r3, #4
 801b88a:	0019      	movs	r1, r3
 801b88c:	0010      	movs	r0, r2
 801b88e:	f000 f975 	bl	801bb7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	223e      	movs	r2, #62	@ 0x3e
 801b896:	2101      	movs	r1, #1
 801b898:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	223a      	movs	r2, #58	@ 0x3a
 801b89e:	2101      	movs	r1, #1
 801b8a0:	5499      	strb	r1, [r3, r2]
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	223b      	movs	r2, #59	@ 0x3b
 801b8a6:	2101      	movs	r1, #1
 801b8a8:	5499      	strb	r1, [r3, r2]
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	223c      	movs	r2, #60	@ 0x3c
 801b8ae:	2101      	movs	r1, #1
 801b8b0:	5499      	strb	r1, [r3, r2]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	223d      	movs	r2, #61	@ 0x3d
 801b8b6:	2101      	movs	r1, #1
 801b8b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	2239      	movs	r2, #57	@ 0x39
 801b8be:	2101      	movs	r1, #1
 801b8c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801b8c2:	2300      	movs	r3, #0
}
 801b8c4:	0018      	movs	r0, r3
 801b8c6:	46bd      	mov	sp, r7
 801b8c8:	b002      	add	sp, #8
 801b8ca:	bd80      	pop	{r7, pc}

0801b8cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b084      	sub	sp, #16
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
 801b8d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801b8d6:	683b      	ldr	r3, [r7, #0]
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d108      	bne.n	801b8ee <HAL_TIM_PWM_Start+0x22>
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	223a      	movs	r2, #58	@ 0x3a
 801b8e0:	5c9b      	ldrb	r3, [r3, r2]
 801b8e2:	b2db      	uxtb	r3, r3
 801b8e4:	3b01      	subs	r3, #1
 801b8e6:	1e5a      	subs	r2, r3, #1
 801b8e8:	4193      	sbcs	r3, r2
 801b8ea:	b2db      	uxtb	r3, r3
 801b8ec:	e01f      	b.n	801b92e <HAL_TIM_PWM_Start+0x62>
 801b8ee:	683b      	ldr	r3, [r7, #0]
 801b8f0:	2b04      	cmp	r3, #4
 801b8f2:	d108      	bne.n	801b906 <HAL_TIM_PWM_Start+0x3a>
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	223b      	movs	r2, #59	@ 0x3b
 801b8f8:	5c9b      	ldrb	r3, [r3, r2]
 801b8fa:	b2db      	uxtb	r3, r3
 801b8fc:	3b01      	subs	r3, #1
 801b8fe:	1e5a      	subs	r2, r3, #1
 801b900:	4193      	sbcs	r3, r2
 801b902:	b2db      	uxtb	r3, r3
 801b904:	e013      	b.n	801b92e <HAL_TIM_PWM_Start+0x62>
 801b906:	683b      	ldr	r3, [r7, #0]
 801b908:	2b08      	cmp	r3, #8
 801b90a:	d108      	bne.n	801b91e <HAL_TIM_PWM_Start+0x52>
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	223c      	movs	r2, #60	@ 0x3c
 801b910:	5c9b      	ldrb	r3, [r3, r2]
 801b912:	b2db      	uxtb	r3, r3
 801b914:	3b01      	subs	r3, #1
 801b916:	1e5a      	subs	r2, r3, #1
 801b918:	4193      	sbcs	r3, r2
 801b91a:	b2db      	uxtb	r3, r3
 801b91c:	e007      	b.n	801b92e <HAL_TIM_PWM_Start+0x62>
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	223d      	movs	r2, #61	@ 0x3d
 801b922:	5c9b      	ldrb	r3, [r3, r2]
 801b924:	b2db      	uxtb	r3, r3
 801b926:	3b01      	subs	r3, #1
 801b928:	1e5a      	subs	r2, r3, #1
 801b92a:	4193      	sbcs	r3, r2
 801b92c:	b2db      	uxtb	r3, r3
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d001      	beq.n	801b936 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801b932:	2301      	movs	r3, #1
 801b934:	e052      	b.n	801b9dc <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801b936:	683b      	ldr	r3, [r7, #0]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d104      	bne.n	801b946 <HAL_TIM_PWM_Start+0x7a>
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	223a      	movs	r2, #58	@ 0x3a
 801b940:	2102      	movs	r1, #2
 801b942:	5499      	strb	r1, [r3, r2]
 801b944:	e013      	b.n	801b96e <HAL_TIM_PWM_Start+0xa2>
 801b946:	683b      	ldr	r3, [r7, #0]
 801b948:	2b04      	cmp	r3, #4
 801b94a:	d104      	bne.n	801b956 <HAL_TIM_PWM_Start+0x8a>
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	223b      	movs	r2, #59	@ 0x3b
 801b950:	2102      	movs	r1, #2
 801b952:	5499      	strb	r1, [r3, r2]
 801b954:	e00b      	b.n	801b96e <HAL_TIM_PWM_Start+0xa2>
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	2b08      	cmp	r3, #8
 801b95a:	d104      	bne.n	801b966 <HAL_TIM_PWM_Start+0x9a>
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	223c      	movs	r2, #60	@ 0x3c
 801b960:	2102      	movs	r1, #2
 801b962:	5499      	strb	r1, [r3, r2]
 801b964:	e003      	b.n	801b96e <HAL_TIM_PWM_Start+0xa2>
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	223d      	movs	r2, #61	@ 0x3d
 801b96a:	2102      	movs	r1, #2
 801b96c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	6839      	ldr	r1, [r7, #0]
 801b974:	2201      	movs	r2, #1
 801b976:	0018      	movs	r0, r3
 801b978:	f000 fa62 	bl	801be40 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681a      	ldr	r2, [r3, #0]
 801b980:	2380      	movs	r3, #128	@ 0x80
 801b982:	05db      	lsls	r3, r3, #23
 801b984:	429a      	cmp	r2, r3
 801b986:	d00e      	beq.n	801b9a6 <HAL_TIM_PWM_Start+0xda>
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	4a15      	ldr	r2, [pc, #84]	@ (801b9e4 <HAL_TIM_PWM_Start+0x118>)
 801b98e:	4293      	cmp	r3, r2
 801b990:	d009      	beq.n	801b9a6 <HAL_TIM_PWM_Start+0xda>
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	4a14      	ldr	r2, [pc, #80]	@ (801b9e8 <HAL_TIM_PWM_Start+0x11c>)
 801b998:	4293      	cmp	r3, r2
 801b99a:	d004      	beq.n	801b9a6 <HAL_TIM_PWM_Start+0xda>
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	4a12      	ldr	r2, [pc, #72]	@ (801b9ec <HAL_TIM_PWM_Start+0x120>)
 801b9a2:	4293      	cmp	r3, r2
 801b9a4:	d111      	bne.n	801b9ca <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	689b      	ldr	r3, [r3, #8]
 801b9ac:	2207      	movs	r2, #7
 801b9ae:	4013      	ands	r3, r2
 801b9b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	2b06      	cmp	r3, #6
 801b9b6:	d010      	beq.n	801b9da <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	681a      	ldr	r2, [r3, #0]
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	2101      	movs	r1, #1
 801b9c4:	430a      	orrs	r2, r1
 801b9c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b9c8:	e007      	b.n	801b9da <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	681a      	ldr	r2, [r3, #0]
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	2101      	movs	r1, #1
 801b9d6:	430a      	orrs	r2, r1
 801b9d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b9da:	2300      	movs	r3, #0
}
 801b9dc:	0018      	movs	r0, r3
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	b004      	add	sp, #16
 801b9e2:	bd80      	pop	{r7, pc}
 801b9e4:	40000400 	.word	0x40000400
 801b9e8:	40010800 	.word	0x40010800
 801b9ec:	40011400 	.word	0x40011400

0801b9f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b086      	sub	sp, #24
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	60f8      	str	r0, [r7, #12]
 801b9f8:	60b9      	str	r1, [r7, #8]
 801b9fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b9fc:	2317      	movs	r3, #23
 801b9fe:	18fb      	adds	r3, r7, r3
 801ba00:	2200      	movs	r2, #0
 801ba02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801ba04:	68fb      	ldr	r3, [r7, #12]
 801ba06:	2238      	movs	r2, #56	@ 0x38
 801ba08:	5c9b      	ldrb	r3, [r3, r2]
 801ba0a:	2b01      	cmp	r3, #1
 801ba0c:	d101      	bne.n	801ba12 <HAL_TIM_PWM_ConfigChannel+0x22>
 801ba0e:	2302      	movs	r3, #2
 801ba10:	e0ad      	b.n	801bb6e <HAL_TIM_PWM_ConfigChannel+0x17e>
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	2238      	movs	r2, #56	@ 0x38
 801ba16:	2101      	movs	r1, #1
 801ba18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	2b0c      	cmp	r3, #12
 801ba1e:	d100      	bne.n	801ba22 <HAL_TIM_PWM_ConfigChannel+0x32>
 801ba20:	e076      	b.n	801bb10 <HAL_TIM_PWM_ConfigChannel+0x120>
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	2b0c      	cmp	r3, #12
 801ba26:	d900      	bls.n	801ba2a <HAL_TIM_PWM_ConfigChannel+0x3a>
 801ba28:	e095      	b.n	801bb56 <HAL_TIM_PWM_ConfigChannel+0x166>
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	2b08      	cmp	r3, #8
 801ba2e:	d04e      	beq.n	801bace <HAL_TIM_PWM_ConfigChannel+0xde>
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	2b08      	cmp	r3, #8
 801ba34:	d900      	bls.n	801ba38 <HAL_TIM_PWM_ConfigChannel+0x48>
 801ba36:	e08e      	b.n	801bb56 <HAL_TIM_PWM_ConfigChannel+0x166>
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d003      	beq.n	801ba46 <HAL_TIM_PWM_ConfigChannel+0x56>
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	2b04      	cmp	r3, #4
 801ba42:	d021      	beq.n	801ba88 <HAL_TIM_PWM_ConfigChannel+0x98>
 801ba44:	e087      	b.n	801bb56 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	68ba      	ldr	r2, [r7, #8]
 801ba4c:	0011      	movs	r1, r2
 801ba4e:	0018      	movs	r0, r3
 801ba50:	f000 f8f2 	bl	801bc38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	699a      	ldr	r2, [r3, #24]
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	2108      	movs	r1, #8
 801ba60:	430a      	orrs	r2, r1
 801ba62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	699a      	ldr	r2, [r3, #24]
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	2104      	movs	r1, #4
 801ba70:	438a      	bics	r2, r1
 801ba72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	6999      	ldr	r1, [r3, #24]
 801ba7a:	68bb      	ldr	r3, [r7, #8]
 801ba7c:	68da      	ldr	r2, [r3, #12]
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	430a      	orrs	r2, r1
 801ba84:	619a      	str	r2, [r3, #24]
      break;
 801ba86:	e06b      	b.n	801bb60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	68ba      	ldr	r2, [r7, #8]
 801ba8e:	0011      	movs	r1, r2
 801ba90:	0018      	movs	r0, r3
 801ba92:	f000 f90d 	bl	801bcb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	699a      	ldr	r2, [r3, #24]
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	2180      	movs	r1, #128	@ 0x80
 801baa2:	0109      	lsls	r1, r1, #4
 801baa4:	430a      	orrs	r2, r1
 801baa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	699a      	ldr	r2, [r3, #24]
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	4931      	ldr	r1, [pc, #196]	@ (801bb78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801bab4:	400a      	ands	r2, r1
 801bab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	6999      	ldr	r1, [r3, #24]
 801babe:	68bb      	ldr	r3, [r7, #8]
 801bac0:	68db      	ldr	r3, [r3, #12]
 801bac2:	021a      	lsls	r2, r3, #8
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	430a      	orrs	r2, r1
 801baca:	619a      	str	r2, [r3, #24]
      break;
 801bacc:	e048      	b.n	801bb60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	68ba      	ldr	r2, [r7, #8]
 801bad4:	0011      	movs	r1, r2
 801bad6:	0018      	movs	r0, r3
 801bad8:	f000 f92c 	bl	801bd34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801badc:	68fb      	ldr	r3, [r7, #12]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	69da      	ldr	r2, [r3, #28]
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	2108      	movs	r1, #8
 801bae8:	430a      	orrs	r2, r1
 801baea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	69da      	ldr	r2, [r3, #28]
 801baf2:	68fb      	ldr	r3, [r7, #12]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	2104      	movs	r1, #4
 801baf8:	438a      	bics	r2, r1
 801bafa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	69d9      	ldr	r1, [r3, #28]
 801bb02:	68bb      	ldr	r3, [r7, #8]
 801bb04:	68da      	ldr	r2, [r3, #12]
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	430a      	orrs	r2, r1
 801bb0c:	61da      	str	r2, [r3, #28]
      break;
 801bb0e:	e027      	b.n	801bb60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801bb10:	68fb      	ldr	r3, [r7, #12]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	68ba      	ldr	r2, [r7, #8]
 801bb16:	0011      	movs	r1, r2
 801bb18:	0018      	movs	r0, r3
 801bb1a:	f000 f94b 	bl	801bdb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	69da      	ldr	r2, [r3, #28]
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	2180      	movs	r1, #128	@ 0x80
 801bb2a:	0109      	lsls	r1, r1, #4
 801bb2c:	430a      	orrs	r2, r1
 801bb2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	69da      	ldr	r2, [r3, #28]
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	490f      	ldr	r1, [pc, #60]	@ (801bb78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801bb3c:	400a      	ands	r2, r1
 801bb3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	69d9      	ldr	r1, [r3, #28]
 801bb46:	68bb      	ldr	r3, [r7, #8]
 801bb48:	68db      	ldr	r3, [r3, #12]
 801bb4a:	021a      	lsls	r2, r3, #8
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	430a      	orrs	r2, r1
 801bb52:	61da      	str	r2, [r3, #28]
      break;
 801bb54:	e004      	b.n	801bb60 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801bb56:	2317      	movs	r3, #23
 801bb58:	18fb      	adds	r3, r7, r3
 801bb5a:	2201      	movs	r2, #1
 801bb5c:	701a      	strb	r2, [r3, #0]
      break;
 801bb5e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	2238      	movs	r2, #56	@ 0x38
 801bb64:	2100      	movs	r1, #0
 801bb66:	5499      	strb	r1, [r3, r2]

  return status;
 801bb68:	2317      	movs	r3, #23
 801bb6a:	18fb      	adds	r3, r7, r3
 801bb6c:	781b      	ldrb	r3, [r3, #0]
}
 801bb6e:	0018      	movs	r0, r3
 801bb70:	46bd      	mov	sp, r7
 801bb72:	b006      	add	sp, #24
 801bb74:	bd80      	pop	{r7, pc}
 801bb76:	46c0      	nop			@ (mov r8, r8)
 801bb78:	fffffbff 	.word	0xfffffbff

0801bb7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801bb7c:	b580      	push	{r7, lr}
 801bb7e:	b084      	sub	sp, #16
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
 801bb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801bb8c:	687a      	ldr	r2, [r7, #4]
 801bb8e:	2380      	movs	r3, #128	@ 0x80
 801bb90:	05db      	lsls	r3, r3, #23
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d00b      	beq.n	801bbae <TIM_Base_SetConfig+0x32>
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	4a23      	ldr	r2, [pc, #140]	@ (801bc28 <TIM_Base_SetConfig+0xac>)
 801bb9a:	4293      	cmp	r3, r2
 801bb9c:	d007      	beq.n	801bbae <TIM_Base_SetConfig+0x32>
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	4a22      	ldr	r2, [pc, #136]	@ (801bc2c <TIM_Base_SetConfig+0xb0>)
 801bba2:	4293      	cmp	r3, r2
 801bba4:	d003      	beq.n	801bbae <TIM_Base_SetConfig+0x32>
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	4a21      	ldr	r2, [pc, #132]	@ (801bc30 <TIM_Base_SetConfig+0xb4>)
 801bbaa:	4293      	cmp	r3, r2
 801bbac:	d108      	bne.n	801bbc0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801bbae:	68fb      	ldr	r3, [r7, #12]
 801bbb0:	2270      	movs	r2, #112	@ 0x70
 801bbb2:	4393      	bics	r3, r2
 801bbb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801bbb6:	683b      	ldr	r3, [r7, #0]
 801bbb8:	685b      	ldr	r3, [r3, #4]
 801bbba:	68fa      	ldr	r2, [r7, #12]
 801bbbc:	4313      	orrs	r3, r2
 801bbbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801bbc0:	687a      	ldr	r2, [r7, #4]
 801bbc2:	2380      	movs	r3, #128	@ 0x80
 801bbc4:	05db      	lsls	r3, r3, #23
 801bbc6:	429a      	cmp	r2, r3
 801bbc8:	d00b      	beq.n	801bbe2 <TIM_Base_SetConfig+0x66>
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	4a16      	ldr	r2, [pc, #88]	@ (801bc28 <TIM_Base_SetConfig+0xac>)
 801bbce:	4293      	cmp	r3, r2
 801bbd0:	d007      	beq.n	801bbe2 <TIM_Base_SetConfig+0x66>
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	4a15      	ldr	r2, [pc, #84]	@ (801bc2c <TIM_Base_SetConfig+0xb0>)
 801bbd6:	4293      	cmp	r3, r2
 801bbd8:	d003      	beq.n	801bbe2 <TIM_Base_SetConfig+0x66>
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	4a14      	ldr	r2, [pc, #80]	@ (801bc30 <TIM_Base_SetConfig+0xb4>)
 801bbde:	4293      	cmp	r3, r2
 801bbe0:	d108      	bne.n	801bbf4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	4a13      	ldr	r2, [pc, #76]	@ (801bc34 <TIM_Base_SetConfig+0xb8>)
 801bbe6:	4013      	ands	r3, r2
 801bbe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801bbea:	683b      	ldr	r3, [r7, #0]
 801bbec:	68db      	ldr	r3, [r3, #12]
 801bbee:	68fa      	ldr	r2, [r7, #12]
 801bbf0:	4313      	orrs	r3, r2
 801bbf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	2280      	movs	r2, #128	@ 0x80
 801bbf8:	4393      	bics	r3, r2
 801bbfa:	001a      	movs	r2, r3
 801bbfc:	683b      	ldr	r3, [r7, #0]
 801bbfe:	691b      	ldr	r3, [r3, #16]
 801bc00:	4313      	orrs	r3, r2
 801bc02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	68fa      	ldr	r2, [r7, #12]
 801bc08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801bc0a:	683b      	ldr	r3, [r7, #0]
 801bc0c:	689a      	ldr	r2, [r3, #8]
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801bc12:	683b      	ldr	r3, [r7, #0]
 801bc14:	681a      	ldr	r2, [r3, #0]
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	2201      	movs	r2, #1
 801bc1e:	615a      	str	r2, [r3, #20]
}
 801bc20:	46c0      	nop			@ (mov r8, r8)
 801bc22:	46bd      	mov	sp, r7
 801bc24:	b004      	add	sp, #16
 801bc26:	bd80      	pop	{r7, pc}
 801bc28:	40000400 	.word	0x40000400
 801bc2c:	40010800 	.word	0x40010800
 801bc30:	40011400 	.word	0x40011400
 801bc34:	fffffcff 	.word	0xfffffcff

0801bc38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b086      	sub	sp, #24
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
 801bc40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	6a1b      	ldr	r3, [r3, #32]
 801bc46:	2201      	movs	r2, #1
 801bc48:	4393      	bics	r3, r2
 801bc4a:	001a      	movs	r2, r3
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	6a1b      	ldr	r3, [r3, #32]
 801bc54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	685b      	ldr	r3, [r3, #4]
 801bc5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	699b      	ldr	r3, [r3, #24]
 801bc60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801bc62:	68fb      	ldr	r3, [r7, #12]
 801bc64:	2270      	movs	r2, #112	@ 0x70
 801bc66:	4393      	bics	r3, r2
 801bc68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	2203      	movs	r2, #3
 801bc6e:	4393      	bics	r3, r2
 801bc70:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801bc72:	683b      	ldr	r3, [r7, #0]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	68fa      	ldr	r2, [r7, #12]
 801bc78:	4313      	orrs	r3, r2
 801bc7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801bc7c:	697b      	ldr	r3, [r7, #20]
 801bc7e:	2202      	movs	r2, #2
 801bc80:	4393      	bics	r3, r2
 801bc82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801bc84:	683b      	ldr	r3, [r7, #0]
 801bc86:	689b      	ldr	r3, [r3, #8]
 801bc88:	697a      	ldr	r2, [r7, #20]
 801bc8a:	4313      	orrs	r3, r2
 801bc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	693a      	ldr	r2, [r7, #16]
 801bc92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	68fa      	ldr	r2, [r7, #12]
 801bc98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801bc9a:	683b      	ldr	r3, [r7, #0]
 801bc9c:	685a      	ldr	r2, [r3, #4]
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	697a      	ldr	r2, [r7, #20]
 801bca6:	621a      	str	r2, [r3, #32]
}
 801bca8:	46c0      	nop			@ (mov r8, r8)
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	b006      	add	sp, #24
 801bcae:	bd80      	pop	{r7, pc}

0801bcb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b086      	sub	sp, #24
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	6078      	str	r0, [r7, #4]
 801bcb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	6a1b      	ldr	r3, [r3, #32]
 801bcbe:	2210      	movs	r2, #16
 801bcc0:	4393      	bics	r3, r2
 801bcc2:	001a      	movs	r2, r3
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	6a1b      	ldr	r3, [r3, #32]
 801bccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	685b      	ldr	r3, [r3, #4]
 801bcd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	699b      	ldr	r3, [r3, #24]
 801bcd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	4a13      	ldr	r2, [pc, #76]	@ (801bd2c <TIM_OC2_SetConfig+0x7c>)
 801bcde:	4013      	ands	r3, r2
 801bce0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	4a12      	ldr	r2, [pc, #72]	@ (801bd30 <TIM_OC2_SetConfig+0x80>)
 801bce6:	4013      	ands	r3, r2
 801bce8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bcea:	683b      	ldr	r3, [r7, #0]
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	021b      	lsls	r3, r3, #8
 801bcf0:	68fa      	ldr	r2, [r7, #12]
 801bcf2:	4313      	orrs	r3, r2
 801bcf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801bcf6:	697b      	ldr	r3, [r7, #20]
 801bcf8:	2220      	movs	r2, #32
 801bcfa:	4393      	bics	r3, r2
 801bcfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801bcfe:	683b      	ldr	r3, [r7, #0]
 801bd00:	689b      	ldr	r3, [r3, #8]
 801bd02:	011b      	lsls	r3, r3, #4
 801bd04:	697a      	ldr	r2, [r7, #20]
 801bd06:	4313      	orrs	r3, r2
 801bd08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	693a      	ldr	r2, [r7, #16]
 801bd0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	68fa      	ldr	r2, [r7, #12]
 801bd14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801bd16:	683b      	ldr	r3, [r7, #0]
 801bd18:	685a      	ldr	r2, [r3, #4]
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	697a      	ldr	r2, [r7, #20]
 801bd22:	621a      	str	r2, [r3, #32]
}
 801bd24:	46c0      	nop			@ (mov r8, r8)
 801bd26:	46bd      	mov	sp, r7
 801bd28:	b006      	add	sp, #24
 801bd2a:	bd80      	pop	{r7, pc}
 801bd2c:	ffff8fff 	.word	0xffff8fff
 801bd30:	fffffcff 	.word	0xfffffcff

0801bd34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b086      	sub	sp, #24
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	6078      	str	r0, [r7, #4]
 801bd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	6a1b      	ldr	r3, [r3, #32]
 801bd42:	4a1a      	ldr	r2, [pc, #104]	@ (801bdac <TIM_OC3_SetConfig+0x78>)
 801bd44:	401a      	ands	r2, r3
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	6a1b      	ldr	r3, [r3, #32]
 801bd4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	685b      	ldr	r3, [r3, #4]
 801bd54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	69db      	ldr	r3, [r3, #28]
 801bd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	2270      	movs	r2, #112	@ 0x70
 801bd60:	4393      	bics	r3, r2
 801bd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	2203      	movs	r2, #3
 801bd68:	4393      	bics	r3, r2
 801bd6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801bd6c:	683b      	ldr	r3, [r7, #0]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	68fa      	ldr	r2, [r7, #12]
 801bd72:	4313      	orrs	r3, r2
 801bd74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801bd76:	697b      	ldr	r3, [r7, #20]
 801bd78:	4a0d      	ldr	r2, [pc, #52]	@ (801bdb0 <TIM_OC3_SetConfig+0x7c>)
 801bd7a:	4013      	ands	r3, r2
 801bd7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801bd7e:	683b      	ldr	r3, [r7, #0]
 801bd80:	689b      	ldr	r3, [r3, #8]
 801bd82:	021b      	lsls	r3, r3, #8
 801bd84:	697a      	ldr	r2, [r7, #20]
 801bd86:	4313      	orrs	r3, r2
 801bd88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	693a      	ldr	r2, [r7, #16]
 801bd8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	68fa      	ldr	r2, [r7, #12]
 801bd94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801bd96:	683b      	ldr	r3, [r7, #0]
 801bd98:	685a      	ldr	r2, [r3, #4]
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	697a      	ldr	r2, [r7, #20]
 801bda2:	621a      	str	r2, [r3, #32]
}
 801bda4:	46c0      	nop			@ (mov r8, r8)
 801bda6:	46bd      	mov	sp, r7
 801bda8:	b006      	add	sp, #24
 801bdaa:	bd80      	pop	{r7, pc}
 801bdac:	fffffeff 	.word	0xfffffeff
 801bdb0:	fffffdff 	.word	0xfffffdff

0801bdb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b086      	sub	sp, #24
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	6078      	str	r0, [r7, #4]
 801bdbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	6a1b      	ldr	r3, [r3, #32]
 801bdc2:	4a1b      	ldr	r2, [pc, #108]	@ (801be30 <TIM_OC4_SetConfig+0x7c>)
 801bdc4:	401a      	ands	r2, r3
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	6a1b      	ldr	r3, [r3, #32]
 801bdce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	685b      	ldr	r3, [r3, #4]
 801bdd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	69db      	ldr	r3, [r3, #28]
 801bdda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801bddc:	68fb      	ldr	r3, [r7, #12]
 801bdde:	4a15      	ldr	r2, [pc, #84]	@ (801be34 <TIM_OC4_SetConfig+0x80>)
 801bde0:	4013      	ands	r3, r2
 801bde2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	4a14      	ldr	r2, [pc, #80]	@ (801be38 <TIM_OC4_SetConfig+0x84>)
 801bde8:	4013      	ands	r3, r2
 801bdea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801bdec:	683b      	ldr	r3, [r7, #0]
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	021b      	lsls	r3, r3, #8
 801bdf2:	68fa      	ldr	r2, [r7, #12]
 801bdf4:	4313      	orrs	r3, r2
 801bdf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801bdf8:	697b      	ldr	r3, [r7, #20]
 801bdfa:	4a10      	ldr	r2, [pc, #64]	@ (801be3c <TIM_OC4_SetConfig+0x88>)
 801bdfc:	4013      	ands	r3, r2
 801bdfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	689b      	ldr	r3, [r3, #8]
 801be04:	031b      	lsls	r3, r3, #12
 801be06:	697a      	ldr	r2, [r7, #20]
 801be08:	4313      	orrs	r3, r2
 801be0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	693a      	ldr	r2, [r7, #16]
 801be10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	68fa      	ldr	r2, [r7, #12]
 801be16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801be18:	683b      	ldr	r3, [r7, #0]
 801be1a:	685a      	ldr	r2, [r3, #4]
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	697a      	ldr	r2, [r7, #20]
 801be24:	621a      	str	r2, [r3, #32]
}
 801be26:	46c0      	nop			@ (mov r8, r8)
 801be28:	46bd      	mov	sp, r7
 801be2a:	b006      	add	sp, #24
 801be2c:	bd80      	pop	{r7, pc}
 801be2e:	46c0      	nop			@ (mov r8, r8)
 801be30:	ffffefff 	.word	0xffffefff
 801be34:	ffff8fff 	.word	0xffff8fff
 801be38:	fffffcff 	.word	0xfffffcff
 801be3c:	ffffdfff 	.word	0xffffdfff

0801be40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b086      	sub	sp, #24
 801be44:	af00      	add	r7, sp, #0
 801be46:	60f8      	str	r0, [r7, #12]
 801be48:	60b9      	str	r1, [r7, #8]
 801be4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801be4c:	68bb      	ldr	r3, [r7, #8]
 801be4e:	221f      	movs	r2, #31
 801be50:	4013      	ands	r3, r2
 801be52:	2201      	movs	r2, #1
 801be54:	409a      	lsls	r2, r3
 801be56:	0013      	movs	r3, r2
 801be58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	6a1b      	ldr	r3, [r3, #32]
 801be5e:	697a      	ldr	r2, [r7, #20]
 801be60:	43d2      	mvns	r2, r2
 801be62:	401a      	ands	r2, r3
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	6a1a      	ldr	r2, [r3, #32]
 801be6c:	68bb      	ldr	r3, [r7, #8]
 801be6e:	211f      	movs	r1, #31
 801be70:	400b      	ands	r3, r1
 801be72:	6879      	ldr	r1, [r7, #4]
 801be74:	4099      	lsls	r1, r3
 801be76:	000b      	movs	r3, r1
 801be78:	431a      	orrs	r2, r3
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	621a      	str	r2, [r3, #32]
}
 801be7e:	46c0      	nop			@ (mov r8, r8)
 801be80:	46bd      	mov	sp, r7
 801be82:	b006      	add	sp, #24
 801be84:	bd80      	pop	{r7, pc}
	...

0801be88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801be88:	b580      	push	{r7, lr}
 801be8a:	b084      	sub	sp, #16
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
 801be90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	2238      	movs	r2, #56	@ 0x38
 801be96:	5c9b      	ldrb	r3, [r3, r2]
 801be98:	2b01      	cmp	r3, #1
 801be9a:	d101      	bne.n	801bea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801be9c:	2302      	movs	r3, #2
 801be9e:	e047      	b.n	801bf30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	2238      	movs	r2, #56	@ 0x38
 801bea4:	2101      	movs	r1, #1
 801bea6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	2239      	movs	r2, #57	@ 0x39
 801beac:	2102      	movs	r1, #2
 801beae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	685b      	ldr	r3, [r3, #4]
 801beb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	689b      	ldr	r3, [r3, #8]
 801bebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	2270      	movs	r2, #112	@ 0x70
 801bec4:	4393      	bics	r3, r2
 801bec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801bec8:	683b      	ldr	r3, [r7, #0]
 801beca:	681b      	ldr	r3, [r3, #0]
 801becc:	68fa      	ldr	r2, [r7, #12]
 801bece:	4313      	orrs	r3, r2
 801bed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	68fa      	ldr	r2, [r7, #12]
 801bed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	681a      	ldr	r2, [r3, #0]
 801bede:	2380      	movs	r3, #128	@ 0x80
 801bee0:	05db      	lsls	r3, r3, #23
 801bee2:	429a      	cmp	r2, r3
 801bee4:	d00e      	beq.n	801bf04 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	4a13      	ldr	r2, [pc, #76]	@ (801bf38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801beec:	4293      	cmp	r3, r2
 801beee:	d009      	beq.n	801bf04 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	4a11      	ldr	r2, [pc, #68]	@ (801bf3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801bef6:	4293      	cmp	r3, r2
 801bef8:	d004      	beq.n	801bf04 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	4a10      	ldr	r2, [pc, #64]	@ (801bf40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801bf00:	4293      	cmp	r3, r2
 801bf02:	d10c      	bne.n	801bf1e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801bf04:	68bb      	ldr	r3, [r7, #8]
 801bf06:	2280      	movs	r2, #128	@ 0x80
 801bf08:	4393      	bics	r3, r2
 801bf0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801bf0c:	683b      	ldr	r3, [r7, #0]
 801bf0e:	685b      	ldr	r3, [r3, #4]
 801bf10:	68ba      	ldr	r2, [r7, #8]
 801bf12:	4313      	orrs	r3, r2
 801bf14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	68ba      	ldr	r2, [r7, #8]
 801bf1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	2239      	movs	r2, #57	@ 0x39
 801bf22:	2101      	movs	r1, #1
 801bf24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	2238      	movs	r2, #56	@ 0x38
 801bf2a:	2100      	movs	r1, #0
 801bf2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bf2e:	2300      	movs	r3, #0
}
 801bf30:	0018      	movs	r0, r3
 801bf32:	46bd      	mov	sp, r7
 801bf34:	b004      	add	sp, #16
 801bf36:	bd80      	pop	{r7, pc}
 801bf38:	40000400 	.word	0x40000400
 801bf3c:	40010800 	.word	0x40010800
 801bf40:	40011400 	.word	0x40011400

0801bf44 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	b082      	sub	sp, #8
 801bf48:	af00      	add	r7, sp, #0
 801bf4a:	6078      	str	r0, [r7, #4]
 801bf4c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	2238      	movs	r2, #56	@ 0x38
 801bf52:	5c9b      	ldrb	r3, [r3, r2]
 801bf54:	2b01      	cmp	r3, #1
 801bf56:	d101      	bne.n	801bf5c <HAL_TIMEx_RemapConfig+0x18>
 801bf58:	2302      	movs	r3, #2
 801bf5a:	e00c      	b.n	801bf76 <HAL_TIMEx_RemapConfig+0x32>
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	2238      	movs	r2, #56	@ 0x38
 801bf60:	2101      	movs	r1, #1
 801bf62:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	683a      	ldr	r2, [r7, #0]
 801bf6a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	2238      	movs	r2, #56	@ 0x38
 801bf70:	2100      	movs	r1, #0
 801bf72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bf74:	2300      	movs	r3, #0
}
 801bf76:	0018      	movs	r0, r3
 801bf78:	46bd      	mov	sp, r7
 801bf7a:	b002      	add	sp, #8
 801bf7c:	bd80      	pop	{r7, pc}
	...

0801bf80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801bf80:	b580      	push	{r7, lr}
 801bf82:	b082      	sub	sp, #8
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d101      	bne.n	801bf92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801bf8e:	2301      	movs	r3, #1
 801bf90:	e053      	b.n	801c03a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d116      	bne.n	801bfc8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	2278      	movs	r2, #120	@ 0x78
 801bf9e:	2100      	movs	r1, #0
 801bfa0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	0018      	movs	r0, r3
 801bfa6:	f000 fd65 	bl	801ca74 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	22b0      	movs	r2, #176	@ 0xb0
 801bfae:	589b      	ldr	r3, [r3, r2]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d103      	bne.n	801bfbc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	21b0      	movs	r1, #176	@ 0xb0
 801bfb8:	4a22      	ldr	r2, [pc, #136]	@ (801c044 <HAL_UART_Init+0xc4>)
 801bfba:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	22b0      	movs	r2, #176	@ 0xb0
 801bfc0:	589b      	ldr	r3, [r3, r2]
 801bfc2:	687a      	ldr	r2, [r7, #4]
 801bfc4:	0010      	movs	r0, r2
 801bfc6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	2224      	movs	r2, #36	@ 0x24
 801bfcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	681a      	ldr	r2, [r3, #0]
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	2101      	movs	r1, #1
 801bfda:	438a      	bics	r2, r1
 801bfdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	0018      	movs	r0, r3
 801bfe2:	f000 fd8b 	bl	801cafc <UART_SetConfig>
 801bfe6:	0003      	movs	r3, r0
 801bfe8:	2b01      	cmp	r3, #1
 801bfea:	d101      	bne.n	801bff0 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801bfec:	2301      	movs	r3, #1
 801bfee:	e024      	b.n	801c03a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d003      	beq.n	801c000 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	0018      	movs	r0, r3
 801bffc:	f001 f81c 	bl	801d038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	685a      	ldr	r2, [r3, #4]
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	490f      	ldr	r1, [pc, #60]	@ (801c048 <HAL_UART_Init+0xc8>)
 801c00c:	400a      	ands	r2, r1
 801c00e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	689a      	ldr	r2, [r3, #8]
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	212a      	movs	r1, #42	@ 0x2a
 801c01c:	438a      	bics	r2, r1
 801c01e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	681a      	ldr	r2, [r3, #0]
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	2101      	movs	r1, #1
 801c02c:	430a      	orrs	r2, r1
 801c02e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	0018      	movs	r0, r3
 801c034:	f001 f8b4 	bl	801d1a0 <UART_CheckIdleState>
 801c038:	0003      	movs	r3, r0
}
 801c03a:	0018      	movs	r0, r3
 801c03c:	46bd      	mov	sp, r7
 801c03e:	b002      	add	sp, #8
 801c040:	bd80      	pop	{r7, pc}
 801c042:	46c0      	nop			@ (mov r8, r8)
 801c044:	0801292d 	.word	0x0801292d
 801c048:	ffffb7ff 	.word	0xffffb7ff

0801c04c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b08a      	sub	sp, #40	@ 0x28
 801c050:	af02      	add	r7, sp, #8
 801c052:	60f8      	str	r0, [r7, #12]
 801c054:	60b9      	str	r1, [r7, #8]
 801c056:	603b      	str	r3, [r7, #0]
 801c058:	1dbb      	adds	r3, r7, #6
 801c05a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c060:	2b20      	cmp	r3, #32
 801c062:	d000      	beq.n	801c066 <HAL_UART_Transmit+0x1a>
 801c064:	e08c      	b.n	801c180 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801c066:	68bb      	ldr	r3, [r7, #8]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d003      	beq.n	801c074 <HAL_UART_Transmit+0x28>
 801c06c:	1dbb      	adds	r3, r7, #6
 801c06e:	881b      	ldrh	r3, [r3, #0]
 801c070:	2b00      	cmp	r3, #0
 801c072:	d101      	bne.n	801c078 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801c074:	2301      	movs	r3, #1
 801c076:	e084      	b.n	801c182 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	689a      	ldr	r2, [r3, #8]
 801c07c:	2380      	movs	r3, #128	@ 0x80
 801c07e:	015b      	lsls	r3, r3, #5
 801c080:	429a      	cmp	r2, r3
 801c082:	d109      	bne.n	801c098 <HAL_UART_Transmit+0x4c>
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	691b      	ldr	r3, [r3, #16]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	d105      	bne.n	801c098 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	2201      	movs	r2, #1
 801c090:	4013      	ands	r3, r2
 801c092:	d001      	beq.n	801c098 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801c094:	2301      	movs	r3, #1
 801c096:	e074      	b.n	801c182 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	2284      	movs	r2, #132	@ 0x84
 801c09c:	2100      	movs	r1, #0
 801c09e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	2221      	movs	r2, #33	@ 0x21
 801c0a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c0a6:	f7f7 fb0d 	bl	80136c4 <HAL_GetTick>
 801c0aa:	0003      	movs	r3, r0
 801c0ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	1dba      	adds	r2, r7, #6
 801c0b2:	2150      	movs	r1, #80	@ 0x50
 801c0b4:	8812      	ldrh	r2, [r2, #0]
 801c0b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	1dba      	adds	r2, r7, #6
 801c0bc:	2152      	movs	r1, #82	@ 0x52
 801c0be:	8812      	ldrh	r2, [r2, #0]
 801c0c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	689a      	ldr	r2, [r3, #8]
 801c0c6:	2380      	movs	r3, #128	@ 0x80
 801c0c8:	015b      	lsls	r3, r3, #5
 801c0ca:	429a      	cmp	r2, r3
 801c0cc:	d108      	bne.n	801c0e0 <HAL_UART_Transmit+0x94>
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	691b      	ldr	r3, [r3, #16]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d104      	bne.n	801c0e0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c0da:	68bb      	ldr	r3, [r7, #8]
 801c0dc:	61bb      	str	r3, [r7, #24]
 801c0de:	e003      	b.n	801c0e8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c0e4:	2300      	movs	r3, #0
 801c0e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c0e8:	e02f      	b.n	801c14a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c0ea:	697a      	ldr	r2, [r7, #20]
 801c0ec:	68f8      	ldr	r0, [r7, #12]
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	9300      	str	r3, [sp, #0]
 801c0f2:	0013      	movs	r3, r2
 801c0f4:	2200      	movs	r2, #0
 801c0f6:	2180      	movs	r1, #128	@ 0x80
 801c0f8:	f001 f8fa 	bl	801d2f0 <UART_WaitOnFlagUntilTimeout>
 801c0fc:	1e03      	subs	r3, r0, #0
 801c0fe:	d004      	beq.n	801c10a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	2220      	movs	r2, #32
 801c104:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801c106:	2303      	movs	r3, #3
 801c108:	e03b      	b.n	801c182 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801c10a:	69fb      	ldr	r3, [r7, #28]
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d10b      	bne.n	801c128 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c110:	69bb      	ldr	r3, [r7, #24]
 801c112:	881b      	ldrh	r3, [r3, #0]
 801c114:	001a      	movs	r2, r3
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	05d2      	lsls	r2, r2, #23
 801c11c:	0dd2      	lsrs	r2, r2, #23
 801c11e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801c120:	69bb      	ldr	r3, [r7, #24]
 801c122:	3302      	adds	r3, #2
 801c124:	61bb      	str	r3, [r7, #24]
 801c126:	e007      	b.n	801c138 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c128:	69fb      	ldr	r3, [r7, #28]
 801c12a:	781a      	ldrb	r2, [r3, #0]
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801c132:	69fb      	ldr	r3, [r7, #28]
 801c134:	3301      	adds	r3, #1
 801c136:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	2252      	movs	r2, #82	@ 0x52
 801c13c:	5a9b      	ldrh	r3, [r3, r2]
 801c13e:	b29b      	uxth	r3, r3
 801c140:	3b01      	subs	r3, #1
 801c142:	b299      	uxth	r1, r3
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	2252      	movs	r2, #82	@ 0x52
 801c148:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	2252      	movs	r2, #82	@ 0x52
 801c14e:	5a9b      	ldrh	r3, [r3, r2]
 801c150:	b29b      	uxth	r3, r3
 801c152:	2b00      	cmp	r3, #0
 801c154:	d1c9      	bne.n	801c0ea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c156:	697a      	ldr	r2, [r7, #20]
 801c158:	68f8      	ldr	r0, [r7, #12]
 801c15a:	683b      	ldr	r3, [r7, #0]
 801c15c:	9300      	str	r3, [sp, #0]
 801c15e:	0013      	movs	r3, r2
 801c160:	2200      	movs	r2, #0
 801c162:	2140      	movs	r1, #64	@ 0x40
 801c164:	f001 f8c4 	bl	801d2f0 <UART_WaitOnFlagUntilTimeout>
 801c168:	1e03      	subs	r3, r0, #0
 801c16a:	d004      	beq.n	801c176 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c16c:	68fb      	ldr	r3, [r7, #12]
 801c16e:	2220      	movs	r2, #32
 801c170:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801c172:	2303      	movs	r3, #3
 801c174:	e005      	b.n	801c182 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	2220      	movs	r2, #32
 801c17a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801c17c:	2300      	movs	r3, #0
 801c17e:	e000      	b.n	801c182 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801c180:	2302      	movs	r3, #2
  }
}
 801c182:	0018      	movs	r0, r3
 801c184:	46bd      	mov	sp, r7
 801c186:	b008      	add	sp, #32
 801c188:	bd80      	pop	{r7, pc}
	...

0801c18c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c18c:	b580      	push	{r7, lr}
 801c18e:	b088      	sub	sp, #32
 801c190:	af00      	add	r7, sp, #0
 801c192:	60f8      	str	r0, [r7, #12]
 801c194:	60b9      	str	r1, [r7, #8]
 801c196:	1dbb      	adds	r3, r7, #6
 801c198:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	2280      	movs	r2, #128	@ 0x80
 801c19e:	589b      	ldr	r3, [r3, r2]
 801c1a0:	2b20      	cmp	r3, #32
 801c1a2:	d14a      	bne.n	801c23a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c1a4:	68bb      	ldr	r3, [r7, #8]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d003      	beq.n	801c1b2 <HAL_UART_Receive_IT+0x26>
 801c1aa:	1dbb      	adds	r3, r7, #6
 801c1ac:	881b      	ldrh	r3, [r3, #0]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d101      	bne.n	801c1b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801c1b2:	2301      	movs	r3, #1
 801c1b4:	e042      	b.n	801c23c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	689a      	ldr	r2, [r3, #8]
 801c1ba:	2380      	movs	r3, #128	@ 0x80
 801c1bc:	015b      	lsls	r3, r3, #5
 801c1be:	429a      	cmp	r2, r3
 801c1c0:	d109      	bne.n	801c1d6 <HAL_UART_Receive_IT+0x4a>
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	691b      	ldr	r3, [r3, #16]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d105      	bne.n	801c1d6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c1ca:	68bb      	ldr	r3, [r7, #8]
 801c1cc:	2201      	movs	r2, #1
 801c1ce:	4013      	ands	r3, r2
 801c1d0:	d001      	beq.n	801c1d6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801c1d2:	2301      	movs	r3, #1
 801c1d4:	e032      	b.n	801c23c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	2200      	movs	r2, #0
 801c1da:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	4a18      	ldr	r2, [pc, #96]	@ (801c244 <HAL_UART_Receive_IT+0xb8>)
 801c1e2:	4293      	cmp	r3, r2
 801c1e4:	d020      	beq.n	801c228 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	685a      	ldr	r2, [r3, #4]
 801c1ec:	2380      	movs	r3, #128	@ 0x80
 801c1ee:	041b      	lsls	r3, r3, #16
 801c1f0:	4013      	ands	r3, r2
 801c1f2:	d019      	beq.n	801c228 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1f4:	f3ef 8310 	mrs	r3, PRIMASK
 801c1f8:	613b      	str	r3, [r7, #16]
  return(result);
 801c1fa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c1fc:	61fb      	str	r3, [r7, #28]
 801c1fe:	2301      	movs	r3, #1
 801c200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c202:	697b      	ldr	r3, [r7, #20]
 801c204:	f383 8810 	msr	PRIMASK, r3
}
 801c208:	46c0      	nop			@ (mov r8, r8)
 801c20a:	68fb      	ldr	r3, [r7, #12]
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	681a      	ldr	r2, [r3, #0]
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	2180      	movs	r1, #128	@ 0x80
 801c216:	04c9      	lsls	r1, r1, #19
 801c218:	430a      	orrs	r2, r1
 801c21a:	601a      	str	r2, [r3, #0]
 801c21c:	69fb      	ldr	r3, [r7, #28]
 801c21e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c220:	69bb      	ldr	r3, [r7, #24]
 801c222:	f383 8810 	msr	PRIMASK, r3
}
 801c226:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801c228:	1dbb      	adds	r3, r7, #6
 801c22a:	881a      	ldrh	r2, [r3, #0]
 801c22c:	68b9      	ldr	r1, [r7, #8]
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	0018      	movs	r0, r3
 801c232:	f001 f8c7 	bl	801d3c4 <UART_Start_Receive_IT>
 801c236:	0003      	movs	r3, r0
 801c238:	e000      	b.n	801c23c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c23a:	2302      	movs	r3, #2
  }
}
 801c23c:	0018      	movs	r0, r3
 801c23e:	46bd      	mov	sp, r7
 801c240:	b008      	add	sp, #32
 801c242:	bd80      	pop	{r7, pc}
 801c244:	40004800 	.word	0x40004800

0801c248 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801c248:	b580      	push	{r7, lr}
 801c24a:	b088      	sub	sp, #32
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	60f8      	str	r0, [r7, #12]
 801c250:	60b9      	str	r1, [r7, #8]
 801c252:	1dbb      	adds	r3, r7, #6
 801c254:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c25a:	2b20      	cmp	r3, #32
 801c25c:	d000      	beq.n	801c260 <HAL_UART_Transmit_DMA+0x18>
 801c25e:	e077      	b.n	801c350 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801c260:	68bb      	ldr	r3, [r7, #8]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d003      	beq.n	801c26e <HAL_UART_Transmit_DMA+0x26>
 801c266:	1dbb      	adds	r3, r7, #6
 801c268:	881b      	ldrh	r3, [r3, #0]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d101      	bne.n	801c272 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801c26e:	2301      	movs	r3, #1
 801c270:	e06f      	b.n	801c352 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	689a      	ldr	r2, [r3, #8]
 801c276:	2380      	movs	r3, #128	@ 0x80
 801c278:	015b      	lsls	r3, r3, #5
 801c27a:	429a      	cmp	r2, r3
 801c27c:	d109      	bne.n	801c292 <HAL_UART_Transmit_DMA+0x4a>
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	691b      	ldr	r3, [r3, #16]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d105      	bne.n	801c292 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c286:	68bb      	ldr	r3, [r7, #8]
 801c288:	2201      	movs	r2, #1
 801c28a:	4013      	ands	r3, r2
 801c28c:	d001      	beq.n	801c292 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c28e:	2301      	movs	r3, #1
 801c290:	e05f      	b.n	801c352 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	68ba      	ldr	r2, [r7, #8]
 801c296:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	1dba      	adds	r2, r7, #6
 801c29c:	2150      	movs	r1, #80	@ 0x50
 801c29e:	8812      	ldrh	r2, [r2, #0]
 801c2a0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	1dba      	adds	r2, r7, #6
 801c2a6:	2152      	movs	r1, #82	@ 0x52
 801c2a8:	8812      	ldrh	r2, [r2, #0]
 801c2aa:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c2ac:	68fb      	ldr	r3, [r7, #12]
 801c2ae:	2284      	movs	r2, #132	@ 0x84
 801c2b0:	2100      	movs	r1, #0
 801c2b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	2221      	movs	r2, #33	@ 0x21
 801c2b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d027      	beq.n	801c312 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
 801c2c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2c6:	4a25      	ldr	r2, [pc, #148]	@ (801c35c <HAL_UART_Transmit_DMA+0x114>)
 801c2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2ce:	4a24      	ldr	r2, [pc, #144]	@ (801c360 <HAL_UART_Transmit_DMA+0x118>)
 801c2d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2d6:	4a23      	ldr	r2, [pc, #140]	@ (801c364 <HAL_UART_Transmit_DMA+0x11c>)
 801c2d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2de:	2200      	movs	r2, #0
 801c2e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801c2e2:	68fb      	ldr	r3, [r7, #12]
 801c2e4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c2ea:	0019      	movs	r1, r3
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	3328      	adds	r3, #40	@ 0x28
 801c2f2:	001a      	movs	r2, r3
 801c2f4:	1dbb      	adds	r3, r7, #6
 801c2f6:	881b      	ldrh	r3, [r3, #0]
 801c2f8:	f7f7 ff36 	bl	8014168 <HAL_DMA_Start_IT>
 801c2fc:	1e03      	subs	r3, r0, #0
 801c2fe:	d008      	beq.n	801c312 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	2284      	movs	r2, #132	@ 0x84
 801c304:	2110      	movs	r1, #16
 801c306:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	2220      	movs	r2, #32
 801c30c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801c30e:	2301      	movs	r3, #1
 801c310:	e01f      	b.n	801c352 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	2240      	movs	r2, #64	@ 0x40
 801c318:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c31a:	f3ef 8310 	mrs	r3, PRIMASK
 801c31e:	613b      	str	r3, [r7, #16]
  return(result);
 801c320:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c322:	61fb      	str	r3, [r7, #28]
 801c324:	2301      	movs	r3, #1
 801c326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c328:	697b      	ldr	r3, [r7, #20]
 801c32a:	f383 8810 	msr	PRIMASK, r3
}
 801c32e:	46c0      	nop			@ (mov r8, r8)
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	689a      	ldr	r2, [r3, #8]
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	2180      	movs	r1, #128	@ 0x80
 801c33c:	430a      	orrs	r2, r1
 801c33e:	609a      	str	r2, [r3, #8]
 801c340:	69fb      	ldr	r3, [r7, #28]
 801c342:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c344:	69bb      	ldr	r3, [r7, #24]
 801c346:	f383 8810 	msr	PRIMASK, r3
}
 801c34a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801c34c:	2300      	movs	r3, #0
 801c34e:	e000      	b.n	801c352 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801c350:	2302      	movs	r3, #2
  }
}
 801c352:	0018      	movs	r0, r3
 801c354:	46bd      	mov	sp, r7
 801c356:	b008      	add	sp, #32
 801c358:	bd80      	pop	{r7, pc}
 801c35a:	46c0      	nop			@ (mov r8, r8)
 801c35c:	0801d7a9 	.word	0x0801d7a9
 801c360:	0801d845 	.word	0x0801d845
 801c364:	0801d9e5 	.word	0x0801d9e5

0801c368 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b088      	sub	sp, #32
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	60f8      	str	r0, [r7, #12]
 801c370:	60b9      	str	r1, [r7, #8]
 801c372:	1dbb      	adds	r3, r7, #6
 801c374:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	2280      	movs	r2, #128	@ 0x80
 801c37a:	589b      	ldr	r3, [r3, r2]
 801c37c:	2b20      	cmp	r3, #32
 801c37e:	d14a      	bne.n	801c416 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c380:	68bb      	ldr	r3, [r7, #8]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d003      	beq.n	801c38e <HAL_UART_Receive_DMA+0x26>
 801c386:	1dbb      	adds	r3, r7, #6
 801c388:	881b      	ldrh	r3, [r3, #0]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d101      	bne.n	801c392 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801c38e:	2301      	movs	r3, #1
 801c390:	e042      	b.n	801c418 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c392:	68fb      	ldr	r3, [r7, #12]
 801c394:	689a      	ldr	r2, [r3, #8]
 801c396:	2380      	movs	r3, #128	@ 0x80
 801c398:	015b      	lsls	r3, r3, #5
 801c39a:	429a      	cmp	r2, r3
 801c39c:	d109      	bne.n	801c3b2 <HAL_UART_Receive_DMA+0x4a>
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	691b      	ldr	r3, [r3, #16]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d105      	bne.n	801c3b2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	2201      	movs	r2, #1
 801c3aa:	4013      	ands	r3, r2
 801c3ac:	d001      	beq.n	801c3b2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	e032      	b.n	801c418 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c3b8:	68fb      	ldr	r3, [r7, #12]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	4a18      	ldr	r2, [pc, #96]	@ (801c420 <HAL_UART_Receive_DMA+0xb8>)
 801c3be:	4293      	cmp	r3, r2
 801c3c0:	d020      	beq.n	801c404 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	685a      	ldr	r2, [r3, #4]
 801c3c8:	2380      	movs	r3, #128	@ 0x80
 801c3ca:	041b      	lsls	r3, r3, #16
 801c3cc:	4013      	ands	r3, r2
 801c3ce:	d019      	beq.n	801c404 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3d0:	f3ef 8310 	mrs	r3, PRIMASK
 801c3d4:	613b      	str	r3, [r7, #16]
  return(result);
 801c3d6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c3d8:	61fb      	str	r3, [r7, #28]
 801c3da:	2301      	movs	r3, #1
 801c3dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3de:	697b      	ldr	r3, [r7, #20]
 801c3e0:	f383 8810 	msr	PRIMASK, r3
}
 801c3e4:	46c0      	nop			@ (mov r8, r8)
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	681a      	ldr	r2, [r3, #0]
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	2180      	movs	r1, #128	@ 0x80
 801c3f2:	04c9      	lsls	r1, r1, #19
 801c3f4:	430a      	orrs	r2, r1
 801c3f6:	601a      	str	r2, [r3, #0]
 801c3f8:	69fb      	ldr	r3, [r7, #28]
 801c3fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3fc:	69bb      	ldr	r3, [r7, #24]
 801c3fe:	f383 8810 	msr	PRIMASK, r3
}
 801c402:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801c404:	1dbb      	adds	r3, r7, #6
 801c406:	881a      	ldrh	r2, [r3, #0]
 801c408:	68b9      	ldr	r1, [r7, #8]
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	0018      	movs	r0, r3
 801c40e:	f001 f8a3 	bl	801d558 <UART_Start_Receive_DMA>
 801c412:	0003      	movs	r3, r0
 801c414:	e000      	b.n	801c418 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c416:	2302      	movs	r3, #2
  }
}
 801c418:	0018      	movs	r0, r3
 801c41a:	46bd      	mov	sp, r7
 801c41c:	b008      	add	sp, #32
 801c41e:	bd80      	pop	{r7, pc}
 801c420:	40004800 	.word	0x40004800

0801c424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c424:	b590      	push	{r4, r7, lr}
 801c426:	b0ab      	sub	sp, #172	@ 0xac
 801c428:	af00      	add	r7, sp, #0
 801c42a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	69db      	ldr	r3, [r3, #28]
 801c432:	22a4      	movs	r2, #164	@ 0xa4
 801c434:	18b9      	adds	r1, r7, r2
 801c436:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	20a0      	movs	r0, #160	@ 0xa0
 801c440:	1839      	adds	r1, r7, r0
 801c442:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	689b      	ldr	r3, [r3, #8]
 801c44a:	219c      	movs	r1, #156	@ 0x9c
 801c44c:	1879      	adds	r1, r7, r1
 801c44e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801c450:	0011      	movs	r1, r2
 801c452:	18bb      	adds	r3, r7, r2
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	4a9c      	ldr	r2, [pc, #624]	@ (801c6c8 <HAL_UART_IRQHandler+0x2a4>)
 801c458:	4013      	ands	r3, r2
 801c45a:	2298      	movs	r2, #152	@ 0x98
 801c45c:	18bc      	adds	r4, r7, r2
 801c45e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801c460:	18bb      	adds	r3, r7, r2
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d114      	bne.n	801c492 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801c468:	187b      	adds	r3, r7, r1
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	2220      	movs	r2, #32
 801c46e:	4013      	ands	r3, r2
 801c470:	d00f      	beq.n	801c492 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801c472:	183b      	adds	r3, r7, r0
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	2220      	movs	r2, #32
 801c478:	4013      	ands	r3, r2
 801c47a:	d00a      	beq.n	801c492 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c480:	2b00      	cmp	r3, #0
 801c482:	d100      	bne.n	801c486 <HAL_UART_IRQHandler+0x62>
 801c484:	e2aa      	b.n	801c9dc <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c48a:	687a      	ldr	r2, [r7, #4]
 801c48c:	0010      	movs	r0, r2
 801c48e:	4798      	blx	r3
      }
      return;
 801c490:	e2a4      	b.n	801c9dc <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801c492:	2398      	movs	r3, #152	@ 0x98
 801c494:	18fb      	adds	r3, r7, r3
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d100      	bne.n	801c49e <HAL_UART_IRQHandler+0x7a>
 801c49c:	e11a      	b.n	801c6d4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801c49e:	239c      	movs	r3, #156	@ 0x9c
 801c4a0:	18fb      	adds	r3, r7, r3
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	2201      	movs	r2, #1
 801c4a6:	4013      	ands	r3, r2
 801c4a8:	d106      	bne.n	801c4b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801c4aa:	23a0      	movs	r3, #160	@ 0xa0
 801c4ac:	18fb      	adds	r3, r7, r3
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	4a86      	ldr	r2, [pc, #536]	@ (801c6cc <HAL_UART_IRQHandler+0x2a8>)
 801c4b2:	4013      	ands	r3, r2
 801c4b4:	d100      	bne.n	801c4b8 <HAL_UART_IRQHandler+0x94>
 801c4b6:	e10d      	b.n	801c6d4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801c4b8:	23a4      	movs	r3, #164	@ 0xa4
 801c4ba:	18fb      	adds	r3, r7, r3
 801c4bc:	681b      	ldr	r3, [r3, #0]
 801c4be:	2201      	movs	r2, #1
 801c4c0:	4013      	ands	r3, r2
 801c4c2:	d012      	beq.n	801c4ea <HAL_UART_IRQHandler+0xc6>
 801c4c4:	23a0      	movs	r3, #160	@ 0xa0
 801c4c6:	18fb      	adds	r3, r7, r3
 801c4c8:	681a      	ldr	r2, [r3, #0]
 801c4ca:	2380      	movs	r3, #128	@ 0x80
 801c4cc:	005b      	lsls	r3, r3, #1
 801c4ce:	4013      	ands	r3, r2
 801c4d0:	d00b      	beq.n	801c4ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	2201      	movs	r2, #1
 801c4d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	2284      	movs	r2, #132	@ 0x84
 801c4de:	589b      	ldr	r3, [r3, r2]
 801c4e0:	2201      	movs	r2, #1
 801c4e2:	431a      	orrs	r2, r3
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	2184      	movs	r1, #132	@ 0x84
 801c4e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c4ea:	23a4      	movs	r3, #164	@ 0xa4
 801c4ec:	18fb      	adds	r3, r7, r3
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	2202      	movs	r2, #2
 801c4f2:	4013      	ands	r3, r2
 801c4f4:	d011      	beq.n	801c51a <HAL_UART_IRQHandler+0xf6>
 801c4f6:	239c      	movs	r3, #156	@ 0x9c
 801c4f8:	18fb      	adds	r3, r7, r3
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	2201      	movs	r2, #1
 801c4fe:	4013      	ands	r3, r2
 801c500:	d00b      	beq.n	801c51a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	2202      	movs	r2, #2
 801c508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	2284      	movs	r2, #132	@ 0x84
 801c50e:	589b      	ldr	r3, [r3, r2]
 801c510:	2204      	movs	r2, #4
 801c512:	431a      	orrs	r2, r3
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2184      	movs	r1, #132	@ 0x84
 801c518:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801c51a:	23a4      	movs	r3, #164	@ 0xa4
 801c51c:	18fb      	adds	r3, r7, r3
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	2204      	movs	r2, #4
 801c522:	4013      	ands	r3, r2
 801c524:	d011      	beq.n	801c54a <HAL_UART_IRQHandler+0x126>
 801c526:	239c      	movs	r3, #156	@ 0x9c
 801c528:	18fb      	adds	r3, r7, r3
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	2201      	movs	r2, #1
 801c52e:	4013      	ands	r3, r2
 801c530:	d00b      	beq.n	801c54a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	2204      	movs	r2, #4
 801c538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	2284      	movs	r2, #132	@ 0x84
 801c53e:	589b      	ldr	r3, [r3, r2]
 801c540:	2202      	movs	r2, #2
 801c542:	431a      	orrs	r2, r3
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	2184      	movs	r1, #132	@ 0x84
 801c548:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801c54a:	23a4      	movs	r3, #164	@ 0xa4
 801c54c:	18fb      	adds	r3, r7, r3
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	2208      	movs	r2, #8
 801c552:	4013      	ands	r3, r2
 801c554:	d017      	beq.n	801c586 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801c556:	23a0      	movs	r3, #160	@ 0xa0
 801c558:	18fb      	adds	r3, r7, r3
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	2220      	movs	r2, #32
 801c55e:	4013      	ands	r3, r2
 801c560:	d105      	bne.n	801c56e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801c562:	239c      	movs	r3, #156	@ 0x9c
 801c564:	18fb      	adds	r3, r7, r3
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	2201      	movs	r2, #1
 801c56a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801c56c:	d00b      	beq.n	801c586 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	2208      	movs	r2, #8
 801c574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	2284      	movs	r2, #132	@ 0x84
 801c57a:	589b      	ldr	r3, [r3, r2]
 801c57c:	2208      	movs	r2, #8
 801c57e:	431a      	orrs	r2, r3
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	2184      	movs	r1, #132	@ 0x84
 801c584:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801c586:	23a4      	movs	r3, #164	@ 0xa4
 801c588:	18fb      	adds	r3, r7, r3
 801c58a:	681a      	ldr	r2, [r3, #0]
 801c58c:	2380      	movs	r3, #128	@ 0x80
 801c58e:	011b      	lsls	r3, r3, #4
 801c590:	4013      	ands	r3, r2
 801c592:	d013      	beq.n	801c5bc <HAL_UART_IRQHandler+0x198>
 801c594:	23a0      	movs	r3, #160	@ 0xa0
 801c596:	18fb      	adds	r3, r7, r3
 801c598:	681a      	ldr	r2, [r3, #0]
 801c59a:	2380      	movs	r3, #128	@ 0x80
 801c59c:	04db      	lsls	r3, r3, #19
 801c59e:	4013      	ands	r3, r2
 801c5a0:	d00c      	beq.n	801c5bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	2280      	movs	r2, #128	@ 0x80
 801c5a8:	0112      	lsls	r2, r2, #4
 801c5aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	2284      	movs	r2, #132	@ 0x84
 801c5b0:	589b      	ldr	r3, [r3, r2]
 801c5b2:	2220      	movs	r2, #32
 801c5b4:	431a      	orrs	r2, r3
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	2184      	movs	r1, #132	@ 0x84
 801c5ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	2284      	movs	r2, #132	@ 0x84
 801c5c0:	589b      	ldr	r3, [r3, r2]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d100      	bne.n	801c5c8 <HAL_UART_IRQHandler+0x1a4>
 801c5c6:	e20b      	b.n	801c9e0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801c5c8:	23a4      	movs	r3, #164	@ 0xa4
 801c5ca:	18fb      	adds	r3, r7, r3
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	2220      	movs	r2, #32
 801c5d0:	4013      	ands	r3, r2
 801c5d2:	d00e      	beq.n	801c5f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801c5d4:	23a0      	movs	r3, #160	@ 0xa0
 801c5d6:	18fb      	adds	r3, r7, r3
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	2220      	movs	r2, #32
 801c5dc:	4013      	ands	r3, r2
 801c5de:	d008      	beq.n	801c5f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d004      	beq.n	801c5f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c5ec:	687a      	ldr	r2, [r7, #4]
 801c5ee:	0010      	movs	r0, r2
 801c5f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	2284      	movs	r2, #132	@ 0x84
 801c5f6:	589b      	ldr	r3, [r3, r2]
 801c5f8:	2194      	movs	r1, #148	@ 0x94
 801c5fa:	187a      	adds	r2, r7, r1
 801c5fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	689b      	ldr	r3, [r3, #8]
 801c604:	2240      	movs	r2, #64	@ 0x40
 801c606:	4013      	ands	r3, r2
 801c608:	2b40      	cmp	r3, #64	@ 0x40
 801c60a:	d004      	beq.n	801c616 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801c60c:	187b      	adds	r3, r7, r1
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	2228      	movs	r2, #40	@ 0x28
 801c612:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801c614:	d04b      	beq.n	801c6ae <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	0018      	movs	r0, r3
 801c61a:	f001 f861 	bl	801d6e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	689b      	ldr	r3, [r3, #8]
 801c624:	2240      	movs	r2, #64	@ 0x40
 801c626:	4013      	ands	r3, r2
 801c628:	2b40      	cmp	r3, #64	@ 0x40
 801c62a:	d139      	bne.n	801c6a0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c62c:	f3ef 8310 	mrs	r3, PRIMASK
 801c630:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801c632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c634:	2090      	movs	r0, #144	@ 0x90
 801c636:	183a      	adds	r2, r7, r0
 801c638:	6013      	str	r3, [r2, #0]
 801c63a:	2301      	movs	r3, #1
 801c63c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c63e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c640:	f383 8810 	msr	PRIMASK, r3
}
 801c644:	46c0      	nop			@ (mov r8, r8)
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	689a      	ldr	r2, [r3, #8]
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	2140      	movs	r1, #64	@ 0x40
 801c652:	438a      	bics	r2, r1
 801c654:	609a      	str	r2, [r3, #8]
 801c656:	183b      	adds	r3, r7, r0
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c65c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c65e:	f383 8810 	msr	PRIMASK, r3
}
 801c662:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d012      	beq.n	801c692 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c670:	4a17      	ldr	r2, [pc, #92]	@ (801c6d0 <HAL_UART_IRQHandler+0x2ac>)
 801c672:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c678:	0018      	movs	r0, r3
 801c67a:	f7f7 fe1b 	bl	80142b4 <HAL_DMA_Abort_IT>
 801c67e:	1e03      	subs	r3, r0, #0
 801c680:	d020      	beq.n	801c6c4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c68c:	0018      	movs	r0, r3
 801c68e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c690:	e018      	b.n	801c6c4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	2298      	movs	r2, #152	@ 0x98
 801c696:	589b      	ldr	r3, [r3, r2]
 801c698:	687a      	ldr	r2, [r7, #4]
 801c69a:	0010      	movs	r0, r2
 801c69c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c69e:	e011      	b.n	801c6c4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	2298      	movs	r2, #152	@ 0x98
 801c6a4:	589b      	ldr	r3, [r3, r2]
 801c6a6:	687a      	ldr	r2, [r7, #4]
 801c6a8:	0010      	movs	r0, r2
 801c6aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c6ac:	e00a      	b.n	801c6c4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	2298      	movs	r2, #152	@ 0x98
 801c6b2:	589b      	ldr	r3, [r3, r2]
 801c6b4:	687a      	ldr	r2, [r7, #4]
 801c6b6:	0010      	movs	r0, r2
 801c6b8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	2284      	movs	r2, #132	@ 0x84
 801c6be:	2100      	movs	r1, #0
 801c6c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801c6c2:	e18d      	b.n	801c9e0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c6c4:	46c0      	nop			@ (mov r8, r8)
    return;
 801c6c6:	e18b      	b.n	801c9e0 <HAL_UART_IRQHandler+0x5bc>
 801c6c8:	0000080f 	.word	0x0000080f
 801c6cc:	04000120 	.word	0x04000120
 801c6d0:	0801da6d 	.word	0x0801da6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c6d8:	2b01      	cmp	r3, #1
 801c6da:	d000      	beq.n	801c6de <HAL_UART_IRQHandler+0x2ba>
 801c6dc:	e13d      	b.n	801c95a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801c6de:	23a4      	movs	r3, #164	@ 0xa4
 801c6e0:	18fb      	adds	r3, r7, r3
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	2210      	movs	r2, #16
 801c6e6:	4013      	ands	r3, r2
 801c6e8:	d100      	bne.n	801c6ec <HAL_UART_IRQHandler+0x2c8>
 801c6ea:	e136      	b.n	801c95a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801c6ec:	23a0      	movs	r3, #160	@ 0xa0
 801c6ee:	18fb      	adds	r3, r7, r3
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	2210      	movs	r2, #16
 801c6f4:	4013      	ands	r3, r2
 801c6f6:	d100      	bne.n	801c6fa <HAL_UART_IRQHandler+0x2d6>
 801c6f8:	e12f      	b.n	801c95a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	2210      	movs	r2, #16
 801c700:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	689b      	ldr	r3, [r3, #8]
 801c708:	2240      	movs	r2, #64	@ 0x40
 801c70a:	4013      	ands	r3, r2
 801c70c:	2b40      	cmp	r3, #64	@ 0x40
 801c70e:	d000      	beq.n	801c712 <HAL_UART_IRQHandler+0x2ee>
 801c710:	e0a2      	b.n	801c858 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	685a      	ldr	r2, [r3, #4]
 801c71a:	217e      	movs	r1, #126	@ 0x7e
 801c71c:	187b      	adds	r3, r7, r1
 801c71e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801c720:	187b      	adds	r3, r7, r1
 801c722:	881b      	ldrh	r3, [r3, #0]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d100      	bne.n	801c72a <HAL_UART_IRQHandler+0x306>
 801c728:	e15c      	b.n	801c9e4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	2258      	movs	r2, #88	@ 0x58
 801c72e:	5a9b      	ldrh	r3, [r3, r2]
 801c730:	187a      	adds	r2, r7, r1
 801c732:	8812      	ldrh	r2, [r2, #0]
 801c734:	429a      	cmp	r2, r3
 801c736:	d300      	bcc.n	801c73a <HAL_UART_IRQHandler+0x316>
 801c738:	e154      	b.n	801c9e4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	187a      	adds	r2, r7, r1
 801c73e:	215a      	movs	r1, #90	@ 0x5a
 801c740:	8812      	ldrh	r2, [r2, #0]
 801c742:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	2220      	movs	r2, #32
 801c74e:	4013      	ands	r3, r2
 801c750:	d16f      	bne.n	801c832 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c752:	f3ef 8310 	mrs	r3, PRIMASK
 801c756:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c75a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801c75c:	2301      	movs	r3, #1
 801c75e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c762:	f383 8810 	msr	PRIMASK, r3
}
 801c766:	46c0      	nop			@ (mov r8, r8)
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	681a      	ldr	r2, [r3, #0]
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	49a0      	ldr	r1, [pc, #640]	@ (801c9f4 <HAL_UART_IRQHandler+0x5d0>)
 801c774:	400a      	ands	r2, r1
 801c776:	601a      	str	r2, [r3, #0]
 801c778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c77a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c77e:	f383 8810 	msr	PRIMASK, r3
}
 801c782:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c784:	f3ef 8310 	mrs	r3, PRIMASK
 801c788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801c78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c78c:	677b      	str	r3, [r7, #116]	@ 0x74
 801c78e:	2301      	movs	r3, #1
 801c790:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c794:	f383 8810 	msr	PRIMASK, r3
}
 801c798:	46c0      	nop			@ (mov r8, r8)
 801c79a:	687b      	ldr	r3, [r7, #4]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	689a      	ldr	r2, [r3, #8]
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	2101      	movs	r1, #1
 801c7a6:	438a      	bics	r2, r1
 801c7a8:	609a      	str	r2, [r3, #8]
 801c7aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c7ac:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c7b0:	f383 8810 	msr	PRIMASK, r3
}
 801c7b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7b6:	f3ef 8310 	mrs	r3, PRIMASK
 801c7ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801c7bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c7be:	673b      	str	r3, [r7, #112]	@ 0x70
 801c7c0:	2301      	movs	r3, #1
 801c7c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c7c6:	f383 8810 	msr	PRIMASK, r3
}
 801c7ca:	46c0      	nop			@ (mov r8, r8)
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	689a      	ldr	r2, [r3, #8]
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	2140      	movs	r1, #64	@ 0x40
 801c7d8:	438a      	bics	r2, r1
 801c7da:	609a      	str	r2, [r3, #8]
 801c7dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c7de:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c7e2:	f383 8810 	msr	PRIMASK, r3
}
 801c7e6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	2280      	movs	r2, #128	@ 0x80
 801c7ec:	2120      	movs	r1, #32
 801c7ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c7f0:	687b      	ldr	r3, [r7, #4]
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7f6:	f3ef 8310 	mrs	r3, PRIMASK
 801c7fa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801c7fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c7fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c800:	2301      	movs	r3, #1
 801c802:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c806:	f383 8810 	msr	PRIMASK, r3
}
 801c80a:	46c0      	nop			@ (mov r8, r8)
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	681a      	ldr	r2, [r3, #0]
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	2110      	movs	r1, #16
 801c818:	438a      	bics	r2, r1
 801c81a:	601a      	str	r2, [r3, #0]
 801c81c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801c81e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801c822:	f383 8810 	msr	PRIMASK, r3
}
 801c826:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c82c:	0018      	movs	r0, r3
 801c82e:	f7f7 fd01 	bl	8014234 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	2202      	movs	r2, #2
 801c836:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	22ac      	movs	r2, #172	@ 0xac
 801c83c:	589b      	ldr	r3, [r3, r2]
 801c83e:	687a      	ldr	r2, [r7, #4]
 801c840:	2158      	movs	r1, #88	@ 0x58
 801c842:	5a51      	ldrh	r1, [r2, r1]
 801c844:	687a      	ldr	r2, [r7, #4]
 801c846:	205a      	movs	r0, #90	@ 0x5a
 801c848:	5a12      	ldrh	r2, [r2, r0]
 801c84a:	b292      	uxth	r2, r2
 801c84c:	1a8a      	subs	r2, r1, r2
 801c84e:	b291      	uxth	r1, r2
 801c850:	687a      	ldr	r2, [r7, #4]
 801c852:	0010      	movs	r0, r2
 801c854:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c856:	e0c5      	b.n	801c9e4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	2258      	movs	r2, #88	@ 0x58
 801c85c:	5a99      	ldrh	r1, [r3, r2]
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	225a      	movs	r2, #90	@ 0x5a
 801c862:	5a9b      	ldrh	r3, [r3, r2]
 801c864:	b29a      	uxth	r2, r3
 801c866:	208e      	movs	r0, #142	@ 0x8e
 801c868:	183b      	adds	r3, r7, r0
 801c86a:	1a8a      	subs	r2, r1, r2
 801c86c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	225a      	movs	r2, #90	@ 0x5a
 801c872:	5a9b      	ldrh	r3, [r3, r2]
 801c874:	b29b      	uxth	r3, r3
 801c876:	2b00      	cmp	r3, #0
 801c878:	d100      	bne.n	801c87c <HAL_UART_IRQHandler+0x458>
 801c87a:	e0b5      	b.n	801c9e8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801c87c:	183b      	adds	r3, r7, r0
 801c87e:	881b      	ldrh	r3, [r3, #0]
 801c880:	2b00      	cmp	r3, #0
 801c882:	d100      	bne.n	801c886 <HAL_UART_IRQHandler+0x462>
 801c884:	e0b0      	b.n	801c9e8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c886:	f3ef 8310 	mrs	r3, PRIMASK
 801c88a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c88c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c88e:	2488      	movs	r4, #136	@ 0x88
 801c890:	193a      	adds	r2, r7, r4
 801c892:	6013      	str	r3, [r2, #0]
 801c894:	2301      	movs	r3, #1
 801c896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c898:	693b      	ldr	r3, [r7, #16]
 801c89a:	f383 8810 	msr	PRIMASK, r3
}
 801c89e:	46c0      	nop			@ (mov r8, r8)
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	681a      	ldr	r2, [r3, #0]
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	4953      	ldr	r1, [pc, #332]	@ (801c9f8 <HAL_UART_IRQHandler+0x5d4>)
 801c8ac:	400a      	ands	r2, r1
 801c8ae:	601a      	str	r2, [r3, #0]
 801c8b0:	193b      	adds	r3, r7, r4
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8b6:	697b      	ldr	r3, [r7, #20]
 801c8b8:	f383 8810 	msr	PRIMASK, r3
}
 801c8bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8be:	f3ef 8310 	mrs	r3, PRIMASK
 801c8c2:	61bb      	str	r3, [r7, #24]
  return(result);
 801c8c4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c8c6:	2484      	movs	r4, #132	@ 0x84
 801c8c8:	193a      	adds	r2, r7, r4
 801c8ca:	6013      	str	r3, [r2, #0]
 801c8cc:	2301      	movs	r3, #1
 801c8ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8d0:	69fb      	ldr	r3, [r7, #28]
 801c8d2:	f383 8810 	msr	PRIMASK, r3
}
 801c8d6:	46c0      	nop			@ (mov r8, r8)
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	681b      	ldr	r3, [r3, #0]
 801c8dc:	689a      	ldr	r2, [r3, #8]
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	2101      	movs	r1, #1
 801c8e4:	438a      	bics	r2, r1
 801c8e6:	609a      	str	r2, [r3, #8]
 801c8e8:	193b      	adds	r3, r7, r4
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8ee:	6a3b      	ldr	r3, [r7, #32]
 801c8f0:	f383 8810 	msr	PRIMASK, r3
}
 801c8f4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	2280      	movs	r2, #128	@ 0x80
 801c8fa:	2120      	movs	r1, #32
 801c8fc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	2200      	movs	r2, #0
 801c902:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	2200      	movs	r2, #0
 801c908:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c90a:	f3ef 8310 	mrs	r3, PRIMASK
 801c90e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c912:	2480      	movs	r4, #128	@ 0x80
 801c914:	193a      	adds	r2, r7, r4
 801c916:	6013      	str	r3, [r2, #0]
 801c918:	2301      	movs	r3, #1
 801c91a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c91e:	f383 8810 	msr	PRIMASK, r3
}
 801c922:	46c0      	nop			@ (mov r8, r8)
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	681a      	ldr	r2, [r3, #0]
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	2110      	movs	r1, #16
 801c930:	438a      	bics	r2, r1
 801c932:	601a      	str	r2, [r3, #0]
 801c934:	193b      	adds	r3, r7, r4
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c93c:	f383 8810 	msr	PRIMASK, r3
}
 801c940:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	2202      	movs	r2, #2
 801c946:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	22ac      	movs	r2, #172	@ 0xac
 801c94c:	589b      	ldr	r3, [r3, r2]
 801c94e:	183a      	adds	r2, r7, r0
 801c950:	8811      	ldrh	r1, [r2, #0]
 801c952:	687a      	ldr	r2, [r7, #4]
 801c954:	0010      	movs	r0, r2
 801c956:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801c958:	e046      	b.n	801c9e8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801c95a:	23a4      	movs	r3, #164	@ 0xa4
 801c95c:	18fb      	adds	r3, r7, r3
 801c95e:	681a      	ldr	r2, [r3, #0]
 801c960:	2380      	movs	r3, #128	@ 0x80
 801c962:	035b      	lsls	r3, r3, #13
 801c964:	4013      	ands	r3, r2
 801c966:	d012      	beq.n	801c98e <HAL_UART_IRQHandler+0x56a>
 801c968:	239c      	movs	r3, #156	@ 0x9c
 801c96a:	18fb      	adds	r3, r7, r3
 801c96c:	681a      	ldr	r2, [r3, #0]
 801c96e:	2380      	movs	r3, #128	@ 0x80
 801c970:	03db      	lsls	r3, r3, #15
 801c972:	4013      	ands	r3, r2
 801c974:	d00b      	beq.n	801c98e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	2280      	movs	r2, #128	@ 0x80
 801c97c:	0352      	lsls	r2, r2, #13
 801c97e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	22a8      	movs	r2, #168	@ 0xa8
 801c984:	589b      	ldr	r3, [r3, r2]
 801c986:	687a      	ldr	r2, [r7, #4]
 801c988:	0010      	movs	r0, r2
 801c98a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801c98c:	e02f      	b.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801c98e:	23a4      	movs	r3, #164	@ 0xa4
 801c990:	18fb      	adds	r3, r7, r3
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	2280      	movs	r2, #128	@ 0x80
 801c996:	4013      	ands	r3, r2
 801c998:	d00f      	beq.n	801c9ba <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801c99a:	23a0      	movs	r3, #160	@ 0xa0
 801c99c:	18fb      	adds	r3, r7, r3
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	2280      	movs	r2, #128	@ 0x80
 801c9a2:	4013      	ands	r3, r2
 801c9a4:	d009      	beq.n	801c9ba <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d01e      	beq.n	801c9ec <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c9b2:	687a      	ldr	r2, [r7, #4]
 801c9b4:	0010      	movs	r0, r2
 801c9b6:	4798      	blx	r3
    }
    return;
 801c9b8:	e018      	b.n	801c9ec <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801c9ba:	23a4      	movs	r3, #164	@ 0xa4
 801c9bc:	18fb      	adds	r3, r7, r3
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	2240      	movs	r2, #64	@ 0x40
 801c9c2:	4013      	ands	r3, r2
 801c9c4:	d013      	beq.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
 801c9c6:	23a0      	movs	r3, #160	@ 0xa0
 801c9c8:	18fb      	adds	r3, r7, r3
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	2240      	movs	r2, #64	@ 0x40
 801c9ce:	4013      	ands	r3, r2
 801c9d0:	d00d      	beq.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	0018      	movs	r0, r3
 801c9d6:	f001 f862 	bl	801da9e <UART_EndTransmit_IT>
    return;
 801c9da:	e008      	b.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
      return;
 801c9dc:	46c0      	nop			@ (mov r8, r8)
 801c9de:	e006      	b.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
    return;
 801c9e0:	46c0      	nop			@ (mov r8, r8)
 801c9e2:	e004      	b.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
      return;
 801c9e4:	46c0      	nop			@ (mov r8, r8)
 801c9e6:	e002      	b.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
      return;
 801c9e8:	46c0      	nop			@ (mov r8, r8)
 801c9ea:	e000      	b.n	801c9ee <HAL_UART_IRQHandler+0x5ca>
    return;
 801c9ec:	46c0      	nop			@ (mov r8, r8)
  }

}
 801c9ee:	46bd      	mov	sp, r7
 801c9f0:	b02b      	add	sp, #172	@ 0xac
 801c9f2:	bd90      	pop	{r4, r7, pc}
 801c9f4:	fffffeff 	.word	0xfffffeff
 801c9f8:	fffffedf 	.word	0xfffffedf

0801c9fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b082      	sub	sp, #8
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801ca04:	46c0      	nop			@ (mov r8, r8)
 801ca06:	46bd      	mov	sp, r7
 801ca08:	b002      	add	sp, #8
 801ca0a:	bd80      	pop	{r7, pc}

0801ca0c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801ca0c:	b580      	push	{r7, lr}
 801ca0e:	b082      	sub	sp, #8
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801ca14:	46c0      	nop			@ (mov r8, r8)
 801ca16:	46bd      	mov	sp, r7
 801ca18:	b002      	add	sp, #8
 801ca1a:	bd80      	pop	{r7, pc}

0801ca1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b082      	sub	sp, #8
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801ca24:	46c0      	nop			@ (mov r8, r8)
 801ca26:	46bd      	mov	sp, r7
 801ca28:	b002      	add	sp, #8
 801ca2a:	bd80      	pop	{r7, pc}

0801ca2c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b082      	sub	sp, #8
 801ca30:	af00      	add	r7, sp, #0
 801ca32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801ca34:	46c0      	nop			@ (mov r8, r8)
 801ca36:	46bd      	mov	sp, r7
 801ca38:	b002      	add	sp, #8
 801ca3a:	bd80      	pop	{r7, pc}

0801ca3c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	b082      	sub	sp, #8
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801ca44:	46c0      	nop			@ (mov r8, r8)
 801ca46:	46bd      	mov	sp, r7
 801ca48:	b002      	add	sp, #8
 801ca4a:	bd80      	pop	{r7, pc}

0801ca4c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801ca4c:	b580      	push	{r7, lr}
 801ca4e:	b082      	sub	sp, #8
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801ca54:	46c0      	nop			@ (mov r8, r8)
 801ca56:	46bd      	mov	sp, r7
 801ca58:	b002      	add	sp, #8
 801ca5a:	bd80      	pop	{r7, pc}

0801ca5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b082      	sub	sp, #8
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
 801ca64:	000a      	movs	r2, r1
 801ca66:	1cbb      	adds	r3, r7, #2
 801ca68:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801ca6a:	46c0      	nop			@ (mov r8, r8)
 801ca6c:	46bd      	mov	sp, r7
 801ca6e:	b002      	add	sp, #8
 801ca70:	bd80      	pop	{r7, pc}
	...

0801ca74 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b082      	sub	sp, #8
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	2188      	movs	r1, #136	@ 0x88
 801ca80:	4a14      	ldr	r2, [pc, #80]	@ (801cad4 <UART_InitCallbacksToDefault+0x60>)
 801ca82:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	218c      	movs	r1, #140	@ 0x8c
 801ca88:	4a13      	ldr	r2, [pc, #76]	@ (801cad8 <UART_InitCallbacksToDefault+0x64>)
 801ca8a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	2190      	movs	r1, #144	@ 0x90
 801ca90:	4a12      	ldr	r2, [pc, #72]	@ (801cadc <UART_InitCallbacksToDefault+0x68>)
 801ca92:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	2194      	movs	r1, #148	@ 0x94
 801ca98:	4a11      	ldr	r2, [pc, #68]	@ (801cae0 <UART_InitCallbacksToDefault+0x6c>)
 801ca9a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	2198      	movs	r1, #152	@ 0x98
 801caa0:	4a10      	ldr	r2, [pc, #64]	@ (801cae4 <UART_InitCallbacksToDefault+0x70>)
 801caa2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	219c      	movs	r1, #156	@ 0x9c
 801caa8:	4a0f      	ldr	r2, [pc, #60]	@ (801cae8 <UART_InitCallbacksToDefault+0x74>)
 801caaa:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	21a0      	movs	r1, #160	@ 0xa0
 801cab0:	4a0e      	ldr	r2, [pc, #56]	@ (801caec <UART_InitCallbacksToDefault+0x78>)
 801cab2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	21a4      	movs	r1, #164	@ 0xa4
 801cab8:	4a0d      	ldr	r2, [pc, #52]	@ (801caf0 <UART_InitCallbacksToDefault+0x7c>)
 801caba:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	21a8      	movs	r1, #168	@ 0xa8
 801cac0:	4a0c      	ldr	r2, [pc, #48]	@ (801caf4 <UART_InitCallbacksToDefault+0x80>)
 801cac2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	21ac      	movs	r1, #172	@ 0xac
 801cac8:	4a0b      	ldr	r2, [pc, #44]	@ (801caf8 <UART_InitCallbacksToDefault+0x84>)
 801caca:	505a      	str	r2, [r3, r1]

}
 801cacc:	46c0      	nop			@ (mov r8, r8)
 801cace:	46bd      	mov	sp, r7
 801cad0:	b002      	add	sp, #8
 801cad2:	bd80      	pop	{r7, pc}
 801cad4:	0801ca0d 	.word	0x0801ca0d
 801cad8:	0801c9fd 	.word	0x0801c9fd
 801cadc:	0801ca1d 	.word	0x0801ca1d
 801cae0:	0800c3b5 	.word	0x0800c3b5
 801cae4:	08004ce1 	.word	0x08004ce1
 801cae8:	0801ca2d 	.word	0x0801ca2d
 801caec:	0801ca3d 	.word	0x0801ca3d
 801caf0:	0801ca4d 	.word	0x0801ca4d
 801caf4:	0801de91 	.word	0x0801de91
 801caf8:	0801ca5d 	.word	0x0801ca5d

0801cafc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801cafc:	b5b0      	push	{r4, r5, r7, lr}
 801cafe:	b08e      	sub	sp, #56	@ 0x38
 801cb00:	af00      	add	r7, sp, #0
 801cb02:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801cb04:	231a      	movs	r3, #26
 801cb06:	2218      	movs	r2, #24
 801cb08:	189b      	adds	r3, r3, r2
 801cb0a:	19db      	adds	r3, r3, r7
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801cb10:	69fb      	ldr	r3, [r7, #28]
 801cb12:	689a      	ldr	r2, [r3, #8]
 801cb14:	69fb      	ldr	r3, [r7, #28]
 801cb16:	691b      	ldr	r3, [r3, #16]
 801cb18:	431a      	orrs	r2, r3
 801cb1a:	69fb      	ldr	r3, [r7, #28]
 801cb1c:	695b      	ldr	r3, [r3, #20]
 801cb1e:	431a      	orrs	r2, r3
 801cb20:	69fb      	ldr	r3, [r7, #28]
 801cb22:	69db      	ldr	r3, [r3, #28]
 801cb24:	4313      	orrs	r3, r2
 801cb26:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801cb28:	69fb      	ldr	r3, [r7, #28]
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	4ac3      	ldr	r2, [pc, #780]	@ (801ce3c <UART_SetConfig+0x340>)
 801cb30:	4013      	ands	r3, r2
 801cb32:	0019      	movs	r1, r3
 801cb34:	69fb      	ldr	r3, [r7, #28]
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cb3a:	430a      	orrs	r2, r1
 801cb3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801cb3e:	69fb      	ldr	r3, [r7, #28]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	685b      	ldr	r3, [r3, #4]
 801cb44:	4abe      	ldr	r2, [pc, #760]	@ (801ce40 <UART_SetConfig+0x344>)
 801cb46:	4013      	ands	r3, r2
 801cb48:	0019      	movs	r1, r3
 801cb4a:	69fb      	ldr	r3, [r7, #28]
 801cb4c:	68da      	ldr	r2, [r3, #12]
 801cb4e:	69fb      	ldr	r3, [r7, #28]
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	430a      	orrs	r2, r1
 801cb54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801cb56:	69fb      	ldr	r3, [r7, #28]
 801cb58:	699b      	ldr	r3, [r3, #24]
 801cb5a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801cb5c:	69fb      	ldr	r3, [r7, #28]
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	4ab8      	ldr	r2, [pc, #736]	@ (801ce44 <UART_SetConfig+0x348>)
 801cb62:	4293      	cmp	r3, r2
 801cb64:	d004      	beq.n	801cb70 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801cb66:	69fb      	ldr	r3, [r7, #28]
 801cb68:	6a1b      	ldr	r3, [r3, #32]
 801cb6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cb6c:	4313      	orrs	r3, r2
 801cb6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801cb70:	69fb      	ldr	r3, [r7, #28]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	689b      	ldr	r3, [r3, #8]
 801cb76:	4ab4      	ldr	r2, [pc, #720]	@ (801ce48 <UART_SetConfig+0x34c>)
 801cb78:	4013      	ands	r3, r2
 801cb7a:	0019      	movs	r1, r3
 801cb7c:	69fb      	ldr	r3, [r7, #28]
 801cb7e:	681b      	ldr	r3, [r3, #0]
 801cb80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801cb82:	430a      	orrs	r2, r1
 801cb84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801cb86:	69fb      	ldr	r3, [r7, #28]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	4ab0      	ldr	r2, [pc, #704]	@ (801ce4c <UART_SetConfig+0x350>)
 801cb8c:	4293      	cmp	r3, r2
 801cb8e:	d131      	bne.n	801cbf4 <UART_SetConfig+0xf8>
 801cb90:	4baf      	ldr	r3, [pc, #700]	@ (801ce50 <UART_SetConfig+0x354>)
 801cb92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cb94:	2203      	movs	r2, #3
 801cb96:	4013      	ands	r3, r2
 801cb98:	2b03      	cmp	r3, #3
 801cb9a:	d01d      	beq.n	801cbd8 <UART_SetConfig+0xdc>
 801cb9c:	d823      	bhi.n	801cbe6 <UART_SetConfig+0xea>
 801cb9e:	2b02      	cmp	r3, #2
 801cba0:	d00c      	beq.n	801cbbc <UART_SetConfig+0xc0>
 801cba2:	d820      	bhi.n	801cbe6 <UART_SetConfig+0xea>
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d002      	beq.n	801cbae <UART_SetConfig+0xb2>
 801cba8:	2b01      	cmp	r3, #1
 801cbaa:	d00e      	beq.n	801cbca <UART_SetConfig+0xce>
 801cbac:	e01b      	b.n	801cbe6 <UART_SetConfig+0xea>
 801cbae:	231b      	movs	r3, #27
 801cbb0:	2218      	movs	r2, #24
 801cbb2:	189b      	adds	r3, r3, r2
 801cbb4:	19db      	adds	r3, r3, r7
 801cbb6:	2201      	movs	r2, #1
 801cbb8:	701a      	strb	r2, [r3, #0]
 801cbba:	e0b4      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cbbc:	231b      	movs	r3, #27
 801cbbe:	2218      	movs	r2, #24
 801cbc0:	189b      	adds	r3, r3, r2
 801cbc2:	19db      	adds	r3, r3, r7
 801cbc4:	2202      	movs	r2, #2
 801cbc6:	701a      	strb	r2, [r3, #0]
 801cbc8:	e0ad      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cbca:	231b      	movs	r3, #27
 801cbcc:	2218      	movs	r2, #24
 801cbce:	189b      	adds	r3, r3, r2
 801cbd0:	19db      	adds	r3, r3, r7
 801cbd2:	2204      	movs	r2, #4
 801cbd4:	701a      	strb	r2, [r3, #0]
 801cbd6:	e0a6      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cbd8:	231b      	movs	r3, #27
 801cbda:	2218      	movs	r2, #24
 801cbdc:	189b      	adds	r3, r3, r2
 801cbde:	19db      	adds	r3, r3, r7
 801cbe0:	2208      	movs	r2, #8
 801cbe2:	701a      	strb	r2, [r3, #0]
 801cbe4:	e09f      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cbe6:	231b      	movs	r3, #27
 801cbe8:	2218      	movs	r2, #24
 801cbea:	189b      	adds	r3, r3, r2
 801cbec:	19db      	adds	r3, r3, r7
 801cbee:	2210      	movs	r2, #16
 801cbf0:	701a      	strb	r2, [r3, #0]
 801cbf2:	e098      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cbf4:	69fb      	ldr	r3, [r7, #28]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	4a96      	ldr	r2, [pc, #600]	@ (801ce54 <UART_SetConfig+0x358>)
 801cbfa:	4293      	cmp	r3, r2
 801cbfc:	d131      	bne.n	801cc62 <UART_SetConfig+0x166>
 801cbfe:	4b94      	ldr	r3, [pc, #592]	@ (801ce50 <UART_SetConfig+0x354>)
 801cc00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cc02:	220c      	movs	r2, #12
 801cc04:	4013      	ands	r3, r2
 801cc06:	2b0c      	cmp	r3, #12
 801cc08:	d01d      	beq.n	801cc46 <UART_SetConfig+0x14a>
 801cc0a:	d823      	bhi.n	801cc54 <UART_SetConfig+0x158>
 801cc0c:	2b08      	cmp	r3, #8
 801cc0e:	d00c      	beq.n	801cc2a <UART_SetConfig+0x12e>
 801cc10:	d820      	bhi.n	801cc54 <UART_SetConfig+0x158>
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d002      	beq.n	801cc1c <UART_SetConfig+0x120>
 801cc16:	2b04      	cmp	r3, #4
 801cc18:	d00e      	beq.n	801cc38 <UART_SetConfig+0x13c>
 801cc1a:	e01b      	b.n	801cc54 <UART_SetConfig+0x158>
 801cc1c:	231b      	movs	r3, #27
 801cc1e:	2218      	movs	r2, #24
 801cc20:	189b      	adds	r3, r3, r2
 801cc22:	19db      	adds	r3, r3, r7
 801cc24:	2200      	movs	r2, #0
 801cc26:	701a      	strb	r2, [r3, #0]
 801cc28:	e07d      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cc2a:	231b      	movs	r3, #27
 801cc2c:	2218      	movs	r2, #24
 801cc2e:	189b      	adds	r3, r3, r2
 801cc30:	19db      	adds	r3, r3, r7
 801cc32:	2202      	movs	r2, #2
 801cc34:	701a      	strb	r2, [r3, #0]
 801cc36:	e076      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cc38:	231b      	movs	r3, #27
 801cc3a:	2218      	movs	r2, #24
 801cc3c:	189b      	adds	r3, r3, r2
 801cc3e:	19db      	adds	r3, r3, r7
 801cc40:	2204      	movs	r2, #4
 801cc42:	701a      	strb	r2, [r3, #0]
 801cc44:	e06f      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cc46:	231b      	movs	r3, #27
 801cc48:	2218      	movs	r2, #24
 801cc4a:	189b      	adds	r3, r3, r2
 801cc4c:	19db      	adds	r3, r3, r7
 801cc4e:	2208      	movs	r2, #8
 801cc50:	701a      	strb	r2, [r3, #0]
 801cc52:	e068      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cc54:	231b      	movs	r3, #27
 801cc56:	2218      	movs	r2, #24
 801cc58:	189b      	adds	r3, r3, r2
 801cc5a:	19db      	adds	r3, r3, r7
 801cc5c:	2210      	movs	r2, #16
 801cc5e:	701a      	strb	r2, [r3, #0]
 801cc60:	e061      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cc62:	69fb      	ldr	r3, [r7, #28]
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	4a7c      	ldr	r2, [pc, #496]	@ (801ce58 <UART_SetConfig+0x35c>)
 801cc68:	4293      	cmp	r3, r2
 801cc6a:	d106      	bne.n	801cc7a <UART_SetConfig+0x17e>
 801cc6c:	231b      	movs	r3, #27
 801cc6e:	2218      	movs	r2, #24
 801cc70:	189b      	adds	r3, r3, r2
 801cc72:	19db      	adds	r3, r3, r7
 801cc74:	2200      	movs	r2, #0
 801cc76:	701a      	strb	r2, [r3, #0]
 801cc78:	e055      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cc7a:	69fb      	ldr	r3, [r7, #28]
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	4a77      	ldr	r2, [pc, #476]	@ (801ce5c <UART_SetConfig+0x360>)
 801cc80:	4293      	cmp	r3, r2
 801cc82:	d106      	bne.n	801cc92 <UART_SetConfig+0x196>
 801cc84:	231b      	movs	r3, #27
 801cc86:	2218      	movs	r2, #24
 801cc88:	189b      	adds	r3, r3, r2
 801cc8a:	19db      	adds	r3, r3, r7
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	701a      	strb	r2, [r3, #0]
 801cc90:	e049      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cc92:	69fb      	ldr	r3, [r7, #28]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	4a6b      	ldr	r2, [pc, #428]	@ (801ce44 <UART_SetConfig+0x348>)
 801cc98:	4293      	cmp	r3, r2
 801cc9a:	d13e      	bne.n	801cd1a <UART_SetConfig+0x21e>
 801cc9c:	4b6c      	ldr	r3, [pc, #432]	@ (801ce50 <UART_SetConfig+0x354>)
 801cc9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801cca0:	23c0      	movs	r3, #192	@ 0xc0
 801cca2:	011b      	lsls	r3, r3, #4
 801cca4:	4013      	ands	r3, r2
 801cca6:	22c0      	movs	r2, #192	@ 0xc0
 801cca8:	0112      	lsls	r2, r2, #4
 801ccaa:	4293      	cmp	r3, r2
 801ccac:	d027      	beq.n	801ccfe <UART_SetConfig+0x202>
 801ccae:	22c0      	movs	r2, #192	@ 0xc0
 801ccb0:	0112      	lsls	r2, r2, #4
 801ccb2:	4293      	cmp	r3, r2
 801ccb4:	d82a      	bhi.n	801cd0c <UART_SetConfig+0x210>
 801ccb6:	2280      	movs	r2, #128	@ 0x80
 801ccb8:	0112      	lsls	r2, r2, #4
 801ccba:	4293      	cmp	r3, r2
 801ccbc:	d011      	beq.n	801cce2 <UART_SetConfig+0x1e6>
 801ccbe:	2280      	movs	r2, #128	@ 0x80
 801ccc0:	0112      	lsls	r2, r2, #4
 801ccc2:	4293      	cmp	r3, r2
 801ccc4:	d822      	bhi.n	801cd0c <UART_SetConfig+0x210>
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d004      	beq.n	801ccd4 <UART_SetConfig+0x1d8>
 801ccca:	2280      	movs	r2, #128	@ 0x80
 801cccc:	00d2      	lsls	r2, r2, #3
 801ccce:	4293      	cmp	r3, r2
 801ccd0:	d00e      	beq.n	801ccf0 <UART_SetConfig+0x1f4>
 801ccd2:	e01b      	b.n	801cd0c <UART_SetConfig+0x210>
 801ccd4:	231b      	movs	r3, #27
 801ccd6:	2218      	movs	r2, #24
 801ccd8:	189b      	adds	r3, r3, r2
 801ccda:	19db      	adds	r3, r3, r7
 801ccdc:	2200      	movs	r2, #0
 801ccde:	701a      	strb	r2, [r3, #0]
 801cce0:	e021      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cce2:	231b      	movs	r3, #27
 801cce4:	2218      	movs	r2, #24
 801cce6:	189b      	adds	r3, r3, r2
 801cce8:	19db      	adds	r3, r3, r7
 801ccea:	2202      	movs	r2, #2
 801ccec:	701a      	strb	r2, [r3, #0]
 801ccee:	e01a      	b.n	801cd26 <UART_SetConfig+0x22a>
 801ccf0:	231b      	movs	r3, #27
 801ccf2:	2218      	movs	r2, #24
 801ccf4:	189b      	adds	r3, r3, r2
 801ccf6:	19db      	adds	r3, r3, r7
 801ccf8:	2204      	movs	r2, #4
 801ccfa:	701a      	strb	r2, [r3, #0]
 801ccfc:	e013      	b.n	801cd26 <UART_SetConfig+0x22a>
 801ccfe:	231b      	movs	r3, #27
 801cd00:	2218      	movs	r2, #24
 801cd02:	189b      	adds	r3, r3, r2
 801cd04:	19db      	adds	r3, r3, r7
 801cd06:	2208      	movs	r2, #8
 801cd08:	701a      	strb	r2, [r3, #0]
 801cd0a:	e00c      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cd0c:	231b      	movs	r3, #27
 801cd0e:	2218      	movs	r2, #24
 801cd10:	189b      	adds	r3, r3, r2
 801cd12:	19db      	adds	r3, r3, r7
 801cd14:	2210      	movs	r2, #16
 801cd16:	701a      	strb	r2, [r3, #0]
 801cd18:	e005      	b.n	801cd26 <UART_SetConfig+0x22a>
 801cd1a:	231b      	movs	r3, #27
 801cd1c:	2218      	movs	r2, #24
 801cd1e:	189b      	adds	r3, r3, r2
 801cd20:	19db      	adds	r3, r3, r7
 801cd22:	2210      	movs	r2, #16
 801cd24:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801cd26:	69fb      	ldr	r3, [r7, #28]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	4a46      	ldr	r2, [pc, #280]	@ (801ce44 <UART_SetConfig+0x348>)
 801cd2c:	4293      	cmp	r3, r2
 801cd2e:	d000      	beq.n	801cd32 <UART_SetConfig+0x236>
 801cd30:	e09a      	b.n	801ce68 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801cd32:	231b      	movs	r3, #27
 801cd34:	2218      	movs	r2, #24
 801cd36:	189b      	adds	r3, r3, r2
 801cd38:	19db      	adds	r3, r3, r7
 801cd3a:	781b      	ldrb	r3, [r3, #0]
 801cd3c:	2b08      	cmp	r3, #8
 801cd3e:	d01d      	beq.n	801cd7c <UART_SetConfig+0x280>
 801cd40:	dc20      	bgt.n	801cd84 <UART_SetConfig+0x288>
 801cd42:	2b04      	cmp	r3, #4
 801cd44:	d015      	beq.n	801cd72 <UART_SetConfig+0x276>
 801cd46:	dc1d      	bgt.n	801cd84 <UART_SetConfig+0x288>
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d002      	beq.n	801cd52 <UART_SetConfig+0x256>
 801cd4c:	2b02      	cmp	r3, #2
 801cd4e:	d005      	beq.n	801cd5c <UART_SetConfig+0x260>
 801cd50:	e018      	b.n	801cd84 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801cd52:	f7fd fe4b 	bl	801a9ec <HAL_RCC_GetPCLK1Freq>
 801cd56:	0003      	movs	r3, r0
 801cd58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd5a:	e01c      	b.n	801cd96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cd5c:	4b3c      	ldr	r3, [pc, #240]	@ (801ce50 <UART_SetConfig+0x354>)
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	2210      	movs	r2, #16
 801cd62:	4013      	ands	r3, r2
 801cd64:	d002      	beq.n	801cd6c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801cd66:	4b3e      	ldr	r3, [pc, #248]	@ (801ce60 <UART_SetConfig+0x364>)
 801cd68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801cd6a:	e014      	b.n	801cd96 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801cd6c:	4b3d      	ldr	r3, [pc, #244]	@ (801ce64 <UART_SetConfig+0x368>)
 801cd6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd70:	e011      	b.n	801cd96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801cd72:	f7fd fd8b 	bl	801a88c <HAL_RCC_GetSysClockFreq>
 801cd76:	0003      	movs	r3, r0
 801cd78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd7a:	e00c      	b.n	801cd96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cd7c:	2380      	movs	r3, #128	@ 0x80
 801cd7e:	021b      	lsls	r3, r3, #8
 801cd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cd82:	e008      	b.n	801cd96 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801cd84:	2300      	movs	r3, #0
 801cd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801cd88:	231a      	movs	r3, #26
 801cd8a:	2218      	movs	r2, #24
 801cd8c:	189b      	adds	r3, r3, r2
 801cd8e:	19db      	adds	r3, r3, r7
 801cd90:	2201      	movs	r2, #1
 801cd92:	701a      	strb	r2, [r3, #0]
        break;
 801cd94:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801cd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d100      	bne.n	801cd9e <UART_SetConfig+0x2a2>
 801cd9c:	e133      	b.n	801d006 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801cd9e:	69fb      	ldr	r3, [r7, #28]
 801cda0:	685a      	ldr	r2, [r3, #4]
 801cda2:	0013      	movs	r3, r2
 801cda4:	005b      	lsls	r3, r3, #1
 801cda6:	189b      	adds	r3, r3, r2
 801cda8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cdaa:	429a      	cmp	r2, r3
 801cdac:	d305      	bcc.n	801cdba <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801cdae:	69fb      	ldr	r3, [r7, #28]
 801cdb0:	685b      	ldr	r3, [r3, #4]
 801cdb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801cdb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cdb6:	429a      	cmp	r2, r3
 801cdb8:	d906      	bls.n	801cdc8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801cdba:	231a      	movs	r3, #26
 801cdbc:	2218      	movs	r2, #24
 801cdbe:	189b      	adds	r3, r3, r2
 801cdc0:	19db      	adds	r3, r3, r7
 801cdc2:	2201      	movs	r2, #1
 801cdc4:	701a      	strb	r2, [r3, #0]
 801cdc6:	e11e      	b.n	801d006 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801cdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cdca:	613b      	str	r3, [r7, #16]
 801cdcc:	2300      	movs	r3, #0
 801cdce:	617b      	str	r3, [r7, #20]
 801cdd0:	6939      	ldr	r1, [r7, #16]
 801cdd2:	697a      	ldr	r2, [r7, #20]
 801cdd4:	000b      	movs	r3, r1
 801cdd6:	0e1b      	lsrs	r3, r3, #24
 801cdd8:	0010      	movs	r0, r2
 801cdda:	0205      	lsls	r5, r0, #8
 801cddc:	431d      	orrs	r5, r3
 801cdde:	000b      	movs	r3, r1
 801cde0:	021c      	lsls	r4, r3, #8
 801cde2:	69fb      	ldr	r3, [r7, #28]
 801cde4:	685b      	ldr	r3, [r3, #4]
 801cde6:	085b      	lsrs	r3, r3, #1
 801cde8:	60bb      	str	r3, [r7, #8]
 801cdea:	2300      	movs	r3, #0
 801cdec:	60fb      	str	r3, [r7, #12]
 801cdee:	68b8      	ldr	r0, [r7, #8]
 801cdf0:	68f9      	ldr	r1, [r7, #12]
 801cdf2:	1900      	adds	r0, r0, r4
 801cdf4:	4169      	adcs	r1, r5
 801cdf6:	69fb      	ldr	r3, [r7, #28]
 801cdf8:	685b      	ldr	r3, [r3, #4]
 801cdfa:	603b      	str	r3, [r7, #0]
 801cdfc:	2300      	movs	r3, #0
 801cdfe:	607b      	str	r3, [r7, #4]
 801ce00:	683a      	ldr	r2, [r7, #0]
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	f7e3 fbbc 	bl	8000580 <__aeabi_uldivmod>
 801ce08:	0002      	movs	r2, r0
 801ce0a:	000b      	movs	r3, r1
 801ce0c:	0013      	movs	r3, r2
 801ce0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ce10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ce12:	23c0      	movs	r3, #192	@ 0xc0
 801ce14:	009b      	lsls	r3, r3, #2
 801ce16:	429a      	cmp	r2, r3
 801ce18:	d309      	bcc.n	801ce2e <UART_SetConfig+0x332>
 801ce1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ce1c:	2380      	movs	r3, #128	@ 0x80
 801ce1e:	035b      	lsls	r3, r3, #13
 801ce20:	429a      	cmp	r2, r3
 801ce22:	d204      	bcs.n	801ce2e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801ce24:	69fb      	ldr	r3, [r7, #28]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ce2a:	60da      	str	r2, [r3, #12]
 801ce2c:	e0eb      	b.n	801d006 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801ce2e:	231a      	movs	r3, #26
 801ce30:	2218      	movs	r2, #24
 801ce32:	189b      	adds	r3, r3, r2
 801ce34:	19db      	adds	r3, r3, r7
 801ce36:	2201      	movs	r2, #1
 801ce38:	701a      	strb	r2, [r3, #0]
 801ce3a:	e0e4      	b.n	801d006 <UART_SetConfig+0x50a>
 801ce3c:	efff69f3 	.word	0xefff69f3
 801ce40:	ffffcfff 	.word	0xffffcfff
 801ce44:	40004800 	.word	0x40004800
 801ce48:	fffff4ff 	.word	0xfffff4ff
 801ce4c:	40013800 	.word	0x40013800
 801ce50:	40021000 	.word	0x40021000
 801ce54:	40004400 	.word	0x40004400
 801ce58:	40004c00 	.word	0x40004c00
 801ce5c:	40005000 	.word	0x40005000
 801ce60:	003d0900 	.word	0x003d0900
 801ce64:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ce68:	69fb      	ldr	r3, [r7, #28]
 801ce6a:	69da      	ldr	r2, [r3, #28]
 801ce6c:	2380      	movs	r3, #128	@ 0x80
 801ce6e:	021b      	lsls	r3, r3, #8
 801ce70:	429a      	cmp	r2, r3
 801ce72:	d000      	beq.n	801ce76 <UART_SetConfig+0x37a>
 801ce74:	e070      	b.n	801cf58 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801ce76:	231b      	movs	r3, #27
 801ce78:	2218      	movs	r2, #24
 801ce7a:	189b      	adds	r3, r3, r2
 801ce7c:	19db      	adds	r3, r3, r7
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	2b08      	cmp	r3, #8
 801ce82:	d822      	bhi.n	801ceca <UART_SetConfig+0x3ce>
 801ce84:	009a      	lsls	r2, r3, #2
 801ce86:	4b67      	ldr	r3, [pc, #412]	@ (801d024 <UART_SetConfig+0x528>)
 801ce88:	18d3      	adds	r3, r2, r3
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ce8e:	f7fd fdad 	bl	801a9ec <HAL_RCC_GetPCLK1Freq>
 801ce92:	0003      	movs	r3, r0
 801ce94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ce96:	e021      	b.n	801cedc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ce98:	f7fd fdbe 	bl	801aa18 <HAL_RCC_GetPCLK2Freq>
 801ce9c:	0003      	movs	r3, r0
 801ce9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cea0:	e01c      	b.n	801cedc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cea2:	4b61      	ldr	r3, [pc, #388]	@ (801d028 <UART_SetConfig+0x52c>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	2210      	movs	r2, #16
 801cea8:	4013      	ands	r3, r2
 801ceaa:	d002      	beq.n	801ceb2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801ceac:	4b5f      	ldr	r3, [pc, #380]	@ (801d02c <UART_SetConfig+0x530>)
 801ceae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801ceb0:	e014      	b.n	801cedc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801ceb2:	4b5f      	ldr	r3, [pc, #380]	@ (801d030 <UART_SetConfig+0x534>)
 801ceb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ceb6:	e011      	b.n	801cedc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ceb8:	f7fd fce8 	bl	801a88c <HAL_RCC_GetSysClockFreq>
 801cebc:	0003      	movs	r3, r0
 801cebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cec0:	e00c      	b.n	801cedc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cec2:	2380      	movs	r3, #128	@ 0x80
 801cec4:	021b      	lsls	r3, r3, #8
 801cec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cec8:	e008      	b.n	801cedc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801ceca:	2300      	movs	r3, #0
 801cecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801cece:	231a      	movs	r3, #26
 801ced0:	2218      	movs	r2, #24
 801ced2:	189b      	adds	r3, r3, r2
 801ced4:	19db      	adds	r3, r3, r7
 801ced6:	2201      	movs	r2, #1
 801ced8:	701a      	strb	r2, [r3, #0]
        break;
 801ceda:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801cedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d100      	bne.n	801cee4 <UART_SetConfig+0x3e8>
 801cee2:	e090      	b.n	801d006 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801cee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cee6:	005a      	lsls	r2, r3, #1
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	685b      	ldr	r3, [r3, #4]
 801ceec:	085b      	lsrs	r3, r3, #1
 801ceee:	18d2      	adds	r2, r2, r3
 801cef0:	69fb      	ldr	r3, [r7, #28]
 801cef2:	685b      	ldr	r3, [r3, #4]
 801cef4:	0019      	movs	r1, r3
 801cef6:	0010      	movs	r0, r2
 801cef8:	f7e3 f954 	bl	80001a4 <__udivsi3>
 801cefc:	0003      	movs	r3, r0
 801cefe:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf02:	2b0f      	cmp	r3, #15
 801cf04:	d921      	bls.n	801cf4a <UART_SetConfig+0x44e>
 801cf06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cf08:	2380      	movs	r3, #128	@ 0x80
 801cf0a:	025b      	lsls	r3, r3, #9
 801cf0c:	429a      	cmp	r2, r3
 801cf0e:	d21c      	bcs.n	801cf4a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801cf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf12:	b29a      	uxth	r2, r3
 801cf14:	200e      	movs	r0, #14
 801cf16:	2418      	movs	r4, #24
 801cf18:	1903      	adds	r3, r0, r4
 801cf1a:	19db      	adds	r3, r3, r7
 801cf1c:	210f      	movs	r1, #15
 801cf1e:	438a      	bics	r2, r1
 801cf20:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801cf22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf24:	085b      	lsrs	r3, r3, #1
 801cf26:	b29b      	uxth	r3, r3
 801cf28:	2207      	movs	r2, #7
 801cf2a:	4013      	ands	r3, r2
 801cf2c:	b299      	uxth	r1, r3
 801cf2e:	1903      	adds	r3, r0, r4
 801cf30:	19db      	adds	r3, r3, r7
 801cf32:	1902      	adds	r2, r0, r4
 801cf34:	19d2      	adds	r2, r2, r7
 801cf36:	8812      	ldrh	r2, [r2, #0]
 801cf38:	430a      	orrs	r2, r1
 801cf3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801cf3c:	69fb      	ldr	r3, [r7, #28]
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	1902      	adds	r2, r0, r4
 801cf42:	19d2      	adds	r2, r2, r7
 801cf44:	8812      	ldrh	r2, [r2, #0]
 801cf46:	60da      	str	r2, [r3, #12]
 801cf48:	e05d      	b.n	801d006 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801cf4a:	231a      	movs	r3, #26
 801cf4c:	2218      	movs	r2, #24
 801cf4e:	189b      	adds	r3, r3, r2
 801cf50:	19db      	adds	r3, r3, r7
 801cf52:	2201      	movs	r2, #1
 801cf54:	701a      	strb	r2, [r3, #0]
 801cf56:	e056      	b.n	801d006 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801cf58:	231b      	movs	r3, #27
 801cf5a:	2218      	movs	r2, #24
 801cf5c:	189b      	adds	r3, r3, r2
 801cf5e:	19db      	adds	r3, r3, r7
 801cf60:	781b      	ldrb	r3, [r3, #0]
 801cf62:	2b08      	cmp	r3, #8
 801cf64:	d822      	bhi.n	801cfac <UART_SetConfig+0x4b0>
 801cf66:	009a      	lsls	r2, r3, #2
 801cf68:	4b32      	ldr	r3, [pc, #200]	@ (801d034 <UART_SetConfig+0x538>)
 801cf6a:	18d3      	adds	r3, r2, r3
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801cf70:	f7fd fd3c 	bl	801a9ec <HAL_RCC_GetPCLK1Freq>
 801cf74:	0003      	movs	r3, r0
 801cf76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cf78:	e021      	b.n	801cfbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801cf7a:	f7fd fd4d 	bl	801aa18 <HAL_RCC_GetPCLK2Freq>
 801cf7e:	0003      	movs	r3, r0
 801cf80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cf82:	e01c      	b.n	801cfbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cf84:	4b28      	ldr	r3, [pc, #160]	@ (801d028 <UART_SetConfig+0x52c>)
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	2210      	movs	r2, #16
 801cf8a:	4013      	ands	r3, r2
 801cf8c:	d002      	beq.n	801cf94 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801cf8e:	4b27      	ldr	r3, [pc, #156]	@ (801d02c <UART_SetConfig+0x530>)
 801cf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801cf92:	e014      	b.n	801cfbe <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801cf94:	4b26      	ldr	r3, [pc, #152]	@ (801d030 <UART_SetConfig+0x534>)
 801cf96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cf98:	e011      	b.n	801cfbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801cf9a:	f7fd fc77 	bl	801a88c <HAL_RCC_GetSysClockFreq>
 801cf9e:	0003      	movs	r3, r0
 801cfa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cfa2:	e00c      	b.n	801cfbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801cfa4:	2380      	movs	r3, #128	@ 0x80
 801cfa6:	021b      	lsls	r3, r3, #8
 801cfa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801cfaa:	e008      	b.n	801cfbe <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801cfac:	2300      	movs	r3, #0
 801cfae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801cfb0:	231a      	movs	r3, #26
 801cfb2:	2218      	movs	r2, #24
 801cfb4:	189b      	adds	r3, r3, r2
 801cfb6:	19db      	adds	r3, r3, r7
 801cfb8:	2201      	movs	r2, #1
 801cfba:	701a      	strb	r2, [r3, #0]
        break;
 801cfbc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801cfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d020      	beq.n	801d006 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801cfc4:	69fb      	ldr	r3, [r7, #28]
 801cfc6:	685b      	ldr	r3, [r3, #4]
 801cfc8:	085a      	lsrs	r2, r3, #1
 801cfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfcc:	18d2      	adds	r2, r2, r3
 801cfce:	69fb      	ldr	r3, [r7, #28]
 801cfd0:	685b      	ldr	r3, [r3, #4]
 801cfd2:	0019      	movs	r1, r3
 801cfd4:	0010      	movs	r0, r2
 801cfd6:	f7e3 f8e5 	bl	80001a4 <__udivsi3>
 801cfda:	0003      	movs	r3, r0
 801cfdc:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801cfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfe0:	2b0f      	cmp	r3, #15
 801cfe2:	d90a      	bls.n	801cffa <UART_SetConfig+0x4fe>
 801cfe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cfe6:	2380      	movs	r3, #128	@ 0x80
 801cfe8:	025b      	lsls	r3, r3, #9
 801cfea:	429a      	cmp	r2, r3
 801cfec:	d205      	bcs.n	801cffa <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cff0:	b29a      	uxth	r2, r3
 801cff2:	69fb      	ldr	r3, [r7, #28]
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	60da      	str	r2, [r3, #12]
 801cff8:	e005      	b.n	801d006 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801cffa:	231a      	movs	r3, #26
 801cffc:	2218      	movs	r2, #24
 801cffe:	189b      	adds	r3, r3, r2
 801d000:	19db      	adds	r3, r3, r7
 801d002:	2201      	movs	r2, #1
 801d004:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d006:	69fb      	ldr	r3, [r7, #28]
 801d008:	2200      	movs	r2, #0
 801d00a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801d00c:	69fb      	ldr	r3, [r7, #28]
 801d00e:	2200      	movs	r2, #0
 801d010:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801d012:	231a      	movs	r3, #26
 801d014:	2218      	movs	r2, #24
 801d016:	189b      	adds	r3, r3, r2
 801d018:	19db      	adds	r3, r3, r7
 801d01a:	781b      	ldrb	r3, [r3, #0]
}
 801d01c:	0018      	movs	r0, r3
 801d01e:	46bd      	mov	sp, r7
 801d020:	b00e      	add	sp, #56	@ 0x38
 801d022:	bdb0      	pop	{r4, r5, r7, pc}
 801d024:	0802d5cc 	.word	0x0802d5cc
 801d028:	40021000 	.word	0x40021000
 801d02c:	003d0900 	.word	0x003d0900
 801d030:	00f42400 	.word	0x00f42400
 801d034:	0802d5f0 	.word	0x0802d5f0

0801d038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801d038:	b580      	push	{r7, lr}
 801d03a:	b082      	sub	sp, #8
 801d03c:	af00      	add	r7, sp, #0
 801d03e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d044:	2201      	movs	r2, #1
 801d046:	4013      	ands	r3, r2
 801d048:	d00b      	beq.n	801d062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	685b      	ldr	r3, [r3, #4]
 801d050:	4a4a      	ldr	r2, [pc, #296]	@ (801d17c <UART_AdvFeatureConfig+0x144>)
 801d052:	4013      	ands	r3, r2
 801d054:	0019      	movs	r1, r3
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	430a      	orrs	r2, r1
 801d060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d066:	2202      	movs	r2, #2
 801d068:	4013      	ands	r3, r2
 801d06a:	d00b      	beq.n	801d084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	685b      	ldr	r3, [r3, #4]
 801d072:	4a43      	ldr	r2, [pc, #268]	@ (801d180 <UART_AdvFeatureConfig+0x148>)
 801d074:	4013      	ands	r3, r2
 801d076:	0019      	movs	r1, r3
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	430a      	orrs	r2, r1
 801d082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d088:	2204      	movs	r2, #4
 801d08a:	4013      	ands	r3, r2
 801d08c:	d00b      	beq.n	801d0a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	685b      	ldr	r3, [r3, #4]
 801d094:	4a3b      	ldr	r2, [pc, #236]	@ (801d184 <UART_AdvFeatureConfig+0x14c>)
 801d096:	4013      	ands	r3, r2
 801d098:	0019      	movs	r1, r3
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	430a      	orrs	r2, r1
 801d0a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0aa:	2208      	movs	r2, #8
 801d0ac:	4013      	ands	r3, r2
 801d0ae:	d00b      	beq.n	801d0c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	685b      	ldr	r3, [r3, #4]
 801d0b6:	4a34      	ldr	r2, [pc, #208]	@ (801d188 <UART_AdvFeatureConfig+0x150>)
 801d0b8:	4013      	ands	r3, r2
 801d0ba:	0019      	movs	r1, r3
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	430a      	orrs	r2, r1
 801d0c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0cc:	2210      	movs	r2, #16
 801d0ce:	4013      	ands	r3, r2
 801d0d0:	d00b      	beq.n	801d0ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	689b      	ldr	r3, [r3, #8]
 801d0d8:	4a2c      	ldr	r2, [pc, #176]	@ (801d18c <UART_AdvFeatureConfig+0x154>)
 801d0da:	4013      	ands	r3, r2
 801d0dc:	0019      	movs	r1, r3
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	430a      	orrs	r2, r1
 801d0e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0ee:	2220      	movs	r2, #32
 801d0f0:	4013      	ands	r3, r2
 801d0f2:	d00b      	beq.n	801d10c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	681b      	ldr	r3, [r3, #0]
 801d0f8:	689b      	ldr	r3, [r3, #8]
 801d0fa:	4a25      	ldr	r2, [pc, #148]	@ (801d190 <UART_AdvFeatureConfig+0x158>)
 801d0fc:	4013      	ands	r3, r2
 801d0fe:	0019      	movs	r1, r3
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	430a      	orrs	r2, r1
 801d10a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d110:	2240      	movs	r2, #64	@ 0x40
 801d112:	4013      	ands	r3, r2
 801d114:	d01d      	beq.n	801d152 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	685b      	ldr	r3, [r3, #4]
 801d11c:	4a1d      	ldr	r2, [pc, #116]	@ (801d194 <UART_AdvFeatureConfig+0x15c>)
 801d11e:	4013      	ands	r3, r2
 801d120:	0019      	movs	r1, r3
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	681b      	ldr	r3, [r3, #0]
 801d12a:	430a      	orrs	r2, r1
 801d12c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d132:	2380      	movs	r3, #128	@ 0x80
 801d134:	035b      	lsls	r3, r3, #13
 801d136:	429a      	cmp	r2, r3
 801d138:	d10b      	bne.n	801d152 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	685b      	ldr	r3, [r3, #4]
 801d140:	4a15      	ldr	r2, [pc, #84]	@ (801d198 <UART_AdvFeatureConfig+0x160>)
 801d142:	4013      	ands	r3, r2
 801d144:	0019      	movs	r1, r3
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	681b      	ldr	r3, [r3, #0]
 801d14e:	430a      	orrs	r2, r1
 801d150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d156:	2280      	movs	r2, #128	@ 0x80
 801d158:	4013      	ands	r3, r2
 801d15a:	d00b      	beq.n	801d174 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	685b      	ldr	r3, [r3, #4]
 801d162:	4a0e      	ldr	r2, [pc, #56]	@ (801d19c <UART_AdvFeatureConfig+0x164>)
 801d164:	4013      	ands	r3, r2
 801d166:	0019      	movs	r1, r3
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	430a      	orrs	r2, r1
 801d172:	605a      	str	r2, [r3, #4]
  }
}
 801d174:	46c0      	nop			@ (mov r8, r8)
 801d176:	46bd      	mov	sp, r7
 801d178:	b002      	add	sp, #8
 801d17a:	bd80      	pop	{r7, pc}
 801d17c:	fffdffff 	.word	0xfffdffff
 801d180:	fffeffff 	.word	0xfffeffff
 801d184:	fffbffff 	.word	0xfffbffff
 801d188:	ffff7fff 	.word	0xffff7fff
 801d18c:	ffffefff 	.word	0xffffefff
 801d190:	ffffdfff 	.word	0xffffdfff
 801d194:	ffefffff 	.word	0xffefffff
 801d198:	ff9fffff 	.word	0xff9fffff
 801d19c:	fff7ffff 	.word	0xfff7ffff

0801d1a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d1a0:	b580      	push	{r7, lr}
 801d1a2:	b092      	sub	sp, #72	@ 0x48
 801d1a4:	af02      	add	r7, sp, #8
 801d1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	2284      	movs	r2, #132	@ 0x84
 801d1ac:	2100      	movs	r1, #0
 801d1ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d1b0:	f7f6 fa88 	bl	80136c4 <HAL_GetTick>
 801d1b4:	0003      	movs	r3, r0
 801d1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	2208      	movs	r2, #8
 801d1c0:	4013      	ands	r3, r2
 801d1c2:	2b08      	cmp	r3, #8
 801d1c4:	d12c      	bne.n	801d220 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d1c8:	2280      	movs	r2, #128	@ 0x80
 801d1ca:	0391      	lsls	r1, r2, #14
 801d1cc:	6878      	ldr	r0, [r7, #4]
 801d1ce:	4a46      	ldr	r2, [pc, #280]	@ (801d2e8 <UART_CheckIdleState+0x148>)
 801d1d0:	9200      	str	r2, [sp, #0]
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	f000 f88c 	bl	801d2f0 <UART_WaitOnFlagUntilTimeout>
 801d1d8:	1e03      	subs	r3, r0, #0
 801d1da:	d021      	beq.n	801d220 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d1dc:	f3ef 8310 	mrs	r3, PRIMASK
 801d1e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801d1e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d1e6:	2301      	movs	r3, #1
 801d1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1ec:	f383 8810 	msr	PRIMASK, r3
}
 801d1f0:	46c0      	nop			@ (mov r8, r8)
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	681a      	ldr	r2, [r3, #0]
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	2180      	movs	r1, #128	@ 0x80
 801d1fe:	438a      	bics	r2, r1
 801d200:	601a      	str	r2, [r3, #0]
 801d202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d208:	f383 8810 	msr	PRIMASK, r3
}
 801d20c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	2220      	movs	r2, #32
 801d212:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	2278      	movs	r2, #120	@ 0x78
 801d218:	2100      	movs	r1, #0
 801d21a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d21c:	2303      	movs	r3, #3
 801d21e:	e05f      	b.n	801d2e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	2204      	movs	r2, #4
 801d228:	4013      	ands	r3, r2
 801d22a:	2b04      	cmp	r3, #4
 801d22c:	d146      	bne.n	801d2bc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d230:	2280      	movs	r2, #128	@ 0x80
 801d232:	03d1      	lsls	r1, r2, #15
 801d234:	6878      	ldr	r0, [r7, #4]
 801d236:	4a2c      	ldr	r2, [pc, #176]	@ (801d2e8 <UART_CheckIdleState+0x148>)
 801d238:	9200      	str	r2, [sp, #0]
 801d23a:	2200      	movs	r2, #0
 801d23c:	f000 f858 	bl	801d2f0 <UART_WaitOnFlagUntilTimeout>
 801d240:	1e03      	subs	r3, r0, #0
 801d242:	d03b      	beq.n	801d2bc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d244:	f3ef 8310 	mrs	r3, PRIMASK
 801d248:	60fb      	str	r3, [r7, #12]
  return(result);
 801d24a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d24c:	637b      	str	r3, [r7, #52]	@ 0x34
 801d24e:	2301      	movs	r3, #1
 801d250:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d252:	693b      	ldr	r3, [r7, #16]
 801d254:	f383 8810 	msr	PRIMASK, r3
}
 801d258:	46c0      	nop			@ (mov r8, r8)
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	681a      	ldr	r2, [r3, #0]
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	4921      	ldr	r1, [pc, #132]	@ (801d2ec <UART_CheckIdleState+0x14c>)
 801d266:	400a      	ands	r2, r1
 801d268:	601a      	str	r2, [r3, #0]
 801d26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d26c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d26e:	697b      	ldr	r3, [r7, #20]
 801d270:	f383 8810 	msr	PRIMASK, r3
}
 801d274:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d276:	f3ef 8310 	mrs	r3, PRIMASK
 801d27a:	61bb      	str	r3, [r7, #24]
  return(result);
 801d27c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d27e:	633b      	str	r3, [r7, #48]	@ 0x30
 801d280:	2301      	movs	r3, #1
 801d282:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d284:	69fb      	ldr	r3, [r7, #28]
 801d286:	f383 8810 	msr	PRIMASK, r3
}
 801d28a:	46c0      	nop			@ (mov r8, r8)
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	689a      	ldr	r2, [r3, #8]
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	2101      	movs	r1, #1
 801d298:	438a      	bics	r2, r1
 801d29a:	609a      	str	r2, [r3, #8]
 801d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d29e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d2a0:	6a3b      	ldr	r3, [r7, #32]
 801d2a2:	f383 8810 	msr	PRIMASK, r3
}
 801d2a6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	2280      	movs	r2, #128	@ 0x80
 801d2ac:	2120      	movs	r1, #32
 801d2ae:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	2278      	movs	r2, #120	@ 0x78
 801d2b4:	2100      	movs	r1, #0
 801d2b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d2b8:	2303      	movs	r3, #3
 801d2ba:	e011      	b.n	801d2e0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	2220      	movs	r2, #32
 801d2c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	2280      	movs	r2, #128	@ 0x80
 801d2c6:	2120      	movs	r1, #32
 801d2c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	2200      	movs	r2, #0
 801d2ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	2200      	movs	r2, #0
 801d2d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	2278      	movs	r2, #120	@ 0x78
 801d2da:	2100      	movs	r1, #0
 801d2dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d2de:	2300      	movs	r3, #0
}
 801d2e0:	0018      	movs	r0, r3
 801d2e2:	46bd      	mov	sp, r7
 801d2e4:	b010      	add	sp, #64	@ 0x40
 801d2e6:	bd80      	pop	{r7, pc}
 801d2e8:	01ffffff 	.word	0x01ffffff
 801d2ec:	fffffedf 	.word	0xfffffedf

0801d2f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d2f0:	b580      	push	{r7, lr}
 801d2f2:	b084      	sub	sp, #16
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	60f8      	str	r0, [r7, #12]
 801d2f8:	60b9      	str	r1, [r7, #8]
 801d2fa:	603b      	str	r3, [r7, #0]
 801d2fc:	1dfb      	adds	r3, r7, #7
 801d2fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d300:	e04b      	b.n	801d39a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d302:	69bb      	ldr	r3, [r7, #24]
 801d304:	3301      	adds	r3, #1
 801d306:	d048      	beq.n	801d39a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d308:	f7f6 f9dc 	bl	80136c4 <HAL_GetTick>
 801d30c:	0002      	movs	r2, r0
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	1ad3      	subs	r3, r2, r3
 801d312:	69ba      	ldr	r2, [r7, #24]
 801d314:	429a      	cmp	r2, r3
 801d316:	d302      	bcc.n	801d31e <UART_WaitOnFlagUntilTimeout+0x2e>
 801d318:	69bb      	ldr	r3, [r7, #24]
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d101      	bne.n	801d322 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801d31e:	2303      	movs	r3, #3
 801d320:	e04b      	b.n	801d3ba <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	681b      	ldr	r3, [r3, #0]
 801d328:	2204      	movs	r2, #4
 801d32a:	4013      	ands	r3, r2
 801d32c:	d035      	beq.n	801d39a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d32e:	68fb      	ldr	r3, [r7, #12]
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	69db      	ldr	r3, [r3, #28]
 801d334:	2208      	movs	r2, #8
 801d336:	4013      	ands	r3, r2
 801d338:	2b08      	cmp	r3, #8
 801d33a:	d111      	bne.n	801d360 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d33c:	68fb      	ldr	r3, [r7, #12]
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	2208      	movs	r2, #8
 801d342:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	0018      	movs	r0, r3
 801d348:	f000 f9ca 	bl	801d6e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d34c:	68fb      	ldr	r3, [r7, #12]
 801d34e:	2284      	movs	r2, #132	@ 0x84
 801d350:	2108      	movs	r1, #8
 801d352:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	2278      	movs	r2, #120	@ 0x78
 801d358:	2100      	movs	r1, #0
 801d35a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801d35c:	2301      	movs	r3, #1
 801d35e:	e02c      	b.n	801d3ba <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	69da      	ldr	r2, [r3, #28]
 801d366:	2380      	movs	r3, #128	@ 0x80
 801d368:	011b      	lsls	r3, r3, #4
 801d36a:	401a      	ands	r2, r3
 801d36c:	2380      	movs	r3, #128	@ 0x80
 801d36e:	011b      	lsls	r3, r3, #4
 801d370:	429a      	cmp	r2, r3
 801d372:	d112      	bne.n	801d39a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	2280      	movs	r2, #128	@ 0x80
 801d37a:	0112      	lsls	r2, r2, #4
 801d37c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	0018      	movs	r0, r3
 801d382:	f000 f9ad 	bl	801d6e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	2284      	movs	r2, #132	@ 0x84
 801d38a:	2120      	movs	r1, #32
 801d38c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	2278      	movs	r2, #120	@ 0x78
 801d392:	2100      	movs	r1, #0
 801d394:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d396:	2303      	movs	r3, #3
 801d398:	e00f      	b.n	801d3ba <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d39a:	68fb      	ldr	r3, [r7, #12]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	69db      	ldr	r3, [r3, #28]
 801d3a0:	68ba      	ldr	r2, [r7, #8]
 801d3a2:	4013      	ands	r3, r2
 801d3a4:	68ba      	ldr	r2, [r7, #8]
 801d3a6:	1ad3      	subs	r3, r2, r3
 801d3a8:	425a      	negs	r2, r3
 801d3aa:	4153      	adcs	r3, r2
 801d3ac:	b2db      	uxtb	r3, r3
 801d3ae:	001a      	movs	r2, r3
 801d3b0:	1dfb      	adds	r3, r7, #7
 801d3b2:	781b      	ldrb	r3, [r3, #0]
 801d3b4:	429a      	cmp	r2, r3
 801d3b6:	d0a4      	beq.n	801d302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801d3b8:	2300      	movs	r3, #0
}
 801d3ba:	0018      	movs	r0, r3
 801d3bc:	46bd      	mov	sp, r7
 801d3be:	b004      	add	sp, #16
 801d3c0:	bd80      	pop	{r7, pc}
	...

0801d3c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d3c4:	b580      	push	{r7, lr}
 801d3c6:	b090      	sub	sp, #64	@ 0x40
 801d3c8:	af00      	add	r7, sp, #0
 801d3ca:	60f8      	str	r0, [r7, #12]
 801d3cc:	60b9      	str	r1, [r7, #8]
 801d3ce:	1dbb      	adds	r3, r7, #6
 801d3d0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	68ba      	ldr	r2, [r7, #8]
 801d3d6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	1dba      	adds	r2, r7, #6
 801d3dc:	2158      	movs	r1, #88	@ 0x58
 801d3de:	8812      	ldrh	r2, [r2, #0]
 801d3e0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801d3e2:	68fb      	ldr	r3, [r7, #12]
 801d3e4:	1dba      	adds	r2, r7, #6
 801d3e6:	215a      	movs	r1, #90	@ 0x5a
 801d3e8:	8812      	ldrh	r2, [r2, #0]
 801d3ea:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	2200      	movs	r2, #0
 801d3f0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	689a      	ldr	r2, [r3, #8]
 801d3f6:	2380      	movs	r3, #128	@ 0x80
 801d3f8:	015b      	lsls	r3, r3, #5
 801d3fa:	429a      	cmp	r2, r3
 801d3fc:	d10d      	bne.n	801d41a <UART_Start_Receive_IT+0x56>
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	691b      	ldr	r3, [r3, #16]
 801d402:	2b00      	cmp	r3, #0
 801d404:	d104      	bne.n	801d410 <UART_Start_Receive_IT+0x4c>
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	225c      	movs	r2, #92	@ 0x5c
 801d40a:	4950      	ldr	r1, [pc, #320]	@ (801d54c <UART_Start_Receive_IT+0x188>)
 801d40c:	5299      	strh	r1, [r3, r2]
 801d40e:	e02e      	b.n	801d46e <UART_Start_Receive_IT+0xaa>
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	225c      	movs	r2, #92	@ 0x5c
 801d414:	21ff      	movs	r1, #255	@ 0xff
 801d416:	5299      	strh	r1, [r3, r2]
 801d418:	e029      	b.n	801d46e <UART_Start_Receive_IT+0xaa>
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	689b      	ldr	r3, [r3, #8]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d10d      	bne.n	801d43e <UART_Start_Receive_IT+0x7a>
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	691b      	ldr	r3, [r3, #16]
 801d426:	2b00      	cmp	r3, #0
 801d428:	d104      	bne.n	801d434 <UART_Start_Receive_IT+0x70>
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	225c      	movs	r2, #92	@ 0x5c
 801d42e:	21ff      	movs	r1, #255	@ 0xff
 801d430:	5299      	strh	r1, [r3, r2]
 801d432:	e01c      	b.n	801d46e <UART_Start_Receive_IT+0xaa>
 801d434:	68fb      	ldr	r3, [r7, #12]
 801d436:	225c      	movs	r2, #92	@ 0x5c
 801d438:	217f      	movs	r1, #127	@ 0x7f
 801d43a:	5299      	strh	r1, [r3, r2]
 801d43c:	e017      	b.n	801d46e <UART_Start_Receive_IT+0xaa>
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	689a      	ldr	r2, [r3, #8]
 801d442:	2380      	movs	r3, #128	@ 0x80
 801d444:	055b      	lsls	r3, r3, #21
 801d446:	429a      	cmp	r2, r3
 801d448:	d10d      	bne.n	801d466 <UART_Start_Receive_IT+0xa2>
 801d44a:	68fb      	ldr	r3, [r7, #12]
 801d44c:	691b      	ldr	r3, [r3, #16]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d104      	bne.n	801d45c <UART_Start_Receive_IT+0x98>
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	225c      	movs	r2, #92	@ 0x5c
 801d456:	217f      	movs	r1, #127	@ 0x7f
 801d458:	5299      	strh	r1, [r3, r2]
 801d45a:	e008      	b.n	801d46e <UART_Start_Receive_IT+0xaa>
 801d45c:	68fb      	ldr	r3, [r7, #12]
 801d45e:	225c      	movs	r2, #92	@ 0x5c
 801d460:	213f      	movs	r1, #63	@ 0x3f
 801d462:	5299      	strh	r1, [r3, r2]
 801d464:	e003      	b.n	801d46e <UART_Start_Receive_IT+0xaa>
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	225c      	movs	r2, #92	@ 0x5c
 801d46a:	2100      	movs	r1, #0
 801d46c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	2284      	movs	r2, #132	@ 0x84
 801d472:	2100      	movs	r1, #0
 801d474:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	2280      	movs	r2, #128	@ 0x80
 801d47a:	2122      	movs	r1, #34	@ 0x22
 801d47c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d47e:	f3ef 8310 	mrs	r3, PRIMASK
 801d482:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801d484:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d488:	2301      	movs	r3, #1
 801d48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d48e:	f383 8810 	msr	PRIMASK, r3
}
 801d492:	46c0      	nop			@ (mov r8, r8)
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	689a      	ldr	r2, [r3, #8]
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	2101      	movs	r1, #1
 801d4a0:	430a      	orrs	r2, r1
 801d4a2:	609a      	str	r2, [r3, #8]
 801d4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d4a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d4aa:	f383 8810 	msr	PRIMASK, r3
}
 801d4ae:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	689a      	ldr	r2, [r3, #8]
 801d4b4:	2380      	movs	r3, #128	@ 0x80
 801d4b6:	015b      	lsls	r3, r3, #5
 801d4b8:	429a      	cmp	r2, r3
 801d4ba:	d107      	bne.n	801d4cc <UART_Start_Receive_IT+0x108>
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	691b      	ldr	r3, [r3, #16]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d103      	bne.n	801d4cc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	4a22      	ldr	r2, [pc, #136]	@ (801d550 <UART_Start_Receive_IT+0x18c>)
 801d4c8:	669a      	str	r2, [r3, #104]	@ 0x68
 801d4ca:	e002      	b.n	801d4d2 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	4a21      	ldr	r2, [pc, #132]	@ (801d554 <UART_Start_Receive_IT+0x190>)
 801d4d0:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	691b      	ldr	r3, [r3, #16]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d019      	beq.n	801d50e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d4da:	f3ef 8310 	mrs	r3, PRIMASK
 801d4de:	61fb      	str	r3, [r7, #28]
  return(result);
 801d4e0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801d4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 801d4e4:	2301      	movs	r3, #1
 801d4e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4e8:	6a3b      	ldr	r3, [r7, #32]
 801d4ea:	f383 8810 	msr	PRIMASK, r3
}
 801d4ee:	46c0      	nop			@ (mov r8, r8)
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	681a      	ldr	r2, [r3, #0]
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	2190      	movs	r1, #144	@ 0x90
 801d4fc:	0049      	lsls	r1, r1, #1
 801d4fe:	430a      	orrs	r2, r1
 801d500:	601a      	str	r2, [r3, #0]
 801d502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d504:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d508:	f383 8810 	msr	PRIMASK, r3
}
 801d50c:	e018      	b.n	801d540 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d50e:	f3ef 8310 	mrs	r3, PRIMASK
 801d512:	613b      	str	r3, [r7, #16]
  return(result);
 801d514:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801d516:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d518:	2301      	movs	r3, #1
 801d51a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d51c:	697b      	ldr	r3, [r7, #20]
 801d51e:	f383 8810 	msr	PRIMASK, r3
}
 801d522:	46c0      	nop			@ (mov r8, r8)
 801d524:	68fb      	ldr	r3, [r7, #12]
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	681a      	ldr	r2, [r3, #0]
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	2120      	movs	r1, #32
 801d530:	430a      	orrs	r2, r1
 801d532:	601a      	str	r2, [r3, #0]
 801d534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d536:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d538:	69bb      	ldr	r3, [r7, #24]
 801d53a:	f383 8810 	msr	PRIMASK, r3
}
 801d53e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801d540:	2300      	movs	r3, #0
}
 801d542:	0018      	movs	r0, r3
 801d544:	46bd      	mov	sp, r7
 801d546:	b010      	add	sp, #64	@ 0x40
 801d548:	bd80      	pop	{r7, pc}
 801d54a:	46c0      	nop			@ (mov r8, r8)
 801d54c:	000001ff 	.word	0x000001ff
 801d550:	0801dcc5 	.word	0x0801dcc5
 801d554:	0801daf9 	.word	0x0801daf9

0801d558 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b090      	sub	sp, #64	@ 0x40
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	60f8      	str	r0, [r7, #12]
 801d560:	60b9      	str	r1, [r7, #8]
 801d562:	1dbb      	adds	r3, r7, #6
 801d564:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801d566:	68fb      	ldr	r3, [r7, #12]
 801d568:	68ba      	ldr	r2, [r7, #8]
 801d56a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	1dba      	adds	r2, r7, #6
 801d570:	2158      	movs	r1, #88	@ 0x58
 801d572:	8812      	ldrh	r2, [r2, #0]
 801d574:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	2284      	movs	r2, #132	@ 0x84
 801d57a:	2100      	movs	r1, #0
 801d57c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	2280      	movs	r2, #128	@ 0x80
 801d582:	2122      	movs	r1, #34	@ 0x22
 801d584:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d028      	beq.n	801d5e0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d592:	4a3e      	ldr	r2, [pc, #248]	@ (801d68c <UART_Start_Receive_DMA+0x134>)
 801d594:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d59a:	4a3d      	ldr	r2, [pc, #244]	@ (801d690 <UART_Start_Receive_DMA+0x138>)
 801d59c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d5a2:	4a3c      	ldr	r2, [pc, #240]	@ (801d694 <UART_Start_Receive_DMA+0x13c>)
 801d5a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801d5ae:	68fb      	ldr	r3, [r7, #12]
 801d5b0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	3324      	adds	r3, #36	@ 0x24
 801d5b8:	0019      	movs	r1, r3
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d5be:	001a      	movs	r2, r3
 801d5c0:	1dbb      	adds	r3, r7, #6
 801d5c2:	881b      	ldrh	r3, [r3, #0]
 801d5c4:	f7f6 fdd0 	bl	8014168 <HAL_DMA_Start_IT>
 801d5c8:	1e03      	subs	r3, r0, #0
 801d5ca:	d009      	beq.n	801d5e0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d5cc:	68fb      	ldr	r3, [r7, #12]
 801d5ce:	2284      	movs	r2, #132	@ 0x84
 801d5d0:	2110      	movs	r1, #16
 801d5d2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	2280      	movs	r2, #128	@ 0x80
 801d5d8:	2120      	movs	r1, #32
 801d5da:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801d5dc:	2301      	movs	r3, #1
 801d5de:	e050      	b.n	801d682 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	691b      	ldr	r3, [r3, #16]
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d019      	beq.n	801d61c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5e8:	f3ef 8310 	mrs	r3, PRIMASK
 801d5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801d5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d5f2:	2301      	movs	r3, #1
 801d5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5f8:	f383 8810 	msr	PRIMASK, r3
}
 801d5fc:	46c0      	nop			@ (mov r8, r8)
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	681a      	ldr	r2, [r3, #0]
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	2180      	movs	r1, #128	@ 0x80
 801d60a:	0049      	lsls	r1, r1, #1
 801d60c:	430a      	orrs	r2, r1
 801d60e:	601a      	str	r2, [r3, #0]
 801d610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d612:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d616:	f383 8810 	msr	PRIMASK, r3
}
 801d61a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d61c:	f3ef 8310 	mrs	r3, PRIMASK
 801d620:	613b      	str	r3, [r7, #16]
  return(result);
 801d622:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d624:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d626:	2301      	movs	r3, #1
 801d628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d62a:	697b      	ldr	r3, [r7, #20]
 801d62c:	f383 8810 	msr	PRIMASK, r3
}
 801d630:	46c0      	nop			@ (mov r8, r8)
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	689a      	ldr	r2, [r3, #8]
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	681b      	ldr	r3, [r3, #0]
 801d63c:	2101      	movs	r1, #1
 801d63e:	430a      	orrs	r2, r1
 801d640:	609a      	str	r2, [r3, #8]
 801d642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d644:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d646:	69bb      	ldr	r3, [r7, #24]
 801d648:	f383 8810 	msr	PRIMASK, r3
}
 801d64c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d64e:	f3ef 8310 	mrs	r3, PRIMASK
 801d652:	61fb      	str	r3, [r7, #28]
  return(result);
 801d654:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d656:	637b      	str	r3, [r7, #52]	@ 0x34
 801d658:	2301      	movs	r3, #1
 801d65a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d65c:	6a3b      	ldr	r3, [r7, #32]
 801d65e:	f383 8810 	msr	PRIMASK, r3
}
 801d662:	46c0      	nop			@ (mov r8, r8)
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	689a      	ldr	r2, [r3, #8]
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	2140      	movs	r1, #64	@ 0x40
 801d670:	430a      	orrs	r2, r1
 801d672:	609a      	str	r2, [r3, #8]
 801d674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d676:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d67a:	f383 8810 	msr	PRIMASK, r3
}
 801d67e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801d680:	2300      	movs	r3, #0
}
 801d682:	0018      	movs	r0, r3
 801d684:	46bd      	mov	sp, r7
 801d686:	b010      	add	sp, #64	@ 0x40
 801d688:	bd80      	pop	{r7, pc}
 801d68a:	46c0      	nop			@ (mov r8, r8)
 801d68c:	0801d869 	.word	0x0801d869
 801d690:	0801d99d 	.word	0x0801d99d
 801d694:	0801d9e5 	.word	0x0801d9e5

0801d698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801d698:	b580      	push	{r7, lr}
 801d69a:	b086      	sub	sp, #24
 801d69c:	af00      	add	r7, sp, #0
 801d69e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6a0:	f3ef 8310 	mrs	r3, PRIMASK
 801d6a4:	60bb      	str	r3, [r7, #8]
  return(result);
 801d6a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801d6a8:	617b      	str	r3, [r7, #20]
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	f383 8810 	msr	PRIMASK, r3
}
 801d6b4:	46c0      	nop			@ (mov r8, r8)
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	681a      	ldr	r2, [r3, #0]
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	21c0      	movs	r1, #192	@ 0xc0
 801d6c2:	438a      	bics	r2, r1
 801d6c4:	601a      	str	r2, [r3, #0]
 801d6c6:	697b      	ldr	r3, [r7, #20]
 801d6c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6ca:	693b      	ldr	r3, [r7, #16]
 801d6cc:	f383 8810 	msr	PRIMASK, r3
}
 801d6d0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	2220      	movs	r2, #32
 801d6d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801d6d8:	46c0      	nop			@ (mov r8, r8)
 801d6da:	46bd      	mov	sp, r7
 801d6dc:	b006      	add	sp, #24
 801d6de:	bd80      	pop	{r7, pc}

0801d6e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d6e0:	b580      	push	{r7, lr}
 801d6e2:	b08e      	sub	sp, #56	@ 0x38
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d6e8:	f3ef 8310 	mrs	r3, PRIMASK
 801d6ec:	617b      	str	r3, [r7, #20]
  return(result);
 801d6ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 801d6f2:	2301      	movs	r3, #1
 801d6f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d6f6:	69bb      	ldr	r3, [r7, #24]
 801d6f8:	f383 8810 	msr	PRIMASK, r3
}
 801d6fc:	46c0      	nop			@ (mov r8, r8)
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	681b      	ldr	r3, [r3, #0]
 801d702:	681a      	ldr	r2, [r3, #0]
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	4926      	ldr	r1, [pc, #152]	@ (801d7a4 <UART_EndRxTransfer+0xc4>)
 801d70a:	400a      	ands	r2, r1
 801d70c:	601a      	str	r2, [r3, #0]
 801d70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d712:	69fb      	ldr	r3, [r7, #28]
 801d714:	f383 8810 	msr	PRIMASK, r3
}
 801d718:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d71a:	f3ef 8310 	mrs	r3, PRIMASK
 801d71e:	623b      	str	r3, [r7, #32]
  return(result);
 801d720:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d722:	633b      	str	r3, [r7, #48]	@ 0x30
 801d724:	2301      	movs	r3, #1
 801d726:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d72a:	f383 8810 	msr	PRIMASK, r3
}
 801d72e:	46c0      	nop			@ (mov r8, r8)
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	689a      	ldr	r2, [r3, #8]
 801d736:	687b      	ldr	r3, [r7, #4]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	2101      	movs	r1, #1
 801d73c:	438a      	bics	r2, r1
 801d73e:	609a      	str	r2, [r3, #8]
 801d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d742:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d746:	f383 8810 	msr	PRIMASK, r3
}
 801d74a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d750:	2b01      	cmp	r3, #1
 801d752:	d118      	bne.n	801d786 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d754:	f3ef 8310 	mrs	r3, PRIMASK
 801d758:	60bb      	str	r3, [r7, #8]
  return(result);
 801d75a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d75e:	2301      	movs	r3, #1
 801d760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	f383 8810 	msr	PRIMASK, r3
}
 801d768:	46c0      	nop			@ (mov r8, r8)
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	681a      	ldr	r2, [r3, #0]
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	2110      	movs	r1, #16
 801d776:	438a      	bics	r2, r1
 801d778:	601a      	str	r2, [r3, #0]
 801d77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d77c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d77e:	693b      	ldr	r3, [r7, #16]
 801d780:	f383 8810 	msr	PRIMASK, r3
}
 801d784:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	2280      	movs	r2, #128	@ 0x80
 801d78a:	2120      	movs	r1, #32
 801d78c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	2200      	movs	r2, #0
 801d792:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	2200      	movs	r2, #0
 801d798:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801d79a:	46c0      	nop			@ (mov r8, r8)
 801d79c:	46bd      	mov	sp, r7
 801d79e:	b00e      	add	sp, #56	@ 0x38
 801d7a0:	bd80      	pop	{r7, pc}
 801d7a2:	46c0      	nop			@ (mov r8, r8)
 801d7a4:	fffffedf 	.word	0xfffffedf

0801d7a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801d7a8:	b580      	push	{r7, lr}
 801d7aa:	b08c      	sub	sp, #48	@ 0x30
 801d7ac:	af00      	add	r7, sp, #0
 801d7ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d7b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	2220      	movs	r2, #32
 801d7be:	4013      	ands	r3, r2
 801d7c0:	d135      	bne.n	801d82e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801d7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7c4:	2252      	movs	r2, #82	@ 0x52
 801d7c6:	2100      	movs	r1, #0
 801d7c8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7ca:	f3ef 8310 	mrs	r3, PRIMASK
 801d7ce:	60fb      	str	r3, [r7, #12]
  return(result);
 801d7d0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d7d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d7d4:	2301      	movs	r3, #1
 801d7d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7d8:	693b      	ldr	r3, [r7, #16]
 801d7da:	f383 8810 	msr	PRIMASK, r3
}
 801d7de:	46c0      	nop			@ (mov r8, r8)
 801d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	689a      	ldr	r2, [r3, #8]
 801d7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	2180      	movs	r1, #128	@ 0x80
 801d7ec:	438a      	bics	r2, r1
 801d7ee:	609a      	str	r2, [r3, #8]
 801d7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7f4:	697b      	ldr	r3, [r7, #20]
 801d7f6:	f383 8810 	msr	PRIMASK, r3
}
 801d7fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801d800:	61bb      	str	r3, [r7, #24]
  return(result);
 801d802:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801d804:	627b      	str	r3, [r7, #36]	@ 0x24
 801d806:	2301      	movs	r3, #1
 801d808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d80a:	69fb      	ldr	r3, [r7, #28]
 801d80c:	f383 8810 	msr	PRIMASK, r3
}
 801d810:	46c0      	nop			@ (mov r8, r8)
 801d812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	681a      	ldr	r2, [r3, #0]
 801d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	2140      	movs	r1, #64	@ 0x40
 801d81e:	430a      	orrs	r2, r1
 801d820:	601a      	str	r2, [r3, #0]
 801d822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d824:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d826:	6a3b      	ldr	r3, [r7, #32]
 801d828:	f383 8810 	msr	PRIMASK, r3
}
 801d82c:	e006      	b.n	801d83c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801d82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d830:	228c      	movs	r2, #140	@ 0x8c
 801d832:	589b      	ldr	r3, [r3, r2]
 801d834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d836:	0010      	movs	r0, r2
 801d838:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d83a:	46c0      	nop			@ (mov r8, r8)
 801d83c:	46c0      	nop			@ (mov r8, r8)
 801d83e:	46bd      	mov	sp, r7
 801d840:	b00c      	add	sp, #48	@ 0x30
 801d842:	bd80      	pop	{r7, pc}

0801d844 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b084      	sub	sp, #16
 801d848:	af00      	add	r7, sp, #0
 801d84a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d850:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	2288      	movs	r2, #136	@ 0x88
 801d856:	589b      	ldr	r3, [r3, r2]
 801d858:	68fa      	ldr	r2, [r7, #12]
 801d85a:	0010      	movs	r0, r2
 801d85c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d85e:	46c0      	nop			@ (mov r8, r8)
 801d860:	46bd      	mov	sp, r7
 801d862:	b004      	add	sp, #16
 801d864:	bd80      	pop	{r7, pc}
	...

0801d868 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	b094      	sub	sp, #80	@ 0x50
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d874:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	681b      	ldr	r3, [r3, #0]
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	2220      	movs	r2, #32
 801d87e:	4013      	ands	r3, r2
 801d880:	d16f      	bne.n	801d962 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801d882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d884:	225a      	movs	r2, #90	@ 0x5a
 801d886:	2100      	movs	r1, #0
 801d888:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d88a:	f3ef 8310 	mrs	r3, PRIMASK
 801d88e:	61bb      	str	r3, [r7, #24]
  return(result);
 801d890:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d892:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d894:	2301      	movs	r3, #1
 801d896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d898:	69fb      	ldr	r3, [r7, #28]
 801d89a:	f383 8810 	msr	PRIMASK, r3
}
 801d89e:	46c0      	nop			@ (mov r8, r8)
 801d8a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	681a      	ldr	r2, [r3, #0]
 801d8a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	493b      	ldr	r1, [pc, #236]	@ (801d998 <UART_DMAReceiveCplt+0x130>)
 801d8ac:	400a      	ands	r2, r1
 801d8ae:	601a      	str	r2, [r3, #0]
 801d8b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d8b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8b4:	6a3b      	ldr	r3, [r7, #32]
 801d8b6:	f383 8810 	msr	PRIMASK, r3
}
 801d8ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8bc:	f3ef 8310 	mrs	r3, PRIMASK
 801d8c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d8c4:	647b      	str	r3, [r7, #68]	@ 0x44
 801d8c6:	2301      	movs	r3, #1
 801d8c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8cc:	f383 8810 	msr	PRIMASK, r3
}
 801d8d0:	46c0      	nop			@ (mov r8, r8)
 801d8d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	689a      	ldr	r2, [r3, #8]
 801d8d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	2101      	movs	r1, #1
 801d8de:	438a      	bics	r2, r1
 801d8e0:	609a      	str	r2, [r3, #8]
 801d8e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d8e8:	f383 8810 	msr	PRIMASK, r3
}
 801d8ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8ee:	f3ef 8310 	mrs	r3, PRIMASK
 801d8f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801d8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d8f6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d8f8:	2301      	movs	r3, #1
 801d8fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d8fe:	f383 8810 	msr	PRIMASK, r3
}
 801d902:	46c0      	nop			@ (mov r8, r8)
 801d904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	689a      	ldr	r2, [r3, #8]
 801d90a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	2140      	movs	r1, #64	@ 0x40
 801d910:	438a      	bics	r2, r1
 801d912:	609a      	str	r2, [r3, #8]
 801d914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d916:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d91a:	f383 8810 	msr	PRIMASK, r3
}
 801d91e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801d920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d922:	2280      	movs	r2, #128	@ 0x80
 801d924:	2120      	movs	r1, #32
 801d926:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d92a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d92c:	2b01      	cmp	r3, #1
 801d92e:	d118      	bne.n	801d962 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d930:	f3ef 8310 	mrs	r3, PRIMASK
 801d934:	60fb      	str	r3, [r7, #12]
  return(result);
 801d936:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d93a:	2301      	movs	r3, #1
 801d93c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d93e:	693b      	ldr	r3, [r7, #16]
 801d940:	f383 8810 	msr	PRIMASK, r3
}
 801d944:	46c0      	nop			@ (mov r8, r8)
 801d946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	681a      	ldr	r2, [r3, #0]
 801d94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	2110      	movs	r1, #16
 801d952:	438a      	bics	r2, r1
 801d954:	601a      	str	r2, [r3, #0]
 801d956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d95a:	697b      	ldr	r3, [r7, #20]
 801d95c:	f383 8810 	msr	PRIMASK, r3
}
 801d960:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d964:	2200      	movs	r2, #0
 801d966:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d96a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d96c:	2b01      	cmp	r3, #1
 801d96e:	d109      	bne.n	801d984 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801d970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d972:	22ac      	movs	r2, #172	@ 0xac
 801d974:	589b      	ldr	r3, [r3, r2]
 801d976:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d978:	2158      	movs	r1, #88	@ 0x58
 801d97a:	5a51      	ldrh	r1, [r2, r1]
 801d97c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d97e:	0010      	movs	r0, r2
 801d980:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d982:	e005      	b.n	801d990 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801d984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d986:	2294      	movs	r2, #148	@ 0x94
 801d988:	589b      	ldr	r3, [r3, r2]
 801d98a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d98c:	0010      	movs	r0, r2
 801d98e:	4798      	blx	r3
}
 801d990:	46c0      	nop			@ (mov r8, r8)
 801d992:	46bd      	mov	sp, r7
 801d994:	b014      	add	sp, #80	@ 0x50
 801d996:	bd80      	pop	{r7, pc}
 801d998:	fffffeff 	.word	0xfffffeff

0801d99c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801d99c:	b580      	push	{r7, lr}
 801d99e:	b084      	sub	sp, #16
 801d9a0:	af00      	add	r7, sp, #0
 801d9a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	2201      	movs	r2, #1
 801d9ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d9b4:	2b01      	cmp	r3, #1
 801d9b6:	d10b      	bne.n	801d9d0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	22ac      	movs	r2, #172	@ 0xac
 801d9bc:	589b      	ldr	r3, [r3, r2]
 801d9be:	68fa      	ldr	r2, [r7, #12]
 801d9c0:	2158      	movs	r1, #88	@ 0x58
 801d9c2:	5a52      	ldrh	r2, [r2, r1]
 801d9c4:	0852      	lsrs	r2, r2, #1
 801d9c6:	b291      	uxth	r1, r2
 801d9c8:	68fa      	ldr	r2, [r7, #12]
 801d9ca:	0010      	movs	r0, r2
 801d9cc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801d9ce:	e005      	b.n	801d9dc <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	2290      	movs	r2, #144	@ 0x90
 801d9d4:	589b      	ldr	r3, [r3, r2]
 801d9d6:	68fa      	ldr	r2, [r7, #12]
 801d9d8:	0010      	movs	r0, r2
 801d9da:	4798      	blx	r3
}
 801d9dc:	46c0      	nop			@ (mov r8, r8)
 801d9de:	46bd      	mov	sp, r7
 801d9e0:	b004      	add	sp, #16
 801d9e2:	bd80      	pop	{r7, pc}

0801d9e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801d9e4:	b580      	push	{r7, lr}
 801d9e6:	b086      	sub	sp, #24
 801d9e8:	af00      	add	r7, sp, #0
 801d9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801d9f2:	697b      	ldr	r3, [r7, #20]
 801d9f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d9f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801d9f8:	697b      	ldr	r3, [r7, #20]
 801d9fa:	2280      	movs	r2, #128	@ 0x80
 801d9fc:	589b      	ldr	r3, [r3, r2]
 801d9fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801da00:	697b      	ldr	r3, [r7, #20]
 801da02:	681b      	ldr	r3, [r3, #0]
 801da04:	689b      	ldr	r3, [r3, #8]
 801da06:	2280      	movs	r2, #128	@ 0x80
 801da08:	4013      	ands	r3, r2
 801da0a:	2b80      	cmp	r3, #128	@ 0x80
 801da0c:	d10a      	bne.n	801da24 <UART_DMAError+0x40>
 801da0e:	693b      	ldr	r3, [r7, #16]
 801da10:	2b21      	cmp	r3, #33	@ 0x21
 801da12:	d107      	bne.n	801da24 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801da14:	697b      	ldr	r3, [r7, #20]
 801da16:	2252      	movs	r2, #82	@ 0x52
 801da18:	2100      	movs	r1, #0
 801da1a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801da1c:	697b      	ldr	r3, [r7, #20]
 801da1e:	0018      	movs	r0, r3
 801da20:	f7ff fe3a 	bl	801d698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801da24:	697b      	ldr	r3, [r7, #20]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	689b      	ldr	r3, [r3, #8]
 801da2a:	2240      	movs	r2, #64	@ 0x40
 801da2c:	4013      	ands	r3, r2
 801da2e:	2b40      	cmp	r3, #64	@ 0x40
 801da30:	d10a      	bne.n	801da48 <UART_DMAError+0x64>
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	2b22      	cmp	r3, #34	@ 0x22
 801da36:	d107      	bne.n	801da48 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801da38:	697b      	ldr	r3, [r7, #20]
 801da3a:	225a      	movs	r2, #90	@ 0x5a
 801da3c:	2100      	movs	r1, #0
 801da3e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801da40:	697b      	ldr	r3, [r7, #20]
 801da42:	0018      	movs	r0, r3
 801da44:	f7ff fe4c 	bl	801d6e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801da48:	697b      	ldr	r3, [r7, #20]
 801da4a:	2284      	movs	r2, #132	@ 0x84
 801da4c:	589b      	ldr	r3, [r3, r2]
 801da4e:	2210      	movs	r2, #16
 801da50:	431a      	orrs	r2, r3
 801da52:	697b      	ldr	r3, [r7, #20]
 801da54:	2184      	movs	r1, #132	@ 0x84
 801da56:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801da58:	697b      	ldr	r3, [r7, #20]
 801da5a:	2298      	movs	r2, #152	@ 0x98
 801da5c:	589b      	ldr	r3, [r3, r2]
 801da5e:	697a      	ldr	r2, [r7, #20]
 801da60:	0010      	movs	r0, r2
 801da62:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801da64:	46c0      	nop			@ (mov r8, r8)
 801da66:	46bd      	mov	sp, r7
 801da68:	b006      	add	sp, #24
 801da6a:	bd80      	pop	{r7, pc}

0801da6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801da6c:	b580      	push	{r7, lr}
 801da6e:	b084      	sub	sp, #16
 801da70:	af00      	add	r7, sp, #0
 801da72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801da7a:	68fb      	ldr	r3, [r7, #12]
 801da7c:	225a      	movs	r2, #90	@ 0x5a
 801da7e:	2100      	movs	r1, #0
 801da80:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	2252      	movs	r2, #82	@ 0x52
 801da86:	2100      	movs	r1, #0
 801da88:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801da8a:	68fb      	ldr	r3, [r7, #12]
 801da8c:	2298      	movs	r2, #152	@ 0x98
 801da8e:	589b      	ldr	r3, [r3, r2]
 801da90:	68fa      	ldr	r2, [r7, #12]
 801da92:	0010      	movs	r0, r2
 801da94:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801da96:	46c0      	nop			@ (mov r8, r8)
 801da98:	46bd      	mov	sp, r7
 801da9a:	b004      	add	sp, #16
 801da9c:	bd80      	pop	{r7, pc}

0801da9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801da9e:	b580      	push	{r7, lr}
 801daa0:	b086      	sub	sp, #24
 801daa2:	af00      	add	r7, sp, #0
 801daa4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801daa6:	f3ef 8310 	mrs	r3, PRIMASK
 801daaa:	60bb      	str	r3, [r7, #8]
  return(result);
 801daac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801daae:	617b      	str	r3, [r7, #20]
 801dab0:	2301      	movs	r3, #1
 801dab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dab4:	68fb      	ldr	r3, [r7, #12]
 801dab6:	f383 8810 	msr	PRIMASK, r3
}
 801daba:	46c0      	nop			@ (mov r8, r8)
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	681a      	ldr	r2, [r3, #0]
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	2140      	movs	r1, #64	@ 0x40
 801dac8:	438a      	bics	r2, r1
 801daca:	601a      	str	r2, [r3, #0]
 801dacc:	697b      	ldr	r3, [r7, #20]
 801dace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dad0:	693b      	ldr	r3, [r7, #16]
 801dad2:	f383 8810 	msr	PRIMASK, r3
}
 801dad6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	2220      	movs	r2, #32
 801dadc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	2200      	movs	r2, #0
 801dae2:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	228c      	movs	r2, #140	@ 0x8c
 801dae8:	589b      	ldr	r3, [r3, r2]
 801daea:	687a      	ldr	r2, [r7, #4]
 801daec:	0010      	movs	r0, r2
 801daee:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801daf0:	46c0      	nop			@ (mov r8, r8)
 801daf2:	46bd      	mov	sp, r7
 801daf4:	b006      	add	sp, #24
 801daf6:	bd80      	pop	{r7, pc}

0801daf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801daf8:	b580      	push	{r7, lr}
 801dafa:	b094      	sub	sp, #80	@ 0x50
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801db00:	204e      	movs	r0, #78	@ 0x4e
 801db02:	183b      	adds	r3, r7, r0
 801db04:	687a      	ldr	r2, [r7, #4]
 801db06:	215c      	movs	r1, #92	@ 0x5c
 801db08:	5a52      	ldrh	r2, [r2, r1]
 801db0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	2280      	movs	r2, #128	@ 0x80
 801db10:	589b      	ldr	r3, [r3, r2]
 801db12:	2b22      	cmp	r3, #34	@ 0x22
 801db14:	d000      	beq.n	801db18 <UART_RxISR_8BIT+0x20>
 801db16:	e0c2      	b.n	801dc9e <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	681b      	ldr	r3, [r3, #0]
 801db1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801db1e:	214c      	movs	r1, #76	@ 0x4c
 801db20:	187b      	adds	r3, r7, r1
 801db22:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801db24:	187b      	adds	r3, r7, r1
 801db26:	881b      	ldrh	r3, [r3, #0]
 801db28:	b2da      	uxtb	r2, r3
 801db2a:	183b      	adds	r3, r7, r0
 801db2c:	881b      	ldrh	r3, [r3, #0]
 801db2e:	b2d9      	uxtb	r1, r3
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db34:	400a      	ands	r2, r1
 801db36:	b2d2      	uxtb	r2, r2
 801db38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db3e:	1c5a      	adds	r2, r3, #1
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	225a      	movs	r2, #90	@ 0x5a
 801db48:	5a9b      	ldrh	r3, [r3, r2]
 801db4a:	b29b      	uxth	r3, r3
 801db4c:	3b01      	subs	r3, #1
 801db4e:	b299      	uxth	r1, r3
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	225a      	movs	r2, #90	@ 0x5a
 801db54:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	225a      	movs	r2, #90	@ 0x5a
 801db5a:	5a9b      	ldrh	r3, [r3, r2]
 801db5c:	b29b      	uxth	r3, r3
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d000      	beq.n	801db64 <UART_RxISR_8BIT+0x6c>
 801db62:	e0a4      	b.n	801dcae <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db64:	f3ef 8310 	mrs	r3, PRIMASK
 801db68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801db6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801db6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801db6e:	2301      	movs	r3, #1
 801db70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db74:	f383 8810 	msr	PRIMASK, r3
}
 801db78:	46c0      	nop			@ (mov r8, r8)
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	681a      	ldr	r2, [r3, #0]
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	494c      	ldr	r1, [pc, #304]	@ (801dcb8 <UART_RxISR_8BIT+0x1c0>)
 801db86:	400a      	ands	r2, r1
 801db88:	601a      	str	r2, [r3, #0]
 801db8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801db8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db90:	f383 8810 	msr	PRIMASK, r3
}
 801db94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db96:	f3ef 8310 	mrs	r3, PRIMASK
 801db9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801db9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801db9e:	647b      	str	r3, [r7, #68]	@ 0x44
 801dba0:	2301      	movs	r3, #1
 801dba2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dba6:	f383 8810 	msr	PRIMASK, r3
}
 801dbaa:	46c0      	nop			@ (mov r8, r8)
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	689a      	ldr	r2, [r3, #8]
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	2101      	movs	r1, #1
 801dbb8:	438a      	bics	r2, r1
 801dbba:	609a      	str	r2, [r3, #8]
 801dbbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dbbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dbc2:	f383 8810 	msr	PRIMASK, r3
}
 801dbc6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	2280      	movs	r2, #128	@ 0x80
 801dbcc:	2120      	movs	r1, #32
 801dbce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	2200      	movs	r2, #0
 801dbd4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	2200      	movs	r2, #0
 801dbda:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	4a36      	ldr	r2, [pc, #216]	@ (801dcbc <UART_RxISR_8BIT+0x1c4>)
 801dbe2:	4293      	cmp	r3, r2
 801dbe4:	d01f      	beq.n	801dc26 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	685a      	ldr	r2, [r3, #4]
 801dbec:	2380      	movs	r3, #128	@ 0x80
 801dbee:	041b      	lsls	r3, r3, #16
 801dbf0:	4013      	ands	r3, r2
 801dbf2:	d018      	beq.n	801dc26 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbf4:	f3ef 8310 	mrs	r3, PRIMASK
 801dbf8:	61bb      	str	r3, [r7, #24]
  return(result);
 801dbfa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801dbfc:	643b      	str	r3, [r7, #64]	@ 0x40
 801dbfe:	2301      	movs	r3, #1
 801dc00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc02:	69fb      	ldr	r3, [r7, #28]
 801dc04:	f383 8810 	msr	PRIMASK, r3
}
 801dc08:	46c0      	nop			@ (mov r8, r8)
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	681a      	ldr	r2, [r3, #0]
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	492a      	ldr	r1, [pc, #168]	@ (801dcc0 <UART_RxISR_8BIT+0x1c8>)
 801dc16:	400a      	ands	r2, r1
 801dc18:	601a      	str	r2, [r3, #0]
 801dc1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dc1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc1e:	6a3b      	ldr	r3, [r7, #32]
 801dc20:	f383 8810 	msr	PRIMASK, r3
}
 801dc24:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dc2a:	2b01      	cmp	r3, #1
 801dc2c:	d130      	bne.n	801dc90 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dc2e:	687b      	ldr	r3, [r7, #4]
 801dc30:	2200      	movs	r2, #0
 801dc32:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc34:	f3ef 8310 	mrs	r3, PRIMASK
 801dc38:	60fb      	str	r3, [r7, #12]
  return(result);
 801dc3a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dc3e:	2301      	movs	r3, #1
 801dc40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc42:	693b      	ldr	r3, [r7, #16]
 801dc44:	f383 8810 	msr	PRIMASK, r3
}
 801dc48:	46c0      	nop			@ (mov r8, r8)
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	681a      	ldr	r2, [r3, #0]
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	2110      	movs	r1, #16
 801dc56:	438a      	bics	r2, r1
 801dc58:	601a      	str	r2, [r3, #0]
 801dc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dc5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc5e:	697b      	ldr	r3, [r7, #20]
 801dc60:	f383 8810 	msr	PRIMASK, r3
}
 801dc64:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	69db      	ldr	r3, [r3, #28]
 801dc6c:	2210      	movs	r2, #16
 801dc6e:	4013      	ands	r3, r2
 801dc70:	2b10      	cmp	r3, #16
 801dc72:	d103      	bne.n	801dc7c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	2210      	movs	r2, #16
 801dc7a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	22ac      	movs	r2, #172	@ 0xac
 801dc80:	589b      	ldr	r3, [r3, r2]
 801dc82:	687a      	ldr	r2, [r7, #4]
 801dc84:	2158      	movs	r1, #88	@ 0x58
 801dc86:	5a51      	ldrh	r1, [r2, r1]
 801dc88:	687a      	ldr	r2, [r7, #4]
 801dc8a:	0010      	movs	r0, r2
 801dc8c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801dc8e:	e00e      	b.n	801dcae <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	2294      	movs	r2, #148	@ 0x94
 801dc94:	589b      	ldr	r3, [r3, r2]
 801dc96:	687a      	ldr	r2, [r7, #4]
 801dc98:	0010      	movs	r0, r2
 801dc9a:	4798      	blx	r3
}
 801dc9c:	e007      	b.n	801dcae <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	699a      	ldr	r2, [r3, #24]
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	2108      	movs	r1, #8
 801dcaa:	430a      	orrs	r2, r1
 801dcac:	619a      	str	r2, [r3, #24]
}
 801dcae:	46c0      	nop			@ (mov r8, r8)
 801dcb0:	46bd      	mov	sp, r7
 801dcb2:	b014      	add	sp, #80	@ 0x50
 801dcb4:	bd80      	pop	{r7, pc}
 801dcb6:	46c0      	nop			@ (mov r8, r8)
 801dcb8:	fffffedf 	.word	0xfffffedf
 801dcbc:	40004800 	.word	0x40004800
 801dcc0:	fbffffff 	.word	0xfbffffff

0801dcc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b094      	sub	sp, #80	@ 0x50
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801dccc:	204e      	movs	r0, #78	@ 0x4e
 801dcce:	183b      	adds	r3, r7, r0
 801dcd0:	687a      	ldr	r2, [r7, #4]
 801dcd2:	215c      	movs	r1, #92	@ 0x5c
 801dcd4:	5a52      	ldrh	r2, [r2, r1]
 801dcd6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	2280      	movs	r2, #128	@ 0x80
 801dcdc:	589b      	ldr	r3, [r3, r2]
 801dcde:	2b22      	cmp	r3, #34	@ 0x22
 801dce0:	d000      	beq.n	801dce4 <UART_RxISR_16BIT+0x20>
 801dce2:	e0c2      	b.n	801de6a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801dcea:	214c      	movs	r1, #76	@ 0x4c
 801dcec:	187b      	adds	r3, r7, r1
 801dcee:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dcf4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801dcf6:	187b      	adds	r3, r7, r1
 801dcf8:	183a      	adds	r2, r7, r0
 801dcfa:	881b      	ldrh	r3, [r3, #0]
 801dcfc:	8812      	ldrh	r2, [r2, #0]
 801dcfe:	4013      	ands	r3, r2
 801dd00:	b29a      	uxth	r2, r3
 801dd02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dd04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801dd06:	687b      	ldr	r3, [r7, #4]
 801dd08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dd0a:	1c9a      	adds	r2, r3, #2
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	225a      	movs	r2, #90	@ 0x5a
 801dd14:	5a9b      	ldrh	r3, [r3, r2]
 801dd16:	b29b      	uxth	r3, r3
 801dd18:	3b01      	subs	r3, #1
 801dd1a:	b299      	uxth	r1, r3
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	225a      	movs	r2, #90	@ 0x5a
 801dd20:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	225a      	movs	r2, #90	@ 0x5a
 801dd26:	5a9b      	ldrh	r3, [r3, r2]
 801dd28:	b29b      	uxth	r3, r3
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d000      	beq.n	801dd30 <UART_RxISR_16BIT+0x6c>
 801dd2e:	e0a4      	b.n	801de7a <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd30:	f3ef 8310 	mrs	r3, PRIMASK
 801dd34:	623b      	str	r3, [r7, #32]
  return(result);
 801dd36:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dd38:	647b      	str	r3, [r7, #68]	@ 0x44
 801dd3a:	2301      	movs	r3, #1
 801dd3c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd40:	f383 8810 	msr	PRIMASK, r3
}
 801dd44:	46c0      	nop			@ (mov r8, r8)
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	681a      	ldr	r2, [r3, #0]
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	494c      	ldr	r1, [pc, #304]	@ (801de84 <UART_RxISR_16BIT+0x1c0>)
 801dd52:	400a      	ands	r2, r1
 801dd54:	601a      	str	r2, [r3, #0]
 801dd56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dd58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd5c:	f383 8810 	msr	PRIMASK, r3
}
 801dd60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd62:	f3ef 8310 	mrs	r3, PRIMASK
 801dd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801dd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dd6a:	643b      	str	r3, [r7, #64]	@ 0x40
 801dd6c:	2301      	movs	r3, #1
 801dd6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dd72:	f383 8810 	msr	PRIMASK, r3
}
 801dd76:	46c0      	nop			@ (mov r8, r8)
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	689a      	ldr	r2, [r3, #8]
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	2101      	movs	r1, #1
 801dd84:	438a      	bics	r2, r1
 801dd86:	609a      	str	r2, [r3, #8]
 801dd88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dd8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd8e:	f383 8810 	msr	PRIMASK, r3
}
 801dd92:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	2280      	movs	r2, #128	@ 0x80
 801dd98:	2120      	movs	r1, #32
 801dd9a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	2200      	movs	r2, #0
 801dda0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	2200      	movs	r2, #0
 801dda6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	4a36      	ldr	r2, [pc, #216]	@ (801de88 <UART_RxISR_16BIT+0x1c4>)
 801ddae:	4293      	cmp	r3, r2
 801ddb0:	d01f      	beq.n	801ddf2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	685a      	ldr	r2, [r3, #4]
 801ddb8:	2380      	movs	r3, #128	@ 0x80
 801ddba:	041b      	lsls	r3, r3, #16
 801ddbc:	4013      	ands	r3, r2
 801ddbe:	d018      	beq.n	801ddf2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddc0:	f3ef 8310 	mrs	r3, PRIMASK
 801ddc4:	617b      	str	r3, [r7, #20]
  return(result);
 801ddc6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ddc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ddca:	2301      	movs	r3, #1
 801ddcc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddce:	69bb      	ldr	r3, [r7, #24]
 801ddd0:	f383 8810 	msr	PRIMASK, r3
}
 801ddd4:	46c0      	nop			@ (mov r8, r8)
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	681b      	ldr	r3, [r3, #0]
 801ddda:	681a      	ldr	r2, [r3, #0]
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	492a      	ldr	r1, [pc, #168]	@ (801de8c <UART_RxISR_16BIT+0x1c8>)
 801dde2:	400a      	ands	r2, r1
 801dde4:	601a      	str	r2, [r3, #0]
 801dde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dde8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddea:	69fb      	ldr	r3, [r7, #28]
 801ddec:	f383 8810 	msr	PRIMASK, r3
}
 801ddf0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ddf6:	2b01      	cmp	r3, #1
 801ddf8:	d130      	bne.n	801de5c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	2200      	movs	r2, #0
 801ddfe:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de00:	f3ef 8310 	mrs	r3, PRIMASK
 801de04:	60bb      	str	r3, [r7, #8]
  return(result);
 801de06:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801de08:	63bb      	str	r3, [r7, #56]	@ 0x38
 801de0a:	2301      	movs	r3, #1
 801de0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de0e:	68fb      	ldr	r3, [r7, #12]
 801de10:	f383 8810 	msr	PRIMASK, r3
}
 801de14:	46c0      	nop			@ (mov r8, r8)
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	681a      	ldr	r2, [r3, #0]
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	681b      	ldr	r3, [r3, #0]
 801de20:	2110      	movs	r1, #16
 801de22:	438a      	bics	r2, r1
 801de24:	601a      	str	r2, [r3, #0]
 801de26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de2a:	693b      	ldr	r3, [r7, #16]
 801de2c:	f383 8810 	msr	PRIMASK, r3
}
 801de30:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	69db      	ldr	r3, [r3, #28]
 801de38:	2210      	movs	r2, #16
 801de3a:	4013      	ands	r3, r2
 801de3c:	2b10      	cmp	r3, #16
 801de3e:	d103      	bne.n	801de48 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	681b      	ldr	r3, [r3, #0]
 801de44:	2210      	movs	r2, #16
 801de46:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	22ac      	movs	r2, #172	@ 0xac
 801de4c:	589b      	ldr	r3, [r3, r2]
 801de4e:	687a      	ldr	r2, [r7, #4]
 801de50:	2158      	movs	r1, #88	@ 0x58
 801de52:	5a51      	ldrh	r1, [r2, r1]
 801de54:	687a      	ldr	r2, [r7, #4]
 801de56:	0010      	movs	r0, r2
 801de58:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801de5a:	e00e      	b.n	801de7a <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	2294      	movs	r2, #148	@ 0x94
 801de60:	589b      	ldr	r3, [r3, r2]
 801de62:	687a      	ldr	r2, [r7, #4]
 801de64:	0010      	movs	r0, r2
 801de66:	4798      	blx	r3
}
 801de68:	e007      	b.n	801de7a <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	699a      	ldr	r2, [r3, #24]
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	2108      	movs	r1, #8
 801de76:	430a      	orrs	r2, r1
 801de78:	619a      	str	r2, [r3, #24]
}
 801de7a:	46c0      	nop			@ (mov r8, r8)
 801de7c:	46bd      	mov	sp, r7
 801de7e:	b014      	add	sp, #80	@ 0x50
 801de80:	bd80      	pop	{r7, pc}
 801de82:	46c0      	nop			@ (mov r8, r8)
 801de84:	fffffedf 	.word	0xfffffedf
 801de88:	40004800 	.word	0x40004800
 801de8c:	fbffffff 	.word	0xfbffffff

0801de90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b082      	sub	sp, #8
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801de98:	46c0      	nop			@ (mov r8, r8)
 801de9a:	46bd      	mov	sp, r7
 801de9c:	b002      	add	sp, #8
 801de9e:	bd80      	pop	{r7, pc}

0801dea0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801dea0:	b580      	push	{r7, lr}
 801dea2:	b084      	sub	sp, #16
 801dea4:	af00      	add	r7, sp, #0
 801dea6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	2244      	movs	r2, #68	@ 0x44
 801deac:	2100      	movs	r1, #0
 801deae:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801deb0:	4b05      	ldr	r3, [pc, #20]	@ (801dec8 <USB_EnableGlobalInt+0x28>)
 801deb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	b299      	uxth	r1, r3
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	2240      	movs	r2, #64	@ 0x40
 801debc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801debe:	2300      	movs	r3, #0
}
 801dec0:	0018      	movs	r0, r3
 801dec2:	46bd      	mov	sp, r7
 801dec4:	b004      	add	sp, #16
 801dec6:	bd80      	pop	{r7, pc}
 801dec8:	0000bf80 	.word	0x0000bf80

0801decc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801decc:	b580      	push	{r7, lr}
 801dece:	b084      	sub	sp, #16
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801ded4:	4b09      	ldr	r3, [pc, #36]	@ (801defc <USB_DisableGlobalInt+0x30>)
 801ded6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	2240      	movs	r2, #64	@ 0x40
 801dedc:	5a9b      	ldrh	r3, [r3, r2]
 801dede:	b29b      	uxth	r3, r3
 801dee0:	68fa      	ldr	r2, [r7, #12]
 801dee2:	b292      	uxth	r2, r2
 801dee4:	43d2      	mvns	r2, r2
 801dee6:	b292      	uxth	r2, r2
 801dee8:	4013      	ands	r3, r2
 801deea:	b299      	uxth	r1, r3
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	2240      	movs	r2, #64	@ 0x40
 801def0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801def2:	2300      	movs	r3, #0
}
 801def4:	0018      	movs	r0, r3
 801def6:	46bd      	mov	sp, r7
 801def8:	b004      	add	sp, #16
 801defa:	bd80      	pop	{r7, pc}
 801defc:	0000bf80 	.word	0x0000bf80

0801df00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801df00:	b084      	sub	sp, #16
 801df02:	b590      	push	{r4, r7, lr}
 801df04:	b083      	sub	sp, #12
 801df06:	af00      	add	r7, sp, #0
 801df08:	6078      	str	r0, [r7, #4]
 801df0a:	2004      	movs	r0, #4
 801df0c:	2410      	movs	r4, #16
 801df0e:	1900      	adds	r0, r0, r4
 801df10:	2408      	movs	r4, #8
 801df12:	46a4      	mov	ip, r4
 801df14:	44bc      	add	ip, r7
 801df16:	4460      	add	r0, ip
 801df18:	6001      	str	r1, [r0, #0]
 801df1a:	6042      	str	r2, [r0, #4]
 801df1c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	2240      	movs	r2, #64	@ 0x40
 801df22:	2101      	movs	r1, #1
 801df24:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	2240      	movs	r2, #64	@ 0x40
 801df2a:	2100      	movs	r1, #0
 801df2c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	2244      	movs	r2, #68	@ 0x44
 801df32:	2100      	movs	r1, #0
 801df34:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	2250      	movs	r2, #80	@ 0x50
 801df3a:	2100      	movs	r1, #0
 801df3c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801df3e:	2300      	movs	r3, #0
}
 801df40:	0018      	movs	r0, r3
 801df42:	46bd      	mov	sp, r7
 801df44:	b003      	add	sp, #12
 801df46:	bc90      	pop	{r4, r7}
 801df48:	bc08      	pop	{r3}
 801df4a:	b004      	add	sp, #16
 801df4c:	4718      	bx	r3
	...

0801df50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801df50:	b580      	push	{r7, lr}
 801df52:	b09c      	sub	sp, #112	@ 0x70
 801df54:	af00      	add	r7, sp, #0
 801df56:	6078      	str	r0, [r7, #4]
 801df58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801df5a:	236f      	movs	r3, #111	@ 0x6f
 801df5c:	18fb      	adds	r3, r7, r3
 801df5e:	2200      	movs	r2, #0
 801df60:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801df62:	687a      	ldr	r2, [r7, #4]
 801df64:	683b      	ldr	r3, [r7, #0]
 801df66:	781b      	ldrb	r3, [r3, #0]
 801df68:	009b      	lsls	r3, r3, #2
 801df6a:	18d3      	adds	r3, r2, r3
 801df6c:	881b      	ldrh	r3, [r3, #0]
 801df6e:	b29a      	uxth	r2, r3
 801df70:	236c      	movs	r3, #108	@ 0x6c
 801df72:	18fb      	adds	r3, r7, r3
 801df74:	49a3      	ldr	r1, [pc, #652]	@ (801e204 <USB_ActivateEndpoint+0x2b4>)
 801df76:	400a      	ands	r2, r1
 801df78:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801df7a:	683b      	ldr	r3, [r7, #0]
 801df7c:	78db      	ldrb	r3, [r3, #3]
 801df7e:	2b03      	cmp	r3, #3
 801df80:	d017      	beq.n	801dfb2 <USB_ActivateEndpoint+0x62>
 801df82:	dc28      	bgt.n	801dfd6 <USB_ActivateEndpoint+0x86>
 801df84:	2b02      	cmp	r3, #2
 801df86:	d00e      	beq.n	801dfa6 <USB_ActivateEndpoint+0x56>
 801df88:	dc25      	bgt.n	801dfd6 <USB_ActivateEndpoint+0x86>
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d002      	beq.n	801df94 <USB_ActivateEndpoint+0x44>
 801df8e:	2b01      	cmp	r3, #1
 801df90:	d018      	beq.n	801dfc4 <USB_ActivateEndpoint+0x74>
 801df92:	e020      	b.n	801dfd6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801df94:	226c      	movs	r2, #108	@ 0x6c
 801df96:	18bb      	adds	r3, r7, r2
 801df98:	18ba      	adds	r2, r7, r2
 801df9a:	8812      	ldrh	r2, [r2, #0]
 801df9c:	2180      	movs	r1, #128	@ 0x80
 801df9e:	0089      	lsls	r1, r1, #2
 801dfa0:	430a      	orrs	r2, r1
 801dfa2:	801a      	strh	r2, [r3, #0]
      break;
 801dfa4:	e01c      	b.n	801dfe0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801dfa6:	226c      	movs	r2, #108	@ 0x6c
 801dfa8:	18bb      	adds	r3, r7, r2
 801dfaa:	18ba      	adds	r2, r7, r2
 801dfac:	8812      	ldrh	r2, [r2, #0]
 801dfae:	801a      	strh	r2, [r3, #0]
      break;
 801dfb0:	e016      	b.n	801dfe0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801dfb2:	226c      	movs	r2, #108	@ 0x6c
 801dfb4:	18bb      	adds	r3, r7, r2
 801dfb6:	18ba      	adds	r2, r7, r2
 801dfb8:	8812      	ldrh	r2, [r2, #0]
 801dfba:	21c0      	movs	r1, #192	@ 0xc0
 801dfbc:	00c9      	lsls	r1, r1, #3
 801dfbe:	430a      	orrs	r2, r1
 801dfc0:	801a      	strh	r2, [r3, #0]
      break;
 801dfc2:	e00d      	b.n	801dfe0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801dfc4:	226c      	movs	r2, #108	@ 0x6c
 801dfc6:	18bb      	adds	r3, r7, r2
 801dfc8:	18ba      	adds	r2, r7, r2
 801dfca:	8812      	ldrh	r2, [r2, #0]
 801dfcc:	2180      	movs	r1, #128	@ 0x80
 801dfce:	00c9      	lsls	r1, r1, #3
 801dfd0:	430a      	orrs	r2, r1
 801dfd2:	801a      	strh	r2, [r3, #0]
      break;
 801dfd4:	e004      	b.n	801dfe0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801dfd6:	236f      	movs	r3, #111	@ 0x6f
 801dfd8:	18fb      	adds	r3, r7, r3
 801dfda:	2201      	movs	r2, #1
 801dfdc:	701a      	strb	r2, [r3, #0]
      break;
 801dfde:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801dfe0:	687a      	ldr	r2, [r7, #4]
 801dfe2:	683b      	ldr	r3, [r7, #0]
 801dfe4:	781b      	ldrb	r3, [r3, #0]
 801dfe6:	009b      	lsls	r3, r3, #2
 801dfe8:	18d3      	adds	r3, r2, r3
 801dfea:	226c      	movs	r2, #108	@ 0x6c
 801dfec:	18ba      	adds	r2, r7, r2
 801dfee:	8812      	ldrh	r2, [r2, #0]
 801dff0:	4985      	ldr	r1, [pc, #532]	@ (801e208 <USB_ActivateEndpoint+0x2b8>)
 801dff2:	430a      	orrs	r2, r1
 801dff4:	b292      	uxth	r2, r2
 801dff6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801dff8:	687a      	ldr	r2, [r7, #4]
 801dffa:	683b      	ldr	r3, [r7, #0]
 801dffc:	781b      	ldrb	r3, [r3, #0]
 801dffe:	009b      	lsls	r3, r3, #2
 801e000:	18d3      	adds	r3, r2, r3
 801e002:	881b      	ldrh	r3, [r3, #0]
 801e004:	b29b      	uxth	r3, r3
 801e006:	b21b      	sxth	r3, r3
 801e008:	4a80      	ldr	r2, [pc, #512]	@ (801e20c <USB_ActivateEndpoint+0x2bc>)
 801e00a:	4013      	ands	r3, r2
 801e00c:	b21a      	sxth	r2, r3
 801e00e:	683b      	ldr	r3, [r7, #0]
 801e010:	781b      	ldrb	r3, [r3, #0]
 801e012:	b21b      	sxth	r3, r3
 801e014:	4313      	orrs	r3, r2
 801e016:	b21a      	sxth	r2, r3
 801e018:	2166      	movs	r1, #102	@ 0x66
 801e01a:	187b      	adds	r3, r7, r1
 801e01c:	801a      	strh	r2, [r3, #0]
 801e01e:	687a      	ldr	r2, [r7, #4]
 801e020:	683b      	ldr	r3, [r7, #0]
 801e022:	781b      	ldrb	r3, [r3, #0]
 801e024:	009b      	lsls	r3, r3, #2
 801e026:	18d3      	adds	r3, r2, r3
 801e028:	187a      	adds	r2, r7, r1
 801e02a:	8812      	ldrh	r2, [r2, #0]
 801e02c:	4976      	ldr	r1, [pc, #472]	@ (801e208 <USB_ActivateEndpoint+0x2b8>)
 801e02e:	430a      	orrs	r2, r1
 801e030:	b292      	uxth	r2, r2
 801e032:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801e034:	683b      	ldr	r3, [r7, #0]
 801e036:	7b1b      	ldrb	r3, [r3, #12]
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d000      	beq.n	801e03e <USB_ActivateEndpoint+0xee>
 801e03c:	e178      	b.n	801e330 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801e03e:	683b      	ldr	r3, [r7, #0]
 801e040:	785b      	ldrb	r3, [r3, #1]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d100      	bne.n	801e048 <USB_ActivateEndpoint+0xf8>
 801e046:	e07a      	b.n	801e13e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	61bb      	str	r3, [r7, #24]
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	2250      	movs	r2, #80	@ 0x50
 801e050:	5a9b      	ldrh	r3, [r3, r2]
 801e052:	b29b      	uxth	r3, r3
 801e054:	001a      	movs	r2, r3
 801e056:	69bb      	ldr	r3, [r7, #24]
 801e058:	189b      	adds	r3, r3, r2
 801e05a:	61bb      	str	r3, [r7, #24]
 801e05c:	683b      	ldr	r3, [r7, #0]
 801e05e:	781b      	ldrb	r3, [r3, #0]
 801e060:	00da      	lsls	r2, r3, #3
 801e062:	69bb      	ldr	r3, [r7, #24]
 801e064:	18d3      	adds	r3, r2, r3
 801e066:	2280      	movs	r2, #128	@ 0x80
 801e068:	00d2      	lsls	r2, r2, #3
 801e06a:	4694      	mov	ip, r2
 801e06c:	4463      	add	r3, ip
 801e06e:	617b      	str	r3, [r7, #20]
 801e070:	683b      	ldr	r3, [r7, #0]
 801e072:	88db      	ldrh	r3, [r3, #6]
 801e074:	085b      	lsrs	r3, r3, #1
 801e076:	b29b      	uxth	r3, r3
 801e078:	18db      	adds	r3, r3, r3
 801e07a:	b29a      	uxth	r2, r3
 801e07c:	697b      	ldr	r3, [r7, #20]
 801e07e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e080:	687a      	ldr	r2, [r7, #4]
 801e082:	683b      	ldr	r3, [r7, #0]
 801e084:	781b      	ldrb	r3, [r3, #0]
 801e086:	009b      	lsls	r3, r3, #2
 801e088:	18d2      	adds	r2, r2, r3
 801e08a:	2112      	movs	r1, #18
 801e08c:	187b      	adds	r3, r7, r1
 801e08e:	8812      	ldrh	r2, [r2, #0]
 801e090:	801a      	strh	r2, [r3, #0]
 801e092:	187b      	adds	r3, r7, r1
 801e094:	881b      	ldrh	r3, [r3, #0]
 801e096:	2240      	movs	r2, #64	@ 0x40
 801e098:	4013      	ands	r3, r2
 801e09a:	d016      	beq.n	801e0ca <USB_ActivateEndpoint+0x17a>
 801e09c:	687a      	ldr	r2, [r7, #4]
 801e09e:	683b      	ldr	r3, [r7, #0]
 801e0a0:	781b      	ldrb	r3, [r3, #0]
 801e0a2:	009b      	lsls	r3, r3, #2
 801e0a4:	18d3      	adds	r3, r2, r3
 801e0a6:	881b      	ldrh	r3, [r3, #0]
 801e0a8:	b29a      	uxth	r2, r3
 801e0aa:	2010      	movs	r0, #16
 801e0ac:	183b      	adds	r3, r7, r0
 801e0ae:	4957      	ldr	r1, [pc, #348]	@ (801e20c <USB_ActivateEndpoint+0x2bc>)
 801e0b0:	400a      	ands	r2, r1
 801e0b2:	801a      	strh	r2, [r3, #0]
 801e0b4:	687a      	ldr	r2, [r7, #4]
 801e0b6:	683b      	ldr	r3, [r7, #0]
 801e0b8:	781b      	ldrb	r3, [r3, #0]
 801e0ba:	009b      	lsls	r3, r3, #2
 801e0bc:	18d3      	adds	r3, r2, r3
 801e0be:	183a      	adds	r2, r7, r0
 801e0c0:	8812      	ldrh	r2, [r2, #0]
 801e0c2:	4953      	ldr	r1, [pc, #332]	@ (801e210 <USB_ActivateEndpoint+0x2c0>)
 801e0c4:	430a      	orrs	r2, r1
 801e0c6:	b292      	uxth	r2, r2
 801e0c8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e0ca:	683b      	ldr	r3, [r7, #0]
 801e0cc:	78db      	ldrb	r3, [r3, #3]
 801e0ce:	2b01      	cmp	r3, #1
 801e0d0:	d01d      	beq.n	801e10e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e0d2:	687a      	ldr	r2, [r7, #4]
 801e0d4:	683b      	ldr	r3, [r7, #0]
 801e0d6:	781b      	ldrb	r3, [r3, #0]
 801e0d8:	009b      	lsls	r3, r3, #2
 801e0da:	18d3      	adds	r3, r2, r3
 801e0dc:	881b      	ldrh	r3, [r3, #0]
 801e0de:	b29a      	uxth	r2, r3
 801e0e0:	200c      	movs	r0, #12
 801e0e2:	183b      	adds	r3, r7, r0
 801e0e4:	494b      	ldr	r1, [pc, #300]	@ (801e214 <USB_ActivateEndpoint+0x2c4>)
 801e0e6:	400a      	ands	r2, r1
 801e0e8:	801a      	strh	r2, [r3, #0]
 801e0ea:	183b      	adds	r3, r7, r0
 801e0ec:	183a      	adds	r2, r7, r0
 801e0ee:	8812      	ldrh	r2, [r2, #0]
 801e0f0:	2120      	movs	r1, #32
 801e0f2:	404a      	eors	r2, r1
 801e0f4:	801a      	strh	r2, [r3, #0]
 801e0f6:	687a      	ldr	r2, [r7, #4]
 801e0f8:	683b      	ldr	r3, [r7, #0]
 801e0fa:	781b      	ldrb	r3, [r3, #0]
 801e0fc:	009b      	lsls	r3, r3, #2
 801e0fe:	18d3      	adds	r3, r2, r3
 801e100:	183a      	adds	r2, r7, r0
 801e102:	8812      	ldrh	r2, [r2, #0]
 801e104:	4940      	ldr	r1, [pc, #256]	@ (801e208 <USB_ActivateEndpoint+0x2b8>)
 801e106:	430a      	orrs	r2, r1
 801e108:	b292      	uxth	r2, r2
 801e10a:	801a      	strh	r2, [r3, #0]
 801e10c:	e2b4      	b.n	801e678 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e10e:	687a      	ldr	r2, [r7, #4]
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	781b      	ldrb	r3, [r3, #0]
 801e114:	009b      	lsls	r3, r3, #2
 801e116:	18d3      	adds	r3, r2, r3
 801e118:	881b      	ldrh	r3, [r3, #0]
 801e11a:	b29a      	uxth	r2, r3
 801e11c:	200e      	movs	r0, #14
 801e11e:	183b      	adds	r3, r7, r0
 801e120:	493c      	ldr	r1, [pc, #240]	@ (801e214 <USB_ActivateEndpoint+0x2c4>)
 801e122:	400a      	ands	r2, r1
 801e124:	801a      	strh	r2, [r3, #0]
 801e126:	687a      	ldr	r2, [r7, #4]
 801e128:	683b      	ldr	r3, [r7, #0]
 801e12a:	781b      	ldrb	r3, [r3, #0]
 801e12c:	009b      	lsls	r3, r3, #2
 801e12e:	18d3      	adds	r3, r2, r3
 801e130:	183a      	adds	r2, r7, r0
 801e132:	8812      	ldrh	r2, [r2, #0]
 801e134:	4934      	ldr	r1, [pc, #208]	@ (801e208 <USB_ActivateEndpoint+0x2b8>)
 801e136:	430a      	orrs	r2, r1
 801e138:	b292      	uxth	r2, r2
 801e13a:	801a      	strh	r2, [r3, #0]
 801e13c:	e29c      	b.n	801e678 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	633b      	str	r3, [r7, #48]	@ 0x30
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	2250      	movs	r2, #80	@ 0x50
 801e146:	5a9b      	ldrh	r3, [r3, r2]
 801e148:	b29b      	uxth	r3, r3
 801e14a:	001a      	movs	r2, r3
 801e14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e14e:	189b      	adds	r3, r3, r2
 801e150:	633b      	str	r3, [r7, #48]	@ 0x30
 801e152:	683b      	ldr	r3, [r7, #0]
 801e154:	781b      	ldrb	r3, [r3, #0]
 801e156:	00da      	lsls	r2, r3, #3
 801e158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e15a:	18d3      	adds	r3, r2, r3
 801e15c:	4a2e      	ldr	r2, [pc, #184]	@ (801e218 <USB_ActivateEndpoint+0x2c8>)
 801e15e:	4694      	mov	ip, r2
 801e160:	4463      	add	r3, ip
 801e162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e164:	683b      	ldr	r3, [r7, #0]
 801e166:	88db      	ldrh	r3, [r3, #6]
 801e168:	085b      	lsrs	r3, r3, #1
 801e16a:	b29b      	uxth	r3, r3
 801e16c:	18db      	adds	r3, r3, r3
 801e16e:	b29a      	uxth	r2, r3
 801e170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e172:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	2250      	movs	r2, #80	@ 0x50
 801e17c:	5a9b      	ldrh	r3, [r3, r2]
 801e17e:	b29b      	uxth	r3, r3
 801e180:	001a      	movs	r2, r3
 801e182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e184:	189b      	adds	r3, r3, r2
 801e186:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e188:	683b      	ldr	r3, [r7, #0]
 801e18a:	781b      	ldrb	r3, [r3, #0]
 801e18c:	00da      	lsls	r2, r3, #3
 801e18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e190:	18d3      	adds	r3, r2, r3
 801e192:	4a22      	ldr	r2, [pc, #136]	@ (801e21c <USB_ActivateEndpoint+0x2cc>)
 801e194:	4694      	mov	ip, r2
 801e196:	4463      	add	r3, ip
 801e198:	627b      	str	r3, [r7, #36]	@ 0x24
 801e19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e19c:	881b      	ldrh	r3, [r3, #0]
 801e19e:	b29b      	uxth	r3, r3
 801e1a0:	059b      	lsls	r3, r3, #22
 801e1a2:	0d9b      	lsrs	r3, r3, #22
 801e1a4:	b29a      	uxth	r2, r3
 801e1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1a8:	801a      	strh	r2, [r3, #0]
 801e1aa:	683b      	ldr	r3, [r7, #0]
 801e1ac:	691b      	ldr	r3, [r3, #16]
 801e1ae:	2b3e      	cmp	r3, #62	@ 0x3e
 801e1b0:	d91a      	bls.n	801e1e8 <USB_ActivateEndpoint+0x298>
 801e1b2:	683b      	ldr	r3, [r7, #0]
 801e1b4:	691b      	ldr	r3, [r3, #16]
 801e1b6:	095b      	lsrs	r3, r3, #5
 801e1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e1ba:	683b      	ldr	r3, [r7, #0]
 801e1bc:	691b      	ldr	r3, [r3, #16]
 801e1be:	221f      	movs	r2, #31
 801e1c0:	4013      	ands	r3, r2
 801e1c2:	d102      	bne.n	801e1ca <USB_ActivateEndpoint+0x27a>
 801e1c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e1c6:	3b01      	subs	r3, #1
 801e1c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1cc:	881b      	ldrh	r3, [r3, #0]
 801e1ce:	b29a      	uxth	r2, r3
 801e1d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e1d2:	b29b      	uxth	r3, r3
 801e1d4:	029b      	lsls	r3, r3, #10
 801e1d6:	b29b      	uxth	r3, r3
 801e1d8:	4313      	orrs	r3, r2
 801e1da:	b29b      	uxth	r3, r3
 801e1dc:	4a10      	ldr	r2, [pc, #64]	@ (801e220 <USB_ActivateEndpoint+0x2d0>)
 801e1de:	4313      	orrs	r3, r2
 801e1e0:	b29a      	uxth	r2, r3
 801e1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1e4:	801a      	strh	r2, [r3, #0]
 801e1e6:	e034      	b.n	801e252 <USB_ActivateEndpoint+0x302>
 801e1e8:	683b      	ldr	r3, [r7, #0]
 801e1ea:	691b      	ldr	r3, [r3, #16]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d119      	bne.n	801e224 <USB_ActivateEndpoint+0x2d4>
 801e1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1f2:	881b      	ldrh	r3, [r3, #0]
 801e1f4:	b29b      	uxth	r3, r3
 801e1f6:	4a0a      	ldr	r2, [pc, #40]	@ (801e220 <USB_ActivateEndpoint+0x2d0>)
 801e1f8:	4313      	orrs	r3, r2
 801e1fa:	b29a      	uxth	r2, r3
 801e1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e1fe:	801a      	strh	r2, [r3, #0]
 801e200:	e027      	b.n	801e252 <USB_ActivateEndpoint+0x302>
 801e202:	46c0      	nop			@ (mov r8, r8)
 801e204:	ffff898f 	.word	0xffff898f
 801e208:	ffff8080 	.word	0xffff8080
 801e20c:	ffff8f8f 	.word	0xffff8f8f
 801e210:	ffff80c0 	.word	0xffff80c0
 801e214:	ffff8fbf 	.word	0xffff8fbf
 801e218:	00000404 	.word	0x00000404
 801e21c:	00000406 	.word	0x00000406
 801e220:	ffff8000 	.word	0xffff8000
 801e224:	683b      	ldr	r3, [r7, #0]
 801e226:	691b      	ldr	r3, [r3, #16]
 801e228:	085b      	lsrs	r3, r3, #1
 801e22a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e22c:	683b      	ldr	r3, [r7, #0]
 801e22e:	691b      	ldr	r3, [r3, #16]
 801e230:	2201      	movs	r2, #1
 801e232:	4013      	ands	r3, r2
 801e234:	d002      	beq.n	801e23c <USB_ActivateEndpoint+0x2ec>
 801e236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e238:	3301      	adds	r3, #1
 801e23a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e23e:	881b      	ldrh	r3, [r3, #0]
 801e240:	b29a      	uxth	r2, r3
 801e242:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e244:	b29b      	uxth	r3, r3
 801e246:	029b      	lsls	r3, r3, #10
 801e248:	b29b      	uxth	r3, r3
 801e24a:	4313      	orrs	r3, r2
 801e24c:	b29a      	uxth	r2, r3
 801e24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e250:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e252:	687a      	ldr	r2, [r7, #4]
 801e254:	683b      	ldr	r3, [r7, #0]
 801e256:	781b      	ldrb	r3, [r3, #0]
 801e258:	009b      	lsls	r3, r3, #2
 801e25a:	18d2      	adds	r2, r2, r3
 801e25c:	2122      	movs	r1, #34	@ 0x22
 801e25e:	187b      	adds	r3, r7, r1
 801e260:	8812      	ldrh	r2, [r2, #0]
 801e262:	801a      	strh	r2, [r3, #0]
 801e264:	187b      	adds	r3, r7, r1
 801e266:	881a      	ldrh	r2, [r3, #0]
 801e268:	2380      	movs	r3, #128	@ 0x80
 801e26a:	01db      	lsls	r3, r3, #7
 801e26c:	4013      	ands	r3, r2
 801e26e:	d016      	beq.n	801e29e <USB_ActivateEndpoint+0x34e>
 801e270:	687a      	ldr	r2, [r7, #4]
 801e272:	683b      	ldr	r3, [r7, #0]
 801e274:	781b      	ldrb	r3, [r3, #0]
 801e276:	009b      	lsls	r3, r3, #2
 801e278:	18d3      	adds	r3, r2, r3
 801e27a:	881b      	ldrh	r3, [r3, #0]
 801e27c:	b29a      	uxth	r2, r3
 801e27e:	2020      	movs	r0, #32
 801e280:	183b      	adds	r3, r7, r0
 801e282:	49dd      	ldr	r1, [pc, #884]	@ (801e5f8 <USB_ActivateEndpoint+0x6a8>)
 801e284:	400a      	ands	r2, r1
 801e286:	801a      	strh	r2, [r3, #0]
 801e288:	687a      	ldr	r2, [r7, #4]
 801e28a:	683b      	ldr	r3, [r7, #0]
 801e28c:	781b      	ldrb	r3, [r3, #0]
 801e28e:	009b      	lsls	r3, r3, #2
 801e290:	18d3      	adds	r3, r2, r3
 801e292:	183a      	adds	r2, r7, r0
 801e294:	8812      	ldrh	r2, [r2, #0]
 801e296:	49d9      	ldr	r1, [pc, #868]	@ (801e5fc <USB_ActivateEndpoint+0x6ac>)
 801e298:	430a      	orrs	r2, r1
 801e29a:	b292      	uxth	r2, r2
 801e29c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801e29e:	683b      	ldr	r3, [r7, #0]
 801e2a0:	781b      	ldrb	r3, [r3, #0]
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d125      	bne.n	801e2f2 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e2a6:	687a      	ldr	r2, [r7, #4]
 801e2a8:	683b      	ldr	r3, [r7, #0]
 801e2aa:	781b      	ldrb	r3, [r3, #0]
 801e2ac:	009b      	lsls	r3, r3, #2
 801e2ae:	18d3      	adds	r3, r2, r3
 801e2b0:	881b      	ldrh	r3, [r3, #0]
 801e2b2:	b29a      	uxth	r2, r3
 801e2b4:	201c      	movs	r0, #28
 801e2b6:	183b      	adds	r3, r7, r0
 801e2b8:	49d1      	ldr	r1, [pc, #836]	@ (801e600 <USB_ActivateEndpoint+0x6b0>)
 801e2ba:	400a      	ands	r2, r1
 801e2bc:	801a      	strh	r2, [r3, #0]
 801e2be:	183b      	adds	r3, r7, r0
 801e2c0:	183a      	adds	r2, r7, r0
 801e2c2:	8812      	ldrh	r2, [r2, #0]
 801e2c4:	2180      	movs	r1, #128	@ 0x80
 801e2c6:	0149      	lsls	r1, r1, #5
 801e2c8:	404a      	eors	r2, r1
 801e2ca:	801a      	strh	r2, [r3, #0]
 801e2cc:	183b      	adds	r3, r7, r0
 801e2ce:	183a      	adds	r2, r7, r0
 801e2d0:	8812      	ldrh	r2, [r2, #0]
 801e2d2:	2180      	movs	r1, #128	@ 0x80
 801e2d4:	0189      	lsls	r1, r1, #6
 801e2d6:	404a      	eors	r2, r1
 801e2d8:	801a      	strh	r2, [r3, #0]
 801e2da:	687a      	ldr	r2, [r7, #4]
 801e2dc:	683b      	ldr	r3, [r7, #0]
 801e2de:	781b      	ldrb	r3, [r3, #0]
 801e2e0:	009b      	lsls	r3, r3, #2
 801e2e2:	18d3      	adds	r3, r2, r3
 801e2e4:	183a      	adds	r2, r7, r0
 801e2e6:	8812      	ldrh	r2, [r2, #0]
 801e2e8:	49c6      	ldr	r1, [pc, #792]	@ (801e604 <USB_ActivateEndpoint+0x6b4>)
 801e2ea:	430a      	orrs	r2, r1
 801e2ec:	b292      	uxth	r2, r2
 801e2ee:	801a      	strh	r2, [r3, #0]
 801e2f0:	e1c2      	b.n	801e678 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801e2f2:	687a      	ldr	r2, [r7, #4]
 801e2f4:	683b      	ldr	r3, [r7, #0]
 801e2f6:	781b      	ldrb	r3, [r3, #0]
 801e2f8:	009b      	lsls	r3, r3, #2
 801e2fa:	18d3      	adds	r3, r2, r3
 801e2fc:	881b      	ldrh	r3, [r3, #0]
 801e2fe:	b29a      	uxth	r2, r3
 801e300:	201e      	movs	r0, #30
 801e302:	183b      	adds	r3, r7, r0
 801e304:	49be      	ldr	r1, [pc, #760]	@ (801e600 <USB_ActivateEndpoint+0x6b0>)
 801e306:	400a      	ands	r2, r1
 801e308:	801a      	strh	r2, [r3, #0]
 801e30a:	183b      	adds	r3, r7, r0
 801e30c:	183a      	adds	r2, r7, r0
 801e30e:	8812      	ldrh	r2, [r2, #0]
 801e310:	2180      	movs	r1, #128	@ 0x80
 801e312:	0189      	lsls	r1, r1, #6
 801e314:	404a      	eors	r2, r1
 801e316:	801a      	strh	r2, [r3, #0]
 801e318:	687a      	ldr	r2, [r7, #4]
 801e31a:	683b      	ldr	r3, [r7, #0]
 801e31c:	781b      	ldrb	r3, [r3, #0]
 801e31e:	009b      	lsls	r3, r3, #2
 801e320:	18d3      	adds	r3, r2, r3
 801e322:	183a      	adds	r2, r7, r0
 801e324:	8812      	ldrh	r2, [r2, #0]
 801e326:	49b7      	ldr	r1, [pc, #732]	@ (801e604 <USB_ActivateEndpoint+0x6b4>)
 801e328:	430a      	orrs	r2, r1
 801e32a:	b292      	uxth	r2, r2
 801e32c:	801a      	strh	r2, [r3, #0]
 801e32e:	e1a3      	b.n	801e678 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801e330:	683b      	ldr	r3, [r7, #0]
 801e332:	78db      	ldrb	r3, [r3, #3]
 801e334:	2b02      	cmp	r3, #2
 801e336:	d117      	bne.n	801e368 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801e338:	687a      	ldr	r2, [r7, #4]
 801e33a:	683b      	ldr	r3, [r7, #0]
 801e33c:	781b      	ldrb	r3, [r3, #0]
 801e33e:	009b      	lsls	r3, r3, #2
 801e340:	18d3      	adds	r3, r2, r3
 801e342:	881b      	ldrh	r3, [r3, #0]
 801e344:	b29a      	uxth	r2, r3
 801e346:	2062      	movs	r0, #98	@ 0x62
 801e348:	183b      	adds	r3, r7, r0
 801e34a:	49ab      	ldr	r1, [pc, #684]	@ (801e5f8 <USB_ActivateEndpoint+0x6a8>)
 801e34c:	400a      	ands	r2, r1
 801e34e:	801a      	strh	r2, [r3, #0]
 801e350:	687a      	ldr	r2, [r7, #4]
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	781b      	ldrb	r3, [r3, #0]
 801e356:	009b      	lsls	r3, r3, #2
 801e358:	18d3      	adds	r3, r2, r3
 801e35a:	183a      	adds	r2, r7, r0
 801e35c:	8812      	ldrh	r2, [r2, #0]
 801e35e:	49aa      	ldr	r1, [pc, #680]	@ (801e608 <USB_ActivateEndpoint+0x6b8>)
 801e360:	430a      	orrs	r2, r1
 801e362:	b292      	uxth	r2, r2
 801e364:	801a      	strh	r2, [r3, #0]
 801e366:	e016      	b.n	801e396 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801e368:	687a      	ldr	r2, [r7, #4]
 801e36a:	683b      	ldr	r3, [r7, #0]
 801e36c:	781b      	ldrb	r3, [r3, #0]
 801e36e:	009b      	lsls	r3, r3, #2
 801e370:	18d3      	adds	r3, r2, r3
 801e372:	881b      	ldrh	r3, [r3, #0]
 801e374:	b29a      	uxth	r2, r3
 801e376:	2064      	movs	r0, #100	@ 0x64
 801e378:	183b      	adds	r3, r7, r0
 801e37a:	49a4      	ldr	r1, [pc, #656]	@ (801e60c <USB_ActivateEndpoint+0x6bc>)
 801e37c:	400a      	ands	r2, r1
 801e37e:	801a      	strh	r2, [r3, #0]
 801e380:	687a      	ldr	r2, [r7, #4]
 801e382:	683b      	ldr	r3, [r7, #0]
 801e384:	781b      	ldrb	r3, [r3, #0]
 801e386:	009b      	lsls	r3, r3, #2
 801e388:	18d3      	adds	r3, r2, r3
 801e38a:	183a      	adds	r2, r7, r0
 801e38c:	8812      	ldrh	r2, [r2, #0]
 801e38e:	499d      	ldr	r1, [pc, #628]	@ (801e604 <USB_ActivateEndpoint+0x6b4>)
 801e390:	430a      	orrs	r2, r1
 801e392:	b292      	uxth	r2, r2
 801e394:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	2250      	movs	r2, #80	@ 0x50
 801e39e:	5a9b      	ldrh	r3, [r3, r2]
 801e3a0:	b29b      	uxth	r3, r3
 801e3a2:	001a      	movs	r2, r3
 801e3a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e3a6:	189b      	adds	r3, r3, r2
 801e3a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e3aa:	683b      	ldr	r3, [r7, #0]
 801e3ac:	781b      	ldrb	r3, [r3, #0]
 801e3ae:	00da      	lsls	r2, r3, #3
 801e3b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e3b2:	18d3      	adds	r3, r2, r3
 801e3b4:	2280      	movs	r2, #128	@ 0x80
 801e3b6:	00d2      	lsls	r2, r2, #3
 801e3b8:	4694      	mov	ip, r2
 801e3ba:	4463      	add	r3, ip
 801e3bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e3be:	683b      	ldr	r3, [r7, #0]
 801e3c0:	891b      	ldrh	r3, [r3, #8]
 801e3c2:	085b      	lsrs	r3, r3, #1
 801e3c4:	b29b      	uxth	r3, r3
 801e3c6:	18db      	adds	r3, r3, r3
 801e3c8:	b29a      	uxth	r2, r3
 801e3ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e3cc:	801a      	strh	r2, [r3, #0]
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	657b      	str	r3, [r7, #84]	@ 0x54
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	2250      	movs	r2, #80	@ 0x50
 801e3d6:	5a9b      	ldrh	r3, [r3, r2]
 801e3d8:	b29b      	uxth	r3, r3
 801e3da:	001a      	movs	r2, r3
 801e3dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e3de:	189b      	adds	r3, r3, r2
 801e3e0:	657b      	str	r3, [r7, #84]	@ 0x54
 801e3e2:	683b      	ldr	r3, [r7, #0]
 801e3e4:	781b      	ldrb	r3, [r3, #0]
 801e3e6:	00da      	lsls	r2, r3, #3
 801e3e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e3ea:	18d3      	adds	r3, r2, r3
 801e3ec:	4a88      	ldr	r2, [pc, #544]	@ (801e610 <USB_ActivateEndpoint+0x6c0>)
 801e3ee:	4694      	mov	ip, r2
 801e3f0:	4463      	add	r3, ip
 801e3f2:	653b      	str	r3, [r7, #80]	@ 0x50
 801e3f4:	683b      	ldr	r3, [r7, #0]
 801e3f6:	895b      	ldrh	r3, [r3, #10]
 801e3f8:	085b      	lsrs	r3, r3, #1
 801e3fa:	b29b      	uxth	r3, r3
 801e3fc:	18db      	adds	r3, r3, r3
 801e3fe:	b29a      	uxth	r2, r3
 801e400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e402:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801e404:	683b      	ldr	r3, [r7, #0]
 801e406:	785b      	ldrb	r3, [r3, #1]
 801e408:	2b00      	cmp	r3, #0
 801e40a:	d000      	beq.n	801e40e <USB_ActivateEndpoint+0x4be>
 801e40c:	e087      	b.n	801e51e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e40e:	687a      	ldr	r2, [r7, #4]
 801e410:	683b      	ldr	r3, [r7, #0]
 801e412:	781b      	ldrb	r3, [r3, #0]
 801e414:	009b      	lsls	r3, r3, #2
 801e416:	18d2      	adds	r2, r2, r3
 801e418:	2140      	movs	r1, #64	@ 0x40
 801e41a:	187b      	adds	r3, r7, r1
 801e41c:	8812      	ldrh	r2, [r2, #0]
 801e41e:	801a      	strh	r2, [r3, #0]
 801e420:	187b      	adds	r3, r7, r1
 801e422:	881a      	ldrh	r2, [r3, #0]
 801e424:	2380      	movs	r3, #128	@ 0x80
 801e426:	01db      	lsls	r3, r3, #7
 801e428:	4013      	ands	r3, r2
 801e42a:	d016      	beq.n	801e45a <USB_ActivateEndpoint+0x50a>
 801e42c:	687a      	ldr	r2, [r7, #4]
 801e42e:	683b      	ldr	r3, [r7, #0]
 801e430:	781b      	ldrb	r3, [r3, #0]
 801e432:	009b      	lsls	r3, r3, #2
 801e434:	18d3      	adds	r3, r2, r3
 801e436:	881b      	ldrh	r3, [r3, #0]
 801e438:	b29a      	uxth	r2, r3
 801e43a:	203e      	movs	r0, #62	@ 0x3e
 801e43c:	183b      	adds	r3, r7, r0
 801e43e:	496e      	ldr	r1, [pc, #440]	@ (801e5f8 <USB_ActivateEndpoint+0x6a8>)
 801e440:	400a      	ands	r2, r1
 801e442:	801a      	strh	r2, [r3, #0]
 801e444:	687a      	ldr	r2, [r7, #4]
 801e446:	683b      	ldr	r3, [r7, #0]
 801e448:	781b      	ldrb	r3, [r3, #0]
 801e44a:	009b      	lsls	r3, r3, #2
 801e44c:	18d3      	adds	r3, r2, r3
 801e44e:	183a      	adds	r2, r7, r0
 801e450:	8812      	ldrh	r2, [r2, #0]
 801e452:	496a      	ldr	r1, [pc, #424]	@ (801e5fc <USB_ActivateEndpoint+0x6ac>)
 801e454:	430a      	orrs	r2, r1
 801e456:	b292      	uxth	r2, r2
 801e458:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e45a:	687a      	ldr	r2, [r7, #4]
 801e45c:	683b      	ldr	r3, [r7, #0]
 801e45e:	781b      	ldrb	r3, [r3, #0]
 801e460:	009b      	lsls	r3, r3, #2
 801e462:	18d2      	adds	r2, r2, r3
 801e464:	213c      	movs	r1, #60	@ 0x3c
 801e466:	187b      	adds	r3, r7, r1
 801e468:	8812      	ldrh	r2, [r2, #0]
 801e46a:	801a      	strh	r2, [r3, #0]
 801e46c:	187b      	adds	r3, r7, r1
 801e46e:	881b      	ldrh	r3, [r3, #0]
 801e470:	2240      	movs	r2, #64	@ 0x40
 801e472:	4013      	ands	r3, r2
 801e474:	d016      	beq.n	801e4a4 <USB_ActivateEndpoint+0x554>
 801e476:	687a      	ldr	r2, [r7, #4]
 801e478:	683b      	ldr	r3, [r7, #0]
 801e47a:	781b      	ldrb	r3, [r3, #0]
 801e47c:	009b      	lsls	r3, r3, #2
 801e47e:	18d3      	adds	r3, r2, r3
 801e480:	881b      	ldrh	r3, [r3, #0]
 801e482:	b29a      	uxth	r2, r3
 801e484:	203a      	movs	r0, #58	@ 0x3a
 801e486:	183b      	adds	r3, r7, r0
 801e488:	495b      	ldr	r1, [pc, #364]	@ (801e5f8 <USB_ActivateEndpoint+0x6a8>)
 801e48a:	400a      	ands	r2, r1
 801e48c:	801a      	strh	r2, [r3, #0]
 801e48e:	687a      	ldr	r2, [r7, #4]
 801e490:	683b      	ldr	r3, [r7, #0]
 801e492:	781b      	ldrb	r3, [r3, #0]
 801e494:	009b      	lsls	r3, r3, #2
 801e496:	18d3      	adds	r3, r2, r3
 801e498:	183a      	adds	r2, r7, r0
 801e49a:	8812      	ldrh	r2, [r2, #0]
 801e49c:	495d      	ldr	r1, [pc, #372]	@ (801e614 <USB_ActivateEndpoint+0x6c4>)
 801e49e:	430a      	orrs	r2, r1
 801e4a0:	b292      	uxth	r2, r2
 801e4a2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e4a4:	687a      	ldr	r2, [r7, #4]
 801e4a6:	683b      	ldr	r3, [r7, #0]
 801e4a8:	781b      	ldrb	r3, [r3, #0]
 801e4aa:	009b      	lsls	r3, r3, #2
 801e4ac:	18d3      	adds	r3, r2, r3
 801e4ae:	881b      	ldrh	r3, [r3, #0]
 801e4b0:	b29a      	uxth	r2, r3
 801e4b2:	2038      	movs	r0, #56	@ 0x38
 801e4b4:	183b      	adds	r3, r7, r0
 801e4b6:	4952      	ldr	r1, [pc, #328]	@ (801e600 <USB_ActivateEndpoint+0x6b0>)
 801e4b8:	400a      	ands	r2, r1
 801e4ba:	801a      	strh	r2, [r3, #0]
 801e4bc:	183b      	adds	r3, r7, r0
 801e4be:	183a      	adds	r2, r7, r0
 801e4c0:	8812      	ldrh	r2, [r2, #0]
 801e4c2:	2180      	movs	r1, #128	@ 0x80
 801e4c4:	0149      	lsls	r1, r1, #5
 801e4c6:	404a      	eors	r2, r1
 801e4c8:	801a      	strh	r2, [r3, #0]
 801e4ca:	183b      	adds	r3, r7, r0
 801e4cc:	183a      	adds	r2, r7, r0
 801e4ce:	8812      	ldrh	r2, [r2, #0]
 801e4d0:	2180      	movs	r1, #128	@ 0x80
 801e4d2:	0189      	lsls	r1, r1, #6
 801e4d4:	404a      	eors	r2, r1
 801e4d6:	801a      	strh	r2, [r3, #0]
 801e4d8:	687a      	ldr	r2, [r7, #4]
 801e4da:	683b      	ldr	r3, [r7, #0]
 801e4dc:	781b      	ldrb	r3, [r3, #0]
 801e4de:	009b      	lsls	r3, r3, #2
 801e4e0:	18d3      	adds	r3, r2, r3
 801e4e2:	183a      	adds	r2, r7, r0
 801e4e4:	8812      	ldrh	r2, [r2, #0]
 801e4e6:	4947      	ldr	r1, [pc, #284]	@ (801e604 <USB_ActivateEndpoint+0x6b4>)
 801e4e8:	430a      	orrs	r2, r1
 801e4ea:	b292      	uxth	r2, r2
 801e4ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e4ee:	687a      	ldr	r2, [r7, #4]
 801e4f0:	683b      	ldr	r3, [r7, #0]
 801e4f2:	781b      	ldrb	r3, [r3, #0]
 801e4f4:	009b      	lsls	r3, r3, #2
 801e4f6:	18d3      	adds	r3, r2, r3
 801e4f8:	881b      	ldrh	r3, [r3, #0]
 801e4fa:	b29a      	uxth	r2, r3
 801e4fc:	2036      	movs	r0, #54	@ 0x36
 801e4fe:	183b      	adds	r3, r7, r0
 801e500:	4945      	ldr	r1, [pc, #276]	@ (801e618 <USB_ActivateEndpoint+0x6c8>)
 801e502:	400a      	ands	r2, r1
 801e504:	801a      	strh	r2, [r3, #0]
 801e506:	687a      	ldr	r2, [r7, #4]
 801e508:	683b      	ldr	r3, [r7, #0]
 801e50a:	781b      	ldrb	r3, [r3, #0]
 801e50c:	009b      	lsls	r3, r3, #2
 801e50e:	18d3      	adds	r3, r2, r3
 801e510:	183a      	adds	r2, r7, r0
 801e512:	8812      	ldrh	r2, [r2, #0]
 801e514:	493b      	ldr	r1, [pc, #236]	@ (801e604 <USB_ActivateEndpoint+0x6b4>)
 801e516:	430a      	orrs	r2, r1
 801e518:	b292      	uxth	r2, r2
 801e51a:	801a      	strh	r2, [r3, #0]
 801e51c:	e0ac      	b.n	801e678 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e51e:	687a      	ldr	r2, [r7, #4]
 801e520:	683b      	ldr	r3, [r7, #0]
 801e522:	781b      	ldrb	r3, [r3, #0]
 801e524:	009b      	lsls	r3, r3, #2
 801e526:	18d2      	adds	r2, r2, r3
 801e528:	214e      	movs	r1, #78	@ 0x4e
 801e52a:	187b      	adds	r3, r7, r1
 801e52c:	8812      	ldrh	r2, [r2, #0]
 801e52e:	801a      	strh	r2, [r3, #0]
 801e530:	187b      	adds	r3, r7, r1
 801e532:	881a      	ldrh	r2, [r3, #0]
 801e534:	2380      	movs	r3, #128	@ 0x80
 801e536:	01db      	lsls	r3, r3, #7
 801e538:	4013      	ands	r3, r2
 801e53a:	d016      	beq.n	801e56a <USB_ActivateEndpoint+0x61a>
 801e53c:	687a      	ldr	r2, [r7, #4]
 801e53e:	683b      	ldr	r3, [r7, #0]
 801e540:	781b      	ldrb	r3, [r3, #0]
 801e542:	009b      	lsls	r3, r3, #2
 801e544:	18d3      	adds	r3, r2, r3
 801e546:	881b      	ldrh	r3, [r3, #0]
 801e548:	b29a      	uxth	r2, r3
 801e54a:	204c      	movs	r0, #76	@ 0x4c
 801e54c:	183b      	adds	r3, r7, r0
 801e54e:	492a      	ldr	r1, [pc, #168]	@ (801e5f8 <USB_ActivateEndpoint+0x6a8>)
 801e550:	400a      	ands	r2, r1
 801e552:	801a      	strh	r2, [r3, #0]
 801e554:	687a      	ldr	r2, [r7, #4]
 801e556:	683b      	ldr	r3, [r7, #0]
 801e558:	781b      	ldrb	r3, [r3, #0]
 801e55a:	009b      	lsls	r3, r3, #2
 801e55c:	18d3      	adds	r3, r2, r3
 801e55e:	183a      	adds	r2, r7, r0
 801e560:	8812      	ldrh	r2, [r2, #0]
 801e562:	4926      	ldr	r1, [pc, #152]	@ (801e5fc <USB_ActivateEndpoint+0x6ac>)
 801e564:	430a      	orrs	r2, r1
 801e566:	b292      	uxth	r2, r2
 801e568:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e56a:	687a      	ldr	r2, [r7, #4]
 801e56c:	683b      	ldr	r3, [r7, #0]
 801e56e:	781b      	ldrb	r3, [r3, #0]
 801e570:	009b      	lsls	r3, r3, #2
 801e572:	18d2      	adds	r2, r2, r3
 801e574:	214a      	movs	r1, #74	@ 0x4a
 801e576:	187b      	adds	r3, r7, r1
 801e578:	8812      	ldrh	r2, [r2, #0]
 801e57a:	801a      	strh	r2, [r3, #0]
 801e57c:	187b      	adds	r3, r7, r1
 801e57e:	881b      	ldrh	r3, [r3, #0]
 801e580:	2240      	movs	r2, #64	@ 0x40
 801e582:	4013      	ands	r3, r2
 801e584:	d016      	beq.n	801e5b4 <USB_ActivateEndpoint+0x664>
 801e586:	687a      	ldr	r2, [r7, #4]
 801e588:	683b      	ldr	r3, [r7, #0]
 801e58a:	781b      	ldrb	r3, [r3, #0]
 801e58c:	009b      	lsls	r3, r3, #2
 801e58e:	18d3      	adds	r3, r2, r3
 801e590:	881b      	ldrh	r3, [r3, #0]
 801e592:	b29a      	uxth	r2, r3
 801e594:	2048      	movs	r0, #72	@ 0x48
 801e596:	183b      	adds	r3, r7, r0
 801e598:	4917      	ldr	r1, [pc, #92]	@ (801e5f8 <USB_ActivateEndpoint+0x6a8>)
 801e59a:	400a      	ands	r2, r1
 801e59c:	801a      	strh	r2, [r3, #0]
 801e59e:	687a      	ldr	r2, [r7, #4]
 801e5a0:	683b      	ldr	r3, [r7, #0]
 801e5a2:	781b      	ldrb	r3, [r3, #0]
 801e5a4:	009b      	lsls	r3, r3, #2
 801e5a6:	18d3      	adds	r3, r2, r3
 801e5a8:	183a      	adds	r2, r7, r0
 801e5aa:	8812      	ldrh	r2, [r2, #0]
 801e5ac:	4919      	ldr	r1, [pc, #100]	@ (801e614 <USB_ActivateEndpoint+0x6c4>)
 801e5ae:	430a      	orrs	r2, r1
 801e5b0:	b292      	uxth	r2, r2
 801e5b2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e5b4:	683b      	ldr	r3, [r7, #0]
 801e5b6:	78db      	ldrb	r3, [r3, #3]
 801e5b8:	2b01      	cmp	r3, #1
 801e5ba:	d02f      	beq.n	801e61c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e5bc:	687a      	ldr	r2, [r7, #4]
 801e5be:	683b      	ldr	r3, [r7, #0]
 801e5c0:	781b      	ldrb	r3, [r3, #0]
 801e5c2:	009b      	lsls	r3, r3, #2
 801e5c4:	18d3      	adds	r3, r2, r3
 801e5c6:	881b      	ldrh	r3, [r3, #0]
 801e5c8:	b29a      	uxth	r2, r3
 801e5ca:	2044      	movs	r0, #68	@ 0x44
 801e5cc:	183b      	adds	r3, r7, r0
 801e5ce:	4912      	ldr	r1, [pc, #72]	@ (801e618 <USB_ActivateEndpoint+0x6c8>)
 801e5d0:	400a      	ands	r2, r1
 801e5d2:	801a      	strh	r2, [r3, #0]
 801e5d4:	183b      	adds	r3, r7, r0
 801e5d6:	183a      	adds	r2, r7, r0
 801e5d8:	8812      	ldrh	r2, [r2, #0]
 801e5da:	2120      	movs	r1, #32
 801e5dc:	404a      	eors	r2, r1
 801e5de:	801a      	strh	r2, [r3, #0]
 801e5e0:	687a      	ldr	r2, [r7, #4]
 801e5e2:	683b      	ldr	r3, [r7, #0]
 801e5e4:	781b      	ldrb	r3, [r3, #0]
 801e5e6:	009b      	lsls	r3, r3, #2
 801e5e8:	18d3      	adds	r3, r2, r3
 801e5ea:	183a      	adds	r2, r7, r0
 801e5ec:	8812      	ldrh	r2, [r2, #0]
 801e5ee:	4905      	ldr	r1, [pc, #20]	@ (801e604 <USB_ActivateEndpoint+0x6b4>)
 801e5f0:	430a      	orrs	r2, r1
 801e5f2:	b292      	uxth	r2, r2
 801e5f4:	801a      	strh	r2, [r3, #0]
 801e5f6:	e028      	b.n	801e64a <USB_ActivateEndpoint+0x6fa>
 801e5f8:	ffff8f8f 	.word	0xffff8f8f
 801e5fc:	ffffc080 	.word	0xffffc080
 801e600:	ffffbf8f 	.word	0xffffbf8f
 801e604:	ffff8080 	.word	0xffff8080
 801e608:	ffff8180 	.word	0xffff8180
 801e60c:	ffff8e8f 	.word	0xffff8e8f
 801e610:	00000404 	.word	0x00000404
 801e614:	ffff80c0 	.word	0xffff80c0
 801e618:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e61c:	687a      	ldr	r2, [r7, #4]
 801e61e:	683b      	ldr	r3, [r7, #0]
 801e620:	781b      	ldrb	r3, [r3, #0]
 801e622:	009b      	lsls	r3, r3, #2
 801e624:	18d3      	adds	r3, r2, r3
 801e626:	881b      	ldrh	r3, [r3, #0]
 801e628:	b29a      	uxth	r2, r3
 801e62a:	2046      	movs	r0, #70	@ 0x46
 801e62c:	183b      	adds	r3, r7, r0
 801e62e:	4916      	ldr	r1, [pc, #88]	@ (801e688 <USB_ActivateEndpoint+0x738>)
 801e630:	400a      	ands	r2, r1
 801e632:	801a      	strh	r2, [r3, #0]
 801e634:	687a      	ldr	r2, [r7, #4]
 801e636:	683b      	ldr	r3, [r7, #0]
 801e638:	781b      	ldrb	r3, [r3, #0]
 801e63a:	009b      	lsls	r3, r3, #2
 801e63c:	18d3      	adds	r3, r2, r3
 801e63e:	183a      	adds	r2, r7, r0
 801e640:	8812      	ldrh	r2, [r2, #0]
 801e642:	4912      	ldr	r1, [pc, #72]	@ (801e68c <USB_ActivateEndpoint+0x73c>)
 801e644:	430a      	orrs	r2, r1
 801e646:	b292      	uxth	r2, r2
 801e648:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e64a:	687a      	ldr	r2, [r7, #4]
 801e64c:	683b      	ldr	r3, [r7, #0]
 801e64e:	781b      	ldrb	r3, [r3, #0]
 801e650:	009b      	lsls	r3, r3, #2
 801e652:	18d3      	adds	r3, r2, r3
 801e654:	881b      	ldrh	r3, [r3, #0]
 801e656:	b29a      	uxth	r2, r3
 801e658:	2042      	movs	r0, #66	@ 0x42
 801e65a:	183b      	adds	r3, r7, r0
 801e65c:	490c      	ldr	r1, [pc, #48]	@ (801e690 <USB_ActivateEndpoint+0x740>)
 801e65e:	400a      	ands	r2, r1
 801e660:	801a      	strh	r2, [r3, #0]
 801e662:	687a      	ldr	r2, [r7, #4]
 801e664:	683b      	ldr	r3, [r7, #0]
 801e666:	781b      	ldrb	r3, [r3, #0]
 801e668:	009b      	lsls	r3, r3, #2
 801e66a:	18d3      	adds	r3, r2, r3
 801e66c:	183a      	adds	r2, r7, r0
 801e66e:	8812      	ldrh	r2, [r2, #0]
 801e670:	4906      	ldr	r1, [pc, #24]	@ (801e68c <USB_ActivateEndpoint+0x73c>)
 801e672:	430a      	orrs	r2, r1
 801e674:	b292      	uxth	r2, r2
 801e676:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801e678:	236f      	movs	r3, #111	@ 0x6f
 801e67a:	18fb      	adds	r3, r7, r3
 801e67c:	781b      	ldrb	r3, [r3, #0]
}
 801e67e:	0018      	movs	r0, r3
 801e680:	46bd      	mov	sp, r7
 801e682:	b01c      	add	sp, #112	@ 0x70
 801e684:	bd80      	pop	{r7, pc}
 801e686:	46c0      	nop			@ (mov r8, r8)
 801e688:	ffff8fbf 	.word	0xffff8fbf
 801e68c:	ffff8080 	.word	0xffff8080
 801e690:	ffffbf8f 	.word	0xffffbf8f

0801e694 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e694:	b580      	push	{r7, lr}
 801e696:	b08c      	sub	sp, #48	@ 0x30
 801e698:	af00      	add	r7, sp, #0
 801e69a:	6078      	str	r0, [r7, #4]
 801e69c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801e69e:	683b      	ldr	r3, [r7, #0]
 801e6a0:	7b1b      	ldrb	r3, [r3, #12]
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d000      	beq.n	801e6a8 <USB_DeactivateEndpoint+0x14>
 801e6a6:	e07e      	b.n	801e7a6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801e6a8:	683b      	ldr	r3, [r7, #0]
 801e6aa:	785b      	ldrb	r3, [r3, #1]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d03c      	beq.n	801e72a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e6b0:	687a      	ldr	r2, [r7, #4]
 801e6b2:	683b      	ldr	r3, [r7, #0]
 801e6b4:	781b      	ldrb	r3, [r3, #0]
 801e6b6:	009b      	lsls	r3, r3, #2
 801e6b8:	18d2      	adds	r2, r2, r3
 801e6ba:	210c      	movs	r1, #12
 801e6bc:	187b      	adds	r3, r7, r1
 801e6be:	8812      	ldrh	r2, [r2, #0]
 801e6c0:	801a      	strh	r2, [r3, #0]
 801e6c2:	187b      	adds	r3, r7, r1
 801e6c4:	881b      	ldrh	r3, [r3, #0]
 801e6c6:	2240      	movs	r2, #64	@ 0x40
 801e6c8:	4013      	ands	r3, r2
 801e6ca:	d016      	beq.n	801e6fa <USB_DeactivateEndpoint+0x66>
 801e6cc:	687a      	ldr	r2, [r7, #4]
 801e6ce:	683b      	ldr	r3, [r7, #0]
 801e6d0:	781b      	ldrb	r3, [r3, #0]
 801e6d2:	009b      	lsls	r3, r3, #2
 801e6d4:	18d3      	adds	r3, r2, r3
 801e6d6:	881b      	ldrh	r3, [r3, #0]
 801e6d8:	b29a      	uxth	r2, r3
 801e6da:	200a      	movs	r0, #10
 801e6dc:	183b      	adds	r3, r7, r0
 801e6de:	49c7      	ldr	r1, [pc, #796]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e6e0:	400a      	ands	r2, r1
 801e6e2:	801a      	strh	r2, [r3, #0]
 801e6e4:	687a      	ldr	r2, [r7, #4]
 801e6e6:	683b      	ldr	r3, [r7, #0]
 801e6e8:	781b      	ldrb	r3, [r3, #0]
 801e6ea:	009b      	lsls	r3, r3, #2
 801e6ec:	18d3      	adds	r3, r2, r3
 801e6ee:	183a      	adds	r2, r7, r0
 801e6f0:	8812      	ldrh	r2, [r2, #0]
 801e6f2:	49c3      	ldr	r1, [pc, #780]	@ (801ea00 <USB_DeactivateEndpoint+0x36c>)
 801e6f4:	430a      	orrs	r2, r1
 801e6f6:	b292      	uxth	r2, r2
 801e6f8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e6fa:	687a      	ldr	r2, [r7, #4]
 801e6fc:	683b      	ldr	r3, [r7, #0]
 801e6fe:	781b      	ldrb	r3, [r3, #0]
 801e700:	009b      	lsls	r3, r3, #2
 801e702:	18d3      	adds	r3, r2, r3
 801e704:	881b      	ldrh	r3, [r3, #0]
 801e706:	b29a      	uxth	r2, r3
 801e708:	2008      	movs	r0, #8
 801e70a:	183b      	adds	r3, r7, r0
 801e70c:	49bd      	ldr	r1, [pc, #756]	@ (801ea04 <USB_DeactivateEndpoint+0x370>)
 801e70e:	400a      	ands	r2, r1
 801e710:	801a      	strh	r2, [r3, #0]
 801e712:	687a      	ldr	r2, [r7, #4]
 801e714:	683b      	ldr	r3, [r7, #0]
 801e716:	781b      	ldrb	r3, [r3, #0]
 801e718:	009b      	lsls	r3, r3, #2
 801e71a:	18d3      	adds	r3, r2, r3
 801e71c:	183a      	adds	r2, r7, r0
 801e71e:	8812      	ldrh	r2, [r2, #0]
 801e720:	49b9      	ldr	r1, [pc, #740]	@ (801ea08 <USB_DeactivateEndpoint+0x374>)
 801e722:	430a      	orrs	r2, r1
 801e724:	b292      	uxth	r2, r2
 801e726:	801a      	strh	r2, [r3, #0]
 801e728:	e163      	b.n	801e9f2 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e72a:	687a      	ldr	r2, [r7, #4]
 801e72c:	683b      	ldr	r3, [r7, #0]
 801e72e:	781b      	ldrb	r3, [r3, #0]
 801e730:	009b      	lsls	r3, r3, #2
 801e732:	18d2      	adds	r2, r2, r3
 801e734:	2112      	movs	r1, #18
 801e736:	187b      	adds	r3, r7, r1
 801e738:	8812      	ldrh	r2, [r2, #0]
 801e73a:	801a      	strh	r2, [r3, #0]
 801e73c:	187b      	adds	r3, r7, r1
 801e73e:	881a      	ldrh	r2, [r3, #0]
 801e740:	2380      	movs	r3, #128	@ 0x80
 801e742:	01db      	lsls	r3, r3, #7
 801e744:	4013      	ands	r3, r2
 801e746:	d016      	beq.n	801e776 <USB_DeactivateEndpoint+0xe2>
 801e748:	687a      	ldr	r2, [r7, #4]
 801e74a:	683b      	ldr	r3, [r7, #0]
 801e74c:	781b      	ldrb	r3, [r3, #0]
 801e74e:	009b      	lsls	r3, r3, #2
 801e750:	18d3      	adds	r3, r2, r3
 801e752:	881b      	ldrh	r3, [r3, #0]
 801e754:	b29a      	uxth	r2, r3
 801e756:	2010      	movs	r0, #16
 801e758:	183b      	adds	r3, r7, r0
 801e75a:	49a8      	ldr	r1, [pc, #672]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e75c:	400a      	ands	r2, r1
 801e75e:	801a      	strh	r2, [r3, #0]
 801e760:	687a      	ldr	r2, [r7, #4]
 801e762:	683b      	ldr	r3, [r7, #0]
 801e764:	781b      	ldrb	r3, [r3, #0]
 801e766:	009b      	lsls	r3, r3, #2
 801e768:	18d3      	adds	r3, r2, r3
 801e76a:	183a      	adds	r2, r7, r0
 801e76c:	8812      	ldrh	r2, [r2, #0]
 801e76e:	49a7      	ldr	r1, [pc, #668]	@ (801ea0c <USB_DeactivateEndpoint+0x378>)
 801e770:	430a      	orrs	r2, r1
 801e772:	b292      	uxth	r2, r2
 801e774:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e776:	687a      	ldr	r2, [r7, #4]
 801e778:	683b      	ldr	r3, [r7, #0]
 801e77a:	781b      	ldrb	r3, [r3, #0]
 801e77c:	009b      	lsls	r3, r3, #2
 801e77e:	18d3      	adds	r3, r2, r3
 801e780:	881b      	ldrh	r3, [r3, #0]
 801e782:	b29a      	uxth	r2, r3
 801e784:	200e      	movs	r0, #14
 801e786:	183b      	adds	r3, r7, r0
 801e788:	49a1      	ldr	r1, [pc, #644]	@ (801ea10 <USB_DeactivateEndpoint+0x37c>)
 801e78a:	400a      	ands	r2, r1
 801e78c:	801a      	strh	r2, [r3, #0]
 801e78e:	687a      	ldr	r2, [r7, #4]
 801e790:	683b      	ldr	r3, [r7, #0]
 801e792:	781b      	ldrb	r3, [r3, #0]
 801e794:	009b      	lsls	r3, r3, #2
 801e796:	18d3      	adds	r3, r2, r3
 801e798:	183a      	adds	r2, r7, r0
 801e79a:	8812      	ldrh	r2, [r2, #0]
 801e79c:	499a      	ldr	r1, [pc, #616]	@ (801ea08 <USB_DeactivateEndpoint+0x374>)
 801e79e:	430a      	orrs	r2, r1
 801e7a0:	b292      	uxth	r2, r2
 801e7a2:	801a      	strh	r2, [r3, #0]
 801e7a4:	e125      	b.n	801e9f2 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801e7a6:	683b      	ldr	r3, [r7, #0]
 801e7a8:	785b      	ldrb	r3, [r3, #1]
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	d000      	beq.n	801e7b0 <USB_DeactivateEndpoint+0x11c>
 801e7ae:	e090      	b.n	801e8d2 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e7b0:	687a      	ldr	r2, [r7, #4]
 801e7b2:	683b      	ldr	r3, [r7, #0]
 801e7b4:	781b      	ldrb	r3, [r3, #0]
 801e7b6:	009b      	lsls	r3, r3, #2
 801e7b8:	18d2      	adds	r2, r2, r3
 801e7ba:	2120      	movs	r1, #32
 801e7bc:	187b      	adds	r3, r7, r1
 801e7be:	8812      	ldrh	r2, [r2, #0]
 801e7c0:	801a      	strh	r2, [r3, #0]
 801e7c2:	187b      	adds	r3, r7, r1
 801e7c4:	881a      	ldrh	r2, [r3, #0]
 801e7c6:	2380      	movs	r3, #128	@ 0x80
 801e7c8:	01db      	lsls	r3, r3, #7
 801e7ca:	4013      	ands	r3, r2
 801e7cc:	d016      	beq.n	801e7fc <USB_DeactivateEndpoint+0x168>
 801e7ce:	687a      	ldr	r2, [r7, #4]
 801e7d0:	683b      	ldr	r3, [r7, #0]
 801e7d2:	781b      	ldrb	r3, [r3, #0]
 801e7d4:	009b      	lsls	r3, r3, #2
 801e7d6:	18d3      	adds	r3, r2, r3
 801e7d8:	881b      	ldrh	r3, [r3, #0]
 801e7da:	b29a      	uxth	r2, r3
 801e7dc:	201e      	movs	r0, #30
 801e7de:	183b      	adds	r3, r7, r0
 801e7e0:	4986      	ldr	r1, [pc, #536]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e7e2:	400a      	ands	r2, r1
 801e7e4:	801a      	strh	r2, [r3, #0]
 801e7e6:	687a      	ldr	r2, [r7, #4]
 801e7e8:	683b      	ldr	r3, [r7, #0]
 801e7ea:	781b      	ldrb	r3, [r3, #0]
 801e7ec:	009b      	lsls	r3, r3, #2
 801e7ee:	18d3      	adds	r3, r2, r3
 801e7f0:	183a      	adds	r2, r7, r0
 801e7f2:	8812      	ldrh	r2, [r2, #0]
 801e7f4:	4985      	ldr	r1, [pc, #532]	@ (801ea0c <USB_DeactivateEndpoint+0x378>)
 801e7f6:	430a      	orrs	r2, r1
 801e7f8:	b292      	uxth	r2, r2
 801e7fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e7fc:	687a      	ldr	r2, [r7, #4]
 801e7fe:	683b      	ldr	r3, [r7, #0]
 801e800:	781b      	ldrb	r3, [r3, #0]
 801e802:	009b      	lsls	r3, r3, #2
 801e804:	18d2      	adds	r2, r2, r3
 801e806:	211c      	movs	r1, #28
 801e808:	187b      	adds	r3, r7, r1
 801e80a:	8812      	ldrh	r2, [r2, #0]
 801e80c:	801a      	strh	r2, [r3, #0]
 801e80e:	187b      	adds	r3, r7, r1
 801e810:	881b      	ldrh	r3, [r3, #0]
 801e812:	2240      	movs	r2, #64	@ 0x40
 801e814:	4013      	ands	r3, r2
 801e816:	d016      	beq.n	801e846 <USB_DeactivateEndpoint+0x1b2>
 801e818:	687a      	ldr	r2, [r7, #4]
 801e81a:	683b      	ldr	r3, [r7, #0]
 801e81c:	781b      	ldrb	r3, [r3, #0]
 801e81e:	009b      	lsls	r3, r3, #2
 801e820:	18d3      	adds	r3, r2, r3
 801e822:	881b      	ldrh	r3, [r3, #0]
 801e824:	b29a      	uxth	r2, r3
 801e826:	201a      	movs	r0, #26
 801e828:	183b      	adds	r3, r7, r0
 801e82a:	4974      	ldr	r1, [pc, #464]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e82c:	400a      	ands	r2, r1
 801e82e:	801a      	strh	r2, [r3, #0]
 801e830:	687a      	ldr	r2, [r7, #4]
 801e832:	683b      	ldr	r3, [r7, #0]
 801e834:	781b      	ldrb	r3, [r3, #0]
 801e836:	009b      	lsls	r3, r3, #2
 801e838:	18d3      	adds	r3, r2, r3
 801e83a:	183a      	adds	r2, r7, r0
 801e83c:	8812      	ldrh	r2, [r2, #0]
 801e83e:	4970      	ldr	r1, [pc, #448]	@ (801ea00 <USB_DeactivateEndpoint+0x36c>)
 801e840:	430a      	orrs	r2, r1
 801e842:	b292      	uxth	r2, r2
 801e844:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801e846:	687a      	ldr	r2, [r7, #4]
 801e848:	683b      	ldr	r3, [r7, #0]
 801e84a:	781b      	ldrb	r3, [r3, #0]
 801e84c:	009b      	lsls	r3, r3, #2
 801e84e:	18d3      	adds	r3, r2, r3
 801e850:	881b      	ldrh	r3, [r3, #0]
 801e852:	b29a      	uxth	r2, r3
 801e854:	2018      	movs	r0, #24
 801e856:	183b      	adds	r3, r7, r0
 801e858:	4968      	ldr	r1, [pc, #416]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e85a:	400a      	ands	r2, r1
 801e85c:	801a      	strh	r2, [r3, #0]
 801e85e:	687a      	ldr	r2, [r7, #4]
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	781b      	ldrb	r3, [r3, #0]
 801e864:	009b      	lsls	r3, r3, #2
 801e866:	18d3      	adds	r3, r2, r3
 801e868:	183a      	adds	r2, r7, r0
 801e86a:	8812      	ldrh	r2, [r2, #0]
 801e86c:	4964      	ldr	r1, [pc, #400]	@ (801ea00 <USB_DeactivateEndpoint+0x36c>)
 801e86e:	430a      	orrs	r2, r1
 801e870:	b292      	uxth	r2, r2
 801e872:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e874:	687a      	ldr	r2, [r7, #4]
 801e876:	683b      	ldr	r3, [r7, #0]
 801e878:	781b      	ldrb	r3, [r3, #0]
 801e87a:	009b      	lsls	r3, r3, #2
 801e87c:	18d3      	adds	r3, r2, r3
 801e87e:	881b      	ldrh	r3, [r3, #0]
 801e880:	b29a      	uxth	r2, r3
 801e882:	2016      	movs	r0, #22
 801e884:	183b      	adds	r3, r7, r0
 801e886:	4962      	ldr	r1, [pc, #392]	@ (801ea10 <USB_DeactivateEndpoint+0x37c>)
 801e888:	400a      	ands	r2, r1
 801e88a:	801a      	strh	r2, [r3, #0]
 801e88c:	687a      	ldr	r2, [r7, #4]
 801e88e:	683b      	ldr	r3, [r7, #0]
 801e890:	781b      	ldrb	r3, [r3, #0]
 801e892:	009b      	lsls	r3, r3, #2
 801e894:	18d3      	adds	r3, r2, r3
 801e896:	183a      	adds	r2, r7, r0
 801e898:	8812      	ldrh	r2, [r2, #0]
 801e89a:	495b      	ldr	r1, [pc, #364]	@ (801ea08 <USB_DeactivateEndpoint+0x374>)
 801e89c:	430a      	orrs	r2, r1
 801e89e:	b292      	uxth	r2, r2
 801e8a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e8a2:	687a      	ldr	r2, [r7, #4]
 801e8a4:	683b      	ldr	r3, [r7, #0]
 801e8a6:	781b      	ldrb	r3, [r3, #0]
 801e8a8:	009b      	lsls	r3, r3, #2
 801e8aa:	18d3      	adds	r3, r2, r3
 801e8ac:	881b      	ldrh	r3, [r3, #0]
 801e8ae:	b29a      	uxth	r2, r3
 801e8b0:	2014      	movs	r0, #20
 801e8b2:	183b      	adds	r3, r7, r0
 801e8b4:	4953      	ldr	r1, [pc, #332]	@ (801ea04 <USB_DeactivateEndpoint+0x370>)
 801e8b6:	400a      	ands	r2, r1
 801e8b8:	801a      	strh	r2, [r3, #0]
 801e8ba:	687a      	ldr	r2, [r7, #4]
 801e8bc:	683b      	ldr	r3, [r7, #0]
 801e8be:	781b      	ldrb	r3, [r3, #0]
 801e8c0:	009b      	lsls	r3, r3, #2
 801e8c2:	18d3      	adds	r3, r2, r3
 801e8c4:	183a      	adds	r2, r7, r0
 801e8c6:	8812      	ldrh	r2, [r2, #0]
 801e8c8:	494f      	ldr	r1, [pc, #316]	@ (801ea08 <USB_DeactivateEndpoint+0x374>)
 801e8ca:	430a      	orrs	r2, r1
 801e8cc:	b292      	uxth	r2, r2
 801e8ce:	801a      	strh	r2, [r3, #0]
 801e8d0:	e08f      	b.n	801e9f2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e8d2:	687a      	ldr	r2, [r7, #4]
 801e8d4:	683b      	ldr	r3, [r7, #0]
 801e8d6:	781b      	ldrb	r3, [r3, #0]
 801e8d8:	009b      	lsls	r3, r3, #2
 801e8da:	18d2      	adds	r2, r2, r3
 801e8dc:	212e      	movs	r1, #46	@ 0x2e
 801e8de:	187b      	adds	r3, r7, r1
 801e8e0:	8812      	ldrh	r2, [r2, #0]
 801e8e2:	801a      	strh	r2, [r3, #0]
 801e8e4:	187b      	adds	r3, r7, r1
 801e8e6:	881a      	ldrh	r2, [r3, #0]
 801e8e8:	2380      	movs	r3, #128	@ 0x80
 801e8ea:	01db      	lsls	r3, r3, #7
 801e8ec:	4013      	ands	r3, r2
 801e8ee:	d016      	beq.n	801e91e <USB_DeactivateEndpoint+0x28a>
 801e8f0:	687a      	ldr	r2, [r7, #4]
 801e8f2:	683b      	ldr	r3, [r7, #0]
 801e8f4:	781b      	ldrb	r3, [r3, #0]
 801e8f6:	009b      	lsls	r3, r3, #2
 801e8f8:	18d3      	adds	r3, r2, r3
 801e8fa:	881b      	ldrh	r3, [r3, #0]
 801e8fc:	b29a      	uxth	r2, r3
 801e8fe:	202c      	movs	r0, #44	@ 0x2c
 801e900:	183b      	adds	r3, r7, r0
 801e902:	493e      	ldr	r1, [pc, #248]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e904:	400a      	ands	r2, r1
 801e906:	801a      	strh	r2, [r3, #0]
 801e908:	687a      	ldr	r2, [r7, #4]
 801e90a:	683b      	ldr	r3, [r7, #0]
 801e90c:	781b      	ldrb	r3, [r3, #0]
 801e90e:	009b      	lsls	r3, r3, #2
 801e910:	18d3      	adds	r3, r2, r3
 801e912:	183a      	adds	r2, r7, r0
 801e914:	8812      	ldrh	r2, [r2, #0]
 801e916:	493d      	ldr	r1, [pc, #244]	@ (801ea0c <USB_DeactivateEndpoint+0x378>)
 801e918:	430a      	orrs	r2, r1
 801e91a:	b292      	uxth	r2, r2
 801e91c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e91e:	687a      	ldr	r2, [r7, #4]
 801e920:	683b      	ldr	r3, [r7, #0]
 801e922:	781b      	ldrb	r3, [r3, #0]
 801e924:	009b      	lsls	r3, r3, #2
 801e926:	18d2      	adds	r2, r2, r3
 801e928:	212a      	movs	r1, #42	@ 0x2a
 801e92a:	187b      	adds	r3, r7, r1
 801e92c:	8812      	ldrh	r2, [r2, #0]
 801e92e:	801a      	strh	r2, [r3, #0]
 801e930:	187b      	adds	r3, r7, r1
 801e932:	881b      	ldrh	r3, [r3, #0]
 801e934:	2240      	movs	r2, #64	@ 0x40
 801e936:	4013      	ands	r3, r2
 801e938:	d016      	beq.n	801e968 <USB_DeactivateEndpoint+0x2d4>
 801e93a:	687a      	ldr	r2, [r7, #4]
 801e93c:	683b      	ldr	r3, [r7, #0]
 801e93e:	781b      	ldrb	r3, [r3, #0]
 801e940:	009b      	lsls	r3, r3, #2
 801e942:	18d3      	adds	r3, r2, r3
 801e944:	881b      	ldrh	r3, [r3, #0]
 801e946:	b29a      	uxth	r2, r3
 801e948:	2028      	movs	r0, #40	@ 0x28
 801e94a:	183b      	adds	r3, r7, r0
 801e94c:	492b      	ldr	r1, [pc, #172]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e94e:	400a      	ands	r2, r1
 801e950:	801a      	strh	r2, [r3, #0]
 801e952:	687a      	ldr	r2, [r7, #4]
 801e954:	683b      	ldr	r3, [r7, #0]
 801e956:	781b      	ldrb	r3, [r3, #0]
 801e958:	009b      	lsls	r3, r3, #2
 801e95a:	18d3      	adds	r3, r2, r3
 801e95c:	183a      	adds	r2, r7, r0
 801e95e:	8812      	ldrh	r2, [r2, #0]
 801e960:	4927      	ldr	r1, [pc, #156]	@ (801ea00 <USB_DeactivateEndpoint+0x36c>)
 801e962:	430a      	orrs	r2, r1
 801e964:	b292      	uxth	r2, r2
 801e966:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801e968:	687a      	ldr	r2, [r7, #4]
 801e96a:	683b      	ldr	r3, [r7, #0]
 801e96c:	781b      	ldrb	r3, [r3, #0]
 801e96e:	009b      	lsls	r3, r3, #2
 801e970:	18d3      	adds	r3, r2, r3
 801e972:	881b      	ldrh	r3, [r3, #0]
 801e974:	b29a      	uxth	r2, r3
 801e976:	2026      	movs	r0, #38	@ 0x26
 801e978:	183b      	adds	r3, r7, r0
 801e97a:	4920      	ldr	r1, [pc, #128]	@ (801e9fc <USB_DeactivateEndpoint+0x368>)
 801e97c:	400a      	ands	r2, r1
 801e97e:	801a      	strh	r2, [r3, #0]
 801e980:	687a      	ldr	r2, [r7, #4]
 801e982:	683b      	ldr	r3, [r7, #0]
 801e984:	781b      	ldrb	r3, [r3, #0]
 801e986:	009b      	lsls	r3, r3, #2
 801e988:	18d3      	adds	r3, r2, r3
 801e98a:	183a      	adds	r2, r7, r0
 801e98c:	8812      	ldrh	r2, [r2, #0]
 801e98e:	491f      	ldr	r1, [pc, #124]	@ (801ea0c <USB_DeactivateEndpoint+0x378>)
 801e990:	430a      	orrs	r2, r1
 801e992:	b292      	uxth	r2, r2
 801e994:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e996:	687a      	ldr	r2, [r7, #4]
 801e998:	683b      	ldr	r3, [r7, #0]
 801e99a:	781b      	ldrb	r3, [r3, #0]
 801e99c:	009b      	lsls	r3, r3, #2
 801e99e:	18d3      	adds	r3, r2, r3
 801e9a0:	881b      	ldrh	r3, [r3, #0]
 801e9a2:	b29a      	uxth	r2, r3
 801e9a4:	2024      	movs	r0, #36	@ 0x24
 801e9a6:	183b      	adds	r3, r7, r0
 801e9a8:	4916      	ldr	r1, [pc, #88]	@ (801ea04 <USB_DeactivateEndpoint+0x370>)
 801e9aa:	400a      	ands	r2, r1
 801e9ac:	801a      	strh	r2, [r3, #0]
 801e9ae:	687a      	ldr	r2, [r7, #4]
 801e9b0:	683b      	ldr	r3, [r7, #0]
 801e9b2:	781b      	ldrb	r3, [r3, #0]
 801e9b4:	009b      	lsls	r3, r3, #2
 801e9b6:	18d3      	adds	r3, r2, r3
 801e9b8:	183a      	adds	r2, r7, r0
 801e9ba:	8812      	ldrh	r2, [r2, #0]
 801e9bc:	4912      	ldr	r1, [pc, #72]	@ (801ea08 <USB_DeactivateEndpoint+0x374>)
 801e9be:	430a      	orrs	r2, r1
 801e9c0:	b292      	uxth	r2, r2
 801e9c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801e9c4:	687a      	ldr	r2, [r7, #4]
 801e9c6:	683b      	ldr	r3, [r7, #0]
 801e9c8:	781b      	ldrb	r3, [r3, #0]
 801e9ca:	009b      	lsls	r3, r3, #2
 801e9cc:	18d3      	adds	r3, r2, r3
 801e9ce:	881b      	ldrh	r3, [r3, #0]
 801e9d0:	b29a      	uxth	r2, r3
 801e9d2:	2022      	movs	r0, #34	@ 0x22
 801e9d4:	183b      	adds	r3, r7, r0
 801e9d6:	490e      	ldr	r1, [pc, #56]	@ (801ea10 <USB_DeactivateEndpoint+0x37c>)
 801e9d8:	400a      	ands	r2, r1
 801e9da:	801a      	strh	r2, [r3, #0]
 801e9dc:	687a      	ldr	r2, [r7, #4]
 801e9de:	683b      	ldr	r3, [r7, #0]
 801e9e0:	781b      	ldrb	r3, [r3, #0]
 801e9e2:	009b      	lsls	r3, r3, #2
 801e9e4:	18d3      	adds	r3, r2, r3
 801e9e6:	183a      	adds	r2, r7, r0
 801e9e8:	8812      	ldrh	r2, [r2, #0]
 801e9ea:	4907      	ldr	r1, [pc, #28]	@ (801ea08 <USB_DeactivateEndpoint+0x374>)
 801e9ec:	430a      	orrs	r2, r1
 801e9ee:	b292      	uxth	r2, r2
 801e9f0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801e9f2:	2300      	movs	r3, #0
}
 801e9f4:	0018      	movs	r0, r3
 801e9f6:	46bd      	mov	sp, r7
 801e9f8:	b00c      	add	sp, #48	@ 0x30
 801e9fa:	bd80      	pop	{r7, pc}
 801e9fc:	ffff8f8f 	.word	0xffff8f8f
 801ea00:	ffff80c0 	.word	0xffff80c0
 801ea04:	ffff8fbf 	.word	0xffff8fbf
 801ea08:	ffff8080 	.word	0xffff8080
 801ea0c:	ffffc080 	.word	0xffffc080
 801ea10:	ffffbf8f 	.word	0xffffbf8f

0801ea14 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ea14:	b590      	push	{r4, r7, lr}
 801ea16:	b0c3      	sub	sp, #268	@ 0x10c
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
 801ea1c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ea1e:	683b      	ldr	r3, [r7, #0]
 801ea20:	785b      	ldrb	r3, [r3, #1]
 801ea22:	2b01      	cmp	r3, #1
 801ea24:	d001      	beq.n	801ea2a <USB_EPStartXfer+0x16>
 801ea26:	f000 fd2d 	bl	801f484 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801ea2a:	683b      	ldr	r3, [r7, #0]
 801ea2c:	699a      	ldr	r2, [r3, #24]
 801ea2e:	683b      	ldr	r3, [r7, #0]
 801ea30:	691b      	ldr	r3, [r3, #16]
 801ea32:	429a      	cmp	r2, r3
 801ea34:	d905      	bls.n	801ea42 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801ea36:	683b      	ldr	r3, [r7, #0]
 801ea38:	691b      	ldr	r3, [r3, #16]
 801ea3a:	1d7a      	adds	r2, r7, #5
 801ea3c:	32ff      	adds	r2, #255	@ 0xff
 801ea3e:	6013      	str	r3, [r2, #0]
 801ea40:	e004      	b.n	801ea4c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801ea42:	683b      	ldr	r3, [r7, #0]
 801ea44:	699b      	ldr	r3, [r3, #24]
 801ea46:	1d7a      	adds	r2, r7, #5
 801ea48:	32ff      	adds	r2, #255	@ 0xff
 801ea4a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801ea4c:	683b      	ldr	r3, [r7, #0]
 801ea4e:	7b1b      	ldrb	r3, [r3, #12]
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d125      	bne.n	801eaa0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801ea54:	683b      	ldr	r3, [r7, #0]
 801ea56:	6959      	ldr	r1, [r3, #20]
 801ea58:	683b      	ldr	r3, [r7, #0]
 801ea5a:	88da      	ldrh	r2, [r3, #6]
 801ea5c:	1d7b      	adds	r3, r7, #5
 801ea5e:	33ff      	adds	r3, #255	@ 0xff
 801ea60:	681b      	ldr	r3, [r3, #0]
 801ea62:	b29b      	uxth	r3, r3
 801ea64:	6878      	ldr	r0, [r7, #4]
 801ea66:	f001 fa47 	bl	801fef8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	613b      	str	r3, [r7, #16]
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	2250      	movs	r2, #80	@ 0x50
 801ea72:	5a9b      	ldrh	r3, [r3, r2]
 801ea74:	b29b      	uxth	r3, r3
 801ea76:	001a      	movs	r2, r3
 801ea78:	693b      	ldr	r3, [r7, #16]
 801ea7a:	189b      	adds	r3, r3, r2
 801ea7c:	613b      	str	r3, [r7, #16]
 801ea7e:	683b      	ldr	r3, [r7, #0]
 801ea80:	781b      	ldrb	r3, [r3, #0]
 801ea82:	00da      	lsls	r2, r3, #3
 801ea84:	693b      	ldr	r3, [r7, #16]
 801ea86:	18d3      	adds	r3, r2, r3
 801ea88:	4ad7      	ldr	r2, [pc, #860]	@ (801ede8 <USB_EPStartXfer+0x3d4>)
 801ea8a:	4694      	mov	ip, r2
 801ea8c:	4463      	add	r3, ip
 801ea8e:	60fb      	str	r3, [r7, #12]
 801ea90:	1d7b      	adds	r3, r7, #5
 801ea92:	33ff      	adds	r3, #255	@ 0xff
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	b29a      	uxth	r2, r3
 801ea98:	68fb      	ldr	r3, [r7, #12]
 801ea9a:	801a      	strh	r2, [r3, #0]
 801ea9c:	f000 fccd 	bl	801f43a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801eaa0:	683b      	ldr	r3, [r7, #0]
 801eaa2:	78db      	ldrb	r3, [r3, #3]
 801eaa4:	2b02      	cmp	r3, #2
 801eaa6:	d000      	beq.n	801eaaa <USB_EPStartXfer+0x96>
 801eaa8:	e362      	b.n	801f170 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801eaaa:	683b      	ldr	r3, [r7, #0]
 801eaac:	6a1a      	ldr	r2, [r3, #32]
 801eaae:	683b      	ldr	r3, [r7, #0]
 801eab0:	691b      	ldr	r3, [r3, #16]
 801eab2:	429a      	cmp	r2, r3
 801eab4:	d800      	bhi.n	801eab8 <USB_EPStartXfer+0xa4>
 801eab6:	e309      	b.n	801f0cc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801eab8:	687a      	ldr	r2, [r7, #4]
 801eaba:	683b      	ldr	r3, [r7, #0]
 801eabc:	781b      	ldrb	r3, [r3, #0]
 801eabe:	009b      	lsls	r3, r3, #2
 801eac0:	18d3      	adds	r3, r2, r3
 801eac2:	881b      	ldrh	r3, [r3, #0]
 801eac4:	b29a      	uxth	r2, r3
 801eac6:	2056      	movs	r0, #86	@ 0x56
 801eac8:	183b      	adds	r3, r7, r0
 801eaca:	49c8      	ldr	r1, [pc, #800]	@ (801edec <USB_EPStartXfer+0x3d8>)
 801eacc:	400a      	ands	r2, r1
 801eace:	801a      	strh	r2, [r3, #0]
 801ead0:	687a      	ldr	r2, [r7, #4]
 801ead2:	683b      	ldr	r3, [r7, #0]
 801ead4:	781b      	ldrb	r3, [r3, #0]
 801ead6:	009b      	lsls	r3, r3, #2
 801ead8:	18d3      	adds	r3, r2, r3
 801eada:	183a      	adds	r2, r7, r0
 801eadc:	8812      	ldrh	r2, [r2, #0]
 801eade:	49c4      	ldr	r1, [pc, #784]	@ (801edf0 <USB_EPStartXfer+0x3dc>)
 801eae0:	430a      	orrs	r2, r1
 801eae2:	b292      	uxth	r2, r2
 801eae4:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801eae6:	683b      	ldr	r3, [r7, #0]
 801eae8:	6a1a      	ldr	r2, [r3, #32]
 801eaea:	1d7b      	adds	r3, r7, #5
 801eaec:	33ff      	adds	r3, #255	@ 0xff
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	1ad2      	subs	r2, r2, r3
 801eaf2:	683b      	ldr	r3, [r7, #0]
 801eaf4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801eaf6:	687a      	ldr	r2, [r7, #4]
 801eaf8:	683b      	ldr	r3, [r7, #0]
 801eafa:	781b      	ldrb	r3, [r3, #0]
 801eafc:	009b      	lsls	r3, r3, #2
 801eafe:	18d3      	adds	r3, r2, r3
 801eb00:	881b      	ldrh	r3, [r3, #0]
 801eb02:	b29b      	uxth	r3, r3
 801eb04:	001a      	movs	r2, r3
 801eb06:	2340      	movs	r3, #64	@ 0x40
 801eb08:	4013      	ands	r3, r2
 801eb0a:	d100      	bne.n	801eb0e <USB_EPStartXfer+0xfa>
 801eb0c:	e176      	b.n	801edfc <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	633b      	str	r3, [r7, #48]	@ 0x30
 801eb12:	683b      	ldr	r3, [r7, #0]
 801eb14:	785b      	ldrb	r3, [r3, #1]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d000      	beq.n	801eb1c <USB_EPStartXfer+0x108>
 801eb1a:	e074      	b.n	801ec06 <USB_EPStartXfer+0x1f2>
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	2250      	movs	r2, #80	@ 0x50
 801eb24:	5a9b      	ldrh	r3, [r3, r2]
 801eb26:	b29b      	uxth	r3, r3
 801eb28:	001a      	movs	r2, r3
 801eb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb2c:	189b      	adds	r3, r3, r2
 801eb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801eb30:	683b      	ldr	r3, [r7, #0]
 801eb32:	781b      	ldrb	r3, [r3, #0]
 801eb34:	00da      	lsls	r2, r3, #3
 801eb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb38:	18d3      	adds	r3, r2, r3
 801eb3a:	4aae      	ldr	r2, [pc, #696]	@ (801edf4 <USB_EPStartXfer+0x3e0>)
 801eb3c:	4694      	mov	ip, r2
 801eb3e:	4463      	add	r3, ip
 801eb40:	627b      	str	r3, [r7, #36]	@ 0x24
 801eb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb44:	881b      	ldrh	r3, [r3, #0]
 801eb46:	b29b      	uxth	r3, r3
 801eb48:	059b      	lsls	r3, r3, #22
 801eb4a:	0d9b      	lsrs	r3, r3, #22
 801eb4c:	b29a      	uxth	r2, r3
 801eb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb50:	801a      	strh	r2, [r3, #0]
 801eb52:	1d7b      	adds	r3, r7, #5
 801eb54:	33ff      	adds	r3, #255	@ 0xff
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	2b3e      	cmp	r3, #62	@ 0x3e
 801eb5a:	d924      	bls.n	801eba6 <USB_EPStartXfer+0x192>
 801eb5c:	1d7b      	adds	r3, r7, #5
 801eb5e:	33ff      	adds	r3, #255	@ 0xff
 801eb60:	681b      	ldr	r3, [r3, #0]
 801eb62:	095b      	lsrs	r3, r3, #5
 801eb64:	1c7a      	adds	r2, r7, #1
 801eb66:	32ff      	adds	r2, #255	@ 0xff
 801eb68:	6013      	str	r3, [r2, #0]
 801eb6a:	1d7b      	adds	r3, r7, #5
 801eb6c:	33ff      	adds	r3, #255	@ 0xff
 801eb6e:	681b      	ldr	r3, [r3, #0]
 801eb70:	221f      	movs	r2, #31
 801eb72:	4013      	ands	r3, r2
 801eb74:	d106      	bne.n	801eb84 <USB_EPStartXfer+0x170>
 801eb76:	1c7b      	adds	r3, r7, #1
 801eb78:	33ff      	adds	r3, #255	@ 0xff
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	3b01      	subs	r3, #1
 801eb7e:	1c7a      	adds	r2, r7, #1
 801eb80:	32ff      	adds	r2, #255	@ 0xff
 801eb82:	6013      	str	r3, [r2, #0]
 801eb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb86:	881b      	ldrh	r3, [r3, #0]
 801eb88:	b29a      	uxth	r2, r3
 801eb8a:	1c7b      	adds	r3, r7, #1
 801eb8c:	33ff      	adds	r3, #255	@ 0xff
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	b29b      	uxth	r3, r3
 801eb92:	029b      	lsls	r3, r3, #10
 801eb94:	b29b      	uxth	r3, r3
 801eb96:	4313      	orrs	r3, r2
 801eb98:	b29b      	uxth	r3, r3
 801eb9a:	4a97      	ldr	r2, [pc, #604]	@ (801edf8 <USB_EPStartXfer+0x3e4>)
 801eb9c:	4313      	orrs	r3, r2
 801eb9e:	b29a      	uxth	r2, r3
 801eba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eba2:	801a      	strh	r2, [r3, #0]
 801eba4:	e04a      	b.n	801ec3c <USB_EPStartXfer+0x228>
 801eba6:	1d7b      	adds	r3, r7, #5
 801eba8:	33ff      	adds	r3, #255	@ 0xff
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	d108      	bne.n	801ebc2 <USB_EPStartXfer+0x1ae>
 801ebb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebb2:	881b      	ldrh	r3, [r3, #0]
 801ebb4:	b29b      	uxth	r3, r3
 801ebb6:	4a90      	ldr	r2, [pc, #576]	@ (801edf8 <USB_EPStartXfer+0x3e4>)
 801ebb8:	4313      	orrs	r3, r2
 801ebba:	b29a      	uxth	r2, r3
 801ebbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebbe:	801a      	strh	r2, [r3, #0]
 801ebc0:	e03c      	b.n	801ec3c <USB_EPStartXfer+0x228>
 801ebc2:	1d7b      	adds	r3, r7, #5
 801ebc4:	33ff      	adds	r3, #255	@ 0xff
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	085b      	lsrs	r3, r3, #1
 801ebca:	1c7a      	adds	r2, r7, #1
 801ebcc:	32ff      	adds	r2, #255	@ 0xff
 801ebce:	6013      	str	r3, [r2, #0]
 801ebd0:	1d7b      	adds	r3, r7, #5
 801ebd2:	33ff      	adds	r3, #255	@ 0xff
 801ebd4:	681b      	ldr	r3, [r3, #0]
 801ebd6:	2201      	movs	r2, #1
 801ebd8:	4013      	ands	r3, r2
 801ebda:	d006      	beq.n	801ebea <USB_EPStartXfer+0x1d6>
 801ebdc:	1c7b      	adds	r3, r7, #1
 801ebde:	33ff      	adds	r3, #255	@ 0xff
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	3301      	adds	r3, #1
 801ebe4:	1c7a      	adds	r2, r7, #1
 801ebe6:	32ff      	adds	r2, #255	@ 0xff
 801ebe8:	6013      	str	r3, [r2, #0]
 801ebea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebec:	881b      	ldrh	r3, [r3, #0]
 801ebee:	b29a      	uxth	r2, r3
 801ebf0:	1c7b      	adds	r3, r7, #1
 801ebf2:	33ff      	adds	r3, #255	@ 0xff
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	b29b      	uxth	r3, r3
 801ebf8:	029b      	lsls	r3, r3, #10
 801ebfa:	b29b      	uxth	r3, r3
 801ebfc:	4313      	orrs	r3, r2
 801ebfe:	b29a      	uxth	r2, r3
 801ec00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec02:	801a      	strh	r2, [r3, #0]
 801ec04:	e01a      	b.n	801ec3c <USB_EPStartXfer+0x228>
 801ec06:	683b      	ldr	r3, [r7, #0]
 801ec08:	785b      	ldrb	r3, [r3, #1]
 801ec0a:	2b01      	cmp	r3, #1
 801ec0c:	d116      	bne.n	801ec3c <USB_EPStartXfer+0x228>
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	2250      	movs	r2, #80	@ 0x50
 801ec12:	5a9b      	ldrh	r3, [r3, r2]
 801ec14:	b29b      	uxth	r3, r3
 801ec16:	001a      	movs	r2, r3
 801ec18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ec1a:	189b      	adds	r3, r3, r2
 801ec1c:	633b      	str	r3, [r7, #48]	@ 0x30
 801ec1e:	683b      	ldr	r3, [r7, #0]
 801ec20:	781b      	ldrb	r3, [r3, #0]
 801ec22:	00da      	lsls	r2, r3, #3
 801ec24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ec26:	18d3      	adds	r3, r2, r3
 801ec28:	4a72      	ldr	r2, [pc, #456]	@ (801edf4 <USB_EPStartXfer+0x3e0>)
 801ec2a:	4694      	mov	ip, r2
 801ec2c:	4463      	add	r3, ip
 801ec2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ec30:	1d7b      	adds	r3, r7, #5
 801ec32:	33ff      	adds	r3, #255	@ 0xff
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	b29a      	uxth	r2, r3
 801ec38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801ec3c:	2076      	movs	r0, #118	@ 0x76
 801ec3e:	183b      	adds	r3, r7, r0
 801ec40:	683a      	ldr	r2, [r7, #0]
 801ec42:	8952      	ldrh	r2, [r2, #10]
 801ec44:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ec46:	683b      	ldr	r3, [r7, #0]
 801ec48:	6959      	ldr	r1, [r3, #20]
 801ec4a:	1d7b      	adds	r3, r7, #5
 801ec4c:	33ff      	adds	r3, #255	@ 0xff
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	b29c      	uxth	r4, r3
 801ec52:	183b      	adds	r3, r7, r0
 801ec54:	881a      	ldrh	r2, [r3, #0]
 801ec56:	6878      	ldr	r0, [r7, #4]
 801ec58:	0023      	movs	r3, r4
 801ec5a:	f001 f94d 	bl	801fef8 <USB_WritePMA>
            ep->xfer_buff += len;
 801ec5e:	683b      	ldr	r3, [r7, #0]
 801ec60:	695a      	ldr	r2, [r3, #20]
 801ec62:	1d7b      	adds	r3, r7, #5
 801ec64:	33ff      	adds	r3, #255	@ 0xff
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	18d2      	adds	r2, r2, r3
 801ec6a:	683b      	ldr	r3, [r7, #0]
 801ec6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801ec6e:	683b      	ldr	r3, [r7, #0]
 801ec70:	6a1a      	ldr	r2, [r3, #32]
 801ec72:	683b      	ldr	r3, [r7, #0]
 801ec74:	691b      	ldr	r3, [r3, #16]
 801ec76:	429a      	cmp	r2, r3
 801ec78:	d908      	bls.n	801ec8c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801ec7a:	683b      	ldr	r3, [r7, #0]
 801ec7c:	6a1a      	ldr	r2, [r3, #32]
 801ec7e:	1d7b      	adds	r3, r7, #5
 801ec80:	33ff      	adds	r3, #255	@ 0xff
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	1ad2      	subs	r2, r2, r3
 801ec86:	683b      	ldr	r3, [r7, #0]
 801ec88:	621a      	str	r2, [r3, #32]
 801ec8a:	e007      	b.n	801ec9c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801ec8c:	683b      	ldr	r3, [r7, #0]
 801ec8e:	6a1b      	ldr	r3, [r3, #32]
 801ec90:	1d7a      	adds	r2, r7, #5
 801ec92:	32ff      	adds	r2, #255	@ 0xff
 801ec94:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801ec96:	683b      	ldr	r3, [r7, #0]
 801ec98:	2200      	movs	r2, #0
 801ec9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801ec9c:	683b      	ldr	r3, [r7, #0]
 801ec9e:	785b      	ldrb	r3, [r3, #1]
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d000      	beq.n	801eca6 <USB_EPStartXfer+0x292>
 801eca4:	e070      	b.n	801ed88 <USB_EPStartXfer+0x374>
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	61bb      	str	r3, [r7, #24]
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	2250      	movs	r2, #80	@ 0x50
 801ecae:	5a9b      	ldrh	r3, [r3, r2]
 801ecb0:	b29b      	uxth	r3, r3
 801ecb2:	001a      	movs	r2, r3
 801ecb4:	69bb      	ldr	r3, [r7, #24]
 801ecb6:	189b      	adds	r3, r3, r2
 801ecb8:	61bb      	str	r3, [r7, #24]
 801ecba:	683b      	ldr	r3, [r7, #0]
 801ecbc:	781b      	ldrb	r3, [r3, #0]
 801ecbe:	00da      	lsls	r2, r3, #3
 801ecc0:	69bb      	ldr	r3, [r7, #24]
 801ecc2:	18d3      	adds	r3, r2, r3
 801ecc4:	4a48      	ldr	r2, [pc, #288]	@ (801ede8 <USB_EPStartXfer+0x3d4>)
 801ecc6:	4694      	mov	ip, r2
 801ecc8:	4463      	add	r3, ip
 801ecca:	617b      	str	r3, [r7, #20]
 801eccc:	697b      	ldr	r3, [r7, #20]
 801ecce:	881b      	ldrh	r3, [r3, #0]
 801ecd0:	b29b      	uxth	r3, r3
 801ecd2:	059b      	lsls	r3, r3, #22
 801ecd4:	0d9b      	lsrs	r3, r3, #22
 801ecd6:	b29a      	uxth	r2, r3
 801ecd8:	697b      	ldr	r3, [r7, #20]
 801ecda:	801a      	strh	r2, [r3, #0]
 801ecdc:	1d7b      	adds	r3, r7, #5
 801ecde:	33ff      	adds	r3, #255	@ 0xff
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	2b3e      	cmp	r3, #62	@ 0x3e
 801ece4:	d922      	bls.n	801ed2c <USB_EPStartXfer+0x318>
 801ece6:	1d7b      	adds	r3, r7, #5
 801ece8:	33ff      	adds	r3, #255	@ 0xff
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	095b      	lsrs	r3, r3, #5
 801ecee:	21fc      	movs	r1, #252	@ 0xfc
 801ecf0:	187a      	adds	r2, r7, r1
 801ecf2:	6013      	str	r3, [r2, #0]
 801ecf4:	1d7b      	adds	r3, r7, #5
 801ecf6:	33ff      	adds	r3, #255	@ 0xff
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	221f      	movs	r2, #31
 801ecfc:	4013      	ands	r3, r2
 801ecfe:	d104      	bne.n	801ed0a <USB_EPStartXfer+0x2f6>
 801ed00:	187b      	adds	r3, r7, r1
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	3b01      	subs	r3, #1
 801ed06:	187a      	adds	r2, r7, r1
 801ed08:	6013      	str	r3, [r2, #0]
 801ed0a:	697b      	ldr	r3, [r7, #20]
 801ed0c:	881b      	ldrh	r3, [r3, #0]
 801ed0e:	b29a      	uxth	r2, r3
 801ed10:	23fc      	movs	r3, #252	@ 0xfc
 801ed12:	18fb      	adds	r3, r7, r3
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	b29b      	uxth	r3, r3
 801ed18:	029b      	lsls	r3, r3, #10
 801ed1a:	b29b      	uxth	r3, r3
 801ed1c:	4313      	orrs	r3, r2
 801ed1e:	b29b      	uxth	r3, r3
 801ed20:	4a35      	ldr	r2, [pc, #212]	@ (801edf8 <USB_EPStartXfer+0x3e4>)
 801ed22:	4313      	orrs	r3, r2
 801ed24:	b29a      	uxth	r2, r3
 801ed26:	697b      	ldr	r3, [r7, #20]
 801ed28:	801a      	strh	r2, [r3, #0]
 801ed2a:	e04a      	b.n	801edc2 <USB_EPStartXfer+0x3ae>
 801ed2c:	1d7b      	adds	r3, r7, #5
 801ed2e:	33ff      	adds	r3, #255	@ 0xff
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d108      	bne.n	801ed48 <USB_EPStartXfer+0x334>
 801ed36:	697b      	ldr	r3, [r7, #20]
 801ed38:	881b      	ldrh	r3, [r3, #0]
 801ed3a:	b29b      	uxth	r3, r3
 801ed3c:	4a2e      	ldr	r2, [pc, #184]	@ (801edf8 <USB_EPStartXfer+0x3e4>)
 801ed3e:	4313      	orrs	r3, r2
 801ed40:	b29a      	uxth	r2, r3
 801ed42:	697b      	ldr	r3, [r7, #20]
 801ed44:	801a      	strh	r2, [r3, #0]
 801ed46:	e03c      	b.n	801edc2 <USB_EPStartXfer+0x3ae>
 801ed48:	1d7b      	adds	r3, r7, #5
 801ed4a:	33ff      	adds	r3, #255	@ 0xff
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	085b      	lsrs	r3, r3, #1
 801ed50:	21fc      	movs	r1, #252	@ 0xfc
 801ed52:	187a      	adds	r2, r7, r1
 801ed54:	6013      	str	r3, [r2, #0]
 801ed56:	1d7b      	adds	r3, r7, #5
 801ed58:	33ff      	adds	r3, #255	@ 0xff
 801ed5a:	681b      	ldr	r3, [r3, #0]
 801ed5c:	2201      	movs	r2, #1
 801ed5e:	4013      	ands	r3, r2
 801ed60:	d004      	beq.n	801ed6c <USB_EPStartXfer+0x358>
 801ed62:	187b      	adds	r3, r7, r1
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	3301      	adds	r3, #1
 801ed68:	187a      	adds	r2, r7, r1
 801ed6a:	6013      	str	r3, [r2, #0]
 801ed6c:	697b      	ldr	r3, [r7, #20]
 801ed6e:	881b      	ldrh	r3, [r3, #0]
 801ed70:	b29a      	uxth	r2, r3
 801ed72:	23fc      	movs	r3, #252	@ 0xfc
 801ed74:	18fb      	adds	r3, r7, r3
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	b29b      	uxth	r3, r3
 801ed7a:	029b      	lsls	r3, r3, #10
 801ed7c:	b29b      	uxth	r3, r3
 801ed7e:	4313      	orrs	r3, r2
 801ed80:	b29a      	uxth	r2, r3
 801ed82:	697b      	ldr	r3, [r7, #20]
 801ed84:	801a      	strh	r2, [r3, #0]
 801ed86:	e01c      	b.n	801edc2 <USB_EPStartXfer+0x3ae>
 801ed88:	683b      	ldr	r3, [r7, #0]
 801ed8a:	785b      	ldrb	r3, [r3, #1]
 801ed8c:	2b01      	cmp	r3, #1
 801ed8e:	d118      	bne.n	801edc2 <USB_EPStartXfer+0x3ae>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	623b      	str	r3, [r7, #32]
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	2250      	movs	r2, #80	@ 0x50
 801ed98:	5a9b      	ldrh	r3, [r3, r2]
 801ed9a:	b29b      	uxth	r3, r3
 801ed9c:	001a      	movs	r2, r3
 801ed9e:	6a3b      	ldr	r3, [r7, #32]
 801eda0:	189b      	adds	r3, r3, r2
 801eda2:	623b      	str	r3, [r7, #32]
 801eda4:	683b      	ldr	r3, [r7, #0]
 801eda6:	781b      	ldrb	r3, [r3, #0]
 801eda8:	00da      	lsls	r2, r3, #3
 801edaa:	6a3b      	ldr	r3, [r7, #32]
 801edac:	18d3      	adds	r3, r2, r3
 801edae:	4a0e      	ldr	r2, [pc, #56]	@ (801ede8 <USB_EPStartXfer+0x3d4>)
 801edb0:	4694      	mov	ip, r2
 801edb2:	4463      	add	r3, ip
 801edb4:	61fb      	str	r3, [r7, #28]
 801edb6:	1d7b      	adds	r3, r7, #5
 801edb8:	33ff      	adds	r3, #255	@ 0xff
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	b29a      	uxth	r2, r3
 801edbe:	69fb      	ldr	r3, [r7, #28]
 801edc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801edc2:	2076      	movs	r0, #118	@ 0x76
 801edc4:	183b      	adds	r3, r7, r0
 801edc6:	683a      	ldr	r2, [r7, #0]
 801edc8:	8912      	ldrh	r2, [r2, #8]
 801edca:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	6959      	ldr	r1, [r3, #20]
 801edd0:	1d7b      	adds	r3, r7, #5
 801edd2:	33ff      	adds	r3, #255	@ 0xff
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	b29c      	uxth	r4, r3
 801edd8:	183b      	adds	r3, r7, r0
 801edda:	881a      	ldrh	r2, [r3, #0]
 801eddc:	6878      	ldr	r0, [r7, #4]
 801edde:	0023      	movs	r3, r4
 801ede0:	f001 f88a 	bl	801fef8 <USB_WritePMA>
 801ede4:	e329      	b.n	801f43a <USB_EPStartXfer+0xa26>
 801ede6:	46c0      	nop			@ (mov r8, r8)
 801ede8:	00000402 	.word	0x00000402
 801edec:	ffff8f8f 	.word	0xffff8f8f
 801edf0:	ffff8180 	.word	0xffff8180
 801edf4:	00000406 	.word	0x00000406
 801edf8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801edfc:	683b      	ldr	r3, [r7, #0]
 801edfe:	785b      	ldrb	r3, [r3, #1]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d000      	beq.n	801ee06 <USB_EPStartXfer+0x3f2>
 801ee04:	e070      	b.n	801eee8 <USB_EPStartXfer+0x4d4>
 801ee06:	687b      	ldr	r3, [r7, #4]
 801ee08:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	2250      	movs	r2, #80	@ 0x50
 801ee0e:	5a9b      	ldrh	r3, [r3, r2]
 801ee10:	b29b      	uxth	r3, r3
 801ee12:	001a      	movs	r2, r3
 801ee14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ee16:	189b      	adds	r3, r3, r2
 801ee18:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ee1a:	683b      	ldr	r3, [r7, #0]
 801ee1c:	781b      	ldrb	r3, [r3, #0]
 801ee1e:	00da      	lsls	r2, r3, #3
 801ee20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ee22:	18d3      	adds	r3, r2, r3
 801ee24:	4acd      	ldr	r2, [pc, #820]	@ (801f15c <USB_EPStartXfer+0x748>)
 801ee26:	4694      	mov	ip, r2
 801ee28:	4463      	add	r3, ip
 801ee2a:	647b      	str	r3, [r7, #68]	@ 0x44
 801ee2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee2e:	881b      	ldrh	r3, [r3, #0]
 801ee30:	b29b      	uxth	r3, r3
 801ee32:	059b      	lsls	r3, r3, #22
 801ee34:	0d9b      	lsrs	r3, r3, #22
 801ee36:	b29a      	uxth	r2, r3
 801ee38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee3a:	801a      	strh	r2, [r3, #0]
 801ee3c:	1d7b      	adds	r3, r7, #5
 801ee3e:	33ff      	adds	r3, #255	@ 0xff
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	2b3e      	cmp	r3, #62	@ 0x3e
 801ee44:	d922      	bls.n	801ee8c <USB_EPStartXfer+0x478>
 801ee46:	1d7b      	adds	r3, r7, #5
 801ee48:	33ff      	adds	r3, #255	@ 0xff
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	095b      	lsrs	r3, r3, #5
 801ee4e:	21f8      	movs	r1, #248	@ 0xf8
 801ee50:	187a      	adds	r2, r7, r1
 801ee52:	6013      	str	r3, [r2, #0]
 801ee54:	1d7b      	adds	r3, r7, #5
 801ee56:	33ff      	adds	r3, #255	@ 0xff
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	221f      	movs	r2, #31
 801ee5c:	4013      	ands	r3, r2
 801ee5e:	d104      	bne.n	801ee6a <USB_EPStartXfer+0x456>
 801ee60:	187b      	adds	r3, r7, r1
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	3b01      	subs	r3, #1
 801ee66:	187a      	adds	r2, r7, r1
 801ee68:	6013      	str	r3, [r2, #0]
 801ee6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee6c:	881b      	ldrh	r3, [r3, #0]
 801ee6e:	b29a      	uxth	r2, r3
 801ee70:	23f8      	movs	r3, #248	@ 0xf8
 801ee72:	18fb      	adds	r3, r7, r3
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	b29b      	uxth	r3, r3
 801ee78:	029b      	lsls	r3, r3, #10
 801ee7a:	b29b      	uxth	r3, r3
 801ee7c:	4313      	orrs	r3, r2
 801ee7e:	b29b      	uxth	r3, r3
 801ee80:	4ab7      	ldr	r2, [pc, #732]	@ (801f160 <USB_EPStartXfer+0x74c>)
 801ee82:	4313      	orrs	r3, r2
 801ee84:	b29a      	uxth	r2, r3
 801ee86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee88:	801a      	strh	r2, [r3, #0]
 801ee8a:	e04a      	b.n	801ef22 <USB_EPStartXfer+0x50e>
 801ee8c:	1d7b      	adds	r3, r7, #5
 801ee8e:	33ff      	adds	r3, #255	@ 0xff
 801ee90:	681b      	ldr	r3, [r3, #0]
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d108      	bne.n	801eea8 <USB_EPStartXfer+0x494>
 801ee96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee98:	881b      	ldrh	r3, [r3, #0]
 801ee9a:	b29b      	uxth	r3, r3
 801ee9c:	4ab0      	ldr	r2, [pc, #704]	@ (801f160 <USB_EPStartXfer+0x74c>)
 801ee9e:	4313      	orrs	r3, r2
 801eea0:	b29a      	uxth	r2, r3
 801eea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eea4:	801a      	strh	r2, [r3, #0]
 801eea6:	e03c      	b.n	801ef22 <USB_EPStartXfer+0x50e>
 801eea8:	1d7b      	adds	r3, r7, #5
 801eeaa:	33ff      	adds	r3, #255	@ 0xff
 801eeac:	681b      	ldr	r3, [r3, #0]
 801eeae:	085b      	lsrs	r3, r3, #1
 801eeb0:	21f8      	movs	r1, #248	@ 0xf8
 801eeb2:	187a      	adds	r2, r7, r1
 801eeb4:	6013      	str	r3, [r2, #0]
 801eeb6:	1d7b      	adds	r3, r7, #5
 801eeb8:	33ff      	adds	r3, #255	@ 0xff
 801eeba:	681b      	ldr	r3, [r3, #0]
 801eebc:	2201      	movs	r2, #1
 801eebe:	4013      	ands	r3, r2
 801eec0:	d004      	beq.n	801eecc <USB_EPStartXfer+0x4b8>
 801eec2:	187b      	adds	r3, r7, r1
 801eec4:	681b      	ldr	r3, [r3, #0]
 801eec6:	3301      	adds	r3, #1
 801eec8:	187a      	adds	r2, r7, r1
 801eeca:	6013      	str	r3, [r2, #0]
 801eecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eece:	881b      	ldrh	r3, [r3, #0]
 801eed0:	b29a      	uxth	r2, r3
 801eed2:	23f8      	movs	r3, #248	@ 0xf8
 801eed4:	18fb      	adds	r3, r7, r3
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	b29b      	uxth	r3, r3
 801eeda:	029b      	lsls	r3, r3, #10
 801eedc:	b29b      	uxth	r3, r3
 801eede:	4313      	orrs	r3, r2
 801eee0:	b29a      	uxth	r2, r3
 801eee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801eee4:	801a      	strh	r2, [r3, #0]
 801eee6:	e01c      	b.n	801ef22 <USB_EPStartXfer+0x50e>
 801eee8:	683b      	ldr	r3, [r7, #0]
 801eeea:	785b      	ldrb	r3, [r3, #1]
 801eeec:	2b01      	cmp	r3, #1
 801eeee:	d118      	bne.n	801ef22 <USB_EPStartXfer+0x50e>
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	653b      	str	r3, [r7, #80]	@ 0x50
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	2250      	movs	r2, #80	@ 0x50
 801eef8:	5a9b      	ldrh	r3, [r3, r2]
 801eefa:	b29b      	uxth	r3, r3
 801eefc:	001a      	movs	r2, r3
 801eefe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ef00:	189b      	adds	r3, r3, r2
 801ef02:	653b      	str	r3, [r7, #80]	@ 0x50
 801ef04:	683b      	ldr	r3, [r7, #0]
 801ef06:	781b      	ldrb	r3, [r3, #0]
 801ef08:	00da      	lsls	r2, r3, #3
 801ef0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ef0c:	18d3      	adds	r3, r2, r3
 801ef0e:	4a93      	ldr	r2, [pc, #588]	@ (801f15c <USB_EPStartXfer+0x748>)
 801ef10:	4694      	mov	ip, r2
 801ef12:	4463      	add	r3, ip
 801ef14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ef16:	1d7b      	adds	r3, r7, #5
 801ef18:	33ff      	adds	r3, #255	@ 0xff
 801ef1a:	681b      	ldr	r3, [r3, #0]
 801ef1c:	b29a      	uxth	r2, r3
 801ef1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801ef22:	2076      	movs	r0, #118	@ 0x76
 801ef24:	183b      	adds	r3, r7, r0
 801ef26:	683a      	ldr	r2, [r7, #0]
 801ef28:	8912      	ldrh	r2, [r2, #8]
 801ef2a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ef2c:	683b      	ldr	r3, [r7, #0]
 801ef2e:	6959      	ldr	r1, [r3, #20]
 801ef30:	1d7b      	adds	r3, r7, #5
 801ef32:	33ff      	adds	r3, #255	@ 0xff
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	b29c      	uxth	r4, r3
 801ef38:	183b      	adds	r3, r7, r0
 801ef3a:	881a      	ldrh	r2, [r3, #0]
 801ef3c:	6878      	ldr	r0, [r7, #4]
 801ef3e:	0023      	movs	r3, r4
 801ef40:	f000 ffda 	bl	801fef8 <USB_WritePMA>
            ep->xfer_buff += len;
 801ef44:	683b      	ldr	r3, [r7, #0]
 801ef46:	695a      	ldr	r2, [r3, #20]
 801ef48:	1d7b      	adds	r3, r7, #5
 801ef4a:	33ff      	adds	r3, #255	@ 0xff
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	18d2      	adds	r2, r2, r3
 801ef50:	683b      	ldr	r3, [r7, #0]
 801ef52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801ef54:	683b      	ldr	r3, [r7, #0]
 801ef56:	6a1a      	ldr	r2, [r3, #32]
 801ef58:	683b      	ldr	r3, [r7, #0]
 801ef5a:	691b      	ldr	r3, [r3, #16]
 801ef5c:	429a      	cmp	r2, r3
 801ef5e:	d908      	bls.n	801ef72 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801ef60:	683b      	ldr	r3, [r7, #0]
 801ef62:	6a1a      	ldr	r2, [r3, #32]
 801ef64:	1d7b      	adds	r3, r7, #5
 801ef66:	33ff      	adds	r3, #255	@ 0xff
 801ef68:	681b      	ldr	r3, [r3, #0]
 801ef6a:	1ad2      	subs	r2, r2, r3
 801ef6c:	683b      	ldr	r3, [r7, #0]
 801ef6e:	621a      	str	r2, [r3, #32]
 801ef70:	e007      	b.n	801ef82 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801ef72:	683b      	ldr	r3, [r7, #0]
 801ef74:	6a1b      	ldr	r3, [r3, #32]
 801ef76:	1d7a      	adds	r2, r7, #5
 801ef78:	32ff      	adds	r2, #255	@ 0xff
 801ef7a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801ef7c:	683b      	ldr	r3, [r7, #0]
 801ef7e:	2200      	movs	r2, #0
 801ef80:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	643b      	str	r3, [r7, #64]	@ 0x40
 801ef86:	683b      	ldr	r3, [r7, #0]
 801ef88:	785b      	ldrb	r3, [r3, #1]
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	d000      	beq.n	801ef90 <USB_EPStartXfer+0x57c>
 801ef8e:	e070      	b.n	801f072 <USB_EPStartXfer+0x65e>
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	2250      	movs	r2, #80	@ 0x50
 801ef98:	5a9b      	ldrh	r3, [r3, r2]
 801ef9a:	b29b      	uxth	r3, r3
 801ef9c:	001a      	movs	r2, r3
 801ef9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801efa0:	189b      	adds	r3, r3, r2
 801efa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801efa4:	683b      	ldr	r3, [r7, #0]
 801efa6:	781b      	ldrb	r3, [r3, #0]
 801efa8:	00da      	lsls	r2, r3, #3
 801efaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801efac:	18d3      	adds	r3, r2, r3
 801efae:	4a6d      	ldr	r2, [pc, #436]	@ (801f164 <USB_EPStartXfer+0x750>)
 801efb0:	4694      	mov	ip, r2
 801efb2:	4463      	add	r3, ip
 801efb4:	637b      	str	r3, [r7, #52]	@ 0x34
 801efb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efb8:	881b      	ldrh	r3, [r3, #0]
 801efba:	b29b      	uxth	r3, r3
 801efbc:	059b      	lsls	r3, r3, #22
 801efbe:	0d9b      	lsrs	r3, r3, #22
 801efc0:	b29a      	uxth	r2, r3
 801efc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efc4:	801a      	strh	r2, [r3, #0]
 801efc6:	1d7b      	adds	r3, r7, #5
 801efc8:	33ff      	adds	r3, #255	@ 0xff
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	2b3e      	cmp	r3, #62	@ 0x3e
 801efce:	d922      	bls.n	801f016 <USB_EPStartXfer+0x602>
 801efd0:	1d7b      	adds	r3, r7, #5
 801efd2:	33ff      	adds	r3, #255	@ 0xff
 801efd4:	681b      	ldr	r3, [r3, #0]
 801efd6:	095b      	lsrs	r3, r3, #5
 801efd8:	21f4      	movs	r1, #244	@ 0xf4
 801efda:	187a      	adds	r2, r7, r1
 801efdc:	6013      	str	r3, [r2, #0]
 801efde:	1d7b      	adds	r3, r7, #5
 801efe0:	33ff      	adds	r3, #255	@ 0xff
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	221f      	movs	r2, #31
 801efe6:	4013      	ands	r3, r2
 801efe8:	d104      	bne.n	801eff4 <USB_EPStartXfer+0x5e0>
 801efea:	187b      	adds	r3, r7, r1
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	3b01      	subs	r3, #1
 801eff0:	187a      	adds	r2, r7, r1
 801eff2:	6013      	str	r3, [r2, #0]
 801eff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eff6:	881b      	ldrh	r3, [r3, #0]
 801eff8:	b29a      	uxth	r2, r3
 801effa:	23f4      	movs	r3, #244	@ 0xf4
 801effc:	18fb      	adds	r3, r7, r3
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	b29b      	uxth	r3, r3
 801f002:	029b      	lsls	r3, r3, #10
 801f004:	b29b      	uxth	r3, r3
 801f006:	4313      	orrs	r3, r2
 801f008:	b29b      	uxth	r3, r3
 801f00a:	4a55      	ldr	r2, [pc, #340]	@ (801f160 <USB_EPStartXfer+0x74c>)
 801f00c:	4313      	orrs	r3, r2
 801f00e:	b29a      	uxth	r2, r3
 801f010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f012:	801a      	strh	r2, [r3, #0]
 801f014:	e048      	b.n	801f0a8 <USB_EPStartXfer+0x694>
 801f016:	1d7b      	adds	r3, r7, #5
 801f018:	33ff      	adds	r3, #255	@ 0xff
 801f01a:	681b      	ldr	r3, [r3, #0]
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d108      	bne.n	801f032 <USB_EPStartXfer+0x61e>
 801f020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f022:	881b      	ldrh	r3, [r3, #0]
 801f024:	b29b      	uxth	r3, r3
 801f026:	4a4e      	ldr	r2, [pc, #312]	@ (801f160 <USB_EPStartXfer+0x74c>)
 801f028:	4313      	orrs	r3, r2
 801f02a:	b29a      	uxth	r2, r3
 801f02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f02e:	801a      	strh	r2, [r3, #0]
 801f030:	e03a      	b.n	801f0a8 <USB_EPStartXfer+0x694>
 801f032:	1d7b      	adds	r3, r7, #5
 801f034:	33ff      	adds	r3, #255	@ 0xff
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	085b      	lsrs	r3, r3, #1
 801f03a:	21f4      	movs	r1, #244	@ 0xf4
 801f03c:	187a      	adds	r2, r7, r1
 801f03e:	6013      	str	r3, [r2, #0]
 801f040:	1d7b      	adds	r3, r7, #5
 801f042:	33ff      	adds	r3, #255	@ 0xff
 801f044:	681b      	ldr	r3, [r3, #0]
 801f046:	2201      	movs	r2, #1
 801f048:	4013      	ands	r3, r2
 801f04a:	d004      	beq.n	801f056 <USB_EPStartXfer+0x642>
 801f04c:	187b      	adds	r3, r7, r1
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	3301      	adds	r3, #1
 801f052:	187a      	adds	r2, r7, r1
 801f054:	6013      	str	r3, [r2, #0]
 801f056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f058:	881b      	ldrh	r3, [r3, #0]
 801f05a:	b29a      	uxth	r2, r3
 801f05c:	23f4      	movs	r3, #244	@ 0xf4
 801f05e:	18fb      	adds	r3, r7, r3
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	b29b      	uxth	r3, r3
 801f064:	029b      	lsls	r3, r3, #10
 801f066:	b29b      	uxth	r3, r3
 801f068:	4313      	orrs	r3, r2
 801f06a:	b29a      	uxth	r2, r3
 801f06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f06e:	801a      	strh	r2, [r3, #0]
 801f070:	e01a      	b.n	801f0a8 <USB_EPStartXfer+0x694>
 801f072:	683b      	ldr	r3, [r7, #0]
 801f074:	785b      	ldrb	r3, [r3, #1]
 801f076:	2b01      	cmp	r3, #1
 801f078:	d116      	bne.n	801f0a8 <USB_EPStartXfer+0x694>
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	2250      	movs	r2, #80	@ 0x50
 801f07e:	5a9b      	ldrh	r3, [r3, r2]
 801f080:	b29b      	uxth	r3, r3
 801f082:	001a      	movs	r2, r3
 801f084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f086:	189b      	adds	r3, r3, r2
 801f088:	643b      	str	r3, [r7, #64]	@ 0x40
 801f08a:	683b      	ldr	r3, [r7, #0]
 801f08c:	781b      	ldrb	r3, [r3, #0]
 801f08e:	00da      	lsls	r2, r3, #3
 801f090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f092:	18d3      	adds	r3, r2, r3
 801f094:	4a33      	ldr	r2, [pc, #204]	@ (801f164 <USB_EPStartXfer+0x750>)
 801f096:	4694      	mov	ip, r2
 801f098:	4463      	add	r3, ip
 801f09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f09c:	1d7b      	adds	r3, r7, #5
 801f09e:	33ff      	adds	r3, #255	@ 0xff
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	b29a      	uxth	r2, r3
 801f0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f0a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f0a8:	2076      	movs	r0, #118	@ 0x76
 801f0aa:	183b      	adds	r3, r7, r0
 801f0ac:	683a      	ldr	r2, [r7, #0]
 801f0ae:	8952      	ldrh	r2, [r2, #10]
 801f0b0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f0b2:	683b      	ldr	r3, [r7, #0]
 801f0b4:	6959      	ldr	r1, [r3, #20]
 801f0b6:	1d7b      	adds	r3, r7, #5
 801f0b8:	33ff      	adds	r3, #255	@ 0xff
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	b29c      	uxth	r4, r3
 801f0be:	183b      	adds	r3, r7, r0
 801f0c0:	881a      	ldrh	r2, [r3, #0]
 801f0c2:	6878      	ldr	r0, [r7, #4]
 801f0c4:	0023      	movs	r3, r4
 801f0c6:	f000 ff17 	bl	801fef8 <USB_WritePMA>
 801f0ca:	e1b6      	b.n	801f43a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801f0cc:	683b      	ldr	r3, [r7, #0]
 801f0ce:	6a1b      	ldr	r3, [r3, #32]
 801f0d0:	1d7a      	adds	r2, r7, #5
 801f0d2:	32ff      	adds	r2, #255	@ 0xff
 801f0d4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801f0d6:	687a      	ldr	r2, [r7, #4]
 801f0d8:	683b      	ldr	r3, [r7, #0]
 801f0da:	781b      	ldrb	r3, [r3, #0]
 801f0dc:	009b      	lsls	r3, r3, #2
 801f0de:	18d3      	adds	r3, r2, r3
 801f0e0:	881b      	ldrh	r3, [r3, #0]
 801f0e2:	b29a      	uxth	r2, r3
 801f0e4:	2062      	movs	r0, #98	@ 0x62
 801f0e6:	183b      	adds	r3, r7, r0
 801f0e8:	491f      	ldr	r1, [pc, #124]	@ (801f168 <USB_EPStartXfer+0x754>)
 801f0ea:	400a      	ands	r2, r1
 801f0ec:	801a      	strh	r2, [r3, #0]
 801f0ee:	687a      	ldr	r2, [r7, #4]
 801f0f0:	683b      	ldr	r3, [r7, #0]
 801f0f2:	781b      	ldrb	r3, [r3, #0]
 801f0f4:	009b      	lsls	r3, r3, #2
 801f0f6:	18d3      	adds	r3, r2, r3
 801f0f8:	183a      	adds	r2, r7, r0
 801f0fa:	8812      	ldrh	r2, [r2, #0]
 801f0fc:	491b      	ldr	r1, [pc, #108]	@ (801f16c <USB_EPStartXfer+0x758>)
 801f0fe:	430a      	orrs	r2, r1
 801f100:	b292      	uxth	r2, r2
 801f102:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	2250      	movs	r2, #80	@ 0x50
 801f10c:	5a9b      	ldrh	r3, [r3, r2]
 801f10e:	b29b      	uxth	r3, r3
 801f110:	001a      	movs	r2, r3
 801f112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f114:	189b      	adds	r3, r3, r2
 801f116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f118:	683b      	ldr	r3, [r7, #0]
 801f11a:	781b      	ldrb	r3, [r3, #0]
 801f11c:	00da      	lsls	r2, r3, #3
 801f11e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f120:	18d3      	adds	r3, r2, r3
 801f122:	4a0e      	ldr	r2, [pc, #56]	@ (801f15c <USB_EPStartXfer+0x748>)
 801f124:	4694      	mov	ip, r2
 801f126:	4463      	add	r3, ip
 801f128:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f12a:	1d7b      	adds	r3, r7, #5
 801f12c:	33ff      	adds	r3, #255	@ 0xff
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	b29a      	uxth	r2, r3
 801f132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f134:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f136:	2076      	movs	r0, #118	@ 0x76
 801f138:	183b      	adds	r3, r7, r0
 801f13a:	683a      	ldr	r2, [r7, #0]
 801f13c:	8912      	ldrh	r2, [r2, #8]
 801f13e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f140:	683b      	ldr	r3, [r7, #0]
 801f142:	6959      	ldr	r1, [r3, #20]
 801f144:	1d7b      	adds	r3, r7, #5
 801f146:	33ff      	adds	r3, #255	@ 0xff
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	b29c      	uxth	r4, r3
 801f14c:	183b      	adds	r3, r7, r0
 801f14e:	881a      	ldrh	r2, [r3, #0]
 801f150:	6878      	ldr	r0, [r7, #4]
 801f152:	0023      	movs	r3, r4
 801f154:	f000 fed0 	bl	801fef8 <USB_WritePMA>
 801f158:	e16f      	b.n	801f43a <USB_EPStartXfer+0xa26>
 801f15a:	46c0      	nop			@ (mov r8, r8)
 801f15c:	00000402 	.word	0x00000402
 801f160:	ffff8000 	.word	0xffff8000
 801f164:	00000406 	.word	0x00000406
 801f168:	ffff8e8f 	.word	0xffff8e8f
 801f16c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801f170:	683b      	ldr	r3, [r7, #0]
 801f172:	6a1a      	ldr	r2, [r3, #32]
 801f174:	1d7b      	adds	r3, r7, #5
 801f176:	33ff      	adds	r3, #255	@ 0xff
 801f178:	681b      	ldr	r3, [r3, #0]
 801f17a:	1ad2      	subs	r2, r2, r3
 801f17c:	683b      	ldr	r3, [r7, #0]
 801f17e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f180:	687a      	ldr	r2, [r7, #4]
 801f182:	683b      	ldr	r3, [r7, #0]
 801f184:	781b      	ldrb	r3, [r3, #0]
 801f186:	009b      	lsls	r3, r3, #2
 801f188:	18d3      	adds	r3, r2, r3
 801f18a:	881b      	ldrh	r3, [r3, #0]
 801f18c:	b29b      	uxth	r3, r3
 801f18e:	001a      	movs	r2, r3
 801f190:	2340      	movs	r3, #64	@ 0x40
 801f192:	4013      	ands	r3, r2
 801f194:	d100      	bne.n	801f198 <USB_EPStartXfer+0x784>
 801f196:	e0a4      	b.n	801f2e2 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	673b      	str	r3, [r7, #112]	@ 0x70
 801f19c:	683b      	ldr	r3, [r7, #0]
 801f19e:	785b      	ldrb	r3, [r3, #1]
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d000      	beq.n	801f1a6 <USB_EPStartXfer+0x792>
 801f1a4:	e070      	b.n	801f288 <USB_EPStartXfer+0x874>
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	2250      	movs	r2, #80	@ 0x50
 801f1ae:	5a9b      	ldrh	r3, [r3, r2]
 801f1b0:	b29b      	uxth	r3, r3
 801f1b2:	001a      	movs	r2, r3
 801f1b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f1b6:	189b      	adds	r3, r3, r2
 801f1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f1ba:	683b      	ldr	r3, [r7, #0]
 801f1bc:	781b      	ldrb	r3, [r3, #0]
 801f1be:	00da      	lsls	r2, r3, #3
 801f1c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f1c2:	18d3      	adds	r3, r2, r3
 801f1c4:	4abc      	ldr	r2, [pc, #752]	@ (801f4b8 <USB_EPStartXfer+0xaa4>)
 801f1c6:	4694      	mov	ip, r2
 801f1c8:	4463      	add	r3, ip
 801f1ca:	667b      	str	r3, [r7, #100]	@ 0x64
 801f1cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f1ce:	881b      	ldrh	r3, [r3, #0]
 801f1d0:	b29b      	uxth	r3, r3
 801f1d2:	059b      	lsls	r3, r3, #22
 801f1d4:	0d9b      	lsrs	r3, r3, #22
 801f1d6:	b29a      	uxth	r2, r3
 801f1d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f1da:	801a      	strh	r2, [r3, #0]
 801f1dc:	1d7b      	adds	r3, r7, #5
 801f1de:	33ff      	adds	r3, #255	@ 0xff
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	2b3e      	cmp	r3, #62	@ 0x3e
 801f1e4:	d922      	bls.n	801f22c <USB_EPStartXfer+0x818>
 801f1e6:	1d7b      	adds	r3, r7, #5
 801f1e8:	33ff      	adds	r3, #255	@ 0xff
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	095b      	lsrs	r3, r3, #5
 801f1ee:	21f0      	movs	r1, #240	@ 0xf0
 801f1f0:	187a      	adds	r2, r7, r1
 801f1f2:	6013      	str	r3, [r2, #0]
 801f1f4:	1d7b      	adds	r3, r7, #5
 801f1f6:	33ff      	adds	r3, #255	@ 0xff
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	221f      	movs	r2, #31
 801f1fc:	4013      	ands	r3, r2
 801f1fe:	d104      	bne.n	801f20a <USB_EPStartXfer+0x7f6>
 801f200:	187b      	adds	r3, r7, r1
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	3b01      	subs	r3, #1
 801f206:	187a      	adds	r2, r7, r1
 801f208:	6013      	str	r3, [r2, #0]
 801f20a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f20c:	881b      	ldrh	r3, [r3, #0]
 801f20e:	b29a      	uxth	r2, r3
 801f210:	23f0      	movs	r3, #240	@ 0xf0
 801f212:	18fb      	adds	r3, r7, r3
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	b29b      	uxth	r3, r3
 801f218:	029b      	lsls	r3, r3, #10
 801f21a:	b29b      	uxth	r3, r3
 801f21c:	4313      	orrs	r3, r2
 801f21e:	b29b      	uxth	r3, r3
 801f220:	4aa6      	ldr	r2, [pc, #664]	@ (801f4bc <USB_EPStartXfer+0xaa8>)
 801f222:	4313      	orrs	r3, r2
 801f224:	b29a      	uxth	r2, r3
 801f226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f228:	801a      	strh	r2, [r3, #0]
 801f22a:	e048      	b.n	801f2be <USB_EPStartXfer+0x8aa>
 801f22c:	1d7b      	adds	r3, r7, #5
 801f22e:	33ff      	adds	r3, #255	@ 0xff
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	2b00      	cmp	r3, #0
 801f234:	d108      	bne.n	801f248 <USB_EPStartXfer+0x834>
 801f236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f238:	881b      	ldrh	r3, [r3, #0]
 801f23a:	b29b      	uxth	r3, r3
 801f23c:	4a9f      	ldr	r2, [pc, #636]	@ (801f4bc <USB_EPStartXfer+0xaa8>)
 801f23e:	4313      	orrs	r3, r2
 801f240:	b29a      	uxth	r2, r3
 801f242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f244:	801a      	strh	r2, [r3, #0]
 801f246:	e03a      	b.n	801f2be <USB_EPStartXfer+0x8aa>
 801f248:	1d7b      	adds	r3, r7, #5
 801f24a:	33ff      	adds	r3, #255	@ 0xff
 801f24c:	681b      	ldr	r3, [r3, #0]
 801f24e:	085b      	lsrs	r3, r3, #1
 801f250:	21f0      	movs	r1, #240	@ 0xf0
 801f252:	187a      	adds	r2, r7, r1
 801f254:	6013      	str	r3, [r2, #0]
 801f256:	1d7b      	adds	r3, r7, #5
 801f258:	33ff      	adds	r3, #255	@ 0xff
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	2201      	movs	r2, #1
 801f25e:	4013      	ands	r3, r2
 801f260:	d004      	beq.n	801f26c <USB_EPStartXfer+0x858>
 801f262:	187b      	adds	r3, r7, r1
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	3301      	adds	r3, #1
 801f268:	187a      	adds	r2, r7, r1
 801f26a:	6013      	str	r3, [r2, #0]
 801f26c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f26e:	881b      	ldrh	r3, [r3, #0]
 801f270:	b29a      	uxth	r2, r3
 801f272:	23f0      	movs	r3, #240	@ 0xf0
 801f274:	18fb      	adds	r3, r7, r3
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	b29b      	uxth	r3, r3
 801f27a:	029b      	lsls	r3, r3, #10
 801f27c:	b29b      	uxth	r3, r3
 801f27e:	4313      	orrs	r3, r2
 801f280:	b29a      	uxth	r2, r3
 801f282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f284:	801a      	strh	r2, [r3, #0]
 801f286:	e01a      	b.n	801f2be <USB_EPStartXfer+0x8aa>
 801f288:	683b      	ldr	r3, [r7, #0]
 801f28a:	785b      	ldrb	r3, [r3, #1]
 801f28c:	2b01      	cmp	r3, #1
 801f28e:	d116      	bne.n	801f2be <USB_EPStartXfer+0x8aa>
 801f290:	687b      	ldr	r3, [r7, #4]
 801f292:	2250      	movs	r2, #80	@ 0x50
 801f294:	5a9b      	ldrh	r3, [r3, r2]
 801f296:	b29b      	uxth	r3, r3
 801f298:	001a      	movs	r2, r3
 801f29a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f29c:	189b      	adds	r3, r3, r2
 801f29e:	673b      	str	r3, [r7, #112]	@ 0x70
 801f2a0:	683b      	ldr	r3, [r7, #0]
 801f2a2:	781b      	ldrb	r3, [r3, #0]
 801f2a4:	00da      	lsls	r2, r3, #3
 801f2a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f2a8:	18d3      	adds	r3, r2, r3
 801f2aa:	4a83      	ldr	r2, [pc, #524]	@ (801f4b8 <USB_EPStartXfer+0xaa4>)
 801f2ac:	4694      	mov	ip, r2
 801f2ae:	4463      	add	r3, ip
 801f2b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f2b2:	1d7b      	adds	r3, r7, #5
 801f2b4:	33ff      	adds	r3, #255	@ 0xff
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	b29a      	uxth	r2, r3
 801f2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f2bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801f2be:	2076      	movs	r0, #118	@ 0x76
 801f2c0:	183b      	adds	r3, r7, r0
 801f2c2:	683a      	ldr	r2, [r7, #0]
 801f2c4:	8952      	ldrh	r2, [r2, #10]
 801f2c6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f2c8:	683b      	ldr	r3, [r7, #0]
 801f2ca:	6959      	ldr	r1, [r3, #20]
 801f2cc:	1d7b      	adds	r3, r7, #5
 801f2ce:	33ff      	adds	r3, #255	@ 0xff
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	b29c      	uxth	r4, r3
 801f2d4:	183b      	adds	r3, r7, r0
 801f2d6:	881a      	ldrh	r2, [r3, #0]
 801f2d8:	6878      	ldr	r0, [r7, #4]
 801f2da:	0023      	movs	r3, r4
 801f2dc:	f000 fe0c 	bl	801fef8 <USB_WritePMA>
 801f2e0:	e0ab      	b.n	801f43a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f2e2:	683b      	ldr	r3, [r7, #0]
 801f2e4:	785b      	ldrb	r3, [r3, #1]
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d000      	beq.n	801f2ec <USB_EPStartXfer+0x8d8>
 801f2ea:	e070      	b.n	801f3ce <USB_EPStartXfer+0x9ba>
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	2250      	movs	r2, #80	@ 0x50
 801f2f4:	5a9b      	ldrh	r3, [r3, r2]
 801f2f6:	b29b      	uxth	r3, r3
 801f2f8:	001a      	movs	r2, r3
 801f2fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f2fc:	189b      	adds	r3, r3, r2
 801f2fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f300:	683b      	ldr	r3, [r7, #0]
 801f302:	781b      	ldrb	r3, [r3, #0]
 801f304:	00da      	lsls	r2, r3, #3
 801f306:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f308:	18d3      	adds	r3, r2, r3
 801f30a:	4a6d      	ldr	r2, [pc, #436]	@ (801f4c0 <USB_EPStartXfer+0xaac>)
 801f30c:	4694      	mov	ip, r2
 801f30e:	4463      	add	r3, ip
 801f310:	67bb      	str	r3, [r7, #120]	@ 0x78
 801f312:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f314:	881b      	ldrh	r3, [r3, #0]
 801f316:	b29b      	uxth	r3, r3
 801f318:	059b      	lsls	r3, r3, #22
 801f31a:	0d9b      	lsrs	r3, r3, #22
 801f31c:	b29a      	uxth	r2, r3
 801f31e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f320:	801a      	strh	r2, [r3, #0]
 801f322:	1d7b      	adds	r3, r7, #5
 801f324:	33ff      	adds	r3, #255	@ 0xff
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	2b3e      	cmp	r3, #62	@ 0x3e
 801f32a:	d922      	bls.n	801f372 <USB_EPStartXfer+0x95e>
 801f32c:	1d7b      	adds	r3, r7, #5
 801f32e:	33ff      	adds	r3, #255	@ 0xff
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	095b      	lsrs	r3, r3, #5
 801f334:	21ec      	movs	r1, #236	@ 0xec
 801f336:	187a      	adds	r2, r7, r1
 801f338:	6013      	str	r3, [r2, #0]
 801f33a:	1d7b      	adds	r3, r7, #5
 801f33c:	33ff      	adds	r3, #255	@ 0xff
 801f33e:	681b      	ldr	r3, [r3, #0]
 801f340:	221f      	movs	r2, #31
 801f342:	4013      	ands	r3, r2
 801f344:	d104      	bne.n	801f350 <USB_EPStartXfer+0x93c>
 801f346:	187b      	adds	r3, r7, r1
 801f348:	681b      	ldr	r3, [r3, #0]
 801f34a:	3b01      	subs	r3, #1
 801f34c:	187a      	adds	r2, r7, r1
 801f34e:	6013      	str	r3, [r2, #0]
 801f350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f352:	881b      	ldrh	r3, [r3, #0]
 801f354:	b29a      	uxth	r2, r3
 801f356:	23ec      	movs	r3, #236	@ 0xec
 801f358:	18fb      	adds	r3, r7, r3
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	b29b      	uxth	r3, r3
 801f35e:	029b      	lsls	r3, r3, #10
 801f360:	b29b      	uxth	r3, r3
 801f362:	4313      	orrs	r3, r2
 801f364:	b29b      	uxth	r3, r3
 801f366:	4a55      	ldr	r2, [pc, #340]	@ (801f4bc <USB_EPStartXfer+0xaa8>)
 801f368:	4313      	orrs	r3, r2
 801f36a:	b29a      	uxth	r2, r3
 801f36c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f36e:	801a      	strh	r2, [r3, #0]
 801f370:	e052      	b.n	801f418 <USB_EPStartXfer+0xa04>
 801f372:	1d7b      	adds	r3, r7, #5
 801f374:	33ff      	adds	r3, #255	@ 0xff
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d108      	bne.n	801f38e <USB_EPStartXfer+0x97a>
 801f37c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f37e:	881b      	ldrh	r3, [r3, #0]
 801f380:	b29b      	uxth	r3, r3
 801f382:	4a4e      	ldr	r2, [pc, #312]	@ (801f4bc <USB_EPStartXfer+0xaa8>)
 801f384:	4313      	orrs	r3, r2
 801f386:	b29a      	uxth	r2, r3
 801f388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f38a:	801a      	strh	r2, [r3, #0]
 801f38c:	e044      	b.n	801f418 <USB_EPStartXfer+0xa04>
 801f38e:	1d7b      	adds	r3, r7, #5
 801f390:	33ff      	adds	r3, #255	@ 0xff
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	085b      	lsrs	r3, r3, #1
 801f396:	21ec      	movs	r1, #236	@ 0xec
 801f398:	187a      	adds	r2, r7, r1
 801f39a:	6013      	str	r3, [r2, #0]
 801f39c:	1d7b      	adds	r3, r7, #5
 801f39e:	33ff      	adds	r3, #255	@ 0xff
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	2201      	movs	r2, #1
 801f3a4:	4013      	ands	r3, r2
 801f3a6:	d004      	beq.n	801f3b2 <USB_EPStartXfer+0x99e>
 801f3a8:	187b      	adds	r3, r7, r1
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	3301      	adds	r3, #1
 801f3ae:	187a      	adds	r2, r7, r1
 801f3b0:	6013      	str	r3, [r2, #0]
 801f3b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f3b4:	881b      	ldrh	r3, [r3, #0]
 801f3b6:	b29a      	uxth	r2, r3
 801f3b8:	23ec      	movs	r3, #236	@ 0xec
 801f3ba:	18fb      	adds	r3, r7, r3
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	b29b      	uxth	r3, r3
 801f3c0:	029b      	lsls	r3, r3, #10
 801f3c2:	b29b      	uxth	r3, r3
 801f3c4:	4313      	orrs	r3, r2
 801f3c6:	b29a      	uxth	r2, r3
 801f3c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f3ca:	801a      	strh	r2, [r3, #0]
 801f3cc:	e024      	b.n	801f418 <USB_EPStartXfer+0xa04>
 801f3ce:	683b      	ldr	r3, [r7, #0]
 801f3d0:	785b      	ldrb	r3, [r3, #1]
 801f3d2:	2b01      	cmp	r3, #1
 801f3d4:	d120      	bne.n	801f418 <USB_EPStartXfer+0xa04>
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	2184      	movs	r1, #132	@ 0x84
 801f3da:	187a      	adds	r2, r7, r1
 801f3dc:	6013      	str	r3, [r2, #0]
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	2250      	movs	r2, #80	@ 0x50
 801f3e2:	5a9b      	ldrh	r3, [r3, r2]
 801f3e4:	b29b      	uxth	r3, r3
 801f3e6:	001a      	movs	r2, r3
 801f3e8:	187b      	adds	r3, r7, r1
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	189b      	adds	r3, r3, r2
 801f3ee:	187a      	adds	r2, r7, r1
 801f3f0:	6013      	str	r3, [r2, #0]
 801f3f2:	683b      	ldr	r3, [r7, #0]
 801f3f4:	781b      	ldrb	r3, [r3, #0]
 801f3f6:	00da      	lsls	r2, r3, #3
 801f3f8:	187b      	adds	r3, r7, r1
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	18d3      	adds	r3, r2, r3
 801f3fe:	4a30      	ldr	r2, [pc, #192]	@ (801f4c0 <USB_EPStartXfer+0xaac>)
 801f400:	4694      	mov	ip, r2
 801f402:	4463      	add	r3, ip
 801f404:	2180      	movs	r1, #128	@ 0x80
 801f406:	187a      	adds	r2, r7, r1
 801f408:	6013      	str	r3, [r2, #0]
 801f40a:	1d7b      	adds	r3, r7, #5
 801f40c:	33ff      	adds	r3, #255	@ 0xff
 801f40e:	681b      	ldr	r3, [r3, #0]
 801f410:	b29a      	uxth	r2, r3
 801f412:	187b      	adds	r3, r7, r1
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f418:	2076      	movs	r0, #118	@ 0x76
 801f41a:	183b      	adds	r3, r7, r0
 801f41c:	683a      	ldr	r2, [r7, #0]
 801f41e:	8912      	ldrh	r2, [r2, #8]
 801f420:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f422:	683b      	ldr	r3, [r7, #0]
 801f424:	6959      	ldr	r1, [r3, #20]
 801f426:	1d7b      	adds	r3, r7, #5
 801f428:	33ff      	adds	r3, #255	@ 0xff
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	b29c      	uxth	r4, r3
 801f42e:	183b      	adds	r3, r7, r0
 801f430:	881a      	ldrh	r2, [r3, #0]
 801f432:	6878      	ldr	r0, [r7, #4]
 801f434:	0023      	movs	r3, r4
 801f436:	f000 fd5f 	bl	801fef8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801f43a:	687a      	ldr	r2, [r7, #4]
 801f43c:	683b      	ldr	r3, [r7, #0]
 801f43e:	781b      	ldrb	r3, [r3, #0]
 801f440:	009b      	lsls	r3, r3, #2
 801f442:	18d3      	adds	r3, r2, r3
 801f444:	881b      	ldrh	r3, [r3, #0]
 801f446:	b29a      	uxth	r2, r3
 801f448:	200a      	movs	r0, #10
 801f44a:	183b      	adds	r3, r7, r0
 801f44c:	491d      	ldr	r1, [pc, #116]	@ (801f4c4 <USB_EPStartXfer+0xab0>)
 801f44e:	400a      	ands	r2, r1
 801f450:	801a      	strh	r2, [r3, #0]
 801f452:	183b      	adds	r3, r7, r0
 801f454:	183a      	adds	r2, r7, r0
 801f456:	8812      	ldrh	r2, [r2, #0]
 801f458:	2110      	movs	r1, #16
 801f45a:	404a      	eors	r2, r1
 801f45c:	801a      	strh	r2, [r3, #0]
 801f45e:	183b      	adds	r3, r7, r0
 801f460:	183a      	adds	r2, r7, r0
 801f462:	8812      	ldrh	r2, [r2, #0]
 801f464:	2120      	movs	r1, #32
 801f466:	404a      	eors	r2, r1
 801f468:	801a      	strh	r2, [r3, #0]
 801f46a:	687a      	ldr	r2, [r7, #4]
 801f46c:	683b      	ldr	r3, [r7, #0]
 801f46e:	781b      	ldrb	r3, [r3, #0]
 801f470:	009b      	lsls	r3, r3, #2
 801f472:	18d3      	adds	r3, r2, r3
 801f474:	183a      	adds	r2, r7, r0
 801f476:	8812      	ldrh	r2, [r2, #0]
 801f478:	4913      	ldr	r1, [pc, #76]	@ (801f4c8 <USB_EPStartXfer+0xab4>)
 801f47a:	430a      	orrs	r2, r1
 801f47c:	b292      	uxth	r2, r2
 801f47e:	801a      	strh	r2, [r3, #0]
 801f480:	f000 fbf4 	bl	801fc6c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801f484:	683b      	ldr	r3, [r7, #0]
 801f486:	7b1b      	ldrb	r3, [r3, #12]
 801f488:	2b00      	cmp	r3, #0
 801f48a:	d000      	beq.n	801f48e <USB_EPStartXfer+0xa7a>
 801f48c:	e0a9      	b.n	801f5e2 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801f48e:	683b      	ldr	r3, [r7, #0]
 801f490:	699a      	ldr	r2, [r3, #24]
 801f492:	683b      	ldr	r3, [r7, #0]
 801f494:	691b      	ldr	r3, [r3, #16]
 801f496:	429a      	cmp	r2, r3
 801f498:	d918      	bls.n	801f4cc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801f49a:	683b      	ldr	r3, [r7, #0]
 801f49c:	691b      	ldr	r3, [r3, #16]
 801f49e:	1d7a      	adds	r2, r7, #5
 801f4a0:	32ff      	adds	r2, #255	@ 0xff
 801f4a2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801f4a4:	683b      	ldr	r3, [r7, #0]
 801f4a6:	699a      	ldr	r2, [r3, #24]
 801f4a8:	1d7b      	adds	r3, r7, #5
 801f4aa:	33ff      	adds	r3, #255	@ 0xff
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	1ad2      	subs	r2, r2, r3
 801f4b0:	683b      	ldr	r3, [r7, #0]
 801f4b2:	619a      	str	r2, [r3, #24]
 801f4b4:	e012      	b.n	801f4dc <USB_EPStartXfer+0xac8>
 801f4b6:	46c0      	nop			@ (mov r8, r8)
 801f4b8:	00000406 	.word	0x00000406
 801f4bc:	ffff8000 	.word	0xffff8000
 801f4c0:	00000402 	.word	0x00000402
 801f4c4:	ffff8fbf 	.word	0xffff8fbf
 801f4c8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801f4cc:	683b      	ldr	r3, [r7, #0]
 801f4ce:	699b      	ldr	r3, [r3, #24]
 801f4d0:	1d7a      	adds	r2, r7, #5
 801f4d2:	32ff      	adds	r2, #255	@ 0xff
 801f4d4:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801f4d6:	683b      	ldr	r3, [r7, #0]
 801f4d8:	2200      	movs	r2, #0
 801f4da:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	2190      	movs	r1, #144	@ 0x90
 801f4e0:	187a      	adds	r2, r7, r1
 801f4e2:	6013      	str	r3, [r2, #0]
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	2250      	movs	r2, #80	@ 0x50
 801f4e8:	5a9b      	ldrh	r3, [r3, r2]
 801f4ea:	b29b      	uxth	r3, r3
 801f4ec:	001a      	movs	r2, r3
 801f4ee:	187b      	adds	r3, r7, r1
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	189b      	adds	r3, r3, r2
 801f4f4:	187a      	adds	r2, r7, r1
 801f4f6:	6013      	str	r3, [r2, #0]
 801f4f8:	683b      	ldr	r3, [r7, #0]
 801f4fa:	781b      	ldrb	r3, [r3, #0]
 801f4fc:	00da      	lsls	r2, r3, #3
 801f4fe:	187b      	adds	r3, r7, r1
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	18d3      	adds	r3, r2, r3
 801f504:	4acf      	ldr	r2, [pc, #828]	@ (801f844 <USB_EPStartXfer+0xe30>)
 801f506:	4694      	mov	ip, r2
 801f508:	4463      	add	r3, ip
 801f50a:	218c      	movs	r1, #140	@ 0x8c
 801f50c:	187a      	adds	r2, r7, r1
 801f50e:	6013      	str	r3, [r2, #0]
 801f510:	187b      	adds	r3, r7, r1
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	881b      	ldrh	r3, [r3, #0]
 801f516:	b29b      	uxth	r3, r3
 801f518:	059b      	lsls	r3, r3, #22
 801f51a:	0d9b      	lsrs	r3, r3, #22
 801f51c:	b29a      	uxth	r2, r3
 801f51e:	187b      	adds	r3, r7, r1
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	801a      	strh	r2, [r3, #0]
 801f524:	1d7b      	adds	r3, r7, #5
 801f526:	33ff      	adds	r3, #255	@ 0xff
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	2b3e      	cmp	r3, #62	@ 0x3e
 801f52c:	d925      	bls.n	801f57a <USB_EPStartXfer+0xb66>
 801f52e:	1d7b      	adds	r3, r7, #5
 801f530:	33ff      	adds	r3, #255	@ 0xff
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	095b      	lsrs	r3, r3, #5
 801f536:	21e8      	movs	r1, #232	@ 0xe8
 801f538:	187a      	adds	r2, r7, r1
 801f53a:	6013      	str	r3, [r2, #0]
 801f53c:	1d7b      	adds	r3, r7, #5
 801f53e:	33ff      	adds	r3, #255	@ 0xff
 801f540:	681b      	ldr	r3, [r3, #0]
 801f542:	221f      	movs	r2, #31
 801f544:	4013      	ands	r3, r2
 801f546:	d104      	bne.n	801f552 <USB_EPStartXfer+0xb3e>
 801f548:	187b      	adds	r3, r7, r1
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	3b01      	subs	r3, #1
 801f54e:	187a      	adds	r2, r7, r1
 801f550:	6013      	str	r3, [r2, #0]
 801f552:	218c      	movs	r1, #140	@ 0x8c
 801f554:	187b      	adds	r3, r7, r1
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	881b      	ldrh	r3, [r3, #0]
 801f55a:	b29a      	uxth	r2, r3
 801f55c:	23e8      	movs	r3, #232	@ 0xe8
 801f55e:	18fb      	adds	r3, r7, r3
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	b29b      	uxth	r3, r3
 801f564:	029b      	lsls	r3, r3, #10
 801f566:	b29b      	uxth	r3, r3
 801f568:	4313      	orrs	r3, r2
 801f56a:	b29b      	uxth	r3, r3
 801f56c:	4ab6      	ldr	r2, [pc, #728]	@ (801f848 <USB_EPStartXfer+0xe34>)
 801f56e:	4313      	orrs	r3, r2
 801f570:	b29a      	uxth	r2, r3
 801f572:	187b      	adds	r3, r7, r1
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	801a      	strh	r2, [r3, #0]
 801f578:	e353      	b.n	801fc22 <USB_EPStartXfer+0x120e>
 801f57a:	1d7b      	adds	r3, r7, #5
 801f57c:	33ff      	adds	r3, #255	@ 0xff
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	2b00      	cmp	r3, #0
 801f582:	d10b      	bne.n	801f59c <USB_EPStartXfer+0xb88>
 801f584:	218c      	movs	r1, #140	@ 0x8c
 801f586:	187b      	adds	r3, r7, r1
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	881b      	ldrh	r3, [r3, #0]
 801f58c:	b29b      	uxth	r3, r3
 801f58e:	4aae      	ldr	r2, [pc, #696]	@ (801f848 <USB_EPStartXfer+0xe34>)
 801f590:	4313      	orrs	r3, r2
 801f592:	b29a      	uxth	r2, r3
 801f594:	187b      	adds	r3, r7, r1
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	801a      	strh	r2, [r3, #0]
 801f59a:	e342      	b.n	801fc22 <USB_EPStartXfer+0x120e>
 801f59c:	1d7b      	adds	r3, r7, #5
 801f59e:	33ff      	adds	r3, #255	@ 0xff
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	085b      	lsrs	r3, r3, #1
 801f5a4:	21e8      	movs	r1, #232	@ 0xe8
 801f5a6:	187a      	adds	r2, r7, r1
 801f5a8:	6013      	str	r3, [r2, #0]
 801f5aa:	1d7b      	adds	r3, r7, #5
 801f5ac:	33ff      	adds	r3, #255	@ 0xff
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	2201      	movs	r2, #1
 801f5b2:	4013      	ands	r3, r2
 801f5b4:	d004      	beq.n	801f5c0 <USB_EPStartXfer+0xbac>
 801f5b6:	187b      	adds	r3, r7, r1
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	3301      	adds	r3, #1
 801f5bc:	187a      	adds	r2, r7, r1
 801f5be:	6013      	str	r3, [r2, #0]
 801f5c0:	218c      	movs	r1, #140	@ 0x8c
 801f5c2:	187b      	adds	r3, r7, r1
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	881b      	ldrh	r3, [r3, #0]
 801f5c8:	b29a      	uxth	r2, r3
 801f5ca:	23e8      	movs	r3, #232	@ 0xe8
 801f5cc:	18fb      	adds	r3, r7, r3
 801f5ce:	681b      	ldr	r3, [r3, #0]
 801f5d0:	b29b      	uxth	r3, r3
 801f5d2:	029b      	lsls	r3, r3, #10
 801f5d4:	b29b      	uxth	r3, r3
 801f5d6:	4313      	orrs	r3, r2
 801f5d8:	b29a      	uxth	r2, r3
 801f5da:	187b      	adds	r3, r7, r1
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	801a      	strh	r2, [r3, #0]
 801f5e0:	e31f      	b.n	801fc22 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	78db      	ldrb	r3, [r3, #3]
 801f5e6:	2b02      	cmp	r3, #2
 801f5e8:	d000      	beq.n	801f5ec <USB_EPStartXfer+0xbd8>
 801f5ea:	e191      	b.n	801f910 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801f5ec:	683b      	ldr	r3, [r7, #0]
 801f5ee:	785b      	ldrb	r3, [r3, #1]
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d000      	beq.n	801f5f6 <USB_EPStartXfer+0xbe2>
 801f5f4:	e07c      	b.n	801f6f0 <USB_EPStartXfer+0xcdc>
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	21ac      	movs	r1, #172	@ 0xac
 801f5fa:	187a      	adds	r2, r7, r1
 801f5fc:	6013      	str	r3, [r2, #0]
 801f5fe:	687b      	ldr	r3, [r7, #4]
 801f600:	2250      	movs	r2, #80	@ 0x50
 801f602:	5a9b      	ldrh	r3, [r3, r2]
 801f604:	b29b      	uxth	r3, r3
 801f606:	001a      	movs	r2, r3
 801f608:	187b      	adds	r3, r7, r1
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	189b      	adds	r3, r3, r2
 801f60e:	187a      	adds	r2, r7, r1
 801f610:	6013      	str	r3, [r2, #0]
 801f612:	683b      	ldr	r3, [r7, #0]
 801f614:	781b      	ldrb	r3, [r3, #0]
 801f616:	00da      	lsls	r2, r3, #3
 801f618:	187b      	adds	r3, r7, r1
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	18d3      	adds	r3, r2, r3
 801f61e:	4a8b      	ldr	r2, [pc, #556]	@ (801f84c <USB_EPStartXfer+0xe38>)
 801f620:	4694      	mov	ip, r2
 801f622:	4463      	add	r3, ip
 801f624:	21a8      	movs	r1, #168	@ 0xa8
 801f626:	187a      	adds	r2, r7, r1
 801f628:	6013      	str	r3, [r2, #0]
 801f62a:	187b      	adds	r3, r7, r1
 801f62c:	681b      	ldr	r3, [r3, #0]
 801f62e:	881b      	ldrh	r3, [r3, #0]
 801f630:	b29b      	uxth	r3, r3
 801f632:	059b      	lsls	r3, r3, #22
 801f634:	0d9b      	lsrs	r3, r3, #22
 801f636:	b29a      	uxth	r2, r3
 801f638:	187b      	adds	r3, r7, r1
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	801a      	strh	r2, [r3, #0]
 801f63e:	683b      	ldr	r3, [r7, #0]
 801f640:	691b      	ldr	r3, [r3, #16]
 801f642:	2b3e      	cmp	r3, #62	@ 0x3e
 801f644:	d923      	bls.n	801f68e <USB_EPStartXfer+0xc7a>
 801f646:	683b      	ldr	r3, [r7, #0]
 801f648:	691b      	ldr	r3, [r3, #16]
 801f64a:	095b      	lsrs	r3, r3, #5
 801f64c:	21e4      	movs	r1, #228	@ 0xe4
 801f64e:	187a      	adds	r2, r7, r1
 801f650:	6013      	str	r3, [r2, #0]
 801f652:	683b      	ldr	r3, [r7, #0]
 801f654:	691b      	ldr	r3, [r3, #16]
 801f656:	221f      	movs	r2, #31
 801f658:	4013      	ands	r3, r2
 801f65a:	d104      	bne.n	801f666 <USB_EPStartXfer+0xc52>
 801f65c:	187b      	adds	r3, r7, r1
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	3b01      	subs	r3, #1
 801f662:	187a      	adds	r2, r7, r1
 801f664:	6013      	str	r3, [r2, #0]
 801f666:	21a8      	movs	r1, #168	@ 0xa8
 801f668:	187b      	adds	r3, r7, r1
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	881b      	ldrh	r3, [r3, #0]
 801f66e:	b29a      	uxth	r2, r3
 801f670:	23e4      	movs	r3, #228	@ 0xe4
 801f672:	18fb      	adds	r3, r7, r3
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	b29b      	uxth	r3, r3
 801f678:	029b      	lsls	r3, r3, #10
 801f67a:	b29b      	uxth	r3, r3
 801f67c:	4313      	orrs	r3, r2
 801f67e:	b29b      	uxth	r3, r3
 801f680:	4a71      	ldr	r2, [pc, #452]	@ (801f848 <USB_EPStartXfer+0xe34>)
 801f682:	4313      	orrs	r3, r2
 801f684:	b29a      	uxth	r2, r3
 801f686:	187b      	adds	r3, r7, r1
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	801a      	strh	r2, [r3, #0]
 801f68c:	e054      	b.n	801f738 <USB_EPStartXfer+0xd24>
 801f68e:	683b      	ldr	r3, [r7, #0]
 801f690:	691b      	ldr	r3, [r3, #16]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d10b      	bne.n	801f6ae <USB_EPStartXfer+0xc9a>
 801f696:	21a8      	movs	r1, #168	@ 0xa8
 801f698:	187b      	adds	r3, r7, r1
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	881b      	ldrh	r3, [r3, #0]
 801f69e:	b29b      	uxth	r3, r3
 801f6a0:	4a69      	ldr	r2, [pc, #420]	@ (801f848 <USB_EPStartXfer+0xe34>)
 801f6a2:	4313      	orrs	r3, r2
 801f6a4:	b29a      	uxth	r2, r3
 801f6a6:	187b      	adds	r3, r7, r1
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	801a      	strh	r2, [r3, #0]
 801f6ac:	e044      	b.n	801f738 <USB_EPStartXfer+0xd24>
 801f6ae:	683b      	ldr	r3, [r7, #0]
 801f6b0:	691b      	ldr	r3, [r3, #16]
 801f6b2:	085b      	lsrs	r3, r3, #1
 801f6b4:	21e4      	movs	r1, #228	@ 0xe4
 801f6b6:	187a      	adds	r2, r7, r1
 801f6b8:	6013      	str	r3, [r2, #0]
 801f6ba:	683b      	ldr	r3, [r7, #0]
 801f6bc:	691b      	ldr	r3, [r3, #16]
 801f6be:	2201      	movs	r2, #1
 801f6c0:	4013      	ands	r3, r2
 801f6c2:	d004      	beq.n	801f6ce <USB_EPStartXfer+0xcba>
 801f6c4:	187b      	adds	r3, r7, r1
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	3301      	adds	r3, #1
 801f6ca:	187a      	adds	r2, r7, r1
 801f6cc:	6013      	str	r3, [r2, #0]
 801f6ce:	21a8      	movs	r1, #168	@ 0xa8
 801f6d0:	187b      	adds	r3, r7, r1
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	881b      	ldrh	r3, [r3, #0]
 801f6d6:	b29a      	uxth	r2, r3
 801f6d8:	23e4      	movs	r3, #228	@ 0xe4
 801f6da:	18fb      	adds	r3, r7, r3
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	b29b      	uxth	r3, r3
 801f6e0:	029b      	lsls	r3, r3, #10
 801f6e2:	b29b      	uxth	r3, r3
 801f6e4:	4313      	orrs	r3, r2
 801f6e6:	b29a      	uxth	r2, r3
 801f6e8:	187b      	adds	r3, r7, r1
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	801a      	strh	r2, [r3, #0]
 801f6ee:	e023      	b.n	801f738 <USB_EPStartXfer+0xd24>
 801f6f0:	683b      	ldr	r3, [r7, #0]
 801f6f2:	785b      	ldrb	r3, [r3, #1]
 801f6f4:	2b01      	cmp	r3, #1
 801f6f6:	d11f      	bne.n	801f738 <USB_EPStartXfer+0xd24>
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	21b4      	movs	r1, #180	@ 0xb4
 801f6fc:	187a      	adds	r2, r7, r1
 801f6fe:	6013      	str	r3, [r2, #0]
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	2250      	movs	r2, #80	@ 0x50
 801f704:	5a9b      	ldrh	r3, [r3, r2]
 801f706:	b29b      	uxth	r3, r3
 801f708:	001a      	movs	r2, r3
 801f70a:	187b      	adds	r3, r7, r1
 801f70c:	681b      	ldr	r3, [r3, #0]
 801f70e:	189b      	adds	r3, r3, r2
 801f710:	187a      	adds	r2, r7, r1
 801f712:	6013      	str	r3, [r2, #0]
 801f714:	683b      	ldr	r3, [r7, #0]
 801f716:	781b      	ldrb	r3, [r3, #0]
 801f718:	00da      	lsls	r2, r3, #3
 801f71a:	187b      	adds	r3, r7, r1
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	18d3      	adds	r3, r2, r3
 801f720:	4a4a      	ldr	r2, [pc, #296]	@ (801f84c <USB_EPStartXfer+0xe38>)
 801f722:	4694      	mov	ip, r2
 801f724:	4463      	add	r3, ip
 801f726:	21b0      	movs	r1, #176	@ 0xb0
 801f728:	187a      	adds	r2, r7, r1
 801f72a:	6013      	str	r3, [r2, #0]
 801f72c:	683b      	ldr	r3, [r7, #0]
 801f72e:	691b      	ldr	r3, [r3, #16]
 801f730:	b29a      	uxth	r2, r3
 801f732:	187b      	adds	r3, r7, r1
 801f734:	681b      	ldr	r3, [r3, #0]
 801f736:	801a      	strh	r2, [r3, #0]
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	22a4      	movs	r2, #164	@ 0xa4
 801f73c:	18ba      	adds	r2, r7, r2
 801f73e:	6013      	str	r3, [r2, #0]
 801f740:	683b      	ldr	r3, [r7, #0]
 801f742:	785b      	ldrb	r3, [r3, #1]
 801f744:	2b00      	cmp	r3, #0
 801f746:	d000      	beq.n	801f74a <USB_EPStartXfer+0xd36>
 801f748:	e082      	b.n	801f850 <USB_EPStartXfer+0xe3c>
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	219c      	movs	r1, #156	@ 0x9c
 801f74e:	187a      	adds	r2, r7, r1
 801f750:	6013      	str	r3, [r2, #0]
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	2250      	movs	r2, #80	@ 0x50
 801f756:	5a9b      	ldrh	r3, [r3, r2]
 801f758:	b29b      	uxth	r3, r3
 801f75a:	001a      	movs	r2, r3
 801f75c:	187b      	adds	r3, r7, r1
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	189b      	adds	r3, r3, r2
 801f762:	187a      	adds	r2, r7, r1
 801f764:	6013      	str	r3, [r2, #0]
 801f766:	683b      	ldr	r3, [r7, #0]
 801f768:	781b      	ldrb	r3, [r3, #0]
 801f76a:	00da      	lsls	r2, r3, #3
 801f76c:	187b      	adds	r3, r7, r1
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	18d3      	adds	r3, r2, r3
 801f772:	4a34      	ldr	r2, [pc, #208]	@ (801f844 <USB_EPStartXfer+0xe30>)
 801f774:	4694      	mov	ip, r2
 801f776:	4463      	add	r3, ip
 801f778:	2198      	movs	r1, #152	@ 0x98
 801f77a:	187a      	adds	r2, r7, r1
 801f77c:	6013      	str	r3, [r2, #0]
 801f77e:	187b      	adds	r3, r7, r1
 801f780:	681b      	ldr	r3, [r3, #0]
 801f782:	881b      	ldrh	r3, [r3, #0]
 801f784:	b29b      	uxth	r3, r3
 801f786:	059b      	lsls	r3, r3, #22
 801f788:	0d9b      	lsrs	r3, r3, #22
 801f78a:	b29a      	uxth	r2, r3
 801f78c:	187b      	adds	r3, r7, r1
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	801a      	strh	r2, [r3, #0]
 801f792:	683b      	ldr	r3, [r7, #0]
 801f794:	691b      	ldr	r3, [r3, #16]
 801f796:	2b3e      	cmp	r3, #62	@ 0x3e
 801f798:	d923      	bls.n	801f7e2 <USB_EPStartXfer+0xdce>
 801f79a:	683b      	ldr	r3, [r7, #0]
 801f79c:	691b      	ldr	r3, [r3, #16]
 801f79e:	095b      	lsrs	r3, r3, #5
 801f7a0:	21e0      	movs	r1, #224	@ 0xe0
 801f7a2:	187a      	adds	r2, r7, r1
 801f7a4:	6013      	str	r3, [r2, #0]
 801f7a6:	683b      	ldr	r3, [r7, #0]
 801f7a8:	691b      	ldr	r3, [r3, #16]
 801f7aa:	221f      	movs	r2, #31
 801f7ac:	4013      	ands	r3, r2
 801f7ae:	d104      	bne.n	801f7ba <USB_EPStartXfer+0xda6>
 801f7b0:	187b      	adds	r3, r7, r1
 801f7b2:	681b      	ldr	r3, [r3, #0]
 801f7b4:	3b01      	subs	r3, #1
 801f7b6:	187a      	adds	r2, r7, r1
 801f7b8:	6013      	str	r3, [r2, #0]
 801f7ba:	2198      	movs	r1, #152	@ 0x98
 801f7bc:	187b      	adds	r3, r7, r1
 801f7be:	681b      	ldr	r3, [r3, #0]
 801f7c0:	881b      	ldrh	r3, [r3, #0]
 801f7c2:	b29a      	uxth	r2, r3
 801f7c4:	23e0      	movs	r3, #224	@ 0xe0
 801f7c6:	18fb      	adds	r3, r7, r3
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	b29b      	uxth	r3, r3
 801f7cc:	029b      	lsls	r3, r3, #10
 801f7ce:	b29b      	uxth	r3, r3
 801f7d0:	4313      	orrs	r3, r2
 801f7d2:	b29b      	uxth	r3, r3
 801f7d4:	4a1c      	ldr	r2, [pc, #112]	@ (801f848 <USB_EPStartXfer+0xe34>)
 801f7d6:	4313      	orrs	r3, r2
 801f7d8:	b29a      	uxth	r2, r3
 801f7da:	187b      	adds	r3, r7, r1
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	801a      	strh	r2, [r3, #0]
 801f7e0:	e057      	b.n	801f892 <USB_EPStartXfer+0xe7e>
 801f7e2:	683b      	ldr	r3, [r7, #0]
 801f7e4:	691b      	ldr	r3, [r3, #16]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d10b      	bne.n	801f802 <USB_EPStartXfer+0xdee>
 801f7ea:	2198      	movs	r1, #152	@ 0x98
 801f7ec:	187b      	adds	r3, r7, r1
 801f7ee:	681b      	ldr	r3, [r3, #0]
 801f7f0:	881b      	ldrh	r3, [r3, #0]
 801f7f2:	b29b      	uxth	r3, r3
 801f7f4:	4a14      	ldr	r2, [pc, #80]	@ (801f848 <USB_EPStartXfer+0xe34>)
 801f7f6:	4313      	orrs	r3, r2
 801f7f8:	b29a      	uxth	r2, r3
 801f7fa:	187b      	adds	r3, r7, r1
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	801a      	strh	r2, [r3, #0]
 801f800:	e047      	b.n	801f892 <USB_EPStartXfer+0xe7e>
 801f802:	683b      	ldr	r3, [r7, #0]
 801f804:	691b      	ldr	r3, [r3, #16]
 801f806:	085b      	lsrs	r3, r3, #1
 801f808:	21e0      	movs	r1, #224	@ 0xe0
 801f80a:	187a      	adds	r2, r7, r1
 801f80c:	6013      	str	r3, [r2, #0]
 801f80e:	683b      	ldr	r3, [r7, #0]
 801f810:	691b      	ldr	r3, [r3, #16]
 801f812:	2201      	movs	r2, #1
 801f814:	4013      	ands	r3, r2
 801f816:	d004      	beq.n	801f822 <USB_EPStartXfer+0xe0e>
 801f818:	187b      	adds	r3, r7, r1
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	3301      	adds	r3, #1
 801f81e:	187a      	adds	r2, r7, r1
 801f820:	6013      	str	r3, [r2, #0]
 801f822:	2198      	movs	r1, #152	@ 0x98
 801f824:	187b      	adds	r3, r7, r1
 801f826:	681b      	ldr	r3, [r3, #0]
 801f828:	881b      	ldrh	r3, [r3, #0]
 801f82a:	b29a      	uxth	r2, r3
 801f82c:	23e0      	movs	r3, #224	@ 0xe0
 801f82e:	18fb      	adds	r3, r7, r3
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	b29b      	uxth	r3, r3
 801f834:	029b      	lsls	r3, r3, #10
 801f836:	b29b      	uxth	r3, r3
 801f838:	4313      	orrs	r3, r2
 801f83a:	b29a      	uxth	r2, r3
 801f83c:	187b      	adds	r3, r7, r1
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	801a      	strh	r2, [r3, #0]
 801f842:	e026      	b.n	801f892 <USB_EPStartXfer+0xe7e>
 801f844:	00000406 	.word	0x00000406
 801f848:	ffff8000 	.word	0xffff8000
 801f84c:	00000402 	.word	0x00000402
 801f850:	683b      	ldr	r3, [r7, #0]
 801f852:	785b      	ldrb	r3, [r3, #1]
 801f854:	2b01      	cmp	r3, #1
 801f856:	d11c      	bne.n	801f892 <USB_EPStartXfer+0xe7e>
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	2250      	movs	r2, #80	@ 0x50
 801f85c:	5a9b      	ldrh	r3, [r3, r2]
 801f85e:	b29b      	uxth	r3, r3
 801f860:	001a      	movs	r2, r3
 801f862:	21a4      	movs	r1, #164	@ 0xa4
 801f864:	187b      	adds	r3, r7, r1
 801f866:	681b      	ldr	r3, [r3, #0]
 801f868:	189b      	adds	r3, r3, r2
 801f86a:	187a      	adds	r2, r7, r1
 801f86c:	6013      	str	r3, [r2, #0]
 801f86e:	683b      	ldr	r3, [r7, #0]
 801f870:	781b      	ldrb	r3, [r3, #0]
 801f872:	00da      	lsls	r2, r3, #3
 801f874:	187b      	adds	r3, r7, r1
 801f876:	681b      	ldr	r3, [r3, #0]
 801f878:	18d3      	adds	r3, r2, r3
 801f87a:	4ad2      	ldr	r2, [pc, #840]	@ (801fbc4 <USB_EPStartXfer+0x11b0>)
 801f87c:	4694      	mov	ip, r2
 801f87e:	4463      	add	r3, ip
 801f880:	21a0      	movs	r1, #160	@ 0xa0
 801f882:	187a      	adds	r2, r7, r1
 801f884:	6013      	str	r3, [r2, #0]
 801f886:	683b      	ldr	r3, [r7, #0]
 801f888:	691b      	ldr	r3, [r3, #16]
 801f88a:	b29a      	uxth	r2, r3
 801f88c:	187b      	adds	r3, r7, r1
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801f892:	683b      	ldr	r3, [r7, #0]
 801f894:	69db      	ldr	r3, [r3, #28]
 801f896:	2b00      	cmp	r3, #0
 801f898:	d100      	bne.n	801f89c <USB_EPStartXfer+0xe88>
 801f89a:	e1c2      	b.n	801fc22 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801f89c:	687a      	ldr	r2, [r7, #4]
 801f89e:	683b      	ldr	r3, [r7, #0]
 801f8a0:	781b      	ldrb	r3, [r3, #0]
 801f8a2:	009b      	lsls	r3, r3, #2
 801f8a4:	18d2      	adds	r2, r2, r3
 801f8a6:	2196      	movs	r1, #150	@ 0x96
 801f8a8:	187b      	adds	r3, r7, r1
 801f8aa:	8812      	ldrh	r2, [r2, #0]
 801f8ac:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801f8ae:	187b      	adds	r3, r7, r1
 801f8b0:	881a      	ldrh	r2, [r3, #0]
 801f8b2:	2380      	movs	r3, #128	@ 0x80
 801f8b4:	01db      	lsls	r3, r3, #7
 801f8b6:	4013      	ands	r3, r2
 801f8b8:	d004      	beq.n	801f8c4 <USB_EPStartXfer+0xeb0>
 801f8ba:	187b      	adds	r3, r7, r1
 801f8bc:	881b      	ldrh	r3, [r3, #0]
 801f8be:	2240      	movs	r2, #64	@ 0x40
 801f8c0:	4013      	ands	r3, r2
 801f8c2:	d10d      	bne.n	801f8e0 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801f8c4:	2196      	movs	r1, #150	@ 0x96
 801f8c6:	187b      	adds	r3, r7, r1
 801f8c8:	881a      	ldrh	r2, [r3, #0]
 801f8ca:	2380      	movs	r3, #128	@ 0x80
 801f8cc:	01db      	lsls	r3, r3, #7
 801f8ce:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801f8d0:	d000      	beq.n	801f8d4 <USB_EPStartXfer+0xec0>
 801f8d2:	e1a6      	b.n	801fc22 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801f8d4:	187b      	adds	r3, r7, r1
 801f8d6:	881b      	ldrh	r3, [r3, #0]
 801f8d8:	2240      	movs	r2, #64	@ 0x40
 801f8da:	4013      	ands	r3, r2
 801f8dc:	d000      	beq.n	801f8e0 <USB_EPStartXfer+0xecc>
 801f8de:	e1a0      	b.n	801fc22 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801f8e0:	687a      	ldr	r2, [r7, #4]
 801f8e2:	683b      	ldr	r3, [r7, #0]
 801f8e4:	781b      	ldrb	r3, [r3, #0]
 801f8e6:	009b      	lsls	r3, r3, #2
 801f8e8:	18d3      	adds	r3, r2, r3
 801f8ea:	881b      	ldrh	r3, [r3, #0]
 801f8ec:	b29a      	uxth	r2, r3
 801f8ee:	2094      	movs	r0, #148	@ 0x94
 801f8f0:	183b      	adds	r3, r7, r0
 801f8f2:	49b5      	ldr	r1, [pc, #724]	@ (801fbc8 <USB_EPStartXfer+0x11b4>)
 801f8f4:	400a      	ands	r2, r1
 801f8f6:	801a      	strh	r2, [r3, #0]
 801f8f8:	687a      	ldr	r2, [r7, #4]
 801f8fa:	683b      	ldr	r3, [r7, #0]
 801f8fc:	781b      	ldrb	r3, [r3, #0]
 801f8fe:	009b      	lsls	r3, r3, #2
 801f900:	18d3      	adds	r3, r2, r3
 801f902:	183a      	adds	r2, r7, r0
 801f904:	8812      	ldrh	r2, [r2, #0]
 801f906:	49b1      	ldr	r1, [pc, #708]	@ (801fbcc <USB_EPStartXfer+0x11b8>)
 801f908:	430a      	orrs	r2, r1
 801f90a:	b292      	uxth	r2, r2
 801f90c:	801a      	strh	r2, [r3, #0]
 801f90e:	e188      	b.n	801fc22 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801f910:	683b      	ldr	r3, [r7, #0]
 801f912:	78db      	ldrb	r3, [r3, #3]
 801f914:	2b01      	cmp	r3, #1
 801f916:	d000      	beq.n	801f91a <USB_EPStartXfer+0xf06>
 801f918:	e181      	b.n	801fc1e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801f91a:	683b      	ldr	r3, [r7, #0]
 801f91c:	699a      	ldr	r2, [r3, #24]
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	691b      	ldr	r3, [r3, #16]
 801f922:	429a      	cmp	r2, r3
 801f924:	d90d      	bls.n	801f942 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	691b      	ldr	r3, [r3, #16]
 801f92a:	1d7a      	adds	r2, r7, #5
 801f92c:	32ff      	adds	r2, #255	@ 0xff
 801f92e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801f930:	683b      	ldr	r3, [r7, #0]
 801f932:	699a      	ldr	r2, [r3, #24]
 801f934:	1d7b      	adds	r3, r7, #5
 801f936:	33ff      	adds	r3, #255	@ 0xff
 801f938:	681b      	ldr	r3, [r3, #0]
 801f93a:	1ad2      	subs	r2, r2, r3
 801f93c:	683b      	ldr	r3, [r7, #0]
 801f93e:	619a      	str	r2, [r3, #24]
 801f940:	e007      	b.n	801f952 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801f942:	683b      	ldr	r3, [r7, #0]
 801f944:	699b      	ldr	r3, [r3, #24]
 801f946:	1d7a      	adds	r2, r7, #5
 801f948:	32ff      	adds	r2, #255	@ 0xff
 801f94a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801f94c:	683b      	ldr	r3, [r7, #0]
 801f94e:	2200      	movs	r2, #0
 801f950:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801f952:	683b      	ldr	r3, [r7, #0]
 801f954:	785b      	ldrb	r3, [r3, #1]
 801f956:	2b00      	cmp	r3, #0
 801f958:	d000      	beq.n	801f95c <USB_EPStartXfer+0xf48>
 801f95a:	e082      	b.n	801fa62 <USB_EPStartXfer+0x104e>
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	21cc      	movs	r1, #204	@ 0xcc
 801f960:	187a      	adds	r2, r7, r1
 801f962:	6013      	str	r3, [r2, #0]
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	2250      	movs	r2, #80	@ 0x50
 801f968:	5a9b      	ldrh	r3, [r3, r2]
 801f96a:	b29b      	uxth	r3, r3
 801f96c:	001a      	movs	r2, r3
 801f96e:	187b      	adds	r3, r7, r1
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	189b      	adds	r3, r3, r2
 801f974:	187a      	adds	r2, r7, r1
 801f976:	6013      	str	r3, [r2, #0]
 801f978:	683b      	ldr	r3, [r7, #0]
 801f97a:	781b      	ldrb	r3, [r3, #0]
 801f97c:	00da      	lsls	r2, r3, #3
 801f97e:	187b      	adds	r3, r7, r1
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	18d3      	adds	r3, r2, r3
 801f984:	4a92      	ldr	r2, [pc, #584]	@ (801fbd0 <USB_EPStartXfer+0x11bc>)
 801f986:	4694      	mov	ip, r2
 801f988:	4463      	add	r3, ip
 801f98a:	21c8      	movs	r1, #200	@ 0xc8
 801f98c:	187a      	adds	r2, r7, r1
 801f98e:	6013      	str	r3, [r2, #0]
 801f990:	187b      	adds	r3, r7, r1
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	881b      	ldrh	r3, [r3, #0]
 801f996:	b29b      	uxth	r3, r3
 801f998:	059b      	lsls	r3, r3, #22
 801f99a:	0d9b      	lsrs	r3, r3, #22
 801f99c:	b29a      	uxth	r2, r3
 801f99e:	187b      	adds	r3, r7, r1
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	801a      	strh	r2, [r3, #0]
 801f9a4:	1d7b      	adds	r3, r7, #5
 801f9a6:	33ff      	adds	r3, #255	@ 0xff
 801f9a8:	681b      	ldr	r3, [r3, #0]
 801f9aa:	2b3e      	cmp	r3, #62	@ 0x3e
 801f9ac:	d925      	bls.n	801f9fa <USB_EPStartXfer+0xfe6>
 801f9ae:	1d7b      	adds	r3, r7, #5
 801f9b0:	33ff      	adds	r3, #255	@ 0xff
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	095b      	lsrs	r3, r3, #5
 801f9b6:	21dc      	movs	r1, #220	@ 0xdc
 801f9b8:	187a      	adds	r2, r7, r1
 801f9ba:	6013      	str	r3, [r2, #0]
 801f9bc:	1d7b      	adds	r3, r7, #5
 801f9be:	33ff      	adds	r3, #255	@ 0xff
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	221f      	movs	r2, #31
 801f9c4:	4013      	ands	r3, r2
 801f9c6:	d104      	bne.n	801f9d2 <USB_EPStartXfer+0xfbe>
 801f9c8:	187b      	adds	r3, r7, r1
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	3b01      	subs	r3, #1
 801f9ce:	187a      	adds	r2, r7, r1
 801f9d0:	6013      	str	r3, [r2, #0]
 801f9d2:	21c8      	movs	r1, #200	@ 0xc8
 801f9d4:	187b      	adds	r3, r7, r1
 801f9d6:	681b      	ldr	r3, [r3, #0]
 801f9d8:	881b      	ldrh	r3, [r3, #0]
 801f9da:	b29a      	uxth	r2, r3
 801f9dc:	23dc      	movs	r3, #220	@ 0xdc
 801f9de:	18fb      	adds	r3, r7, r3
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	b29b      	uxth	r3, r3
 801f9e4:	029b      	lsls	r3, r3, #10
 801f9e6:	b29b      	uxth	r3, r3
 801f9e8:	4313      	orrs	r3, r2
 801f9ea:	b29b      	uxth	r3, r3
 801f9ec:	4a79      	ldr	r2, [pc, #484]	@ (801fbd4 <USB_EPStartXfer+0x11c0>)
 801f9ee:	4313      	orrs	r3, r2
 801f9f0:	b29a      	uxth	r2, r3
 801f9f2:	187b      	adds	r3, r7, r1
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	801a      	strh	r2, [r3, #0]
 801f9f8:	e058      	b.n	801faac <USB_EPStartXfer+0x1098>
 801f9fa:	1d7b      	adds	r3, r7, #5
 801f9fc:	33ff      	adds	r3, #255	@ 0xff
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d10b      	bne.n	801fa1c <USB_EPStartXfer+0x1008>
 801fa04:	21c8      	movs	r1, #200	@ 0xc8
 801fa06:	187b      	adds	r3, r7, r1
 801fa08:	681b      	ldr	r3, [r3, #0]
 801fa0a:	881b      	ldrh	r3, [r3, #0]
 801fa0c:	b29b      	uxth	r3, r3
 801fa0e:	4a71      	ldr	r2, [pc, #452]	@ (801fbd4 <USB_EPStartXfer+0x11c0>)
 801fa10:	4313      	orrs	r3, r2
 801fa12:	b29a      	uxth	r2, r3
 801fa14:	187b      	adds	r3, r7, r1
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	801a      	strh	r2, [r3, #0]
 801fa1a:	e047      	b.n	801faac <USB_EPStartXfer+0x1098>
 801fa1c:	1d7b      	adds	r3, r7, #5
 801fa1e:	33ff      	adds	r3, #255	@ 0xff
 801fa20:	681b      	ldr	r3, [r3, #0]
 801fa22:	085b      	lsrs	r3, r3, #1
 801fa24:	21dc      	movs	r1, #220	@ 0xdc
 801fa26:	187a      	adds	r2, r7, r1
 801fa28:	6013      	str	r3, [r2, #0]
 801fa2a:	1d7b      	adds	r3, r7, #5
 801fa2c:	33ff      	adds	r3, #255	@ 0xff
 801fa2e:	681b      	ldr	r3, [r3, #0]
 801fa30:	2201      	movs	r2, #1
 801fa32:	4013      	ands	r3, r2
 801fa34:	d004      	beq.n	801fa40 <USB_EPStartXfer+0x102c>
 801fa36:	187b      	adds	r3, r7, r1
 801fa38:	681b      	ldr	r3, [r3, #0]
 801fa3a:	3301      	adds	r3, #1
 801fa3c:	187a      	adds	r2, r7, r1
 801fa3e:	6013      	str	r3, [r2, #0]
 801fa40:	21c8      	movs	r1, #200	@ 0xc8
 801fa42:	187b      	adds	r3, r7, r1
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	881b      	ldrh	r3, [r3, #0]
 801fa48:	b29a      	uxth	r2, r3
 801fa4a:	23dc      	movs	r3, #220	@ 0xdc
 801fa4c:	18fb      	adds	r3, r7, r3
 801fa4e:	681b      	ldr	r3, [r3, #0]
 801fa50:	b29b      	uxth	r3, r3
 801fa52:	029b      	lsls	r3, r3, #10
 801fa54:	b29b      	uxth	r3, r3
 801fa56:	4313      	orrs	r3, r2
 801fa58:	b29a      	uxth	r2, r3
 801fa5a:	187b      	adds	r3, r7, r1
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	801a      	strh	r2, [r3, #0]
 801fa60:	e024      	b.n	801faac <USB_EPStartXfer+0x1098>
 801fa62:	683b      	ldr	r3, [r7, #0]
 801fa64:	785b      	ldrb	r3, [r3, #1]
 801fa66:	2b01      	cmp	r3, #1
 801fa68:	d120      	bne.n	801faac <USB_EPStartXfer+0x1098>
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	21d4      	movs	r1, #212	@ 0xd4
 801fa6e:	187a      	adds	r2, r7, r1
 801fa70:	6013      	str	r3, [r2, #0]
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	2250      	movs	r2, #80	@ 0x50
 801fa76:	5a9b      	ldrh	r3, [r3, r2]
 801fa78:	b29b      	uxth	r3, r3
 801fa7a:	001a      	movs	r2, r3
 801fa7c:	187b      	adds	r3, r7, r1
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	189b      	adds	r3, r3, r2
 801fa82:	187a      	adds	r2, r7, r1
 801fa84:	6013      	str	r3, [r2, #0]
 801fa86:	683b      	ldr	r3, [r7, #0]
 801fa88:	781b      	ldrb	r3, [r3, #0]
 801fa8a:	00da      	lsls	r2, r3, #3
 801fa8c:	187b      	adds	r3, r7, r1
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	18d3      	adds	r3, r2, r3
 801fa92:	4a4f      	ldr	r2, [pc, #316]	@ (801fbd0 <USB_EPStartXfer+0x11bc>)
 801fa94:	4694      	mov	ip, r2
 801fa96:	4463      	add	r3, ip
 801fa98:	21d0      	movs	r1, #208	@ 0xd0
 801fa9a:	187a      	adds	r2, r7, r1
 801fa9c:	6013      	str	r3, [r2, #0]
 801fa9e:	1d7b      	adds	r3, r7, #5
 801faa0:	33ff      	adds	r3, #255	@ 0xff
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	b29a      	uxth	r2, r3
 801faa6:	187b      	adds	r3, r7, r1
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	801a      	strh	r2, [r3, #0]
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	22c4      	movs	r2, #196	@ 0xc4
 801fab0:	18ba      	adds	r2, r7, r2
 801fab2:	6013      	str	r3, [r2, #0]
 801fab4:	683b      	ldr	r3, [r7, #0]
 801fab6:	785b      	ldrb	r3, [r3, #1]
 801fab8:	2b00      	cmp	r3, #0
 801faba:	d000      	beq.n	801fabe <USB_EPStartXfer+0x10aa>
 801fabc:	e08c      	b.n	801fbd8 <USB_EPStartXfer+0x11c4>
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	21bc      	movs	r1, #188	@ 0xbc
 801fac2:	187a      	adds	r2, r7, r1
 801fac4:	6013      	str	r3, [r2, #0]
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	2250      	movs	r2, #80	@ 0x50
 801faca:	5a9b      	ldrh	r3, [r3, r2]
 801facc:	b29b      	uxth	r3, r3
 801face:	001a      	movs	r2, r3
 801fad0:	187b      	adds	r3, r7, r1
 801fad2:	681b      	ldr	r3, [r3, #0]
 801fad4:	189b      	adds	r3, r3, r2
 801fad6:	187a      	adds	r2, r7, r1
 801fad8:	6013      	str	r3, [r2, #0]
 801fada:	683b      	ldr	r3, [r7, #0]
 801fadc:	781b      	ldrb	r3, [r3, #0]
 801fade:	00da      	lsls	r2, r3, #3
 801fae0:	187b      	adds	r3, r7, r1
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	18d3      	adds	r3, r2, r3
 801fae6:	4a37      	ldr	r2, [pc, #220]	@ (801fbc4 <USB_EPStartXfer+0x11b0>)
 801fae8:	4694      	mov	ip, r2
 801faea:	4463      	add	r3, ip
 801faec:	21b8      	movs	r1, #184	@ 0xb8
 801faee:	187a      	adds	r2, r7, r1
 801faf0:	6013      	str	r3, [r2, #0]
 801faf2:	187b      	adds	r3, r7, r1
 801faf4:	681b      	ldr	r3, [r3, #0]
 801faf6:	881b      	ldrh	r3, [r3, #0]
 801faf8:	b29b      	uxth	r3, r3
 801fafa:	059b      	lsls	r3, r3, #22
 801fafc:	0d9b      	lsrs	r3, r3, #22
 801fafe:	b29a      	uxth	r2, r3
 801fb00:	187b      	adds	r3, r7, r1
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	801a      	strh	r2, [r3, #0]
 801fb06:	1d7b      	adds	r3, r7, #5
 801fb08:	33ff      	adds	r3, #255	@ 0xff
 801fb0a:	681b      	ldr	r3, [r3, #0]
 801fb0c:	2b3e      	cmp	r3, #62	@ 0x3e
 801fb0e:	d925      	bls.n	801fb5c <USB_EPStartXfer+0x1148>
 801fb10:	1d7b      	adds	r3, r7, #5
 801fb12:	33ff      	adds	r3, #255	@ 0xff
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	095b      	lsrs	r3, r3, #5
 801fb18:	21d8      	movs	r1, #216	@ 0xd8
 801fb1a:	187a      	adds	r2, r7, r1
 801fb1c:	6013      	str	r3, [r2, #0]
 801fb1e:	1d7b      	adds	r3, r7, #5
 801fb20:	33ff      	adds	r3, #255	@ 0xff
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	221f      	movs	r2, #31
 801fb26:	4013      	ands	r3, r2
 801fb28:	d104      	bne.n	801fb34 <USB_EPStartXfer+0x1120>
 801fb2a:	187b      	adds	r3, r7, r1
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	3b01      	subs	r3, #1
 801fb30:	187a      	adds	r2, r7, r1
 801fb32:	6013      	str	r3, [r2, #0]
 801fb34:	21b8      	movs	r1, #184	@ 0xb8
 801fb36:	187b      	adds	r3, r7, r1
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	881b      	ldrh	r3, [r3, #0]
 801fb3c:	b29a      	uxth	r2, r3
 801fb3e:	23d8      	movs	r3, #216	@ 0xd8
 801fb40:	18fb      	adds	r3, r7, r3
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	b29b      	uxth	r3, r3
 801fb46:	029b      	lsls	r3, r3, #10
 801fb48:	b29b      	uxth	r3, r3
 801fb4a:	4313      	orrs	r3, r2
 801fb4c:	b29b      	uxth	r3, r3
 801fb4e:	4a21      	ldr	r2, [pc, #132]	@ (801fbd4 <USB_EPStartXfer+0x11c0>)
 801fb50:	4313      	orrs	r3, r2
 801fb52:	b29a      	uxth	r2, r3
 801fb54:	187b      	adds	r3, r7, r1
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	801a      	strh	r2, [r3, #0]
 801fb5a:	e062      	b.n	801fc22 <USB_EPStartXfer+0x120e>
 801fb5c:	1d7b      	adds	r3, r7, #5
 801fb5e:	33ff      	adds	r3, #255	@ 0xff
 801fb60:	681b      	ldr	r3, [r3, #0]
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d10b      	bne.n	801fb7e <USB_EPStartXfer+0x116a>
 801fb66:	21b8      	movs	r1, #184	@ 0xb8
 801fb68:	187b      	adds	r3, r7, r1
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	881b      	ldrh	r3, [r3, #0]
 801fb6e:	b29b      	uxth	r3, r3
 801fb70:	4a18      	ldr	r2, [pc, #96]	@ (801fbd4 <USB_EPStartXfer+0x11c0>)
 801fb72:	4313      	orrs	r3, r2
 801fb74:	b29a      	uxth	r2, r3
 801fb76:	187b      	adds	r3, r7, r1
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	801a      	strh	r2, [r3, #0]
 801fb7c:	e051      	b.n	801fc22 <USB_EPStartXfer+0x120e>
 801fb7e:	1d7b      	adds	r3, r7, #5
 801fb80:	33ff      	adds	r3, #255	@ 0xff
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	085b      	lsrs	r3, r3, #1
 801fb86:	21d8      	movs	r1, #216	@ 0xd8
 801fb88:	187a      	adds	r2, r7, r1
 801fb8a:	6013      	str	r3, [r2, #0]
 801fb8c:	1d7b      	adds	r3, r7, #5
 801fb8e:	33ff      	adds	r3, #255	@ 0xff
 801fb90:	681b      	ldr	r3, [r3, #0]
 801fb92:	2201      	movs	r2, #1
 801fb94:	4013      	ands	r3, r2
 801fb96:	d004      	beq.n	801fba2 <USB_EPStartXfer+0x118e>
 801fb98:	187b      	adds	r3, r7, r1
 801fb9a:	681b      	ldr	r3, [r3, #0]
 801fb9c:	3301      	adds	r3, #1
 801fb9e:	187a      	adds	r2, r7, r1
 801fba0:	6013      	str	r3, [r2, #0]
 801fba2:	21b8      	movs	r1, #184	@ 0xb8
 801fba4:	187b      	adds	r3, r7, r1
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	881b      	ldrh	r3, [r3, #0]
 801fbaa:	b29a      	uxth	r2, r3
 801fbac:	23d8      	movs	r3, #216	@ 0xd8
 801fbae:	18fb      	adds	r3, r7, r3
 801fbb0:	681b      	ldr	r3, [r3, #0]
 801fbb2:	b29b      	uxth	r3, r3
 801fbb4:	029b      	lsls	r3, r3, #10
 801fbb6:	b29b      	uxth	r3, r3
 801fbb8:	4313      	orrs	r3, r2
 801fbba:	b29a      	uxth	r2, r3
 801fbbc:	187b      	adds	r3, r7, r1
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	801a      	strh	r2, [r3, #0]
 801fbc2:	e02e      	b.n	801fc22 <USB_EPStartXfer+0x120e>
 801fbc4:	00000406 	.word	0x00000406
 801fbc8:	ffff8f8f 	.word	0xffff8f8f
 801fbcc:	ffff80c0 	.word	0xffff80c0
 801fbd0:	00000402 	.word	0x00000402
 801fbd4:	ffff8000 	.word	0xffff8000
 801fbd8:	683b      	ldr	r3, [r7, #0]
 801fbda:	785b      	ldrb	r3, [r3, #1]
 801fbdc:	2b01      	cmp	r3, #1
 801fbde:	d120      	bne.n	801fc22 <USB_EPStartXfer+0x120e>
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	2250      	movs	r2, #80	@ 0x50
 801fbe4:	5a9b      	ldrh	r3, [r3, r2]
 801fbe6:	b29b      	uxth	r3, r3
 801fbe8:	001a      	movs	r2, r3
 801fbea:	21c4      	movs	r1, #196	@ 0xc4
 801fbec:	187b      	adds	r3, r7, r1
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	189b      	adds	r3, r3, r2
 801fbf2:	187a      	adds	r2, r7, r1
 801fbf4:	6013      	str	r3, [r2, #0]
 801fbf6:	683b      	ldr	r3, [r7, #0]
 801fbf8:	781b      	ldrb	r3, [r3, #0]
 801fbfa:	00da      	lsls	r2, r3, #3
 801fbfc:	187b      	adds	r3, r7, r1
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	18d3      	adds	r3, r2, r3
 801fc02:	4a1d      	ldr	r2, [pc, #116]	@ (801fc78 <USB_EPStartXfer+0x1264>)
 801fc04:	4694      	mov	ip, r2
 801fc06:	4463      	add	r3, ip
 801fc08:	21c0      	movs	r1, #192	@ 0xc0
 801fc0a:	187a      	adds	r2, r7, r1
 801fc0c:	6013      	str	r3, [r2, #0]
 801fc0e:	1d7b      	adds	r3, r7, #5
 801fc10:	33ff      	adds	r3, #255	@ 0xff
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	b29a      	uxth	r2, r3
 801fc16:	187b      	adds	r3, r7, r1
 801fc18:	681b      	ldr	r3, [r3, #0]
 801fc1a:	801a      	strh	r2, [r3, #0]
 801fc1c:	e001      	b.n	801fc22 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801fc1e:	2301      	movs	r3, #1
 801fc20:	e025      	b.n	801fc6e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fc22:	687a      	ldr	r2, [r7, #4]
 801fc24:	683b      	ldr	r3, [r7, #0]
 801fc26:	781b      	ldrb	r3, [r3, #0]
 801fc28:	009b      	lsls	r3, r3, #2
 801fc2a:	18d3      	adds	r3, r2, r3
 801fc2c:	881b      	ldrh	r3, [r3, #0]
 801fc2e:	b29a      	uxth	r2, r3
 801fc30:	208a      	movs	r0, #138	@ 0x8a
 801fc32:	183b      	adds	r3, r7, r0
 801fc34:	4911      	ldr	r1, [pc, #68]	@ (801fc7c <USB_EPStartXfer+0x1268>)
 801fc36:	400a      	ands	r2, r1
 801fc38:	801a      	strh	r2, [r3, #0]
 801fc3a:	183b      	adds	r3, r7, r0
 801fc3c:	183a      	adds	r2, r7, r0
 801fc3e:	8812      	ldrh	r2, [r2, #0]
 801fc40:	2180      	movs	r1, #128	@ 0x80
 801fc42:	0149      	lsls	r1, r1, #5
 801fc44:	404a      	eors	r2, r1
 801fc46:	801a      	strh	r2, [r3, #0]
 801fc48:	183b      	adds	r3, r7, r0
 801fc4a:	183a      	adds	r2, r7, r0
 801fc4c:	8812      	ldrh	r2, [r2, #0]
 801fc4e:	2180      	movs	r1, #128	@ 0x80
 801fc50:	0189      	lsls	r1, r1, #6
 801fc52:	404a      	eors	r2, r1
 801fc54:	801a      	strh	r2, [r3, #0]
 801fc56:	687a      	ldr	r2, [r7, #4]
 801fc58:	683b      	ldr	r3, [r7, #0]
 801fc5a:	781b      	ldrb	r3, [r3, #0]
 801fc5c:	009b      	lsls	r3, r3, #2
 801fc5e:	18d3      	adds	r3, r2, r3
 801fc60:	183a      	adds	r2, r7, r0
 801fc62:	8812      	ldrh	r2, [r2, #0]
 801fc64:	4906      	ldr	r1, [pc, #24]	@ (801fc80 <USB_EPStartXfer+0x126c>)
 801fc66:	430a      	orrs	r2, r1
 801fc68:	b292      	uxth	r2, r2
 801fc6a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801fc6c:	2300      	movs	r3, #0
}
 801fc6e:	0018      	movs	r0, r3
 801fc70:	46bd      	mov	sp, r7
 801fc72:	b043      	add	sp, #268	@ 0x10c
 801fc74:	bd90      	pop	{r4, r7, pc}
 801fc76:	46c0      	nop			@ (mov r8, r8)
 801fc78:	00000406 	.word	0x00000406
 801fc7c:	ffffbf8f 	.word	0xffffbf8f
 801fc80:	ffff8080 	.word	0xffff8080

0801fc84 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fc84:	b580      	push	{r7, lr}
 801fc86:	b084      	sub	sp, #16
 801fc88:	af00      	add	r7, sp, #0
 801fc8a:	6078      	str	r0, [r7, #4]
 801fc8c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801fc8e:	683b      	ldr	r3, [r7, #0]
 801fc90:	785b      	ldrb	r3, [r3, #1]
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d01d      	beq.n	801fcd2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801fc96:	687a      	ldr	r2, [r7, #4]
 801fc98:	683b      	ldr	r3, [r7, #0]
 801fc9a:	781b      	ldrb	r3, [r3, #0]
 801fc9c:	009b      	lsls	r3, r3, #2
 801fc9e:	18d3      	adds	r3, r2, r3
 801fca0:	881b      	ldrh	r3, [r3, #0]
 801fca2:	b29a      	uxth	r2, r3
 801fca4:	200c      	movs	r0, #12
 801fca6:	183b      	adds	r3, r7, r0
 801fca8:	491b      	ldr	r1, [pc, #108]	@ (801fd18 <USB_EPSetStall+0x94>)
 801fcaa:	400a      	ands	r2, r1
 801fcac:	801a      	strh	r2, [r3, #0]
 801fcae:	183b      	adds	r3, r7, r0
 801fcb0:	183a      	adds	r2, r7, r0
 801fcb2:	8812      	ldrh	r2, [r2, #0]
 801fcb4:	2110      	movs	r1, #16
 801fcb6:	404a      	eors	r2, r1
 801fcb8:	801a      	strh	r2, [r3, #0]
 801fcba:	687a      	ldr	r2, [r7, #4]
 801fcbc:	683b      	ldr	r3, [r7, #0]
 801fcbe:	781b      	ldrb	r3, [r3, #0]
 801fcc0:	009b      	lsls	r3, r3, #2
 801fcc2:	18d3      	adds	r3, r2, r3
 801fcc4:	183a      	adds	r2, r7, r0
 801fcc6:	8812      	ldrh	r2, [r2, #0]
 801fcc8:	4914      	ldr	r1, [pc, #80]	@ (801fd1c <USB_EPSetStall+0x98>)
 801fcca:	430a      	orrs	r2, r1
 801fccc:	b292      	uxth	r2, r2
 801fcce:	801a      	strh	r2, [r3, #0]
 801fcd0:	e01d      	b.n	801fd0e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801fcd2:	687a      	ldr	r2, [r7, #4]
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	781b      	ldrb	r3, [r3, #0]
 801fcd8:	009b      	lsls	r3, r3, #2
 801fcda:	18d3      	adds	r3, r2, r3
 801fcdc:	881b      	ldrh	r3, [r3, #0]
 801fcde:	b29a      	uxth	r2, r3
 801fce0:	200e      	movs	r0, #14
 801fce2:	183b      	adds	r3, r7, r0
 801fce4:	490e      	ldr	r1, [pc, #56]	@ (801fd20 <USB_EPSetStall+0x9c>)
 801fce6:	400a      	ands	r2, r1
 801fce8:	801a      	strh	r2, [r3, #0]
 801fcea:	183b      	adds	r3, r7, r0
 801fcec:	183a      	adds	r2, r7, r0
 801fcee:	8812      	ldrh	r2, [r2, #0]
 801fcf0:	2180      	movs	r1, #128	@ 0x80
 801fcf2:	0149      	lsls	r1, r1, #5
 801fcf4:	404a      	eors	r2, r1
 801fcf6:	801a      	strh	r2, [r3, #0]
 801fcf8:	687a      	ldr	r2, [r7, #4]
 801fcfa:	683b      	ldr	r3, [r7, #0]
 801fcfc:	781b      	ldrb	r3, [r3, #0]
 801fcfe:	009b      	lsls	r3, r3, #2
 801fd00:	18d3      	adds	r3, r2, r3
 801fd02:	183a      	adds	r2, r7, r0
 801fd04:	8812      	ldrh	r2, [r2, #0]
 801fd06:	4905      	ldr	r1, [pc, #20]	@ (801fd1c <USB_EPSetStall+0x98>)
 801fd08:	430a      	orrs	r2, r1
 801fd0a:	b292      	uxth	r2, r2
 801fd0c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801fd0e:	2300      	movs	r3, #0
}
 801fd10:	0018      	movs	r0, r3
 801fd12:	46bd      	mov	sp, r7
 801fd14:	b004      	add	sp, #16
 801fd16:	bd80      	pop	{r7, pc}
 801fd18:	ffff8fbf 	.word	0xffff8fbf
 801fd1c:	ffff8080 	.word	0xffff8080
 801fd20:	ffffbf8f 	.word	0xffffbf8f

0801fd24 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fd24:	b580      	push	{r7, lr}
 801fd26:	b086      	sub	sp, #24
 801fd28:	af00      	add	r7, sp, #0
 801fd2a:	6078      	str	r0, [r7, #4]
 801fd2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fd2e:	683b      	ldr	r3, [r7, #0]
 801fd30:	7b1b      	ldrb	r3, [r3, #12]
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	d000      	beq.n	801fd38 <USB_EPClearStall+0x14>
 801fd36:	e095      	b.n	801fe64 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801fd38:	683b      	ldr	r3, [r7, #0]
 801fd3a:	785b      	ldrb	r3, [r3, #1]
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	d046      	beq.n	801fdce <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fd40:	687a      	ldr	r2, [r7, #4]
 801fd42:	683b      	ldr	r3, [r7, #0]
 801fd44:	781b      	ldrb	r3, [r3, #0]
 801fd46:	009b      	lsls	r3, r3, #2
 801fd48:	18d2      	adds	r2, r2, r3
 801fd4a:	2110      	movs	r1, #16
 801fd4c:	187b      	adds	r3, r7, r1
 801fd4e:	8812      	ldrh	r2, [r2, #0]
 801fd50:	801a      	strh	r2, [r3, #0]
 801fd52:	187b      	adds	r3, r7, r1
 801fd54:	881b      	ldrh	r3, [r3, #0]
 801fd56:	2240      	movs	r2, #64	@ 0x40
 801fd58:	4013      	ands	r3, r2
 801fd5a:	d016      	beq.n	801fd8a <USB_EPClearStall+0x66>
 801fd5c:	687a      	ldr	r2, [r7, #4]
 801fd5e:	683b      	ldr	r3, [r7, #0]
 801fd60:	781b      	ldrb	r3, [r3, #0]
 801fd62:	009b      	lsls	r3, r3, #2
 801fd64:	18d3      	adds	r3, r2, r3
 801fd66:	881b      	ldrh	r3, [r3, #0]
 801fd68:	b29a      	uxth	r2, r3
 801fd6a:	200e      	movs	r0, #14
 801fd6c:	183b      	adds	r3, r7, r0
 801fd6e:	4940      	ldr	r1, [pc, #256]	@ (801fe70 <USB_EPClearStall+0x14c>)
 801fd70:	400a      	ands	r2, r1
 801fd72:	801a      	strh	r2, [r3, #0]
 801fd74:	687a      	ldr	r2, [r7, #4]
 801fd76:	683b      	ldr	r3, [r7, #0]
 801fd78:	781b      	ldrb	r3, [r3, #0]
 801fd7a:	009b      	lsls	r3, r3, #2
 801fd7c:	18d3      	adds	r3, r2, r3
 801fd7e:	183a      	adds	r2, r7, r0
 801fd80:	8812      	ldrh	r2, [r2, #0]
 801fd82:	493c      	ldr	r1, [pc, #240]	@ (801fe74 <USB_EPClearStall+0x150>)
 801fd84:	430a      	orrs	r2, r1
 801fd86:	b292      	uxth	r2, r2
 801fd88:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801fd8a:	683b      	ldr	r3, [r7, #0]
 801fd8c:	78db      	ldrb	r3, [r3, #3]
 801fd8e:	2b01      	cmp	r3, #1
 801fd90:	d068      	beq.n	801fe64 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fd92:	687a      	ldr	r2, [r7, #4]
 801fd94:	683b      	ldr	r3, [r7, #0]
 801fd96:	781b      	ldrb	r3, [r3, #0]
 801fd98:	009b      	lsls	r3, r3, #2
 801fd9a:	18d3      	adds	r3, r2, r3
 801fd9c:	881b      	ldrh	r3, [r3, #0]
 801fd9e:	b29a      	uxth	r2, r3
 801fda0:	200c      	movs	r0, #12
 801fda2:	183b      	adds	r3, r7, r0
 801fda4:	4934      	ldr	r1, [pc, #208]	@ (801fe78 <USB_EPClearStall+0x154>)
 801fda6:	400a      	ands	r2, r1
 801fda8:	801a      	strh	r2, [r3, #0]
 801fdaa:	183b      	adds	r3, r7, r0
 801fdac:	183a      	adds	r2, r7, r0
 801fdae:	8812      	ldrh	r2, [r2, #0]
 801fdb0:	2120      	movs	r1, #32
 801fdb2:	404a      	eors	r2, r1
 801fdb4:	801a      	strh	r2, [r3, #0]
 801fdb6:	687a      	ldr	r2, [r7, #4]
 801fdb8:	683b      	ldr	r3, [r7, #0]
 801fdba:	781b      	ldrb	r3, [r3, #0]
 801fdbc:	009b      	lsls	r3, r3, #2
 801fdbe:	18d3      	adds	r3, r2, r3
 801fdc0:	183a      	adds	r2, r7, r0
 801fdc2:	8812      	ldrh	r2, [r2, #0]
 801fdc4:	492d      	ldr	r1, [pc, #180]	@ (801fe7c <USB_EPClearStall+0x158>)
 801fdc6:	430a      	orrs	r2, r1
 801fdc8:	b292      	uxth	r2, r2
 801fdca:	801a      	strh	r2, [r3, #0]
 801fdcc:	e04a      	b.n	801fe64 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fdce:	687a      	ldr	r2, [r7, #4]
 801fdd0:	683b      	ldr	r3, [r7, #0]
 801fdd2:	781b      	ldrb	r3, [r3, #0]
 801fdd4:	009b      	lsls	r3, r3, #2
 801fdd6:	18d2      	adds	r2, r2, r3
 801fdd8:	2116      	movs	r1, #22
 801fdda:	187b      	adds	r3, r7, r1
 801fddc:	8812      	ldrh	r2, [r2, #0]
 801fdde:	801a      	strh	r2, [r3, #0]
 801fde0:	187b      	adds	r3, r7, r1
 801fde2:	881a      	ldrh	r2, [r3, #0]
 801fde4:	2380      	movs	r3, #128	@ 0x80
 801fde6:	01db      	lsls	r3, r3, #7
 801fde8:	4013      	ands	r3, r2
 801fdea:	d016      	beq.n	801fe1a <USB_EPClearStall+0xf6>
 801fdec:	687a      	ldr	r2, [r7, #4]
 801fdee:	683b      	ldr	r3, [r7, #0]
 801fdf0:	781b      	ldrb	r3, [r3, #0]
 801fdf2:	009b      	lsls	r3, r3, #2
 801fdf4:	18d3      	adds	r3, r2, r3
 801fdf6:	881b      	ldrh	r3, [r3, #0]
 801fdf8:	b29a      	uxth	r2, r3
 801fdfa:	2014      	movs	r0, #20
 801fdfc:	183b      	adds	r3, r7, r0
 801fdfe:	491c      	ldr	r1, [pc, #112]	@ (801fe70 <USB_EPClearStall+0x14c>)
 801fe00:	400a      	ands	r2, r1
 801fe02:	801a      	strh	r2, [r3, #0]
 801fe04:	687a      	ldr	r2, [r7, #4]
 801fe06:	683b      	ldr	r3, [r7, #0]
 801fe08:	781b      	ldrb	r3, [r3, #0]
 801fe0a:	009b      	lsls	r3, r3, #2
 801fe0c:	18d3      	adds	r3, r2, r3
 801fe0e:	183a      	adds	r2, r7, r0
 801fe10:	8812      	ldrh	r2, [r2, #0]
 801fe12:	491b      	ldr	r1, [pc, #108]	@ (801fe80 <USB_EPClearStall+0x15c>)
 801fe14:	430a      	orrs	r2, r1
 801fe16:	b292      	uxth	r2, r2
 801fe18:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fe1a:	687a      	ldr	r2, [r7, #4]
 801fe1c:	683b      	ldr	r3, [r7, #0]
 801fe1e:	781b      	ldrb	r3, [r3, #0]
 801fe20:	009b      	lsls	r3, r3, #2
 801fe22:	18d3      	adds	r3, r2, r3
 801fe24:	881b      	ldrh	r3, [r3, #0]
 801fe26:	b29a      	uxth	r2, r3
 801fe28:	2012      	movs	r0, #18
 801fe2a:	183b      	adds	r3, r7, r0
 801fe2c:	4915      	ldr	r1, [pc, #84]	@ (801fe84 <USB_EPClearStall+0x160>)
 801fe2e:	400a      	ands	r2, r1
 801fe30:	801a      	strh	r2, [r3, #0]
 801fe32:	183b      	adds	r3, r7, r0
 801fe34:	183a      	adds	r2, r7, r0
 801fe36:	8812      	ldrh	r2, [r2, #0]
 801fe38:	2180      	movs	r1, #128	@ 0x80
 801fe3a:	0149      	lsls	r1, r1, #5
 801fe3c:	404a      	eors	r2, r1
 801fe3e:	801a      	strh	r2, [r3, #0]
 801fe40:	183b      	adds	r3, r7, r0
 801fe42:	183a      	adds	r2, r7, r0
 801fe44:	8812      	ldrh	r2, [r2, #0]
 801fe46:	2180      	movs	r1, #128	@ 0x80
 801fe48:	0189      	lsls	r1, r1, #6
 801fe4a:	404a      	eors	r2, r1
 801fe4c:	801a      	strh	r2, [r3, #0]
 801fe4e:	687a      	ldr	r2, [r7, #4]
 801fe50:	683b      	ldr	r3, [r7, #0]
 801fe52:	781b      	ldrb	r3, [r3, #0]
 801fe54:	009b      	lsls	r3, r3, #2
 801fe56:	18d3      	adds	r3, r2, r3
 801fe58:	183a      	adds	r2, r7, r0
 801fe5a:	8812      	ldrh	r2, [r2, #0]
 801fe5c:	4907      	ldr	r1, [pc, #28]	@ (801fe7c <USB_EPClearStall+0x158>)
 801fe5e:	430a      	orrs	r2, r1
 801fe60:	b292      	uxth	r2, r2
 801fe62:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801fe64:	2300      	movs	r3, #0
}
 801fe66:	0018      	movs	r0, r3
 801fe68:	46bd      	mov	sp, r7
 801fe6a:	b006      	add	sp, #24
 801fe6c:	bd80      	pop	{r7, pc}
 801fe6e:	46c0      	nop			@ (mov r8, r8)
 801fe70:	ffff8f8f 	.word	0xffff8f8f
 801fe74:	ffff80c0 	.word	0xffff80c0
 801fe78:	ffff8fbf 	.word	0xffff8fbf
 801fe7c:	ffff8080 	.word	0xffff8080
 801fe80:	ffffc080 	.word	0xffffc080
 801fe84:	ffffbf8f 	.word	0xffffbf8f

0801fe88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801fe88:	b580      	push	{r7, lr}
 801fe8a:	b082      	sub	sp, #8
 801fe8c:	af00      	add	r7, sp, #0
 801fe8e:	6078      	str	r0, [r7, #4]
 801fe90:	000a      	movs	r2, r1
 801fe92:	1cfb      	adds	r3, r7, #3
 801fe94:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801fe96:	1cfb      	adds	r3, r7, #3
 801fe98:	781b      	ldrb	r3, [r3, #0]
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	d103      	bne.n	801fea6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	224c      	movs	r2, #76	@ 0x4c
 801fea2:	2180      	movs	r1, #128	@ 0x80
 801fea4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801fea6:	2300      	movs	r3, #0
}
 801fea8:	0018      	movs	r0, r3
 801feaa:	46bd      	mov	sp, r7
 801feac:	b002      	add	sp, #8
 801feae:	bd80      	pop	{r7, pc}

0801feb0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801feb0:	b580      	push	{r7, lr}
 801feb2:	b082      	sub	sp, #8
 801feb4:	af00      	add	r7, sp, #0
 801feb6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	2258      	movs	r2, #88	@ 0x58
 801febc:	5a9b      	ldrh	r3, [r3, r2]
 801febe:	b29b      	uxth	r3, r3
 801fec0:	4a05      	ldr	r2, [pc, #20]	@ (801fed8 <USB_DevConnect+0x28>)
 801fec2:	4313      	orrs	r3, r2
 801fec4:	b299      	uxth	r1, r3
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	2258      	movs	r2, #88	@ 0x58
 801feca:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801fecc:	2300      	movs	r3, #0
}
 801fece:	0018      	movs	r0, r3
 801fed0:	46bd      	mov	sp, r7
 801fed2:	b002      	add	sp, #8
 801fed4:	bd80      	pop	{r7, pc}
 801fed6:	46c0      	nop			@ (mov r8, r8)
 801fed8:	ffff8000 	.word	0xffff8000

0801fedc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801fedc:	b580      	push	{r7, lr}
 801fede:	b084      	sub	sp, #16
 801fee0:	af00      	add	r7, sp, #0
 801fee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	2244      	movs	r2, #68	@ 0x44
 801fee8:	5a9b      	ldrh	r3, [r3, r2]
 801feea:	b29b      	uxth	r3, r3
 801feec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801feee:	68fb      	ldr	r3, [r7, #12]
}
 801fef0:	0018      	movs	r0, r3
 801fef2:	46bd      	mov	sp, r7
 801fef4:	b004      	add	sp, #16
 801fef6:	bd80      	pop	{r7, pc}

0801fef8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801fef8:	b580      	push	{r7, lr}
 801fefa:	b08a      	sub	sp, #40	@ 0x28
 801fefc:	af00      	add	r7, sp, #0
 801fefe:	60f8      	str	r0, [r7, #12]
 801ff00:	60b9      	str	r1, [r7, #8]
 801ff02:	0019      	movs	r1, r3
 801ff04:	1dbb      	adds	r3, r7, #6
 801ff06:	801a      	strh	r2, [r3, #0]
 801ff08:	1d3b      	adds	r3, r7, #4
 801ff0a:	1c0a      	adds	r2, r1, #0
 801ff0c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801ff0e:	1d3b      	adds	r3, r7, #4
 801ff10:	881b      	ldrh	r3, [r3, #0]
 801ff12:	3301      	adds	r3, #1
 801ff14:	085b      	lsrs	r3, r3, #1
 801ff16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801ff18:	68fb      	ldr	r3, [r7, #12]
 801ff1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801ff1c:	68bb      	ldr	r3, [r7, #8]
 801ff1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801ff20:	1dbb      	adds	r3, r7, #6
 801ff22:	881a      	ldrh	r2, [r3, #0]
 801ff24:	697b      	ldr	r3, [r7, #20]
 801ff26:	18d3      	adds	r3, r2, r3
 801ff28:	2280      	movs	r2, #128	@ 0x80
 801ff2a:	00d2      	lsls	r2, r2, #3
 801ff2c:	4694      	mov	ip, r2
 801ff2e:	4463      	add	r3, ip
 801ff30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801ff32:	69bb      	ldr	r3, [r7, #24]
 801ff34:	627b      	str	r3, [r7, #36]	@ 0x24
 801ff36:	e020      	b.n	801ff7a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801ff38:	69fb      	ldr	r3, [r7, #28]
 801ff3a:	781a      	ldrb	r2, [r3, #0]
 801ff3c:	2112      	movs	r1, #18
 801ff3e:	187b      	adds	r3, r7, r1
 801ff40:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801ff42:	69fb      	ldr	r3, [r7, #28]
 801ff44:	3301      	adds	r3, #1
 801ff46:	781b      	ldrb	r3, [r3, #0]
 801ff48:	021b      	lsls	r3, r3, #8
 801ff4a:	b21a      	sxth	r2, r3
 801ff4c:	187b      	adds	r3, r7, r1
 801ff4e:	2000      	movs	r0, #0
 801ff50:	5e1b      	ldrsh	r3, [r3, r0]
 801ff52:	4313      	orrs	r3, r2
 801ff54:	b21a      	sxth	r2, r3
 801ff56:	187b      	adds	r3, r7, r1
 801ff58:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801ff5a:	6a3b      	ldr	r3, [r7, #32]
 801ff5c:	187a      	adds	r2, r7, r1
 801ff5e:	8812      	ldrh	r2, [r2, #0]
 801ff60:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801ff62:	6a3b      	ldr	r3, [r7, #32]
 801ff64:	3302      	adds	r3, #2
 801ff66:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801ff68:	69fb      	ldr	r3, [r7, #28]
 801ff6a:	3301      	adds	r3, #1
 801ff6c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801ff6e:	69fb      	ldr	r3, [r7, #28]
 801ff70:	3301      	adds	r3, #1
 801ff72:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801ff74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff76:	3b01      	subs	r3, #1
 801ff78:	627b      	str	r3, [r7, #36]	@ 0x24
 801ff7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d1db      	bne.n	801ff38 <USB_WritePMA+0x40>
  }
}
 801ff80:	46c0      	nop			@ (mov r8, r8)
 801ff82:	46c0      	nop			@ (mov r8, r8)
 801ff84:	46bd      	mov	sp, r7
 801ff86:	b00a      	add	sp, #40	@ 0x28
 801ff88:	bd80      	pop	{r7, pc}

0801ff8a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801ff8a:	b580      	push	{r7, lr}
 801ff8c:	b08a      	sub	sp, #40	@ 0x28
 801ff8e:	af00      	add	r7, sp, #0
 801ff90:	60f8      	str	r0, [r7, #12]
 801ff92:	60b9      	str	r1, [r7, #8]
 801ff94:	0019      	movs	r1, r3
 801ff96:	1dbb      	adds	r3, r7, #6
 801ff98:	801a      	strh	r2, [r3, #0]
 801ff9a:	1d3b      	adds	r3, r7, #4
 801ff9c:	1c0a      	adds	r2, r1, #0
 801ff9e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801ffa0:	1d3b      	adds	r3, r7, #4
 801ffa2:	881b      	ldrh	r3, [r3, #0]
 801ffa4:	085b      	lsrs	r3, r3, #1
 801ffa6:	b29b      	uxth	r3, r3
 801ffa8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801ffae:	68bb      	ldr	r3, [r7, #8]
 801ffb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801ffb2:	1dbb      	adds	r3, r7, #6
 801ffb4:	881a      	ldrh	r2, [r3, #0]
 801ffb6:	697b      	ldr	r3, [r7, #20]
 801ffb8:	18d3      	adds	r3, r2, r3
 801ffba:	2280      	movs	r2, #128	@ 0x80
 801ffbc:	00d2      	lsls	r2, r2, #3
 801ffbe:	4694      	mov	ip, r2
 801ffc0:	4463      	add	r3, ip
 801ffc2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801ffc4:	69bb      	ldr	r3, [r7, #24]
 801ffc6:	627b      	str	r3, [r7, #36]	@ 0x24
 801ffc8:	e018      	b.n	801fffc <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801ffca:	6a3b      	ldr	r3, [r7, #32]
 801ffcc:	881b      	ldrh	r3, [r3, #0]
 801ffce:	b29b      	uxth	r3, r3
 801ffd0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801ffd2:	6a3b      	ldr	r3, [r7, #32]
 801ffd4:	3302      	adds	r3, #2
 801ffd6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801ffd8:	693b      	ldr	r3, [r7, #16]
 801ffda:	b2da      	uxtb	r2, r3
 801ffdc:	69fb      	ldr	r3, [r7, #28]
 801ffde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801ffe0:	69fb      	ldr	r3, [r7, #28]
 801ffe2:	3301      	adds	r3, #1
 801ffe4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801ffe6:	693b      	ldr	r3, [r7, #16]
 801ffe8:	0a1b      	lsrs	r3, r3, #8
 801ffea:	b2da      	uxtb	r2, r3
 801ffec:	69fb      	ldr	r3, [r7, #28]
 801ffee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801fff0:	69fb      	ldr	r3, [r7, #28]
 801fff2:	3301      	adds	r3, #1
 801fff4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801fff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fff8:	3b01      	subs	r3, #1
 801fffa:	627b      	str	r3, [r7, #36]	@ 0x24
 801fffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d1e3      	bne.n	801ffca <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8020002:	1d3b      	adds	r3, r7, #4
 8020004:	881b      	ldrh	r3, [r3, #0]
 8020006:	2201      	movs	r2, #1
 8020008:	4013      	ands	r3, r2
 802000a:	b29b      	uxth	r3, r3
 802000c:	2b00      	cmp	r3, #0
 802000e:	d007      	beq.n	8020020 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8020010:	6a3b      	ldr	r3, [r7, #32]
 8020012:	881b      	ldrh	r3, [r3, #0]
 8020014:	b29b      	uxth	r3, r3
 8020016:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020018:	693b      	ldr	r3, [r7, #16]
 802001a:	b2da      	uxtb	r2, r3
 802001c:	69fb      	ldr	r3, [r7, #28]
 802001e:	701a      	strb	r2, [r3, #0]
  }
}
 8020020:	46c0      	nop			@ (mov r8, r8)
 8020022:	46bd      	mov	sp, r7
 8020024:	b00a      	add	sp, #40	@ 0x28
 8020026:	bd80      	pop	{r7, pc}

08020028 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020028:	b580      	push	{r7, lr}
 802002a:	b084      	sub	sp, #16
 802002c:	af00      	add	r7, sp, #0
 802002e:	6078      	str	r0, [r7, #4]
 8020030:	000a      	movs	r2, r1
 8020032:	1cfb      	adds	r3, r7, #3
 8020034:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8020036:	230f      	movs	r3, #15
 8020038:	18fb      	adds	r3, r7, r3
 802003a:	2200      	movs	r2, #0
 802003c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	7c1b      	ldrb	r3, [r3, #16]
 8020042:	2b00      	cmp	r3, #0
 8020044:	d116      	bne.n	8020074 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020046:	2380      	movs	r3, #128	@ 0x80
 8020048:	009b      	lsls	r3, r3, #2
 802004a:	6878      	ldr	r0, [r7, #4]
 802004c:	2202      	movs	r2, #2
 802004e:	2181      	movs	r1, #129	@ 0x81
 8020050:	f002 f8eb 	bl	802222a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	2201      	movs	r2, #1
 8020058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802005a:	2380      	movs	r3, #128	@ 0x80
 802005c:	009b      	lsls	r3, r3, #2
 802005e:	6878      	ldr	r0, [r7, #4]
 8020060:	2202      	movs	r2, #2
 8020062:	2101      	movs	r1, #1
 8020064:	f002 f8e1 	bl	802222a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020068:	687a      	ldr	r2, [r7, #4]
 802006a:	23b6      	movs	r3, #182	@ 0xb6
 802006c:	005b      	lsls	r3, r3, #1
 802006e:	2101      	movs	r1, #1
 8020070:	50d1      	str	r1, [r2, r3]
 8020072:	e013      	b.n	802009c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020074:	6878      	ldr	r0, [r7, #4]
 8020076:	2340      	movs	r3, #64	@ 0x40
 8020078:	2202      	movs	r2, #2
 802007a:	2181      	movs	r1, #129	@ 0x81
 802007c:	f002 f8d5 	bl	802222a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	2201      	movs	r2, #1
 8020084:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020086:	6878      	ldr	r0, [r7, #4]
 8020088:	2340      	movs	r3, #64	@ 0x40
 802008a:	2202      	movs	r2, #2
 802008c:	2101      	movs	r1, #1
 802008e:	f002 f8cc 	bl	802222a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020092:	687a      	ldr	r2, [r7, #4]
 8020094:	23b6      	movs	r3, #182	@ 0xb6
 8020096:	005b      	lsls	r3, r3, #1
 8020098:	2101      	movs	r1, #1
 802009a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802009c:	6878      	ldr	r0, [r7, #4]
 802009e:	2308      	movs	r3, #8
 80200a0:	2203      	movs	r2, #3
 80200a2:	2182      	movs	r1, #130	@ 0x82
 80200a4:	f002 f8c1 	bl	802222a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	2201      	movs	r2, #1
 80200ac:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80200ae:	2387      	movs	r3, #135	@ 0x87
 80200b0:	009b      	lsls	r3, r3, #2
 80200b2:	0018      	movs	r0, r3
 80200b4:	f002 fa52 	bl	802255c <USBD_static_malloc>
 80200b8:	0001      	movs	r1, r0
 80200ba:	687a      	ldr	r2, [r7, #4]
 80200bc:	23ae      	movs	r3, #174	@ 0xae
 80200be:	009b      	lsls	r3, r3, #2
 80200c0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80200c2:	687a      	ldr	r2, [r7, #4]
 80200c4:	23ae      	movs	r3, #174	@ 0xae
 80200c6:	009b      	lsls	r3, r3, #2
 80200c8:	58d3      	ldr	r3, [r2, r3]
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d104      	bne.n	80200d8 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80200ce:	230f      	movs	r3, #15
 80200d0:	18fb      	adds	r3, r7, r3
 80200d2:	2201      	movs	r2, #1
 80200d4:	701a      	strb	r2, [r3, #0]
 80200d6:	e02c      	b.n	8020132 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80200d8:	687a      	ldr	r2, [r7, #4]
 80200da:	23ae      	movs	r3, #174	@ 0xae
 80200dc:	009b      	lsls	r3, r3, #2
 80200de:	58d3      	ldr	r3, [r2, r3]
 80200e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80200e2:	687a      	ldr	r2, [r7, #4]
 80200e4:	23af      	movs	r3, #175	@ 0xaf
 80200e6:	009b      	lsls	r3, r3, #2
 80200e8:	58d3      	ldr	r3, [r2, r3]
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80200ee:	68ba      	ldr	r2, [r7, #8]
 80200f0:	2385      	movs	r3, #133	@ 0x85
 80200f2:	009b      	lsls	r3, r3, #2
 80200f4:	2100      	movs	r1, #0
 80200f6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80200f8:	68ba      	ldr	r2, [r7, #8]
 80200fa:	2386      	movs	r3, #134	@ 0x86
 80200fc:	009b      	lsls	r3, r3, #2
 80200fe:	2100      	movs	r1, #0
 8020100:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	7c1b      	ldrb	r3, [r3, #16]
 8020106:	2b00      	cmp	r3, #0
 8020108:	d10a      	bne.n	8020120 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802010a:	68ba      	ldr	r2, [r7, #8]
 802010c:	2381      	movs	r3, #129	@ 0x81
 802010e:	009b      	lsls	r3, r3, #2
 8020110:	58d2      	ldr	r2, [r2, r3]
 8020112:	2380      	movs	r3, #128	@ 0x80
 8020114:	009b      	lsls	r3, r3, #2
 8020116:	6878      	ldr	r0, [r7, #4]
 8020118:	2101      	movs	r1, #1
 802011a:	f002 f9d1 	bl	80224c0 <USBD_LL_PrepareReceive>
 802011e:	e008      	b.n	8020132 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020120:	68ba      	ldr	r2, [r7, #8]
 8020122:	2381      	movs	r3, #129	@ 0x81
 8020124:	009b      	lsls	r3, r3, #2
 8020126:	58d2      	ldr	r2, [r2, r3]
 8020128:	6878      	ldr	r0, [r7, #4]
 802012a:	2340      	movs	r3, #64	@ 0x40
 802012c:	2101      	movs	r1, #1
 802012e:	f002 f9c7 	bl	80224c0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8020132:	230f      	movs	r3, #15
 8020134:	18fb      	adds	r3, r7, r3
 8020136:	781b      	ldrb	r3, [r3, #0]
}
 8020138:	0018      	movs	r0, r3
 802013a:	46bd      	mov	sp, r7
 802013c:	b004      	add	sp, #16
 802013e:	bd80      	pop	{r7, pc}

08020140 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020140:	b580      	push	{r7, lr}
 8020142:	b084      	sub	sp, #16
 8020144:	af00      	add	r7, sp, #0
 8020146:	6078      	str	r0, [r7, #4]
 8020148:	000a      	movs	r2, r1
 802014a:	1cfb      	adds	r3, r7, #3
 802014c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 802014e:	230f      	movs	r3, #15
 8020150:	18fb      	adds	r3, r7, r3
 8020152:	2200      	movs	r2, #0
 8020154:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8020156:	687b      	ldr	r3, [r7, #4]
 8020158:	2181      	movs	r1, #129	@ 0x81
 802015a:	0018      	movs	r0, r3
 802015c:	f002 f89c 	bl	8022298 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	2200      	movs	r2, #0
 8020164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	2101      	movs	r1, #1
 802016a:	0018      	movs	r0, r3
 802016c:	f002 f894 	bl	8022298 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8020170:	687a      	ldr	r2, [r7, #4]
 8020172:	23b6      	movs	r3, #182	@ 0xb6
 8020174:	005b      	lsls	r3, r3, #1
 8020176:	2100      	movs	r1, #0
 8020178:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	2182      	movs	r1, #130	@ 0x82
 802017e:	0018      	movs	r0, r3
 8020180:	f002 f88a 	bl	8022298 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	2200      	movs	r2, #0
 8020188:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 802018a:	687a      	ldr	r2, [r7, #4]
 802018c:	23ae      	movs	r3, #174	@ 0xae
 802018e:	009b      	lsls	r3, r3, #2
 8020190:	58d3      	ldr	r3, [r2, r3]
 8020192:	2b00      	cmp	r3, #0
 8020194:	d011      	beq.n	80201ba <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8020196:	687a      	ldr	r2, [r7, #4]
 8020198:	23af      	movs	r3, #175	@ 0xaf
 802019a:	009b      	lsls	r3, r3, #2
 802019c:	58d3      	ldr	r3, [r2, r3]
 802019e:	685b      	ldr	r3, [r3, #4]
 80201a0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80201a2:	687a      	ldr	r2, [r7, #4]
 80201a4:	23ae      	movs	r3, #174	@ 0xae
 80201a6:	009b      	lsls	r3, r3, #2
 80201a8:	58d3      	ldr	r3, [r2, r3]
 80201aa:	0018      	movs	r0, r3
 80201ac:	f002 f9e2 	bl	8022574 <USBD_static_free>
    pdev->pClassData = NULL;
 80201b0:	687a      	ldr	r2, [r7, #4]
 80201b2:	23ae      	movs	r3, #174	@ 0xae
 80201b4:	009b      	lsls	r3, r3, #2
 80201b6:	2100      	movs	r1, #0
 80201b8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80201ba:	230f      	movs	r3, #15
 80201bc:	18fb      	adds	r3, r7, r3
 80201be:	781b      	ldrb	r3, [r3, #0]
}
 80201c0:	0018      	movs	r0, r3
 80201c2:	46bd      	mov	sp, r7
 80201c4:	b004      	add	sp, #16
 80201c6:	bd80      	pop	{r7, pc}

080201c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80201c8:	b580      	push	{r7, lr}
 80201ca:	b086      	sub	sp, #24
 80201cc:	af00      	add	r7, sp, #0
 80201ce:	6078      	str	r0, [r7, #4]
 80201d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80201d2:	687a      	ldr	r2, [r7, #4]
 80201d4:	23ae      	movs	r3, #174	@ 0xae
 80201d6:	009b      	lsls	r3, r3, #2
 80201d8:	58d3      	ldr	r3, [r2, r3]
 80201da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80201dc:	230f      	movs	r3, #15
 80201de:	18fb      	adds	r3, r7, r3
 80201e0:	2200      	movs	r2, #0
 80201e2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80201e4:	230c      	movs	r3, #12
 80201e6:	18fb      	adds	r3, r7, r3
 80201e8:	2200      	movs	r2, #0
 80201ea:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80201ec:	2317      	movs	r3, #23
 80201ee:	18fb      	adds	r3, r7, r3
 80201f0:	2200      	movs	r2, #0
 80201f2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80201f4:	683b      	ldr	r3, [r7, #0]
 80201f6:	781b      	ldrb	r3, [r3, #0]
 80201f8:	001a      	movs	r2, r3
 80201fa:	2360      	movs	r3, #96	@ 0x60
 80201fc:	4013      	ands	r3, r2
 80201fe:	d03d      	beq.n	802027c <USBD_CDC_Setup+0xb4>
 8020200:	2b20      	cmp	r3, #32
 8020202:	d000      	beq.n	8020206 <USBD_CDC_Setup+0x3e>
 8020204:	e094      	b.n	8020330 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8020206:	683b      	ldr	r3, [r7, #0]
 8020208:	88db      	ldrh	r3, [r3, #6]
 802020a:	2b00      	cmp	r3, #0
 802020c:	d02b      	beq.n	8020266 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 802020e:	683b      	ldr	r3, [r7, #0]
 8020210:	781b      	ldrb	r3, [r3, #0]
 8020212:	b25b      	sxtb	r3, r3
 8020214:	2b00      	cmp	r3, #0
 8020216:	da12      	bge.n	802023e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020218:	687a      	ldr	r2, [r7, #4]
 802021a:	23af      	movs	r3, #175	@ 0xaf
 802021c:	009b      	lsls	r3, r3, #2
 802021e:	58d3      	ldr	r3, [r2, r3]
 8020220:	689b      	ldr	r3, [r3, #8]
 8020222:	683a      	ldr	r2, [r7, #0]
 8020224:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8020226:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020228:	683a      	ldr	r2, [r7, #0]
 802022a:	88d2      	ldrh	r2, [r2, #6]
 802022c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802022e:	6939      	ldr	r1, [r7, #16]
 8020230:	683b      	ldr	r3, [r7, #0]
 8020232:	88da      	ldrh	r2, [r3, #6]
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	0018      	movs	r0, r3
 8020238:	f001 fbaf 	bl	802199a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 802023c:	e083      	b.n	8020346 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 802023e:	683b      	ldr	r3, [r7, #0]
 8020240:	7859      	ldrb	r1, [r3, #1]
 8020242:	693a      	ldr	r2, [r7, #16]
 8020244:	2380      	movs	r3, #128	@ 0x80
 8020246:	009b      	lsls	r3, r3, #2
 8020248:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 802024a:	683b      	ldr	r3, [r7, #0]
 802024c:	88db      	ldrh	r3, [r3, #6]
 802024e:	b2d9      	uxtb	r1, r3
 8020250:	693b      	ldr	r3, [r7, #16]
 8020252:	4a40      	ldr	r2, [pc, #256]	@ (8020354 <USBD_CDC_Setup+0x18c>)
 8020254:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8020256:	6939      	ldr	r1, [r7, #16]
 8020258:	683b      	ldr	r3, [r7, #0]
 802025a:	88da      	ldrh	r2, [r3, #6]
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	0018      	movs	r0, r3
 8020260:	f001 fbce 	bl	8021a00 <USBD_CtlPrepareRx>
      break;
 8020264:	e06f      	b.n	8020346 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020266:	687a      	ldr	r2, [r7, #4]
 8020268:	23af      	movs	r3, #175	@ 0xaf
 802026a:	009b      	lsls	r3, r3, #2
 802026c:	58d3      	ldr	r3, [r2, r3]
 802026e:	689b      	ldr	r3, [r3, #8]
 8020270:	683a      	ldr	r2, [r7, #0]
 8020272:	7850      	ldrb	r0, [r2, #1]
 8020274:	6839      	ldr	r1, [r7, #0]
 8020276:	2200      	movs	r2, #0
 8020278:	4798      	blx	r3
      break;
 802027a:	e064      	b.n	8020346 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802027c:	683b      	ldr	r3, [r7, #0]
 802027e:	785b      	ldrb	r3, [r3, #1]
 8020280:	2b0b      	cmp	r3, #11
 8020282:	d037      	beq.n	80202f4 <USBD_CDC_Setup+0x12c>
 8020284:	dc47      	bgt.n	8020316 <USBD_CDC_Setup+0x14e>
 8020286:	2b00      	cmp	r3, #0
 8020288:	d002      	beq.n	8020290 <USBD_CDC_Setup+0xc8>
 802028a:	2b0a      	cmp	r3, #10
 802028c:	d019      	beq.n	80202c2 <USBD_CDC_Setup+0xfa>
 802028e:	e042      	b.n	8020316 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020290:	687a      	ldr	r2, [r7, #4]
 8020292:	23a7      	movs	r3, #167	@ 0xa7
 8020294:	009b      	lsls	r3, r3, #2
 8020296:	5cd3      	ldrb	r3, [r2, r3]
 8020298:	2b03      	cmp	r3, #3
 802029a:	d107      	bne.n	80202ac <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 802029c:	230c      	movs	r3, #12
 802029e:	18f9      	adds	r1, r7, r3
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	2202      	movs	r2, #2
 80202a4:	0018      	movs	r0, r3
 80202a6:	f001 fb78 	bl	802199a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80202aa:	e040      	b.n	802032e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80202ac:	683a      	ldr	r2, [r7, #0]
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	0011      	movs	r1, r2
 80202b2:	0018      	movs	r0, r3
 80202b4:	f001 faf3 	bl	802189e <USBD_CtlError>
            ret = USBD_FAIL;
 80202b8:	2317      	movs	r3, #23
 80202ba:	18fb      	adds	r3, r7, r3
 80202bc:	2202      	movs	r2, #2
 80202be:	701a      	strb	r2, [r3, #0]
          break;
 80202c0:	e035      	b.n	802032e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80202c2:	687a      	ldr	r2, [r7, #4]
 80202c4:	23a7      	movs	r3, #167	@ 0xa7
 80202c6:	009b      	lsls	r3, r3, #2
 80202c8:	5cd3      	ldrb	r3, [r2, r3]
 80202ca:	2b03      	cmp	r3, #3
 80202cc:	d107      	bne.n	80202de <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80202ce:	230f      	movs	r3, #15
 80202d0:	18f9      	adds	r1, r7, r3
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	2201      	movs	r2, #1
 80202d6:	0018      	movs	r0, r3
 80202d8:	f001 fb5f 	bl	802199a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80202dc:	e027      	b.n	802032e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80202de:	683a      	ldr	r2, [r7, #0]
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	0011      	movs	r1, r2
 80202e4:	0018      	movs	r0, r3
 80202e6:	f001 fada 	bl	802189e <USBD_CtlError>
            ret = USBD_FAIL;
 80202ea:	2317      	movs	r3, #23
 80202ec:	18fb      	adds	r3, r7, r3
 80202ee:	2202      	movs	r2, #2
 80202f0:	701a      	strb	r2, [r3, #0]
          break;
 80202f2:	e01c      	b.n	802032e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80202f4:	687a      	ldr	r2, [r7, #4]
 80202f6:	23a7      	movs	r3, #167	@ 0xa7
 80202f8:	009b      	lsls	r3, r3, #2
 80202fa:	5cd3      	ldrb	r3, [r2, r3]
 80202fc:	2b03      	cmp	r3, #3
 80202fe:	d015      	beq.n	802032c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8020300:	683a      	ldr	r2, [r7, #0]
 8020302:	687b      	ldr	r3, [r7, #4]
 8020304:	0011      	movs	r1, r2
 8020306:	0018      	movs	r0, r3
 8020308:	f001 fac9 	bl	802189e <USBD_CtlError>
            ret = USBD_FAIL;
 802030c:	2317      	movs	r3, #23
 802030e:	18fb      	adds	r3, r7, r3
 8020310:	2202      	movs	r2, #2
 8020312:	701a      	strb	r2, [r3, #0]
          }
          break;
 8020314:	e00a      	b.n	802032c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8020316:	683a      	ldr	r2, [r7, #0]
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	0011      	movs	r1, r2
 802031c:	0018      	movs	r0, r3
 802031e:	f001 fabe 	bl	802189e <USBD_CtlError>
          ret = USBD_FAIL;
 8020322:	2317      	movs	r3, #23
 8020324:	18fb      	adds	r3, r7, r3
 8020326:	2202      	movs	r2, #2
 8020328:	701a      	strb	r2, [r3, #0]
          break;
 802032a:	e000      	b.n	802032e <USBD_CDC_Setup+0x166>
          break;
 802032c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 802032e:	e00a      	b.n	8020346 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8020330:	683a      	ldr	r2, [r7, #0]
 8020332:	687b      	ldr	r3, [r7, #4]
 8020334:	0011      	movs	r1, r2
 8020336:	0018      	movs	r0, r3
 8020338:	f001 fab1 	bl	802189e <USBD_CtlError>
      ret = USBD_FAIL;
 802033c:	2317      	movs	r3, #23
 802033e:	18fb      	adds	r3, r7, r3
 8020340:	2202      	movs	r2, #2
 8020342:	701a      	strb	r2, [r3, #0]
      break;
 8020344:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020346:	2317      	movs	r3, #23
 8020348:	18fb      	adds	r3, r7, r3
 802034a:	781b      	ldrb	r3, [r3, #0]
}
 802034c:	0018      	movs	r0, r3
 802034e:	46bd      	mov	sp, r7
 8020350:	b006      	add	sp, #24
 8020352:	bd80      	pop	{r7, pc}
 8020354:	00000201 	.word	0x00000201

08020358 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020358:	b580      	push	{r7, lr}
 802035a:	b084      	sub	sp, #16
 802035c:	af00      	add	r7, sp, #0
 802035e:	6078      	str	r0, [r7, #4]
 8020360:	000a      	movs	r2, r1
 8020362:	1cfb      	adds	r3, r7, #3
 8020364:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020366:	687a      	ldr	r2, [r7, #4]
 8020368:	23ae      	movs	r3, #174	@ 0xae
 802036a:	009b      	lsls	r3, r3, #2
 802036c:	58d3      	ldr	r3, [r2, r3]
 802036e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8020370:	687a      	ldr	r2, [r7, #4]
 8020372:	23b0      	movs	r3, #176	@ 0xb0
 8020374:	009b      	lsls	r3, r3, #2
 8020376:	58d3      	ldr	r3, [r2, r3]
 8020378:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 802037a:	687a      	ldr	r2, [r7, #4]
 802037c:	23ae      	movs	r3, #174	@ 0xae
 802037e:	009b      	lsls	r3, r3, #2
 8020380:	58d3      	ldr	r3, [r2, r3]
 8020382:	2b00      	cmp	r3, #0
 8020384:	d03e      	beq.n	8020404 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8020386:	1cfb      	adds	r3, r7, #3
 8020388:	781a      	ldrb	r2, [r3, #0]
 802038a:	6879      	ldr	r1, [r7, #4]
 802038c:	0013      	movs	r3, r2
 802038e:	009b      	lsls	r3, r3, #2
 8020390:	189b      	adds	r3, r3, r2
 8020392:	009b      	lsls	r3, r3, #2
 8020394:	18cb      	adds	r3, r1, r3
 8020396:	331c      	adds	r3, #28
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	2b00      	cmp	r3, #0
 802039c:	d02b      	beq.n	80203f6 <USBD_CDC_DataIn+0x9e>
 802039e:	1cfb      	adds	r3, r7, #3
 80203a0:	781a      	ldrb	r2, [r3, #0]
 80203a2:	6879      	ldr	r1, [r7, #4]
 80203a4:	0013      	movs	r3, r2
 80203a6:	009b      	lsls	r3, r3, #2
 80203a8:	189b      	adds	r3, r3, r2
 80203aa:	009b      	lsls	r3, r3, #2
 80203ac:	18cb      	adds	r3, r1, r3
 80203ae:	331c      	adds	r3, #28
 80203b0:	6818      	ldr	r0, [r3, #0]
 80203b2:	1cfb      	adds	r3, r7, #3
 80203b4:	781a      	ldrb	r2, [r3, #0]
 80203b6:	68b9      	ldr	r1, [r7, #8]
 80203b8:	0013      	movs	r3, r2
 80203ba:	009b      	lsls	r3, r3, #2
 80203bc:	189b      	adds	r3, r3, r2
 80203be:	00db      	lsls	r3, r3, #3
 80203c0:	18cb      	adds	r3, r1, r3
 80203c2:	3338      	adds	r3, #56	@ 0x38
 80203c4:	681b      	ldr	r3, [r3, #0]
 80203c6:	0019      	movs	r1, r3
 80203c8:	f7df ff72 	bl	80002b0 <__aeabi_uidivmod>
 80203cc:	1e0b      	subs	r3, r1, #0
 80203ce:	d112      	bne.n	80203f6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80203d0:	1cfb      	adds	r3, r7, #3
 80203d2:	781a      	ldrb	r2, [r3, #0]
 80203d4:	6879      	ldr	r1, [r7, #4]
 80203d6:	0013      	movs	r3, r2
 80203d8:	009b      	lsls	r3, r3, #2
 80203da:	189b      	adds	r3, r3, r2
 80203dc:	009b      	lsls	r3, r3, #2
 80203de:	18cb      	adds	r3, r1, r3
 80203e0:	331c      	adds	r3, #28
 80203e2:	2200      	movs	r2, #0
 80203e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80203e6:	1cfb      	adds	r3, r7, #3
 80203e8:	7819      	ldrb	r1, [r3, #0]
 80203ea:	6878      	ldr	r0, [r7, #4]
 80203ec:	2300      	movs	r3, #0
 80203ee:	2200      	movs	r2, #0
 80203f0:	f002 f82f 	bl	8022452 <USBD_LL_Transmit>
 80203f4:	e004      	b.n	8020400 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80203f6:	68fa      	ldr	r2, [r7, #12]
 80203f8:	2385      	movs	r3, #133	@ 0x85
 80203fa:	009b      	lsls	r3, r3, #2
 80203fc:	2100      	movs	r1, #0
 80203fe:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8020400:	2300      	movs	r3, #0
 8020402:	e000      	b.n	8020406 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8020404:	2302      	movs	r3, #2
  }
}
 8020406:	0018      	movs	r0, r3
 8020408:	46bd      	mov	sp, r7
 802040a:	b004      	add	sp, #16
 802040c:	bd80      	pop	{r7, pc}

0802040e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802040e:	b580      	push	{r7, lr}
 8020410:	b084      	sub	sp, #16
 8020412:	af00      	add	r7, sp, #0
 8020414:	6078      	str	r0, [r7, #4]
 8020416:	000a      	movs	r2, r1
 8020418:	1cfb      	adds	r3, r7, #3
 802041a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802041c:	687a      	ldr	r2, [r7, #4]
 802041e:	23ae      	movs	r3, #174	@ 0xae
 8020420:	009b      	lsls	r3, r3, #2
 8020422:	58d3      	ldr	r3, [r2, r3]
 8020424:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8020426:	1cfb      	adds	r3, r7, #3
 8020428:	781a      	ldrb	r2, [r3, #0]
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	0011      	movs	r1, r2
 802042e:	0018      	movs	r0, r3
 8020430:	f002 f87d 	bl	802252e <USBD_LL_GetRxDataSize>
 8020434:	0001      	movs	r1, r0
 8020436:	68fa      	ldr	r2, [r7, #12]
 8020438:	2383      	movs	r3, #131	@ 0x83
 802043a:	009b      	lsls	r3, r3, #2
 802043c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 802043e:	687a      	ldr	r2, [r7, #4]
 8020440:	23ae      	movs	r3, #174	@ 0xae
 8020442:	009b      	lsls	r3, r3, #2
 8020444:	58d3      	ldr	r3, [r2, r3]
 8020446:	2b00      	cmp	r3, #0
 8020448:	d011      	beq.n	802046e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802044a:	687a      	ldr	r2, [r7, #4]
 802044c:	23af      	movs	r3, #175	@ 0xaf
 802044e:	009b      	lsls	r3, r3, #2
 8020450:	58d3      	ldr	r3, [r2, r3]
 8020452:	68da      	ldr	r2, [r3, #12]
 8020454:	68f9      	ldr	r1, [r7, #12]
 8020456:	2381      	movs	r3, #129	@ 0x81
 8020458:	009b      	lsls	r3, r3, #2
 802045a:	58c8      	ldr	r0, [r1, r3]
 802045c:	68fb      	ldr	r3, [r7, #12]
 802045e:	2183      	movs	r1, #131	@ 0x83
 8020460:	0089      	lsls	r1, r1, #2
 8020462:	468c      	mov	ip, r1
 8020464:	4463      	add	r3, ip
 8020466:	0019      	movs	r1, r3
 8020468:	4790      	blx	r2

    return USBD_OK;
 802046a:	2300      	movs	r3, #0
 802046c:	e000      	b.n	8020470 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 802046e:	2302      	movs	r3, #2
  }
}
 8020470:	0018      	movs	r0, r3
 8020472:	46bd      	mov	sp, r7
 8020474:	b004      	add	sp, #16
 8020476:	bd80      	pop	{r7, pc}

08020478 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8020478:	b590      	push	{r4, r7, lr}
 802047a:	b085      	sub	sp, #20
 802047c:	af00      	add	r7, sp, #0
 802047e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020480:	687a      	ldr	r2, [r7, #4]
 8020482:	23ae      	movs	r3, #174	@ 0xae
 8020484:	009b      	lsls	r3, r3, #2
 8020486:	58d3      	ldr	r3, [r2, r3]
 8020488:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802048a:	687a      	ldr	r2, [r7, #4]
 802048c:	23af      	movs	r3, #175	@ 0xaf
 802048e:	009b      	lsls	r3, r3, #2
 8020490:	58d3      	ldr	r3, [r2, r3]
 8020492:	2b00      	cmp	r3, #0
 8020494:	d018      	beq.n	80204c8 <USBD_CDC_EP0_RxReady+0x50>
 8020496:	68fa      	ldr	r2, [r7, #12]
 8020498:	2380      	movs	r3, #128	@ 0x80
 802049a:	009b      	lsls	r3, r3, #2
 802049c:	5cd3      	ldrb	r3, [r2, r3]
 802049e:	2bff      	cmp	r3, #255	@ 0xff
 80204a0:	d012      	beq.n	80204c8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80204a2:	687a      	ldr	r2, [r7, #4]
 80204a4:	23af      	movs	r3, #175	@ 0xaf
 80204a6:	009b      	lsls	r3, r3, #2
 80204a8:	58d3      	ldr	r3, [r2, r3]
 80204aa:	689b      	ldr	r3, [r3, #8]
 80204ac:	68f9      	ldr	r1, [r7, #12]
 80204ae:	2280      	movs	r2, #128	@ 0x80
 80204b0:	0092      	lsls	r2, r2, #2
 80204b2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80204b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80204b6:	68fa      	ldr	r2, [r7, #12]
 80204b8:	4c06      	ldr	r4, [pc, #24]	@ (80204d4 <USBD_CDC_EP0_RxReady+0x5c>)
 80204ba:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80204bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80204be:	68fa      	ldr	r2, [r7, #12]
 80204c0:	2380      	movs	r3, #128	@ 0x80
 80204c2:	009b      	lsls	r3, r3, #2
 80204c4:	21ff      	movs	r1, #255	@ 0xff
 80204c6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80204c8:	2300      	movs	r3, #0
}
 80204ca:	0018      	movs	r0, r3
 80204cc:	46bd      	mov	sp, r7
 80204ce:	b005      	add	sp, #20
 80204d0:	bd90      	pop	{r4, r7, pc}
 80204d2:	46c0      	nop			@ (mov r8, r8)
 80204d4:	00000201 	.word	0x00000201

080204d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b082      	sub	sp, #8
 80204dc:	af00      	add	r7, sp, #0
 80204de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	2243      	movs	r2, #67	@ 0x43
 80204e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80204e6:	4b02      	ldr	r3, [pc, #8]	@ (80204f0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80204e8:	0018      	movs	r0, r3
 80204ea:	46bd      	mov	sp, r7
 80204ec:	b002      	add	sp, #8
 80204ee:	bd80      	pop	{r7, pc}
 80204f0:	20000180 	.word	0x20000180

080204f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80204f4:	b580      	push	{r7, lr}
 80204f6:	b082      	sub	sp, #8
 80204f8:	af00      	add	r7, sp, #0
 80204fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	2243      	movs	r2, #67	@ 0x43
 8020500:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8020502:	4b02      	ldr	r3, [pc, #8]	@ (802050c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8020504:	0018      	movs	r0, r3
 8020506:	46bd      	mov	sp, r7
 8020508:	b002      	add	sp, #8
 802050a:	bd80      	pop	{r7, pc}
 802050c:	2000013c 	.word	0x2000013c

08020510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020510:	b580      	push	{r7, lr}
 8020512:	b082      	sub	sp, #8
 8020514:	af00      	add	r7, sp, #0
 8020516:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	2243      	movs	r2, #67	@ 0x43
 802051c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 802051e:	4b02      	ldr	r3, [pc, #8]	@ (8020528 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8020520:	0018      	movs	r0, r3
 8020522:	46bd      	mov	sp, r7
 8020524:	b002      	add	sp, #8
 8020526:	bd80      	pop	{r7, pc}
 8020528:	200001c4 	.word	0x200001c4

0802052c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 802052c:	b580      	push	{r7, lr}
 802052e:	b082      	sub	sp, #8
 8020530:	af00      	add	r7, sp, #0
 8020532:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	220a      	movs	r2, #10
 8020538:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 802053a:	4b02      	ldr	r3, [pc, #8]	@ (8020544 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 802053c:	0018      	movs	r0, r3
 802053e:	46bd      	mov	sp, r7
 8020540:	b002      	add	sp, #8
 8020542:	bd80      	pop	{r7, pc}
 8020544:	200000f8 	.word	0x200000f8

08020548 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8020548:	b580      	push	{r7, lr}
 802054a:	b084      	sub	sp, #16
 802054c:	af00      	add	r7, sp, #0
 802054e:	6078      	str	r0, [r7, #4]
 8020550:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8020552:	200f      	movs	r0, #15
 8020554:	183b      	adds	r3, r7, r0
 8020556:	2202      	movs	r2, #2
 8020558:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 802055a:	683b      	ldr	r3, [r7, #0]
 802055c:	2b00      	cmp	r3, #0
 802055e:	d007      	beq.n	8020570 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8020560:	687a      	ldr	r2, [r7, #4]
 8020562:	23af      	movs	r3, #175	@ 0xaf
 8020564:	009b      	lsls	r3, r3, #2
 8020566:	6839      	ldr	r1, [r7, #0]
 8020568:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 802056a:	183b      	adds	r3, r7, r0
 802056c:	2200      	movs	r2, #0
 802056e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8020570:	230f      	movs	r3, #15
 8020572:	18fb      	adds	r3, r7, r3
 8020574:	781b      	ldrb	r3, [r3, #0]
}
 8020576:	0018      	movs	r0, r3
 8020578:	46bd      	mov	sp, r7
 802057a:	b004      	add	sp, #16
 802057c:	bd80      	pop	{r7, pc}

0802057e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 802057e:	b580      	push	{r7, lr}
 8020580:	b086      	sub	sp, #24
 8020582:	af00      	add	r7, sp, #0
 8020584:	60f8      	str	r0, [r7, #12]
 8020586:	60b9      	str	r1, [r7, #8]
 8020588:	1dbb      	adds	r3, r7, #6
 802058a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802058c:	68fa      	ldr	r2, [r7, #12]
 802058e:	23ae      	movs	r3, #174	@ 0xae
 8020590:	009b      	lsls	r3, r3, #2
 8020592:	58d3      	ldr	r3, [r2, r3]
 8020594:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8020596:	697a      	ldr	r2, [r7, #20]
 8020598:	2382      	movs	r3, #130	@ 0x82
 802059a:	009b      	lsls	r3, r3, #2
 802059c:	68b9      	ldr	r1, [r7, #8]
 802059e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80205a0:	1dbb      	adds	r3, r7, #6
 80205a2:	8819      	ldrh	r1, [r3, #0]
 80205a4:	697a      	ldr	r2, [r7, #20]
 80205a6:	2384      	movs	r3, #132	@ 0x84
 80205a8:	009b      	lsls	r3, r3, #2
 80205aa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80205ac:	2300      	movs	r3, #0
}
 80205ae:	0018      	movs	r0, r3
 80205b0:	46bd      	mov	sp, r7
 80205b2:	b006      	add	sp, #24
 80205b4:	bd80      	pop	{r7, pc}

080205b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80205b6:	b580      	push	{r7, lr}
 80205b8:	b084      	sub	sp, #16
 80205ba:	af00      	add	r7, sp, #0
 80205bc:	6078      	str	r0, [r7, #4]
 80205be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80205c0:	687a      	ldr	r2, [r7, #4]
 80205c2:	23ae      	movs	r3, #174	@ 0xae
 80205c4:	009b      	lsls	r3, r3, #2
 80205c6:	58d3      	ldr	r3, [r2, r3]
 80205c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80205ca:	68fa      	ldr	r2, [r7, #12]
 80205cc:	2381      	movs	r3, #129	@ 0x81
 80205ce:	009b      	lsls	r3, r3, #2
 80205d0:	6839      	ldr	r1, [r7, #0]
 80205d2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80205d4:	2300      	movs	r3, #0
}
 80205d6:	0018      	movs	r0, r3
 80205d8:	46bd      	mov	sp, r7
 80205da:	b004      	add	sp, #16
 80205dc:	bd80      	pop	{r7, pc}

080205de <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80205de:	b580      	push	{r7, lr}
 80205e0:	b084      	sub	sp, #16
 80205e2:	af00      	add	r7, sp, #0
 80205e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80205e6:	687a      	ldr	r2, [r7, #4]
 80205e8:	23ae      	movs	r3, #174	@ 0xae
 80205ea:	009b      	lsls	r3, r3, #2
 80205ec:	58d3      	ldr	r3, [r2, r3]
 80205ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80205f0:	687a      	ldr	r2, [r7, #4]
 80205f2:	23ae      	movs	r3, #174	@ 0xae
 80205f4:	009b      	lsls	r3, r3, #2
 80205f6:	58d3      	ldr	r3, [r2, r3]
 80205f8:	2b00      	cmp	r3, #0
 80205fa:	d022      	beq.n	8020642 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80205fc:	68fa      	ldr	r2, [r7, #12]
 80205fe:	2385      	movs	r3, #133	@ 0x85
 8020600:	009b      	lsls	r3, r3, #2
 8020602:	58d3      	ldr	r3, [r2, r3]
 8020604:	2b00      	cmp	r3, #0
 8020606:	d11a      	bne.n	802063e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020608:	68fa      	ldr	r2, [r7, #12]
 802060a:	2385      	movs	r3, #133	@ 0x85
 802060c:	009b      	lsls	r3, r3, #2
 802060e:	2101      	movs	r1, #1
 8020610:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020612:	68fa      	ldr	r2, [r7, #12]
 8020614:	2384      	movs	r3, #132	@ 0x84
 8020616:	009b      	lsls	r3, r3, #2
 8020618:	58d2      	ldr	r2, [r2, r3]
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 802061e:	68fa      	ldr	r2, [r7, #12]
 8020620:	2382      	movs	r3, #130	@ 0x82
 8020622:	009b      	lsls	r3, r3, #2
 8020624:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8020626:	68fa      	ldr	r2, [r7, #12]
 8020628:	2384      	movs	r3, #132	@ 0x84
 802062a:	009b      	lsls	r3, r3, #2
 802062c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 802062e:	b29b      	uxth	r3, r3
 8020630:	6878      	ldr	r0, [r7, #4]
 8020632:	000a      	movs	r2, r1
 8020634:	2181      	movs	r1, #129	@ 0x81
 8020636:	f001 ff0c 	bl	8022452 <USBD_LL_Transmit>

      return USBD_OK;
 802063a:	2300      	movs	r3, #0
 802063c:	e002      	b.n	8020644 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 802063e:	2301      	movs	r3, #1
 8020640:	e000      	b.n	8020644 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8020642:	2302      	movs	r3, #2
  }
}
 8020644:	0018      	movs	r0, r3
 8020646:	46bd      	mov	sp, r7
 8020648:	b004      	add	sp, #16
 802064a:	bd80      	pop	{r7, pc}

0802064c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 802064c:	b580      	push	{r7, lr}
 802064e:	b084      	sub	sp, #16
 8020650:	af00      	add	r7, sp, #0
 8020652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020654:	687a      	ldr	r2, [r7, #4]
 8020656:	23ae      	movs	r3, #174	@ 0xae
 8020658:	009b      	lsls	r3, r3, #2
 802065a:	58d3      	ldr	r3, [r2, r3]
 802065c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 802065e:	687a      	ldr	r2, [r7, #4]
 8020660:	23ae      	movs	r3, #174	@ 0xae
 8020662:	009b      	lsls	r3, r3, #2
 8020664:	58d3      	ldr	r3, [r2, r3]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d019      	beq.n	802069e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	7c1b      	ldrb	r3, [r3, #16]
 802066e:	2b00      	cmp	r3, #0
 8020670:	d10a      	bne.n	8020688 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020672:	68fa      	ldr	r2, [r7, #12]
 8020674:	2381      	movs	r3, #129	@ 0x81
 8020676:	009b      	lsls	r3, r3, #2
 8020678:	58d2      	ldr	r2, [r2, r3]
 802067a:	2380      	movs	r3, #128	@ 0x80
 802067c:	009b      	lsls	r3, r3, #2
 802067e:	6878      	ldr	r0, [r7, #4]
 8020680:	2101      	movs	r1, #1
 8020682:	f001 ff1d 	bl	80224c0 <USBD_LL_PrepareReceive>
 8020686:	e008      	b.n	802069a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020688:	68fa      	ldr	r2, [r7, #12]
 802068a:	2381      	movs	r3, #129	@ 0x81
 802068c:	009b      	lsls	r3, r3, #2
 802068e:	58d2      	ldr	r2, [r2, r3]
 8020690:	6878      	ldr	r0, [r7, #4]
 8020692:	2340      	movs	r3, #64	@ 0x40
 8020694:	2101      	movs	r1, #1
 8020696:	f001 ff13 	bl	80224c0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 802069a:	2300      	movs	r3, #0
 802069c:	e000      	b.n	80206a0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 802069e:	2302      	movs	r3, #2
  }
}
 80206a0:	0018      	movs	r0, r3
 80206a2:	46bd      	mov	sp, r7
 80206a4:	b004      	add	sp, #16
 80206a6:	bd80      	pop	{r7, pc}

080206a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80206a8:	b580      	push	{r7, lr}
 80206aa:	b084      	sub	sp, #16
 80206ac:	af00      	add	r7, sp, #0
 80206ae:	60f8      	str	r0, [r7, #12]
 80206b0:	60b9      	str	r1, [r7, #8]
 80206b2:	1dfb      	adds	r3, r7, #7
 80206b4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80206b6:	68fb      	ldr	r3, [r7, #12]
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d101      	bne.n	80206c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80206bc:	2302      	movs	r3, #2
 80206be:	e020      	b.n	8020702 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80206c0:	68fa      	ldr	r2, [r7, #12]
 80206c2:	23ad      	movs	r3, #173	@ 0xad
 80206c4:	009b      	lsls	r3, r3, #2
 80206c6:	58d3      	ldr	r3, [r2, r3]
 80206c8:	2b00      	cmp	r3, #0
 80206ca:	d004      	beq.n	80206d6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80206cc:	68fa      	ldr	r2, [r7, #12]
 80206ce:	23ad      	movs	r3, #173	@ 0xad
 80206d0:	009b      	lsls	r3, r3, #2
 80206d2:	2100      	movs	r1, #0
 80206d4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80206d6:	68bb      	ldr	r3, [r7, #8]
 80206d8:	2b00      	cmp	r3, #0
 80206da:	d004      	beq.n	80206e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80206dc:	68fa      	ldr	r2, [r7, #12]
 80206de:	23ac      	movs	r3, #172	@ 0xac
 80206e0:	009b      	lsls	r3, r3, #2
 80206e2:	68b9      	ldr	r1, [r7, #8]
 80206e4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80206e6:	68fa      	ldr	r2, [r7, #12]
 80206e8:	23a7      	movs	r3, #167	@ 0xa7
 80206ea:	009b      	lsls	r3, r3, #2
 80206ec:	2101      	movs	r1, #1
 80206ee:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80206f0:	68fb      	ldr	r3, [r7, #12]
 80206f2:	1dfa      	adds	r2, r7, #7
 80206f4:	7812      	ldrb	r2, [r2, #0]
 80206f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	0018      	movs	r0, r3
 80206fc:	f001 fd0c 	bl	8022118 <USBD_LL_Init>

  return USBD_OK;
 8020700:	2300      	movs	r3, #0
}
 8020702:	0018      	movs	r0, r3
 8020704:	46bd      	mov	sp, r7
 8020706:	b004      	add	sp, #16
 8020708:	bd80      	pop	{r7, pc}

0802070a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802070a:	b580      	push	{r7, lr}
 802070c:	b084      	sub	sp, #16
 802070e:	af00      	add	r7, sp, #0
 8020710:	6078      	str	r0, [r7, #4]
 8020712:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8020714:	200f      	movs	r0, #15
 8020716:	183b      	adds	r3, r7, r0
 8020718:	2200      	movs	r2, #0
 802071a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 802071c:	683b      	ldr	r3, [r7, #0]
 802071e:	2b00      	cmp	r3, #0
 8020720:	d008      	beq.n	8020734 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8020722:	687a      	ldr	r2, [r7, #4]
 8020724:	23ad      	movs	r3, #173	@ 0xad
 8020726:	009b      	lsls	r3, r3, #2
 8020728:	6839      	ldr	r1, [r7, #0]
 802072a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 802072c:	183b      	adds	r3, r7, r0
 802072e:	2200      	movs	r2, #0
 8020730:	701a      	strb	r2, [r3, #0]
 8020732:	e003      	b.n	802073c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8020734:	230f      	movs	r3, #15
 8020736:	18fb      	adds	r3, r7, r3
 8020738:	2202      	movs	r2, #2
 802073a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 802073c:	230f      	movs	r3, #15
 802073e:	18fb      	adds	r3, r7, r3
 8020740:	781b      	ldrb	r3, [r3, #0]
}
 8020742:	0018      	movs	r0, r3
 8020744:	46bd      	mov	sp, r7
 8020746:	b004      	add	sp, #16
 8020748:	bd80      	pop	{r7, pc}

0802074a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 802074a:	b580      	push	{r7, lr}
 802074c:	b082      	sub	sp, #8
 802074e:	af00      	add	r7, sp, #0
 8020750:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	0018      	movs	r0, r3
 8020756:	f001 fd43 	bl	80221e0 <USBD_LL_Start>

  return USBD_OK;
 802075a:	2300      	movs	r3, #0
}
 802075c:	0018      	movs	r0, r3
 802075e:	46bd      	mov	sp, r7
 8020760:	b002      	add	sp, #8
 8020762:	bd80      	pop	{r7, pc}

08020764 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020764:	b580      	push	{r7, lr}
 8020766:	b082      	sub	sp, #8
 8020768:	af00      	add	r7, sp, #0
 802076a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802076c:	2300      	movs	r3, #0
}
 802076e:	0018      	movs	r0, r3
 8020770:	46bd      	mov	sp, r7
 8020772:	b002      	add	sp, #8
 8020774:	bd80      	pop	{r7, pc}

08020776 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020776:	b590      	push	{r4, r7, lr}
 8020778:	b085      	sub	sp, #20
 802077a:	af00      	add	r7, sp, #0
 802077c:	6078      	str	r0, [r7, #4]
 802077e:	000a      	movs	r2, r1
 8020780:	1cfb      	adds	r3, r7, #3
 8020782:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020784:	240f      	movs	r4, #15
 8020786:	193b      	adds	r3, r7, r4
 8020788:	2202      	movs	r2, #2
 802078a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 802078c:	687a      	ldr	r2, [r7, #4]
 802078e:	23ad      	movs	r3, #173	@ 0xad
 8020790:	009b      	lsls	r3, r3, #2
 8020792:	58d3      	ldr	r3, [r2, r3]
 8020794:	2b00      	cmp	r3, #0
 8020796:	d00e      	beq.n	80207b6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8020798:	687a      	ldr	r2, [r7, #4]
 802079a:	23ad      	movs	r3, #173	@ 0xad
 802079c:	009b      	lsls	r3, r3, #2
 802079e:	58d3      	ldr	r3, [r2, r3]
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	1cfa      	adds	r2, r7, #3
 80207a4:	7811      	ldrb	r1, [r2, #0]
 80207a6:	687a      	ldr	r2, [r7, #4]
 80207a8:	0010      	movs	r0, r2
 80207aa:	4798      	blx	r3
 80207ac:	1e03      	subs	r3, r0, #0
 80207ae:	d102      	bne.n	80207b6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80207b0:	193b      	adds	r3, r7, r4
 80207b2:	2200      	movs	r2, #0
 80207b4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80207b6:	230f      	movs	r3, #15
 80207b8:	18fb      	adds	r3, r7, r3
 80207ba:	781b      	ldrb	r3, [r3, #0]
}
 80207bc:	0018      	movs	r0, r3
 80207be:	46bd      	mov	sp, r7
 80207c0:	b005      	add	sp, #20
 80207c2:	bd90      	pop	{r4, r7, pc}

080207c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
 80207cc:	000a      	movs	r2, r1
 80207ce:	1cfb      	adds	r3, r7, #3
 80207d0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80207d2:	687a      	ldr	r2, [r7, #4]
 80207d4:	23ad      	movs	r3, #173	@ 0xad
 80207d6:	009b      	lsls	r3, r3, #2
 80207d8:	58d3      	ldr	r3, [r2, r3]
 80207da:	685b      	ldr	r3, [r3, #4]
 80207dc:	1cfa      	adds	r2, r7, #3
 80207de:	7811      	ldrb	r1, [r2, #0]
 80207e0:	687a      	ldr	r2, [r7, #4]
 80207e2:	0010      	movs	r0, r2
 80207e4:	4798      	blx	r3

  return USBD_OK;
 80207e6:	2300      	movs	r3, #0
}
 80207e8:	0018      	movs	r0, r3
 80207ea:	46bd      	mov	sp, r7
 80207ec:	b002      	add	sp, #8
 80207ee:	bd80      	pop	{r7, pc}

080207f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80207f0:	b580      	push	{r7, lr}
 80207f2:	b082      	sub	sp, #8
 80207f4:	af00      	add	r7, sp, #0
 80207f6:	6078      	str	r0, [r7, #4]
 80207f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	22aa      	movs	r2, #170	@ 0xaa
 80207fe:	0092      	lsls	r2, r2, #2
 8020800:	4694      	mov	ip, r2
 8020802:	4463      	add	r3, ip
 8020804:	683a      	ldr	r2, [r7, #0]
 8020806:	0011      	movs	r1, r2
 8020808:	0018      	movs	r0, r3
 802080a:	f001 f810 	bl	802182e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802080e:	687a      	ldr	r2, [r7, #4]
 8020810:	23a5      	movs	r3, #165	@ 0xa5
 8020812:	009b      	lsls	r3, r3, #2
 8020814:	2101      	movs	r1, #1
 8020816:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	4a23      	ldr	r2, [pc, #140]	@ (80208a8 <USBD_LL_SetupStage+0xb8>)
 802081c:	5a9b      	ldrh	r3, [r3, r2]
 802081e:	0019      	movs	r1, r3
 8020820:	687a      	ldr	r2, [r7, #4]
 8020822:	23a6      	movs	r3, #166	@ 0xa6
 8020824:	009b      	lsls	r3, r3, #2
 8020826:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8020828:	687a      	ldr	r2, [r7, #4]
 802082a:	23aa      	movs	r3, #170	@ 0xaa
 802082c:	009b      	lsls	r3, r3, #2
 802082e:	5cd3      	ldrb	r3, [r2, r3]
 8020830:	001a      	movs	r2, r3
 8020832:	231f      	movs	r3, #31
 8020834:	4013      	ands	r3, r2
 8020836:	2b02      	cmp	r3, #2
 8020838:	d019      	beq.n	802086e <USBD_LL_SetupStage+0x7e>
 802083a:	d822      	bhi.n	8020882 <USBD_LL_SetupStage+0x92>
 802083c:	2b00      	cmp	r3, #0
 802083e:	d002      	beq.n	8020846 <USBD_LL_SetupStage+0x56>
 8020840:	2b01      	cmp	r3, #1
 8020842:	d00a      	beq.n	802085a <USBD_LL_SetupStage+0x6a>
 8020844:	e01d      	b.n	8020882 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	22aa      	movs	r2, #170	@ 0xaa
 802084a:	0092      	lsls	r2, r2, #2
 802084c:	189a      	adds	r2, r3, r2
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	0011      	movs	r1, r2
 8020852:	0018      	movs	r0, r3
 8020854:	f000 fa10 	bl	8020c78 <USBD_StdDevReq>
      break;
 8020858:	e020      	b.n	802089c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	22aa      	movs	r2, #170	@ 0xaa
 802085e:	0092      	lsls	r2, r2, #2
 8020860:	189a      	adds	r2, r3, r2
 8020862:	687b      	ldr	r3, [r7, #4]
 8020864:	0011      	movs	r1, r2
 8020866:	0018      	movs	r0, r3
 8020868:	f000 fa78 	bl	8020d5c <USBD_StdItfReq>
      break;
 802086c:	e016      	b.n	802089c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	22aa      	movs	r2, #170	@ 0xaa
 8020872:	0092      	lsls	r2, r2, #2
 8020874:	189a      	adds	r2, r3, r2
 8020876:	687b      	ldr	r3, [r7, #4]
 8020878:	0011      	movs	r1, r2
 802087a:	0018      	movs	r0, r3
 802087c:	f000 fac5 	bl	8020e0a <USBD_StdEPReq>
      break;
 8020880:	e00c      	b.n	802089c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020882:	687a      	ldr	r2, [r7, #4]
 8020884:	23aa      	movs	r3, #170	@ 0xaa
 8020886:	009b      	lsls	r3, r3, #2
 8020888:	5cd3      	ldrb	r3, [r2, r3]
 802088a:	227f      	movs	r2, #127	@ 0x7f
 802088c:	4393      	bics	r3, r2
 802088e:	b2da      	uxtb	r2, r3
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	0011      	movs	r1, r2
 8020894:	0018      	movs	r0, r3
 8020896:	f001 fd2a 	bl	80222ee <USBD_LL_StallEP>
      break;
 802089a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 802089c:	2300      	movs	r3, #0
}
 802089e:	0018      	movs	r0, r3
 80208a0:	46bd      	mov	sp, r7
 80208a2:	b002      	add	sp, #8
 80208a4:	bd80      	pop	{r7, pc}
 80208a6:	46c0      	nop			@ (mov r8, r8)
 80208a8:	000002ae 	.word	0x000002ae

080208ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	b086      	sub	sp, #24
 80208b0:	af00      	add	r7, sp, #0
 80208b2:	60f8      	str	r0, [r7, #12]
 80208b4:	607a      	str	r2, [r7, #4]
 80208b6:	200b      	movs	r0, #11
 80208b8:	183b      	adds	r3, r7, r0
 80208ba:	1c0a      	adds	r2, r1, #0
 80208bc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80208be:	183b      	adds	r3, r7, r0
 80208c0:	781b      	ldrb	r3, [r3, #0]
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d154      	bne.n	8020970 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80208c6:	68fb      	ldr	r3, [r7, #12]
 80208c8:	3355      	adds	r3, #85	@ 0x55
 80208ca:	33ff      	adds	r3, #255	@ 0xff
 80208cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80208ce:	68fa      	ldr	r2, [r7, #12]
 80208d0:	23a5      	movs	r3, #165	@ 0xa5
 80208d2:	009b      	lsls	r3, r3, #2
 80208d4:	58d3      	ldr	r3, [r2, r3]
 80208d6:	2b03      	cmp	r3, #3
 80208d8:	d139      	bne.n	802094e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80208da:	697b      	ldr	r3, [r7, #20]
 80208dc:	68da      	ldr	r2, [r3, #12]
 80208de:	697b      	ldr	r3, [r7, #20]
 80208e0:	691b      	ldr	r3, [r3, #16]
 80208e2:	429a      	cmp	r2, r3
 80208e4:	d919      	bls.n	802091a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80208e6:	697b      	ldr	r3, [r7, #20]
 80208e8:	68da      	ldr	r2, [r3, #12]
 80208ea:	697b      	ldr	r3, [r7, #20]
 80208ec:	691b      	ldr	r3, [r3, #16]
 80208ee:	1ad2      	subs	r2, r2, r3
 80208f0:	697b      	ldr	r3, [r7, #20]
 80208f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80208f4:	697b      	ldr	r3, [r7, #20]
 80208f6:	68da      	ldr	r2, [r3, #12]
 80208f8:	697b      	ldr	r3, [r7, #20]
 80208fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80208fc:	429a      	cmp	r2, r3
 80208fe:	d203      	bcs.n	8020908 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020900:	697b      	ldr	r3, [r7, #20]
 8020902:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8020904:	b29b      	uxth	r3, r3
 8020906:	e002      	b.n	802090e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020908:	697b      	ldr	r3, [r7, #20]
 802090a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 802090c:	b29b      	uxth	r3, r3
 802090e:	6879      	ldr	r1, [r7, #4]
 8020910:	68f8      	ldr	r0, [r7, #12]
 8020912:	001a      	movs	r2, r3
 8020914:	f001 f898 	bl	8021a48 <USBD_CtlContinueRx>
 8020918:	e045      	b.n	80209a6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 802091a:	68fa      	ldr	r2, [r7, #12]
 802091c:	23ad      	movs	r3, #173	@ 0xad
 802091e:	009b      	lsls	r3, r3, #2
 8020920:	58d3      	ldr	r3, [r2, r3]
 8020922:	691b      	ldr	r3, [r3, #16]
 8020924:	2b00      	cmp	r3, #0
 8020926:	d00d      	beq.n	8020944 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020928:	68fa      	ldr	r2, [r7, #12]
 802092a:	23a7      	movs	r3, #167	@ 0xa7
 802092c:	009b      	lsls	r3, r3, #2
 802092e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020930:	2b03      	cmp	r3, #3
 8020932:	d107      	bne.n	8020944 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8020934:	68fa      	ldr	r2, [r7, #12]
 8020936:	23ad      	movs	r3, #173	@ 0xad
 8020938:	009b      	lsls	r3, r3, #2
 802093a:	58d3      	ldr	r3, [r2, r3]
 802093c:	691b      	ldr	r3, [r3, #16]
 802093e:	68fa      	ldr	r2, [r7, #12]
 8020940:	0010      	movs	r0, r2
 8020942:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	0018      	movs	r0, r3
 8020948:	f001 f891 	bl	8021a6e <USBD_CtlSendStatus>
 802094c:	e02b      	b.n	80209a6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 802094e:	68fa      	ldr	r2, [r7, #12]
 8020950:	23a5      	movs	r3, #165	@ 0xa5
 8020952:	009b      	lsls	r3, r3, #2
 8020954:	58d3      	ldr	r3, [r2, r3]
 8020956:	2b05      	cmp	r3, #5
 8020958:	d125      	bne.n	80209a6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 802095a:	68fa      	ldr	r2, [r7, #12]
 802095c:	23a5      	movs	r3, #165	@ 0xa5
 802095e:	009b      	lsls	r3, r3, #2
 8020960:	2100      	movs	r1, #0
 8020962:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8020964:	68fb      	ldr	r3, [r7, #12]
 8020966:	2100      	movs	r1, #0
 8020968:	0018      	movs	r0, r3
 802096a:	f001 fcc0 	bl	80222ee <USBD_LL_StallEP>
 802096e:	e01a      	b.n	80209a6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8020970:	68fa      	ldr	r2, [r7, #12]
 8020972:	23ad      	movs	r3, #173	@ 0xad
 8020974:	009b      	lsls	r3, r3, #2
 8020976:	58d3      	ldr	r3, [r2, r3]
 8020978:	699b      	ldr	r3, [r3, #24]
 802097a:	2b00      	cmp	r3, #0
 802097c:	d011      	beq.n	80209a2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 802097e:	68fa      	ldr	r2, [r7, #12]
 8020980:	23a7      	movs	r3, #167	@ 0xa7
 8020982:	009b      	lsls	r3, r3, #2
 8020984:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8020986:	2b03      	cmp	r3, #3
 8020988:	d10b      	bne.n	80209a2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 802098a:	68fa      	ldr	r2, [r7, #12]
 802098c:	23ad      	movs	r3, #173	@ 0xad
 802098e:	009b      	lsls	r3, r3, #2
 8020990:	58d3      	ldr	r3, [r2, r3]
 8020992:	699b      	ldr	r3, [r3, #24]
 8020994:	220b      	movs	r2, #11
 8020996:	18ba      	adds	r2, r7, r2
 8020998:	7811      	ldrb	r1, [r2, #0]
 802099a:	68fa      	ldr	r2, [r7, #12]
 802099c:	0010      	movs	r0, r2
 802099e:	4798      	blx	r3
 80209a0:	e001      	b.n	80209a6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80209a2:	2302      	movs	r3, #2
 80209a4:	e000      	b.n	80209a8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80209a6:	2300      	movs	r3, #0
}
 80209a8:	0018      	movs	r0, r3
 80209aa:	46bd      	mov	sp, r7
 80209ac:	b006      	add	sp, #24
 80209ae:	bd80      	pop	{r7, pc}

080209b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80209b0:	b580      	push	{r7, lr}
 80209b2:	b086      	sub	sp, #24
 80209b4:	af00      	add	r7, sp, #0
 80209b6:	60f8      	str	r0, [r7, #12]
 80209b8:	607a      	str	r2, [r7, #4]
 80209ba:	200b      	movs	r0, #11
 80209bc:	183b      	adds	r3, r7, r0
 80209be:	1c0a      	adds	r2, r1, #0
 80209c0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80209c2:	183b      	adds	r3, r7, r0
 80209c4:	781b      	ldrb	r3, [r3, #0]
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	d000      	beq.n	80209cc <USBD_LL_DataInStage+0x1c>
 80209ca:	e08e      	b.n	8020aea <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80209cc:	68fb      	ldr	r3, [r7, #12]
 80209ce:	3314      	adds	r3, #20
 80209d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80209d2:	68fa      	ldr	r2, [r7, #12]
 80209d4:	23a5      	movs	r3, #165	@ 0xa5
 80209d6:	009b      	lsls	r3, r3, #2
 80209d8:	58d3      	ldr	r3, [r2, r3]
 80209da:	2b02      	cmp	r3, #2
 80209dc:	d164      	bne.n	8020aa8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80209de:	697b      	ldr	r3, [r7, #20]
 80209e0:	68da      	ldr	r2, [r3, #12]
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	691b      	ldr	r3, [r3, #16]
 80209e6:	429a      	cmp	r2, r3
 80209e8:	d915      	bls.n	8020a16 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80209ea:	697b      	ldr	r3, [r7, #20]
 80209ec:	68da      	ldr	r2, [r3, #12]
 80209ee:	697b      	ldr	r3, [r7, #20]
 80209f0:	691b      	ldr	r3, [r3, #16]
 80209f2:	1ad2      	subs	r2, r2, r3
 80209f4:	697b      	ldr	r3, [r7, #20]
 80209f6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80209f8:	697b      	ldr	r3, [r7, #20]
 80209fa:	68db      	ldr	r3, [r3, #12]
 80209fc:	b29a      	uxth	r2, r3
 80209fe:	6879      	ldr	r1, [r7, #4]
 8020a00:	68fb      	ldr	r3, [r7, #12]
 8020a02:	0018      	movs	r0, r3
 8020a04:	f000 ffe9 	bl	80219da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020a08:	68f8      	ldr	r0, [r7, #12]
 8020a0a:	2300      	movs	r3, #0
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	2100      	movs	r1, #0
 8020a10:	f001 fd56 	bl	80224c0 <USBD_LL_PrepareReceive>
 8020a14:	e059      	b.n	8020aca <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8020a16:	697b      	ldr	r3, [r7, #20]
 8020a18:	689a      	ldr	r2, [r3, #8]
 8020a1a:	697b      	ldr	r3, [r7, #20]
 8020a1c:	691b      	ldr	r3, [r3, #16]
 8020a1e:	0019      	movs	r1, r3
 8020a20:	0010      	movs	r0, r2
 8020a22:	f7df fc45 	bl	80002b0 <__aeabi_uidivmod>
 8020a26:	1e0b      	subs	r3, r1, #0
 8020a28:	d11f      	bne.n	8020a6a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8020a2a:	697b      	ldr	r3, [r7, #20]
 8020a2c:	689a      	ldr	r2, [r3, #8]
 8020a2e:	697b      	ldr	r3, [r7, #20]
 8020a30:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8020a32:	429a      	cmp	r2, r3
 8020a34:	d319      	bcc.n	8020a6a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8020a36:	697b      	ldr	r3, [r7, #20]
 8020a38:	689a      	ldr	r2, [r3, #8]
 8020a3a:	68f9      	ldr	r1, [r7, #12]
 8020a3c:	23a6      	movs	r3, #166	@ 0xa6
 8020a3e:	009b      	lsls	r3, r3, #2
 8020a40:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8020a42:	429a      	cmp	r2, r3
 8020a44:	d211      	bcs.n	8020a6a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8020a46:	68fb      	ldr	r3, [r7, #12]
 8020a48:	2200      	movs	r2, #0
 8020a4a:	2100      	movs	r1, #0
 8020a4c:	0018      	movs	r0, r3
 8020a4e:	f000 ffc4 	bl	80219da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8020a52:	68fa      	ldr	r2, [r7, #12]
 8020a54:	23a6      	movs	r3, #166	@ 0xa6
 8020a56:	009b      	lsls	r3, r3, #2
 8020a58:	2100      	movs	r1, #0
 8020a5a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020a5c:	68f8      	ldr	r0, [r7, #12]
 8020a5e:	2300      	movs	r3, #0
 8020a60:	2200      	movs	r2, #0
 8020a62:	2100      	movs	r1, #0
 8020a64:	f001 fd2c 	bl	80224c0 <USBD_LL_PrepareReceive>
 8020a68:	e02f      	b.n	8020aca <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8020a6a:	68fa      	ldr	r2, [r7, #12]
 8020a6c:	23ad      	movs	r3, #173	@ 0xad
 8020a6e:	009b      	lsls	r3, r3, #2
 8020a70:	58d3      	ldr	r3, [r2, r3]
 8020a72:	68db      	ldr	r3, [r3, #12]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d00d      	beq.n	8020a94 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020a78:	68fa      	ldr	r2, [r7, #12]
 8020a7a:	23a7      	movs	r3, #167	@ 0xa7
 8020a7c:	009b      	lsls	r3, r3, #2
 8020a7e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8020a80:	2b03      	cmp	r3, #3
 8020a82:	d107      	bne.n	8020a94 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8020a84:	68fa      	ldr	r2, [r7, #12]
 8020a86:	23ad      	movs	r3, #173	@ 0xad
 8020a88:	009b      	lsls	r3, r3, #2
 8020a8a:	58d3      	ldr	r3, [r2, r3]
 8020a8c:	68db      	ldr	r3, [r3, #12]
 8020a8e:	68fa      	ldr	r2, [r7, #12]
 8020a90:	0010      	movs	r0, r2
 8020a92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8020a94:	68fb      	ldr	r3, [r7, #12]
 8020a96:	2180      	movs	r1, #128	@ 0x80
 8020a98:	0018      	movs	r0, r3
 8020a9a:	f001 fc28 	bl	80222ee <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8020a9e:	68fb      	ldr	r3, [r7, #12]
 8020aa0:	0018      	movs	r0, r3
 8020aa2:	f000 fff8 	bl	8021a96 <USBD_CtlReceiveStatus>
 8020aa6:	e010      	b.n	8020aca <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8020aa8:	68fa      	ldr	r2, [r7, #12]
 8020aaa:	23a5      	movs	r3, #165	@ 0xa5
 8020aac:	009b      	lsls	r3, r3, #2
 8020aae:	58d3      	ldr	r3, [r2, r3]
 8020ab0:	2b04      	cmp	r3, #4
 8020ab2:	d005      	beq.n	8020ac0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8020ab4:	68fa      	ldr	r2, [r7, #12]
 8020ab6:	23a5      	movs	r3, #165	@ 0xa5
 8020ab8:	009b      	lsls	r3, r3, #2
 8020aba:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d104      	bne.n	8020aca <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	2180      	movs	r1, #128	@ 0x80
 8020ac4:	0018      	movs	r0, r3
 8020ac6:	f001 fc12 	bl	80222ee <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8020aca:	68fa      	ldr	r2, [r7, #12]
 8020acc:	23a8      	movs	r3, #168	@ 0xa8
 8020ace:	009b      	lsls	r3, r3, #2
 8020ad0:	5cd3      	ldrb	r3, [r2, r3]
 8020ad2:	2b01      	cmp	r3, #1
 8020ad4:	d124      	bne.n	8020b20 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8020ad6:	68fb      	ldr	r3, [r7, #12]
 8020ad8:	0018      	movs	r0, r3
 8020ada:	f7ff fe43 	bl	8020764 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8020ade:	68fa      	ldr	r2, [r7, #12]
 8020ae0:	23a8      	movs	r3, #168	@ 0xa8
 8020ae2:	009b      	lsls	r3, r3, #2
 8020ae4:	2100      	movs	r1, #0
 8020ae6:	54d1      	strb	r1, [r2, r3]
 8020ae8:	e01a      	b.n	8020b20 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8020aea:	68fa      	ldr	r2, [r7, #12]
 8020aec:	23ad      	movs	r3, #173	@ 0xad
 8020aee:	009b      	lsls	r3, r3, #2
 8020af0:	58d3      	ldr	r3, [r2, r3]
 8020af2:	695b      	ldr	r3, [r3, #20]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d011      	beq.n	8020b1c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020af8:	68fa      	ldr	r2, [r7, #12]
 8020afa:	23a7      	movs	r3, #167	@ 0xa7
 8020afc:	009b      	lsls	r3, r3, #2
 8020afe:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8020b00:	2b03      	cmp	r3, #3
 8020b02:	d10b      	bne.n	8020b1c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8020b04:	68fa      	ldr	r2, [r7, #12]
 8020b06:	23ad      	movs	r3, #173	@ 0xad
 8020b08:	009b      	lsls	r3, r3, #2
 8020b0a:	58d3      	ldr	r3, [r2, r3]
 8020b0c:	695b      	ldr	r3, [r3, #20]
 8020b0e:	220b      	movs	r2, #11
 8020b10:	18ba      	adds	r2, r7, r2
 8020b12:	7811      	ldrb	r1, [r2, #0]
 8020b14:	68fa      	ldr	r2, [r7, #12]
 8020b16:	0010      	movs	r0, r2
 8020b18:	4798      	blx	r3
 8020b1a:	e001      	b.n	8020b20 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8020b1c:	2302      	movs	r3, #2
 8020b1e:	e000      	b.n	8020b22 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8020b20:	2300      	movs	r3, #0
}
 8020b22:	0018      	movs	r0, r3
 8020b24:	46bd      	mov	sp, r7
 8020b26:	b006      	add	sp, #24
 8020b28:	bd80      	pop	{r7, pc}

08020b2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8020b2a:	b580      	push	{r7, lr}
 8020b2c:	b082      	sub	sp, #8
 8020b2e:	af00      	add	r7, sp, #0
 8020b30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020b32:	6878      	ldr	r0, [r7, #4]
 8020b34:	2340      	movs	r3, #64	@ 0x40
 8020b36:	2200      	movs	r2, #0
 8020b38:	2100      	movs	r1, #0
 8020b3a:	f001 fb76 	bl	802222a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8020b3e:	687a      	ldr	r2, [r7, #4]
 8020b40:	23ac      	movs	r3, #172	@ 0xac
 8020b42:	005b      	lsls	r3, r3, #1
 8020b44:	2101      	movs	r1, #1
 8020b46:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8020b48:	687a      	ldr	r2, [r7, #4]
 8020b4a:	23b2      	movs	r3, #178	@ 0xb2
 8020b4c:	005b      	lsls	r3, r3, #1
 8020b4e:	2140      	movs	r1, #64	@ 0x40
 8020b50:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020b52:	6878      	ldr	r0, [r7, #4]
 8020b54:	2340      	movs	r3, #64	@ 0x40
 8020b56:	2200      	movs	r2, #0
 8020b58:	2180      	movs	r1, #128	@ 0x80
 8020b5a:	f001 fb66 	bl	802222a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	2201      	movs	r2, #1
 8020b62:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	2240      	movs	r2, #64	@ 0x40
 8020b68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020b6a:	687a      	ldr	r2, [r7, #4]
 8020b6c:	23a7      	movs	r3, #167	@ 0xa7
 8020b6e:	009b      	lsls	r3, r3, #2
 8020b70:	2101      	movs	r1, #1
 8020b72:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8020b74:	687a      	ldr	r2, [r7, #4]
 8020b76:	23a5      	movs	r3, #165	@ 0xa5
 8020b78:	009b      	lsls	r3, r3, #2
 8020b7a:	2100      	movs	r1, #0
 8020b7c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	2200      	movs	r2, #0
 8020b82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8020b84:	687a      	ldr	r2, [r7, #4]
 8020b86:	23a9      	movs	r3, #169	@ 0xa9
 8020b88:	009b      	lsls	r3, r3, #2
 8020b8a:	2100      	movs	r1, #0
 8020b8c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8020b8e:	687a      	ldr	r2, [r7, #4]
 8020b90:	23ae      	movs	r3, #174	@ 0xae
 8020b92:	009b      	lsls	r3, r3, #2
 8020b94:	58d3      	ldr	r3, [r2, r3]
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	d00a      	beq.n	8020bb0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8020b9a:	687a      	ldr	r2, [r7, #4]
 8020b9c:	23ad      	movs	r3, #173	@ 0xad
 8020b9e:	009b      	lsls	r3, r3, #2
 8020ba0:	58d3      	ldr	r3, [r2, r3]
 8020ba2:	685a      	ldr	r2, [r3, #4]
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	685b      	ldr	r3, [r3, #4]
 8020ba8:	b2d9      	uxtb	r1, r3
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	0018      	movs	r0, r3
 8020bae:	4790      	blx	r2
  }

  return USBD_OK;
 8020bb0:	2300      	movs	r3, #0
}
 8020bb2:	0018      	movs	r0, r3
 8020bb4:	46bd      	mov	sp, r7
 8020bb6:	b002      	add	sp, #8
 8020bb8:	bd80      	pop	{r7, pc}

08020bba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8020bba:	b580      	push	{r7, lr}
 8020bbc:	b082      	sub	sp, #8
 8020bbe:	af00      	add	r7, sp, #0
 8020bc0:	6078      	str	r0, [r7, #4]
 8020bc2:	000a      	movs	r2, r1
 8020bc4:	1cfb      	adds	r3, r7, #3
 8020bc6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8020bc8:	687b      	ldr	r3, [r7, #4]
 8020bca:	1cfa      	adds	r2, r7, #3
 8020bcc:	7812      	ldrb	r2, [r2, #0]
 8020bce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8020bd0:	2300      	movs	r3, #0
}
 8020bd2:	0018      	movs	r0, r3
 8020bd4:	46bd      	mov	sp, r7
 8020bd6:	b002      	add	sp, #8
 8020bd8:	bd80      	pop	{r7, pc}
	...

08020bdc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8020bdc:	b580      	push	{r7, lr}
 8020bde:	b082      	sub	sp, #8
 8020be0:	af00      	add	r7, sp, #0
 8020be2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8020be4:	687a      	ldr	r2, [r7, #4]
 8020be6:	23a7      	movs	r3, #167	@ 0xa7
 8020be8:	009b      	lsls	r3, r3, #2
 8020bea:	5cd1      	ldrb	r1, [r2, r3]
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	4a06      	ldr	r2, [pc, #24]	@ (8020c08 <USBD_LL_Suspend+0x2c>)
 8020bf0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8020bf2:	687a      	ldr	r2, [r7, #4]
 8020bf4:	23a7      	movs	r3, #167	@ 0xa7
 8020bf6:	009b      	lsls	r3, r3, #2
 8020bf8:	2104      	movs	r1, #4
 8020bfa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8020bfc:	2300      	movs	r3, #0
}
 8020bfe:	0018      	movs	r0, r3
 8020c00:	46bd      	mov	sp, r7
 8020c02:	b002      	add	sp, #8
 8020c04:	bd80      	pop	{r7, pc}
 8020c06:	46c0      	nop			@ (mov r8, r8)
 8020c08:	0000029d 	.word	0x0000029d

08020c0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8020c0c:	b580      	push	{r7, lr}
 8020c0e:	b082      	sub	sp, #8
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8020c14:	687a      	ldr	r2, [r7, #4]
 8020c16:	23a7      	movs	r3, #167	@ 0xa7
 8020c18:	009b      	lsls	r3, r3, #2
 8020c1a:	5cd3      	ldrb	r3, [r2, r3]
 8020c1c:	2b04      	cmp	r3, #4
 8020c1e:	d106      	bne.n	8020c2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8020c20:	687b      	ldr	r3, [r7, #4]
 8020c22:	4a05      	ldr	r2, [pc, #20]	@ (8020c38 <USBD_LL_Resume+0x2c>)
 8020c24:	5c99      	ldrb	r1, [r3, r2]
 8020c26:	687a      	ldr	r2, [r7, #4]
 8020c28:	23a7      	movs	r3, #167	@ 0xa7
 8020c2a:	009b      	lsls	r3, r3, #2
 8020c2c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8020c2e:	2300      	movs	r3, #0
}
 8020c30:	0018      	movs	r0, r3
 8020c32:	46bd      	mov	sp, r7
 8020c34:	b002      	add	sp, #8
 8020c36:	bd80      	pop	{r7, pc}
 8020c38:	0000029d 	.word	0x0000029d

08020c3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8020c3c:	b580      	push	{r7, lr}
 8020c3e:	b082      	sub	sp, #8
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020c44:	687a      	ldr	r2, [r7, #4]
 8020c46:	23a7      	movs	r3, #167	@ 0xa7
 8020c48:	009b      	lsls	r3, r3, #2
 8020c4a:	5cd3      	ldrb	r3, [r2, r3]
 8020c4c:	2b03      	cmp	r3, #3
 8020c4e:	d10e      	bne.n	8020c6e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8020c50:	687a      	ldr	r2, [r7, #4]
 8020c52:	23ad      	movs	r3, #173	@ 0xad
 8020c54:	009b      	lsls	r3, r3, #2
 8020c56:	58d3      	ldr	r3, [r2, r3]
 8020c58:	69db      	ldr	r3, [r3, #28]
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d007      	beq.n	8020c6e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8020c5e:	687a      	ldr	r2, [r7, #4]
 8020c60:	23ad      	movs	r3, #173	@ 0xad
 8020c62:	009b      	lsls	r3, r3, #2
 8020c64:	58d3      	ldr	r3, [r2, r3]
 8020c66:	69db      	ldr	r3, [r3, #28]
 8020c68:	687a      	ldr	r2, [r7, #4]
 8020c6a:	0010      	movs	r0, r2
 8020c6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8020c6e:	2300      	movs	r3, #0
}
 8020c70:	0018      	movs	r0, r3
 8020c72:	46bd      	mov	sp, r7
 8020c74:	b002      	add	sp, #8
 8020c76:	bd80      	pop	{r7, pc}

08020c78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8020c78:	b580      	push	{r7, lr}
 8020c7a:	b084      	sub	sp, #16
 8020c7c:	af00      	add	r7, sp, #0
 8020c7e:	6078      	str	r0, [r7, #4]
 8020c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8020c82:	230f      	movs	r3, #15
 8020c84:	18fb      	adds	r3, r7, r3
 8020c86:	2200      	movs	r2, #0
 8020c88:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020c8a:	683b      	ldr	r3, [r7, #0]
 8020c8c:	781b      	ldrb	r3, [r3, #0]
 8020c8e:	001a      	movs	r2, r3
 8020c90:	2360      	movs	r3, #96	@ 0x60
 8020c92:	4013      	ands	r3, r2
 8020c94:	2b40      	cmp	r3, #64	@ 0x40
 8020c96:	d004      	beq.n	8020ca2 <USBD_StdDevReq+0x2a>
 8020c98:	d84f      	bhi.n	8020d3a <USBD_StdDevReq+0xc2>
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	d00b      	beq.n	8020cb6 <USBD_StdDevReq+0x3e>
 8020c9e:	2b20      	cmp	r3, #32
 8020ca0:	d14b      	bne.n	8020d3a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8020ca2:	687a      	ldr	r2, [r7, #4]
 8020ca4:	23ad      	movs	r3, #173	@ 0xad
 8020ca6:	009b      	lsls	r3, r3, #2
 8020ca8:	58d3      	ldr	r3, [r2, r3]
 8020caa:	689b      	ldr	r3, [r3, #8]
 8020cac:	6839      	ldr	r1, [r7, #0]
 8020cae:	687a      	ldr	r2, [r7, #4]
 8020cb0:	0010      	movs	r0, r2
 8020cb2:	4798      	blx	r3
      break;
 8020cb4:	e048      	b.n	8020d48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8020cb6:	683b      	ldr	r3, [r7, #0]
 8020cb8:	785b      	ldrb	r3, [r3, #1]
 8020cba:	2b09      	cmp	r3, #9
 8020cbc:	d835      	bhi.n	8020d2a <USBD_StdDevReq+0xb2>
 8020cbe:	009a      	lsls	r2, r3, #2
 8020cc0:	4b25      	ldr	r3, [pc, #148]	@ (8020d58 <USBD_StdDevReq+0xe0>)
 8020cc2:	18d3      	adds	r3, r2, r3
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8020cc8:	683a      	ldr	r2, [r7, #0]
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	0011      	movs	r1, r2
 8020cce:	0018      	movs	r0, r3
 8020cd0:	f000 fa52 	bl	8021178 <USBD_GetDescriptor>
          break;
 8020cd4:	e030      	b.n	8020d38 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8020cd6:	683a      	ldr	r2, [r7, #0]
 8020cd8:	687b      	ldr	r3, [r7, #4]
 8020cda:	0011      	movs	r1, r2
 8020cdc:	0018      	movs	r0, r3
 8020cde:	f000 fbfd 	bl	80214dc <USBD_SetAddress>
          break;
 8020ce2:	e029      	b.n	8020d38 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8020ce4:	683a      	ldr	r2, [r7, #0]
 8020ce6:	687b      	ldr	r3, [r7, #4]
 8020ce8:	0011      	movs	r1, r2
 8020cea:	0018      	movs	r0, r3
 8020cec:	f000 fc4a 	bl	8021584 <USBD_SetConfig>
          break;
 8020cf0:	e022      	b.n	8020d38 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8020cf2:	683a      	ldr	r2, [r7, #0]
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	0011      	movs	r1, r2
 8020cf8:	0018      	movs	r0, r3
 8020cfa:	f000 fce7 	bl	80216cc <USBD_GetConfig>
          break;
 8020cfe:	e01b      	b.n	8020d38 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8020d00:	683a      	ldr	r2, [r7, #0]
 8020d02:	687b      	ldr	r3, [r7, #4]
 8020d04:	0011      	movs	r1, r2
 8020d06:	0018      	movs	r0, r3
 8020d08:	f000 fd1b 	bl	8021742 <USBD_GetStatus>
          break;
 8020d0c:	e014      	b.n	8020d38 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8020d0e:	683a      	ldr	r2, [r7, #0]
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	0011      	movs	r1, r2
 8020d14:	0018      	movs	r0, r3
 8020d16:	f000 fd4e 	bl	80217b6 <USBD_SetFeature>
          break;
 8020d1a:	e00d      	b.n	8020d38 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8020d1c:	683a      	ldr	r2, [r7, #0]
 8020d1e:	687b      	ldr	r3, [r7, #4]
 8020d20:	0011      	movs	r1, r2
 8020d22:	0018      	movs	r0, r3
 8020d24:	f000 fd5d 	bl	80217e2 <USBD_ClrFeature>
          break;
 8020d28:	e006      	b.n	8020d38 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8020d2a:	683a      	ldr	r2, [r7, #0]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	0011      	movs	r1, r2
 8020d30:	0018      	movs	r0, r3
 8020d32:	f000 fdb4 	bl	802189e <USBD_CtlError>
          break;
 8020d36:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020d38:	e006      	b.n	8020d48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8020d3a:	683a      	ldr	r2, [r7, #0]
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	0011      	movs	r1, r2
 8020d40:	0018      	movs	r0, r3
 8020d42:	f000 fdac 	bl	802189e <USBD_CtlError>
      break;
 8020d46:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020d48:	230f      	movs	r3, #15
 8020d4a:	18fb      	adds	r3, r7, r3
 8020d4c:	781b      	ldrb	r3, [r3, #0]
}
 8020d4e:	0018      	movs	r0, r3
 8020d50:	46bd      	mov	sp, r7
 8020d52:	b004      	add	sp, #16
 8020d54:	bd80      	pop	{r7, pc}
 8020d56:	46c0      	nop			@ (mov r8, r8)
 8020d58:	0802d614 	.word	0x0802d614

08020d5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8020d5c:	b5b0      	push	{r4, r5, r7, lr}
 8020d5e:	b084      	sub	sp, #16
 8020d60:	af00      	add	r7, sp, #0
 8020d62:	6078      	str	r0, [r7, #4]
 8020d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8020d66:	230f      	movs	r3, #15
 8020d68:	18fb      	adds	r3, r7, r3
 8020d6a:	2200      	movs	r2, #0
 8020d6c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020d6e:	683b      	ldr	r3, [r7, #0]
 8020d70:	781b      	ldrb	r3, [r3, #0]
 8020d72:	001a      	movs	r2, r3
 8020d74:	2360      	movs	r3, #96	@ 0x60
 8020d76:	4013      	ands	r3, r2
 8020d78:	2b40      	cmp	r3, #64	@ 0x40
 8020d7a:	d004      	beq.n	8020d86 <USBD_StdItfReq+0x2a>
 8020d7c:	d839      	bhi.n	8020df2 <USBD_StdItfReq+0x96>
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d001      	beq.n	8020d86 <USBD_StdItfReq+0x2a>
 8020d82:	2b20      	cmp	r3, #32
 8020d84:	d135      	bne.n	8020df2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8020d86:	687a      	ldr	r2, [r7, #4]
 8020d88:	23a7      	movs	r3, #167	@ 0xa7
 8020d8a:	009b      	lsls	r3, r3, #2
 8020d8c:	5cd3      	ldrb	r3, [r2, r3]
 8020d8e:	3b01      	subs	r3, #1
 8020d90:	2b02      	cmp	r3, #2
 8020d92:	d825      	bhi.n	8020de0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8020d94:	683b      	ldr	r3, [r7, #0]
 8020d96:	889b      	ldrh	r3, [r3, #4]
 8020d98:	b2db      	uxtb	r3, r3
 8020d9a:	2b01      	cmp	r3, #1
 8020d9c:	d819      	bhi.n	8020dd2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020d9e:	687a      	ldr	r2, [r7, #4]
 8020da0:	23ad      	movs	r3, #173	@ 0xad
 8020da2:	009b      	lsls	r3, r3, #2
 8020da4:	58d3      	ldr	r3, [r2, r3]
 8020da6:	689b      	ldr	r3, [r3, #8]
 8020da8:	250f      	movs	r5, #15
 8020daa:	197c      	adds	r4, r7, r5
 8020dac:	6839      	ldr	r1, [r7, #0]
 8020dae:	687a      	ldr	r2, [r7, #4]
 8020db0:	0010      	movs	r0, r2
 8020db2:	4798      	blx	r3
 8020db4:	0003      	movs	r3, r0
 8020db6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8020db8:	683b      	ldr	r3, [r7, #0]
 8020dba:	88db      	ldrh	r3, [r3, #6]
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d116      	bne.n	8020dee <USBD_StdItfReq+0x92>
 8020dc0:	197b      	adds	r3, r7, r5
 8020dc2:	781b      	ldrb	r3, [r3, #0]
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	d112      	bne.n	8020dee <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	0018      	movs	r0, r3
 8020dcc:	f000 fe4f 	bl	8021a6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8020dd0:	e00d      	b.n	8020dee <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8020dd2:	683a      	ldr	r2, [r7, #0]
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	0011      	movs	r1, r2
 8020dd8:	0018      	movs	r0, r3
 8020dda:	f000 fd60 	bl	802189e <USBD_CtlError>
          break;
 8020dde:	e006      	b.n	8020dee <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8020de0:	683a      	ldr	r2, [r7, #0]
 8020de2:	687b      	ldr	r3, [r7, #4]
 8020de4:	0011      	movs	r1, r2
 8020de6:	0018      	movs	r0, r3
 8020de8:	f000 fd59 	bl	802189e <USBD_CtlError>
          break;
 8020dec:	e000      	b.n	8020df0 <USBD_StdItfReq+0x94>
          break;
 8020dee:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8020df0:	e006      	b.n	8020e00 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8020df2:	683a      	ldr	r2, [r7, #0]
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	0011      	movs	r1, r2
 8020df8:	0018      	movs	r0, r3
 8020dfa:	f000 fd50 	bl	802189e <USBD_CtlError>
      break;
 8020dfe:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020e00:	2300      	movs	r3, #0
}
 8020e02:	0018      	movs	r0, r3
 8020e04:	46bd      	mov	sp, r7
 8020e06:	b004      	add	sp, #16
 8020e08:	bdb0      	pop	{r4, r5, r7, pc}

08020e0a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8020e0a:	b5b0      	push	{r4, r5, r7, lr}
 8020e0c:	b084      	sub	sp, #16
 8020e0e:	af00      	add	r7, sp, #0
 8020e10:	6078      	str	r0, [r7, #4]
 8020e12:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8020e14:	230f      	movs	r3, #15
 8020e16:	18fb      	adds	r3, r7, r3
 8020e18:	2200      	movs	r2, #0
 8020e1a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8020e1c:	683b      	ldr	r3, [r7, #0]
 8020e1e:	889a      	ldrh	r2, [r3, #4]
 8020e20:	230e      	movs	r3, #14
 8020e22:	18fb      	adds	r3, r7, r3
 8020e24:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020e26:	683b      	ldr	r3, [r7, #0]
 8020e28:	781b      	ldrb	r3, [r3, #0]
 8020e2a:	001a      	movs	r2, r3
 8020e2c:	2360      	movs	r3, #96	@ 0x60
 8020e2e:	4013      	ands	r3, r2
 8020e30:	2b40      	cmp	r3, #64	@ 0x40
 8020e32:	d006      	beq.n	8020e42 <USBD_StdEPReq+0x38>
 8020e34:	d900      	bls.n	8020e38 <USBD_StdEPReq+0x2e>
 8020e36:	e190      	b.n	802115a <USBD_StdEPReq+0x350>
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	d00c      	beq.n	8020e56 <USBD_StdEPReq+0x4c>
 8020e3c:	2b20      	cmp	r3, #32
 8020e3e:	d000      	beq.n	8020e42 <USBD_StdEPReq+0x38>
 8020e40:	e18b      	b.n	802115a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8020e42:	687a      	ldr	r2, [r7, #4]
 8020e44:	23ad      	movs	r3, #173	@ 0xad
 8020e46:	009b      	lsls	r3, r3, #2
 8020e48:	58d3      	ldr	r3, [r2, r3]
 8020e4a:	689b      	ldr	r3, [r3, #8]
 8020e4c:	6839      	ldr	r1, [r7, #0]
 8020e4e:	687a      	ldr	r2, [r7, #4]
 8020e50:	0010      	movs	r0, r2
 8020e52:	4798      	blx	r3
      break;
 8020e54:	e188      	b.n	8021168 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8020e56:	683b      	ldr	r3, [r7, #0]
 8020e58:	781b      	ldrb	r3, [r3, #0]
 8020e5a:	001a      	movs	r2, r3
 8020e5c:	2360      	movs	r3, #96	@ 0x60
 8020e5e:	4013      	ands	r3, r2
 8020e60:	2b20      	cmp	r3, #32
 8020e62:	d10f      	bne.n	8020e84 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8020e64:	687a      	ldr	r2, [r7, #4]
 8020e66:	23ad      	movs	r3, #173	@ 0xad
 8020e68:	009b      	lsls	r3, r3, #2
 8020e6a:	58d3      	ldr	r3, [r2, r3]
 8020e6c:	689b      	ldr	r3, [r3, #8]
 8020e6e:	250f      	movs	r5, #15
 8020e70:	197c      	adds	r4, r7, r5
 8020e72:	6839      	ldr	r1, [r7, #0]
 8020e74:	687a      	ldr	r2, [r7, #4]
 8020e76:	0010      	movs	r0, r2
 8020e78:	4798      	blx	r3
 8020e7a:	0003      	movs	r3, r0
 8020e7c:	7023      	strb	r3, [r4, #0]

        return ret;
 8020e7e:	197b      	adds	r3, r7, r5
 8020e80:	781b      	ldrb	r3, [r3, #0]
 8020e82:	e174      	b.n	802116e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8020e84:	683b      	ldr	r3, [r7, #0]
 8020e86:	785b      	ldrb	r3, [r3, #1]
 8020e88:	2b03      	cmp	r3, #3
 8020e8a:	d007      	beq.n	8020e9c <USBD_StdEPReq+0x92>
 8020e8c:	dd00      	ble.n	8020e90 <USBD_StdEPReq+0x86>
 8020e8e:	e15c      	b.n	802114a <USBD_StdEPReq+0x340>
 8020e90:	2b00      	cmp	r3, #0
 8020e92:	d100      	bne.n	8020e96 <USBD_StdEPReq+0x8c>
 8020e94:	e092      	b.n	8020fbc <USBD_StdEPReq+0x1b2>
 8020e96:	2b01      	cmp	r3, #1
 8020e98:	d04b      	beq.n	8020f32 <USBD_StdEPReq+0x128>
 8020e9a:	e156      	b.n	802114a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8020e9c:	687a      	ldr	r2, [r7, #4]
 8020e9e:	23a7      	movs	r3, #167	@ 0xa7
 8020ea0:	009b      	lsls	r3, r3, #2
 8020ea2:	5cd3      	ldrb	r3, [r2, r3]
 8020ea4:	2b02      	cmp	r3, #2
 8020ea6:	d002      	beq.n	8020eae <USBD_StdEPReq+0xa4>
 8020ea8:	2b03      	cmp	r3, #3
 8020eaa:	d01d      	beq.n	8020ee8 <USBD_StdEPReq+0xde>
 8020eac:	e039      	b.n	8020f22 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020eae:	220e      	movs	r2, #14
 8020eb0:	18bb      	adds	r3, r7, r2
 8020eb2:	781b      	ldrb	r3, [r3, #0]
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d010      	beq.n	8020eda <USBD_StdEPReq+0xd0>
 8020eb8:	18bb      	adds	r3, r7, r2
 8020eba:	781b      	ldrb	r3, [r3, #0]
 8020ebc:	2b80      	cmp	r3, #128	@ 0x80
 8020ebe:	d00c      	beq.n	8020eda <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8020ec0:	18bb      	adds	r3, r7, r2
 8020ec2:	781a      	ldrb	r2, [r3, #0]
 8020ec4:	687b      	ldr	r3, [r7, #4]
 8020ec6:	0011      	movs	r1, r2
 8020ec8:	0018      	movs	r0, r3
 8020eca:	f001 fa10 	bl	80222ee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	2180      	movs	r1, #128	@ 0x80
 8020ed2:	0018      	movs	r0, r3
 8020ed4:	f001 fa0b 	bl	80222ee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8020ed8:	e02a      	b.n	8020f30 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8020eda:	683a      	ldr	r2, [r7, #0]
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	0011      	movs	r1, r2
 8020ee0:	0018      	movs	r0, r3
 8020ee2:	f000 fcdc 	bl	802189e <USBD_CtlError>
              break;
 8020ee6:	e023      	b.n	8020f30 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8020ee8:	683b      	ldr	r3, [r7, #0]
 8020eea:	885b      	ldrh	r3, [r3, #2]
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d113      	bne.n	8020f18 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8020ef0:	220e      	movs	r2, #14
 8020ef2:	18bb      	adds	r3, r7, r2
 8020ef4:	781b      	ldrb	r3, [r3, #0]
 8020ef6:	2b00      	cmp	r3, #0
 8020ef8:	d00e      	beq.n	8020f18 <USBD_StdEPReq+0x10e>
 8020efa:	18bb      	adds	r3, r7, r2
 8020efc:	781b      	ldrb	r3, [r3, #0]
 8020efe:	2b80      	cmp	r3, #128	@ 0x80
 8020f00:	d00a      	beq.n	8020f18 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8020f02:	683b      	ldr	r3, [r7, #0]
 8020f04:	88db      	ldrh	r3, [r3, #6]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d106      	bne.n	8020f18 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8020f0a:	18bb      	adds	r3, r7, r2
 8020f0c:	781a      	ldrb	r2, [r3, #0]
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	0011      	movs	r1, r2
 8020f12:	0018      	movs	r0, r3
 8020f14:	f001 f9eb 	bl	80222ee <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	0018      	movs	r0, r3
 8020f1c:	f000 fda7 	bl	8021a6e <USBD_CtlSendStatus>

              break;
 8020f20:	e006      	b.n	8020f30 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8020f22:	683a      	ldr	r2, [r7, #0]
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	0011      	movs	r1, r2
 8020f28:	0018      	movs	r0, r3
 8020f2a:	f000 fcb8 	bl	802189e <USBD_CtlError>
              break;
 8020f2e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020f30:	e112      	b.n	8021158 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8020f32:	687a      	ldr	r2, [r7, #4]
 8020f34:	23a7      	movs	r3, #167	@ 0xa7
 8020f36:	009b      	lsls	r3, r3, #2
 8020f38:	5cd3      	ldrb	r3, [r2, r3]
 8020f3a:	2b02      	cmp	r3, #2
 8020f3c:	d002      	beq.n	8020f44 <USBD_StdEPReq+0x13a>
 8020f3e:	2b03      	cmp	r3, #3
 8020f40:	d01d      	beq.n	8020f7e <USBD_StdEPReq+0x174>
 8020f42:	e032      	b.n	8020faa <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020f44:	220e      	movs	r2, #14
 8020f46:	18bb      	adds	r3, r7, r2
 8020f48:	781b      	ldrb	r3, [r3, #0]
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	d010      	beq.n	8020f70 <USBD_StdEPReq+0x166>
 8020f4e:	18bb      	adds	r3, r7, r2
 8020f50:	781b      	ldrb	r3, [r3, #0]
 8020f52:	2b80      	cmp	r3, #128	@ 0x80
 8020f54:	d00c      	beq.n	8020f70 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8020f56:	18bb      	adds	r3, r7, r2
 8020f58:	781a      	ldrb	r2, [r3, #0]
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	0011      	movs	r1, r2
 8020f5e:	0018      	movs	r0, r3
 8020f60:	f001 f9c5 	bl	80222ee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	2180      	movs	r1, #128	@ 0x80
 8020f68:	0018      	movs	r0, r3
 8020f6a:	f001 f9c0 	bl	80222ee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8020f6e:	e024      	b.n	8020fba <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8020f70:	683a      	ldr	r2, [r7, #0]
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	0011      	movs	r1, r2
 8020f76:	0018      	movs	r0, r3
 8020f78:	f000 fc91 	bl	802189e <USBD_CtlError>
              break;
 8020f7c:	e01d      	b.n	8020fba <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8020f7e:	683b      	ldr	r3, [r7, #0]
 8020f80:	885b      	ldrh	r3, [r3, #2]
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d118      	bne.n	8020fb8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8020f86:	210e      	movs	r1, #14
 8020f88:	187b      	adds	r3, r7, r1
 8020f8a:	781b      	ldrb	r3, [r3, #0]
 8020f8c:	227f      	movs	r2, #127	@ 0x7f
 8020f8e:	4013      	ands	r3, r2
 8020f90:	d006      	beq.n	8020fa0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8020f92:	187b      	adds	r3, r7, r1
 8020f94:	781a      	ldrb	r2, [r3, #0]
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	0011      	movs	r1, r2
 8020f9a:	0018      	movs	r0, r3
 8020f9c:	f001 f9d2 	bl	8022344 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	0018      	movs	r0, r3
 8020fa4:	f000 fd63 	bl	8021a6e <USBD_CtlSendStatus>
              }
              break;
 8020fa8:	e006      	b.n	8020fb8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8020faa:	683a      	ldr	r2, [r7, #0]
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	0011      	movs	r1, r2
 8020fb0:	0018      	movs	r0, r3
 8020fb2:	f000 fc74 	bl	802189e <USBD_CtlError>
              break;
 8020fb6:	e000      	b.n	8020fba <USBD_StdEPReq+0x1b0>
              break;
 8020fb8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8020fba:	e0cd      	b.n	8021158 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8020fbc:	687a      	ldr	r2, [r7, #4]
 8020fbe:	23a7      	movs	r3, #167	@ 0xa7
 8020fc0:	009b      	lsls	r3, r3, #2
 8020fc2:	5cd3      	ldrb	r3, [r2, r3]
 8020fc4:	2b02      	cmp	r3, #2
 8020fc6:	d002      	beq.n	8020fce <USBD_StdEPReq+0x1c4>
 8020fc8:	2b03      	cmp	r3, #3
 8020fca:	d03c      	beq.n	8021046 <USBD_StdEPReq+0x23c>
 8020fcc:	e0b5      	b.n	802113a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020fce:	220e      	movs	r2, #14
 8020fd0:	18bb      	adds	r3, r7, r2
 8020fd2:	781b      	ldrb	r3, [r3, #0]
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d00a      	beq.n	8020fee <USBD_StdEPReq+0x1e4>
 8020fd8:	18bb      	adds	r3, r7, r2
 8020fda:	781b      	ldrb	r3, [r3, #0]
 8020fdc:	2b80      	cmp	r3, #128	@ 0x80
 8020fde:	d006      	beq.n	8020fee <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8020fe0:	683a      	ldr	r2, [r7, #0]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	0011      	movs	r1, r2
 8020fe6:	0018      	movs	r0, r3
 8020fe8:	f000 fc59 	bl	802189e <USBD_CtlError>
                break;
 8020fec:	e0ac      	b.n	8021148 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020fee:	220e      	movs	r2, #14
 8020ff0:	18bb      	adds	r3, r7, r2
 8020ff2:	781b      	ldrb	r3, [r3, #0]
 8020ff4:	b25b      	sxtb	r3, r3
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	da0c      	bge.n	8021014 <USBD_StdEPReq+0x20a>
 8020ffa:	18bb      	adds	r3, r7, r2
 8020ffc:	781b      	ldrb	r3, [r3, #0]
 8020ffe:	227f      	movs	r2, #127	@ 0x7f
 8021000:	401a      	ands	r2, r3
 8021002:	0013      	movs	r3, r2
 8021004:	009b      	lsls	r3, r3, #2
 8021006:	189b      	adds	r3, r3, r2
 8021008:	009b      	lsls	r3, r3, #2
 802100a:	3310      	adds	r3, #16
 802100c:	687a      	ldr	r2, [r7, #4]
 802100e:	18d3      	adds	r3, r2, r3
 8021010:	3304      	adds	r3, #4
 8021012:	e00d      	b.n	8021030 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021014:	230e      	movs	r3, #14
 8021016:	18fb      	adds	r3, r7, r3
 8021018:	781b      	ldrb	r3, [r3, #0]
 802101a:	227f      	movs	r2, #127	@ 0x7f
 802101c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802101e:	0013      	movs	r3, r2
 8021020:	009b      	lsls	r3, r3, #2
 8021022:	189b      	adds	r3, r3, r2
 8021024:	009b      	lsls	r3, r3, #2
 8021026:	3351      	adds	r3, #81	@ 0x51
 8021028:	33ff      	adds	r3, #255	@ 0xff
 802102a:	687a      	ldr	r2, [r7, #4]
 802102c:	18d3      	adds	r3, r2, r3
 802102e:	3304      	adds	r3, #4
 8021030:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021032:	68bb      	ldr	r3, [r7, #8]
 8021034:	2200      	movs	r2, #0
 8021036:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8021038:	68b9      	ldr	r1, [r7, #8]
 802103a:	687b      	ldr	r3, [r7, #4]
 802103c:	2202      	movs	r2, #2
 802103e:	0018      	movs	r0, r3
 8021040:	f000 fcab 	bl	802199a <USBD_CtlSendData>
              break;
 8021044:	e080      	b.n	8021148 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021046:	220e      	movs	r2, #14
 8021048:	18bb      	adds	r3, r7, r2
 802104a:	781b      	ldrb	r3, [r3, #0]
 802104c:	b25b      	sxtb	r3, r3
 802104e:	2b00      	cmp	r3, #0
 8021050:	da14      	bge.n	802107c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021052:	18bb      	adds	r3, r7, r2
 8021054:	781b      	ldrb	r3, [r3, #0]
 8021056:	220f      	movs	r2, #15
 8021058:	401a      	ands	r2, r3
 802105a:	6879      	ldr	r1, [r7, #4]
 802105c:	0013      	movs	r3, r2
 802105e:	009b      	lsls	r3, r3, #2
 8021060:	189b      	adds	r3, r3, r2
 8021062:	009b      	lsls	r3, r3, #2
 8021064:	18cb      	adds	r3, r1, r3
 8021066:	3318      	adds	r3, #24
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	2b00      	cmp	r3, #0
 802106c:	d11e      	bne.n	80210ac <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802106e:	683a      	ldr	r2, [r7, #0]
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	0011      	movs	r1, r2
 8021074:	0018      	movs	r0, r3
 8021076:	f000 fc12 	bl	802189e <USBD_CtlError>
                  break;
 802107a:	e065      	b.n	8021148 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802107c:	230e      	movs	r3, #14
 802107e:	18fb      	adds	r3, r7, r3
 8021080:	781b      	ldrb	r3, [r3, #0]
 8021082:	220f      	movs	r2, #15
 8021084:	401a      	ands	r2, r3
 8021086:	6878      	ldr	r0, [r7, #4]
 8021088:	23ac      	movs	r3, #172	@ 0xac
 802108a:	0059      	lsls	r1, r3, #1
 802108c:	0013      	movs	r3, r2
 802108e:	009b      	lsls	r3, r3, #2
 8021090:	189b      	adds	r3, r3, r2
 8021092:	009b      	lsls	r3, r3, #2
 8021094:	18c3      	adds	r3, r0, r3
 8021096:	185b      	adds	r3, r3, r1
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	2b00      	cmp	r3, #0
 802109c:	d106      	bne.n	80210ac <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802109e:	683a      	ldr	r2, [r7, #0]
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	0011      	movs	r1, r2
 80210a4:	0018      	movs	r0, r3
 80210a6:	f000 fbfa 	bl	802189e <USBD_CtlError>
                  break;
 80210aa:	e04d      	b.n	8021148 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80210ac:	220e      	movs	r2, #14
 80210ae:	18bb      	adds	r3, r7, r2
 80210b0:	781b      	ldrb	r3, [r3, #0]
 80210b2:	b25b      	sxtb	r3, r3
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	da0c      	bge.n	80210d2 <USBD_StdEPReq+0x2c8>
 80210b8:	18bb      	adds	r3, r7, r2
 80210ba:	781b      	ldrb	r3, [r3, #0]
 80210bc:	227f      	movs	r2, #127	@ 0x7f
 80210be:	401a      	ands	r2, r3
 80210c0:	0013      	movs	r3, r2
 80210c2:	009b      	lsls	r3, r3, #2
 80210c4:	189b      	adds	r3, r3, r2
 80210c6:	009b      	lsls	r3, r3, #2
 80210c8:	3310      	adds	r3, #16
 80210ca:	687a      	ldr	r2, [r7, #4]
 80210cc:	18d3      	adds	r3, r2, r3
 80210ce:	3304      	adds	r3, #4
 80210d0:	e00d      	b.n	80210ee <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80210d2:	230e      	movs	r3, #14
 80210d4:	18fb      	adds	r3, r7, r3
 80210d6:	781b      	ldrb	r3, [r3, #0]
 80210d8:	227f      	movs	r2, #127	@ 0x7f
 80210da:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80210dc:	0013      	movs	r3, r2
 80210de:	009b      	lsls	r3, r3, #2
 80210e0:	189b      	adds	r3, r3, r2
 80210e2:	009b      	lsls	r3, r3, #2
 80210e4:	3351      	adds	r3, #81	@ 0x51
 80210e6:	33ff      	adds	r3, #255	@ 0xff
 80210e8:	687a      	ldr	r2, [r7, #4]
 80210ea:	18d3      	adds	r3, r2, r3
 80210ec:	3304      	adds	r3, #4
 80210ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80210f0:	220e      	movs	r2, #14
 80210f2:	18bb      	adds	r3, r7, r2
 80210f4:	781b      	ldrb	r3, [r3, #0]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	d003      	beq.n	8021102 <USBD_StdEPReq+0x2f8>
 80210fa:	18bb      	adds	r3, r7, r2
 80210fc:	781b      	ldrb	r3, [r3, #0]
 80210fe:	2b80      	cmp	r3, #128	@ 0x80
 8021100:	d103      	bne.n	802110a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8021102:	68bb      	ldr	r3, [r7, #8]
 8021104:	2200      	movs	r2, #0
 8021106:	601a      	str	r2, [r3, #0]
 8021108:	e010      	b.n	802112c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 802110a:	230e      	movs	r3, #14
 802110c:	18fb      	adds	r3, r7, r3
 802110e:	781a      	ldrb	r2, [r3, #0]
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	0011      	movs	r1, r2
 8021114:	0018      	movs	r0, r3
 8021116:	f001 f940 	bl	802239a <USBD_LL_IsStallEP>
 802111a:	1e03      	subs	r3, r0, #0
 802111c:	d003      	beq.n	8021126 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 802111e:	68bb      	ldr	r3, [r7, #8]
 8021120:	2201      	movs	r2, #1
 8021122:	601a      	str	r2, [r3, #0]
 8021124:	e002      	b.n	802112c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8021126:	68bb      	ldr	r3, [r7, #8]
 8021128:	2200      	movs	r2, #0
 802112a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 802112c:	68b9      	ldr	r1, [r7, #8]
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	2202      	movs	r2, #2
 8021132:	0018      	movs	r0, r3
 8021134:	f000 fc31 	bl	802199a <USBD_CtlSendData>
              break;
 8021138:	e006      	b.n	8021148 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 802113a:	683a      	ldr	r2, [r7, #0]
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	0011      	movs	r1, r2
 8021140:	0018      	movs	r0, r3
 8021142:	f000 fbac 	bl	802189e <USBD_CtlError>
              break;
 8021146:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021148:	e006      	b.n	8021158 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 802114a:	683a      	ldr	r2, [r7, #0]
 802114c:	687b      	ldr	r3, [r7, #4]
 802114e:	0011      	movs	r1, r2
 8021150:	0018      	movs	r0, r3
 8021152:	f000 fba4 	bl	802189e <USBD_CtlError>
          break;
 8021156:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021158:	e006      	b.n	8021168 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 802115a:	683a      	ldr	r2, [r7, #0]
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	0011      	movs	r1, r2
 8021160:	0018      	movs	r0, r3
 8021162:	f000 fb9c 	bl	802189e <USBD_CtlError>
      break;
 8021166:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021168:	230f      	movs	r3, #15
 802116a:	18fb      	adds	r3, r7, r3
 802116c:	781b      	ldrb	r3, [r3, #0]
}
 802116e:	0018      	movs	r0, r3
 8021170:	46bd      	mov	sp, r7
 8021172:	b004      	add	sp, #16
 8021174:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021178 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b084      	sub	sp, #16
 802117c:	af00      	add	r7, sp, #0
 802117e:	6078      	str	r0, [r7, #4]
 8021180:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8021182:	2308      	movs	r3, #8
 8021184:	18fb      	adds	r3, r7, r3
 8021186:	2200      	movs	r2, #0
 8021188:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 802118a:	2300      	movs	r3, #0
 802118c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802118e:	230b      	movs	r3, #11
 8021190:	18fb      	adds	r3, r7, r3
 8021192:	2200      	movs	r2, #0
 8021194:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8021196:	683b      	ldr	r3, [r7, #0]
 8021198:	885b      	ldrh	r3, [r3, #2]
 802119a:	0a1b      	lsrs	r3, r3, #8
 802119c:	b29b      	uxth	r3, r3
 802119e:	2b07      	cmp	r3, #7
 80211a0:	d900      	bls.n	80211a4 <USBD_GetDescriptor+0x2c>
 80211a2:	e159      	b.n	8021458 <USBD_GetDescriptor+0x2e0>
 80211a4:	009a      	lsls	r2, r3, #2
 80211a6:	4bcb      	ldr	r3, [pc, #812]	@ (80214d4 <USBD_GetDescriptor+0x35c>)
 80211a8:	18d3      	adds	r3, r2, r3
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80211ae:	687a      	ldr	r2, [r7, #4]
 80211b0:	23ac      	movs	r3, #172	@ 0xac
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	58d3      	ldr	r3, [r2, r3]
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	687a      	ldr	r2, [r7, #4]
 80211ba:	7c12      	ldrb	r2, [r2, #16]
 80211bc:	2108      	movs	r1, #8
 80211be:	1879      	adds	r1, r7, r1
 80211c0:	0010      	movs	r0, r2
 80211c2:	4798      	blx	r3
 80211c4:	0003      	movs	r3, r0
 80211c6:	60fb      	str	r3, [r7, #12]
      break;
 80211c8:	e153      	b.n	8021472 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	7c1b      	ldrb	r3, [r3, #16]
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d10f      	bne.n	80211f2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80211d2:	687a      	ldr	r2, [r7, #4]
 80211d4:	23ad      	movs	r3, #173	@ 0xad
 80211d6:	009b      	lsls	r3, r3, #2
 80211d8:	58d3      	ldr	r3, [r2, r3]
 80211da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80211dc:	2208      	movs	r2, #8
 80211de:	18ba      	adds	r2, r7, r2
 80211e0:	0010      	movs	r0, r2
 80211e2:	4798      	blx	r3
 80211e4:	0003      	movs	r3, r0
 80211e6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	3301      	adds	r3, #1
 80211ec:	2202      	movs	r2, #2
 80211ee:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80211f0:	e13f      	b.n	8021472 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80211f2:	687a      	ldr	r2, [r7, #4]
 80211f4:	23ad      	movs	r3, #173	@ 0xad
 80211f6:	009b      	lsls	r3, r3, #2
 80211f8:	58d3      	ldr	r3, [r2, r3]
 80211fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80211fc:	2208      	movs	r2, #8
 80211fe:	18ba      	adds	r2, r7, r2
 8021200:	0010      	movs	r0, r2
 8021202:	4798      	blx	r3
 8021204:	0003      	movs	r3, r0
 8021206:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021208:	68fb      	ldr	r3, [r7, #12]
 802120a:	3301      	adds	r3, #1
 802120c:	2202      	movs	r2, #2
 802120e:	701a      	strb	r2, [r3, #0]
      break;
 8021210:	e12f      	b.n	8021472 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021212:	683b      	ldr	r3, [r7, #0]
 8021214:	885b      	ldrh	r3, [r3, #2]
 8021216:	b2db      	uxtb	r3, r3
 8021218:	2b05      	cmp	r3, #5
 802121a:	d900      	bls.n	802121e <USBD_GetDescriptor+0xa6>
 802121c:	e0d0      	b.n	80213c0 <USBD_GetDescriptor+0x248>
 802121e:	009a      	lsls	r2, r3, #2
 8021220:	4bad      	ldr	r3, [pc, #692]	@ (80214d8 <USBD_GetDescriptor+0x360>)
 8021222:	18d3      	adds	r3, r2, r3
 8021224:	681b      	ldr	r3, [r3, #0]
 8021226:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021228:	687a      	ldr	r2, [r7, #4]
 802122a:	23ac      	movs	r3, #172	@ 0xac
 802122c:	009b      	lsls	r3, r3, #2
 802122e:	58d3      	ldr	r3, [r2, r3]
 8021230:	685b      	ldr	r3, [r3, #4]
 8021232:	2b00      	cmp	r3, #0
 8021234:	d00d      	beq.n	8021252 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021236:	687a      	ldr	r2, [r7, #4]
 8021238:	23ac      	movs	r3, #172	@ 0xac
 802123a:	009b      	lsls	r3, r3, #2
 802123c:	58d3      	ldr	r3, [r2, r3]
 802123e:	685b      	ldr	r3, [r3, #4]
 8021240:	687a      	ldr	r2, [r7, #4]
 8021242:	7c12      	ldrb	r2, [r2, #16]
 8021244:	2108      	movs	r1, #8
 8021246:	1879      	adds	r1, r7, r1
 8021248:	0010      	movs	r0, r2
 802124a:	4798      	blx	r3
 802124c:	0003      	movs	r3, r0
 802124e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021250:	e0c3      	b.n	80213da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021252:	683a      	ldr	r2, [r7, #0]
 8021254:	687b      	ldr	r3, [r7, #4]
 8021256:	0011      	movs	r1, r2
 8021258:	0018      	movs	r0, r3
 802125a:	f000 fb20 	bl	802189e <USBD_CtlError>
            err++;
 802125e:	210b      	movs	r1, #11
 8021260:	187b      	adds	r3, r7, r1
 8021262:	781a      	ldrb	r2, [r3, #0]
 8021264:	187b      	adds	r3, r7, r1
 8021266:	3201      	adds	r2, #1
 8021268:	701a      	strb	r2, [r3, #0]
          break;
 802126a:	e0b6      	b.n	80213da <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802126c:	687a      	ldr	r2, [r7, #4]
 802126e:	23ac      	movs	r3, #172	@ 0xac
 8021270:	009b      	lsls	r3, r3, #2
 8021272:	58d3      	ldr	r3, [r2, r3]
 8021274:	689b      	ldr	r3, [r3, #8]
 8021276:	2b00      	cmp	r3, #0
 8021278:	d00d      	beq.n	8021296 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802127a:	687a      	ldr	r2, [r7, #4]
 802127c:	23ac      	movs	r3, #172	@ 0xac
 802127e:	009b      	lsls	r3, r3, #2
 8021280:	58d3      	ldr	r3, [r2, r3]
 8021282:	689b      	ldr	r3, [r3, #8]
 8021284:	687a      	ldr	r2, [r7, #4]
 8021286:	7c12      	ldrb	r2, [r2, #16]
 8021288:	2108      	movs	r1, #8
 802128a:	1879      	adds	r1, r7, r1
 802128c:	0010      	movs	r0, r2
 802128e:	4798      	blx	r3
 8021290:	0003      	movs	r3, r0
 8021292:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021294:	e0a1      	b.n	80213da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021296:	683a      	ldr	r2, [r7, #0]
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	0011      	movs	r1, r2
 802129c:	0018      	movs	r0, r3
 802129e:	f000 fafe 	bl	802189e <USBD_CtlError>
            err++;
 80212a2:	210b      	movs	r1, #11
 80212a4:	187b      	adds	r3, r7, r1
 80212a6:	781a      	ldrb	r2, [r3, #0]
 80212a8:	187b      	adds	r3, r7, r1
 80212aa:	3201      	adds	r2, #1
 80212ac:	701a      	strb	r2, [r3, #0]
          break;
 80212ae:	e094      	b.n	80213da <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80212b0:	687a      	ldr	r2, [r7, #4]
 80212b2:	23ac      	movs	r3, #172	@ 0xac
 80212b4:	009b      	lsls	r3, r3, #2
 80212b6:	58d3      	ldr	r3, [r2, r3]
 80212b8:	68db      	ldr	r3, [r3, #12]
 80212ba:	2b00      	cmp	r3, #0
 80212bc:	d00d      	beq.n	80212da <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80212be:	687a      	ldr	r2, [r7, #4]
 80212c0:	23ac      	movs	r3, #172	@ 0xac
 80212c2:	009b      	lsls	r3, r3, #2
 80212c4:	58d3      	ldr	r3, [r2, r3]
 80212c6:	68db      	ldr	r3, [r3, #12]
 80212c8:	687a      	ldr	r2, [r7, #4]
 80212ca:	7c12      	ldrb	r2, [r2, #16]
 80212cc:	2108      	movs	r1, #8
 80212ce:	1879      	adds	r1, r7, r1
 80212d0:	0010      	movs	r0, r2
 80212d2:	4798      	blx	r3
 80212d4:	0003      	movs	r3, r0
 80212d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80212d8:	e07f      	b.n	80213da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80212da:	683a      	ldr	r2, [r7, #0]
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	0011      	movs	r1, r2
 80212e0:	0018      	movs	r0, r3
 80212e2:	f000 fadc 	bl	802189e <USBD_CtlError>
            err++;
 80212e6:	210b      	movs	r1, #11
 80212e8:	187b      	adds	r3, r7, r1
 80212ea:	781a      	ldrb	r2, [r3, #0]
 80212ec:	187b      	adds	r3, r7, r1
 80212ee:	3201      	adds	r2, #1
 80212f0:	701a      	strb	r2, [r3, #0]
          break;
 80212f2:	e072      	b.n	80213da <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80212f4:	687a      	ldr	r2, [r7, #4]
 80212f6:	23ac      	movs	r3, #172	@ 0xac
 80212f8:	009b      	lsls	r3, r3, #2
 80212fa:	58d3      	ldr	r3, [r2, r3]
 80212fc:	691b      	ldr	r3, [r3, #16]
 80212fe:	2b00      	cmp	r3, #0
 8021300:	d00d      	beq.n	802131e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021302:	687a      	ldr	r2, [r7, #4]
 8021304:	23ac      	movs	r3, #172	@ 0xac
 8021306:	009b      	lsls	r3, r3, #2
 8021308:	58d3      	ldr	r3, [r2, r3]
 802130a:	691b      	ldr	r3, [r3, #16]
 802130c:	687a      	ldr	r2, [r7, #4]
 802130e:	7c12      	ldrb	r2, [r2, #16]
 8021310:	2108      	movs	r1, #8
 8021312:	1879      	adds	r1, r7, r1
 8021314:	0010      	movs	r0, r2
 8021316:	4798      	blx	r3
 8021318:	0003      	movs	r3, r0
 802131a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802131c:	e05d      	b.n	80213da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802131e:	683a      	ldr	r2, [r7, #0]
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	0011      	movs	r1, r2
 8021324:	0018      	movs	r0, r3
 8021326:	f000 faba 	bl	802189e <USBD_CtlError>
            err++;
 802132a:	210b      	movs	r1, #11
 802132c:	187b      	adds	r3, r7, r1
 802132e:	781a      	ldrb	r2, [r3, #0]
 8021330:	187b      	adds	r3, r7, r1
 8021332:	3201      	adds	r2, #1
 8021334:	701a      	strb	r2, [r3, #0]
          break;
 8021336:	e050      	b.n	80213da <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021338:	687a      	ldr	r2, [r7, #4]
 802133a:	23ac      	movs	r3, #172	@ 0xac
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	58d3      	ldr	r3, [r2, r3]
 8021340:	695b      	ldr	r3, [r3, #20]
 8021342:	2b00      	cmp	r3, #0
 8021344:	d00d      	beq.n	8021362 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021346:	687a      	ldr	r2, [r7, #4]
 8021348:	23ac      	movs	r3, #172	@ 0xac
 802134a:	009b      	lsls	r3, r3, #2
 802134c:	58d3      	ldr	r3, [r2, r3]
 802134e:	695b      	ldr	r3, [r3, #20]
 8021350:	687a      	ldr	r2, [r7, #4]
 8021352:	7c12      	ldrb	r2, [r2, #16]
 8021354:	2108      	movs	r1, #8
 8021356:	1879      	adds	r1, r7, r1
 8021358:	0010      	movs	r0, r2
 802135a:	4798      	blx	r3
 802135c:	0003      	movs	r3, r0
 802135e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021360:	e03b      	b.n	80213da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021362:	683a      	ldr	r2, [r7, #0]
 8021364:	687b      	ldr	r3, [r7, #4]
 8021366:	0011      	movs	r1, r2
 8021368:	0018      	movs	r0, r3
 802136a:	f000 fa98 	bl	802189e <USBD_CtlError>
            err++;
 802136e:	210b      	movs	r1, #11
 8021370:	187b      	adds	r3, r7, r1
 8021372:	781a      	ldrb	r2, [r3, #0]
 8021374:	187b      	adds	r3, r7, r1
 8021376:	3201      	adds	r2, #1
 8021378:	701a      	strb	r2, [r3, #0]
          break;
 802137a:	e02e      	b.n	80213da <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802137c:	687a      	ldr	r2, [r7, #4]
 802137e:	23ac      	movs	r3, #172	@ 0xac
 8021380:	009b      	lsls	r3, r3, #2
 8021382:	58d3      	ldr	r3, [r2, r3]
 8021384:	699b      	ldr	r3, [r3, #24]
 8021386:	2b00      	cmp	r3, #0
 8021388:	d00d      	beq.n	80213a6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802138a:	687a      	ldr	r2, [r7, #4]
 802138c:	23ac      	movs	r3, #172	@ 0xac
 802138e:	009b      	lsls	r3, r3, #2
 8021390:	58d3      	ldr	r3, [r2, r3]
 8021392:	699b      	ldr	r3, [r3, #24]
 8021394:	687a      	ldr	r2, [r7, #4]
 8021396:	7c12      	ldrb	r2, [r2, #16]
 8021398:	2108      	movs	r1, #8
 802139a:	1879      	adds	r1, r7, r1
 802139c:	0010      	movs	r0, r2
 802139e:	4798      	blx	r3
 80213a0:	0003      	movs	r3, r0
 80213a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80213a4:	e019      	b.n	80213da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80213a6:	683a      	ldr	r2, [r7, #0]
 80213a8:	687b      	ldr	r3, [r7, #4]
 80213aa:	0011      	movs	r1, r2
 80213ac:	0018      	movs	r0, r3
 80213ae:	f000 fa76 	bl	802189e <USBD_CtlError>
            err++;
 80213b2:	210b      	movs	r1, #11
 80213b4:	187b      	adds	r3, r7, r1
 80213b6:	781a      	ldrb	r2, [r3, #0]
 80213b8:	187b      	adds	r3, r7, r1
 80213ba:	3201      	adds	r2, #1
 80213bc:	701a      	strb	r2, [r3, #0]
          break;
 80213be:	e00c      	b.n	80213da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80213c0:	683a      	ldr	r2, [r7, #0]
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	0011      	movs	r1, r2
 80213c6:	0018      	movs	r0, r3
 80213c8:	f000 fa69 	bl	802189e <USBD_CtlError>
          err++;
 80213cc:	210b      	movs	r1, #11
 80213ce:	187b      	adds	r3, r7, r1
 80213d0:	781a      	ldrb	r2, [r3, #0]
 80213d2:	187b      	adds	r3, r7, r1
 80213d4:	3201      	adds	r2, #1
 80213d6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80213d8:	e04b      	b.n	8021472 <USBD_GetDescriptor+0x2fa>
 80213da:	e04a      	b.n	8021472 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	7c1b      	ldrb	r3, [r3, #16]
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d10b      	bne.n	80213fc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80213e4:	687a      	ldr	r2, [r7, #4]
 80213e6:	23ad      	movs	r3, #173	@ 0xad
 80213e8:	009b      	lsls	r3, r3, #2
 80213ea:	58d3      	ldr	r3, [r2, r3]
 80213ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80213ee:	2208      	movs	r2, #8
 80213f0:	18ba      	adds	r2, r7, r2
 80213f2:	0010      	movs	r0, r2
 80213f4:	4798      	blx	r3
 80213f6:	0003      	movs	r3, r0
 80213f8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80213fa:	e03a      	b.n	8021472 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80213fc:	683a      	ldr	r2, [r7, #0]
 80213fe:	687b      	ldr	r3, [r7, #4]
 8021400:	0011      	movs	r1, r2
 8021402:	0018      	movs	r0, r3
 8021404:	f000 fa4b 	bl	802189e <USBD_CtlError>
        err++;
 8021408:	210b      	movs	r1, #11
 802140a:	187b      	adds	r3, r7, r1
 802140c:	781a      	ldrb	r2, [r3, #0]
 802140e:	187b      	adds	r3, r7, r1
 8021410:	3201      	adds	r2, #1
 8021412:	701a      	strb	r2, [r3, #0]
      break;
 8021414:	e02d      	b.n	8021472 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021416:	687b      	ldr	r3, [r7, #4]
 8021418:	7c1b      	ldrb	r3, [r3, #16]
 802141a:	2b00      	cmp	r3, #0
 802141c:	d10f      	bne.n	802143e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 802141e:	687a      	ldr	r2, [r7, #4]
 8021420:	23ad      	movs	r3, #173	@ 0xad
 8021422:	009b      	lsls	r3, r3, #2
 8021424:	58d3      	ldr	r3, [r2, r3]
 8021426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021428:	2208      	movs	r2, #8
 802142a:	18ba      	adds	r2, r7, r2
 802142c:	0010      	movs	r0, r2
 802142e:	4798      	blx	r3
 8021430:	0003      	movs	r3, r0
 8021432:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021434:	68fb      	ldr	r3, [r7, #12]
 8021436:	3301      	adds	r3, #1
 8021438:	2207      	movs	r2, #7
 802143a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802143c:	e019      	b.n	8021472 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 802143e:	683a      	ldr	r2, [r7, #0]
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	0011      	movs	r1, r2
 8021444:	0018      	movs	r0, r3
 8021446:	f000 fa2a 	bl	802189e <USBD_CtlError>
        err++;
 802144a:	210b      	movs	r1, #11
 802144c:	187b      	adds	r3, r7, r1
 802144e:	781a      	ldrb	r2, [r3, #0]
 8021450:	187b      	adds	r3, r7, r1
 8021452:	3201      	adds	r2, #1
 8021454:	701a      	strb	r2, [r3, #0]
      break;
 8021456:	e00c      	b.n	8021472 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8021458:	683a      	ldr	r2, [r7, #0]
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	0011      	movs	r1, r2
 802145e:	0018      	movs	r0, r3
 8021460:	f000 fa1d 	bl	802189e <USBD_CtlError>
      err++;
 8021464:	210b      	movs	r1, #11
 8021466:	187b      	adds	r3, r7, r1
 8021468:	781a      	ldrb	r2, [r3, #0]
 802146a:	187b      	adds	r3, r7, r1
 802146c:	3201      	adds	r2, #1
 802146e:	701a      	strb	r2, [r3, #0]
      break;
 8021470:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8021472:	230b      	movs	r3, #11
 8021474:	18fb      	adds	r3, r7, r3
 8021476:	781b      	ldrb	r3, [r3, #0]
 8021478:	2b00      	cmp	r3, #0
 802147a:	d127      	bne.n	80214cc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 802147c:	2108      	movs	r1, #8
 802147e:	187b      	adds	r3, r7, r1
 8021480:	881b      	ldrh	r3, [r3, #0]
 8021482:	2b00      	cmp	r3, #0
 8021484:	d019      	beq.n	80214ba <USBD_GetDescriptor+0x342>
 8021486:	683b      	ldr	r3, [r7, #0]
 8021488:	88db      	ldrh	r3, [r3, #6]
 802148a:	2b00      	cmp	r3, #0
 802148c:	d015      	beq.n	80214ba <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 802148e:	683b      	ldr	r3, [r7, #0]
 8021490:	88da      	ldrh	r2, [r3, #6]
 8021492:	187b      	adds	r3, r7, r1
 8021494:	881b      	ldrh	r3, [r3, #0]
 8021496:	1c18      	adds	r0, r3, #0
 8021498:	1c11      	adds	r1, r2, #0
 802149a:	b28a      	uxth	r2, r1
 802149c:	b283      	uxth	r3, r0
 802149e:	429a      	cmp	r2, r3
 80214a0:	d900      	bls.n	80214a4 <USBD_GetDescriptor+0x32c>
 80214a2:	1c01      	adds	r1, r0, #0
 80214a4:	b28a      	uxth	r2, r1
 80214a6:	2108      	movs	r1, #8
 80214a8:	187b      	adds	r3, r7, r1
 80214aa:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80214ac:	187b      	adds	r3, r7, r1
 80214ae:	881a      	ldrh	r2, [r3, #0]
 80214b0:	68f9      	ldr	r1, [r7, #12]
 80214b2:	687b      	ldr	r3, [r7, #4]
 80214b4:	0018      	movs	r0, r3
 80214b6:	f000 fa70 	bl	802199a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80214ba:	683b      	ldr	r3, [r7, #0]
 80214bc:	88db      	ldrh	r3, [r3, #6]
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d105      	bne.n	80214ce <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	0018      	movs	r0, r3
 80214c6:	f000 fad2 	bl	8021a6e <USBD_CtlSendStatus>
 80214ca:	e000      	b.n	80214ce <USBD_GetDescriptor+0x356>
    return;
 80214cc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80214ce:	46bd      	mov	sp, r7
 80214d0:	b004      	add	sp, #16
 80214d2:	bd80      	pop	{r7, pc}
 80214d4:	0802d63c 	.word	0x0802d63c
 80214d8:	0802d65c 	.word	0x0802d65c

080214dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80214dc:	b590      	push	{r4, r7, lr}
 80214de:	b085      	sub	sp, #20
 80214e0:	af00      	add	r7, sp, #0
 80214e2:	6078      	str	r0, [r7, #4]
 80214e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80214e6:	683b      	ldr	r3, [r7, #0]
 80214e8:	889b      	ldrh	r3, [r3, #4]
 80214ea:	2b00      	cmp	r3, #0
 80214ec:	d13d      	bne.n	802156a <USBD_SetAddress+0x8e>
 80214ee:	683b      	ldr	r3, [r7, #0]
 80214f0:	88db      	ldrh	r3, [r3, #6]
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d139      	bne.n	802156a <USBD_SetAddress+0x8e>
 80214f6:	683b      	ldr	r3, [r7, #0]
 80214f8:	885b      	ldrh	r3, [r3, #2]
 80214fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80214fc:	d835      	bhi.n	802156a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80214fe:	683b      	ldr	r3, [r7, #0]
 8021500:	885b      	ldrh	r3, [r3, #2]
 8021502:	b2da      	uxtb	r2, r3
 8021504:	230f      	movs	r3, #15
 8021506:	18fb      	adds	r3, r7, r3
 8021508:	217f      	movs	r1, #127	@ 0x7f
 802150a:	400a      	ands	r2, r1
 802150c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802150e:	687a      	ldr	r2, [r7, #4]
 8021510:	23a7      	movs	r3, #167	@ 0xa7
 8021512:	009b      	lsls	r3, r3, #2
 8021514:	5cd3      	ldrb	r3, [r2, r3]
 8021516:	2b03      	cmp	r3, #3
 8021518:	d106      	bne.n	8021528 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 802151a:	683a      	ldr	r2, [r7, #0]
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	0011      	movs	r1, r2
 8021520:	0018      	movs	r0, r3
 8021522:	f000 f9bc 	bl	802189e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021526:	e027      	b.n	8021578 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021528:	687b      	ldr	r3, [r7, #4]
 802152a:	240f      	movs	r4, #15
 802152c:	193a      	adds	r2, r7, r4
 802152e:	4914      	ldr	r1, [pc, #80]	@ (8021580 <USBD_SetAddress+0xa4>)
 8021530:	7812      	ldrb	r2, [r2, #0]
 8021532:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021534:	193b      	adds	r3, r7, r4
 8021536:	781a      	ldrb	r2, [r3, #0]
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	0011      	movs	r1, r2
 802153c:	0018      	movs	r0, r3
 802153e:	f000 ff5d 	bl	80223fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	0018      	movs	r0, r3
 8021546:	f000 fa92 	bl	8021a6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 802154a:	193b      	adds	r3, r7, r4
 802154c:	781b      	ldrb	r3, [r3, #0]
 802154e:	2b00      	cmp	r3, #0
 8021550:	d005      	beq.n	802155e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021552:	687a      	ldr	r2, [r7, #4]
 8021554:	23a7      	movs	r3, #167	@ 0xa7
 8021556:	009b      	lsls	r3, r3, #2
 8021558:	2102      	movs	r1, #2
 802155a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802155c:	e00c      	b.n	8021578 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 802155e:	687a      	ldr	r2, [r7, #4]
 8021560:	23a7      	movs	r3, #167	@ 0xa7
 8021562:	009b      	lsls	r3, r3, #2
 8021564:	2101      	movs	r1, #1
 8021566:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021568:	e006      	b.n	8021578 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 802156a:	683a      	ldr	r2, [r7, #0]
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	0011      	movs	r1, r2
 8021570:	0018      	movs	r0, r3
 8021572:	f000 f994 	bl	802189e <USBD_CtlError>
  }
}
 8021576:	46c0      	nop			@ (mov r8, r8)
 8021578:	46c0      	nop			@ (mov r8, r8)
 802157a:	46bd      	mov	sp, r7
 802157c:	b005      	add	sp, #20
 802157e:	bd90      	pop	{r4, r7, pc}
 8021580:	0000029e 	.word	0x0000029e

08021584 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	b082      	sub	sp, #8
 8021588:	af00      	add	r7, sp, #0
 802158a:	6078      	str	r0, [r7, #4]
 802158c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802158e:	683b      	ldr	r3, [r7, #0]
 8021590:	885b      	ldrh	r3, [r3, #2]
 8021592:	b2da      	uxtb	r2, r3
 8021594:	4b4c      	ldr	r3, [pc, #304]	@ (80216c8 <USBD_SetConfig+0x144>)
 8021596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021598:	4b4b      	ldr	r3, [pc, #300]	@ (80216c8 <USBD_SetConfig+0x144>)
 802159a:	781b      	ldrb	r3, [r3, #0]
 802159c:	2b01      	cmp	r3, #1
 802159e:	d906      	bls.n	80215ae <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80215a0:	683a      	ldr	r2, [r7, #0]
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	0011      	movs	r1, r2
 80215a6:	0018      	movs	r0, r3
 80215a8:	f000 f979 	bl	802189e <USBD_CtlError>
 80215ac:	e088      	b.n	80216c0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80215ae:	687a      	ldr	r2, [r7, #4]
 80215b0:	23a7      	movs	r3, #167	@ 0xa7
 80215b2:	009b      	lsls	r3, r3, #2
 80215b4:	5cd3      	ldrb	r3, [r2, r3]
 80215b6:	2b02      	cmp	r3, #2
 80215b8:	d002      	beq.n	80215c0 <USBD_SetConfig+0x3c>
 80215ba:	2b03      	cmp	r3, #3
 80215bc:	d029      	beq.n	8021612 <USBD_SetConfig+0x8e>
 80215be:	e071      	b.n	80216a4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80215c0:	4b41      	ldr	r3, [pc, #260]	@ (80216c8 <USBD_SetConfig+0x144>)
 80215c2:	781b      	ldrb	r3, [r3, #0]
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d01f      	beq.n	8021608 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80215c8:	4b3f      	ldr	r3, [pc, #252]	@ (80216c8 <USBD_SetConfig+0x144>)
 80215ca:	781b      	ldrb	r3, [r3, #0]
 80215cc:	001a      	movs	r2, r3
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80215d2:	687a      	ldr	r2, [r7, #4]
 80215d4:	23a7      	movs	r3, #167	@ 0xa7
 80215d6:	009b      	lsls	r3, r3, #2
 80215d8:	2103      	movs	r1, #3
 80215da:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80215dc:	4b3a      	ldr	r3, [pc, #232]	@ (80216c8 <USBD_SetConfig+0x144>)
 80215de:	781a      	ldrb	r2, [r3, #0]
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	0011      	movs	r1, r2
 80215e4:	0018      	movs	r0, r3
 80215e6:	f7ff f8c6 	bl	8020776 <USBD_SetClassConfig>
 80215ea:	0003      	movs	r3, r0
 80215ec:	2b02      	cmp	r3, #2
 80215ee:	d106      	bne.n	80215fe <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80215f0:	683a      	ldr	r2, [r7, #0]
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	0011      	movs	r1, r2
 80215f6:	0018      	movs	r0, r3
 80215f8:	f000 f951 	bl	802189e <USBD_CtlError>
            return;
 80215fc:	e060      	b.n	80216c0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	0018      	movs	r0, r3
 8021602:	f000 fa34 	bl	8021a6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021606:	e05b      	b.n	80216c0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	0018      	movs	r0, r3
 802160c:	f000 fa2f 	bl	8021a6e <USBD_CtlSendStatus>
        break;
 8021610:	e056      	b.n	80216c0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8021612:	4b2d      	ldr	r3, [pc, #180]	@ (80216c8 <USBD_SetConfig+0x144>)
 8021614:	781b      	ldrb	r3, [r3, #0]
 8021616:	2b00      	cmp	r3, #0
 8021618:	d115      	bne.n	8021646 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802161a:	687a      	ldr	r2, [r7, #4]
 802161c:	23a7      	movs	r3, #167	@ 0xa7
 802161e:	009b      	lsls	r3, r3, #2
 8021620:	2102      	movs	r1, #2
 8021622:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8021624:	4b28      	ldr	r3, [pc, #160]	@ (80216c8 <USBD_SetConfig+0x144>)
 8021626:	781b      	ldrb	r3, [r3, #0]
 8021628:	001a      	movs	r2, r3
 802162a:	687b      	ldr	r3, [r7, #4]
 802162c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 802162e:	4b26      	ldr	r3, [pc, #152]	@ (80216c8 <USBD_SetConfig+0x144>)
 8021630:	781a      	ldrb	r2, [r3, #0]
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	0011      	movs	r1, r2
 8021636:	0018      	movs	r0, r3
 8021638:	f7ff f8c4 	bl	80207c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	0018      	movs	r0, r3
 8021640:	f000 fa15 	bl	8021a6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021644:	e03c      	b.n	80216c0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8021646:	4b20      	ldr	r3, [pc, #128]	@ (80216c8 <USBD_SetConfig+0x144>)
 8021648:	781b      	ldrb	r3, [r3, #0]
 802164a:	001a      	movs	r2, r3
 802164c:	687b      	ldr	r3, [r7, #4]
 802164e:	685b      	ldr	r3, [r3, #4]
 8021650:	429a      	cmp	r2, r3
 8021652:	d022      	beq.n	802169a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	685b      	ldr	r3, [r3, #4]
 8021658:	b2da      	uxtb	r2, r3
 802165a:	687b      	ldr	r3, [r7, #4]
 802165c:	0011      	movs	r1, r2
 802165e:	0018      	movs	r0, r3
 8021660:	f7ff f8b0 	bl	80207c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8021664:	4b18      	ldr	r3, [pc, #96]	@ (80216c8 <USBD_SetConfig+0x144>)
 8021666:	781b      	ldrb	r3, [r3, #0]
 8021668:	001a      	movs	r2, r3
 802166a:	687b      	ldr	r3, [r7, #4]
 802166c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802166e:	4b16      	ldr	r3, [pc, #88]	@ (80216c8 <USBD_SetConfig+0x144>)
 8021670:	781a      	ldrb	r2, [r3, #0]
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	0011      	movs	r1, r2
 8021676:	0018      	movs	r0, r3
 8021678:	f7ff f87d 	bl	8020776 <USBD_SetClassConfig>
 802167c:	0003      	movs	r3, r0
 802167e:	2b02      	cmp	r3, #2
 8021680:	d106      	bne.n	8021690 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8021682:	683a      	ldr	r2, [r7, #0]
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	0011      	movs	r1, r2
 8021688:	0018      	movs	r0, r3
 802168a:	f000 f908 	bl	802189e <USBD_CtlError>
            return;
 802168e:	e017      	b.n	80216c0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	0018      	movs	r0, r3
 8021694:	f000 f9eb 	bl	8021a6e <USBD_CtlSendStatus>
        break;
 8021698:	e012      	b.n	80216c0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	0018      	movs	r0, r3
 802169e:	f000 f9e6 	bl	8021a6e <USBD_CtlSendStatus>
        break;
 80216a2:	e00d      	b.n	80216c0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80216a4:	683a      	ldr	r2, [r7, #0]
 80216a6:	687b      	ldr	r3, [r7, #4]
 80216a8:	0011      	movs	r1, r2
 80216aa:	0018      	movs	r0, r3
 80216ac:	f000 f8f7 	bl	802189e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80216b0:	4b05      	ldr	r3, [pc, #20]	@ (80216c8 <USBD_SetConfig+0x144>)
 80216b2:	781a      	ldrb	r2, [r3, #0]
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	0011      	movs	r1, r2
 80216b8:	0018      	movs	r0, r3
 80216ba:	f7ff f883 	bl	80207c4 <USBD_ClrClassConfig>
        break;
 80216be:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80216c0:	46bd      	mov	sp, r7
 80216c2:	b002      	add	sp, #8
 80216c4:	bd80      	pop	{r7, pc}
 80216c6:	46c0      	nop			@ (mov r8, r8)
 80216c8:	20002258 	.word	0x20002258

080216cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80216cc:	b580      	push	{r7, lr}
 80216ce:	b082      	sub	sp, #8
 80216d0:	af00      	add	r7, sp, #0
 80216d2:	6078      	str	r0, [r7, #4]
 80216d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80216d6:	683b      	ldr	r3, [r7, #0]
 80216d8:	88db      	ldrh	r3, [r3, #6]
 80216da:	2b01      	cmp	r3, #1
 80216dc:	d006      	beq.n	80216ec <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80216de:	683a      	ldr	r2, [r7, #0]
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	0011      	movs	r1, r2
 80216e4:	0018      	movs	r0, r3
 80216e6:	f000 f8da 	bl	802189e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80216ea:	e026      	b.n	802173a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80216ec:	687a      	ldr	r2, [r7, #4]
 80216ee:	23a7      	movs	r3, #167	@ 0xa7
 80216f0:	009b      	lsls	r3, r3, #2
 80216f2:	5cd3      	ldrb	r3, [r2, r3]
 80216f4:	2b02      	cmp	r3, #2
 80216f6:	dc02      	bgt.n	80216fe <USBD_GetConfig+0x32>
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	dc03      	bgt.n	8021704 <USBD_GetConfig+0x38>
 80216fc:	e016      	b.n	802172c <USBD_GetConfig+0x60>
 80216fe:	2b03      	cmp	r3, #3
 8021700:	d00c      	beq.n	802171c <USBD_GetConfig+0x50>
 8021702:	e013      	b.n	802172c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	2200      	movs	r2, #0
 8021708:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	3308      	adds	r3, #8
 802170e:	0019      	movs	r1, r3
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	2201      	movs	r2, #1
 8021714:	0018      	movs	r0, r3
 8021716:	f000 f940 	bl	802199a <USBD_CtlSendData>
        break;
 802171a:	e00e      	b.n	802173a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	1d19      	adds	r1, r3, #4
 8021720:	687b      	ldr	r3, [r7, #4]
 8021722:	2201      	movs	r2, #1
 8021724:	0018      	movs	r0, r3
 8021726:	f000 f938 	bl	802199a <USBD_CtlSendData>
        break;
 802172a:	e006      	b.n	802173a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 802172c:	683a      	ldr	r2, [r7, #0]
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	0011      	movs	r1, r2
 8021732:	0018      	movs	r0, r3
 8021734:	f000 f8b3 	bl	802189e <USBD_CtlError>
        break;
 8021738:	46c0      	nop			@ (mov r8, r8)
}
 802173a:	46c0      	nop			@ (mov r8, r8)
 802173c:	46bd      	mov	sp, r7
 802173e:	b002      	add	sp, #8
 8021740:	bd80      	pop	{r7, pc}

08021742 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021742:	b580      	push	{r7, lr}
 8021744:	b082      	sub	sp, #8
 8021746:	af00      	add	r7, sp, #0
 8021748:	6078      	str	r0, [r7, #4]
 802174a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802174c:	687a      	ldr	r2, [r7, #4]
 802174e:	23a7      	movs	r3, #167	@ 0xa7
 8021750:	009b      	lsls	r3, r3, #2
 8021752:	5cd3      	ldrb	r3, [r2, r3]
 8021754:	3b01      	subs	r3, #1
 8021756:	2b02      	cmp	r3, #2
 8021758:	d822      	bhi.n	80217a0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 802175a:	683b      	ldr	r3, [r7, #0]
 802175c:	88db      	ldrh	r3, [r3, #6]
 802175e:	2b02      	cmp	r3, #2
 8021760:	d006      	beq.n	8021770 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8021762:	683a      	ldr	r2, [r7, #0]
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	0011      	movs	r1, r2
 8021768:	0018      	movs	r0, r3
 802176a:	f000 f898 	bl	802189e <USBD_CtlError>
        break;
 802176e:	e01e      	b.n	80217ae <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	2201      	movs	r2, #1
 8021774:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8021776:	687a      	ldr	r2, [r7, #4]
 8021778:	23a9      	movs	r3, #169	@ 0xa9
 802177a:	009b      	lsls	r3, r3, #2
 802177c:	58d3      	ldr	r3, [r2, r3]
 802177e:	2b00      	cmp	r3, #0
 8021780:	d005      	beq.n	802178e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	68db      	ldr	r3, [r3, #12]
 8021786:	2202      	movs	r2, #2
 8021788:	431a      	orrs	r2, r3
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 802178e:	687b      	ldr	r3, [r7, #4]
 8021790:	330c      	adds	r3, #12
 8021792:	0019      	movs	r1, r3
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	2202      	movs	r2, #2
 8021798:	0018      	movs	r0, r3
 802179a:	f000 f8fe 	bl	802199a <USBD_CtlSendData>
      break;
 802179e:	e006      	b.n	80217ae <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80217a0:	683a      	ldr	r2, [r7, #0]
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	0011      	movs	r1, r2
 80217a6:	0018      	movs	r0, r3
 80217a8:	f000 f879 	bl	802189e <USBD_CtlError>
      break;
 80217ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 80217ae:	46c0      	nop			@ (mov r8, r8)
 80217b0:	46bd      	mov	sp, r7
 80217b2:	b002      	add	sp, #8
 80217b4:	bd80      	pop	{r7, pc}

080217b6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80217b6:	b580      	push	{r7, lr}
 80217b8:	b082      	sub	sp, #8
 80217ba:	af00      	add	r7, sp, #0
 80217bc:	6078      	str	r0, [r7, #4]
 80217be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80217c0:	683b      	ldr	r3, [r7, #0]
 80217c2:	885b      	ldrh	r3, [r3, #2]
 80217c4:	2b01      	cmp	r3, #1
 80217c6:	d108      	bne.n	80217da <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80217c8:	687a      	ldr	r2, [r7, #4]
 80217ca:	23a9      	movs	r3, #169	@ 0xa9
 80217cc:	009b      	lsls	r3, r3, #2
 80217ce:	2101      	movs	r1, #1
 80217d0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	0018      	movs	r0, r3
 80217d6:	f000 f94a 	bl	8021a6e <USBD_CtlSendStatus>
  }
}
 80217da:	46c0      	nop			@ (mov r8, r8)
 80217dc:	46bd      	mov	sp, r7
 80217de:	b002      	add	sp, #8
 80217e0:	bd80      	pop	{r7, pc}

080217e2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80217e2:	b580      	push	{r7, lr}
 80217e4:	b082      	sub	sp, #8
 80217e6:	af00      	add	r7, sp, #0
 80217e8:	6078      	str	r0, [r7, #4]
 80217ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80217ec:	687a      	ldr	r2, [r7, #4]
 80217ee:	23a7      	movs	r3, #167	@ 0xa7
 80217f0:	009b      	lsls	r3, r3, #2
 80217f2:	5cd3      	ldrb	r3, [r2, r3]
 80217f4:	3b01      	subs	r3, #1
 80217f6:	2b02      	cmp	r3, #2
 80217f8:	d80d      	bhi.n	8021816 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80217fa:	683b      	ldr	r3, [r7, #0]
 80217fc:	885b      	ldrh	r3, [r3, #2]
 80217fe:	2b01      	cmp	r3, #1
 8021800:	d110      	bne.n	8021824 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8021802:	687a      	ldr	r2, [r7, #4]
 8021804:	23a9      	movs	r3, #169	@ 0xa9
 8021806:	009b      	lsls	r3, r3, #2
 8021808:	2100      	movs	r1, #0
 802180a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	0018      	movs	r0, r3
 8021810:	f000 f92d 	bl	8021a6e <USBD_CtlSendStatus>
      }
      break;
 8021814:	e006      	b.n	8021824 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8021816:	683a      	ldr	r2, [r7, #0]
 8021818:	687b      	ldr	r3, [r7, #4]
 802181a:	0011      	movs	r1, r2
 802181c:	0018      	movs	r0, r3
 802181e:	f000 f83e 	bl	802189e <USBD_CtlError>
      break;
 8021822:	e000      	b.n	8021826 <USBD_ClrFeature+0x44>
      break;
 8021824:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021826:	46c0      	nop			@ (mov r8, r8)
 8021828:	46bd      	mov	sp, r7
 802182a:	b002      	add	sp, #8
 802182c:	bd80      	pop	{r7, pc}

0802182e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 802182e:	b580      	push	{r7, lr}
 8021830:	b082      	sub	sp, #8
 8021832:	af00      	add	r7, sp, #0
 8021834:	6078      	str	r0, [r7, #4]
 8021836:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8021838:	683b      	ldr	r3, [r7, #0]
 802183a:	781a      	ldrb	r2, [r3, #0]
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8021840:	683b      	ldr	r3, [r7, #0]
 8021842:	785a      	ldrb	r2, [r3, #1]
 8021844:	687b      	ldr	r3, [r7, #4]
 8021846:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8021848:	683b      	ldr	r3, [r7, #0]
 802184a:	3302      	adds	r3, #2
 802184c:	781b      	ldrb	r3, [r3, #0]
 802184e:	001a      	movs	r2, r3
 8021850:	683b      	ldr	r3, [r7, #0]
 8021852:	3303      	adds	r3, #3
 8021854:	781b      	ldrb	r3, [r3, #0]
 8021856:	021b      	lsls	r3, r3, #8
 8021858:	b29b      	uxth	r3, r3
 802185a:	18d3      	adds	r3, r2, r3
 802185c:	b29a      	uxth	r2, r3
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8021862:	683b      	ldr	r3, [r7, #0]
 8021864:	3304      	adds	r3, #4
 8021866:	781b      	ldrb	r3, [r3, #0]
 8021868:	001a      	movs	r2, r3
 802186a:	683b      	ldr	r3, [r7, #0]
 802186c:	3305      	adds	r3, #5
 802186e:	781b      	ldrb	r3, [r3, #0]
 8021870:	021b      	lsls	r3, r3, #8
 8021872:	b29b      	uxth	r3, r3
 8021874:	18d3      	adds	r3, r2, r3
 8021876:	b29a      	uxth	r2, r3
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 802187c:	683b      	ldr	r3, [r7, #0]
 802187e:	3306      	adds	r3, #6
 8021880:	781b      	ldrb	r3, [r3, #0]
 8021882:	001a      	movs	r2, r3
 8021884:	683b      	ldr	r3, [r7, #0]
 8021886:	3307      	adds	r3, #7
 8021888:	781b      	ldrb	r3, [r3, #0]
 802188a:	021b      	lsls	r3, r3, #8
 802188c:	b29b      	uxth	r3, r3
 802188e:	18d3      	adds	r3, r2, r3
 8021890:	b29a      	uxth	r2, r3
 8021892:	687b      	ldr	r3, [r7, #4]
 8021894:	80da      	strh	r2, [r3, #6]

}
 8021896:	46c0      	nop			@ (mov r8, r8)
 8021898:	46bd      	mov	sp, r7
 802189a:	b002      	add	sp, #8
 802189c:	bd80      	pop	{r7, pc}

0802189e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 802189e:	b580      	push	{r7, lr}
 80218a0:	b082      	sub	sp, #8
 80218a2:	af00      	add	r7, sp, #0
 80218a4:	6078      	str	r0, [r7, #4]
 80218a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	2180      	movs	r1, #128	@ 0x80
 80218ac:	0018      	movs	r0, r3
 80218ae:	f000 fd1e 	bl	80222ee <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80218b2:	687b      	ldr	r3, [r7, #4]
 80218b4:	2100      	movs	r1, #0
 80218b6:	0018      	movs	r0, r3
 80218b8:	f000 fd19 	bl	80222ee <USBD_LL_StallEP>
}
 80218bc:	46c0      	nop			@ (mov r8, r8)
 80218be:	46bd      	mov	sp, r7
 80218c0:	b002      	add	sp, #8
 80218c2:	bd80      	pop	{r7, pc}

080218c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80218c4:	b590      	push	{r4, r7, lr}
 80218c6:	b087      	sub	sp, #28
 80218c8:	af00      	add	r7, sp, #0
 80218ca:	60f8      	str	r0, [r7, #12]
 80218cc:	60b9      	str	r1, [r7, #8]
 80218ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80218d0:	2417      	movs	r4, #23
 80218d2:	193b      	adds	r3, r7, r4
 80218d4:	2200      	movs	r2, #0
 80218d6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80218d8:	68fb      	ldr	r3, [r7, #12]
 80218da:	2b00      	cmp	r3, #0
 80218dc:	d03c      	beq.n	8021958 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80218de:	68fb      	ldr	r3, [r7, #12]
 80218e0:	0018      	movs	r0, r3
 80218e2:	f000 f83d 	bl	8021960 <USBD_GetLen>
 80218e6:	0003      	movs	r3, r0
 80218e8:	3301      	adds	r3, #1
 80218ea:	b29b      	uxth	r3, r3
 80218ec:	18db      	adds	r3, r3, r3
 80218ee:	b29a      	uxth	r2, r3
 80218f0:	687b      	ldr	r3, [r7, #4]
 80218f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80218f4:	193b      	adds	r3, r7, r4
 80218f6:	781b      	ldrb	r3, [r3, #0]
 80218f8:	193a      	adds	r2, r7, r4
 80218fa:	1c59      	adds	r1, r3, #1
 80218fc:	7011      	strb	r1, [r2, #0]
 80218fe:	001a      	movs	r2, r3
 8021900:	68bb      	ldr	r3, [r7, #8]
 8021902:	189b      	adds	r3, r3, r2
 8021904:	687a      	ldr	r2, [r7, #4]
 8021906:	7812      	ldrb	r2, [r2, #0]
 8021908:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 802190a:	193b      	adds	r3, r7, r4
 802190c:	781b      	ldrb	r3, [r3, #0]
 802190e:	193a      	adds	r2, r7, r4
 8021910:	1c59      	adds	r1, r3, #1
 8021912:	7011      	strb	r1, [r2, #0]
 8021914:	001a      	movs	r2, r3
 8021916:	68bb      	ldr	r3, [r7, #8]
 8021918:	189b      	adds	r3, r3, r2
 802191a:	2203      	movs	r2, #3
 802191c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 802191e:	e017      	b.n	8021950 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8021920:	68fb      	ldr	r3, [r7, #12]
 8021922:	1c5a      	adds	r2, r3, #1
 8021924:	60fa      	str	r2, [r7, #12]
 8021926:	2417      	movs	r4, #23
 8021928:	193a      	adds	r2, r7, r4
 802192a:	7812      	ldrb	r2, [r2, #0]
 802192c:	1939      	adds	r1, r7, r4
 802192e:	1c50      	adds	r0, r2, #1
 8021930:	7008      	strb	r0, [r1, #0]
 8021932:	0011      	movs	r1, r2
 8021934:	68ba      	ldr	r2, [r7, #8]
 8021936:	1852      	adds	r2, r2, r1
 8021938:	781b      	ldrb	r3, [r3, #0]
 802193a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 802193c:	193b      	adds	r3, r7, r4
 802193e:	781b      	ldrb	r3, [r3, #0]
 8021940:	193a      	adds	r2, r7, r4
 8021942:	1c59      	adds	r1, r3, #1
 8021944:	7011      	strb	r1, [r2, #0]
 8021946:	001a      	movs	r2, r3
 8021948:	68bb      	ldr	r3, [r7, #8]
 802194a:	189b      	adds	r3, r3, r2
 802194c:	2200      	movs	r2, #0
 802194e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8021950:	68fb      	ldr	r3, [r7, #12]
 8021952:	781b      	ldrb	r3, [r3, #0]
 8021954:	2b00      	cmp	r3, #0
 8021956:	d1e3      	bne.n	8021920 <USBD_GetString+0x5c>
    }
  }
}
 8021958:	46c0      	nop			@ (mov r8, r8)
 802195a:	46bd      	mov	sp, r7
 802195c:	b007      	add	sp, #28
 802195e:	bd90      	pop	{r4, r7, pc}

08021960 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021960:	b580      	push	{r7, lr}
 8021962:	b084      	sub	sp, #16
 8021964:	af00      	add	r7, sp, #0
 8021966:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021968:	230f      	movs	r3, #15
 802196a:	18fb      	adds	r3, r7, r3
 802196c:	2200      	movs	r2, #0
 802196e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8021970:	e008      	b.n	8021984 <USBD_GetLen+0x24>
  {
    len++;
 8021972:	210f      	movs	r1, #15
 8021974:	187b      	adds	r3, r7, r1
 8021976:	781a      	ldrb	r2, [r3, #0]
 8021978:	187b      	adds	r3, r7, r1
 802197a:	3201      	adds	r2, #1
 802197c:	701a      	strb	r2, [r3, #0]
    buf++;
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	3301      	adds	r3, #1
 8021982:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	781b      	ldrb	r3, [r3, #0]
 8021988:	2b00      	cmp	r3, #0
 802198a:	d1f2      	bne.n	8021972 <USBD_GetLen+0x12>
  }

  return len;
 802198c:	230f      	movs	r3, #15
 802198e:	18fb      	adds	r3, r7, r3
 8021990:	781b      	ldrb	r3, [r3, #0]
}
 8021992:	0018      	movs	r0, r3
 8021994:	46bd      	mov	sp, r7
 8021996:	b004      	add	sp, #16
 8021998:	bd80      	pop	{r7, pc}

0802199a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 802199a:	b580      	push	{r7, lr}
 802199c:	b084      	sub	sp, #16
 802199e:	af00      	add	r7, sp, #0
 80219a0:	60f8      	str	r0, [r7, #12]
 80219a2:	60b9      	str	r1, [r7, #8]
 80219a4:	1dbb      	adds	r3, r7, #6
 80219a6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80219a8:	68fa      	ldr	r2, [r7, #12]
 80219aa:	23a5      	movs	r3, #165	@ 0xa5
 80219ac:	009b      	lsls	r3, r3, #2
 80219ae:	2102      	movs	r1, #2
 80219b0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80219b2:	1dbb      	adds	r3, r7, #6
 80219b4:	881a      	ldrh	r2, [r3, #0]
 80219b6:	68fb      	ldr	r3, [r7, #12]
 80219b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80219ba:	1dbb      	adds	r3, r7, #6
 80219bc:	881a      	ldrh	r2, [r3, #0]
 80219be:	68fb      	ldr	r3, [r7, #12]
 80219c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80219c2:	1dbb      	adds	r3, r7, #6
 80219c4:	881b      	ldrh	r3, [r3, #0]
 80219c6:	68ba      	ldr	r2, [r7, #8]
 80219c8:	68f8      	ldr	r0, [r7, #12]
 80219ca:	2100      	movs	r1, #0
 80219cc:	f000 fd41 	bl	8022452 <USBD_LL_Transmit>

  return USBD_OK;
 80219d0:	2300      	movs	r3, #0
}
 80219d2:	0018      	movs	r0, r3
 80219d4:	46bd      	mov	sp, r7
 80219d6:	b004      	add	sp, #16
 80219d8:	bd80      	pop	{r7, pc}

080219da <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80219da:	b580      	push	{r7, lr}
 80219dc:	b084      	sub	sp, #16
 80219de:	af00      	add	r7, sp, #0
 80219e0:	60f8      	str	r0, [r7, #12]
 80219e2:	60b9      	str	r1, [r7, #8]
 80219e4:	1dbb      	adds	r3, r7, #6
 80219e6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80219e8:	1dbb      	adds	r3, r7, #6
 80219ea:	881b      	ldrh	r3, [r3, #0]
 80219ec:	68ba      	ldr	r2, [r7, #8]
 80219ee:	68f8      	ldr	r0, [r7, #12]
 80219f0:	2100      	movs	r1, #0
 80219f2:	f000 fd2e 	bl	8022452 <USBD_LL_Transmit>

  return USBD_OK;
 80219f6:	2300      	movs	r3, #0
}
 80219f8:	0018      	movs	r0, r3
 80219fa:	46bd      	mov	sp, r7
 80219fc:	b004      	add	sp, #16
 80219fe:	bd80      	pop	{r7, pc}

08021a00 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8021a00:	b580      	push	{r7, lr}
 8021a02:	b084      	sub	sp, #16
 8021a04:	af00      	add	r7, sp, #0
 8021a06:	60f8      	str	r0, [r7, #12]
 8021a08:	60b9      	str	r1, [r7, #8]
 8021a0a:	1dbb      	adds	r3, r7, #6
 8021a0c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8021a0e:	68fa      	ldr	r2, [r7, #12]
 8021a10:	23a5      	movs	r3, #165	@ 0xa5
 8021a12:	009b      	lsls	r3, r3, #2
 8021a14:	2103      	movs	r1, #3
 8021a16:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8021a18:	1dbb      	adds	r3, r7, #6
 8021a1a:	8819      	ldrh	r1, [r3, #0]
 8021a1c:	68fa      	ldr	r2, [r7, #12]
 8021a1e:	23ae      	movs	r3, #174	@ 0xae
 8021a20:	005b      	lsls	r3, r3, #1
 8021a22:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8021a24:	1dbb      	adds	r3, r7, #6
 8021a26:	8819      	ldrh	r1, [r3, #0]
 8021a28:	68fa      	ldr	r2, [r7, #12]
 8021a2a:	23b0      	movs	r3, #176	@ 0xb0
 8021a2c:	005b      	lsls	r3, r3, #1
 8021a2e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021a30:	1dbb      	adds	r3, r7, #6
 8021a32:	881b      	ldrh	r3, [r3, #0]
 8021a34:	68ba      	ldr	r2, [r7, #8]
 8021a36:	68f8      	ldr	r0, [r7, #12]
 8021a38:	2100      	movs	r1, #0
 8021a3a:	f000 fd41 	bl	80224c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021a3e:	2300      	movs	r3, #0
}
 8021a40:	0018      	movs	r0, r3
 8021a42:	46bd      	mov	sp, r7
 8021a44:	b004      	add	sp, #16
 8021a46:	bd80      	pop	{r7, pc}

08021a48 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8021a48:	b580      	push	{r7, lr}
 8021a4a:	b084      	sub	sp, #16
 8021a4c:	af00      	add	r7, sp, #0
 8021a4e:	60f8      	str	r0, [r7, #12]
 8021a50:	60b9      	str	r1, [r7, #8]
 8021a52:	1dbb      	adds	r3, r7, #6
 8021a54:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021a56:	1dbb      	adds	r3, r7, #6
 8021a58:	881b      	ldrh	r3, [r3, #0]
 8021a5a:	68ba      	ldr	r2, [r7, #8]
 8021a5c:	68f8      	ldr	r0, [r7, #12]
 8021a5e:	2100      	movs	r1, #0
 8021a60:	f000 fd2e 	bl	80224c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021a64:	2300      	movs	r3, #0
}
 8021a66:	0018      	movs	r0, r3
 8021a68:	46bd      	mov	sp, r7
 8021a6a:	b004      	add	sp, #16
 8021a6c:	bd80      	pop	{r7, pc}

08021a6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8021a6e:	b580      	push	{r7, lr}
 8021a70:	b082      	sub	sp, #8
 8021a72:	af00      	add	r7, sp, #0
 8021a74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8021a76:	687a      	ldr	r2, [r7, #4]
 8021a78:	23a5      	movs	r3, #165	@ 0xa5
 8021a7a:	009b      	lsls	r3, r3, #2
 8021a7c:	2104      	movs	r1, #4
 8021a7e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8021a80:	6878      	ldr	r0, [r7, #4]
 8021a82:	2300      	movs	r3, #0
 8021a84:	2200      	movs	r2, #0
 8021a86:	2100      	movs	r1, #0
 8021a88:	f000 fce3 	bl	8022452 <USBD_LL_Transmit>

  return USBD_OK;
 8021a8c:	2300      	movs	r3, #0
}
 8021a8e:	0018      	movs	r0, r3
 8021a90:	46bd      	mov	sp, r7
 8021a92:	b002      	add	sp, #8
 8021a94:	bd80      	pop	{r7, pc}

08021a96 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8021a96:	b580      	push	{r7, lr}
 8021a98:	b082      	sub	sp, #8
 8021a9a:	af00      	add	r7, sp, #0
 8021a9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8021a9e:	687a      	ldr	r2, [r7, #4]
 8021aa0:	23a5      	movs	r3, #165	@ 0xa5
 8021aa2:	009b      	lsls	r3, r3, #2
 8021aa4:	2105      	movs	r1, #5
 8021aa6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021aa8:	6878      	ldr	r0, [r7, #4]
 8021aaa:	2300      	movs	r3, #0
 8021aac:	2200      	movs	r2, #0
 8021aae:	2100      	movs	r1, #0
 8021ab0:	f000 fd06 	bl	80224c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021ab4:	2300      	movs	r3, #0
}
 8021ab6:	0018      	movs	r0, r3
 8021ab8:	46bd      	mov	sp, r7
 8021aba:	b002      	add	sp, #8
 8021abc:	bd80      	pop	{r7, pc}
	...

08021ac0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8021ac0:	b580      	push	{r7, lr}
 8021ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8021ac4:	4914      	ldr	r1, [pc, #80]	@ (8021b18 <MX_USB_DEVICE_Init+0x58>)
 8021ac6:	4b15      	ldr	r3, [pc, #84]	@ (8021b1c <MX_USB_DEVICE_Init+0x5c>)
 8021ac8:	2200      	movs	r2, #0
 8021aca:	0018      	movs	r0, r3
 8021acc:	f7fe fdec 	bl	80206a8 <USBD_Init>
 8021ad0:	1e03      	subs	r3, r0, #0
 8021ad2:	d001      	beq.n	8021ad8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8021ad4:	f7ea fca4 	bl	800c420 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021ad8:	4a11      	ldr	r2, [pc, #68]	@ (8021b20 <MX_USB_DEVICE_Init+0x60>)
 8021ada:	4b10      	ldr	r3, [pc, #64]	@ (8021b1c <MX_USB_DEVICE_Init+0x5c>)
 8021adc:	0011      	movs	r1, r2
 8021ade:	0018      	movs	r0, r3
 8021ae0:	f7fe fe13 	bl	802070a <USBD_RegisterClass>
 8021ae4:	1e03      	subs	r3, r0, #0
 8021ae6:	d001      	beq.n	8021aec <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8021ae8:	f7ea fc9a 	bl	800c420 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021aec:	4a0d      	ldr	r2, [pc, #52]	@ (8021b24 <MX_USB_DEVICE_Init+0x64>)
 8021aee:	4b0b      	ldr	r3, [pc, #44]	@ (8021b1c <MX_USB_DEVICE_Init+0x5c>)
 8021af0:	0011      	movs	r1, r2
 8021af2:	0018      	movs	r0, r3
 8021af4:	f7fe fd28 	bl	8020548 <USBD_CDC_RegisterInterface>
 8021af8:	1e03      	subs	r3, r0, #0
 8021afa:	d001      	beq.n	8021b00 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8021afc:	f7ea fc90 	bl	800c420 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021b00:	4b06      	ldr	r3, [pc, #24]	@ (8021b1c <MX_USB_DEVICE_Init+0x5c>)
 8021b02:	0018      	movs	r0, r3
 8021b04:	f7fe fe21 	bl	802074a <USBD_Start>
 8021b08:	1e03      	subs	r3, r0, #0
 8021b0a:	d001      	beq.n	8021b10 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8021b0c:	f7ea fc88 	bl	800c420 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021b10:	46c0      	nop			@ (mov r8, r8)
 8021b12:	46bd      	mov	sp, r7
 8021b14:	bd80      	pop	{r7, pc}
 8021b16:	46c0      	nop			@ (mov r8, r8)
 8021b18:	20000218 	.word	0x20000218
 8021b1c:	2000225c 	.word	0x2000225c
 8021b20:	20000104 	.word	0x20000104
 8021b24:	20000208 	.word	0x20000208

08021b28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8021b28:	b580      	push	{r7, lr}
 8021b2a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8021b2c:	4907      	ldr	r1, [pc, #28]	@ (8021b4c <CDC_Init_FS+0x24>)
 8021b2e:	4b08      	ldr	r3, [pc, #32]	@ (8021b50 <CDC_Init_FS+0x28>)
 8021b30:	2200      	movs	r2, #0
 8021b32:	0018      	movs	r0, r3
 8021b34:	f7fe fd23 	bl	802057e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8021b38:	4a06      	ldr	r2, [pc, #24]	@ (8021b54 <CDC_Init_FS+0x2c>)
 8021b3a:	4b05      	ldr	r3, [pc, #20]	@ (8021b50 <CDC_Init_FS+0x28>)
 8021b3c:	0011      	movs	r1, r2
 8021b3e:	0018      	movs	r0, r3
 8021b40:	f7fe fd39 	bl	80205b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8021b44:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8021b46:	0018      	movs	r0, r3
 8021b48:	46bd      	mov	sp, r7
 8021b4a:	bd80      	pop	{r7, pc}
 8021b4c:	200029e0 	.word	0x200029e0
 8021b50:	2000225c 	.word	0x2000225c
 8021b54:	200025e0 	.word	0x200025e0

08021b58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8021b58:	b580      	push	{r7, lr}
 8021b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8021b5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8021b5e:	0018      	movs	r0, r3
 8021b60:	46bd      	mov	sp, r7
 8021b62:	bd80      	pop	{r7, pc}

08021b64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8021b64:	b580      	push	{r7, lr}
 8021b66:	b082      	sub	sp, #8
 8021b68:	af00      	add	r7, sp, #0
 8021b6a:	6039      	str	r1, [r7, #0]
 8021b6c:	0011      	movs	r1, r2
 8021b6e:	1dfb      	adds	r3, r7, #7
 8021b70:	1c02      	adds	r2, r0, #0
 8021b72:	701a      	strb	r2, [r3, #0]
 8021b74:	1d3b      	adds	r3, r7, #4
 8021b76:	1c0a      	adds	r2, r1, #0
 8021b78:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8021b7a:	1dfb      	adds	r3, r7, #7
 8021b7c:	781b      	ldrb	r3, [r3, #0]
 8021b7e:	2b23      	cmp	r3, #35	@ 0x23
 8021b80:	d804      	bhi.n	8021b8c <CDC_Control_FS+0x28>
 8021b82:	009a      	lsls	r2, r3, #2
 8021b84:	4b04      	ldr	r3, [pc, #16]	@ (8021b98 <CDC_Control_FS+0x34>)
 8021b86:	18d3      	adds	r3, r2, r3
 8021b88:	681b      	ldr	r3, [r3, #0]
 8021b8a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8021b8c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8021b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8021b90:	0018      	movs	r0, r3
 8021b92:	46bd      	mov	sp, r7
 8021b94:	b002      	add	sp, #8
 8021b96:	bd80      	pop	{r7, pc}
 8021b98:	0802d674 	.word	0x0802d674

08021b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8021b9c:	b580      	push	{r7, lr}
 8021b9e:	b082      	sub	sp, #8
 8021ba0:	af00      	add	r7, sp, #0
 8021ba2:	6078      	str	r0, [r7, #4]
 8021ba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8021ba6:	4b12      	ldr	r3, [pc, #72]	@ (8021bf0 <CDC_Receive_FS+0x54>)
 8021ba8:	781b      	ldrb	r3, [r3, #0]
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d013      	beq.n	8021bd6 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8021bae:	683b      	ldr	r3, [r7, #0]
 8021bb0:	681b      	ldr	r3, [r3, #0]
 8021bb2:	b29a      	uxth	r2, r3
 8021bb4:	2301      	movs	r3, #1
 8021bb6:	425b      	negs	r3, r3
 8021bb8:	6879      	ldr	r1, [r7, #4]
 8021bba:	480e      	ldr	r0, [pc, #56]	@ (8021bf4 <CDC_Receive_FS+0x58>)
 8021bbc:	f7fa fa46 	bl	801c04c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8021bc0:	687a      	ldr	r2, [r7, #4]
 8021bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8021bf8 <CDC_Receive_FS+0x5c>)
 8021bc4:	0011      	movs	r1, r2
 8021bc6:	0018      	movs	r0, r3
 8021bc8:	f7fe fcf5 	bl	80205b6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8021bf8 <CDC_Receive_FS+0x5c>)
 8021bce:	0018      	movs	r0, r3
 8021bd0:	f7fe fd3c 	bl	802064c <USBD_CDC_ReceivePacket>
 8021bd4:	e006      	b.n	8021be4 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8021bd6:	683b      	ldr	r3, [r7, #0]
 8021bd8:	681a      	ldr	r2, [r3, #0]
 8021bda:	4b08      	ldr	r3, [pc, #32]	@ (8021bfc <CDC_Receive_FS+0x60>)
 8021bdc:	681b      	ldr	r3, [r3, #0]
 8021bde:	18d2      	adds	r2, r2, r3
 8021be0:	4b06      	ldr	r3, [pc, #24]	@ (8021bfc <CDC_Receive_FS+0x60>)
 8021be2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8021be4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8021be6:	0018      	movs	r0, r3
 8021be8:	46bd      	mov	sp, r7
 8021bea:	b002      	add	sp, #8
 8021bec:	bd80      	pop	{r7, pc}
 8021bee:	46c0      	nop			@ (mov r8, r8)
 8021bf0:	20002520 	.word	0x20002520
 8021bf4:	20002524 	.word	0x20002524
 8021bf8:	2000225c 	.word	0x2000225c
 8021bfc:	200025dc 	.word	0x200025dc

08021c00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8021c00:	b5b0      	push	{r4, r5, r7, lr}
 8021c02:	b084      	sub	sp, #16
 8021c04:	af00      	add	r7, sp, #0
 8021c06:	6078      	str	r0, [r7, #4]
 8021c08:	000a      	movs	r2, r1
 8021c0a:	1cbb      	adds	r3, r7, #2
 8021c0c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8021c0e:	230f      	movs	r3, #15
 8021c10:	18fb      	adds	r3, r7, r3
 8021c12:	2200      	movs	r2, #0
 8021c14:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8021c16:	4a11      	ldr	r2, [pc, #68]	@ (8021c5c <CDC_Transmit_FS+0x5c>)
 8021c18:	23ae      	movs	r3, #174	@ 0xae
 8021c1a:	009b      	lsls	r3, r3, #2
 8021c1c:	58d3      	ldr	r3, [r2, r3]
 8021c1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8021c20:	68ba      	ldr	r2, [r7, #8]
 8021c22:	2385      	movs	r3, #133	@ 0x85
 8021c24:	009b      	lsls	r3, r3, #2
 8021c26:	58d3      	ldr	r3, [r2, r3]
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d001      	beq.n	8021c30 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8021c2c:	2301      	movs	r3, #1
 8021c2e:	e010      	b.n	8021c52 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8021c30:	1cbb      	adds	r3, r7, #2
 8021c32:	881a      	ldrh	r2, [r3, #0]
 8021c34:	6879      	ldr	r1, [r7, #4]
 8021c36:	4b09      	ldr	r3, [pc, #36]	@ (8021c5c <CDC_Transmit_FS+0x5c>)
 8021c38:	0018      	movs	r0, r3
 8021c3a:	f7fe fca0 	bl	802057e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8021c3e:	250f      	movs	r5, #15
 8021c40:	197c      	adds	r4, r7, r5
 8021c42:	4b06      	ldr	r3, [pc, #24]	@ (8021c5c <CDC_Transmit_FS+0x5c>)
 8021c44:	0018      	movs	r0, r3
 8021c46:	f7fe fcca 	bl	80205de <USBD_CDC_TransmitPacket>
 8021c4a:	0003      	movs	r3, r0
 8021c4c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8021c4e:	197b      	adds	r3, r7, r5
 8021c50:	781b      	ldrb	r3, [r3, #0]
}
 8021c52:	0018      	movs	r0, r3
 8021c54:	46bd      	mov	sp, r7
 8021c56:	b004      	add	sp, #16
 8021c58:	bdb0      	pop	{r4, r5, r7, pc}
 8021c5a:	46c0      	nop			@ (mov r8, r8)
 8021c5c:	2000225c 	.word	0x2000225c

08021c60 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8021c60:	b580      	push	{r7, lr}
 8021c62:	af00      	add	r7, sp, #0
  ESPProg = true;
 8021c64:	4b02      	ldr	r3, [pc, #8]	@ (8021c70 <EnableESPProg+0x10>)
 8021c66:	2201      	movs	r2, #1
 8021c68:	701a      	strb	r2, [r3, #0]
}
 8021c6a:	46c0      	nop			@ (mov r8, r8)
 8021c6c:	46bd      	mov	sp, r7
 8021c6e:	bd80      	pop	{r7, pc}
 8021c70:	20002520 	.word	0x20002520

08021c74 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8021c74:	b580      	push	{r7, lr}
 8021c76:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8021c78:	4b01      	ldr	r3, [pc, #4]	@ (8021c80 <GetUsbRxPointer+0xc>)
}
 8021c7a:	0018      	movs	r0, r3
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	bd80      	pop	{r7, pc}
 8021c80:	200025e0 	.word	0x200025e0

08021c84 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8021c84:	b580      	push	{r7, lr}
 8021c86:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8021c88:	4b07      	ldr	r3, [pc, #28]	@ (8021ca8 <ResetUsbRxDataSize+0x24>)
 8021c8a:	2200      	movs	r2, #0
 8021c8c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8021c8e:	4a07      	ldr	r2, [pc, #28]	@ (8021cac <ResetUsbRxDataSize+0x28>)
 8021c90:	4b07      	ldr	r3, [pc, #28]	@ (8021cb0 <ResetUsbRxDataSize+0x2c>)
 8021c92:	0011      	movs	r1, r2
 8021c94:	0018      	movs	r0, r3
 8021c96:	f7fe fc8e 	bl	80205b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021c9a:	4b05      	ldr	r3, [pc, #20]	@ (8021cb0 <ResetUsbRxDataSize+0x2c>)
 8021c9c:	0018      	movs	r0, r3
 8021c9e:	f7fe fcd5 	bl	802064c <USBD_CDC_ReceivePacket>
}
 8021ca2:	46c0      	nop			@ (mov r8, r8)
 8021ca4:	46bd      	mov	sp, r7
 8021ca6:	bd80      	pop	{r7, pc}
 8021ca8:	200025dc 	.word	0x200025dc
 8021cac:	200025e0 	.word	0x200025e0
 8021cb0:	2000225c 	.word	0x2000225c

08021cb4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8021cb4:	b580      	push	{r7, lr}
 8021cb6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8021cb8:	4b02      	ldr	r3, [pc, #8]	@ (8021cc4 <GetUsbRxDataSize+0x10>)
 8021cba:	681b      	ldr	r3, [r3, #0]
}
 8021cbc:	0018      	movs	r0, r3
 8021cbe:	46bd      	mov	sp, r7
 8021cc0:	bd80      	pop	{r7, pc}
 8021cc2:	46c0      	nop			@ (mov r8, r8)
 8021cc4:	200025dc 	.word	0x200025dc

08021cc8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8021cc8:	b580      	push	{r7, lr}
 8021cca:	b082      	sub	sp, #8
 8021ccc:	af00      	add	r7, sp, #0
 8021cce:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8021cd0:	687a      	ldr	r2, [r7, #4]
 8021cd2:	4b07      	ldr	r3, [pc, #28]	@ (8021cf0 <GetUsbRxNextChunk+0x28>)
 8021cd4:	18d2      	adds	r2, r2, r3
 8021cd6:	4b07      	ldr	r3, [pc, #28]	@ (8021cf4 <GetUsbRxNextChunk+0x2c>)
 8021cd8:	0011      	movs	r1, r2
 8021cda:	0018      	movs	r0, r3
 8021cdc:	f7fe fc6b 	bl	80205b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021ce0:	4b04      	ldr	r3, [pc, #16]	@ (8021cf4 <GetUsbRxNextChunk+0x2c>)
 8021ce2:	0018      	movs	r0, r3
 8021ce4:	f7fe fcb2 	bl	802064c <USBD_CDC_ReceivePacket>
}
 8021ce8:	46c0      	nop			@ (mov r8, r8)
 8021cea:	46bd      	mov	sp, r7
 8021cec:	b002      	add	sp, #8
 8021cee:	bd80      	pop	{r7, pc}
 8021cf0:	200025e0 	.word	0x200025e0
 8021cf4:	2000225c 	.word	0x2000225c

08021cf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021cf8:	b580      	push	{r7, lr}
 8021cfa:	b082      	sub	sp, #8
 8021cfc:	af00      	add	r7, sp, #0
 8021cfe:	0002      	movs	r2, r0
 8021d00:	6039      	str	r1, [r7, #0]
 8021d02:	1dfb      	adds	r3, r7, #7
 8021d04:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8021d06:	683b      	ldr	r3, [r7, #0]
 8021d08:	2212      	movs	r2, #18
 8021d0a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8021d0c:	4b02      	ldr	r3, [pc, #8]	@ (8021d18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8021d0e:	0018      	movs	r0, r3
 8021d10:	46bd      	mov	sp, r7
 8021d12:	b002      	add	sp, #8
 8021d14:	bd80      	pop	{r7, pc}
 8021d16:	46c0      	nop			@ (mov r8, r8)
 8021d18:	20000234 	.word	0x20000234

08021d1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	b082      	sub	sp, #8
 8021d20:	af00      	add	r7, sp, #0
 8021d22:	0002      	movs	r2, r0
 8021d24:	6039      	str	r1, [r7, #0]
 8021d26:	1dfb      	adds	r3, r7, #7
 8021d28:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8021d2a:	683b      	ldr	r3, [r7, #0]
 8021d2c:	2204      	movs	r2, #4
 8021d2e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8021d30:	4b02      	ldr	r3, [pc, #8]	@ (8021d3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8021d32:	0018      	movs	r0, r3
 8021d34:	46bd      	mov	sp, r7
 8021d36:	b002      	add	sp, #8
 8021d38:	bd80      	pop	{r7, pc}
 8021d3a:	46c0      	nop			@ (mov r8, r8)
 8021d3c:	20000248 	.word	0x20000248

08021d40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021d40:	b580      	push	{r7, lr}
 8021d42:	b082      	sub	sp, #8
 8021d44:	af00      	add	r7, sp, #0
 8021d46:	0002      	movs	r2, r0
 8021d48:	6039      	str	r1, [r7, #0]
 8021d4a:	1dfb      	adds	r3, r7, #7
 8021d4c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8021d4e:	1dfb      	adds	r3, r7, #7
 8021d50:	781b      	ldrb	r3, [r3, #0]
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d106      	bne.n	8021d64 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021d56:	683a      	ldr	r2, [r7, #0]
 8021d58:	4908      	ldr	r1, [pc, #32]	@ (8021d7c <USBD_FS_ProductStrDescriptor+0x3c>)
 8021d5a:	4b09      	ldr	r3, [pc, #36]	@ (8021d80 <USBD_FS_ProductStrDescriptor+0x40>)
 8021d5c:	0018      	movs	r0, r3
 8021d5e:	f7ff fdb1 	bl	80218c4 <USBD_GetString>
 8021d62:	e005      	b.n	8021d70 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021d64:	683a      	ldr	r2, [r7, #0]
 8021d66:	4905      	ldr	r1, [pc, #20]	@ (8021d7c <USBD_FS_ProductStrDescriptor+0x3c>)
 8021d68:	4b05      	ldr	r3, [pc, #20]	@ (8021d80 <USBD_FS_ProductStrDescriptor+0x40>)
 8021d6a:	0018      	movs	r0, r3
 8021d6c:	f7ff fdaa 	bl	80218c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8021d70:	4b02      	ldr	r3, [pc, #8]	@ (8021d7c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8021d72:	0018      	movs	r0, r3
 8021d74:	46bd      	mov	sp, r7
 8021d76:	b002      	add	sp, #8
 8021d78:	bd80      	pop	{r7, pc}
 8021d7a:	46c0      	nop			@ (mov r8, r8)
 8021d7c:	20002de0 	.word	0x20002de0
 8021d80:	0802d038 	.word	0x0802d038

08021d84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021d84:	b580      	push	{r7, lr}
 8021d86:	b082      	sub	sp, #8
 8021d88:	af00      	add	r7, sp, #0
 8021d8a:	0002      	movs	r2, r0
 8021d8c:	6039      	str	r1, [r7, #0]
 8021d8e:	1dfb      	adds	r3, r7, #7
 8021d90:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021d92:	683a      	ldr	r2, [r7, #0]
 8021d94:	4904      	ldr	r1, [pc, #16]	@ (8021da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8021d96:	4b05      	ldr	r3, [pc, #20]	@ (8021dac <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8021d98:	0018      	movs	r0, r3
 8021d9a:	f7ff fd93 	bl	80218c4 <USBD_GetString>
  return USBD_StrDesc;
 8021d9e:	4b02      	ldr	r3, [pc, #8]	@ (8021da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8021da0:	0018      	movs	r0, r3
 8021da2:	46bd      	mov	sp, r7
 8021da4:	b002      	add	sp, #8
 8021da6:	bd80      	pop	{r7, pc}
 8021da8:	20002de0 	.word	0x20002de0
 8021dac:	0802d050 	.word	0x0802d050

08021db0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021db0:	b580      	push	{r7, lr}
 8021db2:	b082      	sub	sp, #8
 8021db4:	af00      	add	r7, sp, #0
 8021db6:	0002      	movs	r2, r0
 8021db8:	6039      	str	r1, [r7, #0]
 8021dba:	1dfb      	adds	r3, r7, #7
 8021dbc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8021dbe:	683b      	ldr	r3, [r7, #0]
 8021dc0:	221a      	movs	r2, #26
 8021dc2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8021dc4:	f000 f84c 	bl	8021e60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8021dc8:	4b02      	ldr	r3, [pc, #8]	@ (8021dd4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8021dca:	0018      	movs	r0, r3
 8021dcc:	46bd      	mov	sp, r7
 8021dce:	b002      	add	sp, #8
 8021dd0:	bd80      	pop	{r7, pc}
 8021dd2:	46c0      	nop			@ (mov r8, r8)
 8021dd4:	2000024c 	.word	0x2000024c

08021dd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	b082      	sub	sp, #8
 8021ddc:	af00      	add	r7, sp, #0
 8021dde:	0002      	movs	r2, r0
 8021de0:	6039      	str	r1, [r7, #0]
 8021de2:	1dfb      	adds	r3, r7, #7
 8021de4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8021de6:	1dfb      	adds	r3, r7, #7
 8021de8:	781b      	ldrb	r3, [r3, #0]
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d106      	bne.n	8021dfc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021dee:	683a      	ldr	r2, [r7, #0]
 8021df0:	4908      	ldr	r1, [pc, #32]	@ (8021e14 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8021df2:	4b09      	ldr	r3, [pc, #36]	@ (8021e18 <USBD_FS_ConfigStrDescriptor+0x40>)
 8021df4:	0018      	movs	r0, r3
 8021df6:	f7ff fd65 	bl	80218c4 <USBD_GetString>
 8021dfa:	e005      	b.n	8021e08 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021dfc:	683a      	ldr	r2, [r7, #0]
 8021dfe:	4905      	ldr	r1, [pc, #20]	@ (8021e14 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8021e00:	4b05      	ldr	r3, [pc, #20]	@ (8021e18 <USBD_FS_ConfigStrDescriptor+0x40>)
 8021e02:	0018      	movs	r0, r3
 8021e04:	f7ff fd5e 	bl	80218c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8021e08:	4b02      	ldr	r3, [pc, #8]	@ (8021e14 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8021e0a:	0018      	movs	r0, r3
 8021e0c:	46bd      	mov	sp, r7
 8021e0e:	b002      	add	sp, #8
 8021e10:	bd80      	pop	{r7, pc}
 8021e12:	46c0      	nop			@ (mov r8, r8)
 8021e14:	20002de0 	.word	0x20002de0
 8021e18:	0802d064 	.word	0x0802d064

08021e1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8021e1c:	b580      	push	{r7, lr}
 8021e1e:	b082      	sub	sp, #8
 8021e20:	af00      	add	r7, sp, #0
 8021e22:	0002      	movs	r2, r0
 8021e24:	6039      	str	r1, [r7, #0]
 8021e26:	1dfb      	adds	r3, r7, #7
 8021e28:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8021e2a:	1dfb      	adds	r3, r7, #7
 8021e2c:	781b      	ldrb	r3, [r3, #0]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d106      	bne.n	8021e40 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021e32:	683a      	ldr	r2, [r7, #0]
 8021e34:	4908      	ldr	r1, [pc, #32]	@ (8021e58 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8021e36:	4b09      	ldr	r3, [pc, #36]	@ (8021e5c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8021e38:	0018      	movs	r0, r3
 8021e3a:	f7ff fd43 	bl	80218c4 <USBD_GetString>
 8021e3e:	e005      	b.n	8021e4c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021e40:	683a      	ldr	r2, [r7, #0]
 8021e42:	4905      	ldr	r1, [pc, #20]	@ (8021e58 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8021e44:	4b05      	ldr	r3, [pc, #20]	@ (8021e5c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8021e46:	0018      	movs	r0, r3
 8021e48:	f7ff fd3c 	bl	80218c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8021e4c:	4b02      	ldr	r3, [pc, #8]	@ (8021e58 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8021e4e:	0018      	movs	r0, r3
 8021e50:	46bd      	mov	sp, r7
 8021e52:	b002      	add	sp, #8
 8021e54:	bd80      	pop	{r7, pc}
 8021e56:	46c0      	nop			@ (mov r8, r8)
 8021e58:	20002de0 	.word	0x20002de0
 8021e5c:	0802d070 	.word	0x0802d070

08021e60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8021e60:	b580      	push	{r7, lr}
 8021e62:	b084      	sub	sp, #16
 8021e64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021e66:	4b10      	ldr	r3, [pc, #64]	@ (8021ea8 <Get_SerialNum+0x48>)
 8021e68:	681b      	ldr	r3, [r3, #0]
 8021e6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8021eac <Get_SerialNum+0x4c>)
 8021e6e:	681b      	ldr	r3, [r3, #0]
 8021e70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8021e72:	4b0f      	ldr	r3, [pc, #60]	@ (8021eb0 <Get_SerialNum+0x50>)
 8021e74:	681b      	ldr	r3, [r3, #0]
 8021e76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8021e78:	68fa      	ldr	r2, [r7, #12]
 8021e7a:	687b      	ldr	r3, [r7, #4]
 8021e7c:	18d3      	adds	r3, r2, r3
 8021e7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d00b      	beq.n	8021e9e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8021e86:	490b      	ldr	r1, [pc, #44]	@ (8021eb4 <Get_SerialNum+0x54>)
 8021e88:	68fb      	ldr	r3, [r7, #12]
 8021e8a:	2208      	movs	r2, #8
 8021e8c:	0018      	movs	r0, r3
 8021e8e:	f000 f815 	bl	8021ebc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8021e92:	4909      	ldr	r1, [pc, #36]	@ (8021eb8 <Get_SerialNum+0x58>)
 8021e94:	68bb      	ldr	r3, [r7, #8]
 8021e96:	2204      	movs	r2, #4
 8021e98:	0018      	movs	r0, r3
 8021e9a:	f000 f80f 	bl	8021ebc <IntToUnicode>
  }
}
 8021e9e:	46c0      	nop			@ (mov r8, r8)
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	b004      	add	sp, #16
 8021ea4:	bd80      	pop	{r7, pc}
 8021ea6:	46c0      	nop			@ (mov r8, r8)
 8021ea8:	1ff80050 	.word	0x1ff80050
 8021eac:	1ff80054 	.word	0x1ff80054
 8021eb0:	1ff80058 	.word	0x1ff80058
 8021eb4:	2000024e 	.word	0x2000024e
 8021eb8:	2000025e 	.word	0x2000025e

08021ebc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8021ebc:	b580      	push	{r7, lr}
 8021ebe:	b086      	sub	sp, #24
 8021ec0:	af00      	add	r7, sp, #0
 8021ec2:	60f8      	str	r0, [r7, #12]
 8021ec4:	60b9      	str	r1, [r7, #8]
 8021ec6:	1dfb      	adds	r3, r7, #7
 8021ec8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8021eca:	2117      	movs	r1, #23
 8021ecc:	187b      	adds	r3, r7, r1
 8021ece:	2200      	movs	r2, #0
 8021ed0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8021ed2:	187b      	adds	r3, r7, r1
 8021ed4:	2200      	movs	r2, #0
 8021ed6:	701a      	strb	r2, [r3, #0]
 8021ed8:	e02f      	b.n	8021f3a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8021eda:	68fb      	ldr	r3, [r7, #12]
 8021edc:	0f1b      	lsrs	r3, r3, #28
 8021ede:	2b09      	cmp	r3, #9
 8021ee0:	d80d      	bhi.n	8021efe <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8021ee2:	68fb      	ldr	r3, [r7, #12]
 8021ee4:	0f1b      	lsrs	r3, r3, #28
 8021ee6:	b2da      	uxtb	r2, r3
 8021ee8:	2317      	movs	r3, #23
 8021eea:	18fb      	adds	r3, r7, r3
 8021eec:	781b      	ldrb	r3, [r3, #0]
 8021eee:	005b      	lsls	r3, r3, #1
 8021ef0:	0019      	movs	r1, r3
 8021ef2:	68bb      	ldr	r3, [r7, #8]
 8021ef4:	185b      	adds	r3, r3, r1
 8021ef6:	3230      	adds	r2, #48	@ 0x30
 8021ef8:	b2d2      	uxtb	r2, r2
 8021efa:	701a      	strb	r2, [r3, #0]
 8021efc:	e00c      	b.n	8021f18 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021efe:	68fb      	ldr	r3, [r7, #12]
 8021f00:	0f1b      	lsrs	r3, r3, #28
 8021f02:	b2da      	uxtb	r2, r3
 8021f04:	2317      	movs	r3, #23
 8021f06:	18fb      	adds	r3, r7, r3
 8021f08:	781b      	ldrb	r3, [r3, #0]
 8021f0a:	005b      	lsls	r3, r3, #1
 8021f0c:	0019      	movs	r1, r3
 8021f0e:	68bb      	ldr	r3, [r7, #8]
 8021f10:	185b      	adds	r3, r3, r1
 8021f12:	3237      	adds	r2, #55	@ 0x37
 8021f14:	b2d2      	uxtb	r2, r2
 8021f16:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8021f18:	68fb      	ldr	r3, [r7, #12]
 8021f1a:	011b      	lsls	r3, r3, #4
 8021f1c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8021f1e:	2117      	movs	r1, #23
 8021f20:	187b      	adds	r3, r7, r1
 8021f22:	781b      	ldrb	r3, [r3, #0]
 8021f24:	005b      	lsls	r3, r3, #1
 8021f26:	3301      	adds	r3, #1
 8021f28:	68ba      	ldr	r2, [r7, #8]
 8021f2a:	18d3      	adds	r3, r2, r3
 8021f2c:	2200      	movs	r2, #0
 8021f2e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8021f30:	187b      	adds	r3, r7, r1
 8021f32:	781a      	ldrb	r2, [r3, #0]
 8021f34:	187b      	adds	r3, r7, r1
 8021f36:	3201      	adds	r2, #1
 8021f38:	701a      	strb	r2, [r3, #0]
 8021f3a:	2317      	movs	r3, #23
 8021f3c:	18fa      	adds	r2, r7, r3
 8021f3e:	1dfb      	adds	r3, r7, #7
 8021f40:	7812      	ldrb	r2, [r2, #0]
 8021f42:	781b      	ldrb	r3, [r3, #0]
 8021f44:	429a      	cmp	r2, r3
 8021f46:	d3c8      	bcc.n	8021eda <IntToUnicode+0x1e>
  }
}
 8021f48:	46c0      	nop			@ (mov r8, r8)
 8021f4a:	46c0      	nop			@ (mov r8, r8)
 8021f4c:	46bd      	mov	sp, r7
 8021f4e:	b006      	add	sp, #24
 8021f50:	bd80      	pop	{r7, pc}
	...

08021f54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8021f54:	b580      	push	{r7, lr}
 8021f56:	b082      	sub	sp, #8
 8021f58:	af00      	add	r7, sp, #0
 8021f5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8021f5c:	687b      	ldr	r3, [r7, #4]
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	4a0a      	ldr	r2, [pc, #40]	@ (8021f8c <HAL_PCD_MspInit+0x38>)
 8021f62:	4293      	cmp	r3, r2
 8021f64:	d10e      	bne.n	8021f84 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8021f66:	4b0a      	ldr	r3, [pc, #40]	@ (8021f90 <HAL_PCD_MspInit+0x3c>)
 8021f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021f6a:	4b09      	ldr	r3, [pc, #36]	@ (8021f90 <HAL_PCD_MspInit+0x3c>)
 8021f6c:	2180      	movs	r1, #128	@ 0x80
 8021f6e:	0409      	lsls	r1, r1, #16
 8021f70:	430a      	orrs	r2, r1
 8021f72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8021f74:	2200      	movs	r2, #0
 8021f76:	2100      	movs	r1, #0
 8021f78:	201f      	movs	r0, #31
 8021f7a:	f7f2 f847 	bl	801400c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8021f7e:	201f      	movs	r0, #31
 8021f80:	f7f2 f859 	bl	8014036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8021f84:	46c0      	nop			@ (mov r8, r8)
 8021f86:	46bd      	mov	sp, r7
 8021f88:	b002      	add	sp, #8
 8021f8a:	bd80      	pop	{r7, pc}
 8021f8c:	40005c00 	.word	0x40005c00
 8021f90:	40021000 	.word	0x40021000

08021f94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021f94:	b580      	push	{r7, lr}
 8021f96:	b082      	sub	sp, #8
 8021f98:	af00      	add	r7, sp, #0
 8021f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021f9c:	687a      	ldr	r2, [r7, #4]
 8021f9e:	23bc      	movs	r3, #188	@ 0xbc
 8021fa0:	009b      	lsls	r3, r3, #2
 8021fa2:	58d2      	ldr	r2, [r2, r3]
 8021fa4:	687b      	ldr	r3, [r7, #4]
 8021fa6:	21ac      	movs	r1, #172	@ 0xac
 8021fa8:	0089      	lsls	r1, r1, #2
 8021faa:	468c      	mov	ip, r1
 8021fac:	4463      	add	r3, ip
 8021fae:	0019      	movs	r1, r3
 8021fb0:	0010      	movs	r0, r2
 8021fb2:	f7fe fc1d 	bl	80207f0 <USBD_LL_SetupStage>
}
 8021fb6:	46c0      	nop			@ (mov r8, r8)
 8021fb8:	46bd      	mov	sp, r7
 8021fba:	b002      	add	sp, #8
 8021fbc:	bd80      	pop	{r7, pc}

08021fbe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021fbe:	b590      	push	{r4, r7, lr}
 8021fc0:	b083      	sub	sp, #12
 8021fc2:	af00      	add	r7, sp, #0
 8021fc4:	6078      	str	r0, [r7, #4]
 8021fc6:	000a      	movs	r2, r1
 8021fc8:	1cfb      	adds	r3, r7, #3
 8021fca:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8021fcc:	687a      	ldr	r2, [r7, #4]
 8021fce:	23bc      	movs	r3, #188	@ 0xbc
 8021fd0:	009b      	lsls	r3, r3, #2
 8021fd2:	58d4      	ldr	r4, [r2, r3]
 8021fd4:	1cfb      	adds	r3, r7, #3
 8021fd6:	781a      	ldrb	r2, [r3, #0]
 8021fd8:	6878      	ldr	r0, [r7, #4]
 8021fda:	23be      	movs	r3, #190	@ 0xbe
 8021fdc:	0059      	lsls	r1, r3, #1
 8021fde:	0013      	movs	r3, r2
 8021fe0:	009b      	lsls	r3, r3, #2
 8021fe2:	189b      	adds	r3, r3, r2
 8021fe4:	00db      	lsls	r3, r3, #3
 8021fe6:	18c3      	adds	r3, r0, r3
 8021fe8:	185b      	adds	r3, r3, r1
 8021fea:	681a      	ldr	r2, [r3, #0]
 8021fec:	1cfb      	adds	r3, r7, #3
 8021fee:	781b      	ldrb	r3, [r3, #0]
 8021ff0:	0019      	movs	r1, r3
 8021ff2:	0020      	movs	r0, r4
 8021ff4:	f7fe fc5a 	bl	80208ac <USBD_LL_DataOutStage>
}
 8021ff8:	46c0      	nop			@ (mov r8, r8)
 8021ffa:	46bd      	mov	sp, r7
 8021ffc:	b003      	add	sp, #12
 8021ffe:	bd90      	pop	{r4, r7, pc}

08022000 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022000:	b580      	push	{r7, lr}
 8022002:	b082      	sub	sp, #8
 8022004:	af00      	add	r7, sp, #0
 8022006:	6078      	str	r0, [r7, #4]
 8022008:	000a      	movs	r2, r1
 802200a:	1cfb      	adds	r3, r7, #3
 802200c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802200e:	687a      	ldr	r2, [r7, #4]
 8022010:	23bc      	movs	r3, #188	@ 0xbc
 8022012:	009b      	lsls	r3, r3, #2
 8022014:	58d0      	ldr	r0, [r2, r3]
 8022016:	1cfb      	adds	r3, r7, #3
 8022018:	781a      	ldrb	r2, [r3, #0]
 802201a:	6879      	ldr	r1, [r7, #4]
 802201c:	0013      	movs	r3, r2
 802201e:	009b      	lsls	r3, r3, #2
 8022020:	189b      	adds	r3, r3, r2
 8022022:	00db      	lsls	r3, r3, #3
 8022024:	18cb      	adds	r3, r1, r3
 8022026:	333c      	adds	r3, #60	@ 0x3c
 8022028:	681a      	ldr	r2, [r3, #0]
 802202a:	1cfb      	adds	r3, r7, #3
 802202c:	781b      	ldrb	r3, [r3, #0]
 802202e:	0019      	movs	r1, r3
 8022030:	f7fe fcbe 	bl	80209b0 <USBD_LL_DataInStage>
}
 8022034:	46c0      	nop			@ (mov r8, r8)
 8022036:	46bd      	mov	sp, r7
 8022038:	b002      	add	sp, #8
 802203a:	bd80      	pop	{r7, pc}

0802203c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802203c:	b580      	push	{r7, lr}
 802203e:	b082      	sub	sp, #8
 8022040:	af00      	add	r7, sp, #0
 8022042:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022044:	687a      	ldr	r2, [r7, #4]
 8022046:	23bc      	movs	r3, #188	@ 0xbc
 8022048:	009b      	lsls	r3, r3, #2
 802204a:	58d3      	ldr	r3, [r2, r3]
 802204c:	0018      	movs	r0, r3
 802204e:	f7fe fdf5 	bl	8020c3c <USBD_LL_SOF>
}
 8022052:	46c0      	nop			@ (mov r8, r8)
 8022054:	46bd      	mov	sp, r7
 8022056:	b002      	add	sp, #8
 8022058:	bd80      	pop	{r7, pc}

0802205a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802205a:	b580      	push	{r7, lr}
 802205c:	b084      	sub	sp, #16
 802205e:	af00      	add	r7, sp, #0
 8022060:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022062:	230f      	movs	r3, #15
 8022064:	18fb      	adds	r3, r7, r3
 8022066:	2201      	movs	r2, #1
 8022068:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802206a:	687b      	ldr	r3, [r7, #4]
 802206c:	689b      	ldr	r3, [r3, #8]
 802206e:	2b02      	cmp	r3, #2
 8022070:	d001      	beq.n	8022076 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8022072:	f7ea f9d5 	bl	800c420 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022076:	687a      	ldr	r2, [r7, #4]
 8022078:	23bc      	movs	r3, #188	@ 0xbc
 802207a:	009b      	lsls	r3, r3, #2
 802207c:	58d2      	ldr	r2, [r2, r3]
 802207e:	230f      	movs	r3, #15
 8022080:	18fb      	adds	r3, r7, r3
 8022082:	781b      	ldrb	r3, [r3, #0]
 8022084:	0019      	movs	r1, r3
 8022086:	0010      	movs	r0, r2
 8022088:	f7fe fd97 	bl	8020bba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802208c:	687a      	ldr	r2, [r7, #4]
 802208e:	23bc      	movs	r3, #188	@ 0xbc
 8022090:	009b      	lsls	r3, r3, #2
 8022092:	58d3      	ldr	r3, [r2, r3]
 8022094:	0018      	movs	r0, r3
 8022096:	f7fe fd48 	bl	8020b2a <USBD_LL_Reset>
}
 802209a:	46c0      	nop			@ (mov r8, r8)
 802209c:	46bd      	mov	sp, r7
 802209e:	b004      	add	sp, #16
 80220a0:	bd80      	pop	{r7, pc}
	...

080220a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80220a4:	b580      	push	{r7, lr}
 80220a6:	b082      	sub	sp, #8
 80220a8:	af00      	add	r7, sp, #0
 80220aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80220ac:	687a      	ldr	r2, [r7, #4]
 80220ae:	23bc      	movs	r3, #188	@ 0xbc
 80220b0:	009b      	lsls	r3, r3, #2
 80220b2:	58d3      	ldr	r3, [r2, r3]
 80220b4:	0018      	movs	r0, r3
 80220b6:	f7fe fd91 	bl	8020bdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	699b      	ldr	r3, [r3, #24]
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d005      	beq.n	80220ce <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80220c2:	4b05      	ldr	r3, [pc, #20]	@ (80220d8 <HAL_PCD_SuspendCallback+0x34>)
 80220c4:	691a      	ldr	r2, [r3, #16]
 80220c6:	4b04      	ldr	r3, [pc, #16]	@ (80220d8 <HAL_PCD_SuspendCallback+0x34>)
 80220c8:	2106      	movs	r1, #6
 80220ca:	430a      	orrs	r2, r1
 80220cc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80220ce:	46c0      	nop			@ (mov r8, r8)
 80220d0:	46bd      	mov	sp, r7
 80220d2:	b002      	add	sp, #8
 80220d4:	bd80      	pop	{r7, pc}
 80220d6:	46c0      	nop			@ (mov r8, r8)
 80220d8:	e000ed00 	.word	0xe000ed00

080220dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80220dc:	b580      	push	{r7, lr}
 80220de:	b082      	sub	sp, #8
 80220e0:	af00      	add	r7, sp, #0
 80220e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	699b      	ldr	r3, [r3, #24]
 80220e8:	2b00      	cmp	r3, #0
 80220ea:	d007      	beq.n	80220fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80220ec:	4b09      	ldr	r3, [pc, #36]	@ (8022114 <HAL_PCD_ResumeCallback+0x38>)
 80220ee:	691a      	ldr	r2, [r3, #16]
 80220f0:	4b08      	ldr	r3, [pc, #32]	@ (8022114 <HAL_PCD_ResumeCallback+0x38>)
 80220f2:	2106      	movs	r1, #6
 80220f4:	438a      	bics	r2, r1
 80220f6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80220f8:	f000 fa44 	bl	8022584 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80220fc:	687a      	ldr	r2, [r7, #4]
 80220fe:	23bc      	movs	r3, #188	@ 0xbc
 8022100:	009b      	lsls	r3, r3, #2
 8022102:	58d3      	ldr	r3, [r2, r3]
 8022104:	0018      	movs	r0, r3
 8022106:	f7fe fd81 	bl	8020c0c <USBD_LL_Resume>
}
 802210a:	46c0      	nop			@ (mov r8, r8)
 802210c:	46bd      	mov	sp, r7
 802210e:	b002      	add	sp, #8
 8022110:	bd80      	pop	{r7, pc}
 8022112:	46c0      	nop			@ (mov r8, r8)
 8022114:	e000ed00 	.word	0xe000ed00

08022118 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022118:	b580      	push	{r7, lr}
 802211a:	b082      	sub	sp, #8
 802211c:	af00      	add	r7, sp, #0
 802211e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8022120:	4a2d      	ldr	r2, [pc, #180]	@ (80221d8 <USBD_LL_Init+0xc0>)
 8022122:	23bc      	movs	r3, #188	@ 0xbc
 8022124:	009b      	lsls	r3, r3, #2
 8022126:	6879      	ldr	r1, [r7, #4]
 8022128:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 802212a:	687a      	ldr	r2, [r7, #4]
 802212c:	23b0      	movs	r3, #176	@ 0xb0
 802212e:	009b      	lsls	r3, r3, #2
 8022130:	4929      	ldr	r1, [pc, #164]	@ (80221d8 <USBD_LL_Init+0xc0>)
 8022132:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8022134:	4b28      	ldr	r3, [pc, #160]	@ (80221d8 <USBD_LL_Init+0xc0>)
 8022136:	4a29      	ldr	r2, [pc, #164]	@ (80221dc <USBD_LL_Init+0xc4>)
 8022138:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802213a:	4b27      	ldr	r3, [pc, #156]	@ (80221d8 <USBD_LL_Init+0xc0>)
 802213c:	2208      	movs	r2, #8
 802213e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8022140:	4b25      	ldr	r3, [pc, #148]	@ (80221d8 <USBD_LL_Init+0xc0>)
 8022142:	2202      	movs	r2, #2
 8022144:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022146:	4b24      	ldr	r3, [pc, #144]	@ (80221d8 <USBD_LL_Init+0xc0>)
 8022148:	2202      	movs	r2, #2
 802214a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802214c:	4b22      	ldr	r3, [pc, #136]	@ (80221d8 <USBD_LL_Init+0xc0>)
 802214e:	2200      	movs	r2, #0
 8022150:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8022152:	4b21      	ldr	r3, [pc, #132]	@ (80221d8 <USBD_LL_Init+0xc0>)
 8022154:	2200      	movs	r2, #0
 8022156:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8022158:	4b1f      	ldr	r3, [pc, #124]	@ (80221d8 <USBD_LL_Init+0xc0>)
 802215a:	2200      	movs	r2, #0
 802215c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802215e:	4b1e      	ldr	r3, [pc, #120]	@ (80221d8 <USBD_LL_Init+0xc0>)
 8022160:	0018      	movs	r0, r3
 8022162:	f7f5 ff95 	bl	8018090 <HAL_PCD_Init>
 8022166:	1e03      	subs	r3, r0, #0
 8022168:	d001      	beq.n	802216e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 802216a:	f7ea f959 	bl	800c420 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802216e:	687a      	ldr	r2, [r7, #4]
 8022170:	23b0      	movs	r3, #176	@ 0xb0
 8022172:	009b      	lsls	r3, r3, #2
 8022174:	58d0      	ldr	r0, [r2, r3]
 8022176:	2318      	movs	r3, #24
 8022178:	2200      	movs	r2, #0
 802217a:	2100      	movs	r1, #0
 802217c:	f7f7 fd56 	bl	8019c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8022180:	687a      	ldr	r2, [r7, #4]
 8022182:	23b0      	movs	r3, #176	@ 0xb0
 8022184:	009b      	lsls	r3, r3, #2
 8022186:	58d0      	ldr	r0, [r2, r3]
 8022188:	2358      	movs	r3, #88	@ 0x58
 802218a:	2200      	movs	r2, #0
 802218c:	2180      	movs	r1, #128	@ 0x80
 802218e:	f7f7 fd4d 	bl	8019c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8022192:	687a      	ldr	r2, [r7, #4]
 8022194:	23b0      	movs	r3, #176	@ 0xb0
 8022196:	009b      	lsls	r3, r3, #2
 8022198:	58d0      	ldr	r0, [r2, r3]
 802219a:	23c0      	movs	r3, #192	@ 0xc0
 802219c:	2200      	movs	r2, #0
 802219e:	2181      	movs	r1, #129	@ 0x81
 80221a0:	f7f7 fd44 	bl	8019c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80221a4:	687a      	ldr	r2, [r7, #4]
 80221a6:	23b0      	movs	r3, #176	@ 0xb0
 80221a8:	009b      	lsls	r3, r3, #2
 80221aa:	58d0      	ldr	r0, [r2, r3]
 80221ac:	2388      	movs	r3, #136	@ 0x88
 80221ae:	005b      	lsls	r3, r3, #1
 80221b0:	2200      	movs	r2, #0
 80221b2:	2101      	movs	r1, #1
 80221b4:	f7f7 fd3a 	bl	8019c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80221b8:	687a      	ldr	r2, [r7, #4]
 80221ba:	23b0      	movs	r3, #176	@ 0xb0
 80221bc:	009b      	lsls	r3, r3, #2
 80221be:	58d0      	ldr	r0, [r2, r3]
 80221c0:	2380      	movs	r3, #128	@ 0x80
 80221c2:	005b      	lsls	r3, r3, #1
 80221c4:	2200      	movs	r2, #0
 80221c6:	2182      	movs	r1, #130	@ 0x82
 80221c8:	f7f7 fd30 	bl	8019c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80221cc:	2300      	movs	r3, #0
}
 80221ce:	0018      	movs	r0, r3
 80221d0:	46bd      	mov	sp, r7
 80221d2:	b002      	add	sp, #8
 80221d4:	bd80      	pop	{r7, pc}
 80221d6:	46c0      	nop			@ (mov r8, r8)
 80221d8:	20002fe0 	.word	0x20002fe0
 80221dc:	40005c00 	.word	0x40005c00

080221e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80221e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221e2:	b085      	sub	sp, #20
 80221e4:	af00      	add	r7, sp, #0
 80221e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80221e8:	210f      	movs	r1, #15
 80221ea:	187b      	adds	r3, r7, r1
 80221ec:	2200      	movs	r2, #0
 80221ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80221f0:	260e      	movs	r6, #14
 80221f2:	19bb      	adds	r3, r7, r6
 80221f4:	2200      	movs	r2, #0
 80221f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80221f8:	687a      	ldr	r2, [r7, #4]
 80221fa:	23b0      	movs	r3, #176	@ 0xb0
 80221fc:	009b      	lsls	r3, r3, #2
 80221fe:	58d3      	ldr	r3, [r2, r3]
 8022200:	000d      	movs	r5, r1
 8022202:	187c      	adds	r4, r7, r1
 8022204:	0018      	movs	r0, r3
 8022206:	f7f6 f843 	bl	8018290 <HAL_PCD_Start>
 802220a:	0003      	movs	r3, r0
 802220c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802220e:	19bc      	adds	r4, r7, r6
 8022210:	197b      	adds	r3, r7, r5
 8022212:	781b      	ldrb	r3, [r3, #0]
 8022214:	0018      	movs	r0, r3
 8022216:	f000 f9bc 	bl	8022592 <USBD_Get_USB_Status>
 802221a:	0003      	movs	r3, r0
 802221c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802221e:	19bb      	adds	r3, r7, r6
 8022220:	781b      	ldrb	r3, [r3, #0]
}
 8022222:	0018      	movs	r0, r3
 8022224:	46bd      	mov	sp, r7
 8022226:	b005      	add	sp, #20
 8022228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802222a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802222a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802222c:	b085      	sub	sp, #20
 802222e:	af00      	add	r7, sp, #0
 8022230:	6078      	str	r0, [r7, #4]
 8022232:	000c      	movs	r4, r1
 8022234:	0010      	movs	r0, r2
 8022236:	0019      	movs	r1, r3
 8022238:	1cfb      	adds	r3, r7, #3
 802223a:	1c22      	adds	r2, r4, #0
 802223c:	701a      	strb	r2, [r3, #0]
 802223e:	1cbb      	adds	r3, r7, #2
 8022240:	1c02      	adds	r2, r0, #0
 8022242:	701a      	strb	r2, [r3, #0]
 8022244:	003b      	movs	r3, r7
 8022246:	1c0a      	adds	r2, r1, #0
 8022248:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802224a:	260f      	movs	r6, #15
 802224c:	19bb      	adds	r3, r7, r6
 802224e:	2200      	movs	r2, #0
 8022250:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022252:	250e      	movs	r5, #14
 8022254:	197b      	adds	r3, r7, r5
 8022256:	2200      	movs	r2, #0
 8022258:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802225a:	687a      	ldr	r2, [r7, #4]
 802225c:	23b0      	movs	r3, #176	@ 0xb0
 802225e:	009b      	lsls	r3, r3, #2
 8022260:	58d0      	ldr	r0, [r2, r3]
 8022262:	19bc      	adds	r4, r7, r6
 8022264:	1cbb      	adds	r3, r7, #2
 8022266:	781d      	ldrb	r5, [r3, #0]
 8022268:	003b      	movs	r3, r7
 802226a:	881a      	ldrh	r2, [r3, #0]
 802226c:	1cfb      	adds	r3, r7, #3
 802226e:	7819      	ldrb	r1, [r3, #0]
 8022270:	002b      	movs	r3, r5
 8022272:	f7f6 f9a2 	bl	80185ba <HAL_PCD_EP_Open>
 8022276:	0003      	movs	r3, r0
 8022278:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802227a:	250e      	movs	r5, #14
 802227c:	197c      	adds	r4, r7, r5
 802227e:	19bb      	adds	r3, r7, r6
 8022280:	781b      	ldrb	r3, [r3, #0]
 8022282:	0018      	movs	r0, r3
 8022284:	f000 f985 	bl	8022592 <USBD_Get_USB_Status>
 8022288:	0003      	movs	r3, r0
 802228a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802228c:	197b      	adds	r3, r7, r5
 802228e:	781b      	ldrb	r3, [r3, #0]
}
 8022290:	0018      	movs	r0, r3
 8022292:	46bd      	mov	sp, r7
 8022294:	b005      	add	sp, #20
 8022296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022298 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022298:	b5f0      	push	{r4, r5, r6, r7, lr}
 802229a:	b085      	sub	sp, #20
 802229c:	af00      	add	r7, sp, #0
 802229e:	6078      	str	r0, [r7, #4]
 80222a0:	000a      	movs	r2, r1
 80222a2:	1cfb      	adds	r3, r7, #3
 80222a4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80222a6:	210f      	movs	r1, #15
 80222a8:	187b      	adds	r3, r7, r1
 80222aa:	2200      	movs	r2, #0
 80222ac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80222ae:	260e      	movs	r6, #14
 80222b0:	19bb      	adds	r3, r7, r6
 80222b2:	2200      	movs	r2, #0
 80222b4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80222b6:	687a      	ldr	r2, [r7, #4]
 80222b8:	23b0      	movs	r3, #176	@ 0xb0
 80222ba:	009b      	lsls	r3, r3, #2
 80222bc:	58d2      	ldr	r2, [r2, r3]
 80222be:	000d      	movs	r5, r1
 80222c0:	187c      	adds	r4, r7, r1
 80222c2:	1cfb      	adds	r3, r7, #3
 80222c4:	781b      	ldrb	r3, [r3, #0]
 80222c6:	0019      	movs	r1, r3
 80222c8:	0010      	movs	r0, r2
 80222ca:	f7f6 f9e5 	bl	8018698 <HAL_PCD_EP_Close>
 80222ce:	0003      	movs	r3, r0
 80222d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80222d2:	19bc      	adds	r4, r7, r6
 80222d4:	197b      	adds	r3, r7, r5
 80222d6:	781b      	ldrb	r3, [r3, #0]
 80222d8:	0018      	movs	r0, r3
 80222da:	f000 f95a 	bl	8022592 <USBD_Get_USB_Status>
 80222de:	0003      	movs	r3, r0
 80222e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80222e2:	19bb      	adds	r3, r7, r6
 80222e4:	781b      	ldrb	r3, [r3, #0]
}
 80222e6:	0018      	movs	r0, r3
 80222e8:	46bd      	mov	sp, r7
 80222ea:	b005      	add	sp, #20
 80222ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080222ee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80222ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222f0:	b085      	sub	sp, #20
 80222f2:	af00      	add	r7, sp, #0
 80222f4:	6078      	str	r0, [r7, #4]
 80222f6:	000a      	movs	r2, r1
 80222f8:	1cfb      	adds	r3, r7, #3
 80222fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80222fc:	210f      	movs	r1, #15
 80222fe:	187b      	adds	r3, r7, r1
 8022300:	2200      	movs	r2, #0
 8022302:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022304:	260e      	movs	r6, #14
 8022306:	19bb      	adds	r3, r7, r6
 8022308:	2200      	movs	r2, #0
 802230a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802230c:	687a      	ldr	r2, [r7, #4]
 802230e:	23b0      	movs	r3, #176	@ 0xb0
 8022310:	009b      	lsls	r3, r3, #2
 8022312:	58d2      	ldr	r2, [r2, r3]
 8022314:	000d      	movs	r5, r1
 8022316:	187c      	adds	r4, r7, r1
 8022318:	1cfb      	adds	r3, r7, #3
 802231a:	781b      	ldrb	r3, [r3, #0]
 802231c:	0019      	movs	r1, r3
 802231e:	0010      	movs	r0, r2
 8022320:	f7f6 fa97 	bl	8018852 <HAL_PCD_EP_SetStall>
 8022324:	0003      	movs	r3, r0
 8022326:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022328:	19bc      	adds	r4, r7, r6
 802232a:	197b      	adds	r3, r7, r5
 802232c:	781b      	ldrb	r3, [r3, #0]
 802232e:	0018      	movs	r0, r3
 8022330:	f000 f92f 	bl	8022592 <USBD_Get_USB_Status>
 8022334:	0003      	movs	r3, r0
 8022336:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022338:	19bb      	adds	r3, r7, r6
 802233a:	781b      	ldrb	r3, [r3, #0]
}
 802233c:	0018      	movs	r0, r3
 802233e:	46bd      	mov	sp, r7
 8022340:	b005      	add	sp, #20
 8022342:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022344 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022346:	b085      	sub	sp, #20
 8022348:	af00      	add	r7, sp, #0
 802234a:	6078      	str	r0, [r7, #4]
 802234c:	000a      	movs	r2, r1
 802234e:	1cfb      	adds	r3, r7, #3
 8022350:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022352:	210f      	movs	r1, #15
 8022354:	187b      	adds	r3, r7, r1
 8022356:	2200      	movs	r2, #0
 8022358:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802235a:	260e      	movs	r6, #14
 802235c:	19bb      	adds	r3, r7, r6
 802235e:	2200      	movs	r2, #0
 8022360:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022362:	687a      	ldr	r2, [r7, #4]
 8022364:	23b0      	movs	r3, #176	@ 0xb0
 8022366:	009b      	lsls	r3, r3, #2
 8022368:	58d2      	ldr	r2, [r2, r3]
 802236a:	000d      	movs	r5, r1
 802236c:	187c      	adds	r4, r7, r1
 802236e:	1cfb      	adds	r3, r7, #3
 8022370:	781b      	ldrb	r3, [r3, #0]
 8022372:	0019      	movs	r1, r3
 8022374:	0010      	movs	r0, r2
 8022376:	f7f6 fac8 	bl	801890a <HAL_PCD_EP_ClrStall>
 802237a:	0003      	movs	r3, r0
 802237c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802237e:	19bc      	adds	r4, r7, r6
 8022380:	197b      	adds	r3, r7, r5
 8022382:	781b      	ldrb	r3, [r3, #0]
 8022384:	0018      	movs	r0, r3
 8022386:	f000 f904 	bl	8022592 <USBD_Get_USB_Status>
 802238a:	0003      	movs	r3, r0
 802238c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802238e:	19bb      	adds	r3, r7, r6
 8022390:	781b      	ldrb	r3, [r3, #0]
}
 8022392:	0018      	movs	r0, r3
 8022394:	46bd      	mov	sp, r7
 8022396:	b005      	add	sp, #20
 8022398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802239a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802239a:	b580      	push	{r7, lr}
 802239c:	b084      	sub	sp, #16
 802239e:	af00      	add	r7, sp, #0
 80223a0:	6078      	str	r0, [r7, #4]
 80223a2:	000a      	movs	r2, r1
 80223a4:	1cfb      	adds	r3, r7, #3
 80223a6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80223a8:	687a      	ldr	r2, [r7, #4]
 80223aa:	23b0      	movs	r3, #176	@ 0xb0
 80223ac:	009b      	lsls	r3, r3, #2
 80223ae:	58d3      	ldr	r3, [r2, r3]
 80223b0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80223b2:	1cfb      	adds	r3, r7, #3
 80223b4:	781b      	ldrb	r3, [r3, #0]
 80223b6:	b25b      	sxtb	r3, r3
 80223b8:	2b00      	cmp	r3, #0
 80223ba:	da0d      	bge.n	80223d8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80223bc:	1cfb      	adds	r3, r7, #3
 80223be:	781b      	ldrb	r3, [r3, #0]
 80223c0:	227f      	movs	r2, #127	@ 0x7f
 80223c2:	4013      	ands	r3, r2
 80223c4:	68f9      	ldr	r1, [r7, #12]
 80223c6:	1c5a      	adds	r2, r3, #1
 80223c8:	0013      	movs	r3, r2
 80223ca:	009b      	lsls	r3, r3, #2
 80223cc:	189b      	adds	r3, r3, r2
 80223ce:	00db      	lsls	r3, r3, #3
 80223d0:	18cb      	adds	r3, r1, r3
 80223d2:	3302      	adds	r3, #2
 80223d4:	781b      	ldrb	r3, [r3, #0]
 80223d6:	e00d      	b.n	80223f4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80223d8:	1cfb      	adds	r3, r7, #3
 80223da:	781b      	ldrb	r3, [r3, #0]
 80223dc:	227f      	movs	r2, #127	@ 0x7f
 80223de:	401a      	ands	r2, r3
 80223e0:	68f8      	ldr	r0, [r7, #12]
 80223e2:	23b5      	movs	r3, #181	@ 0xb5
 80223e4:	0059      	lsls	r1, r3, #1
 80223e6:	0013      	movs	r3, r2
 80223e8:	009b      	lsls	r3, r3, #2
 80223ea:	189b      	adds	r3, r3, r2
 80223ec:	00db      	lsls	r3, r3, #3
 80223ee:	18c3      	adds	r3, r0, r3
 80223f0:	185b      	adds	r3, r3, r1
 80223f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80223f4:	0018      	movs	r0, r3
 80223f6:	46bd      	mov	sp, r7
 80223f8:	b004      	add	sp, #16
 80223fa:	bd80      	pop	{r7, pc}

080223fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80223fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223fe:	b085      	sub	sp, #20
 8022400:	af00      	add	r7, sp, #0
 8022402:	6078      	str	r0, [r7, #4]
 8022404:	000a      	movs	r2, r1
 8022406:	1cfb      	adds	r3, r7, #3
 8022408:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802240a:	210f      	movs	r1, #15
 802240c:	187b      	adds	r3, r7, r1
 802240e:	2200      	movs	r2, #0
 8022410:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022412:	260e      	movs	r6, #14
 8022414:	19bb      	adds	r3, r7, r6
 8022416:	2200      	movs	r2, #0
 8022418:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802241a:	687a      	ldr	r2, [r7, #4]
 802241c:	23b0      	movs	r3, #176	@ 0xb0
 802241e:	009b      	lsls	r3, r3, #2
 8022420:	58d2      	ldr	r2, [r2, r3]
 8022422:	000d      	movs	r5, r1
 8022424:	187c      	adds	r4, r7, r1
 8022426:	1cfb      	adds	r3, r7, #3
 8022428:	781b      	ldrb	r3, [r3, #0]
 802242a:	0019      	movs	r1, r3
 802242c:	0010      	movs	r0, r2
 802242e:	f7f6 f899 	bl	8018564 <HAL_PCD_SetAddress>
 8022432:	0003      	movs	r3, r0
 8022434:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022436:	19bc      	adds	r4, r7, r6
 8022438:	197b      	adds	r3, r7, r5
 802243a:	781b      	ldrb	r3, [r3, #0]
 802243c:	0018      	movs	r0, r3
 802243e:	f000 f8a8 	bl	8022592 <USBD_Get_USB_Status>
 8022442:	0003      	movs	r3, r0
 8022444:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022446:	19bb      	adds	r3, r7, r6
 8022448:	781b      	ldrb	r3, [r3, #0]
}
 802244a:	0018      	movs	r0, r3
 802244c:	46bd      	mov	sp, r7
 802244e:	b005      	add	sp, #20
 8022450:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022452 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022454:	b087      	sub	sp, #28
 8022456:	af00      	add	r7, sp, #0
 8022458:	60f8      	str	r0, [r7, #12]
 802245a:	0008      	movs	r0, r1
 802245c:	607a      	str	r2, [r7, #4]
 802245e:	0019      	movs	r1, r3
 8022460:	230b      	movs	r3, #11
 8022462:	18fb      	adds	r3, r7, r3
 8022464:	1c02      	adds	r2, r0, #0
 8022466:	701a      	strb	r2, [r3, #0]
 8022468:	2408      	movs	r4, #8
 802246a:	193b      	adds	r3, r7, r4
 802246c:	1c0a      	adds	r2, r1, #0
 802246e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022470:	2117      	movs	r1, #23
 8022472:	187b      	adds	r3, r7, r1
 8022474:	2200      	movs	r2, #0
 8022476:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022478:	2516      	movs	r5, #22
 802247a:	197b      	adds	r3, r7, r5
 802247c:	2200      	movs	r2, #0
 802247e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022480:	68fa      	ldr	r2, [r7, #12]
 8022482:	23b0      	movs	r3, #176	@ 0xb0
 8022484:	009b      	lsls	r3, r3, #2
 8022486:	58d0      	ldr	r0, [r2, r3]
 8022488:	193b      	adds	r3, r7, r4
 802248a:	881d      	ldrh	r5, [r3, #0]
 802248c:	000e      	movs	r6, r1
 802248e:	187c      	adds	r4, r7, r1
 8022490:	687a      	ldr	r2, [r7, #4]
 8022492:	230b      	movs	r3, #11
 8022494:	18fb      	adds	r3, r7, r3
 8022496:	7819      	ldrb	r1, [r3, #0]
 8022498:	002b      	movs	r3, r5
 802249a:	f7f6 f99e 	bl	80187da <HAL_PCD_EP_Transmit>
 802249e:	0003      	movs	r3, r0
 80224a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80224a2:	2516      	movs	r5, #22
 80224a4:	197c      	adds	r4, r7, r5
 80224a6:	19bb      	adds	r3, r7, r6
 80224a8:	781b      	ldrb	r3, [r3, #0]
 80224aa:	0018      	movs	r0, r3
 80224ac:	f000 f871 	bl	8022592 <USBD_Get_USB_Status>
 80224b0:	0003      	movs	r3, r0
 80224b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80224b4:	197b      	adds	r3, r7, r5
 80224b6:	781b      	ldrb	r3, [r3, #0]
}
 80224b8:	0018      	movs	r0, r3
 80224ba:	46bd      	mov	sp, r7
 80224bc:	b007      	add	sp, #28
 80224be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080224c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80224c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224c2:	b087      	sub	sp, #28
 80224c4:	af00      	add	r7, sp, #0
 80224c6:	60f8      	str	r0, [r7, #12]
 80224c8:	0008      	movs	r0, r1
 80224ca:	607a      	str	r2, [r7, #4]
 80224cc:	0019      	movs	r1, r3
 80224ce:	230b      	movs	r3, #11
 80224d0:	18fb      	adds	r3, r7, r3
 80224d2:	1c02      	adds	r2, r0, #0
 80224d4:	701a      	strb	r2, [r3, #0]
 80224d6:	2408      	movs	r4, #8
 80224d8:	193b      	adds	r3, r7, r4
 80224da:	1c0a      	adds	r2, r1, #0
 80224dc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80224de:	2117      	movs	r1, #23
 80224e0:	187b      	adds	r3, r7, r1
 80224e2:	2200      	movs	r2, #0
 80224e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80224e6:	2516      	movs	r5, #22
 80224e8:	197b      	adds	r3, r7, r5
 80224ea:	2200      	movs	r2, #0
 80224ec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80224ee:	68fa      	ldr	r2, [r7, #12]
 80224f0:	23b0      	movs	r3, #176	@ 0xb0
 80224f2:	009b      	lsls	r3, r3, #2
 80224f4:	58d0      	ldr	r0, [r2, r3]
 80224f6:	193b      	adds	r3, r7, r4
 80224f8:	881d      	ldrh	r5, [r3, #0]
 80224fa:	000e      	movs	r6, r1
 80224fc:	187c      	adds	r4, r7, r1
 80224fe:	687a      	ldr	r2, [r7, #4]
 8022500:	230b      	movs	r3, #11
 8022502:	18fb      	adds	r3, r7, r3
 8022504:	7819      	ldrb	r1, [r3, #0]
 8022506:	002b      	movs	r3, r5
 8022508:	f7f6 f917 	bl	801873a <HAL_PCD_EP_Receive>
 802250c:	0003      	movs	r3, r0
 802250e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022510:	2516      	movs	r5, #22
 8022512:	197c      	adds	r4, r7, r5
 8022514:	19bb      	adds	r3, r7, r6
 8022516:	781b      	ldrb	r3, [r3, #0]
 8022518:	0018      	movs	r0, r3
 802251a:	f000 f83a 	bl	8022592 <USBD_Get_USB_Status>
 802251e:	0003      	movs	r3, r0
 8022520:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022522:	197b      	adds	r3, r7, r5
 8022524:	781b      	ldrb	r3, [r3, #0]
}
 8022526:	0018      	movs	r0, r3
 8022528:	46bd      	mov	sp, r7
 802252a:	b007      	add	sp, #28
 802252c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802252e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802252e:	b580      	push	{r7, lr}
 8022530:	b082      	sub	sp, #8
 8022532:	af00      	add	r7, sp, #0
 8022534:	6078      	str	r0, [r7, #4]
 8022536:	000a      	movs	r2, r1
 8022538:	1cfb      	adds	r3, r7, #3
 802253a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 802253c:	687a      	ldr	r2, [r7, #4]
 802253e:	23b0      	movs	r3, #176	@ 0xb0
 8022540:	009b      	lsls	r3, r3, #2
 8022542:	58d2      	ldr	r2, [r2, r3]
 8022544:	1cfb      	adds	r3, r7, #3
 8022546:	781b      	ldrb	r3, [r3, #0]
 8022548:	0019      	movs	r1, r3
 802254a:	0010      	movs	r0, r2
 802254c:	f7f6 f92c 	bl	80187a8 <HAL_PCD_EP_GetRxCount>
 8022550:	0003      	movs	r3, r0
}
 8022552:	0018      	movs	r0, r3
 8022554:	46bd      	mov	sp, r7
 8022556:	b002      	add	sp, #8
 8022558:	bd80      	pop	{r7, pc}
	...

0802255c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 802255c:	b580      	push	{r7, lr}
 802255e:	b082      	sub	sp, #8
 8022560:	af00      	add	r7, sp, #0
 8022562:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022564:	4b02      	ldr	r3, [pc, #8]	@ (8022570 <USBD_static_malloc+0x14>)
}
 8022566:	0018      	movs	r0, r3
 8022568:	46bd      	mov	sp, r7
 802256a:	b002      	add	sp, #8
 802256c:	bd80      	pop	{r7, pc}
 802256e:	46c0      	nop			@ (mov r8, r8)
 8022570:	200032d4 	.word	0x200032d4

08022574 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b082      	sub	sp, #8
 8022578:	af00      	add	r7, sp, #0
 802257a:	6078      	str	r0, [r7, #4]

}
 802257c:	46c0      	nop			@ (mov r8, r8)
 802257e:	46bd      	mov	sp, r7
 8022580:	b002      	add	sp, #8
 8022582:	bd80      	pop	{r7, pc}

08022584 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8022584:	b580      	push	{r7, lr}
 8022586:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8022588:	f7e9 fdfa 	bl	800c180 <SystemClock_Config>
}
 802258c:	46c0      	nop			@ (mov r8, r8)
 802258e:	46bd      	mov	sp, r7
 8022590:	bd80      	pop	{r7, pc}

08022592 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022592:	b580      	push	{r7, lr}
 8022594:	b084      	sub	sp, #16
 8022596:	af00      	add	r7, sp, #0
 8022598:	0002      	movs	r2, r0
 802259a:	1dfb      	adds	r3, r7, #7
 802259c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802259e:	230f      	movs	r3, #15
 80225a0:	18fb      	adds	r3, r7, r3
 80225a2:	2200      	movs	r2, #0
 80225a4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80225a6:	1dfb      	adds	r3, r7, #7
 80225a8:	781b      	ldrb	r3, [r3, #0]
 80225aa:	2b03      	cmp	r3, #3
 80225ac:	d017      	beq.n	80225de <USBD_Get_USB_Status+0x4c>
 80225ae:	dc1b      	bgt.n	80225e8 <USBD_Get_USB_Status+0x56>
 80225b0:	2b02      	cmp	r3, #2
 80225b2:	d00f      	beq.n	80225d4 <USBD_Get_USB_Status+0x42>
 80225b4:	dc18      	bgt.n	80225e8 <USBD_Get_USB_Status+0x56>
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d002      	beq.n	80225c0 <USBD_Get_USB_Status+0x2e>
 80225ba:	2b01      	cmp	r3, #1
 80225bc:	d005      	beq.n	80225ca <USBD_Get_USB_Status+0x38>
 80225be:	e013      	b.n	80225e8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80225c0:	230f      	movs	r3, #15
 80225c2:	18fb      	adds	r3, r7, r3
 80225c4:	2200      	movs	r2, #0
 80225c6:	701a      	strb	r2, [r3, #0]
    break;
 80225c8:	e013      	b.n	80225f2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80225ca:	230f      	movs	r3, #15
 80225cc:	18fb      	adds	r3, r7, r3
 80225ce:	2202      	movs	r2, #2
 80225d0:	701a      	strb	r2, [r3, #0]
    break;
 80225d2:	e00e      	b.n	80225f2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80225d4:	230f      	movs	r3, #15
 80225d6:	18fb      	adds	r3, r7, r3
 80225d8:	2201      	movs	r2, #1
 80225da:	701a      	strb	r2, [r3, #0]
    break;
 80225dc:	e009      	b.n	80225f2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80225de:	230f      	movs	r3, #15
 80225e0:	18fb      	adds	r3, r7, r3
 80225e2:	2202      	movs	r2, #2
 80225e4:	701a      	strb	r2, [r3, #0]
    break;
 80225e6:	e004      	b.n	80225f2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80225e8:	230f      	movs	r3, #15
 80225ea:	18fb      	adds	r3, r7, r3
 80225ec:	2202      	movs	r2, #2
 80225ee:	701a      	strb	r2, [r3, #0]
    break;
 80225f0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80225f2:	230f      	movs	r3, #15
 80225f4:	18fb      	adds	r3, r7, r3
 80225f6:	781b      	ldrb	r3, [r3, #0]
}
 80225f8:	0018      	movs	r0, r3
 80225fa:	46bd      	mov	sp, r7
 80225fc:	b004      	add	sp, #16
 80225fe:	bd80      	pop	{r7, pc}

08022600 <arm_cfft_radix4by2_q31>:
 8022600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022602:	465f      	mov	r7, fp
 8022604:	4656      	mov	r6, sl
 8022606:	464d      	mov	r5, r9
 8022608:	4644      	mov	r4, r8
 802260a:	000b      	movs	r3, r1
 802260c:	b4f0      	push	{r4, r5, r6, r7}
 802260e:	085b      	lsrs	r3, r3, #1
 8022610:	b08f      	sub	sp, #60	@ 0x3c
 8022612:	910a      	str	r1, [sp, #40]	@ 0x28
 8022614:	0007      	movs	r7, r0
 8022616:	9009      	str	r0, [sp, #36]	@ 0x24
 8022618:	0011      	movs	r1, r2
 802261a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802261c:	930c      	str	r3, [sp, #48]	@ 0x30
 802261e:	2b00      	cmp	r3, #0
 8022620:	d100      	bne.n	8022624 <arm_cfft_radix4by2_q31+0x24>
 8022622:	e0a0      	b.n	8022766 <arm_cfft_radix4by2_q31+0x166>
 8022624:	0002      	movs	r2, r0
 8022626:	00db      	lsls	r3, r3, #3
 8022628:	3204      	adds	r2, #4
 802262a:	4691      	mov	r9, r2
 802262c:	4698      	mov	r8, r3
 802262e:	000a      	movs	r2, r1
 8022630:	464e      	mov	r6, r9
 8022632:	4442      	add	r2, r8
 8022634:	4699      	mov	r9, r3
 8022636:	4688      	mov	r8, r1
 8022638:	9208      	str	r2, [sp, #32]
 802263a:	900d      	str	r0, [sp, #52]	@ 0x34
 802263c:	4643      	mov	r3, r8
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	469b      	mov	fp, r3
 8022642:	4643      	mov	r3, r8
 8022644:	685b      	ldr	r3, [r3, #4]
 8022646:	469a      	mov	sl, r3
 8022648:	683b      	ldr	r3, [r7, #0]
 802264a:	109c      	asrs	r4, r3, #2
 802264c:	464b      	mov	r3, r9
 802264e:	58fb      	ldr	r3, [r7, r3]
 8022650:	109a      	asrs	r2, r3, #2
 8022652:	18a3      	adds	r3, r4, r2
 8022654:	603b      	str	r3, [r7, #0]
 8022656:	6833      	ldr	r3, [r6, #0]
 8022658:	1aa4      	subs	r4, r4, r2
 802265a:	109d      	asrs	r5, r3, #2
 802265c:	464b      	mov	r3, r9
 802265e:	58f3      	ldr	r3, [r6, r3]
 8022660:	17e2      	asrs	r2, r4, #31
 8022662:	109b      	asrs	r3, r3, #2
 8022664:	18e9      	adds	r1, r5, r3
 8022666:	6031      	str	r1, [r6, #0]
 8022668:	0011      	movs	r1, r2
 802266a:	465a      	mov	r2, fp
 802266c:	17d2      	asrs	r2, r2, #31
 802266e:	0010      	movs	r0, r2
 8022670:	4652      	mov	r2, sl
 8022672:	1aed      	subs	r5, r5, r3
 8022674:	17eb      	asrs	r3, r5, #31
 8022676:	17d2      	asrs	r2, r2, #31
 8022678:	9307      	str	r3, [sp, #28]
 802267a:	9204      	str	r2, [sp, #16]
 802267c:	0003      	movs	r3, r0
 802267e:	465a      	mov	r2, fp
 8022680:	9006      	str	r0, [sp, #24]
 8022682:	0020      	movs	r0, r4
 8022684:	9105      	str	r1, [sp, #20]
 8022686:	f7dd ff9b 	bl	80005c0 <__aeabi_lmul>
 802268a:	2280      	movs	r2, #128	@ 0x80
 802268c:	2300      	movs	r3, #0
 802268e:	0612      	lsls	r2, r2, #24
 8022690:	1880      	adds	r0, r0, r2
 8022692:	4159      	adcs	r1, r3
 8022694:	2300      	movs	r3, #0
 8022696:	9101      	str	r1, [sp, #4]
 8022698:	9300      	str	r3, [sp, #0]
 802269a:	4652      	mov	r2, sl
 802269c:	9b04      	ldr	r3, [sp, #16]
 802269e:	0028      	movs	r0, r5
 80226a0:	17e9      	asrs	r1, r5, #31
 80226a2:	f7dd ff8d 	bl	80005c0 <__aeabi_lmul>
 80226a6:	9a00      	ldr	r2, [sp, #0]
 80226a8:	9b01      	ldr	r3, [sp, #4]
 80226aa:	1880      	adds	r0, r0, r2
 80226ac:	4159      	adcs	r1, r3
 80226ae:	2280      	movs	r2, #128	@ 0x80
 80226b0:	2300      	movs	r3, #0
 80226b2:	0612      	lsls	r2, r2, #24
 80226b4:	1880      	adds	r0, r0, r2
 80226b6:	4159      	adcs	r1, r3
 80226b8:	464a      	mov	r2, r9
 80226ba:	004b      	lsls	r3, r1, #1
 80226bc:	50bb      	str	r3, [r7, r2]
 80226be:	4658      	mov	r0, fp
 80226c0:	002a      	movs	r2, r5
 80226c2:	9b07      	ldr	r3, [sp, #28]
 80226c4:	9906      	ldr	r1, [sp, #24]
 80226c6:	f7dd ff7b 	bl	80005c0 <__aeabi_lmul>
 80226ca:	2280      	movs	r2, #128	@ 0x80
 80226cc:	2300      	movs	r3, #0
 80226ce:	0612      	lsls	r2, r2, #24
 80226d0:	1880      	adds	r0, r0, r2
 80226d2:	4159      	adcs	r1, r3
 80226d4:	2000      	movs	r0, #0
 80226d6:	9103      	str	r1, [sp, #12]
 80226d8:	9002      	str	r0, [sp, #8]
 80226da:	4652      	mov	r2, sl
 80226dc:	9b04      	ldr	r3, [sp, #16]
 80226de:	0020      	movs	r0, r4
 80226e0:	9905      	ldr	r1, [sp, #20]
 80226e2:	f7dd ff6d 	bl	80005c0 <__aeabi_lmul>
 80226e6:	9a02      	ldr	r2, [sp, #8]
 80226e8:	9b03      	ldr	r3, [sp, #12]
 80226ea:	1a12      	subs	r2, r2, r0
 80226ec:	418b      	sbcs	r3, r1
 80226ee:	2080      	movs	r0, #128	@ 0x80
 80226f0:	2100      	movs	r1, #0
 80226f2:	0600      	lsls	r0, r0, #24
 80226f4:	1812      	adds	r2, r2, r0
 80226f6:	414b      	adcs	r3, r1
 80226f8:	464a      	mov	r2, r9
 80226fa:	005b      	lsls	r3, r3, #1
 80226fc:	50b3      	str	r3, [r6, r2]
 80226fe:	2308      	movs	r3, #8
 8022700:	469c      	mov	ip, r3
 8022702:	9b08      	ldr	r3, [sp, #32]
 8022704:	44e0      	add	r8, ip
 8022706:	3708      	adds	r7, #8
 8022708:	3608      	adds	r6, #8
 802270a:	4598      	cmp	r8, r3
 802270c:	d196      	bne.n	802263c <arm_cfft_radix4by2_q31+0x3c>
 802270e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022710:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022712:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022714:	2302      	movs	r3, #2
 8022716:	003a      	movs	r2, r7
 8022718:	0029      	movs	r1, r5
 802271a:	0020      	movs	r0, r4
 802271c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802271e:	f000 f957 	bl	80229d0 <arm_radix4_butterfly_q31>
 8022722:	46a4      	mov	ip, r4
 8022724:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022726:	2302      	movs	r3, #2
 8022728:	0088      	lsls	r0, r1, #2
 802272a:	4460      	add	r0, ip
 802272c:	003a      	movs	r2, r7
 802272e:	0029      	movs	r1, r5
 8022730:	f000 f94e 	bl	80229d0 <arm_radix4_butterfly_q31>
 8022734:	46a4      	mov	ip, r4
 8022736:	0128      	lsls	r0, r5, #4
 8022738:	4460      	add	r0, ip
 802273a:	6833      	ldr	r3, [r6, #0]
 802273c:	005b      	lsls	r3, r3, #1
 802273e:	6033      	str	r3, [r6, #0]
 8022740:	6873      	ldr	r3, [r6, #4]
 8022742:	005b      	lsls	r3, r3, #1
 8022744:	6073      	str	r3, [r6, #4]
 8022746:	68b3      	ldr	r3, [r6, #8]
 8022748:	005b      	lsls	r3, r3, #1
 802274a:	60b3      	str	r3, [r6, #8]
 802274c:	68f3      	ldr	r3, [r6, #12]
 802274e:	005b      	lsls	r3, r3, #1
 8022750:	60f3      	str	r3, [r6, #12]
 8022752:	3610      	adds	r6, #16
 8022754:	42b0      	cmp	r0, r6
 8022756:	d1f0      	bne.n	802273a <arm_cfft_radix4by2_q31+0x13a>
 8022758:	b00f      	add	sp, #60	@ 0x3c
 802275a:	bc3c      	pop	{r2, r3, r4, r5}
 802275c:	4690      	mov	r8, r2
 802275e:	4699      	mov	r9, r3
 8022760:	46a2      	mov	sl, r4
 8022762:	46ab      	mov	fp, r5
 8022764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022766:	2302      	movs	r3, #2
 8022768:	2100      	movs	r1, #0
 802276a:	0015      	movs	r5, r2
 802276c:	f000 f930 	bl	80229d0 <arm_radix4_butterfly_q31>
 8022770:	46bc      	mov	ip, r7
 8022772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022774:	002a      	movs	r2, r5
 8022776:	0098      	lsls	r0, r3, #2
 8022778:	4460      	add	r0, ip
 802277a:	2302      	movs	r3, #2
 802277c:	2100      	movs	r1, #0
 802277e:	f000 f927 	bl	80229d0 <arm_radix4_butterfly_q31>
 8022782:	e7e9      	b.n	8022758 <arm_cfft_radix4by2_q31+0x158>

08022784 <arm_cfft_radix4by2_inverse_q31>:
 8022784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022786:	465f      	mov	r7, fp
 8022788:	4656      	mov	r6, sl
 802278a:	464d      	mov	r5, r9
 802278c:	4644      	mov	r4, r8
 802278e:	000b      	movs	r3, r1
 8022790:	b4f0      	push	{r4, r5, r6, r7}
 8022792:	085b      	lsrs	r3, r3, #1
 8022794:	b08f      	sub	sp, #60	@ 0x3c
 8022796:	910a      	str	r1, [sp, #40]	@ 0x28
 8022798:	0007      	movs	r7, r0
 802279a:	9009      	str	r0, [sp, #36]	@ 0x24
 802279c:	0011      	movs	r1, r2
 802279e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80227a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d100      	bne.n	80227a8 <arm_cfft_radix4by2_inverse_q31+0x24>
 80227a6:	e0a0      	b.n	80228ea <arm_cfft_radix4by2_inverse_q31+0x166>
 80227a8:	0002      	movs	r2, r0
 80227aa:	00db      	lsls	r3, r3, #3
 80227ac:	3204      	adds	r2, #4
 80227ae:	4691      	mov	r9, r2
 80227b0:	4698      	mov	r8, r3
 80227b2:	000a      	movs	r2, r1
 80227b4:	464e      	mov	r6, r9
 80227b6:	4442      	add	r2, r8
 80227b8:	4699      	mov	r9, r3
 80227ba:	4688      	mov	r8, r1
 80227bc:	9208      	str	r2, [sp, #32]
 80227be:	900d      	str	r0, [sp, #52]	@ 0x34
 80227c0:	4643      	mov	r3, r8
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	469b      	mov	fp, r3
 80227c6:	4643      	mov	r3, r8
 80227c8:	685b      	ldr	r3, [r3, #4]
 80227ca:	469a      	mov	sl, r3
 80227cc:	683b      	ldr	r3, [r7, #0]
 80227ce:	109c      	asrs	r4, r3, #2
 80227d0:	464b      	mov	r3, r9
 80227d2:	58fb      	ldr	r3, [r7, r3]
 80227d4:	109a      	asrs	r2, r3, #2
 80227d6:	18a3      	adds	r3, r4, r2
 80227d8:	603b      	str	r3, [r7, #0]
 80227da:	6833      	ldr	r3, [r6, #0]
 80227dc:	1aa4      	subs	r4, r4, r2
 80227de:	109d      	asrs	r5, r3, #2
 80227e0:	464b      	mov	r3, r9
 80227e2:	58f3      	ldr	r3, [r6, r3]
 80227e4:	17e2      	asrs	r2, r4, #31
 80227e6:	109b      	asrs	r3, r3, #2
 80227e8:	18e9      	adds	r1, r5, r3
 80227ea:	6031      	str	r1, [r6, #0]
 80227ec:	0011      	movs	r1, r2
 80227ee:	465a      	mov	r2, fp
 80227f0:	17d2      	asrs	r2, r2, #31
 80227f2:	0010      	movs	r0, r2
 80227f4:	4652      	mov	r2, sl
 80227f6:	1aed      	subs	r5, r5, r3
 80227f8:	17eb      	asrs	r3, r5, #31
 80227fa:	17d2      	asrs	r2, r2, #31
 80227fc:	9307      	str	r3, [sp, #28]
 80227fe:	9204      	str	r2, [sp, #16]
 8022800:	0003      	movs	r3, r0
 8022802:	465a      	mov	r2, fp
 8022804:	9006      	str	r0, [sp, #24]
 8022806:	0020      	movs	r0, r4
 8022808:	9105      	str	r1, [sp, #20]
 802280a:	f7dd fed9 	bl	80005c0 <__aeabi_lmul>
 802280e:	2280      	movs	r2, #128	@ 0x80
 8022810:	2300      	movs	r3, #0
 8022812:	0612      	lsls	r2, r2, #24
 8022814:	1880      	adds	r0, r0, r2
 8022816:	4159      	adcs	r1, r3
 8022818:	2300      	movs	r3, #0
 802281a:	9101      	str	r1, [sp, #4]
 802281c:	9300      	str	r3, [sp, #0]
 802281e:	4652      	mov	r2, sl
 8022820:	9b04      	ldr	r3, [sp, #16]
 8022822:	0028      	movs	r0, r5
 8022824:	17e9      	asrs	r1, r5, #31
 8022826:	f7dd fecb 	bl	80005c0 <__aeabi_lmul>
 802282a:	9a00      	ldr	r2, [sp, #0]
 802282c:	9b01      	ldr	r3, [sp, #4]
 802282e:	1a12      	subs	r2, r2, r0
 8022830:	418b      	sbcs	r3, r1
 8022832:	2080      	movs	r0, #128	@ 0x80
 8022834:	2100      	movs	r1, #0
 8022836:	0600      	lsls	r0, r0, #24
 8022838:	1812      	adds	r2, r2, r0
 802283a:	414b      	adcs	r3, r1
 802283c:	464a      	mov	r2, r9
 802283e:	005b      	lsls	r3, r3, #1
 8022840:	50bb      	str	r3, [r7, r2]
 8022842:	4658      	mov	r0, fp
 8022844:	002a      	movs	r2, r5
 8022846:	9b07      	ldr	r3, [sp, #28]
 8022848:	9906      	ldr	r1, [sp, #24]
 802284a:	f7dd feb9 	bl	80005c0 <__aeabi_lmul>
 802284e:	2280      	movs	r2, #128	@ 0x80
 8022850:	2300      	movs	r3, #0
 8022852:	0612      	lsls	r2, r2, #24
 8022854:	1880      	adds	r0, r0, r2
 8022856:	4159      	adcs	r1, r3
 8022858:	2000      	movs	r0, #0
 802285a:	9103      	str	r1, [sp, #12]
 802285c:	9002      	str	r0, [sp, #8]
 802285e:	4652      	mov	r2, sl
 8022860:	9b04      	ldr	r3, [sp, #16]
 8022862:	0020      	movs	r0, r4
 8022864:	9905      	ldr	r1, [sp, #20]
 8022866:	f7dd feab 	bl	80005c0 <__aeabi_lmul>
 802286a:	9b02      	ldr	r3, [sp, #8]
 802286c:	9c03      	ldr	r4, [sp, #12]
 802286e:	18c0      	adds	r0, r0, r3
 8022870:	4161      	adcs	r1, r4
 8022872:	2380      	movs	r3, #128	@ 0x80
 8022874:	2400      	movs	r4, #0
 8022876:	061b      	lsls	r3, r3, #24
 8022878:	18c0      	adds	r0, r0, r3
 802287a:	4161      	adcs	r1, r4
 802287c:	464a      	mov	r2, r9
 802287e:	004b      	lsls	r3, r1, #1
 8022880:	50b3      	str	r3, [r6, r2]
 8022882:	2308      	movs	r3, #8
 8022884:	469c      	mov	ip, r3
 8022886:	9b08      	ldr	r3, [sp, #32]
 8022888:	44e0      	add	r8, ip
 802288a:	3708      	adds	r7, #8
 802288c:	3608      	adds	r6, #8
 802288e:	4598      	cmp	r8, r3
 8022890:	d196      	bne.n	80227c0 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8022892:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022894:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022896:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022898:	2302      	movs	r3, #2
 802289a:	003a      	movs	r2, r7
 802289c:	0029      	movs	r1, r5
 802289e:	0020      	movs	r0, r4
 80228a0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80228a2:	f000 fb3b 	bl	8022f1c <arm_radix4_butterfly_inverse_q31>
 80228a6:	46a4      	mov	ip, r4
 80228a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80228aa:	2302      	movs	r3, #2
 80228ac:	0088      	lsls	r0, r1, #2
 80228ae:	4460      	add	r0, ip
 80228b0:	003a      	movs	r2, r7
 80228b2:	0029      	movs	r1, r5
 80228b4:	f000 fb32 	bl	8022f1c <arm_radix4_butterfly_inverse_q31>
 80228b8:	46a4      	mov	ip, r4
 80228ba:	0128      	lsls	r0, r5, #4
 80228bc:	4460      	add	r0, ip
 80228be:	6833      	ldr	r3, [r6, #0]
 80228c0:	005b      	lsls	r3, r3, #1
 80228c2:	6033      	str	r3, [r6, #0]
 80228c4:	6873      	ldr	r3, [r6, #4]
 80228c6:	005b      	lsls	r3, r3, #1
 80228c8:	6073      	str	r3, [r6, #4]
 80228ca:	68b3      	ldr	r3, [r6, #8]
 80228cc:	005b      	lsls	r3, r3, #1
 80228ce:	60b3      	str	r3, [r6, #8]
 80228d0:	68f3      	ldr	r3, [r6, #12]
 80228d2:	005b      	lsls	r3, r3, #1
 80228d4:	60f3      	str	r3, [r6, #12]
 80228d6:	3610      	adds	r6, #16
 80228d8:	42b0      	cmp	r0, r6
 80228da:	d1f0      	bne.n	80228be <arm_cfft_radix4by2_inverse_q31+0x13a>
 80228dc:	b00f      	add	sp, #60	@ 0x3c
 80228de:	bc3c      	pop	{r2, r3, r4, r5}
 80228e0:	4690      	mov	r8, r2
 80228e2:	4699      	mov	r9, r3
 80228e4:	46a2      	mov	sl, r4
 80228e6:	46ab      	mov	fp, r5
 80228e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228ea:	2302      	movs	r3, #2
 80228ec:	2100      	movs	r1, #0
 80228ee:	0015      	movs	r5, r2
 80228f0:	f000 fb14 	bl	8022f1c <arm_radix4_butterfly_inverse_q31>
 80228f4:	46bc      	mov	ip, r7
 80228f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80228f8:	002a      	movs	r2, r5
 80228fa:	0098      	lsls	r0, r3, #2
 80228fc:	4460      	add	r0, ip
 80228fe:	2302      	movs	r3, #2
 8022900:	2100      	movs	r1, #0
 8022902:	f000 fb0b 	bl	8022f1c <arm_radix4_butterfly_inverse_q31>
 8022906:	e7e9      	b.n	80228dc <arm_cfft_radix4by2_inverse_q31+0x158>

08022908 <arm_cfft_q31>:
 8022908:	b570      	push	{r4, r5, r6, lr}
 802290a:	001e      	movs	r6, r3
 802290c:	2380      	movs	r3, #128	@ 0x80
 802290e:	000d      	movs	r5, r1
 8022910:	0004      	movs	r4, r0
 8022912:	8801      	ldrh	r1, [r0, #0]
 8022914:	005b      	lsls	r3, r3, #1
 8022916:	2a01      	cmp	r2, #1
 8022918:	d028      	beq.n	802296c <arm_cfft_q31+0x64>
 802291a:	4299      	cmp	r1, r3
 802291c:	d020      	beq.n	8022960 <arm_cfft_q31+0x58>
 802291e:	d812      	bhi.n	8022946 <arm_cfft_q31+0x3e>
 8022920:	2920      	cmp	r1, #32
 8022922:	d004      	beq.n	802292e <arm_cfft_q31+0x26>
 8022924:	d949      	bls.n	80229ba <arm_cfft_q31+0xb2>
 8022926:	2940      	cmp	r1, #64	@ 0x40
 8022928:	d01a      	beq.n	8022960 <arm_cfft_q31+0x58>
 802292a:	2980      	cmp	r1, #128	@ 0x80
 802292c:	d103      	bne.n	8022936 <arm_cfft_q31+0x2e>
 802292e:	6862      	ldr	r2, [r4, #4]
 8022930:	0028      	movs	r0, r5
 8022932:	f7ff fe65 	bl	8022600 <arm_cfft_radix4by2_q31>
 8022936:	2e00      	cmp	r6, #0
 8022938:	d004      	beq.n	8022944 <arm_cfft_q31+0x3c>
 802293a:	68a2      	ldr	r2, [r4, #8]
 802293c:	89a1      	ldrh	r1, [r4, #12]
 802293e:	0028      	movs	r0, r5
 8022940:	f7dd fbe2 	bl	8000108 <arm_bitreversal_32>
 8022944:	bd70      	pop	{r4, r5, r6, pc}
 8022946:	2380      	movs	r3, #128	@ 0x80
 8022948:	00db      	lsls	r3, r3, #3
 802294a:	4299      	cmp	r1, r3
 802294c:	d008      	beq.n	8022960 <arm_cfft_q31+0x58>
 802294e:	d92f      	bls.n	80229b0 <arm_cfft_q31+0xa8>
 8022950:	2380      	movs	r3, #128	@ 0x80
 8022952:	011b      	lsls	r3, r3, #4
 8022954:	4299      	cmp	r1, r3
 8022956:	d0ea      	beq.n	802292e <arm_cfft_q31+0x26>
 8022958:	2380      	movs	r3, #128	@ 0x80
 802295a:	015b      	lsls	r3, r3, #5
 802295c:	4299      	cmp	r1, r3
 802295e:	d1ea      	bne.n	8022936 <arm_cfft_q31+0x2e>
 8022960:	2301      	movs	r3, #1
 8022962:	6862      	ldr	r2, [r4, #4]
 8022964:	0028      	movs	r0, r5
 8022966:	f000 f833 	bl	80229d0 <arm_radix4_butterfly_q31>
 802296a:	e7e4      	b.n	8022936 <arm_cfft_q31+0x2e>
 802296c:	4299      	cmp	r1, r3
 802296e:	d019      	beq.n	80229a4 <arm_cfft_q31+0x9c>
 8022970:	d80b      	bhi.n	802298a <arm_cfft_q31+0x82>
 8022972:	2920      	cmp	r1, #32
 8022974:	d004      	beq.n	8022980 <arm_cfft_q31+0x78>
 8022976:	d928      	bls.n	80229ca <arm_cfft_q31+0xc2>
 8022978:	2940      	cmp	r1, #64	@ 0x40
 802297a:	d013      	beq.n	80229a4 <arm_cfft_q31+0x9c>
 802297c:	2980      	cmp	r1, #128	@ 0x80
 802297e:	d1da      	bne.n	8022936 <arm_cfft_q31+0x2e>
 8022980:	6862      	ldr	r2, [r4, #4]
 8022982:	0028      	movs	r0, r5
 8022984:	f7ff fefe 	bl	8022784 <arm_cfft_radix4by2_inverse_q31>
 8022988:	e7d5      	b.n	8022936 <arm_cfft_q31+0x2e>
 802298a:	2380      	movs	r3, #128	@ 0x80
 802298c:	00db      	lsls	r3, r3, #3
 802298e:	4299      	cmp	r1, r3
 8022990:	d008      	beq.n	80229a4 <arm_cfft_q31+0x9c>
 8022992:	d915      	bls.n	80229c0 <arm_cfft_q31+0xb8>
 8022994:	2380      	movs	r3, #128	@ 0x80
 8022996:	011b      	lsls	r3, r3, #4
 8022998:	4299      	cmp	r1, r3
 802299a:	d0f1      	beq.n	8022980 <arm_cfft_q31+0x78>
 802299c:	2380      	movs	r3, #128	@ 0x80
 802299e:	015b      	lsls	r3, r3, #5
 80229a0:	4299      	cmp	r1, r3
 80229a2:	d1c8      	bne.n	8022936 <arm_cfft_q31+0x2e>
 80229a4:	2301      	movs	r3, #1
 80229a6:	6862      	ldr	r2, [r4, #4]
 80229a8:	0028      	movs	r0, r5
 80229aa:	f000 fab7 	bl	8022f1c <arm_radix4_butterfly_inverse_q31>
 80229ae:	e7c2      	b.n	8022936 <arm_cfft_q31+0x2e>
 80229b0:	2380      	movs	r3, #128	@ 0x80
 80229b2:	009b      	lsls	r3, r3, #2
 80229b4:	4299      	cmp	r1, r3
 80229b6:	d0ba      	beq.n	802292e <arm_cfft_q31+0x26>
 80229b8:	e7bd      	b.n	8022936 <arm_cfft_q31+0x2e>
 80229ba:	2910      	cmp	r1, #16
 80229bc:	d1bb      	bne.n	8022936 <arm_cfft_q31+0x2e>
 80229be:	e7cf      	b.n	8022960 <arm_cfft_q31+0x58>
 80229c0:	2380      	movs	r3, #128	@ 0x80
 80229c2:	009b      	lsls	r3, r3, #2
 80229c4:	4299      	cmp	r1, r3
 80229c6:	d0db      	beq.n	8022980 <arm_cfft_q31+0x78>
 80229c8:	e7b5      	b.n	8022936 <arm_cfft_q31+0x2e>
 80229ca:	2910      	cmp	r1, #16
 80229cc:	d1b3      	bne.n	8022936 <arm_cfft_q31+0x2e>
 80229ce:	e7e9      	b.n	80229a4 <arm_cfft_q31+0x9c>

080229d0 <arm_radix4_butterfly_q31>:
 80229d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229d2:	464d      	mov	r5, r9
 80229d4:	4644      	mov	r4, r8
 80229d6:	465f      	mov	r7, fp
 80229d8:	4656      	mov	r6, sl
 80229da:	469c      	mov	ip, r3
 80229dc:	b4f0      	push	{r4, r5, r6, r7}
 80229de:	b0a7      	sub	sp, #156	@ 0x9c
 80229e0:	9114      	str	r1, [sp, #80]	@ 0x50
 80229e2:	0889      	lsrs	r1, r1, #2
 80229e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80229e6:	00cb      	lsls	r3, r1, #3
 80229e8:	0015      	movs	r5, r2
 80229ea:	9223      	str	r2, [sp, #140]	@ 0x8c
 80229ec:	18c2      	adds	r2, r0, r3
 80229ee:	000c      	movs	r4, r1
 80229f0:	469a      	mov	sl, r3
 80229f2:	9124      	str	r1, [sp, #144]	@ 0x90
 80229f4:	18d1      	adds	r1, r2, r3
 80229f6:	4663      	mov	r3, ip
 80229f8:	468b      	mov	fp, r1
 80229fa:	0119      	lsls	r1, r3, #4
 80229fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80229fe:	00d9      	lsls	r1, r3, #3
 8022a00:	005b      	lsls	r3, r3, #1
 8022a02:	4463      	add	r3, ip
 8022a04:	910e      	str	r1, [sp, #56]	@ 0x38
 8022a06:	00d9      	lsls	r1, r3, #3
 8022a08:	465b      	mov	r3, fp
 8022a0a:	44da      	add	sl, fp
 8022a0c:	4690      	mov	r8, r2
 8022a0e:	4683      	mov	fp, r0
 8022a10:	4699      	mov	r9, r3
 8022a12:	9022      	str	r0, [sp, #136]	@ 0x88
 8022a14:	9025      	str	r0, [sp, #148]	@ 0x94
 8022a16:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022a18:	9502      	str	r5, [sp, #8]
 8022a1a:	9500      	str	r5, [sp, #0]
 8022a1c:	9501      	str	r5, [sp, #4]
 8022a1e:	9407      	str	r4, [sp, #28]
 8022a20:	465b      	mov	r3, fp
 8022a22:	681b      	ldr	r3, [r3, #0]
 8022a24:	4642      	mov	r2, r8
 8022a26:	111c      	asrs	r4, r3, #4
 8022a28:	464b      	mov	r3, r9
 8022a2a:	4658      	mov	r0, fp
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	6812      	ldr	r2, [r2, #0]
 8022a30:	111b      	asrs	r3, r3, #4
 8022a32:	18e7      	adds	r7, r4, r3
 8022a34:	1ae3      	subs	r3, r4, r3
 8022a36:	1114      	asrs	r4, r2, #4
 8022a38:	4652      	mov	r2, sl
 8022a3a:	6840      	ldr	r0, [r0, #4]
 8022a3c:	6812      	ldr	r2, [r2, #0]
 8022a3e:	1105      	asrs	r5, r0, #4
 8022a40:	4648      	mov	r0, r9
 8022a42:	9303      	str	r3, [sp, #12]
 8022a44:	1113      	asrs	r3, r2, #4
 8022a46:	18e2      	adds	r2, r4, r3
 8022a48:	465c      	mov	r4, fp
 8022a4a:	6840      	ldr	r0, [r0, #4]
 8022a4c:	1103      	asrs	r3, r0, #4
 8022a4e:	18ee      	adds	r6, r5, r3
 8022a50:	1ae8      	subs	r0, r5, r3
 8022a52:	18bb      	adds	r3, r7, r2
 8022a54:	6023      	str	r3, [r4, #0]
 8022a56:	4644      	mov	r4, r8
 8022a58:	6864      	ldr	r4, [r4, #4]
 8022a5a:	9004      	str	r0, [sp, #16]
 8022a5c:	1125      	asrs	r5, r4, #4
 8022a5e:	4654      	mov	r4, sl
 8022a60:	6864      	ldr	r4, [r4, #4]
 8022a62:	1123      	asrs	r3, r4, #4
 8022a64:	465c      	mov	r4, fp
 8022a66:	18eb      	adds	r3, r5, r3
 8022a68:	18f1      	adds	r1, r6, r3
 8022a6a:	6061      	str	r1, [r4, #4]
 8022a6c:	4655      	mov	r5, sl
 8022a6e:	4644      	mov	r4, r8
 8022a70:	686d      	ldr	r5, [r5, #4]
 8022a72:	6864      	ldr	r4, [r4, #4]
 8022a74:	1129      	asrs	r1, r5, #4
 8022a76:	1124      	asrs	r4, r4, #4
 8022a78:	1a64      	subs	r4, r4, r1
 8022a7a:	4641      	mov	r1, r8
 8022a7c:	6809      	ldr	r1, [r1, #0]
 8022a7e:	9405      	str	r4, [sp, #20]
 8022a80:	1108      	asrs	r0, r1, #4
 8022a82:	4651      	mov	r1, sl
 8022a84:	6809      	ldr	r1, [r1, #0]
 8022a86:	1abc      	subs	r4, r7, r2
 8022a88:	1109      	asrs	r1, r1, #4
 8022a8a:	1a41      	subs	r1, r0, r1
 8022a8c:	17e2      	asrs	r2, r4, #31
 8022a8e:	9106      	str	r1, [sp, #24]
 8022a90:	0011      	movs	r1, r2
 8022a92:	9a01      	ldr	r2, [sp, #4]
 8022a94:	9108      	str	r1, [sp, #32]
 8022a96:	6817      	ldr	r7, [r2, #0]
 8022a98:	17fd      	asrs	r5, r7, #31
 8022a9a:	0028      	movs	r0, r5
 8022a9c:	1af5      	subs	r5, r6, r3
 8022a9e:	17ee      	asrs	r6, r5, #31
 8022aa0:	960a      	str	r6, [sp, #40]	@ 0x28
 8022aa2:	6856      	ldr	r6, [r2, #4]
 8022aa4:	9009      	str	r0, [sp, #36]	@ 0x24
 8022aa6:	17f3      	asrs	r3, r6, #31
 8022aa8:	003a      	movs	r2, r7
 8022aaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022aac:	0003      	movs	r3, r0
 8022aae:	0020      	movs	r0, r4
 8022ab0:	f7dd fd86 	bl	80005c0 <__aeabi_lmul>
 8022ab4:	0032      	movs	r2, r6
 8022ab6:	17f3      	asrs	r3, r6, #31
 8022ab8:	910c      	str	r1, [sp, #48]	@ 0x30
 8022aba:	0028      	movs	r0, r5
 8022abc:	17e9      	asrs	r1, r5, #31
 8022abe:	f7dd fd7f 	bl	80005c0 <__aeabi_lmul>
 8022ac2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022ac4:	002a      	movs	r2, r5
 8022ac6:	4684      	mov	ip, r0
 8022ac8:	4640      	mov	r0, r8
 8022aca:	4461      	add	r1, ip
 8022acc:	0049      	lsls	r1, r1, #1
 8022ace:	6001      	str	r1, [r0, #0]
 8022ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022ad2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022ad4:	0038      	movs	r0, r7
 8022ad6:	f7dd fd73 	bl	80005c0 <__aeabi_lmul>
 8022ada:	0032      	movs	r2, r6
 8022adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022ade:	000d      	movs	r5, r1
 8022ae0:	0020      	movs	r0, r4
 8022ae2:	9908      	ldr	r1, [sp, #32]
 8022ae4:	f7dd fd6c 	bl	80005c0 <__aeabi_lmul>
 8022ae8:	4646      	mov	r6, r8
 8022aea:	1a6d      	subs	r5, r5, r1
 8022aec:	006d      	lsls	r5, r5, #1
 8022aee:	6075      	str	r5, [r6, #4]
 8022af0:	9903      	ldr	r1, [sp, #12]
 8022af2:	9d05      	ldr	r5, [sp, #20]
 8022af4:	000c      	movs	r4, r1
 8022af6:	46ac      	mov	ip, r5
 8022af8:	4464      	add	r4, ip
 8022afa:	17e6      	asrs	r6, r4, #31
 8022afc:	0031      	movs	r1, r6
 8022afe:	9b00      	ldr	r3, [sp, #0]
 8022b00:	9804      	ldr	r0, [sp, #16]
 8022b02:	681e      	ldr	r6, [r3, #0]
 8022b04:	17f7      	asrs	r7, r6, #31
 8022b06:	9709      	str	r7, [sp, #36]	@ 0x24
 8022b08:	9f06      	ldr	r7, [sp, #24]
 8022b0a:	0032      	movs	r2, r6
 8022b0c:	1bc7      	subs	r7, r0, r7
 8022b0e:	17fd      	asrs	r5, r7, #31
 8022b10:	950a      	str	r5, [sp, #40]	@ 0x28
 8022b12:	685d      	ldr	r5, [r3, #4]
 8022b14:	17f3      	asrs	r3, r6, #31
 8022b16:	17e8      	asrs	r0, r5, #31
 8022b18:	900b      	str	r0, [sp, #44]	@ 0x2c
 8022b1a:	0020      	movs	r0, r4
 8022b1c:	9108      	str	r1, [sp, #32]
 8022b1e:	f7dd fd4f 	bl	80005c0 <__aeabi_lmul>
 8022b22:	002a      	movs	r2, r5
 8022b24:	17eb      	asrs	r3, r5, #31
 8022b26:	910c      	str	r1, [sp, #48]	@ 0x30
 8022b28:	0038      	movs	r0, r7
 8022b2a:	17f9      	asrs	r1, r7, #31
 8022b2c:	f7dd fd48 	bl	80005c0 <__aeabi_lmul>
 8022b30:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022b32:	003a      	movs	r2, r7
 8022b34:	4684      	mov	ip, r0
 8022b36:	4648      	mov	r0, r9
 8022b38:	4461      	add	r1, ip
 8022b3a:	0049      	lsls	r1, r1, #1
 8022b3c:	6001      	str	r1, [r0, #0]
 8022b3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b40:	0030      	movs	r0, r6
 8022b42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022b44:	f7dd fd3c 	bl	80005c0 <__aeabi_lmul>
 8022b48:	002a      	movs	r2, r5
 8022b4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b4c:	000e      	movs	r6, r1
 8022b4e:	0020      	movs	r0, r4
 8022b50:	9908      	ldr	r1, [sp, #32]
 8022b52:	f7dd fd35 	bl	80005c0 <__aeabi_lmul>
 8022b56:	464c      	mov	r4, r9
 8022b58:	9d05      	ldr	r5, [sp, #20]
 8022b5a:	1a76      	subs	r6, r6, r1
 8022b5c:	9903      	ldr	r1, [sp, #12]
 8022b5e:	0076      	lsls	r6, r6, #1
 8022b60:	6066      	str	r6, [r4, #4]
 8022b62:	1b4c      	subs	r4, r1, r5
 8022b64:	9e06      	ldr	r6, [sp, #24]
 8022b66:	17e1      	asrs	r1, r4, #31
 8022b68:	9103      	str	r1, [sp, #12]
 8022b6a:	9902      	ldr	r1, [sp, #8]
 8022b6c:	46b4      	mov	ip, r6
 8022b6e:	680f      	ldr	r7, [r1, #0]
 8022b70:	9804      	ldr	r0, [sp, #16]
 8022b72:	17fd      	asrs	r5, r7, #31
 8022b74:	002b      	movs	r3, r5
 8022b76:	684e      	ldr	r6, [r1, #4]
 8022b78:	4460      	add	r0, ip
 8022b7a:	0005      	movs	r5, r0
 8022b7c:	17c0      	asrs	r0, r0, #31
 8022b7e:	9005      	str	r0, [sp, #20]
 8022b80:	17f0      	asrs	r0, r6, #31
 8022b82:	9006      	str	r0, [sp, #24]
 8022b84:	003a      	movs	r2, r7
 8022b86:	0020      	movs	r0, r4
 8022b88:	17e1      	asrs	r1, r4, #31
 8022b8a:	9304      	str	r3, [sp, #16]
 8022b8c:	f7dd fd18 	bl	80005c0 <__aeabi_lmul>
 8022b90:	0032      	movs	r2, r6
 8022b92:	9108      	str	r1, [sp, #32]
 8022b94:	17f3      	asrs	r3, r6, #31
 8022b96:	0028      	movs	r0, r5
 8022b98:	17e9      	asrs	r1, r5, #31
 8022b9a:	f7dd fd11 	bl	80005c0 <__aeabi_lmul>
 8022b9e:	9808      	ldr	r0, [sp, #32]
 8022ba0:	002a      	movs	r2, r5
 8022ba2:	4684      	mov	ip, r0
 8022ba4:	4650      	mov	r0, sl
 8022ba6:	4461      	add	r1, ip
 8022ba8:	0049      	lsls	r1, r1, #1
 8022baa:	6001      	str	r1, [r0, #0]
 8022bac:	9b05      	ldr	r3, [sp, #20]
 8022bae:	9904      	ldr	r1, [sp, #16]
 8022bb0:	0038      	movs	r0, r7
 8022bb2:	f7dd fd05 	bl	80005c0 <__aeabi_lmul>
 8022bb6:	0020      	movs	r0, r4
 8022bb8:	2408      	movs	r4, #8
 8022bba:	000d      	movs	r5, r1
 8022bbc:	0032      	movs	r2, r6
 8022bbe:	9b06      	ldr	r3, [sp, #24]
 8022bc0:	9903      	ldr	r1, [sp, #12]
 8022bc2:	f7dd fcfd 	bl	80005c0 <__aeabi_lmul>
 8022bc6:	46a4      	mov	ip, r4
 8022bc8:	4650      	mov	r0, sl
 8022bca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022bcc:	44e3      	add	fp, ip
 8022bce:	44e0      	add	r8, ip
 8022bd0:	44e1      	add	r9, ip
 8022bd2:	44e2      	add	sl, ip
 8022bd4:	46a4      	mov	ip, r4
 8022bd6:	1a6d      	subs	r5, r5, r1
 8022bd8:	006d      	lsls	r5, r5, #1
 8022bda:	9a01      	ldr	r2, [sp, #4]
 8022bdc:	6045      	str	r5, [r0, #4]
 8022bde:	9807      	ldr	r0, [sp, #28]
 8022be0:	4462      	add	r2, ip
 8022be2:	3801      	subs	r0, #1
 8022be4:	9201      	str	r2, [sp, #4]
 8022be6:	9007      	str	r0, [sp, #28]
 8022be8:	9b00      	ldr	r3, [sp, #0]
 8022bea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022bec:	9902      	ldr	r1, [sp, #8]
 8022bee:	4694      	mov	ip, r2
 8022bf0:	4463      	add	r3, ip
 8022bf2:	9300      	str	r3, [sp, #0]
 8022bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022bf6:	469c      	mov	ip, r3
 8022bf8:	4461      	add	r1, ip
 8022bfa:	9102      	str	r1, [sp, #8]
 8022bfc:	2800      	cmp	r0, #0
 8022bfe:	d000      	beq.n	8022c02 <arm_radix4_butterfly_q31+0x232>
 8022c00:	e70e      	b.n	8022a20 <arm_radix4_butterfly_q31+0x50>
 8022c02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022c04:	009b      	lsls	r3, r3, #2
 8022c06:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022c08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c0a:	9320      	str	r3, [sp, #128]	@ 0x80
 8022c0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022c0e:	2b04      	cmp	r3, #4
 8022c10:	d800      	bhi.n	8022c14 <arm_radix4_butterfly_q31+0x244>
 8022c12:	e180      	b.n	8022f16 <arm_radix4_butterfly_q31+0x546>
 8022c14:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022c16:	0893      	lsrs	r3, r2, #2
 8022c18:	1e59      	subs	r1, r3, #1
 8022c1a:	9321      	str	r3, [sp, #132]	@ 0x84
 8022c1c:	00db      	lsls	r3, r3, #3
 8022c1e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8022c20:	00d3      	lsls	r3, r2, #3
 8022c22:	9300      	str	r3, [sp, #0]
 8022c24:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022c26:	911a      	str	r1, [sp, #104]	@ 0x68
 8022c28:	00da      	lsls	r2, r3, #3
 8022c2a:	921e      	str	r2, [sp, #120]	@ 0x78
 8022c2c:	011a      	lsls	r2, r3, #4
 8022c2e:	921d      	str	r2, [sp, #116]	@ 0x74
 8022c30:	001a      	movs	r2, r3
 8022c32:	4694      	mov	ip, r2
 8022c34:	005b      	lsls	r3, r3, #1
 8022c36:	4463      	add	r3, ip
 8022c38:	00db      	lsls	r3, r3, #3
 8022c3a:	931c      	str	r3, [sp, #112]	@ 0x70
 8022c3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022c3e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022c40:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022c42:	9318      	str	r3, [sp, #96]	@ 0x60
 8022c44:	9319      	str	r3, [sp, #100]	@ 0x64
 8022c46:	9316      	str	r3, [sp, #88]	@ 0x58
 8022c48:	2300      	movs	r3, #0
 8022c4a:	9315      	str	r3, [sp, #84]	@ 0x54
 8022c4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022c4e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8022c50:	681a      	ldr	r2, [r3, #0]
 8022c52:	685b      	ldr	r3, [r3, #4]
 8022c54:	9205      	str	r2, [sp, #20]
 8022c56:	9306      	str	r3, [sp, #24]
 8022c58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022c5a:	468c      	mov	ip, r1
 8022c5c:	681a      	ldr	r2, [r3, #0]
 8022c5e:	685b      	ldr	r3, [r3, #4]
 8022c60:	9207      	str	r2, [sp, #28]
 8022c62:	9308      	str	r3, [sp, #32]
 8022c64:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022c66:	681a      	ldr	r2, [r3, #0]
 8022c68:	685b      	ldr	r3, [r3, #4]
 8022c6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8022c6c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c70:	0013      	movs	r3, r2
 8022c72:	4463      	add	r3, ip
 8022c74:	4698      	mov	r8, r3
 8022c76:	0013      	movs	r3, r2
 8022c78:	4442      	add	r2, r8
 8022c7a:	4691      	mov	r9, r2
 8022c7c:	001a      	movs	r2, r3
 8022c7e:	444a      	add	r2, r9
 8022c80:	4692      	mov	sl, r2
 8022c82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022c84:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022c86:	4293      	cmp	r3, r2
 8022c88:	d800      	bhi.n	8022c8c <arm_radix4_butterfly_q31+0x2bc>
 8022c8a:	e0dd      	b.n	8022e48 <arm_radix4_butterfly_q31+0x478>
 8022c8c:	4694      	mov	ip, r2
 8022c8e:	468b      	mov	fp, r1
 8022c90:	4644      	mov	r4, r8
 8022c92:	4655      	mov	r5, sl
 8022c94:	9b07      	ldr	r3, [sp, #28]
 8022c96:	17db      	asrs	r3, r3, #31
 8022c98:	930c      	str	r3, [sp, #48]	@ 0x30
 8022c9a:	9b08      	ldr	r3, [sp, #32]
 8022c9c:	17db      	asrs	r3, r3, #31
 8022c9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022ca0:	9b05      	ldr	r3, [sp, #20]
 8022ca2:	17db      	asrs	r3, r3, #31
 8022ca4:	930e      	str	r3, [sp, #56]	@ 0x38
 8022ca6:	9b06      	ldr	r3, [sp, #24]
 8022ca8:	17db      	asrs	r3, r3, #31
 8022caa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022cae:	17db      	asrs	r3, r3, #31
 8022cb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8022cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022cb4:	17db      	asrs	r3, r3, #31
 8022cb6:	9311      	str	r3, [sp, #68]	@ 0x44
 8022cb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022cba:	4463      	add	r3, ip
 8022cbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022cbe:	465b      	mov	r3, fp
 8022cc0:	4659      	mov	r1, fp
 8022cc2:	681a      	ldr	r2, [r3, #0]
 8022cc4:	464b      	mov	r3, r9
 8022cc6:	684f      	ldr	r7, [r1, #4]
 8022cc8:	4649      	mov	r1, r9
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	18d6      	adds	r6, r2, r3
 8022cce:	1ad3      	subs	r3, r2, r3
 8022cd0:	9301      	str	r3, [sp, #4]
 8022cd2:	684b      	ldr	r3, [r1, #4]
 8022cd4:	18f8      	adds	r0, r7, r3
 8022cd6:	1af9      	subs	r1, r7, r3
 8022cd8:	6827      	ldr	r7, [r4, #0]
 8022cda:	9102      	str	r1, [sp, #8]
 8022cdc:	003a      	movs	r2, r7
 8022cde:	682f      	ldr	r7, [r5, #0]
 8022ce0:	46bc      	mov	ip, r7
 8022ce2:	465f      	mov	r7, fp
 8022ce4:	4462      	add	r2, ip
 8022ce6:	18b3      	adds	r3, r6, r2
 8022ce8:	109b      	asrs	r3, r3, #2
 8022cea:	603b      	str	r3, [r7, #0]
 8022cec:	6867      	ldr	r7, [r4, #4]
 8022cee:	1ab6      	subs	r6, r6, r2
 8022cf0:	46b8      	mov	r8, r7
 8022cf2:	686f      	ldr	r7, [r5, #4]
 8022cf4:	17f2      	asrs	r2, r6, #31
 8022cf6:	46bc      	mov	ip, r7
 8022cf8:	44e0      	add	r8, ip
 8022cfa:	4643      	mov	r3, r8
 8022cfc:	465f      	mov	r7, fp
 8022cfe:	18c1      	adds	r1, r0, r3
 8022d00:	1089      	asrs	r1, r1, #2
 8022d02:	6079      	str	r1, [r7, #4]
 8022d04:	9900      	ldr	r1, [sp, #0]
 8022d06:	4690      	mov	r8, r2
 8022d08:	468c      	mov	ip, r1
 8022d0a:	6867      	ldr	r7, [r4, #4]
 8022d0c:	6869      	ldr	r1, [r5, #4]
 8022d0e:	44e3      	add	fp, ip
 8022d10:	1a7f      	subs	r7, r7, r1
 8022d12:	9703      	str	r7, [sp, #12]
 8022d14:	6829      	ldr	r1, [r5, #0]
 8022d16:	6827      	ldr	r7, [r4, #0]
 8022d18:	1a7f      	subs	r7, r7, r1
 8022d1a:	9704      	str	r7, [sp, #16]
 8022d1c:	1ac7      	subs	r7, r0, r3
 8022d1e:	17fa      	asrs	r2, r7, #31
 8022d20:	4692      	mov	sl, r2
 8022d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022d24:	9a07      	ldr	r2, [sp, #28]
 8022d26:	0030      	movs	r0, r6
 8022d28:	4641      	mov	r1, r8
 8022d2a:	f7dd fc49 	bl	80005c0 <__aeabi_lmul>
 8022d2e:	9a08      	ldr	r2, [sp, #32]
 8022d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022d32:	9112      	str	r1, [sp, #72]	@ 0x48
 8022d34:	0038      	movs	r0, r7
 8022d36:	4651      	mov	r1, sl
 8022d38:	f7dd fc42 	bl	80005c0 <__aeabi_lmul>
 8022d3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022d3e:	9a07      	ldr	r2, [sp, #28]
 8022d40:	4684      	mov	ip, r0
 8022d42:	4461      	add	r1, ip
 8022d44:	1049      	asrs	r1, r1, #1
 8022d46:	6021      	str	r1, [r4, #0]
 8022d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022d4a:	0038      	movs	r0, r7
 8022d4c:	4651      	mov	r1, sl
 8022d4e:	f7dd fc37 	bl	80005c0 <__aeabi_lmul>
 8022d52:	9a08      	ldr	r2, [sp, #32]
 8022d54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022d56:	000f      	movs	r7, r1
 8022d58:	0030      	movs	r0, r6
 8022d5a:	4641      	mov	r1, r8
 8022d5c:	f7dd fc30 	bl	80005c0 <__aeabi_lmul>
 8022d60:	9b00      	ldr	r3, [sp, #0]
 8022d62:	9a01      	ldr	r2, [sp, #4]
 8022d64:	469c      	mov	ip, r3
 8022d66:	9803      	ldr	r0, [sp, #12]
 8022d68:	1a7f      	subs	r7, r7, r1
 8022d6a:	107f      	asrs	r7, r7, #1
 8022d6c:	6067      	str	r7, [r4, #4]
 8022d6e:	0016      	movs	r6, r2
 8022d70:	4464      	add	r4, ip
 8022d72:	4684      	mov	ip, r0
 8022d74:	4466      	add	r6, ip
 8022d76:	17f2      	asrs	r2, r6, #31
 8022d78:	4690      	mov	r8, r2
 8022d7a:	9902      	ldr	r1, [sp, #8]
 8022d7c:	9f04      	ldr	r7, [sp, #16]
 8022d7e:	0030      	movs	r0, r6
 8022d80:	1bcf      	subs	r7, r1, r7
 8022d82:	17fa      	asrs	r2, r7, #31
 8022d84:	4692      	mov	sl, r2
 8022d86:	4641      	mov	r1, r8
 8022d88:	9a05      	ldr	r2, [sp, #20]
 8022d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022d8c:	f7dd fc18 	bl	80005c0 <__aeabi_lmul>
 8022d90:	9a06      	ldr	r2, [sp, #24]
 8022d92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022d94:	9112      	str	r1, [sp, #72]	@ 0x48
 8022d96:	0038      	movs	r0, r7
 8022d98:	4651      	mov	r1, sl
 8022d9a:	f7dd fc11 	bl	80005c0 <__aeabi_lmul>
 8022d9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022da0:	9a05      	ldr	r2, [sp, #20]
 8022da2:	4684      	mov	ip, r0
 8022da4:	4648      	mov	r0, r9
 8022da6:	4461      	add	r1, ip
 8022da8:	1049      	asrs	r1, r1, #1
 8022daa:	6001      	str	r1, [r0, #0]
 8022dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022dae:	0038      	movs	r0, r7
 8022db0:	4651      	mov	r1, sl
 8022db2:	f7dd fc05 	bl	80005c0 <__aeabi_lmul>
 8022db6:	9a06      	ldr	r2, [sp, #24]
 8022db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022dba:	000f      	movs	r7, r1
 8022dbc:	0030      	movs	r0, r6
 8022dbe:	4641      	mov	r1, r8
 8022dc0:	f7dd fbfe 	bl	80005c0 <__aeabi_lmul>
 8022dc4:	464e      	mov	r6, r9
 8022dc6:	9a00      	ldr	r2, [sp, #0]
 8022dc8:	9b01      	ldr	r3, [sp, #4]
 8022dca:	4694      	mov	ip, r2
 8022dcc:	9803      	ldr	r0, [sp, #12]
 8022dce:	1a7f      	subs	r7, r7, r1
 8022dd0:	107f      	asrs	r7, r7, #1
 8022dd2:	6077      	str	r7, [r6, #4]
 8022dd4:	1a1e      	subs	r6, r3, r0
 8022dd6:	9b04      	ldr	r3, [sp, #16]
 8022dd8:	44e1      	add	r9, ip
 8022dda:	469c      	mov	ip, r3
 8022ddc:	17f0      	asrs	r0, r6, #31
 8022dde:	4680      	mov	r8, r0
 8022de0:	9902      	ldr	r1, [sp, #8]
 8022de2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022de4:	4461      	add	r1, ip
 8022de6:	17cb      	asrs	r3, r1, #31
 8022de8:	000f      	movs	r7, r1
 8022dea:	469a      	mov	sl, r3
 8022dec:	0030      	movs	r0, r6
 8022dee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022df0:	4641      	mov	r1, r8
 8022df2:	f7dd fbe5 	bl	80005c0 <__aeabi_lmul>
 8022df6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022df8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022dfa:	9101      	str	r1, [sp, #4]
 8022dfc:	0038      	movs	r0, r7
 8022dfe:	4651      	mov	r1, sl
 8022e00:	f7dd fbde 	bl	80005c0 <__aeabi_lmul>
 8022e04:	9801      	ldr	r0, [sp, #4]
 8022e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022e08:	4684      	mov	ip, r0
 8022e0a:	4461      	add	r1, ip
 8022e0c:	1049      	asrs	r1, r1, #1
 8022e0e:	6029      	str	r1, [r5, #0]
 8022e10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022e12:	0038      	movs	r0, r7
 8022e14:	4651      	mov	r1, sl
 8022e16:	f7dd fbd3 	bl	80005c0 <__aeabi_lmul>
 8022e1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022e1c:	000f      	movs	r7, r1
 8022e1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022e20:	0030      	movs	r0, r6
 8022e22:	4641      	mov	r1, r8
 8022e24:	f7dd fbcc 	bl	80005c0 <__aeabi_lmul>
 8022e28:	1a7f      	subs	r7, r7, r1
 8022e2a:	107f      	asrs	r7, r7, #1
 8022e2c:	606f      	str	r7, [r5, #4]
 8022e2e:	9a00      	ldr	r2, [sp, #0]
 8022e30:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022e32:	4694      	mov	ip, r2
 8022e34:	4465      	add	r5, ip
 8022e36:	468c      	mov	ip, r1
 8022e38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022e3a:	0013      	movs	r3, r2
 8022e3c:	4462      	add	r2, ip
 8022e3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022e40:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022e42:	429a      	cmp	r2, r3
 8022e44:	d900      	bls.n	8022e48 <arm_radix4_butterfly_q31+0x478>
 8022e46:	e73a      	b.n	8022cbe <arm_radix4_butterfly_q31+0x2ee>
 8022e48:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022e4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022e4c:	468c      	mov	ip, r1
 8022e4e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8022e50:	4462      	add	r2, ip
 8022e52:	468c      	mov	ip, r1
 8022e54:	9216      	str	r2, [sp, #88]	@ 0x58
 8022e56:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8022e58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022e5a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022e5c:	4462      	add	r2, ip
 8022e5e:	468c      	mov	ip, r1
 8022e60:	9219      	str	r2, [sp, #100]	@ 0x64
 8022e62:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022e64:	3301      	adds	r3, #1
 8022e66:	4462      	add	r2, ip
 8022e68:	9218      	str	r2, [sp, #96]	@ 0x60
 8022e6a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8022e6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8022e6e:	3208      	adds	r2, #8
 8022e70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022e72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8022e74:	4293      	cmp	r3, r2
 8022e76:	d800      	bhi.n	8022e7a <arm_radix4_butterfly_q31+0x4aa>
 8022e78:	e6e8      	b.n	8022c4c <arm_radix4_butterfly_q31+0x27c>
 8022e7a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022e7c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022e7e:	009b      	lsls	r3, r3, #2
 8022e80:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022e82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022e84:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022e86:	089b      	lsrs	r3, r3, #2
 8022e88:	9320      	str	r3, [sp, #128]	@ 0x80
 8022e8a:	2b04      	cmp	r3, #4
 8022e8c:	d900      	bls.n	8022e90 <arm_radix4_butterfly_q31+0x4c0>
 8022e8e:	e6c1      	b.n	8022c14 <arm_radix4_butterfly_q31+0x244>
 8022e90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022e92:	469a      	mov	sl, r3
 8022e94:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022e96:	691c      	ldr	r4, [r3, #16]
 8022e98:	685a      	ldr	r2, [r3, #4]
 8022e9a:	46a1      	mov	r9, r4
 8022e9c:	4690      	mov	r8, r2
 8022e9e:	6819      	ldr	r1, [r3, #0]
 8022ea0:	689a      	ldr	r2, [r3, #8]
 8022ea2:	699f      	ldr	r7, [r3, #24]
 8022ea4:	188d      	adds	r5, r1, r2
 8022ea6:	444d      	add	r5, r9
 8022ea8:	19ed      	adds	r5, r5, r7
 8022eaa:	69de      	ldr	r6, [r3, #28]
 8022eac:	601d      	str	r5, [r3, #0]
 8022eae:	4645      	mov	r5, r8
 8022eb0:	46b4      	mov	ip, r6
 8022eb2:	68d8      	ldr	r0, [r3, #12]
 8022eb4:	695c      	ldr	r4, [r3, #20]
 8022eb6:	182d      	adds	r5, r5, r0
 8022eb8:	192d      	adds	r5, r5, r4
 8022eba:	4465      	add	r5, ip
 8022ebc:	605d      	str	r5, [r3, #4]
 8022ebe:	1a8d      	subs	r5, r1, r2
 8022ec0:	444d      	add	r5, r9
 8022ec2:	1bed      	subs	r5, r5, r7
 8022ec4:	609d      	str	r5, [r3, #8]
 8022ec6:	4645      	mov	r5, r8
 8022ec8:	1a2d      	subs	r5, r5, r0
 8022eca:	192d      	adds	r5, r5, r4
 8022ecc:	1bad      	subs	r5, r5, r6
 8022ece:	464e      	mov	r6, r9
 8022ed0:	60dd      	str	r5, [r3, #12]
 8022ed2:	180d      	adds	r5, r1, r0
 8022ed4:	1bad      	subs	r5, r5, r6
 8022ed6:	4666      	mov	r6, ip
 8022ed8:	1bad      	subs	r5, r5, r6
 8022eda:	611d      	str	r5, [r3, #16]
 8022edc:	4645      	mov	r5, r8
 8022ede:	1aad      	subs	r5, r5, r2
 8022ee0:	4442      	add	r2, r8
 8022ee2:	1b12      	subs	r2, r2, r4
 8022ee4:	1bd2      	subs	r2, r2, r7
 8022ee6:	1a08      	subs	r0, r1, r0
 8022ee8:	61da      	str	r2, [r3, #28]
 8022eea:	4649      	mov	r1, r9
 8022eec:	2201      	movs	r2, #1
 8022eee:	1a41      	subs	r1, r0, r1
 8022ef0:	4252      	negs	r2, r2
 8022ef2:	4461      	add	r1, ip
 8022ef4:	4694      	mov	ip, r2
 8022ef6:	44e2      	add	sl, ip
 8022ef8:	4652      	mov	r2, sl
 8022efa:	1b2d      	subs	r5, r5, r4
 8022efc:	19ed      	adds	r5, r5, r7
 8022efe:	615d      	str	r5, [r3, #20]
 8022f00:	6199      	str	r1, [r3, #24]
 8022f02:	3320      	adds	r3, #32
 8022f04:	2a00      	cmp	r2, #0
 8022f06:	d1c6      	bne.n	8022e96 <arm_radix4_butterfly_q31+0x4c6>
 8022f08:	b027      	add	sp, #156	@ 0x9c
 8022f0a:	bc3c      	pop	{r2, r3, r4, r5}
 8022f0c:	4690      	mov	r8, r2
 8022f0e:	4699      	mov	r9, r3
 8022f10:	46a2      	mov	sl, r4
 8022f12:	46ab      	mov	fp, r5
 8022f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f16:	469a      	mov	sl, r3
 8022f18:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022f1a:	e7bc      	b.n	8022e96 <arm_radix4_butterfly_q31+0x4c6>

08022f1c <arm_radix4_butterfly_inverse_q31>:
 8022f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f1e:	464d      	mov	r5, r9
 8022f20:	4644      	mov	r4, r8
 8022f22:	465f      	mov	r7, fp
 8022f24:	4656      	mov	r6, sl
 8022f26:	b4f0      	push	{r4, r5, r6, r7}
 8022f28:	b0a7      	sub	sp, #156	@ 0x9c
 8022f2a:	469c      	mov	ip, r3
 8022f2c:	9114      	str	r1, [sp, #80]	@ 0x50
 8022f2e:	0889      	lsrs	r1, r1, #2
 8022f30:	9310      	str	r3, [sp, #64]	@ 0x40
 8022f32:	00cb      	lsls	r3, r1, #3
 8022f34:	0015      	movs	r5, r2
 8022f36:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022f38:	18c2      	adds	r2, r0, r3
 8022f3a:	000c      	movs	r4, r1
 8022f3c:	9124      	str	r1, [sp, #144]	@ 0x90
 8022f3e:	18d1      	adds	r1, r2, r3
 8022f40:	468b      	mov	fp, r1
 8022f42:	469a      	mov	sl, r3
 8022f44:	4663      	mov	r3, ip
 8022f46:	44da      	add	sl, fp
 8022f48:	46d0      	mov	r8, sl
 8022f4a:	4681      	mov	r9, r0
 8022f4c:	4692      	mov	sl, r2
 8022f4e:	0119      	lsls	r1, r3, #4
 8022f50:	910d      	str	r1, [sp, #52]	@ 0x34
 8022f52:	00d9      	lsls	r1, r3, #3
 8022f54:	005b      	lsls	r3, r3, #1
 8022f56:	4463      	add	r3, ip
 8022f58:	910e      	str	r1, [sp, #56]	@ 0x38
 8022f5a:	00d9      	lsls	r1, r3, #3
 8022f5c:	9022      	str	r0, [sp, #136]	@ 0x88
 8022f5e:	9025      	str	r0, [sp, #148]	@ 0x94
 8022f60:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022f62:	9502      	str	r5, [sp, #8]
 8022f64:	9500      	str	r5, [sp, #0]
 8022f66:	9501      	str	r5, [sp, #4]
 8022f68:	9409      	str	r4, [sp, #36]	@ 0x24
 8022f6a:	464b      	mov	r3, r9
 8022f6c:	681b      	ldr	r3, [r3, #0]
 8022f6e:	4652      	mov	r2, sl
 8022f70:	111c      	asrs	r4, r3, #4
 8022f72:	465b      	mov	r3, fp
 8022f74:	4648      	mov	r0, r9
 8022f76:	681b      	ldr	r3, [r3, #0]
 8022f78:	6812      	ldr	r2, [r2, #0]
 8022f7a:	6840      	ldr	r0, [r0, #4]
 8022f7c:	111b      	asrs	r3, r3, #4
 8022f7e:	18e7      	adds	r7, r4, r3
 8022f80:	1ae3      	subs	r3, r4, r3
 8022f82:	1114      	asrs	r4, r2, #4
 8022f84:	4642      	mov	r2, r8
 8022f86:	1105      	asrs	r5, r0, #4
 8022f88:	4658      	mov	r0, fp
 8022f8a:	6812      	ldr	r2, [r2, #0]
 8022f8c:	6840      	ldr	r0, [r0, #4]
 8022f8e:	9303      	str	r3, [sp, #12]
 8022f90:	1113      	asrs	r3, r2, #4
 8022f92:	18e2      	adds	r2, r4, r3
 8022f94:	1103      	asrs	r3, r0, #4
 8022f96:	18ee      	adds	r6, r5, r3
 8022f98:	1ae8      	subs	r0, r5, r3
 8022f9a:	464d      	mov	r5, r9
 8022f9c:	18bb      	adds	r3, r7, r2
 8022f9e:	602b      	str	r3, [r5, #0]
 8022fa0:	4641      	mov	r1, r8
 8022fa2:	4655      	mov	r5, sl
 8022fa4:	6849      	ldr	r1, [r1, #4]
 8022fa6:	686d      	ldr	r5, [r5, #4]
 8022fa8:	110b      	asrs	r3, r1, #4
 8022faa:	112d      	asrs	r5, r5, #4
 8022fac:	18eb      	adds	r3, r5, r3
 8022fae:	464d      	mov	r5, r9
 8022fb0:	18f1      	adds	r1, r6, r3
 8022fb2:	6069      	str	r1, [r5, #4]
 8022fb4:	4655      	mov	r5, sl
 8022fb6:	686d      	ldr	r5, [r5, #4]
 8022fb8:	9004      	str	r0, [sp, #16]
 8022fba:	112c      	asrs	r4, r5, #4
 8022fbc:	4645      	mov	r5, r8
 8022fbe:	686d      	ldr	r5, [r5, #4]
 8022fc0:	1129      	asrs	r1, r5, #4
 8022fc2:	1a65      	subs	r5, r4, r1
 8022fc4:	4651      	mov	r1, sl
 8022fc6:	6809      	ldr	r1, [r1, #0]
 8022fc8:	1abc      	subs	r4, r7, r2
 8022fca:	1108      	asrs	r0, r1, #4
 8022fcc:	4641      	mov	r1, r8
 8022fce:	17e2      	asrs	r2, r4, #31
 8022fd0:	6809      	ldr	r1, [r1, #0]
 8022fd2:	9207      	str	r2, [sp, #28]
 8022fd4:	9a01      	ldr	r2, [sp, #4]
 8022fd6:	1109      	asrs	r1, r1, #4
 8022fd8:	6817      	ldr	r7, [r2, #0]
 8022fda:	1a41      	subs	r1, r0, r1
 8022fdc:	9106      	str	r1, [sp, #24]
 8022fde:	0039      	movs	r1, r7
 8022fe0:	17ff      	asrs	r7, r7, #31
 8022fe2:	0038      	movs	r0, r7
 8022fe4:	9505      	str	r5, [sp, #20]
 8022fe6:	1af5      	subs	r5, r6, r3
 8022fe8:	17ef      	asrs	r7, r5, #31
 8022fea:	970b      	str	r7, [sp, #44]	@ 0x2c
 8022fec:	6857      	ldr	r7, [r2, #4]
 8022fee:	0003      	movs	r3, r0
 8022ff0:	17fe      	asrs	r6, r7, #31
 8022ff2:	000a      	movs	r2, r1
 8022ff4:	9108      	str	r1, [sp, #32]
 8022ff6:	900a      	str	r0, [sp, #40]	@ 0x28
 8022ff8:	17e1      	asrs	r1, r4, #31
 8022ffa:	0020      	movs	r0, r4
 8022ffc:	960c      	str	r6, [sp, #48]	@ 0x30
 8022ffe:	f7dd fadf 	bl	80005c0 <__aeabi_lmul>
 8023002:	003a      	movs	r2, r7
 8023004:	17fb      	asrs	r3, r7, #31
 8023006:	000e      	movs	r6, r1
 8023008:	0028      	movs	r0, r5
 802300a:	17e9      	asrs	r1, r5, #31
 802300c:	f7dd fad8 	bl	80005c0 <__aeabi_lmul>
 8023010:	4653      	mov	r3, sl
 8023012:	1a76      	subs	r6, r6, r1
 8023014:	0076      	lsls	r6, r6, #1
 8023016:	601e      	str	r6, [r3, #0]
 8023018:	002a      	movs	r2, r5
 802301a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802301c:	9808      	ldr	r0, [sp, #32]
 802301e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023020:	f7dd face 	bl	80005c0 <__aeabi_lmul>
 8023024:	003a      	movs	r2, r7
 8023026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023028:	000d      	movs	r5, r1
 802302a:	0020      	movs	r0, r4
 802302c:	9907      	ldr	r1, [sp, #28]
 802302e:	f7dd fac7 	bl	80005c0 <__aeabi_lmul>
 8023032:	4657      	mov	r7, sl
 8023034:	186d      	adds	r5, r5, r1
 8023036:	006d      	lsls	r5, r5, #1
 8023038:	607d      	str	r5, [r7, #4]
 802303a:	9b03      	ldr	r3, [sp, #12]
 802303c:	9e06      	ldr	r6, [sp, #24]
 802303e:	9d05      	ldr	r5, [sp, #20]
 8023040:	46b4      	mov	ip, r6
 8023042:	1b5d      	subs	r5, r3, r5
 8023044:	9b00      	ldr	r3, [sp, #0]
 8023046:	17ef      	asrs	r7, r5, #31
 8023048:	0039      	movs	r1, r7
 802304a:	681f      	ldr	r7, [r3, #0]
 802304c:	17fc      	asrs	r4, r7, #31
 802304e:	0020      	movs	r0, r4
 8023050:	9c04      	ldr	r4, [sp, #16]
 8023052:	4464      	add	r4, ip
 8023054:	17e6      	asrs	r6, r4, #31
 8023056:	9407      	str	r4, [sp, #28]
 8023058:	9608      	str	r6, [sp, #32]
 802305a:	685e      	ldr	r6, [r3, #4]
 802305c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802305e:	17f2      	asrs	r2, r6, #31
 8023060:	0003      	movs	r3, r0
 8023062:	920c      	str	r2, [sp, #48]	@ 0x30
 8023064:	0028      	movs	r0, r5
 8023066:	003a      	movs	r2, r7
 8023068:	910a      	str	r1, [sp, #40]	@ 0x28
 802306a:	f7dd faa9 	bl	80005c0 <__aeabi_lmul>
 802306e:	0032      	movs	r2, r6
 8023070:	17f3      	asrs	r3, r6, #31
 8023072:	9807      	ldr	r0, [sp, #28]
 8023074:	000c      	movs	r4, r1
 8023076:	9908      	ldr	r1, [sp, #32]
 8023078:	f7dd faa2 	bl	80005c0 <__aeabi_lmul>
 802307c:	4658      	mov	r0, fp
 802307e:	1a64      	subs	r4, r4, r1
 8023080:	0064      	lsls	r4, r4, #1
 8023082:	9a07      	ldr	r2, [sp, #28]
 8023084:	6004      	str	r4, [r0, #0]
 8023086:	9b08      	ldr	r3, [sp, #32]
 8023088:	0038      	movs	r0, r7
 802308a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802308c:	f7dd fa98 	bl	80005c0 <__aeabi_lmul>
 8023090:	0032      	movs	r2, r6
 8023092:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023094:	000c      	movs	r4, r1
 8023096:	0028      	movs	r0, r5
 8023098:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802309a:	f7dd fa91 	bl	80005c0 <__aeabi_lmul>
 802309e:	9d05      	ldr	r5, [sp, #20]
 80230a0:	465f      	mov	r7, fp
 80230a2:	46ac      	mov	ip, r5
 80230a4:	1864      	adds	r4, r4, r1
 80230a6:	9903      	ldr	r1, [sp, #12]
 80230a8:	0064      	lsls	r4, r4, #1
 80230aa:	4461      	add	r1, ip
 80230ac:	607c      	str	r4, [r7, #4]
 80230ae:	000c      	movs	r4, r1
 80230b0:	17c9      	asrs	r1, r1, #31
 80230b2:	9105      	str	r1, [sp, #20]
 80230b4:	9902      	ldr	r1, [sp, #8]
 80230b6:	9804      	ldr	r0, [sp, #16]
 80230b8:	680d      	ldr	r5, [r1, #0]
 80230ba:	9e06      	ldr	r6, [sp, #24]
 80230bc:	002b      	movs	r3, r5
 80230be:	17ed      	asrs	r5, r5, #31
 80230c0:	684f      	ldr	r7, [r1, #4]
 80230c2:	9503      	str	r5, [sp, #12]
 80230c4:	1b85      	subs	r5, r0, r6
 80230c6:	17e8      	asrs	r0, r5, #31
 80230c8:	001a      	movs	r2, r3
 80230ca:	9006      	str	r0, [sp, #24]
 80230cc:	17fe      	asrs	r6, r7, #31
 80230ce:	9304      	str	r3, [sp, #16]
 80230d0:	0020      	movs	r0, r4
 80230d2:	9b03      	ldr	r3, [sp, #12]
 80230d4:	17e1      	asrs	r1, r4, #31
 80230d6:	9607      	str	r6, [sp, #28]
 80230d8:	f7dd fa72 	bl	80005c0 <__aeabi_lmul>
 80230dc:	003a      	movs	r2, r7
 80230de:	000e      	movs	r6, r1
 80230e0:	17fb      	asrs	r3, r7, #31
 80230e2:	0028      	movs	r0, r5
 80230e4:	17e9      	asrs	r1, r5, #31
 80230e6:	f7dd fa6b 	bl	80005c0 <__aeabi_lmul>
 80230ea:	4640      	mov	r0, r8
 80230ec:	1a76      	subs	r6, r6, r1
 80230ee:	0076      	lsls	r6, r6, #1
 80230f0:	002a      	movs	r2, r5
 80230f2:	9b06      	ldr	r3, [sp, #24]
 80230f4:	6006      	str	r6, [r0, #0]
 80230f6:	9903      	ldr	r1, [sp, #12]
 80230f8:	9804      	ldr	r0, [sp, #16]
 80230fa:	f7dd fa61 	bl	80005c0 <__aeabi_lmul>
 80230fe:	0020      	movs	r0, r4
 8023100:	2408      	movs	r4, #8
 8023102:	9b07      	ldr	r3, [sp, #28]
 8023104:	000d      	movs	r5, r1
 8023106:	003a      	movs	r2, r7
 8023108:	9905      	ldr	r1, [sp, #20]
 802310a:	f7dd fa59 	bl	80005c0 <__aeabi_lmul>
 802310e:	4640      	mov	r0, r8
 8023110:	46a4      	mov	ip, r4
 8023112:	186d      	adds	r5, r5, r1
 8023114:	006d      	lsls	r5, r5, #1
 8023116:	6045      	str	r5, [r0, #4]
 8023118:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802311a:	44e1      	add	r9, ip
 802311c:	3801      	subs	r0, #1
 802311e:	9009      	str	r0, [sp, #36]	@ 0x24
 8023120:	9a01      	ldr	r2, [sp, #4]
 8023122:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023124:	44e2      	add	sl, ip
 8023126:	44e3      	add	fp, ip
 8023128:	44e0      	add	r8, ip
 802312a:	46a4      	mov	ip, r4
 802312c:	4462      	add	r2, ip
 802312e:	9201      	str	r2, [sp, #4]
 8023130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023132:	9b00      	ldr	r3, [sp, #0]
 8023134:	4694      	mov	ip, r2
 8023136:	4463      	add	r3, ip
 8023138:	9300      	str	r3, [sp, #0]
 802313a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802313c:	9902      	ldr	r1, [sp, #8]
 802313e:	469c      	mov	ip, r3
 8023140:	4461      	add	r1, ip
 8023142:	9102      	str	r1, [sp, #8]
 8023144:	2800      	cmp	r0, #0
 8023146:	d000      	beq.n	802314a <arm_radix4_butterfly_inverse_q31+0x22e>
 8023148:	e70f      	b.n	8022f6a <arm_radix4_butterfly_inverse_q31+0x4e>
 802314a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802314c:	009b      	lsls	r3, r3, #2
 802314e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023150:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023152:	9320      	str	r3, [sp, #128]	@ 0x80
 8023154:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023156:	2b04      	cmp	r3, #4
 8023158:	d800      	bhi.n	802315c <arm_radix4_butterfly_inverse_q31+0x240>
 802315a:	e17c      	b.n	8023456 <arm_radix4_butterfly_inverse_q31+0x53a>
 802315c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802315e:	0893      	lsrs	r3, r2, #2
 8023160:	1e59      	subs	r1, r3, #1
 8023162:	9321      	str	r3, [sp, #132]	@ 0x84
 8023164:	00db      	lsls	r3, r3, #3
 8023166:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023168:	00d3      	lsls	r3, r2, #3
 802316a:	9300      	str	r3, [sp, #0]
 802316c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802316e:	911a      	str	r1, [sp, #104]	@ 0x68
 8023170:	00da      	lsls	r2, r3, #3
 8023172:	921e      	str	r2, [sp, #120]	@ 0x78
 8023174:	011a      	lsls	r2, r3, #4
 8023176:	921d      	str	r2, [sp, #116]	@ 0x74
 8023178:	001a      	movs	r2, r3
 802317a:	4694      	mov	ip, r2
 802317c:	005b      	lsls	r3, r3, #1
 802317e:	4463      	add	r3, ip
 8023180:	00db      	lsls	r3, r3, #3
 8023182:	931c      	str	r3, [sp, #112]	@ 0x70
 8023184:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023186:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023188:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802318a:	9318      	str	r3, [sp, #96]	@ 0x60
 802318c:	9319      	str	r3, [sp, #100]	@ 0x64
 802318e:	9316      	str	r3, [sp, #88]	@ 0x58
 8023190:	2300      	movs	r3, #0
 8023192:	9315      	str	r3, [sp, #84]	@ 0x54
 8023194:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023196:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023198:	681a      	ldr	r2, [r3, #0]
 802319a:	685b      	ldr	r3, [r3, #4]
 802319c:	9205      	str	r2, [sp, #20]
 802319e:	9306      	str	r3, [sp, #24]
 80231a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80231a2:	468c      	mov	ip, r1
 80231a4:	681a      	ldr	r2, [r3, #0]
 80231a6:	685b      	ldr	r3, [r3, #4]
 80231a8:	9207      	str	r2, [sp, #28]
 80231aa:	9308      	str	r3, [sp, #32]
 80231ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80231ae:	681a      	ldr	r2, [r3, #0]
 80231b0:	685b      	ldr	r3, [r3, #4]
 80231b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80231b4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80231b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80231b8:	0013      	movs	r3, r2
 80231ba:	4463      	add	r3, ip
 80231bc:	4698      	mov	r8, r3
 80231be:	0013      	movs	r3, r2
 80231c0:	4442      	add	r2, r8
 80231c2:	4691      	mov	r9, r2
 80231c4:	001a      	movs	r2, r3
 80231c6:	444a      	add	r2, r9
 80231c8:	4692      	mov	sl, r2
 80231ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80231cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80231ce:	4293      	cmp	r3, r2
 80231d0:	d800      	bhi.n	80231d4 <arm_radix4_butterfly_inverse_q31+0x2b8>
 80231d2:	e0d9      	b.n	8023388 <arm_radix4_butterfly_inverse_q31+0x46c>
 80231d4:	4694      	mov	ip, r2
 80231d6:	4644      	mov	r4, r8
 80231d8:	4655      	mov	r5, sl
 80231da:	4688      	mov	r8, r1
 80231dc:	9b07      	ldr	r3, [sp, #28]
 80231de:	17db      	asrs	r3, r3, #31
 80231e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80231e2:	9b08      	ldr	r3, [sp, #32]
 80231e4:	17db      	asrs	r3, r3, #31
 80231e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80231e8:	9b05      	ldr	r3, [sp, #20]
 80231ea:	17db      	asrs	r3, r3, #31
 80231ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80231ee:	9b06      	ldr	r3, [sp, #24]
 80231f0:	17db      	asrs	r3, r3, #31
 80231f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80231f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231f6:	17db      	asrs	r3, r3, #31
 80231f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80231fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80231fc:	17db      	asrs	r3, r3, #31
 80231fe:	9311      	str	r3, [sp, #68]	@ 0x44
 8023200:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023202:	4463      	add	r3, ip
 8023204:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023206:	4643      	mov	r3, r8
 8023208:	4641      	mov	r1, r8
 802320a:	681a      	ldr	r2, [r3, #0]
 802320c:	464b      	mov	r3, r9
 802320e:	684f      	ldr	r7, [r1, #4]
 8023210:	4649      	mov	r1, r9
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	18d6      	adds	r6, r2, r3
 8023216:	1ad3      	subs	r3, r2, r3
 8023218:	9301      	str	r3, [sp, #4]
 802321a:	684b      	ldr	r3, [r1, #4]
 802321c:	1af9      	subs	r1, r7, r3
 802321e:	9102      	str	r1, [sp, #8]
 8023220:	6829      	ldr	r1, [r5, #0]
 8023222:	18f8      	adds	r0, r7, r3
 8023224:	468c      	mov	ip, r1
 8023226:	6827      	ldr	r7, [r4, #0]
 8023228:	4467      	add	r7, ip
 802322a:	003a      	movs	r2, r7
 802322c:	19f3      	adds	r3, r6, r7
 802322e:	4647      	mov	r7, r8
 8023230:	109b      	asrs	r3, r3, #2
 8023232:	603b      	str	r3, [r7, #0]
 8023234:	6869      	ldr	r1, [r5, #4]
 8023236:	6867      	ldr	r7, [r4, #4]
 8023238:	468c      	mov	ip, r1
 802323a:	4467      	add	r7, ip
 802323c:	003b      	movs	r3, r7
 802323e:	19c1      	adds	r1, r0, r7
 8023240:	4647      	mov	r7, r8
 8023242:	1ab6      	subs	r6, r6, r2
 8023244:	1089      	asrs	r1, r1, #2
 8023246:	6079      	str	r1, [r7, #4]
 8023248:	17f2      	asrs	r2, r6, #31
 802324a:	9900      	ldr	r1, [sp, #0]
 802324c:	4692      	mov	sl, r2
 802324e:	468c      	mov	ip, r1
 8023250:	6867      	ldr	r7, [r4, #4]
 8023252:	6869      	ldr	r1, [r5, #4]
 8023254:	44e0      	add	r8, ip
 8023256:	1a7f      	subs	r7, r7, r1
 8023258:	9703      	str	r7, [sp, #12]
 802325a:	6821      	ldr	r1, [r4, #0]
 802325c:	682f      	ldr	r7, [r5, #0]
 802325e:	1bc9      	subs	r1, r1, r7
 8023260:	1ac7      	subs	r7, r0, r3
 8023262:	17fa      	asrs	r2, r7, #31
 8023264:	4693      	mov	fp, r2
 8023266:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023268:	9a07      	ldr	r2, [sp, #28]
 802326a:	9104      	str	r1, [sp, #16]
 802326c:	0030      	movs	r0, r6
 802326e:	4651      	mov	r1, sl
 8023270:	f7dd f9a6 	bl	80005c0 <__aeabi_lmul>
 8023274:	9a08      	ldr	r2, [sp, #32]
 8023276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023278:	9112      	str	r1, [sp, #72]	@ 0x48
 802327a:	0038      	movs	r0, r7
 802327c:	4659      	mov	r1, fp
 802327e:	f7dd f99f 	bl	80005c0 <__aeabi_lmul>
 8023282:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023284:	9a07      	ldr	r2, [sp, #28]
 8023286:	1a41      	subs	r1, r0, r1
 8023288:	1049      	asrs	r1, r1, #1
 802328a:	6021      	str	r1, [r4, #0]
 802328c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802328e:	0038      	movs	r0, r7
 8023290:	4659      	mov	r1, fp
 8023292:	f7dd f995 	bl	80005c0 <__aeabi_lmul>
 8023296:	9a08      	ldr	r2, [sp, #32]
 8023298:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802329a:	000f      	movs	r7, r1
 802329c:	0030      	movs	r0, r6
 802329e:	4651      	mov	r1, sl
 80232a0:	f7dd f98e 	bl	80005c0 <__aeabi_lmul>
 80232a4:	9b00      	ldr	r3, [sp, #0]
 80232a6:	187f      	adds	r7, r7, r1
 80232a8:	469c      	mov	ip, r3
 80232aa:	107f      	asrs	r7, r7, #1
 80232ac:	6067      	str	r7, [r4, #4]
 80232ae:	9a01      	ldr	r2, [sp, #4]
 80232b0:	9f03      	ldr	r7, [sp, #12]
 80232b2:	9802      	ldr	r0, [sp, #8]
 80232b4:	1bd7      	subs	r7, r2, r7
 80232b6:	17fe      	asrs	r6, r7, #31
 80232b8:	0031      	movs	r1, r6
 80232ba:	9e04      	ldr	r6, [sp, #16]
 80232bc:	4682      	mov	sl, r0
 80232be:	4464      	add	r4, ip
 80232c0:	46b4      	mov	ip, r6
 80232c2:	44e2      	add	sl, ip
 80232c4:	4652      	mov	r2, sl
 80232c6:	17d2      	asrs	r2, r2, #31
 80232c8:	4693      	mov	fp, r2
 80232ca:	0038      	movs	r0, r7
 80232cc:	9a05      	ldr	r2, [sp, #20]
 80232ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80232d0:	9112      	str	r1, [sp, #72]	@ 0x48
 80232d2:	f7dd f975 	bl	80005c0 <__aeabi_lmul>
 80232d6:	9a06      	ldr	r2, [sp, #24]
 80232d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80232da:	000e      	movs	r6, r1
 80232dc:	4650      	mov	r0, sl
 80232de:	4659      	mov	r1, fp
 80232e0:	f7dd f96e 	bl	80005c0 <__aeabi_lmul>
 80232e4:	4648      	mov	r0, r9
 80232e6:	1a76      	subs	r6, r6, r1
 80232e8:	1076      	asrs	r6, r6, #1
 80232ea:	6006      	str	r6, [r0, #0]
 80232ec:	9a05      	ldr	r2, [sp, #20]
 80232ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80232f0:	4650      	mov	r0, sl
 80232f2:	4659      	mov	r1, fp
 80232f4:	f7dd f964 	bl	80005c0 <__aeabi_lmul>
 80232f8:	9a06      	ldr	r2, [sp, #24]
 80232fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80232fc:	000e      	movs	r6, r1
 80232fe:	0038      	movs	r0, r7
 8023300:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023302:	f7dd f95d 	bl	80005c0 <__aeabi_lmul>
 8023306:	9a00      	ldr	r2, [sp, #0]
 8023308:	9f03      	ldr	r7, [sp, #12]
 802330a:	4694      	mov	ip, r2
 802330c:	1876      	adds	r6, r6, r1
 802330e:	4649      	mov	r1, r9
 8023310:	44e1      	add	r9, ip
 8023312:	46bc      	mov	ip, r7
 8023314:	9b01      	ldr	r3, [sp, #4]
 8023316:	1076      	asrs	r6, r6, #1
 8023318:	4463      	add	r3, ip
 802331a:	17df      	asrs	r7, r3, #31
 802331c:	604e      	str	r6, [r1, #4]
 802331e:	46ba      	mov	sl, r7
 8023320:	001e      	movs	r6, r3
 8023322:	9802      	ldr	r0, [sp, #8]
 8023324:	9b04      	ldr	r3, [sp, #16]
 8023326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023328:	1ac7      	subs	r7, r0, r3
 802332a:	17fb      	asrs	r3, r7, #31
 802332c:	469b      	mov	fp, r3
 802332e:	0030      	movs	r0, r6
 8023330:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023332:	4651      	mov	r1, sl
 8023334:	f7dd f944 	bl	80005c0 <__aeabi_lmul>
 8023338:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802333a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802333c:	9101      	str	r1, [sp, #4]
 802333e:	0038      	movs	r0, r7
 8023340:	4659      	mov	r1, fp
 8023342:	f7dd f93d 	bl	80005c0 <__aeabi_lmul>
 8023346:	9801      	ldr	r0, [sp, #4]
 8023348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802334a:	1a41      	subs	r1, r0, r1
 802334c:	1049      	asrs	r1, r1, #1
 802334e:	6029      	str	r1, [r5, #0]
 8023350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023352:	0038      	movs	r0, r7
 8023354:	4659      	mov	r1, fp
 8023356:	f7dd f933 	bl	80005c0 <__aeabi_lmul>
 802335a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802335c:	000f      	movs	r7, r1
 802335e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023360:	0030      	movs	r0, r6
 8023362:	4651      	mov	r1, sl
 8023364:	f7dd f92c 	bl	80005c0 <__aeabi_lmul>
 8023368:	187f      	adds	r7, r7, r1
 802336a:	107f      	asrs	r7, r7, #1
 802336c:	606f      	str	r7, [r5, #4]
 802336e:	9a00      	ldr	r2, [sp, #0]
 8023370:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023372:	4694      	mov	ip, r2
 8023374:	4465      	add	r5, ip
 8023376:	468c      	mov	ip, r1
 8023378:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802337a:	0013      	movs	r3, r2
 802337c:	4462      	add	r2, ip
 802337e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023380:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023382:	429a      	cmp	r2, r3
 8023384:	d900      	bls.n	8023388 <arm_radix4_butterfly_inverse_q31+0x46c>
 8023386:	e73e      	b.n	8023206 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8023388:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802338a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802338c:	468c      	mov	ip, r1
 802338e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8023390:	4462      	add	r2, ip
 8023392:	468c      	mov	ip, r1
 8023394:	9216      	str	r2, [sp, #88]	@ 0x58
 8023396:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023398:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802339a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802339c:	4462      	add	r2, ip
 802339e:	468c      	mov	ip, r1
 80233a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80233a2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80233a4:	3301      	adds	r3, #1
 80233a6:	4462      	add	r2, ip
 80233a8:	9218      	str	r2, [sp, #96]	@ 0x60
 80233aa:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80233ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80233ae:	3208      	adds	r2, #8
 80233b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80233b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80233b4:	4293      	cmp	r3, r2
 80233b6:	d800      	bhi.n	80233ba <arm_radix4_butterfly_inverse_q31+0x49e>
 80233b8:	e6ec      	b.n	8023194 <arm_radix4_butterfly_inverse_q31+0x278>
 80233ba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80233bc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80233be:	009b      	lsls	r3, r3, #2
 80233c0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80233c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80233c4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80233c6:	089b      	lsrs	r3, r3, #2
 80233c8:	9320      	str	r3, [sp, #128]	@ 0x80
 80233ca:	2b04      	cmp	r3, #4
 80233cc:	d900      	bls.n	80233d0 <arm_radix4_butterfly_inverse_q31+0x4b4>
 80233ce:	e6c5      	b.n	802315c <arm_radix4_butterfly_inverse_q31+0x240>
 80233d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80233d2:	469a      	mov	sl, r3
 80233d4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80233d6:	681a      	ldr	r2, [r3, #0]
 80233d8:	6918      	ldr	r0, [r3, #16]
 80233da:	4691      	mov	r9, r2
 80233dc:	464c      	mov	r4, r9
 80233de:	4680      	mov	r8, r0
 80233e0:	69de      	ldr	r6, [r3, #28]
 80233e2:	689d      	ldr	r5, [r3, #8]
 80233e4:	46b4      	mov	ip, r6
 80233e6:	6998      	ldr	r0, [r3, #24]
 80233e8:	1964      	adds	r4, r4, r5
 80233ea:	6859      	ldr	r1, [r3, #4]
 80233ec:	68da      	ldr	r2, [r3, #12]
 80233ee:	4444      	add	r4, r8
 80233f0:	695f      	ldr	r7, [r3, #20]
 80233f2:	1824      	adds	r4, r4, r0
 80233f4:	601c      	str	r4, [r3, #0]
 80233f6:	188c      	adds	r4, r1, r2
 80233f8:	19e4      	adds	r4, r4, r7
 80233fa:	4464      	add	r4, ip
 80233fc:	605c      	str	r4, [r3, #4]
 80233fe:	464c      	mov	r4, r9
 8023400:	1b64      	subs	r4, r4, r5
 8023402:	4444      	add	r4, r8
 8023404:	1a24      	subs	r4, r4, r0
 8023406:	609c      	str	r4, [r3, #8]
 8023408:	1a8c      	subs	r4, r1, r2
 802340a:	19e4      	adds	r4, r4, r7
 802340c:	1ba4      	subs	r4, r4, r6
 802340e:	60dc      	str	r4, [r3, #12]
 8023410:	464c      	mov	r4, r9
 8023412:	4646      	mov	r6, r8
 8023414:	1aa4      	subs	r4, r4, r2
 8023416:	1ba4      	subs	r4, r4, r6
 8023418:	4464      	add	r4, ip
 802341a:	611c      	str	r4, [r3, #16]
 802341c:	194c      	adds	r4, r1, r5
 802341e:	1be4      	subs	r4, r4, r7
 8023420:	1a24      	subs	r4, r4, r0
 8023422:	615c      	str	r4, [r3, #20]
 8023424:	4644      	mov	r4, r8
 8023426:	4666      	mov	r6, ip
 8023428:	444a      	add	r2, r9
 802342a:	1b12      	subs	r2, r2, r4
 802342c:	1b92      	subs	r2, r2, r6
 802342e:	619a      	str	r2, [r3, #24]
 8023430:	1b4a      	subs	r2, r1, r5
 8023432:	1bd1      	subs	r1, r2, r7
 8023434:	2201      	movs	r2, #1
 8023436:	4252      	negs	r2, r2
 8023438:	4694      	mov	ip, r2
 802343a:	44e2      	add	sl, ip
 802343c:	4652      	mov	r2, sl
 802343e:	1809      	adds	r1, r1, r0
 8023440:	61d9      	str	r1, [r3, #28]
 8023442:	3320      	adds	r3, #32
 8023444:	2a00      	cmp	r2, #0
 8023446:	d1c6      	bne.n	80233d6 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8023448:	b027      	add	sp, #156	@ 0x9c
 802344a:	bc3c      	pop	{r2, r3, r4, r5}
 802344c:	4690      	mov	r8, r2
 802344e:	4699      	mov	r9, r3
 8023450:	46a2      	mov	sl, r4
 8023452:	46ab      	mov	fp, r5
 8023454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023456:	469a      	mov	sl, r3
 8023458:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802345a:	e7bc      	b.n	80233d6 <arm_radix4_butterfly_inverse_q31+0x4ba>

0802345c <arm_cmplx_mag_squared_q31>:
 802345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802345e:	464f      	mov	r7, r9
 8023460:	4646      	mov	r6, r8
 8023462:	0004      	movs	r4, r0
 8023464:	b4c0      	push	{r6, r7}
 8023466:	0016      	movs	r6, r2
 8023468:	000f      	movs	r7, r1
 802346a:	2a00      	cmp	r2, #0
 802346c:	d018      	beq.n	80234a0 <arm_cmplx_mag_squared_q31+0x44>
 802346e:	6823      	ldr	r3, [r4, #0]
 8023470:	6822      	ldr	r2, [r4, #0]
 8023472:	17d9      	asrs	r1, r3, #31
 8023474:	6863      	ldr	r3, [r4, #4]
 8023476:	0010      	movs	r0, r2
 8023478:	4698      	mov	r8, r3
 802347a:	17db      	asrs	r3, r3, #31
 802347c:	4699      	mov	r9, r3
 802347e:	000b      	movs	r3, r1
 8023480:	f7dd f89e 	bl	80005c0 <__aeabi_lmul>
 8023484:	4642      	mov	r2, r8
 8023486:	104d      	asrs	r5, r1, #1
 8023488:	464b      	mov	r3, r9
 802348a:	4640      	mov	r0, r8
 802348c:	4649      	mov	r1, r9
 802348e:	f7dd f897 	bl	80005c0 <__aeabi_lmul>
 8023492:	1049      	asrs	r1, r1, #1
 8023494:	1869      	adds	r1, r5, r1
 8023496:	3e01      	subs	r6, #1
 8023498:	c702      	stmia	r7!, {r1}
 802349a:	3408      	adds	r4, #8
 802349c:	2e00      	cmp	r6, #0
 802349e:	d1e6      	bne.n	802346e <arm_cmplx_mag_squared_q31+0x12>
 80234a0:	bc0c      	pop	{r2, r3}
 80234a2:	4690      	mov	r8, r2
 80234a4:	4699      	mov	r9, r3
 80234a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080234a8 <arm_mult_q31>:
 80234a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234aa:	4646      	mov	r6, r8
 80234ac:	464f      	mov	r7, r9
 80234ae:	4690      	mov	r8, r2
 80234b0:	b4c0      	push	{r6, r7}
 80234b2:	001d      	movs	r5, r3
 80234b4:	0006      	movs	r6, r0
 80234b6:	000f      	movs	r7, r1
 80234b8:	2400      	movs	r4, #0
 80234ba:	2b00      	cmp	r3, #0
 80234bc:	d020      	beq.n	8023500 <arm_mult_q31+0x58>
 80234be:	4b12      	ldr	r3, [pc, #72]	@ (8023508 <arm_mult_q31+0x60>)
 80234c0:	4699      	mov	r9, r3
 80234c2:	e007      	b.n	80234d4 <arm_mult_q31+0x2c>
 80234c4:	464b      	mov	r3, r9
 80234c6:	4059      	eors	r1, r3
 80234c8:	4643      	mov	r3, r8
 80234ca:	3d01      	subs	r5, #1
 80234cc:	5119      	str	r1, [r3, r4]
 80234ce:	3404      	adds	r4, #4
 80234d0:	2d00      	cmp	r5, #0
 80234d2:	d015      	beq.n	8023500 <arm_mult_q31+0x58>
 80234d4:	5933      	ldr	r3, [r6, r4]
 80234d6:	593a      	ldr	r2, [r7, r4]
 80234d8:	17d9      	asrs	r1, r3, #31
 80234da:	593b      	ldr	r3, [r7, r4]
 80234dc:	5930      	ldr	r0, [r6, r4]
 80234de:	17db      	asrs	r3, r3, #31
 80234e0:	f7dd f86e 	bl	80005c0 <__aeabi_lmul>
 80234e4:	004b      	lsls	r3, r1, #1
 80234e6:	0fc0      	lsrs	r0, r0, #31
 80234e8:	4318      	orrs	r0, r3
 80234ea:	17c9      	asrs	r1, r1, #31
 80234ec:	17c3      	asrs	r3, r0, #31
 80234ee:	428b      	cmp	r3, r1
 80234f0:	d1e8      	bne.n	80234c4 <arm_mult_q31+0x1c>
 80234f2:	0001      	movs	r1, r0
 80234f4:	4643      	mov	r3, r8
 80234f6:	3d01      	subs	r5, #1
 80234f8:	5119      	str	r1, [r3, r4]
 80234fa:	3404      	adds	r4, #4
 80234fc:	2d00      	cmp	r5, #0
 80234fe:	d1e9      	bne.n	80234d4 <arm_mult_q31+0x2c>
 8023500:	bc0c      	pop	{r2, r3}
 8023502:	4690      	mov	r8, r2
 8023504:	4699      	mov	r9, r3
 8023506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023508:	7fffffff 	.word	0x7fffffff

0802350c <arm_add_q31>:
 802350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802350e:	465f      	mov	r7, fp
 8023510:	4656      	mov	r6, sl
 8023512:	464d      	mov	r5, r9
 8023514:	4644      	mov	r4, r8
 8023516:	b4f0      	push	{r4, r5, r6, r7}
 8023518:	4693      	mov	fp, r2
 802351a:	b083      	sub	sp, #12
 802351c:	4681      	mov	r9, r0
 802351e:	468a      	mov	sl, r1
 8023520:	4698      	mov	r8, r3
 8023522:	2200      	movs	r2, #0
 8023524:	2b00      	cmp	r3, #0
 8023526:	d020      	beq.n	802356a <arm_add_q31+0x5e>
 8023528:	4649      	mov	r1, r9
 802352a:	4653      	mov	r3, sl
 802352c:	588e      	ldr	r6, [r1, r2]
 802352e:	589b      	ldr	r3, [r3, r2]
 8023530:	17f7      	asrs	r7, r6, #31
 8023532:	001c      	movs	r4, r3
 8023534:	0030      	movs	r0, r6
 8023536:	0039      	movs	r1, r7
 8023538:	17dd      	asrs	r5, r3, #31
 802353a:	46b4      	mov	ip, r6
 802353c:	1900      	adds	r0, r0, r4
 802353e:	4169      	adcs	r1, r5
 8023540:	4463      	add	r3, ip
 8023542:	9000      	str	r0, [sp, #0]
 8023544:	9101      	str	r1, [sp, #4]
 8023546:	17d9      	asrs	r1, r3, #31
 8023548:	468c      	mov	ip, r1
 802354a:	9901      	ldr	r1, [sp, #4]
 802354c:	458c      	cmp	ip, r1
 802354e:	d002      	beq.n	8023556 <arm_add_q31+0x4a>
 8023550:	17cb      	asrs	r3, r1, #31
 8023552:	4909      	ldr	r1, [pc, #36]	@ (8023578 <arm_add_q31+0x6c>)
 8023554:	404b      	eors	r3, r1
 8023556:	4659      	mov	r1, fp
 8023558:	508b      	str	r3, [r1, r2]
 802355a:	2301      	movs	r3, #1
 802355c:	425b      	negs	r3, r3
 802355e:	469c      	mov	ip, r3
 8023560:	44e0      	add	r8, ip
 8023562:	4643      	mov	r3, r8
 8023564:	3204      	adds	r2, #4
 8023566:	2b00      	cmp	r3, #0
 8023568:	d1de      	bne.n	8023528 <arm_add_q31+0x1c>
 802356a:	b003      	add	sp, #12
 802356c:	bc3c      	pop	{r2, r3, r4, r5}
 802356e:	4690      	mov	r8, r2
 8023570:	4699      	mov	r9, r3
 8023572:	46a2      	mov	sl, r4
 8023574:	46ab      	mov	fp, r5
 8023576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023578:	7fffffff 	.word	0x7fffffff

0802357c <atof>:
 802357c:	b510      	push	{r4, lr}
 802357e:	2100      	movs	r1, #0
 8023580:	f000 fe12 	bl	80241a8 <strtod>
 8023584:	bd10      	pop	{r4, pc}

08023586 <atoi>:
 8023586:	b510      	push	{r4, lr}
 8023588:	220a      	movs	r2, #10
 802358a:	2100      	movs	r1, #0
 802358c:	f000 fea4 	bl	80242d8 <strtol>
 8023590:	bd10      	pop	{r4, pc}
	...

08023594 <sulp>:
 8023594:	b570      	push	{r4, r5, r6, lr}
 8023596:	0016      	movs	r6, r2
 8023598:	000d      	movs	r5, r1
 802359a:	f003 fd15 	bl	8026fc8 <__ulp>
 802359e:	2e00      	cmp	r6, #0
 80235a0:	d00d      	beq.n	80235be <sulp+0x2a>
 80235a2:	236b      	movs	r3, #107	@ 0x6b
 80235a4:	006a      	lsls	r2, r5, #1
 80235a6:	0d52      	lsrs	r2, r2, #21
 80235a8:	1a9b      	subs	r3, r3, r2
 80235aa:	2b00      	cmp	r3, #0
 80235ac:	dd07      	ble.n	80235be <sulp+0x2a>
 80235ae:	2400      	movs	r4, #0
 80235b0:	4a03      	ldr	r2, [pc, #12]	@ (80235c0 <sulp+0x2c>)
 80235b2:	051b      	lsls	r3, r3, #20
 80235b4:	189d      	adds	r5, r3, r2
 80235b6:	002b      	movs	r3, r5
 80235b8:	0022      	movs	r2, r4
 80235ba:	f7df f83f 	bl	800263c <__aeabi_dmul>
 80235be:	bd70      	pop	{r4, r5, r6, pc}
 80235c0:	3ff00000 	.word	0x3ff00000

080235c4 <_strtod_l>:
 80235c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80235c6:	b0a3      	sub	sp, #140	@ 0x8c
 80235c8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80235ca:	2200      	movs	r2, #0
 80235cc:	2600      	movs	r6, #0
 80235ce:	2700      	movs	r7, #0
 80235d0:	9005      	str	r0, [sp, #20]
 80235d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80235d4:	921e      	str	r2, [sp, #120]	@ 0x78
 80235d6:	911d      	str	r1, [sp, #116]	@ 0x74
 80235d8:	780a      	ldrb	r2, [r1, #0]
 80235da:	2a2b      	cmp	r2, #43	@ 0x2b
 80235dc:	d053      	beq.n	8023686 <_strtod_l+0xc2>
 80235de:	d83f      	bhi.n	8023660 <_strtod_l+0x9c>
 80235e0:	2a0d      	cmp	r2, #13
 80235e2:	d839      	bhi.n	8023658 <_strtod_l+0x94>
 80235e4:	2a08      	cmp	r2, #8
 80235e6:	d839      	bhi.n	802365c <_strtod_l+0x98>
 80235e8:	2a00      	cmp	r2, #0
 80235ea:	d042      	beq.n	8023672 <_strtod_l+0xae>
 80235ec:	2200      	movs	r2, #0
 80235ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80235f0:	2100      	movs	r1, #0
 80235f2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80235f4:	910c      	str	r1, [sp, #48]	@ 0x30
 80235f6:	782a      	ldrb	r2, [r5, #0]
 80235f8:	2a30      	cmp	r2, #48	@ 0x30
 80235fa:	d000      	beq.n	80235fe <_strtod_l+0x3a>
 80235fc:	e083      	b.n	8023706 <_strtod_l+0x142>
 80235fe:	786a      	ldrb	r2, [r5, #1]
 8023600:	3120      	adds	r1, #32
 8023602:	438a      	bics	r2, r1
 8023604:	2a58      	cmp	r2, #88	@ 0x58
 8023606:	d000      	beq.n	802360a <_strtod_l+0x46>
 8023608:	e073      	b.n	80236f2 <_strtod_l+0x12e>
 802360a:	9302      	str	r3, [sp, #8]
 802360c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802360e:	4a95      	ldr	r2, [pc, #596]	@ (8023864 <_strtod_l+0x2a0>)
 8023610:	9301      	str	r3, [sp, #4]
 8023612:	ab1e      	add	r3, sp, #120	@ 0x78
 8023614:	9300      	str	r3, [sp, #0]
 8023616:	9805      	ldr	r0, [sp, #20]
 8023618:	ab1f      	add	r3, sp, #124	@ 0x7c
 802361a:	a91d      	add	r1, sp, #116	@ 0x74
 802361c:	f002 fd84 	bl	8026128 <__gethex>
 8023620:	230f      	movs	r3, #15
 8023622:	0002      	movs	r2, r0
 8023624:	401a      	ands	r2, r3
 8023626:	0004      	movs	r4, r0
 8023628:	9206      	str	r2, [sp, #24]
 802362a:	4218      	tst	r0, r3
 802362c:	d005      	beq.n	802363a <_strtod_l+0x76>
 802362e:	2a06      	cmp	r2, #6
 8023630:	d12b      	bne.n	802368a <_strtod_l+0xc6>
 8023632:	2300      	movs	r3, #0
 8023634:	3501      	adds	r5, #1
 8023636:	951d      	str	r5, [sp, #116]	@ 0x74
 8023638:	9312      	str	r3, [sp, #72]	@ 0x48
 802363a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802363c:	2b00      	cmp	r3, #0
 802363e:	d002      	beq.n	8023646 <_strtod_l+0x82>
 8023640:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023642:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023644:	6013      	str	r3, [r2, #0]
 8023646:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023648:	2b00      	cmp	r3, #0
 802364a:	d019      	beq.n	8023680 <_strtod_l+0xbc>
 802364c:	2380      	movs	r3, #128	@ 0x80
 802364e:	0030      	movs	r0, r6
 8023650:	061b      	lsls	r3, r3, #24
 8023652:	18f9      	adds	r1, r7, r3
 8023654:	b023      	add	sp, #140	@ 0x8c
 8023656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023658:	2a20      	cmp	r2, #32
 802365a:	d1c7      	bne.n	80235ec <_strtod_l+0x28>
 802365c:	3101      	adds	r1, #1
 802365e:	e7ba      	b.n	80235d6 <_strtod_l+0x12>
 8023660:	2a2d      	cmp	r2, #45	@ 0x2d
 8023662:	d1c3      	bne.n	80235ec <_strtod_l+0x28>
 8023664:	3a2c      	subs	r2, #44	@ 0x2c
 8023666:	9212      	str	r2, [sp, #72]	@ 0x48
 8023668:	1c4a      	adds	r2, r1, #1
 802366a:	921d      	str	r2, [sp, #116]	@ 0x74
 802366c:	784a      	ldrb	r2, [r1, #1]
 802366e:	2a00      	cmp	r2, #0
 8023670:	d1be      	bne.n	80235f0 <_strtod_l+0x2c>
 8023672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023674:	931d      	str	r3, [sp, #116]	@ 0x74
 8023676:	2300      	movs	r3, #0
 8023678:	9312      	str	r3, [sp, #72]	@ 0x48
 802367a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802367c:	2b00      	cmp	r3, #0
 802367e:	d1df      	bne.n	8023640 <_strtod_l+0x7c>
 8023680:	0030      	movs	r0, r6
 8023682:	0039      	movs	r1, r7
 8023684:	e7e6      	b.n	8023654 <_strtod_l+0x90>
 8023686:	2200      	movs	r2, #0
 8023688:	e7ed      	b.n	8023666 <_strtod_l+0xa2>
 802368a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802368c:	2a00      	cmp	r2, #0
 802368e:	d007      	beq.n	80236a0 <_strtod_l+0xdc>
 8023690:	2135      	movs	r1, #53	@ 0x35
 8023692:	a820      	add	r0, sp, #128	@ 0x80
 8023694:	f003 fd8e 	bl	80271b4 <__copybits>
 8023698:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802369a:	9805      	ldr	r0, [sp, #20]
 802369c:	f003 f948 	bl	8026930 <_Bfree>
 80236a0:	9806      	ldr	r0, [sp, #24]
 80236a2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80236a4:	3801      	subs	r0, #1
 80236a6:	2804      	cmp	r0, #4
 80236a8:	d806      	bhi.n	80236b8 <_strtod_l+0xf4>
 80236aa:	f7dc fd67 	bl	800017c <__gnu_thumb1_case_uqi>
 80236ae:	0312      	.short	0x0312
 80236b0:	1e1c      	.short	0x1e1c
 80236b2:	12          	.byte	0x12
 80236b3:	00          	.byte	0x00
 80236b4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80236b6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 80236b8:	05e4      	lsls	r4, r4, #23
 80236ba:	d502      	bpl.n	80236c2 <_strtod_l+0xfe>
 80236bc:	2380      	movs	r3, #128	@ 0x80
 80236be:	061b      	lsls	r3, r3, #24
 80236c0:	431f      	orrs	r7, r3
 80236c2:	4b69      	ldr	r3, [pc, #420]	@ (8023868 <_strtod_l+0x2a4>)
 80236c4:	423b      	tst	r3, r7
 80236c6:	d1b8      	bne.n	802363a <_strtod_l+0x76>
 80236c8:	f001 fdb2 	bl	8025230 <__errno>
 80236cc:	2322      	movs	r3, #34	@ 0x22
 80236ce:	6003      	str	r3, [r0, #0]
 80236d0:	e7b3      	b.n	802363a <_strtod_l+0x76>
 80236d2:	4966      	ldr	r1, [pc, #408]	@ (802386c <_strtod_l+0x2a8>)
 80236d4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80236d6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80236d8:	400a      	ands	r2, r1
 80236da:	4965      	ldr	r1, [pc, #404]	@ (8023870 <_strtod_l+0x2ac>)
 80236dc:	185b      	adds	r3, r3, r1
 80236de:	051b      	lsls	r3, r3, #20
 80236e0:	431a      	orrs	r2, r3
 80236e2:	0017      	movs	r7, r2
 80236e4:	e7e8      	b.n	80236b8 <_strtod_l+0xf4>
 80236e6:	4f60      	ldr	r7, [pc, #384]	@ (8023868 <_strtod_l+0x2a4>)
 80236e8:	e7e6      	b.n	80236b8 <_strtod_l+0xf4>
 80236ea:	2601      	movs	r6, #1
 80236ec:	4f61      	ldr	r7, [pc, #388]	@ (8023874 <_strtod_l+0x2b0>)
 80236ee:	4276      	negs	r6, r6
 80236f0:	e7e2      	b.n	80236b8 <_strtod_l+0xf4>
 80236f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80236f4:	1c5a      	adds	r2, r3, #1
 80236f6:	921d      	str	r2, [sp, #116]	@ 0x74
 80236f8:	785b      	ldrb	r3, [r3, #1]
 80236fa:	2b30      	cmp	r3, #48	@ 0x30
 80236fc:	d0f9      	beq.n	80236f2 <_strtod_l+0x12e>
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d09b      	beq.n	802363a <_strtod_l+0x76>
 8023702:	2301      	movs	r3, #1
 8023704:	930c      	str	r3, [sp, #48]	@ 0x30
 8023706:	2500      	movs	r5, #0
 8023708:	220a      	movs	r2, #10
 802370a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802370c:	950d      	str	r5, [sp, #52]	@ 0x34
 802370e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023710:	9508      	str	r5, [sp, #32]
 8023712:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023714:	7804      	ldrb	r4, [r0, #0]
 8023716:	0023      	movs	r3, r4
 8023718:	3b30      	subs	r3, #48	@ 0x30
 802371a:	b2d9      	uxtb	r1, r3
 802371c:	2909      	cmp	r1, #9
 802371e:	d927      	bls.n	8023770 <_strtod_l+0x1ac>
 8023720:	2201      	movs	r2, #1
 8023722:	4955      	ldr	r1, [pc, #340]	@ (8023878 <_strtod_l+0x2b4>)
 8023724:	f001 fcf6 	bl	8025114 <strncmp>
 8023728:	2800      	cmp	r0, #0
 802372a:	d031      	beq.n	8023790 <_strtod_l+0x1cc>
 802372c:	2000      	movs	r0, #0
 802372e:	0023      	movs	r3, r4
 8023730:	4684      	mov	ip, r0
 8023732:	9a08      	ldr	r2, [sp, #32]
 8023734:	900e      	str	r0, [sp, #56]	@ 0x38
 8023736:	9206      	str	r2, [sp, #24]
 8023738:	2220      	movs	r2, #32
 802373a:	0019      	movs	r1, r3
 802373c:	4391      	bics	r1, r2
 802373e:	000a      	movs	r2, r1
 8023740:	2100      	movs	r1, #0
 8023742:	9107      	str	r1, [sp, #28]
 8023744:	2a45      	cmp	r2, #69	@ 0x45
 8023746:	d000      	beq.n	802374a <_strtod_l+0x186>
 8023748:	e0c0      	b.n	80238cc <_strtod_l+0x308>
 802374a:	9b06      	ldr	r3, [sp, #24]
 802374c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802374e:	4303      	orrs	r3, r0
 8023750:	4313      	orrs	r3, r2
 8023752:	428b      	cmp	r3, r1
 8023754:	d08d      	beq.n	8023672 <_strtod_l+0xae>
 8023756:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023758:	9309      	str	r3, [sp, #36]	@ 0x24
 802375a:	3301      	adds	r3, #1
 802375c:	931d      	str	r3, [sp, #116]	@ 0x74
 802375e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023760:	785b      	ldrb	r3, [r3, #1]
 8023762:	2b2b      	cmp	r3, #43	@ 0x2b
 8023764:	d070      	beq.n	8023848 <_strtod_l+0x284>
 8023766:	000c      	movs	r4, r1
 8023768:	2b2d      	cmp	r3, #45	@ 0x2d
 802376a:	d173      	bne.n	8023854 <_strtod_l+0x290>
 802376c:	2401      	movs	r4, #1
 802376e:	e06c      	b.n	802384a <_strtod_l+0x286>
 8023770:	9908      	ldr	r1, [sp, #32]
 8023772:	2908      	cmp	r1, #8
 8023774:	dc09      	bgt.n	802378a <_strtod_l+0x1c6>
 8023776:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023778:	4351      	muls	r1, r2
 802377a:	185b      	adds	r3, r3, r1
 802377c:	930d      	str	r3, [sp, #52]	@ 0x34
 802377e:	9b08      	ldr	r3, [sp, #32]
 8023780:	3001      	adds	r0, #1
 8023782:	3301      	adds	r3, #1
 8023784:	9308      	str	r3, [sp, #32]
 8023786:	901d      	str	r0, [sp, #116]	@ 0x74
 8023788:	e7c3      	b.n	8023712 <_strtod_l+0x14e>
 802378a:	4355      	muls	r5, r2
 802378c:	195d      	adds	r5, r3, r5
 802378e:	e7f6      	b.n	802377e <_strtod_l+0x1ba>
 8023790:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023792:	1c5a      	adds	r2, r3, #1
 8023794:	921d      	str	r2, [sp, #116]	@ 0x74
 8023796:	9a08      	ldr	r2, [sp, #32]
 8023798:	785b      	ldrb	r3, [r3, #1]
 802379a:	2a00      	cmp	r2, #0
 802379c:	d03a      	beq.n	8023814 <_strtod_l+0x250>
 802379e:	900e      	str	r0, [sp, #56]	@ 0x38
 80237a0:	9206      	str	r2, [sp, #24]
 80237a2:	001a      	movs	r2, r3
 80237a4:	3a30      	subs	r2, #48	@ 0x30
 80237a6:	2a09      	cmp	r2, #9
 80237a8:	d912      	bls.n	80237d0 <_strtod_l+0x20c>
 80237aa:	2201      	movs	r2, #1
 80237ac:	4694      	mov	ip, r2
 80237ae:	e7c3      	b.n	8023738 <_strtod_l+0x174>
 80237b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80237b2:	3001      	adds	r0, #1
 80237b4:	1c5a      	adds	r2, r3, #1
 80237b6:	921d      	str	r2, [sp, #116]	@ 0x74
 80237b8:	785b      	ldrb	r3, [r3, #1]
 80237ba:	2b30      	cmp	r3, #48	@ 0x30
 80237bc:	d0f8      	beq.n	80237b0 <_strtod_l+0x1ec>
 80237be:	001a      	movs	r2, r3
 80237c0:	3a31      	subs	r2, #49	@ 0x31
 80237c2:	2a08      	cmp	r2, #8
 80237c4:	d83b      	bhi.n	802383e <_strtod_l+0x27a>
 80237c6:	900e      	str	r0, [sp, #56]	@ 0x38
 80237c8:	2000      	movs	r0, #0
 80237ca:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80237cc:	9006      	str	r0, [sp, #24]
 80237ce:	9213      	str	r2, [sp, #76]	@ 0x4c
 80237d0:	001a      	movs	r2, r3
 80237d2:	1c41      	adds	r1, r0, #1
 80237d4:	3a30      	subs	r2, #48	@ 0x30
 80237d6:	2b30      	cmp	r3, #48	@ 0x30
 80237d8:	d016      	beq.n	8023808 <_strtod_l+0x244>
 80237da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80237dc:	185b      	adds	r3, r3, r1
 80237de:	930e      	str	r3, [sp, #56]	@ 0x38
 80237e0:	9b06      	ldr	r3, [sp, #24]
 80237e2:	210a      	movs	r1, #10
 80237e4:	469c      	mov	ip, r3
 80237e6:	4484      	add	ip, r0
 80237e8:	459c      	cmp	ip, r3
 80237ea:	d115      	bne.n	8023818 <_strtod_l+0x254>
 80237ec:	9906      	ldr	r1, [sp, #24]
 80237ee:	9b06      	ldr	r3, [sp, #24]
 80237f0:	3101      	adds	r1, #1
 80237f2:	1809      	adds	r1, r1, r0
 80237f4:	181b      	adds	r3, r3, r0
 80237f6:	9106      	str	r1, [sp, #24]
 80237f8:	2b08      	cmp	r3, #8
 80237fa:	dc19      	bgt.n	8023830 <_strtod_l+0x26c>
 80237fc:	230a      	movs	r3, #10
 80237fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023800:	434b      	muls	r3, r1
 8023802:	2100      	movs	r1, #0
 8023804:	18d3      	adds	r3, r2, r3
 8023806:	930d      	str	r3, [sp, #52]	@ 0x34
 8023808:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802380a:	0008      	movs	r0, r1
 802380c:	1c5a      	adds	r2, r3, #1
 802380e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023810:	785b      	ldrb	r3, [r3, #1]
 8023812:	e7c6      	b.n	80237a2 <_strtod_l+0x1de>
 8023814:	9808      	ldr	r0, [sp, #32]
 8023816:	e7d0      	b.n	80237ba <_strtod_l+0x1f6>
 8023818:	1c5c      	adds	r4, r3, #1
 802381a:	2b08      	cmp	r3, #8
 802381c:	dc04      	bgt.n	8023828 <_strtod_l+0x264>
 802381e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023820:	434b      	muls	r3, r1
 8023822:	930d      	str	r3, [sp, #52]	@ 0x34
 8023824:	0023      	movs	r3, r4
 8023826:	e7df      	b.n	80237e8 <_strtod_l+0x224>
 8023828:	2c10      	cmp	r4, #16
 802382a:	dcfb      	bgt.n	8023824 <_strtod_l+0x260>
 802382c:	434d      	muls	r5, r1
 802382e:	e7f9      	b.n	8023824 <_strtod_l+0x260>
 8023830:	2100      	movs	r1, #0
 8023832:	2b0f      	cmp	r3, #15
 8023834:	dce8      	bgt.n	8023808 <_strtod_l+0x244>
 8023836:	230a      	movs	r3, #10
 8023838:	435d      	muls	r5, r3
 802383a:	1955      	adds	r5, r2, r5
 802383c:	e7e4      	b.n	8023808 <_strtod_l+0x244>
 802383e:	2200      	movs	r2, #0
 8023840:	920e      	str	r2, [sp, #56]	@ 0x38
 8023842:	9206      	str	r2, [sp, #24]
 8023844:	3201      	adds	r2, #1
 8023846:	e7b1      	b.n	80237ac <_strtod_l+0x1e8>
 8023848:	2400      	movs	r4, #0
 802384a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802384c:	3302      	adds	r3, #2
 802384e:	931d      	str	r3, [sp, #116]	@ 0x74
 8023850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023852:	789b      	ldrb	r3, [r3, #2]
 8023854:	001a      	movs	r2, r3
 8023856:	3a30      	subs	r2, #48	@ 0x30
 8023858:	2a09      	cmp	r2, #9
 802385a:	d913      	bls.n	8023884 <_strtod_l+0x2c0>
 802385c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802385e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023860:	2200      	movs	r2, #0
 8023862:	e032      	b.n	80238ca <_strtod_l+0x306>
 8023864:	0802db0c 	.word	0x0802db0c
 8023868:	7ff00000 	.word	0x7ff00000
 802386c:	ffefffff 	.word	0xffefffff
 8023870:	00000433 	.word	0x00000433
 8023874:	7fffffff 	.word	0x7fffffff
 8023878:	0802daf4 	.word	0x0802daf4
 802387c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802387e:	1c5a      	adds	r2, r3, #1
 8023880:	921d      	str	r2, [sp, #116]	@ 0x74
 8023882:	785b      	ldrb	r3, [r3, #1]
 8023884:	2b30      	cmp	r3, #48	@ 0x30
 8023886:	d0f9      	beq.n	802387c <_strtod_l+0x2b8>
 8023888:	2200      	movs	r2, #0
 802388a:	9207      	str	r2, [sp, #28]
 802388c:	001a      	movs	r2, r3
 802388e:	3a31      	subs	r2, #49	@ 0x31
 8023890:	2a08      	cmp	r2, #8
 8023892:	d81b      	bhi.n	80238cc <_strtod_l+0x308>
 8023894:	3b30      	subs	r3, #48	@ 0x30
 8023896:	9310      	str	r3, [sp, #64]	@ 0x40
 8023898:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802389a:	9307      	str	r3, [sp, #28]
 802389c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802389e:	1c59      	adds	r1, r3, #1
 80238a0:	911d      	str	r1, [sp, #116]	@ 0x74
 80238a2:	785b      	ldrb	r3, [r3, #1]
 80238a4:	001a      	movs	r2, r3
 80238a6:	3a30      	subs	r2, #48	@ 0x30
 80238a8:	2a09      	cmp	r2, #9
 80238aa:	d93a      	bls.n	8023922 <_strtod_l+0x35e>
 80238ac:	9a07      	ldr	r2, [sp, #28]
 80238ae:	1a8a      	subs	r2, r1, r2
 80238b0:	49b4      	ldr	r1, [pc, #720]	@ (8023b84 <_strtod_l+0x5c0>)
 80238b2:	9107      	str	r1, [sp, #28]
 80238b4:	2a08      	cmp	r2, #8
 80238b6:	dc04      	bgt.n	80238c2 <_strtod_l+0x2fe>
 80238b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80238ba:	9207      	str	r2, [sp, #28]
 80238bc:	428a      	cmp	r2, r1
 80238be:	dd00      	ble.n	80238c2 <_strtod_l+0x2fe>
 80238c0:	9107      	str	r1, [sp, #28]
 80238c2:	2c00      	cmp	r4, #0
 80238c4:	d002      	beq.n	80238cc <_strtod_l+0x308>
 80238c6:	9a07      	ldr	r2, [sp, #28]
 80238c8:	4252      	negs	r2, r2
 80238ca:	9207      	str	r2, [sp, #28]
 80238cc:	9a06      	ldr	r2, [sp, #24]
 80238ce:	2a00      	cmp	r2, #0
 80238d0:	d14d      	bne.n	802396e <_strtod_l+0x3aa>
 80238d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80238d4:	4310      	orrs	r0, r2
 80238d6:	d000      	beq.n	80238da <_strtod_l+0x316>
 80238d8:	e6af      	b.n	802363a <_strtod_l+0x76>
 80238da:	4662      	mov	r2, ip
 80238dc:	2a00      	cmp	r2, #0
 80238de:	d000      	beq.n	80238e2 <_strtod_l+0x31e>
 80238e0:	e6c7      	b.n	8023672 <_strtod_l+0xae>
 80238e2:	2b69      	cmp	r3, #105	@ 0x69
 80238e4:	d027      	beq.n	8023936 <_strtod_l+0x372>
 80238e6:	dc23      	bgt.n	8023930 <_strtod_l+0x36c>
 80238e8:	2b49      	cmp	r3, #73	@ 0x49
 80238ea:	d024      	beq.n	8023936 <_strtod_l+0x372>
 80238ec:	2b4e      	cmp	r3, #78	@ 0x4e
 80238ee:	d000      	beq.n	80238f2 <_strtod_l+0x32e>
 80238f0:	e6bf      	b.n	8023672 <_strtod_l+0xae>
 80238f2:	49a5      	ldr	r1, [pc, #660]	@ (8023b88 <_strtod_l+0x5c4>)
 80238f4:	a81d      	add	r0, sp, #116	@ 0x74
 80238f6:	f002 fe4d 	bl	8026594 <__match>
 80238fa:	2800      	cmp	r0, #0
 80238fc:	d100      	bne.n	8023900 <_strtod_l+0x33c>
 80238fe:	e6b8      	b.n	8023672 <_strtod_l+0xae>
 8023900:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023902:	781b      	ldrb	r3, [r3, #0]
 8023904:	2b28      	cmp	r3, #40	@ 0x28
 8023906:	d12c      	bne.n	8023962 <_strtod_l+0x39e>
 8023908:	49a0      	ldr	r1, [pc, #640]	@ (8023b8c <_strtod_l+0x5c8>)
 802390a:	aa20      	add	r2, sp, #128	@ 0x80
 802390c:	a81d      	add	r0, sp, #116	@ 0x74
 802390e:	f002 fe55 	bl	80265bc <__hexnan>
 8023912:	2805      	cmp	r0, #5
 8023914:	d125      	bne.n	8023962 <_strtod_l+0x39e>
 8023916:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023918:	4a9d      	ldr	r2, [pc, #628]	@ (8023b90 <_strtod_l+0x5cc>)
 802391a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802391c:	431a      	orrs	r2, r3
 802391e:	0017      	movs	r7, r2
 8023920:	e68b      	b.n	802363a <_strtod_l+0x76>
 8023922:	220a      	movs	r2, #10
 8023924:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023926:	434a      	muls	r2, r1
 8023928:	18d2      	adds	r2, r2, r3
 802392a:	3a30      	subs	r2, #48	@ 0x30
 802392c:	9210      	str	r2, [sp, #64]	@ 0x40
 802392e:	e7b5      	b.n	802389c <_strtod_l+0x2d8>
 8023930:	2b6e      	cmp	r3, #110	@ 0x6e
 8023932:	d0de      	beq.n	80238f2 <_strtod_l+0x32e>
 8023934:	e69d      	b.n	8023672 <_strtod_l+0xae>
 8023936:	4997      	ldr	r1, [pc, #604]	@ (8023b94 <_strtod_l+0x5d0>)
 8023938:	a81d      	add	r0, sp, #116	@ 0x74
 802393a:	f002 fe2b 	bl	8026594 <__match>
 802393e:	2800      	cmp	r0, #0
 8023940:	d100      	bne.n	8023944 <_strtod_l+0x380>
 8023942:	e696      	b.n	8023672 <_strtod_l+0xae>
 8023944:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023946:	4994      	ldr	r1, [pc, #592]	@ (8023b98 <_strtod_l+0x5d4>)
 8023948:	3b01      	subs	r3, #1
 802394a:	a81d      	add	r0, sp, #116	@ 0x74
 802394c:	931d      	str	r3, [sp, #116]	@ 0x74
 802394e:	f002 fe21 	bl	8026594 <__match>
 8023952:	2800      	cmp	r0, #0
 8023954:	d102      	bne.n	802395c <_strtod_l+0x398>
 8023956:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023958:	3301      	adds	r3, #1
 802395a:	931d      	str	r3, [sp, #116]	@ 0x74
 802395c:	2600      	movs	r6, #0
 802395e:	4f8c      	ldr	r7, [pc, #560]	@ (8023b90 <_strtod_l+0x5cc>)
 8023960:	e66b      	b.n	802363a <_strtod_l+0x76>
 8023962:	488e      	ldr	r0, [pc, #568]	@ (8023b9c <_strtod_l+0x5d8>)
 8023964:	f001 fca6 	bl	80252b4 <nan>
 8023968:	0006      	movs	r6, r0
 802396a:	000f      	movs	r7, r1
 802396c:	e665      	b.n	802363a <_strtod_l+0x76>
 802396e:	9b07      	ldr	r3, [sp, #28]
 8023970:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023972:	1a9b      	subs	r3, r3, r2
 8023974:	930c      	str	r3, [sp, #48]	@ 0x30
 8023976:	9b08      	ldr	r3, [sp, #32]
 8023978:	2b00      	cmp	r3, #0
 802397a:	d101      	bne.n	8023980 <_strtod_l+0x3bc>
 802397c:	9b06      	ldr	r3, [sp, #24]
 802397e:	9308      	str	r3, [sp, #32]
 8023980:	9c06      	ldr	r4, [sp, #24]
 8023982:	2c10      	cmp	r4, #16
 8023984:	dd00      	ble.n	8023988 <_strtod_l+0x3c4>
 8023986:	2410      	movs	r4, #16
 8023988:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802398a:	f7df fd47 	bl	800341c <__aeabi_ui2d>
 802398e:	9b06      	ldr	r3, [sp, #24]
 8023990:	0006      	movs	r6, r0
 8023992:	000f      	movs	r7, r1
 8023994:	2b09      	cmp	r3, #9
 8023996:	dc13      	bgt.n	80239c0 <_strtod_l+0x3fc>
 8023998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802399a:	2b00      	cmp	r3, #0
 802399c:	d100      	bne.n	80239a0 <_strtod_l+0x3dc>
 802399e:	e64c      	b.n	802363a <_strtod_l+0x76>
 80239a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	dc00      	bgt.n	80239a8 <_strtod_l+0x3e4>
 80239a6:	e07e      	b.n	8023aa6 <_strtod_l+0x4e2>
 80239a8:	2b16      	cmp	r3, #22
 80239aa:	dc63      	bgt.n	8023a74 <_strtod_l+0x4b0>
 80239ac:	497c      	ldr	r1, [pc, #496]	@ (8023ba0 <_strtod_l+0x5dc>)
 80239ae:	00db      	lsls	r3, r3, #3
 80239b0:	18c9      	adds	r1, r1, r3
 80239b2:	0032      	movs	r2, r6
 80239b4:	6808      	ldr	r0, [r1, #0]
 80239b6:	6849      	ldr	r1, [r1, #4]
 80239b8:	003b      	movs	r3, r7
 80239ba:	f7de fe3f 	bl	800263c <__aeabi_dmul>
 80239be:	e7d3      	b.n	8023968 <_strtod_l+0x3a4>
 80239c0:	0022      	movs	r2, r4
 80239c2:	4b77      	ldr	r3, [pc, #476]	@ (8023ba0 <_strtod_l+0x5dc>)
 80239c4:	3a09      	subs	r2, #9
 80239c6:	00d2      	lsls	r2, r2, #3
 80239c8:	189b      	adds	r3, r3, r2
 80239ca:	681a      	ldr	r2, [r3, #0]
 80239cc:	685b      	ldr	r3, [r3, #4]
 80239ce:	f7de fe35 	bl	800263c <__aeabi_dmul>
 80239d2:	0006      	movs	r6, r0
 80239d4:	0028      	movs	r0, r5
 80239d6:	000f      	movs	r7, r1
 80239d8:	f7df fd20 	bl	800341c <__aeabi_ui2d>
 80239dc:	000b      	movs	r3, r1
 80239de:	0002      	movs	r2, r0
 80239e0:	0039      	movs	r1, r7
 80239e2:	0030      	movs	r0, r6
 80239e4:	f7dd fe82 	bl	80016ec <__aeabi_dadd>
 80239e8:	9b06      	ldr	r3, [sp, #24]
 80239ea:	0006      	movs	r6, r0
 80239ec:	000f      	movs	r7, r1
 80239ee:	2b0f      	cmp	r3, #15
 80239f0:	ddd2      	ble.n	8023998 <_strtod_l+0x3d4>
 80239f2:	9b06      	ldr	r3, [sp, #24]
 80239f4:	1b1c      	subs	r4, r3, r4
 80239f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80239f8:	18e4      	adds	r4, r4, r3
 80239fa:	2c00      	cmp	r4, #0
 80239fc:	dc00      	bgt.n	8023a00 <_strtod_l+0x43c>
 80239fe:	e09b      	b.n	8023b38 <_strtod_l+0x574>
 8023a00:	220f      	movs	r2, #15
 8023a02:	0023      	movs	r3, r4
 8023a04:	4013      	ands	r3, r2
 8023a06:	4214      	tst	r4, r2
 8023a08:	d00a      	beq.n	8023a20 <_strtod_l+0x45c>
 8023a0a:	4965      	ldr	r1, [pc, #404]	@ (8023ba0 <_strtod_l+0x5dc>)
 8023a0c:	00db      	lsls	r3, r3, #3
 8023a0e:	18c9      	adds	r1, r1, r3
 8023a10:	0032      	movs	r2, r6
 8023a12:	6808      	ldr	r0, [r1, #0]
 8023a14:	6849      	ldr	r1, [r1, #4]
 8023a16:	003b      	movs	r3, r7
 8023a18:	f7de fe10 	bl	800263c <__aeabi_dmul>
 8023a1c:	0006      	movs	r6, r0
 8023a1e:	000f      	movs	r7, r1
 8023a20:	230f      	movs	r3, #15
 8023a22:	439c      	bics	r4, r3
 8023a24:	d073      	beq.n	8023b0e <_strtod_l+0x54a>
 8023a26:	3326      	adds	r3, #38	@ 0x26
 8023a28:	33ff      	adds	r3, #255	@ 0xff
 8023a2a:	429c      	cmp	r4, r3
 8023a2c:	dd4b      	ble.n	8023ac6 <_strtod_l+0x502>
 8023a2e:	2300      	movs	r3, #0
 8023a30:	9306      	str	r3, [sp, #24]
 8023a32:	9307      	str	r3, [sp, #28]
 8023a34:	930d      	str	r3, [sp, #52]	@ 0x34
 8023a36:	9308      	str	r3, [sp, #32]
 8023a38:	2322      	movs	r3, #34	@ 0x22
 8023a3a:	2600      	movs	r6, #0
 8023a3c:	9a05      	ldr	r2, [sp, #20]
 8023a3e:	4f54      	ldr	r7, [pc, #336]	@ (8023b90 <_strtod_l+0x5cc>)
 8023a40:	6013      	str	r3, [r2, #0]
 8023a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023a44:	42b3      	cmp	r3, r6
 8023a46:	d100      	bne.n	8023a4a <_strtod_l+0x486>
 8023a48:	e5f7      	b.n	802363a <_strtod_l+0x76>
 8023a4a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023a4c:	9805      	ldr	r0, [sp, #20]
 8023a4e:	f002 ff6f 	bl	8026930 <_Bfree>
 8023a52:	9908      	ldr	r1, [sp, #32]
 8023a54:	9805      	ldr	r0, [sp, #20]
 8023a56:	f002 ff6b 	bl	8026930 <_Bfree>
 8023a5a:	9907      	ldr	r1, [sp, #28]
 8023a5c:	9805      	ldr	r0, [sp, #20]
 8023a5e:	f002 ff67 	bl	8026930 <_Bfree>
 8023a62:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023a64:	9805      	ldr	r0, [sp, #20]
 8023a66:	f002 ff63 	bl	8026930 <_Bfree>
 8023a6a:	9906      	ldr	r1, [sp, #24]
 8023a6c:	9805      	ldr	r0, [sp, #20]
 8023a6e:	f002 ff5f 	bl	8026930 <_Bfree>
 8023a72:	e5e2      	b.n	802363a <_strtod_l+0x76>
 8023a74:	2325      	movs	r3, #37	@ 0x25
 8023a76:	9a06      	ldr	r2, [sp, #24]
 8023a78:	1a9b      	subs	r3, r3, r2
 8023a7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023a7c:	4293      	cmp	r3, r2
 8023a7e:	dbb8      	blt.n	80239f2 <_strtod_l+0x42e>
 8023a80:	240f      	movs	r4, #15
 8023a82:	9b06      	ldr	r3, [sp, #24]
 8023a84:	4d46      	ldr	r5, [pc, #280]	@ (8023ba0 <_strtod_l+0x5dc>)
 8023a86:	1ae4      	subs	r4, r4, r3
 8023a88:	00e1      	lsls	r1, r4, #3
 8023a8a:	1869      	adds	r1, r5, r1
 8023a8c:	0032      	movs	r2, r6
 8023a8e:	6808      	ldr	r0, [r1, #0]
 8023a90:	6849      	ldr	r1, [r1, #4]
 8023a92:	003b      	movs	r3, r7
 8023a94:	f7de fdd2 	bl	800263c <__aeabi_dmul>
 8023a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023a9a:	1b1c      	subs	r4, r3, r4
 8023a9c:	00e4      	lsls	r4, r4, #3
 8023a9e:	192d      	adds	r5, r5, r4
 8023aa0:	682a      	ldr	r2, [r5, #0]
 8023aa2:	686b      	ldr	r3, [r5, #4]
 8023aa4:	e789      	b.n	80239ba <_strtod_l+0x3f6>
 8023aa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023aa8:	3316      	adds	r3, #22
 8023aaa:	dba2      	blt.n	80239f2 <_strtod_l+0x42e>
 8023aac:	9907      	ldr	r1, [sp, #28]
 8023aae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8023ba0 <_strtod_l+0x5dc>)
 8023ab2:	1a52      	subs	r2, r2, r1
 8023ab4:	00d2      	lsls	r2, r2, #3
 8023ab6:	189b      	adds	r3, r3, r2
 8023ab8:	0030      	movs	r0, r6
 8023aba:	681a      	ldr	r2, [r3, #0]
 8023abc:	685b      	ldr	r3, [r3, #4]
 8023abe:	0039      	movs	r1, r7
 8023ac0:	f7de f978 	bl	8001db4 <__aeabi_ddiv>
 8023ac4:	e750      	b.n	8023968 <_strtod_l+0x3a4>
 8023ac6:	2300      	movs	r3, #0
 8023ac8:	0030      	movs	r0, r6
 8023aca:	0039      	movs	r1, r7
 8023acc:	4d35      	ldr	r5, [pc, #212]	@ (8023ba4 <_strtod_l+0x5e0>)
 8023ace:	1124      	asrs	r4, r4, #4
 8023ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ad2:	2c01      	cmp	r4, #1
 8023ad4:	dc1e      	bgt.n	8023b14 <_strtod_l+0x550>
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d001      	beq.n	8023ade <_strtod_l+0x51a>
 8023ada:	0006      	movs	r6, r0
 8023adc:	000f      	movs	r7, r1
 8023ade:	4b32      	ldr	r3, [pc, #200]	@ (8023ba8 <_strtod_l+0x5e4>)
 8023ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023ae2:	18ff      	adds	r7, r7, r3
 8023ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8023ba4 <_strtod_l+0x5e0>)
 8023ae6:	00d5      	lsls	r5, r2, #3
 8023ae8:	195d      	adds	r5, r3, r5
 8023aea:	0032      	movs	r2, r6
 8023aec:	6828      	ldr	r0, [r5, #0]
 8023aee:	6869      	ldr	r1, [r5, #4]
 8023af0:	003b      	movs	r3, r7
 8023af2:	f7de fda3 	bl	800263c <__aeabi_dmul>
 8023af6:	4b26      	ldr	r3, [pc, #152]	@ (8023b90 <_strtod_l+0x5cc>)
 8023af8:	4a2c      	ldr	r2, [pc, #176]	@ (8023bac <_strtod_l+0x5e8>)
 8023afa:	0006      	movs	r6, r0
 8023afc:	400b      	ands	r3, r1
 8023afe:	4293      	cmp	r3, r2
 8023b00:	d895      	bhi.n	8023a2e <_strtod_l+0x46a>
 8023b02:	4a2b      	ldr	r2, [pc, #172]	@ (8023bb0 <_strtod_l+0x5ec>)
 8023b04:	4293      	cmp	r3, r2
 8023b06:	d913      	bls.n	8023b30 <_strtod_l+0x56c>
 8023b08:	2601      	movs	r6, #1
 8023b0a:	4f2a      	ldr	r7, [pc, #168]	@ (8023bb4 <_strtod_l+0x5f0>)
 8023b0c:	4276      	negs	r6, r6
 8023b0e:	2300      	movs	r3, #0
 8023b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b12:	e086      	b.n	8023c22 <_strtod_l+0x65e>
 8023b14:	2201      	movs	r2, #1
 8023b16:	4214      	tst	r4, r2
 8023b18:	d004      	beq.n	8023b24 <_strtod_l+0x560>
 8023b1a:	682a      	ldr	r2, [r5, #0]
 8023b1c:	686b      	ldr	r3, [r5, #4]
 8023b1e:	f7de fd8d 	bl	800263c <__aeabi_dmul>
 8023b22:	2301      	movs	r3, #1
 8023b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023b26:	1064      	asrs	r4, r4, #1
 8023b28:	3201      	adds	r2, #1
 8023b2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023b2c:	3508      	adds	r5, #8
 8023b2e:	e7d0      	b.n	8023ad2 <_strtod_l+0x50e>
 8023b30:	23d4      	movs	r3, #212	@ 0xd4
 8023b32:	049b      	lsls	r3, r3, #18
 8023b34:	18cf      	adds	r7, r1, r3
 8023b36:	e7ea      	b.n	8023b0e <_strtod_l+0x54a>
 8023b38:	2c00      	cmp	r4, #0
 8023b3a:	d0e8      	beq.n	8023b0e <_strtod_l+0x54a>
 8023b3c:	4264      	negs	r4, r4
 8023b3e:	230f      	movs	r3, #15
 8023b40:	0022      	movs	r2, r4
 8023b42:	401a      	ands	r2, r3
 8023b44:	421c      	tst	r4, r3
 8023b46:	d00a      	beq.n	8023b5e <_strtod_l+0x59a>
 8023b48:	4b15      	ldr	r3, [pc, #84]	@ (8023ba0 <_strtod_l+0x5dc>)
 8023b4a:	00d2      	lsls	r2, r2, #3
 8023b4c:	189b      	adds	r3, r3, r2
 8023b4e:	0030      	movs	r0, r6
 8023b50:	681a      	ldr	r2, [r3, #0]
 8023b52:	685b      	ldr	r3, [r3, #4]
 8023b54:	0039      	movs	r1, r7
 8023b56:	f7de f92d 	bl	8001db4 <__aeabi_ddiv>
 8023b5a:	0006      	movs	r6, r0
 8023b5c:	000f      	movs	r7, r1
 8023b5e:	1124      	asrs	r4, r4, #4
 8023b60:	d0d5      	beq.n	8023b0e <_strtod_l+0x54a>
 8023b62:	2c1f      	cmp	r4, #31
 8023b64:	dd28      	ble.n	8023bb8 <_strtod_l+0x5f4>
 8023b66:	2300      	movs	r3, #0
 8023b68:	9306      	str	r3, [sp, #24]
 8023b6a:	9307      	str	r3, [sp, #28]
 8023b6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8023b6e:	9308      	str	r3, [sp, #32]
 8023b70:	2322      	movs	r3, #34	@ 0x22
 8023b72:	9a05      	ldr	r2, [sp, #20]
 8023b74:	2600      	movs	r6, #0
 8023b76:	6013      	str	r3, [r2, #0]
 8023b78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023b7a:	2700      	movs	r7, #0
 8023b7c:	2b00      	cmp	r3, #0
 8023b7e:	d000      	beq.n	8023b82 <_strtod_l+0x5be>
 8023b80:	e763      	b.n	8023a4a <_strtod_l+0x486>
 8023b82:	e55a      	b.n	802363a <_strtod_l+0x76>
 8023b84:	00004e1f 	.word	0x00004e1f
 8023b88:	0802dc56 	.word	0x0802dc56
 8023b8c:	0802daf8 	.word	0x0802daf8
 8023b90:	7ff00000 	.word	0x7ff00000
 8023b94:	0802dc4e 	.word	0x0802dc4e
 8023b98:	0802dc88 	.word	0x0802dc88
 8023b9c:	0802df14 	.word	0x0802df14
 8023ba0:	0802de00 	.word	0x0802de00
 8023ba4:	0802ddd8 	.word	0x0802ddd8
 8023ba8:	fcb00000 	.word	0xfcb00000
 8023bac:	7ca00000 	.word	0x7ca00000
 8023bb0:	7c900000 	.word	0x7c900000
 8023bb4:	7fefffff 	.word	0x7fefffff
 8023bb8:	2310      	movs	r3, #16
 8023bba:	0022      	movs	r2, r4
 8023bbc:	401a      	ands	r2, r3
 8023bbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8023bc0:	421c      	tst	r4, r3
 8023bc2:	d001      	beq.n	8023bc8 <_strtod_l+0x604>
 8023bc4:	335a      	adds	r3, #90	@ 0x5a
 8023bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8023bc8:	0030      	movs	r0, r6
 8023bca:	0039      	movs	r1, r7
 8023bcc:	2300      	movs	r3, #0
 8023bce:	4dbf      	ldr	r5, [pc, #764]	@ (8023ecc <_strtod_l+0x908>)
 8023bd0:	2201      	movs	r2, #1
 8023bd2:	4214      	tst	r4, r2
 8023bd4:	d004      	beq.n	8023be0 <_strtod_l+0x61c>
 8023bd6:	682a      	ldr	r2, [r5, #0]
 8023bd8:	686b      	ldr	r3, [r5, #4]
 8023bda:	f7de fd2f 	bl	800263c <__aeabi_dmul>
 8023bde:	2301      	movs	r3, #1
 8023be0:	1064      	asrs	r4, r4, #1
 8023be2:	3508      	adds	r5, #8
 8023be4:	2c00      	cmp	r4, #0
 8023be6:	d1f3      	bne.n	8023bd0 <_strtod_l+0x60c>
 8023be8:	2b00      	cmp	r3, #0
 8023bea:	d001      	beq.n	8023bf0 <_strtod_l+0x62c>
 8023bec:	0006      	movs	r6, r0
 8023bee:	000f      	movs	r7, r1
 8023bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	d00d      	beq.n	8023c12 <_strtod_l+0x64e>
 8023bf6:	236b      	movs	r3, #107	@ 0x6b
 8023bf8:	007a      	lsls	r2, r7, #1
 8023bfa:	0d52      	lsrs	r2, r2, #21
 8023bfc:	0039      	movs	r1, r7
 8023bfe:	1a9b      	subs	r3, r3, r2
 8023c00:	2b00      	cmp	r3, #0
 8023c02:	dd06      	ble.n	8023c12 <_strtod_l+0x64e>
 8023c04:	2b1f      	cmp	r3, #31
 8023c06:	dd5a      	ble.n	8023cbe <_strtod_l+0x6fa>
 8023c08:	2600      	movs	r6, #0
 8023c0a:	2b34      	cmp	r3, #52	@ 0x34
 8023c0c:	dd50      	ble.n	8023cb0 <_strtod_l+0x6ec>
 8023c0e:	27dc      	movs	r7, #220	@ 0xdc
 8023c10:	04bf      	lsls	r7, r7, #18
 8023c12:	2200      	movs	r2, #0
 8023c14:	2300      	movs	r3, #0
 8023c16:	0030      	movs	r0, r6
 8023c18:	0039      	movs	r1, r7
 8023c1a:	f7dc fc49 	bl	80004b0 <__aeabi_dcmpeq>
 8023c1e:	2800      	cmp	r0, #0
 8023c20:	d1a1      	bne.n	8023b66 <_strtod_l+0x5a2>
 8023c22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023c24:	9a08      	ldr	r2, [sp, #32]
 8023c26:	9300      	str	r3, [sp, #0]
 8023c28:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023c2a:	9b06      	ldr	r3, [sp, #24]
 8023c2c:	9805      	ldr	r0, [sp, #20]
 8023c2e:	f002 fee7 	bl	8026a00 <__s2b>
 8023c32:	900d      	str	r0, [sp, #52]	@ 0x34
 8023c34:	2800      	cmp	r0, #0
 8023c36:	d100      	bne.n	8023c3a <_strtod_l+0x676>
 8023c38:	e6f9      	b.n	8023a2e <_strtod_l+0x46a>
 8023c3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023c3c:	9907      	ldr	r1, [sp, #28]
 8023c3e:	17da      	asrs	r2, r3, #31
 8023c40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023c42:	1a5b      	subs	r3, r3, r1
 8023c44:	401a      	ands	r2, r3
 8023c46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023c48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8023c4a:	43db      	mvns	r3, r3
 8023c4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023c4e:	17db      	asrs	r3, r3, #31
 8023c50:	401a      	ands	r2, r3
 8023c52:	2300      	movs	r3, #0
 8023c54:	921a      	str	r2, [sp, #104]	@ 0x68
 8023c56:	9306      	str	r3, [sp, #24]
 8023c58:	9307      	str	r3, [sp, #28]
 8023c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023c5c:	9805      	ldr	r0, [sp, #20]
 8023c5e:	6859      	ldr	r1, [r3, #4]
 8023c60:	f002 fe22 	bl	80268a8 <_Balloc>
 8023c64:	9008      	str	r0, [sp, #32]
 8023c66:	2800      	cmp	r0, #0
 8023c68:	d100      	bne.n	8023c6c <_strtod_l+0x6a8>
 8023c6a:	e6e5      	b.n	8023a38 <_strtod_l+0x474>
 8023c6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023c6e:	300c      	adds	r0, #12
 8023c70:	0019      	movs	r1, r3
 8023c72:	691a      	ldr	r2, [r3, #16]
 8023c74:	310c      	adds	r1, #12
 8023c76:	3202      	adds	r2, #2
 8023c78:	0092      	lsls	r2, r2, #2
 8023c7a:	f001 fb11 	bl	80252a0 <memcpy>
 8023c7e:	ab20      	add	r3, sp, #128	@ 0x80
 8023c80:	9301      	str	r3, [sp, #4]
 8023c82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023c84:	9300      	str	r3, [sp, #0]
 8023c86:	0032      	movs	r2, r6
 8023c88:	003b      	movs	r3, r7
 8023c8a:	9805      	ldr	r0, [sp, #20]
 8023c8c:	9610      	str	r6, [sp, #64]	@ 0x40
 8023c8e:	9711      	str	r7, [sp, #68]	@ 0x44
 8023c90:	f003 fa06 	bl	80270a0 <__d2b>
 8023c94:	901e      	str	r0, [sp, #120]	@ 0x78
 8023c96:	2800      	cmp	r0, #0
 8023c98:	d100      	bne.n	8023c9c <_strtod_l+0x6d8>
 8023c9a:	e6cd      	b.n	8023a38 <_strtod_l+0x474>
 8023c9c:	2101      	movs	r1, #1
 8023c9e:	9805      	ldr	r0, [sp, #20]
 8023ca0:	f002 ff4a 	bl	8026b38 <__i2b>
 8023ca4:	9007      	str	r0, [sp, #28]
 8023ca6:	2800      	cmp	r0, #0
 8023ca8:	d10e      	bne.n	8023cc8 <_strtod_l+0x704>
 8023caa:	2300      	movs	r3, #0
 8023cac:	9307      	str	r3, [sp, #28]
 8023cae:	e6c3      	b.n	8023a38 <_strtod_l+0x474>
 8023cb0:	234b      	movs	r3, #75	@ 0x4b
 8023cb2:	1a9a      	subs	r2, r3, r2
 8023cb4:	3b4c      	subs	r3, #76	@ 0x4c
 8023cb6:	4093      	lsls	r3, r2
 8023cb8:	4019      	ands	r1, r3
 8023cba:	000f      	movs	r7, r1
 8023cbc:	e7a9      	b.n	8023c12 <_strtod_l+0x64e>
 8023cbe:	2201      	movs	r2, #1
 8023cc0:	4252      	negs	r2, r2
 8023cc2:	409a      	lsls	r2, r3
 8023cc4:	4016      	ands	r6, r2
 8023cc6:	e7a4      	b.n	8023c12 <_strtod_l+0x64e>
 8023cc8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023cca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023ccc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8023cce:	1ad4      	subs	r4, r2, r3
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	db01      	blt.n	8023cd8 <_strtod_l+0x714>
 8023cd4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8023cd6:	195d      	adds	r5, r3, r5
 8023cd8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023cda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8023cdc:	1a5b      	subs	r3, r3, r1
 8023cde:	2136      	movs	r1, #54	@ 0x36
 8023ce0:	189b      	adds	r3, r3, r2
 8023ce2:	1a8a      	subs	r2, r1, r2
 8023ce4:	497a      	ldr	r1, [pc, #488]	@ (8023ed0 <_strtod_l+0x90c>)
 8023ce6:	2001      	movs	r0, #1
 8023ce8:	468c      	mov	ip, r1
 8023cea:	2100      	movs	r1, #0
 8023cec:	3b01      	subs	r3, #1
 8023cee:	9116      	str	r1, [sp, #88]	@ 0x58
 8023cf0:	9014      	str	r0, [sp, #80]	@ 0x50
 8023cf2:	4563      	cmp	r3, ip
 8023cf4:	da06      	bge.n	8023d04 <_strtod_l+0x740>
 8023cf6:	4661      	mov	r1, ip
 8023cf8:	1ac9      	subs	r1, r1, r3
 8023cfa:	1a52      	subs	r2, r2, r1
 8023cfc:	291f      	cmp	r1, #31
 8023cfe:	dc3f      	bgt.n	8023d80 <_strtod_l+0x7bc>
 8023d00:	4088      	lsls	r0, r1
 8023d02:	9014      	str	r0, [sp, #80]	@ 0x50
 8023d04:	18ab      	adds	r3, r5, r2
 8023d06:	930e      	str	r3, [sp, #56]	@ 0x38
 8023d08:	18a4      	adds	r4, r4, r2
 8023d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023d0e:	191c      	adds	r4, r3, r4
 8023d10:	002b      	movs	r3, r5
 8023d12:	4295      	cmp	r5, r2
 8023d14:	dd00      	ble.n	8023d18 <_strtod_l+0x754>
 8023d16:	0013      	movs	r3, r2
 8023d18:	42a3      	cmp	r3, r4
 8023d1a:	dd00      	ble.n	8023d1e <_strtod_l+0x75a>
 8023d1c:	0023      	movs	r3, r4
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	dd04      	ble.n	8023d2c <_strtod_l+0x768>
 8023d22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023d24:	1ae4      	subs	r4, r4, r3
 8023d26:	1ad2      	subs	r2, r2, r3
 8023d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8023d2a:	1aed      	subs	r5, r5, r3
 8023d2c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023d2e:	2b00      	cmp	r3, #0
 8023d30:	dd16      	ble.n	8023d60 <_strtod_l+0x79c>
 8023d32:	001a      	movs	r2, r3
 8023d34:	9907      	ldr	r1, [sp, #28]
 8023d36:	9805      	ldr	r0, [sp, #20]
 8023d38:	f002 ffc8 	bl	8026ccc <__pow5mult>
 8023d3c:	9007      	str	r0, [sp, #28]
 8023d3e:	2800      	cmp	r0, #0
 8023d40:	d0b3      	beq.n	8023caa <_strtod_l+0x6e6>
 8023d42:	0001      	movs	r1, r0
 8023d44:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023d46:	9805      	ldr	r0, [sp, #20]
 8023d48:	f002 ff0e 	bl	8026b68 <__multiply>
 8023d4c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8023d4e:	2800      	cmp	r0, #0
 8023d50:	d100      	bne.n	8023d54 <_strtod_l+0x790>
 8023d52:	e671      	b.n	8023a38 <_strtod_l+0x474>
 8023d54:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023d56:	9805      	ldr	r0, [sp, #20]
 8023d58:	f002 fdea 	bl	8026930 <_Bfree>
 8023d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023d5e:	931e      	str	r3, [sp, #120]	@ 0x78
 8023d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023d62:	2b00      	cmp	r3, #0
 8023d64:	dc12      	bgt.n	8023d8c <_strtod_l+0x7c8>
 8023d66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	dd18      	ble.n	8023d9e <_strtod_l+0x7da>
 8023d6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023d6e:	9908      	ldr	r1, [sp, #32]
 8023d70:	9805      	ldr	r0, [sp, #20]
 8023d72:	f002 ffab 	bl	8026ccc <__pow5mult>
 8023d76:	9008      	str	r0, [sp, #32]
 8023d78:	2800      	cmp	r0, #0
 8023d7a:	d110      	bne.n	8023d9e <_strtod_l+0x7da>
 8023d7c:	2300      	movs	r3, #0
 8023d7e:	e65a      	b.n	8023a36 <_strtod_l+0x472>
 8023d80:	4954      	ldr	r1, [pc, #336]	@ (8023ed4 <_strtod_l+0x910>)
 8023d82:	1acb      	subs	r3, r1, r3
 8023d84:	0001      	movs	r1, r0
 8023d86:	4099      	lsls	r1, r3
 8023d88:	9116      	str	r1, [sp, #88]	@ 0x58
 8023d8a:	e7ba      	b.n	8023d02 <_strtod_l+0x73e>
 8023d8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023d8e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023d90:	9805      	ldr	r0, [sp, #20]
 8023d92:	f002 fff7 	bl	8026d84 <__lshift>
 8023d96:	901e      	str	r0, [sp, #120]	@ 0x78
 8023d98:	2800      	cmp	r0, #0
 8023d9a:	d1e4      	bne.n	8023d66 <_strtod_l+0x7a2>
 8023d9c:	e64c      	b.n	8023a38 <_strtod_l+0x474>
 8023d9e:	2c00      	cmp	r4, #0
 8023da0:	dd07      	ble.n	8023db2 <_strtod_l+0x7ee>
 8023da2:	0022      	movs	r2, r4
 8023da4:	9908      	ldr	r1, [sp, #32]
 8023da6:	9805      	ldr	r0, [sp, #20]
 8023da8:	f002 ffec 	bl	8026d84 <__lshift>
 8023dac:	9008      	str	r0, [sp, #32]
 8023dae:	2800      	cmp	r0, #0
 8023db0:	d0e4      	beq.n	8023d7c <_strtod_l+0x7b8>
 8023db2:	2d00      	cmp	r5, #0
 8023db4:	dd08      	ble.n	8023dc8 <_strtod_l+0x804>
 8023db6:	002a      	movs	r2, r5
 8023db8:	9907      	ldr	r1, [sp, #28]
 8023dba:	9805      	ldr	r0, [sp, #20]
 8023dbc:	f002 ffe2 	bl	8026d84 <__lshift>
 8023dc0:	9007      	str	r0, [sp, #28]
 8023dc2:	2800      	cmp	r0, #0
 8023dc4:	d100      	bne.n	8023dc8 <_strtod_l+0x804>
 8023dc6:	e637      	b.n	8023a38 <_strtod_l+0x474>
 8023dc8:	9a08      	ldr	r2, [sp, #32]
 8023dca:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023dcc:	9805      	ldr	r0, [sp, #20]
 8023dce:	f003 f861 	bl	8026e94 <__mdiff>
 8023dd2:	9006      	str	r0, [sp, #24]
 8023dd4:	2800      	cmp	r0, #0
 8023dd6:	d100      	bne.n	8023dda <_strtod_l+0x816>
 8023dd8:	e62e      	b.n	8023a38 <_strtod_l+0x474>
 8023dda:	68c3      	ldr	r3, [r0, #12]
 8023ddc:	9907      	ldr	r1, [sp, #28]
 8023dde:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023de0:	2300      	movs	r3, #0
 8023de2:	60c3      	str	r3, [r0, #12]
 8023de4:	f003 f83a 	bl	8026e5c <__mcmp>
 8023de8:	2800      	cmp	r0, #0
 8023dea:	da3b      	bge.n	8023e64 <_strtod_l+0x8a0>
 8023dec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023dee:	4333      	orrs	r3, r6
 8023df0:	d167      	bne.n	8023ec2 <_strtod_l+0x8fe>
 8023df2:	033b      	lsls	r3, r7, #12
 8023df4:	d165      	bne.n	8023ec2 <_strtod_l+0x8fe>
 8023df6:	22d6      	movs	r2, #214	@ 0xd6
 8023df8:	4b37      	ldr	r3, [pc, #220]	@ (8023ed8 <_strtod_l+0x914>)
 8023dfa:	04d2      	lsls	r2, r2, #19
 8023dfc:	403b      	ands	r3, r7
 8023dfe:	4293      	cmp	r3, r2
 8023e00:	d95f      	bls.n	8023ec2 <_strtod_l+0x8fe>
 8023e02:	9b06      	ldr	r3, [sp, #24]
 8023e04:	695b      	ldr	r3, [r3, #20]
 8023e06:	2b00      	cmp	r3, #0
 8023e08:	d103      	bne.n	8023e12 <_strtod_l+0x84e>
 8023e0a:	9b06      	ldr	r3, [sp, #24]
 8023e0c:	691b      	ldr	r3, [r3, #16]
 8023e0e:	2b01      	cmp	r3, #1
 8023e10:	dd57      	ble.n	8023ec2 <_strtod_l+0x8fe>
 8023e12:	9906      	ldr	r1, [sp, #24]
 8023e14:	2201      	movs	r2, #1
 8023e16:	9805      	ldr	r0, [sp, #20]
 8023e18:	f002 ffb4 	bl	8026d84 <__lshift>
 8023e1c:	9907      	ldr	r1, [sp, #28]
 8023e1e:	9006      	str	r0, [sp, #24]
 8023e20:	f003 f81c 	bl	8026e5c <__mcmp>
 8023e24:	2800      	cmp	r0, #0
 8023e26:	dd4c      	ble.n	8023ec2 <_strtod_l+0x8fe>
 8023e28:	4b2b      	ldr	r3, [pc, #172]	@ (8023ed8 <_strtod_l+0x914>)
 8023e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023e2c:	403b      	ands	r3, r7
 8023e2e:	2a00      	cmp	r2, #0
 8023e30:	d074      	beq.n	8023f1c <_strtod_l+0x958>
 8023e32:	22d6      	movs	r2, #214	@ 0xd6
 8023e34:	04d2      	lsls	r2, r2, #19
 8023e36:	4293      	cmp	r3, r2
 8023e38:	d870      	bhi.n	8023f1c <_strtod_l+0x958>
 8023e3a:	22dc      	movs	r2, #220	@ 0xdc
 8023e3c:	0492      	lsls	r2, r2, #18
 8023e3e:	4293      	cmp	r3, r2
 8023e40:	d800      	bhi.n	8023e44 <_strtod_l+0x880>
 8023e42:	e695      	b.n	8023b70 <_strtod_l+0x5ac>
 8023e44:	0030      	movs	r0, r6
 8023e46:	0039      	movs	r1, r7
 8023e48:	4b24      	ldr	r3, [pc, #144]	@ (8023edc <_strtod_l+0x918>)
 8023e4a:	2200      	movs	r2, #0
 8023e4c:	f7de fbf6 	bl	800263c <__aeabi_dmul>
 8023e50:	4b21      	ldr	r3, [pc, #132]	@ (8023ed8 <_strtod_l+0x914>)
 8023e52:	0006      	movs	r6, r0
 8023e54:	000f      	movs	r7, r1
 8023e56:	420b      	tst	r3, r1
 8023e58:	d000      	beq.n	8023e5c <_strtod_l+0x898>
 8023e5a:	e5f6      	b.n	8023a4a <_strtod_l+0x486>
 8023e5c:	2322      	movs	r3, #34	@ 0x22
 8023e5e:	9a05      	ldr	r2, [sp, #20]
 8023e60:	6013      	str	r3, [r2, #0]
 8023e62:	e5f2      	b.n	8023a4a <_strtod_l+0x486>
 8023e64:	970e      	str	r7, [sp, #56]	@ 0x38
 8023e66:	2800      	cmp	r0, #0
 8023e68:	d175      	bne.n	8023f56 <_strtod_l+0x992>
 8023e6a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023e6c:	033b      	lsls	r3, r7, #12
 8023e6e:	0b1b      	lsrs	r3, r3, #12
 8023e70:	2a00      	cmp	r2, #0
 8023e72:	d039      	beq.n	8023ee8 <_strtod_l+0x924>
 8023e74:	4a1a      	ldr	r2, [pc, #104]	@ (8023ee0 <_strtod_l+0x91c>)
 8023e76:	4293      	cmp	r3, r2
 8023e78:	d138      	bne.n	8023eec <_strtod_l+0x928>
 8023e7a:	2101      	movs	r1, #1
 8023e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e7e:	4249      	negs	r1, r1
 8023e80:	0032      	movs	r2, r6
 8023e82:	0008      	movs	r0, r1
 8023e84:	2b00      	cmp	r3, #0
 8023e86:	d00b      	beq.n	8023ea0 <_strtod_l+0x8dc>
 8023e88:	24d4      	movs	r4, #212	@ 0xd4
 8023e8a:	4b13      	ldr	r3, [pc, #76]	@ (8023ed8 <_strtod_l+0x914>)
 8023e8c:	0008      	movs	r0, r1
 8023e8e:	403b      	ands	r3, r7
 8023e90:	04e4      	lsls	r4, r4, #19
 8023e92:	42a3      	cmp	r3, r4
 8023e94:	d804      	bhi.n	8023ea0 <_strtod_l+0x8dc>
 8023e96:	306c      	adds	r0, #108	@ 0x6c
 8023e98:	0d1b      	lsrs	r3, r3, #20
 8023e9a:	1ac3      	subs	r3, r0, r3
 8023e9c:	4099      	lsls	r1, r3
 8023e9e:	0008      	movs	r0, r1
 8023ea0:	4282      	cmp	r2, r0
 8023ea2:	d123      	bne.n	8023eec <_strtod_l+0x928>
 8023ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8023ee4 <_strtod_l+0x920>)
 8023ea6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023ea8:	4299      	cmp	r1, r3
 8023eaa:	d102      	bne.n	8023eb2 <_strtod_l+0x8ee>
 8023eac:	3201      	adds	r2, #1
 8023eae:	d100      	bne.n	8023eb2 <_strtod_l+0x8ee>
 8023eb0:	e5c2      	b.n	8023a38 <_strtod_l+0x474>
 8023eb2:	4b09      	ldr	r3, [pc, #36]	@ (8023ed8 <_strtod_l+0x914>)
 8023eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023eb6:	2600      	movs	r6, #0
 8023eb8:	401a      	ands	r2, r3
 8023eba:	0013      	movs	r3, r2
 8023ebc:	2280      	movs	r2, #128	@ 0x80
 8023ebe:	0352      	lsls	r2, r2, #13
 8023ec0:	189f      	adds	r7, r3, r2
 8023ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	d1bd      	bne.n	8023e44 <_strtod_l+0x880>
 8023ec8:	e5bf      	b.n	8023a4a <_strtod_l+0x486>
 8023eca:	46c0      	nop			@ (mov r8, r8)
 8023ecc:	0802db20 	.word	0x0802db20
 8023ed0:	fffffc02 	.word	0xfffffc02
 8023ed4:	fffffbe2 	.word	0xfffffbe2
 8023ed8:	7ff00000 	.word	0x7ff00000
 8023edc:	39500000 	.word	0x39500000
 8023ee0:	000fffff 	.word	0x000fffff
 8023ee4:	7fefffff 	.word	0x7fefffff
 8023ee8:	4333      	orrs	r3, r6
 8023eea:	d09d      	beq.n	8023e28 <_strtod_l+0x864>
 8023eec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	d01c      	beq.n	8023f2c <_strtod_l+0x968>
 8023ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023ef4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023ef6:	4213      	tst	r3, r2
 8023ef8:	d0e3      	beq.n	8023ec2 <_strtod_l+0x8fe>
 8023efa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023efc:	0030      	movs	r0, r6
 8023efe:	0039      	movs	r1, r7
 8023f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d016      	beq.n	8023f34 <_strtod_l+0x970>
 8023f06:	f7ff fb45 	bl	8023594 <sulp>
 8023f0a:	0002      	movs	r2, r0
 8023f0c:	000b      	movs	r3, r1
 8023f0e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023f10:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023f12:	f7dd fbeb 	bl	80016ec <__aeabi_dadd>
 8023f16:	0006      	movs	r6, r0
 8023f18:	000f      	movs	r7, r1
 8023f1a:	e7d2      	b.n	8023ec2 <_strtod_l+0x8fe>
 8023f1c:	2601      	movs	r6, #1
 8023f1e:	4a92      	ldr	r2, [pc, #584]	@ (8024168 <_strtod_l+0xba4>)
 8023f20:	4276      	negs	r6, r6
 8023f22:	189b      	adds	r3, r3, r2
 8023f24:	4a91      	ldr	r2, [pc, #580]	@ (802416c <_strtod_l+0xba8>)
 8023f26:	431a      	orrs	r2, r3
 8023f28:	0017      	movs	r7, r2
 8023f2a:	e7ca      	b.n	8023ec2 <_strtod_l+0x8fe>
 8023f2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023f2e:	4233      	tst	r3, r6
 8023f30:	d0c7      	beq.n	8023ec2 <_strtod_l+0x8fe>
 8023f32:	e7e2      	b.n	8023efa <_strtod_l+0x936>
 8023f34:	f7ff fb2e 	bl	8023594 <sulp>
 8023f38:	0002      	movs	r2, r0
 8023f3a:	000b      	movs	r3, r1
 8023f3c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023f3e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023f40:	f7de fe44 	bl	8002bcc <__aeabi_dsub>
 8023f44:	2200      	movs	r2, #0
 8023f46:	2300      	movs	r3, #0
 8023f48:	0006      	movs	r6, r0
 8023f4a:	000f      	movs	r7, r1
 8023f4c:	f7dc fab0 	bl	80004b0 <__aeabi_dcmpeq>
 8023f50:	2800      	cmp	r0, #0
 8023f52:	d0b6      	beq.n	8023ec2 <_strtod_l+0x8fe>
 8023f54:	e60c      	b.n	8023b70 <_strtod_l+0x5ac>
 8023f56:	9907      	ldr	r1, [sp, #28]
 8023f58:	9806      	ldr	r0, [sp, #24]
 8023f5a:	f003 f901 	bl	8027160 <__ratio>
 8023f5e:	2380      	movs	r3, #128	@ 0x80
 8023f60:	2200      	movs	r2, #0
 8023f62:	05db      	lsls	r3, r3, #23
 8023f64:	0004      	movs	r4, r0
 8023f66:	000d      	movs	r5, r1
 8023f68:	f7dc fab2 	bl	80004d0 <__aeabi_dcmple>
 8023f6c:	2800      	cmp	r0, #0
 8023f6e:	d06c      	beq.n	802404a <_strtod_l+0xa86>
 8023f70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d177      	bne.n	8024066 <_strtod_l+0xaa2>
 8023f76:	2e00      	cmp	r6, #0
 8023f78:	d157      	bne.n	802402a <_strtod_l+0xa66>
 8023f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023f7c:	031b      	lsls	r3, r3, #12
 8023f7e:	d15a      	bne.n	8024036 <_strtod_l+0xa72>
 8023f80:	2200      	movs	r2, #0
 8023f82:	0020      	movs	r0, r4
 8023f84:	0029      	movs	r1, r5
 8023f86:	4b7a      	ldr	r3, [pc, #488]	@ (8024170 <_strtod_l+0xbac>)
 8023f88:	f7dc fa98 	bl	80004bc <__aeabi_dcmplt>
 8023f8c:	2800      	cmp	r0, #0
 8023f8e:	d159      	bne.n	8024044 <_strtod_l+0xa80>
 8023f90:	0020      	movs	r0, r4
 8023f92:	0029      	movs	r1, r5
 8023f94:	2200      	movs	r2, #0
 8023f96:	4b77      	ldr	r3, [pc, #476]	@ (8024174 <_strtod_l+0xbb0>)
 8023f98:	f7de fb50 	bl	800263c <__aeabi_dmul>
 8023f9c:	0004      	movs	r4, r0
 8023f9e:	000d      	movs	r5, r1
 8023fa0:	2380      	movs	r3, #128	@ 0x80
 8023fa2:	061b      	lsls	r3, r3, #24
 8023fa4:	18eb      	adds	r3, r5, r3
 8023fa6:	940a      	str	r4, [sp, #40]	@ 0x28
 8023fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023faa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023fae:	9214      	str	r2, [sp, #80]	@ 0x50
 8023fb0:	9315      	str	r3, [sp, #84]	@ 0x54
 8023fb2:	4a71      	ldr	r2, [pc, #452]	@ (8024178 <_strtod_l+0xbb4>)
 8023fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023fb6:	4013      	ands	r3, r2
 8023fb8:	9316      	str	r3, [sp, #88]	@ 0x58
 8023fba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023fbc:	4b6f      	ldr	r3, [pc, #444]	@ (802417c <_strtod_l+0xbb8>)
 8023fbe:	429a      	cmp	r2, r3
 8023fc0:	d000      	beq.n	8023fc4 <_strtod_l+0xa00>
 8023fc2:	e087      	b.n	80240d4 <_strtod_l+0xb10>
 8023fc4:	4a6e      	ldr	r2, [pc, #440]	@ (8024180 <_strtod_l+0xbbc>)
 8023fc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023fc8:	4694      	mov	ip, r2
 8023fca:	4463      	add	r3, ip
 8023fcc:	001f      	movs	r7, r3
 8023fce:	0030      	movs	r0, r6
 8023fd0:	0019      	movs	r1, r3
 8023fd2:	f002 fff9 	bl	8026fc8 <__ulp>
 8023fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023fd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023fda:	f7de fb2f 	bl	800263c <__aeabi_dmul>
 8023fde:	0032      	movs	r2, r6
 8023fe0:	003b      	movs	r3, r7
 8023fe2:	f7dd fb83 	bl	80016ec <__aeabi_dadd>
 8023fe6:	4a64      	ldr	r2, [pc, #400]	@ (8024178 <_strtod_l+0xbb4>)
 8023fe8:	4b66      	ldr	r3, [pc, #408]	@ (8024184 <_strtod_l+0xbc0>)
 8023fea:	0006      	movs	r6, r0
 8023fec:	400a      	ands	r2, r1
 8023fee:	429a      	cmp	r2, r3
 8023ff0:	d940      	bls.n	8024074 <_strtod_l+0xab0>
 8023ff2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023ff4:	4a64      	ldr	r2, [pc, #400]	@ (8024188 <_strtod_l+0xbc4>)
 8023ff6:	4293      	cmp	r3, r2
 8023ff8:	d103      	bne.n	8024002 <_strtod_l+0xa3e>
 8023ffa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023ffc:	3301      	adds	r3, #1
 8023ffe:	d100      	bne.n	8024002 <_strtod_l+0xa3e>
 8024000:	e51a      	b.n	8023a38 <_strtod_l+0x474>
 8024002:	2601      	movs	r6, #1
 8024004:	4f60      	ldr	r7, [pc, #384]	@ (8024188 <_strtod_l+0xbc4>)
 8024006:	4276      	negs	r6, r6
 8024008:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802400a:	9805      	ldr	r0, [sp, #20]
 802400c:	f002 fc90 	bl	8026930 <_Bfree>
 8024010:	9908      	ldr	r1, [sp, #32]
 8024012:	9805      	ldr	r0, [sp, #20]
 8024014:	f002 fc8c 	bl	8026930 <_Bfree>
 8024018:	9907      	ldr	r1, [sp, #28]
 802401a:	9805      	ldr	r0, [sp, #20]
 802401c:	f002 fc88 	bl	8026930 <_Bfree>
 8024020:	9906      	ldr	r1, [sp, #24]
 8024022:	9805      	ldr	r0, [sp, #20]
 8024024:	f002 fc84 	bl	8026930 <_Bfree>
 8024028:	e617      	b.n	8023c5a <_strtod_l+0x696>
 802402a:	2e01      	cmp	r6, #1
 802402c:	d103      	bne.n	8024036 <_strtod_l+0xa72>
 802402e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024030:	2b00      	cmp	r3, #0
 8024032:	d100      	bne.n	8024036 <_strtod_l+0xa72>
 8024034:	e59c      	b.n	8023b70 <_strtod_l+0x5ac>
 8024036:	2300      	movs	r3, #0
 8024038:	4c54      	ldr	r4, [pc, #336]	@ (802418c <_strtod_l+0xbc8>)
 802403a:	4d4d      	ldr	r5, [pc, #308]	@ (8024170 <_strtod_l+0xbac>)
 802403c:	930a      	str	r3, [sp, #40]	@ 0x28
 802403e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024040:	2400      	movs	r4, #0
 8024042:	e7b2      	b.n	8023faa <_strtod_l+0x9e6>
 8024044:	2400      	movs	r4, #0
 8024046:	4d4b      	ldr	r5, [pc, #300]	@ (8024174 <_strtod_l+0xbb0>)
 8024048:	e7aa      	b.n	8023fa0 <_strtod_l+0x9dc>
 802404a:	0020      	movs	r0, r4
 802404c:	0029      	movs	r1, r5
 802404e:	4b49      	ldr	r3, [pc, #292]	@ (8024174 <_strtod_l+0xbb0>)
 8024050:	2200      	movs	r2, #0
 8024052:	f7de faf3 	bl	800263c <__aeabi_dmul>
 8024056:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024058:	0004      	movs	r4, r0
 802405a:	000d      	movs	r5, r1
 802405c:	2b00      	cmp	r3, #0
 802405e:	d09f      	beq.n	8023fa0 <_strtod_l+0x9dc>
 8024060:	940a      	str	r4, [sp, #40]	@ 0x28
 8024062:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024064:	e7a1      	b.n	8023faa <_strtod_l+0x9e6>
 8024066:	2300      	movs	r3, #0
 8024068:	4c41      	ldr	r4, [pc, #260]	@ (8024170 <_strtod_l+0xbac>)
 802406a:	0025      	movs	r5, r4
 802406c:	930a      	str	r3, [sp, #40]	@ 0x28
 802406e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024070:	001c      	movs	r4, r3
 8024072:	e79a      	b.n	8023faa <_strtod_l+0x9e6>
 8024074:	23d4      	movs	r3, #212	@ 0xd4
 8024076:	049b      	lsls	r3, r3, #18
 8024078:	18cf      	adds	r7, r1, r3
 802407a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802407c:	9710      	str	r7, [sp, #64]	@ 0x40
 802407e:	2b00      	cmp	r3, #0
 8024080:	d1c2      	bne.n	8024008 <_strtod_l+0xa44>
 8024082:	4b3d      	ldr	r3, [pc, #244]	@ (8024178 <_strtod_l+0xbb4>)
 8024084:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024086:	403b      	ands	r3, r7
 8024088:	429a      	cmp	r2, r3
 802408a:	d1bd      	bne.n	8024008 <_strtod_l+0xa44>
 802408c:	0020      	movs	r0, r4
 802408e:	0029      	movs	r1, r5
 8024090:	f7dc fafa 	bl	8000688 <__aeabi_d2lz>
 8024094:	f7dc fb32 	bl	80006fc <__aeabi_l2d>
 8024098:	0002      	movs	r2, r0
 802409a:	000b      	movs	r3, r1
 802409c:	0020      	movs	r0, r4
 802409e:	0029      	movs	r1, r5
 80240a0:	f7de fd94 	bl	8002bcc <__aeabi_dsub>
 80240a4:	033c      	lsls	r4, r7, #12
 80240a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80240a8:	0b24      	lsrs	r4, r4, #12
 80240aa:	4334      	orrs	r4, r6
 80240ac:	900e      	str	r0, [sp, #56]	@ 0x38
 80240ae:	910f      	str	r1, [sp, #60]	@ 0x3c
 80240b0:	4a37      	ldr	r2, [pc, #220]	@ (8024190 <_strtod_l+0xbcc>)
 80240b2:	431c      	orrs	r4, r3
 80240b4:	d052      	beq.n	802415c <_strtod_l+0xb98>
 80240b6:	4b37      	ldr	r3, [pc, #220]	@ (8024194 <_strtod_l+0xbd0>)
 80240b8:	f7dc fa00 	bl	80004bc <__aeabi_dcmplt>
 80240bc:	2800      	cmp	r0, #0
 80240be:	d000      	beq.n	80240c2 <_strtod_l+0xafe>
 80240c0:	e4c3      	b.n	8023a4a <_strtod_l+0x486>
 80240c2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80240c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80240c6:	4a34      	ldr	r2, [pc, #208]	@ (8024198 <_strtod_l+0xbd4>)
 80240c8:	4b2a      	ldr	r3, [pc, #168]	@ (8024174 <_strtod_l+0xbb0>)
 80240ca:	f7dc fa0b 	bl	80004e4 <__aeabi_dcmpgt>
 80240ce:	2800      	cmp	r0, #0
 80240d0:	d09a      	beq.n	8024008 <_strtod_l+0xa44>
 80240d2:	e4ba      	b.n	8023a4a <_strtod_l+0x486>
 80240d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240d6:	2b00      	cmp	r3, #0
 80240d8:	d02a      	beq.n	8024130 <_strtod_l+0xb6c>
 80240da:	23d4      	movs	r3, #212	@ 0xd4
 80240dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80240de:	04db      	lsls	r3, r3, #19
 80240e0:	429a      	cmp	r2, r3
 80240e2:	d825      	bhi.n	8024130 <_strtod_l+0xb6c>
 80240e4:	0020      	movs	r0, r4
 80240e6:	0029      	movs	r1, r5
 80240e8:	4a2c      	ldr	r2, [pc, #176]	@ (802419c <_strtod_l+0xbd8>)
 80240ea:	4b2d      	ldr	r3, [pc, #180]	@ (80241a0 <_strtod_l+0xbdc>)
 80240ec:	f7dc f9f0 	bl	80004d0 <__aeabi_dcmple>
 80240f0:	2800      	cmp	r0, #0
 80240f2:	d016      	beq.n	8024122 <_strtod_l+0xb5e>
 80240f4:	0020      	movs	r0, r4
 80240f6:	0029      	movs	r1, r5
 80240f8:	f7dc faa8 	bl	800064c <__aeabi_d2uiz>
 80240fc:	2800      	cmp	r0, #0
 80240fe:	d100      	bne.n	8024102 <_strtod_l+0xb3e>
 8024100:	3001      	adds	r0, #1
 8024102:	f7df f98b 	bl	800341c <__aeabi_ui2d>
 8024106:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024108:	0004      	movs	r4, r0
 802410a:	000d      	movs	r5, r1
 802410c:	2b00      	cmp	r3, #0
 802410e:	d122      	bne.n	8024156 <_strtod_l+0xb92>
 8024110:	2380      	movs	r3, #128	@ 0x80
 8024112:	061b      	lsls	r3, r3, #24
 8024114:	18cb      	adds	r3, r1, r3
 8024116:	9018      	str	r0, [sp, #96]	@ 0x60
 8024118:	9319      	str	r3, [sp, #100]	@ 0x64
 802411a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802411c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802411e:	9214      	str	r2, [sp, #80]	@ 0x50
 8024120:	9315      	str	r3, [sp, #84]	@ 0x54
 8024122:	22d6      	movs	r2, #214	@ 0xd6
 8024124:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024126:	04d2      	lsls	r2, r2, #19
 8024128:	189b      	adds	r3, r3, r2
 802412a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802412c:	1a9b      	subs	r3, r3, r2
 802412e:	9315      	str	r3, [sp, #84]	@ 0x54
 8024130:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024132:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024134:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024136:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8024138:	f002 ff46 	bl	8026fc8 <__ulp>
 802413c:	0002      	movs	r2, r0
 802413e:	000b      	movs	r3, r1
 8024140:	0030      	movs	r0, r6
 8024142:	0039      	movs	r1, r7
 8024144:	f7de fa7a 	bl	800263c <__aeabi_dmul>
 8024148:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802414a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802414c:	f7dd face 	bl	80016ec <__aeabi_dadd>
 8024150:	0006      	movs	r6, r0
 8024152:	000f      	movs	r7, r1
 8024154:	e791      	b.n	802407a <_strtod_l+0xab6>
 8024156:	9418      	str	r4, [sp, #96]	@ 0x60
 8024158:	9519      	str	r5, [sp, #100]	@ 0x64
 802415a:	e7de      	b.n	802411a <_strtod_l+0xb56>
 802415c:	4b11      	ldr	r3, [pc, #68]	@ (80241a4 <_strtod_l+0xbe0>)
 802415e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024160:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024162:	f7dc f9ab 	bl	80004bc <__aeabi_dcmplt>
 8024166:	e7b2      	b.n	80240ce <_strtod_l+0xb0a>
 8024168:	fff00000 	.word	0xfff00000
 802416c:	000fffff 	.word	0x000fffff
 8024170:	3ff00000 	.word	0x3ff00000
 8024174:	3fe00000 	.word	0x3fe00000
 8024178:	7ff00000 	.word	0x7ff00000
 802417c:	7fe00000 	.word	0x7fe00000
 8024180:	fcb00000 	.word	0xfcb00000
 8024184:	7c9fffff 	.word	0x7c9fffff
 8024188:	7fefffff 	.word	0x7fefffff
 802418c:	bff00000 	.word	0xbff00000
 8024190:	94a03595 	.word	0x94a03595
 8024194:	3fdfffff 	.word	0x3fdfffff
 8024198:	35afe535 	.word	0x35afe535
 802419c:	ffc00000 	.word	0xffc00000
 80241a0:	41dfffff 	.word	0x41dfffff
 80241a4:	3fcfffff 	.word	0x3fcfffff

080241a8 <strtod>:
 80241a8:	b510      	push	{r4, lr}
 80241aa:	4c04      	ldr	r4, [pc, #16]	@ (80241bc <strtod+0x14>)
 80241ac:	000a      	movs	r2, r1
 80241ae:	0001      	movs	r1, r0
 80241b0:	4b03      	ldr	r3, [pc, #12]	@ (80241c0 <strtod+0x18>)
 80241b2:	6820      	ldr	r0, [r4, #0]
 80241b4:	f7ff fa06 	bl	80235c4 <_strtod_l>
 80241b8:	bd10      	pop	{r4, pc}
 80241ba:	46c0      	nop			@ (mov r8, r8)
 80241bc:	200003e0 	.word	0x200003e0
 80241c0:	20000274 	.word	0x20000274

080241c4 <_strtol_l.constprop.0>:
 80241c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80241c6:	b085      	sub	sp, #20
 80241c8:	0017      	movs	r7, r2
 80241ca:	001e      	movs	r6, r3
 80241cc:	9003      	str	r0, [sp, #12]
 80241ce:	9101      	str	r1, [sp, #4]
 80241d0:	2b24      	cmp	r3, #36	@ 0x24
 80241d2:	d844      	bhi.n	802425e <_strtol_l.constprop.0+0x9a>
 80241d4:	000c      	movs	r4, r1
 80241d6:	2b01      	cmp	r3, #1
 80241d8:	d041      	beq.n	802425e <_strtol_l.constprop.0+0x9a>
 80241da:	4b3d      	ldr	r3, [pc, #244]	@ (80242d0 <_strtol_l.constprop.0+0x10c>)
 80241dc:	2208      	movs	r2, #8
 80241de:	469c      	mov	ip, r3
 80241e0:	0023      	movs	r3, r4
 80241e2:	4661      	mov	r1, ip
 80241e4:	781d      	ldrb	r5, [r3, #0]
 80241e6:	3401      	adds	r4, #1
 80241e8:	5d48      	ldrb	r0, [r1, r5]
 80241ea:	0001      	movs	r1, r0
 80241ec:	4011      	ands	r1, r2
 80241ee:	4210      	tst	r0, r2
 80241f0:	d1f6      	bne.n	80241e0 <_strtol_l.constprop.0+0x1c>
 80241f2:	2d2d      	cmp	r5, #45	@ 0x2d
 80241f4:	d13a      	bne.n	802426c <_strtol_l.constprop.0+0xa8>
 80241f6:	7825      	ldrb	r5, [r4, #0]
 80241f8:	1c9c      	adds	r4, r3, #2
 80241fa:	2301      	movs	r3, #1
 80241fc:	9300      	str	r3, [sp, #0]
 80241fe:	2210      	movs	r2, #16
 8024200:	0033      	movs	r3, r6
 8024202:	4393      	bics	r3, r2
 8024204:	d109      	bne.n	802421a <_strtol_l.constprop.0+0x56>
 8024206:	2d30      	cmp	r5, #48	@ 0x30
 8024208:	d136      	bne.n	8024278 <_strtol_l.constprop.0+0xb4>
 802420a:	2120      	movs	r1, #32
 802420c:	7823      	ldrb	r3, [r4, #0]
 802420e:	438b      	bics	r3, r1
 8024210:	2b58      	cmp	r3, #88	@ 0x58
 8024212:	d131      	bne.n	8024278 <_strtol_l.constprop.0+0xb4>
 8024214:	0016      	movs	r6, r2
 8024216:	7865      	ldrb	r5, [r4, #1]
 8024218:	3402      	adds	r4, #2
 802421a:	4a2e      	ldr	r2, [pc, #184]	@ (80242d4 <_strtol_l.constprop.0+0x110>)
 802421c:	9b00      	ldr	r3, [sp, #0]
 802421e:	4694      	mov	ip, r2
 8024220:	4463      	add	r3, ip
 8024222:	0031      	movs	r1, r6
 8024224:	0018      	movs	r0, r3
 8024226:	9302      	str	r3, [sp, #8]
 8024228:	f7dc f842 	bl	80002b0 <__aeabi_uidivmod>
 802422c:	2200      	movs	r2, #0
 802422e:	4684      	mov	ip, r0
 8024230:	0010      	movs	r0, r2
 8024232:	002b      	movs	r3, r5
 8024234:	3b30      	subs	r3, #48	@ 0x30
 8024236:	2b09      	cmp	r3, #9
 8024238:	d825      	bhi.n	8024286 <_strtol_l.constprop.0+0xc2>
 802423a:	001d      	movs	r5, r3
 802423c:	42ae      	cmp	r6, r5
 802423e:	dd31      	ble.n	80242a4 <_strtol_l.constprop.0+0xe0>
 8024240:	1c53      	adds	r3, r2, #1
 8024242:	d009      	beq.n	8024258 <_strtol_l.constprop.0+0x94>
 8024244:	2201      	movs	r2, #1
 8024246:	4252      	negs	r2, r2
 8024248:	4584      	cmp	ip, r0
 802424a:	d305      	bcc.n	8024258 <_strtol_l.constprop.0+0x94>
 802424c:	d101      	bne.n	8024252 <_strtol_l.constprop.0+0x8e>
 802424e:	42a9      	cmp	r1, r5
 8024250:	db25      	blt.n	802429e <_strtol_l.constprop.0+0xda>
 8024252:	2201      	movs	r2, #1
 8024254:	4370      	muls	r0, r6
 8024256:	1828      	adds	r0, r5, r0
 8024258:	7825      	ldrb	r5, [r4, #0]
 802425a:	3401      	adds	r4, #1
 802425c:	e7e9      	b.n	8024232 <_strtol_l.constprop.0+0x6e>
 802425e:	f000 ffe7 	bl	8025230 <__errno>
 8024262:	2316      	movs	r3, #22
 8024264:	6003      	str	r3, [r0, #0]
 8024266:	2000      	movs	r0, #0
 8024268:	b005      	add	sp, #20
 802426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802426c:	9100      	str	r1, [sp, #0]
 802426e:	2d2b      	cmp	r5, #43	@ 0x2b
 8024270:	d1c5      	bne.n	80241fe <_strtol_l.constprop.0+0x3a>
 8024272:	7825      	ldrb	r5, [r4, #0]
 8024274:	1c9c      	adds	r4, r3, #2
 8024276:	e7c2      	b.n	80241fe <_strtol_l.constprop.0+0x3a>
 8024278:	2e00      	cmp	r6, #0
 802427a:	d1ce      	bne.n	802421a <_strtol_l.constprop.0+0x56>
 802427c:	3608      	adds	r6, #8
 802427e:	2d30      	cmp	r5, #48	@ 0x30
 8024280:	d0cb      	beq.n	802421a <_strtol_l.constprop.0+0x56>
 8024282:	3602      	adds	r6, #2
 8024284:	e7c9      	b.n	802421a <_strtol_l.constprop.0+0x56>
 8024286:	002b      	movs	r3, r5
 8024288:	3b41      	subs	r3, #65	@ 0x41
 802428a:	2b19      	cmp	r3, #25
 802428c:	d801      	bhi.n	8024292 <_strtol_l.constprop.0+0xce>
 802428e:	3d37      	subs	r5, #55	@ 0x37
 8024290:	e7d4      	b.n	802423c <_strtol_l.constprop.0+0x78>
 8024292:	002b      	movs	r3, r5
 8024294:	3b61      	subs	r3, #97	@ 0x61
 8024296:	2b19      	cmp	r3, #25
 8024298:	d804      	bhi.n	80242a4 <_strtol_l.constprop.0+0xe0>
 802429a:	3d57      	subs	r5, #87	@ 0x57
 802429c:	e7ce      	b.n	802423c <_strtol_l.constprop.0+0x78>
 802429e:	2201      	movs	r2, #1
 80242a0:	4252      	negs	r2, r2
 80242a2:	e7d9      	b.n	8024258 <_strtol_l.constprop.0+0x94>
 80242a4:	1c53      	adds	r3, r2, #1
 80242a6:	d108      	bne.n	80242ba <_strtol_l.constprop.0+0xf6>
 80242a8:	2322      	movs	r3, #34	@ 0x22
 80242aa:	9a03      	ldr	r2, [sp, #12]
 80242ac:	9802      	ldr	r0, [sp, #8]
 80242ae:	6013      	str	r3, [r2, #0]
 80242b0:	2f00      	cmp	r7, #0
 80242b2:	d0d9      	beq.n	8024268 <_strtol_l.constprop.0+0xa4>
 80242b4:	1e63      	subs	r3, r4, #1
 80242b6:	9301      	str	r3, [sp, #4]
 80242b8:	e007      	b.n	80242ca <_strtol_l.constprop.0+0x106>
 80242ba:	9b00      	ldr	r3, [sp, #0]
 80242bc:	2b00      	cmp	r3, #0
 80242be:	d000      	beq.n	80242c2 <_strtol_l.constprop.0+0xfe>
 80242c0:	4240      	negs	r0, r0
 80242c2:	2f00      	cmp	r7, #0
 80242c4:	d0d0      	beq.n	8024268 <_strtol_l.constprop.0+0xa4>
 80242c6:	2a00      	cmp	r2, #0
 80242c8:	d1f4      	bne.n	80242b4 <_strtol_l.constprop.0+0xf0>
 80242ca:	9b01      	ldr	r3, [sp, #4]
 80242cc:	603b      	str	r3, [r7, #0]
 80242ce:	e7cb      	b.n	8024268 <_strtol_l.constprop.0+0xa4>
 80242d0:	0802db49 	.word	0x0802db49
 80242d4:	7fffffff 	.word	0x7fffffff

080242d8 <strtol>:
 80242d8:	b510      	push	{r4, lr}
 80242da:	4c04      	ldr	r4, [pc, #16]	@ (80242ec <strtol+0x14>)
 80242dc:	0013      	movs	r3, r2
 80242de:	000a      	movs	r2, r1
 80242e0:	0001      	movs	r1, r0
 80242e2:	6820      	ldr	r0, [r4, #0]
 80242e4:	f7ff ff6e 	bl	80241c4 <_strtol_l.constprop.0>
 80242e8:	bd10      	pop	{r4, pc}
 80242ea:	46c0      	nop			@ (mov r8, r8)
 80242ec:	200003e0 	.word	0x200003e0

080242f0 <__cvt>:
 80242f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80242f2:	001f      	movs	r7, r3
 80242f4:	2300      	movs	r3, #0
 80242f6:	0016      	movs	r6, r2
 80242f8:	b08b      	sub	sp, #44	@ 0x2c
 80242fa:	429f      	cmp	r7, r3
 80242fc:	da04      	bge.n	8024308 <__cvt+0x18>
 80242fe:	2180      	movs	r1, #128	@ 0x80
 8024300:	0609      	lsls	r1, r1, #24
 8024302:	187b      	adds	r3, r7, r1
 8024304:	001f      	movs	r7, r3
 8024306:	232d      	movs	r3, #45	@ 0x2d
 8024308:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802430a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802430c:	7013      	strb	r3, [r2, #0]
 802430e:	2320      	movs	r3, #32
 8024310:	2203      	movs	r2, #3
 8024312:	439d      	bics	r5, r3
 8024314:	2d46      	cmp	r5, #70	@ 0x46
 8024316:	d007      	beq.n	8024328 <__cvt+0x38>
 8024318:	002b      	movs	r3, r5
 802431a:	3b45      	subs	r3, #69	@ 0x45
 802431c:	4259      	negs	r1, r3
 802431e:	414b      	adcs	r3, r1
 8024320:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8024322:	3a01      	subs	r2, #1
 8024324:	18cb      	adds	r3, r1, r3
 8024326:	9310      	str	r3, [sp, #64]	@ 0x40
 8024328:	ab09      	add	r3, sp, #36	@ 0x24
 802432a:	9304      	str	r3, [sp, #16]
 802432c:	ab08      	add	r3, sp, #32
 802432e:	9303      	str	r3, [sp, #12]
 8024330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024332:	9200      	str	r2, [sp, #0]
 8024334:	9302      	str	r3, [sp, #8]
 8024336:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024338:	0032      	movs	r2, r6
 802433a:	9301      	str	r3, [sp, #4]
 802433c:	003b      	movs	r3, r7
 802433e:	f001 f84d 	bl	80253dc <_dtoa_r>
 8024342:	0004      	movs	r4, r0
 8024344:	2d47      	cmp	r5, #71	@ 0x47
 8024346:	d11b      	bne.n	8024380 <__cvt+0x90>
 8024348:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802434a:	07db      	lsls	r3, r3, #31
 802434c:	d511      	bpl.n	8024372 <__cvt+0x82>
 802434e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024350:	18c3      	adds	r3, r0, r3
 8024352:	9307      	str	r3, [sp, #28]
 8024354:	2200      	movs	r2, #0
 8024356:	2300      	movs	r3, #0
 8024358:	0030      	movs	r0, r6
 802435a:	0039      	movs	r1, r7
 802435c:	f7dc f8a8 	bl	80004b0 <__aeabi_dcmpeq>
 8024360:	2800      	cmp	r0, #0
 8024362:	d001      	beq.n	8024368 <__cvt+0x78>
 8024364:	9b07      	ldr	r3, [sp, #28]
 8024366:	9309      	str	r3, [sp, #36]	@ 0x24
 8024368:	2230      	movs	r2, #48	@ 0x30
 802436a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802436c:	9907      	ldr	r1, [sp, #28]
 802436e:	428b      	cmp	r3, r1
 8024370:	d320      	bcc.n	80243b4 <__cvt+0xc4>
 8024372:	0020      	movs	r0, r4
 8024374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024376:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024378:	1b1b      	subs	r3, r3, r4
 802437a:	6013      	str	r3, [r2, #0]
 802437c:	b00b      	add	sp, #44	@ 0x2c
 802437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024380:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024382:	18c3      	adds	r3, r0, r3
 8024384:	9307      	str	r3, [sp, #28]
 8024386:	2d46      	cmp	r5, #70	@ 0x46
 8024388:	d1e4      	bne.n	8024354 <__cvt+0x64>
 802438a:	7803      	ldrb	r3, [r0, #0]
 802438c:	2b30      	cmp	r3, #48	@ 0x30
 802438e:	d10c      	bne.n	80243aa <__cvt+0xba>
 8024390:	2200      	movs	r2, #0
 8024392:	2300      	movs	r3, #0
 8024394:	0030      	movs	r0, r6
 8024396:	0039      	movs	r1, r7
 8024398:	f7dc f88a 	bl	80004b0 <__aeabi_dcmpeq>
 802439c:	2800      	cmp	r0, #0
 802439e:	d104      	bne.n	80243aa <__cvt+0xba>
 80243a0:	2301      	movs	r3, #1
 80243a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80243a4:	1a9b      	subs	r3, r3, r2
 80243a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80243a8:	6013      	str	r3, [r2, #0]
 80243aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80243ac:	9a07      	ldr	r2, [sp, #28]
 80243ae:	681b      	ldr	r3, [r3, #0]
 80243b0:	18d3      	adds	r3, r2, r3
 80243b2:	e7ce      	b.n	8024352 <__cvt+0x62>
 80243b4:	1c59      	adds	r1, r3, #1
 80243b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80243b8:	701a      	strb	r2, [r3, #0]
 80243ba:	e7d6      	b.n	802436a <__cvt+0x7a>

080243bc <__exponent>:
 80243bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80243be:	232b      	movs	r3, #43	@ 0x2b
 80243c0:	0005      	movs	r5, r0
 80243c2:	000c      	movs	r4, r1
 80243c4:	b085      	sub	sp, #20
 80243c6:	7002      	strb	r2, [r0, #0]
 80243c8:	2900      	cmp	r1, #0
 80243ca:	da01      	bge.n	80243d0 <__exponent+0x14>
 80243cc:	424c      	negs	r4, r1
 80243ce:	3302      	adds	r3, #2
 80243d0:	706b      	strb	r3, [r5, #1]
 80243d2:	2c09      	cmp	r4, #9
 80243d4:	dd2c      	ble.n	8024430 <__exponent+0x74>
 80243d6:	ab02      	add	r3, sp, #8
 80243d8:	1dde      	adds	r6, r3, #7
 80243da:	0020      	movs	r0, r4
 80243dc:	210a      	movs	r1, #10
 80243de:	f7dc f851 	bl	8000484 <__aeabi_idivmod>
 80243e2:	0037      	movs	r7, r6
 80243e4:	3130      	adds	r1, #48	@ 0x30
 80243e6:	3e01      	subs	r6, #1
 80243e8:	0020      	movs	r0, r4
 80243ea:	7031      	strb	r1, [r6, #0]
 80243ec:	210a      	movs	r1, #10
 80243ee:	9401      	str	r4, [sp, #4]
 80243f0:	f7db ff62 	bl	80002b8 <__divsi3>
 80243f4:	9b01      	ldr	r3, [sp, #4]
 80243f6:	0004      	movs	r4, r0
 80243f8:	2b63      	cmp	r3, #99	@ 0x63
 80243fa:	dcee      	bgt.n	80243da <__exponent+0x1e>
 80243fc:	1eba      	subs	r2, r7, #2
 80243fe:	1ca8      	adds	r0, r5, #2
 8024400:	0001      	movs	r1, r0
 8024402:	0013      	movs	r3, r2
 8024404:	3430      	adds	r4, #48	@ 0x30
 8024406:	7014      	strb	r4, [r2, #0]
 8024408:	ac02      	add	r4, sp, #8
 802440a:	3407      	adds	r4, #7
 802440c:	429c      	cmp	r4, r3
 802440e:	d80a      	bhi.n	8024426 <__exponent+0x6a>
 8024410:	2300      	movs	r3, #0
 8024412:	42a2      	cmp	r2, r4
 8024414:	d803      	bhi.n	802441e <__exponent+0x62>
 8024416:	3309      	adds	r3, #9
 8024418:	aa02      	add	r2, sp, #8
 802441a:	189b      	adds	r3, r3, r2
 802441c:	1bdb      	subs	r3, r3, r7
 802441e:	18c0      	adds	r0, r0, r3
 8024420:	1b40      	subs	r0, r0, r5
 8024422:	b005      	add	sp, #20
 8024424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024426:	781c      	ldrb	r4, [r3, #0]
 8024428:	3301      	adds	r3, #1
 802442a:	700c      	strb	r4, [r1, #0]
 802442c:	3101      	adds	r1, #1
 802442e:	e7eb      	b.n	8024408 <__exponent+0x4c>
 8024430:	2330      	movs	r3, #48	@ 0x30
 8024432:	18e4      	adds	r4, r4, r3
 8024434:	70ab      	strb	r3, [r5, #2]
 8024436:	1d28      	adds	r0, r5, #4
 8024438:	70ec      	strb	r4, [r5, #3]
 802443a:	e7f1      	b.n	8024420 <__exponent+0x64>

0802443c <_printf_float>:
 802443c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802443e:	b097      	sub	sp, #92	@ 0x5c
 8024440:	000d      	movs	r5, r1
 8024442:	920a      	str	r2, [sp, #40]	@ 0x28
 8024444:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8024446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024448:	9009      	str	r0, [sp, #36]	@ 0x24
 802444a:	f000 fe9f 	bl	802518c <_localeconv_r>
 802444e:	6803      	ldr	r3, [r0, #0]
 8024450:	0018      	movs	r0, r3
 8024452:	930d      	str	r3, [sp, #52]	@ 0x34
 8024454:	f7db fe8a 	bl	800016c <strlen>
 8024458:	2300      	movs	r3, #0
 802445a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802445c:	9314      	str	r3, [sp, #80]	@ 0x50
 802445e:	7e2b      	ldrb	r3, [r5, #24]
 8024460:	2207      	movs	r2, #7
 8024462:	930c      	str	r3, [sp, #48]	@ 0x30
 8024464:	682b      	ldr	r3, [r5, #0]
 8024466:	930e      	str	r3, [sp, #56]	@ 0x38
 8024468:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802446a:	6823      	ldr	r3, [r4, #0]
 802446c:	05c9      	lsls	r1, r1, #23
 802446e:	d545      	bpl.n	80244fc <_printf_float+0xc0>
 8024470:	189b      	adds	r3, r3, r2
 8024472:	4393      	bics	r3, r2
 8024474:	001a      	movs	r2, r3
 8024476:	3208      	adds	r2, #8
 8024478:	6022      	str	r2, [r4, #0]
 802447a:	2201      	movs	r2, #1
 802447c:	681e      	ldr	r6, [r3, #0]
 802447e:	685f      	ldr	r7, [r3, #4]
 8024480:	007b      	lsls	r3, r7, #1
 8024482:	085b      	lsrs	r3, r3, #1
 8024484:	9311      	str	r3, [sp, #68]	@ 0x44
 8024486:	9610      	str	r6, [sp, #64]	@ 0x40
 8024488:	64ae      	str	r6, [r5, #72]	@ 0x48
 802448a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 802448c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802448e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024490:	4ba7      	ldr	r3, [pc, #668]	@ (8024730 <_printf_float+0x2f4>)
 8024492:	4252      	negs	r2, r2
 8024494:	f7de ff36 	bl	8003304 <__aeabi_dcmpun>
 8024498:	2800      	cmp	r0, #0
 802449a:	d131      	bne.n	8024500 <_printf_float+0xc4>
 802449c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802449e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80244a0:	2201      	movs	r2, #1
 80244a2:	4ba3      	ldr	r3, [pc, #652]	@ (8024730 <_printf_float+0x2f4>)
 80244a4:	4252      	negs	r2, r2
 80244a6:	f7dc f813 	bl	80004d0 <__aeabi_dcmple>
 80244aa:	2800      	cmp	r0, #0
 80244ac:	d128      	bne.n	8024500 <_printf_float+0xc4>
 80244ae:	2200      	movs	r2, #0
 80244b0:	2300      	movs	r3, #0
 80244b2:	0030      	movs	r0, r6
 80244b4:	0039      	movs	r1, r7
 80244b6:	f7dc f801 	bl	80004bc <__aeabi_dcmplt>
 80244ba:	2800      	cmp	r0, #0
 80244bc:	d003      	beq.n	80244c6 <_printf_float+0x8a>
 80244be:	002b      	movs	r3, r5
 80244c0:	222d      	movs	r2, #45	@ 0x2d
 80244c2:	3343      	adds	r3, #67	@ 0x43
 80244c4:	701a      	strb	r2, [r3, #0]
 80244c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80244c8:	4f9a      	ldr	r7, [pc, #616]	@ (8024734 <_printf_float+0x2f8>)
 80244ca:	2b47      	cmp	r3, #71	@ 0x47
 80244cc:	d900      	bls.n	80244d0 <_printf_float+0x94>
 80244ce:	4f9a      	ldr	r7, [pc, #616]	@ (8024738 <_printf_float+0x2fc>)
 80244d0:	2303      	movs	r3, #3
 80244d2:	2400      	movs	r4, #0
 80244d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80244d6:	612b      	str	r3, [r5, #16]
 80244d8:	3301      	adds	r3, #1
 80244da:	439a      	bics	r2, r3
 80244dc:	602a      	str	r2, [r5, #0]
 80244de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80244e0:	0029      	movs	r1, r5
 80244e2:	9300      	str	r3, [sp, #0]
 80244e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80244e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80244e8:	aa15      	add	r2, sp, #84	@ 0x54
 80244ea:	f000 f9e5 	bl	80248b8 <_printf_common>
 80244ee:	3001      	adds	r0, #1
 80244f0:	d000      	beq.n	80244f4 <_printf_float+0xb8>
 80244f2:	e09f      	b.n	8024634 <_printf_float+0x1f8>
 80244f4:	2001      	movs	r0, #1
 80244f6:	4240      	negs	r0, r0
 80244f8:	b017      	add	sp, #92	@ 0x5c
 80244fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80244fc:	3307      	adds	r3, #7
 80244fe:	e7b8      	b.n	8024472 <_printf_float+0x36>
 8024500:	0032      	movs	r2, r6
 8024502:	003b      	movs	r3, r7
 8024504:	0030      	movs	r0, r6
 8024506:	0039      	movs	r1, r7
 8024508:	f7de fefc 	bl	8003304 <__aeabi_dcmpun>
 802450c:	2800      	cmp	r0, #0
 802450e:	d00b      	beq.n	8024528 <_printf_float+0xec>
 8024510:	2f00      	cmp	r7, #0
 8024512:	da03      	bge.n	802451c <_printf_float+0xe0>
 8024514:	002b      	movs	r3, r5
 8024516:	222d      	movs	r2, #45	@ 0x2d
 8024518:	3343      	adds	r3, #67	@ 0x43
 802451a:	701a      	strb	r2, [r3, #0]
 802451c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802451e:	4f87      	ldr	r7, [pc, #540]	@ (802473c <_printf_float+0x300>)
 8024520:	2b47      	cmp	r3, #71	@ 0x47
 8024522:	d9d5      	bls.n	80244d0 <_printf_float+0x94>
 8024524:	4f86      	ldr	r7, [pc, #536]	@ (8024740 <_printf_float+0x304>)
 8024526:	e7d3      	b.n	80244d0 <_printf_float+0x94>
 8024528:	2220      	movs	r2, #32
 802452a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802452c:	686b      	ldr	r3, [r5, #4]
 802452e:	4394      	bics	r4, r2
 8024530:	1c5a      	adds	r2, r3, #1
 8024532:	d146      	bne.n	80245c2 <_printf_float+0x186>
 8024534:	3307      	adds	r3, #7
 8024536:	606b      	str	r3, [r5, #4]
 8024538:	2380      	movs	r3, #128	@ 0x80
 802453a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802453c:	00db      	lsls	r3, r3, #3
 802453e:	4313      	orrs	r3, r2
 8024540:	2200      	movs	r2, #0
 8024542:	602b      	str	r3, [r5, #0]
 8024544:	9206      	str	r2, [sp, #24]
 8024546:	aa14      	add	r2, sp, #80	@ 0x50
 8024548:	9205      	str	r2, [sp, #20]
 802454a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802454c:	a90a      	add	r1, sp, #40	@ 0x28
 802454e:	9204      	str	r2, [sp, #16]
 8024550:	aa13      	add	r2, sp, #76	@ 0x4c
 8024552:	9203      	str	r2, [sp, #12]
 8024554:	2223      	movs	r2, #35	@ 0x23
 8024556:	1852      	adds	r2, r2, r1
 8024558:	9202      	str	r2, [sp, #8]
 802455a:	9301      	str	r3, [sp, #4]
 802455c:	686b      	ldr	r3, [r5, #4]
 802455e:	0032      	movs	r2, r6
 8024560:	9300      	str	r3, [sp, #0]
 8024562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024564:	003b      	movs	r3, r7
 8024566:	f7ff fec3 	bl	80242f0 <__cvt>
 802456a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802456c:	0007      	movs	r7, r0
 802456e:	2c47      	cmp	r4, #71	@ 0x47
 8024570:	d12d      	bne.n	80245ce <_printf_float+0x192>
 8024572:	1cd3      	adds	r3, r2, #3
 8024574:	db02      	blt.n	802457c <_printf_float+0x140>
 8024576:	686b      	ldr	r3, [r5, #4]
 8024578:	429a      	cmp	r2, r3
 802457a:	dd48      	ble.n	802460e <_printf_float+0x1d2>
 802457c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802457e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024580:	3b02      	subs	r3, #2
 8024582:	b2db      	uxtb	r3, r3
 8024584:	930c      	str	r3, [sp, #48]	@ 0x30
 8024586:	0028      	movs	r0, r5
 8024588:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802458a:	3901      	subs	r1, #1
 802458c:	3050      	adds	r0, #80	@ 0x50
 802458e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024590:	f7ff ff14 	bl	80243bc <__exponent>
 8024594:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024596:	0004      	movs	r4, r0
 8024598:	1813      	adds	r3, r2, r0
 802459a:	612b      	str	r3, [r5, #16]
 802459c:	2a01      	cmp	r2, #1
 802459e:	dc02      	bgt.n	80245a6 <_printf_float+0x16a>
 80245a0:	682a      	ldr	r2, [r5, #0]
 80245a2:	07d2      	lsls	r2, r2, #31
 80245a4:	d501      	bpl.n	80245aa <_printf_float+0x16e>
 80245a6:	3301      	adds	r3, #1
 80245a8:	612b      	str	r3, [r5, #16]
 80245aa:	2323      	movs	r3, #35	@ 0x23
 80245ac:	aa0a      	add	r2, sp, #40	@ 0x28
 80245ae:	189b      	adds	r3, r3, r2
 80245b0:	781b      	ldrb	r3, [r3, #0]
 80245b2:	2b00      	cmp	r3, #0
 80245b4:	d100      	bne.n	80245b8 <_printf_float+0x17c>
 80245b6:	e792      	b.n	80244de <_printf_float+0xa2>
 80245b8:	002b      	movs	r3, r5
 80245ba:	222d      	movs	r2, #45	@ 0x2d
 80245bc:	3343      	adds	r3, #67	@ 0x43
 80245be:	701a      	strb	r2, [r3, #0]
 80245c0:	e78d      	b.n	80244de <_printf_float+0xa2>
 80245c2:	2c47      	cmp	r4, #71	@ 0x47
 80245c4:	d1b8      	bne.n	8024538 <_printf_float+0xfc>
 80245c6:	2b00      	cmp	r3, #0
 80245c8:	d1b6      	bne.n	8024538 <_printf_float+0xfc>
 80245ca:	3301      	adds	r3, #1
 80245cc:	e7b3      	b.n	8024536 <_printf_float+0xfa>
 80245ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245d0:	0011      	movs	r1, r2
 80245d2:	2b65      	cmp	r3, #101	@ 0x65
 80245d4:	d9d7      	bls.n	8024586 <_printf_float+0x14a>
 80245d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245d8:	2b66      	cmp	r3, #102	@ 0x66
 80245da:	d11a      	bne.n	8024612 <_printf_float+0x1d6>
 80245dc:	686b      	ldr	r3, [r5, #4]
 80245de:	2a00      	cmp	r2, #0
 80245e0:	dd09      	ble.n	80245f6 <_printf_float+0x1ba>
 80245e2:	612a      	str	r2, [r5, #16]
 80245e4:	2b00      	cmp	r3, #0
 80245e6:	d102      	bne.n	80245ee <_printf_float+0x1b2>
 80245e8:	6829      	ldr	r1, [r5, #0]
 80245ea:	07c9      	lsls	r1, r1, #31
 80245ec:	d50b      	bpl.n	8024606 <_printf_float+0x1ca>
 80245ee:	3301      	adds	r3, #1
 80245f0:	189b      	adds	r3, r3, r2
 80245f2:	612b      	str	r3, [r5, #16]
 80245f4:	e007      	b.n	8024606 <_printf_float+0x1ca>
 80245f6:	2b00      	cmp	r3, #0
 80245f8:	d103      	bne.n	8024602 <_printf_float+0x1c6>
 80245fa:	2201      	movs	r2, #1
 80245fc:	6829      	ldr	r1, [r5, #0]
 80245fe:	4211      	tst	r1, r2
 8024600:	d000      	beq.n	8024604 <_printf_float+0x1c8>
 8024602:	1c9a      	adds	r2, r3, #2
 8024604:	612a      	str	r2, [r5, #16]
 8024606:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024608:	2400      	movs	r4, #0
 802460a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802460c:	e7cd      	b.n	80245aa <_printf_float+0x16e>
 802460e:	2367      	movs	r3, #103	@ 0x67
 8024610:	930c      	str	r3, [sp, #48]	@ 0x30
 8024612:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024614:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024616:	4299      	cmp	r1, r3
 8024618:	db06      	blt.n	8024628 <_printf_float+0x1ec>
 802461a:	682b      	ldr	r3, [r5, #0]
 802461c:	6129      	str	r1, [r5, #16]
 802461e:	07db      	lsls	r3, r3, #31
 8024620:	d5f1      	bpl.n	8024606 <_printf_float+0x1ca>
 8024622:	3101      	adds	r1, #1
 8024624:	6129      	str	r1, [r5, #16]
 8024626:	e7ee      	b.n	8024606 <_printf_float+0x1ca>
 8024628:	2201      	movs	r2, #1
 802462a:	2900      	cmp	r1, #0
 802462c:	dce0      	bgt.n	80245f0 <_printf_float+0x1b4>
 802462e:	1892      	adds	r2, r2, r2
 8024630:	1a52      	subs	r2, r2, r1
 8024632:	e7dd      	b.n	80245f0 <_printf_float+0x1b4>
 8024634:	682a      	ldr	r2, [r5, #0]
 8024636:	0553      	lsls	r3, r2, #21
 8024638:	d408      	bmi.n	802464c <_printf_float+0x210>
 802463a:	692b      	ldr	r3, [r5, #16]
 802463c:	003a      	movs	r2, r7
 802463e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024640:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024642:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024644:	47a0      	blx	r4
 8024646:	3001      	adds	r0, #1
 8024648:	d129      	bne.n	802469e <_printf_float+0x262>
 802464a:	e753      	b.n	80244f4 <_printf_float+0xb8>
 802464c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802464e:	2b65      	cmp	r3, #101	@ 0x65
 8024650:	d800      	bhi.n	8024654 <_printf_float+0x218>
 8024652:	e0da      	b.n	802480a <_printf_float+0x3ce>
 8024654:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024656:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024658:	2200      	movs	r2, #0
 802465a:	2300      	movs	r3, #0
 802465c:	f7db ff28 	bl	80004b0 <__aeabi_dcmpeq>
 8024660:	2800      	cmp	r0, #0
 8024662:	d033      	beq.n	80246cc <_printf_float+0x290>
 8024664:	2301      	movs	r3, #1
 8024666:	4a37      	ldr	r2, [pc, #220]	@ (8024744 <_printf_float+0x308>)
 8024668:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802466a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802466c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802466e:	47a0      	blx	r4
 8024670:	3001      	adds	r0, #1
 8024672:	d100      	bne.n	8024676 <_printf_float+0x23a>
 8024674:	e73e      	b.n	80244f4 <_printf_float+0xb8>
 8024676:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024678:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802467a:	42b3      	cmp	r3, r6
 802467c:	db02      	blt.n	8024684 <_printf_float+0x248>
 802467e:	682b      	ldr	r3, [r5, #0]
 8024680:	07db      	lsls	r3, r3, #31
 8024682:	d50c      	bpl.n	802469e <_printf_float+0x262>
 8024684:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024686:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024688:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802468a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802468c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802468e:	47a0      	blx	r4
 8024690:	2400      	movs	r4, #0
 8024692:	3001      	adds	r0, #1
 8024694:	d100      	bne.n	8024698 <_printf_float+0x25c>
 8024696:	e72d      	b.n	80244f4 <_printf_float+0xb8>
 8024698:	1e73      	subs	r3, r6, #1
 802469a:	42a3      	cmp	r3, r4
 802469c:	dc0a      	bgt.n	80246b4 <_printf_float+0x278>
 802469e:	682b      	ldr	r3, [r5, #0]
 80246a0:	079b      	lsls	r3, r3, #30
 80246a2:	d500      	bpl.n	80246a6 <_printf_float+0x26a>
 80246a4:	e105      	b.n	80248b2 <_printf_float+0x476>
 80246a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80246a8:	68e8      	ldr	r0, [r5, #12]
 80246aa:	4298      	cmp	r0, r3
 80246ac:	db00      	blt.n	80246b0 <_printf_float+0x274>
 80246ae:	e723      	b.n	80244f8 <_printf_float+0xbc>
 80246b0:	0018      	movs	r0, r3
 80246b2:	e721      	b.n	80244f8 <_printf_float+0xbc>
 80246b4:	002a      	movs	r2, r5
 80246b6:	2301      	movs	r3, #1
 80246b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80246be:	321a      	adds	r2, #26
 80246c0:	47b8      	blx	r7
 80246c2:	3001      	adds	r0, #1
 80246c4:	d100      	bne.n	80246c8 <_printf_float+0x28c>
 80246c6:	e715      	b.n	80244f4 <_printf_float+0xb8>
 80246c8:	3401      	adds	r4, #1
 80246ca:	e7e5      	b.n	8024698 <_printf_float+0x25c>
 80246cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	dc3a      	bgt.n	8024748 <_printf_float+0x30c>
 80246d2:	2301      	movs	r3, #1
 80246d4:	4a1b      	ldr	r2, [pc, #108]	@ (8024744 <_printf_float+0x308>)
 80246d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80246dc:	47a0      	blx	r4
 80246de:	3001      	adds	r0, #1
 80246e0:	d100      	bne.n	80246e4 <_printf_float+0x2a8>
 80246e2:	e707      	b.n	80244f4 <_printf_float+0xb8>
 80246e4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80246e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80246e8:	4333      	orrs	r3, r6
 80246ea:	d102      	bne.n	80246f2 <_printf_float+0x2b6>
 80246ec:	682b      	ldr	r3, [r5, #0]
 80246ee:	07db      	lsls	r3, r3, #31
 80246f0:	d5d5      	bpl.n	802469e <_printf_float+0x262>
 80246f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80246f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80246f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80246fc:	47a0      	blx	r4
 80246fe:	2300      	movs	r3, #0
 8024700:	3001      	adds	r0, #1
 8024702:	d100      	bne.n	8024706 <_printf_float+0x2ca>
 8024704:	e6f6      	b.n	80244f4 <_printf_float+0xb8>
 8024706:	930c      	str	r3, [sp, #48]	@ 0x30
 8024708:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802470a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802470c:	425b      	negs	r3, r3
 802470e:	4293      	cmp	r3, r2
 8024710:	dc01      	bgt.n	8024716 <_printf_float+0x2da>
 8024712:	0033      	movs	r3, r6
 8024714:	e792      	b.n	802463c <_printf_float+0x200>
 8024716:	002a      	movs	r2, r5
 8024718:	2301      	movs	r3, #1
 802471a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802471c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802471e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024720:	321a      	adds	r2, #26
 8024722:	47a0      	blx	r4
 8024724:	3001      	adds	r0, #1
 8024726:	d100      	bne.n	802472a <_printf_float+0x2ee>
 8024728:	e6e4      	b.n	80244f4 <_printf_float+0xb8>
 802472a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802472c:	3301      	adds	r3, #1
 802472e:	e7ea      	b.n	8024706 <_printf_float+0x2ca>
 8024730:	7fefffff 	.word	0x7fefffff
 8024734:	0802dc49 	.word	0x0802dc49
 8024738:	0802dc4d 	.word	0x0802dc4d
 802473c:	0802dc51 	.word	0x0802dc51
 8024740:	0802dc55 	.word	0x0802dc55
 8024744:	0802dc59 	.word	0x0802dc59
 8024748:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802474a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 802474c:	930c      	str	r3, [sp, #48]	@ 0x30
 802474e:	429e      	cmp	r6, r3
 8024750:	dd00      	ble.n	8024754 <_printf_float+0x318>
 8024752:	001e      	movs	r6, r3
 8024754:	2e00      	cmp	r6, #0
 8024756:	dc31      	bgt.n	80247bc <_printf_float+0x380>
 8024758:	43f3      	mvns	r3, r6
 802475a:	2400      	movs	r4, #0
 802475c:	17db      	asrs	r3, r3, #31
 802475e:	4033      	ands	r3, r6
 8024760:	930e      	str	r3, [sp, #56]	@ 0x38
 8024762:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024766:	1af3      	subs	r3, r6, r3
 8024768:	42a3      	cmp	r3, r4
 802476a:	dc30      	bgt.n	80247ce <_printf_float+0x392>
 802476c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802476e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024770:	429a      	cmp	r2, r3
 8024772:	dc38      	bgt.n	80247e6 <_printf_float+0x3aa>
 8024774:	682b      	ldr	r3, [r5, #0]
 8024776:	07db      	lsls	r3, r3, #31
 8024778:	d435      	bmi.n	80247e6 <_printf_float+0x3aa>
 802477a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802477c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802477e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024780:	1b9b      	subs	r3, r3, r6
 8024782:	1b14      	subs	r4, r2, r4
 8024784:	429c      	cmp	r4, r3
 8024786:	dd00      	ble.n	802478a <_printf_float+0x34e>
 8024788:	001c      	movs	r4, r3
 802478a:	2c00      	cmp	r4, #0
 802478c:	dc34      	bgt.n	80247f8 <_printf_float+0x3bc>
 802478e:	43e3      	mvns	r3, r4
 8024790:	2600      	movs	r6, #0
 8024792:	17db      	asrs	r3, r3, #31
 8024794:	401c      	ands	r4, r3
 8024796:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024798:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802479a:	1ad3      	subs	r3, r2, r3
 802479c:	1b1b      	subs	r3, r3, r4
 802479e:	42b3      	cmp	r3, r6
 80247a0:	dc00      	bgt.n	80247a4 <_printf_float+0x368>
 80247a2:	e77c      	b.n	802469e <_printf_float+0x262>
 80247a4:	002a      	movs	r2, r5
 80247a6:	2301      	movs	r3, #1
 80247a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80247aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80247ac:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80247ae:	321a      	adds	r2, #26
 80247b0:	47b8      	blx	r7
 80247b2:	3001      	adds	r0, #1
 80247b4:	d100      	bne.n	80247b8 <_printf_float+0x37c>
 80247b6:	e69d      	b.n	80244f4 <_printf_float+0xb8>
 80247b8:	3601      	adds	r6, #1
 80247ba:	e7ec      	b.n	8024796 <_printf_float+0x35a>
 80247bc:	0033      	movs	r3, r6
 80247be:	003a      	movs	r2, r7
 80247c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80247c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80247c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80247c6:	47a0      	blx	r4
 80247c8:	3001      	adds	r0, #1
 80247ca:	d1c5      	bne.n	8024758 <_printf_float+0x31c>
 80247cc:	e692      	b.n	80244f4 <_printf_float+0xb8>
 80247ce:	002a      	movs	r2, r5
 80247d0:	2301      	movs	r3, #1
 80247d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80247d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80247d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80247d8:	321a      	adds	r2, #26
 80247da:	47b0      	blx	r6
 80247dc:	3001      	adds	r0, #1
 80247de:	d100      	bne.n	80247e2 <_printf_float+0x3a6>
 80247e0:	e688      	b.n	80244f4 <_printf_float+0xb8>
 80247e2:	3401      	adds	r4, #1
 80247e4:	e7bd      	b.n	8024762 <_printf_float+0x326>
 80247e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80247e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80247ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80247ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80247ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80247f0:	47a0      	blx	r4
 80247f2:	3001      	adds	r0, #1
 80247f4:	d1c1      	bne.n	802477a <_printf_float+0x33e>
 80247f6:	e67d      	b.n	80244f4 <_printf_float+0xb8>
 80247f8:	19ba      	adds	r2, r7, r6
 80247fa:	0023      	movs	r3, r4
 80247fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80247fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024800:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024802:	47b0      	blx	r6
 8024804:	3001      	adds	r0, #1
 8024806:	d1c2      	bne.n	802478e <_printf_float+0x352>
 8024808:	e674      	b.n	80244f4 <_printf_float+0xb8>
 802480a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802480c:	930c      	str	r3, [sp, #48]	@ 0x30
 802480e:	2b01      	cmp	r3, #1
 8024810:	dc02      	bgt.n	8024818 <_printf_float+0x3dc>
 8024812:	2301      	movs	r3, #1
 8024814:	421a      	tst	r2, r3
 8024816:	d039      	beq.n	802488c <_printf_float+0x450>
 8024818:	2301      	movs	r3, #1
 802481a:	003a      	movs	r2, r7
 802481c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802481e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024820:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024822:	47b0      	blx	r6
 8024824:	3001      	adds	r0, #1
 8024826:	d100      	bne.n	802482a <_printf_float+0x3ee>
 8024828:	e664      	b.n	80244f4 <_printf_float+0xb8>
 802482a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802482c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802482e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024830:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024832:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024834:	47b0      	blx	r6
 8024836:	3001      	adds	r0, #1
 8024838:	d100      	bne.n	802483c <_printf_float+0x400>
 802483a:	e65b      	b.n	80244f4 <_printf_float+0xb8>
 802483c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 802483e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024842:	2200      	movs	r2, #0
 8024844:	3b01      	subs	r3, #1
 8024846:	930c      	str	r3, [sp, #48]	@ 0x30
 8024848:	2300      	movs	r3, #0
 802484a:	f7db fe31 	bl	80004b0 <__aeabi_dcmpeq>
 802484e:	2800      	cmp	r0, #0
 8024850:	d11a      	bne.n	8024888 <_printf_float+0x44c>
 8024852:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024854:	1c7a      	adds	r2, r7, #1
 8024856:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024858:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802485a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802485c:	47b0      	blx	r6
 802485e:	3001      	adds	r0, #1
 8024860:	d10e      	bne.n	8024880 <_printf_float+0x444>
 8024862:	e647      	b.n	80244f4 <_printf_float+0xb8>
 8024864:	002a      	movs	r2, r5
 8024866:	2301      	movs	r3, #1
 8024868:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802486a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802486c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802486e:	321a      	adds	r2, #26
 8024870:	47b8      	blx	r7
 8024872:	3001      	adds	r0, #1
 8024874:	d100      	bne.n	8024878 <_printf_float+0x43c>
 8024876:	e63d      	b.n	80244f4 <_printf_float+0xb8>
 8024878:	3601      	adds	r6, #1
 802487a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802487c:	429e      	cmp	r6, r3
 802487e:	dbf1      	blt.n	8024864 <_printf_float+0x428>
 8024880:	002a      	movs	r2, r5
 8024882:	0023      	movs	r3, r4
 8024884:	3250      	adds	r2, #80	@ 0x50
 8024886:	e6da      	b.n	802463e <_printf_float+0x202>
 8024888:	2600      	movs	r6, #0
 802488a:	e7f6      	b.n	802487a <_printf_float+0x43e>
 802488c:	003a      	movs	r2, r7
 802488e:	e7e2      	b.n	8024856 <_printf_float+0x41a>
 8024890:	002a      	movs	r2, r5
 8024892:	2301      	movs	r3, #1
 8024894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024896:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024898:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802489a:	3219      	adds	r2, #25
 802489c:	47b0      	blx	r6
 802489e:	3001      	adds	r0, #1
 80248a0:	d100      	bne.n	80248a4 <_printf_float+0x468>
 80248a2:	e627      	b.n	80244f4 <_printf_float+0xb8>
 80248a4:	3401      	adds	r4, #1
 80248a6:	68eb      	ldr	r3, [r5, #12]
 80248a8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80248aa:	1a9b      	subs	r3, r3, r2
 80248ac:	42a3      	cmp	r3, r4
 80248ae:	dcef      	bgt.n	8024890 <_printf_float+0x454>
 80248b0:	e6f9      	b.n	80246a6 <_printf_float+0x26a>
 80248b2:	2400      	movs	r4, #0
 80248b4:	e7f7      	b.n	80248a6 <_printf_float+0x46a>
 80248b6:	46c0      	nop			@ (mov r8, r8)

080248b8 <_printf_common>:
 80248b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80248ba:	0016      	movs	r6, r2
 80248bc:	9301      	str	r3, [sp, #4]
 80248be:	688a      	ldr	r2, [r1, #8]
 80248c0:	690b      	ldr	r3, [r1, #16]
 80248c2:	000c      	movs	r4, r1
 80248c4:	9000      	str	r0, [sp, #0]
 80248c6:	4293      	cmp	r3, r2
 80248c8:	da00      	bge.n	80248cc <_printf_common+0x14>
 80248ca:	0013      	movs	r3, r2
 80248cc:	0022      	movs	r2, r4
 80248ce:	6033      	str	r3, [r6, #0]
 80248d0:	3243      	adds	r2, #67	@ 0x43
 80248d2:	7812      	ldrb	r2, [r2, #0]
 80248d4:	2a00      	cmp	r2, #0
 80248d6:	d001      	beq.n	80248dc <_printf_common+0x24>
 80248d8:	3301      	adds	r3, #1
 80248da:	6033      	str	r3, [r6, #0]
 80248dc:	6823      	ldr	r3, [r4, #0]
 80248de:	069b      	lsls	r3, r3, #26
 80248e0:	d502      	bpl.n	80248e8 <_printf_common+0x30>
 80248e2:	6833      	ldr	r3, [r6, #0]
 80248e4:	3302      	adds	r3, #2
 80248e6:	6033      	str	r3, [r6, #0]
 80248e8:	6822      	ldr	r2, [r4, #0]
 80248ea:	2306      	movs	r3, #6
 80248ec:	0015      	movs	r5, r2
 80248ee:	401d      	ands	r5, r3
 80248f0:	421a      	tst	r2, r3
 80248f2:	d027      	beq.n	8024944 <_printf_common+0x8c>
 80248f4:	0023      	movs	r3, r4
 80248f6:	3343      	adds	r3, #67	@ 0x43
 80248f8:	781b      	ldrb	r3, [r3, #0]
 80248fa:	1e5a      	subs	r2, r3, #1
 80248fc:	4193      	sbcs	r3, r2
 80248fe:	6822      	ldr	r2, [r4, #0]
 8024900:	0692      	lsls	r2, r2, #26
 8024902:	d430      	bmi.n	8024966 <_printf_common+0xae>
 8024904:	0022      	movs	r2, r4
 8024906:	9901      	ldr	r1, [sp, #4]
 8024908:	9800      	ldr	r0, [sp, #0]
 802490a:	9d08      	ldr	r5, [sp, #32]
 802490c:	3243      	adds	r2, #67	@ 0x43
 802490e:	47a8      	blx	r5
 8024910:	3001      	adds	r0, #1
 8024912:	d025      	beq.n	8024960 <_printf_common+0xa8>
 8024914:	2206      	movs	r2, #6
 8024916:	6823      	ldr	r3, [r4, #0]
 8024918:	2500      	movs	r5, #0
 802491a:	4013      	ands	r3, r2
 802491c:	2b04      	cmp	r3, #4
 802491e:	d105      	bne.n	802492c <_printf_common+0x74>
 8024920:	6833      	ldr	r3, [r6, #0]
 8024922:	68e5      	ldr	r5, [r4, #12]
 8024924:	1aed      	subs	r5, r5, r3
 8024926:	43eb      	mvns	r3, r5
 8024928:	17db      	asrs	r3, r3, #31
 802492a:	401d      	ands	r5, r3
 802492c:	68a3      	ldr	r3, [r4, #8]
 802492e:	6922      	ldr	r2, [r4, #16]
 8024930:	4293      	cmp	r3, r2
 8024932:	dd01      	ble.n	8024938 <_printf_common+0x80>
 8024934:	1a9b      	subs	r3, r3, r2
 8024936:	18ed      	adds	r5, r5, r3
 8024938:	2600      	movs	r6, #0
 802493a:	42b5      	cmp	r5, r6
 802493c:	d120      	bne.n	8024980 <_printf_common+0xc8>
 802493e:	2000      	movs	r0, #0
 8024940:	e010      	b.n	8024964 <_printf_common+0xac>
 8024942:	3501      	adds	r5, #1
 8024944:	68e3      	ldr	r3, [r4, #12]
 8024946:	6832      	ldr	r2, [r6, #0]
 8024948:	1a9b      	subs	r3, r3, r2
 802494a:	42ab      	cmp	r3, r5
 802494c:	ddd2      	ble.n	80248f4 <_printf_common+0x3c>
 802494e:	0022      	movs	r2, r4
 8024950:	2301      	movs	r3, #1
 8024952:	9901      	ldr	r1, [sp, #4]
 8024954:	9800      	ldr	r0, [sp, #0]
 8024956:	9f08      	ldr	r7, [sp, #32]
 8024958:	3219      	adds	r2, #25
 802495a:	47b8      	blx	r7
 802495c:	3001      	adds	r0, #1
 802495e:	d1f0      	bne.n	8024942 <_printf_common+0x8a>
 8024960:	2001      	movs	r0, #1
 8024962:	4240      	negs	r0, r0
 8024964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024966:	2030      	movs	r0, #48	@ 0x30
 8024968:	18e1      	adds	r1, r4, r3
 802496a:	3143      	adds	r1, #67	@ 0x43
 802496c:	7008      	strb	r0, [r1, #0]
 802496e:	0021      	movs	r1, r4
 8024970:	1c5a      	adds	r2, r3, #1
 8024972:	3145      	adds	r1, #69	@ 0x45
 8024974:	7809      	ldrb	r1, [r1, #0]
 8024976:	18a2      	adds	r2, r4, r2
 8024978:	3243      	adds	r2, #67	@ 0x43
 802497a:	3302      	adds	r3, #2
 802497c:	7011      	strb	r1, [r2, #0]
 802497e:	e7c1      	b.n	8024904 <_printf_common+0x4c>
 8024980:	0022      	movs	r2, r4
 8024982:	2301      	movs	r3, #1
 8024984:	9901      	ldr	r1, [sp, #4]
 8024986:	9800      	ldr	r0, [sp, #0]
 8024988:	9f08      	ldr	r7, [sp, #32]
 802498a:	321a      	adds	r2, #26
 802498c:	47b8      	blx	r7
 802498e:	3001      	adds	r0, #1
 8024990:	d0e6      	beq.n	8024960 <_printf_common+0xa8>
 8024992:	3601      	adds	r6, #1
 8024994:	e7d1      	b.n	802493a <_printf_common+0x82>
	...

08024998 <_printf_i>:
 8024998:	b5f0      	push	{r4, r5, r6, r7, lr}
 802499a:	b08b      	sub	sp, #44	@ 0x2c
 802499c:	9206      	str	r2, [sp, #24]
 802499e:	000a      	movs	r2, r1
 80249a0:	3243      	adds	r2, #67	@ 0x43
 80249a2:	9307      	str	r3, [sp, #28]
 80249a4:	9005      	str	r0, [sp, #20]
 80249a6:	9203      	str	r2, [sp, #12]
 80249a8:	7e0a      	ldrb	r2, [r1, #24]
 80249aa:	000c      	movs	r4, r1
 80249ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80249ae:	2a78      	cmp	r2, #120	@ 0x78
 80249b0:	d809      	bhi.n	80249c6 <_printf_i+0x2e>
 80249b2:	2a62      	cmp	r2, #98	@ 0x62
 80249b4:	d80b      	bhi.n	80249ce <_printf_i+0x36>
 80249b6:	2a00      	cmp	r2, #0
 80249b8:	d100      	bne.n	80249bc <_printf_i+0x24>
 80249ba:	e0bc      	b.n	8024b36 <_printf_i+0x19e>
 80249bc:	497b      	ldr	r1, [pc, #492]	@ (8024bac <_printf_i+0x214>)
 80249be:	9104      	str	r1, [sp, #16]
 80249c0:	2a58      	cmp	r2, #88	@ 0x58
 80249c2:	d100      	bne.n	80249c6 <_printf_i+0x2e>
 80249c4:	e090      	b.n	8024ae8 <_printf_i+0x150>
 80249c6:	0025      	movs	r5, r4
 80249c8:	3542      	adds	r5, #66	@ 0x42
 80249ca:	702a      	strb	r2, [r5, #0]
 80249cc:	e022      	b.n	8024a14 <_printf_i+0x7c>
 80249ce:	0010      	movs	r0, r2
 80249d0:	3863      	subs	r0, #99	@ 0x63
 80249d2:	2815      	cmp	r0, #21
 80249d4:	d8f7      	bhi.n	80249c6 <_printf_i+0x2e>
 80249d6:	f7db fbdb 	bl	8000190 <__gnu_thumb1_case_shi>
 80249da:	0016      	.short	0x0016
 80249dc:	fff6001f 	.word	0xfff6001f
 80249e0:	fff6fff6 	.word	0xfff6fff6
 80249e4:	001ffff6 	.word	0x001ffff6
 80249e8:	fff6fff6 	.word	0xfff6fff6
 80249ec:	fff6fff6 	.word	0xfff6fff6
 80249f0:	003600a1 	.word	0x003600a1
 80249f4:	fff60080 	.word	0xfff60080
 80249f8:	00b2fff6 	.word	0x00b2fff6
 80249fc:	0036fff6 	.word	0x0036fff6
 8024a00:	fff6fff6 	.word	0xfff6fff6
 8024a04:	0084      	.short	0x0084
 8024a06:	0025      	movs	r5, r4
 8024a08:	681a      	ldr	r2, [r3, #0]
 8024a0a:	3542      	adds	r5, #66	@ 0x42
 8024a0c:	1d11      	adds	r1, r2, #4
 8024a0e:	6019      	str	r1, [r3, #0]
 8024a10:	6813      	ldr	r3, [r2, #0]
 8024a12:	702b      	strb	r3, [r5, #0]
 8024a14:	2301      	movs	r3, #1
 8024a16:	e0a0      	b.n	8024b5a <_printf_i+0x1c2>
 8024a18:	6818      	ldr	r0, [r3, #0]
 8024a1a:	6809      	ldr	r1, [r1, #0]
 8024a1c:	1d02      	adds	r2, r0, #4
 8024a1e:	060d      	lsls	r5, r1, #24
 8024a20:	d50b      	bpl.n	8024a3a <_printf_i+0xa2>
 8024a22:	6806      	ldr	r6, [r0, #0]
 8024a24:	601a      	str	r2, [r3, #0]
 8024a26:	2e00      	cmp	r6, #0
 8024a28:	da03      	bge.n	8024a32 <_printf_i+0x9a>
 8024a2a:	232d      	movs	r3, #45	@ 0x2d
 8024a2c:	9a03      	ldr	r2, [sp, #12]
 8024a2e:	4276      	negs	r6, r6
 8024a30:	7013      	strb	r3, [r2, #0]
 8024a32:	4b5e      	ldr	r3, [pc, #376]	@ (8024bac <_printf_i+0x214>)
 8024a34:	270a      	movs	r7, #10
 8024a36:	9304      	str	r3, [sp, #16]
 8024a38:	e018      	b.n	8024a6c <_printf_i+0xd4>
 8024a3a:	6806      	ldr	r6, [r0, #0]
 8024a3c:	601a      	str	r2, [r3, #0]
 8024a3e:	0649      	lsls	r1, r1, #25
 8024a40:	d5f1      	bpl.n	8024a26 <_printf_i+0x8e>
 8024a42:	b236      	sxth	r6, r6
 8024a44:	e7ef      	b.n	8024a26 <_printf_i+0x8e>
 8024a46:	6808      	ldr	r0, [r1, #0]
 8024a48:	6819      	ldr	r1, [r3, #0]
 8024a4a:	c940      	ldmia	r1!, {r6}
 8024a4c:	0605      	lsls	r5, r0, #24
 8024a4e:	d402      	bmi.n	8024a56 <_printf_i+0xbe>
 8024a50:	0640      	lsls	r0, r0, #25
 8024a52:	d500      	bpl.n	8024a56 <_printf_i+0xbe>
 8024a54:	b2b6      	uxth	r6, r6
 8024a56:	6019      	str	r1, [r3, #0]
 8024a58:	4b54      	ldr	r3, [pc, #336]	@ (8024bac <_printf_i+0x214>)
 8024a5a:	270a      	movs	r7, #10
 8024a5c:	9304      	str	r3, [sp, #16]
 8024a5e:	2a6f      	cmp	r2, #111	@ 0x6f
 8024a60:	d100      	bne.n	8024a64 <_printf_i+0xcc>
 8024a62:	3f02      	subs	r7, #2
 8024a64:	0023      	movs	r3, r4
 8024a66:	2200      	movs	r2, #0
 8024a68:	3343      	adds	r3, #67	@ 0x43
 8024a6a:	701a      	strb	r2, [r3, #0]
 8024a6c:	6863      	ldr	r3, [r4, #4]
 8024a6e:	60a3      	str	r3, [r4, #8]
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	db03      	blt.n	8024a7c <_printf_i+0xe4>
 8024a74:	2104      	movs	r1, #4
 8024a76:	6822      	ldr	r2, [r4, #0]
 8024a78:	438a      	bics	r2, r1
 8024a7a:	6022      	str	r2, [r4, #0]
 8024a7c:	2e00      	cmp	r6, #0
 8024a7e:	d102      	bne.n	8024a86 <_printf_i+0xee>
 8024a80:	9d03      	ldr	r5, [sp, #12]
 8024a82:	2b00      	cmp	r3, #0
 8024a84:	d00c      	beq.n	8024aa0 <_printf_i+0x108>
 8024a86:	9d03      	ldr	r5, [sp, #12]
 8024a88:	0030      	movs	r0, r6
 8024a8a:	0039      	movs	r1, r7
 8024a8c:	f7db fc10 	bl	80002b0 <__aeabi_uidivmod>
 8024a90:	9b04      	ldr	r3, [sp, #16]
 8024a92:	3d01      	subs	r5, #1
 8024a94:	5c5b      	ldrb	r3, [r3, r1]
 8024a96:	702b      	strb	r3, [r5, #0]
 8024a98:	0033      	movs	r3, r6
 8024a9a:	0006      	movs	r6, r0
 8024a9c:	429f      	cmp	r7, r3
 8024a9e:	d9f3      	bls.n	8024a88 <_printf_i+0xf0>
 8024aa0:	2f08      	cmp	r7, #8
 8024aa2:	d109      	bne.n	8024ab8 <_printf_i+0x120>
 8024aa4:	6823      	ldr	r3, [r4, #0]
 8024aa6:	07db      	lsls	r3, r3, #31
 8024aa8:	d506      	bpl.n	8024ab8 <_printf_i+0x120>
 8024aaa:	6862      	ldr	r2, [r4, #4]
 8024aac:	6923      	ldr	r3, [r4, #16]
 8024aae:	429a      	cmp	r2, r3
 8024ab0:	dc02      	bgt.n	8024ab8 <_printf_i+0x120>
 8024ab2:	2330      	movs	r3, #48	@ 0x30
 8024ab4:	3d01      	subs	r5, #1
 8024ab6:	702b      	strb	r3, [r5, #0]
 8024ab8:	9b03      	ldr	r3, [sp, #12]
 8024aba:	1b5b      	subs	r3, r3, r5
 8024abc:	6123      	str	r3, [r4, #16]
 8024abe:	9b07      	ldr	r3, [sp, #28]
 8024ac0:	0021      	movs	r1, r4
 8024ac2:	9300      	str	r3, [sp, #0]
 8024ac4:	9805      	ldr	r0, [sp, #20]
 8024ac6:	9b06      	ldr	r3, [sp, #24]
 8024ac8:	aa09      	add	r2, sp, #36	@ 0x24
 8024aca:	f7ff fef5 	bl	80248b8 <_printf_common>
 8024ace:	3001      	adds	r0, #1
 8024ad0:	d148      	bne.n	8024b64 <_printf_i+0x1cc>
 8024ad2:	2001      	movs	r0, #1
 8024ad4:	4240      	negs	r0, r0
 8024ad6:	b00b      	add	sp, #44	@ 0x2c
 8024ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ada:	2220      	movs	r2, #32
 8024adc:	6809      	ldr	r1, [r1, #0]
 8024ade:	430a      	orrs	r2, r1
 8024ae0:	6022      	str	r2, [r4, #0]
 8024ae2:	2278      	movs	r2, #120	@ 0x78
 8024ae4:	4932      	ldr	r1, [pc, #200]	@ (8024bb0 <_printf_i+0x218>)
 8024ae6:	9104      	str	r1, [sp, #16]
 8024ae8:	0021      	movs	r1, r4
 8024aea:	3145      	adds	r1, #69	@ 0x45
 8024aec:	700a      	strb	r2, [r1, #0]
 8024aee:	6819      	ldr	r1, [r3, #0]
 8024af0:	6822      	ldr	r2, [r4, #0]
 8024af2:	c940      	ldmia	r1!, {r6}
 8024af4:	0610      	lsls	r0, r2, #24
 8024af6:	d402      	bmi.n	8024afe <_printf_i+0x166>
 8024af8:	0650      	lsls	r0, r2, #25
 8024afa:	d500      	bpl.n	8024afe <_printf_i+0x166>
 8024afc:	b2b6      	uxth	r6, r6
 8024afe:	6019      	str	r1, [r3, #0]
 8024b00:	07d3      	lsls	r3, r2, #31
 8024b02:	d502      	bpl.n	8024b0a <_printf_i+0x172>
 8024b04:	2320      	movs	r3, #32
 8024b06:	4313      	orrs	r3, r2
 8024b08:	6023      	str	r3, [r4, #0]
 8024b0a:	2e00      	cmp	r6, #0
 8024b0c:	d001      	beq.n	8024b12 <_printf_i+0x17a>
 8024b0e:	2710      	movs	r7, #16
 8024b10:	e7a8      	b.n	8024a64 <_printf_i+0xcc>
 8024b12:	2220      	movs	r2, #32
 8024b14:	6823      	ldr	r3, [r4, #0]
 8024b16:	4393      	bics	r3, r2
 8024b18:	6023      	str	r3, [r4, #0]
 8024b1a:	e7f8      	b.n	8024b0e <_printf_i+0x176>
 8024b1c:	681a      	ldr	r2, [r3, #0]
 8024b1e:	680d      	ldr	r5, [r1, #0]
 8024b20:	1d10      	adds	r0, r2, #4
 8024b22:	6949      	ldr	r1, [r1, #20]
 8024b24:	6018      	str	r0, [r3, #0]
 8024b26:	6813      	ldr	r3, [r2, #0]
 8024b28:	062e      	lsls	r6, r5, #24
 8024b2a:	d501      	bpl.n	8024b30 <_printf_i+0x198>
 8024b2c:	6019      	str	r1, [r3, #0]
 8024b2e:	e002      	b.n	8024b36 <_printf_i+0x19e>
 8024b30:	066d      	lsls	r5, r5, #25
 8024b32:	d5fb      	bpl.n	8024b2c <_printf_i+0x194>
 8024b34:	8019      	strh	r1, [r3, #0]
 8024b36:	2300      	movs	r3, #0
 8024b38:	9d03      	ldr	r5, [sp, #12]
 8024b3a:	6123      	str	r3, [r4, #16]
 8024b3c:	e7bf      	b.n	8024abe <_printf_i+0x126>
 8024b3e:	681a      	ldr	r2, [r3, #0]
 8024b40:	1d11      	adds	r1, r2, #4
 8024b42:	6019      	str	r1, [r3, #0]
 8024b44:	6815      	ldr	r5, [r2, #0]
 8024b46:	2100      	movs	r1, #0
 8024b48:	0028      	movs	r0, r5
 8024b4a:	6862      	ldr	r2, [r4, #4]
 8024b4c:	f000 fb9d 	bl	802528a <memchr>
 8024b50:	2800      	cmp	r0, #0
 8024b52:	d001      	beq.n	8024b58 <_printf_i+0x1c0>
 8024b54:	1b40      	subs	r0, r0, r5
 8024b56:	6060      	str	r0, [r4, #4]
 8024b58:	6863      	ldr	r3, [r4, #4]
 8024b5a:	6123      	str	r3, [r4, #16]
 8024b5c:	2300      	movs	r3, #0
 8024b5e:	9a03      	ldr	r2, [sp, #12]
 8024b60:	7013      	strb	r3, [r2, #0]
 8024b62:	e7ac      	b.n	8024abe <_printf_i+0x126>
 8024b64:	002a      	movs	r2, r5
 8024b66:	6923      	ldr	r3, [r4, #16]
 8024b68:	9906      	ldr	r1, [sp, #24]
 8024b6a:	9805      	ldr	r0, [sp, #20]
 8024b6c:	9d07      	ldr	r5, [sp, #28]
 8024b6e:	47a8      	blx	r5
 8024b70:	3001      	adds	r0, #1
 8024b72:	d0ae      	beq.n	8024ad2 <_printf_i+0x13a>
 8024b74:	6823      	ldr	r3, [r4, #0]
 8024b76:	079b      	lsls	r3, r3, #30
 8024b78:	d415      	bmi.n	8024ba6 <_printf_i+0x20e>
 8024b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b7c:	68e0      	ldr	r0, [r4, #12]
 8024b7e:	4298      	cmp	r0, r3
 8024b80:	daa9      	bge.n	8024ad6 <_printf_i+0x13e>
 8024b82:	0018      	movs	r0, r3
 8024b84:	e7a7      	b.n	8024ad6 <_printf_i+0x13e>
 8024b86:	0022      	movs	r2, r4
 8024b88:	2301      	movs	r3, #1
 8024b8a:	9906      	ldr	r1, [sp, #24]
 8024b8c:	9805      	ldr	r0, [sp, #20]
 8024b8e:	9e07      	ldr	r6, [sp, #28]
 8024b90:	3219      	adds	r2, #25
 8024b92:	47b0      	blx	r6
 8024b94:	3001      	adds	r0, #1
 8024b96:	d09c      	beq.n	8024ad2 <_printf_i+0x13a>
 8024b98:	3501      	adds	r5, #1
 8024b9a:	68e3      	ldr	r3, [r4, #12]
 8024b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024b9e:	1a9b      	subs	r3, r3, r2
 8024ba0:	42ab      	cmp	r3, r5
 8024ba2:	dcf0      	bgt.n	8024b86 <_printf_i+0x1ee>
 8024ba4:	e7e9      	b.n	8024b7a <_printf_i+0x1e2>
 8024ba6:	2500      	movs	r5, #0
 8024ba8:	e7f7      	b.n	8024b9a <_printf_i+0x202>
 8024baa:	46c0      	nop			@ (mov r8, r8)
 8024bac:	0802dc5b 	.word	0x0802dc5b
 8024bb0:	0802dc6c 	.word	0x0802dc6c

08024bb4 <std>:
 8024bb4:	2300      	movs	r3, #0
 8024bb6:	b510      	push	{r4, lr}
 8024bb8:	0004      	movs	r4, r0
 8024bba:	6003      	str	r3, [r0, #0]
 8024bbc:	6043      	str	r3, [r0, #4]
 8024bbe:	6083      	str	r3, [r0, #8]
 8024bc0:	8181      	strh	r1, [r0, #12]
 8024bc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8024bc4:	81c2      	strh	r2, [r0, #14]
 8024bc6:	6103      	str	r3, [r0, #16]
 8024bc8:	6143      	str	r3, [r0, #20]
 8024bca:	6183      	str	r3, [r0, #24]
 8024bcc:	0019      	movs	r1, r3
 8024bce:	2208      	movs	r2, #8
 8024bd0:	305c      	adds	r0, #92	@ 0x5c
 8024bd2:	f000 fa89 	bl	80250e8 <memset>
 8024bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8024c04 <std+0x50>)
 8024bd8:	6224      	str	r4, [r4, #32]
 8024bda:	6263      	str	r3, [r4, #36]	@ 0x24
 8024bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8024c08 <std+0x54>)
 8024bde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024be0:	4b0a      	ldr	r3, [pc, #40]	@ (8024c0c <std+0x58>)
 8024be2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024be4:	4b0a      	ldr	r3, [pc, #40]	@ (8024c10 <std+0x5c>)
 8024be6:	6323      	str	r3, [r4, #48]	@ 0x30
 8024be8:	4b0a      	ldr	r3, [pc, #40]	@ (8024c14 <std+0x60>)
 8024bea:	429c      	cmp	r4, r3
 8024bec:	d005      	beq.n	8024bfa <std+0x46>
 8024bee:	4b0a      	ldr	r3, [pc, #40]	@ (8024c18 <std+0x64>)
 8024bf0:	429c      	cmp	r4, r3
 8024bf2:	d002      	beq.n	8024bfa <std+0x46>
 8024bf4:	4b09      	ldr	r3, [pc, #36]	@ (8024c1c <std+0x68>)
 8024bf6:	429c      	cmp	r4, r3
 8024bf8:	d103      	bne.n	8024c02 <std+0x4e>
 8024bfa:	0020      	movs	r0, r4
 8024bfc:	3058      	adds	r0, #88	@ 0x58
 8024bfe:	f000 fb41 	bl	8025284 <__retarget_lock_init_recursive>
 8024c02:	bd10      	pop	{r4, pc}
 8024c04:	08024e5d 	.word	0x08024e5d
 8024c08:	08024e85 	.word	0x08024e85
 8024c0c:	08024ebd 	.word	0x08024ebd
 8024c10:	08024ee9 	.word	0x08024ee9
 8024c14:	200034f4 	.word	0x200034f4
 8024c18:	2000355c 	.word	0x2000355c
 8024c1c:	200035c4 	.word	0x200035c4

08024c20 <stdio_exit_handler>:
 8024c20:	b510      	push	{r4, lr}
 8024c22:	4a03      	ldr	r2, [pc, #12]	@ (8024c30 <stdio_exit_handler+0x10>)
 8024c24:	4903      	ldr	r1, [pc, #12]	@ (8024c34 <stdio_exit_handler+0x14>)
 8024c26:	4804      	ldr	r0, [pc, #16]	@ (8024c38 <stdio_exit_handler+0x18>)
 8024c28:	f000 f86c 	bl	8024d04 <_fwalk_sglue>
 8024c2c:	bd10      	pop	{r4, pc}
 8024c2e:	46c0      	nop			@ (mov r8, r8)
 8024c30:	20000268 	.word	0x20000268
 8024c34:	080278a9 	.word	0x080278a9
 8024c38:	200003e4 	.word	0x200003e4

08024c3c <cleanup_stdio>:
 8024c3c:	6841      	ldr	r1, [r0, #4]
 8024c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8024c6c <cleanup_stdio+0x30>)
 8024c40:	b510      	push	{r4, lr}
 8024c42:	0004      	movs	r4, r0
 8024c44:	4299      	cmp	r1, r3
 8024c46:	d001      	beq.n	8024c4c <cleanup_stdio+0x10>
 8024c48:	f002 fe2e 	bl	80278a8 <_fflush_r>
 8024c4c:	68a1      	ldr	r1, [r4, #8]
 8024c4e:	4b08      	ldr	r3, [pc, #32]	@ (8024c70 <cleanup_stdio+0x34>)
 8024c50:	4299      	cmp	r1, r3
 8024c52:	d002      	beq.n	8024c5a <cleanup_stdio+0x1e>
 8024c54:	0020      	movs	r0, r4
 8024c56:	f002 fe27 	bl	80278a8 <_fflush_r>
 8024c5a:	68e1      	ldr	r1, [r4, #12]
 8024c5c:	4b05      	ldr	r3, [pc, #20]	@ (8024c74 <cleanup_stdio+0x38>)
 8024c5e:	4299      	cmp	r1, r3
 8024c60:	d002      	beq.n	8024c68 <cleanup_stdio+0x2c>
 8024c62:	0020      	movs	r0, r4
 8024c64:	f002 fe20 	bl	80278a8 <_fflush_r>
 8024c68:	bd10      	pop	{r4, pc}
 8024c6a:	46c0      	nop			@ (mov r8, r8)
 8024c6c:	200034f4 	.word	0x200034f4
 8024c70:	2000355c 	.word	0x2000355c
 8024c74:	200035c4 	.word	0x200035c4

08024c78 <global_stdio_init.part.0>:
 8024c78:	b510      	push	{r4, lr}
 8024c7a:	4b09      	ldr	r3, [pc, #36]	@ (8024ca0 <global_stdio_init.part.0+0x28>)
 8024c7c:	4a09      	ldr	r2, [pc, #36]	@ (8024ca4 <global_stdio_init.part.0+0x2c>)
 8024c7e:	2104      	movs	r1, #4
 8024c80:	601a      	str	r2, [r3, #0]
 8024c82:	4809      	ldr	r0, [pc, #36]	@ (8024ca8 <global_stdio_init.part.0+0x30>)
 8024c84:	2200      	movs	r2, #0
 8024c86:	f7ff ff95 	bl	8024bb4 <std>
 8024c8a:	2201      	movs	r2, #1
 8024c8c:	2109      	movs	r1, #9
 8024c8e:	4807      	ldr	r0, [pc, #28]	@ (8024cac <global_stdio_init.part.0+0x34>)
 8024c90:	f7ff ff90 	bl	8024bb4 <std>
 8024c94:	2202      	movs	r2, #2
 8024c96:	2112      	movs	r1, #18
 8024c98:	4805      	ldr	r0, [pc, #20]	@ (8024cb0 <global_stdio_init.part.0+0x38>)
 8024c9a:	f7ff ff8b 	bl	8024bb4 <std>
 8024c9e:	bd10      	pop	{r4, pc}
 8024ca0:	2000362c 	.word	0x2000362c
 8024ca4:	08024c21 	.word	0x08024c21
 8024ca8:	200034f4 	.word	0x200034f4
 8024cac:	2000355c 	.word	0x2000355c
 8024cb0:	200035c4 	.word	0x200035c4

08024cb4 <__sfp_lock_acquire>:
 8024cb4:	b510      	push	{r4, lr}
 8024cb6:	4802      	ldr	r0, [pc, #8]	@ (8024cc0 <__sfp_lock_acquire+0xc>)
 8024cb8:	f000 fae5 	bl	8025286 <__retarget_lock_acquire_recursive>
 8024cbc:	bd10      	pop	{r4, pc}
 8024cbe:	46c0      	nop			@ (mov r8, r8)
 8024cc0:	20003635 	.word	0x20003635

08024cc4 <__sfp_lock_release>:
 8024cc4:	b510      	push	{r4, lr}
 8024cc6:	4802      	ldr	r0, [pc, #8]	@ (8024cd0 <__sfp_lock_release+0xc>)
 8024cc8:	f000 fade 	bl	8025288 <__retarget_lock_release_recursive>
 8024ccc:	bd10      	pop	{r4, pc}
 8024cce:	46c0      	nop			@ (mov r8, r8)
 8024cd0:	20003635 	.word	0x20003635

08024cd4 <__sinit>:
 8024cd4:	b510      	push	{r4, lr}
 8024cd6:	0004      	movs	r4, r0
 8024cd8:	f7ff ffec 	bl	8024cb4 <__sfp_lock_acquire>
 8024cdc:	6a23      	ldr	r3, [r4, #32]
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	d002      	beq.n	8024ce8 <__sinit+0x14>
 8024ce2:	f7ff ffef 	bl	8024cc4 <__sfp_lock_release>
 8024ce6:	bd10      	pop	{r4, pc}
 8024ce8:	4b04      	ldr	r3, [pc, #16]	@ (8024cfc <__sinit+0x28>)
 8024cea:	6223      	str	r3, [r4, #32]
 8024cec:	4b04      	ldr	r3, [pc, #16]	@ (8024d00 <__sinit+0x2c>)
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	2b00      	cmp	r3, #0
 8024cf2:	d1f6      	bne.n	8024ce2 <__sinit+0xe>
 8024cf4:	f7ff ffc0 	bl	8024c78 <global_stdio_init.part.0>
 8024cf8:	e7f3      	b.n	8024ce2 <__sinit+0xe>
 8024cfa:	46c0      	nop			@ (mov r8, r8)
 8024cfc:	08024c3d 	.word	0x08024c3d
 8024d00:	2000362c 	.word	0x2000362c

08024d04 <_fwalk_sglue>:
 8024d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024d06:	0014      	movs	r4, r2
 8024d08:	2600      	movs	r6, #0
 8024d0a:	9000      	str	r0, [sp, #0]
 8024d0c:	9101      	str	r1, [sp, #4]
 8024d0e:	68a5      	ldr	r5, [r4, #8]
 8024d10:	6867      	ldr	r7, [r4, #4]
 8024d12:	3f01      	subs	r7, #1
 8024d14:	d504      	bpl.n	8024d20 <_fwalk_sglue+0x1c>
 8024d16:	6824      	ldr	r4, [r4, #0]
 8024d18:	2c00      	cmp	r4, #0
 8024d1a:	d1f8      	bne.n	8024d0e <_fwalk_sglue+0xa>
 8024d1c:	0030      	movs	r0, r6
 8024d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024d20:	89ab      	ldrh	r3, [r5, #12]
 8024d22:	2b01      	cmp	r3, #1
 8024d24:	d908      	bls.n	8024d38 <_fwalk_sglue+0x34>
 8024d26:	220e      	movs	r2, #14
 8024d28:	5eab      	ldrsh	r3, [r5, r2]
 8024d2a:	3301      	adds	r3, #1
 8024d2c:	d004      	beq.n	8024d38 <_fwalk_sglue+0x34>
 8024d2e:	0029      	movs	r1, r5
 8024d30:	9800      	ldr	r0, [sp, #0]
 8024d32:	9b01      	ldr	r3, [sp, #4]
 8024d34:	4798      	blx	r3
 8024d36:	4306      	orrs	r6, r0
 8024d38:	3568      	adds	r5, #104	@ 0x68
 8024d3a:	e7ea      	b.n	8024d12 <_fwalk_sglue+0xe>

08024d3c <iprintf>:
 8024d3c:	b40f      	push	{r0, r1, r2, r3}
 8024d3e:	b507      	push	{r0, r1, r2, lr}
 8024d40:	4905      	ldr	r1, [pc, #20]	@ (8024d58 <iprintf+0x1c>)
 8024d42:	ab04      	add	r3, sp, #16
 8024d44:	6808      	ldr	r0, [r1, #0]
 8024d46:	cb04      	ldmia	r3!, {r2}
 8024d48:	6881      	ldr	r1, [r0, #8]
 8024d4a:	9301      	str	r3, [sp, #4]
 8024d4c:	f002 fc0a 	bl	8027564 <_vfiprintf_r>
 8024d50:	b003      	add	sp, #12
 8024d52:	bc08      	pop	{r3}
 8024d54:	b004      	add	sp, #16
 8024d56:	4718      	bx	r3
 8024d58:	200003e0 	.word	0x200003e0

08024d5c <_puts_r>:
 8024d5c:	6a03      	ldr	r3, [r0, #32]
 8024d5e:	b570      	push	{r4, r5, r6, lr}
 8024d60:	0005      	movs	r5, r0
 8024d62:	000e      	movs	r6, r1
 8024d64:	6884      	ldr	r4, [r0, #8]
 8024d66:	2b00      	cmp	r3, #0
 8024d68:	d101      	bne.n	8024d6e <_puts_r+0x12>
 8024d6a:	f7ff ffb3 	bl	8024cd4 <__sinit>
 8024d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024d70:	07db      	lsls	r3, r3, #31
 8024d72:	d405      	bmi.n	8024d80 <_puts_r+0x24>
 8024d74:	89a3      	ldrh	r3, [r4, #12]
 8024d76:	059b      	lsls	r3, r3, #22
 8024d78:	d402      	bmi.n	8024d80 <_puts_r+0x24>
 8024d7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024d7c:	f000 fa83 	bl	8025286 <__retarget_lock_acquire_recursive>
 8024d80:	89a3      	ldrh	r3, [r4, #12]
 8024d82:	071b      	lsls	r3, r3, #28
 8024d84:	d502      	bpl.n	8024d8c <_puts_r+0x30>
 8024d86:	6923      	ldr	r3, [r4, #16]
 8024d88:	2b00      	cmp	r3, #0
 8024d8a:	d11f      	bne.n	8024dcc <_puts_r+0x70>
 8024d8c:	0021      	movs	r1, r4
 8024d8e:	0028      	movs	r0, r5
 8024d90:	f000 f94c 	bl	802502c <__swsetup_r>
 8024d94:	2800      	cmp	r0, #0
 8024d96:	d019      	beq.n	8024dcc <_puts_r+0x70>
 8024d98:	2501      	movs	r5, #1
 8024d9a:	426d      	negs	r5, r5
 8024d9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024d9e:	07db      	lsls	r3, r3, #31
 8024da0:	d405      	bmi.n	8024dae <_puts_r+0x52>
 8024da2:	89a3      	ldrh	r3, [r4, #12]
 8024da4:	059b      	lsls	r3, r3, #22
 8024da6:	d402      	bmi.n	8024dae <_puts_r+0x52>
 8024da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024daa:	f000 fa6d 	bl	8025288 <__retarget_lock_release_recursive>
 8024dae:	0028      	movs	r0, r5
 8024db0:	bd70      	pop	{r4, r5, r6, pc}
 8024db2:	3601      	adds	r6, #1
 8024db4:	60a3      	str	r3, [r4, #8]
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	da04      	bge.n	8024dc4 <_puts_r+0x68>
 8024dba:	69a2      	ldr	r2, [r4, #24]
 8024dbc:	429a      	cmp	r2, r3
 8024dbe:	dc16      	bgt.n	8024dee <_puts_r+0x92>
 8024dc0:	290a      	cmp	r1, #10
 8024dc2:	d014      	beq.n	8024dee <_puts_r+0x92>
 8024dc4:	6823      	ldr	r3, [r4, #0]
 8024dc6:	1c5a      	adds	r2, r3, #1
 8024dc8:	6022      	str	r2, [r4, #0]
 8024dca:	7019      	strb	r1, [r3, #0]
 8024dcc:	68a3      	ldr	r3, [r4, #8]
 8024dce:	7831      	ldrb	r1, [r6, #0]
 8024dd0:	3b01      	subs	r3, #1
 8024dd2:	2900      	cmp	r1, #0
 8024dd4:	d1ed      	bne.n	8024db2 <_puts_r+0x56>
 8024dd6:	60a3      	str	r3, [r4, #8]
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	da0f      	bge.n	8024dfc <_puts_r+0xa0>
 8024ddc:	0022      	movs	r2, r4
 8024dde:	0028      	movs	r0, r5
 8024de0:	310a      	adds	r1, #10
 8024de2:	f000 f8e1 	bl	8024fa8 <__swbuf_r>
 8024de6:	3001      	adds	r0, #1
 8024de8:	d0d6      	beq.n	8024d98 <_puts_r+0x3c>
 8024dea:	250a      	movs	r5, #10
 8024dec:	e7d6      	b.n	8024d9c <_puts_r+0x40>
 8024dee:	0022      	movs	r2, r4
 8024df0:	0028      	movs	r0, r5
 8024df2:	f000 f8d9 	bl	8024fa8 <__swbuf_r>
 8024df6:	3001      	adds	r0, #1
 8024df8:	d1e8      	bne.n	8024dcc <_puts_r+0x70>
 8024dfa:	e7cd      	b.n	8024d98 <_puts_r+0x3c>
 8024dfc:	6823      	ldr	r3, [r4, #0]
 8024dfe:	1c5a      	adds	r2, r3, #1
 8024e00:	6022      	str	r2, [r4, #0]
 8024e02:	220a      	movs	r2, #10
 8024e04:	701a      	strb	r2, [r3, #0]
 8024e06:	e7f0      	b.n	8024dea <_puts_r+0x8e>

08024e08 <puts>:
 8024e08:	b510      	push	{r4, lr}
 8024e0a:	4b03      	ldr	r3, [pc, #12]	@ (8024e18 <puts+0x10>)
 8024e0c:	0001      	movs	r1, r0
 8024e0e:	6818      	ldr	r0, [r3, #0]
 8024e10:	f7ff ffa4 	bl	8024d5c <_puts_r>
 8024e14:	bd10      	pop	{r4, pc}
 8024e16:	46c0      	nop			@ (mov r8, r8)
 8024e18:	200003e0 	.word	0x200003e0

08024e1c <siprintf>:
 8024e1c:	b40e      	push	{r1, r2, r3}
 8024e1e:	b500      	push	{lr}
 8024e20:	490b      	ldr	r1, [pc, #44]	@ (8024e50 <siprintf+0x34>)
 8024e22:	b09c      	sub	sp, #112	@ 0x70
 8024e24:	ab1d      	add	r3, sp, #116	@ 0x74
 8024e26:	9002      	str	r0, [sp, #8]
 8024e28:	9006      	str	r0, [sp, #24]
 8024e2a:	9107      	str	r1, [sp, #28]
 8024e2c:	9104      	str	r1, [sp, #16]
 8024e2e:	4809      	ldr	r0, [pc, #36]	@ (8024e54 <siprintf+0x38>)
 8024e30:	4909      	ldr	r1, [pc, #36]	@ (8024e58 <siprintf+0x3c>)
 8024e32:	cb04      	ldmia	r3!, {r2}
 8024e34:	9105      	str	r1, [sp, #20]
 8024e36:	6800      	ldr	r0, [r0, #0]
 8024e38:	a902      	add	r1, sp, #8
 8024e3a:	9301      	str	r3, [sp, #4]
 8024e3c:	f002 fa6c 	bl	8027318 <_svfiprintf_r>
 8024e40:	2200      	movs	r2, #0
 8024e42:	9b02      	ldr	r3, [sp, #8]
 8024e44:	701a      	strb	r2, [r3, #0]
 8024e46:	b01c      	add	sp, #112	@ 0x70
 8024e48:	bc08      	pop	{r3}
 8024e4a:	b003      	add	sp, #12
 8024e4c:	4718      	bx	r3
 8024e4e:	46c0      	nop			@ (mov r8, r8)
 8024e50:	7fffffff 	.word	0x7fffffff
 8024e54:	200003e0 	.word	0x200003e0
 8024e58:	ffff0208 	.word	0xffff0208

08024e5c <__sread>:
 8024e5c:	b570      	push	{r4, r5, r6, lr}
 8024e5e:	000c      	movs	r4, r1
 8024e60:	250e      	movs	r5, #14
 8024e62:	5f49      	ldrsh	r1, [r1, r5]
 8024e64:	f000 f9bc 	bl	80251e0 <_read_r>
 8024e68:	2800      	cmp	r0, #0
 8024e6a:	db03      	blt.n	8024e74 <__sread+0x18>
 8024e6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8024e6e:	181b      	adds	r3, r3, r0
 8024e70:	6563      	str	r3, [r4, #84]	@ 0x54
 8024e72:	bd70      	pop	{r4, r5, r6, pc}
 8024e74:	89a3      	ldrh	r3, [r4, #12]
 8024e76:	4a02      	ldr	r2, [pc, #8]	@ (8024e80 <__sread+0x24>)
 8024e78:	4013      	ands	r3, r2
 8024e7a:	81a3      	strh	r3, [r4, #12]
 8024e7c:	e7f9      	b.n	8024e72 <__sread+0x16>
 8024e7e:	46c0      	nop			@ (mov r8, r8)
 8024e80:	ffffefff 	.word	0xffffefff

08024e84 <__swrite>:
 8024e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e86:	001f      	movs	r7, r3
 8024e88:	898b      	ldrh	r3, [r1, #12]
 8024e8a:	0005      	movs	r5, r0
 8024e8c:	000c      	movs	r4, r1
 8024e8e:	0016      	movs	r6, r2
 8024e90:	05db      	lsls	r3, r3, #23
 8024e92:	d505      	bpl.n	8024ea0 <__swrite+0x1c>
 8024e94:	230e      	movs	r3, #14
 8024e96:	5ec9      	ldrsh	r1, [r1, r3]
 8024e98:	2200      	movs	r2, #0
 8024e9a:	2302      	movs	r3, #2
 8024e9c:	f000 f98c 	bl	80251b8 <_lseek_r>
 8024ea0:	89a3      	ldrh	r3, [r4, #12]
 8024ea2:	4a05      	ldr	r2, [pc, #20]	@ (8024eb8 <__swrite+0x34>)
 8024ea4:	0028      	movs	r0, r5
 8024ea6:	4013      	ands	r3, r2
 8024ea8:	81a3      	strh	r3, [r4, #12]
 8024eaa:	0032      	movs	r2, r6
 8024eac:	230e      	movs	r3, #14
 8024eae:	5ee1      	ldrsh	r1, [r4, r3]
 8024eb0:	003b      	movs	r3, r7
 8024eb2:	f000 f9a9 	bl	8025208 <_write_r>
 8024eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024eb8:	ffffefff 	.word	0xffffefff

08024ebc <__sseek>:
 8024ebc:	b570      	push	{r4, r5, r6, lr}
 8024ebe:	000c      	movs	r4, r1
 8024ec0:	250e      	movs	r5, #14
 8024ec2:	5f49      	ldrsh	r1, [r1, r5]
 8024ec4:	f000 f978 	bl	80251b8 <_lseek_r>
 8024ec8:	89a3      	ldrh	r3, [r4, #12]
 8024eca:	1c42      	adds	r2, r0, #1
 8024ecc:	d103      	bne.n	8024ed6 <__sseek+0x1a>
 8024ece:	4a05      	ldr	r2, [pc, #20]	@ (8024ee4 <__sseek+0x28>)
 8024ed0:	4013      	ands	r3, r2
 8024ed2:	81a3      	strh	r3, [r4, #12]
 8024ed4:	bd70      	pop	{r4, r5, r6, pc}
 8024ed6:	2280      	movs	r2, #128	@ 0x80
 8024ed8:	0152      	lsls	r2, r2, #5
 8024eda:	4313      	orrs	r3, r2
 8024edc:	81a3      	strh	r3, [r4, #12]
 8024ede:	6560      	str	r0, [r4, #84]	@ 0x54
 8024ee0:	e7f8      	b.n	8024ed4 <__sseek+0x18>
 8024ee2:	46c0      	nop			@ (mov r8, r8)
 8024ee4:	ffffefff 	.word	0xffffefff

08024ee8 <__sclose>:
 8024ee8:	b510      	push	{r4, lr}
 8024eea:	230e      	movs	r3, #14
 8024eec:	5ec9      	ldrsh	r1, [r1, r3]
 8024eee:	f000 f951 	bl	8025194 <_close_r>
 8024ef2:	bd10      	pop	{r4, pc}

08024ef4 <_vsniprintf_r>:
 8024ef4:	b530      	push	{r4, r5, lr}
 8024ef6:	0014      	movs	r4, r2
 8024ef8:	0005      	movs	r5, r0
 8024efa:	001a      	movs	r2, r3
 8024efc:	b09b      	sub	sp, #108	@ 0x6c
 8024efe:	2c00      	cmp	r4, #0
 8024f00:	da05      	bge.n	8024f0e <_vsniprintf_r+0x1a>
 8024f02:	238b      	movs	r3, #139	@ 0x8b
 8024f04:	6003      	str	r3, [r0, #0]
 8024f06:	2001      	movs	r0, #1
 8024f08:	4240      	negs	r0, r0
 8024f0a:	b01b      	add	sp, #108	@ 0x6c
 8024f0c:	bd30      	pop	{r4, r5, pc}
 8024f0e:	2382      	movs	r3, #130	@ 0x82
 8024f10:	4668      	mov	r0, sp
 8024f12:	009b      	lsls	r3, r3, #2
 8024f14:	8183      	strh	r3, [r0, #12]
 8024f16:	2300      	movs	r3, #0
 8024f18:	9100      	str	r1, [sp, #0]
 8024f1a:	9104      	str	r1, [sp, #16]
 8024f1c:	429c      	cmp	r4, r3
 8024f1e:	d000      	beq.n	8024f22 <_vsniprintf_r+0x2e>
 8024f20:	1e63      	subs	r3, r4, #1
 8024f22:	9302      	str	r3, [sp, #8]
 8024f24:	9305      	str	r3, [sp, #20]
 8024f26:	2301      	movs	r3, #1
 8024f28:	4669      	mov	r1, sp
 8024f2a:	425b      	negs	r3, r3
 8024f2c:	81cb      	strh	r3, [r1, #14]
 8024f2e:	0028      	movs	r0, r5
 8024f30:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8024f32:	f002 f9f1 	bl	8027318 <_svfiprintf_r>
 8024f36:	1c43      	adds	r3, r0, #1
 8024f38:	da01      	bge.n	8024f3e <_vsniprintf_r+0x4a>
 8024f3a:	238b      	movs	r3, #139	@ 0x8b
 8024f3c:	602b      	str	r3, [r5, #0]
 8024f3e:	2c00      	cmp	r4, #0
 8024f40:	d0e3      	beq.n	8024f0a <_vsniprintf_r+0x16>
 8024f42:	2200      	movs	r2, #0
 8024f44:	9b00      	ldr	r3, [sp, #0]
 8024f46:	701a      	strb	r2, [r3, #0]
 8024f48:	e7df      	b.n	8024f0a <_vsniprintf_r+0x16>
	...

08024f4c <vsniprintf>:
 8024f4c:	b513      	push	{r0, r1, r4, lr}
 8024f4e:	4c04      	ldr	r4, [pc, #16]	@ (8024f60 <vsniprintf+0x14>)
 8024f50:	9300      	str	r3, [sp, #0]
 8024f52:	0013      	movs	r3, r2
 8024f54:	000a      	movs	r2, r1
 8024f56:	0001      	movs	r1, r0
 8024f58:	6820      	ldr	r0, [r4, #0]
 8024f5a:	f7ff ffcb 	bl	8024ef4 <_vsniprintf_r>
 8024f5e:	bd16      	pop	{r1, r2, r4, pc}
 8024f60:	200003e0 	.word	0x200003e0

08024f64 <_vsiprintf_r>:
 8024f64:	b500      	push	{lr}
 8024f66:	b09b      	sub	sp, #108	@ 0x6c
 8024f68:	9100      	str	r1, [sp, #0]
 8024f6a:	9104      	str	r1, [sp, #16]
 8024f6c:	4906      	ldr	r1, [pc, #24]	@ (8024f88 <_vsiprintf_r+0x24>)
 8024f6e:	9105      	str	r1, [sp, #20]
 8024f70:	9102      	str	r1, [sp, #8]
 8024f72:	4906      	ldr	r1, [pc, #24]	@ (8024f8c <_vsiprintf_r+0x28>)
 8024f74:	9103      	str	r1, [sp, #12]
 8024f76:	4669      	mov	r1, sp
 8024f78:	f002 f9ce 	bl	8027318 <_svfiprintf_r>
 8024f7c:	2200      	movs	r2, #0
 8024f7e:	9b00      	ldr	r3, [sp, #0]
 8024f80:	701a      	strb	r2, [r3, #0]
 8024f82:	b01b      	add	sp, #108	@ 0x6c
 8024f84:	bd00      	pop	{pc}
 8024f86:	46c0      	nop			@ (mov r8, r8)
 8024f88:	7fffffff 	.word	0x7fffffff
 8024f8c:	ffff0208 	.word	0xffff0208

08024f90 <vsiprintf>:
 8024f90:	b510      	push	{r4, lr}
 8024f92:	4c04      	ldr	r4, [pc, #16]	@ (8024fa4 <vsiprintf+0x14>)
 8024f94:	0013      	movs	r3, r2
 8024f96:	000a      	movs	r2, r1
 8024f98:	0001      	movs	r1, r0
 8024f9a:	6820      	ldr	r0, [r4, #0]
 8024f9c:	f7ff ffe2 	bl	8024f64 <_vsiprintf_r>
 8024fa0:	bd10      	pop	{r4, pc}
 8024fa2:	46c0      	nop			@ (mov r8, r8)
 8024fa4:	200003e0 	.word	0x200003e0

08024fa8 <__swbuf_r>:
 8024fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024faa:	0006      	movs	r6, r0
 8024fac:	000d      	movs	r5, r1
 8024fae:	0014      	movs	r4, r2
 8024fb0:	2800      	cmp	r0, #0
 8024fb2:	d004      	beq.n	8024fbe <__swbuf_r+0x16>
 8024fb4:	6a03      	ldr	r3, [r0, #32]
 8024fb6:	2b00      	cmp	r3, #0
 8024fb8:	d101      	bne.n	8024fbe <__swbuf_r+0x16>
 8024fba:	f7ff fe8b 	bl	8024cd4 <__sinit>
 8024fbe:	69a3      	ldr	r3, [r4, #24]
 8024fc0:	60a3      	str	r3, [r4, #8]
 8024fc2:	89a3      	ldrh	r3, [r4, #12]
 8024fc4:	071b      	lsls	r3, r3, #28
 8024fc6:	d502      	bpl.n	8024fce <__swbuf_r+0x26>
 8024fc8:	6923      	ldr	r3, [r4, #16]
 8024fca:	2b00      	cmp	r3, #0
 8024fcc:	d109      	bne.n	8024fe2 <__swbuf_r+0x3a>
 8024fce:	0021      	movs	r1, r4
 8024fd0:	0030      	movs	r0, r6
 8024fd2:	f000 f82b 	bl	802502c <__swsetup_r>
 8024fd6:	2800      	cmp	r0, #0
 8024fd8:	d003      	beq.n	8024fe2 <__swbuf_r+0x3a>
 8024fda:	2501      	movs	r5, #1
 8024fdc:	426d      	negs	r5, r5
 8024fde:	0028      	movs	r0, r5
 8024fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024fe2:	6923      	ldr	r3, [r4, #16]
 8024fe4:	6820      	ldr	r0, [r4, #0]
 8024fe6:	b2ef      	uxtb	r7, r5
 8024fe8:	1ac0      	subs	r0, r0, r3
 8024fea:	6963      	ldr	r3, [r4, #20]
 8024fec:	b2ed      	uxtb	r5, r5
 8024fee:	4283      	cmp	r3, r0
 8024ff0:	dc05      	bgt.n	8024ffe <__swbuf_r+0x56>
 8024ff2:	0021      	movs	r1, r4
 8024ff4:	0030      	movs	r0, r6
 8024ff6:	f002 fc57 	bl	80278a8 <_fflush_r>
 8024ffa:	2800      	cmp	r0, #0
 8024ffc:	d1ed      	bne.n	8024fda <__swbuf_r+0x32>
 8024ffe:	68a3      	ldr	r3, [r4, #8]
 8025000:	3001      	adds	r0, #1
 8025002:	3b01      	subs	r3, #1
 8025004:	60a3      	str	r3, [r4, #8]
 8025006:	6823      	ldr	r3, [r4, #0]
 8025008:	1c5a      	adds	r2, r3, #1
 802500a:	6022      	str	r2, [r4, #0]
 802500c:	701f      	strb	r7, [r3, #0]
 802500e:	6963      	ldr	r3, [r4, #20]
 8025010:	4283      	cmp	r3, r0
 8025012:	d004      	beq.n	802501e <__swbuf_r+0x76>
 8025014:	89a3      	ldrh	r3, [r4, #12]
 8025016:	07db      	lsls	r3, r3, #31
 8025018:	d5e1      	bpl.n	8024fde <__swbuf_r+0x36>
 802501a:	2d0a      	cmp	r5, #10
 802501c:	d1df      	bne.n	8024fde <__swbuf_r+0x36>
 802501e:	0021      	movs	r1, r4
 8025020:	0030      	movs	r0, r6
 8025022:	f002 fc41 	bl	80278a8 <_fflush_r>
 8025026:	2800      	cmp	r0, #0
 8025028:	d0d9      	beq.n	8024fde <__swbuf_r+0x36>
 802502a:	e7d6      	b.n	8024fda <__swbuf_r+0x32>

0802502c <__swsetup_r>:
 802502c:	4b2d      	ldr	r3, [pc, #180]	@ (80250e4 <__swsetup_r+0xb8>)
 802502e:	b570      	push	{r4, r5, r6, lr}
 8025030:	0005      	movs	r5, r0
 8025032:	6818      	ldr	r0, [r3, #0]
 8025034:	000c      	movs	r4, r1
 8025036:	2800      	cmp	r0, #0
 8025038:	d004      	beq.n	8025044 <__swsetup_r+0x18>
 802503a:	6a03      	ldr	r3, [r0, #32]
 802503c:	2b00      	cmp	r3, #0
 802503e:	d101      	bne.n	8025044 <__swsetup_r+0x18>
 8025040:	f7ff fe48 	bl	8024cd4 <__sinit>
 8025044:	230c      	movs	r3, #12
 8025046:	5ee2      	ldrsh	r2, [r4, r3]
 8025048:	0713      	lsls	r3, r2, #28
 802504a:	d423      	bmi.n	8025094 <__swsetup_r+0x68>
 802504c:	06d3      	lsls	r3, r2, #27
 802504e:	d407      	bmi.n	8025060 <__swsetup_r+0x34>
 8025050:	2309      	movs	r3, #9
 8025052:	602b      	str	r3, [r5, #0]
 8025054:	2340      	movs	r3, #64	@ 0x40
 8025056:	2001      	movs	r0, #1
 8025058:	4313      	orrs	r3, r2
 802505a:	81a3      	strh	r3, [r4, #12]
 802505c:	4240      	negs	r0, r0
 802505e:	e03a      	b.n	80250d6 <__swsetup_r+0xaa>
 8025060:	0752      	lsls	r2, r2, #29
 8025062:	d513      	bpl.n	802508c <__swsetup_r+0x60>
 8025064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025066:	2900      	cmp	r1, #0
 8025068:	d008      	beq.n	802507c <__swsetup_r+0x50>
 802506a:	0023      	movs	r3, r4
 802506c:	3344      	adds	r3, #68	@ 0x44
 802506e:	4299      	cmp	r1, r3
 8025070:	d002      	beq.n	8025078 <__swsetup_r+0x4c>
 8025072:	0028      	movs	r0, r5
 8025074:	f000 ffa6 	bl	8025fc4 <_free_r>
 8025078:	2300      	movs	r3, #0
 802507a:	6363      	str	r3, [r4, #52]	@ 0x34
 802507c:	2224      	movs	r2, #36	@ 0x24
 802507e:	89a3      	ldrh	r3, [r4, #12]
 8025080:	4393      	bics	r3, r2
 8025082:	81a3      	strh	r3, [r4, #12]
 8025084:	2300      	movs	r3, #0
 8025086:	6063      	str	r3, [r4, #4]
 8025088:	6923      	ldr	r3, [r4, #16]
 802508a:	6023      	str	r3, [r4, #0]
 802508c:	2308      	movs	r3, #8
 802508e:	89a2      	ldrh	r2, [r4, #12]
 8025090:	4313      	orrs	r3, r2
 8025092:	81a3      	strh	r3, [r4, #12]
 8025094:	6923      	ldr	r3, [r4, #16]
 8025096:	2b00      	cmp	r3, #0
 8025098:	d10b      	bne.n	80250b2 <__swsetup_r+0x86>
 802509a:	21a0      	movs	r1, #160	@ 0xa0
 802509c:	2280      	movs	r2, #128	@ 0x80
 802509e:	89a3      	ldrh	r3, [r4, #12]
 80250a0:	0089      	lsls	r1, r1, #2
 80250a2:	0092      	lsls	r2, r2, #2
 80250a4:	400b      	ands	r3, r1
 80250a6:	4293      	cmp	r3, r2
 80250a8:	d003      	beq.n	80250b2 <__swsetup_r+0x86>
 80250aa:	0021      	movs	r1, r4
 80250ac:	0028      	movs	r0, r5
 80250ae:	f002 fc51 	bl	8027954 <__smakebuf_r>
 80250b2:	230c      	movs	r3, #12
 80250b4:	5ee2      	ldrsh	r2, [r4, r3]
 80250b6:	2101      	movs	r1, #1
 80250b8:	0013      	movs	r3, r2
 80250ba:	400b      	ands	r3, r1
 80250bc:	420a      	tst	r2, r1
 80250be:	d00b      	beq.n	80250d8 <__swsetup_r+0xac>
 80250c0:	2300      	movs	r3, #0
 80250c2:	60a3      	str	r3, [r4, #8]
 80250c4:	6963      	ldr	r3, [r4, #20]
 80250c6:	425b      	negs	r3, r3
 80250c8:	61a3      	str	r3, [r4, #24]
 80250ca:	2000      	movs	r0, #0
 80250cc:	6923      	ldr	r3, [r4, #16]
 80250ce:	4283      	cmp	r3, r0
 80250d0:	d101      	bne.n	80250d6 <__swsetup_r+0xaa>
 80250d2:	0613      	lsls	r3, r2, #24
 80250d4:	d4be      	bmi.n	8025054 <__swsetup_r+0x28>
 80250d6:	bd70      	pop	{r4, r5, r6, pc}
 80250d8:	0791      	lsls	r1, r2, #30
 80250da:	d400      	bmi.n	80250de <__swsetup_r+0xb2>
 80250dc:	6963      	ldr	r3, [r4, #20]
 80250de:	60a3      	str	r3, [r4, #8]
 80250e0:	e7f3      	b.n	80250ca <__swsetup_r+0x9e>
 80250e2:	46c0      	nop			@ (mov r8, r8)
 80250e4:	200003e0 	.word	0x200003e0

080250e8 <memset>:
 80250e8:	0003      	movs	r3, r0
 80250ea:	1882      	adds	r2, r0, r2
 80250ec:	4293      	cmp	r3, r2
 80250ee:	d100      	bne.n	80250f2 <memset+0xa>
 80250f0:	4770      	bx	lr
 80250f2:	7019      	strb	r1, [r3, #0]
 80250f4:	3301      	adds	r3, #1
 80250f6:	e7f9      	b.n	80250ec <memset+0x4>

080250f8 <strchr>:
 80250f8:	b2c9      	uxtb	r1, r1
 80250fa:	7803      	ldrb	r3, [r0, #0]
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d004      	beq.n	802510a <strchr+0x12>
 8025100:	428b      	cmp	r3, r1
 8025102:	d100      	bne.n	8025106 <strchr+0xe>
 8025104:	4770      	bx	lr
 8025106:	3001      	adds	r0, #1
 8025108:	e7f7      	b.n	80250fa <strchr+0x2>
 802510a:	424b      	negs	r3, r1
 802510c:	4159      	adcs	r1, r3
 802510e:	4249      	negs	r1, r1
 8025110:	4008      	ands	r0, r1
 8025112:	e7f7      	b.n	8025104 <strchr+0xc>

08025114 <strncmp>:
 8025114:	b530      	push	{r4, r5, lr}
 8025116:	0005      	movs	r5, r0
 8025118:	1e10      	subs	r0, r2, #0
 802511a:	d00b      	beq.n	8025134 <strncmp+0x20>
 802511c:	2400      	movs	r4, #0
 802511e:	3a01      	subs	r2, #1
 8025120:	5d2b      	ldrb	r3, [r5, r4]
 8025122:	5d08      	ldrb	r0, [r1, r4]
 8025124:	4283      	cmp	r3, r0
 8025126:	d104      	bne.n	8025132 <strncmp+0x1e>
 8025128:	42a2      	cmp	r2, r4
 802512a:	d002      	beq.n	8025132 <strncmp+0x1e>
 802512c:	3401      	adds	r4, #1
 802512e:	2b00      	cmp	r3, #0
 8025130:	d1f6      	bne.n	8025120 <strncmp+0xc>
 8025132:	1a18      	subs	r0, r3, r0
 8025134:	bd30      	pop	{r4, r5, pc}

08025136 <strncpy>:
 8025136:	0003      	movs	r3, r0
 8025138:	b530      	push	{r4, r5, lr}
 802513a:	001d      	movs	r5, r3
 802513c:	2a00      	cmp	r2, #0
 802513e:	d006      	beq.n	802514e <strncpy+0x18>
 8025140:	780c      	ldrb	r4, [r1, #0]
 8025142:	3a01      	subs	r2, #1
 8025144:	3301      	adds	r3, #1
 8025146:	702c      	strb	r4, [r5, #0]
 8025148:	3101      	adds	r1, #1
 802514a:	2c00      	cmp	r4, #0
 802514c:	d1f5      	bne.n	802513a <strncpy+0x4>
 802514e:	2100      	movs	r1, #0
 8025150:	189a      	adds	r2, r3, r2
 8025152:	4293      	cmp	r3, r2
 8025154:	d100      	bne.n	8025158 <strncpy+0x22>
 8025156:	bd30      	pop	{r4, r5, pc}
 8025158:	7019      	strb	r1, [r3, #0]
 802515a:	3301      	adds	r3, #1
 802515c:	e7f9      	b.n	8025152 <strncpy+0x1c>

0802515e <strstr>:
 802515e:	780a      	ldrb	r2, [r1, #0]
 8025160:	b530      	push	{r4, r5, lr}
 8025162:	2a00      	cmp	r2, #0
 8025164:	d10c      	bne.n	8025180 <strstr+0x22>
 8025166:	bd30      	pop	{r4, r5, pc}
 8025168:	429a      	cmp	r2, r3
 802516a:	d108      	bne.n	802517e <strstr+0x20>
 802516c:	2301      	movs	r3, #1
 802516e:	5ccc      	ldrb	r4, [r1, r3]
 8025170:	2c00      	cmp	r4, #0
 8025172:	d0f8      	beq.n	8025166 <strstr+0x8>
 8025174:	5cc5      	ldrb	r5, [r0, r3]
 8025176:	42a5      	cmp	r5, r4
 8025178:	d101      	bne.n	802517e <strstr+0x20>
 802517a:	3301      	adds	r3, #1
 802517c:	e7f7      	b.n	802516e <strstr+0x10>
 802517e:	3001      	adds	r0, #1
 8025180:	7803      	ldrb	r3, [r0, #0]
 8025182:	2b00      	cmp	r3, #0
 8025184:	d1f0      	bne.n	8025168 <strstr+0xa>
 8025186:	0018      	movs	r0, r3
 8025188:	e7ed      	b.n	8025166 <strstr+0x8>
	...

0802518c <_localeconv_r>:
 802518c:	4800      	ldr	r0, [pc, #0]	@ (8025190 <_localeconv_r+0x4>)
 802518e:	4770      	bx	lr
 8025190:	20000364 	.word	0x20000364

08025194 <_close_r>:
 8025194:	2300      	movs	r3, #0
 8025196:	b570      	push	{r4, r5, r6, lr}
 8025198:	4d06      	ldr	r5, [pc, #24]	@ (80251b4 <_close_r+0x20>)
 802519a:	0004      	movs	r4, r0
 802519c:	0008      	movs	r0, r1
 802519e:	602b      	str	r3, [r5, #0]
 80251a0:	f7ed f8f4 	bl	801238c <_close>
 80251a4:	1c43      	adds	r3, r0, #1
 80251a6:	d103      	bne.n	80251b0 <_close_r+0x1c>
 80251a8:	682b      	ldr	r3, [r5, #0]
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d000      	beq.n	80251b0 <_close_r+0x1c>
 80251ae:	6023      	str	r3, [r4, #0]
 80251b0:	bd70      	pop	{r4, r5, r6, pc}
 80251b2:	46c0      	nop			@ (mov r8, r8)
 80251b4:	20003630 	.word	0x20003630

080251b8 <_lseek_r>:
 80251b8:	b570      	push	{r4, r5, r6, lr}
 80251ba:	0004      	movs	r4, r0
 80251bc:	0008      	movs	r0, r1
 80251be:	0011      	movs	r1, r2
 80251c0:	001a      	movs	r2, r3
 80251c2:	2300      	movs	r3, #0
 80251c4:	4d05      	ldr	r5, [pc, #20]	@ (80251dc <_lseek_r+0x24>)
 80251c6:	602b      	str	r3, [r5, #0]
 80251c8:	f7ed f901 	bl	80123ce <_lseek>
 80251cc:	1c43      	adds	r3, r0, #1
 80251ce:	d103      	bne.n	80251d8 <_lseek_r+0x20>
 80251d0:	682b      	ldr	r3, [r5, #0]
 80251d2:	2b00      	cmp	r3, #0
 80251d4:	d000      	beq.n	80251d8 <_lseek_r+0x20>
 80251d6:	6023      	str	r3, [r4, #0]
 80251d8:	bd70      	pop	{r4, r5, r6, pc}
 80251da:	46c0      	nop			@ (mov r8, r8)
 80251dc:	20003630 	.word	0x20003630

080251e0 <_read_r>:
 80251e0:	b570      	push	{r4, r5, r6, lr}
 80251e2:	0004      	movs	r4, r0
 80251e4:	0008      	movs	r0, r1
 80251e6:	0011      	movs	r1, r2
 80251e8:	001a      	movs	r2, r3
 80251ea:	2300      	movs	r3, #0
 80251ec:	4d05      	ldr	r5, [pc, #20]	@ (8025204 <_read_r+0x24>)
 80251ee:	602b      	str	r3, [r5, #0]
 80251f0:	f7ed f8af 	bl	8012352 <_read>
 80251f4:	1c43      	adds	r3, r0, #1
 80251f6:	d103      	bne.n	8025200 <_read_r+0x20>
 80251f8:	682b      	ldr	r3, [r5, #0]
 80251fa:	2b00      	cmp	r3, #0
 80251fc:	d000      	beq.n	8025200 <_read_r+0x20>
 80251fe:	6023      	str	r3, [r4, #0]
 8025200:	bd70      	pop	{r4, r5, r6, pc}
 8025202:	46c0      	nop			@ (mov r8, r8)
 8025204:	20003630 	.word	0x20003630

08025208 <_write_r>:
 8025208:	b570      	push	{r4, r5, r6, lr}
 802520a:	0004      	movs	r4, r0
 802520c:	0008      	movs	r0, r1
 802520e:	0011      	movs	r1, r2
 8025210:	001a      	movs	r2, r3
 8025212:	2300      	movs	r3, #0
 8025214:	4d05      	ldr	r5, [pc, #20]	@ (802522c <_write_r+0x24>)
 8025216:	602b      	str	r3, [r5, #0]
 8025218:	f7ed fd6c 	bl	8012cf4 <_write>
 802521c:	1c43      	adds	r3, r0, #1
 802521e:	d103      	bne.n	8025228 <_write_r+0x20>
 8025220:	682b      	ldr	r3, [r5, #0]
 8025222:	2b00      	cmp	r3, #0
 8025224:	d000      	beq.n	8025228 <_write_r+0x20>
 8025226:	6023      	str	r3, [r4, #0]
 8025228:	bd70      	pop	{r4, r5, r6, pc}
 802522a:	46c0      	nop			@ (mov r8, r8)
 802522c:	20003630 	.word	0x20003630

08025230 <__errno>:
 8025230:	4b01      	ldr	r3, [pc, #4]	@ (8025238 <__errno+0x8>)
 8025232:	6818      	ldr	r0, [r3, #0]
 8025234:	4770      	bx	lr
 8025236:	46c0      	nop			@ (mov r8, r8)
 8025238:	200003e0 	.word	0x200003e0

0802523c <__libc_init_array>:
 802523c:	b570      	push	{r4, r5, r6, lr}
 802523e:	2600      	movs	r6, #0
 8025240:	4c0c      	ldr	r4, [pc, #48]	@ (8025274 <__libc_init_array+0x38>)
 8025242:	4d0d      	ldr	r5, [pc, #52]	@ (8025278 <__libc_init_array+0x3c>)
 8025244:	1b64      	subs	r4, r4, r5
 8025246:	10a4      	asrs	r4, r4, #2
 8025248:	42a6      	cmp	r6, r4
 802524a:	d109      	bne.n	8025260 <__libc_init_array+0x24>
 802524c:	2600      	movs	r6, #0
 802524e:	f003 fff9 	bl	8029244 <_init>
 8025252:	4c0a      	ldr	r4, [pc, #40]	@ (802527c <__libc_init_array+0x40>)
 8025254:	4d0a      	ldr	r5, [pc, #40]	@ (8025280 <__libc_init_array+0x44>)
 8025256:	1b64      	subs	r4, r4, r5
 8025258:	10a4      	asrs	r4, r4, #2
 802525a:	42a6      	cmp	r6, r4
 802525c:	d105      	bne.n	802526a <__libc_init_array+0x2e>
 802525e:	bd70      	pop	{r4, r5, r6, pc}
 8025260:	00b3      	lsls	r3, r6, #2
 8025262:	58eb      	ldr	r3, [r5, r3]
 8025264:	4798      	blx	r3
 8025266:	3601      	adds	r6, #1
 8025268:	e7ee      	b.n	8025248 <__libc_init_array+0xc>
 802526a:	00b3      	lsls	r3, r6, #2
 802526c:	58eb      	ldr	r3, [r5, r3]
 802526e:	4798      	blx	r3
 8025270:	3601      	adds	r6, #1
 8025272:	e7f2      	b.n	802525a <__libc_init_array+0x1e>
 8025274:	0802df68 	.word	0x0802df68
 8025278:	0802df68 	.word	0x0802df68
 802527c:	0802df6c 	.word	0x0802df6c
 8025280:	0802df68 	.word	0x0802df68

08025284 <__retarget_lock_init_recursive>:
 8025284:	4770      	bx	lr

08025286 <__retarget_lock_acquire_recursive>:
 8025286:	4770      	bx	lr

08025288 <__retarget_lock_release_recursive>:
 8025288:	4770      	bx	lr

0802528a <memchr>:
 802528a:	b2c9      	uxtb	r1, r1
 802528c:	1882      	adds	r2, r0, r2
 802528e:	4290      	cmp	r0, r2
 8025290:	d101      	bne.n	8025296 <memchr+0xc>
 8025292:	2000      	movs	r0, #0
 8025294:	4770      	bx	lr
 8025296:	7803      	ldrb	r3, [r0, #0]
 8025298:	428b      	cmp	r3, r1
 802529a:	d0fb      	beq.n	8025294 <memchr+0xa>
 802529c:	3001      	adds	r0, #1
 802529e:	e7f6      	b.n	802528e <memchr+0x4>

080252a0 <memcpy>:
 80252a0:	2300      	movs	r3, #0
 80252a2:	b510      	push	{r4, lr}
 80252a4:	429a      	cmp	r2, r3
 80252a6:	d100      	bne.n	80252aa <memcpy+0xa>
 80252a8:	bd10      	pop	{r4, pc}
 80252aa:	5ccc      	ldrb	r4, [r1, r3]
 80252ac:	54c4      	strb	r4, [r0, r3]
 80252ae:	3301      	adds	r3, #1
 80252b0:	e7f8      	b.n	80252a4 <memcpy+0x4>
	...

080252b4 <nan>:
 80252b4:	2000      	movs	r0, #0
 80252b6:	4901      	ldr	r1, [pc, #4]	@ (80252bc <nan+0x8>)
 80252b8:	4770      	bx	lr
 80252ba:	46c0      	nop			@ (mov r8, r8)
 80252bc:	7ff80000 	.word	0x7ff80000

080252c0 <quorem>:
 80252c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80252c2:	6902      	ldr	r2, [r0, #16]
 80252c4:	690f      	ldr	r7, [r1, #16]
 80252c6:	b087      	sub	sp, #28
 80252c8:	0006      	movs	r6, r0
 80252ca:	000b      	movs	r3, r1
 80252cc:	2000      	movs	r0, #0
 80252ce:	9102      	str	r1, [sp, #8]
 80252d0:	42ba      	cmp	r2, r7
 80252d2:	db6d      	blt.n	80253b0 <quorem+0xf0>
 80252d4:	3f01      	subs	r7, #1
 80252d6:	00bc      	lsls	r4, r7, #2
 80252d8:	3314      	adds	r3, #20
 80252da:	9305      	str	r3, [sp, #20]
 80252dc:	191b      	adds	r3, r3, r4
 80252de:	9303      	str	r3, [sp, #12]
 80252e0:	0033      	movs	r3, r6
 80252e2:	3314      	adds	r3, #20
 80252e4:	191c      	adds	r4, r3, r4
 80252e6:	9301      	str	r3, [sp, #4]
 80252e8:	6823      	ldr	r3, [r4, #0]
 80252ea:	9304      	str	r3, [sp, #16]
 80252ec:	9b03      	ldr	r3, [sp, #12]
 80252ee:	9804      	ldr	r0, [sp, #16]
 80252f0:	681d      	ldr	r5, [r3, #0]
 80252f2:	3501      	adds	r5, #1
 80252f4:	0029      	movs	r1, r5
 80252f6:	f7da ff55 	bl	80001a4 <__udivsi3>
 80252fa:	9b04      	ldr	r3, [sp, #16]
 80252fc:	9000      	str	r0, [sp, #0]
 80252fe:	42ab      	cmp	r3, r5
 8025300:	d32b      	bcc.n	802535a <quorem+0x9a>
 8025302:	9b05      	ldr	r3, [sp, #20]
 8025304:	9d01      	ldr	r5, [sp, #4]
 8025306:	469c      	mov	ip, r3
 8025308:	2300      	movs	r3, #0
 802530a:	9305      	str	r3, [sp, #20]
 802530c:	9304      	str	r3, [sp, #16]
 802530e:	4662      	mov	r2, ip
 8025310:	ca08      	ldmia	r2!, {r3}
 8025312:	6828      	ldr	r0, [r5, #0]
 8025314:	4694      	mov	ip, r2
 8025316:	9a00      	ldr	r2, [sp, #0]
 8025318:	b299      	uxth	r1, r3
 802531a:	4351      	muls	r1, r2
 802531c:	9a05      	ldr	r2, [sp, #20]
 802531e:	0c1b      	lsrs	r3, r3, #16
 8025320:	1889      	adds	r1, r1, r2
 8025322:	9a00      	ldr	r2, [sp, #0]
 8025324:	4353      	muls	r3, r2
 8025326:	0c0a      	lsrs	r2, r1, #16
 8025328:	189b      	adds	r3, r3, r2
 802532a:	0c1a      	lsrs	r2, r3, #16
 802532c:	b289      	uxth	r1, r1
 802532e:	9205      	str	r2, [sp, #20]
 8025330:	b282      	uxth	r2, r0
 8025332:	1a52      	subs	r2, r2, r1
 8025334:	9904      	ldr	r1, [sp, #16]
 8025336:	0c00      	lsrs	r0, r0, #16
 8025338:	1852      	adds	r2, r2, r1
 802533a:	b29b      	uxth	r3, r3
 802533c:	1411      	asrs	r1, r2, #16
 802533e:	1ac3      	subs	r3, r0, r3
 8025340:	185b      	adds	r3, r3, r1
 8025342:	1419      	asrs	r1, r3, #16
 8025344:	b292      	uxth	r2, r2
 8025346:	041b      	lsls	r3, r3, #16
 8025348:	431a      	orrs	r2, r3
 802534a:	9b03      	ldr	r3, [sp, #12]
 802534c:	9104      	str	r1, [sp, #16]
 802534e:	c504      	stmia	r5!, {r2}
 8025350:	4563      	cmp	r3, ip
 8025352:	d2dc      	bcs.n	802530e <quorem+0x4e>
 8025354:	6823      	ldr	r3, [r4, #0]
 8025356:	2b00      	cmp	r3, #0
 8025358:	d030      	beq.n	80253bc <quorem+0xfc>
 802535a:	0030      	movs	r0, r6
 802535c:	9902      	ldr	r1, [sp, #8]
 802535e:	f001 fd7d 	bl	8026e5c <__mcmp>
 8025362:	2800      	cmp	r0, #0
 8025364:	db23      	blt.n	80253ae <quorem+0xee>
 8025366:	0034      	movs	r4, r6
 8025368:	2500      	movs	r5, #0
 802536a:	9902      	ldr	r1, [sp, #8]
 802536c:	3414      	adds	r4, #20
 802536e:	3114      	adds	r1, #20
 8025370:	6823      	ldr	r3, [r4, #0]
 8025372:	c901      	ldmia	r1!, {r0}
 8025374:	9302      	str	r3, [sp, #8]
 8025376:	466b      	mov	r3, sp
 8025378:	891b      	ldrh	r3, [r3, #8]
 802537a:	b282      	uxth	r2, r0
 802537c:	1a9a      	subs	r2, r3, r2
 802537e:	9b02      	ldr	r3, [sp, #8]
 8025380:	1952      	adds	r2, r2, r5
 8025382:	0c00      	lsrs	r0, r0, #16
 8025384:	0c1b      	lsrs	r3, r3, #16
 8025386:	1a1b      	subs	r3, r3, r0
 8025388:	1410      	asrs	r0, r2, #16
 802538a:	181b      	adds	r3, r3, r0
 802538c:	141d      	asrs	r5, r3, #16
 802538e:	b292      	uxth	r2, r2
 8025390:	041b      	lsls	r3, r3, #16
 8025392:	431a      	orrs	r2, r3
 8025394:	9b03      	ldr	r3, [sp, #12]
 8025396:	c404      	stmia	r4!, {r2}
 8025398:	428b      	cmp	r3, r1
 802539a:	d2e9      	bcs.n	8025370 <quorem+0xb0>
 802539c:	9a01      	ldr	r2, [sp, #4]
 802539e:	00bb      	lsls	r3, r7, #2
 80253a0:	18d3      	adds	r3, r2, r3
 80253a2:	681a      	ldr	r2, [r3, #0]
 80253a4:	2a00      	cmp	r2, #0
 80253a6:	d013      	beq.n	80253d0 <quorem+0x110>
 80253a8:	9b00      	ldr	r3, [sp, #0]
 80253aa:	3301      	adds	r3, #1
 80253ac:	9300      	str	r3, [sp, #0]
 80253ae:	9800      	ldr	r0, [sp, #0]
 80253b0:	b007      	add	sp, #28
 80253b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253b4:	6823      	ldr	r3, [r4, #0]
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	d104      	bne.n	80253c4 <quorem+0x104>
 80253ba:	3f01      	subs	r7, #1
 80253bc:	9b01      	ldr	r3, [sp, #4]
 80253be:	3c04      	subs	r4, #4
 80253c0:	42a3      	cmp	r3, r4
 80253c2:	d3f7      	bcc.n	80253b4 <quorem+0xf4>
 80253c4:	6137      	str	r7, [r6, #16]
 80253c6:	e7c8      	b.n	802535a <quorem+0x9a>
 80253c8:	681a      	ldr	r2, [r3, #0]
 80253ca:	2a00      	cmp	r2, #0
 80253cc:	d104      	bne.n	80253d8 <quorem+0x118>
 80253ce:	3f01      	subs	r7, #1
 80253d0:	9a01      	ldr	r2, [sp, #4]
 80253d2:	3b04      	subs	r3, #4
 80253d4:	429a      	cmp	r2, r3
 80253d6:	d3f7      	bcc.n	80253c8 <quorem+0x108>
 80253d8:	6137      	str	r7, [r6, #16]
 80253da:	e7e5      	b.n	80253a8 <quorem+0xe8>

080253dc <_dtoa_r>:
 80253dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80253de:	0014      	movs	r4, r2
 80253e0:	001d      	movs	r5, r3
 80253e2:	69c6      	ldr	r6, [r0, #28]
 80253e4:	b09d      	sub	sp, #116	@ 0x74
 80253e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80253e8:	950b      	str	r5, [sp, #44]	@ 0x2c
 80253ea:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80253ec:	9003      	str	r0, [sp, #12]
 80253ee:	2e00      	cmp	r6, #0
 80253f0:	d10f      	bne.n	8025412 <_dtoa_r+0x36>
 80253f2:	2010      	movs	r0, #16
 80253f4:	f001 f98a 	bl	802670c <malloc>
 80253f8:	9b03      	ldr	r3, [sp, #12]
 80253fa:	1e02      	subs	r2, r0, #0
 80253fc:	61d8      	str	r0, [r3, #28]
 80253fe:	d104      	bne.n	802540a <_dtoa_r+0x2e>
 8025400:	21ef      	movs	r1, #239	@ 0xef
 8025402:	4bc7      	ldr	r3, [pc, #796]	@ (8025720 <_dtoa_r+0x344>)
 8025404:	48c7      	ldr	r0, [pc, #796]	@ (8025724 <_dtoa_r+0x348>)
 8025406:	f002 fb2f 	bl	8027a68 <__assert_func>
 802540a:	6046      	str	r6, [r0, #4]
 802540c:	6086      	str	r6, [r0, #8]
 802540e:	6006      	str	r6, [r0, #0]
 8025410:	60c6      	str	r6, [r0, #12]
 8025412:	9b03      	ldr	r3, [sp, #12]
 8025414:	69db      	ldr	r3, [r3, #28]
 8025416:	6819      	ldr	r1, [r3, #0]
 8025418:	2900      	cmp	r1, #0
 802541a:	d00b      	beq.n	8025434 <_dtoa_r+0x58>
 802541c:	685a      	ldr	r2, [r3, #4]
 802541e:	2301      	movs	r3, #1
 8025420:	4093      	lsls	r3, r2
 8025422:	604a      	str	r2, [r1, #4]
 8025424:	608b      	str	r3, [r1, #8]
 8025426:	9803      	ldr	r0, [sp, #12]
 8025428:	f001 fa82 	bl	8026930 <_Bfree>
 802542c:	2200      	movs	r2, #0
 802542e:	9b03      	ldr	r3, [sp, #12]
 8025430:	69db      	ldr	r3, [r3, #28]
 8025432:	601a      	str	r2, [r3, #0]
 8025434:	2d00      	cmp	r5, #0
 8025436:	da1e      	bge.n	8025476 <_dtoa_r+0x9a>
 8025438:	2301      	movs	r3, #1
 802543a:	603b      	str	r3, [r7, #0]
 802543c:	006b      	lsls	r3, r5, #1
 802543e:	085b      	lsrs	r3, r3, #1
 8025440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025442:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025444:	4bb8      	ldr	r3, [pc, #736]	@ (8025728 <_dtoa_r+0x34c>)
 8025446:	4ab8      	ldr	r2, [pc, #736]	@ (8025728 <_dtoa_r+0x34c>)
 8025448:	403b      	ands	r3, r7
 802544a:	4293      	cmp	r3, r2
 802544c:	d116      	bne.n	802547c <_dtoa_r+0xa0>
 802544e:	4bb7      	ldr	r3, [pc, #732]	@ (802572c <_dtoa_r+0x350>)
 8025450:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025452:	6013      	str	r3, [r2, #0]
 8025454:	033b      	lsls	r3, r7, #12
 8025456:	0b1b      	lsrs	r3, r3, #12
 8025458:	4323      	orrs	r3, r4
 802545a:	d101      	bne.n	8025460 <_dtoa_r+0x84>
 802545c:	f000 fd83 	bl	8025f66 <_dtoa_r+0xb8a>
 8025460:	4bb3      	ldr	r3, [pc, #716]	@ (8025730 <_dtoa_r+0x354>)
 8025462:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025464:	9308      	str	r3, [sp, #32]
 8025466:	2a00      	cmp	r2, #0
 8025468:	d002      	beq.n	8025470 <_dtoa_r+0x94>
 802546a:	4bb2      	ldr	r3, [pc, #712]	@ (8025734 <_dtoa_r+0x358>)
 802546c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802546e:	6013      	str	r3, [r2, #0]
 8025470:	9808      	ldr	r0, [sp, #32]
 8025472:	b01d      	add	sp, #116	@ 0x74
 8025474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025476:	2300      	movs	r3, #0
 8025478:	603b      	str	r3, [r7, #0]
 802547a:	e7e2      	b.n	8025442 <_dtoa_r+0x66>
 802547c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802547e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025480:	9212      	str	r2, [sp, #72]	@ 0x48
 8025482:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025484:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025486:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025488:	2200      	movs	r2, #0
 802548a:	2300      	movs	r3, #0
 802548c:	f7db f810 	bl	80004b0 <__aeabi_dcmpeq>
 8025490:	1e06      	subs	r6, r0, #0
 8025492:	d00b      	beq.n	80254ac <_dtoa_r+0xd0>
 8025494:	2301      	movs	r3, #1
 8025496:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025498:	6013      	str	r3, [r2, #0]
 802549a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802549c:	2b00      	cmp	r3, #0
 802549e:	d002      	beq.n	80254a6 <_dtoa_r+0xca>
 80254a0:	4ba5      	ldr	r3, [pc, #660]	@ (8025738 <_dtoa_r+0x35c>)
 80254a2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80254a4:	6013      	str	r3, [r2, #0]
 80254a6:	4ba5      	ldr	r3, [pc, #660]	@ (802573c <_dtoa_r+0x360>)
 80254a8:	9308      	str	r3, [sp, #32]
 80254aa:	e7e1      	b.n	8025470 <_dtoa_r+0x94>
 80254ac:	ab1a      	add	r3, sp, #104	@ 0x68
 80254ae:	9301      	str	r3, [sp, #4]
 80254b0:	ab1b      	add	r3, sp, #108	@ 0x6c
 80254b2:	9300      	str	r3, [sp, #0]
 80254b4:	9803      	ldr	r0, [sp, #12]
 80254b6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80254b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254ba:	f001 fdf1 	bl	80270a0 <__d2b>
 80254be:	007a      	lsls	r2, r7, #1
 80254c0:	9005      	str	r0, [sp, #20]
 80254c2:	0d52      	lsrs	r2, r2, #21
 80254c4:	d100      	bne.n	80254c8 <_dtoa_r+0xec>
 80254c6:	e07b      	b.n	80255c0 <_dtoa_r+0x1e4>
 80254c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254ca:	9618      	str	r6, [sp, #96]	@ 0x60
 80254cc:	0319      	lsls	r1, r3, #12
 80254ce:	4b9c      	ldr	r3, [pc, #624]	@ (8025740 <_dtoa_r+0x364>)
 80254d0:	0b09      	lsrs	r1, r1, #12
 80254d2:	430b      	orrs	r3, r1
 80254d4:	499b      	ldr	r1, [pc, #620]	@ (8025744 <_dtoa_r+0x368>)
 80254d6:	1857      	adds	r7, r2, r1
 80254d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80254da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80254dc:	0019      	movs	r1, r3
 80254de:	2200      	movs	r2, #0
 80254e0:	4b99      	ldr	r3, [pc, #612]	@ (8025748 <_dtoa_r+0x36c>)
 80254e2:	f7dd fb73 	bl	8002bcc <__aeabi_dsub>
 80254e6:	4a99      	ldr	r2, [pc, #612]	@ (802574c <_dtoa_r+0x370>)
 80254e8:	4b99      	ldr	r3, [pc, #612]	@ (8025750 <_dtoa_r+0x374>)
 80254ea:	f7dd f8a7 	bl	800263c <__aeabi_dmul>
 80254ee:	4a99      	ldr	r2, [pc, #612]	@ (8025754 <_dtoa_r+0x378>)
 80254f0:	4b99      	ldr	r3, [pc, #612]	@ (8025758 <_dtoa_r+0x37c>)
 80254f2:	f7dc f8fb 	bl	80016ec <__aeabi_dadd>
 80254f6:	0004      	movs	r4, r0
 80254f8:	0038      	movs	r0, r7
 80254fa:	000d      	movs	r5, r1
 80254fc:	f7dd ff60 	bl	80033c0 <__aeabi_i2d>
 8025500:	4a96      	ldr	r2, [pc, #600]	@ (802575c <_dtoa_r+0x380>)
 8025502:	4b97      	ldr	r3, [pc, #604]	@ (8025760 <_dtoa_r+0x384>)
 8025504:	f7dd f89a 	bl	800263c <__aeabi_dmul>
 8025508:	0002      	movs	r2, r0
 802550a:	000b      	movs	r3, r1
 802550c:	0020      	movs	r0, r4
 802550e:	0029      	movs	r1, r5
 8025510:	f7dc f8ec 	bl	80016ec <__aeabi_dadd>
 8025514:	0004      	movs	r4, r0
 8025516:	000d      	movs	r5, r1
 8025518:	f7dd ff16 	bl	8003348 <__aeabi_d2iz>
 802551c:	2200      	movs	r2, #0
 802551e:	9004      	str	r0, [sp, #16]
 8025520:	2300      	movs	r3, #0
 8025522:	0020      	movs	r0, r4
 8025524:	0029      	movs	r1, r5
 8025526:	f7da ffc9 	bl	80004bc <__aeabi_dcmplt>
 802552a:	2800      	cmp	r0, #0
 802552c:	d00b      	beq.n	8025546 <_dtoa_r+0x16a>
 802552e:	9804      	ldr	r0, [sp, #16]
 8025530:	f7dd ff46 	bl	80033c0 <__aeabi_i2d>
 8025534:	002b      	movs	r3, r5
 8025536:	0022      	movs	r2, r4
 8025538:	f7da ffba 	bl	80004b0 <__aeabi_dcmpeq>
 802553c:	4243      	negs	r3, r0
 802553e:	4158      	adcs	r0, r3
 8025540:	9b04      	ldr	r3, [sp, #16]
 8025542:	1a1b      	subs	r3, r3, r0
 8025544:	9304      	str	r3, [sp, #16]
 8025546:	2301      	movs	r3, #1
 8025548:	9315      	str	r3, [sp, #84]	@ 0x54
 802554a:	9b04      	ldr	r3, [sp, #16]
 802554c:	2b16      	cmp	r3, #22
 802554e:	d810      	bhi.n	8025572 <_dtoa_r+0x196>
 8025550:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025552:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025554:	9a04      	ldr	r2, [sp, #16]
 8025556:	4b83      	ldr	r3, [pc, #524]	@ (8025764 <_dtoa_r+0x388>)
 8025558:	00d2      	lsls	r2, r2, #3
 802555a:	189b      	adds	r3, r3, r2
 802555c:	681a      	ldr	r2, [r3, #0]
 802555e:	685b      	ldr	r3, [r3, #4]
 8025560:	f7da ffac 	bl	80004bc <__aeabi_dcmplt>
 8025564:	2800      	cmp	r0, #0
 8025566:	d047      	beq.n	80255f8 <_dtoa_r+0x21c>
 8025568:	9b04      	ldr	r3, [sp, #16]
 802556a:	3b01      	subs	r3, #1
 802556c:	9304      	str	r3, [sp, #16]
 802556e:	2300      	movs	r3, #0
 8025570:	9315      	str	r3, [sp, #84]	@ 0x54
 8025572:	2200      	movs	r2, #0
 8025574:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025576:	9206      	str	r2, [sp, #24]
 8025578:	1bdb      	subs	r3, r3, r7
 802557a:	1e5a      	subs	r2, r3, #1
 802557c:	d53e      	bpl.n	80255fc <_dtoa_r+0x220>
 802557e:	2201      	movs	r2, #1
 8025580:	1ad3      	subs	r3, r2, r3
 8025582:	9306      	str	r3, [sp, #24]
 8025584:	2300      	movs	r3, #0
 8025586:	930d      	str	r3, [sp, #52]	@ 0x34
 8025588:	9b04      	ldr	r3, [sp, #16]
 802558a:	2b00      	cmp	r3, #0
 802558c:	db38      	blt.n	8025600 <_dtoa_r+0x224>
 802558e:	9a04      	ldr	r2, [sp, #16]
 8025590:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025592:	4694      	mov	ip, r2
 8025594:	4463      	add	r3, ip
 8025596:	930d      	str	r3, [sp, #52]	@ 0x34
 8025598:	2300      	movs	r3, #0
 802559a:	9214      	str	r2, [sp, #80]	@ 0x50
 802559c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802559e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80255a0:	2401      	movs	r4, #1
 80255a2:	2b09      	cmp	r3, #9
 80255a4:	d867      	bhi.n	8025676 <_dtoa_r+0x29a>
 80255a6:	2b05      	cmp	r3, #5
 80255a8:	dd02      	ble.n	80255b0 <_dtoa_r+0x1d4>
 80255aa:	2400      	movs	r4, #0
 80255ac:	3b04      	subs	r3, #4
 80255ae:	9322      	str	r3, [sp, #136]	@ 0x88
 80255b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80255b2:	1e98      	subs	r0, r3, #2
 80255b4:	2803      	cmp	r0, #3
 80255b6:	d867      	bhi.n	8025688 <_dtoa_r+0x2ac>
 80255b8:	f7da fde0 	bl	800017c <__gnu_thumb1_case_uqi>
 80255bc:	5b383a2b 	.word	0x5b383a2b
 80255c0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80255c2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80255c4:	18f6      	adds	r6, r6, r3
 80255c6:	4b68      	ldr	r3, [pc, #416]	@ (8025768 <_dtoa_r+0x38c>)
 80255c8:	18f2      	adds	r2, r6, r3
 80255ca:	2a20      	cmp	r2, #32
 80255cc:	dd0f      	ble.n	80255ee <_dtoa_r+0x212>
 80255ce:	2340      	movs	r3, #64	@ 0x40
 80255d0:	1a9b      	subs	r3, r3, r2
 80255d2:	409f      	lsls	r7, r3
 80255d4:	4b65      	ldr	r3, [pc, #404]	@ (802576c <_dtoa_r+0x390>)
 80255d6:	0038      	movs	r0, r7
 80255d8:	18f3      	adds	r3, r6, r3
 80255da:	40dc      	lsrs	r4, r3
 80255dc:	4320      	orrs	r0, r4
 80255de:	f7dd ff1d 	bl	800341c <__aeabi_ui2d>
 80255e2:	2201      	movs	r2, #1
 80255e4:	4b62      	ldr	r3, [pc, #392]	@ (8025770 <_dtoa_r+0x394>)
 80255e6:	1e77      	subs	r7, r6, #1
 80255e8:	18cb      	adds	r3, r1, r3
 80255ea:	9218      	str	r2, [sp, #96]	@ 0x60
 80255ec:	e776      	b.n	80254dc <_dtoa_r+0x100>
 80255ee:	2320      	movs	r3, #32
 80255f0:	0020      	movs	r0, r4
 80255f2:	1a9b      	subs	r3, r3, r2
 80255f4:	4098      	lsls	r0, r3
 80255f6:	e7f2      	b.n	80255de <_dtoa_r+0x202>
 80255f8:	9015      	str	r0, [sp, #84]	@ 0x54
 80255fa:	e7ba      	b.n	8025572 <_dtoa_r+0x196>
 80255fc:	920d      	str	r2, [sp, #52]	@ 0x34
 80255fe:	e7c3      	b.n	8025588 <_dtoa_r+0x1ac>
 8025600:	9b06      	ldr	r3, [sp, #24]
 8025602:	9a04      	ldr	r2, [sp, #16]
 8025604:	1a9b      	subs	r3, r3, r2
 8025606:	9306      	str	r3, [sp, #24]
 8025608:	4253      	negs	r3, r2
 802560a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802560c:	2300      	movs	r3, #0
 802560e:	9314      	str	r3, [sp, #80]	@ 0x50
 8025610:	e7c5      	b.n	802559e <_dtoa_r+0x1c2>
 8025612:	2300      	movs	r3, #0
 8025614:	9310      	str	r3, [sp, #64]	@ 0x40
 8025616:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025618:	930e      	str	r3, [sp, #56]	@ 0x38
 802561a:	9309      	str	r3, [sp, #36]	@ 0x24
 802561c:	2b00      	cmp	r3, #0
 802561e:	dc13      	bgt.n	8025648 <_dtoa_r+0x26c>
 8025620:	2301      	movs	r3, #1
 8025622:	001a      	movs	r2, r3
 8025624:	930e      	str	r3, [sp, #56]	@ 0x38
 8025626:	9309      	str	r3, [sp, #36]	@ 0x24
 8025628:	9223      	str	r2, [sp, #140]	@ 0x8c
 802562a:	e00d      	b.n	8025648 <_dtoa_r+0x26c>
 802562c:	2301      	movs	r3, #1
 802562e:	e7f1      	b.n	8025614 <_dtoa_r+0x238>
 8025630:	2300      	movs	r3, #0
 8025632:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025634:	9310      	str	r3, [sp, #64]	@ 0x40
 8025636:	4694      	mov	ip, r2
 8025638:	9b04      	ldr	r3, [sp, #16]
 802563a:	4463      	add	r3, ip
 802563c:	930e      	str	r3, [sp, #56]	@ 0x38
 802563e:	3301      	adds	r3, #1
 8025640:	9309      	str	r3, [sp, #36]	@ 0x24
 8025642:	2b00      	cmp	r3, #0
 8025644:	dc00      	bgt.n	8025648 <_dtoa_r+0x26c>
 8025646:	2301      	movs	r3, #1
 8025648:	9a03      	ldr	r2, [sp, #12]
 802564a:	2100      	movs	r1, #0
 802564c:	69d0      	ldr	r0, [r2, #28]
 802564e:	2204      	movs	r2, #4
 8025650:	0015      	movs	r5, r2
 8025652:	3514      	adds	r5, #20
 8025654:	429d      	cmp	r5, r3
 8025656:	d91b      	bls.n	8025690 <_dtoa_r+0x2b4>
 8025658:	6041      	str	r1, [r0, #4]
 802565a:	9803      	ldr	r0, [sp, #12]
 802565c:	f001 f924 	bl	80268a8 <_Balloc>
 8025660:	9008      	str	r0, [sp, #32]
 8025662:	2800      	cmp	r0, #0
 8025664:	d117      	bne.n	8025696 <_dtoa_r+0x2ba>
 8025666:	21b0      	movs	r1, #176	@ 0xb0
 8025668:	4b42      	ldr	r3, [pc, #264]	@ (8025774 <_dtoa_r+0x398>)
 802566a:	482e      	ldr	r0, [pc, #184]	@ (8025724 <_dtoa_r+0x348>)
 802566c:	9a08      	ldr	r2, [sp, #32]
 802566e:	31ff      	adds	r1, #255	@ 0xff
 8025670:	e6c9      	b.n	8025406 <_dtoa_r+0x2a>
 8025672:	2301      	movs	r3, #1
 8025674:	e7dd      	b.n	8025632 <_dtoa_r+0x256>
 8025676:	2300      	movs	r3, #0
 8025678:	9410      	str	r4, [sp, #64]	@ 0x40
 802567a:	9322      	str	r3, [sp, #136]	@ 0x88
 802567c:	3b01      	subs	r3, #1
 802567e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025680:	9309      	str	r3, [sp, #36]	@ 0x24
 8025682:	2200      	movs	r2, #0
 8025684:	3313      	adds	r3, #19
 8025686:	e7cf      	b.n	8025628 <_dtoa_r+0x24c>
 8025688:	2301      	movs	r3, #1
 802568a:	9310      	str	r3, [sp, #64]	@ 0x40
 802568c:	3b02      	subs	r3, #2
 802568e:	e7f6      	b.n	802567e <_dtoa_r+0x2a2>
 8025690:	3101      	adds	r1, #1
 8025692:	0052      	lsls	r2, r2, #1
 8025694:	e7dc      	b.n	8025650 <_dtoa_r+0x274>
 8025696:	9b03      	ldr	r3, [sp, #12]
 8025698:	9a08      	ldr	r2, [sp, #32]
 802569a:	69db      	ldr	r3, [r3, #28]
 802569c:	601a      	str	r2, [r3, #0]
 802569e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256a0:	2b0e      	cmp	r3, #14
 80256a2:	d900      	bls.n	80256a6 <_dtoa_r+0x2ca>
 80256a4:	e0d9      	b.n	802585a <_dtoa_r+0x47e>
 80256a6:	2c00      	cmp	r4, #0
 80256a8:	d100      	bne.n	80256ac <_dtoa_r+0x2d0>
 80256aa:	e0d6      	b.n	802585a <_dtoa_r+0x47e>
 80256ac:	9b04      	ldr	r3, [sp, #16]
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	dd64      	ble.n	802577c <_dtoa_r+0x3a0>
 80256b2:	210f      	movs	r1, #15
 80256b4:	9a04      	ldr	r2, [sp, #16]
 80256b6:	4b2b      	ldr	r3, [pc, #172]	@ (8025764 <_dtoa_r+0x388>)
 80256b8:	400a      	ands	r2, r1
 80256ba:	00d2      	lsls	r2, r2, #3
 80256bc:	189b      	adds	r3, r3, r2
 80256be:	681e      	ldr	r6, [r3, #0]
 80256c0:	685f      	ldr	r7, [r3, #4]
 80256c2:	9b04      	ldr	r3, [sp, #16]
 80256c4:	2402      	movs	r4, #2
 80256c6:	111d      	asrs	r5, r3, #4
 80256c8:	05db      	lsls	r3, r3, #23
 80256ca:	d50a      	bpl.n	80256e2 <_dtoa_r+0x306>
 80256cc:	4b2a      	ldr	r3, [pc, #168]	@ (8025778 <_dtoa_r+0x39c>)
 80256ce:	400d      	ands	r5, r1
 80256d0:	6a1a      	ldr	r2, [r3, #32]
 80256d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80256d4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80256d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80256d8:	f7dc fb6c 	bl	8001db4 <__aeabi_ddiv>
 80256dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80256de:	910b      	str	r1, [sp, #44]	@ 0x2c
 80256e0:	3401      	adds	r4, #1
 80256e2:	4b25      	ldr	r3, [pc, #148]	@ (8025778 <_dtoa_r+0x39c>)
 80256e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80256e6:	2d00      	cmp	r5, #0
 80256e8:	d108      	bne.n	80256fc <_dtoa_r+0x320>
 80256ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80256ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80256ee:	0032      	movs	r2, r6
 80256f0:	003b      	movs	r3, r7
 80256f2:	f7dc fb5f 	bl	8001db4 <__aeabi_ddiv>
 80256f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80256f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80256fa:	e05a      	b.n	80257b2 <_dtoa_r+0x3d6>
 80256fc:	2301      	movs	r3, #1
 80256fe:	421d      	tst	r5, r3
 8025700:	d009      	beq.n	8025716 <_dtoa_r+0x33a>
 8025702:	18e4      	adds	r4, r4, r3
 8025704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025706:	0030      	movs	r0, r6
 8025708:	681a      	ldr	r2, [r3, #0]
 802570a:	685b      	ldr	r3, [r3, #4]
 802570c:	0039      	movs	r1, r7
 802570e:	f7dc ff95 	bl	800263c <__aeabi_dmul>
 8025712:	0006      	movs	r6, r0
 8025714:	000f      	movs	r7, r1
 8025716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025718:	106d      	asrs	r5, r5, #1
 802571a:	3308      	adds	r3, #8
 802571c:	e7e2      	b.n	80256e4 <_dtoa_r+0x308>
 802571e:	46c0      	nop			@ (mov r8, r8)
 8025720:	0802dc92 	.word	0x0802dc92
 8025724:	0802dca9 	.word	0x0802dca9
 8025728:	7ff00000 	.word	0x7ff00000
 802572c:	0000270f 	.word	0x0000270f
 8025730:	0802dc8e 	.word	0x0802dc8e
 8025734:	0802dc91 	.word	0x0802dc91
 8025738:	0802dc5a 	.word	0x0802dc5a
 802573c:	0802dc59 	.word	0x0802dc59
 8025740:	3ff00000 	.word	0x3ff00000
 8025744:	fffffc01 	.word	0xfffffc01
 8025748:	3ff80000 	.word	0x3ff80000
 802574c:	636f4361 	.word	0x636f4361
 8025750:	3fd287a7 	.word	0x3fd287a7
 8025754:	8b60c8b3 	.word	0x8b60c8b3
 8025758:	3fc68a28 	.word	0x3fc68a28
 802575c:	509f79fb 	.word	0x509f79fb
 8025760:	3fd34413 	.word	0x3fd34413
 8025764:	0802de00 	.word	0x0802de00
 8025768:	00000432 	.word	0x00000432
 802576c:	00000412 	.word	0x00000412
 8025770:	fe100000 	.word	0xfe100000
 8025774:	0802dd01 	.word	0x0802dd01
 8025778:	0802ddd8 	.word	0x0802ddd8
 802577c:	9b04      	ldr	r3, [sp, #16]
 802577e:	2402      	movs	r4, #2
 8025780:	2b00      	cmp	r3, #0
 8025782:	d016      	beq.n	80257b2 <_dtoa_r+0x3d6>
 8025784:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025786:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025788:	220f      	movs	r2, #15
 802578a:	425d      	negs	r5, r3
 802578c:	402a      	ands	r2, r5
 802578e:	4bd7      	ldr	r3, [pc, #860]	@ (8025aec <_dtoa_r+0x710>)
 8025790:	00d2      	lsls	r2, r2, #3
 8025792:	189b      	adds	r3, r3, r2
 8025794:	681a      	ldr	r2, [r3, #0]
 8025796:	685b      	ldr	r3, [r3, #4]
 8025798:	f7dc ff50 	bl	800263c <__aeabi_dmul>
 802579c:	2701      	movs	r7, #1
 802579e:	2300      	movs	r3, #0
 80257a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80257a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80257a4:	4ed2      	ldr	r6, [pc, #840]	@ (8025af0 <_dtoa_r+0x714>)
 80257a6:	112d      	asrs	r5, r5, #4
 80257a8:	2d00      	cmp	r5, #0
 80257aa:	d000      	beq.n	80257ae <_dtoa_r+0x3d2>
 80257ac:	e0ba      	b.n	8025924 <_dtoa_r+0x548>
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	d1a1      	bne.n	80256f6 <_dtoa_r+0x31a>
 80257b2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80257b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80257b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80257b8:	2b00      	cmp	r3, #0
 80257ba:	d100      	bne.n	80257be <_dtoa_r+0x3e2>
 80257bc:	e0bd      	b.n	802593a <_dtoa_r+0x55e>
 80257be:	2200      	movs	r2, #0
 80257c0:	0030      	movs	r0, r6
 80257c2:	0039      	movs	r1, r7
 80257c4:	4bcb      	ldr	r3, [pc, #812]	@ (8025af4 <_dtoa_r+0x718>)
 80257c6:	f7da fe79 	bl	80004bc <__aeabi_dcmplt>
 80257ca:	2800      	cmp	r0, #0
 80257cc:	d100      	bne.n	80257d0 <_dtoa_r+0x3f4>
 80257ce:	e0b4      	b.n	802593a <_dtoa_r+0x55e>
 80257d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257d2:	2b00      	cmp	r3, #0
 80257d4:	d100      	bne.n	80257d8 <_dtoa_r+0x3fc>
 80257d6:	e0b0      	b.n	802593a <_dtoa_r+0x55e>
 80257d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257da:	2b00      	cmp	r3, #0
 80257dc:	dd39      	ble.n	8025852 <_dtoa_r+0x476>
 80257de:	9b04      	ldr	r3, [sp, #16]
 80257e0:	2200      	movs	r2, #0
 80257e2:	3b01      	subs	r3, #1
 80257e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80257e6:	0030      	movs	r0, r6
 80257e8:	4bc3      	ldr	r3, [pc, #780]	@ (8025af8 <_dtoa_r+0x71c>)
 80257ea:	0039      	movs	r1, r7
 80257ec:	f7dc ff26 	bl	800263c <__aeabi_dmul>
 80257f0:	900a      	str	r0, [sp, #40]	@ 0x28
 80257f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80257f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257f6:	3401      	adds	r4, #1
 80257f8:	0020      	movs	r0, r4
 80257fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80257fc:	f7dd fde0 	bl	80033c0 <__aeabi_i2d>
 8025800:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025802:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025804:	f7dc ff1a 	bl	800263c <__aeabi_dmul>
 8025808:	4bbc      	ldr	r3, [pc, #752]	@ (8025afc <_dtoa_r+0x720>)
 802580a:	2200      	movs	r2, #0
 802580c:	f7db ff6e 	bl	80016ec <__aeabi_dadd>
 8025810:	4bbb      	ldr	r3, [pc, #748]	@ (8025b00 <_dtoa_r+0x724>)
 8025812:	0006      	movs	r6, r0
 8025814:	18cf      	adds	r7, r1, r3
 8025816:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025818:	2b00      	cmp	r3, #0
 802581a:	d000      	beq.n	802581e <_dtoa_r+0x442>
 802581c:	e091      	b.n	8025942 <_dtoa_r+0x566>
 802581e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025822:	2200      	movs	r2, #0
 8025824:	4bb7      	ldr	r3, [pc, #732]	@ (8025b04 <_dtoa_r+0x728>)
 8025826:	f7dd f9d1 	bl	8002bcc <__aeabi_dsub>
 802582a:	0032      	movs	r2, r6
 802582c:	003b      	movs	r3, r7
 802582e:	0004      	movs	r4, r0
 8025830:	000d      	movs	r5, r1
 8025832:	f7da fe57 	bl	80004e4 <__aeabi_dcmpgt>
 8025836:	2800      	cmp	r0, #0
 8025838:	d000      	beq.n	802583c <_dtoa_r+0x460>
 802583a:	e29d      	b.n	8025d78 <_dtoa_r+0x99c>
 802583c:	2180      	movs	r1, #128	@ 0x80
 802583e:	0609      	lsls	r1, r1, #24
 8025840:	187b      	adds	r3, r7, r1
 8025842:	0032      	movs	r2, r6
 8025844:	0020      	movs	r0, r4
 8025846:	0029      	movs	r1, r5
 8025848:	f7da fe38 	bl	80004bc <__aeabi_dcmplt>
 802584c:	2800      	cmp	r0, #0
 802584e:	d000      	beq.n	8025852 <_dtoa_r+0x476>
 8025850:	e130      	b.n	8025ab4 <_dtoa_r+0x6d8>
 8025852:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025854:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025856:	930a      	str	r3, [sp, #40]	@ 0x28
 8025858:	940b      	str	r4, [sp, #44]	@ 0x2c
 802585a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802585c:	2b00      	cmp	r3, #0
 802585e:	da00      	bge.n	8025862 <_dtoa_r+0x486>
 8025860:	e177      	b.n	8025b52 <_dtoa_r+0x776>
 8025862:	9a04      	ldr	r2, [sp, #16]
 8025864:	2a0e      	cmp	r2, #14
 8025866:	dd00      	ble.n	802586a <_dtoa_r+0x48e>
 8025868:	e173      	b.n	8025b52 <_dtoa_r+0x776>
 802586a:	4ba0      	ldr	r3, [pc, #640]	@ (8025aec <_dtoa_r+0x710>)
 802586c:	00d2      	lsls	r2, r2, #3
 802586e:	189b      	adds	r3, r3, r2
 8025870:	685c      	ldr	r4, [r3, #4]
 8025872:	681b      	ldr	r3, [r3, #0]
 8025874:	9306      	str	r3, [sp, #24]
 8025876:	9407      	str	r4, [sp, #28]
 8025878:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802587a:	2b00      	cmp	r3, #0
 802587c:	da03      	bge.n	8025886 <_dtoa_r+0x4aa>
 802587e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025880:	2b00      	cmp	r3, #0
 8025882:	dc00      	bgt.n	8025886 <_dtoa_r+0x4aa>
 8025884:	e106      	b.n	8025a94 <_dtoa_r+0x6b8>
 8025886:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025888:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802588a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802588c:	9d08      	ldr	r5, [sp, #32]
 802588e:	3b01      	subs	r3, #1
 8025890:	195b      	adds	r3, r3, r5
 8025892:	930a      	str	r3, [sp, #40]	@ 0x28
 8025894:	9a06      	ldr	r2, [sp, #24]
 8025896:	9b07      	ldr	r3, [sp, #28]
 8025898:	0030      	movs	r0, r6
 802589a:	0039      	movs	r1, r7
 802589c:	f7dc fa8a 	bl	8001db4 <__aeabi_ddiv>
 80258a0:	f7dd fd52 	bl	8003348 <__aeabi_d2iz>
 80258a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80258a6:	f7dd fd8b 	bl	80033c0 <__aeabi_i2d>
 80258aa:	9a06      	ldr	r2, [sp, #24]
 80258ac:	9b07      	ldr	r3, [sp, #28]
 80258ae:	f7dc fec5 	bl	800263c <__aeabi_dmul>
 80258b2:	0002      	movs	r2, r0
 80258b4:	000b      	movs	r3, r1
 80258b6:	0030      	movs	r0, r6
 80258b8:	0039      	movs	r1, r7
 80258ba:	f7dd f987 	bl	8002bcc <__aeabi_dsub>
 80258be:	002b      	movs	r3, r5
 80258c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80258c2:	3501      	adds	r5, #1
 80258c4:	3230      	adds	r2, #48	@ 0x30
 80258c6:	701a      	strb	r2, [r3, #0]
 80258c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80258ca:	002c      	movs	r4, r5
 80258cc:	429a      	cmp	r2, r3
 80258ce:	d000      	beq.n	80258d2 <_dtoa_r+0x4f6>
 80258d0:	e131      	b.n	8025b36 <_dtoa_r+0x75a>
 80258d2:	0002      	movs	r2, r0
 80258d4:	000b      	movs	r3, r1
 80258d6:	f7db ff09 	bl	80016ec <__aeabi_dadd>
 80258da:	9a06      	ldr	r2, [sp, #24]
 80258dc:	9b07      	ldr	r3, [sp, #28]
 80258de:	0006      	movs	r6, r0
 80258e0:	000f      	movs	r7, r1
 80258e2:	f7da fdff 	bl	80004e4 <__aeabi_dcmpgt>
 80258e6:	2800      	cmp	r0, #0
 80258e8:	d000      	beq.n	80258ec <_dtoa_r+0x510>
 80258ea:	e10f      	b.n	8025b0c <_dtoa_r+0x730>
 80258ec:	9a06      	ldr	r2, [sp, #24]
 80258ee:	9b07      	ldr	r3, [sp, #28]
 80258f0:	0030      	movs	r0, r6
 80258f2:	0039      	movs	r1, r7
 80258f4:	f7da fddc 	bl	80004b0 <__aeabi_dcmpeq>
 80258f8:	2800      	cmp	r0, #0
 80258fa:	d003      	beq.n	8025904 <_dtoa_r+0x528>
 80258fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80258fe:	07dd      	lsls	r5, r3, #31
 8025900:	d500      	bpl.n	8025904 <_dtoa_r+0x528>
 8025902:	e103      	b.n	8025b0c <_dtoa_r+0x730>
 8025904:	9905      	ldr	r1, [sp, #20]
 8025906:	9803      	ldr	r0, [sp, #12]
 8025908:	f001 f812 	bl	8026930 <_Bfree>
 802590c:	2300      	movs	r3, #0
 802590e:	7023      	strb	r3, [r4, #0]
 8025910:	9b04      	ldr	r3, [sp, #16]
 8025912:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025914:	3301      	adds	r3, #1
 8025916:	6013      	str	r3, [r2, #0]
 8025918:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802591a:	2b00      	cmp	r3, #0
 802591c:	d100      	bne.n	8025920 <_dtoa_r+0x544>
 802591e:	e5a7      	b.n	8025470 <_dtoa_r+0x94>
 8025920:	601c      	str	r4, [r3, #0]
 8025922:	e5a5      	b.n	8025470 <_dtoa_r+0x94>
 8025924:	423d      	tst	r5, r7
 8025926:	d005      	beq.n	8025934 <_dtoa_r+0x558>
 8025928:	6832      	ldr	r2, [r6, #0]
 802592a:	6873      	ldr	r3, [r6, #4]
 802592c:	f7dc fe86 	bl	800263c <__aeabi_dmul>
 8025930:	003b      	movs	r3, r7
 8025932:	3401      	adds	r4, #1
 8025934:	106d      	asrs	r5, r5, #1
 8025936:	3608      	adds	r6, #8
 8025938:	e736      	b.n	80257a8 <_dtoa_r+0x3cc>
 802593a:	9b04      	ldr	r3, [sp, #16]
 802593c:	930c      	str	r3, [sp, #48]	@ 0x30
 802593e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025940:	e75a      	b.n	80257f8 <_dtoa_r+0x41c>
 8025942:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025944:	4b69      	ldr	r3, [pc, #420]	@ (8025aec <_dtoa_r+0x710>)
 8025946:	3a01      	subs	r2, #1
 8025948:	00d2      	lsls	r2, r2, #3
 802594a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802594c:	189b      	adds	r3, r3, r2
 802594e:	681a      	ldr	r2, [r3, #0]
 8025950:	685b      	ldr	r3, [r3, #4]
 8025952:	2900      	cmp	r1, #0
 8025954:	d04c      	beq.n	80259f0 <_dtoa_r+0x614>
 8025956:	2000      	movs	r0, #0
 8025958:	496b      	ldr	r1, [pc, #428]	@ (8025b08 <_dtoa_r+0x72c>)
 802595a:	f7dc fa2b 	bl	8001db4 <__aeabi_ddiv>
 802595e:	0032      	movs	r2, r6
 8025960:	003b      	movs	r3, r7
 8025962:	f7dd f933 	bl	8002bcc <__aeabi_dsub>
 8025966:	9a08      	ldr	r2, [sp, #32]
 8025968:	0006      	movs	r6, r0
 802596a:	4694      	mov	ip, r2
 802596c:	000f      	movs	r7, r1
 802596e:	9b08      	ldr	r3, [sp, #32]
 8025970:	9316      	str	r3, [sp, #88]	@ 0x58
 8025972:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025974:	4463      	add	r3, ip
 8025976:	9311      	str	r3, [sp, #68]	@ 0x44
 8025978:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802597a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802597c:	f7dd fce4 	bl	8003348 <__aeabi_d2iz>
 8025980:	0005      	movs	r5, r0
 8025982:	f7dd fd1d 	bl	80033c0 <__aeabi_i2d>
 8025986:	0002      	movs	r2, r0
 8025988:	000b      	movs	r3, r1
 802598a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802598c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802598e:	f7dd f91d 	bl	8002bcc <__aeabi_dsub>
 8025992:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025994:	3530      	adds	r5, #48	@ 0x30
 8025996:	1c5c      	adds	r4, r3, #1
 8025998:	701d      	strb	r5, [r3, #0]
 802599a:	0032      	movs	r2, r6
 802599c:	003b      	movs	r3, r7
 802599e:	900a      	str	r0, [sp, #40]	@ 0x28
 80259a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80259a2:	f7da fd8b 	bl	80004bc <__aeabi_dcmplt>
 80259a6:	2800      	cmp	r0, #0
 80259a8:	d16a      	bne.n	8025a80 <_dtoa_r+0x6a4>
 80259aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80259ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80259ae:	2000      	movs	r0, #0
 80259b0:	4950      	ldr	r1, [pc, #320]	@ (8025af4 <_dtoa_r+0x718>)
 80259b2:	f7dd f90b 	bl	8002bcc <__aeabi_dsub>
 80259b6:	0032      	movs	r2, r6
 80259b8:	003b      	movs	r3, r7
 80259ba:	f7da fd7f 	bl	80004bc <__aeabi_dcmplt>
 80259be:	2800      	cmp	r0, #0
 80259c0:	d000      	beq.n	80259c4 <_dtoa_r+0x5e8>
 80259c2:	e0a5      	b.n	8025b10 <_dtoa_r+0x734>
 80259c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80259c6:	42a3      	cmp	r3, r4
 80259c8:	d100      	bne.n	80259cc <_dtoa_r+0x5f0>
 80259ca:	e742      	b.n	8025852 <_dtoa_r+0x476>
 80259cc:	2200      	movs	r2, #0
 80259ce:	0030      	movs	r0, r6
 80259d0:	0039      	movs	r1, r7
 80259d2:	4b49      	ldr	r3, [pc, #292]	@ (8025af8 <_dtoa_r+0x71c>)
 80259d4:	f7dc fe32 	bl	800263c <__aeabi_dmul>
 80259d8:	2200      	movs	r2, #0
 80259da:	0006      	movs	r6, r0
 80259dc:	000f      	movs	r7, r1
 80259de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80259e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80259e2:	4b45      	ldr	r3, [pc, #276]	@ (8025af8 <_dtoa_r+0x71c>)
 80259e4:	f7dc fe2a 	bl	800263c <__aeabi_dmul>
 80259e8:	9416      	str	r4, [sp, #88]	@ 0x58
 80259ea:	900a      	str	r0, [sp, #40]	@ 0x28
 80259ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 80259ee:	e7c3      	b.n	8025978 <_dtoa_r+0x59c>
 80259f0:	0030      	movs	r0, r6
 80259f2:	0039      	movs	r1, r7
 80259f4:	f7dc fe22 	bl	800263c <__aeabi_dmul>
 80259f8:	9d08      	ldr	r5, [sp, #32]
 80259fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80259fc:	002b      	movs	r3, r5
 80259fe:	4694      	mov	ip, r2
 8025a00:	9016      	str	r0, [sp, #88]	@ 0x58
 8025a02:	9117      	str	r1, [sp, #92]	@ 0x5c
 8025a04:	4463      	add	r3, ip
 8025a06:	9319      	str	r3, [sp, #100]	@ 0x64
 8025a08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025a0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025a0c:	f7dd fc9c 	bl	8003348 <__aeabi_d2iz>
 8025a10:	0004      	movs	r4, r0
 8025a12:	f7dd fcd5 	bl	80033c0 <__aeabi_i2d>
 8025a16:	000b      	movs	r3, r1
 8025a18:	0002      	movs	r2, r0
 8025a1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025a1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025a1e:	f7dd f8d5 	bl	8002bcc <__aeabi_dsub>
 8025a22:	3430      	adds	r4, #48	@ 0x30
 8025a24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025a26:	702c      	strb	r4, [r5, #0]
 8025a28:	3501      	adds	r5, #1
 8025a2a:	0006      	movs	r6, r0
 8025a2c:	000f      	movs	r7, r1
 8025a2e:	42ab      	cmp	r3, r5
 8025a30:	d129      	bne.n	8025a86 <_dtoa_r+0x6aa>
 8025a32:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8025a34:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025a36:	9b08      	ldr	r3, [sp, #32]
 8025a38:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025a3a:	469c      	mov	ip, r3
 8025a3c:	2200      	movs	r2, #0
 8025a3e:	4b32      	ldr	r3, [pc, #200]	@ (8025b08 <_dtoa_r+0x72c>)
 8025a40:	4464      	add	r4, ip
 8025a42:	f7db fe53 	bl	80016ec <__aeabi_dadd>
 8025a46:	0002      	movs	r2, r0
 8025a48:	000b      	movs	r3, r1
 8025a4a:	0030      	movs	r0, r6
 8025a4c:	0039      	movs	r1, r7
 8025a4e:	f7da fd49 	bl	80004e4 <__aeabi_dcmpgt>
 8025a52:	2800      	cmp	r0, #0
 8025a54:	d15c      	bne.n	8025b10 <_dtoa_r+0x734>
 8025a56:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025a58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025a5a:	2000      	movs	r0, #0
 8025a5c:	492a      	ldr	r1, [pc, #168]	@ (8025b08 <_dtoa_r+0x72c>)
 8025a5e:	f7dd f8b5 	bl	8002bcc <__aeabi_dsub>
 8025a62:	0002      	movs	r2, r0
 8025a64:	000b      	movs	r3, r1
 8025a66:	0030      	movs	r0, r6
 8025a68:	0039      	movs	r1, r7
 8025a6a:	f7da fd27 	bl	80004bc <__aeabi_dcmplt>
 8025a6e:	2800      	cmp	r0, #0
 8025a70:	d100      	bne.n	8025a74 <_dtoa_r+0x698>
 8025a72:	e6ee      	b.n	8025852 <_dtoa_r+0x476>
 8025a74:	0023      	movs	r3, r4
 8025a76:	3c01      	subs	r4, #1
 8025a78:	7822      	ldrb	r2, [r4, #0]
 8025a7a:	2a30      	cmp	r2, #48	@ 0x30
 8025a7c:	d0fa      	beq.n	8025a74 <_dtoa_r+0x698>
 8025a7e:	001c      	movs	r4, r3
 8025a80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025a82:	9304      	str	r3, [sp, #16]
 8025a84:	e73e      	b.n	8025904 <_dtoa_r+0x528>
 8025a86:	2200      	movs	r2, #0
 8025a88:	4b1b      	ldr	r3, [pc, #108]	@ (8025af8 <_dtoa_r+0x71c>)
 8025a8a:	f7dc fdd7 	bl	800263c <__aeabi_dmul>
 8025a8e:	900a      	str	r0, [sp, #40]	@ 0x28
 8025a90:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025a92:	e7b9      	b.n	8025a08 <_dtoa_r+0x62c>
 8025a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a96:	2b00      	cmp	r3, #0
 8025a98:	d10c      	bne.n	8025ab4 <_dtoa_r+0x6d8>
 8025a9a:	9806      	ldr	r0, [sp, #24]
 8025a9c:	9907      	ldr	r1, [sp, #28]
 8025a9e:	2200      	movs	r2, #0
 8025aa0:	4b18      	ldr	r3, [pc, #96]	@ (8025b04 <_dtoa_r+0x728>)
 8025aa2:	f7dc fdcb 	bl	800263c <__aeabi_dmul>
 8025aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025aa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025aaa:	f7da fd25 	bl	80004f8 <__aeabi_dcmpge>
 8025aae:	2800      	cmp	r0, #0
 8025ab0:	d100      	bne.n	8025ab4 <_dtoa_r+0x6d8>
 8025ab2:	e164      	b.n	8025d7e <_dtoa_r+0x9a2>
 8025ab4:	2600      	movs	r6, #0
 8025ab6:	0037      	movs	r7, r6
 8025ab8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025aba:	9c08      	ldr	r4, [sp, #32]
 8025abc:	43db      	mvns	r3, r3
 8025abe:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ac0:	2300      	movs	r3, #0
 8025ac2:	9304      	str	r3, [sp, #16]
 8025ac4:	0031      	movs	r1, r6
 8025ac6:	9803      	ldr	r0, [sp, #12]
 8025ac8:	f000 ff32 	bl	8026930 <_Bfree>
 8025acc:	2f00      	cmp	r7, #0
 8025ace:	d0d7      	beq.n	8025a80 <_dtoa_r+0x6a4>
 8025ad0:	9b04      	ldr	r3, [sp, #16]
 8025ad2:	2b00      	cmp	r3, #0
 8025ad4:	d005      	beq.n	8025ae2 <_dtoa_r+0x706>
 8025ad6:	42bb      	cmp	r3, r7
 8025ad8:	d003      	beq.n	8025ae2 <_dtoa_r+0x706>
 8025ada:	0019      	movs	r1, r3
 8025adc:	9803      	ldr	r0, [sp, #12]
 8025ade:	f000 ff27 	bl	8026930 <_Bfree>
 8025ae2:	0039      	movs	r1, r7
 8025ae4:	9803      	ldr	r0, [sp, #12]
 8025ae6:	f000 ff23 	bl	8026930 <_Bfree>
 8025aea:	e7c9      	b.n	8025a80 <_dtoa_r+0x6a4>
 8025aec:	0802de00 	.word	0x0802de00
 8025af0:	0802ddd8 	.word	0x0802ddd8
 8025af4:	3ff00000 	.word	0x3ff00000
 8025af8:	40240000 	.word	0x40240000
 8025afc:	401c0000 	.word	0x401c0000
 8025b00:	fcc00000 	.word	0xfcc00000
 8025b04:	40140000 	.word	0x40140000
 8025b08:	3fe00000 	.word	0x3fe00000
 8025b0c:	9b04      	ldr	r3, [sp, #16]
 8025b0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b10:	0023      	movs	r3, r4
 8025b12:	001c      	movs	r4, r3
 8025b14:	3b01      	subs	r3, #1
 8025b16:	781a      	ldrb	r2, [r3, #0]
 8025b18:	2a39      	cmp	r2, #57	@ 0x39
 8025b1a:	d108      	bne.n	8025b2e <_dtoa_r+0x752>
 8025b1c:	9a08      	ldr	r2, [sp, #32]
 8025b1e:	429a      	cmp	r2, r3
 8025b20:	d1f7      	bne.n	8025b12 <_dtoa_r+0x736>
 8025b22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b24:	9908      	ldr	r1, [sp, #32]
 8025b26:	3201      	adds	r2, #1
 8025b28:	920c      	str	r2, [sp, #48]	@ 0x30
 8025b2a:	2230      	movs	r2, #48	@ 0x30
 8025b2c:	700a      	strb	r2, [r1, #0]
 8025b2e:	781a      	ldrb	r2, [r3, #0]
 8025b30:	3201      	adds	r2, #1
 8025b32:	701a      	strb	r2, [r3, #0]
 8025b34:	e7a4      	b.n	8025a80 <_dtoa_r+0x6a4>
 8025b36:	2200      	movs	r2, #0
 8025b38:	4bc6      	ldr	r3, [pc, #792]	@ (8025e54 <_dtoa_r+0xa78>)
 8025b3a:	f7dc fd7f 	bl	800263c <__aeabi_dmul>
 8025b3e:	2200      	movs	r2, #0
 8025b40:	2300      	movs	r3, #0
 8025b42:	0006      	movs	r6, r0
 8025b44:	000f      	movs	r7, r1
 8025b46:	f7da fcb3 	bl	80004b0 <__aeabi_dcmpeq>
 8025b4a:	2800      	cmp	r0, #0
 8025b4c:	d100      	bne.n	8025b50 <_dtoa_r+0x774>
 8025b4e:	e6a1      	b.n	8025894 <_dtoa_r+0x4b8>
 8025b50:	e6d8      	b.n	8025904 <_dtoa_r+0x528>
 8025b52:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025b54:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8025b56:	9c06      	ldr	r4, [sp, #24]
 8025b58:	2f00      	cmp	r7, #0
 8025b5a:	d014      	beq.n	8025b86 <_dtoa_r+0x7aa>
 8025b5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025b5e:	2a01      	cmp	r2, #1
 8025b60:	dd00      	ble.n	8025b64 <_dtoa_r+0x788>
 8025b62:	e0c8      	b.n	8025cf6 <_dtoa_r+0x91a>
 8025b64:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8025b66:	2a00      	cmp	r2, #0
 8025b68:	d100      	bne.n	8025b6c <_dtoa_r+0x790>
 8025b6a:	e0be      	b.n	8025cea <_dtoa_r+0x90e>
 8025b6c:	4aba      	ldr	r2, [pc, #744]	@ (8025e58 <_dtoa_r+0xa7c>)
 8025b6e:	189b      	adds	r3, r3, r2
 8025b70:	9a06      	ldr	r2, [sp, #24]
 8025b72:	2101      	movs	r1, #1
 8025b74:	18d2      	adds	r2, r2, r3
 8025b76:	9206      	str	r2, [sp, #24]
 8025b78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b7a:	9803      	ldr	r0, [sp, #12]
 8025b7c:	18d3      	adds	r3, r2, r3
 8025b7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025b80:	f000 ffda 	bl	8026b38 <__i2b>
 8025b84:	0007      	movs	r7, r0
 8025b86:	2c00      	cmp	r4, #0
 8025b88:	d00e      	beq.n	8025ba8 <_dtoa_r+0x7cc>
 8025b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025b8c:	2b00      	cmp	r3, #0
 8025b8e:	dd0b      	ble.n	8025ba8 <_dtoa_r+0x7cc>
 8025b90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025b92:	0023      	movs	r3, r4
 8025b94:	4294      	cmp	r4, r2
 8025b96:	dd00      	ble.n	8025b9a <_dtoa_r+0x7be>
 8025b98:	0013      	movs	r3, r2
 8025b9a:	9a06      	ldr	r2, [sp, #24]
 8025b9c:	1ae4      	subs	r4, r4, r3
 8025b9e:	1ad2      	subs	r2, r2, r3
 8025ba0:	9206      	str	r2, [sp, #24]
 8025ba2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ba4:	1ad3      	subs	r3, r2, r3
 8025ba6:	930d      	str	r3, [sp, #52]	@ 0x34
 8025ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	d01f      	beq.n	8025bee <_dtoa_r+0x812>
 8025bae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025bb0:	2b00      	cmp	r3, #0
 8025bb2:	d100      	bne.n	8025bb6 <_dtoa_r+0x7da>
 8025bb4:	e0b5      	b.n	8025d22 <_dtoa_r+0x946>
 8025bb6:	2d00      	cmp	r5, #0
 8025bb8:	d010      	beq.n	8025bdc <_dtoa_r+0x800>
 8025bba:	0039      	movs	r1, r7
 8025bbc:	002a      	movs	r2, r5
 8025bbe:	9803      	ldr	r0, [sp, #12]
 8025bc0:	f001 f884 	bl	8026ccc <__pow5mult>
 8025bc4:	9a05      	ldr	r2, [sp, #20]
 8025bc6:	0001      	movs	r1, r0
 8025bc8:	0007      	movs	r7, r0
 8025bca:	9803      	ldr	r0, [sp, #12]
 8025bcc:	f000 ffcc 	bl	8026b68 <__multiply>
 8025bd0:	0006      	movs	r6, r0
 8025bd2:	9905      	ldr	r1, [sp, #20]
 8025bd4:	9803      	ldr	r0, [sp, #12]
 8025bd6:	f000 feab 	bl	8026930 <_Bfree>
 8025bda:	9605      	str	r6, [sp, #20]
 8025bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025bde:	1b5a      	subs	r2, r3, r5
 8025be0:	42ab      	cmp	r3, r5
 8025be2:	d004      	beq.n	8025bee <_dtoa_r+0x812>
 8025be4:	9905      	ldr	r1, [sp, #20]
 8025be6:	9803      	ldr	r0, [sp, #12]
 8025be8:	f001 f870 	bl	8026ccc <__pow5mult>
 8025bec:	9005      	str	r0, [sp, #20]
 8025bee:	2101      	movs	r1, #1
 8025bf0:	9803      	ldr	r0, [sp, #12]
 8025bf2:	f000 ffa1 	bl	8026b38 <__i2b>
 8025bf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025bf8:	0006      	movs	r6, r0
 8025bfa:	2b00      	cmp	r3, #0
 8025bfc:	d100      	bne.n	8025c00 <_dtoa_r+0x824>
 8025bfe:	e1bc      	b.n	8025f7a <_dtoa_r+0xb9e>
 8025c00:	001a      	movs	r2, r3
 8025c02:	0001      	movs	r1, r0
 8025c04:	9803      	ldr	r0, [sp, #12]
 8025c06:	f001 f861 	bl	8026ccc <__pow5mult>
 8025c0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025c0c:	0006      	movs	r6, r0
 8025c0e:	2500      	movs	r5, #0
 8025c10:	2b01      	cmp	r3, #1
 8025c12:	dc16      	bgt.n	8025c42 <_dtoa_r+0x866>
 8025c14:	2500      	movs	r5, #0
 8025c16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025c18:	42ab      	cmp	r3, r5
 8025c1a:	d10e      	bne.n	8025c3a <_dtoa_r+0x85e>
 8025c1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025c1e:	031b      	lsls	r3, r3, #12
 8025c20:	42ab      	cmp	r3, r5
 8025c22:	d10a      	bne.n	8025c3a <_dtoa_r+0x85e>
 8025c24:	4b8d      	ldr	r3, [pc, #564]	@ (8025e5c <_dtoa_r+0xa80>)
 8025c26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025c28:	4213      	tst	r3, r2
 8025c2a:	d006      	beq.n	8025c3a <_dtoa_r+0x85e>
 8025c2c:	9b06      	ldr	r3, [sp, #24]
 8025c2e:	3501      	adds	r5, #1
 8025c30:	3301      	adds	r3, #1
 8025c32:	9306      	str	r3, [sp, #24]
 8025c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025c36:	3301      	adds	r3, #1
 8025c38:	930d      	str	r3, [sp, #52]	@ 0x34
 8025c3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025c3c:	2001      	movs	r0, #1
 8025c3e:	2b00      	cmp	r3, #0
 8025c40:	d008      	beq.n	8025c54 <_dtoa_r+0x878>
 8025c42:	6933      	ldr	r3, [r6, #16]
 8025c44:	3303      	adds	r3, #3
 8025c46:	009b      	lsls	r3, r3, #2
 8025c48:	18f3      	adds	r3, r6, r3
 8025c4a:	6858      	ldr	r0, [r3, #4]
 8025c4c:	f000 ff24 	bl	8026a98 <__hi0bits>
 8025c50:	2320      	movs	r3, #32
 8025c52:	1a18      	subs	r0, r3, r0
 8025c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025c56:	1818      	adds	r0, r3, r0
 8025c58:	0002      	movs	r2, r0
 8025c5a:	231f      	movs	r3, #31
 8025c5c:	401a      	ands	r2, r3
 8025c5e:	4218      	tst	r0, r3
 8025c60:	d065      	beq.n	8025d2e <_dtoa_r+0x952>
 8025c62:	3301      	adds	r3, #1
 8025c64:	1a9b      	subs	r3, r3, r2
 8025c66:	2b04      	cmp	r3, #4
 8025c68:	dd5d      	ble.n	8025d26 <_dtoa_r+0x94a>
 8025c6a:	231c      	movs	r3, #28
 8025c6c:	1a9b      	subs	r3, r3, r2
 8025c6e:	9a06      	ldr	r2, [sp, #24]
 8025c70:	18e4      	adds	r4, r4, r3
 8025c72:	18d2      	adds	r2, r2, r3
 8025c74:	9206      	str	r2, [sp, #24]
 8025c76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c78:	18d3      	adds	r3, r2, r3
 8025c7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025c7c:	9b06      	ldr	r3, [sp, #24]
 8025c7e:	2b00      	cmp	r3, #0
 8025c80:	dd05      	ble.n	8025c8e <_dtoa_r+0x8b2>
 8025c82:	001a      	movs	r2, r3
 8025c84:	9905      	ldr	r1, [sp, #20]
 8025c86:	9803      	ldr	r0, [sp, #12]
 8025c88:	f001 f87c 	bl	8026d84 <__lshift>
 8025c8c:	9005      	str	r0, [sp, #20]
 8025c8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	dd05      	ble.n	8025ca0 <_dtoa_r+0x8c4>
 8025c94:	0031      	movs	r1, r6
 8025c96:	001a      	movs	r2, r3
 8025c98:	9803      	ldr	r0, [sp, #12]
 8025c9a:	f001 f873 	bl	8026d84 <__lshift>
 8025c9e:	0006      	movs	r6, r0
 8025ca0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d045      	beq.n	8025d32 <_dtoa_r+0x956>
 8025ca6:	0031      	movs	r1, r6
 8025ca8:	9805      	ldr	r0, [sp, #20]
 8025caa:	f001 f8d7 	bl	8026e5c <__mcmp>
 8025cae:	2800      	cmp	r0, #0
 8025cb0:	da3f      	bge.n	8025d32 <_dtoa_r+0x956>
 8025cb2:	9b04      	ldr	r3, [sp, #16]
 8025cb4:	220a      	movs	r2, #10
 8025cb6:	3b01      	subs	r3, #1
 8025cb8:	930c      	str	r3, [sp, #48]	@ 0x30
 8025cba:	9905      	ldr	r1, [sp, #20]
 8025cbc:	2300      	movs	r3, #0
 8025cbe:	9803      	ldr	r0, [sp, #12]
 8025cc0:	f000 fe5a 	bl	8026978 <__multadd>
 8025cc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025cc6:	9005      	str	r0, [sp, #20]
 8025cc8:	2b00      	cmp	r3, #0
 8025cca:	d100      	bne.n	8025cce <_dtoa_r+0x8f2>
 8025ccc:	e15c      	b.n	8025f88 <_dtoa_r+0xbac>
 8025cce:	2300      	movs	r3, #0
 8025cd0:	0039      	movs	r1, r7
 8025cd2:	220a      	movs	r2, #10
 8025cd4:	9803      	ldr	r0, [sp, #12]
 8025cd6:	f000 fe4f 	bl	8026978 <__multadd>
 8025cda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025cdc:	0007      	movs	r7, r0
 8025cde:	2b00      	cmp	r3, #0
 8025ce0:	dc55      	bgt.n	8025d8e <_dtoa_r+0x9b2>
 8025ce2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025ce4:	2b02      	cmp	r3, #2
 8025ce6:	dc2d      	bgt.n	8025d44 <_dtoa_r+0x968>
 8025ce8:	e051      	b.n	8025d8e <_dtoa_r+0x9b2>
 8025cea:	2336      	movs	r3, #54	@ 0x36
 8025cec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025cee:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8025cf0:	9c06      	ldr	r4, [sp, #24]
 8025cf2:	1a9b      	subs	r3, r3, r2
 8025cf4:	e73c      	b.n	8025b70 <_dtoa_r+0x794>
 8025cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025cf8:	1e5d      	subs	r5, r3, #1
 8025cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025cfc:	42ab      	cmp	r3, r5
 8025cfe:	db08      	blt.n	8025d12 <_dtoa_r+0x936>
 8025d00:	1b5d      	subs	r5, r3, r5
 8025d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d04:	9c06      	ldr	r4, [sp, #24]
 8025d06:	2b00      	cmp	r3, #0
 8025d08:	db00      	blt.n	8025d0c <_dtoa_r+0x930>
 8025d0a:	e731      	b.n	8025b70 <_dtoa_r+0x794>
 8025d0c:	1ae4      	subs	r4, r4, r3
 8025d0e:	2300      	movs	r3, #0
 8025d10:	e72e      	b.n	8025b70 <_dtoa_r+0x794>
 8025d12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025d14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025d16:	1aeb      	subs	r3, r5, r3
 8025d18:	18d3      	adds	r3, r2, r3
 8025d1a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8025d1c:	9314      	str	r3, [sp, #80]	@ 0x50
 8025d1e:	2500      	movs	r5, #0
 8025d20:	e7ef      	b.n	8025d02 <_dtoa_r+0x926>
 8025d22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025d24:	e75e      	b.n	8025be4 <_dtoa_r+0x808>
 8025d26:	2b04      	cmp	r3, #4
 8025d28:	d0a8      	beq.n	8025c7c <_dtoa_r+0x8a0>
 8025d2a:	331c      	adds	r3, #28
 8025d2c:	e79f      	b.n	8025c6e <_dtoa_r+0x892>
 8025d2e:	0013      	movs	r3, r2
 8025d30:	e7fb      	b.n	8025d2a <_dtoa_r+0x94e>
 8025d32:	9b04      	ldr	r3, [sp, #16]
 8025d34:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d38:	930e      	str	r3, [sp, #56]	@ 0x38
 8025d3a:	2b00      	cmp	r3, #0
 8025d3c:	dc23      	bgt.n	8025d86 <_dtoa_r+0x9aa>
 8025d3e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025d40:	2b02      	cmp	r3, #2
 8025d42:	dd20      	ble.n	8025d86 <_dtoa_r+0x9aa>
 8025d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d46:	2b00      	cmp	r3, #0
 8025d48:	d000      	beq.n	8025d4c <_dtoa_r+0x970>
 8025d4a:	e6b5      	b.n	8025ab8 <_dtoa_r+0x6dc>
 8025d4c:	0031      	movs	r1, r6
 8025d4e:	2205      	movs	r2, #5
 8025d50:	9803      	ldr	r0, [sp, #12]
 8025d52:	f000 fe11 	bl	8026978 <__multadd>
 8025d56:	0006      	movs	r6, r0
 8025d58:	0001      	movs	r1, r0
 8025d5a:	9805      	ldr	r0, [sp, #20]
 8025d5c:	f001 f87e 	bl	8026e5c <__mcmp>
 8025d60:	2800      	cmp	r0, #0
 8025d62:	dc00      	bgt.n	8025d66 <_dtoa_r+0x98a>
 8025d64:	e6a8      	b.n	8025ab8 <_dtoa_r+0x6dc>
 8025d66:	9b08      	ldr	r3, [sp, #32]
 8025d68:	9a08      	ldr	r2, [sp, #32]
 8025d6a:	1c5c      	adds	r4, r3, #1
 8025d6c:	2331      	movs	r3, #49	@ 0x31
 8025d6e:	7013      	strb	r3, [r2, #0]
 8025d70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d72:	3301      	adds	r3, #1
 8025d74:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d76:	e6a3      	b.n	8025ac0 <_dtoa_r+0x6e4>
 8025d78:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8025d7a:	0037      	movs	r7, r6
 8025d7c:	e7f3      	b.n	8025d66 <_dtoa_r+0x98a>
 8025d7e:	9b04      	ldr	r3, [sp, #16]
 8025d80:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8025d82:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d84:	e7f9      	b.n	8025d7a <_dtoa_r+0x99e>
 8025d86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	d100      	bne.n	8025d8e <_dtoa_r+0x9b2>
 8025d8c:	e100      	b.n	8025f90 <_dtoa_r+0xbb4>
 8025d8e:	2c00      	cmp	r4, #0
 8025d90:	dd05      	ble.n	8025d9e <_dtoa_r+0x9c2>
 8025d92:	0039      	movs	r1, r7
 8025d94:	0022      	movs	r2, r4
 8025d96:	9803      	ldr	r0, [sp, #12]
 8025d98:	f000 fff4 	bl	8026d84 <__lshift>
 8025d9c:	0007      	movs	r7, r0
 8025d9e:	0038      	movs	r0, r7
 8025da0:	2d00      	cmp	r5, #0
 8025da2:	d018      	beq.n	8025dd6 <_dtoa_r+0x9fa>
 8025da4:	6879      	ldr	r1, [r7, #4]
 8025da6:	9803      	ldr	r0, [sp, #12]
 8025da8:	f000 fd7e 	bl	80268a8 <_Balloc>
 8025dac:	1e04      	subs	r4, r0, #0
 8025dae:	d105      	bne.n	8025dbc <_dtoa_r+0x9e0>
 8025db0:	0022      	movs	r2, r4
 8025db2:	4b2b      	ldr	r3, [pc, #172]	@ (8025e60 <_dtoa_r+0xa84>)
 8025db4:	482b      	ldr	r0, [pc, #172]	@ (8025e64 <_dtoa_r+0xa88>)
 8025db6:	492c      	ldr	r1, [pc, #176]	@ (8025e68 <_dtoa_r+0xa8c>)
 8025db8:	f7ff fb25 	bl	8025406 <_dtoa_r+0x2a>
 8025dbc:	0039      	movs	r1, r7
 8025dbe:	693a      	ldr	r2, [r7, #16]
 8025dc0:	310c      	adds	r1, #12
 8025dc2:	3202      	adds	r2, #2
 8025dc4:	0092      	lsls	r2, r2, #2
 8025dc6:	300c      	adds	r0, #12
 8025dc8:	f7ff fa6a 	bl	80252a0 <memcpy>
 8025dcc:	2201      	movs	r2, #1
 8025dce:	0021      	movs	r1, r4
 8025dd0:	9803      	ldr	r0, [sp, #12]
 8025dd2:	f000 ffd7 	bl	8026d84 <__lshift>
 8025dd6:	9b08      	ldr	r3, [sp, #32]
 8025dd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025dda:	9306      	str	r3, [sp, #24]
 8025ddc:	3b01      	subs	r3, #1
 8025dde:	189b      	adds	r3, r3, r2
 8025de0:	2201      	movs	r2, #1
 8025de2:	9704      	str	r7, [sp, #16]
 8025de4:	0007      	movs	r7, r0
 8025de6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025de8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025dea:	4013      	ands	r3, r2
 8025dec:	930e      	str	r3, [sp, #56]	@ 0x38
 8025dee:	0031      	movs	r1, r6
 8025df0:	9805      	ldr	r0, [sp, #20]
 8025df2:	f7ff fa65 	bl	80252c0 <quorem>
 8025df6:	9904      	ldr	r1, [sp, #16]
 8025df8:	0005      	movs	r5, r0
 8025dfa:	900a      	str	r0, [sp, #40]	@ 0x28
 8025dfc:	9805      	ldr	r0, [sp, #20]
 8025dfe:	f001 f82d 	bl	8026e5c <__mcmp>
 8025e02:	003a      	movs	r2, r7
 8025e04:	900d      	str	r0, [sp, #52]	@ 0x34
 8025e06:	0031      	movs	r1, r6
 8025e08:	9803      	ldr	r0, [sp, #12]
 8025e0a:	f001 f843 	bl	8026e94 <__mdiff>
 8025e0e:	2201      	movs	r2, #1
 8025e10:	68c3      	ldr	r3, [r0, #12]
 8025e12:	0004      	movs	r4, r0
 8025e14:	3530      	adds	r5, #48	@ 0x30
 8025e16:	9209      	str	r2, [sp, #36]	@ 0x24
 8025e18:	2b00      	cmp	r3, #0
 8025e1a:	d104      	bne.n	8025e26 <_dtoa_r+0xa4a>
 8025e1c:	0001      	movs	r1, r0
 8025e1e:	9805      	ldr	r0, [sp, #20]
 8025e20:	f001 f81c 	bl	8026e5c <__mcmp>
 8025e24:	9009      	str	r0, [sp, #36]	@ 0x24
 8025e26:	0021      	movs	r1, r4
 8025e28:	9803      	ldr	r0, [sp, #12]
 8025e2a:	f000 fd81 	bl	8026930 <_Bfree>
 8025e2e:	9b06      	ldr	r3, [sp, #24]
 8025e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025e32:	1c5c      	adds	r4, r3, #1
 8025e34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025e36:	4313      	orrs	r3, r2
 8025e38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025e3a:	4313      	orrs	r3, r2
 8025e3c:	d116      	bne.n	8025e6c <_dtoa_r+0xa90>
 8025e3e:	2d39      	cmp	r5, #57	@ 0x39
 8025e40:	d02f      	beq.n	8025ea2 <_dtoa_r+0xac6>
 8025e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	dd01      	ble.n	8025e4c <_dtoa_r+0xa70>
 8025e48:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8025e4a:	3531      	adds	r5, #49	@ 0x31
 8025e4c:	9b06      	ldr	r3, [sp, #24]
 8025e4e:	701d      	strb	r5, [r3, #0]
 8025e50:	e638      	b.n	8025ac4 <_dtoa_r+0x6e8>
 8025e52:	46c0      	nop			@ (mov r8, r8)
 8025e54:	40240000 	.word	0x40240000
 8025e58:	00000433 	.word	0x00000433
 8025e5c:	7ff00000 	.word	0x7ff00000
 8025e60:	0802dd01 	.word	0x0802dd01
 8025e64:	0802dca9 	.word	0x0802dca9
 8025e68:	000002ef 	.word	0x000002ef
 8025e6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025e6e:	2b00      	cmp	r3, #0
 8025e70:	db04      	blt.n	8025e7c <_dtoa_r+0xaa0>
 8025e72:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025e74:	4313      	orrs	r3, r2
 8025e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025e78:	4313      	orrs	r3, r2
 8025e7a:	d11e      	bne.n	8025eba <_dtoa_r+0xade>
 8025e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e7e:	2b00      	cmp	r3, #0
 8025e80:	dde4      	ble.n	8025e4c <_dtoa_r+0xa70>
 8025e82:	9905      	ldr	r1, [sp, #20]
 8025e84:	2201      	movs	r2, #1
 8025e86:	9803      	ldr	r0, [sp, #12]
 8025e88:	f000 ff7c 	bl	8026d84 <__lshift>
 8025e8c:	0031      	movs	r1, r6
 8025e8e:	9005      	str	r0, [sp, #20]
 8025e90:	f000 ffe4 	bl	8026e5c <__mcmp>
 8025e94:	2800      	cmp	r0, #0
 8025e96:	dc02      	bgt.n	8025e9e <_dtoa_r+0xac2>
 8025e98:	d1d8      	bne.n	8025e4c <_dtoa_r+0xa70>
 8025e9a:	07eb      	lsls	r3, r5, #31
 8025e9c:	d5d6      	bpl.n	8025e4c <_dtoa_r+0xa70>
 8025e9e:	2d39      	cmp	r5, #57	@ 0x39
 8025ea0:	d1d2      	bne.n	8025e48 <_dtoa_r+0xa6c>
 8025ea2:	2339      	movs	r3, #57	@ 0x39
 8025ea4:	9a06      	ldr	r2, [sp, #24]
 8025ea6:	7013      	strb	r3, [r2, #0]
 8025ea8:	0023      	movs	r3, r4
 8025eaa:	001c      	movs	r4, r3
 8025eac:	3b01      	subs	r3, #1
 8025eae:	781a      	ldrb	r2, [r3, #0]
 8025eb0:	2a39      	cmp	r2, #57	@ 0x39
 8025eb2:	d04f      	beq.n	8025f54 <_dtoa_r+0xb78>
 8025eb4:	3201      	adds	r2, #1
 8025eb6:	701a      	strb	r2, [r3, #0]
 8025eb8:	e604      	b.n	8025ac4 <_dtoa_r+0x6e8>
 8025eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ebc:	2b00      	cmp	r3, #0
 8025ebe:	dd03      	ble.n	8025ec8 <_dtoa_r+0xaec>
 8025ec0:	2d39      	cmp	r5, #57	@ 0x39
 8025ec2:	d0ee      	beq.n	8025ea2 <_dtoa_r+0xac6>
 8025ec4:	3501      	adds	r5, #1
 8025ec6:	e7c1      	b.n	8025e4c <_dtoa_r+0xa70>
 8025ec8:	9b06      	ldr	r3, [sp, #24]
 8025eca:	9a06      	ldr	r2, [sp, #24]
 8025ecc:	701d      	strb	r5, [r3, #0]
 8025ece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ed0:	4293      	cmp	r3, r2
 8025ed2:	d02a      	beq.n	8025f2a <_dtoa_r+0xb4e>
 8025ed4:	2300      	movs	r3, #0
 8025ed6:	220a      	movs	r2, #10
 8025ed8:	9905      	ldr	r1, [sp, #20]
 8025eda:	9803      	ldr	r0, [sp, #12]
 8025edc:	f000 fd4c 	bl	8026978 <__multadd>
 8025ee0:	9b04      	ldr	r3, [sp, #16]
 8025ee2:	9005      	str	r0, [sp, #20]
 8025ee4:	42bb      	cmp	r3, r7
 8025ee6:	d109      	bne.n	8025efc <_dtoa_r+0xb20>
 8025ee8:	2300      	movs	r3, #0
 8025eea:	220a      	movs	r2, #10
 8025eec:	9904      	ldr	r1, [sp, #16]
 8025eee:	9803      	ldr	r0, [sp, #12]
 8025ef0:	f000 fd42 	bl	8026978 <__multadd>
 8025ef4:	9004      	str	r0, [sp, #16]
 8025ef6:	0007      	movs	r7, r0
 8025ef8:	9406      	str	r4, [sp, #24]
 8025efa:	e778      	b.n	8025dee <_dtoa_r+0xa12>
 8025efc:	9904      	ldr	r1, [sp, #16]
 8025efe:	2300      	movs	r3, #0
 8025f00:	220a      	movs	r2, #10
 8025f02:	9803      	ldr	r0, [sp, #12]
 8025f04:	f000 fd38 	bl	8026978 <__multadd>
 8025f08:	2300      	movs	r3, #0
 8025f0a:	9004      	str	r0, [sp, #16]
 8025f0c:	220a      	movs	r2, #10
 8025f0e:	0039      	movs	r1, r7
 8025f10:	9803      	ldr	r0, [sp, #12]
 8025f12:	f000 fd31 	bl	8026978 <__multadd>
 8025f16:	e7ee      	b.n	8025ef6 <_dtoa_r+0xb1a>
 8025f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025f1a:	2401      	movs	r4, #1
 8025f1c:	2b00      	cmp	r3, #0
 8025f1e:	dd00      	ble.n	8025f22 <_dtoa_r+0xb46>
 8025f20:	001c      	movs	r4, r3
 8025f22:	9b08      	ldr	r3, [sp, #32]
 8025f24:	191c      	adds	r4, r3, r4
 8025f26:	2300      	movs	r3, #0
 8025f28:	9304      	str	r3, [sp, #16]
 8025f2a:	9905      	ldr	r1, [sp, #20]
 8025f2c:	2201      	movs	r2, #1
 8025f2e:	9803      	ldr	r0, [sp, #12]
 8025f30:	f000 ff28 	bl	8026d84 <__lshift>
 8025f34:	0031      	movs	r1, r6
 8025f36:	9005      	str	r0, [sp, #20]
 8025f38:	f000 ff90 	bl	8026e5c <__mcmp>
 8025f3c:	2800      	cmp	r0, #0
 8025f3e:	dcb3      	bgt.n	8025ea8 <_dtoa_r+0xacc>
 8025f40:	d101      	bne.n	8025f46 <_dtoa_r+0xb6a>
 8025f42:	07ed      	lsls	r5, r5, #31
 8025f44:	d4b0      	bmi.n	8025ea8 <_dtoa_r+0xacc>
 8025f46:	0023      	movs	r3, r4
 8025f48:	001c      	movs	r4, r3
 8025f4a:	3b01      	subs	r3, #1
 8025f4c:	781a      	ldrb	r2, [r3, #0]
 8025f4e:	2a30      	cmp	r2, #48	@ 0x30
 8025f50:	d0fa      	beq.n	8025f48 <_dtoa_r+0xb6c>
 8025f52:	e5b7      	b.n	8025ac4 <_dtoa_r+0x6e8>
 8025f54:	9a08      	ldr	r2, [sp, #32]
 8025f56:	429a      	cmp	r2, r3
 8025f58:	d1a7      	bne.n	8025eaa <_dtoa_r+0xace>
 8025f5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f5c:	3301      	adds	r3, #1
 8025f5e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025f60:	2331      	movs	r3, #49	@ 0x31
 8025f62:	7013      	strb	r3, [r2, #0]
 8025f64:	e5ae      	b.n	8025ac4 <_dtoa_r+0x6e8>
 8025f66:	4b15      	ldr	r3, [pc, #84]	@ (8025fbc <_dtoa_r+0xbe0>)
 8025f68:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025f6a:	9308      	str	r3, [sp, #32]
 8025f6c:	4b14      	ldr	r3, [pc, #80]	@ (8025fc0 <_dtoa_r+0xbe4>)
 8025f6e:	2a00      	cmp	r2, #0
 8025f70:	d001      	beq.n	8025f76 <_dtoa_r+0xb9a>
 8025f72:	f7ff fa7b 	bl	802546c <_dtoa_r+0x90>
 8025f76:	f7ff fa7b 	bl	8025470 <_dtoa_r+0x94>
 8025f7a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025f7c:	2b01      	cmp	r3, #1
 8025f7e:	dc00      	bgt.n	8025f82 <_dtoa_r+0xba6>
 8025f80:	e648      	b.n	8025c14 <_dtoa_r+0x838>
 8025f82:	2001      	movs	r0, #1
 8025f84:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8025f86:	e665      	b.n	8025c54 <_dtoa_r+0x878>
 8025f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025f8a:	2b00      	cmp	r3, #0
 8025f8c:	dc00      	bgt.n	8025f90 <_dtoa_r+0xbb4>
 8025f8e:	e6d6      	b.n	8025d3e <_dtoa_r+0x962>
 8025f90:	2400      	movs	r4, #0
 8025f92:	0031      	movs	r1, r6
 8025f94:	9805      	ldr	r0, [sp, #20]
 8025f96:	f7ff f993 	bl	80252c0 <quorem>
 8025f9a:	9b08      	ldr	r3, [sp, #32]
 8025f9c:	3030      	adds	r0, #48	@ 0x30
 8025f9e:	5518      	strb	r0, [r3, r4]
 8025fa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025fa2:	3401      	adds	r4, #1
 8025fa4:	0005      	movs	r5, r0
 8025fa6:	429c      	cmp	r4, r3
 8025fa8:	dab6      	bge.n	8025f18 <_dtoa_r+0xb3c>
 8025faa:	2300      	movs	r3, #0
 8025fac:	220a      	movs	r2, #10
 8025fae:	9905      	ldr	r1, [sp, #20]
 8025fb0:	9803      	ldr	r0, [sp, #12]
 8025fb2:	f000 fce1 	bl	8026978 <__multadd>
 8025fb6:	9005      	str	r0, [sp, #20]
 8025fb8:	e7eb      	b.n	8025f92 <_dtoa_r+0xbb6>
 8025fba:	46c0      	nop			@ (mov r8, r8)
 8025fbc:	0802dc85 	.word	0x0802dc85
 8025fc0:	0802dc8d 	.word	0x0802dc8d

08025fc4 <_free_r>:
 8025fc4:	b570      	push	{r4, r5, r6, lr}
 8025fc6:	0005      	movs	r5, r0
 8025fc8:	1e0c      	subs	r4, r1, #0
 8025fca:	d010      	beq.n	8025fee <_free_r+0x2a>
 8025fcc:	3c04      	subs	r4, #4
 8025fce:	6823      	ldr	r3, [r4, #0]
 8025fd0:	2b00      	cmp	r3, #0
 8025fd2:	da00      	bge.n	8025fd6 <_free_r+0x12>
 8025fd4:	18e4      	adds	r4, r4, r3
 8025fd6:	0028      	movs	r0, r5
 8025fd8:	f000 fc56 	bl	8026888 <__malloc_lock>
 8025fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8026054 <_free_r+0x90>)
 8025fde:	6813      	ldr	r3, [r2, #0]
 8025fe0:	2b00      	cmp	r3, #0
 8025fe2:	d105      	bne.n	8025ff0 <_free_r+0x2c>
 8025fe4:	6063      	str	r3, [r4, #4]
 8025fe6:	6014      	str	r4, [r2, #0]
 8025fe8:	0028      	movs	r0, r5
 8025fea:	f000 fc55 	bl	8026898 <__malloc_unlock>
 8025fee:	bd70      	pop	{r4, r5, r6, pc}
 8025ff0:	42a3      	cmp	r3, r4
 8025ff2:	d908      	bls.n	8026006 <_free_r+0x42>
 8025ff4:	6820      	ldr	r0, [r4, #0]
 8025ff6:	1821      	adds	r1, r4, r0
 8025ff8:	428b      	cmp	r3, r1
 8025ffa:	d1f3      	bne.n	8025fe4 <_free_r+0x20>
 8025ffc:	6819      	ldr	r1, [r3, #0]
 8025ffe:	685b      	ldr	r3, [r3, #4]
 8026000:	1809      	adds	r1, r1, r0
 8026002:	6021      	str	r1, [r4, #0]
 8026004:	e7ee      	b.n	8025fe4 <_free_r+0x20>
 8026006:	001a      	movs	r2, r3
 8026008:	685b      	ldr	r3, [r3, #4]
 802600a:	2b00      	cmp	r3, #0
 802600c:	d001      	beq.n	8026012 <_free_r+0x4e>
 802600e:	42a3      	cmp	r3, r4
 8026010:	d9f9      	bls.n	8026006 <_free_r+0x42>
 8026012:	6811      	ldr	r1, [r2, #0]
 8026014:	1850      	adds	r0, r2, r1
 8026016:	42a0      	cmp	r0, r4
 8026018:	d10b      	bne.n	8026032 <_free_r+0x6e>
 802601a:	6820      	ldr	r0, [r4, #0]
 802601c:	1809      	adds	r1, r1, r0
 802601e:	1850      	adds	r0, r2, r1
 8026020:	6011      	str	r1, [r2, #0]
 8026022:	4283      	cmp	r3, r0
 8026024:	d1e0      	bne.n	8025fe8 <_free_r+0x24>
 8026026:	6818      	ldr	r0, [r3, #0]
 8026028:	685b      	ldr	r3, [r3, #4]
 802602a:	1841      	adds	r1, r0, r1
 802602c:	6011      	str	r1, [r2, #0]
 802602e:	6053      	str	r3, [r2, #4]
 8026030:	e7da      	b.n	8025fe8 <_free_r+0x24>
 8026032:	42a0      	cmp	r0, r4
 8026034:	d902      	bls.n	802603c <_free_r+0x78>
 8026036:	230c      	movs	r3, #12
 8026038:	602b      	str	r3, [r5, #0]
 802603a:	e7d5      	b.n	8025fe8 <_free_r+0x24>
 802603c:	6820      	ldr	r0, [r4, #0]
 802603e:	1821      	adds	r1, r4, r0
 8026040:	428b      	cmp	r3, r1
 8026042:	d103      	bne.n	802604c <_free_r+0x88>
 8026044:	6819      	ldr	r1, [r3, #0]
 8026046:	685b      	ldr	r3, [r3, #4]
 8026048:	1809      	adds	r1, r1, r0
 802604a:	6021      	str	r1, [r4, #0]
 802604c:	6063      	str	r3, [r4, #4]
 802604e:	6054      	str	r4, [r2, #4]
 8026050:	e7ca      	b.n	8025fe8 <_free_r+0x24>
 8026052:	46c0      	nop			@ (mov r8, r8)
 8026054:	2000363c 	.word	0x2000363c

08026058 <rshift>:
 8026058:	0002      	movs	r2, r0
 802605a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802605c:	6904      	ldr	r4, [r0, #16]
 802605e:	b085      	sub	sp, #20
 8026060:	3214      	adds	r2, #20
 8026062:	114b      	asrs	r3, r1, #5
 8026064:	0016      	movs	r6, r2
 8026066:	9302      	str	r3, [sp, #8]
 8026068:	429c      	cmp	r4, r3
 802606a:	dd31      	ble.n	80260d0 <rshift+0x78>
 802606c:	261f      	movs	r6, #31
 802606e:	000f      	movs	r7, r1
 8026070:	009b      	lsls	r3, r3, #2
 8026072:	00a5      	lsls	r5, r4, #2
 8026074:	18d3      	adds	r3, r2, r3
 8026076:	4037      	ands	r7, r6
 8026078:	1955      	adds	r5, r2, r5
 802607a:	9300      	str	r3, [sp, #0]
 802607c:	9701      	str	r7, [sp, #4]
 802607e:	4231      	tst	r1, r6
 8026080:	d10d      	bne.n	802609e <rshift+0x46>
 8026082:	0016      	movs	r6, r2
 8026084:	0019      	movs	r1, r3
 8026086:	428d      	cmp	r5, r1
 8026088:	d836      	bhi.n	80260f8 <rshift+0xa0>
 802608a:	9b00      	ldr	r3, [sp, #0]
 802608c:	2600      	movs	r6, #0
 802608e:	3b03      	subs	r3, #3
 8026090:	429d      	cmp	r5, r3
 8026092:	d302      	bcc.n	802609a <rshift+0x42>
 8026094:	9b02      	ldr	r3, [sp, #8]
 8026096:	1ae4      	subs	r4, r4, r3
 8026098:	00a6      	lsls	r6, r4, #2
 802609a:	1996      	adds	r6, r2, r6
 802609c:	e018      	b.n	80260d0 <rshift+0x78>
 802609e:	2120      	movs	r1, #32
 80260a0:	9e01      	ldr	r6, [sp, #4]
 80260a2:	9f01      	ldr	r7, [sp, #4]
 80260a4:	1b89      	subs	r1, r1, r6
 80260a6:	9e00      	ldr	r6, [sp, #0]
 80260a8:	9103      	str	r1, [sp, #12]
 80260aa:	ce02      	ldmia	r6!, {r1}
 80260ac:	4694      	mov	ip, r2
 80260ae:	40f9      	lsrs	r1, r7
 80260b0:	42b5      	cmp	r5, r6
 80260b2:	d816      	bhi.n	80260e2 <rshift+0x8a>
 80260b4:	9b00      	ldr	r3, [sp, #0]
 80260b6:	2600      	movs	r6, #0
 80260b8:	3301      	adds	r3, #1
 80260ba:	429d      	cmp	r5, r3
 80260bc:	d303      	bcc.n	80260c6 <rshift+0x6e>
 80260be:	9b02      	ldr	r3, [sp, #8]
 80260c0:	1ae4      	subs	r4, r4, r3
 80260c2:	00a6      	lsls	r6, r4, #2
 80260c4:	3e04      	subs	r6, #4
 80260c6:	1996      	adds	r6, r2, r6
 80260c8:	6031      	str	r1, [r6, #0]
 80260ca:	2900      	cmp	r1, #0
 80260cc:	d000      	beq.n	80260d0 <rshift+0x78>
 80260ce:	3604      	adds	r6, #4
 80260d0:	1ab1      	subs	r1, r6, r2
 80260d2:	1089      	asrs	r1, r1, #2
 80260d4:	6101      	str	r1, [r0, #16]
 80260d6:	4296      	cmp	r6, r2
 80260d8:	d101      	bne.n	80260de <rshift+0x86>
 80260da:	2300      	movs	r3, #0
 80260dc:	6143      	str	r3, [r0, #20]
 80260de:	b005      	add	sp, #20
 80260e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260e2:	6837      	ldr	r7, [r6, #0]
 80260e4:	9b03      	ldr	r3, [sp, #12]
 80260e6:	409f      	lsls	r7, r3
 80260e8:	430f      	orrs	r7, r1
 80260ea:	4661      	mov	r1, ip
 80260ec:	c180      	stmia	r1!, {r7}
 80260ee:	468c      	mov	ip, r1
 80260f0:	9b01      	ldr	r3, [sp, #4]
 80260f2:	ce02      	ldmia	r6!, {r1}
 80260f4:	40d9      	lsrs	r1, r3
 80260f6:	e7db      	b.n	80260b0 <rshift+0x58>
 80260f8:	c980      	ldmia	r1!, {r7}
 80260fa:	c680      	stmia	r6!, {r7}
 80260fc:	e7c3      	b.n	8026086 <rshift+0x2e>

080260fe <__hexdig_fun>:
 80260fe:	0002      	movs	r2, r0
 8026100:	3a30      	subs	r2, #48	@ 0x30
 8026102:	0003      	movs	r3, r0
 8026104:	2a09      	cmp	r2, #9
 8026106:	d802      	bhi.n	802610e <__hexdig_fun+0x10>
 8026108:	3b20      	subs	r3, #32
 802610a:	b2d8      	uxtb	r0, r3
 802610c:	4770      	bx	lr
 802610e:	0002      	movs	r2, r0
 8026110:	3a61      	subs	r2, #97	@ 0x61
 8026112:	2a05      	cmp	r2, #5
 8026114:	d801      	bhi.n	802611a <__hexdig_fun+0x1c>
 8026116:	3b47      	subs	r3, #71	@ 0x47
 8026118:	e7f7      	b.n	802610a <__hexdig_fun+0xc>
 802611a:	001a      	movs	r2, r3
 802611c:	3a41      	subs	r2, #65	@ 0x41
 802611e:	2000      	movs	r0, #0
 8026120:	2a05      	cmp	r2, #5
 8026122:	d8f3      	bhi.n	802610c <__hexdig_fun+0xe>
 8026124:	3b27      	subs	r3, #39	@ 0x27
 8026126:	e7f0      	b.n	802610a <__hexdig_fun+0xc>

08026128 <__gethex>:
 8026128:	b5f0      	push	{r4, r5, r6, r7, lr}
 802612a:	b089      	sub	sp, #36	@ 0x24
 802612c:	9307      	str	r3, [sp, #28]
 802612e:	680b      	ldr	r3, [r1, #0]
 8026130:	9201      	str	r2, [sp, #4]
 8026132:	9003      	str	r0, [sp, #12]
 8026134:	9106      	str	r1, [sp, #24]
 8026136:	1c9a      	adds	r2, r3, #2
 8026138:	0011      	movs	r1, r2
 802613a:	3201      	adds	r2, #1
 802613c:	1e50      	subs	r0, r2, #1
 802613e:	7800      	ldrb	r0, [r0, #0]
 8026140:	2830      	cmp	r0, #48	@ 0x30
 8026142:	d0f9      	beq.n	8026138 <__gethex+0x10>
 8026144:	1acb      	subs	r3, r1, r3
 8026146:	3b02      	subs	r3, #2
 8026148:	9305      	str	r3, [sp, #20]
 802614a:	9100      	str	r1, [sp, #0]
 802614c:	f7ff ffd7 	bl	80260fe <__hexdig_fun>
 8026150:	2300      	movs	r3, #0
 8026152:	001d      	movs	r5, r3
 8026154:	9302      	str	r3, [sp, #8]
 8026156:	4298      	cmp	r0, r3
 8026158:	d11e      	bne.n	8026198 <__gethex+0x70>
 802615a:	2201      	movs	r2, #1
 802615c:	49a6      	ldr	r1, [pc, #664]	@ (80263f8 <__gethex+0x2d0>)
 802615e:	9800      	ldr	r0, [sp, #0]
 8026160:	f7fe ffd8 	bl	8025114 <strncmp>
 8026164:	0007      	movs	r7, r0
 8026166:	42a8      	cmp	r0, r5
 8026168:	d000      	beq.n	802616c <__gethex+0x44>
 802616a:	e06a      	b.n	8026242 <__gethex+0x11a>
 802616c:	9b00      	ldr	r3, [sp, #0]
 802616e:	7858      	ldrb	r0, [r3, #1]
 8026170:	1c5c      	adds	r4, r3, #1
 8026172:	f7ff ffc4 	bl	80260fe <__hexdig_fun>
 8026176:	2301      	movs	r3, #1
 8026178:	9302      	str	r3, [sp, #8]
 802617a:	42a8      	cmp	r0, r5
 802617c:	d02f      	beq.n	80261de <__gethex+0xb6>
 802617e:	9400      	str	r4, [sp, #0]
 8026180:	9b00      	ldr	r3, [sp, #0]
 8026182:	7818      	ldrb	r0, [r3, #0]
 8026184:	2830      	cmp	r0, #48	@ 0x30
 8026186:	d009      	beq.n	802619c <__gethex+0x74>
 8026188:	f7ff ffb9 	bl	80260fe <__hexdig_fun>
 802618c:	4242      	negs	r2, r0
 802618e:	4142      	adcs	r2, r0
 8026190:	2301      	movs	r3, #1
 8026192:	0025      	movs	r5, r4
 8026194:	9202      	str	r2, [sp, #8]
 8026196:	9305      	str	r3, [sp, #20]
 8026198:	9c00      	ldr	r4, [sp, #0]
 802619a:	e004      	b.n	80261a6 <__gethex+0x7e>
 802619c:	9b00      	ldr	r3, [sp, #0]
 802619e:	3301      	adds	r3, #1
 80261a0:	9300      	str	r3, [sp, #0]
 80261a2:	e7ed      	b.n	8026180 <__gethex+0x58>
 80261a4:	3401      	adds	r4, #1
 80261a6:	7820      	ldrb	r0, [r4, #0]
 80261a8:	f7ff ffa9 	bl	80260fe <__hexdig_fun>
 80261ac:	1e07      	subs	r7, r0, #0
 80261ae:	d1f9      	bne.n	80261a4 <__gethex+0x7c>
 80261b0:	2201      	movs	r2, #1
 80261b2:	0020      	movs	r0, r4
 80261b4:	4990      	ldr	r1, [pc, #576]	@ (80263f8 <__gethex+0x2d0>)
 80261b6:	f7fe ffad 	bl	8025114 <strncmp>
 80261ba:	2800      	cmp	r0, #0
 80261bc:	d10d      	bne.n	80261da <__gethex+0xb2>
 80261be:	2d00      	cmp	r5, #0
 80261c0:	d106      	bne.n	80261d0 <__gethex+0xa8>
 80261c2:	3401      	adds	r4, #1
 80261c4:	0025      	movs	r5, r4
 80261c6:	7820      	ldrb	r0, [r4, #0]
 80261c8:	f7ff ff99 	bl	80260fe <__hexdig_fun>
 80261cc:	2800      	cmp	r0, #0
 80261ce:	d102      	bne.n	80261d6 <__gethex+0xae>
 80261d0:	1b2d      	subs	r5, r5, r4
 80261d2:	00af      	lsls	r7, r5, #2
 80261d4:	e003      	b.n	80261de <__gethex+0xb6>
 80261d6:	3401      	adds	r4, #1
 80261d8:	e7f5      	b.n	80261c6 <__gethex+0x9e>
 80261da:	2d00      	cmp	r5, #0
 80261dc:	d1f8      	bne.n	80261d0 <__gethex+0xa8>
 80261de:	2220      	movs	r2, #32
 80261e0:	7823      	ldrb	r3, [r4, #0]
 80261e2:	0026      	movs	r6, r4
 80261e4:	4393      	bics	r3, r2
 80261e6:	2b50      	cmp	r3, #80	@ 0x50
 80261e8:	d11d      	bne.n	8026226 <__gethex+0xfe>
 80261ea:	7863      	ldrb	r3, [r4, #1]
 80261ec:	2b2b      	cmp	r3, #43	@ 0x2b
 80261ee:	d02d      	beq.n	802624c <__gethex+0x124>
 80261f0:	2b2d      	cmp	r3, #45	@ 0x2d
 80261f2:	d02f      	beq.n	8026254 <__gethex+0x12c>
 80261f4:	2300      	movs	r3, #0
 80261f6:	1c66      	adds	r6, r4, #1
 80261f8:	9304      	str	r3, [sp, #16]
 80261fa:	7830      	ldrb	r0, [r6, #0]
 80261fc:	f7ff ff7f 	bl	80260fe <__hexdig_fun>
 8026200:	1e43      	subs	r3, r0, #1
 8026202:	b2db      	uxtb	r3, r3
 8026204:	0005      	movs	r5, r0
 8026206:	2b18      	cmp	r3, #24
 8026208:	d82a      	bhi.n	8026260 <__gethex+0x138>
 802620a:	7870      	ldrb	r0, [r6, #1]
 802620c:	f7ff ff77 	bl	80260fe <__hexdig_fun>
 8026210:	1e43      	subs	r3, r0, #1
 8026212:	b2db      	uxtb	r3, r3
 8026214:	3601      	adds	r6, #1
 8026216:	3d10      	subs	r5, #16
 8026218:	2b18      	cmp	r3, #24
 802621a:	d91d      	bls.n	8026258 <__gethex+0x130>
 802621c:	9b04      	ldr	r3, [sp, #16]
 802621e:	2b00      	cmp	r3, #0
 8026220:	d000      	beq.n	8026224 <__gethex+0xfc>
 8026222:	426d      	negs	r5, r5
 8026224:	197f      	adds	r7, r7, r5
 8026226:	9b06      	ldr	r3, [sp, #24]
 8026228:	601e      	str	r6, [r3, #0]
 802622a:	9b02      	ldr	r3, [sp, #8]
 802622c:	2b00      	cmp	r3, #0
 802622e:	d019      	beq.n	8026264 <__gethex+0x13c>
 8026230:	9b05      	ldr	r3, [sp, #20]
 8026232:	2606      	movs	r6, #6
 8026234:	425a      	negs	r2, r3
 8026236:	4153      	adcs	r3, r2
 8026238:	425b      	negs	r3, r3
 802623a:	401e      	ands	r6, r3
 802623c:	0030      	movs	r0, r6
 802623e:	b009      	add	sp, #36	@ 0x24
 8026240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026242:	2301      	movs	r3, #1
 8026244:	2700      	movs	r7, #0
 8026246:	9c00      	ldr	r4, [sp, #0]
 8026248:	9302      	str	r3, [sp, #8]
 802624a:	e7c8      	b.n	80261de <__gethex+0xb6>
 802624c:	2300      	movs	r3, #0
 802624e:	9304      	str	r3, [sp, #16]
 8026250:	1ca6      	adds	r6, r4, #2
 8026252:	e7d2      	b.n	80261fa <__gethex+0xd2>
 8026254:	2301      	movs	r3, #1
 8026256:	e7fa      	b.n	802624e <__gethex+0x126>
 8026258:	230a      	movs	r3, #10
 802625a:	435d      	muls	r5, r3
 802625c:	182d      	adds	r5, r5, r0
 802625e:	e7d4      	b.n	802620a <__gethex+0xe2>
 8026260:	0026      	movs	r6, r4
 8026262:	e7e0      	b.n	8026226 <__gethex+0xfe>
 8026264:	9b00      	ldr	r3, [sp, #0]
 8026266:	9902      	ldr	r1, [sp, #8]
 8026268:	1ae3      	subs	r3, r4, r3
 802626a:	3b01      	subs	r3, #1
 802626c:	2b07      	cmp	r3, #7
 802626e:	dc0a      	bgt.n	8026286 <__gethex+0x15e>
 8026270:	9803      	ldr	r0, [sp, #12]
 8026272:	f000 fb19 	bl	80268a8 <_Balloc>
 8026276:	1e05      	subs	r5, r0, #0
 8026278:	d108      	bne.n	802628c <__gethex+0x164>
 802627a:	002a      	movs	r2, r5
 802627c:	21e4      	movs	r1, #228	@ 0xe4
 802627e:	4b5f      	ldr	r3, [pc, #380]	@ (80263fc <__gethex+0x2d4>)
 8026280:	485f      	ldr	r0, [pc, #380]	@ (8026400 <__gethex+0x2d8>)
 8026282:	f001 fbf1 	bl	8027a68 <__assert_func>
 8026286:	3101      	adds	r1, #1
 8026288:	105b      	asrs	r3, r3, #1
 802628a:	e7ef      	b.n	802626c <__gethex+0x144>
 802628c:	0003      	movs	r3, r0
 802628e:	3314      	adds	r3, #20
 8026290:	9302      	str	r3, [sp, #8]
 8026292:	9305      	str	r3, [sp, #20]
 8026294:	2300      	movs	r3, #0
 8026296:	001e      	movs	r6, r3
 8026298:	9304      	str	r3, [sp, #16]
 802629a:	9b00      	ldr	r3, [sp, #0]
 802629c:	42a3      	cmp	r3, r4
 802629e:	d338      	bcc.n	8026312 <__gethex+0x1ea>
 80262a0:	9c05      	ldr	r4, [sp, #20]
 80262a2:	9b02      	ldr	r3, [sp, #8]
 80262a4:	c440      	stmia	r4!, {r6}
 80262a6:	1ae4      	subs	r4, r4, r3
 80262a8:	10a4      	asrs	r4, r4, #2
 80262aa:	0030      	movs	r0, r6
 80262ac:	612c      	str	r4, [r5, #16]
 80262ae:	f000 fbf3 	bl	8026a98 <__hi0bits>
 80262b2:	9b01      	ldr	r3, [sp, #4]
 80262b4:	0164      	lsls	r4, r4, #5
 80262b6:	681b      	ldr	r3, [r3, #0]
 80262b8:	1a26      	subs	r6, r4, r0
 80262ba:	9300      	str	r3, [sp, #0]
 80262bc:	429e      	cmp	r6, r3
 80262be:	dd52      	ble.n	8026366 <__gethex+0x23e>
 80262c0:	1af6      	subs	r6, r6, r3
 80262c2:	0031      	movs	r1, r6
 80262c4:	0028      	movs	r0, r5
 80262c6:	f000 ff96 	bl	80271f6 <__any_on>
 80262ca:	1e04      	subs	r4, r0, #0
 80262cc:	d00f      	beq.n	80262ee <__gethex+0x1c6>
 80262ce:	2401      	movs	r4, #1
 80262d0:	231f      	movs	r3, #31
 80262d2:	0020      	movs	r0, r4
 80262d4:	1e72      	subs	r2, r6, #1
 80262d6:	4013      	ands	r3, r2
 80262d8:	4098      	lsls	r0, r3
 80262da:	0003      	movs	r3, r0
 80262dc:	1151      	asrs	r1, r2, #5
 80262de:	9802      	ldr	r0, [sp, #8]
 80262e0:	0089      	lsls	r1, r1, #2
 80262e2:	5809      	ldr	r1, [r1, r0]
 80262e4:	4219      	tst	r1, r3
 80262e6:	d002      	beq.n	80262ee <__gethex+0x1c6>
 80262e8:	42a2      	cmp	r2, r4
 80262ea:	dc34      	bgt.n	8026356 <__gethex+0x22e>
 80262ec:	2402      	movs	r4, #2
 80262ee:	0031      	movs	r1, r6
 80262f0:	0028      	movs	r0, r5
 80262f2:	f7ff feb1 	bl	8026058 <rshift>
 80262f6:	19bf      	adds	r7, r7, r6
 80262f8:	9b01      	ldr	r3, [sp, #4]
 80262fa:	689b      	ldr	r3, [r3, #8]
 80262fc:	42bb      	cmp	r3, r7
 80262fe:	da42      	bge.n	8026386 <__gethex+0x25e>
 8026300:	0029      	movs	r1, r5
 8026302:	9803      	ldr	r0, [sp, #12]
 8026304:	f000 fb14 	bl	8026930 <_Bfree>
 8026308:	2300      	movs	r3, #0
 802630a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802630c:	26a3      	movs	r6, #163	@ 0xa3
 802630e:	6013      	str	r3, [r2, #0]
 8026310:	e794      	b.n	802623c <__gethex+0x114>
 8026312:	3c01      	subs	r4, #1
 8026314:	7823      	ldrb	r3, [r4, #0]
 8026316:	2b2e      	cmp	r3, #46	@ 0x2e
 8026318:	d012      	beq.n	8026340 <__gethex+0x218>
 802631a:	9b04      	ldr	r3, [sp, #16]
 802631c:	2b20      	cmp	r3, #32
 802631e:	d104      	bne.n	802632a <__gethex+0x202>
 8026320:	9b05      	ldr	r3, [sp, #20]
 8026322:	c340      	stmia	r3!, {r6}
 8026324:	2600      	movs	r6, #0
 8026326:	9305      	str	r3, [sp, #20]
 8026328:	9604      	str	r6, [sp, #16]
 802632a:	7820      	ldrb	r0, [r4, #0]
 802632c:	f7ff fee7 	bl	80260fe <__hexdig_fun>
 8026330:	230f      	movs	r3, #15
 8026332:	4018      	ands	r0, r3
 8026334:	9b04      	ldr	r3, [sp, #16]
 8026336:	4098      	lsls	r0, r3
 8026338:	3304      	adds	r3, #4
 802633a:	4306      	orrs	r6, r0
 802633c:	9304      	str	r3, [sp, #16]
 802633e:	e7ac      	b.n	802629a <__gethex+0x172>
 8026340:	9b00      	ldr	r3, [sp, #0]
 8026342:	42a3      	cmp	r3, r4
 8026344:	d8e9      	bhi.n	802631a <__gethex+0x1f2>
 8026346:	2201      	movs	r2, #1
 8026348:	0020      	movs	r0, r4
 802634a:	492b      	ldr	r1, [pc, #172]	@ (80263f8 <__gethex+0x2d0>)
 802634c:	f7fe fee2 	bl	8025114 <strncmp>
 8026350:	2800      	cmp	r0, #0
 8026352:	d1e2      	bne.n	802631a <__gethex+0x1f2>
 8026354:	e7a1      	b.n	802629a <__gethex+0x172>
 8026356:	0028      	movs	r0, r5
 8026358:	1eb1      	subs	r1, r6, #2
 802635a:	f000 ff4c 	bl	80271f6 <__any_on>
 802635e:	2800      	cmp	r0, #0
 8026360:	d0c4      	beq.n	80262ec <__gethex+0x1c4>
 8026362:	2403      	movs	r4, #3
 8026364:	e7c3      	b.n	80262ee <__gethex+0x1c6>
 8026366:	9b00      	ldr	r3, [sp, #0]
 8026368:	2400      	movs	r4, #0
 802636a:	429e      	cmp	r6, r3
 802636c:	dac4      	bge.n	80262f8 <__gethex+0x1d0>
 802636e:	1b9e      	subs	r6, r3, r6
 8026370:	0029      	movs	r1, r5
 8026372:	0032      	movs	r2, r6
 8026374:	9803      	ldr	r0, [sp, #12]
 8026376:	f000 fd05 	bl	8026d84 <__lshift>
 802637a:	0003      	movs	r3, r0
 802637c:	3314      	adds	r3, #20
 802637e:	0005      	movs	r5, r0
 8026380:	1bbf      	subs	r7, r7, r6
 8026382:	9302      	str	r3, [sp, #8]
 8026384:	e7b8      	b.n	80262f8 <__gethex+0x1d0>
 8026386:	9b01      	ldr	r3, [sp, #4]
 8026388:	685e      	ldr	r6, [r3, #4]
 802638a:	42be      	cmp	r6, r7
 802638c:	dd6f      	ble.n	802646e <__gethex+0x346>
 802638e:	9b00      	ldr	r3, [sp, #0]
 8026390:	1bf6      	subs	r6, r6, r7
 8026392:	42b3      	cmp	r3, r6
 8026394:	dc36      	bgt.n	8026404 <__gethex+0x2dc>
 8026396:	9b01      	ldr	r3, [sp, #4]
 8026398:	68db      	ldr	r3, [r3, #12]
 802639a:	2b02      	cmp	r3, #2
 802639c:	d024      	beq.n	80263e8 <__gethex+0x2c0>
 802639e:	2b03      	cmp	r3, #3
 80263a0:	d026      	beq.n	80263f0 <__gethex+0x2c8>
 80263a2:	2b01      	cmp	r3, #1
 80263a4:	d117      	bne.n	80263d6 <__gethex+0x2ae>
 80263a6:	9b00      	ldr	r3, [sp, #0]
 80263a8:	42b3      	cmp	r3, r6
 80263aa:	d114      	bne.n	80263d6 <__gethex+0x2ae>
 80263ac:	2b01      	cmp	r3, #1
 80263ae:	d10b      	bne.n	80263c8 <__gethex+0x2a0>
 80263b0:	9b01      	ldr	r3, [sp, #4]
 80263b2:	9a07      	ldr	r2, [sp, #28]
 80263b4:	685b      	ldr	r3, [r3, #4]
 80263b6:	2662      	movs	r6, #98	@ 0x62
 80263b8:	6013      	str	r3, [r2, #0]
 80263ba:	2301      	movs	r3, #1
 80263bc:	9a02      	ldr	r2, [sp, #8]
 80263be:	612b      	str	r3, [r5, #16]
 80263c0:	6013      	str	r3, [r2, #0]
 80263c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80263c4:	601d      	str	r5, [r3, #0]
 80263c6:	e739      	b.n	802623c <__gethex+0x114>
 80263c8:	9900      	ldr	r1, [sp, #0]
 80263ca:	0028      	movs	r0, r5
 80263cc:	3901      	subs	r1, #1
 80263ce:	f000 ff12 	bl	80271f6 <__any_on>
 80263d2:	2800      	cmp	r0, #0
 80263d4:	d1ec      	bne.n	80263b0 <__gethex+0x288>
 80263d6:	0029      	movs	r1, r5
 80263d8:	9803      	ldr	r0, [sp, #12]
 80263da:	f000 faa9 	bl	8026930 <_Bfree>
 80263de:	2300      	movs	r3, #0
 80263e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80263e2:	2650      	movs	r6, #80	@ 0x50
 80263e4:	6013      	str	r3, [r2, #0]
 80263e6:	e729      	b.n	802623c <__gethex+0x114>
 80263e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80263ea:	2b00      	cmp	r3, #0
 80263ec:	d1f3      	bne.n	80263d6 <__gethex+0x2ae>
 80263ee:	e7df      	b.n	80263b0 <__gethex+0x288>
 80263f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80263f2:	2b00      	cmp	r3, #0
 80263f4:	d1dc      	bne.n	80263b0 <__gethex+0x288>
 80263f6:	e7ee      	b.n	80263d6 <__gethex+0x2ae>
 80263f8:	0802daf4 	.word	0x0802daf4
 80263fc:	0802dd01 	.word	0x0802dd01
 8026400:	0802dd12 	.word	0x0802dd12
 8026404:	1e77      	subs	r7, r6, #1
 8026406:	2c00      	cmp	r4, #0
 8026408:	d12f      	bne.n	802646a <__gethex+0x342>
 802640a:	2f00      	cmp	r7, #0
 802640c:	d004      	beq.n	8026418 <__gethex+0x2f0>
 802640e:	0039      	movs	r1, r7
 8026410:	0028      	movs	r0, r5
 8026412:	f000 fef0 	bl	80271f6 <__any_on>
 8026416:	0004      	movs	r4, r0
 8026418:	231f      	movs	r3, #31
 802641a:	117a      	asrs	r2, r7, #5
 802641c:	401f      	ands	r7, r3
 802641e:	3b1e      	subs	r3, #30
 8026420:	40bb      	lsls	r3, r7
 8026422:	9902      	ldr	r1, [sp, #8]
 8026424:	0092      	lsls	r2, r2, #2
 8026426:	5852      	ldr	r2, [r2, r1]
 8026428:	421a      	tst	r2, r3
 802642a:	d001      	beq.n	8026430 <__gethex+0x308>
 802642c:	2302      	movs	r3, #2
 802642e:	431c      	orrs	r4, r3
 8026430:	9b00      	ldr	r3, [sp, #0]
 8026432:	0031      	movs	r1, r6
 8026434:	1b9b      	subs	r3, r3, r6
 8026436:	2602      	movs	r6, #2
 8026438:	0028      	movs	r0, r5
 802643a:	9300      	str	r3, [sp, #0]
 802643c:	f7ff fe0c 	bl	8026058 <rshift>
 8026440:	9b01      	ldr	r3, [sp, #4]
 8026442:	685f      	ldr	r7, [r3, #4]
 8026444:	2c00      	cmp	r4, #0
 8026446:	d03f      	beq.n	80264c8 <__gethex+0x3a0>
 8026448:	9b01      	ldr	r3, [sp, #4]
 802644a:	68db      	ldr	r3, [r3, #12]
 802644c:	2b02      	cmp	r3, #2
 802644e:	d010      	beq.n	8026472 <__gethex+0x34a>
 8026450:	2b03      	cmp	r3, #3
 8026452:	d012      	beq.n	802647a <__gethex+0x352>
 8026454:	2b01      	cmp	r3, #1
 8026456:	d106      	bne.n	8026466 <__gethex+0x33e>
 8026458:	07a2      	lsls	r2, r4, #30
 802645a:	d504      	bpl.n	8026466 <__gethex+0x33e>
 802645c:	9a02      	ldr	r2, [sp, #8]
 802645e:	6812      	ldr	r2, [r2, #0]
 8026460:	4314      	orrs	r4, r2
 8026462:	421c      	tst	r4, r3
 8026464:	d10c      	bne.n	8026480 <__gethex+0x358>
 8026466:	2310      	movs	r3, #16
 8026468:	e02d      	b.n	80264c6 <__gethex+0x39e>
 802646a:	2401      	movs	r4, #1
 802646c:	e7d4      	b.n	8026418 <__gethex+0x2f0>
 802646e:	2601      	movs	r6, #1
 8026470:	e7e8      	b.n	8026444 <__gethex+0x31c>
 8026472:	2301      	movs	r3, #1
 8026474:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026476:	1a9b      	subs	r3, r3, r2
 8026478:	930f      	str	r3, [sp, #60]	@ 0x3c
 802647a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802647c:	2b00      	cmp	r3, #0
 802647e:	d0f2      	beq.n	8026466 <__gethex+0x33e>
 8026480:	692b      	ldr	r3, [r5, #16]
 8026482:	2000      	movs	r0, #0
 8026484:	9302      	str	r3, [sp, #8]
 8026486:	009b      	lsls	r3, r3, #2
 8026488:	9304      	str	r3, [sp, #16]
 802648a:	002b      	movs	r3, r5
 802648c:	9a04      	ldr	r2, [sp, #16]
 802648e:	3314      	adds	r3, #20
 8026490:	1899      	adds	r1, r3, r2
 8026492:	681a      	ldr	r2, [r3, #0]
 8026494:	1c54      	adds	r4, r2, #1
 8026496:	d01c      	beq.n	80264d2 <__gethex+0x3aa>
 8026498:	3201      	adds	r2, #1
 802649a:	601a      	str	r2, [r3, #0]
 802649c:	002b      	movs	r3, r5
 802649e:	3314      	adds	r3, #20
 80264a0:	2e02      	cmp	r6, #2
 80264a2:	d13f      	bne.n	8026524 <__gethex+0x3fc>
 80264a4:	9a01      	ldr	r2, [sp, #4]
 80264a6:	9900      	ldr	r1, [sp, #0]
 80264a8:	6812      	ldr	r2, [r2, #0]
 80264aa:	3a01      	subs	r2, #1
 80264ac:	428a      	cmp	r2, r1
 80264ae:	d109      	bne.n	80264c4 <__gethex+0x39c>
 80264b0:	000a      	movs	r2, r1
 80264b2:	201f      	movs	r0, #31
 80264b4:	4010      	ands	r0, r2
 80264b6:	2201      	movs	r2, #1
 80264b8:	4082      	lsls	r2, r0
 80264ba:	1149      	asrs	r1, r1, #5
 80264bc:	0089      	lsls	r1, r1, #2
 80264be:	58cb      	ldr	r3, [r1, r3]
 80264c0:	4213      	tst	r3, r2
 80264c2:	d13d      	bne.n	8026540 <__gethex+0x418>
 80264c4:	2320      	movs	r3, #32
 80264c6:	431e      	orrs	r6, r3
 80264c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80264ca:	601d      	str	r5, [r3, #0]
 80264cc:	9b07      	ldr	r3, [sp, #28]
 80264ce:	601f      	str	r7, [r3, #0]
 80264d0:	e6b4      	b.n	802623c <__gethex+0x114>
 80264d2:	c301      	stmia	r3!, {r0}
 80264d4:	4299      	cmp	r1, r3
 80264d6:	d8dc      	bhi.n	8026492 <__gethex+0x36a>
 80264d8:	68ab      	ldr	r3, [r5, #8]
 80264da:	9a02      	ldr	r2, [sp, #8]
 80264dc:	429a      	cmp	r2, r3
 80264de:	db18      	blt.n	8026512 <__gethex+0x3ea>
 80264e0:	6869      	ldr	r1, [r5, #4]
 80264e2:	9803      	ldr	r0, [sp, #12]
 80264e4:	3101      	adds	r1, #1
 80264e6:	f000 f9df 	bl	80268a8 <_Balloc>
 80264ea:	1e04      	subs	r4, r0, #0
 80264ec:	d104      	bne.n	80264f8 <__gethex+0x3d0>
 80264ee:	0022      	movs	r2, r4
 80264f0:	2184      	movs	r1, #132	@ 0x84
 80264f2:	4b1d      	ldr	r3, [pc, #116]	@ (8026568 <__gethex+0x440>)
 80264f4:	481d      	ldr	r0, [pc, #116]	@ (802656c <__gethex+0x444>)
 80264f6:	e6c4      	b.n	8026282 <__gethex+0x15a>
 80264f8:	0029      	movs	r1, r5
 80264fa:	692a      	ldr	r2, [r5, #16]
 80264fc:	310c      	adds	r1, #12
 80264fe:	3202      	adds	r2, #2
 8026500:	0092      	lsls	r2, r2, #2
 8026502:	300c      	adds	r0, #12
 8026504:	f7fe fecc 	bl	80252a0 <memcpy>
 8026508:	0029      	movs	r1, r5
 802650a:	9803      	ldr	r0, [sp, #12]
 802650c:	f000 fa10 	bl	8026930 <_Bfree>
 8026510:	0025      	movs	r5, r4
 8026512:	692b      	ldr	r3, [r5, #16]
 8026514:	1c5a      	adds	r2, r3, #1
 8026516:	612a      	str	r2, [r5, #16]
 8026518:	2201      	movs	r2, #1
 802651a:	3304      	adds	r3, #4
 802651c:	009b      	lsls	r3, r3, #2
 802651e:	18eb      	adds	r3, r5, r3
 8026520:	605a      	str	r2, [r3, #4]
 8026522:	e7bb      	b.n	802649c <__gethex+0x374>
 8026524:	692a      	ldr	r2, [r5, #16]
 8026526:	9902      	ldr	r1, [sp, #8]
 8026528:	428a      	cmp	r2, r1
 802652a:	dd0b      	ble.n	8026544 <__gethex+0x41c>
 802652c:	2101      	movs	r1, #1
 802652e:	0028      	movs	r0, r5
 8026530:	f7ff fd92 	bl	8026058 <rshift>
 8026534:	9b01      	ldr	r3, [sp, #4]
 8026536:	3701      	adds	r7, #1
 8026538:	689b      	ldr	r3, [r3, #8]
 802653a:	42bb      	cmp	r3, r7
 802653c:	da00      	bge.n	8026540 <__gethex+0x418>
 802653e:	e6df      	b.n	8026300 <__gethex+0x1d8>
 8026540:	2601      	movs	r6, #1
 8026542:	e7bf      	b.n	80264c4 <__gethex+0x39c>
 8026544:	221f      	movs	r2, #31
 8026546:	9c00      	ldr	r4, [sp, #0]
 8026548:	9900      	ldr	r1, [sp, #0]
 802654a:	4014      	ands	r4, r2
 802654c:	4211      	tst	r1, r2
 802654e:	d0f7      	beq.n	8026540 <__gethex+0x418>
 8026550:	9a04      	ldr	r2, [sp, #16]
 8026552:	189b      	adds	r3, r3, r2
 8026554:	3b04      	subs	r3, #4
 8026556:	6818      	ldr	r0, [r3, #0]
 8026558:	f000 fa9e 	bl	8026a98 <__hi0bits>
 802655c:	2320      	movs	r3, #32
 802655e:	1b1b      	subs	r3, r3, r4
 8026560:	4298      	cmp	r0, r3
 8026562:	dbe3      	blt.n	802652c <__gethex+0x404>
 8026564:	e7ec      	b.n	8026540 <__gethex+0x418>
 8026566:	46c0      	nop			@ (mov r8, r8)
 8026568:	0802dd01 	.word	0x0802dd01
 802656c:	0802dd12 	.word	0x0802dd12

08026570 <L_shift>:
 8026570:	2308      	movs	r3, #8
 8026572:	b570      	push	{r4, r5, r6, lr}
 8026574:	2520      	movs	r5, #32
 8026576:	1a9a      	subs	r2, r3, r2
 8026578:	0092      	lsls	r2, r2, #2
 802657a:	1aad      	subs	r5, r5, r2
 802657c:	6843      	ldr	r3, [r0, #4]
 802657e:	6804      	ldr	r4, [r0, #0]
 8026580:	001e      	movs	r6, r3
 8026582:	40ae      	lsls	r6, r5
 8026584:	40d3      	lsrs	r3, r2
 8026586:	4334      	orrs	r4, r6
 8026588:	6004      	str	r4, [r0, #0]
 802658a:	6043      	str	r3, [r0, #4]
 802658c:	3004      	adds	r0, #4
 802658e:	4288      	cmp	r0, r1
 8026590:	d3f4      	bcc.n	802657c <L_shift+0xc>
 8026592:	bd70      	pop	{r4, r5, r6, pc}

08026594 <__match>:
 8026594:	b530      	push	{r4, r5, lr}
 8026596:	6803      	ldr	r3, [r0, #0]
 8026598:	780c      	ldrb	r4, [r1, #0]
 802659a:	3301      	adds	r3, #1
 802659c:	2c00      	cmp	r4, #0
 802659e:	d102      	bne.n	80265a6 <__match+0x12>
 80265a0:	6003      	str	r3, [r0, #0]
 80265a2:	2001      	movs	r0, #1
 80265a4:	bd30      	pop	{r4, r5, pc}
 80265a6:	781a      	ldrb	r2, [r3, #0]
 80265a8:	0015      	movs	r5, r2
 80265aa:	3d41      	subs	r5, #65	@ 0x41
 80265ac:	2d19      	cmp	r5, #25
 80265ae:	d800      	bhi.n	80265b2 <__match+0x1e>
 80265b0:	3220      	adds	r2, #32
 80265b2:	3101      	adds	r1, #1
 80265b4:	42a2      	cmp	r2, r4
 80265b6:	d0ef      	beq.n	8026598 <__match+0x4>
 80265b8:	2000      	movs	r0, #0
 80265ba:	e7f3      	b.n	80265a4 <__match+0x10>

080265bc <__hexnan>:
 80265bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265be:	680b      	ldr	r3, [r1, #0]
 80265c0:	b08b      	sub	sp, #44	@ 0x2c
 80265c2:	9201      	str	r2, [sp, #4]
 80265c4:	9901      	ldr	r1, [sp, #4]
 80265c6:	115a      	asrs	r2, r3, #5
 80265c8:	0092      	lsls	r2, r2, #2
 80265ca:	188a      	adds	r2, r1, r2
 80265cc:	9202      	str	r2, [sp, #8]
 80265ce:	0019      	movs	r1, r3
 80265d0:	221f      	movs	r2, #31
 80265d2:	4011      	ands	r1, r2
 80265d4:	9008      	str	r0, [sp, #32]
 80265d6:	9106      	str	r1, [sp, #24]
 80265d8:	4213      	tst	r3, r2
 80265da:	d002      	beq.n	80265e2 <__hexnan+0x26>
 80265dc:	9b02      	ldr	r3, [sp, #8]
 80265de:	3304      	adds	r3, #4
 80265e0:	9302      	str	r3, [sp, #8]
 80265e2:	9b02      	ldr	r3, [sp, #8]
 80265e4:	2500      	movs	r5, #0
 80265e6:	1f1f      	subs	r7, r3, #4
 80265e8:	003e      	movs	r6, r7
 80265ea:	003c      	movs	r4, r7
 80265ec:	9b08      	ldr	r3, [sp, #32]
 80265ee:	603d      	str	r5, [r7, #0]
 80265f0:	681b      	ldr	r3, [r3, #0]
 80265f2:	9507      	str	r5, [sp, #28]
 80265f4:	9305      	str	r3, [sp, #20]
 80265f6:	9503      	str	r5, [sp, #12]
 80265f8:	9b05      	ldr	r3, [sp, #20]
 80265fa:	3301      	adds	r3, #1
 80265fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80265fe:	9b05      	ldr	r3, [sp, #20]
 8026600:	785b      	ldrb	r3, [r3, #1]
 8026602:	9304      	str	r3, [sp, #16]
 8026604:	2b00      	cmp	r3, #0
 8026606:	d028      	beq.n	802665a <__hexnan+0x9e>
 8026608:	9804      	ldr	r0, [sp, #16]
 802660a:	f7ff fd78 	bl	80260fe <__hexdig_fun>
 802660e:	2800      	cmp	r0, #0
 8026610:	d155      	bne.n	80266be <__hexnan+0x102>
 8026612:	9b04      	ldr	r3, [sp, #16]
 8026614:	2b20      	cmp	r3, #32
 8026616:	d819      	bhi.n	802664c <__hexnan+0x90>
 8026618:	9b03      	ldr	r3, [sp, #12]
 802661a:	9a07      	ldr	r2, [sp, #28]
 802661c:	4293      	cmp	r3, r2
 802661e:	dd12      	ble.n	8026646 <__hexnan+0x8a>
 8026620:	42b4      	cmp	r4, r6
 8026622:	d206      	bcs.n	8026632 <__hexnan+0x76>
 8026624:	2d07      	cmp	r5, #7
 8026626:	dc04      	bgt.n	8026632 <__hexnan+0x76>
 8026628:	002a      	movs	r2, r5
 802662a:	0031      	movs	r1, r6
 802662c:	0020      	movs	r0, r4
 802662e:	f7ff ff9f 	bl	8026570 <L_shift>
 8026632:	9b01      	ldr	r3, [sp, #4]
 8026634:	2508      	movs	r5, #8
 8026636:	429c      	cmp	r4, r3
 8026638:	d905      	bls.n	8026646 <__hexnan+0x8a>
 802663a:	1f26      	subs	r6, r4, #4
 802663c:	2500      	movs	r5, #0
 802663e:	0034      	movs	r4, r6
 8026640:	9b03      	ldr	r3, [sp, #12]
 8026642:	6035      	str	r5, [r6, #0]
 8026644:	9307      	str	r3, [sp, #28]
 8026646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026648:	9305      	str	r3, [sp, #20]
 802664a:	e7d5      	b.n	80265f8 <__hexnan+0x3c>
 802664c:	9b04      	ldr	r3, [sp, #16]
 802664e:	2b29      	cmp	r3, #41	@ 0x29
 8026650:	d15a      	bne.n	8026708 <__hexnan+0x14c>
 8026652:	9b05      	ldr	r3, [sp, #20]
 8026654:	9a08      	ldr	r2, [sp, #32]
 8026656:	3302      	adds	r3, #2
 8026658:	6013      	str	r3, [r2, #0]
 802665a:	9b03      	ldr	r3, [sp, #12]
 802665c:	2b00      	cmp	r3, #0
 802665e:	d053      	beq.n	8026708 <__hexnan+0x14c>
 8026660:	42b4      	cmp	r4, r6
 8026662:	d206      	bcs.n	8026672 <__hexnan+0xb6>
 8026664:	2d07      	cmp	r5, #7
 8026666:	dc04      	bgt.n	8026672 <__hexnan+0xb6>
 8026668:	002a      	movs	r2, r5
 802666a:	0031      	movs	r1, r6
 802666c:	0020      	movs	r0, r4
 802666e:	f7ff ff7f 	bl	8026570 <L_shift>
 8026672:	9b01      	ldr	r3, [sp, #4]
 8026674:	429c      	cmp	r4, r3
 8026676:	d936      	bls.n	80266e6 <__hexnan+0x12a>
 8026678:	001a      	movs	r2, r3
 802667a:	0023      	movs	r3, r4
 802667c:	cb02      	ldmia	r3!, {r1}
 802667e:	c202      	stmia	r2!, {r1}
 8026680:	429f      	cmp	r7, r3
 8026682:	d2fb      	bcs.n	802667c <__hexnan+0xc0>
 8026684:	9b02      	ldr	r3, [sp, #8]
 8026686:	1c61      	adds	r1, r4, #1
 8026688:	1eda      	subs	r2, r3, #3
 802668a:	2304      	movs	r3, #4
 802668c:	4291      	cmp	r1, r2
 802668e:	d805      	bhi.n	802669c <__hexnan+0xe0>
 8026690:	9b02      	ldr	r3, [sp, #8]
 8026692:	3b04      	subs	r3, #4
 8026694:	1b1b      	subs	r3, r3, r4
 8026696:	089b      	lsrs	r3, r3, #2
 8026698:	3301      	adds	r3, #1
 802669a:	009b      	lsls	r3, r3, #2
 802669c:	9a01      	ldr	r2, [sp, #4]
 802669e:	18d3      	adds	r3, r2, r3
 80266a0:	2200      	movs	r2, #0
 80266a2:	c304      	stmia	r3!, {r2}
 80266a4:	429f      	cmp	r7, r3
 80266a6:	d2fc      	bcs.n	80266a2 <__hexnan+0xe6>
 80266a8:	683b      	ldr	r3, [r7, #0]
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	d104      	bne.n	80266b8 <__hexnan+0xfc>
 80266ae:	9b01      	ldr	r3, [sp, #4]
 80266b0:	429f      	cmp	r7, r3
 80266b2:	d127      	bne.n	8026704 <__hexnan+0x148>
 80266b4:	2301      	movs	r3, #1
 80266b6:	603b      	str	r3, [r7, #0]
 80266b8:	2005      	movs	r0, #5
 80266ba:	b00b      	add	sp, #44	@ 0x2c
 80266bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80266be:	9b03      	ldr	r3, [sp, #12]
 80266c0:	3501      	adds	r5, #1
 80266c2:	3301      	adds	r3, #1
 80266c4:	9303      	str	r3, [sp, #12]
 80266c6:	2d08      	cmp	r5, #8
 80266c8:	dd06      	ble.n	80266d8 <__hexnan+0x11c>
 80266ca:	9b01      	ldr	r3, [sp, #4]
 80266cc:	429c      	cmp	r4, r3
 80266ce:	d9ba      	bls.n	8026646 <__hexnan+0x8a>
 80266d0:	2300      	movs	r3, #0
 80266d2:	2501      	movs	r5, #1
 80266d4:	3c04      	subs	r4, #4
 80266d6:	6023      	str	r3, [r4, #0]
 80266d8:	220f      	movs	r2, #15
 80266da:	6823      	ldr	r3, [r4, #0]
 80266dc:	4010      	ands	r0, r2
 80266de:	011b      	lsls	r3, r3, #4
 80266e0:	4303      	orrs	r3, r0
 80266e2:	6023      	str	r3, [r4, #0]
 80266e4:	e7af      	b.n	8026646 <__hexnan+0x8a>
 80266e6:	9b06      	ldr	r3, [sp, #24]
 80266e8:	2b00      	cmp	r3, #0
 80266ea:	d0dd      	beq.n	80266a8 <__hexnan+0xec>
 80266ec:	2320      	movs	r3, #32
 80266ee:	9a06      	ldr	r2, [sp, #24]
 80266f0:	9902      	ldr	r1, [sp, #8]
 80266f2:	1a9b      	subs	r3, r3, r2
 80266f4:	2201      	movs	r2, #1
 80266f6:	4252      	negs	r2, r2
 80266f8:	40da      	lsrs	r2, r3
 80266fa:	3904      	subs	r1, #4
 80266fc:	680b      	ldr	r3, [r1, #0]
 80266fe:	4013      	ands	r3, r2
 8026700:	600b      	str	r3, [r1, #0]
 8026702:	e7d1      	b.n	80266a8 <__hexnan+0xec>
 8026704:	3f04      	subs	r7, #4
 8026706:	e7cf      	b.n	80266a8 <__hexnan+0xec>
 8026708:	2004      	movs	r0, #4
 802670a:	e7d6      	b.n	80266ba <__hexnan+0xfe>

0802670c <malloc>:
 802670c:	b510      	push	{r4, lr}
 802670e:	4b03      	ldr	r3, [pc, #12]	@ (802671c <malloc+0x10>)
 8026710:	0001      	movs	r1, r0
 8026712:	6818      	ldr	r0, [r3, #0]
 8026714:	f000 f826 	bl	8026764 <_malloc_r>
 8026718:	bd10      	pop	{r4, pc}
 802671a:	46c0      	nop			@ (mov r8, r8)
 802671c:	200003e0 	.word	0x200003e0

08026720 <sbrk_aligned>:
 8026720:	b570      	push	{r4, r5, r6, lr}
 8026722:	4e0f      	ldr	r6, [pc, #60]	@ (8026760 <sbrk_aligned+0x40>)
 8026724:	000d      	movs	r5, r1
 8026726:	6831      	ldr	r1, [r6, #0]
 8026728:	0004      	movs	r4, r0
 802672a:	2900      	cmp	r1, #0
 802672c:	d102      	bne.n	8026734 <sbrk_aligned+0x14>
 802672e:	f001 f989 	bl	8027a44 <_sbrk_r>
 8026732:	6030      	str	r0, [r6, #0]
 8026734:	0029      	movs	r1, r5
 8026736:	0020      	movs	r0, r4
 8026738:	f001 f984 	bl	8027a44 <_sbrk_r>
 802673c:	1c43      	adds	r3, r0, #1
 802673e:	d103      	bne.n	8026748 <sbrk_aligned+0x28>
 8026740:	2501      	movs	r5, #1
 8026742:	426d      	negs	r5, r5
 8026744:	0028      	movs	r0, r5
 8026746:	bd70      	pop	{r4, r5, r6, pc}
 8026748:	2303      	movs	r3, #3
 802674a:	1cc5      	adds	r5, r0, #3
 802674c:	439d      	bics	r5, r3
 802674e:	42a8      	cmp	r0, r5
 8026750:	d0f8      	beq.n	8026744 <sbrk_aligned+0x24>
 8026752:	1a29      	subs	r1, r5, r0
 8026754:	0020      	movs	r0, r4
 8026756:	f001 f975 	bl	8027a44 <_sbrk_r>
 802675a:	3001      	adds	r0, #1
 802675c:	d1f2      	bne.n	8026744 <sbrk_aligned+0x24>
 802675e:	e7ef      	b.n	8026740 <sbrk_aligned+0x20>
 8026760:	20003638 	.word	0x20003638

08026764 <_malloc_r>:
 8026764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026766:	2203      	movs	r2, #3
 8026768:	1ccb      	adds	r3, r1, #3
 802676a:	4393      	bics	r3, r2
 802676c:	3308      	adds	r3, #8
 802676e:	0005      	movs	r5, r0
 8026770:	001f      	movs	r7, r3
 8026772:	2b0c      	cmp	r3, #12
 8026774:	d234      	bcs.n	80267e0 <_malloc_r+0x7c>
 8026776:	270c      	movs	r7, #12
 8026778:	42b9      	cmp	r1, r7
 802677a:	d833      	bhi.n	80267e4 <_malloc_r+0x80>
 802677c:	0028      	movs	r0, r5
 802677e:	f000 f883 	bl	8026888 <__malloc_lock>
 8026782:	4e37      	ldr	r6, [pc, #220]	@ (8026860 <_malloc_r+0xfc>)
 8026784:	6833      	ldr	r3, [r6, #0]
 8026786:	001c      	movs	r4, r3
 8026788:	2c00      	cmp	r4, #0
 802678a:	d12f      	bne.n	80267ec <_malloc_r+0x88>
 802678c:	0039      	movs	r1, r7
 802678e:	0028      	movs	r0, r5
 8026790:	f7ff ffc6 	bl	8026720 <sbrk_aligned>
 8026794:	0004      	movs	r4, r0
 8026796:	1c43      	adds	r3, r0, #1
 8026798:	d15f      	bne.n	802685a <_malloc_r+0xf6>
 802679a:	6834      	ldr	r4, [r6, #0]
 802679c:	9400      	str	r4, [sp, #0]
 802679e:	9b00      	ldr	r3, [sp, #0]
 80267a0:	2b00      	cmp	r3, #0
 80267a2:	d14a      	bne.n	802683a <_malloc_r+0xd6>
 80267a4:	2c00      	cmp	r4, #0
 80267a6:	d052      	beq.n	802684e <_malloc_r+0xea>
 80267a8:	6823      	ldr	r3, [r4, #0]
 80267aa:	0028      	movs	r0, r5
 80267ac:	18e3      	adds	r3, r4, r3
 80267ae:	9900      	ldr	r1, [sp, #0]
 80267b0:	9301      	str	r3, [sp, #4]
 80267b2:	f001 f947 	bl	8027a44 <_sbrk_r>
 80267b6:	9b01      	ldr	r3, [sp, #4]
 80267b8:	4283      	cmp	r3, r0
 80267ba:	d148      	bne.n	802684e <_malloc_r+0xea>
 80267bc:	6823      	ldr	r3, [r4, #0]
 80267be:	0028      	movs	r0, r5
 80267c0:	1aff      	subs	r7, r7, r3
 80267c2:	0039      	movs	r1, r7
 80267c4:	f7ff ffac 	bl	8026720 <sbrk_aligned>
 80267c8:	3001      	adds	r0, #1
 80267ca:	d040      	beq.n	802684e <_malloc_r+0xea>
 80267cc:	6823      	ldr	r3, [r4, #0]
 80267ce:	19db      	adds	r3, r3, r7
 80267d0:	6023      	str	r3, [r4, #0]
 80267d2:	6833      	ldr	r3, [r6, #0]
 80267d4:	685a      	ldr	r2, [r3, #4]
 80267d6:	2a00      	cmp	r2, #0
 80267d8:	d133      	bne.n	8026842 <_malloc_r+0xde>
 80267da:	9b00      	ldr	r3, [sp, #0]
 80267dc:	6033      	str	r3, [r6, #0]
 80267de:	e019      	b.n	8026814 <_malloc_r+0xb0>
 80267e0:	2b00      	cmp	r3, #0
 80267e2:	dac9      	bge.n	8026778 <_malloc_r+0x14>
 80267e4:	230c      	movs	r3, #12
 80267e6:	602b      	str	r3, [r5, #0]
 80267e8:	2000      	movs	r0, #0
 80267ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80267ec:	6821      	ldr	r1, [r4, #0]
 80267ee:	1bc9      	subs	r1, r1, r7
 80267f0:	d420      	bmi.n	8026834 <_malloc_r+0xd0>
 80267f2:	290b      	cmp	r1, #11
 80267f4:	d90a      	bls.n	802680c <_malloc_r+0xa8>
 80267f6:	19e2      	adds	r2, r4, r7
 80267f8:	6027      	str	r7, [r4, #0]
 80267fa:	42a3      	cmp	r3, r4
 80267fc:	d104      	bne.n	8026808 <_malloc_r+0xa4>
 80267fe:	6032      	str	r2, [r6, #0]
 8026800:	6863      	ldr	r3, [r4, #4]
 8026802:	6011      	str	r1, [r2, #0]
 8026804:	6053      	str	r3, [r2, #4]
 8026806:	e005      	b.n	8026814 <_malloc_r+0xb0>
 8026808:	605a      	str	r2, [r3, #4]
 802680a:	e7f9      	b.n	8026800 <_malloc_r+0x9c>
 802680c:	6862      	ldr	r2, [r4, #4]
 802680e:	42a3      	cmp	r3, r4
 8026810:	d10e      	bne.n	8026830 <_malloc_r+0xcc>
 8026812:	6032      	str	r2, [r6, #0]
 8026814:	0028      	movs	r0, r5
 8026816:	f000 f83f 	bl	8026898 <__malloc_unlock>
 802681a:	0020      	movs	r0, r4
 802681c:	2207      	movs	r2, #7
 802681e:	300b      	adds	r0, #11
 8026820:	1d23      	adds	r3, r4, #4
 8026822:	4390      	bics	r0, r2
 8026824:	1ac2      	subs	r2, r0, r3
 8026826:	4298      	cmp	r0, r3
 8026828:	d0df      	beq.n	80267ea <_malloc_r+0x86>
 802682a:	1a1b      	subs	r3, r3, r0
 802682c:	50a3      	str	r3, [r4, r2]
 802682e:	e7dc      	b.n	80267ea <_malloc_r+0x86>
 8026830:	605a      	str	r2, [r3, #4]
 8026832:	e7ef      	b.n	8026814 <_malloc_r+0xb0>
 8026834:	0023      	movs	r3, r4
 8026836:	6864      	ldr	r4, [r4, #4]
 8026838:	e7a6      	b.n	8026788 <_malloc_r+0x24>
 802683a:	9c00      	ldr	r4, [sp, #0]
 802683c:	6863      	ldr	r3, [r4, #4]
 802683e:	9300      	str	r3, [sp, #0]
 8026840:	e7ad      	b.n	802679e <_malloc_r+0x3a>
 8026842:	001a      	movs	r2, r3
 8026844:	685b      	ldr	r3, [r3, #4]
 8026846:	42a3      	cmp	r3, r4
 8026848:	d1fb      	bne.n	8026842 <_malloc_r+0xde>
 802684a:	2300      	movs	r3, #0
 802684c:	e7da      	b.n	8026804 <_malloc_r+0xa0>
 802684e:	230c      	movs	r3, #12
 8026850:	0028      	movs	r0, r5
 8026852:	602b      	str	r3, [r5, #0]
 8026854:	f000 f820 	bl	8026898 <__malloc_unlock>
 8026858:	e7c6      	b.n	80267e8 <_malloc_r+0x84>
 802685a:	6007      	str	r7, [r0, #0]
 802685c:	e7da      	b.n	8026814 <_malloc_r+0xb0>
 802685e:	46c0      	nop			@ (mov r8, r8)
 8026860:	2000363c 	.word	0x2000363c

08026864 <__ascii_mbtowc>:
 8026864:	b082      	sub	sp, #8
 8026866:	2900      	cmp	r1, #0
 8026868:	d100      	bne.n	802686c <__ascii_mbtowc+0x8>
 802686a:	a901      	add	r1, sp, #4
 802686c:	1e10      	subs	r0, r2, #0
 802686e:	d006      	beq.n	802687e <__ascii_mbtowc+0x1a>
 8026870:	2b00      	cmp	r3, #0
 8026872:	d006      	beq.n	8026882 <__ascii_mbtowc+0x1e>
 8026874:	7813      	ldrb	r3, [r2, #0]
 8026876:	600b      	str	r3, [r1, #0]
 8026878:	7810      	ldrb	r0, [r2, #0]
 802687a:	1e43      	subs	r3, r0, #1
 802687c:	4198      	sbcs	r0, r3
 802687e:	b002      	add	sp, #8
 8026880:	4770      	bx	lr
 8026882:	2002      	movs	r0, #2
 8026884:	4240      	negs	r0, r0
 8026886:	e7fa      	b.n	802687e <__ascii_mbtowc+0x1a>

08026888 <__malloc_lock>:
 8026888:	b510      	push	{r4, lr}
 802688a:	4802      	ldr	r0, [pc, #8]	@ (8026894 <__malloc_lock+0xc>)
 802688c:	f7fe fcfb 	bl	8025286 <__retarget_lock_acquire_recursive>
 8026890:	bd10      	pop	{r4, pc}
 8026892:	46c0      	nop			@ (mov r8, r8)
 8026894:	20003634 	.word	0x20003634

08026898 <__malloc_unlock>:
 8026898:	b510      	push	{r4, lr}
 802689a:	4802      	ldr	r0, [pc, #8]	@ (80268a4 <__malloc_unlock+0xc>)
 802689c:	f7fe fcf4 	bl	8025288 <__retarget_lock_release_recursive>
 80268a0:	bd10      	pop	{r4, pc}
 80268a2:	46c0      	nop			@ (mov r8, r8)
 80268a4:	20003634 	.word	0x20003634

080268a8 <_Balloc>:
 80268a8:	b570      	push	{r4, r5, r6, lr}
 80268aa:	69c5      	ldr	r5, [r0, #28]
 80268ac:	0006      	movs	r6, r0
 80268ae:	000c      	movs	r4, r1
 80268b0:	2d00      	cmp	r5, #0
 80268b2:	d10e      	bne.n	80268d2 <_Balloc+0x2a>
 80268b4:	2010      	movs	r0, #16
 80268b6:	f7ff ff29 	bl	802670c <malloc>
 80268ba:	1e02      	subs	r2, r0, #0
 80268bc:	61f0      	str	r0, [r6, #28]
 80268be:	d104      	bne.n	80268ca <_Balloc+0x22>
 80268c0:	216b      	movs	r1, #107	@ 0x6b
 80268c2:	4b19      	ldr	r3, [pc, #100]	@ (8026928 <_Balloc+0x80>)
 80268c4:	4819      	ldr	r0, [pc, #100]	@ (802692c <_Balloc+0x84>)
 80268c6:	f001 f8cf 	bl	8027a68 <__assert_func>
 80268ca:	6045      	str	r5, [r0, #4]
 80268cc:	6085      	str	r5, [r0, #8]
 80268ce:	6005      	str	r5, [r0, #0]
 80268d0:	60c5      	str	r5, [r0, #12]
 80268d2:	69f5      	ldr	r5, [r6, #28]
 80268d4:	68eb      	ldr	r3, [r5, #12]
 80268d6:	2b00      	cmp	r3, #0
 80268d8:	d013      	beq.n	8026902 <_Balloc+0x5a>
 80268da:	69f3      	ldr	r3, [r6, #28]
 80268dc:	00a2      	lsls	r2, r4, #2
 80268de:	68db      	ldr	r3, [r3, #12]
 80268e0:	189b      	adds	r3, r3, r2
 80268e2:	6818      	ldr	r0, [r3, #0]
 80268e4:	2800      	cmp	r0, #0
 80268e6:	d118      	bne.n	802691a <_Balloc+0x72>
 80268e8:	2101      	movs	r1, #1
 80268ea:	000d      	movs	r5, r1
 80268ec:	40a5      	lsls	r5, r4
 80268ee:	1d6a      	adds	r2, r5, #5
 80268f0:	0030      	movs	r0, r6
 80268f2:	0092      	lsls	r2, r2, #2
 80268f4:	f001 f8d6 	bl	8027aa4 <_calloc_r>
 80268f8:	2800      	cmp	r0, #0
 80268fa:	d00c      	beq.n	8026916 <_Balloc+0x6e>
 80268fc:	6044      	str	r4, [r0, #4]
 80268fe:	6085      	str	r5, [r0, #8]
 8026900:	e00d      	b.n	802691e <_Balloc+0x76>
 8026902:	2221      	movs	r2, #33	@ 0x21
 8026904:	2104      	movs	r1, #4
 8026906:	0030      	movs	r0, r6
 8026908:	f001 f8cc 	bl	8027aa4 <_calloc_r>
 802690c:	69f3      	ldr	r3, [r6, #28]
 802690e:	60e8      	str	r0, [r5, #12]
 8026910:	68db      	ldr	r3, [r3, #12]
 8026912:	2b00      	cmp	r3, #0
 8026914:	d1e1      	bne.n	80268da <_Balloc+0x32>
 8026916:	2000      	movs	r0, #0
 8026918:	bd70      	pop	{r4, r5, r6, pc}
 802691a:	6802      	ldr	r2, [r0, #0]
 802691c:	601a      	str	r2, [r3, #0]
 802691e:	2300      	movs	r3, #0
 8026920:	6103      	str	r3, [r0, #16]
 8026922:	60c3      	str	r3, [r0, #12]
 8026924:	e7f8      	b.n	8026918 <_Balloc+0x70>
 8026926:	46c0      	nop			@ (mov r8, r8)
 8026928:	0802dc92 	.word	0x0802dc92
 802692c:	0802dd72 	.word	0x0802dd72

08026930 <_Bfree>:
 8026930:	b570      	push	{r4, r5, r6, lr}
 8026932:	69c6      	ldr	r6, [r0, #28]
 8026934:	0005      	movs	r5, r0
 8026936:	000c      	movs	r4, r1
 8026938:	2e00      	cmp	r6, #0
 802693a:	d10e      	bne.n	802695a <_Bfree+0x2a>
 802693c:	2010      	movs	r0, #16
 802693e:	f7ff fee5 	bl	802670c <malloc>
 8026942:	1e02      	subs	r2, r0, #0
 8026944:	61e8      	str	r0, [r5, #28]
 8026946:	d104      	bne.n	8026952 <_Bfree+0x22>
 8026948:	218f      	movs	r1, #143	@ 0x8f
 802694a:	4b09      	ldr	r3, [pc, #36]	@ (8026970 <_Bfree+0x40>)
 802694c:	4809      	ldr	r0, [pc, #36]	@ (8026974 <_Bfree+0x44>)
 802694e:	f001 f88b 	bl	8027a68 <__assert_func>
 8026952:	6046      	str	r6, [r0, #4]
 8026954:	6086      	str	r6, [r0, #8]
 8026956:	6006      	str	r6, [r0, #0]
 8026958:	60c6      	str	r6, [r0, #12]
 802695a:	2c00      	cmp	r4, #0
 802695c:	d007      	beq.n	802696e <_Bfree+0x3e>
 802695e:	69eb      	ldr	r3, [r5, #28]
 8026960:	6862      	ldr	r2, [r4, #4]
 8026962:	68db      	ldr	r3, [r3, #12]
 8026964:	0092      	lsls	r2, r2, #2
 8026966:	189b      	adds	r3, r3, r2
 8026968:	681a      	ldr	r2, [r3, #0]
 802696a:	6022      	str	r2, [r4, #0]
 802696c:	601c      	str	r4, [r3, #0]
 802696e:	bd70      	pop	{r4, r5, r6, pc}
 8026970:	0802dc92 	.word	0x0802dc92
 8026974:	0802dd72 	.word	0x0802dd72

08026978 <__multadd>:
 8026978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802697a:	000f      	movs	r7, r1
 802697c:	9001      	str	r0, [sp, #4]
 802697e:	000c      	movs	r4, r1
 8026980:	001e      	movs	r6, r3
 8026982:	2000      	movs	r0, #0
 8026984:	690d      	ldr	r5, [r1, #16]
 8026986:	3714      	adds	r7, #20
 8026988:	683b      	ldr	r3, [r7, #0]
 802698a:	3001      	adds	r0, #1
 802698c:	b299      	uxth	r1, r3
 802698e:	4351      	muls	r1, r2
 8026990:	0c1b      	lsrs	r3, r3, #16
 8026992:	4353      	muls	r3, r2
 8026994:	1989      	adds	r1, r1, r6
 8026996:	0c0e      	lsrs	r6, r1, #16
 8026998:	199b      	adds	r3, r3, r6
 802699a:	0c1e      	lsrs	r6, r3, #16
 802699c:	b289      	uxth	r1, r1
 802699e:	041b      	lsls	r3, r3, #16
 80269a0:	185b      	adds	r3, r3, r1
 80269a2:	c708      	stmia	r7!, {r3}
 80269a4:	4285      	cmp	r5, r0
 80269a6:	dcef      	bgt.n	8026988 <__multadd+0x10>
 80269a8:	2e00      	cmp	r6, #0
 80269aa:	d022      	beq.n	80269f2 <__multadd+0x7a>
 80269ac:	68a3      	ldr	r3, [r4, #8]
 80269ae:	42ab      	cmp	r3, r5
 80269b0:	dc19      	bgt.n	80269e6 <__multadd+0x6e>
 80269b2:	6861      	ldr	r1, [r4, #4]
 80269b4:	9801      	ldr	r0, [sp, #4]
 80269b6:	3101      	adds	r1, #1
 80269b8:	f7ff ff76 	bl	80268a8 <_Balloc>
 80269bc:	1e07      	subs	r7, r0, #0
 80269be:	d105      	bne.n	80269cc <__multadd+0x54>
 80269c0:	003a      	movs	r2, r7
 80269c2:	21ba      	movs	r1, #186	@ 0xba
 80269c4:	4b0c      	ldr	r3, [pc, #48]	@ (80269f8 <__multadd+0x80>)
 80269c6:	480d      	ldr	r0, [pc, #52]	@ (80269fc <__multadd+0x84>)
 80269c8:	f001 f84e 	bl	8027a68 <__assert_func>
 80269cc:	0021      	movs	r1, r4
 80269ce:	6922      	ldr	r2, [r4, #16]
 80269d0:	310c      	adds	r1, #12
 80269d2:	3202      	adds	r2, #2
 80269d4:	0092      	lsls	r2, r2, #2
 80269d6:	300c      	adds	r0, #12
 80269d8:	f7fe fc62 	bl	80252a0 <memcpy>
 80269dc:	0021      	movs	r1, r4
 80269de:	9801      	ldr	r0, [sp, #4]
 80269e0:	f7ff ffa6 	bl	8026930 <_Bfree>
 80269e4:	003c      	movs	r4, r7
 80269e6:	1d2b      	adds	r3, r5, #4
 80269e8:	009b      	lsls	r3, r3, #2
 80269ea:	18e3      	adds	r3, r4, r3
 80269ec:	3501      	adds	r5, #1
 80269ee:	605e      	str	r6, [r3, #4]
 80269f0:	6125      	str	r5, [r4, #16]
 80269f2:	0020      	movs	r0, r4
 80269f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80269f6:	46c0      	nop			@ (mov r8, r8)
 80269f8:	0802dd01 	.word	0x0802dd01
 80269fc:	0802dd72 	.word	0x0802dd72

08026a00 <__s2b>:
 8026a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026a02:	0007      	movs	r7, r0
 8026a04:	0018      	movs	r0, r3
 8026a06:	000c      	movs	r4, r1
 8026a08:	3008      	adds	r0, #8
 8026a0a:	2109      	movs	r1, #9
 8026a0c:	9301      	str	r3, [sp, #4]
 8026a0e:	0015      	movs	r5, r2
 8026a10:	f7d9 fc52 	bl	80002b8 <__divsi3>
 8026a14:	2301      	movs	r3, #1
 8026a16:	2100      	movs	r1, #0
 8026a18:	4283      	cmp	r3, r0
 8026a1a:	db0a      	blt.n	8026a32 <__s2b+0x32>
 8026a1c:	0038      	movs	r0, r7
 8026a1e:	f7ff ff43 	bl	80268a8 <_Balloc>
 8026a22:	1e01      	subs	r1, r0, #0
 8026a24:	d108      	bne.n	8026a38 <__s2b+0x38>
 8026a26:	000a      	movs	r2, r1
 8026a28:	4b19      	ldr	r3, [pc, #100]	@ (8026a90 <__s2b+0x90>)
 8026a2a:	481a      	ldr	r0, [pc, #104]	@ (8026a94 <__s2b+0x94>)
 8026a2c:	31d3      	adds	r1, #211	@ 0xd3
 8026a2e:	f001 f81b 	bl	8027a68 <__assert_func>
 8026a32:	005b      	lsls	r3, r3, #1
 8026a34:	3101      	adds	r1, #1
 8026a36:	e7ef      	b.n	8026a18 <__s2b+0x18>
 8026a38:	9b08      	ldr	r3, [sp, #32]
 8026a3a:	6143      	str	r3, [r0, #20]
 8026a3c:	2301      	movs	r3, #1
 8026a3e:	6103      	str	r3, [r0, #16]
 8026a40:	2d09      	cmp	r5, #9
 8026a42:	dd18      	ble.n	8026a76 <__s2b+0x76>
 8026a44:	0023      	movs	r3, r4
 8026a46:	3309      	adds	r3, #9
 8026a48:	001e      	movs	r6, r3
 8026a4a:	9300      	str	r3, [sp, #0]
 8026a4c:	1964      	adds	r4, r4, r5
 8026a4e:	7833      	ldrb	r3, [r6, #0]
 8026a50:	220a      	movs	r2, #10
 8026a52:	0038      	movs	r0, r7
 8026a54:	3b30      	subs	r3, #48	@ 0x30
 8026a56:	f7ff ff8f 	bl	8026978 <__multadd>
 8026a5a:	3601      	adds	r6, #1
 8026a5c:	0001      	movs	r1, r0
 8026a5e:	42a6      	cmp	r6, r4
 8026a60:	d1f5      	bne.n	8026a4e <__s2b+0x4e>
 8026a62:	002c      	movs	r4, r5
 8026a64:	9b00      	ldr	r3, [sp, #0]
 8026a66:	3c08      	subs	r4, #8
 8026a68:	191c      	adds	r4, r3, r4
 8026a6a:	002e      	movs	r6, r5
 8026a6c:	9b01      	ldr	r3, [sp, #4]
 8026a6e:	429e      	cmp	r6, r3
 8026a70:	db04      	blt.n	8026a7c <__s2b+0x7c>
 8026a72:	0008      	movs	r0, r1
 8026a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026a76:	2509      	movs	r5, #9
 8026a78:	340a      	adds	r4, #10
 8026a7a:	e7f6      	b.n	8026a6a <__s2b+0x6a>
 8026a7c:	1b63      	subs	r3, r4, r5
 8026a7e:	5d9b      	ldrb	r3, [r3, r6]
 8026a80:	220a      	movs	r2, #10
 8026a82:	0038      	movs	r0, r7
 8026a84:	3b30      	subs	r3, #48	@ 0x30
 8026a86:	f7ff ff77 	bl	8026978 <__multadd>
 8026a8a:	3601      	adds	r6, #1
 8026a8c:	0001      	movs	r1, r0
 8026a8e:	e7ed      	b.n	8026a6c <__s2b+0x6c>
 8026a90:	0802dd01 	.word	0x0802dd01
 8026a94:	0802dd72 	.word	0x0802dd72

08026a98 <__hi0bits>:
 8026a98:	2280      	movs	r2, #128	@ 0x80
 8026a9a:	0003      	movs	r3, r0
 8026a9c:	0252      	lsls	r2, r2, #9
 8026a9e:	2000      	movs	r0, #0
 8026aa0:	4293      	cmp	r3, r2
 8026aa2:	d201      	bcs.n	8026aa8 <__hi0bits+0x10>
 8026aa4:	041b      	lsls	r3, r3, #16
 8026aa6:	3010      	adds	r0, #16
 8026aa8:	2280      	movs	r2, #128	@ 0x80
 8026aaa:	0452      	lsls	r2, r2, #17
 8026aac:	4293      	cmp	r3, r2
 8026aae:	d201      	bcs.n	8026ab4 <__hi0bits+0x1c>
 8026ab0:	3008      	adds	r0, #8
 8026ab2:	021b      	lsls	r3, r3, #8
 8026ab4:	2280      	movs	r2, #128	@ 0x80
 8026ab6:	0552      	lsls	r2, r2, #21
 8026ab8:	4293      	cmp	r3, r2
 8026aba:	d201      	bcs.n	8026ac0 <__hi0bits+0x28>
 8026abc:	3004      	adds	r0, #4
 8026abe:	011b      	lsls	r3, r3, #4
 8026ac0:	2280      	movs	r2, #128	@ 0x80
 8026ac2:	05d2      	lsls	r2, r2, #23
 8026ac4:	4293      	cmp	r3, r2
 8026ac6:	d201      	bcs.n	8026acc <__hi0bits+0x34>
 8026ac8:	3002      	adds	r0, #2
 8026aca:	009b      	lsls	r3, r3, #2
 8026acc:	2b00      	cmp	r3, #0
 8026ace:	db03      	blt.n	8026ad8 <__hi0bits+0x40>
 8026ad0:	3001      	adds	r0, #1
 8026ad2:	4213      	tst	r3, r2
 8026ad4:	d100      	bne.n	8026ad8 <__hi0bits+0x40>
 8026ad6:	2020      	movs	r0, #32
 8026ad8:	4770      	bx	lr

08026ada <__lo0bits>:
 8026ada:	6803      	ldr	r3, [r0, #0]
 8026adc:	0001      	movs	r1, r0
 8026ade:	2207      	movs	r2, #7
 8026ae0:	0018      	movs	r0, r3
 8026ae2:	4010      	ands	r0, r2
 8026ae4:	4213      	tst	r3, r2
 8026ae6:	d00d      	beq.n	8026b04 <__lo0bits+0x2a>
 8026ae8:	3a06      	subs	r2, #6
 8026aea:	2000      	movs	r0, #0
 8026aec:	4213      	tst	r3, r2
 8026aee:	d105      	bne.n	8026afc <__lo0bits+0x22>
 8026af0:	3002      	adds	r0, #2
 8026af2:	4203      	tst	r3, r0
 8026af4:	d003      	beq.n	8026afe <__lo0bits+0x24>
 8026af6:	40d3      	lsrs	r3, r2
 8026af8:	0010      	movs	r0, r2
 8026afa:	600b      	str	r3, [r1, #0]
 8026afc:	4770      	bx	lr
 8026afe:	089b      	lsrs	r3, r3, #2
 8026b00:	600b      	str	r3, [r1, #0]
 8026b02:	e7fb      	b.n	8026afc <__lo0bits+0x22>
 8026b04:	b29a      	uxth	r2, r3
 8026b06:	2a00      	cmp	r2, #0
 8026b08:	d101      	bne.n	8026b0e <__lo0bits+0x34>
 8026b0a:	2010      	movs	r0, #16
 8026b0c:	0c1b      	lsrs	r3, r3, #16
 8026b0e:	b2da      	uxtb	r2, r3
 8026b10:	2a00      	cmp	r2, #0
 8026b12:	d101      	bne.n	8026b18 <__lo0bits+0x3e>
 8026b14:	3008      	adds	r0, #8
 8026b16:	0a1b      	lsrs	r3, r3, #8
 8026b18:	071a      	lsls	r2, r3, #28
 8026b1a:	d101      	bne.n	8026b20 <__lo0bits+0x46>
 8026b1c:	3004      	adds	r0, #4
 8026b1e:	091b      	lsrs	r3, r3, #4
 8026b20:	079a      	lsls	r2, r3, #30
 8026b22:	d101      	bne.n	8026b28 <__lo0bits+0x4e>
 8026b24:	3002      	adds	r0, #2
 8026b26:	089b      	lsrs	r3, r3, #2
 8026b28:	07da      	lsls	r2, r3, #31
 8026b2a:	d4e9      	bmi.n	8026b00 <__lo0bits+0x26>
 8026b2c:	3001      	adds	r0, #1
 8026b2e:	085b      	lsrs	r3, r3, #1
 8026b30:	d1e6      	bne.n	8026b00 <__lo0bits+0x26>
 8026b32:	2020      	movs	r0, #32
 8026b34:	e7e2      	b.n	8026afc <__lo0bits+0x22>
	...

08026b38 <__i2b>:
 8026b38:	b510      	push	{r4, lr}
 8026b3a:	000c      	movs	r4, r1
 8026b3c:	2101      	movs	r1, #1
 8026b3e:	f7ff feb3 	bl	80268a8 <_Balloc>
 8026b42:	2800      	cmp	r0, #0
 8026b44:	d107      	bne.n	8026b56 <__i2b+0x1e>
 8026b46:	2146      	movs	r1, #70	@ 0x46
 8026b48:	4c05      	ldr	r4, [pc, #20]	@ (8026b60 <__i2b+0x28>)
 8026b4a:	0002      	movs	r2, r0
 8026b4c:	4b05      	ldr	r3, [pc, #20]	@ (8026b64 <__i2b+0x2c>)
 8026b4e:	0020      	movs	r0, r4
 8026b50:	31ff      	adds	r1, #255	@ 0xff
 8026b52:	f000 ff89 	bl	8027a68 <__assert_func>
 8026b56:	2301      	movs	r3, #1
 8026b58:	6144      	str	r4, [r0, #20]
 8026b5a:	6103      	str	r3, [r0, #16]
 8026b5c:	bd10      	pop	{r4, pc}
 8026b5e:	46c0      	nop			@ (mov r8, r8)
 8026b60:	0802dd72 	.word	0x0802dd72
 8026b64:	0802dd01 	.word	0x0802dd01

08026b68 <__multiply>:
 8026b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b6a:	0014      	movs	r4, r2
 8026b6c:	690a      	ldr	r2, [r1, #16]
 8026b6e:	6923      	ldr	r3, [r4, #16]
 8026b70:	000d      	movs	r5, r1
 8026b72:	b08b      	sub	sp, #44	@ 0x2c
 8026b74:	429a      	cmp	r2, r3
 8026b76:	db02      	blt.n	8026b7e <__multiply+0x16>
 8026b78:	0023      	movs	r3, r4
 8026b7a:	000c      	movs	r4, r1
 8026b7c:	001d      	movs	r5, r3
 8026b7e:	6927      	ldr	r7, [r4, #16]
 8026b80:	692e      	ldr	r6, [r5, #16]
 8026b82:	6861      	ldr	r1, [r4, #4]
 8026b84:	19bb      	adds	r3, r7, r6
 8026b86:	9303      	str	r3, [sp, #12]
 8026b88:	68a3      	ldr	r3, [r4, #8]
 8026b8a:	19ba      	adds	r2, r7, r6
 8026b8c:	4293      	cmp	r3, r2
 8026b8e:	da00      	bge.n	8026b92 <__multiply+0x2a>
 8026b90:	3101      	adds	r1, #1
 8026b92:	f7ff fe89 	bl	80268a8 <_Balloc>
 8026b96:	9002      	str	r0, [sp, #8]
 8026b98:	2800      	cmp	r0, #0
 8026b9a:	d106      	bne.n	8026baa <__multiply+0x42>
 8026b9c:	21b1      	movs	r1, #177	@ 0xb1
 8026b9e:	4b49      	ldr	r3, [pc, #292]	@ (8026cc4 <__multiply+0x15c>)
 8026ba0:	4849      	ldr	r0, [pc, #292]	@ (8026cc8 <__multiply+0x160>)
 8026ba2:	9a02      	ldr	r2, [sp, #8]
 8026ba4:	0049      	lsls	r1, r1, #1
 8026ba6:	f000 ff5f 	bl	8027a68 <__assert_func>
 8026baa:	9b02      	ldr	r3, [sp, #8]
 8026bac:	2200      	movs	r2, #0
 8026bae:	3314      	adds	r3, #20
 8026bb0:	469c      	mov	ip, r3
 8026bb2:	19bb      	adds	r3, r7, r6
 8026bb4:	009b      	lsls	r3, r3, #2
 8026bb6:	4463      	add	r3, ip
 8026bb8:	9304      	str	r3, [sp, #16]
 8026bba:	4663      	mov	r3, ip
 8026bbc:	9904      	ldr	r1, [sp, #16]
 8026bbe:	428b      	cmp	r3, r1
 8026bc0:	d32a      	bcc.n	8026c18 <__multiply+0xb0>
 8026bc2:	0023      	movs	r3, r4
 8026bc4:	00bf      	lsls	r7, r7, #2
 8026bc6:	3314      	adds	r3, #20
 8026bc8:	3514      	adds	r5, #20
 8026bca:	9308      	str	r3, [sp, #32]
 8026bcc:	00b6      	lsls	r6, r6, #2
 8026bce:	19db      	adds	r3, r3, r7
 8026bd0:	9305      	str	r3, [sp, #20]
 8026bd2:	19ab      	adds	r3, r5, r6
 8026bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8026bd6:	2304      	movs	r3, #4
 8026bd8:	9306      	str	r3, [sp, #24]
 8026bda:	0023      	movs	r3, r4
 8026bdc:	9a05      	ldr	r2, [sp, #20]
 8026bde:	3315      	adds	r3, #21
 8026be0:	9501      	str	r5, [sp, #4]
 8026be2:	429a      	cmp	r2, r3
 8026be4:	d305      	bcc.n	8026bf2 <__multiply+0x8a>
 8026be6:	1b13      	subs	r3, r2, r4
 8026be8:	3b15      	subs	r3, #21
 8026bea:	089b      	lsrs	r3, r3, #2
 8026bec:	3301      	adds	r3, #1
 8026bee:	009b      	lsls	r3, r3, #2
 8026bf0:	9306      	str	r3, [sp, #24]
 8026bf2:	9b01      	ldr	r3, [sp, #4]
 8026bf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026bf6:	4293      	cmp	r3, r2
 8026bf8:	d310      	bcc.n	8026c1c <__multiply+0xb4>
 8026bfa:	9b03      	ldr	r3, [sp, #12]
 8026bfc:	2b00      	cmp	r3, #0
 8026bfe:	dd05      	ble.n	8026c0c <__multiply+0xa4>
 8026c00:	9b04      	ldr	r3, [sp, #16]
 8026c02:	3b04      	subs	r3, #4
 8026c04:	9304      	str	r3, [sp, #16]
 8026c06:	681b      	ldr	r3, [r3, #0]
 8026c08:	2b00      	cmp	r3, #0
 8026c0a:	d056      	beq.n	8026cba <__multiply+0x152>
 8026c0c:	9b02      	ldr	r3, [sp, #8]
 8026c0e:	9a03      	ldr	r2, [sp, #12]
 8026c10:	0018      	movs	r0, r3
 8026c12:	611a      	str	r2, [r3, #16]
 8026c14:	b00b      	add	sp, #44	@ 0x2c
 8026c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c18:	c304      	stmia	r3!, {r2}
 8026c1a:	e7cf      	b.n	8026bbc <__multiply+0x54>
 8026c1c:	9b01      	ldr	r3, [sp, #4]
 8026c1e:	6818      	ldr	r0, [r3, #0]
 8026c20:	b280      	uxth	r0, r0
 8026c22:	2800      	cmp	r0, #0
 8026c24:	d01e      	beq.n	8026c64 <__multiply+0xfc>
 8026c26:	4667      	mov	r7, ip
 8026c28:	2500      	movs	r5, #0
 8026c2a:	9e08      	ldr	r6, [sp, #32]
 8026c2c:	ce02      	ldmia	r6!, {r1}
 8026c2e:	683b      	ldr	r3, [r7, #0]
 8026c30:	9307      	str	r3, [sp, #28]
 8026c32:	b28b      	uxth	r3, r1
 8026c34:	4343      	muls	r3, r0
 8026c36:	001a      	movs	r2, r3
 8026c38:	466b      	mov	r3, sp
 8026c3a:	0c09      	lsrs	r1, r1, #16
 8026c3c:	8b9b      	ldrh	r3, [r3, #28]
 8026c3e:	4341      	muls	r1, r0
 8026c40:	18d3      	adds	r3, r2, r3
 8026c42:	9a07      	ldr	r2, [sp, #28]
 8026c44:	195b      	adds	r3, r3, r5
 8026c46:	0c12      	lsrs	r2, r2, #16
 8026c48:	1889      	adds	r1, r1, r2
 8026c4a:	0c1a      	lsrs	r2, r3, #16
 8026c4c:	188a      	adds	r2, r1, r2
 8026c4e:	b29b      	uxth	r3, r3
 8026c50:	0c15      	lsrs	r5, r2, #16
 8026c52:	0412      	lsls	r2, r2, #16
 8026c54:	431a      	orrs	r2, r3
 8026c56:	9b05      	ldr	r3, [sp, #20]
 8026c58:	c704      	stmia	r7!, {r2}
 8026c5a:	42b3      	cmp	r3, r6
 8026c5c:	d8e6      	bhi.n	8026c2c <__multiply+0xc4>
 8026c5e:	4663      	mov	r3, ip
 8026c60:	9a06      	ldr	r2, [sp, #24]
 8026c62:	509d      	str	r5, [r3, r2]
 8026c64:	9b01      	ldr	r3, [sp, #4]
 8026c66:	6818      	ldr	r0, [r3, #0]
 8026c68:	0c00      	lsrs	r0, r0, #16
 8026c6a:	d020      	beq.n	8026cae <__multiply+0x146>
 8026c6c:	4663      	mov	r3, ip
 8026c6e:	0025      	movs	r5, r4
 8026c70:	4661      	mov	r1, ip
 8026c72:	2700      	movs	r7, #0
 8026c74:	681b      	ldr	r3, [r3, #0]
 8026c76:	3514      	adds	r5, #20
 8026c78:	682a      	ldr	r2, [r5, #0]
 8026c7a:	680e      	ldr	r6, [r1, #0]
 8026c7c:	b292      	uxth	r2, r2
 8026c7e:	4342      	muls	r2, r0
 8026c80:	0c36      	lsrs	r6, r6, #16
 8026c82:	1992      	adds	r2, r2, r6
 8026c84:	19d2      	adds	r2, r2, r7
 8026c86:	0416      	lsls	r6, r2, #16
 8026c88:	b29b      	uxth	r3, r3
 8026c8a:	431e      	orrs	r6, r3
 8026c8c:	600e      	str	r6, [r1, #0]
 8026c8e:	cd40      	ldmia	r5!, {r6}
 8026c90:	684b      	ldr	r3, [r1, #4]
 8026c92:	0c36      	lsrs	r6, r6, #16
 8026c94:	4346      	muls	r6, r0
 8026c96:	b29b      	uxth	r3, r3
 8026c98:	0c12      	lsrs	r2, r2, #16
 8026c9a:	18f3      	adds	r3, r6, r3
 8026c9c:	189b      	adds	r3, r3, r2
 8026c9e:	9a05      	ldr	r2, [sp, #20]
 8026ca0:	0c1f      	lsrs	r7, r3, #16
 8026ca2:	3104      	adds	r1, #4
 8026ca4:	42aa      	cmp	r2, r5
 8026ca6:	d8e7      	bhi.n	8026c78 <__multiply+0x110>
 8026ca8:	4662      	mov	r2, ip
 8026caa:	9906      	ldr	r1, [sp, #24]
 8026cac:	5053      	str	r3, [r2, r1]
 8026cae:	9b01      	ldr	r3, [sp, #4]
 8026cb0:	3304      	adds	r3, #4
 8026cb2:	9301      	str	r3, [sp, #4]
 8026cb4:	2304      	movs	r3, #4
 8026cb6:	449c      	add	ip, r3
 8026cb8:	e79b      	b.n	8026bf2 <__multiply+0x8a>
 8026cba:	9b03      	ldr	r3, [sp, #12]
 8026cbc:	3b01      	subs	r3, #1
 8026cbe:	9303      	str	r3, [sp, #12]
 8026cc0:	e79b      	b.n	8026bfa <__multiply+0x92>
 8026cc2:	46c0      	nop			@ (mov r8, r8)
 8026cc4:	0802dd01 	.word	0x0802dd01
 8026cc8:	0802dd72 	.word	0x0802dd72

08026ccc <__pow5mult>:
 8026ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026cce:	2303      	movs	r3, #3
 8026cd0:	0015      	movs	r5, r2
 8026cd2:	0007      	movs	r7, r0
 8026cd4:	000e      	movs	r6, r1
 8026cd6:	401a      	ands	r2, r3
 8026cd8:	421d      	tst	r5, r3
 8026cda:	d008      	beq.n	8026cee <__pow5mult+0x22>
 8026cdc:	4925      	ldr	r1, [pc, #148]	@ (8026d74 <__pow5mult+0xa8>)
 8026cde:	3a01      	subs	r2, #1
 8026ce0:	0092      	lsls	r2, r2, #2
 8026ce2:	5852      	ldr	r2, [r2, r1]
 8026ce4:	2300      	movs	r3, #0
 8026ce6:	0031      	movs	r1, r6
 8026ce8:	f7ff fe46 	bl	8026978 <__multadd>
 8026cec:	0006      	movs	r6, r0
 8026cee:	10ad      	asrs	r5, r5, #2
 8026cf0:	d03d      	beq.n	8026d6e <__pow5mult+0xa2>
 8026cf2:	69fc      	ldr	r4, [r7, #28]
 8026cf4:	2c00      	cmp	r4, #0
 8026cf6:	d10f      	bne.n	8026d18 <__pow5mult+0x4c>
 8026cf8:	2010      	movs	r0, #16
 8026cfa:	f7ff fd07 	bl	802670c <malloc>
 8026cfe:	1e02      	subs	r2, r0, #0
 8026d00:	61f8      	str	r0, [r7, #28]
 8026d02:	d105      	bne.n	8026d10 <__pow5mult+0x44>
 8026d04:	21b4      	movs	r1, #180	@ 0xb4
 8026d06:	4b1c      	ldr	r3, [pc, #112]	@ (8026d78 <__pow5mult+0xac>)
 8026d08:	481c      	ldr	r0, [pc, #112]	@ (8026d7c <__pow5mult+0xb0>)
 8026d0a:	31ff      	adds	r1, #255	@ 0xff
 8026d0c:	f000 feac 	bl	8027a68 <__assert_func>
 8026d10:	6044      	str	r4, [r0, #4]
 8026d12:	6084      	str	r4, [r0, #8]
 8026d14:	6004      	str	r4, [r0, #0]
 8026d16:	60c4      	str	r4, [r0, #12]
 8026d18:	69fb      	ldr	r3, [r7, #28]
 8026d1a:	689c      	ldr	r4, [r3, #8]
 8026d1c:	9301      	str	r3, [sp, #4]
 8026d1e:	2c00      	cmp	r4, #0
 8026d20:	d108      	bne.n	8026d34 <__pow5mult+0x68>
 8026d22:	0038      	movs	r0, r7
 8026d24:	4916      	ldr	r1, [pc, #88]	@ (8026d80 <__pow5mult+0xb4>)
 8026d26:	f7ff ff07 	bl	8026b38 <__i2b>
 8026d2a:	9b01      	ldr	r3, [sp, #4]
 8026d2c:	0004      	movs	r4, r0
 8026d2e:	6098      	str	r0, [r3, #8]
 8026d30:	2300      	movs	r3, #0
 8026d32:	6003      	str	r3, [r0, #0]
 8026d34:	2301      	movs	r3, #1
 8026d36:	421d      	tst	r5, r3
 8026d38:	d00a      	beq.n	8026d50 <__pow5mult+0x84>
 8026d3a:	0031      	movs	r1, r6
 8026d3c:	0022      	movs	r2, r4
 8026d3e:	0038      	movs	r0, r7
 8026d40:	f7ff ff12 	bl	8026b68 <__multiply>
 8026d44:	0031      	movs	r1, r6
 8026d46:	9001      	str	r0, [sp, #4]
 8026d48:	0038      	movs	r0, r7
 8026d4a:	f7ff fdf1 	bl	8026930 <_Bfree>
 8026d4e:	9e01      	ldr	r6, [sp, #4]
 8026d50:	106d      	asrs	r5, r5, #1
 8026d52:	d00c      	beq.n	8026d6e <__pow5mult+0xa2>
 8026d54:	6820      	ldr	r0, [r4, #0]
 8026d56:	2800      	cmp	r0, #0
 8026d58:	d107      	bne.n	8026d6a <__pow5mult+0x9e>
 8026d5a:	0022      	movs	r2, r4
 8026d5c:	0021      	movs	r1, r4
 8026d5e:	0038      	movs	r0, r7
 8026d60:	f7ff ff02 	bl	8026b68 <__multiply>
 8026d64:	2300      	movs	r3, #0
 8026d66:	6020      	str	r0, [r4, #0]
 8026d68:	6003      	str	r3, [r0, #0]
 8026d6a:	0004      	movs	r4, r0
 8026d6c:	e7e2      	b.n	8026d34 <__pow5mult+0x68>
 8026d6e:	0030      	movs	r0, r6
 8026d70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026d72:	46c0      	nop			@ (mov r8, r8)
 8026d74:	0802ddcc 	.word	0x0802ddcc
 8026d78:	0802dc92 	.word	0x0802dc92
 8026d7c:	0802dd72 	.word	0x0802dd72
 8026d80:	00000271 	.word	0x00000271

08026d84 <__lshift>:
 8026d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026d86:	000c      	movs	r4, r1
 8026d88:	0016      	movs	r6, r2
 8026d8a:	6923      	ldr	r3, [r4, #16]
 8026d8c:	1157      	asrs	r7, r2, #5
 8026d8e:	b085      	sub	sp, #20
 8026d90:	18fb      	adds	r3, r7, r3
 8026d92:	9301      	str	r3, [sp, #4]
 8026d94:	3301      	adds	r3, #1
 8026d96:	9300      	str	r3, [sp, #0]
 8026d98:	6849      	ldr	r1, [r1, #4]
 8026d9a:	68a3      	ldr	r3, [r4, #8]
 8026d9c:	9002      	str	r0, [sp, #8]
 8026d9e:	9a00      	ldr	r2, [sp, #0]
 8026da0:	4293      	cmp	r3, r2
 8026da2:	db10      	blt.n	8026dc6 <__lshift+0x42>
 8026da4:	9802      	ldr	r0, [sp, #8]
 8026da6:	f7ff fd7f 	bl	80268a8 <_Balloc>
 8026daa:	2300      	movs	r3, #0
 8026dac:	0001      	movs	r1, r0
 8026dae:	0005      	movs	r5, r0
 8026db0:	001a      	movs	r2, r3
 8026db2:	3114      	adds	r1, #20
 8026db4:	4298      	cmp	r0, r3
 8026db6:	d10c      	bne.n	8026dd2 <__lshift+0x4e>
 8026db8:	21ef      	movs	r1, #239	@ 0xef
 8026dba:	002a      	movs	r2, r5
 8026dbc:	4b25      	ldr	r3, [pc, #148]	@ (8026e54 <__lshift+0xd0>)
 8026dbe:	4826      	ldr	r0, [pc, #152]	@ (8026e58 <__lshift+0xd4>)
 8026dc0:	0049      	lsls	r1, r1, #1
 8026dc2:	f000 fe51 	bl	8027a68 <__assert_func>
 8026dc6:	3101      	adds	r1, #1
 8026dc8:	005b      	lsls	r3, r3, #1
 8026dca:	e7e8      	b.n	8026d9e <__lshift+0x1a>
 8026dcc:	0098      	lsls	r0, r3, #2
 8026dce:	500a      	str	r2, [r1, r0]
 8026dd0:	3301      	adds	r3, #1
 8026dd2:	42bb      	cmp	r3, r7
 8026dd4:	dbfa      	blt.n	8026dcc <__lshift+0x48>
 8026dd6:	43fb      	mvns	r3, r7
 8026dd8:	17db      	asrs	r3, r3, #31
 8026dda:	401f      	ands	r7, r3
 8026ddc:	00bf      	lsls	r7, r7, #2
 8026dde:	0023      	movs	r3, r4
 8026de0:	201f      	movs	r0, #31
 8026de2:	19c9      	adds	r1, r1, r7
 8026de4:	0037      	movs	r7, r6
 8026de6:	6922      	ldr	r2, [r4, #16]
 8026de8:	3314      	adds	r3, #20
 8026dea:	0092      	lsls	r2, r2, #2
 8026dec:	189a      	adds	r2, r3, r2
 8026dee:	4007      	ands	r7, r0
 8026df0:	4206      	tst	r6, r0
 8026df2:	d029      	beq.n	8026e48 <__lshift+0xc4>
 8026df4:	3001      	adds	r0, #1
 8026df6:	1bc0      	subs	r0, r0, r7
 8026df8:	9003      	str	r0, [sp, #12]
 8026dfa:	468c      	mov	ip, r1
 8026dfc:	2000      	movs	r0, #0
 8026dfe:	681e      	ldr	r6, [r3, #0]
 8026e00:	40be      	lsls	r6, r7
 8026e02:	4306      	orrs	r6, r0
 8026e04:	4660      	mov	r0, ip
 8026e06:	c040      	stmia	r0!, {r6}
 8026e08:	4684      	mov	ip, r0
 8026e0a:	9e03      	ldr	r6, [sp, #12]
 8026e0c:	cb01      	ldmia	r3!, {r0}
 8026e0e:	40f0      	lsrs	r0, r6
 8026e10:	429a      	cmp	r2, r3
 8026e12:	d8f4      	bhi.n	8026dfe <__lshift+0x7a>
 8026e14:	0026      	movs	r6, r4
 8026e16:	3615      	adds	r6, #21
 8026e18:	2304      	movs	r3, #4
 8026e1a:	42b2      	cmp	r2, r6
 8026e1c:	d304      	bcc.n	8026e28 <__lshift+0xa4>
 8026e1e:	1b13      	subs	r3, r2, r4
 8026e20:	3b15      	subs	r3, #21
 8026e22:	089b      	lsrs	r3, r3, #2
 8026e24:	3301      	adds	r3, #1
 8026e26:	009b      	lsls	r3, r3, #2
 8026e28:	50c8      	str	r0, [r1, r3]
 8026e2a:	2800      	cmp	r0, #0
 8026e2c:	d002      	beq.n	8026e34 <__lshift+0xb0>
 8026e2e:	9b01      	ldr	r3, [sp, #4]
 8026e30:	3302      	adds	r3, #2
 8026e32:	9300      	str	r3, [sp, #0]
 8026e34:	9b00      	ldr	r3, [sp, #0]
 8026e36:	9802      	ldr	r0, [sp, #8]
 8026e38:	3b01      	subs	r3, #1
 8026e3a:	0021      	movs	r1, r4
 8026e3c:	612b      	str	r3, [r5, #16]
 8026e3e:	f7ff fd77 	bl	8026930 <_Bfree>
 8026e42:	0028      	movs	r0, r5
 8026e44:	b005      	add	sp, #20
 8026e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026e48:	cb01      	ldmia	r3!, {r0}
 8026e4a:	c101      	stmia	r1!, {r0}
 8026e4c:	429a      	cmp	r2, r3
 8026e4e:	d8fb      	bhi.n	8026e48 <__lshift+0xc4>
 8026e50:	e7f0      	b.n	8026e34 <__lshift+0xb0>
 8026e52:	46c0      	nop			@ (mov r8, r8)
 8026e54:	0802dd01 	.word	0x0802dd01
 8026e58:	0802dd72 	.word	0x0802dd72

08026e5c <__mcmp>:
 8026e5c:	b530      	push	{r4, r5, lr}
 8026e5e:	690b      	ldr	r3, [r1, #16]
 8026e60:	6904      	ldr	r4, [r0, #16]
 8026e62:	0002      	movs	r2, r0
 8026e64:	1ae0      	subs	r0, r4, r3
 8026e66:	429c      	cmp	r4, r3
 8026e68:	d10f      	bne.n	8026e8a <__mcmp+0x2e>
 8026e6a:	3214      	adds	r2, #20
 8026e6c:	009b      	lsls	r3, r3, #2
 8026e6e:	3114      	adds	r1, #20
 8026e70:	0014      	movs	r4, r2
 8026e72:	18c9      	adds	r1, r1, r3
 8026e74:	18d2      	adds	r2, r2, r3
 8026e76:	3a04      	subs	r2, #4
 8026e78:	3904      	subs	r1, #4
 8026e7a:	6815      	ldr	r5, [r2, #0]
 8026e7c:	680b      	ldr	r3, [r1, #0]
 8026e7e:	429d      	cmp	r5, r3
 8026e80:	d004      	beq.n	8026e8c <__mcmp+0x30>
 8026e82:	2001      	movs	r0, #1
 8026e84:	429d      	cmp	r5, r3
 8026e86:	d200      	bcs.n	8026e8a <__mcmp+0x2e>
 8026e88:	3802      	subs	r0, #2
 8026e8a:	bd30      	pop	{r4, r5, pc}
 8026e8c:	4294      	cmp	r4, r2
 8026e8e:	d3f2      	bcc.n	8026e76 <__mcmp+0x1a>
 8026e90:	e7fb      	b.n	8026e8a <__mcmp+0x2e>
	...

08026e94 <__mdiff>:
 8026e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026e96:	000c      	movs	r4, r1
 8026e98:	b087      	sub	sp, #28
 8026e9a:	9000      	str	r0, [sp, #0]
 8026e9c:	0011      	movs	r1, r2
 8026e9e:	0020      	movs	r0, r4
 8026ea0:	0017      	movs	r7, r2
 8026ea2:	f7ff ffdb 	bl	8026e5c <__mcmp>
 8026ea6:	1e05      	subs	r5, r0, #0
 8026ea8:	d110      	bne.n	8026ecc <__mdiff+0x38>
 8026eaa:	0001      	movs	r1, r0
 8026eac:	9800      	ldr	r0, [sp, #0]
 8026eae:	f7ff fcfb 	bl	80268a8 <_Balloc>
 8026eb2:	1e02      	subs	r2, r0, #0
 8026eb4:	d104      	bne.n	8026ec0 <__mdiff+0x2c>
 8026eb6:	4b40      	ldr	r3, [pc, #256]	@ (8026fb8 <__mdiff+0x124>)
 8026eb8:	4840      	ldr	r0, [pc, #256]	@ (8026fbc <__mdiff+0x128>)
 8026eba:	4941      	ldr	r1, [pc, #260]	@ (8026fc0 <__mdiff+0x12c>)
 8026ebc:	f000 fdd4 	bl	8027a68 <__assert_func>
 8026ec0:	2301      	movs	r3, #1
 8026ec2:	6145      	str	r5, [r0, #20]
 8026ec4:	6103      	str	r3, [r0, #16]
 8026ec6:	0010      	movs	r0, r2
 8026ec8:	b007      	add	sp, #28
 8026eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ecc:	2600      	movs	r6, #0
 8026ece:	42b0      	cmp	r0, r6
 8026ed0:	da03      	bge.n	8026eda <__mdiff+0x46>
 8026ed2:	0023      	movs	r3, r4
 8026ed4:	003c      	movs	r4, r7
 8026ed6:	001f      	movs	r7, r3
 8026ed8:	3601      	adds	r6, #1
 8026eda:	6861      	ldr	r1, [r4, #4]
 8026edc:	9800      	ldr	r0, [sp, #0]
 8026ede:	f7ff fce3 	bl	80268a8 <_Balloc>
 8026ee2:	1e02      	subs	r2, r0, #0
 8026ee4:	d103      	bne.n	8026eee <__mdiff+0x5a>
 8026ee6:	4b34      	ldr	r3, [pc, #208]	@ (8026fb8 <__mdiff+0x124>)
 8026ee8:	4834      	ldr	r0, [pc, #208]	@ (8026fbc <__mdiff+0x128>)
 8026eea:	4936      	ldr	r1, [pc, #216]	@ (8026fc4 <__mdiff+0x130>)
 8026eec:	e7e6      	b.n	8026ebc <__mdiff+0x28>
 8026eee:	6923      	ldr	r3, [r4, #16]
 8026ef0:	3414      	adds	r4, #20
 8026ef2:	9300      	str	r3, [sp, #0]
 8026ef4:	009b      	lsls	r3, r3, #2
 8026ef6:	18e3      	adds	r3, r4, r3
 8026ef8:	0021      	movs	r1, r4
 8026efa:	9401      	str	r4, [sp, #4]
 8026efc:	003c      	movs	r4, r7
 8026efe:	9302      	str	r3, [sp, #8]
 8026f00:	693b      	ldr	r3, [r7, #16]
 8026f02:	3414      	adds	r4, #20
 8026f04:	009b      	lsls	r3, r3, #2
 8026f06:	18e3      	adds	r3, r4, r3
 8026f08:	9303      	str	r3, [sp, #12]
 8026f0a:	0003      	movs	r3, r0
 8026f0c:	60c6      	str	r6, [r0, #12]
 8026f0e:	468c      	mov	ip, r1
 8026f10:	2000      	movs	r0, #0
 8026f12:	3314      	adds	r3, #20
 8026f14:	9304      	str	r3, [sp, #16]
 8026f16:	9305      	str	r3, [sp, #20]
 8026f18:	4663      	mov	r3, ip
 8026f1a:	cb20      	ldmia	r3!, {r5}
 8026f1c:	b2a9      	uxth	r1, r5
 8026f1e:	000e      	movs	r6, r1
 8026f20:	469c      	mov	ip, r3
 8026f22:	cc08      	ldmia	r4!, {r3}
 8026f24:	0c2d      	lsrs	r5, r5, #16
 8026f26:	b299      	uxth	r1, r3
 8026f28:	1a71      	subs	r1, r6, r1
 8026f2a:	1809      	adds	r1, r1, r0
 8026f2c:	0c1b      	lsrs	r3, r3, #16
 8026f2e:	1408      	asrs	r0, r1, #16
 8026f30:	1aeb      	subs	r3, r5, r3
 8026f32:	181b      	adds	r3, r3, r0
 8026f34:	1418      	asrs	r0, r3, #16
 8026f36:	b289      	uxth	r1, r1
 8026f38:	041b      	lsls	r3, r3, #16
 8026f3a:	4319      	orrs	r1, r3
 8026f3c:	9b05      	ldr	r3, [sp, #20]
 8026f3e:	c302      	stmia	r3!, {r1}
 8026f40:	9305      	str	r3, [sp, #20]
 8026f42:	9b03      	ldr	r3, [sp, #12]
 8026f44:	42a3      	cmp	r3, r4
 8026f46:	d8e7      	bhi.n	8026f18 <__mdiff+0x84>
 8026f48:	0039      	movs	r1, r7
 8026f4a:	9c03      	ldr	r4, [sp, #12]
 8026f4c:	3115      	adds	r1, #21
 8026f4e:	2304      	movs	r3, #4
 8026f50:	428c      	cmp	r4, r1
 8026f52:	d304      	bcc.n	8026f5e <__mdiff+0xca>
 8026f54:	1be3      	subs	r3, r4, r7
 8026f56:	3b15      	subs	r3, #21
 8026f58:	089b      	lsrs	r3, r3, #2
 8026f5a:	3301      	adds	r3, #1
 8026f5c:	009b      	lsls	r3, r3, #2
 8026f5e:	9901      	ldr	r1, [sp, #4]
 8026f60:	18cd      	adds	r5, r1, r3
 8026f62:	9904      	ldr	r1, [sp, #16]
 8026f64:	002e      	movs	r6, r5
 8026f66:	18cb      	adds	r3, r1, r3
 8026f68:	001f      	movs	r7, r3
 8026f6a:	9902      	ldr	r1, [sp, #8]
 8026f6c:	428e      	cmp	r6, r1
 8026f6e:	d311      	bcc.n	8026f94 <__mdiff+0x100>
 8026f70:	9c02      	ldr	r4, [sp, #8]
 8026f72:	1ee9      	subs	r1, r5, #3
 8026f74:	2000      	movs	r0, #0
 8026f76:	428c      	cmp	r4, r1
 8026f78:	d304      	bcc.n	8026f84 <__mdiff+0xf0>
 8026f7a:	0021      	movs	r1, r4
 8026f7c:	3103      	adds	r1, #3
 8026f7e:	1b49      	subs	r1, r1, r5
 8026f80:	0889      	lsrs	r1, r1, #2
 8026f82:	0088      	lsls	r0, r1, #2
 8026f84:	181b      	adds	r3, r3, r0
 8026f86:	3b04      	subs	r3, #4
 8026f88:	6819      	ldr	r1, [r3, #0]
 8026f8a:	2900      	cmp	r1, #0
 8026f8c:	d010      	beq.n	8026fb0 <__mdiff+0x11c>
 8026f8e:	9b00      	ldr	r3, [sp, #0]
 8026f90:	6113      	str	r3, [r2, #16]
 8026f92:	e798      	b.n	8026ec6 <__mdiff+0x32>
 8026f94:	4684      	mov	ip, r0
 8026f96:	ce02      	ldmia	r6!, {r1}
 8026f98:	b288      	uxth	r0, r1
 8026f9a:	4460      	add	r0, ip
 8026f9c:	1400      	asrs	r0, r0, #16
 8026f9e:	0c0c      	lsrs	r4, r1, #16
 8026fa0:	1904      	adds	r4, r0, r4
 8026fa2:	4461      	add	r1, ip
 8026fa4:	1420      	asrs	r0, r4, #16
 8026fa6:	b289      	uxth	r1, r1
 8026fa8:	0424      	lsls	r4, r4, #16
 8026faa:	4321      	orrs	r1, r4
 8026fac:	c702      	stmia	r7!, {r1}
 8026fae:	e7dc      	b.n	8026f6a <__mdiff+0xd6>
 8026fb0:	9900      	ldr	r1, [sp, #0]
 8026fb2:	3901      	subs	r1, #1
 8026fb4:	9100      	str	r1, [sp, #0]
 8026fb6:	e7e6      	b.n	8026f86 <__mdiff+0xf2>
 8026fb8:	0802dd01 	.word	0x0802dd01
 8026fbc:	0802dd72 	.word	0x0802dd72
 8026fc0:	00000237 	.word	0x00000237
 8026fc4:	00000245 	.word	0x00000245

08026fc8 <__ulp>:
 8026fc8:	b510      	push	{r4, lr}
 8026fca:	2400      	movs	r4, #0
 8026fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8027000 <__ulp+0x38>)
 8026fce:	4a0d      	ldr	r2, [pc, #52]	@ (8027004 <__ulp+0x3c>)
 8026fd0:	400b      	ands	r3, r1
 8026fd2:	189b      	adds	r3, r3, r2
 8026fd4:	42a3      	cmp	r3, r4
 8026fd6:	dc06      	bgt.n	8026fe6 <__ulp+0x1e>
 8026fd8:	425b      	negs	r3, r3
 8026fda:	151a      	asrs	r2, r3, #20
 8026fdc:	2a13      	cmp	r2, #19
 8026fde:	dc05      	bgt.n	8026fec <__ulp+0x24>
 8026fe0:	2380      	movs	r3, #128	@ 0x80
 8026fe2:	031b      	lsls	r3, r3, #12
 8026fe4:	4113      	asrs	r3, r2
 8026fe6:	0019      	movs	r1, r3
 8026fe8:	0020      	movs	r0, r4
 8026fea:	bd10      	pop	{r4, pc}
 8026fec:	3a14      	subs	r2, #20
 8026fee:	2401      	movs	r4, #1
 8026ff0:	2a1e      	cmp	r2, #30
 8026ff2:	dc02      	bgt.n	8026ffa <__ulp+0x32>
 8026ff4:	2480      	movs	r4, #128	@ 0x80
 8026ff6:	0624      	lsls	r4, r4, #24
 8026ff8:	40d4      	lsrs	r4, r2
 8026ffa:	2300      	movs	r3, #0
 8026ffc:	e7f3      	b.n	8026fe6 <__ulp+0x1e>
 8026ffe:	46c0      	nop			@ (mov r8, r8)
 8027000:	7ff00000 	.word	0x7ff00000
 8027004:	fcc00000 	.word	0xfcc00000

08027008 <__b2d>:
 8027008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802700a:	0006      	movs	r6, r0
 802700c:	6903      	ldr	r3, [r0, #16]
 802700e:	3614      	adds	r6, #20
 8027010:	009b      	lsls	r3, r3, #2
 8027012:	18f3      	adds	r3, r6, r3
 8027014:	1f1d      	subs	r5, r3, #4
 8027016:	682c      	ldr	r4, [r5, #0]
 8027018:	000f      	movs	r7, r1
 802701a:	0020      	movs	r0, r4
 802701c:	9301      	str	r3, [sp, #4]
 802701e:	f7ff fd3b 	bl	8026a98 <__hi0bits>
 8027022:	2220      	movs	r2, #32
 8027024:	1a12      	subs	r2, r2, r0
 8027026:	603a      	str	r2, [r7, #0]
 8027028:	0003      	movs	r3, r0
 802702a:	4a1c      	ldr	r2, [pc, #112]	@ (802709c <__b2d+0x94>)
 802702c:	280a      	cmp	r0, #10
 802702e:	dc15      	bgt.n	802705c <__b2d+0x54>
 8027030:	210b      	movs	r1, #11
 8027032:	0027      	movs	r7, r4
 8027034:	1a09      	subs	r1, r1, r0
 8027036:	40cf      	lsrs	r7, r1
 8027038:	433a      	orrs	r2, r7
 802703a:	468c      	mov	ip, r1
 802703c:	0011      	movs	r1, r2
 802703e:	2200      	movs	r2, #0
 8027040:	42ae      	cmp	r6, r5
 8027042:	d202      	bcs.n	802704a <__b2d+0x42>
 8027044:	9a01      	ldr	r2, [sp, #4]
 8027046:	3a08      	subs	r2, #8
 8027048:	6812      	ldr	r2, [r2, #0]
 802704a:	3315      	adds	r3, #21
 802704c:	409c      	lsls	r4, r3
 802704e:	4663      	mov	r3, ip
 8027050:	0027      	movs	r7, r4
 8027052:	40da      	lsrs	r2, r3
 8027054:	4317      	orrs	r7, r2
 8027056:	0038      	movs	r0, r7
 8027058:	b003      	add	sp, #12
 802705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802705c:	2700      	movs	r7, #0
 802705e:	42ae      	cmp	r6, r5
 8027060:	d202      	bcs.n	8027068 <__b2d+0x60>
 8027062:	9d01      	ldr	r5, [sp, #4]
 8027064:	3d08      	subs	r5, #8
 8027066:	682f      	ldr	r7, [r5, #0]
 8027068:	210b      	movs	r1, #11
 802706a:	4249      	negs	r1, r1
 802706c:	468c      	mov	ip, r1
 802706e:	449c      	add	ip, r3
 8027070:	2b0b      	cmp	r3, #11
 8027072:	d010      	beq.n	8027096 <__b2d+0x8e>
 8027074:	4661      	mov	r1, ip
 8027076:	2320      	movs	r3, #32
 8027078:	408c      	lsls	r4, r1
 802707a:	1a5b      	subs	r3, r3, r1
 802707c:	0039      	movs	r1, r7
 802707e:	40d9      	lsrs	r1, r3
 8027080:	430c      	orrs	r4, r1
 8027082:	4322      	orrs	r2, r4
 8027084:	0011      	movs	r1, r2
 8027086:	2200      	movs	r2, #0
 8027088:	42b5      	cmp	r5, r6
 802708a:	d901      	bls.n	8027090 <__b2d+0x88>
 802708c:	3d04      	subs	r5, #4
 802708e:	682a      	ldr	r2, [r5, #0]
 8027090:	4664      	mov	r4, ip
 8027092:	40a7      	lsls	r7, r4
 8027094:	e7dd      	b.n	8027052 <__b2d+0x4a>
 8027096:	4322      	orrs	r2, r4
 8027098:	0011      	movs	r1, r2
 802709a:	e7dc      	b.n	8027056 <__b2d+0x4e>
 802709c:	3ff00000 	.word	0x3ff00000

080270a0 <__d2b>:
 80270a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80270a2:	2101      	movs	r1, #1
 80270a4:	0016      	movs	r6, r2
 80270a6:	001f      	movs	r7, r3
 80270a8:	f7ff fbfe 	bl	80268a8 <_Balloc>
 80270ac:	1e04      	subs	r4, r0, #0
 80270ae:	d105      	bne.n	80270bc <__d2b+0x1c>
 80270b0:	0022      	movs	r2, r4
 80270b2:	4b25      	ldr	r3, [pc, #148]	@ (8027148 <__d2b+0xa8>)
 80270b4:	4825      	ldr	r0, [pc, #148]	@ (802714c <__d2b+0xac>)
 80270b6:	4926      	ldr	r1, [pc, #152]	@ (8027150 <__d2b+0xb0>)
 80270b8:	f000 fcd6 	bl	8027a68 <__assert_func>
 80270bc:	033b      	lsls	r3, r7, #12
 80270be:	007d      	lsls	r5, r7, #1
 80270c0:	0b1b      	lsrs	r3, r3, #12
 80270c2:	0d6d      	lsrs	r5, r5, #21
 80270c4:	d002      	beq.n	80270cc <__d2b+0x2c>
 80270c6:	2280      	movs	r2, #128	@ 0x80
 80270c8:	0352      	lsls	r2, r2, #13
 80270ca:	4313      	orrs	r3, r2
 80270cc:	9301      	str	r3, [sp, #4]
 80270ce:	2e00      	cmp	r6, #0
 80270d0:	d025      	beq.n	802711e <__d2b+0x7e>
 80270d2:	4668      	mov	r0, sp
 80270d4:	9600      	str	r6, [sp, #0]
 80270d6:	f7ff fd00 	bl	8026ada <__lo0bits>
 80270da:	9b01      	ldr	r3, [sp, #4]
 80270dc:	9900      	ldr	r1, [sp, #0]
 80270de:	2800      	cmp	r0, #0
 80270e0:	d01b      	beq.n	802711a <__d2b+0x7a>
 80270e2:	2220      	movs	r2, #32
 80270e4:	001e      	movs	r6, r3
 80270e6:	1a12      	subs	r2, r2, r0
 80270e8:	4096      	lsls	r6, r2
 80270ea:	0032      	movs	r2, r6
 80270ec:	40c3      	lsrs	r3, r0
 80270ee:	430a      	orrs	r2, r1
 80270f0:	6162      	str	r2, [r4, #20]
 80270f2:	9301      	str	r3, [sp, #4]
 80270f4:	9e01      	ldr	r6, [sp, #4]
 80270f6:	61a6      	str	r6, [r4, #24]
 80270f8:	1e73      	subs	r3, r6, #1
 80270fa:	419e      	sbcs	r6, r3
 80270fc:	3601      	adds	r6, #1
 80270fe:	6126      	str	r6, [r4, #16]
 8027100:	2d00      	cmp	r5, #0
 8027102:	d014      	beq.n	802712e <__d2b+0x8e>
 8027104:	2635      	movs	r6, #53	@ 0x35
 8027106:	4b13      	ldr	r3, [pc, #76]	@ (8027154 <__d2b+0xb4>)
 8027108:	18ed      	adds	r5, r5, r3
 802710a:	9b08      	ldr	r3, [sp, #32]
 802710c:	182d      	adds	r5, r5, r0
 802710e:	601d      	str	r5, [r3, #0]
 8027110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027112:	1a36      	subs	r6, r6, r0
 8027114:	601e      	str	r6, [r3, #0]
 8027116:	0020      	movs	r0, r4
 8027118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802711a:	6161      	str	r1, [r4, #20]
 802711c:	e7ea      	b.n	80270f4 <__d2b+0x54>
 802711e:	a801      	add	r0, sp, #4
 8027120:	f7ff fcdb 	bl	8026ada <__lo0bits>
 8027124:	9b01      	ldr	r3, [sp, #4]
 8027126:	2601      	movs	r6, #1
 8027128:	6163      	str	r3, [r4, #20]
 802712a:	3020      	adds	r0, #32
 802712c:	e7e7      	b.n	80270fe <__d2b+0x5e>
 802712e:	4b0a      	ldr	r3, [pc, #40]	@ (8027158 <__d2b+0xb8>)
 8027130:	18c0      	adds	r0, r0, r3
 8027132:	9b08      	ldr	r3, [sp, #32]
 8027134:	6018      	str	r0, [r3, #0]
 8027136:	4b09      	ldr	r3, [pc, #36]	@ (802715c <__d2b+0xbc>)
 8027138:	18f3      	adds	r3, r6, r3
 802713a:	009b      	lsls	r3, r3, #2
 802713c:	18e3      	adds	r3, r4, r3
 802713e:	6958      	ldr	r0, [r3, #20]
 8027140:	f7ff fcaa 	bl	8026a98 <__hi0bits>
 8027144:	0176      	lsls	r6, r6, #5
 8027146:	e7e3      	b.n	8027110 <__d2b+0x70>
 8027148:	0802dd01 	.word	0x0802dd01
 802714c:	0802dd72 	.word	0x0802dd72
 8027150:	0000030f 	.word	0x0000030f
 8027154:	fffffbcd 	.word	0xfffffbcd
 8027158:	fffffbce 	.word	0xfffffbce
 802715c:	3fffffff 	.word	0x3fffffff

08027160 <__ratio>:
 8027160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027162:	b087      	sub	sp, #28
 8027164:	000f      	movs	r7, r1
 8027166:	a904      	add	r1, sp, #16
 8027168:	0006      	movs	r6, r0
 802716a:	f7ff ff4d 	bl	8027008 <__b2d>
 802716e:	9000      	str	r0, [sp, #0]
 8027170:	9101      	str	r1, [sp, #4]
 8027172:	9b00      	ldr	r3, [sp, #0]
 8027174:	9c01      	ldr	r4, [sp, #4]
 8027176:	0038      	movs	r0, r7
 8027178:	a905      	add	r1, sp, #20
 802717a:	9302      	str	r3, [sp, #8]
 802717c:	9403      	str	r4, [sp, #12]
 802717e:	f7ff ff43 	bl	8027008 <__b2d>
 8027182:	000d      	movs	r5, r1
 8027184:	0002      	movs	r2, r0
 8027186:	000b      	movs	r3, r1
 8027188:	6930      	ldr	r0, [r6, #16]
 802718a:	6939      	ldr	r1, [r7, #16]
 802718c:	9e04      	ldr	r6, [sp, #16]
 802718e:	1a40      	subs	r0, r0, r1
 8027190:	9905      	ldr	r1, [sp, #20]
 8027192:	0140      	lsls	r0, r0, #5
 8027194:	1a71      	subs	r1, r6, r1
 8027196:	1841      	adds	r1, r0, r1
 8027198:	0508      	lsls	r0, r1, #20
 802719a:	2900      	cmp	r1, #0
 802719c:	dd08      	ble.n	80271b0 <__ratio+0x50>
 802719e:	9901      	ldr	r1, [sp, #4]
 80271a0:	1841      	adds	r1, r0, r1
 80271a2:	9103      	str	r1, [sp, #12]
 80271a4:	9802      	ldr	r0, [sp, #8]
 80271a6:	9903      	ldr	r1, [sp, #12]
 80271a8:	f7da fe04 	bl	8001db4 <__aeabi_ddiv>
 80271ac:	b007      	add	sp, #28
 80271ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80271b0:	1a2b      	subs	r3, r5, r0
 80271b2:	e7f7      	b.n	80271a4 <__ratio+0x44>

080271b4 <__copybits>:
 80271b4:	b570      	push	{r4, r5, r6, lr}
 80271b6:	0014      	movs	r4, r2
 80271b8:	0005      	movs	r5, r0
 80271ba:	3901      	subs	r1, #1
 80271bc:	6913      	ldr	r3, [r2, #16]
 80271be:	1149      	asrs	r1, r1, #5
 80271c0:	3101      	adds	r1, #1
 80271c2:	0089      	lsls	r1, r1, #2
 80271c4:	3414      	adds	r4, #20
 80271c6:	009b      	lsls	r3, r3, #2
 80271c8:	1841      	adds	r1, r0, r1
 80271ca:	18e3      	adds	r3, r4, r3
 80271cc:	42a3      	cmp	r3, r4
 80271ce:	d80d      	bhi.n	80271ec <__copybits+0x38>
 80271d0:	0014      	movs	r4, r2
 80271d2:	3411      	adds	r4, #17
 80271d4:	2500      	movs	r5, #0
 80271d6:	429c      	cmp	r4, r3
 80271d8:	d803      	bhi.n	80271e2 <__copybits+0x2e>
 80271da:	1a9b      	subs	r3, r3, r2
 80271dc:	3b11      	subs	r3, #17
 80271de:	089b      	lsrs	r3, r3, #2
 80271e0:	009d      	lsls	r5, r3, #2
 80271e2:	2300      	movs	r3, #0
 80271e4:	1940      	adds	r0, r0, r5
 80271e6:	4281      	cmp	r1, r0
 80271e8:	d803      	bhi.n	80271f2 <__copybits+0x3e>
 80271ea:	bd70      	pop	{r4, r5, r6, pc}
 80271ec:	cc40      	ldmia	r4!, {r6}
 80271ee:	c540      	stmia	r5!, {r6}
 80271f0:	e7ec      	b.n	80271cc <__copybits+0x18>
 80271f2:	c008      	stmia	r0!, {r3}
 80271f4:	e7f7      	b.n	80271e6 <__copybits+0x32>

080271f6 <__any_on>:
 80271f6:	0002      	movs	r2, r0
 80271f8:	6900      	ldr	r0, [r0, #16]
 80271fa:	b510      	push	{r4, lr}
 80271fc:	3214      	adds	r2, #20
 80271fe:	114b      	asrs	r3, r1, #5
 8027200:	4298      	cmp	r0, r3
 8027202:	db13      	blt.n	802722c <__any_on+0x36>
 8027204:	dd0c      	ble.n	8027220 <__any_on+0x2a>
 8027206:	241f      	movs	r4, #31
 8027208:	0008      	movs	r0, r1
 802720a:	4020      	ands	r0, r4
 802720c:	4221      	tst	r1, r4
 802720e:	d007      	beq.n	8027220 <__any_on+0x2a>
 8027210:	0099      	lsls	r1, r3, #2
 8027212:	588c      	ldr	r4, [r1, r2]
 8027214:	0021      	movs	r1, r4
 8027216:	40c1      	lsrs	r1, r0
 8027218:	4081      	lsls	r1, r0
 802721a:	2001      	movs	r0, #1
 802721c:	428c      	cmp	r4, r1
 802721e:	d104      	bne.n	802722a <__any_on+0x34>
 8027220:	009b      	lsls	r3, r3, #2
 8027222:	18d3      	adds	r3, r2, r3
 8027224:	4293      	cmp	r3, r2
 8027226:	d803      	bhi.n	8027230 <__any_on+0x3a>
 8027228:	2000      	movs	r0, #0
 802722a:	bd10      	pop	{r4, pc}
 802722c:	0003      	movs	r3, r0
 802722e:	e7f7      	b.n	8027220 <__any_on+0x2a>
 8027230:	3b04      	subs	r3, #4
 8027232:	6819      	ldr	r1, [r3, #0]
 8027234:	2900      	cmp	r1, #0
 8027236:	d0f5      	beq.n	8027224 <__any_on+0x2e>
 8027238:	2001      	movs	r0, #1
 802723a:	e7f6      	b.n	802722a <__any_on+0x34>

0802723c <__ascii_wctomb>:
 802723c:	0003      	movs	r3, r0
 802723e:	1e08      	subs	r0, r1, #0
 8027240:	d005      	beq.n	802724e <__ascii_wctomb+0x12>
 8027242:	2aff      	cmp	r2, #255	@ 0xff
 8027244:	d904      	bls.n	8027250 <__ascii_wctomb+0x14>
 8027246:	228a      	movs	r2, #138	@ 0x8a
 8027248:	2001      	movs	r0, #1
 802724a:	601a      	str	r2, [r3, #0]
 802724c:	4240      	negs	r0, r0
 802724e:	4770      	bx	lr
 8027250:	2001      	movs	r0, #1
 8027252:	700a      	strb	r2, [r1, #0]
 8027254:	e7fb      	b.n	802724e <__ascii_wctomb+0x12>
	...

08027258 <__ssputs_r>:
 8027258:	b5f0      	push	{r4, r5, r6, r7, lr}
 802725a:	688e      	ldr	r6, [r1, #8]
 802725c:	b085      	sub	sp, #20
 802725e:	001f      	movs	r7, r3
 8027260:	000c      	movs	r4, r1
 8027262:	680b      	ldr	r3, [r1, #0]
 8027264:	9002      	str	r0, [sp, #8]
 8027266:	9203      	str	r2, [sp, #12]
 8027268:	42be      	cmp	r6, r7
 802726a:	d830      	bhi.n	80272ce <__ssputs_r+0x76>
 802726c:	210c      	movs	r1, #12
 802726e:	5e62      	ldrsh	r2, [r4, r1]
 8027270:	2190      	movs	r1, #144	@ 0x90
 8027272:	00c9      	lsls	r1, r1, #3
 8027274:	420a      	tst	r2, r1
 8027276:	d028      	beq.n	80272ca <__ssputs_r+0x72>
 8027278:	2003      	movs	r0, #3
 802727a:	6921      	ldr	r1, [r4, #16]
 802727c:	1a5b      	subs	r3, r3, r1
 802727e:	9301      	str	r3, [sp, #4]
 8027280:	6963      	ldr	r3, [r4, #20]
 8027282:	4343      	muls	r3, r0
 8027284:	9801      	ldr	r0, [sp, #4]
 8027286:	0fdd      	lsrs	r5, r3, #31
 8027288:	18ed      	adds	r5, r5, r3
 802728a:	1c7b      	adds	r3, r7, #1
 802728c:	181b      	adds	r3, r3, r0
 802728e:	106d      	asrs	r5, r5, #1
 8027290:	42ab      	cmp	r3, r5
 8027292:	d900      	bls.n	8027296 <__ssputs_r+0x3e>
 8027294:	001d      	movs	r5, r3
 8027296:	0552      	lsls	r2, r2, #21
 8027298:	d528      	bpl.n	80272ec <__ssputs_r+0x94>
 802729a:	0029      	movs	r1, r5
 802729c:	9802      	ldr	r0, [sp, #8]
 802729e:	f7ff fa61 	bl	8026764 <_malloc_r>
 80272a2:	1e06      	subs	r6, r0, #0
 80272a4:	d02c      	beq.n	8027300 <__ssputs_r+0xa8>
 80272a6:	9a01      	ldr	r2, [sp, #4]
 80272a8:	6921      	ldr	r1, [r4, #16]
 80272aa:	f7fd fff9 	bl	80252a0 <memcpy>
 80272ae:	89a2      	ldrh	r2, [r4, #12]
 80272b0:	4b18      	ldr	r3, [pc, #96]	@ (8027314 <__ssputs_r+0xbc>)
 80272b2:	401a      	ands	r2, r3
 80272b4:	2380      	movs	r3, #128	@ 0x80
 80272b6:	4313      	orrs	r3, r2
 80272b8:	81a3      	strh	r3, [r4, #12]
 80272ba:	9b01      	ldr	r3, [sp, #4]
 80272bc:	6126      	str	r6, [r4, #16]
 80272be:	18f6      	adds	r6, r6, r3
 80272c0:	6026      	str	r6, [r4, #0]
 80272c2:	003e      	movs	r6, r7
 80272c4:	6165      	str	r5, [r4, #20]
 80272c6:	1aed      	subs	r5, r5, r3
 80272c8:	60a5      	str	r5, [r4, #8]
 80272ca:	42be      	cmp	r6, r7
 80272cc:	d900      	bls.n	80272d0 <__ssputs_r+0x78>
 80272ce:	003e      	movs	r6, r7
 80272d0:	0032      	movs	r2, r6
 80272d2:	9903      	ldr	r1, [sp, #12]
 80272d4:	6820      	ldr	r0, [r4, #0]
 80272d6:	f000 fb7e 	bl	80279d6 <memmove>
 80272da:	2000      	movs	r0, #0
 80272dc:	68a3      	ldr	r3, [r4, #8]
 80272de:	1b9b      	subs	r3, r3, r6
 80272e0:	60a3      	str	r3, [r4, #8]
 80272e2:	6823      	ldr	r3, [r4, #0]
 80272e4:	199b      	adds	r3, r3, r6
 80272e6:	6023      	str	r3, [r4, #0]
 80272e8:	b005      	add	sp, #20
 80272ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80272ec:	002a      	movs	r2, r5
 80272ee:	9802      	ldr	r0, [sp, #8]
 80272f0:	f000 fc05 	bl	8027afe <_realloc_r>
 80272f4:	1e06      	subs	r6, r0, #0
 80272f6:	d1e0      	bne.n	80272ba <__ssputs_r+0x62>
 80272f8:	6921      	ldr	r1, [r4, #16]
 80272fa:	9802      	ldr	r0, [sp, #8]
 80272fc:	f7fe fe62 	bl	8025fc4 <_free_r>
 8027300:	230c      	movs	r3, #12
 8027302:	2001      	movs	r0, #1
 8027304:	9a02      	ldr	r2, [sp, #8]
 8027306:	4240      	negs	r0, r0
 8027308:	6013      	str	r3, [r2, #0]
 802730a:	89a2      	ldrh	r2, [r4, #12]
 802730c:	3334      	adds	r3, #52	@ 0x34
 802730e:	4313      	orrs	r3, r2
 8027310:	81a3      	strh	r3, [r4, #12]
 8027312:	e7e9      	b.n	80272e8 <__ssputs_r+0x90>
 8027314:	fffffb7f 	.word	0xfffffb7f

08027318 <_svfiprintf_r>:
 8027318:	b5f0      	push	{r4, r5, r6, r7, lr}
 802731a:	b0a1      	sub	sp, #132	@ 0x84
 802731c:	9003      	str	r0, [sp, #12]
 802731e:	001d      	movs	r5, r3
 8027320:	898b      	ldrh	r3, [r1, #12]
 8027322:	000f      	movs	r7, r1
 8027324:	0016      	movs	r6, r2
 8027326:	061b      	lsls	r3, r3, #24
 8027328:	d511      	bpl.n	802734e <_svfiprintf_r+0x36>
 802732a:	690b      	ldr	r3, [r1, #16]
 802732c:	2b00      	cmp	r3, #0
 802732e:	d10e      	bne.n	802734e <_svfiprintf_r+0x36>
 8027330:	2140      	movs	r1, #64	@ 0x40
 8027332:	f7ff fa17 	bl	8026764 <_malloc_r>
 8027336:	6038      	str	r0, [r7, #0]
 8027338:	6138      	str	r0, [r7, #16]
 802733a:	2800      	cmp	r0, #0
 802733c:	d105      	bne.n	802734a <_svfiprintf_r+0x32>
 802733e:	230c      	movs	r3, #12
 8027340:	9a03      	ldr	r2, [sp, #12]
 8027342:	6013      	str	r3, [r2, #0]
 8027344:	2001      	movs	r0, #1
 8027346:	4240      	negs	r0, r0
 8027348:	e0cf      	b.n	80274ea <_svfiprintf_r+0x1d2>
 802734a:	2340      	movs	r3, #64	@ 0x40
 802734c:	617b      	str	r3, [r7, #20]
 802734e:	2300      	movs	r3, #0
 8027350:	ac08      	add	r4, sp, #32
 8027352:	6163      	str	r3, [r4, #20]
 8027354:	3320      	adds	r3, #32
 8027356:	7663      	strb	r3, [r4, #25]
 8027358:	3310      	adds	r3, #16
 802735a:	76a3      	strb	r3, [r4, #26]
 802735c:	9507      	str	r5, [sp, #28]
 802735e:	0035      	movs	r5, r6
 8027360:	782b      	ldrb	r3, [r5, #0]
 8027362:	2b00      	cmp	r3, #0
 8027364:	d001      	beq.n	802736a <_svfiprintf_r+0x52>
 8027366:	2b25      	cmp	r3, #37	@ 0x25
 8027368:	d148      	bne.n	80273fc <_svfiprintf_r+0xe4>
 802736a:	1bab      	subs	r3, r5, r6
 802736c:	9305      	str	r3, [sp, #20]
 802736e:	42b5      	cmp	r5, r6
 8027370:	d00b      	beq.n	802738a <_svfiprintf_r+0x72>
 8027372:	0032      	movs	r2, r6
 8027374:	0039      	movs	r1, r7
 8027376:	9803      	ldr	r0, [sp, #12]
 8027378:	f7ff ff6e 	bl	8027258 <__ssputs_r>
 802737c:	3001      	adds	r0, #1
 802737e:	d100      	bne.n	8027382 <_svfiprintf_r+0x6a>
 8027380:	e0ae      	b.n	80274e0 <_svfiprintf_r+0x1c8>
 8027382:	6963      	ldr	r3, [r4, #20]
 8027384:	9a05      	ldr	r2, [sp, #20]
 8027386:	189b      	adds	r3, r3, r2
 8027388:	6163      	str	r3, [r4, #20]
 802738a:	782b      	ldrb	r3, [r5, #0]
 802738c:	2b00      	cmp	r3, #0
 802738e:	d100      	bne.n	8027392 <_svfiprintf_r+0x7a>
 8027390:	e0a6      	b.n	80274e0 <_svfiprintf_r+0x1c8>
 8027392:	2201      	movs	r2, #1
 8027394:	2300      	movs	r3, #0
 8027396:	4252      	negs	r2, r2
 8027398:	6062      	str	r2, [r4, #4]
 802739a:	a904      	add	r1, sp, #16
 802739c:	3254      	adds	r2, #84	@ 0x54
 802739e:	1852      	adds	r2, r2, r1
 80273a0:	1c6e      	adds	r6, r5, #1
 80273a2:	6023      	str	r3, [r4, #0]
 80273a4:	60e3      	str	r3, [r4, #12]
 80273a6:	60a3      	str	r3, [r4, #8]
 80273a8:	7013      	strb	r3, [r2, #0]
 80273aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80273ac:	4b54      	ldr	r3, [pc, #336]	@ (8027500 <_svfiprintf_r+0x1e8>)
 80273ae:	2205      	movs	r2, #5
 80273b0:	0018      	movs	r0, r3
 80273b2:	7831      	ldrb	r1, [r6, #0]
 80273b4:	9305      	str	r3, [sp, #20]
 80273b6:	f7fd ff68 	bl	802528a <memchr>
 80273ba:	1c75      	adds	r5, r6, #1
 80273bc:	2800      	cmp	r0, #0
 80273be:	d11f      	bne.n	8027400 <_svfiprintf_r+0xe8>
 80273c0:	6822      	ldr	r2, [r4, #0]
 80273c2:	06d3      	lsls	r3, r2, #27
 80273c4:	d504      	bpl.n	80273d0 <_svfiprintf_r+0xb8>
 80273c6:	2353      	movs	r3, #83	@ 0x53
 80273c8:	a904      	add	r1, sp, #16
 80273ca:	185b      	adds	r3, r3, r1
 80273cc:	2120      	movs	r1, #32
 80273ce:	7019      	strb	r1, [r3, #0]
 80273d0:	0713      	lsls	r3, r2, #28
 80273d2:	d504      	bpl.n	80273de <_svfiprintf_r+0xc6>
 80273d4:	2353      	movs	r3, #83	@ 0x53
 80273d6:	a904      	add	r1, sp, #16
 80273d8:	185b      	adds	r3, r3, r1
 80273da:	212b      	movs	r1, #43	@ 0x2b
 80273dc:	7019      	strb	r1, [r3, #0]
 80273de:	7833      	ldrb	r3, [r6, #0]
 80273e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80273e2:	d016      	beq.n	8027412 <_svfiprintf_r+0xfa>
 80273e4:	0035      	movs	r5, r6
 80273e6:	2100      	movs	r1, #0
 80273e8:	200a      	movs	r0, #10
 80273ea:	68e3      	ldr	r3, [r4, #12]
 80273ec:	782a      	ldrb	r2, [r5, #0]
 80273ee:	1c6e      	adds	r6, r5, #1
 80273f0:	3a30      	subs	r2, #48	@ 0x30
 80273f2:	2a09      	cmp	r2, #9
 80273f4:	d950      	bls.n	8027498 <_svfiprintf_r+0x180>
 80273f6:	2900      	cmp	r1, #0
 80273f8:	d111      	bne.n	802741e <_svfiprintf_r+0x106>
 80273fa:	e017      	b.n	802742c <_svfiprintf_r+0x114>
 80273fc:	3501      	adds	r5, #1
 80273fe:	e7af      	b.n	8027360 <_svfiprintf_r+0x48>
 8027400:	9b05      	ldr	r3, [sp, #20]
 8027402:	6822      	ldr	r2, [r4, #0]
 8027404:	1ac0      	subs	r0, r0, r3
 8027406:	2301      	movs	r3, #1
 8027408:	4083      	lsls	r3, r0
 802740a:	4313      	orrs	r3, r2
 802740c:	002e      	movs	r6, r5
 802740e:	6023      	str	r3, [r4, #0]
 8027410:	e7cc      	b.n	80273ac <_svfiprintf_r+0x94>
 8027412:	9b07      	ldr	r3, [sp, #28]
 8027414:	1d19      	adds	r1, r3, #4
 8027416:	681b      	ldr	r3, [r3, #0]
 8027418:	9107      	str	r1, [sp, #28]
 802741a:	2b00      	cmp	r3, #0
 802741c:	db01      	blt.n	8027422 <_svfiprintf_r+0x10a>
 802741e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027420:	e004      	b.n	802742c <_svfiprintf_r+0x114>
 8027422:	425b      	negs	r3, r3
 8027424:	60e3      	str	r3, [r4, #12]
 8027426:	2302      	movs	r3, #2
 8027428:	4313      	orrs	r3, r2
 802742a:	6023      	str	r3, [r4, #0]
 802742c:	782b      	ldrb	r3, [r5, #0]
 802742e:	2b2e      	cmp	r3, #46	@ 0x2e
 8027430:	d10c      	bne.n	802744c <_svfiprintf_r+0x134>
 8027432:	786b      	ldrb	r3, [r5, #1]
 8027434:	2b2a      	cmp	r3, #42	@ 0x2a
 8027436:	d134      	bne.n	80274a2 <_svfiprintf_r+0x18a>
 8027438:	9b07      	ldr	r3, [sp, #28]
 802743a:	3502      	adds	r5, #2
 802743c:	1d1a      	adds	r2, r3, #4
 802743e:	681b      	ldr	r3, [r3, #0]
 8027440:	9207      	str	r2, [sp, #28]
 8027442:	2b00      	cmp	r3, #0
 8027444:	da01      	bge.n	802744a <_svfiprintf_r+0x132>
 8027446:	2301      	movs	r3, #1
 8027448:	425b      	negs	r3, r3
 802744a:	9309      	str	r3, [sp, #36]	@ 0x24
 802744c:	4e2d      	ldr	r6, [pc, #180]	@ (8027504 <_svfiprintf_r+0x1ec>)
 802744e:	2203      	movs	r2, #3
 8027450:	0030      	movs	r0, r6
 8027452:	7829      	ldrb	r1, [r5, #0]
 8027454:	f7fd ff19 	bl	802528a <memchr>
 8027458:	2800      	cmp	r0, #0
 802745a:	d006      	beq.n	802746a <_svfiprintf_r+0x152>
 802745c:	2340      	movs	r3, #64	@ 0x40
 802745e:	1b80      	subs	r0, r0, r6
 8027460:	4083      	lsls	r3, r0
 8027462:	6822      	ldr	r2, [r4, #0]
 8027464:	3501      	adds	r5, #1
 8027466:	4313      	orrs	r3, r2
 8027468:	6023      	str	r3, [r4, #0]
 802746a:	7829      	ldrb	r1, [r5, #0]
 802746c:	2206      	movs	r2, #6
 802746e:	4826      	ldr	r0, [pc, #152]	@ (8027508 <_svfiprintf_r+0x1f0>)
 8027470:	1c6e      	adds	r6, r5, #1
 8027472:	7621      	strb	r1, [r4, #24]
 8027474:	f7fd ff09 	bl	802528a <memchr>
 8027478:	2800      	cmp	r0, #0
 802747a:	d038      	beq.n	80274ee <_svfiprintf_r+0x1d6>
 802747c:	4b23      	ldr	r3, [pc, #140]	@ (802750c <_svfiprintf_r+0x1f4>)
 802747e:	2b00      	cmp	r3, #0
 8027480:	d122      	bne.n	80274c8 <_svfiprintf_r+0x1b0>
 8027482:	2207      	movs	r2, #7
 8027484:	9b07      	ldr	r3, [sp, #28]
 8027486:	3307      	adds	r3, #7
 8027488:	4393      	bics	r3, r2
 802748a:	3308      	adds	r3, #8
 802748c:	9307      	str	r3, [sp, #28]
 802748e:	6963      	ldr	r3, [r4, #20]
 8027490:	9a04      	ldr	r2, [sp, #16]
 8027492:	189b      	adds	r3, r3, r2
 8027494:	6163      	str	r3, [r4, #20]
 8027496:	e762      	b.n	802735e <_svfiprintf_r+0x46>
 8027498:	4343      	muls	r3, r0
 802749a:	0035      	movs	r5, r6
 802749c:	2101      	movs	r1, #1
 802749e:	189b      	adds	r3, r3, r2
 80274a0:	e7a4      	b.n	80273ec <_svfiprintf_r+0xd4>
 80274a2:	2300      	movs	r3, #0
 80274a4:	200a      	movs	r0, #10
 80274a6:	0019      	movs	r1, r3
 80274a8:	3501      	adds	r5, #1
 80274aa:	6063      	str	r3, [r4, #4]
 80274ac:	782a      	ldrb	r2, [r5, #0]
 80274ae:	1c6e      	adds	r6, r5, #1
 80274b0:	3a30      	subs	r2, #48	@ 0x30
 80274b2:	2a09      	cmp	r2, #9
 80274b4:	d903      	bls.n	80274be <_svfiprintf_r+0x1a6>
 80274b6:	2b00      	cmp	r3, #0
 80274b8:	d0c8      	beq.n	802744c <_svfiprintf_r+0x134>
 80274ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80274bc:	e7c6      	b.n	802744c <_svfiprintf_r+0x134>
 80274be:	4341      	muls	r1, r0
 80274c0:	0035      	movs	r5, r6
 80274c2:	2301      	movs	r3, #1
 80274c4:	1889      	adds	r1, r1, r2
 80274c6:	e7f1      	b.n	80274ac <_svfiprintf_r+0x194>
 80274c8:	aa07      	add	r2, sp, #28
 80274ca:	9200      	str	r2, [sp, #0]
 80274cc:	0021      	movs	r1, r4
 80274ce:	003a      	movs	r2, r7
 80274d0:	4b0f      	ldr	r3, [pc, #60]	@ (8027510 <_svfiprintf_r+0x1f8>)
 80274d2:	9803      	ldr	r0, [sp, #12]
 80274d4:	f7fc ffb2 	bl	802443c <_printf_float>
 80274d8:	9004      	str	r0, [sp, #16]
 80274da:	9b04      	ldr	r3, [sp, #16]
 80274dc:	3301      	adds	r3, #1
 80274de:	d1d6      	bne.n	802748e <_svfiprintf_r+0x176>
 80274e0:	89bb      	ldrh	r3, [r7, #12]
 80274e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80274e4:	065b      	lsls	r3, r3, #25
 80274e6:	d500      	bpl.n	80274ea <_svfiprintf_r+0x1d2>
 80274e8:	e72c      	b.n	8027344 <_svfiprintf_r+0x2c>
 80274ea:	b021      	add	sp, #132	@ 0x84
 80274ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80274ee:	aa07      	add	r2, sp, #28
 80274f0:	9200      	str	r2, [sp, #0]
 80274f2:	0021      	movs	r1, r4
 80274f4:	003a      	movs	r2, r7
 80274f6:	4b06      	ldr	r3, [pc, #24]	@ (8027510 <_svfiprintf_r+0x1f8>)
 80274f8:	9803      	ldr	r0, [sp, #12]
 80274fa:	f7fd fa4d 	bl	8024998 <_printf_i>
 80274fe:	e7eb      	b.n	80274d8 <_svfiprintf_r+0x1c0>
 8027500:	0802dec8 	.word	0x0802dec8
 8027504:	0802dece 	.word	0x0802dece
 8027508:	0802ded2 	.word	0x0802ded2
 802750c:	0802443d 	.word	0x0802443d
 8027510:	08027259 	.word	0x08027259

08027514 <__sfputc_r>:
 8027514:	6893      	ldr	r3, [r2, #8]
 8027516:	b510      	push	{r4, lr}
 8027518:	3b01      	subs	r3, #1
 802751a:	6093      	str	r3, [r2, #8]
 802751c:	2b00      	cmp	r3, #0
 802751e:	da04      	bge.n	802752a <__sfputc_r+0x16>
 8027520:	6994      	ldr	r4, [r2, #24]
 8027522:	42a3      	cmp	r3, r4
 8027524:	db07      	blt.n	8027536 <__sfputc_r+0x22>
 8027526:	290a      	cmp	r1, #10
 8027528:	d005      	beq.n	8027536 <__sfputc_r+0x22>
 802752a:	6813      	ldr	r3, [r2, #0]
 802752c:	1c58      	adds	r0, r3, #1
 802752e:	6010      	str	r0, [r2, #0]
 8027530:	7019      	strb	r1, [r3, #0]
 8027532:	0008      	movs	r0, r1
 8027534:	bd10      	pop	{r4, pc}
 8027536:	f7fd fd37 	bl	8024fa8 <__swbuf_r>
 802753a:	0001      	movs	r1, r0
 802753c:	e7f9      	b.n	8027532 <__sfputc_r+0x1e>

0802753e <__sfputs_r>:
 802753e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027540:	0006      	movs	r6, r0
 8027542:	000f      	movs	r7, r1
 8027544:	0014      	movs	r4, r2
 8027546:	18d5      	adds	r5, r2, r3
 8027548:	42ac      	cmp	r4, r5
 802754a:	d101      	bne.n	8027550 <__sfputs_r+0x12>
 802754c:	2000      	movs	r0, #0
 802754e:	e007      	b.n	8027560 <__sfputs_r+0x22>
 8027550:	7821      	ldrb	r1, [r4, #0]
 8027552:	003a      	movs	r2, r7
 8027554:	0030      	movs	r0, r6
 8027556:	f7ff ffdd 	bl	8027514 <__sfputc_r>
 802755a:	3401      	adds	r4, #1
 802755c:	1c43      	adds	r3, r0, #1
 802755e:	d1f3      	bne.n	8027548 <__sfputs_r+0xa>
 8027560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027564 <_vfiprintf_r>:
 8027564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027566:	b0a1      	sub	sp, #132	@ 0x84
 8027568:	000f      	movs	r7, r1
 802756a:	0015      	movs	r5, r2
 802756c:	001e      	movs	r6, r3
 802756e:	9003      	str	r0, [sp, #12]
 8027570:	2800      	cmp	r0, #0
 8027572:	d004      	beq.n	802757e <_vfiprintf_r+0x1a>
 8027574:	6a03      	ldr	r3, [r0, #32]
 8027576:	2b00      	cmp	r3, #0
 8027578:	d101      	bne.n	802757e <_vfiprintf_r+0x1a>
 802757a:	f7fd fbab 	bl	8024cd4 <__sinit>
 802757e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027580:	07db      	lsls	r3, r3, #31
 8027582:	d405      	bmi.n	8027590 <_vfiprintf_r+0x2c>
 8027584:	89bb      	ldrh	r3, [r7, #12]
 8027586:	059b      	lsls	r3, r3, #22
 8027588:	d402      	bmi.n	8027590 <_vfiprintf_r+0x2c>
 802758a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802758c:	f7fd fe7b 	bl	8025286 <__retarget_lock_acquire_recursive>
 8027590:	89bb      	ldrh	r3, [r7, #12]
 8027592:	071b      	lsls	r3, r3, #28
 8027594:	d502      	bpl.n	802759c <_vfiprintf_r+0x38>
 8027596:	693b      	ldr	r3, [r7, #16]
 8027598:	2b00      	cmp	r3, #0
 802759a:	d113      	bne.n	80275c4 <_vfiprintf_r+0x60>
 802759c:	0039      	movs	r1, r7
 802759e:	9803      	ldr	r0, [sp, #12]
 80275a0:	f7fd fd44 	bl	802502c <__swsetup_r>
 80275a4:	2800      	cmp	r0, #0
 80275a6:	d00d      	beq.n	80275c4 <_vfiprintf_r+0x60>
 80275a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80275aa:	07db      	lsls	r3, r3, #31
 80275ac:	d503      	bpl.n	80275b6 <_vfiprintf_r+0x52>
 80275ae:	2001      	movs	r0, #1
 80275b0:	4240      	negs	r0, r0
 80275b2:	b021      	add	sp, #132	@ 0x84
 80275b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80275b6:	89bb      	ldrh	r3, [r7, #12]
 80275b8:	059b      	lsls	r3, r3, #22
 80275ba:	d4f8      	bmi.n	80275ae <_vfiprintf_r+0x4a>
 80275bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80275be:	f7fd fe63 	bl	8025288 <__retarget_lock_release_recursive>
 80275c2:	e7f4      	b.n	80275ae <_vfiprintf_r+0x4a>
 80275c4:	2300      	movs	r3, #0
 80275c6:	ac08      	add	r4, sp, #32
 80275c8:	6163      	str	r3, [r4, #20]
 80275ca:	3320      	adds	r3, #32
 80275cc:	7663      	strb	r3, [r4, #25]
 80275ce:	3310      	adds	r3, #16
 80275d0:	76a3      	strb	r3, [r4, #26]
 80275d2:	9607      	str	r6, [sp, #28]
 80275d4:	002e      	movs	r6, r5
 80275d6:	7833      	ldrb	r3, [r6, #0]
 80275d8:	2b00      	cmp	r3, #0
 80275da:	d001      	beq.n	80275e0 <_vfiprintf_r+0x7c>
 80275dc:	2b25      	cmp	r3, #37	@ 0x25
 80275de:	d148      	bne.n	8027672 <_vfiprintf_r+0x10e>
 80275e0:	1b73      	subs	r3, r6, r5
 80275e2:	9305      	str	r3, [sp, #20]
 80275e4:	42ae      	cmp	r6, r5
 80275e6:	d00b      	beq.n	8027600 <_vfiprintf_r+0x9c>
 80275e8:	002a      	movs	r2, r5
 80275ea:	0039      	movs	r1, r7
 80275ec:	9803      	ldr	r0, [sp, #12]
 80275ee:	f7ff ffa6 	bl	802753e <__sfputs_r>
 80275f2:	3001      	adds	r0, #1
 80275f4:	d100      	bne.n	80275f8 <_vfiprintf_r+0x94>
 80275f6:	e0ae      	b.n	8027756 <_vfiprintf_r+0x1f2>
 80275f8:	6963      	ldr	r3, [r4, #20]
 80275fa:	9a05      	ldr	r2, [sp, #20]
 80275fc:	189b      	adds	r3, r3, r2
 80275fe:	6163      	str	r3, [r4, #20]
 8027600:	7833      	ldrb	r3, [r6, #0]
 8027602:	2b00      	cmp	r3, #0
 8027604:	d100      	bne.n	8027608 <_vfiprintf_r+0xa4>
 8027606:	e0a6      	b.n	8027756 <_vfiprintf_r+0x1f2>
 8027608:	2201      	movs	r2, #1
 802760a:	2300      	movs	r3, #0
 802760c:	4252      	negs	r2, r2
 802760e:	6062      	str	r2, [r4, #4]
 8027610:	a904      	add	r1, sp, #16
 8027612:	3254      	adds	r2, #84	@ 0x54
 8027614:	1852      	adds	r2, r2, r1
 8027616:	1c75      	adds	r5, r6, #1
 8027618:	6023      	str	r3, [r4, #0]
 802761a:	60e3      	str	r3, [r4, #12]
 802761c:	60a3      	str	r3, [r4, #8]
 802761e:	7013      	strb	r3, [r2, #0]
 8027620:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027622:	4b59      	ldr	r3, [pc, #356]	@ (8027788 <_vfiprintf_r+0x224>)
 8027624:	2205      	movs	r2, #5
 8027626:	0018      	movs	r0, r3
 8027628:	7829      	ldrb	r1, [r5, #0]
 802762a:	9305      	str	r3, [sp, #20]
 802762c:	f7fd fe2d 	bl	802528a <memchr>
 8027630:	1c6e      	adds	r6, r5, #1
 8027632:	2800      	cmp	r0, #0
 8027634:	d11f      	bne.n	8027676 <_vfiprintf_r+0x112>
 8027636:	6822      	ldr	r2, [r4, #0]
 8027638:	06d3      	lsls	r3, r2, #27
 802763a:	d504      	bpl.n	8027646 <_vfiprintf_r+0xe2>
 802763c:	2353      	movs	r3, #83	@ 0x53
 802763e:	a904      	add	r1, sp, #16
 8027640:	185b      	adds	r3, r3, r1
 8027642:	2120      	movs	r1, #32
 8027644:	7019      	strb	r1, [r3, #0]
 8027646:	0713      	lsls	r3, r2, #28
 8027648:	d504      	bpl.n	8027654 <_vfiprintf_r+0xf0>
 802764a:	2353      	movs	r3, #83	@ 0x53
 802764c:	a904      	add	r1, sp, #16
 802764e:	185b      	adds	r3, r3, r1
 8027650:	212b      	movs	r1, #43	@ 0x2b
 8027652:	7019      	strb	r1, [r3, #0]
 8027654:	782b      	ldrb	r3, [r5, #0]
 8027656:	2b2a      	cmp	r3, #42	@ 0x2a
 8027658:	d016      	beq.n	8027688 <_vfiprintf_r+0x124>
 802765a:	002e      	movs	r6, r5
 802765c:	2100      	movs	r1, #0
 802765e:	200a      	movs	r0, #10
 8027660:	68e3      	ldr	r3, [r4, #12]
 8027662:	7832      	ldrb	r2, [r6, #0]
 8027664:	1c75      	adds	r5, r6, #1
 8027666:	3a30      	subs	r2, #48	@ 0x30
 8027668:	2a09      	cmp	r2, #9
 802766a:	d950      	bls.n	802770e <_vfiprintf_r+0x1aa>
 802766c:	2900      	cmp	r1, #0
 802766e:	d111      	bne.n	8027694 <_vfiprintf_r+0x130>
 8027670:	e017      	b.n	80276a2 <_vfiprintf_r+0x13e>
 8027672:	3601      	adds	r6, #1
 8027674:	e7af      	b.n	80275d6 <_vfiprintf_r+0x72>
 8027676:	9b05      	ldr	r3, [sp, #20]
 8027678:	6822      	ldr	r2, [r4, #0]
 802767a:	1ac0      	subs	r0, r0, r3
 802767c:	2301      	movs	r3, #1
 802767e:	4083      	lsls	r3, r0
 8027680:	4313      	orrs	r3, r2
 8027682:	0035      	movs	r5, r6
 8027684:	6023      	str	r3, [r4, #0]
 8027686:	e7cc      	b.n	8027622 <_vfiprintf_r+0xbe>
 8027688:	9b07      	ldr	r3, [sp, #28]
 802768a:	1d19      	adds	r1, r3, #4
 802768c:	681b      	ldr	r3, [r3, #0]
 802768e:	9107      	str	r1, [sp, #28]
 8027690:	2b00      	cmp	r3, #0
 8027692:	db01      	blt.n	8027698 <_vfiprintf_r+0x134>
 8027694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027696:	e004      	b.n	80276a2 <_vfiprintf_r+0x13e>
 8027698:	425b      	negs	r3, r3
 802769a:	60e3      	str	r3, [r4, #12]
 802769c:	2302      	movs	r3, #2
 802769e:	4313      	orrs	r3, r2
 80276a0:	6023      	str	r3, [r4, #0]
 80276a2:	7833      	ldrb	r3, [r6, #0]
 80276a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80276a6:	d10c      	bne.n	80276c2 <_vfiprintf_r+0x15e>
 80276a8:	7873      	ldrb	r3, [r6, #1]
 80276aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80276ac:	d134      	bne.n	8027718 <_vfiprintf_r+0x1b4>
 80276ae:	9b07      	ldr	r3, [sp, #28]
 80276b0:	3602      	adds	r6, #2
 80276b2:	1d1a      	adds	r2, r3, #4
 80276b4:	681b      	ldr	r3, [r3, #0]
 80276b6:	9207      	str	r2, [sp, #28]
 80276b8:	2b00      	cmp	r3, #0
 80276ba:	da01      	bge.n	80276c0 <_vfiprintf_r+0x15c>
 80276bc:	2301      	movs	r3, #1
 80276be:	425b      	negs	r3, r3
 80276c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80276c2:	4d32      	ldr	r5, [pc, #200]	@ (802778c <_vfiprintf_r+0x228>)
 80276c4:	2203      	movs	r2, #3
 80276c6:	0028      	movs	r0, r5
 80276c8:	7831      	ldrb	r1, [r6, #0]
 80276ca:	f7fd fdde 	bl	802528a <memchr>
 80276ce:	2800      	cmp	r0, #0
 80276d0:	d006      	beq.n	80276e0 <_vfiprintf_r+0x17c>
 80276d2:	2340      	movs	r3, #64	@ 0x40
 80276d4:	1b40      	subs	r0, r0, r5
 80276d6:	4083      	lsls	r3, r0
 80276d8:	6822      	ldr	r2, [r4, #0]
 80276da:	3601      	adds	r6, #1
 80276dc:	4313      	orrs	r3, r2
 80276de:	6023      	str	r3, [r4, #0]
 80276e0:	7831      	ldrb	r1, [r6, #0]
 80276e2:	2206      	movs	r2, #6
 80276e4:	482a      	ldr	r0, [pc, #168]	@ (8027790 <_vfiprintf_r+0x22c>)
 80276e6:	1c75      	adds	r5, r6, #1
 80276e8:	7621      	strb	r1, [r4, #24]
 80276ea:	f7fd fdce 	bl	802528a <memchr>
 80276ee:	2800      	cmp	r0, #0
 80276f0:	d040      	beq.n	8027774 <_vfiprintf_r+0x210>
 80276f2:	4b28      	ldr	r3, [pc, #160]	@ (8027794 <_vfiprintf_r+0x230>)
 80276f4:	2b00      	cmp	r3, #0
 80276f6:	d122      	bne.n	802773e <_vfiprintf_r+0x1da>
 80276f8:	2207      	movs	r2, #7
 80276fa:	9b07      	ldr	r3, [sp, #28]
 80276fc:	3307      	adds	r3, #7
 80276fe:	4393      	bics	r3, r2
 8027700:	3308      	adds	r3, #8
 8027702:	9307      	str	r3, [sp, #28]
 8027704:	6963      	ldr	r3, [r4, #20]
 8027706:	9a04      	ldr	r2, [sp, #16]
 8027708:	189b      	adds	r3, r3, r2
 802770a:	6163      	str	r3, [r4, #20]
 802770c:	e762      	b.n	80275d4 <_vfiprintf_r+0x70>
 802770e:	4343      	muls	r3, r0
 8027710:	002e      	movs	r6, r5
 8027712:	2101      	movs	r1, #1
 8027714:	189b      	adds	r3, r3, r2
 8027716:	e7a4      	b.n	8027662 <_vfiprintf_r+0xfe>
 8027718:	2300      	movs	r3, #0
 802771a:	200a      	movs	r0, #10
 802771c:	0019      	movs	r1, r3
 802771e:	3601      	adds	r6, #1
 8027720:	6063      	str	r3, [r4, #4]
 8027722:	7832      	ldrb	r2, [r6, #0]
 8027724:	1c75      	adds	r5, r6, #1
 8027726:	3a30      	subs	r2, #48	@ 0x30
 8027728:	2a09      	cmp	r2, #9
 802772a:	d903      	bls.n	8027734 <_vfiprintf_r+0x1d0>
 802772c:	2b00      	cmp	r3, #0
 802772e:	d0c8      	beq.n	80276c2 <_vfiprintf_r+0x15e>
 8027730:	9109      	str	r1, [sp, #36]	@ 0x24
 8027732:	e7c6      	b.n	80276c2 <_vfiprintf_r+0x15e>
 8027734:	4341      	muls	r1, r0
 8027736:	002e      	movs	r6, r5
 8027738:	2301      	movs	r3, #1
 802773a:	1889      	adds	r1, r1, r2
 802773c:	e7f1      	b.n	8027722 <_vfiprintf_r+0x1be>
 802773e:	aa07      	add	r2, sp, #28
 8027740:	9200      	str	r2, [sp, #0]
 8027742:	0021      	movs	r1, r4
 8027744:	003a      	movs	r2, r7
 8027746:	4b14      	ldr	r3, [pc, #80]	@ (8027798 <_vfiprintf_r+0x234>)
 8027748:	9803      	ldr	r0, [sp, #12]
 802774a:	f7fc fe77 	bl	802443c <_printf_float>
 802774e:	9004      	str	r0, [sp, #16]
 8027750:	9b04      	ldr	r3, [sp, #16]
 8027752:	3301      	adds	r3, #1
 8027754:	d1d6      	bne.n	8027704 <_vfiprintf_r+0x1a0>
 8027756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027758:	07db      	lsls	r3, r3, #31
 802775a:	d405      	bmi.n	8027768 <_vfiprintf_r+0x204>
 802775c:	89bb      	ldrh	r3, [r7, #12]
 802775e:	059b      	lsls	r3, r3, #22
 8027760:	d402      	bmi.n	8027768 <_vfiprintf_r+0x204>
 8027762:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027764:	f7fd fd90 	bl	8025288 <__retarget_lock_release_recursive>
 8027768:	89bb      	ldrh	r3, [r7, #12]
 802776a:	065b      	lsls	r3, r3, #25
 802776c:	d500      	bpl.n	8027770 <_vfiprintf_r+0x20c>
 802776e:	e71e      	b.n	80275ae <_vfiprintf_r+0x4a>
 8027770:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027772:	e71e      	b.n	80275b2 <_vfiprintf_r+0x4e>
 8027774:	aa07      	add	r2, sp, #28
 8027776:	9200      	str	r2, [sp, #0]
 8027778:	0021      	movs	r1, r4
 802777a:	003a      	movs	r2, r7
 802777c:	4b06      	ldr	r3, [pc, #24]	@ (8027798 <_vfiprintf_r+0x234>)
 802777e:	9803      	ldr	r0, [sp, #12]
 8027780:	f7fd f90a 	bl	8024998 <_printf_i>
 8027784:	e7e3      	b.n	802774e <_vfiprintf_r+0x1ea>
 8027786:	46c0      	nop			@ (mov r8, r8)
 8027788:	0802dec8 	.word	0x0802dec8
 802778c:	0802dece 	.word	0x0802dece
 8027790:	0802ded2 	.word	0x0802ded2
 8027794:	0802443d 	.word	0x0802443d
 8027798:	0802753f 	.word	0x0802753f

0802779c <__sflush_r>:
 802779c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802779e:	220c      	movs	r2, #12
 80277a0:	5e8b      	ldrsh	r3, [r1, r2]
 80277a2:	0005      	movs	r5, r0
 80277a4:	000c      	movs	r4, r1
 80277a6:	071a      	lsls	r2, r3, #28
 80277a8:	d456      	bmi.n	8027858 <__sflush_r+0xbc>
 80277aa:	684a      	ldr	r2, [r1, #4]
 80277ac:	2a00      	cmp	r2, #0
 80277ae:	dc02      	bgt.n	80277b6 <__sflush_r+0x1a>
 80277b0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80277b2:	2a00      	cmp	r2, #0
 80277b4:	dd4e      	ble.n	8027854 <__sflush_r+0xb8>
 80277b6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80277b8:	2f00      	cmp	r7, #0
 80277ba:	d04b      	beq.n	8027854 <__sflush_r+0xb8>
 80277bc:	2200      	movs	r2, #0
 80277be:	2080      	movs	r0, #128	@ 0x80
 80277c0:	682e      	ldr	r6, [r5, #0]
 80277c2:	602a      	str	r2, [r5, #0]
 80277c4:	001a      	movs	r2, r3
 80277c6:	0140      	lsls	r0, r0, #5
 80277c8:	6a21      	ldr	r1, [r4, #32]
 80277ca:	4002      	ands	r2, r0
 80277cc:	4203      	tst	r3, r0
 80277ce:	d033      	beq.n	8027838 <__sflush_r+0x9c>
 80277d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80277d2:	89a3      	ldrh	r3, [r4, #12]
 80277d4:	075b      	lsls	r3, r3, #29
 80277d6:	d506      	bpl.n	80277e6 <__sflush_r+0x4a>
 80277d8:	6863      	ldr	r3, [r4, #4]
 80277da:	1ad2      	subs	r2, r2, r3
 80277dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80277de:	2b00      	cmp	r3, #0
 80277e0:	d001      	beq.n	80277e6 <__sflush_r+0x4a>
 80277e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80277e4:	1ad2      	subs	r2, r2, r3
 80277e6:	2300      	movs	r3, #0
 80277e8:	0028      	movs	r0, r5
 80277ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80277ec:	6a21      	ldr	r1, [r4, #32]
 80277ee:	47b8      	blx	r7
 80277f0:	89a2      	ldrh	r2, [r4, #12]
 80277f2:	1c43      	adds	r3, r0, #1
 80277f4:	d106      	bne.n	8027804 <__sflush_r+0x68>
 80277f6:	6829      	ldr	r1, [r5, #0]
 80277f8:	291d      	cmp	r1, #29
 80277fa:	d846      	bhi.n	802788a <__sflush_r+0xee>
 80277fc:	4b29      	ldr	r3, [pc, #164]	@ (80278a4 <__sflush_r+0x108>)
 80277fe:	410b      	asrs	r3, r1
 8027800:	07db      	lsls	r3, r3, #31
 8027802:	d442      	bmi.n	802788a <__sflush_r+0xee>
 8027804:	2300      	movs	r3, #0
 8027806:	6063      	str	r3, [r4, #4]
 8027808:	6923      	ldr	r3, [r4, #16]
 802780a:	6023      	str	r3, [r4, #0]
 802780c:	04d2      	lsls	r2, r2, #19
 802780e:	d505      	bpl.n	802781c <__sflush_r+0x80>
 8027810:	1c43      	adds	r3, r0, #1
 8027812:	d102      	bne.n	802781a <__sflush_r+0x7e>
 8027814:	682b      	ldr	r3, [r5, #0]
 8027816:	2b00      	cmp	r3, #0
 8027818:	d100      	bne.n	802781c <__sflush_r+0x80>
 802781a:	6560      	str	r0, [r4, #84]	@ 0x54
 802781c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802781e:	602e      	str	r6, [r5, #0]
 8027820:	2900      	cmp	r1, #0
 8027822:	d017      	beq.n	8027854 <__sflush_r+0xb8>
 8027824:	0023      	movs	r3, r4
 8027826:	3344      	adds	r3, #68	@ 0x44
 8027828:	4299      	cmp	r1, r3
 802782a:	d002      	beq.n	8027832 <__sflush_r+0x96>
 802782c:	0028      	movs	r0, r5
 802782e:	f7fe fbc9 	bl	8025fc4 <_free_r>
 8027832:	2300      	movs	r3, #0
 8027834:	6363      	str	r3, [r4, #52]	@ 0x34
 8027836:	e00d      	b.n	8027854 <__sflush_r+0xb8>
 8027838:	2301      	movs	r3, #1
 802783a:	0028      	movs	r0, r5
 802783c:	47b8      	blx	r7
 802783e:	0002      	movs	r2, r0
 8027840:	1c43      	adds	r3, r0, #1
 8027842:	d1c6      	bne.n	80277d2 <__sflush_r+0x36>
 8027844:	682b      	ldr	r3, [r5, #0]
 8027846:	2b00      	cmp	r3, #0
 8027848:	d0c3      	beq.n	80277d2 <__sflush_r+0x36>
 802784a:	2b1d      	cmp	r3, #29
 802784c:	d001      	beq.n	8027852 <__sflush_r+0xb6>
 802784e:	2b16      	cmp	r3, #22
 8027850:	d11a      	bne.n	8027888 <__sflush_r+0xec>
 8027852:	602e      	str	r6, [r5, #0]
 8027854:	2000      	movs	r0, #0
 8027856:	e01e      	b.n	8027896 <__sflush_r+0xfa>
 8027858:	690e      	ldr	r6, [r1, #16]
 802785a:	2e00      	cmp	r6, #0
 802785c:	d0fa      	beq.n	8027854 <__sflush_r+0xb8>
 802785e:	680f      	ldr	r7, [r1, #0]
 8027860:	600e      	str	r6, [r1, #0]
 8027862:	1bba      	subs	r2, r7, r6
 8027864:	9201      	str	r2, [sp, #4]
 8027866:	2200      	movs	r2, #0
 8027868:	079b      	lsls	r3, r3, #30
 802786a:	d100      	bne.n	802786e <__sflush_r+0xd2>
 802786c:	694a      	ldr	r2, [r1, #20]
 802786e:	60a2      	str	r2, [r4, #8]
 8027870:	9b01      	ldr	r3, [sp, #4]
 8027872:	2b00      	cmp	r3, #0
 8027874:	ddee      	ble.n	8027854 <__sflush_r+0xb8>
 8027876:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027878:	0032      	movs	r2, r6
 802787a:	001f      	movs	r7, r3
 802787c:	0028      	movs	r0, r5
 802787e:	9b01      	ldr	r3, [sp, #4]
 8027880:	6a21      	ldr	r1, [r4, #32]
 8027882:	47b8      	blx	r7
 8027884:	2800      	cmp	r0, #0
 8027886:	dc07      	bgt.n	8027898 <__sflush_r+0xfc>
 8027888:	89a2      	ldrh	r2, [r4, #12]
 802788a:	2340      	movs	r3, #64	@ 0x40
 802788c:	2001      	movs	r0, #1
 802788e:	4313      	orrs	r3, r2
 8027890:	b21b      	sxth	r3, r3
 8027892:	81a3      	strh	r3, [r4, #12]
 8027894:	4240      	negs	r0, r0
 8027896:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027898:	9b01      	ldr	r3, [sp, #4]
 802789a:	1836      	adds	r6, r6, r0
 802789c:	1a1b      	subs	r3, r3, r0
 802789e:	9301      	str	r3, [sp, #4]
 80278a0:	e7e6      	b.n	8027870 <__sflush_r+0xd4>
 80278a2:	46c0      	nop			@ (mov r8, r8)
 80278a4:	dfbffffe 	.word	0xdfbffffe

080278a8 <_fflush_r>:
 80278a8:	690b      	ldr	r3, [r1, #16]
 80278aa:	b570      	push	{r4, r5, r6, lr}
 80278ac:	0005      	movs	r5, r0
 80278ae:	000c      	movs	r4, r1
 80278b0:	2b00      	cmp	r3, #0
 80278b2:	d102      	bne.n	80278ba <_fflush_r+0x12>
 80278b4:	2500      	movs	r5, #0
 80278b6:	0028      	movs	r0, r5
 80278b8:	bd70      	pop	{r4, r5, r6, pc}
 80278ba:	2800      	cmp	r0, #0
 80278bc:	d004      	beq.n	80278c8 <_fflush_r+0x20>
 80278be:	6a03      	ldr	r3, [r0, #32]
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	d101      	bne.n	80278c8 <_fflush_r+0x20>
 80278c4:	f7fd fa06 	bl	8024cd4 <__sinit>
 80278c8:	220c      	movs	r2, #12
 80278ca:	5ea3      	ldrsh	r3, [r4, r2]
 80278cc:	2b00      	cmp	r3, #0
 80278ce:	d0f1      	beq.n	80278b4 <_fflush_r+0xc>
 80278d0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80278d2:	07d2      	lsls	r2, r2, #31
 80278d4:	d404      	bmi.n	80278e0 <_fflush_r+0x38>
 80278d6:	059b      	lsls	r3, r3, #22
 80278d8:	d402      	bmi.n	80278e0 <_fflush_r+0x38>
 80278da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80278dc:	f7fd fcd3 	bl	8025286 <__retarget_lock_acquire_recursive>
 80278e0:	0028      	movs	r0, r5
 80278e2:	0021      	movs	r1, r4
 80278e4:	f7ff ff5a 	bl	802779c <__sflush_r>
 80278e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80278ea:	0005      	movs	r5, r0
 80278ec:	07db      	lsls	r3, r3, #31
 80278ee:	d4e2      	bmi.n	80278b6 <_fflush_r+0xe>
 80278f0:	89a3      	ldrh	r3, [r4, #12]
 80278f2:	059b      	lsls	r3, r3, #22
 80278f4:	d4df      	bmi.n	80278b6 <_fflush_r+0xe>
 80278f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80278f8:	f7fd fcc6 	bl	8025288 <__retarget_lock_release_recursive>
 80278fc:	e7db      	b.n	80278b6 <_fflush_r+0xe>
	...

08027900 <__swhatbuf_r>:
 8027900:	b570      	push	{r4, r5, r6, lr}
 8027902:	000e      	movs	r6, r1
 8027904:	001d      	movs	r5, r3
 8027906:	230e      	movs	r3, #14
 8027908:	5ec9      	ldrsh	r1, [r1, r3]
 802790a:	0014      	movs	r4, r2
 802790c:	b096      	sub	sp, #88	@ 0x58
 802790e:	2900      	cmp	r1, #0
 8027910:	da0c      	bge.n	802792c <__swhatbuf_r+0x2c>
 8027912:	89b2      	ldrh	r2, [r6, #12]
 8027914:	2380      	movs	r3, #128	@ 0x80
 8027916:	0011      	movs	r1, r2
 8027918:	4019      	ands	r1, r3
 802791a:	421a      	tst	r2, r3
 802791c:	d114      	bne.n	8027948 <__swhatbuf_r+0x48>
 802791e:	2380      	movs	r3, #128	@ 0x80
 8027920:	00db      	lsls	r3, r3, #3
 8027922:	2000      	movs	r0, #0
 8027924:	6029      	str	r1, [r5, #0]
 8027926:	6023      	str	r3, [r4, #0]
 8027928:	b016      	add	sp, #88	@ 0x58
 802792a:	bd70      	pop	{r4, r5, r6, pc}
 802792c:	466a      	mov	r2, sp
 802792e:	f000 f865 	bl	80279fc <_fstat_r>
 8027932:	2800      	cmp	r0, #0
 8027934:	dbed      	blt.n	8027912 <__swhatbuf_r+0x12>
 8027936:	23f0      	movs	r3, #240	@ 0xf0
 8027938:	9901      	ldr	r1, [sp, #4]
 802793a:	021b      	lsls	r3, r3, #8
 802793c:	4019      	ands	r1, r3
 802793e:	4b04      	ldr	r3, [pc, #16]	@ (8027950 <__swhatbuf_r+0x50>)
 8027940:	18c9      	adds	r1, r1, r3
 8027942:	424b      	negs	r3, r1
 8027944:	4159      	adcs	r1, r3
 8027946:	e7ea      	b.n	802791e <__swhatbuf_r+0x1e>
 8027948:	2100      	movs	r1, #0
 802794a:	2340      	movs	r3, #64	@ 0x40
 802794c:	e7e9      	b.n	8027922 <__swhatbuf_r+0x22>
 802794e:	46c0      	nop			@ (mov r8, r8)
 8027950:	ffffe000 	.word	0xffffe000

08027954 <__smakebuf_r>:
 8027954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027956:	2602      	movs	r6, #2
 8027958:	898b      	ldrh	r3, [r1, #12]
 802795a:	0005      	movs	r5, r0
 802795c:	000c      	movs	r4, r1
 802795e:	b085      	sub	sp, #20
 8027960:	4233      	tst	r3, r6
 8027962:	d007      	beq.n	8027974 <__smakebuf_r+0x20>
 8027964:	0023      	movs	r3, r4
 8027966:	3347      	adds	r3, #71	@ 0x47
 8027968:	6023      	str	r3, [r4, #0]
 802796a:	6123      	str	r3, [r4, #16]
 802796c:	2301      	movs	r3, #1
 802796e:	6163      	str	r3, [r4, #20]
 8027970:	b005      	add	sp, #20
 8027972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027974:	ab03      	add	r3, sp, #12
 8027976:	aa02      	add	r2, sp, #8
 8027978:	f7ff ffc2 	bl	8027900 <__swhatbuf_r>
 802797c:	9f02      	ldr	r7, [sp, #8]
 802797e:	9001      	str	r0, [sp, #4]
 8027980:	0039      	movs	r1, r7
 8027982:	0028      	movs	r0, r5
 8027984:	f7fe feee 	bl	8026764 <_malloc_r>
 8027988:	2800      	cmp	r0, #0
 802798a:	d108      	bne.n	802799e <__smakebuf_r+0x4a>
 802798c:	220c      	movs	r2, #12
 802798e:	5ea3      	ldrsh	r3, [r4, r2]
 8027990:	059a      	lsls	r2, r3, #22
 8027992:	d4ed      	bmi.n	8027970 <__smakebuf_r+0x1c>
 8027994:	2203      	movs	r2, #3
 8027996:	4393      	bics	r3, r2
 8027998:	431e      	orrs	r6, r3
 802799a:	81a6      	strh	r6, [r4, #12]
 802799c:	e7e2      	b.n	8027964 <__smakebuf_r+0x10>
 802799e:	2380      	movs	r3, #128	@ 0x80
 80279a0:	89a2      	ldrh	r2, [r4, #12]
 80279a2:	6020      	str	r0, [r4, #0]
 80279a4:	4313      	orrs	r3, r2
 80279a6:	81a3      	strh	r3, [r4, #12]
 80279a8:	9b03      	ldr	r3, [sp, #12]
 80279aa:	6120      	str	r0, [r4, #16]
 80279ac:	6167      	str	r7, [r4, #20]
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d00c      	beq.n	80279cc <__smakebuf_r+0x78>
 80279b2:	0028      	movs	r0, r5
 80279b4:	230e      	movs	r3, #14
 80279b6:	5ee1      	ldrsh	r1, [r4, r3]
 80279b8:	f000 f832 	bl	8027a20 <_isatty_r>
 80279bc:	2800      	cmp	r0, #0
 80279be:	d005      	beq.n	80279cc <__smakebuf_r+0x78>
 80279c0:	2303      	movs	r3, #3
 80279c2:	89a2      	ldrh	r2, [r4, #12]
 80279c4:	439a      	bics	r2, r3
 80279c6:	3b02      	subs	r3, #2
 80279c8:	4313      	orrs	r3, r2
 80279ca:	81a3      	strh	r3, [r4, #12]
 80279cc:	89a3      	ldrh	r3, [r4, #12]
 80279ce:	9a01      	ldr	r2, [sp, #4]
 80279d0:	4313      	orrs	r3, r2
 80279d2:	81a3      	strh	r3, [r4, #12]
 80279d4:	e7cc      	b.n	8027970 <__smakebuf_r+0x1c>

080279d6 <memmove>:
 80279d6:	b510      	push	{r4, lr}
 80279d8:	4288      	cmp	r0, r1
 80279da:	d806      	bhi.n	80279ea <memmove+0x14>
 80279dc:	2300      	movs	r3, #0
 80279de:	429a      	cmp	r2, r3
 80279e0:	d008      	beq.n	80279f4 <memmove+0x1e>
 80279e2:	5ccc      	ldrb	r4, [r1, r3]
 80279e4:	54c4      	strb	r4, [r0, r3]
 80279e6:	3301      	adds	r3, #1
 80279e8:	e7f9      	b.n	80279de <memmove+0x8>
 80279ea:	188b      	adds	r3, r1, r2
 80279ec:	4298      	cmp	r0, r3
 80279ee:	d2f5      	bcs.n	80279dc <memmove+0x6>
 80279f0:	3a01      	subs	r2, #1
 80279f2:	d200      	bcs.n	80279f6 <memmove+0x20>
 80279f4:	bd10      	pop	{r4, pc}
 80279f6:	5c8b      	ldrb	r3, [r1, r2]
 80279f8:	5483      	strb	r3, [r0, r2]
 80279fa:	e7f9      	b.n	80279f0 <memmove+0x1a>

080279fc <_fstat_r>:
 80279fc:	2300      	movs	r3, #0
 80279fe:	b570      	push	{r4, r5, r6, lr}
 8027a00:	4d06      	ldr	r5, [pc, #24]	@ (8027a1c <_fstat_r+0x20>)
 8027a02:	0004      	movs	r4, r0
 8027a04:	0008      	movs	r0, r1
 8027a06:	0011      	movs	r1, r2
 8027a08:	602b      	str	r3, [r5, #0]
 8027a0a:	f7ea fcc9 	bl	80123a0 <_fstat>
 8027a0e:	1c43      	adds	r3, r0, #1
 8027a10:	d103      	bne.n	8027a1a <_fstat_r+0x1e>
 8027a12:	682b      	ldr	r3, [r5, #0]
 8027a14:	2b00      	cmp	r3, #0
 8027a16:	d000      	beq.n	8027a1a <_fstat_r+0x1e>
 8027a18:	6023      	str	r3, [r4, #0]
 8027a1a:	bd70      	pop	{r4, r5, r6, pc}
 8027a1c:	20003630 	.word	0x20003630

08027a20 <_isatty_r>:
 8027a20:	2300      	movs	r3, #0
 8027a22:	b570      	push	{r4, r5, r6, lr}
 8027a24:	4d06      	ldr	r5, [pc, #24]	@ (8027a40 <_isatty_r+0x20>)
 8027a26:	0004      	movs	r4, r0
 8027a28:	0008      	movs	r0, r1
 8027a2a:	602b      	str	r3, [r5, #0]
 8027a2c:	f7ea fcc6 	bl	80123bc <_isatty>
 8027a30:	1c43      	adds	r3, r0, #1
 8027a32:	d103      	bne.n	8027a3c <_isatty_r+0x1c>
 8027a34:	682b      	ldr	r3, [r5, #0]
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	d000      	beq.n	8027a3c <_isatty_r+0x1c>
 8027a3a:	6023      	str	r3, [r4, #0]
 8027a3c:	bd70      	pop	{r4, r5, r6, pc}
 8027a3e:	46c0      	nop			@ (mov r8, r8)
 8027a40:	20003630 	.word	0x20003630

08027a44 <_sbrk_r>:
 8027a44:	2300      	movs	r3, #0
 8027a46:	b570      	push	{r4, r5, r6, lr}
 8027a48:	4d06      	ldr	r5, [pc, #24]	@ (8027a64 <_sbrk_r+0x20>)
 8027a4a:	0004      	movs	r4, r0
 8027a4c:	0008      	movs	r0, r1
 8027a4e:	602b      	str	r3, [r5, #0]
 8027a50:	f7ea fcc8 	bl	80123e4 <_sbrk>
 8027a54:	1c43      	adds	r3, r0, #1
 8027a56:	d103      	bne.n	8027a60 <_sbrk_r+0x1c>
 8027a58:	682b      	ldr	r3, [r5, #0]
 8027a5a:	2b00      	cmp	r3, #0
 8027a5c:	d000      	beq.n	8027a60 <_sbrk_r+0x1c>
 8027a5e:	6023      	str	r3, [r4, #0]
 8027a60:	bd70      	pop	{r4, r5, r6, pc}
 8027a62:	46c0      	nop			@ (mov r8, r8)
 8027a64:	20003630 	.word	0x20003630

08027a68 <__assert_func>:
 8027a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8027a6a:	0014      	movs	r4, r2
 8027a6c:	001a      	movs	r2, r3
 8027a6e:	4b09      	ldr	r3, [pc, #36]	@ (8027a94 <__assert_func+0x2c>)
 8027a70:	0005      	movs	r5, r0
 8027a72:	681b      	ldr	r3, [r3, #0]
 8027a74:	000e      	movs	r6, r1
 8027a76:	68d8      	ldr	r0, [r3, #12]
 8027a78:	4b07      	ldr	r3, [pc, #28]	@ (8027a98 <__assert_func+0x30>)
 8027a7a:	2c00      	cmp	r4, #0
 8027a7c:	d101      	bne.n	8027a82 <__assert_func+0x1a>
 8027a7e:	4b07      	ldr	r3, [pc, #28]	@ (8027a9c <__assert_func+0x34>)
 8027a80:	001c      	movs	r4, r3
 8027a82:	4907      	ldr	r1, [pc, #28]	@ (8027aa0 <__assert_func+0x38>)
 8027a84:	9301      	str	r3, [sp, #4]
 8027a86:	9402      	str	r4, [sp, #8]
 8027a88:	002b      	movs	r3, r5
 8027a8a:	9600      	str	r6, [sp, #0]
 8027a8c:	f000 f866 	bl	8027b5c <fiprintf>
 8027a90:	f000 f874 	bl	8027b7c <abort>
 8027a94:	200003e0 	.word	0x200003e0
 8027a98:	0802ded9 	.word	0x0802ded9
 8027a9c:	0802df14 	.word	0x0802df14
 8027aa0:	0802dee6 	.word	0x0802dee6

08027aa4 <_calloc_r>:
 8027aa4:	b570      	push	{r4, r5, r6, lr}
 8027aa6:	0c0b      	lsrs	r3, r1, #16
 8027aa8:	0c15      	lsrs	r5, r2, #16
 8027aaa:	2b00      	cmp	r3, #0
 8027aac:	d11e      	bne.n	8027aec <_calloc_r+0x48>
 8027aae:	2d00      	cmp	r5, #0
 8027ab0:	d10c      	bne.n	8027acc <_calloc_r+0x28>
 8027ab2:	b289      	uxth	r1, r1
 8027ab4:	b294      	uxth	r4, r2
 8027ab6:	434c      	muls	r4, r1
 8027ab8:	0021      	movs	r1, r4
 8027aba:	f7fe fe53 	bl	8026764 <_malloc_r>
 8027abe:	1e05      	subs	r5, r0, #0
 8027ac0:	d01a      	beq.n	8027af8 <_calloc_r+0x54>
 8027ac2:	0022      	movs	r2, r4
 8027ac4:	2100      	movs	r1, #0
 8027ac6:	f7fd fb0f 	bl	80250e8 <memset>
 8027aca:	e016      	b.n	8027afa <_calloc_r+0x56>
 8027acc:	1c2b      	adds	r3, r5, #0
 8027ace:	1c0c      	adds	r4, r1, #0
 8027ad0:	b289      	uxth	r1, r1
 8027ad2:	b292      	uxth	r2, r2
 8027ad4:	434a      	muls	r2, r1
 8027ad6:	b29b      	uxth	r3, r3
 8027ad8:	b2a1      	uxth	r1, r4
 8027ada:	4359      	muls	r1, r3
 8027adc:	0c14      	lsrs	r4, r2, #16
 8027ade:	190c      	adds	r4, r1, r4
 8027ae0:	0c23      	lsrs	r3, r4, #16
 8027ae2:	d107      	bne.n	8027af4 <_calloc_r+0x50>
 8027ae4:	0424      	lsls	r4, r4, #16
 8027ae6:	b292      	uxth	r2, r2
 8027ae8:	4314      	orrs	r4, r2
 8027aea:	e7e5      	b.n	8027ab8 <_calloc_r+0x14>
 8027aec:	2d00      	cmp	r5, #0
 8027aee:	d101      	bne.n	8027af4 <_calloc_r+0x50>
 8027af0:	1c14      	adds	r4, r2, #0
 8027af2:	e7ed      	b.n	8027ad0 <_calloc_r+0x2c>
 8027af4:	230c      	movs	r3, #12
 8027af6:	6003      	str	r3, [r0, #0]
 8027af8:	2500      	movs	r5, #0
 8027afa:	0028      	movs	r0, r5
 8027afc:	bd70      	pop	{r4, r5, r6, pc}

08027afe <_realloc_r>:
 8027afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027b00:	0006      	movs	r6, r0
 8027b02:	000c      	movs	r4, r1
 8027b04:	0015      	movs	r5, r2
 8027b06:	2900      	cmp	r1, #0
 8027b08:	d105      	bne.n	8027b16 <_realloc_r+0x18>
 8027b0a:	0011      	movs	r1, r2
 8027b0c:	f7fe fe2a 	bl	8026764 <_malloc_r>
 8027b10:	0004      	movs	r4, r0
 8027b12:	0020      	movs	r0, r4
 8027b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027b16:	2a00      	cmp	r2, #0
 8027b18:	d103      	bne.n	8027b22 <_realloc_r+0x24>
 8027b1a:	f7fe fa53 	bl	8025fc4 <_free_r>
 8027b1e:	2400      	movs	r4, #0
 8027b20:	e7f7      	b.n	8027b12 <_realloc_r+0x14>
 8027b22:	f000 f832 	bl	8027b8a <_malloc_usable_size_r>
 8027b26:	0007      	movs	r7, r0
 8027b28:	4285      	cmp	r5, r0
 8027b2a:	d802      	bhi.n	8027b32 <_realloc_r+0x34>
 8027b2c:	0843      	lsrs	r3, r0, #1
 8027b2e:	42ab      	cmp	r3, r5
 8027b30:	d3ef      	bcc.n	8027b12 <_realloc_r+0x14>
 8027b32:	0029      	movs	r1, r5
 8027b34:	0030      	movs	r0, r6
 8027b36:	f7fe fe15 	bl	8026764 <_malloc_r>
 8027b3a:	9001      	str	r0, [sp, #4]
 8027b3c:	2800      	cmp	r0, #0
 8027b3e:	d0ee      	beq.n	8027b1e <_realloc_r+0x20>
 8027b40:	002a      	movs	r2, r5
 8027b42:	42bd      	cmp	r5, r7
 8027b44:	d900      	bls.n	8027b48 <_realloc_r+0x4a>
 8027b46:	003a      	movs	r2, r7
 8027b48:	0021      	movs	r1, r4
 8027b4a:	9801      	ldr	r0, [sp, #4]
 8027b4c:	f7fd fba8 	bl	80252a0 <memcpy>
 8027b50:	0021      	movs	r1, r4
 8027b52:	0030      	movs	r0, r6
 8027b54:	f7fe fa36 	bl	8025fc4 <_free_r>
 8027b58:	9c01      	ldr	r4, [sp, #4]
 8027b5a:	e7da      	b.n	8027b12 <_realloc_r+0x14>

08027b5c <fiprintf>:
 8027b5c:	b40e      	push	{r1, r2, r3}
 8027b5e:	b517      	push	{r0, r1, r2, r4, lr}
 8027b60:	4c05      	ldr	r4, [pc, #20]	@ (8027b78 <fiprintf+0x1c>)
 8027b62:	ab05      	add	r3, sp, #20
 8027b64:	cb04      	ldmia	r3!, {r2}
 8027b66:	0001      	movs	r1, r0
 8027b68:	6820      	ldr	r0, [r4, #0]
 8027b6a:	9301      	str	r3, [sp, #4]
 8027b6c:	f7ff fcfa 	bl	8027564 <_vfiprintf_r>
 8027b70:	bc1e      	pop	{r1, r2, r3, r4}
 8027b72:	bc08      	pop	{r3}
 8027b74:	b003      	add	sp, #12
 8027b76:	4718      	bx	r3
 8027b78:	200003e0 	.word	0x200003e0

08027b7c <abort>:
 8027b7c:	2006      	movs	r0, #6
 8027b7e:	b510      	push	{r4, lr}
 8027b80:	f000 f834 	bl	8027bec <raise>
 8027b84:	2001      	movs	r0, #1
 8027b86:	f7ea fbd7 	bl	8012338 <_exit>

08027b8a <_malloc_usable_size_r>:
 8027b8a:	1f0b      	subs	r3, r1, #4
 8027b8c:	681b      	ldr	r3, [r3, #0]
 8027b8e:	1f18      	subs	r0, r3, #4
 8027b90:	2b00      	cmp	r3, #0
 8027b92:	da01      	bge.n	8027b98 <_malloc_usable_size_r+0xe>
 8027b94:	580b      	ldr	r3, [r1, r0]
 8027b96:	18c0      	adds	r0, r0, r3
 8027b98:	4770      	bx	lr

08027b9a <_raise_r>:
 8027b9a:	b570      	push	{r4, r5, r6, lr}
 8027b9c:	0004      	movs	r4, r0
 8027b9e:	000d      	movs	r5, r1
 8027ba0:	291f      	cmp	r1, #31
 8027ba2:	d904      	bls.n	8027bae <_raise_r+0x14>
 8027ba4:	2316      	movs	r3, #22
 8027ba6:	6003      	str	r3, [r0, #0]
 8027ba8:	2001      	movs	r0, #1
 8027baa:	4240      	negs	r0, r0
 8027bac:	bd70      	pop	{r4, r5, r6, pc}
 8027bae:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8027bb0:	2b00      	cmp	r3, #0
 8027bb2:	d004      	beq.n	8027bbe <_raise_r+0x24>
 8027bb4:	008a      	lsls	r2, r1, #2
 8027bb6:	189b      	adds	r3, r3, r2
 8027bb8:	681a      	ldr	r2, [r3, #0]
 8027bba:	2a00      	cmp	r2, #0
 8027bbc:	d108      	bne.n	8027bd0 <_raise_r+0x36>
 8027bbe:	0020      	movs	r0, r4
 8027bc0:	f000 f830 	bl	8027c24 <_getpid_r>
 8027bc4:	002a      	movs	r2, r5
 8027bc6:	0001      	movs	r1, r0
 8027bc8:	0020      	movs	r0, r4
 8027bca:	f000 f819 	bl	8027c00 <_kill_r>
 8027bce:	e7ed      	b.n	8027bac <_raise_r+0x12>
 8027bd0:	2a01      	cmp	r2, #1
 8027bd2:	d009      	beq.n	8027be8 <_raise_r+0x4e>
 8027bd4:	1c51      	adds	r1, r2, #1
 8027bd6:	d103      	bne.n	8027be0 <_raise_r+0x46>
 8027bd8:	2316      	movs	r3, #22
 8027bda:	6003      	str	r3, [r0, #0]
 8027bdc:	2001      	movs	r0, #1
 8027bde:	e7e5      	b.n	8027bac <_raise_r+0x12>
 8027be0:	2100      	movs	r1, #0
 8027be2:	0028      	movs	r0, r5
 8027be4:	6019      	str	r1, [r3, #0]
 8027be6:	4790      	blx	r2
 8027be8:	2000      	movs	r0, #0
 8027bea:	e7df      	b.n	8027bac <_raise_r+0x12>

08027bec <raise>:
 8027bec:	b510      	push	{r4, lr}
 8027bee:	4b03      	ldr	r3, [pc, #12]	@ (8027bfc <raise+0x10>)
 8027bf0:	0001      	movs	r1, r0
 8027bf2:	6818      	ldr	r0, [r3, #0]
 8027bf4:	f7ff ffd1 	bl	8027b9a <_raise_r>
 8027bf8:	bd10      	pop	{r4, pc}
 8027bfa:	46c0      	nop			@ (mov r8, r8)
 8027bfc:	200003e0 	.word	0x200003e0

08027c00 <_kill_r>:
 8027c00:	2300      	movs	r3, #0
 8027c02:	b570      	push	{r4, r5, r6, lr}
 8027c04:	4d06      	ldr	r5, [pc, #24]	@ (8027c20 <_kill_r+0x20>)
 8027c06:	0004      	movs	r4, r0
 8027c08:	0008      	movs	r0, r1
 8027c0a:	0011      	movs	r1, r2
 8027c0c:	602b      	str	r3, [r5, #0]
 8027c0e:	f7ea fb83 	bl	8012318 <_kill>
 8027c12:	1c43      	adds	r3, r0, #1
 8027c14:	d103      	bne.n	8027c1e <_kill_r+0x1e>
 8027c16:	682b      	ldr	r3, [r5, #0]
 8027c18:	2b00      	cmp	r3, #0
 8027c1a:	d000      	beq.n	8027c1e <_kill_r+0x1e>
 8027c1c:	6023      	str	r3, [r4, #0]
 8027c1e:	bd70      	pop	{r4, r5, r6, pc}
 8027c20:	20003630 	.word	0x20003630

08027c24 <_getpid_r>:
 8027c24:	b510      	push	{r4, lr}
 8027c26:	f7ea fb71 	bl	801230c <_getpid>
 8027c2a:	bd10      	pop	{r4, pc}

08027c2c <log>:
 8027c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027c2e:	0004      	movs	r4, r0
 8027c30:	000d      	movs	r5, r1
 8027c32:	f000 f991 	bl	8027f58 <__ieee754_log>
 8027c36:	0022      	movs	r2, r4
 8027c38:	0006      	movs	r6, r0
 8027c3a:	000f      	movs	r7, r1
 8027c3c:	002b      	movs	r3, r5
 8027c3e:	0020      	movs	r0, r4
 8027c40:	0029      	movs	r1, r5
 8027c42:	f7db fb5f 	bl	8003304 <__aeabi_dcmpun>
 8027c46:	2800      	cmp	r0, #0
 8027c48:	d115      	bne.n	8027c76 <log+0x4a>
 8027c4a:	2200      	movs	r2, #0
 8027c4c:	2300      	movs	r3, #0
 8027c4e:	0020      	movs	r0, r4
 8027c50:	0029      	movs	r1, r5
 8027c52:	f7d8 fc47 	bl	80004e4 <__aeabi_dcmpgt>
 8027c56:	2800      	cmp	r0, #0
 8027c58:	d10d      	bne.n	8027c76 <log+0x4a>
 8027c5a:	2200      	movs	r2, #0
 8027c5c:	2300      	movs	r3, #0
 8027c5e:	0020      	movs	r0, r4
 8027c60:	0029      	movs	r1, r5
 8027c62:	f7d8 fc25 	bl	80004b0 <__aeabi_dcmpeq>
 8027c66:	2800      	cmp	r0, #0
 8027c68:	d008      	beq.n	8027c7c <log+0x50>
 8027c6a:	f7fd fae1 	bl	8025230 <__errno>
 8027c6e:	2322      	movs	r3, #34	@ 0x22
 8027c70:	2600      	movs	r6, #0
 8027c72:	4f07      	ldr	r7, [pc, #28]	@ (8027c90 <log+0x64>)
 8027c74:	6003      	str	r3, [r0, #0]
 8027c76:	0030      	movs	r0, r6
 8027c78:	0039      	movs	r1, r7
 8027c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027c7c:	f7fd fad8 	bl	8025230 <__errno>
 8027c80:	2321      	movs	r3, #33	@ 0x21
 8027c82:	6003      	str	r3, [r0, #0]
 8027c84:	4803      	ldr	r0, [pc, #12]	@ (8027c94 <log+0x68>)
 8027c86:	f7fd fb15 	bl	80252b4 <nan>
 8027c8a:	0006      	movs	r6, r0
 8027c8c:	000f      	movs	r7, r1
 8027c8e:	e7f2      	b.n	8027c76 <log+0x4a>
 8027c90:	fff00000 	.word	0xfff00000
 8027c94:	0802df14 	.word	0x0802df14

08027c98 <pow>:
 8027c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027c9a:	0014      	movs	r4, r2
 8027c9c:	001d      	movs	r5, r3
 8027c9e:	9000      	str	r0, [sp, #0]
 8027ca0:	9101      	str	r1, [sp, #4]
 8027ca2:	f000 fb0b 	bl	80282bc <__ieee754_pow>
 8027ca6:	0022      	movs	r2, r4
 8027ca8:	0006      	movs	r6, r0
 8027caa:	000f      	movs	r7, r1
 8027cac:	002b      	movs	r3, r5
 8027cae:	0020      	movs	r0, r4
 8027cb0:	0029      	movs	r1, r5
 8027cb2:	f7db fb27 	bl	8003304 <__aeabi_dcmpun>
 8027cb6:	2800      	cmp	r0, #0
 8027cb8:	d13f      	bne.n	8027d3a <pow+0xa2>
 8027cba:	9800      	ldr	r0, [sp, #0]
 8027cbc:	9901      	ldr	r1, [sp, #4]
 8027cbe:	2200      	movs	r2, #0
 8027cc0:	2300      	movs	r3, #0
 8027cc2:	f7d8 fbf5 	bl	80004b0 <__aeabi_dcmpeq>
 8027cc6:	2800      	cmp	r0, #0
 8027cc8:	d019      	beq.n	8027cfe <pow+0x66>
 8027cca:	2200      	movs	r2, #0
 8027ccc:	2300      	movs	r3, #0
 8027cce:	0020      	movs	r0, r4
 8027cd0:	0029      	movs	r1, r5
 8027cd2:	f7d8 fbed 	bl	80004b0 <__aeabi_dcmpeq>
 8027cd6:	2800      	cmp	r0, #0
 8027cd8:	d146      	bne.n	8027d68 <pow+0xd0>
 8027cda:	0020      	movs	r0, r4
 8027cdc:	0029      	movs	r1, r5
 8027cde:	f000 f88d 	bl	8027dfc <finite>
 8027ce2:	2800      	cmp	r0, #0
 8027ce4:	d029      	beq.n	8027d3a <pow+0xa2>
 8027ce6:	2200      	movs	r2, #0
 8027ce8:	2300      	movs	r3, #0
 8027cea:	0020      	movs	r0, r4
 8027cec:	0029      	movs	r1, r5
 8027cee:	f7d8 fbe5 	bl	80004bc <__aeabi_dcmplt>
 8027cf2:	2800      	cmp	r0, #0
 8027cf4:	d021      	beq.n	8027d3a <pow+0xa2>
 8027cf6:	f7fd fa9b 	bl	8025230 <__errno>
 8027cfa:	2322      	movs	r3, #34	@ 0x22
 8027cfc:	e01c      	b.n	8027d38 <pow+0xa0>
 8027cfe:	0030      	movs	r0, r6
 8027d00:	0039      	movs	r1, r7
 8027d02:	f000 f87b 	bl	8027dfc <finite>
 8027d06:	2800      	cmp	r0, #0
 8027d08:	d11b      	bne.n	8027d42 <pow+0xaa>
 8027d0a:	9800      	ldr	r0, [sp, #0]
 8027d0c:	9901      	ldr	r1, [sp, #4]
 8027d0e:	f000 f875 	bl	8027dfc <finite>
 8027d12:	2800      	cmp	r0, #0
 8027d14:	d015      	beq.n	8027d42 <pow+0xaa>
 8027d16:	0020      	movs	r0, r4
 8027d18:	0029      	movs	r1, r5
 8027d1a:	f000 f86f 	bl	8027dfc <finite>
 8027d1e:	2800      	cmp	r0, #0
 8027d20:	d00f      	beq.n	8027d42 <pow+0xaa>
 8027d22:	0032      	movs	r2, r6
 8027d24:	003b      	movs	r3, r7
 8027d26:	0030      	movs	r0, r6
 8027d28:	0039      	movs	r1, r7
 8027d2a:	f7db faeb 	bl	8003304 <__aeabi_dcmpun>
 8027d2e:	2800      	cmp	r0, #0
 8027d30:	d0e1      	beq.n	8027cf6 <pow+0x5e>
 8027d32:	f7fd fa7d 	bl	8025230 <__errno>
 8027d36:	2321      	movs	r3, #33	@ 0x21
 8027d38:	6003      	str	r3, [r0, #0]
 8027d3a:	0030      	movs	r0, r6
 8027d3c:	0039      	movs	r1, r7
 8027d3e:	b003      	add	sp, #12
 8027d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027d42:	2200      	movs	r2, #0
 8027d44:	2300      	movs	r3, #0
 8027d46:	0030      	movs	r0, r6
 8027d48:	0039      	movs	r1, r7
 8027d4a:	f7d8 fbb1 	bl	80004b0 <__aeabi_dcmpeq>
 8027d4e:	2800      	cmp	r0, #0
 8027d50:	d0f3      	beq.n	8027d3a <pow+0xa2>
 8027d52:	9800      	ldr	r0, [sp, #0]
 8027d54:	9901      	ldr	r1, [sp, #4]
 8027d56:	f000 f851 	bl	8027dfc <finite>
 8027d5a:	2800      	cmp	r0, #0
 8027d5c:	d0ed      	beq.n	8027d3a <pow+0xa2>
 8027d5e:	0020      	movs	r0, r4
 8027d60:	0029      	movs	r1, r5
 8027d62:	f000 f84b 	bl	8027dfc <finite>
 8027d66:	e7c4      	b.n	8027cf2 <pow+0x5a>
 8027d68:	2600      	movs	r6, #0
 8027d6a:	4f01      	ldr	r7, [pc, #4]	@ (8027d70 <pow+0xd8>)
 8027d6c:	e7e5      	b.n	8027d3a <pow+0xa2>
 8027d6e:	46c0      	nop			@ (mov r8, r8)
 8027d70:	3ff00000 	.word	0x3ff00000

08027d74 <expf>:
 8027d74:	b570      	push	{r4, r5, r6, lr}
 8027d76:	1c04      	adds	r4, r0, #0
 8027d78:	f000 ffd0 	bl	8028d1c <__ieee754_expf>
 8027d7c:	1c05      	adds	r5, r0, #0
 8027d7e:	1c20      	adds	r0, r4, #0
 8027d80:	f000 f844 	bl	8027e0c <finitef>
 8027d84:	2800      	cmp	r0, #0
 8027d86:	d00b      	beq.n	8027da0 <expf+0x2c>
 8027d88:	490c      	ldr	r1, [pc, #48]	@ (8027dbc <expf+0x48>)
 8027d8a:	1c20      	adds	r0, r4, #0
 8027d8c:	f7d8 fbe4 	bl	8000558 <__aeabi_fcmpgt>
 8027d90:	2800      	cmp	r0, #0
 8027d92:	d007      	beq.n	8027da4 <expf+0x30>
 8027d94:	f7fd fa4c 	bl	8025230 <__errno>
 8027d98:	25ff      	movs	r5, #255	@ 0xff
 8027d9a:	2322      	movs	r3, #34	@ 0x22
 8027d9c:	05ed      	lsls	r5, r5, #23
 8027d9e:	6003      	str	r3, [r0, #0]
 8027da0:	1c28      	adds	r0, r5, #0
 8027da2:	bd70      	pop	{r4, r5, r6, pc}
 8027da4:	4906      	ldr	r1, [pc, #24]	@ (8027dc0 <expf+0x4c>)
 8027da6:	1c20      	adds	r0, r4, #0
 8027da8:	f7d8 fbc2 	bl	8000530 <__aeabi_fcmplt>
 8027dac:	2800      	cmp	r0, #0
 8027dae:	d0f7      	beq.n	8027da0 <expf+0x2c>
 8027db0:	f7fd fa3e 	bl	8025230 <__errno>
 8027db4:	2322      	movs	r3, #34	@ 0x22
 8027db6:	2500      	movs	r5, #0
 8027db8:	6003      	str	r3, [r0, #0]
 8027dba:	e7f1      	b.n	8027da0 <expf+0x2c>
 8027dbc:	42b17217 	.word	0x42b17217
 8027dc0:	c2cff1b5 	.word	0xc2cff1b5

08027dc4 <sqrtf>:
 8027dc4:	b570      	push	{r4, r5, r6, lr}
 8027dc6:	1c05      	adds	r5, r0, #0
 8027dc8:	f000 f82a 	bl	8027e20 <__ieee754_sqrtf>
 8027dcc:	1c29      	adds	r1, r5, #0
 8027dce:	1c04      	adds	r4, r0, #0
 8027dd0:	1c28      	adds	r0, r5, #0
 8027dd2:	f7d9 fbc7 	bl	8001564 <__aeabi_fcmpun>
 8027dd6:	2800      	cmp	r0, #0
 8027dd8:	d10e      	bne.n	8027df8 <sqrtf+0x34>
 8027dda:	2100      	movs	r1, #0
 8027ddc:	1c28      	adds	r0, r5, #0
 8027dde:	f7d8 fba7 	bl	8000530 <__aeabi_fcmplt>
 8027de2:	2800      	cmp	r0, #0
 8027de4:	d008      	beq.n	8027df8 <sqrtf+0x34>
 8027de6:	f7fd fa23 	bl	8025230 <__errno>
 8027dea:	2321      	movs	r3, #33	@ 0x21
 8027dec:	2100      	movs	r1, #0
 8027dee:	6003      	str	r3, [r0, #0]
 8027df0:	1c08      	adds	r0, r1, #0
 8027df2:	f7d8 feef 	bl	8000bd4 <__aeabi_fdiv>
 8027df6:	1c04      	adds	r4, r0, #0
 8027df8:	1c20      	adds	r0, r4, #0
 8027dfa:	bd70      	pop	{r4, r5, r6, pc}

08027dfc <finite>:
 8027dfc:	4b02      	ldr	r3, [pc, #8]	@ (8027e08 <finite+0xc>)
 8027dfe:	0048      	lsls	r0, r1, #1
 8027e00:	0840      	lsrs	r0, r0, #1
 8027e02:	18c0      	adds	r0, r0, r3
 8027e04:	0fc0      	lsrs	r0, r0, #31
 8027e06:	4770      	bx	lr
 8027e08:	80100000 	.word	0x80100000

08027e0c <finitef>:
 8027e0c:	22ff      	movs	r2, #255	@ 0xff
 8027e0e:	0043      	lsls	r3, r0, #1
 8027e10:	085b      	lsrs	r3, r3, #1
 8027e12:	2001      	movs	r0, #1
 8027e14:	05d2      	lsls	r2, r2, #23
 8027e16:	4293      	cmp	r3, r2
 8027e18:	db00      	blt.n	8027e1c <finitef+0x10>
 8027e1a:	2000      	movs	r0, #0
 8027e1c:	4770      	bx	lr
	...

08027e20 <__ieee754_sqrtf>:
 8027e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027e22:	0003      	movs	r3, r0
 8027e24:	0042      	lsls	r2, r0, #1
 8027e26:	1c04      	adds	r4, r0, #0
 8027e28:	20ff      	movs	r0, #255	@ 0xff
 8027e2a:	0852      	lsrs	r2, r2, #1
 8027e2c:	05c0      	lsls	r0, r0, #23
 8027e2e:	4282      	cmp	r2, r0
 8027e30:	d30a      	bcc.n	8027e48 <__ieee754_sqrtf+0x28>
 8027e32:	1c21      	adds	r1, r4, #0
 8027e34:	1c20      	adds	r0, r4, #0
 8027e36:	f7d9 f8b3 	bl	8000fa0 <__aeabi_fmul>
 8027e3a:	1c01      	adds	r1, r0, #0
 8027e3c:	1c20      	adds	r0, r4, #0
 8027e3e:	f7d8 fd3f 	bl	80008c0 <__aeabi_fadd>
 8027e42:	1c04      	adds	r4, r0, #0
 8027e44:	1c20      	adds	r0, r4, #0
 8027e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e48:	2a00      	cmp	r2, #0
 8027e4a:	d0fb      	beq.n	8027e44 <__ieee754_sqrtf+0x24>
 8027e4c:	2c00      	cmp	r4, #0
 8027e4e:	da07      	bge.n	8027e60 <__ieee754_sqrtf+0x40>
 8027e50:	1c21      	adds	r1, r4, #0
 8027e52:	1c20      	adds	r0, r4, #0
 8027e54:	f7d9 f9e2 	bl	800121c <__aeabi_fsub>
 8027e58:	1c01      	adds	r1, r0, #0
 8027e5a:	f7d8 febb 	bl	8000bd4 <__aeabi_fdiv>
 8027e5e:	e7f0      	b.n	8027e42 <__ieee754_sqrtf+0x22>
 8027e60:	0022      	movs	r2, r4
 8027e62:	15e1      	asrs	r1, r4, #23
 8027e64:	4002      	ands	r2, r0
 8027e66:	4204      	tst	r4, r0
 8027e68:	d046      	beq.n	8027ef8 <__ieee754_sqrtf+0xd8>
 8027e6a:	2280      	movs	r2, #128	@ 0x80
 8027e6c:	000f      	movs	r7, r1
 8027e6e:	025b      	lsls	r3, r3, #9
 8027e70:	0a5b      	lsrs	r3, r3, #9
 8027e72:	0412      	lsls	r2, r2, #16
 8027e74:	3f7f      	subs	r7, #127	@ 0x7f
 8027e76:	4313      	orrs	r3, r2
 8027e78:	07c9      	lsls	r1, r1, #31
 8027e7a:	d400      	bmi.n	8027e7e <__ieee754_sqrtf+0x5e>
 8027e7c:	005b      	lsls	r3, r3, #1
 8027e7e:	2400      	movs	r4, #0
 8027e80:	2180      	movs	r1, #128	@ 0x80
 8027e82:	2019      	movs	r0, #25
 8027e84:	0026      	movs	r6, r4
 8027e86:	107f      	asrs	r7, r7, #1
 8027e88:	005b      	lsls	r3, r3, #1
 8027e8a:	0449      	lsls	r1, r1, #17
 8027e8c:	1875      	adds	r5, r6, r1
 8027e8e:	001a      	movs	r2, r3
 8027e90:	429d      	cmp	r5, r3
 8027e92:	dc02      	bgt.n	8027e9a <__ieee754_sqrtf+0x7a>
 8027e94:	186e      	adds	r6, r5, r1
 8027e96:	1b5a      	subs	r2, r3, r5
 8027e98:	1864      	adds	r4, r4, r1
 8027e9a:	3801      	subs	r0, #1
 8027e9c:	0053      	lsls	r3, r2, #1
 8027e9e:	0849      	lsrs	r1, r1, #1
 8027ea0:	2800      	cmp	r0, #0
 8027ea2:	d1f3      	bne.n	8027e8c <__ieee754_sqrtf+0x6c>
 8027ea4:	2a00      	cmp	r2, #0
 8027ea6:	d019      	beq.n	8027edc <__ieee754_sqrtf+0xbc>
 8027ea8:	4d17      	ldr	r5, [pc, #92]	@ (8027f08 <__ieee754_sqrtf+0xe8>)
 8027eaa:	4e18      	ldr	r6, [pc, #96]	@ (8027f0c <__ieee754_sqrtf+0xec>)
 8027eac:	6828      	ldr	r0, [r5, #0]
 8027eae:	6831      	ldr	r1, [r6, #0]
 8027eb0:	682b      	ldr	r3, [r5, #0]
 8027eb2:	9301      	str	r3, [sp, #4]
 8027eb4:	f7d9 f9b2 	bl	800121c <__aeabi_fsub>
 8027eb8:	1c01      	adds	r1, r0, #0
 8027eba:	9801      	ldr	r0, [sp, #4]
 8027ebc:	f7d8 fb42 	bl	8000544 <__aeabi_fcmple>
 8027ec0:	2800      	cmp	r0, #0
 8027ec2:	d00b      	beq.n	8027edc <__ieee754_sqrtf+0xbc>
 8027ec4:	6828      	ldr	r0, [r5, #0]
 8027ec6:	6831      	ldr	r1, [r6, #0]
 8027ec8:	f7d8 fcfa 	bl	80008c0 <__aeabi_fadd>
 8027ecc:	682d      	ldr	r5, [r5, #0]
 8027ece:	1c01      	adds	r1, r0, #0
 8027ed0:	1c28      	adds	r0, r5, #0
 8027ed2:	f7d8 fb2d 	bl	8000530 <__aeabi_fcmplt>
 8027ed6:	2800      	cmp	r0, #0
 8027ed8:	d011      	beq.n	8027efe <__ieee754_sqrtf+0xde>
 8027eda:	3402      	adds	r4, #2
 8027edc:	23fc      	movs	r3, #252	@ 0xfc
 8027ede:	1064      	asrs	r4, r4, #1
 8027ee0:	059b      	lsls	r3, r3, #22
 8027ee2:	18e3      	adds	r3, r4, r3
 8027ee4:	05fc      	lsls	r4, r7, #23
 8027ee6:	18e4      	adds	r4, r4, r3
 8027ee8:	e7ac      	b.n	8027e44 <__ieee754_sqrtf+0x24>
 8027eea:	005b      	lsls	r3, r3, #1
 8027eec:	3201      	adds	r2, #1
 8027eee:	4203      	tst	r3, r0
 8027ef0:	d0fb      	beq.n	8027eea <__ieee754_sqrtf+0xca>
 8027ef2:	3a01      	subs	r2, #1
 8027ef4:	1a89      	subs	r1, r1, r2
 8027ef6:	e7b8      	b.n	8027e6a <__ieee754_sqrtf+0x4a>
 8027ef8:	2080      	movs	r0, #128	@ 0x80
 8027efa:	0400      	lsls	r0, r0, #16
 8027efc:	e7f7      	b.n	8027eee <__ieee754_sqrtf+0xce>
 8027efe:	2301      	movs	r3, #1
 8027f00:	3401      	adds	r4, #1
 8027f02:	439c      	bics	r4, r3
 8027f04:	e7ea      	b.n	8027edc <__ieee754_sqrtf+0xbc>
 8027f06:	46c0      	nop			@ (mov r8, r8)
 8027f08:	20000434 	.word	0x20000434
 8027f0c:	20000430 	.word	0x20000430

08027f10 <roundf>:
 8027f10:	0dc3      	lsrs	r3, r0, #23
 8027f12:	b2db      	uxtb	r3, r3
 8027f14:	3b7f      	subs	r3, #127	@ 0x7f
 8027f16:	0002      	movs	r2, r0
 8027f18:	b510      	push	{r4, lr}
 8027f1a:	2b16      	cmp	r3, #22
 8027f1c:	dc13      	bgt.n	8027f46 <roundf+0x36>
 8027f1e:	2b00      	cmp	r3, #0
 8027f20:	da07      	bge.n	8027f32 <roundf+0x22>
 8027f22:	0fc2      	lsrs	r2, r0, #31
 8027f24:	07d0      	lsls	r0, r2, #31
 8027f26:	3301      	adds	r3, #1
 8027f28:	d102      	bne.n	8027f30 <roundf+0x20>
 8027f2a:	23fe      	movs	r3, #254	@ 0xfe
 8027f2c:	059b      	lsls	r3, r3, #22
 8027f2e:	4318      	orrs	r0, r3
 8027f30:	bd10      	pop	{r4, pc}
 8027f32:	4908      	ldr	r1, [pc, #32]	@ (8027f54 <roundf+0x44>)
 8027f34:	4119      	asrs	r1, r3
 8027f36:	4208      	tst	r0, r1
 8027f38:	d0fa      	beq.n	8027f30 <roundf+0x20>
 8027f3a:	2080      	movs	r0, #128	@ 0x80
 8027f3c:	03c0      	lsls	r0, r0, #15
 8027f3e:	4118      	asrs	r0, r3
 8027f40:	1880      	adds	r0, r0, r2
 8027f42:	4388      	bics	r0, r1
 8027f44:	e7f4      	b.n	8027f30 <roundf+0x20>
 8027f46:	2b80      	cmp	r3, #128	@ 0x80
 8027f48:	d1f2      	bne.n	8027f30 <roundf+0x20>
 8027f4a:	1c01      	adds	r1, r0, #0
 8027f4c:	f7d8 fcb8 	bl	80008c0 <__aeabi_fadd>
 8027f50:	e7ee      	b.n	8027f30 <roundf+0x20>
 8027f52:	46c0      	nop			@ (mov r8, r8)
 8027f54:	007fffff 	.word	0x007fffff

08027f58 <__ieee754_log>:
 8027f58:	2380      	movs	r3, #128	@ 0x80
 8027f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f5c:	035b      	lsls	r3, r3, #13
 8027f5e:	000e      	movs	r6, r1
 8027f60:	b08d      	sub	sp, #52	@ 0x34
 8027f62:	4299      	cmp	r1, r3
 8027f64:	da23      	bge.n	8027fae <__ieee754_log+0x56>
 8027f66:	004b      	lsls	r3, r1, #1
 8027f68:	085b      	lsrs	r3, r3, #1
 8027f6a:	4303      	orrs	r3, r0
 8027f6c:	d107      	bne.n	8027f7e <__ieee754_log+0x26>
 8027f6e:	2200      	movs	r2, #0
 8027f70:	2300      	movs	r3, #0
 8027f72:	2000      	movs	r0, #0
 8027f74:	49b4      	ldr	r1, [pc, #720]	@ (8028248 <__ieee754_log+0x2f0>)
 8027f76:	f7d9 ff1d 	bl	8001db4 <__aeabi_ddiv>
 8027f7a:	b00d      	add	sp, #52	@ 0x34
 8027f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027f7e:	2900      	cmp	r1, #0
 8027f80:	da06      	bge.n	8027f90 <__ieee754_log+0x38>
 8027f82:	0002      	movs	r2, r0
 8027f84:	000b      	movs	r3, r1
 8027f86:	f7da fe21 	bl	8002bcc <__aeabi_dsub>
 8027f8a:	2200      	movs	r2, #0
 8027f8c:	2300      	movs	r3, #0
 8027f8e:	e7f2      	b.n	8027f76 <__ieee754_log+0x1e>
 8027f90:	4bae      	ldr	r3, [pc, #696]	@ (802824c <__ieee754_log+0x2f4>)
 8027f92:	2200      	movs	r2, #0
 8027f94:	f7da fb52 	bl	800263c <__aeabi_dmul>
 8027f98:	2336      	movs	r3, #54	@ 0x36
 8027f9a:	000e      	movs	r6, r1
 8027f9c:	425b      	negs	r3, r3
 8027f9e:	4aac      	ldr	r2, [pc, #688]	@ (8028250 <__ieee754_log+0x2f8>)
 8027fa0:	4296      	cmp	r6, r2
 8027fa2:	dd06      	ble.n	8027fb2 <__ieee754_log+0x5a>
 8027fa4:	0002      	movs	r2, r0
 8027fa6:	000b      	movs	r3, r1
 8027fa8:	f7d9 fba0 	bl	80016ec <__aeabi_dadd>
 8027fac:	e7e5      	b.n	8027f7a <__ieee754_log+0x22>
 8027fae:	2300      	movs	r3, #0
 8027fb0:	e7f5      	b.n	8027f9e <__ieee754_log+0x46>
 8027fb2:	4ca8      	ldr	r4, [pc, #672]	@ (8028254 <__ieee754_log+0x2fc>)
 8027fb4:	1532      	asrs	r2, r6, #20
 8027fb6:	1912      	adds	r2, r2, r4
 8027fb8:	0336      	lsls	r6, r6, #12
 8027fba:	4ca7      	ldr	r4, [pc, #668]	@ (8028258 <__ieee754_log+0x300>)
 8027fbc:	18d2      	adds	r2, r2, r3
 8027fbe:	0b33      	lsrs	r3, r6, #12
 8027fc0:	9302      	str	r3, [sp, #8]
 8027fc2:	191b      	adds	r3, r3, r4
 8027fc4:	2480      	movs	r4, #128	@ 0x80
 8027fc6:	0364      	lsls	r4, r4, #13
 8027fc8:	4023      	ands	r3, r4
 8027fca:	4ca4      	ldr	r4, [pc, #656]	@ (802825c <__ieee754_log+0x304>)
 8027fcc:	9d02      	ldr	r5, [sp, #8]
 8027fce:	405c      	eors	r4, r3
 8027fd0:	151b      	asrs	r3, r3, #20
 8027fd2:	189b      	adds	r3, r3, r2
 8027fd4:	4325      	orrs	r5, r4
 8027fd6:	2200      	movs	r2, #0
 8027fd8:	9300      	str	r3, [sp, #0]
 8027fda:	0029      	movs	r1, r5
 8027fdc:	4b9f      	ldr	r3, [pc, #636]	@ (802825c <__ieee754_log+0x304>)
 8027fde:	f7da fdf5 	bl	8002bcc <__aeabi_dsub>
 8027fe2:	9b02      	ldr	r3, [sp, #8]
 8027fe4:	0006      	movs	r6, r0
 8027fe6:	3302      	adds	r3, #2
 8027fe8:	031b      	lsls	r3, r3, #12
 8027fea:	000f      	movs	r7, r1
 8027fec:	2200      	movs	r2, #0
 8027fee:	0b1b      	lsrs	r3, r3, #12
 8027ff0:	2b02      	cmp	r3, #2
 8027ff2:	dc64      	bgt.n	80280be <__ieee754_log+0x166>
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	f7d8 fa5b 	bl	80004b0 <__aeabi_dcmpeq>
 8027ffa:	2800      	cmp	r0, #0
 8027ffc:	d019      	beq.n	8028032 <__ieee754_log+0xda>
 8027ffe:	9b00      	ldr	r3, [sp, #0]
 8028000:	2b00      	cmp	r3, #0
 8028002:	d100      	bne.n	8028006 <__ieee754_log+0xae>
 8028004:	e11c      	b.n	8028240 <__ieee754_log+0x2e8>
 8028006:	0018      	movs	r0, r3
 8028008:	f7db f9da 	bl	80033c0 <__aeabi_i2d>
 802800c:	4a94      	ldr	r2, [pc, #592]	@ (8028260 <__ieee754_log+0x308>)
 802800e:	4b95      	ldr	r3, [pc, #596]	@ (8028264 <__ieee754_log+0x30c>)
 8028010:	0004      	movs	r4, r0
 8028012:	000d      	movs	r5, r1
 8028014:	f7da fb12 	bl	800263c <__aeabi_dmul>
 8028018:	4a93      	ldr	r2, [pc, #588]	@ (8028268 <__ieee754_log+0x310>)
 802801a:	0006      	movs	r6, r0
 802801c:	000f      	movs	r7, r1
 802801e:	4b93      	ldr	r3, [pc, #588]	@ (802826c <__ieee754_log+0x314>)
 8028020:	0020      	movs	r0, r4
 8028022:	0029      	movs	r1, r5
 8028024:	f7da fb0a 	bl	800263c <__aeabi_dmul>
 8028028:	0002      	movs	r2, r0
 802802a:	000b      	movs	r3, r1
 802802c:	0030      	movs	r0, r6
 802802e:	0039      	movs	r1, r7
 8028030:	e7ba      	b.n	8027fa8 <__ieee754_log+0x50>
 8028032:	4a8f      	ldr	r2, [pc, #572]	@ (8028270 <__ieee754_log+0x318>)
 8028034:	4b8f      	ldr	r3, [pc, #572]	@ (8028274 <__ieee754_log+0x31c>)
 8028036:	0030      	movs	r0, r6
 8028038:	0039      	movs	r1, r7
 802803a:	f7da faff 	bl	800263c <__aeabi_dmul>
 802803e:	0002      	movs	r2, r0
 8028040:	000b      	movs	r3, r1
 8028042:	2000      	movs	r0, #0
 8028044:	498c      	ldr	r1, [pc, #560]	@ (8028278 <__ieee754_log+0x320>)
 8028046:	f7da fdc1 	bl	8002bcc <__aeabi_dsub>
 802804a:	0032      	movs	r2, r6
 802804c:	0004      	movs	r4, r0
 802804e:	000d      	movs	r5, r1
 8028050:	003b      	movs	r3, r7
 8028052:	0030      	movs	r0, r6
 8028054:	0039      	movs	r1, r7
 8028056:	f7da faf1 	bl	800263c <__aeabi_dmul>
 802805a:	000b      	movs	r3, r1
 802805c:	0002      	movs	r2, r0
 802805e:	0029      	movs	r1, r5
 8028060:	0020      	movs	r0, r4
 8028062:	f7da faeb 	bl	800263c <__aeabi_dmul>
 8028066:	9b00      	ldr	r3, [sp, #0]
 8028068:	9002      	str	r0, [sp, #8]
 802806a:	9103      	str	r1, [sp, #12]
 802806c:	2b00      	cmp	r3, #0
 802806e:	d106      	bne.n	802807e <__ieee754_log+0x126>
 8028070:	0002      	movs	r2, r0
 8028072:	000b      	movs	r3, r1
 8028074:	0030      	movs	r0, r6
 8028076:	0039      	movs	r1, r7
 8028078:	f7da fda8 	bl	8002bcc <__aeabi_dsub>
 802807c:	e77d      	b.n	8027f7a <__ieee754_log+0x22>
 802807e:	9800      	ldr	r0, [sp, #0]
 8028080:	f7db f99e 	bl	80033c0 <__aeabi_i2d>
 8028084:	4a76      	ldr	r2, [pc, #472]	@ (8028260 <__ieee754_log+0x308>)
 8028086:	4b77      	ldr	r3, [pc, #476]	@ (8028264 <__ieee754_log+0x30c>)
 8028088:	0004      	movs	r4, r0
 802808a:	000d      	movs	r5, r1
 802808c:	f7da fad6 	bl	800263c <__aeabi_dmul>
 8028090:	4a75      	ldr	r2, [pc, #468]	@ (8028268 <__ieee754_log+0x310>)
 8028092:	9000      	str	r0, [sp, #0]
 8028094:	9101      	str	r1, [sp, #4]
 8028096:	4b75      	ldr	r3, [pc, #468]	@ (802826c <__ieee754_log+0x314>)
 8028098:	0020      	movs	r0, r4
 802809a:	0029      	movs	r1, r5
 802809c:	f7da face 	bl	800263c <__aeabi_dmul>
 80280a0:	0002      	movs	r2, r0
 80280a2:	000b      	movs	r3, r1
 80280a4:	9802      	ldr	r0, [sp, #8]
 80280a6:	9903      	ldr	r1, [sp, #12]
 80280a8:	f7da fd90 	bl	8002bcc <__aeabi_dsub>
 80280ac:	0032      	movs	r2, r6
 80280ae:	003b      	movs	r3, r7
 80280b0:	f7da fd8c 	bl	8002bcc <__aeabi_dsub>
 80280b4:	0002      	movs	r2, r0
 80280b6:	000b      	movs	r3, r1
 80280b8:	9800      	ldr	r0, [sp, #0]
 80280ba:	9901      	ldr	r1, [sp, #4]
 80280bc:	e7dc      	b.n	8028078 <__ieee754_log+0x120>
 80280be:	2380      	movs	r3, #128	@ 0x80
 80280c0:	05db      	lsls	r3, r3, #23
 80280c2:	f7d9 fb13 	bl	80016ec <__aeabi_dadd>
 80280c6:	0002      	movs	r2, r0
 80280c8:	000b      	movs	r3, r1
 80280ca:	0030      	movs	r0, r6
 80280cc:	0039      	movs	r1, r7
 80280ce:	f7d9 fe71 	bl	8001db4 <__aeabi_ddiv>
 80280d2:	9004      	str	r0, [sp, #16]
 80280d4:	9105      	str	r1, [sp, #20]
 80280d6:	9800      	ldr	r0, [sp, #0]
 80280d8:	f7db f972 	bl	80033c0 <__aeabi_i2d>
 80280dc:	9a04      	ldr	r2, [sp, #16]
 80280de:	9b05      	ldr	r3, [sp, #20]
 80280e0:	9006      	str	r0, [sp, #24]
 80280e2:	9107      	str	r1, [sp, #28]
 80280e4:	0010      	movs	r0, r2
 80280e6:	0019      	movs	r1, r3
 80280e8:	f7da faa8 	bl	800263c <__aeabi_dmul>
 80280ec:	4a63      	ldr	r2, [pc, #396]	@ (802827c <__ieee754_log+0x324>)
 80280ee:	9b02      	ldr	r3, [sp, #8]
 80280f0:	4694      	mov	ip, r2
 80280f2:	4463      	add	r3, ip
 80280f4:	0002      	movs	r2, r0
 80280f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80280f8:	000b      	movs	r3, r1
 80280fa:	9008      	str	r0, [sp, #32]
 80280fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80280fe:	f7da fa9d 	bl	800263c <__aeabi_dmul>
 8028102:	0004      	movs	r4, r0
 8028104:	000d      	movs	r5, r1
 8028106:	4a5e      	ldr	r2, [pc, #376]	@ (8028280 <__ieee754_log+0x328>)
 8028108:	4b5e      	ldr	r3, [pc, #376]	@ (8028284 <__ieee754_log+0x32c>)
 802810a:	f7da fa97 	bl	800263c <__aeabi_dmul>
 802810e:	4a5e      	ldr	r2, [pc, #376]	@ (8028288 <__ieee754_log+0x330>)
 8028110:	4b5e      	ldr	r3, [pc, #376]	@ (802828c <__ieee754_log+0x334>)
 8028112:	f7d9 faeb 	bl	80016ec <__aeabi_dadd>
 8028116:	0022      	movs	r2, r4
 8028118:	002b      	movs	r3, r5
 802811a:	f7da fa8f 	bl	800263c <__aeabi_dmul>
 802811e:	4a5c      	ldr	r2, [pc, #368]	@ (8028290 <__ieee754_log+0x338>)
 8028120:	4b5c      	ldr	r3, [pc, #368]	@ (8028294 <__ieee754_log+0x33c>)
 8028122:	f7d9 fae3 	bl	80016ec <__aeabi_dadd>
 8028126:	0022      	movs	r2, r4
 8028128:	002b      	movs	r3, r5
 802812a:	f7da fa87 	bl	800263c <__aeabi_dmul>
 802812e:	4a5a      	ldr	r2, [pc, #360]	@ (8028298 <__ieee754_log+0x340>)
 8028130:	4b5a      	ldr	r3, [pc, #360]	@ (802829c <__ieee754_log+0x344>)
 8028132:	f7d9 fadb 	bl	80016ec <__aeabi_dadd>
 8028136:	9a08      	ldr	r2, [sp, #32]
 8028138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802813a:	f7da fa7f 	bl	800263c <__aeabi_dmul>
 802813e:	4a58      	ldr	r2, [pc, #352]	@ (80282a0 <__ieee754_log+0x348>)
 8028140:	9008      	str	r0, [sp, #32]
 8028142:	9109      	str	r1, [sp, #36]	@ 0x24
 8028144:	4b57      	ldr	r3, [pc, #348]	@ (80282a4 <__ieee754_log+0x34c>)
 8028146:	0020      	movs	r0, r4
 8028148:	0029      	movs	r1, r5
 802814a:	f7da fa77 	bl	800263c <__aeabi_dmul>
 802814e:	4a56      	ldr	r2, [pc, #344]	@ (80282a8 <__ieee754_log+0x350>)
 8028150:	4b56      	ldr	r3, [pc, #344]	@ (80282ac <__ieee754_log+0x354>)
 8028152:	f7d9 facb 	bl	80016ec <__aeabi_dadd>
 8028156:	0022      	movs	r2, r4
 8028158:	002b      	movs	r3, r5
 802815a:	f7da fa6f 	bl	800263c <__aeabi_dmul>
 802815e:	4a54      	ldr	r2, [pc, #336]	@ (80282b0 <__ieee754_log+0x358>)
 8028160:	4b54      	ldr	r3, [pc, #336]	@ (80282b4 <__ieee754_log+0x35c>)
 8028162:	f7d9 fac3 	bl	80016ec <__aeabi_dadd>
 8028166:	0022      	movs	r2, r4
 8028168:	002b      	movs	r3, r5
 802816a:	f7da fa67 	bl	800263c <__aeabi_dmul>
 802816e:	0002      	movs	r2, r0
 8028170:	000b      	movs	r3, r1
 8028172:	9808      	ldr	r0, [sp, #32]
 8028174:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028176:	f7d9 fab9 	bl	80016ec <__aeabi_dadd>
 802817a:	9a02      	ldr	r2, [sp, #8]
 802817c:	4b4e      	ldr	r3, [pc, #312]	@ (80282b8 <__ieee754_log+0x360>)
 802817e:	0004      	movs	r4, r0
 8028180:	1a9b      	subs	r3, r3, r2
 8028182:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028184:	000d      	movs	r5, r1
 8028186:	4313      	orrs	r3, r2
 8028188:	2b00      	cmp	r3, #0
 802818a:	dd34      	ble.n	80281f6 <__ieee754_log+0x29e>
 802818c:	2200      	movs	r2, #0
 802818e:	4b3a      	ldr	r3, [pc, #232]	@ (8028278 <__ieee754_log+0x320>)
 8028190:	0030      	movs	r0, r6
 8028192:	0039      	movs	r1, r7
 8028194:	f7da fa52 	bl	800263c <__aeabi_dmul>
 8028198:	0032      	movs	r2, r6
 802819a:	003b      	movs	r3, r7
 802819c:	f7da fa4e 	bl	800263c <__aeabi_dmul>
 80281a0:	0002      	movs	r2, r0
 80281a2:	000b      	movs	r3, r1
 80281a4:	9002      	str	r0, [sp, #8]
 80281a6:	9103      	str	r1, [sp, #12]
 80281a8:	0020      	movs	r0, r4
 80281aa:	0029      	movs	r1, r5
 80281ac:	f7d9 fa9e 	bl	80016ec <__aeabi_dadd>
 80281b0:	9a04      	ldr	r2, [sp, #16]
 80281b2:	9b05      	ldr	r3, [sp, #20]
 80281b4:	f7da fa42 	bl	800263c <__aeabi_dmul>
 80281b8:	9b00      	ldr	r3, [sp, #0]
 80281ba:	0004      	movs	r4, r0
 80281bc:	000d      	movs	r5, r1
 80281be:	2b00      	cmp	r3, #0
 80281c0:	d106      	bne.n	80281d0 <__ieee754_log+0x278>
 80281c2:	0002      	movs	r2, r0
 80281c4:	000b      	movs	r3, r1
 80281c6:	9802      	ldr	r0, [sp, #8]
 80281c8:	9903      	ldr	r1, [sp, #12]
 80281ca:	f7da fcff 	bl	8002bcc <__aeabi_dsub>
 80281ce:	e74f      	b.n	8028070 <__ieee754_log+0x118>
 80281d0:	4a23      	ldr	r2, [pc, #140]	@ (8028260 <__ieee754_log+0x308>)
 80281d2:	4b24      	ldr	r3, [pc, #144]	@ (8028264 <__ieee754_log+0x30c>)
 80281d4:	9806      	ldr	r0, [sp, #24]
 80281d6:	9907      	ldr	r1, [sp, #28]
 80281d8:	f7da fa30 	bl	800263c <__aeabi_dmul>
 80281dc:	4a22      	ldr	r2, [pc, #136]	@ (8028268 <__ieee754_log+0x310>)
 80281de:	9000      	str	r0, [sp, #0]
 80281e0:	9101      	str	r1, [sp, #4]
 80281e2:	9806      	ldr	r0, [sp, #24]
 80281e4:	9907      	ldr	r1, [sp, #28]
 80281e6:	4b21      	ldr	r3, [pc, #132]	@ (802826c <__ieee754_log+0x314>)
 80281e8:	f7da fa28 	bl	800263c <__aeabi_dmul>
 80281ec:	0022      	movs	r2, r4
 80281ee:	002b      	movs	r3, r5
 80281f0:	f7d9 fa7c 	bl	80016ec <__aeabi_dadd>
 80281f4:	e754      	b.n	80280a0 <__ieee754_log+0x148>
 80281f6:	0002      	movs	r2, r0
 80281f8:	000b      	movs	r3, r1
 80281fa:	0030      	movs	r0, r6
 80281fc:	0039      	movs	r1, r7
 80281fe:	f7da fce5 	bl	8002bcc <__aeabi_dsub>
 8028202:	9a04      	ldr	r2, [sp, #16]
 8028204:	9b05      	ldr	r3, [sp, #20]
 8028206:	f7da fa19 	bl	800263c <__aeabi_dmul>
 802820a:	9b00      	ldr	r3, [sp, #0]
 802820c:	0004      	movs	r4, r0
 802820e:	000d      	movs	r5, r1
 8028210:	2b00      	cmp	r3, #0
 8028212:	d102      	bne.n	802821a <__ieee754_log+0x2c2>
 8028214:	0002      	movs	r2, r0
 8028216:	000b      	movs	r3, r1
 8028218:	e72c      	b.n	8028074 <__ieee754_log+0x11c>
 802821a:	4a11      	ldr	r2, [pc, #68]	@ (8028260 <__ieee754_log+0x308>)
 802821c:	4b11      	ldr	r3, [pc, #68]	@ (8028264 <__ieee754_log+0x30c>)
 802821e:	9806      	ldr	r0, [sp, #24]
 8028220:	9907      	ldr	r1, [sp, #28]
 8028222:	f7da fa0b 	bl	800263c <__aeabi_dmul>
 8028226:	4a10      	ldr	r2, [pc, #64]	@ (8028268 <__ieee754_log+0x310>)
 8028228:	9000      	str	r0, [sp, #0]
 802822a:	9101      	str	r1, [sp, #4]
 802822c:	9806      	ldr	r0, [sp, #24]
 802822e:	9907      	ldr	r1, [sp, #28]
 8028230:	4b0e      	ldr	r3, [pc, #56]	@ (802826c <__ieee754_log+0x314>)
 8028232:	f7da fa03 	bl	800263c <__aeabi_dmul>
 8028236:	0002      	movs	r2, r0
 8028238:	000b      	movs	r3, r1
 802823a:	0020      	movs	r0, r4
 802823c:	0029      	movs	r1, r5
 802823e:	e733      	b.n	80280a8 <__ieee754_log+0x150>
 8028240:	2000      	movs	r0, #0
 8028242:	2100      	movs	r1, #0
 8028244:	e699      	b.n	8027f7a <__ieee754_log+0x22>
 8028246:	46c0      	nop			@ (mov r8, r8)
 8028248:	c3500000 	.word	0xc3500000
 802824c:	43500000 	.word	0x43500000
 8028250:	7fefffff 	.word	0x7fefffff
 8028254:	fffffc01 	.word	0xfffffc01
 8028258:	00095f64 	.word	0x00095f64
 802825c:	3ff00000 	.word	0x3ff00000
 8028260:	fee00000 	.word	0xfee00000
 8028264:	3fe62e42 	.word	0x3fe62e42
 8028268:	35793c76 	.word	0x35793c76
 802826c:	3dea39ef 	.word	0x3dea39ef
 8028270:	55555555 	.word	0x55555555
 8028274:	3fd55555 	.word	0x3fd55555
 8028278:	3fe00000 	.word	0x3fe00000
 802827c:	fff9eb86 	.word	0xfff9eb86
 8028280:	df3e5244 	.word	0xdf3e5244
 8028284:	3fc2f112 	.word	0x3fc2f112
 8028288:	96cb03de 	.word	0x96cb03de
 802828c:	3fc74664 	.word	0x3fc74664
 8028290:	94229359 	.word	0x94229359
 8028294:	3fd24924 	.word	0x3fd24924
 8028298:	55555593 	.word	0x55555593
 802829c:	3fe55555 	.word	0x3fe55555
 80282a0:	d078c69f 	.word	0xd078c69f
 80282a4:	3fc39a09 	.word	0x3fc39a09
 80282a8:	1d8e78af 	.word	0x1d8e78af
 80282ac:	3fcc71c5 	.word	0x3fcc71c5
 80282b0:	9997fa04 	.word	0x9997fa04
 80282b4:	3fd99999 	.word	0x3fd99999
 80282b8:	0006b851 	.word	0x0006b851

080282bc <__ieee754_pow>:
 80282bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80282be:	b095      	sub	sp, #84	@ 0x54
 80282c0:	9202      	str	r2, [sp, #8]
 80282c2:	9303      	str	r3, [sp, #12]
 80282c4:	9b03      	ldr	r3, [sp, #12]
 80282c6:	9a03      	ldr	r2, [sp, #12]
 80282c8:	9306      	str	r3, [sp, #24]
 80282ca:	0052      	lsls	r2, r2, #1
 80282cc:	9b02      	ldr	r3, [sp, #8]
 80282ce:	0852      	lsrs	r2, r2, #1
 80282d0:	9204      	str	r2, [sp, #16]
 80282d2:	001a      	movs	r2, r3
 80282d4:	000f      	movs	r7, r1
 80282d6:	9904      	ldr	r1, [sp, #16]
 80282d8:	0006      	movs	r6, r0
 80282da:	430a      	orrs	r2, r1
 80282dc:	d119      	bne.n	8028312 <__ieee754_pow+0x56>
 80282de:	2180      	movs	r1, #128	@ 0x80
 80282e0:	0309      	lsls	r1, r1, #12
 80282e2:	4079      	eors	r1, r7
 80282e4:	0002      	movs	r2, r0
 80282e6:	000b      	movs	r3, r1
 80282e8:	1892      	adds	r2, r2, r2
 80282ea:	415b      	adcs	r3, r3
 80282ec:	499b      	ldr	r1, [pc, #620]	@ (802855c <__ieee754_pow+0x2a0>)
 80282ee:	428b      	cmp	r3, r1
 80282f0:	d806      	bhi.n	8028300 <__ieee754_pow+0x44>
 80282f2:	d001      	beq.n	80282f8 <__ieee754_pow+0x3c>
 80282f4:	f000 fcde 	bl	8028cb4 <__ieee754_pow+0x9f8>
 80282f8:	2a00      	cmp	r2, #0
 80282fa:	d101      	bne.n	8028300 <__ieee754_pow+0x44>
 80282fc:	f000 fcda 	bl	8028cb4 <__ieee754_pow+0x9f8>
 8028300:	9a02      	ldr	r2, [sp, #8]
 8028302:	9b03      	ldr	r3, [sp, #12]
 8028304:	0030      	movs	r0, r6
 8028306:	0039      	movs	r1, r7
 8028308:	f7d9 f9f0 	bl	80016ec <__aeabi_dadd>
 802830c:	9000      	str	r0, [sp, #0]
 802830e:	9101      	str	r1, [sp, #4]
 8028310:	e0af      	b.n	8028472 <__ieee754_pow+0x1b6>
 8028312:	4a93      	ldr	r2, [pc, #588]	@ (8028560 <__ieee754_pow+0x2a4>)
 8028314:	007c      	lsls	r4, r7, #1
 8028316:	9708      	str	r7, [sp, #32]
 8028318:	900e      	str	r0, [sp, #56]	@ 0x38
 802831a:	0864      	lsrs	r4, r4, #1
 802831c:	4294      	cmp	r4, r2
 802831e:	d809      	bhi.n	8028334 <__ieee754_pow+0x78>
 8028320:	d101      	bne.n	8028326 <__ieee754_pow+0x6a>
 8028322:	2800      	cmp	r0, #0
 8028324:	d1ec      	bne.n	8028300 <__ieee754_pow+0x44>
 8028326:	9904      	ldr	r1, [sp, #16]
 8028328:	4a8d      	ldr	r2, [pc, #564]	@ (8028560 <__ieee754_pow+0x2a4>)
 802832a:	4291      	cmp	r1, r2
 802832c:	d802      	bhi.n	8028334 <__ieee754_pow+0x78>
 802832e:	d10c      	bne.n	802834a <__ieee754_pow+0x8e>
 8028330:	2b00      	cmp	r3, #0
 8028332:	d00a      	beq.n	802834a <__ieee754_pow+0x8e>
 8028334:	4b8b      	ldr	r3, [pc, #556]	@ (8028564 <__ieee754_pow+0x2a8>)
 8028336:	18fb      	adds	r3, r7, r3
 8028338:	4333      	orrs	r3, r6
 802833a:	d1e1      	bne.n	8028300 <__ieee754_pow+0x44>
 802833c:	2180      	movs	r1, #128	@ 0x80
 802833e:	9803      	ldr	r0, [sp, #12]
 8028340:	0309      	lsls	r1, r1, #12
 8028342:	4048      	eors	r0, r1
 8028344:	0003      	movs	r3, r0
 8028346:	9a02      	ldr	r2, [sp, #8]
 8028348:	e7ce      	b.n	80282e8 <__ieee754_pow+0x2c>
 802834a:	2500      	movs	r5, #0
 802834c:	9a08      	ldr	r2, [sp, #32]
 802834e:	940a      	str	r4, [sp, #40]	@ 0x28
 8028350:	42aa      	cmp	r2, r5
 8028352:	da68      	bge.n	8028426 <__ieee754_pow+0x16a>
 8028354:	4a84      	ldr	r2, [pc, #528]	@ (8028568 <__ieee754_pow+0x2ac>)
 8028356:	9904      	ldr	r1, [sp, #16]
 8028358:	4291      	cmp	r1, r2
 802835a:	d863      	bhi.n	8028424 <__ieee754_pow+0x168>
 802835c:	4a83      	ldr	r2, [pc, #524]	@ (802856c <__ieee754_pow+0x2b0>)
 802835e:	4291      	cmp	r1, r2
 8028360:	d910      	bls.n	8028384 <__ieee754_pow+0xc8>
 8028362:	150a      	asrs	r2, r1, #20
 8028364:	4982      	ldr	r1, [pc, #520]	@ (8028570 <__ieee754_pow+0x2b4>)
 8028366:	1852      	adds	r2, r2, r1
 8028368:	2a14      	cmp	r2, #20
 802836a:	dd3b      	ble.n	80283e4 <__ieee754_pow+0x128>
 802836c:	2134      	movs	r1, #52	@ 0x34
 802836e:	1a89      	subs	r1, r1, r2
 8028370:	9a02      	ldr	r2, [sp, #8]
 8028372:	40ca      	lsrs	r2, r1
 8028374:	0010      	movs	r0, r2
 8028376:	4088      	lsls	r0, r1
 8028378:	4298      	cmp	r0, r3
 802837a:	d103      	bne.n	8028384 <__ieee754_pow+0xc8>
 802837c:	2101      	movs	r1, #1
 802837e:	3502      	adds	r5, #2
 8028380:	400a      	ands	r2, r1
 8028382:	1aad      	subs	r5, r5, r2
 8028384:	2b00      	cmp	r3, #0
 8028386:	d03d      	beq.n	8028404 <__ieee754_pow+0x148>
 8028388:	0030      	movs	r0, r6
 802838a:	0039      	movs	r1, r7
 802838c:	f000 fcc2 	bl	8028d14 <fabs>
 8028390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028392:	9000      	str	r0, [sp, #0]
 8028394:	9101      	str	r1, [sp, #4]
 8028396:	2b00      	cmp	r3, #0
 8028398:	d000      	beq.n	802839c <__ieee754_pow+0xe0>
 802839a:	e093      	b.n	80284c4 <__ieee754_pow+0x208>
 802839c:	4a75      	ldr	r2, [pc, #468]	@ (8028574 <__ieee754_pow+0x2b8>)
 802839e:	00bb      	lsls	r3, r7, #2
 80283a0:	089b      	lsrs	r3, r3, #2
 80283a2:	4293      	cmp	r3, r2
 80283a4:	d002      	beq.n	80283ac <__ieee754_pow+0xf0>
 80283a6:	2c00      	cmp	r4, #0
 80283a8:	d000      	beq.n	80283ac <__ieee754_pow+0xf0>
 80283aa:	e08b      	b.n	80284c4 <__ieee754_pow+0x208>
 80283ac:	9b06      	ldr	r3, [sp, #24]
 80283ae:	2b00      	cmp	r3, #0
 80283b0:	da07      	bge.n	80283c2 <__ieee754_pow+0x106>
 80283b2:	9a00      	ldr	r2, [sp, #0]
 80283b4:	9b01      	ldr	r3, [sp, #4]
 80283b6:	2000      	movs	r0, #0
 80283b8:	496e      	ldr	r1, [pc, #440]	@ (8028574 <__ieee754_pow+0x2b8>)
 80283ba:	f7d9 fcfb 	bl	8001db4 <__aeabi_ddiv>
 80283be:	9000      	str	r0, [sp, #0]
 80283c0:	9101      	str	r1, [sp, #4]
 80283c2:	9b08      	ldr	r3, [sp, #32]
 80283c4:	2b00      	cmp	r3, #0
 80283c6:	da54      	bge.n	8028472 <__ieee754_pow+0x1b6>
 80283c8:	4b66      	ldr	r3, [pc, #408]	@ (8028564 <__ieee754_pow+0x2a8>)
 80283ca:	18e4      	adds	r4, r4, r3
 80283cc:	432c      	orrs	r4, r5
 80283ce:	d000      	beq.n	80283d2 <__ieee754_pow+0x116>
 80283d0:	e06d      	b.n	80284ae <__ieee754_pow+0x1f2>
 80283d2:	9a00      	ldr	r2, [sp, #0]
 80283d4:	9b01      	ldr	r3, [sp, #4]
 80283d6:	0010      	movs	r0, r2
 80283d8:	0019      	movs	r1, r3
 80283da:	f7da fbf7 	bl	8002bcc <__aeabi_dsub>
 80283de:	0002      	movs	r2, r0
 80283e0:	000b      	movs	r3, r1
 80283e2:	e01c      	b.n	802841e <__ieee754_pow+0x162>
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	d1cf      	bne.n	8028388 <__ieee754_pow+0xcc>
 80283e8:	3314      	adds	r3, #20
 80283ea:	1a9a      	subs	r2, r3, r2
 80283ec:	9b04      	ldr	r3, [sp, #16]
 80283ee:	4113      	asrs	r3, r2
 80283f0:	0019      	movs	r1, r3
 80283f2:	4091      	lsls	r1, r2
 80283f4:	000a      	movs	r2, r1
 80283f6:	9904      	ldr	r1, [sp, #16]
 80283f8:	428a      	cmp	r2, r1
 80283fa:	d103      	bne.n	8028404 <__ieee754_pow+0x148>
 80283fc:	2201      	movs	r2, #1
 80283fe:	2502      	movs	r5, #2
 8028400:	4013      	ands	r3, r2
 8028402:	1aed      	subs	r5, r5, r3
 8028404:	4b5b      	ldr	r3, [pc, #364]	@ (8028574 <__ieee754_pow+0x2b8>)
 8028406:	9a04      	ldr	r2, [sp, #16]
 8028408:	429a      	cmp	r2, r3
 802840a:	d136      	bne.n	802847a <__ieee754_pow+0x1be>
 802840c:	9b06      	ldr	r3, [sp, #24]
 802840e:	9600      	str	r6, [sp, #0]
 8028410:	9701      	str	r7, [sp, #4]
 8028412:	2b00      	cmp	r3, #0
 8028414:	da2d      	bge.n	8028472 <__ieee754_pow+0x1b6>
 8028416:	0032      	movs	r2, r6
 8028418:	003b      	movs	r3, r7
 802841a:	2000      	movs	r0, #0
 802841c:	4955      	ldr	r1, [pc, #340]	@ (8028574 <__ieee754_pow+0x2b8>)
 802841e:	f7d9 fcc9 	bl	8001db4 <__aeabi_ddiv>
 8028422:	e773      	b.n	802830c <__ieee754_pow+0x50>
 8028424:	2502      	movs	r5, #2
 8028426:	2b00      	cmp	r3, #0
 8028428:	d1ae      	bne.n	8028388 <__ieee754_pow+0xcc>
 802842a:	9b04      	ldr	r3, [sp, #16]
 802842c:	4a4c      	ldr	r2, [pc, #304]	@ (8028560 <__ieee754_pow+0x2a4>)
 802842e:	4293      	cmp	r3, r2
 8028430:	d1e8      	bne.n	8028404 <__ieee754_pow+0x148>
 8028432:	4b4c      	ldr	r3, [pc, #304]	@ (8028564 <__ieee754_pow+0x2a8>)
 8028434:	18e3      	adds	r3, r4, r3
 8028436:	4333      	orrs	r3, r6
 8028438:	d101      	bne.n	802843e <__ieee754_pow+0x182>
 802843a:	f000 fc3b 	bl	8028cb4 <__ieee754_pow+0x9f8>
 802843e:	4b4b      	ldr	r3, [pc, #300]	@ (802856c <__ieee754_pow+0x2b0>)
 8028440:	429c      	cmp	r4, r3
 8028442:	d909      	bls.n	8028458 <__ieee754_pow+0x19c>
 8028444:	9b06      	ldr	r3, [sp, #24]
 8028446:	2b00      	cmp	r3, #0
 8028448:	da01      	bge.n	802844e <__ieee754_pow+0x192>
 802844a:	f000 fc37 	bl	8028cbc <__ieee754_pow+0xa00>
 802844e:	9b02      	ldr	r3, [sp, #8]
 8028450:	9c03      	ldr	r4, [sp, #12]
 8028452:	9300      	str	r3, [sp, #0]
 8028454:	9401      	str	r4, [sp, #4]
 8028456:	e00c      	b.n	8028472 <__ieee754_pow+0x1b6>
 8028458:	9b06      	ldr	r3, [sp, #24]
 802845a:	2b00      	cmp	r3, #0
 802845c:	db01      	blt.n	8028462 <__ieee754_pow+0x1a6>
 802845e:	f000 fc2d 	bl	8028cbc <__ieee754_pow+0xa00>
 8028462:	2280      	movs	r2, #128	@ 0x80
 8028464:	0612      	lsls	r2, r2, #24
 8028466:	4694      	mov	ip, r2
 8028468:	9b02      	ldr	r3, [sp, #8]
 802846a:	9300      	str	r3, [sp, #0]
 802846c:	9b03      	ldr	r3, [sp, #12]
 802846e:	4463      	add	r3, ip
 8028470:	9301      	str	r3, [sp, #4]
 8028472:	9800      	ldr	r0, [sp, #0]
 8028474:	9901      	ldr	r1, [sp, #4]
 8028476:	b015      	add	sp, #84	@ 0x54
 8028478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802847a:	2380      	movs	r3, #128	@ 0x80
 802847c:	9a06      	ldr	r2, [sp, #24]
 802847e:	05db      	lsls	r3, r3, #23
 8028480:	429a      	cmp	r2, r3
 8028482:	d106      	bne.n	8028492 <__ieee754_pow+0x1d6>
 8028484:	0032      	movs	r2, r6
 8028486:	003b      	movs	r3, r7
 8028488:	0030      	movs	r0, r6
 802848a:	0039      	movs	r1, r7
 802848c:	f7da f8d6 	bl	800263c <__aeabi_dmul>
 8028490:	e73c      	b.n	802830c <__ieee754_pow+0x50>
 8028492:	4b39      	ldr	r3, [pc, #228]	@ (8028578 <__ieee754_pow+0x2bc>)
 8028494:	9a06      	ldr	r2, [sp, #24]
 8028496:	429a      	cmp	r2, r3
 8028498:	d000      	beq.n	802849c <__ieee754_pow+0x1e0>
 802849a:	e775      	b.n	8028388 <__ieee754_pow+0xcc>
 802849c:	9b08      	ldr	r3, [sp, #32]
 802849e:	2b00      	cmp	r3, #0
 80284a0:	da00      	bge.n	80284a4 <__ieee754_pow+0x1e8>
 80284a2:	e771      	b.n	8028388 <__ieee754_pow+0xcc>
 80284a4:	0030      	movs	r0, r6
 80284a6:	0039      	movs	r1, r7
 80284a8:	f000 fde4 	bl	8029074 <__ieee754_sqrt>
 80284ac:	e72e      	b.n	802830c <__ieee754_pow+0x50>
 80284ae:	2d01      	cmp	r5, #1
 80284b0:	d1df      	bne.n	8028472 <__ieee754_pow+0x1b6>
 80284b2:	9800      	ldr	r0, [sp, #0]
 80284b4:	2180      	movs	r1, #128	@ 0x80
 80284b6:	0002      	movs	r2, r0
 80284b8:	9801      	ldr	r0, [sp, #4]
 80284ba:	0609      	lsls	r1, r1, #24
 80284bc:	1843      	adds	r3, r0, r1
 80284be:	9200      	str	r2, [sp, #0]
 80284c0:	9301      	str	r3, [sp, #4]
 80284c2:	e7d6      	b.n	8028472 <__ieee754_pow+0x1b6>
 80284c4:	0ffb      	lsrs	r3, r7, #31
 80284c6:	3b01      	subs	r3, #1
 80284c8:	001a      	movs	r2, r3
 80284ca:	432a      	orrs	r2, r5
 80284cc:	d104      	bne.n	80284d8 <__ieee754_pow+0x21c>
 80284ce:	0032      	movs	r2, r6
 80284d0:	003b      	movs	r3, r7
 80284d2:	0030      	movs	r0, r6
 80284d4:	0039      	movs	r1, r7
 80284d6:	e780      	b.n	80283da <__ieee754_pow+0x11e>
 80284d8:	3d01      	subs	r5, #1
 80284da:	2200      	movs	r2, #0
 80284dc:	431d      	orrs	r5, r3
 80284de:	d015      	beq.n	802850c <__ieee754_pow+0x250>
 80284e0:	4b24      	ldr	r3, [pc, #144]	@ (8028574 <__ieee754_pow+0x2b8>)
 80284e2:	9208      	str	r2, [sp, #32]
 80284e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80284e6:	2384      	movs	r3, #132	@ 0x84
 80284e8:	9a04      	ldr	r2, [sp, #16]
 80284ea:	05db      	lsls	r3, r3, #23
 80284ec:	429a      	cmp	r2, r3
 80284ee:	d800      	bhi.n	80284f2 <__ieee754_pow+0x236>
 80284f0:	e102      	b.n	80286f8 <__ieee754_pow+0x43c>
 80284f2:	4b22      	ldr	r3, [pc, #136]	@ (802857c <__ieee754_pow+0x2c0>)
 80284f4:	429a      	cmp	r2, r3
 80284f6:	d912      	bls.n	802851e <__ieee754_pow+0x262>
 80284f8:	4b1c      	ldr	r3, [pc, #112]	@ (802856c <__ieee754_pow+0x2b0>)
 80284fa:	429c      	cmp	r4, r3
 80284fc:	d808      	bhi.n	8028510 <__ieee754_pow+0x254>
 80284fe:	9b06      	ldr	r3, [sp, #24]
 8028500:	2b00      	cmp	r3, #0
 8028502:	da08      	bge.n	8028516 <__ieee754_pow+0x25a>
 8028504:	2000      	movs	r0, #0
 8028506:	f000 fd8b 	bl	8029020 <__math_oflow>
 802850a:	e6ff      	b.n	802830c <__ieee754_pow+0x50>
 802850c:	4b1c      	ldr	r3, [pc, #112]	@ (8028580 <__ieee754_pow+0x2c4>)
 802850e:	e7e8      	b.n	80284e2 <__ieee754_pow+0x226>
 8028510:	9b06      	ldr	r3, [sp, #24]
 8028512:	2b00      	cmp	r3, #0
 8028514:	dcf6      	bgt.n	8028504 <__ieee754_pow+0x248>
 8028516:	2000      	movs	r0, #0
 8028518:	f000 fd7b 	bl	8029012 <__math_uflow>
 802851c:	e6f6      	b.n	802830c <__ieee754_pow+0x50>
 802851e:	4b19      	ldr	r3, [pc, #100]	@ (8028584 <__ieee754_pow+0x2c8>)
 8028520:	429c      	cmp	r4, r3
 8028522:	d80b      	bhi.n	802853c <__ieee754_pow+0x280>
 8028524:	9808      	ldr	r0, [sp, #32]
 8028526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028528:	2300      	movs	r3, #0
 802852a:	2200      	movs	r2, #0
 802852c:	f7d7 ffc6 	bl	80004bc <__aeabi_dcmplt>
 8028530:	1e43      	subs	r3, r0, #1
 8028532:	4198      	sbcs	r0, r3
 8028534:	9b06      	ldr	r3, [sp, #24]
 8028536:	2b00      	cmp	r3, #0
 8028538:	daee      	bge.n	8028518 <__ieee754_pow+0x25c>
 802853a:	e7e4      	b.n	8028506 <__ieee754_pow+0x24a>
 802853c:	4b0d      	ldr	r3, [pc, #52]	@ (8028574 <__ieee754_pow+0x2b8>)
 802853e:	2200      	movs	r2, #0
 8028540:	429c      	cmp	r4, r3
 8028542:	d921      	bls.n	8028588 <__ieee754_pow+0x2cc>
 8028544:	9808      	ldr	r0, [sp, #32]
 8028546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028548:	2300      	movs	r3, #0
 802854a:	f7d7 ffb7 	bl	80004bc <__aeabi_dcmplt>
 802854e:	1e43      	subs	r3, r0, #1
 8028550:	4198      	sbcs	r0, r3
 8028552:	9b06      	ldr	r3, [sp, #24]
 8028554:	2b00      	cmp	r3, #0
 8028556:	dcd6      	bgt.n	8028506 <__ieee754_pow+0x24a>
 8028558:	e7de      	b.n	8028518 <__ieee754_pow+0x25c>
 802855a:	46c0      	nop			@ (mov r8, r8)
 802855c:	fff00000 	.word	0xfff00000
 8028560:	7ff00000 	.word	0x7ff00000
 8028564:	c0100000 	.word	0xc0100000
 8028568:	433fffff 	.word	0x433fffff
 802856c:	3fefffff 	.word	0x3fefffff
 8028570:	fffffc01 	.word	0xfffffc01
 8028574:	3ff00000 	.word	0x3ff00000
 8028578:	3fe00000 	.word	0x3fe00000
 802857c:	43f00000 	.word	0x43f00000
 8028580:	bff00000 	.word	0xbff00000
 8028584:	3feffffe 	.word	0x3feffffe
 8028588:	9800      	ldr	r0, [sp, #0]
 802858a:	9901      	ldr	r1, [sp, #4]
 802858c:	4b4f      	ldr	r3, [pc, #316]	@ (80286cc <__ieee754_pow+0x410>)
 802858e:	f7da fb1d 	bl	8002bcc <__aeabi_dsub>
 8028592:	22c0      	movs	r2, #192	@ 0xc0
 8028594:	4b4e      	ldr	r3, [pc, #312]	@ (80286d0 <__ieee754_pow+0x414>)
 8028596:	05d2      	lsls	r2, r2, #23
 8028598:	0006      	movs	r6, r0
 802859a:	000f      	movs	r7, r1
 802859c:	f7da f84e 	bl	800263c <__aeabi_dmul>
 80285a0:	4a4c      	ldr	r2, [pc, #304]	@ (80286d4 <__ieee754_pow+0x418>)
 80285a2:	9004      	str	r0, [sp, #16]
 80285a4:	9105      	str	r1, [sp, #20]
 80285a6:	4b4c      	ldr	r3, [pc, #304]	@ (80286d8 <__ieee754_pow+0x41c>)
 80285a8:	0030      	movs	r0, r6
 80285aa:	0039      	movs	r1, r7
 80285ac:	f7da f846 	bl	800263c <__aeabi_dmul>
 80285b0:	2200      	movs	r2, #0
 80285b2:	9000      	str	r0, [sp, #0]
 80285b4:	9101      	str	r1, [sp, #4]
 80285b6:	4b49      	ldr	r3, [pc, #292]	@ (80286dc <__ieee754_pow+0x420>)
 80285b8:	0030      	movs	r0, r6
 80285ba:	0039      	movs	r1, r7
 80285bc:	f7da f83e 	bl	800263c <__aeabi_dmul>
 80285c0:	0002      	movs	r2, r0
 80285c2:	000b      	movs	r3, r1
 80285c4:	4846      	ldr	r0, [pc, #280]	@ (80286e0 <__ieee754_pow+0x424>)
 80285c6:	4947      	ldr	r1, [pc, #284]	@ (80286e4 <__ieee754_pow+0x428>)
 80285c8:	f7da fb00 	bl	8002bcc <__aeabi_dsub>
 80285cc:	0032      	movs	r2, r6
 80285ce:	003b      	movs	r3, r7
 80285d0:	f7da f834 	bl	800263c <__aeabi_dmul>
 80285d4:	0002      	movs	r2, r0
 80285d6:	000b      	movs	r3, r1
 80285d8:	2000      	movs	r0, #0
 80285da:	4943      	ldr	r1, [pc, #268]	@ (80286e8 <__ieee754_pow+0x42c>)
 80285dc:	f7da faf6 	bl	8002bcc <__aeabi_dsub>
 80285e0:	0032      	movs	r2, r6
 80285e2:	0004      	movs	r4, r0
 80285e4:	000d      	movs	r5, r1
 80285e6:	003b      	movs	r3, r7
 80285e8:	0030      	movs	r0, r6
 80285ea:	0039      	movs	r1, r7
 80285ec:	f7da f826 	bl	800263c <__aeabi_dmul>
 80285f0:	0002      	movs	r2, r0
 80285f2:	000b      	movs	r3, r1
 80285f4:	0020      	movs	r0, r4
 80285f6:	0029      	movs	r1, r5
 80285f8:	f7da f820 	bl	800263c <__aeabi_dmul>
 80285fc:	4a3b      	ldr	r2, [pc, #236]	@ (80286ec <__ieee754_pow+0x430>)
 80285fe:	4b34      	ldr	r3, [pc, #208]	@ (80286d0 <__ieee754_pow+0x414>)
 8028600:	f7da f81c 	bl	800263c <__aeabi_dmul>
 8028604:	0002      	movs	r2, r0
 8028606:	000b      	movs	r3, r1
 8028608:	9800      	ldr	r0, [sp, #0]
 802860a:	9901      	ldr	r1, [sp, #4]
 802860c:	f7da fade 	bl	8002bcc <__aeabi_dsub>
 8028610:	0002      	movs	r2, r0
 8028612:	000b      	movs	r3, r1
 8028614:	0004      	movs	r4, r0
 8028616:	000d      	movs	r5, r1
 8028618:	9804      	ldr	r0, [sp, #16]
 802861a:	9905      	ldr	r1, [sp, #20]
 802861c:	f7d9 f866 	bl	80016ec <__aeabi_dadd>
 8028620:	9a04      	ldr	r2, [sp, #16]
 8028622:	9b05      	ldr	r3, [sp, #20]
 8028624:	2000      	movs	r0, #0
 8028626:	9000      	str	r0, [sp, #0]
 8028628:	9101      	str	r1, [sp, #4]
 802862a:	f7da facf 	bl	8002bcc <__aeabi_dsub>
 802862e:	0002      	movs	r2, r0
 8028630:	000b      	movs	r3, r1
 8028632:	0020      	movs	r0, r4
 8028634:	0029      	movs	r1, r5
 8028636:	f7da fac9 	bl	8002bcc <__aeabi_dsub>
 802863a:	9b02      	ldr	r3, [sp, #8]
 802863c:	9c03      	ldr	r4, [sp, #12]
 802863e:	9304      	str	r3, [sp, #16]
 8028640:	9405      	str	r4, [sp, #20]
 8028642:	2300      	movs	r3, #0
 8028644:	9304      	str	r3, [sp, #16]
 8028646:	9c04      	ldr	r4, [sp, #16]
 8028648:	9d05      	ldr	r5, [sp, #20]
 802864a:	0006      	movs	r6, r0
 802864c:	000f      	movs	r7, r1
 802864e:	9802      	ldr	r0, [sp, #8]
 8028650:	9903      	ldr	r1, [sp, #12]
 8028652:	0022      	movs	r2, r4
 8028654:	002b      	movs	r3, r5
 8028656:	f7da fab9 	bl	8002bcc <__aeabi_dsub>
 802865a:	9a00      	ldr	r2, [sp, #0]
 802865c:	9b01      	ldr	r3, [sp, #4]
 802865e:	f7d9 ffed 	bl	800263c <__aeabi_dmul>
 8028662:	9a02      	ldr	r2, [sp, #8]
 8028664:	9b03      	ldr	r3, [sp, #12]
 8028666:	9006      	str	r0, [sp, #24]
 8028668:	9107      	str	r1, [sp, #28]
 802866a:	0030      	movs	r0, r6
 802866c:	0039      	movs	r1, r7
 802866e:	f7d9 ffe5 	bl	800263c <__aeabi_dmul>
 8028672:	0002      	movs	r2, r0
 8028674:	000b      	movs	r3, r1
 8028676:	9806      	ldr	r0, [sp, #24]
 8028678:	9907      	ldr	r1, [sp, #28]
 802867a:	f7d9 f837 	bl	80016ec <__aeabi_dadd>
 802867e:	0022      	movs	r2, r4
 8028680:	002b      	movs	r3, r5
 8028682:	9002      	str	r0, [sp, #8]
 8028684:	9103      	str	r1, [sp, #12]
 8028686:	9800      	ldr	r0, [sp, #0]
 8028688:	9901      	ldr	r1, [sp, #4]
 802868a:	f7d9 ffd7 	bl	800263c <__aeabi_dmul>
 802868e:	000b      	movs	r3, r1
 8028690:	0002      	movs	r2, r0
 8028692:	0006      	movs	r6, r0
 8028694:	000f      	movs	r7, r1
 8028696:	9802      	ldr	r0, [sp, #8]
 8028698:	9903      	ldr	r1, [sp, #12]
 802869a:	f7d9 f827 	bl	80016ec <__aeabi_dadd>
 802869e:	9000      	str	r0, [sp, #0]
 80286a0:	9101      	str	r1, [sp, #4]
 80286a2:	9c01      	ldr	r4, [sp, #4]
 80286a4:	4b12      	ldr	r3, [pc, #72]	@ (80286f0 <__ieee754_pow+0x434>)
 80286a6:	9406      	str	r4, [sp, #24]
 80286a8:	429c      	cmp	r4, r3
 80286aa:	dc00      	bgt.n	80286ae <__ieee754_pow+0x3f2>
 80286ac:	e222      	b.n	8028af4 <__ieee754_pow+0x838>
 80286ae:	4a11      	ldr	r2, [pc, #68]	@ (80286f4 <__ieee754_pow+0x438>)
 80286b0:	18a3      	adds	r3, r4, r2
 80286b2:	9a00      	ldr	r2, [sp, #0]
 80286b4:	4313      	orrs	r3, r2
 80286b6:	d100      	bne.n	80286ba <__ieee754_pow+0x3fe>
 80286b8:	e1a0      	b.n	80289fc <__ieee754_pow+0x740>
 80286ba:	9808      	ldr	r0, [sp, #32]
 80286bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80286be:	2300      	movs	r3, #0
 80286c0:	2200      	movs	r2, #0
 80286c2:	f7d7 fefb 	bl	80004bc <__aeabi_dcmplt>
 80286c6:	1e43      	subs	r3, r0, #1
 80286c8:	4198      	sbcs	r0, r3
 80286ca:	e71c      	b.n	8028506 <__ieee754_pow+0x24a>
 80286cc:	3ff00000 	.word	0x3ff00000
 80286d0:	3ff71547 	.word	0x3ff71547
 80286d4:	f85ddf44 	.word	0xf85ddf44
 80286d8:	3e54ae0b 	.word	0x3e54ae0b
 80286dc:	3fd00000 	.word	0x3fd00000
 80286e0:	55555555 	.word	0x55555555
 80286e4:	3fd55555 	.word	0x3fd55555
 80286e8:	3fe00000 	.word	0x3fe00000
 80286ec:	652b82fe 	.word	0x652b82fe
 80286f0:	408fffff 	.word	0x408fffff
 80286f4:	bf700000 	.word	0xbf700000
 80286f8:	4be0      	ldr	r3, [pc, #896]	@ (8028a7c <__ieee754_pow+0x7c0>)
 80286fa:	2200      	movs	r2, #0
 80286fc:	423b      	tst	r3, r7
 80286fe:	d10b      	bne.n	8028718 <__ieee754_pow+0x45c>
 8028700:	9800      	ldr	r0, [sp, #0]
 8028702:	9901      	ldr	r1, [sp, #4]
 8028704:	2200      	movs	r2, #0
 8028706:	4bde      	ldr	r3, [pc, #888]	@ (8028a80 <__ieee754_pow+0x7c4>)
 8028708:	f7d9 ff98 	bl	800263c <__aeabi_dmul>
 802870c:	2235      	movs	r2, #53	@ 0x35
 802870e:	9000      	str	r0, [sp, #0]
 8028710:	9101      	str	r1, [sp, #4]
 8028712:	9b01      	ldr	r3, [sp, #4]
 8028714:	4252      	negs	r2, r2
 8028716:	930a      	str	r3, [sp, #40]	@ 0x28
 8028718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802871a:	49da      	ldr	r1, [pc, #872]	@ (8028a84 <__ieee754_pow+0x7c8>)
 802871c:	151b      	asrs	r3, r3, #20
 802871e:	185b      	adds	r3, r3, r1
 8028720:	189b      	adds	r3, r3, r2
 8028722:	930e      	str	r3, [sp, #56]	@ 0x38
 8028724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028726:	4dd8      	ldr	r5, [pc, #864]	@ (8028a88 <__ieee754_pow+0x7cc>)
 8028728:	031b      	lsls	r3, r3, #12
 802872a:	4ad8      	ldr	r2, [pc, #864]	@ (8028a8c <__ieee754_pow+0x7d0>)
 802872c:	0b1b      	lsrs	r3, r3, #12
 802872e:	2600      	movs	r6, #0
 8028730:	431d      	orrs	r5, r3
 8028732:	4293      	cmp	r3, r2
 8028734:	dd09      	ble.n	802874a <__ieee754_pow+0x48e>
 8028736:	4ad6      	ldr	r2, [pc, #856]	@ (8028a90 <__ieee754_pow+0x7d4>)
 8028738:	3601      	adds	r6, #1
 802873a:	4293      	cmp	r3, r2
 802873c:	dd05      	ble.n	802874a <__ieee754_pow+0x48e>
 802873e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028740:	199b      	adds	r3, r3, r6
 8028742:	2600      	movs	r6, #0
 8028744:	930e      	str	r3, [sp, #56]	@ 0x38
 8028746:	4bd3      	ldr	r3, [pc, #844]	@ (8028a94 <__ieee754_pow+0x7d8>)
 8028748:	18ed      	adds	r5, r5, r3
 802874a:	9800      	ldr	r0, [sp, #0]
 802874c:	9901      	ldr	r1, [sp, #4]
 802874e:	0029      	movs	r1, r5
 8028750:	4bd1      	ldr	r3, [pc, #836]	@ (8028a98 <__ieee754_pow+0x7dc>)
 8028752:	00f2      	lsls	r2, r6, #3
 8028754:	189b      	adds	r3, r3, r2
 8028756:	685c      	ldr	r4, [r3, #4]
 8028758:	681b      	ldr	r3, [r3, #0]
 802875a:	920f      	str	r2, [sp, #60]	@ 0x3c
 802875c:	930a      	str	r3, [sp, #40]	@ 0x28
 802875e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028760:	001a      	movs	r2, r3
 8028762:	0023      	movs	r3, r4
 8028764:	900c      	str	r0, [sp, #48]	@ 0x30
 8028766:	910d      	str	r1, [sp, #52]	@ 0x34
 8028768:	f7da fa30 	bl	8002bcc <__aeabi_dsub>
 802876c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802876e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028770:	9010      	str	r0, [sp, #64]	@ 0x40
 8028772:	9111      	str	r1, [sp, #68]	@ 0x44
 8028774:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028776:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028778:	f7d8 ffb8 	bl	80016ec <__aeabi_dadd>
 802877c:	0002      	movs	r2, r0
 802877e:	000b      	movs	r3, r1
 8028780:	2000      	movs	r0, #0
 8028782:	49c1      	ldr	r1, [pc, #772]	@ (8028a88 <__ieee754_pow+0x7cc>)
 8028784:	f7d9 fb16 	bl	8001db4 <__aeabi_ddiv>
 8028788:	0002      	movs	r2, r0
 802878a:	000b      	movs	r3, r1
 802878c:	9012      	str	r0, [sp, #72]	@ 0x48
 802878e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8028790:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028792:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028794:	f7d9 ff52 	bl	800263c <__aeabi_dmul>
 8028798:	9006      	str	r0, [sp, #24]
 802879a:	9107      	str	r1, [sp, #28]
 802879c:	9b06      	ldr	r3, [sp, #24]
 802879e:	9c07      	ldr	r4, [sp, #28]
 80287a0:	2180      	movs	r1, #128	@ 0x80
 80287a2:	9304      	str	r3, [sp, #16]
 80287a4:	9405      	str	r4, [sp, #20]
 80287a6:	2080      	movs	r0, #128	@ 0x80
 80287a8:	2300      	movs	r3, #0
 80287aa:	2200      	movs	r2, #0
 80287ac:	106d      	asrs	r5, r5, #1
 80287ae:	0589      	lsls	r1, r1, #22
 80287b0:	9304      	str	r3, [sp, #16]
 80287b2:	4329      	orrs	r1, r5
 80287b4:	0300      	lsls	r0, r0, #12
 80287b6:	9b04      	ldr	r3, [sp, #16]
 80287b8:	9c05      	ldr	r4, [sp, #20]
 80287ba:	1809      	adds	r1, r1, r0
 80287bc:	9300      	str	r3, [sp, #0]
 80287be:	9401      	str	r4, [sp, #4]
 80287c0:	04b6      	lsls	r6, r6, #18
 80287c2:	198b      	adds	r3, r1, r6
 80287c4:	9800      	ldr	r0, [sp, #0]
 80287c6:	9901      	ldr	r1, [sp, #4]
 80287c8:	0014      	movs	r4, r2
 80287ca:	001d      	movs	r5, r3
 80287cc:	f7d9 ff36 	bl	800263c <__aeabi_dmul>
 80287d0:	0002      	movs	r2, r0
 80287d2:	000b      	movs	r3, r1
 80287d4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80287d6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80287d8:	f7da f9f8 	bl	8002bcc <__aeabi_dsub>
 80287dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80287de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80287e0:	0006      	movs	r6, r0
 80287e2:	000f      	movs	r7, r1
 80287e4:	0020      	movs	r0, r4
 80287e6:	0029      	movs	r1, r5
 80287e8:	f7da f9f0 	bl	8002bcc <__aeabi_dsub>
 80287ec:	0002      	movs	r2, r0
 80287ee:	000b      	movs	r3, r1
 80287f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80287f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80287f4:	f7da f9ea 	bl	8002bcc <__aeabi_dsub>
 80287f8:	9a00      	ldr	r2, [sp, #0]
 80287fa:	9b01      	ldr	r3, [sp, #4]
 80287fc:	f7d9 ff1e 	bl	800263c <__aeabi_dmul>
 8028800:	0002      	movs	r2, r0
 8028802:	000b      	movs	r3, r1
 8028804:	0030      	movs	r0, r6
 8028806:	0039      	movs	r1, r7
 8028808:	f7da f9e0 	bl	8002bcc <__aeabi_dsub>
 802880c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802880e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028810:	f7d9 ff14 	bl	800263c <__aeabi_dmul>
 8028814:	9a06      	ldr	r2, [sp, #24]
 8028816:	9b07      	ldr	r3, [sp, #28]
 8028818:	900a      	str	r0, [sp, #40]	@ 0x28
 802881a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802881c:	0010      	movs	r0, r2
 802881e:	0019      	movs	r1, r3
 8028820:	f7d9 ff0c 	bl	800263c <__aeabi_dmul>
 8028824:	0006      	movs	r6, r0
 8028826:	000f      	movs	r7, r1
 8028828:	4a9c      	ldr	r2, [pc, #624]	@ (8028a9c <__ieee754_pow+0x7e0>)
 802882a:	4b9d      	ldr	r3, [pc, #628]	@ (8028aa0 <__ieee754_pow+0x7e4>)
 802882c:	f7d9 ff06 	bl	800263c <__aeabi_dmul>
 8028830:	4a9c      	ldr	r2, [pc, #624]	@ (8028aa4 <__ieee754_pow+0x7e8>)
 8028832:	4b9d      	ldr	r3, [pc, #628]	@ (8028aa8 <__ieee754_pow+0x7ec>)
 8028834:	f7d8 ff5a 	bl	80016ec <__aeabi_dadd>
 8028838:	0032      	movs	r2, r6
 802883a:	003b      	movs	r3, r7
 802883c:	f7d9 fefe 	bl	800263c <__aeabi_dmul>
 8028840:	4a9a      	ldr	r2, [pc, #616]	@ (8028aac <__ieee754_pow+0x7f0>)
 8028842:	4b9b      	ldr	r3, [pc, #620]	@ (8028ab0 <__ieee754_pow+0x7f4>)
 8028844:	f7d8 ff52 	bl	80016ec <__aeabi_dadd>
 8028848:	0032      	movs	r2, r6
 802884a:	003b      	movs	r3, r7
 802884c:	f7d9 fef6 	bl	800263c <__aeabi_dmul>
 8028850:	4a98      	ldr	r2, [pc, #608]	@ (8028ab4 <__ieee754_pow+0x7f8>)
 8028852:	4b99      	ldr	r3, [pc, #612]	@ (8028ab8 <__ieee754_pow+0x7fc>)
 8028854:	f7d8 ff4a 	bl	80016ec <__aeabi_dadd>
 8028858:	0032      	movs	r2, r6
 802885a:	003b      	movs	r3, r7
 802885c:	f7d9 feee 	bl	800263c <__aeabi_dmul>
 8028860:	4a96      	ldr	r2, [pc, #600]	@ (8028abc <__ieee754_pow+0x800>)
 8028862:	4b97      	ldr	r3, [pc, #604]	@ (8028ac0 <__ieee754_pow+0x804>)
 8028864:	f7d8 ff42 	bl	80016ec <__aeabi_dadd>
 8028868:	0032      	movs	r2, r6
 802886a:	003b      	movs	r3, r7
 802886c:	f7d9 fee6 	bl	800263c <__aeabi_dmul>
 8028870:	4a94      	ldr	r2, [pc, #592]	@ (8028ac4 <__ieee754_pow+0x808>)
 8028872:	4b95      	ldr	r3, [pc, #596]	@ (8028ac8 <__ieee754_pow+0x80c>)
 8028874:	f7d8 ff3a 	bl	80016ec <__aeabi_dadd>
 8028878:	0032      	movs	r2, r6
 802887a:	0004      	movs	r4, r0
 802887c:	000d      	movs	r5, r1
 802887e:	003b      	movs	r3, r7
 8028880:	0030      	movs	r0, r6
 8028882:	0039      	movs	r1, r7
 8028884:	f7d9 feda 	bl	800263c <__aeabi_dmul>
 8028888:	0002      	movs	r2, r0
 802888a:	000b      	movs	r3, r1
 802888c:	0020      	movs	r0, r4
 802888e:	0029      	movs	r1, r5
 8028890:	f7d9 fed4 	bl	800263c <__aeabi_dmul>
 8028894:	9a00      	ldr	r2, [sp, #0]
 8028896:	9b01      	ldr	r3, [sp, #4]
 8028898:	0004      	movs	r4, r0
 802889a:	000d      	movs	r5, r1
 802889c:	9806      	ldr	r0, [sp, #24]
 802889e:	9907      	ldr	r1, [sp, #28]
 80288a0:	f7d8 ff24 	bl	80016ec <__aeabi_dadd>
 80288a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80288a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80288a8:	f7d9 fec8 	bl	800263c <__aeabi_dmul>
 80288ac:	0022      	movs	r2, r4
 80288ae:	002b      	movs	r3, r5
 80288b0:	f7d8 ff1c 	bl	80016ec <__aeabi_dadd>
 80288b4:	9a00      	ldr	r2, [sp, #0]
 80288b6:	9b01      	ldr	r3, [sp, #4]
 80288b8:	900c      	str	r0, [sp, #48]	@ 0x30
 80288ba:	910d      	str	r1, [sp, #52]	@ 0x34
 80288bc:	0010      	movs	r0, r2
 80288be:	0019      	movs	r1, r3
 80288c0:	f7d9 febc 	bl	800263c <__aeabi_dmul>
 80288c4:	2200      	movs	r2, #0
 80288c6:	4b81      	ldr	r3, [pc, #516]	@ (8028acc <__ieee754_pow+0x810>)
 80288c8:	0004      	movs	r4, r0
 80288ca:	000d      	movs	r5, r1
 80288cc:	f7d8 ff0e 	bl	80016ec <__aeabi_dadd>
 80288d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80288d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80288d4:	f7d8 ff0a 	bl	80016ec <__aeabi_dadd>
 80288d8:	2000      	movs	r0, #0
 80288da:	000f      	movs	r7, r1
 80288dc:	0006      	movs	r6, r0
 80288de:	0002      	movs	r2, r0
 80288e0:	000b      	movs	r3, r1
 80288e2:	9800      	ldr	r0, [sp, #0]
 80288e4:	9901      	ldr	r1, [sp, #4]
 80288e6:	f7d9 fea9 	bl	800263c <__aeabi_dmul>
 80288ea:	2200      	movs	r2, #0
 80288ec:	9000      	str	r0, [sp, #0]
 80288ee:	9101      	str	r1, [sp, #4]
 80288f0:	4b76      	ldr	r3, [pc, #472]	@ (8028acc <__ieee754_pow+0x810>)
 80288f2:	0030      	movs	r0, r6
 80288f4:	0039      	movs	r1, r7
 80288f6:	f7da f969 	bl	8002bcc <__aeabi_dsub>
 80288fa:	0022      	movs	r2, r4
 80288fc:	002b      	movs	r3, r5
 80288fe:	f7da f965 	bl	8002bcc <__aeabi_dsub>
 8028902:	0002      	movs	r2, r0
 8028904:	000b      	movs	r3, r1
 8028906:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028908:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802890a:	f7da f95f 	bl	8002bcc <__aeabi_dsub>
 802890e:	9a06      	ldr	r2, [sp, #24]
 8028910:	9b07      	ldr	r3, [sp, #28]
 8028912:	f7d9 fe93 	bl	800263c <__aeabi_dmul>
 8028916:	0032      	movs	r2, r6
 8028918:	0004      	movs	r4, r0
 802891a:	000d      	movs	r5, r1
 802891c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802891e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028920:	003b      	movs	r3, r7
 8028922:	f7d9 fe8b 	bl	800263c <__aeabi_dmul>
 8028926:	0002      	movs	r2, r0
 8028928:	000b      	movs	r3, r1
 802892a:	0020      	movs	r0, r4
 802892c:	0029      	movs	r1, r5
 802892e:	f7d8 fedd 	bl	80016ec <__aeabi_dadd>
 8028932:	0004      	movs	r4, r0
 8028934:	000d      	movs	r5, r1
 8028936:	0002      	movs	r2, r0
 8028938:	000b      	movs	r3, r1
 802893a:	9800      	ldr	r0, [sp, #0]
 802893c:	9901      	ldr	r1, [sp, #4]
 802893e:	f7d8 fed5 	bl	80016ec <__aeabi_dadd>
 8028942:	22e0      	movs	r2, #224	@ 0xe0
 8028944:	2000      	movs	r0, #0
 8028946:	4b62      	ldr	r3, [pc, #392]	@ (8028ad0 <__ieee754_pow+0x814>)
 8028948:	0612      	lsls	r2, r2, #24
 802894a:	0006      	movs	r6, r0
 802894c:	000f      	movs	r7, r1
 802894e:	f7d9 fe75 	bl	800263c <__aeabi_dmul>
 8028952:	9006      	str	r0, [sp, #24]
 8028954:	9107      	str	r1, [sp, #28]
 8028956:	9a00      	ldr	r2, [sp, #0]
 8028958:	9b01      	ldr	r3, [sp, #4]
 802895a:	0030      	movs	r0, r6
 802895c:	0039      	movs	r1, r7
 802895e:	f7da f935 	bl	8002bcc <__aeabi_dsub>
 8028962:	0002      	movs	r2, r0
 8028964:	000b      	movs	r3, r1
 8028966:	0020      	movs	r0, r4
 8028968:	0029      	movs	r1, r5
 802896a:	f7da f92f 	bl	8002bcc <__aeabi_dsub>
 802896e:	4a59      	ldr	r2, [pc, #356]	@ (8028ad4 <__ieee754_pow+0x818>)
 8028970:	4b57      	ldr	r3, [pc, #348]	@ (8028ad0 <__ieee754_pow+0x814>)
 8028972:	f7d9 fe63 	bl	800263c <__aeabi_dmul>
 8028976:	4a58      	ldr	r2, [pc, #352]	@ (8028ad8 <__ieee754_pow+0x81c>)
 8028978:	0004      	movs	r4, r0
 802897a:	000d      	movs	r5, r1
 802897c:	0030      	movs	r0, r6
 802897e:	0039      	movs	r1, r7
 8028980:	4b56      	ldr	r3, [pc, #344]	@ (8028adc <__ieee754_pow+0x820>)
 8028982:	f7d9 fe5b 	bl	800263c <__aeabi_dmul>
 8028986:	0002      	movs	r2, r0
 8028988:	000b      	movs	r3, r1
 802898a:	0020      	movs	r0, r4
 802898c:	0029      	movs	r1, r5
 802898e:	f7d8 fead 	bl	80016ec <__aeabi_dadd>
 8028992:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028994:	4b52      	ldr	r3, [pc, #328]	@ (8028ae0 <__ieee754_pow+0x824>)
 8028996:	189b      	adds	r3, r3, r2
 8028998:	681a      	ldr	r2, [r3, #0]
 802899a:	685b      	ldr	r3, [r3, #4]
 802899c:	f7d8 fea6 	bl	80016ec <__aeabi_dadd>
 80289a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80289a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80289a4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80289a6:	f7da fd0b 	bl	80033c0 <__aeabi_i2d>
 80289aa:	0004      	movs	r4, r0
 80289ac:	000d      	movs	r5, r1
 80289ae:	9806      	ldr	r0, [sp, #24]
 80289b0:	9907      	ldr	r1, [sp, #28]
 80289b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80289b4:	4b4b      	ldr	r3, [pc, #300]	@ (8028ae4 <__ieee754_pow+0x828>)
 80289b6:	189b      	adds	r3, r3, r2
 80289b8:	681e      	ldr	r6, [r3, #0]
 80289ba:	685f      	ldr	r7, [r3, #4]
 80289bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80289be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80289c0:	f7d8 fe94 	bl	80016ec <__aeabi_dadd>
 80289c4:	0032      	movs	r2, r6
 80289c6:	003b      	movs	r3, r7
 80289c8:	f7d8 fe90 	bl	80016ec <__aeabi_dadd>
 80289cc:	0022      	movs	r2, r4
 80289ce:	002b      	movs	r3, r5
 80289d0:	f7d8 fe8c 	bl	80016ec <__aeabi_dadd>
 80289d4:	2000      	movs	r0, #0
 80289d6:	0022      	movs	r2, r4
 80289d8:	002b      	movs	r3, r5
 80289da:	9000      	str	r0, [sp, #0]
 80289dc:	9101      	str	r1, [sp, #4]
 80289de:	f7da f8f5 	bl	8002bcc <__aeabi_dsub>
 80289e2:	0032      	movs	r2, r6
 80289e4:	003b      	movs	r3, r7
 80289e6:	f7da f8f1 	bl	8002bcc <__aeabi_dsub>
 80289ea:	9a06      	ldr	r2, [sp, #24]
 80289ec:	9b07      	ldr	r3, [sp, #28]
 80289ee:	f7da f8ed 	bl	8002bcc <__aeabi_dsub>
 80289f2:	0002      	movs	r2, r0
 80289f4:	000b      	movs	r3, r1
 80289f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80289f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80289fa:	e61c      	b.n	8028636 <__ieee754_pow+0x37a>
 80289fc:	4a3a      	ldr	r2, [pc, #232]	@ (8028ae8 <__ieee754_pow+0x82c>)
 80289fe:	4b3b      	ldr	r3, [pc, #236]	@ (8028aec <__ieee754_pow+0x830>)
 8028a00:	9802      	ldr	r0, [sp, #8]
 8028a02:	9903      	ldr	r1, [sp, #12]
 8028a04:	f7d8 fe72 	bl	80016ec <__aeabi_dadd>
 8028a08:	0032      	movs	r2, r6
 8028a0a:	003b      	movs	r3, r7
 8028a0c:	9004      	str	r0, [sp, #16]
 8028a0e:	9105      	str	r1, [sp, #20]
 8028a10:	9800      	ldr	r0, [sp, #0]
 8028a12:	9901      	ldr	r1, [sp, #4]
 8028a14:	f7da f8da 	bl	8002bcc <__aeabi_dsub>
 8028a18:	0002      	movs	r2, r0
 8028a1a:	000b      	movs	r3, r1
 8028a1c:	9804      	ldr	r0, [sp, #16]
 8028a1e:	9905      	ldr	r1, [sp, #20]
 8028a20:	f7d7 fd60 	bl	80004e4 <__aeabi_dcmpgt>
 8028a24:	2800      	cmp	r0, #0
 8028a26:	d000      	beq.n	8028a2a <__ieee754_pow+0x76e>
 8028a28:	e647      	b.n	80286ba <__ieee754_pow+0x3fe>
 8028a2a:	2580      	movs	r5, #128	@ 0x80
 8028a2c:	4b30      	ldr	r3, [pc, #192]	@ (8028af0 <__ieee754_pow+0x834>)
 8028a2e:	036d      	lsls	r5, r5, #13
 8028a30:	1524      	asrs	r4, r4, #20
 8028a32:	18e4      	adds	r4, r4, r3
 8028a34:	002b      	movs	r3, r5
 8028a36:	4123      	asrs	r3, r4
 8028a38:	9a06      	ldr	r2, [sp, #24]
 8028a3a:	4912      	ldr	r1, [pc, #72]	@ (8028a84 <__ieee754_pow+0x7c8>)
 8028a3c:	189b      	adds	r3, r3, r2
 8028a3e:	005a      	lsls	r2, r3, #1
 8028a40:	4c14      	ldr	r4, [pc, #80]	@ (8028a94 <__ieee754_pow+0x7d8>)
 8028a42:	0d52      	lsrs	r2, r2, #21
 8028a44:	1852      	adds	r2, r2, r1
 8028a46:	4114      	asrs	r4, r2
 8028a48:	401c      	ands	r4, r3
 8028a4a:	0021      	movs	r1, r4
 8028a4c:	2414      	movs	r4, #20
 8028a4e:	031b      	lsls	r3, r3, #12
 8028a50:	0b1b      	lsrs	r3, r3, #12
 8028a52:	432b      	orrs	r3, r5
 8028a54:	1aa2      	subs	r2, r4, r2
 8028a56:	4113      	asrs	r3, r2
 8028a58:	9300      	str	r3, [sp, #0]
 8028a5a:	9b06      	ldr	r3, [sp, #24]
 8028a5c:	2000      	movs	r0, #0
 8028a5e:	2b00      	cmp	r3, #0
 8028a60:	da02      	bge.n	8028a68 <__ieee754_pow+0x7ac>
 8028a62:	9b00      	ldr	r3, [sp, #0]
 8028a64:	425b      	negs	r3, r3
 8028a66:	9300      	str	r3, [sp, #0]
 8028a68:	0002      	movs	r2, r0
 8028a6a:	000b      	movs	r3, r1
 8028a6c:	0030      	movs	r0, r6
 8028a6e:	0039      	movs	r1, r7
 8028a70:	f7da f8ac 	bl	8002bcc <__aeabi_dsub>
 8028a74:	0006      	movs	r6, r0
 8028a76:	000f      	movs	r7, r1
 8028a78:	e065      	b.n	8028b46 <__ieee754_pow+0x88a>
 8028a7a:	46c0      	nop			@ (mov r8, r8)
 8028a7c:	7ff00000 	.word	0x7ff00000
 8028a80:	43400000 	.word	0x43400000
 8028a84:	fffffc01 	.word	0xfffffc01
 8028a88:	3ff00000 	.word	0x3ff00000
 8028a8c:	0003988e 	.word	0x0003988e
 8028a90:	000bb679 	.word	0x000bb679
 8028a94:	fff00000 	.word	0xfff00000
 8028a98:	0802df38 	.word	0x0802df38
 8028a9c:	4a454eef 	.word	0x4a454eef
 8028aa0:	3fca7e28 	.word	0x3fca7e28
 8028aa4:	93c9db65 	.word	0x93c9db65
 8028aa8:	3fcd864a 	.word	0x3fcd864a
 8028aac:	a91d4101 	.word	0xa91d4101
 8028ab0:	3fd17460 	.word	0x3fd17460
 8028ab4:	518f264d 	.word	0x518f264d
 8028ab8:	3fd55555 	.word	0x3fd55555
 8028abc:	db6fabff 	.word	0xdb6fabff
 8028ac0:	3fdb6db6 	.word	0x3fdb6db6
 8028ac4:	33333303 	.word	0x33333303
 8028ac8:	3fe33333 	.word	0x3fe33333
 8028acc:	40080000 	.word	0x40080000
 8028ad0:	3feec709 	.word	0x3feec709
 8028ad4:	dc3a03fd 	.word	0xdc3a03fd
 8028ad8:	145b01f5 	.word	0x145b01f5
 8028adc:	be3e2fe0 	.word	0xbe3e2fe0
 8028ae0:	0802df18 	.word	0x0802df18
 8028ae4:	0802df28 	.word	0x0802df28
 8028ae8:	652b82fe 	.word	0x652b82fe
 8028aec:	3c971547 	.word	0x3c971547
 8028af0:	fffffc02 	.word	0xfffffc02
 8028af4:	9b01      	ldr	r3, [sp, #4]
 8028af6:	005c      	lsls	r4, r3, #1
 8028af8:	4b72      	ldr	r3, [pc, #456]	@ (8028cc4 <__ieee754_pow+0xa08>)
 8028afa:	0864      	lsrs	r4, r4, #1
 8028afc:	429c      	cmp	r4, r3
 8028afe:	d91c      	bls.n	8028b3a <__ieee754_pow+0x87e>
 8028b00:	4a71      	ldr	r2, [pc, #452]	@ (8028cc8 <__ieee754_pow+0xa0c>)
 8028b02:	9b01      	ldr	r3, [sp, #4]
 8028b04:	189b      	adds	r3, r3, r2
 8028b06:	9a00      	ldr	r2, [sp, #0]
 8028b08:	4313      	orrs	r3, r2
 8028b0a:	d008      	beq.n	8028b1e <__ieee754_pow+0x862>
 8028b0c:	9808      	ldr	r0, [sp, #32]
 8028b0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028b10:	2300      	movs	r3, #0
 8028b12:	2200      	movs	r2, #0
 8028b14:	f7d7 fcd2 	bl	80004bc <__aeabi_dcmplt>
 8028b18:	1e43      	subs	r3, r0, #1
 8028b1a:	4198      	sbcs	r0, r3
 8028b1c:	e4fc      	b.n	8028518 <__ieee754_pow+0x25c>
 8028b1e:	0032      	movs	r2, r6
 8028b20:	9800      	ldr	r0, [sp, #0]
 8028b22:	9901      	ldr	r1, [sp, #4]
 8028b24:	003b      	movs	r3, r7
 8028b26:	f7da f851 	bl	8002bcc <__aeabi_dsub>
 8028b2a:	9a02      	ldr	r2, [sp, #8]
 8028b2c:	9b03      	ldr	r3, [sp, #12]
 8028b2e:	f7d7 fce3 	bl	80004f8 <__aeabi_dcmpge>
 8028b32:	2800      	cmp	r0, #0
 8028b34:	d1ea      	bne.n	8028b0c <__ieee754_pow+0x850>
 8028b36:	4c65      	ldr	r4, [pc, #404]	@ (8028ccc <__ieee754_pow+0xa10>)
 8028b38:	e777      	b.n	8028a2a <__ieee754_pow+0x76e>
 8028b3a:	9a04      	ldr	r2, [sp, #16]
 8028b3c:	4b64      	ldr	r3, [pc, #400]	@ (8028cd0 <__ieee754_pow+0xa14>)
 8028b3e:	9200      	str	r2, [sp, #0]
 8028b40:	429c      	cmp	r4, r3
 8028b42:	d900      	bls.n	8028b46 <__ieee754_pow+0x88a>
 8028b44:	e771      	b.n	8028a2a <__ieee754_pow+0x76e>
 8028b46:	9a02      	ldr	r2, [sp, #8]
 8028b48:	9b03      	ldr	r3, [sp, #12]
 8028b4a:	0030      	movs	r0, r6
 8028b4c:	0039      	movs	r1, r7
 8028b4e:	f7d8 fdcd 	bl	80016ec <__aeabi_dadd>
 8028b52:	2000      	movs	r0, #0
 8028b54:	2200      	movs	r2, #0
 8028b56:	4b5f      	ldr	r3, [pc, #380]	@ (8028cd4 <__ieee754_pow+0xa18>)
 8028b58:	9004      	str	r0, [sp, #16]
 8028b5a:	9105      	str	r1, [sp, #20]
 8028b5c:	f7d9 fd6e 	bl	800263c <__aeabi_dmul>
 8028b60:	0032      	movs	r2, r6
 8028b62:	003b      	movs	r3, r7
 8028b64:	9006      	str	r0, [sp, #24]
 8028b66:	9107      	str	r1, [sp, #28]
 8028b68:	9804      	ldr	r0, [sp, #16]
 8028b6a:	9905      	ldr	r1, [sp, #20]
 8028b6c:	f7da f82e 	bl	8002bcc <__aeabi_dsub>
 8028b70:	0002      	movs	r2, r0
 8028b72:	000b      	movs	r3, r1
 8028b74:	9802      	ldr	r0, [sp, #8]
 8028b76:	9903      	ldr	r1, [sp, #12]
 8028b78:	f7da f828 	bl	8002bcc <__aeabi_dsub>
 8028b7c:	4a56      	ldr	r2, [pc, #344]	@ (8028cd8 <__ieee754_pow+0xa1c>)
 8028b7e:	4b57      	ldr	r3, [pc, #348]	@ (8028cdc <__ieee754_pow+0xa20>)
 8028b80:	f7d9 fd5c 	bl	800263c <__aeabi_dmul>
 8028b84:	4a56      	ldr	r2, [pc, #344]	@ (8028ce0 <__ieee754_pow+0xa24>)
 8028b86:	0004      	movs	r4, r0
 8028b88:	000d      	movs	r5, r1
 8028b8a:	9804      	ldr	r0, [sp, #16]
 8028b8c:	9905      	ldr	r1, [sp, #20]
 8028b8e:	4b55      	ldr	r3, [pc, #340]	@ (8028ce4 <__ieee754_pow+0xa28>)
 8028b90:	f7d9 fd54 	bl	800263c <__aeabi_dmul>
 8028b94:	0002      	movs	r2, r0
 8028b96:	000b      	movs	r3, r1
 8028b98:	0020      	movs	r0, r4
 8028b9a:	0029      	movs	r1, r5
 8028b9c:	f7d8 fda6 	bl	80016ec <__aeabi_dadd>
 8028ba0:	0004      	movs	r4, r0
 8028ba2:	000d      	movs	r5, r1
 8028ba4:	0002      	movs	r2, r0
 8028ba6:	000b      	movs	r3, r1
 8028ba8:	9806      	ldr	r0, [sp, #24]
 8028baa:	9907      	ldr	r1, [sp, #28]
 8028bac:	f7d8 fd9e 	bl	80016ec <__aeabi_dadd>
 8028bb0:	9a06      	ldr	r2, [sp, #24]
 8028bb2:	9b07      	ldr	r3, [sp, #28]
 8028bb4:	0006      	movs	r6, r0
 8028bb6:	000f      	movs	r7, r1
 8028bb8:	f7da f808 	bl	8002bcc <__aeabi_dsub>
 8028bbc:	0002      	movs	r2, r0
 8028bbe:	000b      	movs	r3, r1
 8028bc0:	0020      	movs	r0, r4
 8028bc2:	0029      	movs	r1, r5
 8028bc4:	f7da f802 	bl	8002bcc <__aeabi_dsub>
 8028bc8:	0032      	movs	r2, r6
 8028bca:	9002      	str	r0, [sp, #8]
 8028bcc:	9103      	str	r1, [sp, #12]
 8028bce:	003b      	movs	r3, r7
 8028bd0:	0030      	movs	r0, r6
 8028bd2:	0039      	movs	r1, r7
 8028bd4:	f7d9 fd32 	bl	800263c <__aeabi_dmul>
 8028bd8:	0004      	movs	r4, r0
 8028bda:	000d      	movs	r5, r1
 8028bdc:	4a42      	ldr	r2, [pc, #264]	@ (8028ce8 <__ieee754_pow+0xa2c>)
 8028bde:	4b43      	ldr	r3, [pc, #268]	@ (8028cec <__ieee754_pow+0xa30>)
 8028be0:	f7d9 fd2c 	bl	800263c <__aeabi_dmul>
 8028be4:	4a42      	ldr	r2, [pc, #264]	@ (8028cf0 <__ieee754_pow+0xa34>)
 8028be6:	4b43      	ldr	r3, [pc, #268]	@ (8028cf4 <__ieee754_pow+0xa38>)
 8028be8:	f7d9 fff0 	bl	8002bcc <__aeabi_dsub>
 8028bec:	0022      	movs	r2, r4
 8028bee:	002b      	movs	r3, r5
 8028bf0:	f7d9 fd24 	bl	800263c <__aeabi_dmul>
 8028bf4:	4a40      	ldr	r2, [pc, #256]	@ (8028cf8 <__ieee754_pow+0xa3c>)
 8028bf6:	4b41      	ldr	r3, [pc, #260]	@ (8028cfc <__ieee754_pow+0xa40>)
 8028bf8:	f7d8 fd78 	bl	80016ec <__aeabi_dadd>
 8028bfc:	0022      	movs	r2, r4
 8028bfe:	002b      	movs	r3, r5
 8028c00:	f7d9 fd1c 	bl	800263c <__aeabi_dmul>
 8028c04:	4a3e      	ldr	r2, [pc, #248]	@ (8028d00 <__ieee754_pow+0xa44>)
 8028c06:	4b3f      	ldr	r3, [pc, #252]	@ (8028d04 <__ieee754_pow+0xa48>)
 8028c08:	f7d9 ffe0 	bl	8002bcc <__aeabi_dsub>
 8028c0c:	0022      	movs	r2, r4
 8028c0e:	002b      	movs	r3, r5
 8028c10:	f7d9 fd14 	bl	800263c <__aeabi_dmul>
 8028c14:	4a3c      	ldr	r2, [pc, #240]	@ (8028d08 <__ieee754_pow+0xa4c>)
 8028c16:	4b3d      	ldr	r3, [pc, #244]	@ (8028d0c <__ieee754_pow+0xa50>)
 8028c18:	f7d8 fd68 	bl	80016ec <__aeabi_dadd>
 8028c1c:	0022      	movs	r2, r4
 8028c1e:	002b      	movs	r3, r5
 8028c20:	f7d9 fd0c 	bl	800263c <__aeabi_dmul>
 8028c24:	0002      	movs	r2, r0
 8028c26:	000b      	movs	r3, r1
 8028c28:	0030      	movs	r0, r6
 8028c2a:	0039      	movs	r1, r7
 8028c2c:	f7d9 ffce 	bl	8002bcc <__aeabi_dsub>
 8028c30:	0004      	movs	r4, r0
 8028c32:	000d      	movs	r5, r1
 8028c34:	0002      	movs	r2, r0
 8028c36:	000b      	movs	r3, r1
 8028c38:	0030      	movs	r0, r6
 8028c3a:	0039      	movs	r1, r7
 8028c3c:	f7d9 fcfe 	bl	800263c <__aeabi_dmul>
 8028c40:	2380      	movs	r3, #128	@ 0x80
 8028c42:	9004      	str	r0, [sp, #16]
 8028c44:	9105      	str	r1, [sp, #20]
 8028c46:	2200      	movs	r2, #0
 8028c48:	0020      	movs	r0, r4
 8028c4a:	0029      	movs	r1, r5
 8028c4c:	05db      	lsls	r3, r3, #23
 8028c4e:	f7d9 ffbd 	bl	8002bcc <__aeabi_dsub>
 8028c52:	0002      	movs	r2, r0
 8028c54:	000b      	movs	r3, r1
 8028c56:	9804      	ldr	r0, [sp, #16]
 8028c58:	9905      	ldr	r1, [sp, #20]
 8028c5a:	f7d9 f8ab 	bl	8001db4 <__aeabi_ddiv>
 8028c5e:	9a02      	ldr	r2, [sp, #8]
 8028c60:	9b03      	ldr	r3, [sp, #12]
 8028c62:	0004      	movs	r4, r0
 8028c64:	000d      	movs	r5, r1
 8028c66:	0030      	movs	r0, r6
 8028c68:	0039      	movs	r1, r7
 8028c6a:	f7d9 fce7 	bl	800263c <__aeabi_dmul>
 8028c6e:	9a02      	ldr	r2, [sp, #8]
 8028c70:	9b03      	ldr	r3, [sp, #12]
 8028c72:	f7d8 fd3b 	bl	80016ec <__aeabi_dadd>
 8028c76:	0002      	movs	r2, r0
 8028c78:	000b      	movs	r3, r1
 8028c7a:	0020      	movs	r0, r4
 8028c7c:	0029      	movs	r1, r5
 8028c7e:	f7d9 ffa5 	bl	8002bcc <__aeabi_dsub>
 8028c82:	0032      	movs	r2, r6
 8028c84:	003b      	movs	r3, r7
 8028c86:	f7d9 ffa1 	bl	8002bcc <__aeabi_dsub>
 8028c8a:	0002      	movs	r2, r0
 8028c8c:	000b      	movs	r3, r1
 8028c8e:	2000      	movs	r0, #0
 8028c90:	491f      	ldr	r1, [pc, #124]	@ (8028d10 <__ieee754_pow+0xa54>)
 8028c92:	f7d9 ff9b 	bl	8002bcc <__aeabi_dsub>
 8028c96:	9b00      	ldr	r3, [sp, #0]
 8028c98:	051b      	lsls	r3, r3, #20
 8028c9a:	185b      	adds	r3, r3, r1
 8028c9c:	151a      	asrs	r2, r3, #20
 8028c9e:	2a00      	cmp	r2, #0
 8028ca0:	dc06      	bgt.n	8028cb0 <__ieee754_pow+0x9f4>
 8028ca2:	9a00      	ldr	r2, [sp, #0]
 8028ca4:	f000 f92a 	bl	8028efc <scalbn>
 8028ca8:	9a08      	ldr	r2, [sp, #32]
 8028caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028cac:	f7ff fbee 	bl	802848c <__ieee754_pow+0x1d0>
 8028cb0:	0019      	movs	r1, r3
 8028cb2:	e7f9      	b.n	8028ca8 <__ieee754_pow+0x9ec>
 8028cb4:	2300      	movs	r3, #0
 8028cb6:	4c16      	ldr	r4, [pc, #88]	@ (8028d10 <__ieee754_pow+0xa54>)
 8028cb8:	f7ff fbcb 	bl	8028452 <__ieee754_pow+0x196>
 8028cbc:	2300      	movs	r3, #0
 8028cbe:	2400      	movs	r4, #0
 8028cc0:	f7ff fbc7 	bl	8028452 <__ieee754_pow+0x196>
 8028cc4:	4090cbff 	.word	0x4090cbff
 8028cc8:	3f6f3400 	.word	0x3f6f3400
 8028ccc:	4090cc00 	.word	0x4090cc00
 8028cd0:	3fe00000 	.word	0x3fe00000
 8028cd4:	3fe62e43 	.word	0x3fe62e43
 8028cd8:	fefa39ef 	.word	0xfefa39ef
 8028cdc:	3fe62e42 	.word	0x3fe62e42
 8028ce0:	0ca86c39 	.word	0x0ca86c39
 8028ce4:	be205c61 	.word	0xbe205c61
 8028ce8:	72bea4d0 	.word	0x72bea4d0
 8028cec:	3e663769 	.word	0x3e663769
 8028cf0:	c5d26bf1 	.word	0xc5d26bf1
 8028cf4:	3ebbbd41 	.word	0x3ebbbd41
 8028cf8:	af25de2c 	.word	0xaf25de2c
 8028cfc:	3f11566a 	.word	0x3f11566a
 8028d00:	16bebd93 	.word	0x16bebd93
 8028d04:	3f66c16c 	.word	0x3f66c16c
 8028d08:	5555553e 	.word	0x5555553e
 8028d0c:	3fc55555 	.word	0x3fc55555
 8028d10:	3ff00000 	.word	0x3ff00000

08028d14 <fabs>:
 8028d14:	0049      	lsls	r1, r1, #1
 8028d16:	084b      	lsrs	r3, r1, #1
 8028d18:	0019      	movs	r1, r3
 8028d1a:	4770      	bx	lr

08028d1c <__ieee754_expf>:
 8028d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028d1e:	21ff      	movs	r1, #255	@ 0xff
 8028d20:	0043      	lsls	r3, r0, #1
 8028d22:	1c04      	adds	r4, r0, #0
 8028d24:	085b      	lsrs	r3, r3, #1
 8028d26:	05c9      	lsls	r1, r1, #23
 8028d28:	428b      	cmp	r3, r1
 8028d2a:	d904      	bls.n	8028d36 <__ieee754_expf+0x1a>
 8028d2c:	1c01      	adds	r1, r0, #0
 8028d2e:	1c20      	adds	r0, r4, #0
 8028d30:	f7d7 fdc6 	bl	80008c0 <__aeabi_fadd>
 8028d34:	e00d      	b.n	8028d52 <__ieee754_expf+0x36>
 8028d36:	0fc6      	lsrs	r6, r0, #31
 8028d38:	428b      	cmp	r3, r1
 8028d3a:	d104      	bne.n	8028d46 <__ieee754_expf+0x2a>
 8028d3c:	2e00      	cmp	r6, #0
 8028d3e:	d000      	beq.n	8028d42 <__ieee754_expf+0x26>
 8028d40:	e0ba      	b.n	8028eb8 <__ieee754_expf+0x19c>
 8028d42:	1c20      	adds	r0, r4, #0
 8028d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028d46:	495d      	ldr	r1, [pc, #372]	@ (8028ebc <__ieee754_expf+0x1a0>)
 8028d48:	4288      	cmp	r0, r1
 8028d4a:	dd04      	ble.n	8028d56 <__ieee754_expf+0x3a>
 8028d4c:	2000      	movs	r0, #0
 8028d4e:	f000 f98a 	bl	8029066 <__math_oflowf>
 8028d52:	1c04      	adds	r4, r0, #0
 8028d54:	e7f5      	b.n	8028d42 <__ieee754_expf+0x26>
 8028d56:	2800      	cmp	r0, #0
 8028d58:	da06      	bge.n	8028d68 <__ieee754_expf+0x4c>
 8028d5a:	4a59      	ldr	r2, [pc, #356]	@ (8028ec0 <__ieee754_expf+0x1a4>)
 8028d5c:	4293      	cmp	r3, r2
 8028d5e:	d903      	bls.n	8028d68 <__ieee754_expf+0x4c>
 8028d60:	2000      	movs	r0, #0
 8028d62:	f000 f97a 	bl	802905a <__math_uflowf>
 8028d66:	e7f4      	b.n	8028d52 <__ieee754_expf+0x36>
 8028d68:	4a56      	ldr	r2, [pc, #344]	@ (8028ec4 <__ieee754_expf+0x1a8>)
 8028d6a:	4293      	cmp	r3, r2
 8028d6c:	d96e      	bls.n	8028e4c <__ieee754_expf+0x130>
 8028d6e:	4a56      	ldr	r2, [pc, #344]	@ (8028ec8 <__ieee754_expf+0x1ac>)
 8028d70:	00b5      	lsls	r5, r6, #2
 8028d72:	4293      	cmp	r3, r2
 8028d74:	d84e      	bhi.n	8028e14 <__ieee754_expf+0xf8>
 8028d76:	4b55      	ldr	r3, [pc, #340]	@ (8028ecc <__ieee754_expf+0x1b0>)
 8028d78:	1c20      	adds	r0, r4, #0
 8028d7a:	5959      	ldr	r1, [r3, r5]
 8028d7c:	f7d8 fa4e 	bl	800121c <__aeabi_fsub>
 8028d80:	4b53      	ldr	r3, [pc, #332]	@ (8028ed0 <__ieee754_expf+0x1b4>)
 8028d82:	1c07      	adds	r7, r0, #0
 8028d84:	595b      	ldr	r3, [r3, r5]
 8028d86:	2501      	movs	r5, #1
 8028d88:	1bad      	subs	r5, r5, r6
 8028d8a:	9300      	str	r3, [sp, #0]
 8028d8c:	1bad      	subs	r5, r5, r6
 8028d8e:	9900      	ldr	r1, [sp, #0]
 8028d90:	1c38      	adds	r0, r7, #0
 8028d92:	f7d8 fa43 	bl	800121c <__aeabi_fsub>
 8028d96:	1c04      	adds	r4, r0, #0
 8028d98:	1c21      	adds	r1, r4, #0
 8028d9a:	1c20      	adds	r0, r4, #0
 8028d9c:	f7d8 f900 	bl	8000fa0 <__aeabi_fmul>
 8028da0:	494c      	ldr	r1, [pc, #304]	@ (8028ed4 <__ieee754_expf+0x1b8>)
 8028da2:	1c06      	adds	r6, r0, #0
 8028da4:	f7d8 f8fc 	bl	8000fa0 <__aeabi_fmul>
 8028da8:	494b      	ldr	r1, [pc, #300]	@ (8028ed8 <__ieee754_expf+0x1bc>)
 8028daa:	f7d8 fa37 	bl	800121c <__aeabi_fsub>
 8028dae:	1c31      	adds	r1, r6, #0
 8028db0:	f7d8 f8f6 	bl	8000fa0 <__aeabi_fmul>
 8028db4:	4949      	ldr	r1, [pc, #292]	@ (8028edc <__ieee754_expf+0x1c0>)
 8028db6:	f7d7 fd83 	bl	80008c0 <__aeabi_fadd>
 8028dba:	1c31      	adds	r1, r6, #0
 8028dbc:	f7d8 f8f0 	bl	8000fa0 <__aeabi_fmul>
 8028dc0:	4947      	ldr	r1, [pc, #284]	@ (8028ee0 <__ieee754_expf+0x1c4>)
 8028dc2:	f7d8 fa2b 	bl	800121c <__aeabi_fsub>
 8028dc6:	1c31      	adds	r1, r6, #0
 8028dc8:	f7d8 f8ea 	bl	8000fa0 <__aeabi_fmul>
 8028dcc:	4945      	ldr	r1, [pc, #276]	@ (8028ee4 <__ieee754_expf+0x1c8>)
 8028dce:	f7d7 fd77 	bl	80008c0 <__aeabi_fadd>
 8028dd2:	1c31      	adds	r1, r6, #0
 8028dd4:	f7d8 f8e4 	bl	8000fa0 <__aeabi_fmul>
 8028dd8:	1c01      	adds	r1, r0, #0
 8028dda:	1c20      	adds	r0, r4, #0
 8028ddc:	f7d8 fa1e 	bl	800121c <__aeabi_fsub>
 8028de0:	1c01      	adds	r1, r0, #0
 8028de2:	1c06      	adds	r6, r0, #0
 8028de4:	1c20      	adds	r0, r4, #0
 8028de6:	f7d8 f8db 	bl	8000fa0 <__aeabi_fmul>
 8028dea:	9001      	str	r0, [sp, #4]
 8028dec:	2d00      	cmp	r5, #0
 8028dee:	d140      	bne.n	8028e72 <__ieee754_expf+0x156>
 8028df0:	2180      	movs	r1, #128	@ 0x80
 8028df2:	1c30      	adds	r0, r6, #0
 8028df4:	05c9      	lsls	r1, r1, #23
 8028df6:	f7d8 fa11 	bl	800121c <__aeabi_fsub>
 8028dfa:	1c01      	adds	r1, r0, #0
 8028dfc:	9801      	ldr	r0, [sp, #4]
 8028dfe:	f7d7 fee9 	bl	8000bd4 <__aeabi_fdiv>
 8028e02:	1c21      	adds	r1, r4, #0
 8028e04:	f7d8 fa0a 	bl	800121c <__aeabi_fsub>
 8028e08:	1c01      	adds	r1, r0, #0
 8028e0a:	20fe      	movs	r0, #254	@ 0xfe
 8028e0c:	0580      	lsls	r0, r0, #22
 8028e0e:	f7d8 fa05 	bl	800121c <__aeabi_fsub>
 8028e12:	e79e      	b.n	8028d52 <__ieee754_expf+0x36>
 8028e14:	4934      	ldr	r1, [pc, #208]	@ (8028ee8 <__ieee754_expf+0x1cc>)
 8028e16:	1c20      	adds	r0, r4, #0
 8028e18:	f7d8 f8c2 	bl	8000fa0 <__aeabi_fmul>
 8028e1c:	4b33      	ldr	r3, [pc, #204]	@ (8028eec <__ieee754_expf+0x1d0>)
 8028e1e:	5959      	ldr	r1, [r3, r5]
 8028e20:	f7d7 fd4e 	bl	80008c0 <__aeabi_fadd>
 8028e24:	f7d8 fbb4 	bl	8001590 <__aeabi_f2iz>
 8028e28:	0005      	movs	r5, r0
 8028e2a:	f7d8 fbd1 	bl	80015d0 <__aeabi_i2f>
 8028e2e:	4930      	ldr	r1, [pc, #192]	@ (8028ef0 <__ieee754_expf+0x1d4>)
 8028e30:	1c06      	adds	r6, r0, #0
 8028e32:	f7d8 f8b5 	bl	8000fa0 <__aeabi_fmul>
 8028e36:	1c01      	adds	r1, r0, #0
 8028e38:	1c20      	adds	r0, r4, #0
 8028e3a:	f7d8 f9ef 	bl	800121c <__aeabi_fsub>
 8028e3e:	492d      	ldr	r1, [pc, #180]	@ (8028ef4 <__ieee754_expf+0x1d8>)
 8028e40:	1c07      	adds	r7, r0, #0
 8028e42:	1c30      	adds	r0, r6, #0
 8028e44:	f7d8 f8ac 	bl	8000fa0 <__aeabi_fmul>
 8028e48:	9000      	str	r0, [sp, #0]
 8028e4a:	e7a0      	b.n	8028d8e <__ieee754_expf+0x72>
 8028e4c:	22d0      	movs	r2, #208	@ 0xd0
 8028e4e:	0592      	lsls	r2, r2, #22
 8028e50:	4293      	cmp	r3, r2
 8028e52:	d20c      	bcs.n	8028e6e <__ieee754_expf+0x152>
 8028e54:	4928      	ldr	r1, [pc, #160]	@ (8028ef8 <__ieee754_expf+0x1dc>)
 8028e56:	1c20      	adds	r0, r4, #0
 8028e58:	f7d7 fd32 	bl	80008c0 <__aeabi_fadd>
 8028e5c:	21fe      	movs	r1, #254	@ 0xfe
 8028e5e:	0589      	lsls	r1, r1, #22
 8028e60:	f7d7 fb7a 	bl	8000558 <__aeabi_fcmpgt>
 8028e64:	1e05      	subs	r5, r0, #0
 8028e66:	d097      	beq.n	8028d98 <__ieee754_expf+0x7c>
 8028e68:	21fe      	movs	r1, #254	@ 0xfe
 8028e6a:	0589      	lsls	r1, r1, #22
 8028e6c:	e75f      	b.n	8028d2e <__ieee754_expf+0x12>
 8028e6e:	2500      	movs	r5, #0
 8028e70:	e792      	b.n	8028d98 <__ieee754_expf+0x7c>
 8028e72:	2080      	movs	r0, #128	@ 0x80
 8028e74:	1c31      	adds	r1, r6, #0
 8028e76:	05c0      	lsls	r0, r0, #23
 8028e78:	f7d8 f9d0 	bl	800121c <__aeabi_fsub>
 8028e7c:	1c01      	adds	r1, r0, #0
 8028e7e:	9801      	ldr	r0, [sp, #4]
 8028e80:	f7d7 fea8 	bl	8000bd4 <__aeabi_fdiv>
 8028e84:	1c01      	adds	r1, r0, #0
 8028e86:	9800      	ldr	r0, [sp, #0]
 8028e88:	f7d8 f9c8 	bl	800121c <__aeabi_fsub>
 8028e8c:	1c39      	adds	r1, r7, #0
 8028e8e:	f7d8 f9c5 	bl	800121c <__aeabi_fsub>
 8028e92:	1c01      	adds	r1, r0, #0
 8028e94:	20fe      	movs	r0, #254	@ 0xfe
 8028e96:	0580      	lsls	r0, r0, #22
 8028e98:	f7d8 f9c0 	bl	800121c <__aeabi_fsub>
 8028e9c:	002b      	movs	r3, r5
 8028e9e:	337d      	adds	r3, #125	@ 0x7d
 8028ea0:	db02      	blt.n	8028ea8 <__ieee754_expf+0x18c>
 8028ea2:	05ec      	lsls	r4, r5, #23
 8028ea4:	1824      	adds	r4, r4, r0
 8028ea6:	e74c      	b.n	8028d42 <__ieee754_expf+0x26>
 8028ea8:	21d8      	movs	r1, #216	@ 0xd8
 8028eaa:	3564      	adds	r5, #100	@ 0x64
 8028eac:	05ed      	lsls	r5, r5, #23
 8028eae:	1828      	adds	r0, r5, r0
 8028eb0:	0509      	lsls	r1, r1, #20
 8028eb2:	f7d8 f875 	bl	8000fa0 <__aeabi_fmul>
 8028eb6:	e74c      	b.n	8028d52 <__ieee754_expf+0x36>
 8028eb8:	2400      	movs	r4, #0
 8028eba:	e742      	b.n	8028d42 <__ieee754_expf+0x26>
 8028ebc:	42b17217 	.word	0x42b17217
 8028ec0:	42cff1b5 	.word	0x42cff1b5
 8028ec4:	3eb17218 	.word	0x3eb17218
 8028ec8:	3f851591 	.word	0x3f851591
 8028ecc:	0802df50 	.word	0x0802df50
 8028ed0:	0802df48 	.word	0x0802df48
 8028ed4:	3331bb4c 	.word	0x3331bb4c
 8028ed8:	35ddea0e 	.word	0x35ddea0e
 8028edc:	388ab355 	.word	0x388ab355
 8028ee0:	3b360b61 	.word	0x3b360b61
 8028ee4:	3e2aaaab 	.word	0x3e2aaaab
 8028ee8:	3fb8aa3b 	.word	0x3fb8aa3b
 8028eec:	0802df58 	.word	0x0802df58
 8028ef0:	3f317180 	.word	0x3f317180
 8028ef4:	3717f7d1 	.word	0x3717f7d1
 8028ef8:	7149f2ca 	.word	0x7149f2ca

08028efc <scalbn>:
 8028efc:	004b      	lsls	r3, r1, #1
 8028efe:	b570      	push	{r4, r5, r6, lr}
 8028f00:	0d5b      	lsrs	r3, r3, #21
 8028f02:	0014      	movs	r4, r2
 8028f04:	000d      	movs	r5, r1
 8028f06:	2b00      	cmp	r3, #0
 8028f08:	d10f      	bne.n	8028f2a <scalbn+0x2e>
 8028f0a:	004b      	lsls	r3, r1, #1
 8028f0c:	085b      	lsrs	r3, r3, #1
 8028f0e:	4303      	orrs	r3, r0
 8028f10:	d012      	beq.n	8028f38 <scalbn+0x3c>
 8028f12:	4b23      	ldr	r3, [pc, #140]	@ (8028fa0 <scalbn+0xa4>)
 8028f14:	2200      	movs	r2, #0
 8028f16:	f7d9 fb91 	bl	800263c <__aeabi_dmul>
 8028f1a:	4b22      	ldr	r3, [pc, #136]	@ (8028fa4 <scalbn+0xa8>)
 8028f1c:	429c      	cmp	r4, r3
 8028f1e:	da0c      	bge.n	8028f3a <scalbn+0x3e>
 8028f20:	4a21      	ldr	r2, [pc, #132]	@ (8028fa8 <scalbn+0xac>)
 8028f22:	4b22      	ldr	r3, [pc, #136]	@ (8028fac <scalbn+0xb0>)
 8028f24:	f7d9 fb8a 	bl	800263c <__aeabi_dmul>
 8028f28:	e006      	b.n	8028f38 <scalbn+0x3c>
 8028f2a:	4a21      	ldr	r2, [pc, #132]	@ (8028fb0 <scalbn+0xb4>)
 8028f2c:	4293      	cmp	r3, r2
 8028f2e:	d108      	bne.n	8028f42 <scalbn+0x46>
 8028f30:	0002      	movs	r2, r0
 8028f32:	000b      	movs	r3, r1
 8028f34:	f7d8 fbda 	bl	80016ec <__aeabi_dadd>
 8028f38:	bd70      	pop	{r4, r5, r6, pc}
 8028f3a:	000d      	movs	r5, r1
 8028f3c:	004b      	lsls	r3, r1, #1
 8028f3e:	0d5b      	lsrs	r3, r3, #21
 8028f40:	3b36      	subs	r3, #54	@ 0x36
 8028f42:	4a1c      	ldr	r2, [pc, #112]	@ (8028fb4 <scalbn+0xb8>)
 8028f44:	4294      	cmp	r4, r2
 8028f46:	dd0a      	ble.n	8028f5e <scalbn+0x62>
 8028f48:	4c1b      	ldr	r4, [pc, #108]	@ (8028fb8 <scalbn+0xbc>)
 8028f4a:	4d1c      	ldr	r5, [pc, #112]	@ (8028fbc <scalbn+0xc0>)
 8028f4c:	2900      	cmp	r1, #0
 8028f4e:	da01      	bge.n	8028f54 <scalbn+0x58>
 8028f50:	4c19      	ldr	r4, [pc, #100]	@ (8028fb8 <scalbn+0xbc>)
 8028f52:	4d1b      	ldr	r5, [pc, #108]	@ (8028fc0 <scalbn+0xc4>)
 8028f54:	4a18      	ldr	r2, [pc, #96]	@ (8028fb8 <scalbn+0xbc>)
 8028f56:	4b19      	ldr	r3, [pc, #100]	@ (8028fbc <scalbn+0xc0>)
 8028f58:	0020      	movs	r0, r4
 8028f5a:	0029      	movs	r1, r5
 8028f5c:	e7e2      	b.n	8028f24 <scalbn+0x28>
 8028f5e:	18e2      	adds	r2, r4, r3
 8028f60:	4b18      	ldr	r3, [pc, #96]	@ (8028fc4 <scalbn+0xc8>)
 8028f62:	429a      	cmp	r2, r3
 8028f64:	dcf0      	bgt.n	8028f48 <scalbn+0x4c>
 8028f66:	2a00      	cmp	r2, #0
 8028f68:	dd05      	ble.n	8028f76 <scalbn+0x7a>
 8028f6a:	4b17      	ldr	r3, [pc, #92]	@ (8028fc8 <scalbn+0xcc>)
 8028f6c:	0512      	lsls	r2, r2, #20
 8028f6e:	402b      	ands	r3, r5
 8028f70:	431a      	orrs	r2, r3
 8028f72:	0011      	movs	r1, r2
 8028f74:	e7e0      	b.n	8028f38 <scalbn+0x3c>
 8028f76:	0013      	movs	r3, r2
 8028f78:	3335      	adds	r3, #53	@ 0x35
 8028f7a:	da08      	bge.n	8028f8e <scalbn+0x92>
 8028f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8028fa8 <scalbn+0xac>)
 8028f7e:	4d0b      	ldr	r5, [pc, #44]	@ (8028fac <scalbn+0xb0>)
 8028f80:	2900      	cmp	r1, #0
 8028f82:	da01      	bge.n	8028f88 <scalbn+0x8c>
 8028f84:	4c08      	ldr	r4, [pc, #32]	@ (8028fa8 <scalbn+0xac>)
 8028f86:	4d11      	ldr	r5, [pc, #68]	@ (8028fcc <scalbn+0xd0>)
 8028f88:	4a07      	ldr	r2, [pc, #28]	@ (8028fa8 <scalbn+0xac>)
 8028f8a:	4b08      	ldr	r3, [pc, #32]	@ (8028fac <scalbn+0xb0>)
 8028f8c:	e7e4      	b.n	8028f58 <scalbn+0x5c>
 8028f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8028fc8 <scalbn+0xcc>)
 8028f90:	3236      	adds	r2, #54	@ 0x36
 8028f92:	401d      	ands	r5, r3
 8028f94:	0512      	lsls	r2, r2, #20
 8028f96:	432a      	orrs	r2, r5
 8028f98:	0011      	movs	r1, r2
 8028f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8028fd0 <scalbn+0xd4>)
 8028f9c:	2200      	movs	r2, #0
 8028f9e:	e7c1      	b.n	8028f24 <scalbn+0x28>
 8028fa0:	43500000 	.word	0x43500000
 8028fa4:	ffff3cb0 	.word	0xffff3cb0
 8028fa8:	c2f8f359 	.word	0xc2f8f359
 8028fac:	01a56e1f 	.word	0x01a56e1f
 8028fb0:	000007ff 	.word	0x000007ff
 8028fb4:	0000c350 	.word	0x0000c350
 8028fb8:	8800759c 	.word	0x8800759c
 8028fbc:	7e37e43c 	.word	0x7e37e43c
 8028fc0:	fe37e43c 	.word	0xfe37e43c
 8028fc4:	000007fe 	.word	0x000007fe
 8028fc8:	800fffff 	.word	0x800fffff
 8028fcc:	81a56e1f 	.word	0x81a56e1f
 8028fd0:	3c900000 	.word	0x3c900000

08028fd4 <with_errno>:
 8028fd4:	b570      	push	{r4, r5, r6, lr}
 8028fd6:	000d      	movs	r5, r1
 8028fd8:	0016      	movs	r6, r2
 8028fda:	0004      	movs	r4, r0
 8028fdc:	f7fc f928 	bl	8025230 <__errno>
 8028fe0:	0029      	movs	r1, r5
 8028fe2:	6006      	str	r6, [r0, #0]
 8028fe4:	0020      	movs	r0, r4
 8028fe6:	bd70      	pop	{r4, r5, r6, pc}

08028fe8 <xflow>:
 8028fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028fea:	0014      	movs	r4, r2
 8028fec:	001d      	movs	r5, r3
 8028fee:	2800      	cmp	r0, #0
 8028ff0:	d002      	beq.n	8028ff8 <xflow+0x10>
 8028ff2:	2180      	movs	r1, #128	@ 0x80
 8028ff4:	0609      	lsls	r1, r1, #24
 8028ff6:	185b      	adds	r3, r3, r1
 8028ff8:	9200      	str	r2, [sp, #0]
 8028ffa:	9301      	str	r3, [sp, #4]
 8028ffc:	9a00      	ldr	r2, [sp, #0]
 8028ffe:	9b01      	ldr	r3, [sp, #4]
 8029000:	0020      	movs	r0, r4
 8029002:	0029      	movs	r1, r5
 8029004:	f7d9 fb1a 	bl	800263c <__aeabi_dmul>
 8029008:	2222      	movs	r2, #34	@ 0x22
 802900a:	f7ff ffe3 	bl	8028fd4 <with_errno>
 802900e:	b003      	add	sp, #12
 8029010:	bd30      	pop	{r4, r5, pc}

08029012 <__math_uflow>:
 8029012:	2380      	movs	r3, #128	@ 0x80
 8029014:	b510      	push	{r4, lr}
 8029016:	2200      	movs	r2, #0
 8029018:	055b      	lsls	r3, r3, #21
 802901a:	f7ff ffe5 	bl	8028fe8 <xflow>
 802901e:	bd10      	pop	{r4, pc}

08029020 <__math_oflow>:
 8029020:	23e0      	movs	r3, #224	@ 0xe0
 8029022:	b510      	push	{r4, lr}
 8029024:	2200      	movs	r2, #0
 8029026:	05db      	lsls	r3, r3, #23
 8029028:	f7ff ffde 	bl	8028fe8 <xflow>
 802902c:	bd10      	pop	{r4, pc}

0802902e <with_errnof>:
 802902e:	b570      	push	{r4, r5, r6, lr}
 8029030:	000d      	movs	r5, r1
 8029032:	1c04      	adds	r4, r0, #0
 8029034:	f7fc f8fc 	bl	8025230 <__errno>
 8029038:	6005      	str	r5, [r0, #0]
 802903a:	1c20      	adds	r0, r4, #0
 802903c:	bd70      	pop	{r4, r5, r6, pc}

0802903e <xflowf>:
 802903e:	b510      	push	{r4, lr}
 8029040:	1c0b      	adds	r3, r1, #0
 8029042:	2800      	cmp	r0, #0
 8029044:	d002      	beq.n	802904c <xflowf+0xe>
 8029046:	2380      	movs	r3, #128	@ 0x80
 8029048:	061b      	lsls	r3, r3, #24
 802904a:	18cb      	adds	r3, r1, r3
 802904c:	1c18      	adds	r0, r3, #0
 802904e:	f7d7 ffa7 	bl	8000fa0 <__aeabi_fmul>
 8029052:	2122      	movs	r1, #34	@ 0x22
 8029054:	f7ff ffeb 	bl	802902e <with_errnof>
 8029058:	bd10      	pop	{r4, pc}

0802905a <__math_uflowf>:
 802905a:	2180      	movs	r1, #128	@ 0x80
 802905c:	b510      	push	{r4, lr}
 802905e:	0549      	lsls	r1, r1, #21
 8029060:	f7ff ffed 	bl	802903e <xflowf>
 8029064:	bd10      	pop	{r4, pc}

08029066 <__math_oflowf>:
 8029066:	21e0      	movs	r1, #224	@ 0xe0
 8029068:	b510      	push	{r4, lr}
 802906a:	05c9      	lsls	r1, r1, #23
 802906c:	f7ff ffe7 	bl	802903e <xflowf>
 8029070:	bd10      	pop	{r4, pc}
	...

08029074 <__ieee754_sqrt>:
 8029074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029076:	000a      	movs	r2, r1
 8029078:	000d      	movs	r5, r1
 802907a:	496d      	ldr	r1, [pc, #436]	@ (8029230 <__ieee754_sqrt+0x1bc>)
 802907c:	0004      	movs	r4, r0
 802907e:	0003      	movs	r3, r0
 8029080:	0008      	movs	r0, r1
 8029082:	b087      	sub	sp, #28
 8029084:	4028      	ands	r0, r5
 8029086:	4288      	cmp	r0, r1
 8029088:	d111      	bne.n	80290ae <__ieee754_sqrt+0x3a>
 802908a:	0022      	movs	r2, r4
 802908c:	002b      	movs	r3, r5
 802908e:	0020      	movs	r0, r4
 8029090:	0029      	movs	r1, r5
 8029092:	f7d9 fad3 	bl	800263c <__aeabi_dmul>
 8029096:	0002      	movs	r2, r0
 8029098:	000b      	movs	r3, r1
 802909a:	0020      	movs	r0, r4
 802909c:	0029      	movs	r1, r5
 802909e:	f7d8 fb25 	bl	80016ec <__aeabi_dadd>
 80290a2:	0004      	movs	r4, r0
 80290a4:	000d      	movs	r5, r1
 80290a6:	0020      	movs	r0, r4
 80290a8:	0029      	movs	r1, r5
 80290aa:	b007      	add	sp, #28
 80290ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80290ae:	2d00      	cmp	r5, #0
 80290b0:	dc11      	bgt.n	80290d6 <__ieee754_sqrt+0x62>
 80290b2:	0069      	lsls	r1, r5, #1
 80290b4:	0849      	lsrs	r1, r1, #1
 80290b6:	4321      	orrs	r1, r4
 80290b8:	d0f5      	beq.n	80290a6 <__ieee754_sqrt+0x32>
 80290ba:	2000      	movs	r0, #0
 80290bc:	4285      	cmp	r5, r0
 80290be:	d010      	beq.n	80290e2 <__ieee754_sqrt+0x6e>
 80290c0:	0022      	movs	r2, r4
 80290c2:	002b      	movs	r3, r5
 80290c4:	0020      	movs	r0, r4
 80290c6:	0029      	movs	r1, r5
 80290c8:	f7d9 fd80 	bl	8002bcc <__aeabi_dsub>
 80290cc:	0002      	movs	r2, r0
 80290ce:	000b      	movs	r3, r1
 80290d0:	f7d8 fe70 	bl	8001db4 <__aeabi_ddiv>
 80290d4:	e7e5      	b.n	80290a2 <__ieee754_sqrt+0x2e>
 80290d6:	1528      	asrs	r0, r5, #20
 80290d8:	d115      	bne.n	8029106 <__ieee754_sqrt+0x92>
 80290da:	2480      	movs	r4, #128	@ 0x80
 80290dc:	2100      	movs	r1, #0
 80290de:	0364      	lsls	r4, r4, #13
 80290e0:	e007      	b.n	80290f2 <__ieee754_sqrt+0x7e>
 80290e2:	0ada      	lsrs	r2, r3, #11
 80290e4:	3815      	subs	r0, #21
 80290e6:	055b      	lsls	r3, r3, #21
 80290e8:	2a00      	cmp	r2, #0
 80290ea:	d0fa      	beq.n	80290e2 <__ieee754_sqrt+0x6e>
 80290ec:	e7f5      	b.n	80290da <__ieee754_sqrt+0x66>
 80290ee:	0052      	lsls	r2, r2, #1
 80290f0:	3101      	adds	r1, #1
 80290f2:	4222      	tst	r2, r4
 80290f4:	d0fb      	beq.n	80290ee <__ieee754_sqrt+0x7a>
 80290f6:	1e4c      	subs	r4, r1, #1
 80290f8:	1b00      	subs	r0, r0, r4
 80290fa:	2420      	movs	r4, #32
 80290fc:	001d      	movs	r5, r3
 80290fe:	1a64      	subs	r4, r4, r1
 8029100:	40e5      	lsrs	r5, r4
 8029102:	408b      	lsls	r3, r1
 8029104:	432a      	orrs	r2, r5
 8029106:	494b      	ldr	r1, [pc, #300]	@ (8029234 <__ieee754_sqrt+0x1c0>)
 8029108:	0312      	lsls	r2, r2, #12
 802910a:	1844      	adds	r4, r0, r1
 802910c:	2180      	movs	r1, #128	@ 0x80
 802910e:	0b12      	lsrs	r2, r2, #12
 8029110:	0349      	lsls	r1, r1, #13
 8029112:	4311      	orrs	r1, r2
 8029114:	07c0      	lsls	r0, r0, #31
 8029116:	d403      	bmi.n	8029120 <__ieee754_sqrt+0xac>
 8029118:	0fda      	lsrs	r2, r3, #31
 802911a:	0049      	lsls	r1, r1, #1
 802911c:	1851      	adds	r1, r2, r1
 802911e:	005b      	lsls	r3, r3, #1
 8029120:	2500      	movs	r5, #0
 8029122:	1062      	asrs	r2, r4, #1
 8029124:	0049      	lsls	r1, r1, #1
 8029126:	2480      	movs	r4, #128	@ 0x80
 8029128:	9205      	str	r2, [sp, #20]
 802912a:	0fda      	lsrs	r2, r3, #31
 802912c:	1852      	adds	r2, r2, r1
 802912e:	2016      	movs	r0, #22
 8029130:	0029      	movs	r1, r5
 8029132:	005b      	lsls	r3, r3, #1
 8029134:	03a4      	lsls	r4, r4, #14
 8029136:	190e      	adds	r6, r1, r4
 8029138:	4296      	cmp	r6, r2
 802913a:	dc02      	bgt.n	8029142 <__ieee754_sqrt+0xce>
 802913c:	1931      	adds	r1, r6, r4
 802913e:	1b92      	subs	r2, r2, r6
 8029140:	192d      	adds	r5, r5, r4
 8029142:	0fde      	lsrs	r6, r3, #31
 8029144:	0052      	lsls	r2, r2, #1
 8029146:	3801      	subs	r0, #1
 8029148:	1992      	adds	r2, r2, r6
 802914a:	005b      	lsls	r3, r3, #1
 802914c:	0864      	lsrs	r4, r4, #1
 802914e:	2800      	cmp	r0, #0
 8029150:	d1f1      	bne.n	8029136 <__ieee754_sqrt+0xc2>
 8029152:	2620      	movs	r6, #32
 8029154:	2780      	movs	r7, #128	@ 0x80
 8029156:	0004      	movs	r4, r0
 8029158:	9604      	str	r6, [sp, #16]
 802915a:	063f      	lsls	r7, r7, #24
 802915c:	19c6      	adds	r6, r0, r7
 802915e:	46b4      	mov	ip, r6
 8029160:	4291      	cmp	r1, r2
 8029162:	db02      	blt.n	802916a <__ieee754_sqrt+0xf6>
 8029164:	d114      	bne.n	8029190 <__ieee754_sqrt+0x11c>
 8029166:	429e      	cmp	r6, r3
 8029168:	d812      	bhi.n	8029190 <__ieee754_sqrt+0x11c>
 802916a:	4660      	mov	r0, ip
 802916c:	4666      	mov	r6, ip
 802916e:	19c0      	adds	r0, r0, r7
 8029170:	9100      	str	r1, [sp, #0]
 8029172:	2e00      	cmp	r6, #0
 8029174:	da03      	bge.n	802917e <__ieee754_sqrt+0x10a>
 8029176:	43c6      	mvns	r6, r0
 8029178:	0ff6      	lsrs	r6, r6, #31
 802917a:	198e      	adds	r6, r1, r6
 802917c:	9600      	str	r6, [sp, #0]
 802917e:	1a52      	subs	r2, r2, r1
 8029180:	4563      	cmp	r3, ip
 8029182:	4189      	sbcs	r1, r1
 8029184:	4249      	negs	r1, r1
 8029186:	1a52      	subs	r2, r2, r1
 8029188:	4661      	mov	r1, ip
 802918a:	1a5b      	subs	r3, r3, r1
 802918c:	9900      	ldr	r1, [sp, #0]
 802918e:	19e4      	adds	r4, r4, r7
 8029190:	0fde      	lsrs	r6, r3, #31
 8029192:	0052      	lsls	r2, r2, #1
 8029194:	1992      	adds	r2, r2, r6
 8029196:	9e04      	ldr	r6, [sp, #16]
 8029198:	005b      	lsls	r3, r3, #1
 802919a:	3e01      	subs	r6, #1
 802919c:	087f      	lsrs	r7, r7, #1
 802919e:	9604      	str	r6, [sp, #16]
 80291a0:	2e00      	cmp	r6, #0
 80291a2:	d1db      	bne.n	802915c <__ieee754_sqrt+0xe8>
 80291a4:	431a      	orrs	r2, r3
 80291a6:	d01f      	beq.n	80291e8 <__ieee754_sqrt+0x174>
 80291a8:	4e23      	ldr	r6, [pc, #140]	@ (8029238 <__ieee754_sqrt+0x1c4>)
 80291aa:	4f24      	ldr	r7, [pc, #144]	@ (802923c <__ieee754_sqrt+0x1c8>)
 80291ac:	6830      	ldr	r0, [r6, #0]
 80291ae:	6871      	ldr	r1, [r6, #4]
 80291b0:	683a      	ldr	r2, [r7, #0]
 80291b2:	687b      	ldr	r3, [r7, #4]
 80291b4:	9200      	str	r2, [sp, #0]
 80291b6:	9301      	str	r3, [sp, #4]
 80291b8:	6832      	ldr	r2, [r6, #0]
 80291ba:	6873      	ldr	r3, [r6, #4]
 80291bc:	9202      	str	r2, [sp, #8]
 80291be:	9303      	str	r3, [sp, #12]
 80291c0:	9a00      	ldr	r2, [sp, #0]
 80291c2:	9b01      	ldr	r3, [sp, #4]
 80291c4:	f7d9 fd02 	bl	8002bcc <__aeabi_dsub>
 80291c8:	0002      	movs	r2, r0
 80291ca:	000b      	movs	r3, r1
 80291cc:	9802      	ldr	r0, [sp, #8]
 80291ce:	9903      	ldr	r1, [sp, #12]
 80291d0:	f7d7 f97e 	bl	80004d0 <__aeabi_dcmple>
 80291d4:	2800      	cmp	r0, #0
 80291d6:	d007      	beq.n	80291e8 <__ieee754_sqrt+0x174>
 80291d8:	6830      	ldr	r0, [r6, #0]
 80291da:	6871      	ldr	r1, [r6, #4]
 80291dc:	683a      	ldr	r2, [r7, #0]
 80291de:	687b      	ldr	r3, [r7, #4]
 80291e0:	1c67      	adds	r7, r4, #1
 80291e2:	d10f      	bne.n	8029204 <__ieee754_sqrt+0x190>
 80291e4:	9c04      	ldr	r4, [sp, #16]
 80291e6:	3501      	adds	r5, #1
 80291e8:	4b15      	ldr	r3, [pc, #84]	@ (8029240 <__ieee754_sqrt+0x1cc>)
 80291ea:	106a      	asrs	r2, r5, #1
 80291ec:	18d2      	adds	r2, r2, r3
 80291ee:	0863      	lsrs	r3, r4, #1
 80291f0:	07ed      	lsls	r5, r5, #31
 80291f2:	d502      	bpl.n	80291fa <__ieee754_sqrt+0x186>
 80291f4:	2180      	movs	r1, #128	@ 0x80
 80291f6:	0609      	lsls	r1, r1, #24
 80291f8:	430b      	orrs	r3, r1
 80291fa:	9905      	ldr	r1, [sp, #20]
 80291fc:	001c      	movs	r4, r3
 80291fe:	0509      	lsls	r1, r1, #20
 8029200:	188d      	adds	r5, r1, r2
 8029202:	e750      	b.n	80290a6 <__ieee754_sqrt+0x32>
 8029204:	f7d8 fa72 	bl	80016ec <__aeabi_dadd>
 8029208:	6877      	ldr	r7, [r6, #4]
 802920a:	6836      	ldr	r6, [r6, #0]
 802920c:	0002      	movs	r2, r0
 802920e:	000b      	movs	r3, r1
 8029210:	0030      	movs	r0, r6
 8029212:	0039      	movs	r1, r7
 8029214:	f7d7 f952 	bl	80004bc <__aeabi_dcmplt>
 8029218:	2800      	cmp	r0, #0
 802921a:	d004      	beq.n	8029226 <__ieee754_sqrt+0x1b2>
 802921c:	3402      	adds	r4, #2
 802921e:	4263      	negs	r3, r4
 8029220:	4163      	adcs	r3, r4
 8029222:	18ed      	adds	r5, r5, r3
 8029224:	e7e0      	b.n	80291e8 <__ieee754_sqrt+0x174>
 8029226:	2301      	movs	r3, #1
 8029228:	3401      	adds	r4, #1
 802922a:	439c      	bics	r4, r3
 802922c:	e7dc      	b.n	80291e8 <__ieee754_sqrt+0x174>
 802922e:	46c0      	nop			@ (mov r8, r8)
 8029230:	7ff00000 	.word	0x7ff00000
 8029234:	fffffc01 	.word	0xfffffc01
 8029238:	20000440 	.word	0x20000440
 802923c:	20000438 	.word	0x20000438
 8029240:	3fe00000 	.word	0x3fe00000

08029244 <_init>:
 8029244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029246:	46c0      	nop			@ (mov r8, r8)
 8029248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802924a:	bc08      	pop	{r3}
 802924c:	469e      	mov	lr, r3
 802924e:	4770      	bx	lr

08029250 <_fini>:
 8029250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029252:	46c0      	nop			@ (mov r8, r8)
 8029254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029256:	bc08      	pop	{r3}
 8029258:	469e      	mov	lr, r3
 802925a:	4770      	bx	lr
